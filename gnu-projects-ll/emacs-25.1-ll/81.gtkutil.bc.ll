; ModuleID = './src/gtkutil.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._GdkDisplay = type { %struct._GObject, %struct._GList*, %struct._GList*, [2 x i32], [2 x %struct._GdkDrawable*], [2 x i32], i32, %struct._GdkDevice*, %struct._GdkDisplayPointerHooks*, i8, i32, [2 x i32], [2 x i32], %struct._GList*, %struct.GdkKeyboardGrabInfo, %struct.GdkPointerWindowInfo, i32 }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._GdkDrawable = type { %struct._GObject }
%struct._GdkDevice = type { %struct._GObject, i8*, i32, i32, i32, i32, %struct._GdkDeviceAxis*, i32, %struct._GdkDeviceKey* }
%struct._GdkDeviceAxis = type { i32, double, double }
%struct._GdkDeviceKey = type { i32, i32 }
%struct._GdkDisplayPointerHooks = type { void (%struct._GdkDisplay*, %struct._GdkScreen**, i32*, i32*, i32*)*, %struct._GdkDrawable* (%struct._GdkDisplay*, %struct._GdkDrawable*, i32*, i32*, i32*)*, %struct._GdkDrawable* (%struct._GdkDisplay*, i32*, i32*)* }
%struct._GdkScreen = type { %struct._GObject, i8, [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], [32 x %struct._GdkGC*], %struct._cairo_font_options*, double }
%struct._GdkGC = type { %struct._GObject, i32, i32, i32, i32, %struct._GdkColormap* }
%struct._GdkColormap = type { %struct._GObject, i32, %struct._GdkColor*, %struct._GdkVisual*, i8* }
%struct._GdkColor = type { i32, i16, i16, i16 }
%struct._GdkVisual = type { %struct._GObject, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._cairo_font_options = type opaque
%struct._GList = type { i8*, %struct._GList*, %struct._GList* }
%struct.GdkKeyboardGrabInfo = type { %struct._GdkDrawable*, %struct._GdkDrawable*, i64, i32, i32 }
%struct.GdkPointerWindowInfo = type { %struct._GdkDrawable*, %struct._GdkDrawable*, double, double, i32, i32, i64 }
%struct.x_display_info = type { %struct.x_display_info*, %struct.terminal*, %struct._XDisplay*, i32, i64, i32, %struct.Screen*, double, double, %struct.Visual*, i64, i32, i32, i64, i64, i64, i64, i64, i64, void (%struct.frame*, i1)*, %struct._GdkCursor*, %struct._XrmHashBucketRec*, i32, i32, %struct._XGC*, %struct.Mouse_HLInfo, i32, i8*, i32, %struct.x_bitmap_record*, i64, i64, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.frame*, %struct.scroll_bar*, i64, i32, i32, %struct.XRectangle, i64, i64, %struct._XIM*, %struct.XIMStyles*, %struct.xim_inst_t*, %struct.color_name_cache_entry*, %struct.XColor*, i32, i32, i32, i32, i32, i32, i32, i32, i64*, i64, i64, i64, i64, i64*, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.xcb_connection_t* }
%struct.terminal = type { %struct.vectorlike_header, i64, i64, i64, i64, %struct.terminal*, i32, i32, i32, i8*, %struct.kboard*, %struct.image_cache*, %union.display_info, %struct.coding_system*, %struct.coding_system*, %struct.redisplay_interface*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame*, i32, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, %struct.glyph*, i32)*, void (%struct.frame*, i32)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.terminal*)*, void (%struct.terminal*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.frame*, i32)*, void (%struct.frame**, i32, i64*, i32*, i64*, i64*, i64*)*, void (%struct.frame*)*, void (%struct.frame*, i1)*, void (%struct.frame*)*, i64 (%struct.frame*, i32, i32, i32, i64, i8**)*, i64 (%struct.frame*, i64, i64)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.frame*)*, i32 (%struct.terminal*, %struct.input_event*)*, void (%struct.frame*)*, void (%struct.frame*)*, void (%struct.terminal*)* }
%struct.vectorlike_header = type { i64 }
%struct.kboard = type { %struct.kboard*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, i32, i64, i8, i8, i64 }
%struct.image_cache = type { %struct.image**, %struct.image**, i64, i64, i64 }
%struct.image = type { %struct.timespec, i64, i64, %struct._XImage*, %struct._XImage*, i64*, i32, i64, i64, i64, i8, i32, i32, [4 x i32], i32, i64, i64, i32, i32, i32, %struct.image_type*, i8, i64, i64, i64, %struct.image*, %struct.image* }
%struct.timespec = type { i64, i64 }
%struct._XImage = type { i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i8*, %struct.funcs }
%struct.funcs = type { %struct._XImage* (%struct._XDisplay*, %struct.Visual*, i32, i32, i32, i8*, i32, i32, i32, i32)*, i32 (%struct._XImage*)*, i64 (%struct._XImage*, i32, i32)*, i32 (%struct._XImage*, i32, i32, i64)*, %struct._XImage* (%struct._XImage*, i32, i32, i32, i32)*, i32 (%struct._XImage*, i64)* }
%struct.image_type = type { i32, i1 (i64)*, i1 (%struct.frame*, %struct.image*)*, void (%struct.frame*, %struct.image*)*, i1 ()*, %struct.image_type* }
%union.display_info = type { %struct.tty_display_info* }
%struct.tty_display_info = type opaque
%struct.coding_system = type { i64, i32, i32, %union.anon.6, i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8*, i64, i64, i64, i64, i8*, i32*, i32, i32, [64 x i8], i32, i32, i1 (%struct.coding_system*, %struct.coding_detection_info*)*, void (%struct.coding_system*)*, i1 (%struct.coding_system*)* }
%union.anon.6 = type { %struct.ccl_spec*, [328 x i8] }
%struct.ccl_spec = type opaque
%struct.coding_detection_info = type { i32, i32, i32 }
%struct.redisplay_interface = type { void (%struct.frame*, i64, i64)**, void (%struct.it*)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.glyph*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.run*)*, void (%struct.window*, %struct.glyph_row*)*, void (%struct.window*)*, void (%struct.window*, i1, i1)*, void (%struct.frame*)*, void (%struct.window*)*, void (%struct.glyph*, %struct.frame*, i32*, i32*)*, void (%struct.window*, %struct.glyph_row*, i32, i32)*, void (%struct.window*, %struct.glyph_row*, %struct.draw_fringe_bitmap_params*)*, void (i32, i16*, i32, i32)*, void (i32)*, void (%struct.glyph_string*)*, void (%struct.glyph_string*)*, void (%struct.frame*, i64)*, void (%struct.frame*, i32, i32, i32, i32)*, void (%struct.window*, %struct.glyph_row*, i32, i32, i32, i32, i1, i1)*, void (%struct.window*, i32, i32, i32)*, void (%struct.window*, i32, i32, i32, i32)*, void (%struct.frame*, i32, i32, i32, i32, i32)*, void (%struct.frame*)*, void (%struct.frame*)* }
%struct.it = type { i64, %struct.window*, %struct.frame*, i32, i64, i64, i64, i64, i8*, i64, i64, i8, %struct.Lisp_Char_Table*, i64*, i64*, i32, i32, i32, [16 x i64], %struct.display_pos, %struct.display_pos, i64, i64, [16 x i64], [16 x i64], i64, i64, [5 x %struct.iterator_stack_entry], i32, i64, i32, i32, i16, i32, i32, i32, i32, %struct.composition_it, i32, i32, i64, %struct.xwidget*, %struct.it_slice, i64, i16, i16, i64, i64, %struct.text_pos, i16, i16, i32, i32, i32, i32, i32, i32, i32, i32, %struct.glyph_row*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.text_pos, i32, i32, i32, i32, i56, i24, %struct.bidi_it, i32 }
%struct.window = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.glyph_matrix*, %struct.glyph_matrix*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.cursor_pos, %struct.cursor_pos, %struct.cursor_pos, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i16, i32, i64 }
%struct.glyph_matrix = type { %struct.glyph_pool*, %struct.glyph_row*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.buffer*, i64, i64 }
%struct.glyph_pool = type { %struct.glyph*, i64, i32, i32 }
%struct.glyph = type { i64, i64, i16, i16, i16, i16, i24, i24, %union.anon, %union.anon.1 }
%union.anon = type { %struct.glyph_slice }
%struct.glyph_slice = type { i64 }
%union.anon.1 = type { i32 }
%struct.buffer = type opaque
%struct.cursor_pos = type { i32, i32, i32, i32 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.display_pos = type { %struct.text_pos, i64, %struct.text_pos, i32 }
%struct.iterator_stack_entry = type { i64, i32, i64, i64, i64, i64, %struct.composition_it, i32, %union.anon.7, %struct.text_pos, %struct.display_pos, i64, i32, i32, i32, i8, i32, i16, i64, i64 }
%union.anon.7 = type { %struct.anon.8 }
%struct.anon.8 = type { i64, %struct.it_slice, i64 }
%struct.composition_it = type { i64, i64, i32, i32, i64, i32, i8, i64, i32, i32, i32, i32, i32 }
%struct.xwidget = type opaque
%struct.it_slice = type { i64, i64, i64, i64 }
%struct.glyph_row = type <{ [4 x %struct.glyph*], [4 x i16], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.display_pos, %struct.display_pos, %struct.text_pos, %struct.text_pos, i32, [11 x i8], i8, i24, i24, i32, i40, i32, %struct.XRectangle* }>
%struct.text_pos = type { i64, i64 }
%struct.bidi_it = type { i64, i64, i32, i64, i64, i32, i32, i32, i8, i8, i64, i64, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, %struct.bidi_saved_info, i64, i32, i64, i32, i32, i32, i64, i32, i32, [128 x %struct.bidi_stack], %struct.bidi_string_data, %struct.window*, i32, i64, i8 }
%struct.bidi_saved_info = type { i64, i32, i32 }
%struct.bidi_stack = type { i64, i16, i8, i8 }
%struct.bidi_string_data = type { i64, i8*, i64, i64, i8 }
%struct.run = type { i32, i32, i32, i32, i32, i32 }
%struct.draw_fringe_bitmap_params = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, %struct.face* }
%struct.face = type { [19 x i64], i32, %struct._XGC*, i64, i64, i64, i64, i64, i64, i64, %struct.font*, i32, i32, i24, i32, %struct.face*, %struct.face*, %struct.face*, i8* }
%struct.font = type { %struct.vectorlike_header, [17 x i64], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.font_driver* }
%struct.font_driver = type { i64, i8, i64 (%struct.frame*)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*, i64)*, i64 (%struct.frame*)*, void (i64)*, i64 (%struct.frame*, i64, i32)*, void (%struct.font*)*, void (%struct.frame*, %struct.face*)*, void (%struct.frame*, %struct.face*)*, i32 (i64, i32)*, i32 (%struct.font*, i32)*, void (%struct.font*, i32*, i32, %struct.font_metrics*)*, i32 (%struct.glyph_string*, i32, i32, i32, i32, i1)*, i32 (%struct.font*, i32, %struct.font_bitmap*, i32)*, void (%struct.font*, %struct.font_bitmap*)*, i32 (%struct.font*, i32, i32, i32*, i32*)*, i64 (%struct.font*)*, i32 (%struct.font*, i64, i64, i32, i32, i64, i32, i1)*, i32 (%struct.frame*)*, i32 (%struct.frame*)*, i64 (i64)*, i32 (%struct.frame*, %struct.font*)*, i32 (%struct.font*, i32, i32*)*, void (i64, i64)*, i1 (%struct.frame*, i64, i64)*, i64 (%struct.font*)* }
%struct.font_metrics = type { i16, i16, i16, i16, i16 }
%struct.glyph_string = type { i32, i32, i32, i32, i32, i32, i32, i32, %struct.frame*, %struct.window*, %struct._XDisplay*, i64, %struct.glyph_row*, i32, %struct.XChar2b*, i32, i32, %struct.face*, %struct.font*, %struct.composition*, i64, i32, i32, i8, %struct._XGC*, %struct.glyph*, %struct.image*, %struct.xwidget*, %struct.glyph_slice, %struct.glyph_string*, %struct.glyph_string*, [2 x %struct.XRectangle], i32, i32, i32, %struct.glyph_string*, %struct.glyph_string* }
%struct.XChar2b = type { i8, i8 }
%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.font_bitmap = type { i32, i32, i32, i32, i8*, i32, i32, i32 }
%struct.input_event = type { i32, i32, i32, i64, i64, i64, i64, i64 }
%struct._XDisplay = type opaque
%struct.Screen = type { %struct._XExtData*, %struct._XDisplay*, i64, i32, i32, i32, i32, i32, %struct.Depth*, i32, %struct.Visual*, %struct._XGC*, i64, i64, i64, i32, i32, i32, i32, i64 }
%struct._XExtData = type { i32, %struct._XExtData*, i32 (%struct._XExtData*)*, i8* }
%struct.Depth = type { i32, i32, %struct.Visual* }
%struct.Visual = type { %struct._XExtData*, i64, i32, i64, i64, i64, i32, i32 }
%struct._GdkCursor = type { i32, i32 }
%struct._XrmHashBucketRec = type opaque
%struct._XGC = type opaque
%struct.Mouse_HLInfo = type { i32, i32, i32, i32, i32, i32, i64, i32, i64, %struct.frame*, i32, i32, i8 }
%struct.x_bitmap_record = type { i64, i8, i64, i8*, i32, i32, i32, i32 }
%struct.frame = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.face_cache*, i32, %struct.glyph_pool*, %struct.glyph_pool*, %struct.glyph_matrix*, %struct.glyph_matrix*, i48, i32, i32, i32, i32, i8*, i32*, i32*, i32*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.terminal*, %union.output_data, %struct.font_driver_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x double], double, i32, i64, i64 }
%struct.face_cache = type { %struct.face**, %struct.frame*, %struct.face**, i64, i32, i8 }
%union.output_data = type { %struct.tty_output* }
%struct.tty_output = type opaque
%struct.font_driver_list = type { i8, %struct.font_driver*, %struct.font_driver_list* }
%struct.scroll_bar = type { %struct.vectorlike_header, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i8 }
%struct.XRectangle = type { i16, i16, i16, i16 }
%struct._XIM = type opaque
%struct.XIMStyles = type { i16, i64* }
%struct.xim_inst_t = type { %struct.x_display_info*, i8* }
%struct.color_name_cache_entry = type { %struct.color_name_cache_entry*, %struct.XColor, i8* }
%struct.XColor = type { i64, i16, i16, i16, i8, i8 }
%struct.xcb_connection_t = type opaque
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.xg_list_node_ = type { %struct.xg_list_node_*, %struct.xg_list_node_* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.anon.14 = type { %struct._GtkWidget**, i64, i64 }
%struct._GtkWidget = type { %struct._GtkObject, i16, i8, i8, i8*, %struct._GtkStyle*, %struct._GtkRequisition, %struct._GdkRectangle, %struct._GdkDrawable*, %struct._GtkWidget* }
%struct._GtkObject = type { %struct._GObject, i32 }
%struct._GtkStyle = type { %struct._GObject, [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], %struct._GdkColor, %struct._GdkColor, %struct._PangoFontDescription*, i32, i32, [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], [5 x %struct._GdkGC*], %struct._GdkGC*, %struct._GdkGC*, [5 x %struct._GdkDrawable*], i32, i32, %struct._GdkColormap*, %struct._GdkFont*, %struct._PangoFontDescription*, %struct._GtkRcStyle*, %struct._GSList*, %struct._GArray*, %struct._GSList* }
%struct._GdkFont = type { i32, i32, i32 }
%struct._PangoFontDescription = type opaque
%struct._GtkRcStyle = type { %struct._GObject, i8*, [5 x i8*], %struct._PangoFontDescription*, [5 x i32], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], [5 x %struct._GdkColor], i32, i32, %struct._GArray*, %struct._GSList*, %struct._GSList*, i8 }
%struct._GArray = type { i8*, i32 }
%struct._GSList = type { i8*, %struct._GSList* }
%struct._GtkRequisition = type { i32, i32 }
%struct._GdkRectangle = type { i32, i32, i32, i32 }
%struct._GdkDisplayManager = type opaque
%struct.x_output = type { i32, i32, i32, i32, i32, i64, %struct._XGC*, %struct._XGC*, %struct._XGC*, i64, i64, i64, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i8, %struct._GdkGeometry, i64, %struct._GtkTooltip*, %struct._GtkWidget*, %struct._GtkWindow*, i64, %struct.font*, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.XWMHints, %struct.x_display_info*, %union._XEvent*, i8, %struct._XIC*, i64, %struct._XOC*, %struct.relief, %struct.relief, i64, i32, i32, i32 }
%struct._GdkGeometry = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, i32 }
%struct._GtkTooltip = type opaque
%struct._GtkWindow = type <{ %struct._GtkBin, i8*, i8*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkWindowGeometryInfo*, %struct._GdkDrawable*, %struct._GtkWindowGroup*, i16, i32, [2 x i8], i32, i32, i32, i32, i32, i32, %struct._GdkScreen* }>
%struct._GtkBin = type { %struct._GtkContainer, %struct._GtkWidget* }
%struct._GtkContainer = type { %struct._GtkWidget, %struct._GtkWidget*, i24 }
%struct._GtkWindowGeometryInfo = type opaque
%struct._GtkWindowGroup = type { %struct._GObject, %struct._GSList* }
%struct.XWMHints = type { i64, i32, i32, i64, i64, i32, i32, i64, i64 }
%union._XEvent = type { [24 x i64] }
%struct._XIC = type opaque
%struct._XOC = type opaque
%struct.relief = type { %struct._XGC*, i64 }
%struct._GtkSettings = type { %struct._GObject, %struct._GData*, %struct._GtkSettingsPropertyValue*, %struct._GtkRcContext*, %struct._GdkScreen* }
%struct._GtkSettingsPropertyValue = type opaque
%struct._GtkRcContext = type opaque
%union._GdkEvent = type { %struct._GdkEventCrossing }
%struct._GdkEventCrossing = type { i32, %struct._GdkDrawable*, i8, %struct._GdkDrawable*, i32, double, double, double, double, i32, i32, i32, i32 }
%struct._GdkEventAny = type { i32, %struct._GdkDrawable*, i8 }
%struct._GtkBox = type { %struct._GtkContainer, %struct._GList*, i16, i8 }
%struct._GClosure = type { i32, void (%struct._GClosure*, %struct._GValue*, i32, %struct._GValue*, i8*, i8*)*, i8*, %struct._GClosureNotifyData* }
%struct._GValue = type { i64, [2 x %union.anon.12] }
%union.anon.12 = type { i64 }
%struct._GClosureNotifyData = type { i8*, {}* }
%struct._GtkMenu = type { %struct._GtkMenuShell, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkAccelGroup*, i8*, void (%struct._GtkMenu*, i32*, i32*, i32*, i8*)*, i8*, i32, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkAdjustment*, %struct._GdkDrawable*, %struct._GdkDrawable*, i32, i32, i32, i32, %struct._GdkRegion*, i32, i8 }
%struct._GtkMenuShell = type { %struct._GtkContainer, %struct._GList*, %struct._GtkWidget*, %struct._GtkWidget*, i32, i32, i8 }
%struct._GtkAccelGroup = type { %struct._GObject, i32, i32, %struct._GSList*, i32, %struct._GtkAccelGroupEntry* }
%struct._GtkAccelGroupEntry = type { %struct._GtkAccelKey, %struct._GClosure*, i32 }
%struct._GtkAccelKey = type { i32, i32, i16 }
%struct._GtkAdjustment = type { %struct._GtkObject, double, double, double, double, double, double }
%struct._GdkRegion = type opaque
%struct._GtkToolbar = type { %struct._GtkContainer, i32, %struct._GList*, i32, i32, i32, %struct._GtkTooltips*, i32, i32, i32, i32, i8 }
%struct._GtkTooltips = type { %struct._GtkObject, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkTooltipsData*, %struct._GList*, i40, i32, %struct._GTimeVal }
%struct._GtkTooltipsData = type { %struct._GtkTooltips*, %struct._GtkWidget*, i8*, i8* }
%struct._GTimeVal = type { i64, i64 }
%struct._GtkToolItem = type { %struct._GtkBin, %struct._GtkToolItemPrivate* }
%struct._GtkToolItemPrivate = type opaque
%struct.xg_frame_tb_info = type { i64, i64, i32, i32, i32, i32 }
%struct._GtkIconTheme = type { %struct._GObject, %struct._GtkIconThemePrivate* }
%struct._GtkIconThemePrivate = type opaque
%struct.Lisp_Cons = type { i64, %union.anon.13 }
%union.anon.13 = type { i64 }
%struct._GtkImage = type { %struct._GtkMisc, i32, %union.anon.15, %struct._GdkDrawable*, i32 }
%struct._GtkMisc = type { %struct._GtkWidget, float, float, i16, i16 }
%union.anon.15 = type { %struct._GtkImageAnimationData }
%struct._GtkImageAnimationData = type { %struct._GdkPixbufAnimation*, %struct._GdkPixbufAnimationIter*, i32 }
%struct._GdkPixbufAnimation = type opaque
%struct._GdkPixbufAnimationIter = type opaque
%struct._GtkLabel = type { %struct._GtkMisc, i8*, i16, i32, i8*, %struct._PangoAttrList*, %struct._PangoAttrList*, %struct._PangoLayout*, %struct._GtkWidget*, %struct._GtkWindow*, %struct._GtkLabelSelectionInfo* }
%struct._PangoAttrList = type opaque
%struct._PangoLayout = type opaque
%struct._GtkLabelSelectionInfo = type opaque
%struct._GParamSpec = type { %struct._GTypeInstance, i8*, i32, i64, i64, i8*, i8*, %struct._GData*, i32, i32 }
%struct._GdkPixbuf = type opaque
%struct._GtkFileSelection = type { %struct._GtkDialog, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GList*, %struct._GtkWidget*, %struct._GtkWidget*, i8*, i8*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GPtrArray*, i8* }
%struct._GtkDialog = type { %struct._GtkWindow, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget* }
%struct._GPtrArray = type { i8**, i32 }
%struct._GtkFileChooser = type opaque
%struct._GtkToggleButton = type { %struct._GtkButton, i8 }
%struct._GtkButton = type { %struct._GtkBin, %struct._GdkDrawable*, i8*, i32, i16 }
%struct.xg_dialog_data = type { %struct._GMainLoop*, i32, %struct._GtkWidget*, i32 }
%struct._GMainLoop = type opaque
%struct._GMainContext = type opaque
%struct._GtkFontSelectionDialog = type { %struct._GtkDialog, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, %struct._GtkWidget*, i32, i32 }
%struct.xg_menu_item_cb_data_ = type { %struct.xg_list_node_, i64, i64, i8*, %struct.xg_menu_cb_data_* }
%struct.xg_menu_cb_data_ = type { %struct.xg_list_node_, %struct.frame*, i64, i32, void ()*, i32 }
%struct._widget_value = type { i64, i8*, i8*, i64, i8*, i64, i8, i8, i8, i32, %struct._widget_value*, i8*, %struct._widget_value* }
%struct._GtkMenuItem = type { %struct._GtkItem, %struct._GtkWidget*, %struct._GdkDrawable*, i16, i16, i8*, i8, i32 }
%struct._GtkItem = type { %struct._GtkBin }
%struct.XButtonEvent = type { i32, i64, i32, %struct._XDisplay*, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct._GtkRange = type { %struct._GtkWidget, %struct._GtkAdjustment*, i32, i8, i32, i32, %struct._GdkRectangle, i32, i32, i32, i8, %struct._GtkRangeLayout*, %struct._GtkRangeStepTimer*, i32, i32, i32, %struct._GdkDrawable* }
%struct._GtkRangeLayout = type opaque
%struct._GtkRangeStepTimer = type opaque
%struct._GtkFixed = type { %struct._GtkContainer, %struct._GList* }
%struct._GtkOrientable = type opaque
%struct._GtkStockItem = type { i8*, i8*, i32, i32, i8* }
%struct._GtkBindingSet = type { i8*, i32, %struct._GSList*, %struct._GSList*, %struct._GSList*, %struct._GtkBindingEntry*, %struct._GtkBindingEntry*, i8 }
%struct._GtkBindingEntry = type { i32, i32, %struct._GtkBindingSet*, i8, %struct._GtkBindingEntry*, %struct._GtkBindingEntry*, %struct._GtkBindingSignal* }
%struct._GtkBindingSignal = type { %struct._GtkBindingSignal*, i8*, i32, %struct._GtkBindingArg* }
%struct._GtkBindingArg = type { i64, %union.anon.16 }
%union.anon.16 = type { i64 }
%struct._GError = type { i32, i32, i8* }
%struct._GtkCheckMenuItem = type { %struct._GtkMenuItem, i8 }
%struct._GtkRadioMenuItem = type { %struct._GtkCheckMenuItem, %struct._GSList* }
%struct._GdkEventExpose = type { i32, %struct._GdkDrawable*, i8, %struct._GdkRectangle, %struct._GdkRegion*, i32 }
%struct._GdkEventButton = type { i32, %struct._GdkDrawable*, i8, i32, double, double, double*, i32, i32, %struct._GdkDevice*, double, double }

@gdpy_def = internal global %struct._GdkDisplay* null, align 8
@x_display_list = external global %struct.x_display_info*, align 8
@.str = private unnamed_addr constant [23 x i8] c"gtk_selection_bg_color\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"gtk_selection_fg_color\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"gtk-enable-tooltips\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"restore-tt\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"gdk-display-current-tooltip\00", align 1
@frame_garbaged = external global i8, align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"Emacs\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"pane\00", align 1
@globals = external global %struct.emacs_globals, align 8
@.str.7 = private unnamed_addr constant [13 x i8] c"delete-event\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"<none>\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"Dummy text\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"query-tooltip\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"notify::gtk-theme-name\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"xg_frame_tb_info\00", align 1
@.str.13 = private unnamed_addr constant [17 x i8] c"emacs-filedialog\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"Pick a font\00", align 1
@x_last_font_name = internal global i8* null, align 8
@.str.15 = private unnamed_addr constant [17 x i8] c"emacs-fontdialog\00", align 1
@xg_menu_cb_list = internal global %struct.xg_list_node_ zeroinitializer, align 8
@xg_menu_item_cb_list = internal global %struct.xg_list_node_ zeroinitializer, align 8
@Vframe_list = external global i64, align 8
@.str.16 = private unnamed_addr constant [8 x i8] c"menubar\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"popup\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"dialog\00", align 1
@.str.19 = private unnamed_addr constant [13 x i8] c"emacs-dialog\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.20 = private unnamed_addr constant [49 x i8] c"bad type in xg_create_widget: %s, doing nothing\0A\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"emacs_frame\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@scroll_bar_width_for_theme = internal global i32 0, align 4
@id_to_widget = internal global %struct.anon.14 zeroinitializer, align 8
@.str.23 = private unnamed_addr constant [8 x i8] c"destroy\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"change-value\00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"button-release-event\00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"min-slider-length\00", align 1
@xg_ignore_gtk_scrollbar = common global i8 0, align 1
@.str.29 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.30 = private unnamed_addr constant [26 x i8] c"emacs-tool-bar-stock-name\00", align 1
@.str.31 = private unnamed_addr constant [25 x i8] c"emacs-tool-bar-icon-name\00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c"emacs-tool-bar-image\00", align 1
@.str.33 = private unnamed_addr constant [19 x i8] c"gtk-menu-bar-accel\00", align 1
@.str.34 = private unnamed_addr constant [19 x i8] c"gtk-key-theme-name\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"cancel\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"GDK_SCALE\00", align 1
@gdk_display = external global %struct._XDisplay*, align 8
@.str.38 = private unnamed_addr constant [15 x i8] c"=%dx%d%c%d%c%d\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"Gtk\00", align 1
@.str.40 = private unnamed_addr constant [23 x i8] c"Failed to parse: '%s'\0A\00", align 1
@.str.41 = private unnamed_addr constant [17 x i8] c"visible children\00", align 1
@.str.42 = private unnamed_addr constant [22 x i8] c"XX %s-WARNING **: %s\0A\00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"has-tooltip\00", align 1
@.str.44 = private unnamed_addr constant [18 x i8] c"hierarchy-changed\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"theme-name\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"gtk-cancel\00", align 1
@.str.47 = private unnamed_addr constant [9 x i8] c"gtk-open\00", align 1
@.str.48 = private unnamed_addr constant [7 x i8] c"gtk-ok\00", align 1
@.str.49 = private unnamed_addr constant [19 x i8] c"Show hidden files.\00", align 1
@.str.50 = private unnamed_addr constant [12 x i8] c"show-hidden\00", align 1
@.str.51 = private unnamed_addr constant [8 x i8] c"clicked\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"notify\00", align 1
@.str.53 = private unnamed_addr constant [50 x i8] c"\0AType C-l to display a file name text entry box.\0A\00", align 1
@.str.54 = private unnamed_addr constant [118 x i8] c"\0AIf you don't like this file selector, use the corresponding\0Akey binding or customize use-file-dialog to turn it off.\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c"response\00", align 1
@.str.56 = private unnamed_addr constant [8 x i8] c"message\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@.str.58 = private unnamed_addr constant [12 x i8] c"Information\00", align 1
@.str.59 = private unnamed_addr constant [7 x i8] c"Prompt\00", align 1
@.str.60 = private unnamed_addr constant [9 x i8] c"Question\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"\5C%03o\00", align 1
@.str.62 = private unnamed_addr constant [19 x i8] c"enter-notify-event\00", align 1
@.str.63 = private unnamed_addr constant [19 x i8] c"leave-notify-event\00", align 1
@.str.64 = private unnamed_addr constant [15 x i8] c"selection-done\00", align 1
@.str.65 = private unnamed_addr constant [15 x i8] c"emacs-menuitem\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"emacs_menuitem\00", align 1
@.str.67 = private unnamed_addr constant [9 x i8] c"activate\00", align 1
@.str.68 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.69 = private unnamed_addr constant [6 x i8] c"label\00", align 1
@.str.70 = private unnamed_addr constant [14 x i8] c"emacs-toolbar\00", align 1
@.str.71 = private unnamed_addr constant [14 x i8] c"size-allocate\00", align 1
@.str.72 = private unnamed_addr constant [25 x i8] c"file-name-sans-extension\00", align 1
@.str.73 = private unnamed_addr constant [13 x i8] c"expose-event\00", align 1
@.str.74 = private unnamed_addr constant [24 x i8] c"emacs-tool-bar-modifier\00", align 1
@.str.75 = private unnamed_addr constant [9 x i8] c"position\00", align 1
@.str.76 = private unnamed_addr constant [13 x i8] c"slider-width\00", align 1
@.str.77 = private unnamed_addr constant [14 x i8] c"trough-border\00", align 1
@scroll_bar_height_for_theme = internal global i32 0, align 4

; Function Attrs: nounwind uwtable
define void @xg_display_open(i8* %display_name, %struct._XDisplay** %dpy) #0 {
entry:
  %display_name.addr = alloca i8*, align 8
  %dpy.addr = alloca %struct._XDisplay**, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  store i8* %display_name, i8** %display_name.addr, align 8
  store %struct._XDisplay** %dpy, %struct._XDisplay*** %dpy.addr, align 8
  call void @unrequest_sigio()
  %0 = load i8*, i8** %display_name.addr, align 8
  %call = call %struct._GdkDisplay* @gdk_display_open(i8* %0)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  call void @request_sigio()
  %1 = load %struct._GdkDisplay*, %struct._GdkDisplay** @gdpy_def, align 8
  %tobool = icmp ne %struct._GdkDisplay* %1, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %tobool1 = icmp ne %struct._GdkDisplay* %2, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  store %struct._GdkDisplay* %3, %struct._GdkDisplay** @gdpy_def, align 8
  %call2 = call %struct._GdkDisplayManager* @gdk_display_manager_get()
  %4 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  call void @gdk_display_manager_set_default_display(%struct._GdkDisplayManager* %call2, %struct._GdkDisplay* %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %tobool3 = icmp ne %struct._GdkDisplay* %5, null
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %call4 = call %struct._XDisplay* @gdk_x11_display_get_xdisplay(%struct._GdkDisplay* %6)
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._XDisplay* [ %call4, %cond.true ], [ null, %cond.false ]
  %7 = load %struct._XDisplay**, %struct._XDisplay*** %dpy.addr, align 8
  store %struct._XDisplay* %cond, %struct._XDisplay** %7, align 8
  ret void
}

declare void @unrequest_sigio() #1

declare %struct._GdkDisplay* @gdk_display_open(i8*) #1

declare void @request_sigio() #1

declare void @gdk_display_manager_set_default_display(%struct._GdkDisplayManager*, %struct._GdkDisplay*) #1

declare %struct._GdkDisplayManager* @gdk_display_manager_get() #1

declare %struct._XDisplay* @gdk_x11_display_get_xdisplay(%struct._GdkDisplay*) #1

; Function Attrs: nounwind uwtable
define void @xg_display_close(%struct._XDisplay* %dpy) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  %dpyinfo = alloca %struct.x_display_info*, align 8
  %gdpy_new = alloca %struct._GdkDisplay*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %0)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  %call1 = call %struct._GdkDisplay* @gdk_display_get_default()
  %1 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %cmp = icmp eq %struct._GdkDisplay* %call1, %1
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  store %struct._GdkDisplay* null, %struct._GdkDisplay** %gdpy_new, align 8
  %2 = load %struct.x_display_info*, %struct.x_display_info** @x_display_list, align 8
  store %struct.x_display_info* %2, %struct.x_display_info** %dpyinfo, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %tobool = icmp ne %struct.x_display_info* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 2
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %6 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %cmp2 = icmp ne %struct._XDisplay* %5, %6
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %for.body
  %7 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %display4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display4, align 8
  %call5 = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %8)
  store %struct._GdkDisplay* %call5, %struct._GdkDisplay** %gdpy_new, align 8
  %call6 = call %struct._GdkDisplayManager* @gdk_display_manager_get()
  %9 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy_new, align 8
  call void @gdk_display_manager_set_default_display(%struct._GdkDisplayManager* %call6, %struct._GdkDisplay* %9)
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.x_display_info*, %struct.x_display_info** %dpyinfo, align 8
  %next = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %10, i32 0, i32 0
  %11 = load %struct.x_display_info*, %struct.x_display_info** %next, align 8
  store %struct.x_display_info* %11, %struct.x_display_info** %dpyinfo, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.3, %for.cond
  %12 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy_new, align 8
  store %struct._GdkDisplay* %12, %struct._GdkDisplay** @gdpy_def, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %for.end, %entry
  %13 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  call void @gdk_display_close(%struct._GdkDisplay* %13)
  ret void
}

declare %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay*) #1

declare %struct._GdkDisplay* @gdk_display_get_default() #1

declare void @gdk_display_close(%struct._GdkDisplay*) #1

; Function Attrs: nounwind uwtable
define %struct._GdkCursor* @xg_create_default_cursor(%struct._XDisplay* %dpy) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %0)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  %1 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %call1 = call %struct._GdkCursor* @gdk_cursor_new_for_display(%struct._GdkDisplay* %1, i32 68)
  ret %struct._GdkCursor* %call1
}

declare %struct._GdkCursor* @gdk_cursor_new_for_display(%struct._GdkDisplay*, i32) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_check_special_colors(%struct.frame* %f, i8* %color_name, %struct.XColor* %color) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %color_name.addr = alloca i8*, align 8
  %color.addr = alloca %struct.XColor*, align 8
  %success_p = alloca i8, align 1
  %get_bg = alloca i8, align 1
  %get_fg = alloca i8, align 1
  %gsty = alloca %struct._GtkStyle*, align 8
  %grgb = alloca %struct._GdkColor*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %color_name, i8** %color_name.addr, align 8
  store %struct.XColor* %color, %struct.XColor** %color.addr, align 8
  store i8 0, i8* %success_p, align 1
  %0 = load i8*, i8** %color_name.addr, align 8
  %call = call i32 @strcmp(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0), i8* %0) #7
  %cmp = icmp eq i32 %call, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %get_bg, align 1
  %1 = load i8, i8* %get_bg, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %2 = load i8*, i8** %color_name.addr, align 8
  %call1 = call i32 @strcmp(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i8* %2) #7
  %cmp2 = icmp eq i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %frombool3 = zext i1 %3 to i8
  store i8 %frombool3, i8* %get_fg, align 1
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 13
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool4 = icmp ne %struct._GtkWidget* %6, null
  br i1 %tobool4, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.end
  %7 = load i8, i8* %get_bg, align 1
  %tobool5 = trunc i8 %7 to i1
  br i1 %tobool5, label %if.end, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %8 = load i8, i8* %get_fg, align 1
  %tobool7 = trunc i8 %8 to i1
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.6, %land.end
  %9 = load i8, i8* %success_p, align 1
  %tobool8 = trunc i8 %9 to i1
  store i1 %tobool8, i1* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.6, %lor.lhs.false
  call void @block_input()
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data9 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x10 = bitcast %union.output_data* %output_data9 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x10, align 8
  %edit_widget11 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 13
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget11, align 8
  %call12 = call %struct._GtkStyle* @gtk_widget_get_style(%struct._GtkWidget* %12)
  store %struct._GtkStyle* %call12, %struct._GtkStyle** %gsty, align 8
  %13 = load i8, i8* %get_bg, align 1
  %tobool13 = trunc i8 %13 to i1
  br i1 %tobool13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %14 = load %struct._GtkStyle*, %struct._GtkStyle** %gsty, align 8
  %bg = getelementptr inbounds %struct._GtkStyle, %struct._GtkStyle* %14, i32 0, i32 2
  %arrayidx = getelementptr inbounds [5 x %struct._GdkColor], [5 x %struct._GdkColor]* %bg, i32 0, i64 3
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %15 = load %struct._GtkStyle*, %struct._GtkStyle** %gsty, align 8
  %fg = getelementptr inbounds %struct._GtkStyle, %struct._GtkStyle* %15, i32 0, i32 1
  %arrayidx14 = getelementptr inbounds [5 x %struct._GdkColor], [5 x %struct._GdkColor]* %fg, i32 0, i64 3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GdkColor* [ %arrayidx, %cond.true ], [ %arrayidx14, %cond.false ]
  store %struct._GdkColor* %cond, %struct._GdkColor** %grgb, align 8
  %16 = load %struct._GdkColor*, %struct._GdkColor** %grgb, align 8
  %red = getelementptr inbounds %struct._GdkColor, %struct._GdkColor* %16, i32 0, i32 1
  %17 = load i16, i16* %red, align 2
  %18 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %red15 = getelementptr inbounds %struct.XColor, %struct.XColor* %18, i32 0, i32 1
  store i16 %17, i16* %red15, align 2
  %19 = load %struct._GdkColor*, %struct._GdkColor** %grgb, align 8
  %green = getelementptr inbounds %struct._GdkColor, %struct._GdkColor* %19, i32 0, i32 2
  %20 = load i16, i16* %green, align 2
  %21 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %green16 = getelementptr inbounds %struct.XColor, %struct.XColor* %21, i32 0, i32 2
  store i16 %20, i16* %green16, align 2
  %22 = load %struct._GdkColor*, %struct._GdkColor** %grgb, align 8
  %blue = getelementptr inbounds %struct._GdkColor, %struct._GdkColor* %22, i32 0, i32 3
  %23 = load i16, i16* %blue, align 2
  %24 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %blue17 = getelementptr inbounds %struct.XColor, %struct.XColor* %24, i32 0, i32 3
  store i16 %23, i16* %blue17, align 2
  %25 = load %struct._GdkColor*, %struct._GdkColor** %grgb, align 8
  %pixel = getelementptr inbounds %struct._GdkColor, %struct._GdkColor* %25, i32 0, i32 0
  %26 = load i32, i32* %pixel, align 4
  %conv = zext i32 %26 to i64
  %27 = load %struct.XColor*, %struct.XColor** %color.addr, align 8
  %pixel18 = getelementptr inbounds %struct.XColor, %struct.XColor* %27, i32 0, i32 0
  store i64 %conv, i64* %pixel18, align 8
  store i8 1, i8* %success_p, align 1
  call void @unblock_input()
  %28 = load i8, i8* %success_p, align 1
  %tobool19 = trunc i8 %28 to i1
  store i1 %tobool19, i1* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %29 = load i1, i1* %retval
  ret i1 %29
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #2

declare void @block_input() #1

declare %struct._GtkStyle* @gtk_widget_get_style(%struct._GtkWidget*) #1

declare void @unblock_input() #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_prepare_tooltip(%struct.frame* %f, i64 %string, i32* %width, i32* %height) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %string.addr = alloca i64, align 8
  %width.addr = alloca i32*, align 8
  %height.addr = alloca i32*, align 8
  %x = alloca %struct.x_output*, align 8
  %widget = alloca %struct._GtkWidget*, align 8
  %gwin = alloca %struct._GdkDrawable*, align 8
  %screen = alloca %struct._GdkScreen*, align 8
  %settings = alloca %struct._GtkSettings*, align 8
  %tt_enabled = alloca i32, align 4
  %req = alloca %struct._GtkRequisition, align 4
  %encoded_string = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %string, i64* %string.addr, align 8
  store i32* %width, i32** %width.addr, align 8
  store i32* %height, i32** %height.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  store i32 1, i32* %tt_enabled, align 4
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 22
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl, align 8
  %tobool = icmp ne %struct._GtkWidget* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @block_input()
  %4 = load i64, i64* %string.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 988)
  %call2 = call i64 @code_convert_string_norecord(i64 %4, i64 %call, i1 zeroext true)
  store i64 %call2, i64* %encoded_string, align 8
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl3 = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 22
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl3, align 8
  %7 = bitcast %struct._GtkWidget* %6 to %struct._GTypeInstance*
  %call4 = call i64 @gtk_widget_get_type() #8
  %call5 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call4)
  %8 = bitcast %struct._GTypeInstance* %call5 to %struct._GtkWidget*
  store %struct._GtkWidget* %8, %struct._GtkWidget** %widget, align 8
  %9 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 23
  %10 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window, align 8
  %11 = bitcast %struct._GtkWindow* %10 to %struct._GTypeInstance*
  %call6 = call i64 @gtk_widget_get_type() #8
  %call7 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %11, i64 %call6)
  %12 = bitcast %struct._GTypeInstance* %call7 to %struct._GtkWidget*
  %call8 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %12)
  store %struct._GdkDrawable* %call8, %struct._GdkDrawable** %gwin, align 8
  %13 = load %struct._GdkDrawable*, %struct._GdkDrawable** %gwin, align 8
  %call9 = call %struct._GdkScreen* @gdk_drawable_get_screen(%struct._GdkDrawable* %13)
  store %struct._GdkScreen* %call9, %struct._GdkScreen** %screen, align 8
  %14 = load %struct._GdkScreen*, %struct._GdkScreen** %screen, align 8
  %call10 = call %struct._GtkSettings* @gtk_settings_get_for_screen(%struct._GdkScreen* %14)
  store %struct._GtkSettings* %call10, %struct._GtkSettings** %settings, align 8
  %15 = load %struct._GtkSettings*, %struct._GtkSettings** %settings, align 8
  %16 = bitcast %struct._GtkSettings* %15 to i8*
  call void (i8*, i8*, ...) @g_object_get(i8* %16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), i32* %tt_enabled, i8* null)
  %17 = load i32, i32* %tt_enabled, align 4
  %tobool11 = icmp ne i32 %17, 0
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %if.end
  %18 = load %struct._GtkSettings*, %struct._GtkSettings** %settings, align 8
  %19 = bitcast %struct._GtkSettings* %18 to i8*
  call void (i8*, i8*, ...) @g_object_set(i8* %19, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), i32 0, i8* null)
  %20 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window13 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 23
  %21 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window13, align 8
  %22 = bitcast %struct._GtkWindow* %21 to %struct._GTypeInstance*
  %call14 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 80)
  %23 = bitcast %struct._GTypeInstance* %call14 to %struct._GObject*
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %25 = bitcast %struct.frame* %24 to i8*
  call void @g_object_set_data(%struct._GObject* %23, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0), i8* %25)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.12, %if.end
  %26 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window16 = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 23
  %27 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window16, align 8
  %28 = bitcast %struct._GtkWindow* %27 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_widget_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call17)
  %29 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkWidget*
  %call19 = call %struct._GdkDisplay* @gtk_widget_get_display(%struct._GtkWidget* %29)
  %30 = bitcast %struct._GdkDisplay* %call19 to %struct._GTypeInstance*
  %call20 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %30, i64 80)
  %31 = bitcast %struct._GTypeInstance* %call20 to %struct._GObject*
  call void @g_object_set_data(%struct._GObject* %31, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0), i8* null)
  %32 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 21
  %33 = load %struct._GtkTooltip*, %struct._GtkTooltip** %ttip_widget, align 8
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  call void @gtk_tooltip_set_custom(%struct._GtkTooltip* %33, %struct._GtkWidget* %34)
  %35 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_widget21 = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 21
  %36 = load %struct._GtkTooltip*, %struct._GtkTooltip** %ttip_widget21, align 8
  %37 = load i64, i64* %encoded_string, align 8
  %call22 = call i8* @SSDATA(i64 %37)
  call void @gtk_tooltip_set_text(%struct._GtkTooltip* %36, i8* %call22)
  %38 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window23 = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 23
  %39 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window23, align 8
  %40 = bitcast %struct._GtkWindow* %39 to %struct._GTypeInstance*
  %call24 = call i64 @gtk_widget_get_type() #8
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %40, i64 %call24)
  %41 = bitcast %struct._GTypeInstance* %call25 to %struct._GtkWidget*
  call void @gtk_widget_size_request(%struct._GtkWidget* %41, %struct._GtkRequisition* %req)
  %42 = load i32*, i32** %width.addr, align 8
  %tobool26 = icmp ne i32* %42, null
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %if.end.15
  %width28 = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 0
  %43 = load i32, i32* %width28, align 4
  %44 = load i32*, i32** %width.addr, align 8
  store i32 %43, i32* %44, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %if.end.15
  %45 = load i32*, i32** %height.addr, align 8
  %tobool30 = icmp ne i32* %45, null
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.end.29
  %height32 = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %46 = load i32, i32* %height32, align 4
  %47 = load i32*, i32** %height.addr, align 8
  store i32 %46, i32* %47, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %if.end.29
  call void @unblock_input()
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.33, %if.then
  %48 = load i1, i1* %retval
  ret i1 %48
}

declare i64 @code_convert_string_norecord(i64, i64, i1 zeroext) #1

declare i64 @builtin_lisp_symbol(i32) #1

declare %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance*, i64) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_widget_get_type() #3

declare %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget*) #1

declare %struct._GdkScreen* @gdk_drawable_get_screen(%struct._GdkDrawable*) #1

declare %struct._GtkSettings* @gtk_settings_get_for_screen(%struct._GdkScreen*) #1

declare void @g_object_get(i8*, i8*, ...) #1

declare void @g_object_set(i8*, i8*, ...) #1

declare void @g_object_set_data(%struct._GObject*, i8*, i8*) #1

declare %struct._GdkDisplay* @gtk_widget_get_display(%struct._GtkWidget*) #1

declare void @gtk_tooltip_set_custom(%struct._GtkTooltip*, %struct._GtkWidget*) #1

declare void @gtk_tooltip_set_text(%struct._GtkTooltip*, i8*) #1

declare i8* @SSDATA(i64) #1

declare void @gtk_widget_size_request(%struct._GtkWidget*, %struct._GtkRequisition*) #1

; Function Attrs: nounwind uwtable
define void @xg_show_tooltip(%struct.frame* %f, i32 %root_x, i32 %root_y) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %root_x.addr = alloca i32, align 4
  %root_y.addr = alloca i32, align 4
  %x = alloca %struct.x_output*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %root_x, i32* %root_x.addr, align 4
  store i32 %root_y, i32* %root_y.addr, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 23
  %3 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window, align 8
  %tobool = icmp ne %struct._GtkWindow* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @block_input()
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window2 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 23
  %5 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window2, align 8
  %6 = load i32, i32* %root_x.addr, align 4
  %7 = load i32, i32* %root_y.addr, align 4
  call void @gtk_window_move(%struct._GtkWindow* %5, i32 %6, i32 %7)
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window3 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 23
  %9 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window3, align 8
  %10 = bitcast %struct._GtkWindow* %9 to %struct._GTypeInstance*
  %call = call i64 @gtk_widget_get_type() #8
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call)
  %11 = bitcast %struct._GTypeInstance* %call4 to %struct._GtkWidget*
  call void @gtk_widget_show_all(%struct._GtkWidget* %11)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @gtk_window_move(%struct._GtkWindow*, i32, i32) #1

declare void @gtk_widget_show_all(%struct._GtkWidget*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_hide_tooltip(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %ret = alloca i8, align 1
  %win = alloca %struct._GtkWindow*, align 8
  %gwin = alloca %struct._GdkDrawable*, align 8
  %screen = alloca %struct._GdkScreen*, align 8
  %settings = alloca %struct._GtkSettings*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8 0, i8* %ret, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 23
  %2 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window, align 8
  %tobool = icmp ne %struct._GtkWindow* %2, null
  br i1 %tobool, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %ttip_window3 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 23
  %5 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window3, align 8
  store %struct._GtkWindow* %5, %struct._GtkWindow** %win, align 8
  call void @block_input()
  %6 = load %struct._GtkWindow*, %struct._GtkWindow** %win, align 8
  %7 = bitcast %struct._GtkWindow* %6 to %struct._GTypeInstance*
  %call = call i64 @gtk_widget_get_type() #8
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call)
  %8 = bitcast %struct._GTypeInstance* %call4 to %struct._GtkWidget*
  call void @gtk_widget_hide(%struct._GtkWidget* %8)
  %9 = load %struct._GtkWindow*, %struct._GtkWindow** %win, align 8
  %10 = bitcast %struct._GtkWindow* %9 to %struct._GTypeInstance*
  %call5 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 80)
  %11 = bitcast %struct._GTypeInstance* %call5 to %struct._GObject*
  %call6 = call i8* @g_object_get_data(%struct._GObject* %11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i32 0, i32 0))
  %tobool7 = icmp ne i8* %call6, null
  br i1 %tobool7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  %12 = load %struct._GtkWindow*, %struct._GtkWindow** %win, align 8
  %13 = bitcast %struct._GtkWindow* %12 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_widget_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %13, i64 %call9)
  %14 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkWidget*
  %call11 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %14)
  store %struct._GdkDrawable* %call11, %struct._GdkDrawable** %gwin, align 8
  %15 = load %struct._GdkDrawable*, %struct._GdkDrawable** %gwin, align 8
  %call12 = call %struct._GdkScreen* @gdk_drawable_get_screen(%struct._GdkDrawable* %15)
  store %struct._GdkScreen* %call12, %struct._GdkScreen** %screen, align 8
  %16 = load %struct._GdkScreen*, %struct._GdkScreen** %screen, align 8
  %call13 = call %struct._GtkSettings* @gtk_settings_get_for_screen(%struct._GdkScreen* %16)
  store %struct._GtkSettings* %call13, %struct._GtkSettings** %settings, align 8
  %17 = load %struct._GtkSettings*, %struct._GtkSettings** %settings, align 8
  %18 = bitcast %struct._GtkSettings* %17 to i8*
  call void (i8*, i8*, ...) @g_object_set(i8* %18, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), i32 1, i8* null)
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  call void @unblock_input()
  store i8 1, i8* %ret, align 1
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %entry
  %19 = load i8, i8* %ret, align 1
  %tobool15 = trunc i8 %19 to i1
  ret i1 %tobool15
}

declare void @gtk_widget_hide(%struct._GtkWidget*) #1

declare i8* @g_object_get_data(%struct._GObject*, i8*) #1

; Function Attrs: nounwind uwtable
define void @xg_clear_under_internal_border(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %wfixed = alloca %struct._GtkWidget*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 51
  %1 = load i32, i32* %internal_border_width, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 13
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  store %struct._GtkWidget* %4, %struct._GtkWidget** %wfixed, align 8
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_queue_draw(%struct._GtkWidget* %5)
  call void @gdk_window_process_all_updates()
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 46
  %8 = load i32, i32* %pixel_width, align 4
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width1 = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 51
  %10 = load i32, i32* %internal_border_width1, align 4
  call void @x_clear_area(%struct.frame* %6, i32 0, i32 0, i32 %8, i32 %10)
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width2 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 51
  %13 = load i32, i32* %internal_border_width2, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 47
  %15 = load i32, i32* %pixel_height, align 4
  call void @x_clear_area(%struct.frame* %11, i32 0, i32 0, i32 %13, i32 %15)
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height3 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 47
  %18 = load i32, i32* %pixel_height3, align 4
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width4 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 51
  %20 = load i32, i32* %internal_border_width4, align 4
  %sub = sub nsw i32 %18, %20
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width5 = getelementptr inbounds %struct.frame, %struct.frame* %21, i32 0, i32 46
  %22 = load i32, i32* %pixel_width5, align 4
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width6 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 51
  %24 = load i32, i32* %internal_border_width6, align 4
  call void @x_clear_area(%struct.frame* %16, i32 0, i32 %sub, i32 %22, i32 %24)
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width7 = getelementptr inbounds %struct.frame, %struct.frame* %26, i32 0, i32 46
  %27 = load i32, i32* %pixel_width7, align 4
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width8 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 51
  %29 = load i32, i32* %internal_border_width8, align 4
  %sub9 = sub nsw i32 %27, %29
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width10 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 51
  %31 = load i32, i32* %internal_border_width10, align 4
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height11 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 47
  %33 = load i32, i32* %pixel_height11, align 4
  call void @x_clear_area(%struct.frame* %25, i32 %sub9, i32 0, i32 %31, i32 %33)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @gtk_widget_queue_draw(%struct._GtkWidget*) #1

declare void @gdk_window_process_all_updates() #1

declare void @x_clear_area(%struct.frame*, i32, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @xg_frame_resized(%struct.frame* %f, i32 %pixelwidth, i32 %pixelheight) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %pixelwidth.addr = alloca i32, align 4
  %pixelheight.addr = alloca i32, align 4
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %pixelwidth, i32* %pixelwidth.addr, align 4
  store i32 %pixelheight, i32* %pixelheight.addr, align 4
  %0 = load i32, i32* %pixelwidth.addr, align 4
  %cmp = icmp eq i32 %0, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %pixelheight.addr, align 4
  %cmp1 = icmp eq i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.end.12

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 13
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %4, null
  br i1 %tobool, label %land.lhs.true.2, label %if.else

land.lhs.true.2:                                  ; preds = %if.then
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data3 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x4 = bitcast %union.output_data* %output_data3 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x4, align 8
  %edit_widget5 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 13
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget5, align 8
  %call = call i32 @gtk_widget_get_mapped(%struct._GtkWidget* %7)
  %tobool6 = icmp ne i32 %call, 0
  br i1 %tobool6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true.2
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %edit_widget10 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 13
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget10, align 8
  %call11 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %10)
  call void @gdk_window_get_geometry(%struct._GdkDrawable* %call11, i32* null, i32* null, i32* %pixelwidth.addr, i32* %pixelheight.addr, i32* null)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true.2, %if.then
  br label %if.end.41

if.end:                                           ; preds = %if.then.7
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %land.lhs.true, %entry
  %11 = load i32, i32* %pixelwidth.addr, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 26
  %13 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %13, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp13 = icmp ne i32 %bf.cast, 0
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.12
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 69
  %15 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %15, %cond.true ], [ 0, %cond.false ]
  %sub = sub nsw i32 %11, %cond
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 54
  %17 = load i32, i32* %left_fringe_width, align 4
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 55
  %19 = load i32, i32* %right_fringe_width, align 4
  %add = add nsw i32 %17, %19
  %sub14 = sub nsw i32 %sub, %add
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 51
  %21 = load i32, i32* %internal_border_width, align 4
  %mul = mul nsw i32 2, %21
  %sub15 = sub nsw i32 %sub14, %mul
  store i32 %sub15, i32* %width, align 4
  %22 = load i32, i32* %pixelheight.addr, align 4
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 58
  %24 = load i32, i32* %menu_bar_height, align 4
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 28
  %26 = load i32, i32* %tool_bar_height, align 4
  %add16 = add nsw i32 %24, %26
  %sub17 = sub nsw i32 %22, %add16
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 26
  %28 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load18 = load i64, i64* %28, align 8
  %bf.lshr19 = lshr i64 %bf.load18, 32
  %bf.clear20 = and i64 %bf.lshr19, 1
  %bf.cast21 = trunc i64 %bf.clear20 to i1
  br i1 %bf.cast21, label %cond.true.22, label %cond.false.23

cond.true.22:                                     ; preds = %cond.end
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 71
  %30 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.24

cond.false.23:                                    ; preds = %cond.end
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.23, %cond.true.22
  %cond25 = phi i32 [ %30, %cond.true.22 ], [ 0, %cond.false.23 ]
  %sub26 = sub nsw i32 %sub17, %cond25
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width27 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 51
  %32 = load i32, i32* %internal_border_width27, align 4
  %mul28 = mul nsw i32 2, %32
  %sub29 = sub nsw i32 %sub26, %mul28
  store i32 %sub29, i32* %height, align 4
  %33 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call30 = call i64 @builtin_lisp_symbol(i32 1065)
  %34 = load i32, i32* %width, align 4
  %35 = load i32, i32* %height, align 4
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  call void @frame_size_history_add(%struct.frame* %33, i64 %call30, i32 %34, i32 %35, i64 %call31)
  %36 = load i32, i32* %width, align 4
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 40
  %38 = load i32, i32* %text_width, align 4
  %cmp32 = icmp ne i32 %36, %38
  br i1 %cmp32, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.24
  %39 = load i32, i32* %height, align 4
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 41
  %41 = load i32, i32* %text_height, align 4
  %cmp33 = icmp ne i32 %39, %41
  br i1 %cmp33, label %if.then.38, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %lor.lhs.false
  %42 = load i32, i32* %pixelwidth.addr, align 4
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 46
  %44 = load i32, i32* %pixel_width, align 4
  %cmp35 = icmp ne i32 %42, %44
  br i1 %cmp35, label %if.then.38, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %lor.lhs.false.34
  %45 = load i32, i32* %pixelheight.addr, align 4
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %46, i32 0, i32 47
  %47 = load i32, i32* %pixel_height, align 4
  %cmp37 = icmp ne i32 %45, %47
  br i1 %cmp37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %lor.lhs.false.36, %lor.lhs.false.34, %lor.lhs.false, %cond.end.24
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_clear_under_internal_border(%struct.frame* %48)
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %50 = load i32, i32* %width, align 4
  %51 = load i32, i32* %height, align 4
  call void @change_frame_size(%struct.frame* %49, i32 %50, i32 %51, i1 zeroext false, i1 zeroext true, i1 zeroext false, i1 zeroext true)
  store i8 1, i8* @frame_garbaged, align 1
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %52)
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 26
  %54 = bitcast i48* %garbaged to i64*
  %bf.load39 = load i64, i64* %54, align 8
  %bf.clear40 = and i64 %bf.load39, -8193
  %bf.set = or i64 %bf.clear40, 8192
  store i64 %bf.set, i64* %54, align 8
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @cancel_mouse_face(%struct.frame* %55)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.38, %lor.lhs.false.36
  ret void
}

declare i32 @gtk_widget_get_mapped(%struct._GtkWidget*) #1

declare void @gdk_window_get_geometry(%struct._GdkDrawable*, i32*, i32*, i32*, i32*, i32*) #1

declare void @frame_size_history_add(%struct.frame*, i64, i32, i32, i64) #1

declare void @change_frame_size(%struct.frame*, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i1 zeroext) #1

declare void @fset_redisplay(%struct.frame*) #1

declare void @cancel_mouse_face(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define void @xg_frame_set_char_size(%struct.frame* %f, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %pixelwidth = alloca i32, align 4
  %pixelheight = alloca i32, align 4
  %fullscreen = alloca i64, align 8
  %gwidth = alloca i32, align 4
  %gheight = alloca i32, align 4
  %totalheight = alloca i32, align 4
  %totalwidth = alloca i32, align 4
  %scale = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load i32, i32* %width.addr, align 4
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %1, i32 0, i32 26
  %2 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %2, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp = icmp ne i32 %bf.cast, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 69
  %4 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ 0, %cond.false ]
  %add = add nsw i32 %0, %cond
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 54
  %6 = load i32, i32* %left_fringe_width, align 4
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 55
  %8 = load i32, i32* %right_fringe_width, align 4
  %add1 = add nsw i32 %6, %8
  %add2 = add nsw i32 %add, %add1
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 51
  %10 = load i32, i32* %internal_border_width, align 4
  %mul = mul nsw i32 2, %10
  %add3 = add nsw i32 %add2, %mul
  store i32 %add3, i32* %pixelwidth, align 4
  %11 = load i32, i32* %height.addr, align 4
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 58
  %13 = load i32, i32* %menu_bar_height, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 28
  %15 = load i32, i32* %tool_bar_height, align 4
  %add4 = add nsw i32 %13, %15
  %add5 = add nsw i32 %11, %add4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 26
  %17 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load6 = load i64, i64* %17, align 8
  %bf.lshr7 = lshr i64 %bf.load6, 32
  %bf.clear8 = and i64 %bf.lshr7, 1
  %bf.cast9 = trunc i64 %bf.clear8 to i1
  br i1 %bf.cast9, label %cond.true.10, label %cond.false.11

cond.true.10:                                     ; preds = %cond.end
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 71
  %19 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.12

cond.false.11:                                    ; preds = %cond.end
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.10
  %cond13 = phi i32 [ %19, %cond.true.10 ], [ 0, %cond.false.11 ]
  %add14 = add nsw i32 %add5, %cond13
  %20 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width15 = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 51
  %21 = load i32, i32* %internal_border_width15, align 4
  %mul16 = mul nsw i32 2, %21
  %add17 = add nsw i32 %add14, %mul16
  store i32 %add17, i32* %pixelheight, align 4
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 472)
  %call18 = call i64 @get_frame_param(%struct.frame* %22, i64 %call)
  store i64 %call18, i64* %fullscreen, align 8
  %23 = load i32, i32* %pixelheight, align 4
  %24 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %24, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %25 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_top_height = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 1
  %26 = load i32, i32* %toolbar_top_height, align 4
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %28 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %toolbar_bottom_height = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 2
  %29 = load i32, i32* %toolbar_bottom_height, align 4
  %add21 = add nsw i32 %26, %29
  %add22 = add nsw i32 %23, %add21
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %31 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %31, i32 0, i32 0
  %32 = load i32, i32* %menubar_height, align 4
  %add25 = add nsw i32 %add22, %32
  store i32 %add25, i32* %totalheight, align 4
  %33 = load i32, i32* %pixelwidth, align 4
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %35 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %toolbar_left_width = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 3
  %36 = load i32, i32* %toolbar_left_width, align 4
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data28 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x29 = bitcast %union.output_data* %output_data28 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x29, align 8
  %toolbar_right_width = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 4
  %39 = load i32, i32* %toolbar_right_width, align 4
  %add30 = add nsw i32 %36, %39
  %add31 = add nsw i32 %33, %add30
  store i32 %add31, i32* %totalwidth, align 4
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 47
  %41 = load i32, i32* %pixel_height, align 4
  %cmp32 = icmp eq i32 %41, 0
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.12
  br label %if.end.115

if.end:                                           ; preds = %cond.end.12
  %42 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data33 = getelementptr inbounds %struct.frame, %struct.frame* %42, i32 0, i32 62
  %x34 = bitcast %union.output_data* %output_data33 to %struct.x_output**
  %43 = load %struct.x_output*, %struct.x_output** %x34, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %43, i32 0, i32 12
  %44 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %45 = bitcast %struct._GtkWidget* %44 to %struct._GTypeInstance*
  %call35 = call i64 @gtk_window_get_type() #8
  %call36 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %45, i64 %call35)
  %46 = bitcast %struct._GTypeInstance* %call36 to %struct._GtkWindow*
  call void @gtk_window_get_size(%struct._GtkWindow* %46, i32* %gwidth, i32* %gheight)
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_clear_under_internal_border(%struct.frame* %47)
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 26
  %49 = bitcast i48* %visible to i64*
  %bf.load37 = load i64, i64* %49, align 8
  %bf.lshr38 = lshr i64 %bf.load37, 10
  %bf.clear39 = and i64 %bf.lshr38, 3
  %bf.cast40 = trunc i64 %bf.clear39 to i32
  %tobool = icmp ne i32 %bf.cast40, 0
  br i1 %tobool, label %if.then.41, label %if.end.44

if.then.41:                                       ; preds = %if.end
  %call42 = call i32 @xg_get_gdk_scale()
  store i32 %call42, i32* %scale, align 4
  %50 = load i32, i32* %scale, align 4
  %51 = load i32, i32* %totalheight, align 4
  %div = sdiv i32 %51, %50
  store i32 %div, i32* %totalheight, align 4
  %52 = load i32, i32* %scale, align 4
  %53 = load i32, i32* %totalwidth, align 4
  %div43 = sdiv i32 %53, %52
  store i32 %div43, i32* %totalwidth, align 4
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.41, %if.end
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wm_set_size_hint(%struct.frame* %54, i64 0, i1 zeroext false)
  %55 = load i64, i64* %fullscreen, align 8
  %call45 = call i64 @builtin_lisp_symbol(i32 473)
  %cmp46 = icmp eq i64 %55, %call45
  br i1 %cmp46, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.44
  %56 = load i32, i32* %width.addr, align 4
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 40
  %58 = load i32, i32* %text_width, align 4
  %cmp47 = icmp eq i32 %56, %58
  br i1 %cmp47, label %if.then.48, label %if.else

if.then.48:                                       ; preds = %land.lhs.true
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call49 = call i64 @builtin_lisp_symbol(i32 1067)
  %60 = load i32, i32* %width.addr, align 4
  %61 = load i32, i32* %height.addr, align 4
  %62 = load i32, i32* %gheight, align 4
  %conv = sext i32 %62 to i64
  %shl = shl i64 %conv, 2
  %add50 = add i64 %shl, 2
  %63 = load i32, i32* %totalheight, align 4
  %conv51 = sext i32 %63 to i64
  %shl52 = shl i64 %conv51, 2
  %add53 = add i64 %shl52, 2
  %call54 = call i64 @list2(i64 %add50, i64 %add53)
  call void @frame_size_history_add(%struct.frame* %59, i64 %call49, i32 %60, i32 %61, i64 %call54)
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data55 = getelementptr inbounds %struct.frame, %struct.frame* %64, i32 0, i32 62
  %x56 = bitcast %union.output_data* %output_data55 to %struct.x_output**
  %65 = load %struct.x_output*, %struct.x_output** %x56, align 8
  %widget57 = getelementptr inbounds %struct.x_output, %struct.x_output* %65, i32 0, i32 12
  %66 = load %struct._GtkWidget*, %struct._GtkWidget** %widget57, align 8
  %67 = bitcast %struct._GtkWidget* %66 to %struct._GTypeInstance*
  %call58 = call i64 @gtk_window_get_type() #8
  %call59 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %67, i64 %call58)
  %68 = bitcast %struct._GTypeInstance* %call59 to %struct._GtkWindow*
  %69 = load i32, i32* %gwidth, align 4
  %70 = load i32, i32* %totalheight, align 4
  call void @gtk_window_resize(%struct._GtkWindow* %68, i32 %69, i32 %70)
  br label %if.end.96

if.else:                                          ; preds = %land.lhs.true, %if.end.44
  %71 = load i64, i64* %fullscreen, align 8
  %call60 = call i64 @builtin_lisp_symbol(i32 471)
  %cmp61 = icmp eq i64 %71, %call60
  br i1 %cmp61, label %land.lhs.true.63, label %if.else.80

land.lhs.true.63:                                 ; preds = %if.else
  %72 = load i32, i32* %height.addr, align 4
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 41
  %74 = load i32, i32* %text_height, align 4
  %cmp64 = icmp eq i32 %72, %74
  br i1 %cmp64, label %if.then.66, label %if.else.80

if.then.66:                                       ; preds = %land.lhs.true.63
  %75 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call67 = call i64 @builtin_lisp_symbol(i32 1068)
  %76 = load i32, i32* %width.addr, align 4
  %77 = load i32, i32* %height.addr, align 4
  %78 = load i32, i32* %gwidth, align 4
  %conv68 = sext i32 %78 to i64
  %shl69 = shl i64 %conv68, 2
  %add70 = add i64 %shl69, 2
  %79 = load i32, i32* %totalwidth, align 4
  %conv71 = sext i32 %79 to i64
  %shl72 = shl i64 %conv71, 2
  %add73 = add i64 %shl72, 2
  %call74 = call i64 @list2(i64 %add70, i64 %add73)
  call void @frame_size_history_add(%struct.frame* %75, i64 %call67, i32 %76, i32 %77, i64 %call74)
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data75 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x76 = bitcast %union.output_data* %output_data75 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x76, align 8
  %widget77 = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 12
  %82 = load %struct._GtkWidget*, %struct._GtkWidget** %widget77, align 8
  %83 = bitcast %struct._GtkWidget* %82 to %struct._GTypeInstance*
  %call78 = call i64 @gtk_window_get_type() #8
  %call79 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %83, i64 %call78)
  %84 = bitcast %struct._GTypeInstance* %call79 to %struct._GtkWindow*
  %85 = load i32, i32* %totalwidth, align 4
  %86 = load i32, i32* %gheight, align 4
  call void @gtk_window_resize(%struct._GtkWindow* %84, i32 %85, i32 %86)
  br label %if.end.95

if.else.80:                                       ; preds = %land.lhs.true.63, %if.else
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call81 = call i64 @builtin_lisp_symbol(i32 1069)
  %88 = load i32, i32* %width.addr, align 4
  %89 = load i32, i32* %height.addr, align 4
  %90 = load i32, i32* %totalwidth, align 4
  %conv82 = sext i32 %90 to i64
  %shl83 = shl i64 %conv82, 2
  %add84 = add i64 %shl83, 2
  %91 = load i32, i32* %totalheight, align 4
  %conv85 = sext i32 %91 to i64
  %shl86 = shl i64 %conv85, 2
  %add87 = add i64 %shl86, 2
  %call88 = call i64 @list2(i64 %add84, i64 %add87)
  call void @frame_size_history_add(%struct.frame* %87, i64 %call81, i32 %88, i32 %89, i64 %call88)
  %92 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data89 = getelementptr inbounds %struct.frame, %struct.frame* %92, i32 0, i32 62
  %x90 = bitcast %union.output_data* %output_data89 to %struct.x_output**
  %93 = load %struct.x_output*, %struct.x_output** %x90, align 8
  %widget91 = getelementptr inbounds %struct.x_output, %struct.x_output* %93, i32 0, i32 12
  %94 = load %struct._GtkWidget*, %struct._GtkWidget** %widget91, align 8
  %95 = bitcast %struct._GtkWidget* %94 to %struct._GTypeInstance*
  %call92 = call i64 @gtk_window_get_type() #8
  %call93 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %95, i64 %call92)
  %96 = bitcast %struct._GTypeInstance* %call93 to %struct._GtkWindow*
  %97 = load i32, i32* %totalwidth, align 4
  %98 = load i32, i32* %totalheight, align 4
  call void @gtk_window_resize(%struct._GtkWindow* %96, i32 %97, i32 %98)
  %call94 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call94, i64* %fullscreen, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.80, %if.then.66
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.48
  store i8 1, i8* @frame_garbaged, align 1
  %99 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %99)
  %100 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 26
  %101 = bitcast i48* %garbaged to i64*
  %bf.load97 = load i64, i64* %101, align 8
  %bf.clear98 = and i64 %bf.load97, -8193
  %bf.set = or i64 %bf.clear98, 8192
  store i64 %bf.set, i64* %101, align 8
  %102 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @cancel_mouse_face(%struct.frame* %102)
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %visible99 = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 26
  %104 = bitcast i48* %visible99 to i64*
  %bf.load100 = load i64, i64* %104, align 8
  %bf.lshr101 = lshr i64 %bf.load100, 10
  %bf.clear102 = and i64 %bf.lshr101, 3
  %bf.cast103 = trunc i64 %bf.clear102 to i32
  %tobool104 = icmp ne i32 %bf.cast103, 0
  br i1 %tobool104, label %if.then.105, label %if.else.113

if.then.105:                                      ; preds = %if.end.96
  %call106 = call i32 @gtk_events_pending()
  call void @gdk_flush()
  %105 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_wait_for_event(%struct.frame* %105, i32 22)
  %106 = load i64, i64* %fullscreen, align 8
  %call107 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp108 = icmp eq i64 %106, %call107
  br i1 %cmp108, label %if.end.112, label %if.then.110

if.then.110:                                      ; preds = %if.then.105
  %107 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call111 = call i64 @builtin_lisp_symbol(i32 472)
  %108 = load i64, i64* %fullscreen, align 8
  call void @store_frame_param(%struct.frame* %107, i64 %call111, i64 %108)
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %110 = load i64, i64* %fullscreen, align 8
  %111 = load i64, i64* %fullscreen, align 8
  call void @x_set_fullscreen(%struct.frame* %109, i64 %110, i64 %111)
  br label %if.end.112

if.end.112:                                       ; preds = %if.then.110, %if.then.105
  br label %if.end.115

if.else.113:                                      ; preds = %if.end.96
  %112 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %113 = load i32, i32* %width.addr, align 4
  %114 = load i32, i32* %height.addr, align 4
  %call114 = call i64 @builtin_lisp_symbol(i32 1066)
  call void @adjust_frame_size(%struct.frame* %112, i32 %113, i32 %114, i32 5, i1 zeroext false, i64 %call114)
  br label %if.end.115

if.end.115:                                       ; preds = %if.then, %if.else.113, %if.end.112
  ret void
}

declare i64 @get_frame_param(%struct.frame*, i64) #1

declare void @gtk_window_get_size(%struct._GtkWindow*, i32*, i32*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_window_get_type() #3

; Function Attrs: nounwind uwtable
define internal i32 @xg_get_gdk_scale() #0 {
entry:
  %retval = alloca i32, align 4
  %sscale = alloca i8*, align 8
  %scale = alloca i64, align 8
  %call = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i32 0, i32 0)) #4
  store i8* %call, i8** %sscale, align 8
  %0 = load i8*, i8** %sscale, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %sscale, align 8
  %call1 = call i64 @atol(i8* %1) #7
  store i64 %call1, i64* %scale, align 8
  %2 = load i64, i64* %scale, align 8
  %cmp = icmp slt i64 0, %2
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %3 = load i64, i64* %scale, align 8
  %cmp3 = icmp slt i64 %3, 2147483647
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.2
  %4 = load i64, i64* %scale, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %4, %cond.true ], [ 2147483647, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %cond.end
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define void @x_wm_set_size_hint(%struct.frame* %f, i64 %flags, i1 zeroext %user_position) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %flags.addr = alloca i64, align 8
  %user_position.addr = alloca i8, align 1
  %size_hints = alloca %struct._GdkGeometry, align 8
  %hint_flags = alloca i32, align 4
  %base_width = alloca i32, align 4
  %base_height = alloca i32, align 4
  %min_rows = alloca i32, align 4
  %min_cols = alloca i32, align 4
  %win_gravity = alloca i32, align 4
  %fs_state = alloca i64, align 8
  %frame = alloca i64, align 8
  %scale = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %flags, i64* %flags.addr, align 8
  %frombool = zext i1 %user_position to i8
  store i8 %frombool, i8* %user_position.addr, align 1
  store i32 0, i32* %hint_flags, align 4
  store i32 0, i32* %min_rows, align 4
  store i32 0, i32* %min_cols, align 4
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity1 = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 48
  %1 = load i32, i32* %win_gravity1, align 4
  store i32 %1, i32* %win_gravity, align 4
  %call = call i32 @xg_get_gdk_scale()
  store i32 %call, i32* %scale, align 4
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 1), align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %2, %call2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 12
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end.205

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %7 = bitcast %struct.frame* %6 to i8*
  %call3 = call i64 @make_lisp_ptr(i8* %7, i32 5)
  store i64 %call3, i64* %frame, align 8
  %8 = load i64, i64* %frame, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 472)
  %call5 = call i64 @Fframe_parameter(i64 %8, i64 %call4)
  store i64 %call5, i64* %fs_state, align 8
  %9 = load i64, i64* %fs_state, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 648)
  %cmp7 = icmp eq i64 %9, %call6
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end
  %10 = load i64, i64* %fs_state, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 470)
  %cmp10 = icmp eq i64 %10, %call9
  br i1 %cmp10, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %lor.lhs.false.8, %if.end
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data11 = getelementptr inbounds %struct.frame, %struct.frame* %12, i32 0, i32 62
  %x12 = bitcast %union.output_data* %output_data11 to %struct.x_output**
  %13 = load %struct.x_output*, %struct.x_output** %x12, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 44
  %14 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %Xatom_net_wm_state = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %14, i32 0, i32 109
  %15 = load i64, i64* %Xatom_net_wm_state, align 8
  %call13 = call zeroext i1 @x_wm_supports(%struct.frame* %11, i64 %15)
  br i1 %call13, label %if.then.19, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %land.lhs.true
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data15 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x16 = bitcast %union.output_data* %output_data15 to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x16, align 8
  %display_info17 = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 44
  %19 = load %struct.x_display_info*, %struct.x_display_info** %display_info17, align 8
  %Xatom_net_wm_state_fullscreen = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %19, i32 0, i32 110
  %20 = load i64, i64* %Xatom_net_wm_state_fullscreen, align 8
  %call18 = call zeroext i1 @x_wm_supports(%struct.frame* %16, i64 %20)
  br i1 %call18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %lor.lhs.false.14, %land.lhs.true
  br label %if.end.205

if.end.20:                                        ; preds = %lor.lhs.false.14, %lor.lhs.false.8
  %21 = load i64, i64* %flags.addr, align 8
  %tobool21 = icmp ne i64 %21, 0
  br i1 %tobool21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %if.end.20
  %22 = bitcast %struct._GdkGeometry* %size_hints to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 56, i32 8, i1 false)
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %24 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %size_hints25 = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 19
  %25 = bitcast %struct._GdkGeometry* %size_hints25 to i8*
  %26 = bitcast %struct._GdkGeometry* %size_hints to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 56, i32 8, i1 false)
  %27 = load i32, i32* %hint_flags, align 4
  %conv = sext i32 %27 to i64
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %hint_flags28 = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 20
  store i64 %conv, i64* %hint_flags28, align 8
  br label %if.end.30

if.else:                                          ; preds = %if.end.20
  %30 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 49
  %31 = load i32, i32* %size_hint_flags, align 4
  %conv29 = sext i32 %31 to i64
  store i64 %conv29, i64* %flags.addr, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.22
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data31 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 62
  %x32 = bitcast %union.output_data* %output_data31 to %struct.x_output**
  %33 = load %struct.x_output*, %struct.x_output** %x32, align 8
  %size_hints33 = getelementptr inbounds %struct.x_output, %struct.x_output* %33, i32 0, i32 19
  %34 = bitcast %struct._GdkGeometry* %size_hints to i8*
  %35 = bitcast %struct._GdkGeometry* %size_hints33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 56, i32 8, i1 false)
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %37 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %hint_flags36 = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 20
  %38 = load i64, i64* %hint_flags36, align 8
  %conv37 = trunc i64 %38 to i32
  store i32 %conv37, i32* %hint_flags, align 4
  %39 = load i32, i32* %hint_flags, align 4
  %or = or i32 %39, 34
  store i32 %or, i32* %hint_flags, align 4
  %40 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 442), align 1
  %tobool38 = trunc i8 %40 to i1
  br i1 %tobool38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.30
  br label %cond.end

cond.false:                                       ; preds = %if.end.30
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width = getelementptr inbounds %struct.frame, %struct.frame* %41, i32 0, i32 59
  %42 = load i32, i32* %column_width, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %42, %cond.false ]
  %width_inc = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 6
  store i32 %cond, i32* %width_inc, align 4
  %43 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 442), align 1
  %tobool40 = trunc i8 %43 to i1
  br i1 %tobool40, label %cond.true.42, label %cond.false.43

cond.true.42:                                     ; preds = %cond.end
  br label %cond.end.44

cond.false.43:                                    ; preds = %cond.end
  %44 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height = getelementptr inbounds %struct.frame, %struct.frame* %44, i32 0, i32 60
  %45 = load i32, i32* %line_height, align 4
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.43, %cond.true.42
  %cond45 = phi i32 [ 1, %cond.true.42 ], [ %45, %cond.false.43 ]
  %height_inc = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 7
  store i32 %cond45, i32* %height_inc, align 4
  %46 = load i32, i32* %hint_flags, align 4
  %or46 = or i32 %46, 8
  store i32 %or46, i32* %hint_flags, align 4
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width47 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 59
  %48 = load i32, i32* %column_width47, align 4
  %mul = mul nsw i32 1, %48
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %vertical_scroll_bar_type = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 26
  %50 = bitcast i48* %vertical_scroll_bar_type to i64*
  %bf.load = load i64, i64* %50, align 8
  %bf.lshr = lshr i64 %bf.load, 30
  %bf.clear = and i64 %bf.lshr, 3
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp48 = icmp ne i32 %bf.cast, 0
  br i1 %cmp48, label %cond.true.50, label %cond.false.51

cond.true.50:                                     ; preds = %cond.end.44
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_width = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 69
  %52 = load i32, i32* %config_scroll_bar_width, align 4
  br label %cond.end.52

cond.false.51:                                    ; preds = %cond.end.44
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.51, %cond.true.50
  %cond53 = phi i32 [ %52, %cond.true.50 ], [ 0, %cond.false.51 ]
  %add = add nsw i32 %mul, %cond53
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %53, i32 0, i32 54
  %54 = load i32, i32* %left_fringe_width, align 4
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %right_fringe_width = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 55
  %56 = load i32, i32* %right_fringe_width, align 4
  %add54 = add nsw i32 %54, %56
  %add55 = add nsw i32 %add, %add54
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 51
  %58 = load i32, i32* %internal_border_width, align 4
  %mul56 = mul nsw i32 2, %58
  %add57 = add nsw i32 %add55, %mul56
  %59 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data58 = getelementptr inbounds %struct.frame, %struct.frame* %59, i32 0, i32 62
  %x59 = bitcast %union.output_data* %output_data58 to %struct.x_output**
  %60 = load %struct.x_output*, %struct.x_output** %x59, align 8
  %toolbar_left_width = getelementptr inbounds %struct.x_output, %struct.x_output* %60, i32 0, i32 3
  %61 = load i32, i32* %toolbar_left_width, align 4
  %62 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data60 = getelementptr inbounds %struct.frame, %struct.frame* %62, i32 0, i32 62
  %x61 = bitcast %union.output_data* %output_data60 to %struct.x_output**
  %63 = load %struct.x_output*, %struct.x_output** %x61, align 8
  %toolbar_right_width = getelementptr inbounds %struct.x_output, %struct.x_output* %63, i32 0, i32 4
  %64 = load i32, i32* %toolbar_right_width, align 4
  %add62 = add nsw i32 %61, %64
  %add63 = add nsw i32 %add57, %add62
  store i32 %add63, i32* %base_width, align 4
  %65 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height64 = getelementptr inbounds %struct.frame, %struct.frame* %65, i32 0, i32 60
  %66 = load i32, i32* %line_height64, align 4
  %mul65 = mul nsw i32 1, %66
  %67 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %67, i32 0, i32 58
  %68 = load i32, i32* %menu_bar_height, align 4
  %69 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %69, i32 0, i32 28
  %70 = load i32, i32* %tool_bar_height, align 4
  %add66 = add nsw i32 %68, %70
  %add67 = add nsw i32 %mul65, %add66
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %horizontal_scroll_bars = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 26
  %72 = bitcast i48* %horizontal_scroll_bars to i64*
  %bf.load68 = load i64, i64* %72, align 8
  %bf.lshr69 = lshr i64 %bf.load68, 32
  %bf.clear70 = and i64 %bf.lshr69, 1
  %bf.cast71 = trunc i64 %bf.clear70 to i1
  br i1 %bf.cast71, label %cond.true.73, label %cond.false.74

cond.true.73:                                     ; preds = %cond.end.52
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %config_scroll_bar_height = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 71
  %74 = load i32, i32* %config_scroll_bar_height, align 4
  br label %cond.end.75

cond.false.74:                                    ; preds = %cond.end.52
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.74, %cond.true.73
  %cond76 = phi i32 [ %74, %cond.true.73 ], [ 0, %cond.false.74 ]
  %add77 = add nsw i32 %add67, %cond76
  %75 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %internal_border_width78 = getelementptr inbounds %struct.frame, %struct.frame* %75, i32 0, i32 51
  %76 = load i32, i32* %internal_border_width78, align 4
  %mul79 = mul nsw i32 2, %76
  %add80 = add nsw i32 %add77, %mul79
  %77 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data81 = getelementptr inbounds %struct.frame, %struct.frame* %77, i32 0, i32 62
  %x82 = bitcast %union.output_data* %output_data81 to %struct.x_output**
  %78 = load %struct.x_output*, %struct.x_output** %x82, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %78, i32 0, i32 0
  %79 = load i32, i32* %menubar_height, align 4
  %add83 = add nsw i32 %add80, %79
  %80 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data84 = getelementptr inbounds %struct.frame, %struct.frame* %80, i32 0, i32 62
  %x85 = bitcast %union.output_data* %output_data84 to %struct.x_output**
  %81 = load %struct.x_output*, %struct.x_output** %x85, align 8
  %toolbar_top_height = getelementptr inbounds %struct.x_output, %struct.x_output* %81, i32 0, i32 1
  %82 = load i32, i32* %toolbar_top_height, align 4
  %83 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data86 = getelementptr inbounds %struct.frame, %struct.frame* %83, i32 0, i32 62
  %x87 = bitcast %union.output_data* %output_data86 to %struct.x_output**
  %84 = load %struct.x_output*, %struct.x_output** %x87, align 8
  %toolbar_bottom_height = getelementptr inbounds %struct.x_output, %struct.x_output* %84, i32 0, i32 2
  %85 = load i32, i32* %toolbar_bottom_height, align 4
  %add88 = add nsw i32 %82, %85
  %add89 = add nsw i32 %add83, %add88
  store i32 %add89, i32* %base_height, align 4
  %86 = load i32, i32* %min_cols, align 4
  %cmp90 = icmp sgt i32 %86, 0
  br i1 %cmp90, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %cond.end.75
  %87 = load i32, i32* %min_cols, align 4
  %dec = add nsw i32 %87, -1
  store i32 %dec, i32* %min_cols, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.then.92, %cond.end.75
  %88 = load i32, i32* %min_rows, align 4
  %cmp94 = icmp sgt i32 %88, 0
  br i1 %cmp94, label %if.then.96, label %if.end.98

if.then.96:                                       ; preds = %if.end.93
  %89 = load i32, i32* %min_rows, align 4
  %dec97 = add nsw i32 %89, -1
  store i32 %dec97, i32* %min_rows, align 4
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.96, %if.end.93
  %90 = load i32, i32* %base_width, align 4
  %base_width99 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 4
  store i32 %90, i32* %base_width99, align 4
  %91 = load i32, i32* %base_height, align 4
  %base_height100 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 5
  store i32 %91, i32* %base_height100, align 4
  %92 = load i32, i32* %base_width, align 4
  %93 = load i32, i32* %min_cols, align 4
  %94 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %column_width101 = getelementptr inbounds %struct.frame, %struct.frame* %94, i32 0, i32 59
  %95 = load i32, i32* %column_width101, align 4
  %mul102 = mul nsw i32 %93, %95
  %add103 = add nsw i32 %92, %mul102
  %min_width = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 0
  store i32 %add103, i32* %min_width, align 4
  %96 = load i32, i32* %base_height, align 4
  %97 = load i32, i32* %min_rows, align 4
  %98 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %line_height104 = getelementptr inbounds %struct.frame, %struct.frame* %98, i32 0, i32 60
  %99 = load i32, i32* %line_height104, align 4
  %mul105 = mul nsw i32 %97, %99
  %add106 = add nsw i32 %96, %mul105
  %min_height = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 1
  store i32 %add106, i32* %min_height, align 4
  %100 = load i32, i32* %hint_flags, align 4
  %or107 = or i32 %100, 64
  store i32 %or107, i32* %hint_flags, align 4
  %win_gravity108 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 0, i32* %win_gravity108, align 4
  %101 = load i32, i32* %win_gravity, align 4
  %cmp109 = icmp eq i32 %101, 1
  br i1 %cmp109, label %if.then.111, label %if.else.113

if.then.111:                                      ; preds = %if.end.98
  %win_gravity112 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 1, i32* %win_gravity112, align 4
  br label %if.end.167

if.else.113:                                      ; preds = %if.end.98
  %102 = load i32, i32* %win_gravity, align 4
  %cmp114 = icmp eq i32 %102, 2
  br i1 %cmp114, label %if.then.116, label %if.else.118

if.then.116:                                      ; preds = %if.else.113
  %win_gravity117 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 2, i32* %win_gravity117, align 4
  br label %if.end.166

if.else.118:                                      ; preds = %if.else.113
  %103 = load i32, i32* %win_gravity, align 4
  %cmp119 = icmp eq i32 %103, 3
  br i1 %cmp119, label %if.then.121, label %if.else.123

if.then.121:                                      ; preds = %if.else.118
  %win_gravity122 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 3, i32* %win_gravity122, align 4
  br label %if.end.165

if.else.123:                                      ; preds = %if.else.118
  %104 = load i32, i32* %win_gravity, align 4
  %cmp124 = icmp eq i32 %104, 4
  br i1 %cmp124, label %if.then.126, label %if.else.128

if.then.126:                                      ; preds = %if.else.123
  %win_gravity127 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 4, i32* %win_gravity127, align 4
  br label %if.end.164

if.else.128:                                      ; preds = %if.else.123
  %105 = load i32, i32* %win_gravity, align 4
  %cmp129 = icmp eq i32 %105, 5
  br i1 %cmp129, label %if.then.131, label %if.else.133

if.then.131:                                      ; preds = %if.else.128
  %win_gravity132 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 5, i32* %win_gravity132, align 4
  br label %if.end.163

if.else.133:                                      ; preds = %if.else.128
  %106 = load i32, i32* %win_gravity, align 4
  %cmp134 = icmp eq i32 %106, 6
  br i1 %cmp134, label %if.then.136, label %if.else.138

if.then.136:                                      ; preds = %if.else.133
  %win_gravity137 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 6, i32* %win_gravity137, align 4
  br label %if.end.162

if.else.138:                                      ; preds = %if.else.133
  %107 = load i32, i32* %win_gravity, align 4
  %cmp139 = icmp eq i32 %107, 7
  br i1 %cmp139, label %if.then.141, label %if.else.143

if.then.141:                                      ; preds = %if.else.138
  %win_gravity142 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 7, i32* %win_gravity142, align 4
  br label %if.end.161

if.else.143:                                      ; preds = %if.else.138
  %108 = load i32, i32* %win_gravity, align 4
  %cmp144 = icmp eq i32 %108, 8
  br i1 %cmp144, label %if.then.146, label %if.else.148

if.then.146:                                      ; preds = %if.else.143
  %win_gravity147 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 8, i32* %win_gravity147, align 4
  br label %if.end.160

if.else.148:                                      ; preds = %if.else.143
  %109 = load i32, i32* %win_gravity, align 4
  %cmp149 = icmp eq i32 %109, 9
  br i1 %cmp149, label %if.then.151, label %if.else.153

if.then.151:                                      ; preds = %if.else.148
  %win_gravity152 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 9, i32* %win_gravity152, align 4
  br label %if.end.159

if.else.153:                                      ; preds = %if.else.148
  %110 = load i32, i32* %win_gravity, align 4
  %cmp154 = icmp eq i32 %110, 10
  br i1 %cmp154, label %if.then.156, label %if.end.158

if.then.156:                                      ; preds = %if.else.153
  %win_gravity157 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 10
  store i32 10, i32* %win_gravity157, align 4
  br label %if.end.158

if.end.158:                                       ; preds = %if.then.156, %if.else.153
  br label %if.end.159

if.end.159:                                       ; preds = %if.end.158, %if.then.151
  br label %if.end.160

if.end.160:                                       ; preds = %if.end.159, %if.then.146
  br label %if.end.161

if.end.161:                                       ; preds = %if.end.160, %if.then.141
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %if.then.136
  br label %if.end.163

if.end.163:                                       ; preds = %if.end.162, %if.then.131
  br label %if.end.164

if.end.164:                                       ; preds = %if.end.163, %if.then.126
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %if.then.121
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.165, %if.then.116
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.then.111
  %111 = load i8, i8* %user_position.addr, align 1
  %tobool168 = trunc i8 %111 to i1
  br i1 %tobool168, label %if.then.169, label %if.end.171

if.then.169:                                      ; preds = %if.end.167
  %112 = load i32, i32* %hint_flags, align 4
  %and = and i32 %112, -2
  store i32 %and, i32* %hint_flags, align 4
  %113 = load i32, i32* %hint_flags, align 4
  %or170 = or i32 %113, 128
  store i32 %or170, i32* %hint_flags, align 4
  br label %if.end.171

if.end.171:                                       ; preds = %if.then.169, %if.end.167
  %114 = load i32, i32* %scale, align 4
  %base_width172 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 4
  %115 = load i32, i32* %base_width172, align 4
  %div = sdiv i32 %115, %114
  store i32 %div, i32* %base_width172, align 4
  %116 = load i32, i32* %scale, align 4
  %base_height173 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 5
  %117 = load i32, i32* %base_height173, align 4
  %div174 = sdiv i32 %117, %116
  store i32 %div174, i32* %base_height173, align 4
  %118 = load i32, i32* %scale, align 4
  %width_inc175 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 6
  %119 = load i32, i32* %width_inc175, align 4
  %div176 = sdiv i32 %119, %118
  store i32 %div176, i32* %width_inc175, align 4
  %120 = load i32, i32* %scale, align 4
  %height_inc177 = getelementptr inbounds %struct._GdkGeometry, %struct._GdkGeometry* %size_hints, i32 0, i32 7
  %121 = load i32, i32* %height_inc177, align 4
  %div178 = sdiv i32 %121, %120
  store i32 %div178, i32* %height_inc177, align 4
  %122 = load i32, i32* %hint_flags, align 4
  %conv179 = sext i32 %122 to i64
  %123 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data180 = getelementptr inbounds %struct.frame, %struct.frame* %123, i32 0, i32 62
  %x181 = bitcast %union.output_data* %output_data180 to %struct.x_output**
  %124 = load %struct.x_output*, %struct.x_output** %x181, align 8
  %hint_flags182 = getelementptr inbounds %struct.x_output, %struct.x_output* %124, i32 0, i32 20
  %125 = load i64, i64* %hint_flags182, align 8
  %cmp183 = icmp ne i64 %conv179, %125
  br i1 %cmp183, label %if.then.192, label %lor.lhs.false.185

lor.lhs.false.185:                                ; preds = %if.end.171
  %126 = bitcast %struct._GdkGeometry* %size_hints to i8*
  %127 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data186 = getelementptr inbounds %struct.frame, %struct.frame* %127, i32 0, i32 62
  %x187 = bitcast %union.output_data* %output_data186 to %struct.x_output**
  %128 = load %struct.x_output*, %struct.x_output** %x187, align 8
  %size_hints188 = getelementptr inbounds %struct.x_output, %struct.x_output* %128, i32 0, i32 19
  %129 = bitcast %struct._GdkGeometry* %size_hints188 to i8*
  %call189 = call i32 @memcmp(i8* %126, i8* %129, i64 56) #7
  %cmp190 = icmp ne i32 %call189, 0
  br i1 %cmp190, label %if.then.192, label %if.end.205

if.then.192:                                      ; preds = %lor.lhs.false.185, %if.end.171
  call void @block_input()
  %130 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data193 = getelementptr inbounds %struct.frame, %struct.frame* %130, i32 0, i32 62
  %x194 = bitcast %union.output_data* %output_data193 to %struct.x_output**
  %131 = load %struct.x_output*, %struct.x_output** %x194, align 8
  %widget195 = getelementptr inbounds %struct.x_output, %struct.x_output* %131, i32 0, i32 12
  %132 = load %struct._GtkWidget*, %struct._GtkWidget** %widget195, align 8
  %133 = bitcast %struct._GtkWidget* %132 to %struct._GTypeInstance*
  %call196 = call i64 @gtk_window_get_type() #8
  %call197 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %133, i64 %call196)
  %134 = bitcast %struct._GTypeInstance* %call197 to %struct._GtkWindow*
  %135 = load i32, i32* %hint_flags, align 4
  call void @gtk_window_set_geometry_hints(%struct._GtkWindow* %134, %struct._GtkWidget* null, %struct._GdkGeometry* %size_hints, i32 %135)
  %136 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data198 = getelementptr inbounds %struct.frame, %struct.frame* %136, i32 0, i32 62
  %x199 = bitcast %union.output_data* %output_data198 to %struct.x_output**
  %137 = load %struct.x_output*, %struct.x_output** %x199, align 8
  %size_hints200 = getelementptr inbounds %struct.x_output, %struct.x_output* %137, i32 0, i32 19
  %138 = bitcast %struct._GdkGeometry* %size_hints200 to i8*
  %139 = bitcast %struct._GdkGeometry* %size_hints to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* %139, i64 56, i32 8, i1 false)
  %140 = load i32, i32* %hint_flags, align 4
  %conv201 = sext i32 %140 to i64
  %141 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data202 = getelementptr inbounds %struct.frame, %struct.frame* %141, i32 0, i32 62
  %x203 = bitcast %union.output_data* %output_data202 to %struct.x_output**
  %142 = load %struct.x_output*, %struct.x_output** %x203, align 8
  %hint_flags204 = getelementptr inbounds %struct.x_output, %struct.x_output* %142, i32 0, i32 20
  store i64 %conv201, i64* %hint_flags204, align 8
  call void @unblock_input()
  br label %if.end.205

if.end.205:                                       ; preds = %if.then, %if.then.19, %if.then.192, %lor.lhs.false.185
  ret void
}

declare i64 @list2(i64, i64) #1

declare void @gtk_window_resize(%struct._GtkWindow*, i32, i32) #1

declare i32 @gtk_events_pending() #1

declare void @gdk_flush() #1

declare void @x_wait_for_event(%struct.frame*, i32) #1

declare void @store_frame_param(%struct.frame*, i64, i64) #1

declare void @x_set_fullscreen(%struct.frame*, i64, i64) #1

declare void @adjust_frame_size(%struct.frame*, i32, i32, i32, i1 zeroext, i64) #1

; Function Attrs: nounwind uwtable
define %struct._GtkWidget* @xg_win_to_widget(%struct._XDisplay* %dpy, i64 %wdesc) #0 {
entry:
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %wdesc.addr = alloca i64, align 8
  %gdkwin = alloca i8*, align 8
  %gwdesc = alloca %struct._GtkWidget*, align 8
  %event = alloca %union._GdkEvent, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i64 %wdesc, i64* %wdesc.addr, align 8
  store %struct._GtkWidget* null, %struct._GtkWidget** %gwdesc, align 8
  call void @block_input()
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %0)
  %1 = load i64, i64* %wdesc.addr, align 8
  %call1 = call i8* @gdk_xid_table_lookup_for_display(%struct._GdkDisplay* %call, i64 %1)
  store i8* %call1, i8** %gdkwin, align 8
  %2 = load i8*, i8** %gdkwin, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %gdkwin, align 8
  %4 = bitcast i8* %3 to %struct._GdkDrawable*
  %any = bitcast %union._GdkEvent* %event to %struct._GdkEventAny*
  %window = getelementptr inbounds %struct._GdkEventAny, %struct._GdkEventAny* %any, i32 0, i32 1
  store %struct._GdkDrawable* %4, %struct._GdkDrawable** %window, align 8
  %any2 = bitcast %union._GdkEvent* %event to %struct._GdkEventAny*
  %type = getelementptr inbounds %struct._GdkEventAny, %struct._GdkEventAny* %any2, i32 0, i32 0
  store i32 -1, i32* %type, align 4
  %call3 = call %struct._GtkWidget* @gtk_get_event_widget(%union._GdkEvent* %event)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %gwdesc, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @unblock_input()
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  ret %struct._GtkWidget* %5
}

declare i8* @gdk_xid_table_lookup_for_display(%struct._GdkDisplay*, i64) #1

declare %struct._GtkWidget* @gtk_get_event_widget(%union._GdkEvent*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_create_frame_widgets(%struct.frame* %f) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %wtop = alloca %struct._GtkWidget*, align 8
  %wvbox = alloca %struct._GtkWidget*, align 8
  %whbox = alloca %struct._GtkWidget*, align 8
  %wfixed = alloca %struct._GtkWidget*, align 8
  %style = alloca %struct._GtkRcStyle*, align 8
  %title = alloca i8*, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  %screen = alloca %struct._GdkScreen*, align 8
  %gs = alloca %struct._GtkSettings*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* null, i8** %title, align 8
  call void @block_input()
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %explicit_parent = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 46
  %bf.load = load i8, i8* %explicit_parent, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  %conv = zext i1 %bf.cast to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 44
  %4 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %4, i32 0, i32 2
  %5 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %5)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  %6 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %8 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %parent_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 11
  %9 = load i64, i64* %parent_desc, align 8
  %conv6 = trunc i64 %9 to i32
  %call7 = call %struct._GtkWidget* @gtk_plug_new_for_display(%struct._GdkDisplay* %6, i32 %conv6)
  store %struct._GtkWidget* %call7, %struct._GtkWidget** %wtop, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %call8 = call %struct._GtkWidget* @gtk_window_new(i32 0)
  store %struct._GtkWidget* %call8, %struct._GtkWidget** %wtop, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_set_screen(%struct._GtkWidget* %10, %struct.frame* %11)
  %call9 = call %struct._GtkWidget* @gtk_vbox_new(i32 0, i32 0)
  store %struct._GtkWidget* %call9, %struct._GtkWidget** %wvbox, align 8
  %call10 = call %struct._GtkWidget* @gtk_hbox_new(i32 0, i32 0)
  store %struct._GtkWidget* %call10, %struct._GtkWidget** %whbox, align 8
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %13 = bitcast %struct._GtkWidget* %12 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_box_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %13, i64 %call11)
  %14 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %14, i32 0)
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  %16 = bitcast %struct._GtkWidget* %15 to %struct._GTypeInstance*
  %call13 = call i64 @gtk_box_get_type() #8
  %call14 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %16, i64 %call13)
  %17 = bitcast %struct._GTypeInstance* %call14 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %17, i32 0)
  %call15 = call %struct._GtkWidget* @gtk_fixed_new()
  store %struct._GtkWidget* %call15, %struct._GtkWidget** %wfixed, align 8
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %tobool = icmp ne %struct._GtkWidget* %18, null
  br i1 %tobool, label %lor.lhs.false, label %if.then.21

lor.lhs.false:                                    ; preds = %if.end
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %tobool16 = icmp ne %struct._GtkWidget* %19, null
  br i1 %tobool16, label %lor.lhs.false.17, label %if.then.21

lor.lhs.false.17:                                 ; preds = %lor.lhs.false
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  %tobool18 = icmp ne %struct._GtkWidget* %20, null
  br i1 %tobool18, label %lor.lhs.false.19, label %if.then.21

lor.lhs.false.19:                                 ; preds = %lor.lhs.false.17
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %tobool20 = icmp ne %struct._GtkWidget* %21, null
  br i1 %tobool20, label %if.end.34, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false.19, %lor.lhs.false.17, %lor.lhs.false, %if.end
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %tobool22 = icmp ne %struct._GtkWidget* %22, null
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.21
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %23)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.then.21
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %tobool25 = icmp ne %struct._GtkWidget* %24, null
  br i1 %tobool25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.24
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %25)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %if.end.24
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  %tobool28 = icmp ne %struct._GtkWidget* %26, null
  br i1 %tobool28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end.27
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %27)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.29, %if.end.27
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %tobool31 = icmp ne %struct._GtkWidget* %28, null
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.30
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %29)
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.end.30
  call void @unblock_input()
  store i1 false, i1* %retval
  br label %return

if.end.34:                                        ; preds = %lor.lhs.false.19
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %33 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call35 = call i8* @SSDATA(i64 %33)
  call void @gtk_widget_set_name(%struct._GtkWidget* %32, i8* %call35)
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %title36 = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 3
  %35 = load i64, i64* %title36, align 8
  %call37 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp38 = icmp eq i64 %35, %call37
  br i1 %cmp38, label %if.else.45, label %if.then.40

if.then.40:                                       ; preds = %if.end.34
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %title41 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 3
  %37 = load i64, i64* %title41, align 8
  %call42 = call i64 @builtin_lisp_symbol(i32 988)
  %call43 = call i64 @code_convert_string_norecord(i64 %37, i64 %call42, i1 zeroext true)
  %call44 = call i8* @SSDATA(i64 %call43)
  store i8* %call44, i8** %title, align 8
  br label %if.end.55

if.else.45:                                       ; preds = %if.end.34
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %name = getelementptr inbounds %struct.frame, %struct.frame* %38, i32 0, i32 1
  %39 = load i64, i64* %name, align 8
  %call46 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp47 = icmp eq i64 %39, %call46
  br i1 %cmp47, label %if.end.54, label %if.then.49

if.then.49:                                       ; preds = %if.else.45
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %name50 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 1
  %41 = load i64, i64* %name50, align 8
  %call51 = call i64 @builtin_lisp_symbol(i32 988)
  %call52 = call i64 @code_convert_string_norecord(i64 %41, i64 %call51, i1 zeroext true)
  %call53 = call i8* @SSDATA(i64 %call52)
  store i8* %call53, i8** %title, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.49, %if.else.45
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.40
  %42 = load i8*, i8** %title, align 8
  %tobool56 = icmp ne i8* %42, null
  br i1 %tobool56, label %if.then.57, label %if.end.60

if.then.57:                                       ; preds = %if.end.55
  %43 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %44 = bitcast %struct._GtkWidget* %43 to %struct._GTypeInstance*
  %call58 = call i64 @gtk_window_get_type() #8
  %call59 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %44, i64 %call58)
  %45 = bitcast %struct._GTypeInstance* %call59 to %struct._GtkWindow*
  %46 = load i8*, i8** %title, align 8
  call void @gtk_window_set_title(%struct._GtkWindow* %45, i8* %46)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.57, %if.end.55
  %47 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data61 = getelementptr inbounds %struct.frame, %struct.frame* %48, i32 0, i32 62
  %x62 = bitcast %union.output_data* %output_data61 to %struct.x_output**
  %49 = load %struct.x_output*, %struct.x_output** %x62, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %49, i32 0, i32 12
  store %struct._GtkWidget* %47, %struct._GtkWidget** %widget, align 8
  %50 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data63 = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 62
  %x64 = bitcast %union.output_data* %output_data63 to %struct.x_output**
  %52 = load %struct.x_output*, %struct.x_output** %x64, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %52, i32 0, i32 13
  store %struct._GtkWidget* %50, %struct._GtkWidget** %edit_widget, align 8
  %53 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data65 = getelementptr inbounds %struct.frame, %struct.frame* %54, i32 0, i32 62
  %x66 = bitcast %union.output_data* %output_data65 to %struct.x_output**
  %55 = load %struct.x_output*, %struct.x_output** %x66, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %55, i32 0, i32 14
  store %struct._GtkWidget* %53, %struct._GtkWidget** %vbox_widget, align 8
  %56 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data67 = getelementptr inbounds %struct.frame, %struct.frame* %57, i32 0, i32 62
  %x68 = bitcast %union.output_data* %output_data67 to %struct.x_output**
  %58 = load %struct.x_output*, %struct.x_output** %x68, align 8
  %hbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %58, i32 0, i32 15
  store %struct._GtkWidget* %56, %struct._GtkWidget** %hbox_widget, align 8
  %59 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_set_has_window(%struct._GtkWidget* %59, i32 1)
  %60 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %61 = bitcast %struct._GtkWidget* %60 to %struct._GTypeInstance*
  %call69 = call i64 @gtk_container_get_type() #8
  %call70 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %61, i64 %call69)
  %62 = bitcast %struct._GTypeInstance* %call70 to %struct._GtkContainer*
  %63 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  call void @gtk_container_add(%struct._GtkContainer* %62, %struct._GtkWidget* %63)
  %64 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %65 = bitcast %struct._GtkWidget* %64 to %struct._GTypeInstance*
  %call71 = call i64 @gtk_box_get_type() #8
  %call72 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %65, i64 %call71)
  %66 = bitcast %struct._GTypeInstance* %call72 to %struct._GtkBox*
  %67 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %66, %struct._GtkWidget* %67, i32 1, i32 1, i32 0)
  %68 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox, align 8
  %69 = bitcast %struct._GtkWidget* %68 to %struct._GTypeInstance*
  %call73 = call i64 @gtk_box_get_type() #8
  %call74 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %69, i64 %call73)
  %70 = bitcast %struct._GTypeInstance* %call74 to %struct._GtkBox*
  %71 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %70, %struct._GtkWidget* %71, i32 1, i32 1, i32 0)
  %72 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %external_tool_bar = getelementptr inbounds %struct.frame, %struct.frame* %72, i32 0, i32 26
  %73 = bitcast i48* %external_tool_bar to i64*
  %bf.load75 = load i64, i64* %73, align 8
  %bf.lshr76 = lshr i64 %bf.load75, 5
  %bf.clear77 = and i64 %bf.lshr76, 1
  %bf.cast78 = trunc i64 %bf.clear77 to i1
  br i1 %bf.cast78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.60
  %74 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @update_frame_tool_bar(%struct.frame* %74)
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %if.end.60
  %75 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_set_double_buffered(%struct._GtkWidget* %75, i32 0)
  %76 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %77 = bitcast %struct._GtkWidget* %76 to %struct._GTypeInstance*
  %call81 = call i64 @gtk_window_get_type() #8
  %call82 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %77, i64 %call81)
  %78 = bitcast %struct._GTypeInstance* %call82 to %struct._GtkWindow*
  %79 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 357), align 8
  %call83 = call i8* @SSDATA(i64 %79)
  %80 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 356), align 8
  %call84 = call i8* @SSDATA(i64 %80)
  call void @gtk_window_set_wmclass(%struct._GtkWindow* %78, i8* %call83, i8* %call84)
  %81 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %82 = bitcast %struct._GtkWidget* %81 to %struct._GTypeInstance*
  %call85 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %82, i64 80)
  %83 = bitcast %struct._GTypeInstance* %call85 to %struct._GObject*
  %84 = bitcast %struct._GObject* %83 to i8*
  %85 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %86 = bitcast %struct.frame* %85 to i8*
  %call86 = call i64 @g_signal_connect_data(i8* %84, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %union._GdkEvent*, i8*)* @delete_cb to void ()*), i8* %86, void (i8*, %struct._GClosure*)* null, i32 0)
  %87 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_set_geometry(%struct.frame* %87)
  %88 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data87 = getelementptr inbounds %struct.frame, %struct.frame* %88, i32 0, i32 62
  %x88 = bitcast %union.output_data* %output_data87 to %struct.x_output**
  %89 = load %struct.x_output*, %struct.x_output** %x88, align 8
  %widget89 = getelementptr inbounds %struct.x_output, %struct.x_output* %89, i32 0, i32 12
  %90 = load %struct._GtkWidget*, %struct._GtkWidget** %widget89, align 8
  %91 = bitcast %struct._GtkWidget* %90 to %struct._GTypeInstance*
  %call90 = call i64 @gtk_window_get_type() #8
  %call91 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %91, i64 %call90)
  %92 = bitcast %struct._GTypeInstance* %call91 to %struct._GtkWindow*
  %call92 = call i32 @gtk_window_get_gravity(%struct._GtkWindow* %92)
  %93 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %win_gravity = getelementptr inbounds %struct.frame, %struct.frame* %93, i32 0, i32 48
  store i32 %call92, i32* %win_gravity, align 4
  %94 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_add_events(%struct._GtkWidget* %94, i32 194310)
  %95 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_realize(%struct._GtkWidget* %95)
  %96 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %tobool93 = icmp ne %struct._GtkWidget* %96, null
  br i1 %tobool93, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.end.80
  %97 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %call94 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %97)
  %tobool95 = icmp ne %struct._GdkDrawable* %call94, null
  br i1 %tobool95, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %98 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %call96 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %98)
  %call97 = call i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable* %call96)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.end.80
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call97, %cond.true ], [ 0, %cond.false ]
  %99 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data98 = getelementptr inbounds %struct.frame, %struct.frame* %99, i32 0, i32 62
  %x99 = bitcast %union.output_data* %output_data98 to %struct.x_output**
  %100 = load %struct.x_output*, %struct.x_output** %x99, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %100, i32 0, i32 9
  store i64 %cond, i64* %window_desc, align 8
  %101 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %102 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %103 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %103, i32 0, i32 77
  %104 = load i64, i64* %background_pixel, align 8
  call void @xg_set_widget_bg(%struct.frame* %101, %struct._GtkWidget* %102, i64 %104)
  %105 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %call100 = call %struct._GtkRcStyle* @gtk_widget_get_modifier_style(%struct._GtkWidget* %105)
  store %struct._GtkRcStyle* %call100, %struct._GtkRcStyle** %style, align 8
  %call101 = call noalias i8* @g_strdup(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0))
  %106 = load %struct._GtkRcStyle*, %struct._GtkRcStyle** %style, align 8
  %bg_pixmap_name = getelementptr inbounds %struct._GtkRcStyle, %struct._GtkRcStyle* %106, i32 0, i32 2
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* %bg_pixmap_name, i32 0, i64 0
  store i8* %call101, i8** %arrayidx, align 8
  %107 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %108 = load %struct._GtkRcStyle*, %struct._GtkRcStyle** %style, align 8
  call void @gtk_widget_modify_style(%struct._GtkWidget* %107, %struct._GtkRcStyle* %108)
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data102 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 62
  %x103 = bitcast %union.output_data* %output_data102 to %struct.x_output**
  %110 = load %struct.x_output*, %struct.x_output** %x103, align 8
  %ttip_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %110, i32 0, i32 21
  store %struct._GtkTooltip* null, %struct._GtkTooltip** %ttip_widget, align 8
  %111 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data104 = getelementptr inbounds %struct.frame, %struct.frame* %111, i32 0, i32 62
  %x105 = bitcast %union.output_data* %output_data104 to %struct.x_output**
  %112 = load %struct.x_output*, %struct.x_output** %x105, align 8
  %ttip_lbl = getelementptr inbounds %struct.x_output, %struct.x_output* %112, i32 0, i32 22
  store %struct._GtkWidget* null, %struct._GtkWidget** %ttip_lbl, align 8
  %113 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data106 = getelementptr inbounds %struct.frame, %struct.frame* %113, i32 0, i32 62
  %x107 = bitcast %union.output_data* %output_data106 to %struct.x_output**
  %114 = load %struct.x_output*, %struct.x_output** %x107, align 8
  %ttip_window = getelementptr inbounds %struct.x_output, %struct.x_output* %114, i32 0, i32 23
  store %struct._GtkWindow* null, %struct._GtkWindow** %ttip_window, align 8
  %115 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  call void @gtk_widget_set_tooltip_text(%struct._GtkWidget* %115, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0))
  %116 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %117 = bitcast %struct._GtkWidget* %116 to i8*
  %118 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %119 = bitcast %struct.frame* %118 to i8*
  %call108 = call i64 @g_signal_connect_data(i8* %117, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, i32, i32, i32, %struct._GtkTooltip*, i8*)* @qttip_cb to void ()*), i8* %119, void (i8*, %struct._GClosure*)* null, i32 0)
  %120 = load %struct._GtkWidget*, %struct._GtkWidget** %wtop, align 8
  %call109 = call %struct._GdkScreen* @gtk_widget_get_screen(%struct._GtkWidget* %120)
  store %struct._GdkScreen* %call109, %struct._GdkScreen** %screen, align 8
  %121 = load %struct._GdkScreen*, %struct._GdkScreen** %screen, align 8
  %call110 = call %struct._GtkSettings* @gtk_settings_get_for_screen(%struct._GdkScreen* %121)
  store %struct._GtkSettings* %call110, %struct._GtkSettings** %gs, align 8
  %122 = load %struct._GtkSettings*, %struct._GtkSettings** %gs, align 8
  %123 = bitcast %struct._GtkSettings* %122 to %struct._GTypeInstance*
  %call111 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %123, i64 80)
  %124 = bitcast %struct._GTypeInstance* %call111 to %struct._GObject*
  %125 = bitcast %struct._GObject* %124 to i8*
  %call112 = call i64 @g_signal_handler_find(i8* %125, i32 8, i32 0, i32 0, %struct._GClosure* null, i8* bitcast (void (%struct._GObject*, %struct._GParamSpec*, i8*)* @style_changed_cb to i8*), i8* null)
  %tobool113 = icmp ne i64 %call112, 0
  br i1 %tobool113, label %if.end.118, label %if.then.114

if.then.114:                                      ; preds = %cond.end
  %126 = load %struct._GtkSettings*, %struct._GtkSettings** %gs, align 8
  %127 = bitcast %struct._GtkSettings* %126 to %struct._GTypeInstance*
  %call115 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %127, i64 80)
  %128 = bitcast %struct._GTypeInstance* %call115 to %struct._GObject*
  %129 = bitcast %struct._GObject* %128 to i8*
  %130 = load %struct._GdkScreen*, %struct._GdkScreen** %screen, align 8
  %call116 = call %struct._GdkDisplay* @gdk_screen_get_display(%struct._GdkScreen* %130)
  %131 = bitcast %struct._GdkDisplay* %call116 to i8*
  %call117 = call i64 @g_signal_connect_data(i8* %129, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), void ()* bitcast (void (%struct._GObject*, %struct._GParamSpec*, i8*)* @style_changed_cb to void ()*), i8* %131, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end.118

if.end.118:                                       ; preds = %if.then.114, %cond.end
  call void @unblock_input()
  store i1 true, i1* %retval
  br label %return

return:                                           ; preds = %if.end.118, %if.end.33
  %132 = load i1, i1* %retval
  ret i1 %132
}

declare %struct._GtkWidget* @gtk_plug_new_for_display(%struct._GdkDisplay*, i32) #1

declare %struct._GtkWidget* @gtk_window_new(i32) #1

; Function Attrs: nounwind uwtable
define internal void @xg_set_screen(%struct._GtkWidget* %w, %struct.frame* %f) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  %gscreen = alloca %struct._GdkScreen*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 2
  %3 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %4 = load %struct._XDisplay*, %struct._XDisplay** @gdk_display, align 8
  %cmp = icmp ne %struct._XDisplay* %3, %4
  br i1 %cmp, label %if.then, label %if.end.23

if.then:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display4 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display4, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %8)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  %9 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %call5 = call %struct._GdkScreen* @gdk_display_get_default_screen(%struct._GdkDisplay* %9)
  store %struct._GdkScreen* %call5, %struct._GdkScreen** %gscreen, align 8
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %11 = bitcast %struct._GtkWidget* %10 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %11, %struct._GTypeInstance** %__inst, align 8
  %call6 = call i64 @gtk_menu_get_type() #8
  store i64 %call6, i64* %__t, align 8
  %12 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %12, null
  br i1 %tobool, label %if.else, label %if.then.7

if.then.7:                                        ; preds = %if.then
  store i32 0, i32* %__r, align 4
  br label %if.end.14

if.else:                                          ; preds = %if.then
  %13 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %13, i32 0, i32 0
  %14 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool8 = icmp ne %struct._GTypeClass* %14, null
  br i1 %tobool8, label %land.lhs.true, label %if.else.12

land.lhs.true:                                    ; preds = %if.else
  %15 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class9 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %15, i32 0, i32 0
  %16 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class9, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %16, i32 0, i32 0
  %17 = load i64, i64* %g_type, align 8
  %18 = load i64, i64* %__t, align 8
  %cmp10 = icmp eq i64 %17, %18
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.12:                                       ; preds = %land.lhs.true, %if.else
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %20 = load i64, i64* %__t, align 8
  %call13 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %19, i64 %20) #7
  store i32 %call13, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.12, %if.then.11
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %if.then.7
  %21 = load i32, i32* %__r, align 4
  store i32 %21, i32* %tmp
  %22 = load i32, i32* %tmp
  %tobool15 = icmp ne i32 %22, 0
  br i1 %tobool15, label %if.then.16, label %if.else.19

if.then.16:                                       ; preds = %if.end.14
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %24 = bitcast %struct._GtkWidget* %23 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_menu_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %24, i64 %call17)
  %25 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkMenu*
  %26 = load %struct._GdkScreen*, %struct._GdkScreen** %gscreen, align 8
  call void @gtk_menu_set_screen(%struct._GtkMenu* %25, %struct._GdkScreen* %26)
  br label %if.end.22

if.else.19:                                       ; preds = %if.end.14
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call20 = call i64 @gtk_window_get_type() #8
  %call21 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call20)
  %29 = bitcast %struct._GTypeInstance* %call21 to %struct._GtkWindow*
  %30 = load %struct._GdkScreen*, %struct._GdkScreen** %gscreen, align 8
  call void @gtk_window_set_screen(%struct._GtkWindow* %29, %struct._GdkScreen* %30)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.16
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %entry
  ret void
}

declare %struct._GtkWidget* @gtk_vbox_new(i32, i32) #1

declare %struct._GtkWidget* @gtk_hbox_new(i32, i32) #1

declare void @gtk_box_set_homogeneous(%struct._GtkBox*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_box_get_type() #3

declare %struct._GtkWidget* @gtk_fixed_new() #1

declare void @gtk_widget_destroy(%struct._GtkWidget*) #1

declare void @gtk_widget_set_name(%struct._GtkWidget*, i8*) #1

declare void @gtk_window_set_title(%struct._GtkWindow*, i8*) #1

declare void @gtk_widget_set_has_window(%struct._GtkWidget*, i32) #1

declare void @gtk_container_add(%struct._GtkContainer*, %struct._GtkWidget*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_container_get_type() #3

declare void @gtk_box_pack_start(%struct._GtkBox*, %struct._GtkWidget*, i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @update_frame_tool_bar(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %x = alloca %struct.x_output*, align 8
  %hmargin = alloca i32, align 4
  %vmargin = alloca i32, align 4
  %wtoolbar = alloca %struct._GtkToolbar*, align 8
  %ti = alloca %struct._GtkToolItem*, align 8
  %dir = alloca i32, align 4
  %style = alloca i64, align 8
  %text_image = alloca i8, align 1
  %horiz = alloca i8, align 1
  %tbinfo = alloca %struct.xg_frame_tb_info*, align 8
  %screen = alloca %struct._GdkScreen*, align 8
  %icon_theme = alloca %struct._GtkIconTheme*, align 8
  %enabled_p = alloca i8, align 1
  %selected_p = alloca i8, align 1
  %idx = alloca i32, align 4
  %img_id = alloca i64, align 8
  %icon_size = alloca i32, align 4
  %img = alloca %struct.image*, align 8
  %image = alloca i64, align 8
  %stock = alloca i64, align 8
  %stock_name = alloca i8*, align 8
  %icon_name = alloca i8*, align 8
  %rtl = alloca i64, align 8
  %wbutton = alloca %struct._GtkWidget*, align 8
  %specified_file = alloca i64, align 8
  %vert_only = alloca i8, align 1
  %label = alloca i8*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst217 = alloca %struct._GTypeInstance*, align 8
  %__t219 = alloca i64, align 8
  %__r222 = alloca i32, align 4
  %tmp238 = alloca i32, align 4
  %tem = alloca i64, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %inhibit = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  store i32 0, i32* %hmargin, align 4
  store i32 0, i32* %vmargin, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 13
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @block_input()
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %call = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %5, i64 2147483647)
  br i1 %call, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %6 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %shr = ashr i64 %6, 2
  %conv = trunc i64 %shr to i32
  store i32 %conv, i32* %hmargin, align 4
  %7 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %shr5 = ashr i64 %7, 2
  %conv6 = trunc i64 %shr5 to i32
  store i32 %conv6, i32* %vmargin, align 4
  br label %if.end.27

if.else:                                          ; preds = %if.end
  %8 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %and = and i64 %8, 7
  %conv7 = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv7, 3
  br i1 %cmp, label %if.then.9, label %if.end.26

if.then.9:                                        ; preds = %if.else
  %9 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub = sub nsw i64 %9, 3
  %10 = inttoptr i64 %sub to i8*
  %11 = bitcast i8* %10 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %11, i32 0, i32 0
  %12 = load i64, i64* %car, align 8
  %call10 = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %12, i64 2147483647)
  br i1 %call10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.then.9
  %13 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub12 = sub nsw i64 %13, 3
  %14 = inttoptr i64 %sub12 to i8*
  %15 = bitcast i8* %14 to %struct.Lisp_Cons*
  %car13 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %15, i32 0, i32 0
  %16 = load i64, i64* %car13, align 8
  %shr14 = ashr i64 %16, 2
  %conv15 = trunc i64 %shr14 to i32
  store i32 %conv15, i32* %hmargin, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.11, %if.then.9
  %17 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub17 = sub nsw i64 %17, 3
  %18 = inttoptr i64 %sub17 to i8*
  %19 = bitcast i8* %18 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %19, i32 0, i32 1
  %cdr = bitcast %union.anon.13* %u to i64*
  %20 = load i64, i64* %cdr, align 8
  %call18 = call zeroext i1 @RANGED_INTEGERP(i64 1, i64 %20, i64 2147483647)
  br i1 %call18, label %if.then.19, label %if.end.25

if.then.19:                                       ; preds = %if.end.16
  %21 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 300), align 8
  %sub20 = sub nsw i64 %21, 3
  %22 = inttoptr i64 %sub20 to i8*
  %23 = bitcast i8* %22 to %struct.Lisp_Cons*
  %u21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %23, i32 0, i32 1
  %cdr22 = bitcast %union.anon.13* %u21 to i64*
  %24 = load i64, i64* %cdr22, align 8
  %shr23 = ashr i64 %24, 2
  %conv24 = trunc i64 %shr23 to i32
  store i32 %conv24, i32* %vmargin, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.19, %if.end.16
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.else
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then.4
  %25 = load i32, i32* %hmargin, align 4
  %sub28 = sub nsw i32 %25, 4
  %cmp29 = icmp sgt i32 0, %sub28
  br i1 %cmp29, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.27
  br label %cond.end

cond.false:                                       ; preds = %if.end.27
  %26 = load i32, i32* %hmargin, align 4
  %sub31 = sub nsw i32 %26, 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %sub31, %cond.false ]
  store i32 %cond, i32* %hmargin, align 4
  %27 = load i32, i32* %vmargin, align 4
  %sub32 = sub nsw i32 %27, 4
  %cmp33 = icmp sgt i32 0, %sub32
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.end
  br label %cond.end.38

cond.false.36:                                    ; preds = %cond.end
  %28 = load i32, i32* %vmargin, align 4
  %sub37 = sub nsw i32 %28, 4
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.36, %cond.true.35
  %cond39 = phi i32 [ 0, %cond.true.35 ], [ %sub37, %cond.false.36 ]
  store i32 %cond39, i32* %vmargin, align 4
  %29 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 17
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget, align 8
  %tobool40 = icmp ne %struct._GtkWidget* %30, null
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %cond.end.38
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_create_tool_bar(%struct.frame* %31)
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.41, %cond.end.38
  %32 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget43 = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 17
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget43, align 8
  %34 = bitcast %struct._GtkWidget* %33 to %struct._GTypeInstance*
  %call44 = call i64 @gtk_toolbar_get_type() #8
  %call45 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %34, i64 %call44)
  %35 = bitcast %struct._GTypeInstance* %call45 to %struct._GtkToolbar*
  store %struct._GtkToolbar* %35, %struct._GtkToolbar** %wtoolbar, align 8
  %36 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %37 = bitcast %struct._GtkToolbar* %36 to %struct._GTypeInstance*
  %call46 = call i64 @gtk_widget_get_type() #8
  %call47 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %37, i64 %call46)
  %38 = bitcast %struct._GTypeInstance* %call47 to %struct._GtkWidget*
  %call48 = call i32 @gtk_widget_get_direction(%struct._GtkWidget* %38)
  store i32 %call48, i32* %dir, align 4
  %call49 = call i64 @Ftool_bar_get_system_style()
  store i64 %call49, i64* %style, align 8
  %39 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %40 = bitcast %struct._GtkToolbar* %39 to %struct._GTypeInstance*
  %call50 = call i64 @gtk_widget_get_type() #8
  %call51 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %40, i64 %call50)
  %41 = bitcast %struct._GTypeInstance* %call51 to %struct._GtkWidget*
  %call52 = call %struct._GdkScreen* @gtk_widget_get_screen(%struct._GtkWidget* %41)
  store %struct._GdkScreen* %call52, %struct._GdkScreen** %screen, align 8
  %42 = load %struct._GdkScreen*, %struct._GdkScreen** %screen, align 8
  %call53 = call %struct._GtkIconTheme* @gtk_icon_theme_get_for_screen(%struct._GdkScreen* %42)
  store %struct._GtkIconTheme* %call53, %struct._GtkIconTheme** %icon_theme, align 8
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data54 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 62
  %x55 = bitcast %union.output_data* %output_data54 to %struct.x_output**
  %44 = load %struct.x_output*, %struct.x_output** %x55, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %44, i32 0, i32 12
  %45 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %46 = bitcast %struct._GtkWidget* %45 to %struct._GTypeInstance*
  %call56 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %46, i64 80)
  %47 = bitcast %struct._GTypeInstance* %call56 to %struct._GObject*
  %call57 = call i8* @g_object_get_data(%struct._GObject* %47, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0))
  %48 = bitcast i8* %call57 to %struct.xg_frame_tb_info*
  store %struct.xg_frame_tb_info* %48, %struct.xg_frame_tb_info** %tbinfo, align 8
  %49 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %last_tool_bar = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %49, i32 0, i32 0
  %50 = load i64, i64* %last_tool_bar, align 8
  %call58 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp59 = icmp eq i64 %50, %call58
  br i1 %cmp59, label %if.end.93, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end.42
  %51 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %51, i32 0, i32 17
  %52 = load i64, i64* %tool_bar_items, align 8
  %call61 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp62 = icmp eq i64 %52, %call61
  br i1 %cmp62, label %if.end.93, label %land.lhs.true.64

land.lhs.true.64:                                 ; preds = %land.lhs.true
  %53 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %n_last_items = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %53, i32 0, i32 2
  %54 = load i32, i32* %n_last_items, align 4
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %n_tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 30
  %56 = load i32, i32* %n_tool_bar_items, align 4
  %cmp65 = icmp eq i32 %54, %56
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.93

land.lhs.true.67:                                 ; preds = %land.lhs.true.64
  %57 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %hmargin68 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %57, i32 0, i32 3
  %58 = load i32, i32* %hmargin68, align 4
  %59 = load i32, i32* %hmargin, align 4
  %cmp69 = icmp eq i32 %58, %59
  br i1 %cmp69, label %land.lhs.true.71, label %if.end.93

land.lhs.true.71:                                 ; preds = %land.lhs.true.67
  %60 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %vmargin72 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %60, i32 0, i32 4
  %61 = load i32, i32* %vmargin72, align 4
  %62 = load i32, i32* %vmargin, align 4
  %cmp73 = icmp eq i32 %61, %62
  br i1 %cmp73, label %land.lhs.true.75, label %if.end.93

land.lhs.true.75:                                 ; preds = %land.lhs.true.71
  %63 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %dir76 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %63, i32 0, i32 5
  %64 = load i32, i32* %dir76, align 4
  %65 = load i32, i32* %dir, align 4
  %cmp77 = icmp eq i32 %64, %65
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.93

land.lhs.true.79:                                 ; preds = %land.lhs.true.75
  %66 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %style80 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %66, i32 0, i32 1
  %67 = load i64, i64* %style80, align 8
  %68 = load i64, i64* %style, align 8
  %call81 = call i64 @Fequal(i64 %67, i64 %68)
  %call82 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp83 = icmp eq i64 %call81, %call82
  br i1 %cmp83, label %if.end.93, label %land.lhs.true.85

land.lhs.true.85:                                 ; preds = %land.lhs.true.79
  %69 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %last_tool_bar86 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %69, i32 0, i32 0
  %70 = load i64, i64* %last_tool_bar86, align 8
  %71 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items87 = getelementptr inbounds %struct.frame, %struct.frame* %71, i32 0, i32 17
  %72 = load i64, i64* %tool_bar_items87, align 8
  %call88 = call i64 @Fequal(i64 %70, i64 %72)
  %call89 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp90 = icmp eq i64 %call88, %call89
  br i1 %cmp90, label %if.end.93, label %if.then.92

if.then.92:                                       ; preds = %land.lhs.true.85
  call void @unblock_input()
  br label %return

if.end.93:                                        ; preds = %land.lhs.true.85, %land.lhs.true.79, %land.lhs.true.75, %land.lhs.true.71, %land.lhs.true.67, %land.lhs.true.64, %land.lhs.true, %if.end.42
  %73 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items94 = getelementptr inbounds %struct.frame, %struct.frame* %73, i32 0, i32 17
  %74 = load i64, i64* %tool_bar_items94, align 8
  %75 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %last_tool_bar95 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %75, i32 0, i32 0
  store i64 %74, i64* %last_tool_bar95, align 8
  %76 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %n_tool_bar_items96 = getelementptr inbounds %struct.frame, %struct.frame* %76, i32 0, i32 30
  %77 = load i32, i32* %n_tool_bar_items96, align 4
  %78 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %n_last_items97 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %78, i32 0, i32 2
  store i32 %77, i32* %n_last_items97, align 4
  %79 = load i64, i64* %style, align 8
  %80 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %style98 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %80, i32 0, i32 1
  store i64 %79, i64* %style98, align 8
  %81 = load i32, i32* %hmargin, align 4
  %82 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %hmargin99 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %82, i32 0, i32 3
  store i32 %81, i32* %hmargin99, align 4
  %83 = load i32, i32* %vmargin, align 4
  %84 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %vmargin100 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %84, i32 0, i32 4
  store i32 %83, i32* %vmargin100, align 4
  %85 = load i32, i32* %dir, align 4
  %86 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %dir101 = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %86, i32 0, i32 5
  store i32 %85, i32* %dir101, align 4
  %87 = load i64, i64* %style, align 8
  %call102 = call i64 @builtin_lisp_symbol(i32 911)
  %cmp103 = icmp eq i64 %87, %call102
  %frombool = zext i1 %cmp103 to i8
  store i8 %frombool, i8* %text_image, align 1
  %88 = load i64, i64* %style, align 8
  %call105 = call i64 @builtin_lisp_symbol(i32 212)
  %cmp106 = icmp eq i64 %88, %call105
  br i1 %cmp106, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end.93
  %89 = load i8, i8* %text_image, align 1
  %tobool108 = trunc i8 %89 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end.93
  %90 = phi i1 [ true, %if.end.93 ], [ %tobool108, %lor.rhs ]
  %frombool110 = zext i1 %90 to i8
  store i8 %frombool110, i8* %horiz, align 1
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.450, %lor.end
  %91 = load i32, i32* %i, align 4
  %92 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %n_tool_bar_items111 = getelementptr inbounds %struct.frame, %struct.frame* %92, i32 0, i32 30
  %93 = load i32, i32* %n_tool_bar_items111, align 4
  %cmp112 = icmp slt i32 %91, %93
  br i1 %cmp112, label %for.body, label %for.end.452

for.body:                                         ; preds = %for.cond
  %94 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items114 = getelementptr inbounds %struct.frame, %struct.frame* %94, i32 0, i32 17
  %95 = load i64, i64* %tool_bar_items114, align 8
  %96 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %96, 11
  %add = add nsw i32 %mul, 1
  %conv115 = sext i32 %add to i64
  %call116 = call i64 @AREF(i64 %95, i64 %conv115)
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp118 = icmp eq i64 %call116, %call117
  %lnot = xor i1 %cmp118, true
  %frombool120 = zext i1 %lnot to i8
  store i8 %frombool120, i8* %enabled_p, align 1
  %97 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items121 = getelementptr inbounds %struct.frame, %struct.frame* %97, i32 0, i32 17
  %98 = load i64, i64* %tool_bar_items121, align 8
  %99 = load i32, i32* %i, align 4
  %mul122 = mul nsw i32 %99, 11
  %add123 = add nsw i32 %mul122, 2
  %conv124 = sext i32 %add123 to i64
  %call125 = call i64 @AREF(i64 %98, i64 %conv124)
  %call126 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp127 = icmp eq i64 %call125, %call126
  %lnot129 = xor i1 %cmp127, true
  %frombool130 = zext i1 %lnot129 to i8
  store i8 %frombool130, i8* %selected_p, align 1
  store i32 0, i32* %icon_size, align 4
  store %struct.image* null, %struct.image** %img, align 8
  %call131 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call131, i64* %stock, align 8
  store i8* null, i8** %stock_name, align 8
  store i8* null, i8** %icon_name, align 8
  store %struct._GtkWidget* null, %struct._GtkWidget** %wbutton, align 8
  %100 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items132 = getelementptr inbounds %struct.frame, %struct.frame* %100, i32 0, i32 17
  %101 = load i64, i64* %tool_bar_items132, align 8
  %102 = load i32, i32* %i, align 4
  %mul133 = mul nsw i32 %102, 11
  %add134 = add nsw i32 %mul133, 10
  %conv135 = sext i32 %add134 to i64
  %call136 = call i64 @AREF(i64 %101, i64 %conv135)
  %call137 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp138 = icmp eq i64 %call136, %call137
  %lnot140 = xor i1 %cmp138, true
  %frombool141 = zext i1 %lnot140 to i8
  store i8 %frombool141, i8* %vert_only, align 1
  %103 = load i64, i64* %style, align 8
  %call142 = call i64 @builtin_lisp_symbol(i32 537)
  %cmp143 = icmp eq i64 %103, %call142
  br i1 %cmp143, label %cond.true.150, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %104 = load i8, i8* %vert_only, align 1
  %tobool145 = trunc i8 %104 to i1
  br i1 %tobool145, label %land.lhs.true.147, label %cond.false.151

land.lhs.true.147:                                ; preds = %lor.lhs.false
  %105 = load i8, i8* %horiz, align 1
  %tobool148 = trunc i8 %105 to i1
  br i1 %tobool148, label %cond.true.150, label %cond.false.151

cond.true.150:                                    ; preds = %land.lhs.true.147, %for.body
  br label %cond.end.169

cond.false.151:                                   ; preds = %land.lhs.true.147, %lor.lhs.false
  %106 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items152 = getelementptr inbounds %struct.frame, %struct.frame* %106, i32 0, i32 17
  %107 = load i64, i64* %tool_bar_items152, align 8
  %108 = load i32, i32* %i, align 4
  %mul153 = mul nsw i32 %108, 11
  %add154 = add nsw i32 %mul153, 9
  %conv155 = sext i32 %add154 to i64
  %call156 = call i64 @AREF(i64 %107, i64 %conv155)
  %call157 = call zeroext i1 @STRINGP(i64 %call156)
  br i1 %call157, label %cond.true.159, label %cond.false.166

cond.true.159:                                    ; preds = %cond.false.151
  %109 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items160 = getelementptr inbounds %struct.frame, %struct.frame* %109, i32 0, i32 17
  %110 = load i64, i64* %tool_bar_items160, align 8
  %111 = load i32, i32* %i, align 4
  %mul161 = mul nsw i32 %111, 11
  %add162 = add nsw i32 %mul161, 9
  %conv163 = sext i32 %add162 to i64
  %call164 = call i64 @AREF(i64 %110, i64 %conv163)
  %call165 = call i8* @SSDATA(i64 %call164)
  br label %cond.end.167

cond.false.166:                                   ; preds = %cond.false.151
  br label %cond.end.167

cond.end.167:                                     ; preds = %cond.false.166, %cond.true.159
  %cond168 = phi i8* [ %call165, %cond.true.159 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0), %cond.false.166 ]
  br label %cond.end.169

cond.end.169:                                     ; preds = %cond.end.167, %cond.true.150
  %cond170 = phi i8* [ null, %cond.true.150 ], [ %cond168, %cond.end.167 ]
  store i8* %cond170, i8** %label, align 8
  %112 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %113 = bitcast %struct._GtkToolbar* %112 to %struct._GTypeInstance*
  %call171 = call i64 @gtk_toolbar_get_type() #8
  %call172 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %113, i64 %call171)
  %114 = bitcast %struct._GTypeInstance* %call172 to %struct._GtkToolbar*
  %115 = load i32, i32* %j, align 4
  %call173 = call %struct._GtkToolItem* @gtk_toolbar_get_nth_item(%struct._GtkToolbar* %114, i32 %115)
  store %struct._GtkToolItem* %call173, %struct._GtkToolItem** %ti, align 8
  %116 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items174 = getelementptr inbounds %struct.frame, %struct.frame* %116, i32 0, i32 17
  %117 = load i64, i64* %tool_bar_items174, align 8
  %118 = load i32, i32* %i, align 4
  %mul175 = mul nsw i32 %118, 11
  %add176 = add nsw i32 %mul175, 6
  %conv177 = sext i32 %add176 to i64
  %call178 = call i64 @AREF(i64 %117, i64 %conv177)
  %call179 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp180 = icmp eq i64 %call178, %call179
  br i1 %cmp180, label %if.then.182, label %if.end.213

if.then.182:                                      ; preds = %cond.end.169
  %119 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %cmp183 = icmp eq %struct._GtkToolItem* %119, null
  br i1 %cmp183, label %if.then.201, label %lor.lhs.false.185

lor.lhs.false.185:                                ; preds = %if.then.182
  %120 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %121 = bitcast %struct._GtkToolItem* %120 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %121, %struct._GTypeInstance** %__inst, align 8
  %call186 = call i64 @gtk_separator_tool_item_get_type() #8
  store i64 %call186, i64* %__t, align 8
  %122 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool187 = icmp ne %struct._GTypeInstance* %122, null
  br i1 %tobool187, label %if.else.189, label %if.then.188

if.then.188:                                      ; preds = %lor.lhs.false.185
  store i32 0, i32* %__r, align 4
  br label %if.end.199

if.else.189:                                      ; preds = %lor.lhs.false.185
  %123 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %123, i32 0, i32 0
  %124 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool190 = icmp ne %struct._GTypeClass* %124, null
  br i1 %tobool190, label %land.lhs.true.191, label %if.else.196

land.lhs.true.191:                                ; preds = %if.else.189
  %125 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class192 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %125, i32 0, i32 0
  %126 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class192, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %126, i32 0, i32 0
  %127 = load i64, i64* %g_type, align 8
  %128 = load i64, i64* %__t, align 8
  %cmp193 = icmp eq i64 %127, %128
  br i1 %cmp193, label %if.then.195, label %if.else.196

if.then.195:                                      ; preds = %land.lhs.true.191
  store i32 1, i32* %__r, align 4
  br label %if.end.198

if.else.196:                                      ; preds = %land.lhs.true.191, %if.else.189
  %129 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %130 = load i64, i64* %__t, align 8
  %call197 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %129, i64 %130) #7
  store i32 %call197, i32* %__r, align 4
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.196, %if.then.195
  br label %if.end.199

if.end.199:                                       ; preds = %if.end.198, %if.then.188
  %131 = load i32, i32* %__r, align 4
  store i32 %131, i32* %tmp
  %132 = load i32, i32* %tmp
  %tobool200 = icmp ne i32 %132, 0
  br i1 %tobool200, label %if.end.212, label %if.then.201

if.then.201:                                      ; preds = %if.end.199, %if.then.182
  %133 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool202 = icmp ne %struct._GtkToolItem* %133, null
  br i1 %tobool202, label %if.then.203, label %if.end.208

if.then.203:                                      ; preds = %if.then.201
  %134 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %135 = bitcast %struct._GtkToolbar* %134 to %struct._GTypeInstance*
  %call204 = call i64 @gtk_container_get_type() #8
  %call205 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %135, i64 %call204)
  %136 = bitcast %struct._GTypeInstance* %call205 to %struct._GtkContainer*
  %137 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %138 = bitcast %struct._GtkToolItem* %137 to %struct._GTypeInstance*
  %call206 = call i64 @gtk_widget_get_type() #8
  %call207 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %138, i64 %call206)
  %139 = bitcast %struct._GTypeInstance* %call207 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %136, %struct._GtkWidget* %139)
  br label %if.end.208

if.end.208:                                       ; preds = %if.then.203, %if.then.201
  %call209 = call %struct._GtkToolItem* @gtk_separator_tool_item_new()
  store %struct._GtkToolItem* %call209, %struct._GtkToolItem** %ti, align 8
  %140 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %141 = bitcast %struct._GtkToolbar* %140 to %struct._GTypeInstance*
  %call210 = call i64 @gtk_toolbar_get_type() #8
  %call211 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %141, i64 %call210)
  %142 = bitcast %struct._GTypeInstance* %call211 to %struct._GtkToolbar*
  %143 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %144 = load i32, i32* %j, align 4
  call void @gtk_toolbar_insert(%struct._GtkToolbar* %142, %struct._GtkToolItem* %143, i32 %144)
  br label %if.end.212

if.end.212:                                       ; preds = %if.end.208, %if.end.199
  %145 = load i32, i32* %j, align 4
  %inc = add nsw i32 %145, 1
  store i32 %inc, i32* %j, align 4
  br label %for.inc.450

if.end.213:                                       ; preds = %cond.end.169
  %146 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool214 = icmp ne %struct._GtkToolItem* %146, null
  br i1 %tobool214, label %land.lhs.true.215, label %if.end.245

land.lhs.true.215:                                ; preds = %if.end.213
  %147 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %148 = bitcast %struct._GtkToolItem* %147 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %148, %struct._GTypeInstance** %__inst217, align 8
  %call220 = call i64 @gtk_separator_tool_item_get_type() #8
  store i64 %call220, i64* %__t219, align 8
  %149 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst217, align 8
  %tobool223 = icmp ne %struct._GTypeInstance* %149, null
  br i1 %tobool223, label %if.else.225, label %if.then.224

if.then.224:                                      ; preds = %land.lhs.true.215
  store i32 0, i32* %__r222, align 4
  br label %if.end.237

if.else.225:                                      ; preds = %land.lhs.true.215
  %150 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst217, align 8
  %g_class226 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %150, i32 0, i32 0
  %151 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class226, align 8
  %tobool227 = icmp ne %struct._GTypeClass* %151, null
  br i1 %tobool227, label %land.lhs.true.228, label %if.else.234

land.lhs.true.228:                                ; preds = %if.else.225
  %152 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst217, align 8
  %g_class229 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %152, i32 0, i32 0
  %153 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class229, align 8
  %g_type230 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %153, i32 0, i32 0
  %154 = load i64, i64* %g_type230, align 8
  %155 = load i64, i64* %__t219, align 8
  %cmp231 = icmp eq i64 %154, %155
  br i1 %cmp231, label %if.then.233, label %if.else.234

if.then.233:                                      ; preds = %land.lhs.true.228
  store i32 1, i32* %__r222, align 4
  br label %if.end.236

if.else.234:                                      ; preds = %land.lhs.true.228, %if.else.225
  %156 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst217, align 8
  %157 = load i64, i64* %__t219, align 8
  %call235 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %156, i64 %157) #7
  store i32 %call235, i32* %__r222, align 4
  br label %if.end.236

if.end.236:                                       ; preds = %if.else.234, %if.then.233
  br label %if.end.237

if.end.237:                                       ; preds = %if.end.236, %if.then.224
  %158 = load i32, i32* %__r222, align 4
  store i32 %158, i32* %tmp238
  %159 = load i32, i32* %tmp238
  %tobool239 = icmp ne i32 %159, 0
  br i1 %tobool239, label %if.then.240, label %if.end.245

if.then.240:                                      ; preds = %if.end.237
  %160 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %161 = bitcast %struct._GtkToolbar* %160 to %struct._GTypeInstance*
  %call241 = call i64 @gtk_container_get_type() #8
  %call242 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %161, i64 %call241)
  %162 = bitcast %struct._GTypeInstance* %call242 to %struct._GtkContainer*
  %163 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %164 = bitcast %struct._GtkToolItem* %163 to %struct._GTypeInstance*
  %call243 = call i64 @gtk_widget_get_type() #8
  %call244 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %164, i64 %call243)
  %165 = bitcast %struct._GTypeInstance* %call244 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %162, %struct._GtkWidget* %165)
  store %struct._GtkToolItem* null, %struct._GtkToolItem** %ti, align 8
  br label %if.end.245

if.end.245:                                       ; preds = %if.then.240, %if.end.237, %if.end.213
  %166 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool246 = icmp ne %struct._GtkToolItem* %166, null
  br i1 %tobool246, label %if.then.247, label %if.end.254

if.then.247:                                      ; preds = %if.end.245
  %167 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %168 = bitcast %struct._GtkToolItem* %167 to %struct._GTypeInstance*
  %call248 = call i64 @gtk_bin_get_type() #8
  %call249 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %168, i64 %call248)
  %169 = bitcast %struct._GTypeInstance* %call249 to %struct._GtkBin*
  %call250 = call %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin* %169)
  %170 = bitcast %struct._GtkWidget* %call250 to %struct._GTypeInstance*
  %call251 = call i64 @gtk_bin_get_type() #8
  %call252 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %170, i64 %call251)
  %171 = bitcast %struct._GTypeInstance* %call252 to %struct._GtkBin*
  %call253 = call %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin* %171)
  store %struct._GtkWidget* %call253, %struct._GtkWidget** %wbutton, align 8
  br label %if.end.254

if.end.254:                                       ; preds = %if.then.247, %if.end.245
  %172 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items255 = getelementptr inbounds %struct.frame, %struct.frame* %172, i32 0, i32 17
  %173 = load i64, i64* %tool_bar_items255, align 8
  %174 = load i32, i32* %i, align 4
  %mul256 = mul nsw i32 %174, 11
  %add257 = add nsw i32 %mul256, 4
  %conv258 = sext i32 %add257 to i64
  %call259 = call i64 @AREF(i64 %173, i64 %conv258)
  store i64 %call259, i64* %image, align 8
  %175 = load i64, i64* %image, align 8
  %call260 = call zeroext i1 @valid_image_p(i64 %175)
  br i1 %call260, label %if.end.269, label %if.then.261

if.then.261:                                      ; preds = %if.end.254
  %176 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool262 = icmp ne %struct._GtkToolItem* %176, null
  br i1 %tobool262, label %if.then.263, label %if.end.268

if.then.263:                                      ; preds = %if.then.261
  %177 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %178 = bitcast %struct._GtkToolbar* %177 to %struct._GTypeInstance*
  %call264 = call i64 @gtk_container_get_type() #8
  %call265 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %178, i64 %call264)
  %179 = bitcast %struct._GTypeInstance* %call265 to %struct._GtkContainer*
  %180 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %181 = bitcast %struct._GtkToolItem* %180 to %struct._GTypeInstance*
  %call266 = call i64 @gtk_widget_get_type() #8
  %call267 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %181, i64 %call266)
  %182 = bitcast %struct._GTypeInstance* %call267 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %179, %struct._GtkWidget* %182)
  br label %if.end.268

if.end.268:                                       ; preds = %if.then.263, %if.then.261
  br label %for.inc.450

if.end.269:                                       ; preds = %if.end.254
  %183 = load i64, i64* %image, align 8
  %call270 = call i64 @file_for_image(i64 %183)
  store i64 %call270, i64* %specified_file, align 8
  %184 = load i64, i64* %specified_file, align 8
  %call271 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp272 = icmp eq i64 %184, %call271
  br i1 %cmp272, label %if.end.283, label %land.lhs.true.274

land.lhs.true.274:                                ; preds = %if.end.269
  %call275 = call i64 @builtin_lisp_symbol(i32 1050)
  %call276 = call i64 @Ffboundp(i64 %call275)
  %call277 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp278 = icmp eq i64 %call276, %call277
  br i1 %cmp278, label %if.end.283, label %if.then.280

if.then.280:                                      ; preds = %land.lhs.true.274
  %call281 = call i64 @builtin_lisp_symbol(i32 1050)
  %185 = load i64, i64* %specified_file, align 8
  %call282 = call i64 @call1(i64 %call281, i64 %185)
  store i64 %call282, i64* %stock, align 8
  br label %if.end.283

if.end.283:                                       ; preds = %if.then.280, %land.lhs.true.274, %if.end.269
  %186 = load i64, i64* %stock, align 8
  %and284 = and i64 %186, 7
  %conv285 = trunc i64 %and284 to i32
  %cmp286 = icmp eq i32 %conv285, 3
  br i1 %cmp286, label %if.then.288, label %if.else.318

if.then.288:                                      ; preds = %if.end.283
  %187 = load i64, i64* %stock, align 8
  store i64 %187, i64* %tem, align 8
  br label %for.cond.290

for.cond.290:                                     ; preds = %for.inc, %if.then.288
  %188 = load i64, i64* %tem, align 8
  %and291 = and i64 %188, 7
  %conv292 = trunc i64 %and291 to i32
  %cmp293 = icmp eq i32 %conv292, 3
  br i1 %cmp293, label %for.body.295, label %for.end

for.body.295:                                     ; preds = %for.cond.290
  %189 = load i64, i64* %tem, align 8
  %call296 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp297 = icmp eq i64 %189, %call296
  br i1 %cmp297, label %if.end.314, label %land.lhs.true.299

land.lhs.true.299:                                ; preds = %for.body.295
  %190 = load i64, i64* %tem, align 8
  %sub300 = sub nsw i64 %190, 3
  %191 = inttoptr i64 %sub300 to i8*
  %192 = bitcast i8* %191 to %struct.Lisp_Cons*
  %car301 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %192, i32 0, i32 0
  %193 = load i64, i64* %car301, align 8
  %call302 = call zeroext i1 @STRINGP(i64 %193)
  br i1 %call302, label %if.then.304, label %if.end.314

if.then.304:                                      ; preds = %land.lhs.true.299
  %194 = load i64, i64* %tem, align 8
  %sub305 = sub nsw i64 %194, 3
  %195 = inttoptr i64 %sub305 to i8*
  %196 = bitcast i8* %195 to %struct.Lisp_Cons*
  %car306 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %196, i32 0, i32 0
  %197 = load i64, i64* %car306, align 8
  %call307 = call i8* @SSDATA(i64 %197)
  %198 = load %struct._GtkIconTheme*, %struct._GtkIconTheme** %icon_theme, align 8
  %call308 = call i8* @find_icon_from_name(i8* %call307, %struct._GtkIconTheme* %198, i8** %icon_name)
  store i8* %call308, i8** %stock_name, align 8
  %199 = load i8*, i8** %stock_name, align 8
  %tobool309 = icmp ne i8* %199, null
  br i1 %tobool309, label %if.then.312, label %lor.lhs.false.310

lor.lhs.false.310:                                ; preds = %if.then.304
  %200 = load i8*, i8** %icon_name, align 8
  %tobool311 = icmp ne i8* %200, null
  br i1 %tobool311, label %if.then.312, label %if.end.313

if.then.312:                                      ; preds = %lor.lhs.false.310, %if.then.304
  br label %for.end

if.end.313:                                       ; preds = %lor.lhs.false.310
  br label %if.end.314

if.end.314:                                       ; preds = %if.end.313, %land.lhs.true.299, %for.body.295
  br label %for.inc

for.inc:                                          ; preds = %if.end.314
  %201 = load i64, i64* %tem, align 8
  %sub315 = sub nsw i64 %201, 3
  %202 = inttoptr i64 %sub315 to i8*
  %203 = bitcast i8* %202 to %struct.Lisp_Cons*
  %u316 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %203, i32 0, i32 1
  %cdr317 = bitcast %union.anon.13* %u316 to i64*
  %204 = load i64, i64* %cdr317, align 8
  store i64 %204, i64* %tem, align 8
  br label %for.cond.290

for.end:                                          ; preds = %if.then.312, %for.cond.290
  br label %if.end.324

if.else.318:                                      ; preds = %if.end.283
  %205 = load i64, i64* %stock, align 8
  %call319 = call zeroext i1 @STRINGP(i64 %205)
  br i1 %call319, label %if.then.320, label %if.end.323

if.then.320:                                      ; preds = %if.else.318
  %206 = load i64, i64* %stock, align 8
  %call321 = call i8* @SSDATA(i64 %206)
  %207 = load %struct._GtkIconTheme*, %struct._GtkIconTheme** %icon_theme, align 8
  %call322 = call i8* @find_icon_from_name(i8* %call321, %struct._GtkIconTheme* %207, i8** %icon_name)
  store i8* %call322, i8** %stock_name, align 8
  br label %if.end.323

if.end.323:                                       ; preds = %if.then.320, %if.else.318
  br label %if.end.324

if.end.324:                                       ; preds = %if.end.323, %for.end
  %208 = load i8*, i8** %stock_name, align 8
  %tobool325 = icmp ne i8* %208, null
  br i1 %tobool325, label %if.then.328, label %lor.lhs.false.326

lor.lhs.false.326:                                ; preds = %if.end.324
  %209 = load i8*, i8** %icon_name, align 8
  %tobool327 = icmp ne i8* %209, null
  br i1 %tobool327, label %if.then.328, label %if.end.330

if.then.328:                                      ; preds = %lor.lhs.false.326, %if.end.324
  %210 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %call329 = call i32 @gtk_toolbar_get_icon_size(%struct._GtkToolbar* %210)
  store i32 %call329, i32* %icon_size, align 4
  br label %if.end.330

if.end.330:                                       ; preds = %if.then.328, %lor.lhs.false.326
  %211 = load i8*, i8** %stock_name, align 8
  %cmp331 = icmp eq i8* %211, null
  br i1 %cmp331, label %land.lhs.true.333, label %if.end.396

land.lhs.true.333:                                ; preds = %if.end.330
  %212 = load i8*, i8** %icon_name, align 8
  %cmp334 = icmp eq i8* %212, null
  br i1 %cmp334, label %if.then.336, label %if.end.396

if.then.336:                                      ; preds = %land.lhs.true.333
  %213 = load i32, i32* %dir, align 4
  %cmp337 = icmp eq i32 %213, 2
  br i1 %cmp337, label %land.lhs.true.339, label %if.end.353

land.lhs.true.339:                                ; preds = %if.then.336
  %214 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items340 = getelementptr inbounds %struct.frame, %struct.frame* %214, i32 0, i32 17
  %215 = load i64, i64* %tool_bar_items340, align 8
  %216 = load i32, i32* %i, align 4
  %mul341 = mul nsw i32 %216, 11
  %add342 = add nsw i32 %mul341, 8
  %conv343 = sext i32 %add342 to i64
  %call344 = call i64 @AREF(i64 %215, i64 %conv343)
  store i64 %call344, i64* %rtl, align 8
  %call345 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp346 = icmp eq i64 %call344, %call345
  br i1 %cmp346, label %if.end.353, label %land.lhs.true.348

land.lhs.true.348:                                ; preds = %land.lhs.true.339
  %217 = load i64, i64* %rtl, align 8
  %call349 = call zeroext i1 @STRINGP(i64 %217)
  br i1 %call349, label %if.then.351, label %if.end.353

if.then.351:                                      ; preds = %land.lhs.true.348
  %218 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %219 = load i64, i64* %image, align 8
  %220 = load i64, i64* %rtl, align 8
  %call352 = call i64 @find_rtl_image(%struct.frame* %218, i64 %219, i64 %220)
  store i64 %call352, i64* %image, align 8
  br label %if.end.353

if.end.353:                                       ; preds = %if.then.351, %land.lhs.true.348, %land.lhs.true.339, %if.then.336
  %221 = load i64, i64* %image, align 8
  %call354 = call zeroext i1 @VECTORP(i64 %221)
  br i1 %call354, label %if.then.355, label %if.else.368

if.then.355:                                      ; preds = %if.end.353
  %222 = load i8, i8* %enabled_p, align 1
  %tobool356 = trunc i8 %222 to i1
  br i1 %tobool356, label %if.then.357, label %if.else.361

if.then.357:                                      ; preds = %if.then.355
  %223 = load i8, i8* %selected_p, align 1
  %tobool358 = trunc i8 %223 to i1
  %cond360 = select i1 %tobool358, i32 0, i32 1
  store i32 %cond360, i32* %idx, align 4
  br label %if.end.365

if.else.361:                                      ; preds = %if.then.355
  %224 = load i8, i8* %selected_p, align 1
  %tobool362 = trunc i8 %224 to i1
  %cond364 = select i1 %tobool362, i32 2, i32 3
  store i32 %cond364, i32* %idx, align 4
  br label %if.end.365

if.end.365:                                       ; preds = %if.else.361, %if.then.357
  %225 = load i64, i64* %image, align 8
  %226 = load i32, i32* %idx, align 4
  %conv366 = sext i32 %226 to i64
  %call367 = call i64 @AREF(i64 %225, i64 %conv366)
  store i64 %call367, i64* %image, align 8
  br label %if.end.369

if.else.368:                                      ; preds = %if.end.353
  store i32 -1, i32* %idx, align 4
  br label %if.end.369

if.end.369:                                       ; preds = %if.else.368, %if.end.365
  %227 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %228 = load i64, i64* %image, align 8
  %call370 = call i64 @lookup_image(%struct.frame* %227, i64 %228)
  store i64 %call370, i64* %img_id, align 8
  %229 = load i64, i64* %img_id, align 8
  %cmp371 = icmp sge i64 %229, 0
  br i1 %cmp371, label %land.lhs.true.373, label %cond.false.379

land.lhs.true.373:                                ; preds = %if.end.369
  %230 = load i64, i64* %img_id, align 8
  %231 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %231, i32 0, i32 61
  %232 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %image_cache = getelementptr inbounds %struct.terminal, %struct.terminal* %232, i32 0, i32 11
  %233 = load %struct.image_cache*, %struct.image_cache** %image_cache, align 8
  %used = getelementptr inbounds %struct.image_cache, %struct.image_cache* %233, i32 0, i32 3
  %234 = load i64, i64* %used, align 8
  %cmp374 = icmp slt i64 %230, %234
  br i1 %cmp374, label %cond.true.376, label %cond.false.379

cond.true.376:                                    ; preds = %land.lhs.true.373
  %235 = load i64, i64* %img_id, align 8
  %236 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %terminal377 = getelementptr inbounds %struct.frame, %struct.frame* %236, i32 0, i32 61
  %237 = load %struct.terminal*, %struct.terminal** %terminal377, align 8
  %image_cache378 = getelementptr inbounds %struct.terminal, %struct.terminal* %237, i32 0, i32 11
  %238 = load %struct.image_cache*, %struct.image_cache** %image_cache378, align 8
  %images = getelementptr inbounds %struct.image_cache, %struct.image_cache* %238, i32 0, i32 1
  %239 = load %struct.image**, %struct.image*** %images, align 8
  %arrayidx = getelementptr inbounds %struct.image*, %struct.image** %239, i64 %235
  %240 = load %struct.image*, %struct.image** %arrayidx, align 8
  br label %cond.end.380

cond.false.379:                                   ; preds = %land.lhs.true.373, %if.end.369
  br label %cond.end.380

cond.end.380:                                     ; preds = %cond.false.379, %cond.true.376
  %cond381 = phi %struct.image* [ %240, %cond.true.376 ], [ null, %cond.false.379 ]
  store %struct.image* %cond381, %struct.image** %img, align 8
  %241 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %242 = load %struct.image*, %struct.image** %img, align 8
  call void @prepare_image_for_display(%struct.frame* %241, %struct.image* %242)
  %243 = load %struct.image*, %struct.image** %img, align 8
  %load_failed_p = getelementptr inbounds %struct.image, %struct.image* %243, i32 0, i32 21
  %244 = load i8, i8* %load_failed_p, align 1
  %tobool382 = trunc i8 %244 to i1
  br i1 %tobool382, label %if.then.387, label %lor.lhs.false.384

lor.lhs.false.384:                                ; preds = %cond.end.380
  %245 = load %struct.image*, %struct.image** %img, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %245, i32 0, i32 1
  %246 = load i64, i64* %pixmap, align 8
  %cmp385 = icmp eq i64 %246, 0
  br i1 %cmp385, label %if.then.387, label %if.end.395

if.then.387:                                      ; preds = %lor.lhs.false.384, %cond.end.380
  %247 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool388 = icmp ne %struct._GtkToolItem* %247, null
  br i1 %tobool388, label %if.then.389, label %if.end.394

if.then.389:                                      ; preds = %if.then.387
  %248 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %249 = bitcast %struct._GtkToolbar* %248 to %struct._GTypeInstance*
  %call390 = call i64 @gtk_container_get_type() #8
  %call391 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %249, i64 %call390)
  %250 = bitcast %struct._GTypeInstance* %call391 to %struct._GtkContainer*
  %251 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %252 = bitcast %struct._GtkToolItem* %251 to %struct._GTypeInstance*
  %call392 = call i64 @gtk_widget_get_type() #8
  %call393 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %252, i64 %call392)
  %253 = bitcast %struct._GTypeInstance* %call393 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %250, %struct._GtkWidget* %253)
  br label %if.end.394

if.end.394:                                       ; preds = %if.then.389, %if.then.387
  br label %for.inc.450

if.end.395:                                       ; preds = %lor.lhs.false.384
  br label %if.end.396

if.end.396:                                       ; preds = %if.end.395, %land.lhs.true.333, %if.end.330
  %254 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool397 = icmp ne %struct._GtkToolItem* %254, null
  br i1 %tobool397, label %land.lhs.true.398, label %if.end.407

land.lhs.true.398:                                ; preds = %if.end.396
  %255 = load %struct._GtkWidget*, %struct._GtkWidget** %wbutton, align 8
  %256 = load i8*, i8** %stock_name, align 8
  %257 = load i8*, i8** %icon_name, align 8
  %258 = load %struct.image*, %struct.image** %img, align 8
  %259 = load i8*, i8** %label, align 8
  %260 = load i8, i8* %horiz, align 1
  %tobool399 = trunc i8 %260 to i1
  %call400 = call zeroext i1 @xg_tool_item_stale_p(%struct._GtkWidget* %255, i8* %256, i8* %257, %struct.image* %258, i8* %259, i1 zeroext %tobool399)
  br i1 %call400, label %if.then.402, label %if.end.407

if.then.402:                                      ; preds = %land.lhs.true.398
  %261 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %262 = bitcast %struct._GtkToolbar* %261 to %struct._GTypeInstance*
  %call403 = call i64 @gtk_container_get_type() #8
  %call404 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %262, i64 %call403)
  %263 = bitcast %struct._GTypeInstance* %call404 to %struct._GtkContainer*
  %264 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %265 = bitcast %struct._GtkToolItem* %264 to %struct._GTypeInstance*
  %call405 = call i64 @gtk_widget_get_type() #8
  %call406 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %265, i64 %call405)
  %266 = bitcast %struct._GTypeInstance* %call406 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %263, %struct._GtkWidget* %266)
  store %struct._GtkToolItem* null, %struct._GtkToolItem** %ti, align 8
  br label %if.end.407

if.end.407:                                       ; preds = %if.then.402, %land.lhs.true.398, %if.end.396
  %267 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %cmp408 = icmp eq %struct._GtkToolItem* %267, null
  br i1 %cmp408, label %if.then.410, label %if.end.446

if.then.410:                                      ; preds = %if.end.407
  %268 = load i64, i64* %style, align 8
  %call412 = call i64 @builtin_lisp_symbol(i32 910)
  %cmp413 = icmp eq i64 %268, %call412
  br i1 %cmp413, label %if.then.415, label %if.else.416

if.then.415:                                      ; preds = %if.then.410
  store %struct._GtkWidget* null, %struct._GtkWidget** %w, align 8
  br label %if.end.435

if.else.416:                                      ; preds = %if.then.410
  %269 = load i8*, i8** %stock_name, align 8
  %tobool417 = icmp ne i8* %269, null
  br i1 %tobool417, label %if.then.418, label %if.else.422

if.then.418:                                      ; preds = %if.else.416
  %270 = load i8*, i8** %stock_name, align 8
  %271 = load i32, i32* %icon_size, align 4
  %call419 = call %struct._GtkWidget* @gtk_image_new_from_stock(i8* %270, i32 %271)
  store %struct._GtkWidget* %call419, %struct._GtkWidget** %w, align 8
  %272 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %273 = bitcast %struct._GtkWidget* %272 to %struct._GTypeInstance*
  %call420 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %273, i64 80)
  %274 = bitcast %struct._GTypeInstance* %call420 to %struct._GObject*
  %275 = load i8*, i8** %stock_name, align 8
  %call421 = call noalias i8* @xstrdup(i8* %275)
  call void @g_object_set_data_full(%struct._GObject* %274, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.30, i32 0, i32 0), i8* %call421, void (i8*)* @xfree)
  br label %if.end.434

if.else.422:                                      ; preds = %if.else.416
  %276 = load i8*, i8** %icon_name, align 8
  %tobool423 = icmp ne i8* %276, null
  br i1 %tobool423, label %if.then.424, label %if.else.428

if.then.424:                                      ; preds = %if.else.422
  %277 = load i8*, i8** %icon_name, align 8
  %278 = load i32, i32* %icon_size, align 4
  %call425 = call %struct._GtkWidget* @gtk_image_new_from_icon_name(i8* %277, i32 %278)
  store %struct._GtkWidget* %call425, %struct._GtkWidget** %w, align 8
  %279 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %280 = bitcast %struct._GtkWidget* %279 to %struct._GTypeInstance*
  %call426 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %280, i64 80)
  %281 = bitcast %struct._GTypeInstance* %call426 to %struct._GObject*
  %282 = load i8*, i8** %icon_name, align 8
  %call427 = call noalias i8* @xstrdup(i8* %282)
  call void @g_object_set_data_full(%struct._GObject* %281, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i32 0, i32 0), i8* %call427, void (i8*)* @xfree)
  br label %if.end.433

if.else.428:                                      ; preds = %if.else.422
  %283 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %284 = load %struct.image*, %struct.image** %img, align 8
  %285 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget429 = getelementptr inbounds %struct.x_output, %struct.x_output* %285, i32 0, i32 12
  %286 = load %struct._GtkWidget*, %struct._GtkWidget** %widget429, align 8
  %call430 = call %struct._GtkWidget* @xg_get_image_for_pixmap(%struct.frame* %283, %struct.image* %284, %struct._GtkWidget* %286, %struct._GtkImage* null)
  store %struct._GtkWidget* %call430, %struct._GtkWidget** %w, align 8
  %287 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %288 = bitcast %struct._GtkWidget* %287 to %struct._GTypeInstance*
  %call431 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %288, i64 80)
  %289 = bitcast %struct._GTypeInstance* %call431 to %struct._GObject*
  %290 = load %struct.image*, %struct.image** %img, align 8
  %pixmap432 = getelementptr inbounds %struct.image, %struct.image* %290, i32 0, i32 1
  %291 = load i64, i64* %pixmap432, align 8
  %292 = inttoptr i64 %291 to i8*
  call void @g_object_set_data(%struct._GObject* %289, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i32 0, i32 0), i8* %292)
  br label %if.end.433

if.end.433:                                       ; preds = %if.else.428, %if.then.424
  br label %if.end.434

if.end.434:                                       ; preds = %if.end.433, %if.then.418
  br label %if.end.435

if.end.435:                                       ; preds = %if.end.434, %if.then.415
  %293 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %tobool436 = icmp ne %struct._GtkWidget* %293, null
  br i1 %tobool436, label %if.then.437, label %if.end.440

if.then.437:                                      ; preds = %if.end.435
  %294 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %295 = bitcast %struct._GtkWidget* %294 to %struct._GTypeInstance*
  %call438 = call i64 @gtk_misc_get_type() #8
  %call439 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %295, i64 %call438)
  %296 = bitcast %struct._GTypeInstance* %call439 to %struct._GtkMisc*
  %297 = load i32, i32* %hmargin, align 4
  %298 = load i32, i32* %vmargin, align 4
  call void @gtk_misc_set_padding(%struct._GtkMisc* %296, i32 %297, i32 %298)
  br label %if.end.440

if.end.440:                                       ; preds = %if.then.437, %if.end.435
  %299 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %300 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %301 = load i8*, i8** %label, align 8
  %302 = load i32, i32* %i, align 4
  %303 = load i8, i8* %horiz, align 1
  %tobool441 = trunc i8 %303 to i1
  %304 = load i8, i8* %text_image, align 1
  %tobool442 = trunc i8 %304 to i1
  %call443 = call %struct._GtkToolItem* @xg_make_tool_item(%struct.frame* %299, %struct._GtkWidget* %300, %struct._GtkWidget** %wbutton, i8* %301, i32 %302, i1 zeroext %tobool441, i1 zeroext %tobool442)
  store %struct._GtkToolItem* %call443, %struct._GtkToolItem** %ti, align 8
  %305 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %306 = bitcast %struct._GtkToolbar* %305 to %struct._GTypeInstance*
  %call444 = call i64 @gtk_toolbar_get_type() #8
  %call445 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %306, i64 %call444)
  %307 = bitcast %struct._GTypeInstance* %call445 to %struct._GtkToolbar*
  %308 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %309 = load i32, i32* %j, align 4
  call void @gtk_toolbar_insert(%struct._GtkToolbar* %307, %struct._GtkToolItem* %308, i32 %309)
  br label %if.end.446

if.end.446:                                       ; preds = %if.end.440, %if.end.407
  %310 = load %struct._GtkWidget*, %struct._GtkWidget** %wbutton, align 8
  %311 = load i8, i8* %enabled_p, align 1
  %tobool447 = trunc i8 %311 to i1
  %conv448 = zext i1 %tobool447 to i32
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %310, i32 %conv448)
  %312 = load i32, i32* %j, align 4
  %inc449 = add nsw i32 %312, 1
  store i32 %inc449, i32* %j, align 4
  br label %for.inc.450

for.inc.450:                                      ; preds = %if.end.446, %if.end.394, %if.end.268, %if.end.212
  %313 = load i32, i32* %i, align 4
  %inc451 = add nsw i32 %313, 1
  store i32 %inc451, i32* %i, align 4
  br label %for.cond

for.end.452:                                      ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end.452
  %314 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %315 = bitcast %struct._GtkToolbar* %314 to %struct._GTypeInstance*
  %call453 = call i64 @gtk_toolbar_get_type() #8
  %call454 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %315, i64 %call453)
  %316 = bitcast %struct._GTypeInstance* %call454 to %struct._GtkToolbar*
  %317 = load i32, i32* %j, align 4
  %call455 = call %struct._GtkToolItem* @gtk_toolbar_get_nth_item(%struct._GtkToolbar* %316, i32 %317)
  store %struct._GtkToolItem* %call455, %struct._GtkToolItem** %ti, align 8
  %318 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %tobool456 = icmp ne %struct._GtkToolItem* %318, null
  br i1 %tobool456, label %if.then.457, label %if.end.462

if.then.457:                                      ; preds = %do.body
  %319 = load %struct._GtkToolbar*, %struct._GtkToolbar** %wtoolbar, align 8
  %320 = bitcast %struct._GtkToolbar* %319 to %struct._GTypeInstance*
  %call458 = call i64 @gtk_container_get_type() #8
  %call459 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %320, i64 %call458)
  %321 = bitcast %struct._GTypeInstance* %call459 to %struct._GtkContainer*
  %322 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %323 = bitcast %struct._GtkToolItem* %322 to %struct._GTypeInstance*
  %call460 = call i64 @gtk_widget_get_type() #8
  %call461 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %323, i64 %call460)
  %324 = bitcast %struct._GTypeInstance* %call461 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %321, %struct._GtkWidget* %324)
  br label %if.end.462

if.end.462:                                       ; preds = %if.then.457, %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end.462
  %325 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %cmp463 = icmp ne %struct._GtkToolItem* %325, null
  br i1 %cmp463, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %326 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %n_tool_bar_items465 = getelementptr inbounds %struct.frame, %struct.frame* %326, i32 0, i32 30
  %327 = load i32, i32* %n_tool_bar_items465, align 4
  %cmp466 = icmp ne i32 %327, 0
  br i1 %cmp466, label %if.then.468, label %if.end.518

if.then.468:                                      ; preds = %do.end
  %328 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_is_packed = getelementptr inbounds %struct.x_output, %struct.x_output* %328, i32 0, i32 18
  %bf.load = load i8, i8* %toolbar_is_packed, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.end.470, label %if.then.469

if.then.469:                                      ; preds = %if.then.468
  %329 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %330 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_position = getelementptr inbounds %struct.frame, %struct.frame* %330, i32 0, i32 18
  %331 = load i64, i64* %tool_bar_position, align 8
  call void @xg_pack_tool_bar(%struct.frame* %329, i64 %331)
  br label %if.end.470

if.end.470:                                       ; preds = %if.then.469, %if.then.468
  %332 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget471 = getelementptr inbounds %struct.x_output, %struct.x_output* %332, i32 0, i32 17
  %333 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget471, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %333)
  %334 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call472 = call zeroext i1 @xg_update_tool_bar_sizes(%struct.frame* %334)
  br i1 %call472, label %if.then.473, label %if.end.509

if.then.473:                                      ; preds = %if.end.470
  %335 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %after_make_frame = getelementptr inbounds %struct.frame, %struct.frame* %335, i32 0, i32 26
  %336 = bitcast i48* %after_make_frame to i64*
  %bf.load475 = load i64, i64* %336, align 8
  %bf.lshr476 = lshr i64 %bf.load475, 35
  %bf.clear477 = and i64 %bf.lshr476, 1
  %bf.cast478 = trunc i64 %bf.clear477 to i1
  br i1 %bf.cast478, label %land.lhs.true.480, label %land.end

land.lhs.true.480:                                ; preds = %if.then.473
  %337 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_resized = getelementptr inbounds %struct.frame, %struct.frame* %337, i32 0, i32 26
  %338 = bitcast i48* %tool_bar_resized to i64*
  %bf.load481 = load i64, i64* %338, align 8
  %bf.lshr482 = lshr i64 %bf.load481, 37
  %bf.clear483 = and i64 %bf.lshr482, 1
  %bf.cast484 = trunc i64 %bf.clear483 to i1
  br i1 %bf.cast484, label %land.end, label %land.lhs.true.485

land.lhs.true.485:                                ; preds = %land.lhs.true.480
  %339 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %call486 = call i64 @builtin_lisp_symbol(i32 901)
  %cmp487 = icmp eq i64 %339, %call486
  br i1 %cmp487, label %land.rhs, label %lor.lhs.false.489

lor.lhs.false.489:                                ; preds = %land.lhs.true.485
  %340 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %and490 = and i64 %340, 7
  %conv491 = trunc i64 %and490 to i32
  %cmp492 = icmp eq i32 %conv491, 3
  br i1 %cmp492, label %land.lhs.true.494, label %land.end

land.lhs.true.494:                                ; preds = %lor.lhs.false.489
  %call495 = call i64 @builtin_lisp_symbol(i32 923)
  %341 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 373), align 8
  %call496 = call i64 @Fmemq(i64 %call495, i64 %341)
  %call497 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp498 = icmp eq i64 %call496, %call497
  br i1 %cmp498, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true.494, %land.lhs.true.485
  %342 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call500 = call i64 @builtin_lisp_symbol(i32 472)
  %call501 = call i64 @get_frame_param(%struct.frame* %342, i64 %call500)
  %call502 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp503 = icmp eq i64 %call501, %call502
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.494, %lor.lhs.false.489, %land.lhs.true.480, %if.then.473
  %343 = phi i1 [ false, %land.lhs.true.494 ], [ false, %lor.lhs.false.489 ], [ false, %land.lhs.true.480 ], [ false, %if.then.473 ], [ %cmp503, %land.rhs ]
  %cond505 = select i1 %343, i32 0, i32 2
  store i32 %cond505, i32* %inhibit, align 4
  %344 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call506 = call i64 @builtin_lisp_symbol(i32 979)
  %call507 = call i64 @builtin_lisp_symbol(i32 0)
  call void @frame_size_history_add(%struct.frame* %344, i64 %call506, i32 0, i32 0, i64 %call507)
  %345 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %346 = load i32, i32* %inhibit, align 4
  %call508 = call i64 @builtin_lisp_symbol(i32 923)
  call void @adjust_frame_size(%struct.frame* %345, i32 -1, i32 -1, i32 %346, i1 zeroext false, i64 %call508)
  br label %if.end.509

if.end.509:                                       ; preds = %land.end, %if.end.470
  %347 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_redisplayed = getelementptr inbounds %struct.frame, %struct.frame* %347, i32 0, i32 26
  %348 = bitcast i48* %tool_bar_redisplayed to i64*
  %bf.load510 = load i64, i64* %348, align 8
  %bf.lshr511 = lshr i64 %bf.load510, 36
  %bf.clear512 = and i64 %bf.lshr511, 1
  %bf.cast513 = trunc i64 %bf.clear512 to i1
  %349 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_resized514 = getelementptr inbounds %struct.frame, %struct.frame* %349, i32 0, i32 26
  %350 = bitcast i48* %tool_bar_resized514 to i64*
  %351 = zext i1 %bf.cast513 to i64
  %bf.load515 = load i64, i64* %350, align 8
  %bf.shl = shl i64 %351, 37
  %bf.clear516 = and i64 %bf.load515, -137438953473
  %bf.set = or i64 %bf.clear516, %bf.shl
  store i64 %bf.set, i64* %350, align 8
  %bf.result.cast = trunc i64 %351 to i8
  %tobool517 = trunc i8 %bf.result.cast to i1
  br label %if.end.518

if.end.518:                                       ; preds = %if.end.509, %do.end
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end.518, %if.then.92, %if.then
  ret void
}

declare void @gtk_widget_set_double_buffered(%struct._GtkWidget*, i32) #1

declare void @gtk_window_set_wmclass(%struct._GtkWindow*, i8*, i8*) #1

declare i64 @g_signal_connect_data(i8*, i8*, void ()*, i8*, void (i8*, %struct._GClosure*)*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @delete_cb(%struct._GtkWidget* %widget, %union._GdkEvent* %event, i8* %user_data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %union._GdkEvent*, align 8
  %user_data.addr = alloca i8*, align 8
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store %union._GdkEvent* %event, %union._GdkEvent** %event.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal void @xg_set_geometry(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %left = alloca i32, align 4
  %xneg = alloca i32, align 4
  %top = alloca i32, align 4
  %yneg = alloca i32, align 4
  %geom_str = alloca [49 x i8], align 16
  %id = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 49
  %1 = load i32, i32* %size_hint_flags, align 4
  %conv = sext i32 %1 to i64
  %and = and i64 %conv, 5
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end.24

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %left_pos = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 44
  %3 = load i32, i32* %left_pos, align 4
  store i32 %3, i32* %left, align 4
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 49
  %5 = load i32, i32* %size_hint_flags1, align 4
  %and2 = and i32 %5, 16
  store i32 %and2, i32* %xneg, align 4
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %top_pos = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 45
  %7 = load i32, i32* %top_pos, align 4
  store i32 %7, i32* %top, align 4
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %size_hint_flags3 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 49
  %9 = load i32, i32* %size_hint_flags3, align 4
  %and4 = and i32 %9, 32
  store i32 %and4, i32* %yneg, align 4
  %10 = load i32, i32* %xneg, align 4
  %tobool5 = icmp ne i32 %10, 0
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then
  %11 = load i32, i32* %left, align 4
  %sub = sub nsw i32 0, %11
  store i32 %sub, i32* %left, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then
  %12 = load i32, i32* %yneg, align 4
  %tobool7 = icmp ne i32 %12, 0
  br i1 %tobool7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %13 = load i32, i32* %top, align 4
  %sub9 = sub nsw i32 0, %13
  store i32 %sub9, i32* %top, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end
  %arraydecay = getelementptr inbounds [49 x i8], [49 x i8]* %geom_str, i32 0, i32 0
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 46
  %15 = load i32, i32* %pixel_width, align 4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_height = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 47
  %17 = load i32, i32* %pixel_height, align 4
  %18 = load i32, i32* %xneg, align 4
  %tobool11 = icmp ne i32 %18, 0
  %cond = select i1 %tobool11, i32 45, i32 43
  %19 = load i32, i32* %left, align 4
  %20 = load i32, i32* %yneg, align 4
  %tobool12 = icmp ne i32 %20, 0
  %cond13 = select i1 %tobool12, i32 45, i32 43
  %21 = load i32, i32* %top, align 4
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38, i32 0, i32 0), i32 %15, i32 %17, i32 %cond, i32 %19, i32 %cond13, i32 %21) #4
  %call14 = call i32 @g_log_set_handler(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0), i32 19, void (i8*, i32, i8*, i8*)* @my_log_handler, i8* null)
  store i32 %call14, i32* %id, align 4
  %22 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %23 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 12
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %25 = bitcast %struct._GtkWidget* %24 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_window_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %25, i64 %call15)
  %26 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkWindow*
  %arraydecay17 = getelementptr inbounds [49 x i8], [49 x i8]* %geom_str, i32 0, i32 0
  %call18 = call i32 @gtk_window_parse_geometry(%struct._GtkWindow* %26, i8* %arraydecay17)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.23, label %if.then.20

if.then.20:                                       ; preds = %if.end.10
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %arraydecay21 = getelementptr inbounds [49 x i8], [49 x i8]* %geom_str, i32 0, i32 0
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.40, i32 0, i32 0), i8* %arraydecay21)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.20, %if.end.10
  %28 = load i32, i32* %id, align 4
  call void @g_log_remove_handler(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0), i32 %28)
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %entry
  ret void
}

declare i32 @gtk_window_get_gravity(%struct._GtkWindow*) #1

declare void @gtk_widget_add_events(%struct._GtkWidget*, i32) #1

declare void @gtk_widget_realize(%struct._GtkWidget*) #1

declare i64 @gdk_x11_drawable_get_xid(%struct._GdkDrawable*) #1

; Function Attrs: nounwind uwtable
define internal void @xg_set_widget_bg(%struct.frame* %f, %struct._GtkWidget* %w, i64 %pixel) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %w.addr = alloca %struct._GtkWidget*, align 8
  %pixel.addr = alloca i64, align 8
  %bg = alloca %struct._GdkColor, align 4
  %map = alloca %struct._GdkColormap*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store i64 %pixel, i64* %pixel.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %call = call %struct._GdkColormap* @gtk_widget_get_colormap(%struct._GtkWidget* %0)
  store %struct._GdkColormap* %call, %struct._GdkColormap** %map, align 8
  %1 = load %struct._GdkColormap*, %struct._GdkColormap** %map, align 8
  %2 = load i64, i64* %pixel.addr, align 8
  call void @gdk_colormap_query_color(%struct._GdkColormap* %1, i64 %2, %struct._GdkColor* %bg)
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 13
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  call void @gtk_widget_modify_bg(%struct._GtkWidget* %5, i32 0, %struct._GdkColor* %bg)
  ret void
}

declare %struct._GtkRcStyle* @gtk_widget_get_modifier_style(%struct._GtkWidget*) #1

declare noalias i8* @g_strdup(i8*) #1

declare void @gtk_widget_modify_style(%struct._GtkWidget*, %struct._GtkRcStyle*) #1

declare void @gtk_widget_set_tooltip_text(%struct._GtkWidget*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @qttip_cb(%struct._GtkWidget* %widget, i32 %xpos, i32 %ypos, i32 %keyboard_mode, %struct._GtkTooltip* %tooltip, i8* %user_data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %xpos.addr = alloca i32, align 4
  %ypos.addr = alloca i32, align 4
  %keyboard_mode.addr = alloca i32, align 4
  %tooltip.addr = alloca %struct._GtkTooltip*, align 8
  %user_data.addr = alloca i8*, align 8
  %f = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %p = alloca %struct._GtkWidget*, align 8
  %list = alloca %struct._GList*, align 8
  %iter = alloca %struct._GList*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store i32 %xpos, i32* %xpos.addr, align 4
  store i32 %ypos, i32* %ypos.addr, align 4
  store i32 %keyboard_mode, i32* %keyboard_mode.addr, align 4
  store %struct._GtkTooltip* %tooltip, %struct._GtkTooltip** %tooltip.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.frame*
  store %struct.frame* %1, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %3, %struct.x_output** %x, align 8
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 21
  %5 = load %struct._GtkTooltip*, %struct._GtkTooltip** %ttip_widget, align 8
  %cmp = icmp eq %struct._GtkTooltip* %5, null
  br i1 %cmp, label %if.then, label %if.end.44

if.then:                                          ; preds = %entry
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %widget.addr, align 8
  %7 = bitcast %struct._GtkWidget* %6 to %struct._GTypeInstance*
  %call = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 80)
  %8 = bitcast %struct._GTypeInstance* %call to %struct._GObject*
  %9 = bitcast %struct._GObject* %8 to i8*
  call void (i8*, i8*, ...) @g_object_set(i8* %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i32 0, i32 0), i32 0, i8* null)
  %10 = load %struct._GtkTooltip*, %struct._GtkTooltip** %tooltip.addr, align 8
  %11 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_widget2 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 21
  store %struct._GtkTooltip* %10, %struct._GtkTooltip** %ttip_widget2, align 8
  %12 = load %struct._GtkTooltip*, %struct._GtkTooltip** %tooltip.addr, align 8
  %13 = bitcast %struct._GtkTooltip* %12 to %struct._GTypeInstance*
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %13, i64 80)
  %14 = bitcast %struct._GTypeInstance* %call3 to %struct._GObject*
  %15 = bitcast %struct._GObject* %14 to i8*
  %call4 = call i8* @g_object_ref(i8* %15)
  %call5 = call %struct._GtkWidget* @gtk_label_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0))
  %16 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 22
  store %struct._GtkWidget* %call5, %struct._GtkWidget** %ttip_lbl, align 8
  %17 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl6 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 22
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl6, align 8
  %19 = bitcast %struct._GtkWidget* %18 to %struct._GTypeInstance*
  %call7 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %19, i64 80)
  %20 = bitcast %struct._GTypeInstance* %call7 to %struct._GObject*
  %21 = bitcast %struct._GObject* %20 to i8*
  %call8 = call i8* @g_object_ref(i8* %21)
  %22 = load %struct._GtkTooltip*, %struct._GtkTooltip** %tooltip.addr, align 8
  %23 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl9 = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 22
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl9, align 8
  call void @gtk_tooltip_set_custom(%struct._GtkTooltip* %22, %struct._GtkWidget* %24)
  %25 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl10 = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 22
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl10, align 8
  %call11 = call %struct._GtkWidget* @gtk_widget_get_toplevel(%struct._GtkWidget* %26)
  %27 = bitcast %struct._GtkWidget* %call11 to %struct._GTypeInstance*
  %call12 = call i64 @gtk_window_get_type() #8
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %27, i64 %call12)
  %28 = bitcast %struct._GTypeInstance* %call13 to %struct._GtkWindow*
  %29 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 23
  store %struct._GtkWindow* %28, %struct._GtkWindow** %ttip_window, align 8
  %30 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl14 = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 22
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl14, align 8
  %call15 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %31)
  store %struct._GtkWidget* %call15, %struct._GtkWidget** %p, align 8
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %p, align 8
  %33 = bitcast %struct._GtkWidget* %32 to %struct._GTypeInstance*
  %call16 = call i64 @gtk_container_get_type() #8
  %call17 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %33, i64 %call16)
  %34 = bitcast %struct._GTypeInstance* %call17 to %struct._GtkContainer*
  %call18 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %34)
  store %struct._GList* %call18, %struct._GList** %list, align 8
  %35 = load %struct._GList*, %struct._GList** %list, align 8
  store %struct._GList* %35, %struct._GList** %iter, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end, %if.then
  %36 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool = icmp ne %struct._GList* %36, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load %struct._GList*, %struct._GList** %iter, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %37, i32 0, i32 0
  %38 = load i8*, i8** %data, align 8
  %39 = bitcast i8* %38 to %struct._GTypeInstance*
  %call19 = call i64 @gtk_widget_get_type() #8
  %call20 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %39, i64 %call19)
  %40 = bitcast %struct._GTypeInstance* %call20 to %struct._GtkWidget*
  store %struct._GtkWidget* %40, %struct._GtkWidget** %w, align 8
  %41 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %42 = bitcast %struct._GtkWidget* %41 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %42, %struct._GTypeInstance** %__inst, align 8
  %call21 = call i64 @gtk_label_get_type() #8
  store i64 %call21, i64* %__t, align 8
  %43 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool22 = icmp ne %struct._GTypeInstance* %43, null
  br i1 %tobool22, label %if.else, label %if.then.23

if.then.23:                                       ; preds = %for.body
  store i32 0, i32* %__r, align 4
  br label %if.end.30

if.else:                                          ; preds = %for.body
  %44 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %44, i32 0, i32 0
  %45 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool24 = icmp ne %struct._GTypeClass* %45, null
  br i1 %tobool24, label %land.lhs.true, label %if.else.28

land.lhs.true:                                    ; preds = %if.else
  %46 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class25 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %46, i32 0, i32 0
  %47 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class25, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %47, i32 0, i32 0
  %48 = load i64, i64* %g_type, align 8
  %49 = load i64, i64* %__t, align 8
  %cmp26 = icmp eq i64 %48, %49
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.28:                                       ; preds = %land.lhs.true, %if.else
  %50 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %51 = load i64, i64* %__t, align 8
  %call29 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %50, i64 %51) #7
  store i32 %call29, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.28, %if.then.27
  br label %if.end.30

if.end.30:                                        ; preds = %if.end, %if.then.23
  %52 = load i32, i32* %__r, align 4
  store i32 %52, i32* %tmp
  %53 = load i32, i32* %tmp
  %tobool31 = icmp ne i32 %53, 0
  br i1 %tobool31, label %if.then.32, label %if.end.35

if.then.32:                                       ; preds = %if.end.30
  %54 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %55 = bitcast %struct._GtkWidget* %54 to %struct._GTypeInstance*
  %call33 = call i64 @gtk_label_get_type() #8
  %call34 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %55, i64 %call33)
  %56 = bitcast %struct._GTypeInstance* %call34 to %struct._GtkLabel*
  call void @gtk_label_set_line_wrap(%struct._GtkLabel* %56, i32 0)
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.32, %if.end.30
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %57 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool36 = icmp ne %struct._GList* %57, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc
  %58 = load %struct._GList*, %struct._GList** %iter, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %58, i32 0, i32 1
  %59 = load %struct._GList*, %struct._GList** %next, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %59, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %iter, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load %struct._GList*, %struct._GList** %list, align 8
  call void @g_list_free(%struct._GList* %60)
  %61 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window37 = getelementptr inbounds %struct.x_output, %struct.x_output* %61, i32 0, i32 23
  %62 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window37, align 8
  call void @gtk_window_set_title(%struct._GtkWindow* %62, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0))
  %63 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_window38 = getelementptr inbounds %struct.x_output, %struct.x_output* %63, i32 0, i32 23
  %64 = load %struct._GtkWindow*, %struct._GtkWindow** %ttip_window38, align 8
  %65 = bitcast %struct._GtkWindow* %64 to %struct._GTypeInstance*
  %call39 = call i64 @gtk_widget_get_type() #8
  %call40 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %65, i64 %call39)
  %66 = bitcast %struct._GTypeInstance* %call40 to %struct._GtkWidget*
  call void @gtk_widget_realize(%struct._GtkWidget* %66)
  %67 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl41 = getelementptr inbounds %struct.x_output, %struct.x_output* %67, i32 0, i32 22
  %68 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl41, align 8
  call void @gtk_widget_realize(%struct._GtkWidget* %68)
  %69 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl42 = getelementptr inbounds %struct.x_output, %struct.x_output* %69, i32 0, i32 22
  %70 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl42, align 8
  %71 = bitcast %struct._GtkWidget* %70 to i8*
  %72 = load %struct.frame*, %struct.frame** %f, align 8
  %73 = bitcast %struct.frame* %72 to i8*
  %call43 = call i64 @g_signal_connect_data(i8* %71, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.44, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, %struct._GtkWidget*, i8*)* @hierarchy_ch_cb to void ()*), i8* %73, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end.44

if.end.44:                                        ; preds = %for.end, %entry
  ret i32 0
}

declare %struct._GdkScreen* @gtk_widget_get_screen(%struct._GtkWidget*) #1

declare i64 @g_signal_handler_find(i8*, i32, i32, i32, %struct._GClosure*, i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @style_changed_cb(%struct._GObject* %go, %struct._GParamSpec* %spec, i8* %user_data) #0 {
entry:
  %go.addr = alloca %struct._GObject*, align 8
  %spec.addr = alloca %struct._GParamSpec*, align 8
  %user_data.addr = alloca i8*, align 8
  %event = alloca %struct.input_event, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  %display_name = alloca i8*, align 8
  %dpy = alloca %struct._XDisplay*, align 8
  %rest = alloca i64, align 8
  %frame = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  store %struct._GObject* %go, %struct._GObject** %go.addr, align 8
  store %struct._GParamSpec* %spec, %struct._GParamSpec** %spec.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct._GdkDisplay*
  store %struct._GdkDisplay* %1, %struct._GdkDisplay** %gdpy, align 8
  %2 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %call = call i8* @gdk_display_get_name(%struct._GdkDisplay* %2)
  store i8* %call, i8** %display_name, align 8
  %3 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %call1 = call %struct._XDisplay* @gdk_x11_display_get_xdisplay(%struct._GdkDisplay* %3)
  store %struct._XDisplay* %call1, %struct._XDisplay** %dpy, align 8
  %4 = bitcast %struct.input_event* %event to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 56, i32 8, i1 false)
  %5 = bitcast %struct.input_event* %event to i32*
  %bf.load = load i32, i32* %5, align 8
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, 26
  store i32 %bf.set, i32* %5, align 8
  %6 = load i8*, i8** %display_name, align 8
  %call2 = call i64 @build_string(i8* %6)
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 6
  store i64 %call2, i64* %frame_or_window, align 8
  %call3 = call i64 @intern(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i32 0, i32 0))
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 7
  store i64 %call3, i64* %arg, align 8
  call void @kbd_buffer_store_event(%struct.input_event* %event)
  call void @update_theme_scrollbar_width()
  call void @update_theme_scrollbar_height()
  %7 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %tobool = icmp ne %struct._XDisplay* %7, null
  br i1 %tobool, label %if.then, label %if.end.17

if.then:                                          ; preds = %entry
  %8 = load i64, i64* @Vframe_list, align 8
  store i64 %8, i64* %rest, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load i64, i64* %rest, align 8
  %and = and i64 %9, 7
  %conv = trunc i64 %and to i32
  %cmp = icmp eq i32 %conv, 3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %10 = load i64, i64* %rest, align 8
  %sub = sub nsw i64 %10, 3
  %11 = inttoptr i64 %sub to i8*
  %12 = bitcast i8* %11 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %12, i32 0, i32 0
  %13 = load i64, i64* %car, align 8
  store i64 %13, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ true, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %15 = load i64, i64* %frame, align 8
  %sub5 = sub nsw i64 %15, 5
  %16 = inttoptr i64 %sub5 to i8*
  %17 = bitcast i8* %16 to %struct.frame*
  store %struct.frame* %17, %struct.frame** %f, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %terminal = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 61
  %19 = load %struct.terminal*, %struct.terminal** %terminal, align 8
  %cmp6 = icmp ne %struct.terminal* %19, null
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %20 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %20, i32 0, i32 26
  %21 = bitcast i48* %output_method to i64*
  %bf.load8 = load i64, i64* %21, align 8
  %bf.lshr = lshr i64 %bf.load8, 23
  %bf.clear9 = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear9 to i32
  %cmp10 = icmp eq i32 %bf.cast, 2
  br i1 %cmp10, label %land.lhs.true.12, label %if.end

land.lhs.true.12:                                 ; preds = %land.lhs.true
  %22 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %22, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %23 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 44
  %24 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %24, i32 0, i32 2
  %25 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %26 = load %struct._XDisplay*, %struct._XDisplay** %dpy, align 8
  %cmp13 = icmp eq %struct._XDisplay* %25, %26
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %land.lhs.true.12
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_set_scroll_bar_default_width(%struct.frame* %27)
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_set_scroll_bar_default_height(%struct.frame* %28)
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %text_width = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 40
  %31 = load i32, i32* %text_width, align 4
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %text_height = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 41
  %33 = load i32, i32* %text_height, align 4
  call void @xg_frame_set_char_size(%struct.frame* %29, i32 %31, i32 %33)
  br label %if.end

if.end:                                           ; preds = %if.then.15, %land.lhs.true.12, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %34 = load i64, i64* %rest, align 8
  %sub16 = sub nsw i64 %34, 3
  %35 = inttoptr i64 %sub16 to i8*
  %36 = bitcast i8* %35 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %36, i32 0, i32 1
  %cdr = bitcast %union.anon.13* %u to i64*
  %37 = load i64, i64* %cdr, align 8
  store i64 %37, i64* %rest, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.17

if.end.17:                                        ; preds = %for.end, %entry
  ret void
}

declare %struct._GdkDisplay* @gdk_screen_get_display(%struct._GdkScreen*) #1

; Function Attrs: nounwind uwtable
define void @xg_free_frame_widgets(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x1 = alloca %struct.x_output*, align 8
  %tbinfo = alloca %struct.xg_frame_tb_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 12
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %2, null
  br i1 %tobool, label %if.then, label %if.end.27

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x3, align 8
  store %struct.x_output* %4, %struct.x_output** %x1, align 8
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data4 = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x5 = bitcast %union.output_data* %output_data4 to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x5, align 8
  %widget6 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 12
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %widget6, align 8
  %8 = bitcast %struct._GtkWidget* %7 to %struct._GTypeInstance*
  %call = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %8, i64 80)
  %9 = bitcast %struct._GTypeInstance* %call to %struct._GObject*
  %call7 = call i8* @g_object_get_data(%struct._GObject* %9, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0))
  %10 = bitcast i8* %call7 to %struct.xg_frame_tb_info*
  store %struct.xg_frame_tb_info* %10, %struct.xg_frame_tb_info** %tbinfo, align 8
  %11 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %tobool8 = icmp ne %struct.xg_frame_tb_info* %11, null
  br i1 %tobool8, label %if.then.9, label %if.end

if.then.9:                                        ; preds = %if.then
  %12 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %13 = bitcast %struct.xg_frame_tb_info* %12 to i8*
  call void @xfree(i8* %13)
  br label %if.end

if.end:                                           ; preds = %if.then.9, %if.then
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data10 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x11 = bitcast %union.output_data* %output_data10 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x11, align 8
  %widget12 = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 12
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %widget12, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %16)
  %17 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data13 = getelementptr inbounds %struct.frame, %struct.frame* %17, i32 0, i32 62
  %x14 = bitcast %union.output_data* %output_data13 to %struct.x_output**
  %18 = load %struct.x_output*, %struct.x_output** %x14, align 8
  %window_desc = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 9
  store i64 0, i64* %window_desc, align 8
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data15 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x16 = bitcast %union.output_data* %output_data15 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x16, align 8
  %widget17 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 12
  store %struct._GtkWidget* null, %struct._GtkWidget** %widget17, align 8
  %21 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %ttip_lbl = getelementptr inbounds %struct.x_output, %struct.x_output* %21, i32 0, i32 22
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl, align 8
  %tobool18 = icmp ne %struct._GtkWidget* %22, null
  br i1 %tobool18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end
  %23 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %ttip_lbl20 = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 22
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl20, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %24)
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.19, %if.end
  %25 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %ttip_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 21
  %26 = load %struct._GtkTooltip*, %struct._GtkTooltip** %ttip_widget, align 8
  %tobool22 = icmp ne %struct._GtkTooltip* %26, null
  br i1 %tobool22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %if.end.21
  %27 = load %struct.x_output*, %struct.x_output** %x1, align 8
  %ttip_widget24 = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 21
  %28 = load %struct._GtkTooltip*, %struct._GtkTooltip** %ttip_widget24, align 8
  %29 = bitcast %struct._GtkTooltip* %28 to %struct._GTypeInstance*
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %29, i64 80)
  %30 = bitcast %struct._GTypeInstance* %call25 to %struct._GObject*
  %31 = bitcast %struct._GObject* %30 to i8*
  call void @g_object_unref(i8* %31)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %if.end.21
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %entry
  ret void
}

declare void @xfree(i8*) #1

declare void @g_object_unref(i8*) #1

declare i64 @make_lisp_ptr(i8*, i32) #1

declare i64 @Fframe_parameter(i64, i64) #1

declare zeroext i1 @x_wm_supports(%struct.frame*, i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #2

declare void @gtk_window_set_geometry_hints(%struct._GtkWindow*, %struct._GtkWidget*, %struct._GdkGeometry*, i32) #1

; Function Attrs: nounwind uwtable
define void @xg_set_background_color(%struct.frame* %f, i64 %bg) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bg.addr = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %bg, i64* %bg.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 13
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @block_input()
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %edit_widget3 = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 13
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget3, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %background_pixel = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 77
  %8 = load i64, i64* %background_pixel, align 8
  call void @xg_set_widget_bg(%struct.frame* %3, %struct._GtkWidget* %6, i64 %8)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @xg_set_frame_icon(%struct.frame* %f, i64 %icon_pixmap, i64 %icon_mask) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %icon_pixmap.addr = alloca i64, align 8
  %icon_mask.addr = alloca i64, align 8
  %gp = alloca %struct._GdkPixbuf*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %icon_pixmap, i64* %icon_pixmap.addr, align 8
  store i64 %icon_mask, i64* %icon_mask.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i64, i64* %icon_pixmap.addr, align 8
  %2 = load i64, i64* %icon_mask.addr, align 8
  %call = call %struct._GdkPixbuf* @xg_get_pixbuf_from_pix_and_mask(%struct.frame* %0, i64 %1, i64 %2)
  store %struct._GdkPixbuf* %call, %struct._GdkPixbuf** %gp, align 8
  %3 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %gp, align 8
  %tobool = icmp ne %struct._GdkPixbuf* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 12
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %7 = bitcast %struct._GtkWidget* %6 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_window_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call1)
  %8 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkWindow*
  %9 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %gp, align 8
  call void @gtk_window_set_icon(%struct._GtkWindow* %8, %struct._GdkPixbuf* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._GdkPixbuf* @xg_get_pixbuf_from_pix_and_mask(%struct.frame* %f, i64 %pix, i64 %mask) #0 {
entry:
  %retval = alloca %struct._GdkPixbuf*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %pix.addr = alloca i64, align 8
  %mask.addr = alloca i64, align 8
  %icon_buf = alloca %struct._GdkPixbuf*, align 8
  %iunused = alloca i32, align 4
  %wunused = alloca i64, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %depth = alloca i32, align 4
  %uunused = alloca i32, align 4
  %xim = alloca %struct._XImage*, align 8
  %xmm = alloca %struct._XImage*, align 8
  %pixels = alloca i8*, align 8
  %rowjunkwidth = alloca i32, align 4
  %y = alloca i32, align 4
  %x25 = alloca i32, align 4
  %rgb = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %pix, i64* %pix.addr, align 8
  store i64 %mask, i64* %mask.addr, align 8
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %icon_buf, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 44
  %2 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %red_bits = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %2, i32 0, i32 91
  %3 = load i32, i32* %red_bits, align 4
  %cmp = icmp ne i32 %3, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data1 = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 62
  %x2 = bitcast %union.output_data* %output_data1 to %struct.x_output**
  %5 = load %struct.x_output*, %struct.x_output** %x2, align 8
  %display_info3 = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 44
  %6 = load %struct.x_display_info*, %struct.x_display_info** %display_info3, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %6, i32 0, i32 2
  %7 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %8 = load i64, i64* %pix.addr, align 8
  %call = call i32 @XGetGeometry(%struct._XDisplay* %7, i64 %8, i64* %wunused, i32* %iunused, i32* %iunused, i32* %width, i32* %height, i32* %uunused, i32* %depth)
  %9 = load i32, i32* %depth, align 4
  %cmp4 = icmp ne i32 %9, 24
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store %struct._GdkPixbuf* null, %struct._GdkPixbuf** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %10 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data7 = getelementptr inbounds %struct.frame, %struct.frame* %10, i32 0, i32 62
  %x8 = bitcast %union.output_data* %output_data7 to %struct.x_output**
  %11 = load %struct.x_output*, %struct.x_output** %x8, align 8
  %display_info9 = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 44
  %12 = load %struct.x_display_info*, %struct.x_display_info** %display_info9, align 8
  %display10 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %12, i32 0, i32 2
  %13 = load %struct._XDisplay*, %struct._XDisplay** %display10, align 8
  %14 = load i64, i64* %pix.addr, align 8
  %15 = load i32, i32* %width, align 4
  %16 = load i32, i32* %height, align 4
  %call11 = call %struct._XImage* @XGetImage(%struct._XDisplay* %13, i64 %14, i32 0, i32 0, i32 %15, i32 %16, i64 -1, i32 1)
  store %struct._XImage* %call11, %struct._XImage** %xim, align 8
  %17 = load %struct._XImage*, %struct._XImage** %xim, align 8
  %tobool = icmp ne %struct._XImage* %17, null
  br i1 %tobool, label %if.then.12, label %if.end.58

if.then.12:                                       ; preds = %if.end.6
  %18 = load i64, i64* %mask.addr, align 8
  %tobool13 = icmp ne i64 %18, 0
  br i1 %tobool13, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then.12
  br label %cond.end

cond.false:                                       ; preds = %if.then.12
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data14 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x15 = bitcast %union.output_data* %output_data14 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x15, align 8
  %display_info16 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 44
  %21 = load %struct.x_display_info*, %struct.x_display_info** %display_info16, align 8
  %display17 = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 2
  %22 = load %struct._XDisplay*, %struct._XDisplay** %display17, align 8
  %23 = load i64, i64* %mask.addr, align 8
  %24 = load i32, i32* %width, align 4
  %25 = load i32, i32* %height, align 4
  %call18 = call %struct._XImage* @XGetImage(%struct._XDisplay* %22, i64 %23, i32 0, i32 0, i32 %24, i32 %25, i64 -1, i32 1)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._XImage* [ null, %cond.true ], [ %call18, %cond.false ]
  store %struct._XImage* %cond, %struct._XImage** %xmm, align 8
  %26 = load i32, i32* %width, align 4
  %27 = load i32, i32* %height, align 4
  %call19 = call %struct._GdkPixbuf* @gdk_pixbuf_new(i32 0, i32 1, i32 8, i32 %26, i32 %27)
  store %struct._GdkPixbuf* %call19, %struct._GdkPixbuf** %icon_buf, align 8
  %28 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  %tobool20 = icmp ne %struct._GdkPixbuf* %28, null
  br i1 %tobool20, label %if.then.21, label %if.end.49

if.then.21:                                       ; preds = %cond.end
  %29 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  %call22 = call i8* @gdk_pixbuf_get_pixels(%struct._GdkPixbuf* %29)
  store i8* %call22, i8** %pixels, align 8
  %30 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  %call23 = call i32 @gdk_pixbuf_get_rowstride(%struct._GdkPixbuf* %30)
  %31 = load i32, i32* %width, align 4
  %mul = mul i32 %31, 4
  %sub = sub i32 %call23, %mul
  store i32 %sub, i32* %rowjunkwidth, align 4
  store i32 0, i32* %y, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.46, %if.then.21
  %32 = load i32, i32* %y, align 4
  %33 = load i32, i32* %height, align 4
  %cmp24 = icmp ult i32 %32, %33
  br i1 %cmp24, label %for.body, label %for.end.48

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %x25, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc, %for.body
  %34 = load i32, i32* %x25, align 4
  %35 = load i32, i32* %width, align 4
  %cmp27 = icmp ult i32 %34, %35
  br i1 %cmp27, label %for.body.28, label %for.end

for.body.28:                                      ; preds = %for.cond.26
  %36 = load %struct._XImage*, %struct._XImage** %xim, align 8
  %f29 = getelementptr inbounds %struct._XImage, %struct._XImage* %36, i32 0, i32 16
  %get_pixel = getelementptr inbounds %struct.funcs, %struct.funcs* %f29, i32 0, i32 2
  %37 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel, align 8
  %38 = load %struct._XImage*, %struct._XImage** %xim, align 8
  %39 = load i32, i32* %x25, align 4
  %40 = load i32, i32* %y, align 4
  %call30 = call i64 %37(%struct._XImage* %38, i32 %39, i32 %40)
  store i64 %call30, i64* %rgb, align 8
  %41 = load i64, i64* %rgb, align 8
  %shr = lshr i64 %41, 16
  %and = and i64 %shr, 255
  %conv = trunc i64 %and to i8
  %42 = load i8*, i8** %pixels, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr, i8** %pixels, align 8
  store i8 %conv, i8* %42, align 1
  %43 = load i64, i64* %rgb, align 8
  %shr31 = lshr i64 %43, 8
  %and32 = and i64 %shr31, 255
  %conv33 = trunc i64 %and32 to i8
  %44 = load i8*, i8** %pixels, align 8
  %incdec.ptr34 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr34, i8** %pixels, align 8
  store i8 %conv33, i8* %44, align 1
  %45 = load i64, i64* %rgb, align 8
  %and35 = and i64 %45, 255
  %conv36 = trunc i64 %and35 to i8
  %46 = load i8*, i8** %pixels, align 8
  %incdec.ptr37 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %incdec.ptr37, i8** %pixels, align 8
  store i8 %conv36, i8* %46, align 1
  %47 = load %struct._XImage*, %struct._XImage** %xmm, align 8
  %tobool38 = icmp ne %struct._XImage* %47, null
  br i1 %tobool38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body.28
  %48 = load %struct._XImage*, %struct._XImage** %xmm, align 8
  %f39 = getelementptr inbounds %struct._XImage, %struct._XImage* %48, i32 0, i32 16
  %get_pixel40 = getelementptr inbounds %struct.funcs, %struct.funcs* %f39, i32 0, i32 2
  %49 = load i64 (%struct._XImage*, i32, i32)*, i64 (%struct._XImage*, i32, i32)** %get_pixel40, align 8
  %50 = load %struct._XImage*, %struct._XImage** %xmm, align 8
  %51 = load i32, i32* %x25, align 4
  %52 = load i32, i32* %y, align 4
  %call41 = call i64 %49(%struct._XImage* %50, i32 %51, i32 %52)
  %tobool42 = icmp ne i64 %call41, 0
  %lnot = xor i1 %tobool42, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body.28
  %53 = phi i1 [ false, %for.body.28 ], [ %lnot, %land.rhs ]
  %cond43 = select i1 %53, i32 0, i32 255
  %conv44 = trunc i32 %cond43 to i8
  %54 = load i8*, i8** %pixels, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr45, i8** %pixels, align 8
  store i8 %conv44, i8* %54, align 1
  br label %for.inc

for.inc:                                          ; preds = %land.end
  %55 = load i32, i32* %x25, align 4
  %inc = add nsw i32 %55, 1
  store i32 %inc, i32* %x25, align 4
  br label %for.cond.26

for.end:                                          ; preds = %for.cond.26
  br label %for.inc.46

for.inc.46:                                       ; preds = %for.end
  %56 = load i32, i32* %y, align 4
  %inc47 = add nsw i32 %56, 1
  store i32 %inc47, i32* %y, align 4
  %57 = load i32, i32* %rowjunkwidth, align 4
  %58 = load i8*, i8** %pixels, align 8
  %idx.ext = sext i32 %57 to i64
  %add.ptr = getelementptr inbounds i8, i8* %58, i64 %idx.ext
  store i8* %add.ptr, i8** %pixels, align 8
  br label %for.cond

for.end.48:                                       ; preds = %for.cond
  br label %if.end.49

if.end.49:                                        ; preds = %for.end.48, %cond.end
  %59 = load %struct._XImage*, %struct._XImage** %xmm, align 8
  %tobool50 = icmp ne %struct._XImage* %59, null
  br i1 %tobool50, label %if.then.51, label %if.end.54

if.then.51:                                       ; preds = %if.end.49
  %60 = load %struct._XImage*, %struct._XImage** %xmm, align 8
  %f52 = getelementptr inbounds %struct._XImage, %struct._XImage* %60, i32 0, i32 16
  %destroy_image = getelementptr inbounds %struct.funcs, %struct.funcs* %f52, i32 0, i32 1
  %61 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image, align 8
  %62 = load %struct._XImage*, %struct._XImage** %xmm, align 8
  %call53 = call i32 %61(%struct._XImage* %62)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.51, %if.end.49
  %63 = load %struct._XImage*, %struct._XImage** %xim, align 8
  %f55 = getelementptr inbounds %struct._XImage, %struct._XImage* %63, i32 0, i32 16
  %destroy_image56 = getelementptr inbounds %struct.funcs, %struct.funcs* %f55, i32 0, i32 1
  %64 = load i32 (%struct._XImage*)*, i32 (%struct._XImage*)** %destroy_image56, align 8
  %65 = load %struct._XImage*, %struct._XImage** %xim, align 8
  %call57 = call i32 %64(%struct._XImage* %65)
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.54, %if.end.6
  %66 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  store %struct._GdkPixbuf* %66, %struct._GdkPixbuf** %retval
  br label %return

return:                                           ; preds = %if.end.58, %if.then.5, %if.then
  %67 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %retval
  ret %struct._GdkPixbuf* %67
}

declare void @gtk_window_set_icon(%struct._GtkWindow*, %struct._GdkPixbuf*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_uses_old_file_dialog() #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 504), align 1
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

; Function Attrs: nounwind uwtable
define i8* @xg_get_file_name(%struct.frame* %f, i8* %prompt, i8* %default_filename, i1 zeroext %mustmatch_p, i1 zeroext %only_dir_p) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %prompt.addr = alloca i8*, align 8
  %default_filename.addr = alloca i8*, align 8
  %mustmatch_p.addr = alloca i8, align 1
  %only_dir_p.addr = alloca i8, align 1
  %w = alloca %struct._GtkWidget*, align 8
  %fn = alloca i8*, align 8
  %filesel_done = alloca i32, align 4
  %func = alloca i8* (%struct._GtkWidget*)*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %prompt, i8** %prompt.addr, align 8
  store i8* %default_filename, i8** %default_filename.addr, align 8
  %frombool = zext i1 %mustmatch_p to i8
  store i8 %frombool, i8* %mustmatch_p.addr, align 1
  %frombool1 = zext i1 %only_dir_p to i8
  store i8 %frombool1, i8* %only_dir_p.addr, align 1
  store %struct._GtkWidget* null, %struct._GtkWidget** %w, align 8
  store i8* null, i8** %fn, align 8
  store i32 0, i32* %filesel_done, align 4
  %call = call zeroext i1 @xg_uses_old_file_dialog()
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %1 = load i8*, i8** %prompt.addr, align 8
  %2 = load i8*, i8** %default_filename.addr, align 8
  %3 = load i8, i8* %mustmatch_p.addr, align 1
  %tobool = trunc i8 %3 to i1
  %4 = load i8, i8* %only_dir_p.addr, align 1
  %tobool2 = trunc i8 %4 to i1
  %call3 = call %struct._GtkWidget* @xg_get_file_with_selection(%struct.frame* %0, i8* %1, i8* %2, i1 zeroext %tobool, i1 zeroext %tobool2, i8* (%struct._GtkWidget*)** %func)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %w, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %6 = load i8*, i8** %prompt.addr, align 8
  %7 = load i8*, i8** %default_filename.addr, align 8
  %8 = load i8, i8* %mustmatch_p.addr, align 1
  %tobool4 = trunc i8 %8 to i1
  %9 = load i8, i8* %only_dir_p.addr, align 1
  %tobool5 = trunc i8 %9 to i1
  %call6 = call %struct._GtkWidget* @xg_get_file_with_chooser(%struct.frame* %5, i8* %6, i8* %7, i1 zeroext %tobool4, i1 zeroext %tobool5, i8* (%struct._GtkWidget*)** %func)
  store %struct._GtkWidget* %call6, %struct._GtkWidget** %w, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %10, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i32 0, i32 0))
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %call7 = call i32 @xg_dialog_run(%struct.frame* %11, %struct._GtkWidget* %12)
  store i32 %call7, i32* %filesel_done, align 4
  %13 = load i32, i32* %filesel_done, align 4
  %cmp = icmp eq i32 %13, -5
  br i1 %cmp, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %14 = load i8* (%struct._GtkWidget*)*, i8* (%struct._GtkWidget*)** %func, align 8
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %call9 = call i8* %14(%struct._GtkWidget* %15)
  store i8* %call9, i8** %fn, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %16)
  %17 = load i8*, i8** %fn, align 8
  ret i8* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_get_file_with_selection(%struct.frame* %f, i8* %prompt, i8* %default_filename, i1 zeroext %mustmatch_p, i1 zeroext %only_dir_p, i8* (%struct._GtkWidget*)** %func) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %prompt.addr = alloca i8*, align 8
  %default_filename.addr = alloca i8*, align 8
  %mustmatch_p.addr = alloca i8, align 1
  %only_dir_p.addr = alloca i8, align 1
  %func.addr = alloca i8* (%struct._GtkWidget*)**, align 8
  %filewin = alloca %struct._GtkWidget*, align 8
  %filesel = alloca %struct._GtkFileSelection*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %prompt, i8** %prompt.addr, align 8
  store i8* %default_filename, i8** %default_filename.addr, align 8
  %frombool = zext i1 %mustmatch_p to i8
  store i8 %frombool, i8* %mustmatch_p.addr, align 1
  %frombool1 = zext i1 %only_dir_p to i8
  store i8 %frombool1, i8* %only_dir_p.addr, align 1
  store i8* (%struct._GtkWidget*)** %func, i8* (%struct._GtkWidget*)*** %func.addr, align 8
  %0 = load i8*, i8** %prompt.addr, align 8
  %call = call %struct._GtkWidget* @gtk_file_selection_new(i8* %0)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %filewin, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %2 = bitcast %struct._GtkWidget* %1 to %struct._GTypeInstance*
  %call2 = call i64 @gtk_file_selection_get_type() #8
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %2, i64 %call2)
  %3 = bitcast %struct._GTypeInstance* %call3 to %struct._GtkFileSelection*
  store %struct._GtkFileSelection* %3, %struct._GtkFileSelection** %filesel, align 8
  %4 = load i8*, i8** %default_filename.addr, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct._GtkFileSelection*, %struct._GtkFileSelection** %filesel, align 8
  %6 = load i8*, i8** %default_filename.addr, align 8
  call void @gtk_file_selection_set_filename(%struct._GtkFileSelection* %5, i8* %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8, i8* %mustmatch_p.addr, align 1
  %tobool4 = trunc i8 %7 to i1
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %8 = load %struct._GtkFileSelection*, %struct._GtkFileSelection** %filesel, align 8
  %selection_entry = getelementptr inbounds %struct._GtkFileSelection, %struct._GtkFileSelection* %8, i32 0, i32 3
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %selection_entry, align 8
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %9, i32 0)
  %10 = load %struct._GtkFileSelection*, %struct._GtkFileSelection** %filesel, align 8
  call void @gtk_file_selection_hide_fileop_buttons(%struct._GtkFileSelection* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %11 = load i8* (%struct._GtkWidget*)**, i8* (%struct._GtkWidget*)*** %func.addr, align 8
  store i8* (%struct._GtkWidget*)* @xg_get_file_name_from_selector, i8* (%struct._GtkWidget*)** %11, align 8
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  ret %struct._GtkWidget* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_get_file_with_chooser(%struct.frame* %f, i8* %prompt, i8* %default_filename, i1 zeroext %mustmatch_p, i1 zeroext %only_dir_p, i8* (%struct._GtkWidget*)** %func) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %prompt.addr = alloca i8*, align 8
  %default_filename.addr = alloca i8*, align 8
  %mustmatch_p.addr = alloca i8, align 1
  %only_dir_p.addr = alloca i8, align 1
  %func.addr = alloca i8* (%struct._GtkWidget*)**, align 8
  %msgbuf = alloca [1024 x i8], align 16
  %filewin = alloca %struct._GtkWidget*, align 8
  %wtoggle = alloca %struct._GtkWidget*, align 8
  %wbox = alloca %struct._GtkWidget*, align 8
  %wmessage = alloca %struct._GtkWidget*, align 8
  %gwin = alloca %struct._GtkWindow*, align 8
  %action = alloca i32, align 4
  %z = alloca i8*, align 8
  %file = alloca i64, align 8
  %utf8_filename = alloca i8*, align 8
  %cp = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %prompt, i8** %prompt.addr, align 8
  store i8* %default_filename, i8** %default_filename.addr, align 8
  %frombool = zext i1 %mustmatch_p to i8
  store i8 %frombool, i8* %mustmatch_p.addr, align 1
  %frombool1 = zext i1 %only_dir_p to i8
  store i8 %frombool1, i8* %only_dir_p.addr, align 1
  store i8* (%struct._GtkWidget*)** %func, i8* (%struct._GtkWidget*)*** %func.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %1, i32 0, i32 12
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %3 = bitcast %struct._GtkWidget* %2 to %struct._GTypeInstance*
  %call = call i64 @gtk_window_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 %call)
  %4 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkWindow*
  store %struct._GtkWindow* %4, %struct._GtkWindow** %gwin, align 8
  %5 = load i8, i8* %mustmatch_p.addr, align 1
  %tobool = trunc i8 %5 to i1
  %cond = select i1 %tobool, i32 0, i32 1
  store i32 %cond, i32* %action, align 4
  %6 = load i8, i8* %only_dir_p.addr, align 1
  %tobool3 = trunc i8 %6 to i1
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 2, i32* %action, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8*, i8** %prompt.addr, align 8
  %8 = load %struct._GtkWindow*, %struct._GtkWindow** %gwin, align 8
  %9 = load i32, i32* %action, align 4
  %10 = load i8, i8* %mustmatch_p.addr, align 1
  %tobool4 = trunc i8 %10 to i1
  br i1 %tobool4, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %11 = load i8, i8* %only_dir_p.addr, align 1
  %tobool5 = trunc i8 %11 to i1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %12 = phi i1 [ true, %if.end ], [ %tobool5, %lor.rhs ]
  %cond6 = select i1 %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i32 0, i32 0)
  %call7 = call %struct._GtkWidget* (i8*, %struct._GtkWindow*, i32, i8*, ...) @gtk_file_chooser_dialog_new(i8* %7, %struct._GtkWindow* %8, i32 %9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), i32 -6, i8* %cond6, i32 -5, i8* null)
  store %struct._GtkWidget* %call7, %struct._GtkWidget** %filewin, align 8
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %14 = bitcast %struct._GtkWidget* %13 to %struct._GTypeInstance*
  %call8 = call i64 @gtk_file_chooser_get_type() #8
  %call9 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %14, i64 %call8)
  %15 = bitcast %struct._GTypeInstance* %call9 to %struct._GtkFileChooser*
  call void @gtk_file_chooser_set_local_only(%struct._GtkFileChooser* %15, i32 1)
  %call10 = call %struct._GtkWidget* @gtk_vbox_new(i32 0, i32 0)
  store %struct._GtkWidget* %call10, %struct._GtkWidget** %wbox, align 8
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  %17 = bitcast %struct._GtkWidget* %16 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_box_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %17, i64 %call11)
  %18 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %18, i32 0)
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %19)
  %call13 = call %struct._GtkWidget* @gtk_check_button_new_with_label(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.49, i32 0, i32 0))
  store %struct._GtkWidget* %call13, %struct._GtkWidget** %wtoggle, align 8
  %20 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 503), align 1
  %tobool14 = trunc i8 %20 to i1
  br i1 %tobool14, label %if.then.15, label %if.end.19

if.then.15:                                       ; preds = %lor.end
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %22 = bitcast %struct._GtkWidget* %21 to %struct._GTypeInstance*
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 80)
  %23 = bitcast %struct._GTypeInstance* %call16 to %struct._GObject*
  %24 = bitcast %struct._GObject* %23 to i8*
  call void (i8*, i8*, ...) @g_object_set(i8* %24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), i32 1, i8* null)
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %26 = bitcast %struct._GtkWidget* %25 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_toggle_button_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %26, i64 %call17)
  %27 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkToggleButton*
  call void @gtk_toggle_button_set_active(%struct._GtkToggleButton* %27, i32 1)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.15, %lor.end
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %28)
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %30 = bitcast %struct._GtkWidget* %29 to %struct._GTypeInstance*
  %call20 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %30, i64 80)
  %31 = bitcast %struct._GTypeInstance* %call20 to %struct._GObject*
  %32 = bitcast %struct._GObject* %31 to i8*
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %34 = bitcast %struct._GtkWidget* %33 to i8*
  %call21 = call i64 @g_signal_connect_data(i8* %32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @xg_toggle_visibility_cb to void ()*), i8* %34, void (i8*, %struct._GClosure*)* null, i32 0)
  %35 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %36 = bitcast %struct._GtkWidget* %35 to %struct._GTypeInstance*
  %call22 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %36, i64 80)
  %37 = bitcast %struct._GTypeInstance* %call22 to %struct._GObject*
  %38 = bitcast %struct._GObject* %37 to i8*
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %40 = bitcast %struct._GtkWidget* %39 to i8*
  %call23 = call i64 @g_signal_connect_data(i8* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i32 0, i32 0), void ()* bitcast (void (%struct._GObject*, %struct._GParamSpec*, i8*)* @xg_toggle_notify_cb to void ()*), i8* %40, void (i8*, %struct._GClosure*)* null, i32 0)
  %41 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 502), align 1
  %tobool24 = trunc i8 %41 to i1
  br i1 %tobool24, label %if.then.25, label %if.end.34

if.then.25:                                       ; preds = %if.end.19
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %msgbuf, i32 0, i32 0
  store i8* %arraydecay, i8** %z, align 8
  %call26 = call i8* @gtk_check_version(i32 2, i32 10, i32 0)
  %tobool27 = icmp ne i8* %call26, null
  br i1 %tobool27, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %if.then.25
  %42 = load i32, i32* %action, align 4
  %cmp = icmp ne i32 %42, 1
  br i1 %cmp, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %land.lhs.true
  %43 = load i8*, i8** %z, align 8
  %call29 = call i8* @stpcpy(i8* %43, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.53, i32 0, i32 0)) #4
  store i8* %call29, i8** %z, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %land.lhs.true, %if.then.25
  %44 = load i8*, i8** %z, align 8
  %call31 = call i8* @strcpy(i8* %44, i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.54, i32 0, i32 0)) #4
  %arraydecay32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %msgbuf, i32 0, i32 0
  %call33 = call %struct._GtkWidget* @gtk_label_new(i8* %arraydecay32)
  store %struct._GtkWidget* %call33, %struct._GtkWidget** %wmessage, align 8
  %45 = load %struct._GtkWidget*, %struct._GtkWidget** %wmessage, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %45)
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.30, %if.end.19
  %46 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  %47 = bitcast %struct._GtkWidget* %46 to %struct._GTypeInstance*
  %call35 = call i64 @gtk_box_get_type() #8
  %call36 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %47, i64 %call35)
  %48 = bitcast %struct._GTypeInstance* %call36 to %struct._GtkBox*
  %49 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %48, %struct._GtkWidget* %49, i32 0, i32 0, i32 0)
  %50 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 502), align 1
  %tobool37 = trunc i8 %50 to i1
  br i1 %tobool37, label %if.then.38, label %if.end.41

if.then.38:                                       ; preds = %if.end.34
  %51 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  %52 = bitcast %struct._GtkWidget* %51 to %struct._GTypeInstance*
  %call39 = call i64 @gtk_box_get_type() #8
  %call40 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %52, i64 %call39)
  %53 = bitcast %struct._GTypeInstance* %call40 to %struct._GtkBox*
  %54 = load %struct._GtkWidget*, %struct._GtkWidget** %wmessage, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %53, %struct._GtkWidget* %54, i32 0, i32 0, i32 0)
  br label %if.end.41

if.end.41:                                        ; preds = %if.then.38, %if.end.34
  %55 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %56 = bitcast %struct._GtkWidget* %55 to %struct._GTypeInstance*
  %call42 = call i64 @gtk_file_chooser_get_type() #8
  %call43 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %56, i64 %call42)
  %57 = bitcast %struct._GTypeInstance* %call43 to %struct._GtkFileChooser*
  %58 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  call void @gtk_file_chooser_set_extra_widget(%struct._GtkFileChooser* %57, %struct._GtkWidget* %58)
  %59 = load i8*, i8** %default_filename.addr, align 8
  %tobool44 = icmp ne i8* %59, null
  br i1 %tobool44, label %if.then.45, label %if.end.79

if.then.45:                                       ; preds = %if.end.41
  %60 = load i8*, i8** %default_filename.addr, align 8
  %call46 = call i64 @build_string(i8* %60)
  store i64 %call46, i64* %file, align 8
  %61 = load i8*, i8** %default_filename.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %61, i64 0
  %62 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %62 to i32
  %cmp47 = icmp ne i32 %conv, 47
  br i1 %cmp47, label %if.then.49, label %if.end.52

if.then.49:                                       ; preds = %if.then.45
  %63 = load i64, i64* %file, align 8
  %call50 = call i64 @builtin_lisp_symbol(i32 0)
  %call51 = call i64 @Fexpand_file_name(i64 %63, i64 %call50)
  store i64 %call51, i64* %file, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.49, %if.then.45
  %64 = load i64, i64* %file, align 8
  %call53 = call i64 @builtin_lisp_symbol(i32 988)
  %call54 = call i64 @code_convert_string_norecord(i64 %64, i64 %call53, i1 zeroext true)
  %call55 = call i8* @SSDATA(i64 %call54)
  store i8* %call55, i8** %utf8_filename, align 8
  %65 = load i64, i64* %file, align 8
  %call56 = call i64 @Ffile_directory_p(i64 %65)
  %call57 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp58 = icmp eq i64 %call56, %call57
  br i1 %cmp58, label %if.else, label %if.then.60

if.then.60:                                       ; preds = %if.end.52
  %66 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %67 = bitcast %struct._GtkWidget* %66 to %struct._GTypeInstance*
  %call61 = call i64 @gtk_file_chooser_get_type() #8
  %call62 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %67, i64 %call61)
  %68 = bitcast %struct._GTypeInstance* %call62 to %struct._GtkFileChooser*
  %69 = load i8*, i8** %utf8_filename, align 8
  %call63 = call i32 @gtk_file_chooser_set_current_folder(%struct._GtkFileChooser* %68, i8* %69)
  br label %if.end.78

if.else:                                          ; preds = %if.end.52
  %70 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %71 = bitcast %struct._GtkWidget* %70 to %struct._GTypeInstance*
  %call64 = call i64 @gtk_file_chooser_get_type() #8
  %call65 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %71, i64 %call64)
  %72 = bitcast %struct._GTypeInstance* %call65 to %struct._GtkFileChooser*
  %73 = load i8*, i8** %utf8_filename, align 8
  %call66 = call i32 @gtk_file_chooser_set_filename(%struct._GtkFileChooser* %72, i8* %73)
  %74 = load i32, i32* %action, align 4
  %cmp67 = icmp eq i32 %74, 1
  br i1 %cmp67, label %if.then.69, label %if.end.77

if.then.69:                                       ; preds = %if.else
  %75 = load i8*, i8** %utf8_filename, align 8
  %call70 = call i8* @strrchr(i8* %75, i32 47) #7
  store i8* %call70, i8** %cp, align 8
  %76 = load i8*, i8** %cp, align 8
  %tobool71 = icmp ne i8* %76, null
  br i1 %tobool71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %if.then.69
  %77 = load i8*, i8** %cp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  br label %if.end.74

if.else.73:                                       ; preds = %if.then.69
  %78 = load i8*, i8** %utf8_filename, align 8
  store i8* %78, i8** %cp, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.73, %if.then.72
  %79 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  %80 = bitcast %struct._GtkWidget* %79 to %struct._GTypeInstance*
  %call75 = call i64 @gtk_file_chooser_get_type() #8
  %call76 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %80, i64 %call75)
  %81 = bitcast %struct._GTypeInstance* %call76 to %struct._GtkFileChooser*
  %82 = load i8*, i8** %cp, align 8
  call void @gtk_file_chooser_set_current_name(%struct._GtkFileChooser* %81, i8* %82)
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.74, %if.else
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.then.60
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.end.41
  %83 = load i8* (%struct._GtkWidget*)**, i8* (%struct._GtkWidget*)*** %func.addr, align 8
  store i8* (%struct._GtkWidget*)* @xg_get_file_name_from_chooser, i8* (%struct._GtkWidget*)** %83, align 8
  %84 = load %struct._GtkWidget*, %struct._GtkWidget** %filewin, align 8
  ret %struct._GtkWidget* %84
}

; Function Attrs: nounwind uwtable
define internal i32 @xg_dialog_run(%struct.frame* %f, %struct._GtkWidget* %w) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %w.addr = alloca %struct._GtkWidget*, align 8
  %count = alloca i64, align 8
  %dd = alloca %struct.xg_dialog_data, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %count, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_set_screen(%struct._GtkWidget* %0, %struct.frame* %1)
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %3 = bitcast %struct._GtkWidget* %2 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_window_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 %call1)
  %4 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkWindow*
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 12
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %8 = bitcast %struct._GtkWidget* %7 to %struct._GTypeInstance*
  %call3 = call i64 @gtk_window_get_type() #8
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %8, i64 %call3)
  %9 = bitcast %struct._GTypeInstance* %call4 to %struct._GtkWindow*
  call void @gtk_window_set_transient_for(%struct._GtkWindow* %4, %struct._GtkWindow* %9)
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %11 = bitcast %struct._GtkWidget* %10 to %struct._GTypeInstance*
  %call5 = call i64 @gtk_window_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %11, i64 %call5)
  %12 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkWindow*
  call void @gtk_window_set_destroy_with_parent(%struct._GtkWindow* %12, i32 1)
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %14 = bitcast %struct._GtkWidget* %13 to %struct._GTypeInstance*
  %call7 = call i64 @gtk_window_get_type() #8
  %call8 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %14, i64 %call7)
  %15 = bitcast %struct._GTypeInstance* %call8 to %struct._GtkWindow*
  call void @gtk_window_set_modal(%struct._GtkWindow* %15, i32 1)
  %call9 = call %struct._GMainLoop* @g_main_loop_new(%struct._GMainContext* null, i32 0)
  %loop = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 0
  store %struct._GMainLoop* %call9, %struct._GMainLoop** %loop, align 8
  %response = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 1
  store i32 -6, i32* %response, align 4
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %w10 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 2
  store %struct._GtkWidget* %16, %struct._GtkWidget** %w10, align 8
  %timerid = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 3
  store i32 0, i32* %timerid, align 4
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 80)
  %19 = bitcast %struct._GTypeInstance* %call11 to %struct._GObject*
  %20 = bitcast %struct._GObject* %19 to i8*
  %21 = bitcast %struct.xg_dialog_data* %dd to i8*
  %call12 = call i64 @g_signal_connect_data(i8* %20, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i32 0, i32 0), void ()* bitcast (void (%struct._GtkDialog*, i32, i8*)* @xg_dialog_response_cb to void ()*), i8* %21, void (i8*, %struct._GClosure*)* null, i32 0)
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %23 = bitcast %struct._GtkWidget* %22 to %struct._GTypeInstance*
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %23, i64 80)
  %24 = bitcast %struct._GTypeInstance* %call13 to %struct._GObject*
  %25 = bitcast %struct._GObject* %24 to i8*
  %call14 = call i64 @g_signal_connect_data(i8* %25, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), void ()* bitcast (i32 ()* @gtk_true to void ()*), i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  call void @gtk_widget_show(%struct._GtkWidget* %26)
  %27 = bitcast %struct.xg_dialog_data* %dd to i8*
  call void @record_unwind_protect_ptr(void (i8*)* @pop_down_dialog, i8* %27)
  %28 = bitcast %struct.xg_dialog_data* %dd to i8*
  %call15 = call i32 @xg_maybe_add_timer(i8* %28)
  %loop16 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 0
  %29 = load %struct._GMainLoop*, %struct._GMainLoop** %loop16, align 8
  call void @g_main_loop_run(%struct._GMainLoop* %29)
  %w17 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 2
  store %struct._GtkWidget* null, %struct._GtkWidget** %w17, align 8
  %30 = load i64, i64* %count, align 8
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  %call19 = call i64 @unbind_to(i64 %30, i64 %call18)
  %response20 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %dd, i32 0, i32 1
  %31 = load i32, i32* %response20, align 4
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define i64 @xg_get_font(%struct.frame* %f, i8* %default_name) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %default_name.addr = alloca i8*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %done = alloca i32, align 4
  %font = alloca i64, align 8
  %p = alloca i8*, align 8
  %ep = alloca i8*, align 8
  %font_name = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i8* %default_name, i8** %default_name.addr, align 8
  store i32 0, i32* %done, align 4
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %font, align 8
  %call1 = call %struct._GtkWidget* @gtk_font_selection_dialog_new(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i32 0, i32 0))
  store %struct._GtkWidget* %call1, %struct._GtkWidget** %w, align 8
  %0 = load i8*, i8** %default_name.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %default_name.addr, align 8
  %call2 = call i8* @strrchr(i8* %1, i32 45) #7
  store i8* %call2, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %tobool3 = icmp ne i8* %2, null
  br i1 %tobool3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %if.then
  %3 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 1
  store i8* %add.ptr, i8** %ep, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.4
  %4 = load i8*, i8** %ep, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call5 = call zeroext i1 @c_isdigit(i32 %conv)
  br i1 %call5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %ep, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %ep, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %ep, align 8
  %8 = load i8, i8* %7, align 1
  %conv6 = sext i8 %8 to i32
  %cmp = icmp eq i32 %conv6, 0
  br i1 %cmp, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %while.end
  %9 = load i8*, i8** %p, align 8
  store i8 32, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.8, %while.end
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  br label %if.end.13

if.else:                                          ; preds = %entry
  %10 = load i8*, i8** @x_last_font_name, align 8
  %tobool10 = icmp ne i8* %10, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.else
  %11 = load i8*, i8** @x_last_font_name, align 8
  store i8* %11, i8** %default_name.addr, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.else
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.end.9
  %12 = load i8*, i8** %default_name.addr, align 8
  %tobool14 = icmp ne i8* %12, null
  br i1 %tobool14, label %if.then.15, label %if.end.19

if.then.15:                                       ; preds = %if.end.13
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %14 = bitcast %struct._GtkWidget* %13 to %struct._GTypeInstance*
  %call16 = call i64 @gtk_font_selection_dialog_get_type() #8
  %call17 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %14, i64 %call16)
  %15 = bitcast %struct._GTypeInstance* %call17 to %struct._GtkFontSelectionDialog*
  %16 = load i8*, i8** %default_name.addr, align 8
  %call18 = call i32 @gtk_font_selection_dialog_set_font_name(%struct._GtkFontSelectionDialog* %15, i8* %16)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.15, %if.end.13
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %17, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15, i32 0, i32 0))
  %18 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %call20 = call i32 @xg_dialog_run(%struct.frame* %18, %struct._GtkWidget* %19)
  store i32 %call20, i32* %done, align 4
  %20 = load i32, i32* %done, align 4
  %cmp21 = icmp eq i32 %20, -5
  br i1 %cmp21, label %if.then.23, label %if.end.31

if.then.23:                                       ; preds = %if.end.19
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %22 = bitcast %struct._GtkWidget* %21 to %struct._GTypeInstance*
  %call24 = call i64 @gtk_font_selection_dialog_get_type() #8
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 %call24)
  %23 = bitcast %struct._GTypeInstance* %call25 to %struct._GtkFontSelectionDialog*
  %call26 = call i8* @gtk_font_selection_dialog_get_font_name(%struct._GtkFontSelectionDialog* %23)
  store i8* %call26, i8** %font_name, align 8
  %24 = load i8*, i8** %font_name, align 8
  %tobool27 = icmp ne i8* %24, null
  br i1 %tobool27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %if.then.23
  %25 = load i8*, i8** %font_name, align 8
  %call29 = call i64 @build_string(i8* %25)
  store i64 %call29, i64* %font, align 8
  %26 = load i8*, i8** @x_last_font_name, align 8
  call void @g_free(i8* %26)
  %27 = load i8*, i8** %font_name, align 8
  store i8* %27, i8** @x_last_font_name, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %if.then.23
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end.19
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %28)
  %29 = load i64, i64* %font, align 8
  ret i64 %29
}

declare %struct._GtkWidget* @gtk_font_selection_dialog_new(i8*) #1

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #2

declare zeroext i1 @c_isdigit(i32) #1

declare i32 @gtk_font_selection_dialog_set_font_name(%struct._GtkFontSelectionDialog*, i8*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_font_selection_dialog_get_type() #3

declare i8* @gtk_font_selection_dialog_get_font_name(%struct._GtkFontSelectionDialog*) #1

declare i64 @build_string(i8*) #1

declare void @g_free(i8*) #1

; Function Attrs: nounwind uwtable
define void @xg_mark_data() #0 {
entry:
  %iter = alloca %struct.xg_list_node_*, align 8
  %rest = alloca i64, align 8
  %frame = alloca i64, align 8
  %cb_data = alloca %struct.xg_menu_item_cb_data_*, align 8
  %f = alloca %struct.frame*, align 8
  %tbinfo = alloca %struct.xg_frame_tb_info*, align 8
  %0 = load %struct.xg_list_node_*, %struct.xg_list_node_** getelementptr inbounds (%struct.xg_list_node_, %struct.xg_list_node_* @xg_menu_cb_list, i32 0, i32 1), align 8
  store %struct.xg_list_node_* %0, %struct.xg_list_node_** %iter, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.xg_list_node_*, %struct.xg_list_node_** %iter, align 8
  %tobool = icmp ne %struct.xg_list_node_* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.xg_list_node_*, %struct.xg_list_node_** %iter, align 8
  %3 = bitcast %struct.xg_list_node_* %2 to %struct.xg_menu_cb_data_*
  %menu_bar_vector = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %3, i32 0, i32 2
  %4 = load i64, i64* %menu_bar_vector, align 8
  call void @mark_object(i64 %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %struct.xg_list_node_*, %struct.xg_list_node_** %iter, align 8
  %next = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %5, i32 0, i32 1
  %6 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next, align 8
  store %struct.xg_list_node_* %6, %struct.xg_list_node_** %iter, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.xg_list_node_*, %struct.xg_list_node_** getelementptr inbounds (%struct.xg_list_node_, %struct.xg_list_node_* @xg_menu_item_cb_list, i32 0, i32 1), align 8
  store %struct.xg_list_node_* %7, %struct.xg_list_node_** %iter, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.5, %for.end
  %8 = load %struct.xg_list_node_*, %struct.xg_list_node_** %iter, align 8
  %tobool2 = icmp ne %struct.xg_list_node_* %8, null
  br i1 %tobool2, label %for.body.3, label %for.end.7

for.body.3:                                       ; preds = %for.cond.1
  %9 = load %struct.xg_list_node_*, %struct.xg_list_node_** %iter, align 8
  %10 = bitcast %struct.xg_list_node_* %9 to %struct.xg_menu_item_cb_data_*
  store %struct.xg_menu_item_cb_data_* %10, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %11 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %help = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %11, i32 0, i32 2
  %12 = load i64, i64* %help, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %12, %call
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %for.body.3
  %13 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %help4 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %13, i32 0, i32 2
  %14 = load i64, i64* %help4, align 8
  call void @mark_object(i64 %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.3
  br label %for.inc.5

for.inc.5:                                        ; preds = %if.end
  %15 = load %struct.xg_list_node_*, %struct.xg_list_node_** %iter, align 8
  %next6 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %15, i32 0, i32 1
  %16 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next6, align 8
  store %struct.xg_list_node_* %16, %struct.xg_list_node_** %iter, align 8
  br label %for.cond.1

for.end.7:                                        ; preds = %for.cond.1
  %17 = load i64, i64* @Vframe_list, align 8
  store i64 %17, i64* %rest, align 8
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.26, %for.end.7
  %18 = load i64, i64* %rest, align 8
  %and = and i64 %18, 7
  %conv = trunc i64 %and to i32
  %cmp9 = icmp eq i32 %conv, 3
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.8
  %19 = load i64, i64* %rest, align 8
  %sub = sub nsw i64 %19, 3
  %20 = inttoptr i64 %sub to i8*
  %21 = bitcast i8* %20 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %21, i32 0, i32 0
  %22 = load i64, i64* %car, align 8
  store i64 %22, i64* %frame, align 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.8
  %23 = phi i1 [ false, %for.cond.8 ], [ true, %land.rhs ]
  br i1 %23, label %for.body.11, label %for.end.28

for.body.11:                                      ; preds = %land.end
  %24 = load i64, i64* %frame, align 8
  %sub12 = sub nsw i64 %24, 5
  %25 = inttoptr i64 %sub12 to i8*
  %26 = bitcast i8* %25 to %struct.frame*
  store %struct.frame* %26, %struct.frame** %f, align 8
  %27 = load %struct.frame*, %struct.frame** %f, align 8
  %output_method = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 26
  %28 = bitcast i48* %output_method to i64*
  %bf.load = load i64, i64* %28, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.clear = and i64 %bf.lshr, 7
  %bf.cast = trunc i64 %bf.clear to i32
  %cmp13 = icmp eq i32 %bf.cast, 2
  br i1 %cmp13, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %for.body.11
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %30 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 12
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %tobool15 = icmp ne %struct._GtkWidget* %31, null
  br i1 %tobool15, label %if.then.16, label %if.end.25

if.then.16:                                       ; preds = %land.lhs.true
  %32 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data17 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 62
  %x18 = bitcast %union.output_data* %output_data17 to %struct.x_output**
  %33 = load %struct.x_output*, %struct.x_output** %x18, align 8
  %widget19 = getelementptr inbounds %struct.x_output, %struct.x_output* %33, i32 0, i32 12
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %widget19, align 8
  %35 = bitcast %struct._GtkWidget* %34 to %struct._GTypeInstance*
  %call20 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %35, i64 80)
  %36 = bitcast %struct._GTypeInstance* %call20 to %struct._GObject*
  %call21 = call i8* @g_object_get_data(%struct._GObject* %36, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0))
  %37 = bitcast i8* %call21 to %struct.xg_frame_tb_info*
  store %struct.xg_frame_tb_info* %37, %struct.xg_frame_tb_info** %tbinfo, align 8
  %38 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %tobool22 = icmp ne %struct.xg_frame_tb_info* %38, null
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.16
  %39 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %last_tool_bar = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %39, i32 0, i32 0
  %40 = load i64, i64* %last_tool_bar, align 8
  call void @mark_object(i64 %40)
  %41 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %style = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %41, i32 0, i32 1
  %42 = load i64, i64* %style, align 8
  call void @mark_object(i64 %42)
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.then.16
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %land.lhs.true, %for.body.11
  br label %for.inc.26

for.inc.26:                                       ; preds = %if.end.25
  %43 = load i64, i64* %rest, align 8
  %sub27 = sub nsw i64 %43, 3
  %44 = inttoptr i64 %sub27 to i8*
  %45 = bitcast i8* %44 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %45, i32 0, i32 1
  %cdr = bitcast %union.anon.13* %u to i64*
  %46 = load i64, i64* %cdr, align 8
  store i64 %46, i64* %rest, align 8
  br label %for.cond.8

for.end.28:                                       ; preds = %land.end
  ret void
}

declare void @mark_object(i64) #1

; Function Attrs: nounwind uwtable
define %struct._GtkWidget* @xg_create_widget(i8* %type, i8* %name, %struct.frame* %f, %struct._widget_value* %val, void ()* %select_cb, void ()* %deactivate_cb, void ()* %highlight_cb) #0 {
entry:
  %type.addr = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %val.addr = alloca %struct._widget_value*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %deactivate_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %menu_bar_p = alloca i8, align 1
  %pop_up_p = alloca i8, align 1
  store i8* %type, i8** %type.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %deactivate_cb, void ()** %deactivate_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  store %struct._GtkWidget* null, %struct._GtkWidget** %w, align 8
  %0 = load i8*, i8** %type.addr, align 8
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0)) #7
  %cmp = icmp eq i32 %call, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %menu_bar_p, align 1
  %1 = load i8*, i8** %type.addr, align 8
  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0)) #7
  %cmp2 = icmp eq i32 %call1, 0
  %frombool3 = zext i1 %cmp2 to i8
  store i8 %frombool3, i8* %pop_up_p, align 1
  %2 = load i8*, i8** %type.addr, align 8
  %call4 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0)) #7
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %4 = load void ()*, void ()** %select_cb.addr, align 8
  %5 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %call6 = call %struct._GtkWidget* @create_dialog(%struct._widget_value* %3, void ()* %4, void ()* %5)
  store %struct._GtkWidget* %call6, %struct._GtkWidget** %w, align 8
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_set_screen(%struct._GtkWidget* %6, %struct.frame* %7)
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %9 = bitcast %struct._GtkWidget* %8 to %struct._GTypeInstance*
  %call7 = call i64 @gtk_window_get_type() #8
  %call8 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %9, i64 %call7)
  %10 = bitcast %struct._GTypeInstance* %call8 to %struct._GtkWindow*
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 12
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %14 = bitcast %struct._GtkWidget* %13 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_window_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %14, i64 %call9)
  %15 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkWindow*
  call void @gtk_window_set_transient_for(%struct._GtkWindow* %10, %struct._GtkWindow* %15)
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %17 = bitcast %struct._GtkWidget* %16 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_window_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %17, i64 %call11)
  %18 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkWindow*
  call void @gtk_window_set_destroy_with_parent(%struct._GtkWindow* %18, i32 1)
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %19, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0))
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  %call13 = call i64 @gtk_window_get_type() #8
  %call14 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 %call13)
  %22 = bitcast %struct._GTypeInstance* %call14 to %struct._GtkWindow*
  call void @gtk_window_set_modal(%struct._GtkWindow* %22, i32 1)
  br label %if.end.27

if.else:                                          ; preds = %entry
  %23 = load i8, i8* %menu_bar_p, align 1
  %tobool = trunc i8 %23 to i1
  br i1 %tobool, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %24 = load i8, i8* %pop_up_p, align 1
  %tobool15 = trunc i8 %24 to i1
  br i1 %tobool15, label %if.then.16, label %if.else.24

if.then.16:                                       ; preds = %lor.lhs.false, %if.else
  %25 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %25, i32 0, i32 10
  %26 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %28 = load void ()*, void ()** %select_cb.addr, align 8
  %29 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %30 = load void ()*, void ()** %highlight_cb.addr, align 8
  %31 = load i8, i8* %pop_up_p, align 1
  %tobool17 = trunc i8 %31 to i1
  %32 = load i8, i8* %menu_bar_p, align 1
  %tobool18 = trunc i8 %32 to i1
  %33 = load i8*, i8** %name.addr, align 8
  %call19 = call %struct._GtkWidget* @create_menus(%struct._widget_value* %26, %struct.frame* %27, void ()* %28, void ()* %29, void ()* %30, i1 zeroext %tobool17, i1 zeroext %tobool18, %struct._GtkWidget* null, %struct.xg_menu_cb_data_* null, i8* %33)
  store %struct._GtkWidget* %call19, %struct._GtkWidget** %w, align 8
  %34 = load i8, i8* %pop_up_p, align 1
  %tobool20 = trunc i8 %34 to i1
  br i1 %tobool20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %if.then.16
  %35 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_realize(%struct._GtkWidget* %35)
  %36 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %37, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %38 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %38, i32 0, i32 44
  %39 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %xg_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %39, i32 0, i32 20
  %40 = load %struct._GdkCursor*, %struct._GdkCursor** %xg_cursor, align 8
  call void @xg_set_cursor(%struct._GtkWidget* %36, %struct._GdkCursor* %40)
  br label %if.end

if.end:                                           ; preds = %if.then.21, %if.then.16
  br label %if.end.26

if.else.24:                                       ; preds = %lor.lhs.false
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %42 = load i8*, i8** %type.addr, align 8
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.20, i32 0, i32 0), i8* %42)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.end
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.then
  %43 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  ret %struct._GtkWidget* %43
}

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @create_dialog(%struct._widget_value* %wv, void ()* %select_cb, void ()* %deactivate_cb) #0 {
entry:
  %wv.addr = alloca %struct._widget_value*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %deactivate_cb.addr = alloca void ()*, align 8
  %title = alloca i8*, align 8
  %total_buttons = alloca i32, align 4
  %right_buttons = alloca i32, align 4
  %left_buttons = alloca i32, align 4
  %button_nr = alloca i32, align 4
  %button_spacing = alloca i32, align 4
  %wdialog = alloca %struct._GtkWidget*, align 8
  %wd = alloca %struct._GtkDialog*, align 8
  %item = alloca %struct._widget_value*, align 8
  %whbox_down = alloca %struct._GtkWidget*, align 8
  %make_two_rows = alloca i8, align 1
  %cur_box = alloca %struct._GtkBox*, align 8
  %wvbox = alloca %struct._GtkWidget*, align 8
  %whbox_up = alloca %struct._GtkWidget*, align 8
  %utf8_label = alloca i8*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %req = alloca %struct._GtkRequisition, align 4
  %wvbox54 = alloca %struct._GtkBox*, align 8
  store %struct._widget_value* %wv, %struct._widget_value** %wv.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %deactivate_cb, void ()** %deactivate_cb.addr, align 8
  %0 = load %struct._widget_value*, %struct._widget_value** %wv.addr, align 8
  %name = getelementptr inbounds %struct._widget_value, %struct._widget_value* %0, i32 0, i32 1
  %1 = load i8*, i8** %name, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %call = call i8* @get_dialog_title(i8 signext %2)
  store i8* %call, i8** %title, align 8
  %3 = load %struct._widget_value*, %struct._widget_value** %wv.addr, align 8
  %name1 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %3, i32 0, i32 1
  %4 = load i8*, i8** %name1, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx2, align 1
  %conv = sext i8 %5 to i32
  %sub = sub nsw i32 %conv, 48
  store i32 %sub, i32* %total_buttons, align 4
  %6 = load %struct._widget_value*, %struct._widget_value** %wv.addr, align 8
  %name3 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %6, i32 0, i32 1
  %7 = load i8*, i8** %name3, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 4
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %8 to i32
  %sub6 = sub nsw i32 %conv5, 48
  store i32 %sub6, i32* %right_buttons, align 4
  store i32 0, i32* %button_nr, align 4
  store i32 10, i32* %button_spacing, align 4
  %call7 = call %struct._GtkWidget* @gtk_dialog_new()
  store %struct._GtkWidget* %call7, %struct._GtkWidget** %wdialog, align 8
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call8 = call i64 @gtk_dialog_get_type() #8
  %call9 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call8)
  %11 = bitcast %struct._GTypeInstance* %call9 to %struct._GtkDialog*
  store %struct._GtkDialog* %11, %struct._GtkDialog** %wd, align 8
  %12 = load i32, i32* %total_buttons, align 4
  %cmp = icmp sgt i32 %12, 4
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %make_two_rows, align 1
  %13 = load %struct._GtkDialog*, %struct._GtkDialog** %wd, align 8
  %call11 = call %struct._GtkWidget* @gtk_dialog_get_action_area(%struct._GtkDialog* %13)
  %14 = bitcast %struct._GtkWidget* %call11 to %struct._GTypeInstance*
  %call12 = call i64 @gtk_box_get_type() #8
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %14, i64 %call12)
  %15 = bitcast %struct._GTypeInstance* %call13 to %struct._GtkBox*
  store %struct._GtkBox* %15, %struct._GtkBox** %cur_box, align 8
  %16 = load i32, i32* %right_buttons, align 4
  %cmp14 = icmp eq i32 %16, 0
  br i1 %cmp14, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load i32, i32* %total_buttons, align 4
  %div = sdiv i32 %17, 2
  store i32 %div, i32* %right_buttons, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load i32, i32* %total_buttons, align 4
  %19 = load i32, i32* %right_buttons, align 4
  %sub16 = sub nsw i32 %18, %19
  store i32 %sub16, i32* %left_buttons, align 4
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_window_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 %call17)
  %22 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkWindow*
  %23 = load i8*, i8** %title, align 8
  call void @gtk_window_set_title(%struct._GtkWindow* %22, i8* %23)
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0))
  %25 = load i8, i8* %make_two_rows, align 1
  %tobool = trunc i8 %25 to i1
  br i1 %tobool, label %if.then.19, label %if.end.35

if.then.19:                                       ; preds = %if.end
  %26 = load i32, i32* %button_spacing, align 4
  %call20 = call %struct._GtkWidget* @gtk_vbox_new(i32 0, i32 %26)
  store %struct._GtkWidget* %call20, %struct._GtkWidget** %wvbox, align 8
  %call21 = call %struct._GtkWidget* @gtk_hbox_new(i32 0, i32 0)
  store %struct._GtkWidget* %call21, %struct._GtkWidget** %whbox_up, align 8
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call22 = call i64 @gtk_box_get_type() #8
  %call23 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call22)
  %29 = bitcast %struct._GTypeInstance* %call23 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %29, i32 1)
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox_up, align 8
  %31 = bitcast %struct._GtkWidget* %30 to %struct._GTypeInstance*
  %call24 = call i64 @gtk_box_get_type() #8
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %31, i64 %call24)
  %32 = bitcast %struct._GTypeInstance* %call25 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %32, i32 0)
  %call26 = call %struct._GtkWidget* @gtk_hbox_new(i32 0, i32 0)
  store %struct._GtkWidget* %call26, %struct._GtkWidget** %whbox_down, align 8
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox_down, align 8
  %34 = bitcast %struct._GtkWidget* %33 to %struct._GTypeInstance*
  %call27 = call i64 @gtk_box_get_type() #8
  %call28 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %34, i64 %call27)
  %35 = bitcast %struct._GTypeInstance* %call28 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %35, i32 0)
  %36 = load %struct._GtkBox*, %struct._GtkBox** %cur_box, align 8
  %37 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %36, %struct._GtkWidget* %37, i32 0, i32 0, i32 0)
  %38 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %39 = bitcast %struct._GtkWidget* %38 to %struct._GTypeInstance*
  %call29 = call i64 @gtk_box_get_type() #8
  %call30 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %39, i64 %call29)
  %40 = bitcast %struct._GTypeInstance* %call30 to %struct._GtkBox*
  %41 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox_up, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %40, %struct._GtkWidget* %41, i32 0, i32 0, i32 0)
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %wvbox, align 8
  %43 = bitcast %struct._GtkWidget* %42 to %struct._GTypeInstance*
  %call31 = call i64 @gtk_box_get_type() #8
  %call32 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %43, i64 %call31)
  %44 = bitcast %struct._GTypeInstance* %call32 to %struct._GtkBox*
  %45 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox_down, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %44, %struct._GtkWidget* %45, i32 0, i32 0, i32 0)
  %46 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox_up, align 8
  %47 = bitcast %struct._GtkWidget* %46 to %struct._GTypeInstance*
  %call33 = call i64 @gtk_box_get_type() #8
  %call34 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %47, i64 %call33)
  %48 = bitcast %struct._GTypeInstance* %call34 to %struct._GtkBox*
  store %struct._GtkBox* %48, %struct._GtkBox** %cur_box, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.19, %if.end
  %49 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  %50 = bitcast %struct._GtkWidget* %49 to %struct._GTypeInstance*
  %call36 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %50, i64 80)
  %51 = bitcast %struct._GTypeInstance* %call36 to %struct._GObject*
  %52 = bitcast %struct._GObject* %51 to i8*
  %call37 = call i64 @g_signal_connect_data(i8* %52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %union._GdkEvent*, i8*)* @dialog_delete_callback to void ()*), i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  %53 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %tobool38 = icmp ne void ()* %53, null
  br i1 %tobool38, label %if.then.39, label %if.end.44

if.then.39:                                       ; preds = %if.end.35
  %54 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  %55 = bitcast %struct._GtkWidget* %54 to %struct._GTypeInstance*
  %call40 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %55, i64 80)
  %56 = bitcast %struct._GTypeInstance* %call40 to %struct._GObject*
  %57 = bitcast %struct._GObject* %56 to i8*
  %58 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %call41 = call i64 @g_signal_connect_data(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), void ()* %58, i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  %59 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  %60 = bitcast %struct._GtkWidget* %59 to %struct._GTypeInstance*
  %call42 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %60, i64 80)
  %61 = bitcast %struct._GTypeInstance* %call42 to %struct._GObject*
  %62 = bitcast %struct._GObject* %61 to i8*
  %63 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %call43 = call i64 @g_signal_connect_data(i8* %62, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i32 0, i32 0), void ()* %63, i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.39, %if.end.35
  %64 = load %struct._widget_value*, %struct._widget_value** %wv.addr, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %64, i32 0, i32 10
  %65 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  store %struct._widget_value* %65, %struct._widget_value** %item, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.44
  %66 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %tobool45 = icmp ne %struct._widget_value* %66, null
  br i1 %tobool45, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %67 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %value = getelementptr inbounds %struct._widget_value, %struct._widget_value* %67, i32 0, i32 2
  %68 = load i8*, i8** %value, align 8
  %call46 = call i8* @get_utf8_string(i8* %68)
  store i8* %call46, i8** %utf8_label, align 8
  %69 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %name47 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %69, i32 0, i32 1
  %70 = load i8*, i8** %name47, align 8
  %tobool48 = icmp ne i8* %70, null
  br i1 %tobool48, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %71 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %name49 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %71, i32 0, i32 1
  %72 = load i8*, i8** %name49, align 8
  %call50 = call i32 @strcmp(i8* %72, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.56, i32 0, i32 0)) #7
  %cmp51 = icmp eq i32 %call50, 0
  br i1 %cmp51, label %if.then.53, label %if.else

if.then.53:                                       ; preds = %land.lhs.true
  %73 = load %struct._GtkDialog*, %struct._GtkDialog** %wd, align 8
  %call55 = call %struct._GtkWidget* @gtk_dialog_get_content_area(%struct._GtkDialog* %73)
  %74 = bitcast %struct._GtkWidget* %call55 to %struct._GTypeInstance*
  %call56 = call i64 @gtk_box_get_type() #8
  %call57 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %74, i64 %call56)
  %75 = bitcast %struct._GTypeInstance* %call57 to %struct._GtkBox*
  store %struct._GtkBox* %75, %struct._GtkBox** %wvbox54, align 8
  %76 = load i8*, i8** %utf8_label, align 8
  %call58 = call %struct._GtkWidget* @gtk_label_new(i8* %76)
  store %struct._GtkWidget* %call58, %struct._GtkWidget** %w, align 8
  %77 = load %struct._GtkBox*, %struct._GtkBox** %wvbox54, align 8
  %call59 = call %struct._GtkWidget* @gtk_label_new(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0))
  call void @gtk_box_pack_start(%struct._GtkBox* %77, %struct._GtkWidget* %call59, i32 0, i32 0, i32 0)
  %78 = load %struct._GtkBox*, %struct._GtkBox** %wvbox54, align 8
  %79 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %78, %struct._GtkWidget* %79, i32 1, i32 1, i32 0)
  %80 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %81 = bitcast %struct._GtkWidget* %80 to %struct._GTypeInstance*
  %call60 = call i64 @gtk_misc_get_type() #8
  %call61 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %81, i64 %call60)
  %82 = bitcast %struct._GTypeInstance* %call61 to %struct._GtkMisc*
  call void @gtk_misc_set_alignment(%struct._GtkMisc* %82, float 0x3FB99999A0000000, float 5.000000e-01)
  %83 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_realize(%struct._GtkWidget* %83)
  %84 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_size_request(%struct._GtkWidget* %84, %struct._GtkRequisition* %req)
  %85 = load %struct._GtkBox*, %struct._GtkBox** %wvbox54, align 8
  %height = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %86 = load i32, i32* %height, align 4
  call void @gtk_box_set_spacing(%struct._GtkBox* %85, i32 %86)
  %87 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %value62 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %87, i32 0, i32 2
  %88 = load i8*, i8** %value62, align 8
  %tobool63 = icmp ne i8* %88, null
  br i1 %tobool63, label %land.lhs.true.64, label %if.end.75

land.lhs.true.64:                                 ; preds = %if.then.53
  %89 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %value65 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %89, i32 0, i32 2
  %90 = load i8*, i8** %value65, align 8
  %call66 = call i64 @strlen(i8* %90) #7
  %cmp67 = icmp ugt i64 %call66, 0
  br i1 %cmp67, label %if.then.69, label %if.end.75

if.then.69:                                       ; preds = %land.lhs.true.64
  %width = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 0
  %91 = load i32, i32* %width, align 4
  %mul = mul nsw i32 2, %91
  %conv70 = sext i32 %mul to i64
  %92 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %value71 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %92, i32 0, i32 2
  %93 = load i8*, i8** %value71, align 8
  %call72 = call i64 @strlen(i8* %93) #7
  %div73 = udiv i64 %conv70, %call72
  %conv74 = trunc i64 %div73 to i32
  store i32 %conv74, i32* %button_spacing, align 4
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.69, %land.lhs.true.64, %if.then.53
  %94 = load i32, i32* %button_spacing, align 4
  %cmp76 = icmp slt i32 %94, 10
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.75
  store i32 10, i32* %button_spacing, align 4
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.78, %if.end.75
  br label %if.end.98

if.else:                                          ; preds = %land.lhs.true, %for.body
  %95 = load i8*, i8** %utf8_label, align 8
  %call80 = call %struct._GtkWidget* @gtk_button_new_with_label(i8* %95)
  store %struct._GtkWidget* %call80, %struct._GtkWidget** %w, align 8
  %96 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %enabled = getelementptr inbounds %struct._widget_value, %struct._widget_value* %96, i32 0, i32 6
  %97 = load i8, i8* %enabled, align 1
  %tobool81 = trunc i8 %97 to i1
  br i1 %tobool81, label %if.end.83, label %if.then.82

if.then.82:                                       ; preds = %if.else
  %98 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %98, i32 0)
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.82, %if.else
  %99 = load void ()*, void ()** %select_cb.addr, align 8
  %tobool84 = icmp ne void ()* %99, null
  br i1 %tobool84, label %if.then.85, label %if.end.88

if.then.85:                                       ; preds = %if.end.83
  %100 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %101 = bitcast %struct._GtkWidget* %100 to %struct._GTypeInstance*
  %call86 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %101, i64 80)
  %102 = bitcast %struct._GTypeInstance* %call86 to %struct._GObject*
  %103 = bitcast %struct._GObject* %102 to i8*
  %104 = load void ()*, void ()** %select_cb.addr, align 8
  %105 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %call_data = getelementptr inbounds %struct._widget_value, %struct._widget_value* %105, i32 0, i32 11
  %106 = load i8*, i8** %call_data, align 8
  %call87 = call i64 @g_signal_connect_data(i8* %103, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i32 0, i32 0), void ()* %104, i8* %106, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.85, %if.end.83
  %107 = load %struct._GtkBox*, %struct._GtkBox** %cur_box, align 8
  %108 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %109 = load i32, i32* %button_spacing, align 4
  call void @gtk_box_pack_start(%struct._GtkBox* %107, %struct._GtkWidget* %108, i32 1, i32 1, i32 %109)
  %110 = load i32, i32* %button_nr, align 4
  %inc = add nsw i32 %110, 1
  store i32 %inc, i32* %button_nr, align 4
  %111 = load i32, i32* %left_buttons, align 4
  %cmp89 = icmp eq i32 %inc, %111
  br i1 %cmp89, label %if.then.91, label %if.end.97

if.then.91:                                       ; preds = %if.end.88
  %112 = load i8, i8* %make_two_rows, align 1
  %tobool92 = trunc i8 %112 to i1
  br i1 %tobool92, label %if.then.93, label %if.end.96

if.then.93:                                       ; preds = %if.then.91
  %113 = load %struct._GtkWidget*, %struct._GtkWidget** %whbox_down, align 8
  %114 = bitcast %struct._GtkWidget* %113 to %struct._GTypeInstance*
  %call94 = call i64 @gtk_box_get_type() #8
  %call95 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %114, i64 %call94)
  %115 = bitcast %struct._GTypeInstance* %call95 to %struct._GtkBox*
  store %struct._GtkBox* %115, %struct._GtkBox** %cur_box, align 8
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.93, %if.then.91
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.end.88
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.end.79
  %116 = load i8*, i8** %utf8_label, align 8
  %tobool99 = icmp ne i8* %116, null
  br i1 %tobool99, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %if.end.98
  %117 = load i8*, i8** %utf8_label, align 8
  call void @g_free(i8* %117)
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.100, %if.end.98
  br label %for.inc

for.inc:                                          ; preds = %if.end.101
  %118 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %next = getelementptr inbounds %struct._widget_value, %struct._widget_value* %118, i32 0, i32 12
  %119 = load %struct._widget_value*, %struct._widget_value** %next, align 8
  store %struct._widget_value* %119, %struct._widget_value** %item, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %120 = load %struct._GtkWidget*, %struct._GtkWidget** %wdialog, align 8
  ret %struct._GtkWidget* %120
}

declare void @gtk_window_set_transient_for(%struct._GtkWindow*, %struct._GtkWindow*) #1

declare void @gtk_window_set_destroy_with_parent(%struct._GtkWindow*, i32) #1

declare void @gtk_window_set_modal(%struct._GtkWindow*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @create_menus(%struct._widget_value* %data, %struct.frame* %f, void ()* %select_cb, void ()* %deactivate_cb, void ()* %highlight_cb, i1 zeroext %pop_up_p, i1 zeroext %menu_bar_p, %struct._GtkWidget* %topmenu, %struct.xg_menu_cb_data_* %cl_data, i8* %name) #0 {
entry:
  %data.addr = alloca %struct._widget_value*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %deactivate_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %pop_up_p.addr = alloca i8, align 1
  %menu_bar_p.addr = alloca i8, align 1
  %topmenu.addr = alloca %struct._GtkWidget*, align 8
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %name.addr = alloca i8*, align 8
  %item = alloca %struct._widget_value*, align 8
  %wmenu = alloca %struct._GtkWidget*, align 8
  %group = alloca %struct._GSList*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %utf8_label = alloca i8*, align 8
  %submenu = alloca %struct._GtkWidget*, align 8
  store %struct._widget_value* %data, %struct._widget_value** %data.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %deactivate_cb, void ()** %deactivate_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  %frombool = zext i1 %pop_up_p to i8
  store i8 %frombool, i8* %pop_up_p.addr, align 1
  %frombool1 = zext i1 %menu_bar_p to i8
  store i8 %frombool1, i8* %menu_bar_p.addr, align 1
  store %struct._GtkWidget* %topmenu, %struct._GtkWidget** %topmenu.addr, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %topmenu.addr, align 8
  store %struct._GtkWidget* %0, %struct._GtkWidget** %wmenu, align 8
  store %struct._GSList* null, %struct._GSList** %group, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %topmenu.addr, align 8
  %tobool = icmp ne %struct._GtkWidget* %1, null
  br i1 %tobool, label %if.end.21, label %if.then

if.then:                                          ; preds = %entry
  %2 = load i8, i8* %menu_bar_p.addr, align 1
  %tobool2 = trunc i8 %2 to i1
  br i1 %tobool2, label %if.else, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %call = call %struct._GtkWidget* @gtk_menu_new()
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wmenu, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_set_screen(%struct._GtkWidget* %3, %struct.frame* %4)
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %6 = bitcast %struct._GtkWidget* %5 to %struct._GTypeInstance*
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 80)
  %7 = bitcast %struct._GTypeInstance* %call4 to %struct._GObject*
  %8 = bitcast %struct._GObject* %7 to i8*
  %call5 = call i64 @g_signal_connect_data(i8* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.62, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventCrossing*, i8*)* @menuitem_highlight_callback to void ()*), i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 80)
  %11 = bitcast %struct._GTypeInstance* %call6 to %struct._GObject*
  %12 = bitcast %struct._GObject* %11 to i8*
  %call7 = call i64 @g_signal_connect_data(i8* %12, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.63, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventCrossing*, i8*)* @menuitem_highlight_callback to void ()*), i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end

if.else:                                          ; preds = %if.then
  %call8 = call %struct._GtkWidget* @gtk_menu_bar_new()
  store %struct._GtkWidget* %call8, %struct._GtkWidget** %wmenu, align 8
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  call void @gtk_widget_set_size_request(%struct._GtkWidget* %13, i32 1, i32 -1)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  %14 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %15 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %16 = load void ()*, void ()** %highlight_cb.addr, align 8
  %call9 = call %struct.xg_menu_cb_data_* @make_cl_data(%struct.xg_menu_cb_data_* %14, %struct.frame* %15, void ()* %16)
  store %struct.xg_menu_cb_data_* %call9, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 80)
  %19 = bitcast %struct._GTypeInstance* %call10 to %struct._GObject*
  %20 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %21 = bitcast %struct.xg_menu_cb_data_* %20 to i8*
  call void @g_object_set_data(%struct._GObject* %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* %21)
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %23 = bitcast %struct._GtkWidget* %22 to %struct._GTypeInstance*
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %23, i64 80)
  %24 = bitcast %struct._GTypeInstance* %call11 to %struct._GObject*
  %25 = bitcast %struct._GObject* %24 to i8*
  %26 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %27 = bitcast %struct.xg_menu_cb_data_* %26 to i8*
  %call12 = call i64 @g_signal_connect_data(i8* %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @menu_destroy_callback to void ()*), i8* %27, void (i8*, %struct._GClosure*)* null, i32 0)
  %28 = load i8*, i8** %name.addr, align 8
  %tobool13 = icmp ne i8* %28, null
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %30 = load i8*, i8** %name.addr, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %29, i8* %30)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.end
  %31 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %tobool16 = icmp ne void ()* %31, null
  br i1 %tobool16, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %if.end.15
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %33 = bitcast %struct._GtkWidget* %32 to %struct._GTypeInstance*
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %33, i64 80)
  %34 = bitcast %struct._GTypeInstance* %call18 to %struct._GObject*
  %35 = bitcast %struct._GObject* %34 to i8*
  %36 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %call19 = call i64 @g_signal_connect_data(i8* %35, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.64, i32 0, i32 0), void ()* %36, i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %if.end.15
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %entry
  %37 = load %struct._widget_value*, %struct._widget_value** %data.addr, align 8
  store %struct._widget_value* %37, %struct._widget_value** %item, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.21
  %38 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %tobool22 = icmp ne %struct._widget_value* %38, null
  br i1 %tobool22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load i8, i8* %pop_up_p.addr, align 1
  %tobool23 = trunc i8 %39 to i1
  br i1 %tobool23, label %land.lhs.true, label %if.else.37

land.lhs.true:                                    ; preds = %for.body
  %40 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %40, i32 0, i32 10
  %41 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  %tobool24 = icmp ne %struct._widget_value* %41, null
  br i1 %tobool24, label %if.else.37, label %land.lhs.true.25

land.lhs.true.25:                                 ; preds = %land.lhs.true
  %42 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %call_data = getelementptr inbounds %struct._widget_value, %struct._widget_value* %42, i32 0, i32 11
  %43 = load i8*, i8** %call_data, align 8
  %tobool26 = icmp ne i8* %43, null
  br i1 %tobool26, label %if.else.37, label %land.lhs.true.27

land.lhs.true.27:                                 ; preds = %land.lhs.true.25
  %44 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %name28 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %44, i32 0, i32 1
  %45 = load i8*, i8** %name28, align 8
  %call29 = call zeroext i1 @menu_separator_name_p(i8* %45)
  br i1 %call29, label %if.else.37, label %if.then.30

if.then.30:                                       ; preds = %land.lhs.true.27
  store %struct._GSList* null, %struct._GSList** %group, align 8
  %46 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %name31 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %46, i32 0, i32 1
  %47 = load i8*, i8** %name31, align 8
  %call32 = call i8* @get_utf8_string(i8* %47)
  store i8* %call32, i8** %utf8_label, align 8
  %48 = load i8*, i8** %utf8_label, align 8
  %call33 = call %struct._GtkWidget* @gtk_menu_item_new_with_label(i8* %48)
  store %struct._GtkWidget* %call33, %struct._GtkWidget** %w, align 8
  %49 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %49, i32 0)
  %50 = load i8*, i8** %utf8_label, align 8
  %tobool34 = icmp ne i8* %50, null
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.then.30
  %51 = load i8*, i8** %utf8_label, align 8
  call void @g_free(i8* %51)
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %if.then.30
  br label %if.end.56

if.else.37:                                       ; preds = %land.lhs.true.27, %land.lhs.true.25, %land.lhs.true, %for.body
  %52 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %name38 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %52, i32 0, i32 1
  %53 = load i8*, i8** %name38, align 8
  %call39 = call zeroext i1 @menu_separator_name_p(i8* %53)
  br i1 %call39, label %if.then.40, label %if.else.42

if.then.40:                                       ; preds = %if.else.37
  store %struct._GSList* null, %struct._GSList** %group, align 8
  %call41 = call %struct._GtkWidget* @gtk_separator_menu_item_new()
  store %struct._GtkWidget* %call41, %struct._GtkWidget** %w, align 8
  br label %if.end.55

if.else.42:                                       ; preds = %if.else.37
  %54 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %56 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %contents43 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %56, i32 0, i32 10
  %57 = load %struct._widget_value*, %struct._widget_value** %contents43, align 8
  %tobool44 = icmp ne %struct._widget_value* %57, null
  br i1 %tobool44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else.42
  br label %cond.end

cond.false:                                       ; preds = %if.else.42
  %58 = load void ()*, void ()** %select_cb.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi void ()* [ null, %cond.true ], [ %58, %cond.false ]
  %59 = load void ()*, void ()** %highlight_cb.addr, align 8
  %60 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call45 = call %struct._GtkWidget* @xg_create_one_menuitem(%struct._widget_value* %54, %struct.frame* %55, void ()* %cond, void ()* %59, %struct.xg_menu_cb_data_* %60, %struct._GSList** %group)
  store %struct._GtkWidget* %call45, %struct._GtkWidget** %w, align 8
  %61 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %contents46 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %61, i32 0, i32 10
  %62 = load %struct._widget_value*, %struct._widget_value** %contents46, align 8
  %tobool47 = icmp ne %struct._widget_value* %62, null
  br i1 %tobool47, label %if.then.49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %63 = load i8, i8* %menu_bar_p.addr, align 1
  %tobool48 = trunc i8 %63 to i1
  br i1 %tobool48, label %if.then.49, label %if.end.54

if.then.49:                                       ; preds = %lor.lhs.false, %cond.end
  %64 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %contents50 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %64, i32 0, i32 10
  %65 = load %struct._widget_value*, %struct._widget_value** %contents50, align 8
  %66 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %67 = load void ()*, void ()** %select_cb.addr, align 8
  %68 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %69 = load void ()*, void ()** %highlight_cb.addr, align 8
  %70 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call51 = call %struct._GtkWidget* @create_menus(%struct._widget_value* %65, %struct.frame* %66, void ()* %67, void ()* %68, void ()* %69, i1 zeroext false, i1 zeroext false, %struct._GtkWidget* null, %struct.xg_menu_cb_data_* %70, i8* null)
  store %struct._GtkWidget* %call51, %struct._GtkWidget** %submenu, align 8
  %71 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %72 = bitcast %struct._GtkWidget* %71 to %struct._GTypeInstance*
  %call52 = call i64 @gtk_menu_item_get_type() #8
  %call53 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %72, i64 %call52)
  %73 = bitcast %struct._GTypeInstance* %call53 to %struct._GtkMenuItem*
  %74 = load %struct._GtkWidget*, %struct._GtkWidget** %submenu, align 8
  call void @gtk_menu_item_set_submenu(%struct._GtkMenuItem* %73, %struct._GtkWidget* %74)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.49, %lor.lhs.false
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.then.40
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.end.36
  %75 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  %76 = bitcast %struct._GtkWidget* %75 to %struct._GTypeInstance*
  %call57 = call i64 @gtk_menu_shell_get_type() #8
  %call58 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %76, i64 %call57)
  %77 = bitcast %struct._GTypeInstance* %call58 to %struct._GtkMenuShell*
  %78 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_menu_shell_append(%struct._GtkMenuShell* %77, %struct._GtkWidget* %78)
  %79 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %79, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %if.end.56
  %80 = load %struct._widget_value*, %struct._widget_value** %item, align 8
  %next = getelementptr inbounds %struct._widget_value, %struct._widget_value* %80, i32 0, i32 12
  %81 = load %struct._widget_value*, %struct._widget_value** %next, align 8
  store %struct._widget_value* %81, %struct._widget_value** %item, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %82 = load %struct._GtkWidget*, %struct._GtkWidget** %wmenu, align 8
  ret %struct._GtkWidget* %82
}

; Function Attrs: nounwind uwtable
define internal void @xg_set_cursor(%struct._GtkWidget* %w, %struct._GdkCursor* %cursor) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %cursor.addr = alloca %struct._GdkCursor*, align 8
  %window = alloca %struct._GdkDrawable*, align 8
  %children = alloca %struct._GList*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store %struct._GdkCursor* %cursor, %struct._GdkCursor** %cursor.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %call = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %0)
  store %struct._GdkDrawable* %call, %struct._GdkDrawable** %window, align 8
  %1 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %call1 = call %struct._GList* @gdk_window_peek_children(%struct._GdkDrawable* %1)
  store %struct._GList* %call1, %struct._GList** %children, align 8
  %2 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  %3 = load %struct._GdkCursor*, %struct._GdkCursor** %cursor.addr, align 8
  call void @gdk_window_set_cursor(%struct._GdkDrawable* %2, %struct._GdkCursor* %3)
  br label %for.cond

for.cond:                                         ; preds = %cond.end, %entry
  %4 = load %struct._GList*, %struct._GList** %children, align 8
  %tobool = icmp ne %struct._GList* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct._GList*, %struct._GList** %children, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %5, i32 0, i32 0
  %6 = load i8*, i8** %data, align 8
  %7 = bitcast i8* %6 to %struct._GTypeInstance*
  %call2 = call i64 @gdk_window_object_get_type() #8
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call2)
  %8 = bitcast %struct._GTypeInstance* %call3 to %struct._GdkDrawable*
  %9 = load %struct._GdkCursor*, %struct._GdkCursor** %cursor.addr, align 8
  call void @gdk_window_set_cursor(%struct._GdkDrawable* %8, %struct._GdkCursor* %9)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load %struct._GList*, %struct._GList** %children, align 8
  %tobool4 = icmp ne %struct._GList* %10, null
  br i1 %tobool4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc
  %11 = load %struct._GList*, %struct._GList** %children, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %11, i32 0, i32 1
  %12 = load %struct._GList*, %struct._GList** %next, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %12, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %children, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define void @xg_modify_menubar_widgets(%struct._GtkWidget* %menubar, %struct.frame* %f, %struct._widget_value* %val, i1 zeroext %deep_p, void ()* %select_cb, void ()* %deactivate_cb, void ()* %highlight_cb) #0 {
entry:
  %menubar.addr = alloca %struct._GtkWidget*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %val.addr = alloca %struct._widget_value*, align 8
  %deep_p.addr = alloca i8, align 1
  %select_cb.addr = alloca void ()*, align 8
  %deactivate_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %cl_data = alloca %struct.xg_menu_cb_data_*, align 8
  %list = alloca %struct._GList*, align 8
  %cur = alloca %struct._widget_value*, align 8
  %iter = alloca %struct._GList*, align 8
  %sub = alloca %struct._GtkWidget*, align 8
  %newsub = alloca %struct._GtkWidget*, align 8
  %witem = alloca %struct._GtkMenuItem*, align 8
  store %struct._GtkWidget* %menubar, %struct._GtkWidget** %menubar.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  %frombool = zext i1 %deep_p to i8
  store i8 %frombool, i8* %deep_p.addr, align 1
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %deactivate_cb, void ()** %deactivate_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_container_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkContainer*
  %call2 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %2)
  store %struct._GList* %call2, %struct._GList** %list, align 8
  %3 = load %struct._GList*, %struct._GList** %list, align 8
  %tobool = icmp ne %struct._GList* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %5 = bitcast %struct._GtkWidget* %4 to %struct._GTypeInstance*
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %5, i64 80)
  %6 = bitcast %struct._GTypeInstance* %call3 to %struct._GObject*
  %call4 = call i8* @g_object_get_data(%struct._GObject* %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0))
  %7 = bitcast i8* %call4 to %struct.xg_menu_cb_data_*
  store %struct.xg_menu_cb_data_* %7, %struct.xg_menu_cb_data_** %cl_data, align 8
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %9 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %10 = load %struct._GList*, %struct._GList** %list, align 8
  %11 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %11, i32 0, i32 10
  %12 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  %13 = load void ()*, void ()** %select_cb.addr, align 8
  %14 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %15 = load void ()*, void ()** %highlight_cb.addr, align 8
  %16 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data, align 8
  call void @xg_update_menubar(%struct._GtkWidget* %8, %struct.frame* %9, %struct._GList** %list, %struct._GList* %10, i32 0, %struct._widget_value* %12, void ()* %13, void ()* %14, void ()* %15, %struct.xg_menu_cb_data_* %16)
  %17 = load i8, i8* %deep_p.addr, align 1
  %tobool5 = trunc i8 %17 to i1
  br i1 %tobool5, label %if.then.6, label %if.end.27

if.then.6:                                        ; preds = %if.end
  %18 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data, align 8
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %20 = load void ()*, void ()** %highlight_cb.addr, align 8
  call void @update_cl_data(%struct.xg_menu_cb_data_* %18, %struct.frame* %19, void ()* %20)
  %21 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %contents7 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %21, i32 0, i32 10
  %22 = load %struct._widget_value*, %struct._widget_value** %contents7, align 8
  store %struct._widget_value* %22, %struct._widget_value** %cur, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.24, %if.then.6
  %23 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %tobool8 = icmp ne %struct._widget_value* %23, null
  br i1 %tobool8, label %for.body, label %for.end.26

for.body:                                         ; preds = %for.cond
  store %struct._GtkWidget* null, %struct._GtkWidget** %sub, align 8
  store %struct._GtkMenuItem* null, %struct._GtkMenuItem** %witem, align 8
  %24 = load %struct._GList*, %struct._GList** %list, align 8
  store %struct._GList* %24, %struct._GList** %iter, align 8
  br label %for.cond.9

for.cond.9:                                       ; preds = %cond.end, %for.body
  %25 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool10 = icmp ne %struct._GList* %25, null
  br i1 %tobool10, label %for.body.11, label %for.end

for.body.11:                                      ; preds = %for.cond.9
  %26 = load %struct._GList*, %struct._GList** %iter, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %26, i32 0, i32 0
  %27 = load i8*, i8** %data, align 8
  %28 = bitcast i8* %27 to %struct._GTypeInstance*
  %call12 = call i64 @gtk_menu_item_get_type() #8
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call12)
  %29 = bitcast %struct._GTypeInstance* %call13 to %struct._GtkMenuItem*
  store %struct._GtkMenuItem* %29, %struct._GtkMenuItem** %witem, align 8
  %30 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %31 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %name = getelementptr inbounds %struct._widget_value, %struct._widget_value* %31, i32 0, i32 1
  %32 = load i8*, i8** %name, align 8
  %call14 = call zeroext i1 @xg_item_label_same_p(%struct._GtkMenuItem* %30, i8* %32)
  br i1 %call14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %for.body.11
  %33 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %call16 = call %struct._GtkWidget* @gtk_menu_item_get_submenu(%struct._GtkMenuItem* %33)
  store %struct._GtkWidget* %call16, %struct._GtkWidget** %sub, align 8
  br label %for.end

if.end.17:                                        ; preds = %for.body.11
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %34 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool18 = icmp ne %struct._GList* %34, null
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc
  %35 = load %struct._GList*, %struct._GList** %iter, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %35, i32 0, i32 1
  %36 = load %struct._GList*, %struct._GList** %next, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %36, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %iter, align 8
  br label %for.cond.9

for.end:                                          ; preds = %if.then.15, %for.cond.9
  %37 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %39 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %contents19 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %39, i32 0, i32 10
  %40 = load %struct._widget_value*, %struct._widget_value** %contents19, align 8
  %41 = load void ()*, void ()** %select_cb.addr, align 8
  %42 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %43 = load void ()*, void ()** %highlight_cb.addr, align 8
  %44 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data, align 8
  %call20 = call %struct._GtkWidget* @xg_update_submenu(%struct._GtkWidget* %37, %struct.frame* %38, %struct._widget_value* %40, void ()* %41, void ()* %42, void ()* %43, %struct.xg_menu_cb_data_* %44)
  store %struct._GtkWidget* %call20, %struct._GtkWidget** %newsub, align 8
  %45 = load %struct._GtkWidget*, %struct._GtkWidget** %newsub, align 8
  %46 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  %cmp = icmp ne %struct._GtkWidget* %45, %46
  br i1 %cmp, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %for.end
  %47 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %cmp21 = icmp ne %struct._GtkMenuItem* %47, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true
  %48 = load %struct._GtkWidget*, %struct._GtkWidget** %newsub, align 8
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @xg_set_screen(%struct._GtkWidget* %48, %struct.frame* %49)
  %50 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %51 = load %struct._GtkWidget*, %struct._GtkWidget** %newsub, align 8
  call void @gtk_menu_item_set_submenu(%struct._GtkMenuItem* %50, %struct._GtkWidget* %51)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %land.lhs.true, %for.end
  br label %for.inc.24

for.inc.24:                                       ; preds = %if.end.23
  %52 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %next25 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %52, i32 0, i32 12
  %53 = load %struct._widget_value*, %struct._widget_value** %next25, align 8
  store %struct._widget_value* %53, %struct._widget_value** %cur, align 8
  br label %for.cond

for.end.26:                                       ; preds = %for.cond
  br label %if.end.27

if.end.27:                                        ; preds = %for.end.26, %if.end
  %54 = load %struct._GList*, %struct._GList** %list, align 8
  call void @g_list_free(%struct._GList* %54)
  %55 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %55)
  br label %return

return:                                           ; preds = %if.end.27, %if.then
  ret void
}

declare %struct._GList* @gtk_container_get_children(%struct._GtkContainer*) #1

; Function Attrs: nounwind uwtable
define internal void @xg_update_menubar(%struct._GtkWidget* %menubar, %struct.frame* %f, %struct._GList** %list, %struct._GList* %iter, i32 %pos, %struct._widget_value* %val, void ()* %select_cb, void ()* %deactivate_cb, void ()* %highlight_cb, %struct.xg_menu_cb_data_* %cl_data) #0 {
entry:
  %menubar.addr = alloca %struct._GtkWidget*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %list.addr = alloca %struct._GList**, align 8
  %iter.addr = alloca %struct._GList*, align 8
  %pos.addr = alloca i32, align 4
  %val.addr = alloca %struct._widget_value*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %deactivate_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %witem = alloca %struct._GtkMenuItem*, align 8
  %witem2 = alloca %struct._GtkMenuItem*, align 8
  %val_in_menubar = alloca i8, align 1
  %iter_in_new_menubar = alloca i8, align 1
  %iter2 = alloca %struct._GList*, align 8
  %cur = alloca %struct._widget_value*, align 8
  %nr = alloca i32, align 4
  %wlabel = alloca %struct._GtkLabel*, align 8
  %utf8_label = alloca i8*, align 8
  %nr100 = alloca i32, align 4
  %group = alloca %struct._GSList*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %submenu = alloca %struct._GtkWidget*, align 8
  %nr130 = alloca i32, align 4
  store %struct._GtkWidget* %menubar, %struct._GtkWidget** %menubar.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._GList** %list, %struct._GList*** %list.addr, align 8
  store %struct._GList* %iter, %struct._GList** %iter.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %deactivate_cb, void ()** %deactivate_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %0 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool = icmp ne %struct._GList* %0, null
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %tobool1 = icmp ne %struct._widget_value* %1, null
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %2 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool2 = icmp ne %struct._GList* %2, null
  br i1 %tobool2, label %land.lhs.true.3, label %if.else.8

land.lhs.true.3:                                  ; preds = %if.else
  %3 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %tobool4 = icmp ne %struct._widget_value* %3, null
  br i1 %tobool4, label %if.else.8, label %if.then.5

if.then.5:                                        ; preds = %land.lhs.true.3
  %4 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  call void @xg_destroy_widgets(%struct._GList* %4)
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %6 = bitcast %struct._GtkWidget* %5 to %struct._GTypeInstance*
  %call = call i64 @gtk_menu_shell_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 %call)
  %7 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkMenuShell*
  %call7 = call %struct._GtkWidget* @gtk_menu_item_new_with_label(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0))
  call void @gtk_menu_shell_insert(%struct._GtkMenuShell* %7, %struct._GtkWidget* %call7, i32 0)
  store %struct._widget_value* null, %struct._widget_value** %val.addr, align 8
  store %struct._GList* null, %struct._GList** %iter.addr, align 8
  br label %if.end.172

if.else.8:                                        ; preds = %land.lhs.true.3, %if.else
  %8 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool9 = icmp ne %struct._GList* %8, null
  br i1 %tobool9, label %if.else.14, label %land.lhs.true.10

land.lhs.true.10:                                 ; preds = %if.else.8
  %9 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %tobool11 = icmp ne %struct._widget_value* %9, null
  br i1 %tobool11, label %if.then.12, label %if.else.14

if.then.12:                                       ; preds = %land.lhs.true.10
  %10 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = load void ()*, void ()** %select_cb.addr, align 8
  %13 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %14 = load void ()*, void ()** %highlight_cb.addr, align 8
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %16 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call13 = call %struct._GtkWidget* @create_menus(%struct._widget_value* %10, %struct.frame* %11, void ()* %12, void ()* %13, void ()* %14, i1 zeroext false, i1 zeroext true, %struct._GtkWidget* %15, %struct.xg_menu_cb_data_* %16, i8* null)
  store %struct._widget_value* null, %struct._widget_value** %val.addr, align 8
  store %struct._GList* null, %struct._GList** %iter.addr, align 8
  br label %if.end.171

if.else.14:                                       ; preds = %land.lhs.true.10, %if.else.8
  %17 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %17, i32 0, i32 0
  %18 = load i8*, i8** %data, align 8
  %19 = bitcast i8* %18 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_menu_item_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %19, i64 %call15)
  %20 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkMenuItem*
  %21 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %name = getelementptr inbounds %struct._widget_value, %struct._widget_value* %21, i32 0, i32 1
  %22 = load i8*, i8** %name, align 8
  %call17 = call zeroext i1 @xg_item_label_same_p(%struct._GtkMenuItem* %20, i8* %22)
  br i1 %call17, label %if.then.18, label %if.else.21

if.then.18:                                       ; preds = %if.else.14
  %23 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %next = getelementptr inbounds %struct._widget_value, %struct._widget_value* %23, i32 0, i32 12
  %24 = load %struct._widget_value*, %struct._widget_value** %next, align 8
  store %struct._widget_value* %24, %struct._widget_value** %val.addr, align 8
  %25 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool19 = icmp ne %struct._GList* %25, null
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.18
  %26 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next20 = getelementptr inbounds %struct._GList, %struct._GList* %26, i32 0, i32 1
  %27 = load %struct._GList*, %struct._GList** %next20, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.18
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %27, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %iter.addr, align 8
  %28 = load i32, i32* %pos.addr, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %pos.addr, align 4
  br label %if.end.170

if.else.21:                                       ; preds = %if.else.14
  %29 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %data22 = getelementptr inbounds %struct._GList, %struct._GList* %29, i32 0, i32 0
  %30 = load i8*, i8** %data22, align 8
  %31 = bitcast i8* %30 to %struct._GTypeInstance*
  %call23 = call i64 @gtk_menu_item_get_type() #8
  %call24 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %31, i64 %call23)
  %32 = bitcast %struct._GTypeInstance* %call24 to %struct._GtkMenuItem*
  store %struct._GtkMenuItem* %32, %struct._GtkMenuItem** %witem, align 8
  store %struct._GtkMenuItem* null, %struct._GtkMenuItem** %witem2, align 8
  store i8 0, i8* %val_in_menubar, align 1
  store i8 0, i8* %iter_in_new_menubar, align 1
  %33 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  store %struct._GList* %33, %struct._GList** %iter2, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end.36, %if.else.21
  %34 = load %struct._GList*, %struct._GList** %iter2, align 8
  %tobool25 = icmp ne %struct._GList* %34, null
  br i1 %tobool25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %35 = load i8, i8* %val_in_menubar, align 1
  %tobool26 = trunc i8 %35 to i1
  %lnot = xor i1 %tobool26, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %36 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %36, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %37 = load %struct._GList*, %struct._GList** %iter2, align 8
  %data27 = getelementptr inbounds %struct._GList, %struct._GList* %37, i32 0, i32 0
  %38 = load i8*, i8** %data27, align 8
  %39 = bitcast i8* %38 to %struct._GTypeInstance*
  %call28 = call i64 @gtk_menu_item_get_type() #8
  %call29 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %39, i64 %call28)
  %40 = bitcast %struct._GTypeInstance* %call29 to %struct._GtkMenuItem*
  store %struct._GtkMenuItem* %40, %struct._GtkMenuItem** %witem2, align 8
  %41 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem2, align 8
  %42 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %name30 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %42, i32 0, i32 1
  %43 = load i8*, i8** %name30, align 8
  %call31 = call zeroext i1 @xg_item_label_same_p(%struct._GtkMenuItem* %41, i8* %43)
  %frombool = zext i1 %call31 to i8
  store i8 %frombool, i8* %val_in_menubar, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %44 = load %struct._GList*, %struct._GList** %iter2, align 8
  %tobool32 = icmp ne %struct._GList* %44, null
  br i1 %tobool32, label %cond.true.33, label %cond.false.35

cond.true.33:                                     ; preds = %for.inc
  %45 = load %struct._GList*, %struct._GList** %iter2, align 8
  %next34 = getelementptr inbounds %struct._GList, %struct._GList* %45, i32 0, i32 1
  %46 = load %struct._GList*, %struct._GList** %next34, align 8
  br label %cond.end.36

cond.false.35:                                    ; preds = %for.inc
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.false.35, %cond.true.33
  %cond37 = phi %struct._GList* [ %46, %cond.true.33 ], [ null, %cond.false.35 ]
  store %struct._GList* %cond37, %struct._GList** %iter2, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %47 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  store %struct._widget_value* %47, %struct._widget_value** %cur, align 8
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.48, %for.end
  %48 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %tobool39 = icmp ne %struct._widget_value* %48, null
  br i1 %tobool39, label %land.rhs.40, label %land.end.43

land.rhs.40:                                      ; preds = %for.cond.38
  %49 = load i8, i8* %iter_in_new_menubar, align 1
  %tobool41 = trunc i8 %49 to i1
  %lnot42 = xor i1 %tobool41, true
  br label %land.end.43

land.end.43:                                      ; preds = %land.rhs.40, %for.cond.38
  %50 = phi i1 [ false, %for.cond.38 ], [ %lnot42, %land.rhs.40 ]
  br i1 %50, label %for.body.44, label %for.end.50

for.body.44:                                      ; preds = %land.end.43
  %51 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %52 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %name45 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %52, i32 0, i32 1
  %53 = load i8*, i8** %name45, align 8
  %call46 = call zeroext i1 @xg_item_label_same_p(%struct._GtkMenuItem* %51, i8* %53)
  %frombool47 = zext i1 %call46 to i8
  store i8 %frombool47, i8* %iter_in_new_menubar, align 1
  br label %for.inc.48

for.inc.48:                                       ; preds = %for.body.44
  %54 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %next49 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %54, i32 0, i32 12
  %55 = load %struct._widget_value*, %struct._widget_value** %next49, align 8
  store %struct._widget_value* %55, %struct._widget_value** %cur, align 8
  br label %for.cond.38

for.end.50:                                       ; preds = %land.end.43
  %56 = load i8, i8* %val_in_menubar, align 1
  %tobool51 = trunc i8 %56 to i1
  br i1 %tobool51, label %land.lhs.true.52, label %if.else.72

land.lhs.true.52:                                 ; preds = %for.end.50
  %57 = load i8, i8* %iter_in_new_menubar, align 1
  %tobool53 = trunc i8 %57 to i1
  br i1 %tobool53, label %if.else.72, label %if.then.54

if.then.54:                                       ; preds = %land.lhs.true.52
  %58 = load i32, i32* %pos.addr, align 4
  store i32 %58, i32* %nr, align 4
  %59 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %60 = bitcast %struct._GtkMenuItem* %59 to %struct._GTypeInstance*
  %call55 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %60, i64 80)
  %61 = bitcast %struct._GTypeInstance* %call55 to %struct._GObject*
  %62 = bitcast %struct._GObject* %61 to i8*
  %call56 = call i8* @g_object_ref(i8* %62)
  %63 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %64 = bitcast %struct._GtkWidget* %63 to %struct._GTypeInstance*
  %call57 = call i64 @gtk_container_get_type() #8
  %call58 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %64, i64 %call57)
  %65 = bitcast %struct._GTypeInstance* %call58 to %struct._GtkContainer*
  %66 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %67 = bitcast %struct._GtkMenuItem* %66 to %struct._GTypeInstance*
  %call59 = call i64 @gtk_widget_get_type() #8
  %call60 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %67, i64 %call59)
  %68 = bitcast %struct._GTypeInstance* %call60 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %65, %struct._GtkWidget* %68)
  %69 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %70 = bitcast %struct._GtkMenuItem* %69 to %struct._GTypeInstance*
  %call61 = call i64 @gtk_widget_get_type() #8
  %call62 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %70, i64 %call61)
  %71 = bitcast %struct._GTypeInstance* %call62 to %struct._GtkWidget*
  call void @gtk_widget_destroy(%struct._GtkWidget* %71)
  %72 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  %73 = load %struct._GList*, %struct._GList** %72, align 8
  call void @g_list_free(%struct._GList* %73)
  %74 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %75 = bitcast %struct._GtkWidget* %74 to %struct._GTypeInstance*
  %call63 = call i64 @gtk_container_get_type() #8
  %call64 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %75, i64 %call63)
  %76 = bitcast %struct._GTypeInstance* %call64 to %struct._GtkContainer*
  %call65 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %76)
  store %struct._GList* %call65, %struct._GList** %iter.addr, align 8
  %77 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  store %struct._GList* %call65, %struct._GList** %77, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end.70, %if.then.54
  %78 = load i32, i32* %nr, align 4
  %dec = add nsw i32 %78, -1
  store i32 %dec, i32* %nr, align 4
  %cmp = icmp sgt i32 %78, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %79 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool66 = icmp ne %struct._GList* %79, null
  br i1 %tobool66, label %cond.true.67, label %cond.false.69

cond.true.67:                                     ; preds = %while.body
  %80 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next68 = getelementptr inbounds %struct._GList, %struct._GList* %80, i32 0, i32 1
  %81 = load %struct._GList*, %struct._GList** %next68, align 8
  br label %cond.end.70

cond.false.69:                                    ; preds = %while.body
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.false.69, %cond.true.67
  %cond71 = phi %struct._GList* [ %81, %cond.true.67 ], [ null, %cond.false.69 ]
  store %struct._GList* %cond71, %struct._GList** %iter.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.169

if.else.72:                                       ; preds = %land.lhs.true.52, %for.end.50
  %82 = load i8, i8* %val_in_menubar, align 1
  %tobool73 = trunc i8 %82 to i1
  br i1 %tobool73, label %if.else.95, label %land.lhs.true.74

land.lhs.true.74:                                 ; preds = %if.else.72
  %83 = load i8, i8* %iter_in_new_menubar, align 1
  %tobool75 = trunc i8 %83 to i1
  br i1 %tobool75, label %if.else.95, label %if.then.76

if.then.76:                                       ; preds = %land.lhs.true.74
  %84 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %85 = bitcast %struct._GtkMenuItem* %84 to %struct._GTypeInstance*
  %call77 = call i64 @gtk_bin_get_type() #8
  %call78 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %85, i64 %call77)
  %86 = bitcast %struct._GTypeInstance* %call78 to %struct._GtkBin*
  %call79 = call %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin* %86)
  %87 = bitcast %struct._GtkWidget* %call79 to %struct._GTypeInstance*
  %call80 = call i64 @gtk_label_get_type() #8
  %call81 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %87, i64 %call80)
  %88 = bitcast %struct._GTypeInstance* %call81 to %struct._GtkLabel*
  store %struct._GtkLabel* %88, %struct._GtkLabel** %wlabel, align 8
  %89 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %name82 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %89, i32 0, i32 1
  %90 = load i8*, i8** %name82, align 8
  %call83 = call i8* @get_utf8_string(i8* %90)
  store i8* %call83, i8** %utf8_label, align 8
  %91 = load %struct._GtkLabel*, %struct._GtkLabel** %wlabel, align 8
  %92 = load i8*, i8** %utf8_label, align 8
  call void @gtk_label_set_text(%struct._GtkLabel* %91, i8* %92)
  %93 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %94 = bitcast %struct._GtkMenuItem* %93 to %struct._GTypeInstance*
  %call84 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %94, i64 80)
  %95 = bitcast %struct._GTypeInstance* %call84 to %struct._GObject*
  call void @g_object_notify(%struct._GObject* %95, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0))
  %96 = load i8*, i8** %utf8_label, align 8
  %tobool85 = icmp ne i8* %96, null
  br i1 %tobool85, label %if.then.86, label %if.end

if.then.86:                                       ; preds = %if.then.76
  %97 = load i8*, i8** %utf8_label, align 8
  call void @g_free(i8* %97)
  br label %if.end

if.end:                                           ; preds = %if.then.86, %if.then.76
  %98 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool87 = icmp ne %struct._GList* %98, null
  br i1 %tobool87, label %cond.true.88, label %cond.false.90

cond.true.88:                                     ; preds = %if.end
  %99 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next89 = getelementptr inbounds %struct._GList, %struct._GList* %99, i32 0, i32 1
  %100 = load %struct._GList*, %struct._GList** %next89, align 8
  br label %cond.end.91

cond.false.90:                                    ; preds = %if.end
  br label %cond.end.91

cond.end.91:                                      ; preds = %cond.false.90, %cond.true.88
  %cond92 = phi %struct._GList* [ %100, %cond.true.88 ], [ null, %cond.false.90 ]
  store %struct._GList* %cond92, %struct._GList** %iter.addr, align 8
  %101 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %next93 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %101, i32 0, i32 12
  %102 = load %struct._widget_value*, %struct._widget_value** %next93, align 8
  store %struct._widget_value* %102, %struct._widget_value** %val.addr, align 8
  %103 = load i32, i32* %pos.addr, align 4
  %inc94 = add nsw i32 %103, 1
  store i32 %inc94, i32* %pos.addr, align 4
  br label %if.end.168

if.else.95:                                       ; preds = %land.lhs.true.74, %if.else.72
  %104 = load i8, i8* %val_in_menubar, align 1
  %tobool96 = trunc i8 %104 to i1
  br i1 %tobool96, label %if.else.129, label %land.lhs.true.97

land.lhs.true.97:                                 ; preds = %if.else.95
  %105 = load i8, i8* %iter_in_new_menubar, align 1
  %tobool98 = trunc i8 %105 to i1
  br i1 %tobool98, label %if.then.99, label %if.else.129

if.then.99:                                       ; preds = %land.lhs.true.97
  %106 = load i32, i32* %pos.addr, align 4
  store i32 %106, i32* %nr100, align 4
  store %struct._GSList* null, %struct._GSList** %group, align 8
  %107 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %108 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %109 = load void ()*, void ()** %select_cb.addr, align 8
  %110 = load void ()*, void ()** %highlight_cb.addr, align 8
  %111 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call101 = call %struct._GtkWidget* @xg_create_one_menuitem(%struct._widget_value* %107, %struct.frame* %108, void ()* %109, void ()* %110, %struct.xg_menu_cb_data_* %111, %struct._GSList** %group)
  store %struct._GtkWidget* %call101, %struct._GtkWidget** %w, align 8
  %112 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %113 = load void ()*, void ()** %select_cb.addr, align 8
  %114 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %115 = load void ()*, void ()** %highlight_cb.addr, align 8
  %116 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call102 = call %struct._GtkWidget* @create_menus(%struct._widget_value* null, %struct.frame* %112, void ()* %113, void ()* %114, void ()* %115, i1 zeroext false, i1 zeroext false, %struct._GtkWidget* null, %struct.xg_menu_cb_data_* %116, i8* null)
  store %struct._GtkWidget* %call102, %struct._GtkWidget** %submenu, align 8
  %117 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %117, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0))
  %118 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %119 = bitcast %struct._GtkWidget* %118 to %struct._GTypeInstance*
  %call103 = call i64 @gtk_menu_shell_get_type() #8
  %call104 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %119, i64 %call103)
  %120 = bitcast %struct._GTypeInstance* %call104 to %struct._GtkMenuShell*
  %121 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %122 = load i32, i32* %pos.addr, align 4
  call void @gtk_menu_shell_insert(%struct._GtkMenuShell* %120, %struct._GtkWidget* %121, i32 %122)
  %123 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %124 = bitcast %struct._GtkWidget* %123 to %struct._GTypeInstance*
  %call105 = call i64 @gtk_menu_item_get_type() #8
  %call106 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %124, i64 %call105)
  %125 = bitcast %struct._GTypeInstance* %call106 to %struct._GtkMenuItem*
  %126 = load %struct._GtkWidget*, %struct._GtkWidget** %submenu, align 8
  call void @gtk_menu_item_set_submenu(%struct._GtkMenuItem* %125, %struct._GtkWidget* %126)
  %127 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  %128 = load %struct._GList*, %struct._GList** %127, align 8
  call void @g_list_free(%struct._GList* %128)
  %129 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %130 = bitcast %struct._GtkWidget* %129 to %struct._GTypeInstance*
  %call107 = call i64 @gtk_container_get_type() #8
  %call108 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %130, i64 %call107)
  %131 = bitcast %struct._GTypeInstance* %call108 to %struct._GtkContainer*
  %call109 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %131)
  store %struct._GList* %call109, %struct._GList** %iter.addr, align 8
  %132 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  store %struct._GList* %call109, %struct._GList** %132, align 8
  br label %while.cond.110

while.cond.110:                                   ; preds = %cond.end.118, %if.then.99
  %133 = load i32, i32* %nr100, align 4
  %dec111 = add nsw i32 %133, -1
  store i32 %dec111, i32* %nr100, align 4
  %cmp112 = icmp sgt i32 %133, 0
  br i1 %cmp112, label %while.body.113, label %while.end.120

while.body.113:                                   ; preds = %while.cond.110
  %134 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool114 = icmp ne %struct._GList* %134, null
  br i1 %tobool114, label %cond.true.115, label %cond.false.117

cond.true.115:                                    ; preds = %while.body.113
  %135 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next116 = getelementptr inbounds %struct._GList, %struct._GList* %135, i32 0, i32 1
  %136 = load %struct._GList*, %struct._GList** %next116, align 8
  br label %cond.end.118

cond.false.117:                                   ; preds = %while.body.113
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.false.117, %cond.true.115
  %cond119 = phi %struct._GList* [ %136, %cond.true.115 ], [ null, %cond.false.117 ]
  store %struct._GList* %cond119, %struct._GList** %iter.addr, align 8
  br label %while.cond.110

while.end.120:                                    ; preds = %while.cond.110
  %137 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool121 = icmp ne %struct._GList* %137, null
  br i1 %tobool121, label %cond.true.122, label %cond.false.124

cond.true.122:                                    ; preds = %while.end.120
  %138 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next123 = getelementptr inbounds %struct._GList, %struct._GList* %138, i32 0, i32 1
  %139 = load %struct._GList*, %struct._GList** %next123, align 8
  br label %cond.end.125

cond.false.124:                                   ; preds = %while.end.120
  br label %cond.end.125

cond.end.125:                                     ; preds = %cond.false.124, %cond.true.122
  %cond126 = phi %struct._GList* [ %139, %cond.true.122 ], [ null, %cond.false.124 ]
  store %struct._GList* %cond126, %struct._GList** %iter.addr, align 8
  %140 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %next127 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %140, i32 0, i32 12
  %141 = load %struct._widget_value*, %struct._widget_value** %next127, align 8
  store %struct._widget_value* %141, %struct._widget_value** %val.addr, align 8
  %142 = load i32, i32* %pos.addr, align 4
  %inc128 = add nsw i32 %142, 1
  store i32 %inc128, i32* %pos.addr, align 4
  br label %if.end.167

if.else.129:                                      ; preds = %land.lhs.true.97, %if.else.95
  %143 = load i32, i32* %pos.addr, align 4
  store i32 %143, i32* %nr130, align 4
  %144 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem2, align 8
  %145 = bitcast %struct._GtkMenuItem* %144 to %struct._GTypeInstance*
  %call131 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %145, i64 80)
  %146 = bitcast %struct._GTypeInstance* %call131 to %struct._GObject*
  %147 = bitcast %struct._GObject* %146 to i8*
  %call132 = call i8* @g_object_ref(i8* %147)
  %148 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %149 = bitcast %struct._GtkWidget* %148 to %struct._GTypeInstance*
  %call133 = call i64 @gtk_container_get_type() #8
  %call134 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %149, i64 %call133)
  %150 = bitcast %struct._GTypeInstance* %call134 to %struct._GtkContainer*
  %151 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem2, align 8
  %152 = bitcast %struct._GtkMenuItem* %151 to %struct._GTypeInstance*
  %call135 = call i64 @gtk_widget_get_type() #8
  %call136 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %152, i64 %call135)
  %153 = bitcast %struct._GTypeInstance* %call136 to %struct._GtkWidget*
  call void @gtk_container_remove(%struct._GtkContainer* %150, %struct._GtkWidget* %153)
  %154 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %155 = bitcast %struct._GtkWidget* %154 to %struct._GTypeInstance*
  %call137 = call i64 @gtk_menu_shell_get_type() #8
  %call138 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %155, i64 %call137)
  %156 = bitcast %struct._GTypeInstance* %call138 to %struct._GtkMenuShell*
  %157 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem2, align 8
  %158 = bitcast %struct._GtkMenuItem* %157 to %struct._GTypeInstance*
  %call139 = call i64 @gtk_widget_get_type() #8
  %call140 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %158, i64 %call139)
  %159 = bitcast %struct._GTypeInstance* %call140 to %struct._GtkWidget*
  %160 = load i32, i32* %pos.addr, align 4
  call void @gtk_menu_shell_insert(%struct._GtkMenuShell* %156, %struct._GtkWidget* %159, i32 %160)
  %161 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem2, align 8
  %162 = bitcast %struct._GtkMenuItem* %161 to %struct._GTypeInstance*
  %call141 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %162, i64 80)
  %163 = bitcast %struct._GTypeInstance* %call141 to %struct._GObject*
  %164 = bitcast %struct._GObject* %163 to i8*
  call void @g_object_unref(i8* %164)
  %165 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  %166 = load %struct._GList*, %struct._GList** %165, align 8
  call void @g_list_free(%struct._GList* %166)
  %167 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %168 = bitcast %struct._GtkWidget* %167 to %struct._GTypeInstance*
  %call142 = call i64 @gtk_container_get_type() #8
  %call143 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %168, i64 %call142)
  %169 = bitcast %struct._GTypeInstance* %call143 to %struct._GtkContainer*
  %call144 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %169)
  store %struct._GList* %call144, %struct._GList** %iter.addr, align 8
  %170 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  store %struct._GList* %call144, %struct._GList** %170, align 8
  br label %while.cond.145

while.cond.145:                                   ; preds = %cond.end.153, %if.else.129
  %171 = load i32, i32* %nr130, align 4
  %dec146 = add nsw i32 %171, -1
  store i32 %dec146, i32* %nr130, align 4
  %cmp147 = icmp sgt i32 %171, 0
  br i1 %cmp147, label %while.body.148, label %while.end.155

while.body.148:                                   ; preds = %while.cond.145
  %172 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool149 = icmp ne %struct._GList* %172, null
  br i1 %tobool149, label %cond.true.150, label %cond.false.152

cond.true.150:                                    ; preds = %while.body.148
  %173 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next151 = getelementptr inbounds %struct._GList, %struct._GList* %173, i32 0, i32 1
  %174 = load %struct._GList*, %struct._GList** %next151, align 8
  br label %cond.end.153

cond.false.152:                                   ; preds = %while.body.148
  br label %cond.end.153

cond.end.153:                                     ; preds = %cond.false.152, %cond.true.150
  %cond154 = phi %struct._GList* [ %174, %cond.true.150 ], [ null, %cond.false.152 ]
  store %struct._GList* %cond154, %struct._GList** %iter.addr, align 8
  br label %while.cond.145

while.end.155:                                    ; preds = %while.cond.145
  %175 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool156 = icmp ne %struct._GList* %175, null
  br i1 %tobool156, label %if.then.157, label %if.end.164

if.then.157:                                      ; preds = %while.end.155
  %176 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %tobool158 = icmp ne %struct._GList* %176, null
  br i1 %tobool158, label %cond.true.159, label %cond.false.161

cond.true.159:                                    ; preds = %if.then.157
  %177 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %next160 = getelementptr inbounds %struct._GList, %struct._GList* %177, i32 0, i32 1
  %178 = load %struct._GList*, %struct._GList** %next160, align 8
  br label %cond.end.162

cond.false.161:                                   ; preds = %if.then.157
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.161, %cond.true.159
  %cond163 = phi %struct._GList* [ %178, %cond.true.159 ], [ null, %cond.false.161 ]
  store %struct._GList* %cond163, %struct._GList** %iter.addr, align 8
  br label %if.end.164

if.end.164:                                       ; preds = %cond.end.162, %while.end.155
  %179 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %next165 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %179, i32 0, i32 12
  %180 = load %struct._widget_value*, %struct._widget_value** %next165, align 8
  store %struct._widget_value* %180, %struct._widget_value** %val.addr, align 8
  %181 = load i32, i32* %pos.addr, align 4
  %inc166 = add nsw i32 %181, 1
  store i32 %inc166, i32* %pos.addr, align 4
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.164, %cond.end.125
  br label %if.end.168

if.end.168:                                       ; preds = %if.end.167, %cond.end.91
  br label %if.end.169

if.end.169:                                       ; preds = %if.end.168, %while.end
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %cond.end
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %if.then.12
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.171, %if.then.5
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172
  %182 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar.addr, align 8
  %183 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %184 = load %struct._GList**, %struct._GList*** %list.addr, align 8
  %185 = load %struct._GList*, %struct._GList** %iter.addr, align 8
  %186 = load i32, i32* %pos.addr, align 4
  %187 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %188 = load void ()*, void ()** %select_cb.addr, align 8
  %189 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %190 = load void ()*, void ()** %highlight_cb.addr, align 8
  %191 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  call void @xg_update_menubar(%struct._GtkWidget* %182, %struct.frame* %183, %struct._GList** %184, %struct._GList* %185, i32 %186, %struct._widget_value* %187, void ()* %188, void ()* %189, void ()* %190, %struct.xg_menu_cb_data_* %191)
  br label %return

return:                                           ; preds = %if.end.173, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @update_cl_data(%struct.xg_menu_cb_data_* %cl_data, %struct.frame* %f, void ()* %highlight_cb) #0 {
entry:
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  %0 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %tobool = icmp ne %struct.xg_menu_cb_data_* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %2 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %f1 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %2, i32 0, i32 1
  store %struct.frame* %1, %struct.frame** %f1, align 8
  %3 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_vector = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 13
  %4 = load i64, i64* %menu_bar_vector, align 8
  %5 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %menu_bar_vector2 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %5, i32 0, i32 2
  store i64 %4, i64* %menu_bar_vector2, align 8
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_items_used = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 21
  %7 = load i32, i32* %menu_bar_items_used, align 4
  %8 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %menu_bar_items_used3 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %8, i32 0, i32 3
  store i32 %7, i32* %menu_bar_items_used3, align 4
  %9 = load void ()*, void ()** %highlight_cb.addr, align 8
  %10 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %highlight_cb4 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %10, i32 0, i32 4
  store void ()* %9, void ()** %highlight_cb4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @gtk_menu_item_get_type() #3

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xg_item_label_same_p(%struct._GtkMenuItem* %witem, i8* %label) #0 {
entry:
  %witem.addr = alloca %struct._GtkMenuItem*, align 8
  %label.addr = alloca i8*, align 8
  %is_same = alloca i8, align 1
  %utf8_label = alloca i8*, align 8
  %old_label = alloca i8*, align 8
  store %struct._GtkMenuItem* %witem, %struct._GtkMenuItem** %witem.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  store i8 0, i8* %is_same, align 1
  %0 = load i8*, i8** %label.addr, align 8
  %call = call i8* @get_utf8_string(i8* %0)
  store i8* %call, i8** %utf8_label, align 8
  %1 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem.addr, align 8
  %tobool = icmp ne %struct._GtkMenuItem* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem.addr, align 8
  %call1 = call i8* @xg_get_menu_item_label(%struct._GtkMenuItem* %2)
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call1, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %old_label, align 8
  %3 = load i8*, i8** %old_label, align 8
  %tobool2 = icmp ne i8* %3, null
  br i1 %tobool2, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end
  %4 = load i8*, i8** %utf8_label, align 8
  %tobool3 = icmp ne i8* %4, null
  br i1 %tobool3, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %is_same, align 1
  br label %if.end.9

if.else:                                          ; preds = %land.lhs.true, %cond.end
  %5 = load i8*, i8** %old_label, align 8
  %tobool4 = icmp ne i8* %5, null
  br i1 %tobool4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %if.else
  %6 = load i8*, i8** %utf8_label, align 8
  %tobool6 = icmp ne i8* %6, null
  br i1 %tobool6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true.5
  %7 = load i8*, i8** %utf8_label, align 8
  %8 = load i8*, i8** %old_label, align 8
  %call8 = call i32 @strcmp(i8* %7, i8* %8) #7
  %cmp = icmp eq i32 %call8, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %is_same, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.7, %land.lhs.true.5, %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  %9 = load i8*, i8** %utf8_label, align 8
  %tobool10 = icmp ne i8* %9, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.9
  %10 = load i8*, i8** %utf8_label, align 8
  call void @g_free(i8* %10)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.9
  %11 = load i8, i8* %is_same, align 1
  %tobool13 = trunc i8 %11 to i1
  ret i1 %tobool13
}

declare %struct._GtkWidget* @gtk_menu_item_get_submenu(%struct._GtkMenuItem*) #1

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_update_submenu(%struct._GtkWidget* %submenu, %struct.frame* %f, %struct._widget_value* %val, void ()* %select_cb, void ()* %deactivate_cb, void ()* %highlight_cb, %struct.xg_menu_cb_data_* %cl_data) #0 {
entry:
  %submenu.addr = alloca %struct._GtkWidget*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %val.addr = alloca %struct._widget_value*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %deactivate_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %newsub = alloca %struct._GtkWidget*, align 8
  %list = alloca %struct._GList*, align 8
  %iter = alloca %struct._GList*, align 8
  %cur = alloca %struct._widget_value*, align 8
  %first_radio = alloca %struct._GList*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst30 = alloca %struct._GTypeInstance*, align 8
  %__t32 = alloca i64, align 8
  %__r35 = alloca i32, align 4
  %tmp50 = alloca i32, align 4
  %__inst58 = alloca %struct._GTypeInstance*, align 8
  %__t60 = alloca i64, align 8
  %__r63 = alloca i32, align 4
  %tmp78 = alloca i32, align 4
  %__inst87 = alloca %struct._GTypeInstance*, align 8
  %__t89 = alloca i64, align 8
  %__r92 = alloca i32, align 4
  %tmp107 = alloca i32, align 4
  %__inst116 = alloca %struct._GTypeInstance*, align 8
  %__t118 = alloca i64, align 8
  %__r121 = alloca i32, align 4
  %tmp136 = alloca i32, align 4
  %witem = alloca %struct._GtkMenuItem*, align 8
  %sub = alloca %struct._GtkWidget*, align 8
  %nsub = alloca %struct._GtkWidget*, align 8
  store %struct._GtkWidget* %submenu, %struct._GtkWidget** %submenu.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %deactivate_cb, void ()** %deactivate_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %submenu.addr, align 8
  store %struct._GtkWidget* %0, %struct._GtkWidget** %newsub, align 8
  store %struct._GList* null, %struct._GList** %list, align 8
  store %struct._GList* null, %struct._GList** %first_radio, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %submenu.addr, align 8
  %tobool = icmp ne %struct._GtkWidget* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %submenu.addr, align 8
  %3 = bitcast %struct._GtkWidget* %2 to %struct._GTypeInstance*
  %call = call i64 @gtk_container_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 %call)
  %4 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkContainer*
  %call2 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %4)
  store %struct._GList* %call2, %struct._GList** %list, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  store %struct._widget_value* %5, %struct._widget_value** %cur, align 8
  %6 = load %struct._GList*, %struct._GList** %list, align 8
  store %struct._GList* %6, %struct._GList** %iter, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end, %if.end
  %7 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %tobool3 = icmp ne %struct._widget_value* %7, null
  br i1 %tobool3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %8 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool4 = icmp ne %struct._GList* %8, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %tobool4, %land.rhs ]
  br i1 %9, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %10 = load %struct._GList*, %struct._GList** %iter, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %10, i32 0, i32 0
  %11 = load i8*, i8** %data, align 8
  %12 = bitcast i8* %11 to %struct._GTypeInstance*
  %call5 = call i64 @gtk_widget_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %12, i64 %call5)
  %13 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkWidget*
  store %struct._GtkWidget* %13, %struct._GtkWidget** %w, align 8
  %14 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %button_type = getelementptr inbounds %struct._widget_value, %struct._widget_value* %14, i32 0, i32 9
  %15 = load i32, i32* %button_type, align 4
  %cmp = icmp eq i32 %15, 2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %16 = load %struct._GList*, %struct._GList** %first_radio, align 8
  %tobool7 = icmp ne %struct._GList* %16, null
  br i1 %tobool7, label %if.else, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true
  %17 = load %struct._GList*, %struct._GList** %iter, align 8
  store %struct._GList* %17, %struct._GList** %first_radio, align 8
  br label %if.end.28

if.else:                                          ; preds = %land.lhs.true, %for.body
  %18 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %button_type9 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %18, i32 0, i32 9
  %19 = load i32, i32* %button_type9, align 4
  %cmp10 = icmp ne i32 %19, 2
  br i1 %cmp10, label %land.lhs.true.11, label %if.end.27

land.lhs.true.11:                                 ; preds = %if.else
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %21, %struct._GTypeInstance** %__inst, align 8
  %call12 = call i64 @gtk_radio_menu_item_get_type() #8
  store i64 %call12, i64* %__t, align 8
  %22 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool13 = icmp ne %struct._GTypeInstance* %22, null
  br i1 %tobool13, label %if.else.15, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true.11
  store i32 0, i32* %__r, align 4
  br label %if.end.24

if.else.15:                                       ; preds = %land.lhs.true.11
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %23, i32 0, i32 0
  %24 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool16 = icmp ne %struct._GTypeClass* %24, null
  br i1 %tobool16, label %land.lhs.true.17, label %if.else.21

land.lhs.true.17:                                 ; preds = %if.else.15
  %25 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class18 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %25, i32 0, i32 0
  %26 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class18, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %26, i32 0, i32 0
  %27 = load i64, i64* %g_type, align 8
  %28 = load i64, i64* %__t, align 8
  %cmp19 = icmp eq i64 %27, %28
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %land.lhs.true.17
  store i32 1, i32* %__r, align 4
  br label %if.end.23

if.else.21:                                       ; preds = %land.lhs.true.17, %if.else.15
  %29 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %30 = load i64, i64* %__t, align 8
  %call22 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %29, i64 %30) #7
  store i32 %call22, i32* %__r, align 4
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.21, %if.then.20
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then.14
  %31 = load i32, i32* %__r, align 4
  store i32 %31, i32* %tmp
  %32 = load i32, i32* %tmp
  %tobool25 = icmp ne i32 %32, 0
  br i1 %tobool25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %if.end.24
  store %struct._GList* null, %struct._GList** %first_radio, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %if.end.24, %if.else
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.8
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %34 = bitcast %struct._GtkWidget* %33 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %34, %struct._GTypeInstance** %__inst30, align 8
  %call33 = call i64 @gtk_separator_menu_item_get_type() #8
  store i64 %call33, i64* %__t32, align 8
  %35 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst30, align 8
  %tobool36 = icmp ne %struct._GTypeInstance* %35, null
  br i1 %tobool36, label %if.else.38, label %if.then.37

if.then.37:                                       ; preds = %if.end.28
  store i32 0, i32* %__r35, align 4
  br label %if.end.49

if.else.38:                                       ; preds = %if.end.28
  %36 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst30, align 8
  %g_class39 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %36, i32 0, i32 0
  %37 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class39, align 8
  %tobool40 = icmp ne %struct._GTypeClass* %37, null
  br i1 %tobool40, label %land.lhs.true.41, label %if.else.46

land.lhs.true.41:                                 ; preds = %if.else.38
  %38 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst30, align 8
  %g_class42 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %38, i32 0, i32 0
  %39 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class42, align 8
  %g_type43 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %39, i32 0, i32 0
  %40 = load i64, i64* %g_type43, align 8
  %41 = load i64, i64* %__t32, align 8
  %cmp44 = icmp eq i64 %40, %41
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %land.lhs.true.41
  store i32 1, i32* %__r35, align 4
  br label %if.end.48

if.else.46:                                       ; preds = %land.lhs.true.41, %if.else.38
  %42 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst30, align 8
  %43 = load i64, i64* %__t32, align 8
  %call47 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %42, i64 %43) #7
  store i32 %call47, i32* %__r35, align 4
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.46, %if.then.45
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.then.37
  %44 = load i32, i32* %__r35, align 4
  store i32 %44, i32* %tmp50
  %45 = load i32, i32* %tmp50
  %tobool51 = icmp ne i32 %45, 0
  br i1 %tobool51, label %if.then.52, label %if.else.56

if.then.52:                                       ; preds = %if.end.49
  %46 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %name = getelementptr inbounds %struct._widget_value, %struct._widget_value* %46, i32 0, i32 1
  %47 = load i8*, i8** %name, align 8
  %call53 = call zeroext i1 @menu_separator_name_p(i8* %47)
  br i1 %call53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %if.then.52
  br label %for.end

if.end.55:                                        ; preds = %if.then.52
  br label %if.end.172

if.else.56:                                       ; preds = %if.end.49
  %48 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %49 = bitcast %struct._GtkWidget* %48 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %49, %struct._GTypeInstance** %__inst58, align 8
  %call61 = call i64 @gtk_check_menu_item_get_type() #8
  store i64 %call61, i64* %__t60, align 8
  %50 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst58, align 8
  %tobool64 = icmp ne %struct._GTypeInstance* %50, null
  br i1 %tobool64, label %if.else.66, label %if.then.65

if.then.65:                                       ; preds = %if.else.56
  store i32 0, i32* %__r63, align 4
  br label %if.end.77

if.else.66:                                       ; preds = %if.else.56
  %51 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst58, align 8
  %g_class67 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %51, i32 0, i32 0
  %52 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class67, align 8
  %tobool68 = icmp ne %struct._GTypeClass* %52, null
  br i1 %tobool68, label %land.lhs.true.69, label %if.else.74

land.lhs.true.69:                                 ; preds = %if.else.66
  %53 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst58, align 8
  %g_class70 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %53, i32 0, i32 0
  %54 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class70, align 8
  %g_type71 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %54, i32 0, i32 0
  %55 = load i64, i64* %g_type71, align 8
  %56 = load i64, i64* %__t60, align 8
  %cmp72 = icmp eq i64 %55, %56
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %land.lhs.true.69
  store i32 1, i32* %__r63, align 4
  br label %if.end.76

if.else.74:                                       ; preds = %land.lhs.true.69, %if.else.66
  %57 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst58, align 8
  %58 = load i64, i64* %__t60, align 8
  %call75 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %57, i64 %58) #7
  store i32 %call75, i32* %__r63, align 4
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.74, %if.then.73
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.then.65
  %59 = load i32, i32* %__r63, align 4
  store i32 %59, i32* %tmp78
  %60 = load i32, i32* %tmp78
  %tobool79 = icmp ne i32 %60, 0
  br i1 %tobool79, label %if.then.80, label %if.else.85

if.then.80:                                       ; preds = %if.end.77
  %61 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %button_type81 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %61, i32 0, i32 9
  %62 = load i32, i32* %button_type81, align 4
  %cmp82 = icmp ne i32 %62, 1
  br i1 %cmp82, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.then.80
  br label %for.end

if.end.84:                                        ; preds = %if.then.80
  %63 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %64 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @xg_update_toggle_item(%struct._widget_value* %63, %struct._GtkWidget* %64)
  %65 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %66 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %67 = load void ()*, void ()** %select_cb.addr, align 8
  %68 = load void ()*, void ()** %highlight_cb.addr, align 8
  %69 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  call void @xg_update_menu_item(%struct._widget_value* %65, %struct._GtkWidget* %66, void ()* %67, void ()* %68, %struct.xg_menu_cb_data_* %69)
  br label %if.end.171

if.else.85:                                       ; preds = %if.end.77
  %70 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %71 = bitcast %struct._GtkWidget* %70 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %71, %struct._GTypeInstance** %__inst87, align 8
  %call90 = call i64 @gtk_radio_menu_item_get_type() #8
  store i64 %call90, i64* %__t89, align 8
  %72 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst87, align 8
  %tobool93 = icmp ne %struct._GTypeInstance* %72, null
  br i1 %tobool93, label %if.else.95, label %if.then.94

if.then.94:                                       ; preds = %if.else.85
  store i32 0, i32* %__r92, align 4
  br label %if.end.106

if.else.95:                                       ; preds = %if.else.85
  %73 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst87, align 8
  %g_class96 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %73, i32 0, i32 0
  %74 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class96, align 8
  %tobool97 = icmp ne %struct._GTypeClass* %74, null
  br i1 %tobool97, label %land.lhs.true.98, label %if.else.103

land.lhs.true.98:                                 ; preds = %if.else.95
  %75 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst87, align 8
  %g_class99 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %75, i32 0, i32 0
  %76 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class99, align 8
  %g_type100 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %76, i32 0, i32 0
  %77 = load i64, i64* %g_type100, align 8
  %78 = load i64, i64* %__t89, align 8
  %cmp101 = icmp eq i64 %77, %78
  br i1 %cmp101, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %land.lhs.true.98
  store i32 1, i32* %__r92, align 4
  br label %if.end.105

if.else.103:                                      ; preds = %land.lhs.true.98, %if.else.95
  %79 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst87, align 8
  %80 = load i64, i64* %__t89, align 8
  %call104 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %79, i64 %80) #7
  store i32 %call104, i32* %__r92, align 4
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.103, %if.then.102
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.then.94
  %81 = load i32, i32* %__r92, align 4
  store i32 %81, i32* %tmp107
  %82 = load i32, i32* %tmp107
  %tobool108 = icmp ne i32 %82, 0
  br i1 %tobool108, label %if.then.109, label %if.else.114

if.then.109:                                      ; preds = %if.end.106
  %83 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %button_type110 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %83, i32 0, i32 9
  %84 = load i32, i32* %button_type110, align 4
  %cmp111 = icmp ne i32 %84, 2
  br i1 %cmp111, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %if.then.109
  br label %for.end

if.end.113:                                       ; preds = %if.then.109
  %85 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %86 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @xg_update_radio_item(%struct._widget_value* %85, %struct._GtkWidget* %86)
  %87 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %88 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %89 = load void ()*, void ()** %select_cb.addr, align 8
  %90 = load void ()*, void ()** %highlight_cb.addr, align 8
  %91 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  call void @xg_update_menu_item(%struct._widget_value* %87, %struct._GtkWidget* %88, void ()* %89, void ()* %90, %struct.xg_menu_cb_data_* %91)
  br label %if.end.170

if.else.114:                                      ; preds = %if.end.106
  %92 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %93 = bitcast %struct._GtkWidget* %92 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %93, %struct._GTypeInstance** %__inst116, align 8
  %call119 = call i64 @gtk_menu_item_get_type() #8
  store i64 %call119, i64* %__t118, align 8
  %94 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst116, align 8
  %tobool122 = icmp ne %struct._GTypeInstance* %94, null
  br i1 %tobool122, label %if.else.124, label %if.then.123

if.then.123:                                      ; preds = %if.else.114
  store i32 0, i32* %__r121, align 4
  br label %if.end.135

if.else.124:                                      ; preds = %if.else.114
  %95 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst116, align 8
  %g_class125 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %95, i32 0, i32 0
  %96 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class125, align 8
  %tobool126 = icmp ne %struct._GTypeClass* %96, null
  br i1 %tobool126, label %land.lhs.true.127, label %if.else.132

land.lhs.true.127:                                ; preds = %if.else.124
  %97 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst116, align 8
  %g_class128 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %97, i32 0, i32 0
  %98 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class128, align 8
  %g_type129 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %98, i32 0, i32 0
  %99 = load i64, i64* %g_type129, align 8
  %100 = load i64, i64* %__t118, align 8
  %cmp130 = icmp eq i64 %99, %100
  br i1 %cmp130, label %if.then.131, label %if.else.132

if.then.131:                                      ; preds = %land.lhs.true.127
  store i32 1, i32* %__r121, align 4
  br label %if.end.134

if.else.132:                                      ; preds = %land.lhs.true.127, %if.else.124
  %101 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst116, align 8
  %102 = load i64, i64* %__t118, align 8
  %call133 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %101, i64 %102) #7
  store i32 %call133, i32* %__r121, align 4
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.132, %if.then.131
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %if.then.123
  %103 = load i32, i32* %__r121, align 4
  store i32 %103, i32* %tmp136
  %104 = load i32, i32* %tmp136
  %tobool137 = icmp ne i32 %104, 0
  br i1 %tobool137, label %if.then.138, label %if.else.168

if.then.138:                                      ; preds = %if.end.135
  %105 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %106 = bitcast %struct._GtkWidget* %105 to %struct._GTypeInstance*
  %call140 = call i64 @gtk_menu_item_get_type() #8
  %call141 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %106, i64 %call140)
  %107 = bitcast %struct._GTypeInstance* %call141 to %struct._GtkMenuItem*
  store %struct._GtkMenuItem* %107, %struct._GtkMenuItem** %witem, align 8
  %108 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %button_type143 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %108, i32 0, i32 9
  %109 = load i32, i32* %button_type143, align 4
  %cmp144 = icmp ne i32 %109, 0
  br i1 %cmp144, label %if.then.147, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.138
  %110 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %name145 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %110, i32 0, i32 1
  %111 = load i8*, i8** %name145, align 8
  %call146 = call zeroext i1 @menu_separator_name_p(i8* %111)
  br i1 %call146, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %lor.lhs.false, %if.then.138
  br label %for.end

if.end.148:                                       ; preds = %lor.lhs.false
  %112 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %113 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %114 = load void ()*, void ()** %select_cb.addr, align 8
  %115 = load void ()*, void ()** %highlight_cb.addr, align 8
  %116 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  call void @xg_update_menu_item(%struct._widget_value* %112, %struct._GtkWidget* %113, void ()* %114, void ()* %115, %struct.xg_menu_cb_data_* %116)
  %117 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %call149 = call %struct._GtkWidget* @gtk_menu_item_get_submenu(%struct._GtkMenuItem* %117)
  store %struct._GtkWidget* %call149, %struct._GtkWidget** %sub, align 8
  %118 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  %tobool150 = icmp ne %struct._GtkWidget* %118, null
  br i1 %tobool150, label %land.lhs.true.151, label %if.else.156

land.lhs.true.151:                                ; preds = %if.end.148
  %119 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %119, i32 0, i32 10
  %120 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  %tobool152 = icmp ne %struct._widget_value* %120, null
  br i1 %tobool152, label %if.else.156, label %if.then.153

if.then.153:                                      ; preds = %land.lhs.true.151
  %121 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  %122 = bitcast %struct._GtkWidget* %121 to %struct._GTypeInstance*
  %call154 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %122, i64 80)
  %123 = bitcast %struct._GTypeInstance* %call154 to %struct._GObject*
  %124 = bitcast %struct._GObject* %123 to i8*
  %call155 = call i8* @g_object_ref(i8* %124)
  %125 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  call void @gtk_menu_item_set_submenu(%struct._GtkMenuItem* %125, %struct._GtkWidget* null)
  %126 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %126)
  br label %if.end.167

if.else.156:                                      ; preds = %land.lhs.true.151, %if.end.148
  %127 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %contents157 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %127, i32 0, i32 10
  %128 = load %struct._widget_value*, %struct._widget_value** %contents157, align 8
  %tobool158 = icmp ne %struct._widget_value* %128, null
  br i1 %tobool158, label %if.then.159, label %if.end.166

if.then.159:                                      ; preds = %if.else.156
  %129 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  %130 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %131 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %contents161 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %131, i32 0, i32 10
  %132 = load %struct._widget_value*, %struct._widget_value** %contents161, align 8
  %133 = load void ()*, void ()** %select_cb.addr, align 8
  %134 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %135 = load void ()*, void ()** %highlight_cb.addr, align 8
  %136 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call162 = call %struct._GtkWidget* @xg_update_submenu(%struct._GtkWidget* %129, %struct.frame* %130, %struct._widget_value* %132, void ()* %133, void ()* %134, void ()* %135, %struct.xg_menu_cb_data_* %136)
  store %struct._GtkWidget* %call162, %struct._GtkWidget** %nsub, align 8
  %137 = load %struct._GtkWidget*, %struct._GtkWidget** %nsub, align 8
  %138 = load %struct._GtkWidget*, %struct._GtkWidget** %sub, align 8
  %cmp163 = icmp ne %struct._GtkWidget* %137, %138
  br i1 %cmp163, label %if.then.164, label %if.end.165

if.then.164:                                      ; preds = %if.then.159
  %139 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem, align 8
  %140 = load %struct._GtkWidget*, %struct._GtkWidget** %nsub, align 8
  call void @gtk_menu_item_set_submenu(%struct._GtkMenuItem* %139, %struct._GtkWidget* %140)
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.164, %if.then.159
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.165, %if.else.156
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.then.153
  br label %if.end.169

if.else.168:                                      ; preds = %if.end.135
  br label %for.end

if.end.169:                                       ; preds = %if.end.167
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.end.113
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %if.end.84
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.171, %if.end.55
  br label %for.inc

for.inc:                                          ; preds = %if.end.172
  %141 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool173 = icmp ne %struct._GList* %141, null
  br i1 %tobool173, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc
  %142 = load %struct._GList*, %struct._GList** %iter, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %142, i32 0, i32 1
  %143 = load %struct._GList*, %struct._GList** %next, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %143, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %iter, align 8
  %144 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %next174 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %144, i32 0, i32 12
  %145 = load %struct._widget_value*, %struct._widget_value** %next174, align 8
  store %struct._widget_value* %145, %struct._widget_value** %cur, align 8
  br label %for.cond

for.end:                                          ; preds = %if.else.168, %if.then.147, %if.then.112, %if.then.83, %if.then.54, %land.end
  %146 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool175 = icmp ne %struct._GList* %146, null
  br i1 %tobool175, label %if.then.176, label %if.end.183

if.then.176:                                      ; preds = %for.end
  %147 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %tobool177 = icmp ne %struct._widget_value* %147, null
  br i1 %tobool177, label %land.lhs.true.178, label %if.else.181

land.lhs.true.178:                                ; preds = %if.then.176
  %148 = load %struct._GList*, %struct._GList** %first_radio, align 8
  %tobool179 = icmp ne %struct._GList* %148, null
  br i1 %tobool179, label %if.then.180, label %if.else.181

if.then.180:                                      ; preds = %land.lhs.true.178
  %149 = load %struct._GList*, %struct._GList** %first_radio, align 8
  call void @xg_destroy_widgets(%struct._GList* %149)
  br label %if.end.182

if.else.181:                                      ; preds = %land.lhs.true.178, %if.then.176
  %150 = load %struct._GList*, %struct._GList** %iter, align 8
  call void @xg_destroy_widgets(%struct._GList* %150)
  br label %if.end.182

if.end.182:                                       ; preds = %if.else.181, %if.then.180
  br label %if.end.183

if.end.183:                                       ; preds = %if.end.182, %for.end
  %151 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %tobool184 = icmp ne %struct._widget_value* %151, null
  br i1 %tobool184, label %if.then.185, label %if.end.187

if.then.185:                                      ; preds = %if.end.183
  %152 = load %struct._widget_value*, %struct._widget_value** %cur, align 8
  %153 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %154 = load void ()*, void ()** %select_cb.addr, align 8
  %155 = load void ()*, void ()** %deactivate_cb.addr, align 8
  %156 = load void ()*, void ()** %highlight_cb.addr, align 8
  %157 = load %struct._GtkWidget*, %struct._GtkWidget** %submenu.addr, align 8
  %158 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %call186 = call %struct._GtkWidget* @create_menus(%struct._widget_value* %152, %struct.frame* %153, void ()* %154, void ()* %155, void ()* %156, i1 zeroext false, i1 zeroext false, %struct._GtkWidget* %157, %struct.xg_menu_cb_data_* %158, i8* null)
  store %struct._GtkWidget* %call186, %struct._GtkWidget** %newsub, align 8
  br label %if.end.187

if.end.187:                                       ; preds = %if.then.185, %if.end.183
  %159 = load %struct._GList*, %struct._GList** %list, align 8
  %tobool188 = icmp ne %struct._GList* %159, null
  br i1 %tobool188, label %if.then.189, label %if.end.190

if.then.189:                                      ; preds = %if.end.187
  %160 = load %struct._GList*, %struct._GList** %list, align 8
  call void @g_list_free(%struct._GList* %160)
  br label %if.end.190

if.end.190:                                       ; preds = %if.then.189, %if.end.187
  %161 = load %struct._GtkWidget*, %struct._GtkWidget** %newsub, align 8
  ret %struct._GtkWidget* %161
}

declare void @gtk_menu_item_set_submenu(%struct._GtkMenuItem*, %struct._GtkWidget*) #1

declare void @g_list_free(%struct._GList*) #1

; Function Attrs: nounwind uwtable
define void @xg_update_frame_menubar(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %req = alloca %struct._GtkRequisition, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 16
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %3, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget2 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 16
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget2, align 8
  %call = call i32 @gtk_widget_get_mapped(%struct._GtkWidget* %5)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget4 = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 16
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget4, align 8
  %tobool5 = icmp ne %struct._GtkWidget* %7, null
  br i1 %tobool5, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget6 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 16
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget6, align 8
  %call7 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %9)
  %tobool8 = icmp ne %struct._GtkWidget* %call7, null
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true
  br label %return

if.end.10:                                        ; preds = %land.lhs.true, %if.end
  call void @block_input()
  %10 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 14
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget, align 8
  %12 = bitcast %struct._GtkWidget* %11 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_box_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %12, i64 %call11)
  %13 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkBox*
  %14 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget13 = getelementptr inbounds %struct.x_output, %struct.x_output* %14, i32 0, i32 16
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget13, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %13, %struct._GtkWidget* %15, i32 0, i32 0, i32 0)
  %16 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget14 = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 14
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget14, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_box_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 %call15)
  %19 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkBox*
  %20 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget17 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 16
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget17, align 8
  call void @gtk_box_reorder_child(%struct._GtkBox* %19, %struct._GtkWidget* %21, i32 0)
  %22 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget18 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 16
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget18, align 8
  %24 = bitcast %struct._GtkWidget* %23 to i8*
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %26 = bitcast %struct.frame* %25 to i8*
  %call19 = call i64 @g_signal_connect_data(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @menubar_map_cb to void ()*), i8* %26, void (i8*, %struct._GClosure*)* null, i32 0)
  %27 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget20 = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 16
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget20, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %28)
  %29 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget21 = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 16
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget21, align 8
  call void @gtk_widget_size_request(%struct._GtkWidget* %30, %struct._GtkRequisition* %req)
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 0
  %33 = load i32, i32* %menubar_height, align 4
  %height = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %34 = load i32, i32* %height, align 4
  %cmp = icmp ne i32 %33, %34
  br i1 %cmp, label %if.then.24, label %if.end.30

if.then.24:                                       ; preds = %if.end.10
  %height25 = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %35 = load i32, i32* %height25, align 4
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %37 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %menubar_height28 = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 0
  store i32 %35, i32* %menubar_height28, align 4
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call29 = call i64 @builtin_lisp_symbol(i32 653)
  call void @adjust_frame_size(%struct.frame* %38, i32 -1, i32 -1, i32 2, i1 zeroext false, i64 %call29)
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.24, %if.end.10
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end.30, %if.then.9, %if.then
  ret void
}

declare %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget*) #1

declare void @gtk_box_reorder_child(%struct._GtkBox*, %struct._GtkWidget*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @menubar_map_cb(%struct._GtkWidget* %w, i8* %user_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %user_data.addr = alloca i8*, align 8
  %req = alloca %struct._GtkRequisition, align 4
  %f = alloca %struct.frame*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.frame*
  store %struct.frame* %1, %struct.frame** %f, align 8
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  call void @gtk_widget_size_request(%struct._GtkWidget* %2, %struct._GtkRequisition* %req)
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %3, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 0
  %5 = load i32, i32* %menubar_height, align 4
  %height = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %6 = load i32, i32* %height, align 4
  %cmp = icmp ne i32 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %height1 = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %7 = load i32, i32* %height1, align 4
  %8 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %9 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %menubar_height4 = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 0
  store i32 %7, i32* %menubar_height4, align 4
  %10 = load %struct.frame*, %struct.frame** %f, align 8
  %call = call i64 @builtin_lisp_symbol(i32 653)
  call void @adjust_frame_size(%struct.frame* %10, i32 -1, i32 -1, i32 2, i1 zeroext false, i64 %call)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_frame_menubar(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 16
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @block_input()
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 14
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget, align 8
  %6 = bitcast %struct._GtkWidget* %5 to %struct._GTypeInstance*
  %call = call i64 @gtk_container_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 %call)
  %7 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkContainer*
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget3 = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 16
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget3, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %7, %struct._GtkWidget* %9)
  %10 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget4 = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 16
  store %struct._GtkWidget* null, %struct._GtkWidget** %menubar_widget4, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 0
  store i32 0, i32* %menubar_height, align 4
  %13 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 653)
  call void @adjust_frame_size(%struct.frame* %13, i32 -1, i32 -1, i32 2, i1 zeroext false, i64 %call7)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @gtk_container_remove(%struct._GtkContainer*, %struct._GtkWidget*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_event_is_for_menubar(%struct.frame* %f, %union._XEvent* %event) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %x = alloca %struct.x_output*, align 8
  %iter = alloca %struct._GList*, align 8
  %rec = alloca %struct._GdkRectangle, align 4
  %list = alloca %struct._GList*, align 8
  %gdpy = alloca %struct._GdkDisplay*, align 8
  %gw = alloca %struct._GdkDrawable*, align 8
  %gevent = alloca %union._GdkEvent, align 8
  %gwdesc = alloca %struct._GtkWidget*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst48 = alloca %struct._GTypeInstance*, align 8
  %__t50 = alloca i64, align 8
  %__r53 = alloca i32, align 4
  %tmp68 = alloca i32, align 4
  %w = alloca %struct._GtkWidget*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 16
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton = bitcast %union._XEvent* %4 to %struct.XButtonEvent*
  %x2 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton, i32 0, i32 8
  %5 = load i32, i32* %x2, align 4
  %cmp = icmp sge i32 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.then.18

land.lhs.true:                                    ; preds = %if.end
  %6 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton3 = bitcast %union._XEvent* %6 to %struct.XButtonEvent*
  %x4 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton3, i32 0, i32 8
  %7 = load i32, i32* %x4, align 4
  %8 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %pixel_width = getelementptr inbounds %struct.frame, %struct.frame* %8, i32 0, i32 46
  %9 = load i32, i32* %pixel_width, align 4
  %cmp5 = icmp slt i32 %7, %9
  br i1 %cmp5, label %land.lhs.true.6, label %if.then.18

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %10 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton7 = bitcast %union._XEvent* %10 to %struct.XButtonEvent*
  %y = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton7, i32 0, i32 9
  %11 = load i32, i32* %y, align 4
  %cmp8 = icmp sge i32 %11, 0
  br i1 %cmp8, label %land.lhs.true.9, label %if.then.18

land.lhs.true.9:                                  ; preds = %land.lhs.true.6
  %12 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton10 = bitcast %union._XEvent* %12 to %struct.XButtonEvent*
  %y11 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton10, i32 0, i32 9
  %13 = load i32, i32* %y11, align 4
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data12 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 62
  %x13 = bitcast %union.output_data* %output_data12 to %struct.x_output**
  %15 = load %struct.x_output*, %struct.x_output** %x13, align 8
  %menubar_height = getelementptr inbounds %struct.x_output, %struct.x_output* %15, i32 0, i32 0
  %16 = load i32, i32* %menubar_height, align 4
  %cmp14 = icmp slt i32 %13, %16
  br i1 %cmp14, label %land.lhs.true.15, label %if.then.18

land.lhs.true.15:                                 ; preds = %land.lhs.true.9
  %17 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton16 = bitcast %union._XEvent* %17 to %struct.XButtonEvent*
  %same_screen = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton16, i32 0, i32 14
  %18 = load i32, i32* %same_screen, align 4
  %tobool17 = icmp ne i32 %18, 0
  br i1 %tobool17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %land.lhs.true.15, %land.lhs.true.9, %land.lhs.true.6, %land.lhs.true, %if.end
  store i1 false, i1* %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true.15
  %19 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data20 = getelementptr inbounds %struct.frame, %struct.frame* %19, i32 0, i32 62
  %x21 = bitcast %union.output_data* %output_data20 to %struct.x_output**
  %20 = load %struct.x_output*, %struct.x_output** %x21, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 44
  %21 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %21, i32 0, i32 2
  %22 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %22)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  %23 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %24 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton22 = bitcast %union._XEvent* %24 to %struct.XButtonEvent*
  %window = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton22, i32 0, i32 4
  %25 = load i64, i64* %window, align 8
  %call23 = call i8* @gdk_xid_table_lookup_for_display(%struct._GdkDisplay* %23, i64 %25)
  %26 = bitcast i8* %call23 to %struct._GdkDrawable*
  store %struct._GdkDrawable* %26, %struct._GdkDrawable** %gw, align 8
  %27 = load %struct._GdkDrawable*, %struct._GdkDrawable** %gw, align 8
  %tobool24 = icmp ne %struct._GdkDrawable* %27, null
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.end.19
  store i1 false, i1* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.19
  %28 = load %struct._GdkDrawable*, %struct._GdkDrawable** %gw, align 8
  %any = bitcast %union._GdkEvent* %gevent to %struct._GdkEventAny*
  %window27 = getelementptr inbounds %struct._GdkEventAny, %struct._GdkEventAny* %any, i32 0, i32 1
  store %struct._GdkDrawable* %28, %struct._GdkDrawable** %window27, align 8
  %any28 = bitcast %union._GdkEvent* %gevent to %struct._GdkEventAny*
  %type = getelementptr inbounds %struct._GdkEventAny, %struct._GdkEventAny* %any28, i32 0, i32 0
  store i32 -1, i32* %type, align 4
  %call29 = call %struct._GtkWidget* @gtk_get_event_widget(%union._GdkEvent* %gevent)
  store %struct._GtkWidget* %call29, %struct._GtkWidget** %gwdesc, align 8
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %tobool30 = icmp ne %struct._GtkWidget* %29, null
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %if.end.26
  store i1 false, i1* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.26
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %31 = bitcast %struct._GtkWidget* %30 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %31, %struct._GTypeInstance** %__inst, align 8
  %call33 = call i64 @gtk_menu_bar_get_type() #8
  store i64 %call33, i64* %__t, align 8
  %32 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool34 = icmp ne %struct._GTypeInstance* %32, null
  br i1 %tobool34, label %if.else, label %if.then.35

if.then.35:                                       ; preds = %if.end.32
  store i32 0, i32* %__r, align 4
  br label %if.end.44

if.else:                                          ; preds = %if.end.32
  %33 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %33, i32 0, i32 0
  %34 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool36 = icmp ne %struct._GTypeClass* %34, null
  br i1 %tobool36, label %land.lhs.true.37, label %if.else.41

land.lhs.true.37:                                 ; preds = %if.else
  %35 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class38 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %35, i32 0, i32 0
  %36 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class38, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %36, i32 0, i32 0
  %37 = load i64, i64* %g_type, align 8
  %38 = load i64, i64* %__t, align 8
  %cmp39 = icmp eq i64 %37, %38
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %land.lhs.true.37
  store i32 1, i32* %__r, align 4
  br label %if.end.43

if.else.41:                                       ; preds = %land.lhs.true.37, %if.else
  %39 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %40 = load i64, i64* %__t, align 8
  %call42 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %39, i64 %40) #7
  store i32 %call42, i32* %__r, align 4
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.41, %if.then.40
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.then.35
  %41 = load i32, i32* %__r, align 4
  store i32 %41, i32* %tmp
  %42 = load i32, i32* %tmp
  %tobool45 = icmp ne i32 %42, 0
  br i1 %tobool45, label %if.end.75, label %land.lhs.true.46

land.lhs.true.46:                                 ; preds = %if.end.44
  %43 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %44 = bitcast %struct._GtkWidget* %43 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %44, %struct._GTypeInstance** %__inst48, align 8
  %call51 = call i64 @gtk_menu_item_get_type() #8
  store i64 %call51, i64* %__t50, align 8
  %45 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst48, align 8
  %tobool54 = icmp ne %struct._GTypeInstance* %45, null
  br i1 %tobool54, label %if.else.56, label %if.then.55

if.then.55:                                       ; preds = %land.lhs.true.46
  store i32 0, i32* %__r53, align 4
  br label %if.end.67

if.else.56:                                       ; preds = %land.lhs.true.46
  %46 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst48, align 8
  %g_class57 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %46, i32 0, i32 0
  %47 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class57, align 8
  %tobool58 = icmp ne %struct._GTypeClass* %47, null
  br i1 %tobool58, label %land.lhs.true.59, label %if.else.64

land.lhs.true.59:                                 ; preds = %if.else.56
  %48 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst48, align 8
  %g_class60 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %48, i32 0, i32 0
  %49 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class60, align 8
  %g_type61 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %49, i32 0, i32 0
  %50 = load i64, i64* %g_type61, align 8
  %51 = load i64, i64* %__t50, align 8
  %cmp62 = icmp eq i64 %50, %51
  br i1 %cmp62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %land.lhs.true.59
  store i32 1, i32* %__r53, align 4
  br label %if.end.66

if.else.64:                                       ; preds = %land.lhs.true.59, %if.else.56
  %52 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst48, align 8
  %53 = load i64, i64* %__t50, align 8
  %call65 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %52, i64 %53) #7
  store i32 %call65, i32* %__r53, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.64, %if.then.63
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.55
  %54 = load i32, i32* %__r53, align 4
  store i32 %54, i32* %tmp68
  %55 = load i32, i32* %tmp68
  %tobool69 = icmp ne i32 %55, 0
  br i1 %tobool69, label %if.end.75, label %land.lhs.true.70

land.lhs.true.70:                                 ; preds = %if.end.67
  %56 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget71 = getelementptr inbounds %struct.x_output, %struct.x_output* %56, i32 0, i32 16
  %57 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget71, align 8
  %58 = load %struct._GtkWidget*, %struct._GtkWidget** %gwdesc, align 8
  %call72 = call i32 @gtk_widget_is_ancestor(%struct._GtkWidget* %57, %struct._GtkWidget* %58)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.end.75, label %if.then.74

if.then.74:                                       ; preds = %land.lhs.true.70
  store i1 false, i1* %retval
  br label %return

if.end.75:                                        ; preds = %land.lhs.true.70, %if.end.67, %if.end.44
  %59 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget76 = getelementptr inbounds %struct.x_output, %struct.x_output* %59, i32 0, i32 16
  %60 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget76, align 8
  %61 = bitcast %struct._GtkWidget* %60 to %struct._GTypeInstance*
  %call77 = call i64 @gtk_container_get_type() #8
  %call78 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %61, i64 %call77)
  %62 = bitcast %struct._GTypeInstance* %call78 to %struct._GtkContainer*
  %call79 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %62)
  store %struct._GList* %call79, %struct._GList** %list, align 8
  %63 = load %struct._GList*, %struct._GList** %list, align 8
  %tobool80 = icmp ne %struct._GList* %63, null
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %if.end.75
  store i1 false, i1* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.75
  %64 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton83 = bitcast %union._XEvent* %64 to %struct.XButtonEvent*
  %x84 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton83, i32 0, i32 8
  %65 = load i32, i32* %x84, align 4
  %x85 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %rec, i32 0, i32 0
  store i32 %65, i32* %x85, align 4
  %66 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton86 = bitcast %union._XEvent* %66 to %struct.XButtonEvent*
  %y87 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton86, i32 0, i32 9
  %67 = load i32, i32* %y87, align 4
  %y88 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %rec, i32 0, i32 1
  store i32 %67, i32* %y88, align 4
  %width = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %rec, i32 0, i32 2
  store i32 1, i32* %width, align 4
  %height = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %rec, i32 0, i32 3
  store i32 1, i32* %height, align 4
  %68 = load %struct._GList*, %struct._GList** %list, align 8
  store %struct._GList* %68, %struct._GList** %iter, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end, %if.end.82
  %69 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool89 = icmp ne %struct._GList* %69, null
  br i1 %tobool89, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %70 = load %struct._GList*, %struct._GList** %iter, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %70, i32 0, i32 0
  %71 = load i8*, i8** %data, align 8
  %72 = bitcast i8* %71 to %struct._GTypeInstance*
  %call91 = call i64 @gtk_widget_get_type() #8
  %call92 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %72, i64 %call91)
  %73 = bitcast %struct._GTypeInstance* %call92 to %struct._GtkWidget*
  store %struct._GtkWidget* %73, %struct._GtkWidget** %w, align 8
  %74 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %call93 = call i32 @gtk_widget_get_mapped(%struct._GtkWidget* %74)
  %tobool94 = icmp ne i32 %call93, 0
  br i1 %tobool94, label %land.lhs.true.95, label %if.end.99

land.lhs.true.95:                                 ; preds = %for.body
  %75 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %call96 = call i32 @gtk_widget_intersect(%struct._GtkWidget* %75, %struct._GdkRectangle* %rec, %struct._GdkRectangle* null)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %land.lhs.true.95
  br label %for.end

if.end.99:                                        ; preds = %land.lhs.true.95, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.99
  %76 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool100 = icmp ne %struct._GList* %76, null
  br i1 %tobool100, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc
  %77 = load %struct._GList*, %struct._GList** %iter, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %77, i32 0, i32 1
  %78 = load %struct._GList*, %struct._GList** %next, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %78, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %iter, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.98, %for.cond
  %79 = load %struct._GList*, %struct._GList** %list, align 8
  call void @g_list_free(%struct._GList* %79)
  %80 = load %struct._GList*, %struct._GList** %iter, align 8
  %cmp101 = icmp ne %struct._GList* %80, null
  store i1 %cmp101, i1* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.81, %if.then.74, %if.then.31, %if.then.25, %if.then.18, %if.then
  %81 = load i1, i1* %retval
  ret i1 %81
}

; Function Attrs: nounwind readnone
declare i64 @gtk_menu_bar_get_type() #3

; Function Attrs: nounwind readonly
declare i32 @g_type_check_instance_is_a(%struct._GTypeInstance*, i64) #2

declare i32 @gtk_widget_is_ancestor(%struct._GtkWidget*, %struct._GtkWidget*) #1

declare i32 @gtk_widget_intersect(%struct._GtkWidget*, %struct._GdkRectangle*, %struct._GdkRectangle*) #1

; Function Attrs: nounwind uwtable
define i32 @xg_get_default_scrollbar_width() #0 {
entry:
  %0 = load i32, i32* @scroll_bar_width_for_theme, align 4
  %call = call i32 @xg_get_gdk_scale()
  %mul = mul nsw i32 %0, %call
  ret i32 %mul
}

; Function Attrs: nounwind uwtable
define i32 @xg_get_default_scrollbar_height() #0 {
entry:
  %0 = load i32, i32* @scroll_bar_width_for_theme, align 4
  %call = call i32 @xg_get_gdk_scale()
  %mul = mul nsw i32 %0, %call
  ret i32 %mul
}

; Function Attrs: nounwind uwtable
define i64 @xg_get_scroll_id_for_window(%struct._XDisplay* %dpy, i64 %wid) #0 {
entry:
  %retval = alloca i64, align 8
  %dpy.addr = alloca %struct._XDisplay*, align 8
  %wid.addr = alloca i64, align 8
  %idx = alloca i64, align 8
  %w = alloca %struct._GtkWidget*, align 8
  store %struct._XDisplay* %dpy, %struct._XDisplay** %dpy.addr, align 8
  store i64 %wid, i64* %wid.addr, align 8
  %0 = load %struct._XDisplay*, %struct._XDisplay** %dpy.addr, align 8
  %1 = load i64, i64* %wid.addr, align 8
  %call = call %struct._GtkWidget* @xg_win_to_widget(%struct._XDisplay* %0, i64 %1)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %w, align 8
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %tobool = icmp ne %struct._GtkWidget* %2, null
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  store i64 0, i64* %idx, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i64, i64* %idx, align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %cmp = icmp slt i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %idx, align 8
  %6 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %6, i64 %5
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %arrayidx, align 8
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %cmp1 = icmp eq %struct._GtkWidget* %7, %8
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %for.body
  %9 = load i64, i64* %idx, align 8
  store i64 %9, i64* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i64, i64* %idx, align 8
  %inc = add nsw i64 %10, 1
  store i64 %inc, i64* %idx, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.3

if.end.3:                                         ; preds = %for.end, %entry
  store i64 -1, i64* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2
  %11 = load i64, i64* %retval
  ret i64 %11
}

; Function Attrs: nounwind uwtable
define void @xg_create_scroll_bar(%struct.frame* %f, %struct.scroll_bar* %bar, void ()* %scroll_callback, void ()* %end_callback, i8* %scroll_bar_name) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %scroll_callback.addr = alloca void ()*, align 8
  %end_callback.addr = alloca void ()*, align 8
  %scroll_bar_name.addr = alloca i8*, align 8
  %wscroll = alloca %struct._GtkWidget*, align 8
  %webox = alloca %struct._GtkWidget*, align 8
  %scroll_id = alloca i64, align 8
  %vadj = alloca %struct._GtkObject*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store void ()* %scroll_callback, void ()** %scroll_callback.addr, align 8
  store void ()* %end_callback, void ()** %end_callback.addr, align 8
  store i8* %scroll_bar_name, i8** %scroll_bar_name.addr, align 8
  %call = call %struct._GtkObject* @gtk_adjustment_new(double 1.000000e+00, double 1.000000e+00, double 1.000000e+07, double 1.000000e-01, double 1.000000e-01, double 1.000000e-01)
  store %struct._GtkObject* %call, %struct._GtkObject** %vadj, align 8
  %0 = load %struct._GtkObject*, %struct._GtkObject** %vadj, align 8
  %1 = bitcast %struct._GtkObject* %0 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_adjustment_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call1)
  %2 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkAdjustment*
  %call3 = call %struct._GtkWidget* @gtk_vscrollbar_new(%struct._GtkAdjustment* %2)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %wscroll, align 8
  %call4 = call %struct._GtkWidget* @gtk_event_box_new()
  store %struct._GtkWidget* %call4, %struct._GtkWidget** %webox, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %4 = load i8*, i8** %scroll_bar_name.addr, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %3, i8* %4)
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %6 = bitcast %struct._GtkWidget* %5 to %struct._GTypeInstance*
  %call5 = call i64 @gtk_range_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 %call5)
  %7 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkRange*
  call void @gtk_range_set_update_policy(%struct._GtkRange* %7, i32 0)
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %9 = bitcast %struct._GtkWidget* %8 to %struct._GTypeInstance*
  %call7 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %9, i64 80)
  %10 = bitcast %struct._GTypeInstance* %call7 to %struct._GObject*
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = bitcast %struct.frame* %11 to i8*
  call void @g_object_set_data(%struct._GObject* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* %12)
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %call8 = call i64 @xg_store_widget_in_map(%struct._GtkWidget* %13)
  store i64 %call8, i64* %scroll_id, align 8
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  %call9 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %15, i64 80)
  %16 = bitcast %struct._GTypeInstance* %call9 to %struct._GObject*
  %17 = bitcast %struct._GObject* %16 to i8*
  %18 = load i64, i64* %scroll_id, align 8
  %19 = inttoptr i64 %18 to i8*
  %call10 = call i64 @g_signal_connect_data(i8* %17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @xg_gtk_scroll_destroy to void ()*), i8* %19, void (i8*, %struct._GClosure*)* null, i32 0)
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 80)
  %22 = bitcast %struct._GTypeInstance* %call11 to %struct._GObject*
  %23 = bitcast %struct._GObject* %22 to i8*
  %24 = load void ()*, void ()** %scroll_callback.addr, align 8
  %25 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %26 = bitcast %struct.scroll_bar* %25 to i8*
  %call12 = call i64 @g_signal_connect_data(i8* %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0), void ()* %24, i8* %26, void (i8*, %struct._GClosure*)* null, i32 0)
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 80)
  %29 = bitcast %struct._GTypeInstance* %call13 to %struct._GObject*
  %30 = bitcast %struct._GObject* %29 to i8*
  %31 = load void ()*, void ()** %end_callback.addr, align 8
  %32 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %33 = bitcast %struct.scroll_bar* %32 to i8*
  %call14 = call i64 @g_signal_connect_data(i8* %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25, i32 0, i32 0), void ()* %31, i8* %33, void (i8*, %struct._GClosure*)* null, i32 0)
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %35 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 13
  %36 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %37 = bitcast %struct._GtkWidget* %36 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_fixed_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %37, i64 %call15)
  %38 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkFixed*
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %webox, align 8
  call void @gtk_fixed_put(%struct._GtkFixed* %38, %struct._GtkWidget* %39, i32 -1, i32 -1)
  %40 = load %struct._GtkWidget*, %struct._GtkWidget** %webox, align 8
  %41 = bitcast %struct._GtkWidget* %40 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_container_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %41, i64 %call17)
  %42 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkContainer*
  %43 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_container_add(%struct._GtkContainer* %42, %struct._GtkWidget* %43)
  %44 = load %struct._GtkWidget*, %struct._GtkWidget** %webox, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 44
  %47 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %xg_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %47, i32 0, i32 20
  %48 = load %struct._GdkCursor*, %struct._GdkCursor** %xg_cursor, align 8
  call void @xg_set_cursor(%struct._GtkWidget* %44, %struct._GdkCursor* %48)
  %49 = load i64, i64* %scroll_id, align 8
  %50 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %50, i32 0, i32 4
  store i64 %49, i64* %x_window, align 8
  %51 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %51, i32 0, i32 12
  store i8 0, i8* %horizontal, align 1
  ret void
}

declare %struct._GtkObject* @gtk_adjustment_new(double, double, double, double, double, double) #1

declare %struct._GtkWidget* @gtk_vscrollbar_new(%struct._GtkAdjustment*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_adjustment_get_type() #3

declare %struct._GtkWidget* @gtk_event_box_new() #1

declare void @gtk_range_set_update_policy(%struct._GtkRange*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_range_get_type() #3

; Function Attrs: nounwind uwtable
define internal i64 @xg_store_widget_in_map(%struct._GtkWidget* %w) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %i = alloca i64, align 8
  %new_size = alloca i64, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 2), align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %cmp1 = icmp ult i64 -33, %2
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  call void @memory_full(i64 -1) #9
  unreachable

if.end:                                           ; preds = %if.then
  %3 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %add = add nsw i64 %3, 32
  store i64 %add, i64* %new_size, align 8
  %4 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %5 = bitcast %struct._GtkWidget** %4 to i8*
  %6 = load i64, i64* %new_size, align 8
  %call = call i8* @xnrealloc(i8* %5, i64 %6, i64 8)
  %7 = bitcast i8* %call to %struct._GtkWidget**
  store %struct._GtkWidget** %7, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %8 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  store i64 %8, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %new_size, align 8
  %cmp3 = icmp slt i64 %9, %10
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i64, i64* %i, align 8
  %12 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %12, i64 %11
  store %struct._GtkWidget* null, %struct._GtkWidget** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i64, i64* %i, align 8
  %inc = add nsw i64 %13, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %14 = load i64, i64* %new_size, align 8
  store i64 %14, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  br label %if.end.4

if.end.4:                                         ; preds = %for.end, %entry
  store i64 0, i64* %i, align 8
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.13, %if.end.4
  %15 = load i64, i64* %i, align 8
  %16 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %cmp6 = icmp slt i64 %15, %16
  br i1 %cmp6, label %for.body.7, label %for.end.15

for.body.7:                                       ; preds = %for.cond.5
  %17 = load i64, i64* %i, align 8
  %18 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx8 = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %18, i64 %17
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %arrayidx8, align 8
  %tobool = icmp ne %struct._GtkWidget* %19, null
  br i1 %tobool, label %if.end.12, label %if.then.9

if.then.9:                                        ; preds = %for.body.7
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %21 = load i64, i64* %i, align 8
  %22 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx10 = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %22, i64 %21
  store %struct._GtkWidget* %20, %struct._GtkWidget** %arrayidx10, align 8
  %23 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 2), align 8
  %inc11 = add nsw i64 %23, 1
  store i64 %inc11, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 2), align 8
  %24 = load i64, i64* %i, align 8
  ret i64 %24

if.end.12:                                        ; preds = %for.body.7
  br label %for.inc.13

for.inc.13:                                       ; preds = %if.end.12
  %25 = load i64, i64* %i, align 8
  %inc14 = add nsw i64 %25, 1
  store i64 %inc14, i64* %i, align 8
  br label %for.cond.5

for.end.15:                                       ; preds = %for.cond.5
  call void @emacs_abort() #9
  unreachable
}

; Function Attrs: nounwind uwtable
define internal void @xg_gtk_scroll_destroy(%struct._GtkWidget* %widget, i8* %data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %data.addr = alloca i8*, align 8
  %id = alloca i64, align 8
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  store i64 %1, i64* %id, align 8
  %2 = load i64, i64* %id, align 8
  call void @xg_remove_widget_from_map(i64 %2)
  ret void
}

declare void @gtk_fixed_put(%struct._GtkFixed*, %struct._GtkWidget*, i32, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_fixed_get_type() #3

; Function Attrs: nounwind uwtable
define void @xg_create_horizontal_scroll_bar(%struct.frame* %f, %struct.scroll_bar* %bar, void ()* %scroll_callback, void ()* %end_callback, i8* %scroll_bar_name) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %scroll_callback.addr = alloca void ()*, align 8
  %end_callback.addr = alloca void ()*, align 8
  %scroll_bar_name.addr = alloca i8*, align 8
  %wscroll = alloca %struct._GtkWidget*, align 8
  %webox = alloca %struct._GtkWidget*, align 8
  %scroll_id = alloca i64, align 8
  %hadj = alloca %struct._GtkObject*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store void ()* %scroll_callback, void ()** %scroll_callback.addr, align 8
  store void ()* %end_callback, void ()** %end_callback.addr, align 8
  store i8* %scroll_bar_name, i8** %scroll_bar_name.addr, align 8
  %call = call %struct._GtkObject* @gtk_adjustment_new(double 1.000000e+00, double 1.000000e+00, double 1.000000e+07, double 1.000000e-01, double 1.000000e-01, double 1.000000e-01)
  store %struct._GtkObject* %call, %struct._GtkObject** %hadj, align 8
  %0 = load %struct._GtkObject*, %struct._GtkObject** %hadj, align 8
  %1 = bitcast %struct._GtkObject* %0 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_adjustment_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call1)
  %2 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkAdjustment*
  %call3 = call %struct._GtkWidget* @gtk_hscrollbar_new(%struct._GtkAdjustment* %2)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %wscroll, align 8
  %call4 = call %struct._GtkWidget* @gtk_event_box_new()
  store %struct._GtkWidget* %call4, %struct._GtkWidget** %webox, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %4 = load i8*, i8** %scroll_bar_name.addr, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %3, i8* %4)
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %6 = bitcast %struct._GtkWidget* %5 to %struct._GTypeInstance*
  %call5 = call i64 @gtk_range_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 %call5)
  %7 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkRange*
  call void @gtk_range_set_update_policy(%struct._GtkRange* %7, i32 0)
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %9 = bitcast %struct._GtkWidget* %8 to %struct._GTypeInstance*
  %call7 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %9, i64 80)
  %10 = bitcast %struct._GTypeInstance* %call7 to %struct._GObject*
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %12 = bitcast %struct.frame* %11 to i8*
  call void @g_object_set_data(%struct._GObject* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* %12)
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %call8 = call i64 @xg_store_widget_in_map(%struct._GtkWidget* %13)
  store i64 %call8, i64* %scroll_id, align 8
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  %call9 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %15, i64 80)
  %16 = bitcast %struct._GTypeInstance* %call9 to %struct._GObject*
  %17 = bitcast %struct._GObject* %16 to i8*
  %18 = load i64, i64* %scroll_id, align 8
  %19 = inttoptr i64 %18 to i8*
  %call10 = call i64 @g_signal_connect_data(i8* %17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @xg_gtk_scroll_destroy to void ()*), i8* %19, void (i8*, %struct._GClosure*)* null, i32 0)
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 80)
  %22 = bitcast %struct._GTypeInstance* %call11 to %struct._GObject*
  %23 = bitcast %struct._GObject* %22 to i8*
  %24 = load void ()*, void ()** %scroll_callback.addr, align 8
  %25 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %26 = bitcast %struct.scroll_bar* %25 to i8*
  %call12 = call i64 @g_signal_connect_data(i8* %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0), void ()* %24, i8* %26, void (i8*, %struct._GClosure*)* null, i32 0)
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call13 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 80)
  %29 = bitcast %struct._GTypeInstance* %call13 to %struct._GObject*
  %30 = bitcast %struct._GObject* %29 to i8*
  %31 = load void ()*, void ()** %end_callback.addr, align 8
  %32 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %33 = bitcast %struct.scroll_bar* %32 to i8*
  %call14 = call i64 @g_signal_connect_data(i8* %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25, i32 0, i32 0), void ()* %31, i8* %33, void (i8*, %struct._GClosure*)* null, i32 0)
  %34 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %34, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %35 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %35, i32 0, i32 13
  %36 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %37 = bitcast %struct._GtkWidget* %36 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_fixed_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %37, i64 %call15)
  %38 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkFixed*
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %webox, align 8
  call void @gtk_fixed_put(%struct._GtkFixed* %38, %struct._GtkWidget* %39, i32 -1, i32 -1)
  %40 = load %struct._GtkWidget*, %struct._GtkWidget** %webox, align 8
  %41 = bitcast %struct._GtkWidget* %40 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_container_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %41, i64 %call17)
  %42 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkContainer*
  %43 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_container_add(%struct._GtkContainer* %42, %struct._GtkWidget* %43)
  %44 = load %struct._GtkWidget*, %struct._GtkWidget** %webox, align 8
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 44
  %47 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %xg_cursor = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %47, i32 0, i32 20
  %48 = load %struct._GdkCursor*, %struct._GdkCursor** %xg_cursor, align 8
  call void @xg_set_cursor(%struct._GtkWidget* %44, %struct._GdkCursor* %48)
  %49 = load i64, i64* %scroll_id, align 8
  %50 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %50, i32 0, i32 4
  store i64 %49, i64* %x_window, align 8
  %51 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %horizontal = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %51, i32 0, i32 12
  store i8 1, i8* %horizontal, align 1
  ret void
}

declare %struct._GtkWidget* @gtk_hscrollbar_new(%struct._GtkAdjustment*) #1

; Function Attrs: nounwind uwtable
define void @xg_remove_scroll_bar(%struct.frame* %f, i64 %scrollbar_id) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %scrollbar_id.addr = alloca i64, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %wparent = alloca %struct._GtkWidget*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %scrollbar_id, i64* %scrollbar_id.addr, align 8
  %0 = load i64, i64* %scrollbar_id.addr, align 8
  %call = call %struct._GtkWidget* @xg_get_widget_from_map(i64 %0)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %w, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %tobool = icmp ne %struct._GtkWidget* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %call1 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %2)
  store %struct._GtkWidget* %call1, %struct._GtkWidget** %wparent, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %3)
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %4)
  store i8 1, i8* @frame_garbaged, align 1
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %5)
  %6 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %6, i32 0, i32 26
  %7 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %7, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_get_widget_from_map(i64 %idx) #0 {
entry:
  %retval = alloca %struct._GtkWidget*, align 8
  %idx.addr = alloca i64, align 8
  store i64 %idx, i64* %idx.addr, align 8
  %0 = load i64, i64* %idx.addr, align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %idx.addr, align 8
  %3 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %3, i64 %2
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %arrayidx, align 8
  %cmp1 = icmp ne %struct._GtkWidget* %4, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load i64, i64* %idx.addr, align 8
  %6 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx2 = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %6, i64 %5
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %arrayidx2, align 8
  store %struct._GtkWidget* %7, %struct._GtkWidget** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store %struct._GtkWidget* null, %struct._GtkWidget** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %retval
  ret %struct._GtkWidget* %8
}

; Function Attrs: nounwind uwtable
define void @xg_update_scrollbar_pos(%struct.frame* %f, i64 %scrollbar_id, i32 %top, i32 %left, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %scrollbar_id.addr = alloca i64, align 8
  %top.addr = alloca i32, align 4
  %left.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %wscroll = alloca %struct._GtkWidget*, align 8
  %wfixed = alloca %struct._GtkWidget*, align 8
  %wparent = alloca %struct._GtkWidget*, align 8
  %msl = alloca i32, align 4
  %scale = alloca i32, align 4
  %oldx = alloca i32, align 4
  %oldy = alloca i32, align 4
  %oldw = alloca i32, align 4
  %oldh = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %scrollbar_id, i64* %scrollbar_id.addr, align 8
  store i32 %top, i32* %top.addr, align 4
  store i32 %left, i32* %left.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load i64, i64* %scrollbar_id.addr, align 8
  %call = call %struct._GtkWidget* @xg_get_widget_from_map(i64 %0)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wscroll, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %tobool = icmp ne %struct._GtkWidget* %1, null
  br i1 %tobool, label %if.then, label %if.end.27

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 13
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  store %struct._GtkWidget* %4, %struct._GtkWidget** %wfixed, align 8
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %call1 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %5)
  store %struct._GtkWidget* %call1, %struct._GtkWidget** %wparent, align 8
  %call2 = call i32 @xg_get_gdk_scale()
  store i32 %call2, i32* %scale, align 4
  %6 = load i32, i32* %scale, align 4
  %7 = load i32, i32* %top.addr, align 4
  %div = sdiv i32 %7, %6
  store i32 %div, i32* %top.addr, align 4
  %8 = load i32, i32* %scale, align 4
  %9 = load i32, i32* %left.addr, align 4
  %div3 = sdiv i32 %9, %8
  store i32 %div3, i32* %left.addr, align 4
  %10 = load i32, i32* %scale, align 4
  %11 = load i32, i32* %height.addr, align 4
  %div4 = sdiv i32 %11, %10
  store i32 %div4, i32* %height.addr, align 4
  %12 = load i32, i32* %scale, align 4
  %sub = sub nsw i32 %12, 1
  %13 = load i32, i32* %width.addr, align 4
  %14 = load i32, i32* %scale, align 4
  %div5 = sdiv i32 %13, %14
  %shr = ashr i32 %div5, 1
  %mul = mul nsw i32 %sub, %shr
  %15 = load i32, i32* %left.addr, align 4
  %sub6 = sub nsw i32 %15, %mul
  store i32 %sub6, i32* %left.addr, align 4
  store i32 -1, i32* %oldx, align 4
  store i32 -1, i32* %oldy, align 4
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  %call7 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %16)
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %cmp = icmp eq %struct._GtkWidget* %call7, %17
  br i1 %cmp, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %19 = bitcast %struct._GtkWidget* %18 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_container_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %19, i64 %call9)
  %20 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkContainer*
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void (%struct._GtkContainer*, %struct._GtkWidget*, i8*, ...) @gtk_container_child_get(%struct._GtkContainer* %20, %struct._GtkWidget* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i32* %oldx, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i32 0, i32 0), i32* %oldy, i8* null)
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_widget_get_size_request(%struct._GtkWidget* %22, i32* %oldw, i32* %oldh)
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %24 = bitcast %struct._GtkWidget* %23 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_fixed_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %24, i64 %call11)
  %25 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkFixed*
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  %27 = load i32, i32* %left.addr, align 4
  %28 = load i32, i32* %top.addr, align 4
  call void @gtk_fixed_move(%struct._GtkFixed* %25, %struct._GtkWidget* %26, i32 %27, i32 %28)
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void (%struct._GtkWidget*, i8*, ...) @gtk_widget_style_get(%struct._GtkWidget* %29, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), i32* %msl, i8* null)
  %30 = load i32, i32* %msl, align 4
  %31 = load i32, i32* %height.addr, align 4
  %cmp13 = icmp sgt i32 %30, %31
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.end
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void @gtk_widget_hide(%struct._GtkWidget* %32)
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_widget_hide(%struct._GtkWidget* %33)
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %34)
  %35 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %36 = load i32, i32* %width.addr, align 4
  %37 = load i32, i32* %height.addr, align 4
  call void @gtk_widget_set_size_request(%struct._GtkWidget* %35, i32 %36, i32 %37)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  %38 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_queue_draw(%struct._GtkWidget* %38)
  call void @gdk_window_process_all_updates()
  %39 = load i32, i32* %oldx, align 4
  %cmp16 = icmp ne i32 %39, -1
  br i1 %cmp16, label %land.lhs.true, label %if.end.26

land.lhs.true:                                    ; preds = %if.end.15
  %40 = load i32, i32* %oldw, align 4
  %cmp17 = icmp sgt i32 %40, 0
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.26

land.lhs.true.18:                                 ; preds = %land.lhs.true
  %41 = load i32, i32* %oldh, align 4
  %cmp19 = icmp sgt i32 %41, 0
  br i1 %cmp19, label %if.then.20, label %if.end.26

if.then.20:                                       ; preds = %land.lhs.true.18
  %42 = load i32, i32* %scale, align 4
  %sub21 = sub nsw i32 %42, 1
  %43 = load i32, i32* %oldw, align 4
  %mul22 = mul nsw i32 %sub21, %43
  %44 = load i32, i32* %oldw, align 4
  %add = add nsw i32 %44, %mul22
  store i32 %add, i32* %oldw, align 4
  %45 = load i32, i32* %scale, align 4
  %sub23 = sub nsw i32 %45, 1
  %46 = load i32, i32* %oldw, align 4
  %mul24 = mul nsw i32 %sub23, %46
  %47 = load i32, i32* %oldx, align 4
  %sub25 = sub nsw i32 %47, %mul24
  store i32 %sub25, i32* %oldx, align 4
  %48 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %49 = load i32, i32* %oldx, align 4
  %50 = load i32, i32* %oldy, align 4
  %51 = load i32, i32* %oldw, align 4
  %52 = load i32, i32* %oldh, align 4
  call void @x_clear_area(%struct.frame* %48, i32 %49, i32 %50, i32 %51, i32 %52)
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.20, %land.lhs.true.18, %land.lhs.true, %if.end.15
  %53 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %53)
  store i8 1, i8* @frame_garbaged, align 1
  %54 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %54)
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 26
  %56 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %56, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %56, align 8
  %57 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @cancel_mouse_face(%struct.frame* %57)
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %entry
  ret void
}

declare void @gtk_container_child_get(%struct._GtkContainer*, %struct._GtkWidget*, i8*, ...) #1

declare void @gtk_widget_get_size_request(%struct._GtkWidget*, i32*, i32*) #1

declare void @gtk_fixed_move(%struct._GtkFixed*, %struct._GtkWidget*, i32, i32) #1

declare void @gtk_widget_style_get(%struct._GtkWidget*, i8*, ...) #1

declare void @gtk_widget_set_size_request(%struct._GtkWidget*, i32, i32) #1

declare void @x_sync(%struct.frame*) #1

; Function Attrs: nounwind uwtable
define void @xg_update_horizontal_scrollbar_pos(%struct.frame* %f, i64 %scrollbar_id, i32 %top, i32 %left, i32 %width, i32 %height) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %scrollbar_id.addr = alloca i64, align 8
  %top.addr = alloca i32, align 4
  %left.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %wscroll = alloca %struct._GtkWidget*, align 8
  %wfixed = alloca %struct._GtkWidget*, align 8
  %wparent = alloca %struct._GtkWidget*, align 8
  %msl = alloca i32, align 4
  %oldx = alloca i32, align 4
  %oldy = alloca i32, align 4
  %oldw = alloca i32, align 4
  %oldh = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %scrollbar_id, i64* %scrollbar_id.addr, align 8
  store i32 %top, i32* %top.addr, align 4
  store i32 %left, i32* %left.addr, align 4
  store i32 %width, i32* %width.addr, align 4
  store i32 %height, i32* %height.addr, align 4
  %0 = load i64, i64* %scrollbar_id.addr, align 8
  %call = call %struct._GtkWidget* @xg_get_widget_from_map(i64 %0)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wscroll, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %tobool = icmp ne %struct._GtkWidget* %1, null
  br i1 %tobool, label %if.then, label %if.end.17

if.then:                                          ; preds = %entry
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 13
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  store %struct._GtkWidget* %4, %struct._GtkWidget** %wfixed, align 8
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %call1 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %5)
  store %struct._GtkWidget* %call1, %struct._GtkWidget** %wparent, align 8
  store i32 -1, i32* %oldx, align 4
  store i32 -1, i32* %oldy, align 4
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  %call2 = call %struct._GtkWidget* @gtk_widget_get_parent(%struct._GtkWidget* %6)
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %cmp = icmp eq %struct._GtkWidget* %call2, %7
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %9 = bitcast %struct._GtkWidget* %8 to %struct._GTypeInstance*
  %call4 = call i64 @gtk_container_get_type() #8
  %call5 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %9, i64 %call4)
  %10 = bitcast %struct._GTypeInstance* %call5 to %struct._GtkContainer*
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void (%struct._GtkContainer*, %struct._GtkWidget*, i8*, ...) @gtk_container_child_get(%struct._GtkContainer* %10, %struct._GtkWidget* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i32* %oldx, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i32 0, i32 0), i32* %oldy, i8* null)
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_widget_get_size_request(%struct._GtkWidget* %12, i32* %oldw, i32* %oldh)
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  %14 = bitcast %struct._GtkWidget* %13 to %struct._GTypeInstance*
  %call6 = call i64 @gtk_fixed_get_type() #8
  %call7 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %14, i64 %call6)
  %15 = bitcast %struct._GTypeInstance* %call7 to %struct._GtkFixed*
  %16 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  %17 = load i32, i32* %left.addr, align 4
  %18 = load i32, i32* %top.addr, align 4
  call void @gtk_fixed_move(%struct._GtkFixed* %15, %struct._GtkWidget* %16, i32 %17, i32 %18)
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void (%struct._GtkWidget*, i8*, ...) @gtk_widget_style_get(%struct._GtkWidget* %19, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), i32* %msl, i8* null)
  %20 = load i32, i32* %msl, align 4
  %21 = load i32, i32* %width.addr, align 4
  %cmp8 = icmp sgt i32 %20, %21
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void @gtk_widget_hide(%struct._GtkWidget* %22)
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_widget_hide(%struct._GtkWidget* %23)
  br label %if.end.10

if.else:                                          ; preds = %if.end
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %wparent, align 8
  call void @gtk_widget_show_all(%struct._GtkWidget* %24)
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %26 = load i32, i32* %width.addr, align 4
  %27 = load i32, i32* %height.addr, align 4
  call void @gtk_widget_set_size_request(%struct._GtkWidget* %25, i32 %26, i32 %27)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %wfixed, align 8
  call void @gtk_widget_queue_draw(%struct._GtkWidget* %28)
  call void @gdk_window_process_all_updates()
  %29 = load i32, i32* %oldx, align 4
  %cmp11 = icmp ne i32 %29, -1
  br i1 %cmp11, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end.10
  %30 = load i32, i32* %oldw, align 4
  %cmp12 = icmp sgt i32 %30, 0
  br i1 %cmp12, label %land.lhs.true.13, label %if.end.16

land.lhs.true.13:                                 ; preds = %land.lhs.true
  %31 = load i32, i32* %oldh, align 4
  %cmp14 = icmp sgt i32 %31, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true.13
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %33 = load i32, i32* %oldx, align 4
  %34 = load i32, i32* %oldy, align 4
  %35 = load i32, i32* %oldw, align 4
  %36 = load i32, i32* %oldh, align 4
  call void @x_clear_area(%struct.frame* %32, i32 %33, i32 %34, i32 %35, i32 %36)
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %land.lhs.true.13, %land.lhs.true, %if.end.10
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @x_sync(%struct.frame* %37)
  store i8 1, i8* @frame_garbaged, align 1
  %38 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @fset_redisplay(%struct.frame* %38)
  %39 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %garbaged = getelementptr inbounds %struct.frame, %struct.frame* %39, i32 0, i32 26
  %40 = bitcast i48* %garbaged to i64*
  %bf.load = load i64, i64* %40, align 8
  %bf.clear = and i64 %bf.load, -8193
  %bf.set = or i64 %bf.clear, 8192
  store i64 %bf.set, i64* %40, align 8
  %41 = load %struct.frame*, %struct.frame** %f.addr, align 8
  call void @cancel_mouse_face(%struct.frame* %41)
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @xg_set_toolkit_scroll_bar_thumb(%struct.scroll_bar* %bar, i32 %portion, i32 %position, i32 %whole) #0 {
entry:
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %portion.addr = alloca i32, align 4
  %position.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  %wscroll = alloca %struct._GtkWidget*, align 8
  %f = alloca %struct.frame*, align 8
  %adj = alloca %struct._GtkAdjustment*, align 8
  %shown = alloca double, align 8
  %top = alloca double, align 8
  %size = alloca i32, align 4
  %value = alloca i32, align 4
  %old_size = alloca i32, align 4
  %new_step = alloca i32, align 4
  %changed = alloca i8, align 1
  %old_step = alloca i32, align 4
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %position, i32* %position.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  %0 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %0, i32 0, i32 4
  %1 = load i64, i64* %x_window, align 8
  %call = call %struct._GtkWidget* @xg_get_widget_from_map(i64 %1)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wscroll, align 8
  %2 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %2, i32 0, i32 1
  %3 = load i64, i64* %window, align 8
  %call1 = call %struct.window* @XWINDOW(i64 %3)
  %frame = getelementptr inbounds %struct.window, %struct.window* %call1, i32 0, i32 1
  %4 = load i64, i64* %frame, align 8
  %sub = sub nsw i64 %4, 5
  %5 = inttoptr i64 %sub to i8*
  %6 = bitcast i8* %5 to %struct.frame*
  store %struct.frame* %6, %struct.frame** %f, align 8
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %tobool = icmp ne %struct._GtkWidget* %7, null
  br i1 %tobool, label %land.lhs.true, label %if.end.70

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %8, i32 0, i32 11
  %9 = load i32, i32* %dragging, align 4
  %cmp = icmp eq i32 %9, -1
  br i1 %cmp, label %if.then, label %if.end.70

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %changed, align 1
  %10 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %11 = bitcast %struct._GtkWidget* %10 to %struct._GTypeInstance*
  %call2 = call i64 @gtk_range_get_type() #8
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %11, i64 %call2)
  %12 = bitcast %struct._GTypeInstance* %call3 to %struct._GtkRange*
  %call4 = call %struct._GtkAdjustment* @gtk_range_get_adjustment(%struct._GtkRange* %12)
  store %struct._GtkAdjustment* %call4, %struct._GtkAdjustment** %adj, align 8
  %13 = load i8, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 488), align 1
  %tobool5 = trunc i8 %13 to i1
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then
  %14 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %window7 = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %14, i32 0, i32 1
  %15 = load i64, i64* %window7, align 8
  %call8 = call %struct.window* @XWINDOW(i64 %15)
  %total_lines = getelementptr inbounds %struct.window, %struct.window* %call8, i32 0, i32 37
  %16 = load i32, i32* %total_lines, align 4
  %mul = mul nsw i32 %16, 30
  store i32 %mul, i32* %portion.addr, align 4
  %17 = load i32, i32* %portion.addr, align 4
  %18 = load i32, i32* %whole.addr, align 4
  %add = add nsw i32 %18, %17
  store i32 %add, i32* %whole.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then
  %19 = load i32, i32* %whole.addr, align 4
  %cmp9 = icmp sle i32 %19, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  store double 0.000000e+00, double* %top, align 8
  store double 1.000000e+00, double* %shown, align 8
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %20 = load i32, i32* %position.addr, align 4
  %conv = sitofp i32 %20 to double
  %21 = load i32, i32* %whole.addr, align 4
  %conv11 = sitofp i32 %21 to double
  %div = fdiv double %conv, %conv11
  store double %div, double* %top, align 8
  %22 = load i32, i32* %portion.addr, align 4
  %conv12 = sitofp i32 %22 to double
  %23 = load i32, i32* %whole.addr, align 4
  %conv13 = sitofp i32 %23 to double
  %div14 = fdiv double %conv12, %conv13
  store double %div14, double* %shown, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.10
  %24 = load double, double* %shown, align 8
  %mul16 = fmul double %24, 9.999999e+06
  %conv17 = fptosi double %mul16 to i64
  %call18 = call i64 @clip_to_bounds(i64 1, i64 %conv17, i64 9999999)
  %conv19 = trunc i64 %call18 to i32
  store i32 %conv19, i32* %size, align 4
  %25 = load double, double* %top, align 8
  %mul20 = fmul double %25, 9.999999e+06
  %conv21 = fptosi double %mul20 to i64
  %26 = load i32, i32* %size, align 4
  %sub22 = sub nsw i32 10000000, %26
  %conv23 = sext i32 %sub22 to i64
  %call24 = call i64 @clip_to_bounds(i64 1, i64 %conv21, i64 %conv23)
  %conv25 = trunc i64 %call24 to i32
  store i32 %conv25, i32* %value, align 4
  %27 = load i32, i32* %size, align 4
  %28 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 37
  %29 = load i32, i32* %text_lines, align 4
  %cmp26 = icmp sgt i32 1, %29
  br i1 %cmp26, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.15
  br label %cond.end

cond.false:                                       ; preds = %if.end.15
  %30 = load %struct.frame*, %struct.frame** %f, align 8
  %text_lines28 = getelementptr inbounds %struct.frame, %struct.frame* %30, i32 0, i32 37
  %31 = load i32, i32* %text_lines28, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %31, %cond.false ]
  %div29 = sdiv i32 %27, %cond
  store i32 %div29, i32* %new_step, align 4
  %32 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %call30 = call double @gtk_adjustment_get_page_size(%struct._GtkAdjustment* %32)
  %conv31 = fptosi double %call30 to i32
  store i32 %conv31, i32* %old_size, align 4
  %33 = load i32, i32* %old_size, align 4
  %34 = load i32, i32* %size, align 4
  %cmp32 = icmp ne i32 %33, %34
  br i1 %cmp32, label %if.then.34, label %if.end.46

if.then.34:                                       ; preds = %cond.end
  %35 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %call35 = call double @gtk_adjustment_get_step_increment(%struct._GtkAdjustment* %35)
  %conv36 = fptosi double %call35 to i32
  store i32 %conv36, i32* %old_step, align 4
  %36 = load i32, i32* %old_step, align 4
  %37 = load i32, i32* %new_step, align 4
  %cmp37 = icmp ne i32 %36, %37
  br i1 %cmp37, label %if.then.39, label %if.end.45

if.then.39:                                       ; preds = %if.then.34
  %38 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %39 = load i32, i32* %size, align 4
  %conv40 = sitofp i32 %39 to double
  call void @gtk_adjustment_set_page_size(%struct._GtkAdjustment* %38, double %conv40)
  %40 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %41 = load i32, i32* %new_step, align 4
  %conv41 = sitofp i32 %41 to double
  call void @gtk_adjustment_set_step_increment(%struct._GtkAdjustment* %40, double %conv41)
  %42 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %43 = load i32, i32* %size, align 4
  %44 = load i32, i32* %size, align 4
  %div42 = sdiv i32 %44, 20
  %sub43 = sub nsw i32 %43, %div42
  %conv44 = sitofp i32 %sub43 to double
  call void @gtk_adjustment_set_page_increment(%struct._GtkAdjustment* %42, double %conv44)
  store i8 1, i8* %changed, align 1
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.39, %if.then.34
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %cond.end
  %45 = load i8, i8* %changed, align 1
  %tobool47 = trunc i8 %45 to i1
  br i1 %tobool47, label %if.then.54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.46
  %46 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %47 = bitcast %struct._GtkWidget* %46 to %struct._GTypeInstance*
  %call49 = call i64 @gtk_range_get_type() #8
  %call50 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %47, i64 %call49)
  %48 = bitcast %struct._GTypeInstance* %call50 to %struct._GtkRange*
  %call51 = call i32 @int_gtk_range_get_value(%struct._GtkRange* %48)
  %49 = load i32, i32* %value, align 4
  %cmp52 = icmp ne i32 %call51, %49
  br i1 %cmp52, label %if.then.54, label %if.end.69

if.then.54:                                       ; preds = %lor.lhs.false, %if.end.46
  call void @block_input()
  store i8 1, i8* @xg_ignore_gtk_scrollbar, align 1
  %50 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %51 = bitcast %struct._GtkWidget* %50 to %struct._GTypeInstance*
  %call55 = call i64 @gtk_range_get_type() #8
  %call56 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %51, i64 %call55)
  %52 = bitcast %struct._GTypeInstance* %call56 to %struct._GtkRange*
  %call57 = call i32 @int_gtk_range_get_value(%struct._GtkRange* %52)
  %53 = load i32, i32* %value, align 4
  %cmp58 = icmp ne i32 %call57, %53
  br i1 %cmp58, label %if.then.60, label %if.else.64

if.then.60:                                       ; preds = %if.then.54
  %54 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %55 = bitcast %struct._GtkWidget* %54 to %struct._GTypeInstance*
  %call61 = call i64 @gtk_range_get_type() #8
  %call62 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %55, i64 %call61)
  %56 = bitcast %struct._GTypeInstance* %call62 to %struct._GtkRange*
  %57 = load i32, i32* %value, align 4
  %conv63 = sitofp i32 %57 to double
  call void @gtk_range_set_value(%struct._GtkRange* %56, double %conv63)
  br label %if.end.68

if.else.64:                                       ; preds = %if.then.54
  %58 = load i8, i8* %changed, align 1
  %tobool65 = trunc i8 %58 to i1
  br i1 %tobool65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.else.64
  %59 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  call void @gtk_adjustment_changed(%struct._GtkAdjustment* %59)
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.66, %if.else.64
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %if.then.60
  store i8 0, i8* @xg_ignore_gtk_scrollbar, align 1
  call void @unblock_input()
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %lor.lhs.false
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %land.lhs.true, %entry
  ret void
}

declare %struct.window* @XWINDOW(i64) #1

declare %struct._GtkAdjustment* @gtk_range_get_adjustment(%struct._GtkRange*) #1

declare i64 @clip_to_bounds(i64, i64, i64) #1

declare double @gtk_adjustment_get_page_size(%struct._GtkAdjustment*) #1

declare double @gtk_adjustment_get_step_increment(%struct._GtkAdjustment*) #1

declare void @gtk_adjustment_set_page_size(%struct._GtkAdjustment*, double) #1

declare void @gtk_adjustment_set_step_increment(%struct._GtkAdjustment*, double) #1

declare void @gtk_adjustment_set_page_increment(%struct._GtkAdjustment*, double) #1

; Function Attrs: nounwind uwtable
define internal i32 @int_gtk_range_get_value(%struct._GtkRange* %range) #0 {
entry:
  %range.addr = alloca %struct._GtkRange*, align 8
  store %struct._GtkRange* %range, %struct._GtkRange** %range.addr, align 8
  %0 = load %struct._GtkRange*, %struct._GtkRange** %range.addr, align 8
  %call = call double @gtk_range_get_value(%struct._GtkRange* %0)
  %conv = fptosi double %call to i32
  ret i32 %conv
}

declare void @gtk_range_set_value(%struct._GtkRange*, double) #1

declare void @gtk_adjustment_changed(%struct._GtkAdjustment*) #1

; Function Attrs: nounwind uwtable
define void @xg_set_toolkit_horizontal_scroll_bar_thumb(%struct.scroll_bar* %bar, i32 %portion, i32 %position, i32 %whole) #0 {
entry:
  %bar.addr = alloca %struct.scroll_bar*, align 8
  %portion.addr = alloca i32, align 4
  %position.addr = alloca i32, align 4
  %whole.addr = alloca i32, align 4
  %wscroll = alloca %struct._GtkWidget*, align 8
  %adj = alloca %struct._GtkAdjustment*, align 8
  %lower = alloca i32, align 4
  %upper = alloca i32, align 4
  %pagesize = alloca i32, align 4
  %value = alloca i32, align 4
  %page_increment = alloca i32, align 4
  %step_increment = alloca i32, align 4
  store %struct.scroll_bar* %bar, %struct.scroll_bar** %bar.addr, align 8
  store i32 %portion, i32* %portion.addr, align 4
  store i32 %position, i32* %position.addr, align 4
  store i32 %whole, i32* %whole.addr, align 4
  %0 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %x_window = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %0, i32 0, i32 4
  %1 = load i64, i64* %x_window, align 8
  %call = call %struct._GtkWidget* @xg_get_widget_from_map(i64 %1)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wscroll, align 8
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %tobool = icmp ne %struct._GtkWidget* %2, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.scroll_bar*, %struct.scroll_bar** %bar.addr, align 8
  %dragging = getelementptr inbounds %struct.scroll_bar, %struct.scroll_bar* %3, i32 0, i32 11
  %4 = load i32, i32* %dragging, align 4
  %cmp = icmp eq i32 %4, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %lower, align 4
  %5 = load i32, i32* %whole.addr, align 4
  %sub = sub nsw i32 %5, 1
  %cmp1 = icmp sgt i32 %sub, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load i32, i32* %whole.addr, align 4
  %sub2 = sub nsw i32 %6, 1
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub2, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %upper, align 4
  %7 = load i32, i32* %upper, align 4
  %8 = load i32, i32* %portion.addr, align 4
  %cmp3 = icmp sgt i32 %8, 0
  br i1 %cmp3, label %cond.true.4, label %cond.false.5

cond.true.4:                                      ; preds = %cond.end
  %9 = load i32, i32* %portion.addr, align 4
  br label %cond.end.6

cond.false.5:                                     ; preds = %cond.end
  br label %cond.end.6

cond.end.6:                                       ; preds = %cond.false.5, %cond.true.4
  %cond7 = phi i32 [ %9, %cond.true.4 ], [ 0, %cond.false.5 ]
  %cmp8 = icmp slt i32 %7, %cond7
  br i1 %cmp8, label %cond.true.9, label %cond.false.10

cond.true.9:                                      ; preds = %cond.end.6
  %10 = load i32, i32* %upper, align 4
  br label %cond.end.16

cond.false.10:                                    ; preds = %cond.end.6
  %11 = load i32, i32* %portion.addr, align 4
  %cmp11 = icmp sgt i32 %11, 0
  br i1 %cmp11, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %cond.false.10
  %12 = load i32, i32* %portion.addr, align 4
  br label %cond.end.14

cond.false.13:                                    ; preds = %cond.false.10
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.12
  %cond15 = phi i32 [ %12, %cond.true.12 ], [ 0, %cond.false.13 ]
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.end.14, %cond.true.9
  %cond17 = phi i32 [ %10, %cond.true.9 ], [ %cond15, %cond.end.14 ]
  store i32 %cond17, i32* %pagesize, align 4
  %13 = load i32, i32* %position.addr, align 4
  %14 = load i32, i32* %upper, align 4
  %15 = load i32, i32* %pagesize, align 4
  %sub18 = sub nsw i32 %14, %15
  %cmp19 = icmp slt i32 %13, %sub18
  br i1 %cmp19, label %cond.true.20, label %cond.false.21

cond.true.20:                                     ; preds = %cond.end.16
  %16 = load i32, i32* %position.addr, align 4
  br label %cond.end.23

cond.false.21:                                    ; preds = %cond.end.16
  %17 = load i32, i32* %upper, align 4
  %18 = load i32, i32* %pagesize, align 4
  %sub22 = sub nsw i32 %17, %18
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.21, %cond.true.20
  %cond24 = phi i32 [ %16, %cond.true.20 ], [ %sub22, %cond.false.21 ]
  %cmp25 = icmp sgt i32 0, %cond24
  br i1 %cmp25, label %cond.true.26, label %cond.false.27

cond.true.26:                                     ; preds = %cond.end.23
  br label %cond.end.35

cond.false.27:                                    ; preds = %cond.end.23
  %19 = load i32, i32* %position.addr, align 4
  %20 = load i32, i32* %upper, align 4
  %21 = load i32, i32* %pagesize, align 4
  %sub28 = sub nsw i32 %20, %21
  %cmp29 = icmp slt i32 %19, %sub28
  br i1 %cmp29, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %cond.false.27
  %22 = load i32, i32* %position.addr, align 4
  br label %cond.end.33

cond.false.31:                                    ; preds = %cond.false.27
  %23 = load i32, i32* %upper, align 4
  %24 = load i32, i32* %pagesize, align 4
  %sub32 = sub nsw i32 %23, %24
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.31, %cond.true.30
  %cond34 = phi i32 [ %22, %cond.true.30 ], [ %sub32, %cond.false.31 ]
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.end.33, %cond.true.26
  %cond36 = phi i32 [ 0, %cond.true.26 ], [ %cond34, %cond.end.33 ]
  store i32 %cond36, i32* %value, align 4
  store i32 4, i32* %page_increment, align 4
  store i32 1, i32* %step_increment, align 4
  call void @block_input()
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %26 = bitcast %struct._GtkWidget* %25 to %struct._GTypeInstance*
  %call37 = call i64 @gtk_range_get_type() #8
  %call38 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %26, i64 %call37)
  %27 = bitcast %struct._GTypeInstance* %call38 to %struct._GtkRange*
  %call39 = call %struct._GtkAdjustment* @gtk_range_get_adjustment(%struct._GtkRange* %27)
  store %struct._GtkAdjustment* %call39, %struct._GtkAdjustment** %adj, align 8
  %28 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  %29 = load i32, i32* %value, align 4
  %conv = sitofp i32 %29 to double
  %30 = load i32, i32* %lower, align 4
  %conv40 = sitofp i32 %30 to double
  %31 = load i32, i32* %upper, align 4
  %conv41 = sitofp i32 %31 to double
  %32 = load i32, i32* %step_increment, align 4
  %conv42 = sitofp i32 %32 to double
  %33 = load i32, i32* %page_increment, align 4
  %conv43 = sitofp i32 %33 to double
  %34 = load i32, i32* %pagesize, align 4
  %conv44 = sitofp i32 %34 to double
  call void @gtk_adjustment_configure(%struct._GtkAdjustment* %28, double %conv, double %conv40, double %conv41, double %conv42, double %conv43, double %conv44)
  %35 = load %struct._GtkAdjustment*, %struct._GtkAdjustment** %adj, align 8
  call void @gtk_adjustment_changed(%struct._GtkAdjustment* %35)
  call void @unblock_input()
  br label %if.end

if.end:                                           ; preds = %cond.end.35, %land.lhs.true, %entry
  ret void
}

declare void @gtk_adjustment_configure(%struct._GtkAdjustment*, double, double, double, double, double, double) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @xg_event_is_for_scrollbar(%struct.frame* %f, %union._XEvent* %event) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %event.addr = alloca %union._XEvent*, align 8
  %retval1 = alloca i8, align 1
  %gdpy = alloca %struct._GdkDisplay*, align 8
  %gwin = alloca %struct._GdkDrawable*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %union._XEvent* %event, %union._XEvent** %event.addr, align 8
  store i8 0, i8* %retval1, align 1
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool = icmp ne %struct.frame* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type = bitcast %union._XEvent* %1 to i32*
  %2 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %2, 4
  br i1 %cmp, label %land.lhs.true.2, label %if.else

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %3 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton = bitcast %union._XEvent* %3 to %struct.XButtonEvent*
  %button = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton, i32 0, i32 13
  %4 = load i32, i32* %button, align 4
  %cmp3 = icmp ult i32 %4, 4
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true.2
  %5 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %5, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 44
  %7 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %display = getelementptr inbounds %struct.x_display_info, %struct.x_display_info* %7, i32 0, i32 2
  %8 = load %struct._XDisplay*, %struct._XDisplay** %display, align 8
  %call = call %struct._GdkDisplay* @gdk_x11_lookup_xdisplay(%struct._XDisplay* %8)
  store %struct._GdkDisplay* %call, %struct._GdkDisplay** %gdpy, align 8
  %9 = load %struct._GdkDisplay*, %struct._GdkDisplay** %gdpy, align 8
  %call4 = call %struct._GdkDrawable* @gdk_display_get_window_at_pointer(%struct._GdkDisplay* %9, i32* null, i32* null)
  store %struct._GdkDrawable* %call4, %struct._GdkDrawable** %gwin, align 8
  %10 = load %struct._GdkDrawable*, %struct._GdkDrawable** %gwin, align 8
  %11 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data5 = getelementptr inbounds %struct.frame, %struct.frame* %11, i32 0, i32 62
  %x6 = bitcast %union.output_data* %output_data5 to %struct.x_output**
  %12 = load %struct.x_output*, %struct.x_output** %x6, align 8
  %edit_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %12, i32 0, i32 13
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %edit_widget, align 8
  %call7 = call %struct._GdkDrawable* @gtk_widget_get_window(%struct._GtkWidget* %13)
  %cmp8 = icmp ne %struct._GdkDrawable* %10, %call7
  %frombool = zext i1 %cmp8 to i8
  store i8 %frombool, i8* %retval1, align 1
  br label %if.end.37

if.else:                                          ; preds = %land.lhs.true.2, %land.lhs.true, %entry
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tobool9 = icmp ne %struct.frame* %14, null
  br i1 %tobool9, label %land.lhs.true.10, label %if.end.36

land.lhs.true.10:                                 ; preds = %if.else
  %15 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type11 = bitcast %union._XEvent* %15 to i32*
  %16 = load i32, i32* %type11, align 4
  %cmp12 = icmp eq i32 %16, 5
  br i1 %cmp12, label %land.lhs.true.13, label %lor.lhs.false

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %17 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %xbutton14 = bitcast %union._XEvent* %17 to %struct.XButtonEvent*
  %button15 = getelementptr inbounds %struct.XButtonEvent, %struct.XButtonEvent* %xbutton14, i32 0, i32 13
  %18 = load i32, i32* %button15, align 4
  %cmp16 = icmp ult i32 %18, 4
  br i1 %cmp16, label %if.then.19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.13, %land.lhs.true.10
  %19 = load %union._XEvent*, %union._XEvent** %event.addr, align 8
  %type17 = bitcast %union._XEvent* %19 to i32*
  %20 = load i32, i32* %type17, align 4
  %cmp18 = icmp eq i32 %20, 6
  br i1 %cmp18, label %if.then.19, label %if.end.36

if.then.19:                                       ; preds = %lor.lhs.false, %land.lhs.true.13
  %call20 = call %struct._GtkWidget* @gtk_grab_get_current()
  store %struct._GtkWidget* %call20, %struct._GtkWidget** %w, align 8
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %cmp21 = icmp ne %struct._GtkWidget* %21, null
  br i1 %cmp21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.19
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %23 = bitcast %struct._GtkWidget* %22 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %23, %struct._GTypeInstance** %__inst, align 8
  %call22 = call i64 @gtk_scrollbar_get_type() #8
  store i64 %call22, i64* %__t, align 8
  %24 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool23 = icmp ne %struct._GTypeInstance* %24, null
  br i1 %tobool23, label %if.else.25, label %if.then.24

if.then.24:                                       ; preds = %land.rhs
  store i32 0, i32* %__r, align 4
  br label %if.end.33

if.else.25:                                       ; preds = %land.rhs
  %25 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %25, i32 0, i32 0
  %26 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool26 = icmp ne %struct._GTypeClass* %26, null
  br i1 %tobool26, label %land.lhs.true.27, label %if.else.31

land.lhs.true.27:                                 ; preds = %if.else.25
  %27 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class28 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %27, i32 0, i32 0
  %28 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class28, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %28, i32 0, i32 0
  %29 = load i64, i64* %g_type, align 8
  %30 = load i64, i64* %__t, align 8
  %cmp29 = icmp eq i64 %29, %30
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %land.lhs.true.27
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.31:                                       ; preds = %land.lhs.true.27, %if.else.25
  %31 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %32 = load i64, i64* %__t, align 8
  %call32 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %31, i64 %32) #7
  store i32 %call32, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.31, %if.then.30
  br label %if.end.33

if.end.33:                                        ; preds = %if.end, %if.then.24
  %33 = load i32, i32* %__r, align 4
  store i32 %33, i32* %tmp
  %34 = load i32, i32* %tmp
  %tobool34 = icmp ne i32 %34, 0
  br label %land.end

land.end:                                         ; preds = %if.end.33, %if.then.19
  %35 = phi i1 [ false, %if.then.19 ], [ %tobool34, %if.end.33 ]
  %frombool35 = zext i1 %35 to i8
  store i8 %frombool35, i8* %retval1, align 1
  br label %if.end.36

if.end.36:                                        ; preds = %land.end, %lor.lhs.false, %if.else
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.then
  %36 = load i8, i8* %retval1, align 1
  %tobool38 = trunc i8 %36 to i1
  ret i1 %tobool38
}

declare %struct._GdkDrawable* @gdk_display_get_window_at_pointer(%struct._GdkDisplay*, i32*, i32*) #1

declare %struct._GtkWidget* @gtk_grab_get_current() #1

; Function Attrs: nounwind readnone
declare i64 @gtk_scrollbar_get_type() #3

declare zeroext i1 @RANGED_INTEGERP(i64, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal void @xg_create_tool_bar(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %tbinfo = alloca %struct.xg_frame_tb_info*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data2 = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x3 = bitcast %union.output_data* %output_data2 to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x3, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %3, i32 0, i32 12
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %5 = bitcast %struct._GtkWidget* %4 to %struct._GTypeInstance*
  %call = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %5, i64 80)
  %6 = bitcast %struct._GTypeInstance* %call to %struct._GObject*
  %call4 = call i8* @g_object_get_data(%struct._GObject* %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0))
  %7 = bitcast i8* %call4 to %struct.xg_frame_tb_info*
  store %struct.xg_frame_tb_info* %7, %struct.xg_frame_tb_info** %tbinfo, align 8
  %8 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %tobool = icmp ne %struct.xg_frame_tb_info* %8, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call5 = call noalias i8* @xmalloc(i64 32)
  %9 = bitcast i8* %call5 to %struct.xg_frame_tb_info*
  store %struct.xg_frame_tb_info* %9, %struct.xg_frame_tb_info** %tbinfo, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %10 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %last_tool_bar = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %10, i32 0, i32 0
  store i64 %call6, i64* %last_tool_bar, align 8
  %call7 = call i64 @builtin_lisp_symbol(i32 0)
  %11 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %style = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %11, i32 0, i32 1
  store i64 %call7, i64* %style, align 8
  %12 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %vmargin = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %12, i32 0, i32 4
  store i32 0, i32* %vmargin, align 4
  %13 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %hmargin = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %13, i32 0, i32 3
  store i32 0, i32* %hmargin, align 4
  %14 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %dir = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %14, i32 0, i32 5
  store i32 0, i32* %dir, align 4
  %15 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %n_last_items = getelementptr inbounds %struct.xg_frame_tb_info, %struct.xg_frame_tb_info* %15, i32 0, i32 2
  store i32 0, i32* %n_last_items, align 4
  %16 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data8 = getelementptr inbounds %struct.frame, %struct.frame* %16, i32 0, i32 62
  %x9 = bitcast %union.output_data* %output_data8 to %struct.x_output**
  %17 = load %struct.x_output*, %struct.x_output** %x9, align 8
  %widget10 = getelementptr inbounds %struct.x_output, %struct.x_output* %17, i32 0, i32 12
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %widget10, align 8
  %19 = bitcast %struct._GtkWidget* %18 to %struct._GTypeInstance*
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %19, i64 80)
  %20 = bitcast %struct._GTypeInstance* %call11 to %struct._GObject*
  %21 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %22 = bitcast %struct.xg_frame_tb_info* %21 to i8*
  call void @g_object_set_data(%struct._GObject* %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i8* %22)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call12 = call %struct._GtkWidget* @gtk_toolbar_new()
  %23 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 17
  store %struct._GtkWidget* %call12, %struct._GtkWidget** %toolbar_widget, align 8
  %24 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget13 = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 17
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget13, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %25, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.70, i32 0, i32 0))
  %26 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget14 = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 17
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget14, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_toolbar_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call15)
  %29 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkToolbar*
  call void @gtk_toolbar_set_style(%struct._GtkToolbar* %29, i32 0)
  %30 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget17 = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 17
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget17, align 8
  %32 = bitcast %struct._GtkWidget* %31 to %struct._GTypeInstance*
  %call18 = call i64 @gtk_orientable_get_type() #8
  %call19 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %32, i64 %call18)
  %33 = bitcast %struct._GTypeInstance* %call19 to %struct._GtkOrientable*
  call void @gtk_orientable_set_orientation(%struct._GtkOrientable* %33, i32 0)
  %34 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget20 = getelementptr inbounds %struct.x_output, %struct.x_output* %34, i32 0, i32 17
  %35 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget20, align 8
  %36 = bitcast %struct._GtkWidget* %35 to i8*
  %37 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %38 = bitcast %struct.frame* %37 to i8*
  %call21 = call i64 @g_signal_connect_data(i8* %36, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, %struct._GdkRectangle*, i8*)* @tb_size_cb to void ()*), i8* %38, void (i8*, %struct._GClosure*)* null, i32 0)
  ret void
}

; Function Attrs: nounwind readnone
declare i64 @gtk_toolbar_get_type() #3

declare i32 @gtk_widget_get_direction(%struct._GtkWidget*) #1

declare i64 @Ftool_bar_get_system_style() #1

declare %struct._GtkIconTheme* @gtk_icon_theme_get_for_screen(%struct._GdkScreen*) #1

declare i64 @Fequal(i64, i64) #1

declare i64 @AREF(i64, i64) #1

declare zeroext i1 @STRINGP(i64) #1

declare %struct._GtkToolItem* @gtk_toolbar_get_nth_item(%struct._GtkToolbar*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_separator_tool_item_get_type() #3

declare %struct._GtkToolItem* @gtk_separator_tool_item_new() #1

declare void @gtk_toolbar_insert(%struct._GtkToolbar*, %struct._GtkToolItem*, i32) #1

declare %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_bin_get_type() #3

declare zeroext i1 @valid_image_p(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @file_for_image(i64 %image) #0 {
entry:
  %image.addr = alloca i64, align 8
  %specified_file = alloca i64, align 8
  %tail = alloca i64, align 8
  store i64 %image, i64* %image.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* %specified_file, align 8
  %0 = load i64, i64* %image.addr, align 8
  %sub = sub nsw i64 %0, 3
  %1 = inttoptr i64 %sub to i8*
  %2 = bitcast i8* %1 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %2, i32 0, i32 1
  %cdr = bitcast %union.anon.13* %u to i64*
  %3 = load i64, i64* %cdr, align 8
  store i64 %3, i64* %tail, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %specified_file, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %4, %call1
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond
  %5 = load i64, i64* %tail, align 8
  %and = and i64 %5, 7
  %conv = trunc i64 %and to i32
  %cmp2 = icmp eq i32 %conv, 3
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load i64, i64* %tail, align 8
  %sub4 = sub nsw i64 %6, 3
  %7 = inttoptr i64 %sub4 to i8*
  %8 = bitcast i8* %7 to %struct.Lisp_Cons*
  %u5 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %8, i32 0, i32 1
  %cdr6 = bitcast %union.anon.13* %u5 to i64*
  %9 = load i64, i64* %cdr6, align 8
  %and7 = and i64 %9, 7
  %conv8 = trunc i64 %and7 to i32
  %cmp9 = icmp eq i32 %conv8, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp9, %land.rhs ]
  br i1 %10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i64, i64* %tail, align 8
  %sub11 = sub nsw i64 %11, 3
  %12 = inttoptr i64 %sub11 to i8*
  %13 = bitcast i8* %12 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %13, i32 0, i32 0
  %14 = load i64, i64* %car, align 8
  %call12 = call i64 @builtin_lisp_symbol(i32 41)
  %cmp13 = icmp eq i64 %14, %call12
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %15 = load i64, i64* %tail, align 8
  %sub15 = sub nsw i64 %15, 3
  %16 = inttoptr i64 %sub15 to i8*
  %17 = bitcast i8* %16 to %struct.Lisp_Cons*
  %u16 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %17, i32 0, i32 1
  %cdr17 = bitcast %union.anon.13* %u16 to i64*
  %18 = load i64, i64* %cdr17, align 8
  %sub18 = sub nsw i64 %18, 3
  %19 = inttoptr i64 %sub18 to i8*
  %20 = bitcast i8* %19 to %struct.Lisp_Cons*
  %car19 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %20, i32 0, i32 0
  %21 = load i64, i64* %car19, align 8
  store i64 %21, i64* %specified_file, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i64, i64* %tail, align 8
  %sub20 = sub nsw i64 %22, 3
  %23 = inttoptr i64 %sub20 to i8*
  %24 = bitcast i8* %23 to %struct.Lisp_Cons*
  %u21 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %24, i32 0, i32 1
  %cdr22 = bitcast %union.anon.13* %u21 to i64*
  %25 = load i64, i64* %cdr22, align 8
  %sub23 = sub nsw i64 %25, 3
  %26 = inttoptr i64 %sub23 to i8*
  %27 = bitcast i8* %26 to %struct.Lisp_Cons*
  %u24 = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %27, i32 0, i32 1
  %cdr25 = bitcast %union.anon.13* %u24 to i64*
  %28 = load i64, i64* %cdr25, align 8
  store i64 %28, i64* %tail, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %29 = load i64, i64* %specified_file, align 8
  ret i64 %29
}

declare i64 @Ffboundp(i64) #1

declare i64 @call1(i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i8* @find_icon_from_name(i8* %name, %struct._GtkIconTheme* %icon_theme, i8** %icon_name) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %icon_theme.addr = alloca %struct._GtkIconTheme*, align 8
  %icon_name.addr = alloca i8**, align 8
  %stock_item = alloca %struct._GtkStockItem, align 8
  store i8* %name, i8** %name.addr, align 8
  store %struct._GtkIconTheme* %icon_theme, %struct._GtkIconTheme** %icon_theme.addr, align 8
  store i8** %icon_name, i8*** %icon_name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 110
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %3 to i32
  %cmp4 = icmp eq i32 %conv3, 58
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %4 = load i8*, i8** %name.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 2
  %5 = load i8**, i8*** %icon_name.addr, align 8
  store i8* %add.ptr, i8** %5, align 8
  store i8* null, i8** %name.addr, align 8
  %6 = load %struct._GtkIconTheme*, %struct._GtkIconTheme** %icon_theme.addr, align 8
  %7 = load i8**, i8*** %icon_name.addr, align 8
  %8 = load i8*, i8** %7, align 8
  %call = call i32 @gtk_icon_theme_has_icon(%struct._GtkIconTheme* %6, i8* %8)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then.6

if.then.6:                                        ; preds = %if.then
  %9 = load i8**, i8*** %icon_name.addr, align 8
  store i8* null, i8** %9, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then
  br label %if.end.17

if.else:                                          ; preds = %land.lhs.true, %entry
  %10 = load i8*, i8** %name.addr, align 8
  %call7 = call i32 @gtk_stock_lookup(i8* %10, %struct._GtkStockItem* %stock_item)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %if.else
  %11 = load i8**, i8*** %icon_name.addr, align 8
  store i8* null, i8** %11, align 8
  br label %if.end.16

if.else.10:                                       ; preds = %if.else
  %12 = load %struct._GtkIconTheme*, %struct._GtkIconTheme** %icon_theme.addr, align 8
  %13 = load i8*, i8** %name.addr, align 8
  %call11 = call i32 @gtk_icon_theme_has_icon(%struct._GtkIconTheme* %12, i8* %13)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %if.else.10
  %14 = load i8*, i8** %name.addr, align 8
  %15 = load i8**, i8*** %icon_name.addr, align 8
  store i8* %14, i8** %15, align 8
  store i8* null, i8** %name.addr, align 8
  br label %if.end.15

if.else.14:                                       ; preds = %if.else.10
  store i8* null, i8** %name.addr, align 8
  %16 = load i8**, i8*** %icon_name.addr, align 8
  store i8* null, i8** %16, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.14, %if.then.13
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.then.9
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end
  %17 = load i8*, i8** %name.addr, align 8
  ret i8* %17
}

declare i32 @gtk_toolbar_get_icon_size(%struct._GtkToolbar*) #1

; Function Attrs: nounwind uwtable
define internal i64 @find_rtl_image(%struct.frame* %f, i64 %image, i64 %rtl) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %image.addr = alloca i64, align 8
  %rtl.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %file = alloca i64, align 8
  %rtl_name = alloca i64, align 8
  %rtl_image = alloca i64, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %image, i64* %image.addr, align 8
  store i64 %rtl, i64* %rtl.addr, align 8
  %0 = load i64, i64* %rtl.addr, align 8
  %call = call i64 @Ffile_name_nondirectory(i64 %0)
  store i64 %call, i64* %rtl_name, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %n_tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 30
  %3 = load i32, i32* %n_tool_bar_items, align 4
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 17
  %5 = load i64, i64* %tool_bar_items, align 8
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %6, 11
  %add = add nsw i32 %mul, 4
  %conv = sext i32 %add to i64
  %call1 = call i64 @AREF(i64 %5, i64 %conv)
  store i64 %call1, i64* %rtl_image, align 8
  %7 = load i64, i64* %rtl_image, align 8
  %call2 = call i64 @file_for_image(i64 %7)
  store i64 %call2, i64* %file, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp4 = icmp eq i64 %call2, %call3
  br i1 %cmp4, label %if.end.14, label %if.then

if.then:                                          ; preds = %for.body
  %call6 = call i64 @intern(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.72, i32 0, i32 0))
  %8 = load i64, i64* %file, align 8
  %call7 = call i64 @Ffile_name_nondirectory(i64 %8)
  %call8 = call i64 @call1(i64 %call6, i64 %call7)
  store i64 %call8, i64* %file, align 8
  %9 = load i64, i64* %file, align 8
  %10 = load i64, i64* %rtl_name, align 8
  %call9 = call i64 @Fequal(i64 %9, i64 %10)
  %call10 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %if.end, label %if.then.13

if.then.13:                                       ; preds = %if.then
  %11 = load i64, i64* %rtl_image, align 8
  store i64 %11, i64* %image.addr, align 8
  br label %for.end

if.end:                                           ; preds = %if.then
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.13, %for.cond
  %13 = load i64, i64* %image.addr, align 8
  ret i64 %13
}

declare zeroext i1 @VECTORP(i64) #1

declare i64 @lookup_image(%struct.frame*, i64) #1

declare void @prepare_image_for_display(%struct.frame*, %struct.image*) #1

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xg_tool_item_stale_p(%struct._GtkWidget* %wbutton, i8* %stock_name, i8* %icon_name, %struct.image* %img, i8* %label, i1 zeroext %horiz) #0 {
entry:
  %retval = alloca i1, align 1
  %wbutton.addr = alloca %struct._GtkWidget*, align 8
  %stock_name.addr = alloca i8*, align 8
  %icon_name.addr = alloca i8*, align 8
  %img.addr = alloca %struct.image*, align 8
  %label.addr = alloca i8*, align 8
  %horiz.addr = alloca i8, align 1
  %old = alloca i8*, align 8
  %wimage = alloca %struct._GtkWidget*, align 8
  %vb = alloca %struct._GtkWidget*, align 8
  %wlbl = alloca %struct._GtkWidget*, align 8
  %gold_img = alloca i8*, align 8
  %old_img = alloca i64, align 8
  store %struct._GtkWidget* %wbutton, %struct._GtkWidget** %wbutton.addr, align 8
  store i8* %stock_name, i8** %stock_name.addr, align 8
  store i8* %icon_name, i8** %icon_name.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  %frombool = zext i1 %horiz to i8
  store i8 %frombool, i8* %horiz.addr, align 1
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %wbutton.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_bin_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkBin*
  %call2 = call %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin* %2)
  store %struct._GtkWidget* %call2, %struct._GtkWidget** %vb, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  %call3 = call %struct._GtkWidget* @xg_get_tool_bar_widgets(%struct._GtkWidget* %3, %struct._GtkWidget** %wimage)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %wlbl, align 8
  %4 = load i8*, i8** %stock_name.addr, align 8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage, align 8
  %tobool4 = icmp ne %struct._GtkWidget* %5, null
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage, align 8
  %7 = bitcast %struct._GtkWidget* %6 to %struct._GTypeInstance*
  %call5 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 80)
  %8 = bitcast %struct._GTypeInstance* %call5 to %struct._GObject*
  %call6 = call i8* @g_object_get_data(%struct._GObject* %8, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.30, i32 0, i32 0))
  store i8* %call6, i8** %old, align 8
  %9 = load i8*, i8** %old, align 8
  %tobool7 = icmp ne i8* %9, null
  br i1 %tobool7, label %lor.lhs.false, label %if.then.10

lor.lhs.false:                                    ; preds = %if.then
  %10 = load i8*, i8** %old, align 8
  %11 = load i8*, i8** %stock_name.addr, align 8
  %call8 = call i32 @strcmp(i8* %10, i8* %11) #7
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %lor.lhs.false, %if.then
  store i1 true, i1* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.32

if.else:                                          ; preds = %land.lhs.true, %entry
  %12 = load i8*, i8** %icon_name.addr, align 8
  %tobool11 = icmp ne i8* %12, null
  br i1 %tobool11, label %land.lhs.true.12, label %if.else.23

land.lhs.true.12:                                 ; preds = %if.else
  %13 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage, align 8
  %tobool13 = icmp ne %struct._GtkWidget* %13, null
  br i1 %tobool13, label %if.then.14, label %if.else.23

if.then.14:                                       ; preds = %land.lhs.true.12
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  %call15 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %15, i64 80)
  %16 = bitcast %struct._GTypeInstance* %call15 to %struct._GObject*
  %call16 = call i8* @g_object_get_data(%struct._GObject* %16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i32 0, i32 0))
  store i8* %call16, i8** %old, align 8
  %17 = load i8*, i8** %old, align 8
  %tobool17 = icmp ne i8* %17, null
  br i1 %tobool17, label %lor.lhs.false.18, label %if.then.21

lor.lhs.false.18:                                 ; preds = %if.then.14
  %18 = load i8*, i8** %old, align 8
  %19 = load i8*, i8** %icon_name.addr, align 8
  %call19 = call i32 @strcmp(i8* %18, i8* %19) #7
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %lor.lhs.false.18, %if.then.14
  store i1 true, i1* %retval
  br label %return

if.end.22:                                        ; preds = %lor.lhs.false.18
  br label %if.end.31

if.else.23:                                       ; preds = %land.lhs.true.12, %if.else
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage, align 8
  %tobool24 = icmp ne %struct._GtkWidget* %20, null
  br i1 %tobool24, label %if.then.25, label %if.end.30

if.then.25:                                       ; preds = %if.else.23
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage, align 8
  %22 = bitcast %struct._GtkWidget* %21 to %struct._GTypeInstance*
  %call26 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 80)
  %23 = bitcast %struct._GTypeInstance* %call26 to %struct._GObject*
  %call27 = call i8* @g_object_get_data(%struct._GObject* %23, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i32 0, i32 0))
  store i8* %call27, i8** %gold_img, align 8
  %24 = load i8*, i8** %gold_img, align 8
  %25 = ptrtoint i8* %24 to i64
  store i64 %25, i64* %old_img, align 8
  %26 = load i64, i64* %old_img, align 8
  %27 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %27, i32 0, i32 1
  %28 = load i64, i64* %pixmap, align 8
  %cmp = icmp ne i64 %26, %28
  br i1 %cmp, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.25
  store i1 true, i1* %retval
  br label %return

if.end.29:                                        ; preds = %if.then.25
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.else.23
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end.22
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.end
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  %30 = load i8, i8* %horiz.addr, align 1
  %tobool33 = trunc i8 %30 to i1
  %call34 = call zeroext i1 @is_box_type(%struct._GtkWidget* %29, i1 zeroext %tobool33)
  br i1 %call34, label %if.then.39, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %if.end.32
  %31 = load i8*, i8** %label.addr, align 8
  %tobool36 = icmp ne i8* %31, null
  br i1 %tobool36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false.35
  %32 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  %cmp37 = icmp eq %struct._GtkWidget* %32, null
  br i1 %cmp37, label %if.then.39, label %if.end.40

cond.false:                                       ; preds = %lor.lhs.false.35
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  %cmp38 = icmp ne %struct._GtkWidget* %33, null
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %cond.false, %cond.true, %if.end.32
  store i1 true, i1* %retval
  br label %return

if.end.40:                                        ; preds = %cond.false, %cond.true
  %34 = load i8*, i8** %label.addr, align 8
  %tobool41 = icmp ne i8* %34, null
  br i1 %tobool41, label %land.lhs.true.42, label %if.end.47

land.lhs.true.42:                                 ; preds = %if.end.40
  %35 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  %tobool43 = icmp ne %struct._GtkWidget* %35, null
  br i1 %tobool43, label %if.then.44, label %if.end.47

if.then.44:                                       ; preds = %land.lhs.true.42
  %36 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  %37 = bitcast %struct._GtkWidget* %36 to %struct._GTypeInstance*
  %call45 = call i64 @gtk_label_get_type() #8
  %call46 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %37, i64 %call45)
  %38 = bitcast %struct._GTypeInstance* %call46 to %struct._GtkLabel*
  %39 = load i8*, i8** %label.addr, align 8
  call void @gtk_label_set_text(%struct._GtkLabel* %38, i8* %39)
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.44, %land.lhs.true.42, %if.end.40
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.end.47, %if.then.39, %if.then.28, %if.then.21, %if.then.10
  %40 = load i1, i1* %retval
  ret i1 %40
}

declare %struct._GtkWidget* @gtk_image_new_from_stock(i8*, i32) #1

declare void @g_object_set_data_full(%struct._GObject*, i8*, i8*, void (i8*)*) #1

declare noalias i8* @xstrdup(i8*) #1

declare %struct._GtkWidget* @gtk_image_new_from_icon_name(i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_get_image_for_pixmap(%struct.frame* %f, %struct.image* %img, %struct._GtkWidget* %widget, %struct._GtkImage* %old_widget) #0 {
entry:
  %retval = alloca %struct._GtkWidget*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %img.addr = alloca %struct.image*, align 8
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %old_widget.addr = alloca %struct._GtkImage*, align 8
  %icon_buf = alloca %struct._GdkPixbuf*, align 8
  %specified_file = alloca i64, align 8
  %file = alloca i64, align 8
  %encoded_file = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct.image* %img, %struct.image** %img.addr, align 8
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store %struct._GtkImage* %old_widget, %struct._GtkImage** %old_widget.addr, align 8
  %0 = load %struct.image*, %struct.image** %img.addr, align 8
  %spec = getelementptr inbounds %struct.image, %struct.image* %0, i32 0, i32 15
  %1 = load i64, i64* %spec, align 8
  %call = call i64 @file_for_image(i64 %1)
  store i64 %call, i64* %specified_file, align 8
  %2 = load i64, i64* %specified_file, align 8
  %call1 = call zeroext i1 @STRINGP(i64 %2)
  br i1 %call1, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %entry
  %3 = load i64, i64* %specified_file, align 8
  %call2 = call i64 @x_find_image_file(i64 %3)
  store i64 %call2, i64* %file, align 8
  %call3 = call zeroext i1 @STRINGP(i64 %call2)
  br i1 %call3, label %if.then, label %if.end.12

if.then:                                          ; preds = %land.lhs.true
  %4 = load i64, i64* %file, align 8
  %call4 = call i64 @encode_file_name(i64 %4)
  %call5 = call i8* @SSDATA(i64 %call4)
  store i8* %call5, i8** %encoded_file, align 8
  %5 = load %struct._GtkImage*, %struct._GtkImage** %old_widget.addr, align 8
  %tobool = icmp ne %struct._GtkImage* %5, null
  br i1 %tobool, label %if.else, label %if.then.6

if.then.6:                                        ; preds = %if.then
  %6 = load i8*, i8** %encoded_file, align 8
  %call7 = call %struct._GtkWidget* @gtk_image_new_from_file(i8* %6)
  %7 = bitcast %struct._GtkWidget* %call7 to %struct._GTypeInstance*
  %call8 = call i64 @gtk_image_get_type() #8
  %call9 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call8)
  %8 = bitcast %struct._GTypeInstance* %call9 to %struct._GtkImage*
  store %struct._GtkImage* %8, %struct._GtkImage** %old_widget.addr, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %9 = load %struct._GtkImage*, %struct._GtkImage** %old_widget.addr, align 8
  %10 = load i8*, i8** %encoded_file, align 8
  call void @gtk_image_set_from_file(%struct._GtkImage* %9, i8* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  %11 = load %struct._GtkImage*, %struct._GtkImage** %old_widget.addr, align 8
  %12 = bitcast %struct._GtkImage* %11 to %struct._GTypeInstance*
  %call10 = call i64 @gtk_widget_get_type() #8
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %12, i64 %call10)
  %13 = bitcast %struct._GTypeInstance* %call11 to %struct._GtkWidget*
  store %struct._GtkWidget* %13, %struct._GtkWidget** %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true, %entry
  %14 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %15 = load %struct.image*, %struct.image** %img.addr, align 8
  %pixmap = getelementptr inbounds %struct.image, %struct.image* %15, i32 0, i32 1
  %16 = load i64, i64* %pixmap, align 8
  %17 = load %struct.image*, %struct.image** %img.addr, align 8
  %mask = getelementptr inbounds %struct.image, %struct.image* %17, i32 0, i32 2
  %18 = load i64, i64* %mask, align 8
  %call13 = call %struct._GdkPixbuf* @xg_get_pixbuf_from_pix_and_mask(%struct.frame* %14, i64 %16, i64 %18)
  store %struct._GdkPixbuf* %call13, %struct._GdkPixbuf** %icon_buf, align 8
  %19 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  %tobool14 = icmp ne %struct._GdkPixbuf* %19, null
  br i1 %tobool14, label %if.then.15, label %if.end.24

if.then.15:                                       ; preds = %if.end.12
  %20 = load %struct._GtkImage*, %struct._GtkImage** %old_widget.addr, align 8
  %tobool16 = icmp ne %struct._GtkImage* %20, null
  br i1 %tobool16, label %if.else.21, label %if.then.17

if.then.17:                                       ; preds = %if.then.15
  %21 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  %call18 = call %struct._GtkWidget* @gtk_image_new_from_pixbuf(%struct._GdkPixbuf* %21)
  %22 = bitcast %struct._GtkWidget* %call18 to %struct._GTypeInstance*
  %call19 = call i64 @gtk_image_get_type() #8
  %call20 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 %call19)
  %23 = bitcast %struct._GTypeInstance* %call20 to %struct._GtkImage*
  store %struct._GtkImage* %23, %struct._GtkImage** %old_widget.addr, align 8
  br label %if.end.22

if.else.21:                                       ; preds = %if.then.15
  %24 = load %struct._GtkImage*, %struct._GtkImage** %old_widget.addr, align 8
  %25 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  call void @gtk_image_set_from_pixbuf(%struct._GtkImage* %24, %struct._GdkPixbuf* %25)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.21, %if.then.17
  %26 = load %struct._GdkPixbuf*, %struct._GdkPixbuf** %icon_buf, align 8
  %27 = bitcast %struct._GdkPixbuf* %26 to %struct._GTypeInstance*
  %call23 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %27, i64 80)
  %28 = bitcast %struct._GTypeInstance* %call23 to %struct._GObject*
  %29 = bitcast %struct._GObject* %28 to i8*
  call void @g_object_unref(i8* %29)
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.22, %if.end.12
  %30 = load %struct._GtkImage*, %struct._GtkImage** %old_widget.addr, align 8
  %31 = bitcast %struct._GtkImage* %30 to %struct._GTypeInstance*
  %call25 = call i64 @gtk_widget_get_type() #8
  %call26 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %31, i64 %call25)
  %32 = bitcast %struct._GTypeInstance* %call26 to %struct._GtkWidget*
  store %struct._GtkWidget* %32, %struct._GtkWidget** %retval
  br label %return

return:                                           ; preds = %if.end.24, %if.end
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %retval
  ret %struct._GtkWidget* %33
}

declare void @gtk_misc_set_padding(%struct._GtkMisc*, i32, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_misc_get_type() #3

; Function Attrs: nounwind uwtable
define internal %struct._GtkToolItem* @xg_make_tool_item(%struct.frame* %f, %struct._GtkWidget* %wimage, %struct._GtkWidget** %wbutton, i8* %label, i32 %i, i1 zeroext %horiz, i1 zeroext %text_image) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %wimage.addr = alloca %struct._GtkWidget*, align 8
  %wbutton.addr = alloca %struct._GtkWidget**, align 8
  %label.addr = alloca i8*, align 8
  %i.addr = alloca i32, align 4
  %horiz.addr = alloca i8, align 1
  %text_image.addr = alloca i8, align 1
  %ti = alloca %struct._GtkToolItem*, align 8
  %vb = alloca %struct._GtkWidget*, align 8
  %wb = alloca %struct._GtkWidget*, align 8
  %weventbox = alloca %struct._GtkWidget*, align 8
  %ii = alloca i64, align 8
  %gi = alloca i8*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store %struct._GtkWidget* %wimage, %struct._GtkWidget** %wimage.addr, align 8
  store %struct._GtkWidget** %wbutton, %struct._GtkWidget*** %wbutton.addr, align 8
  store i8* %label, i8** %label.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %frombool = zext i1 %horiz to i8
  store i8 %frombool, i8* %horiz.addr, align 1
  %frombool1 = zext i1 %text_image to i8
  store i8 %frombool1, i8* %text_image.addr, align 1
  %call = call %struct._GtkToolItem* @gtk_tool_item_new()
  store %struct._GtkToolItem* %call, %struct._GtkToolItem** %ti, align 8
  %0 = load i8, i8* %horiz.addr, align 1
  %tobool = trunc i8 %0 to i1
  %cond = select i1 %tobool, i32 0, i32 1
  %cmp = icmp eq i32 %cond, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call2 = call %struct._GtkWidget* @gtk_hbox_new(i32 0, i32 0)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call %struct._GtkWidget* @gtk_vbox_new(i32 0, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi %struct._GtkWidget* [ %call2, %cond.true ], [ %call3, %cond.false ]
  store %struct._GtkWidget* %cond4, %struct._GtkWidget** %vb, align 8
  %call5 = call %struct._GtkWidget* @gtk_button_new()
  store %struct._GtkWidget* %call5, %struct._GtkWidget** %wb, align 8
  %call6 = call %struct._GtkWidget* @gtk_event_box_new()
  store %struct._GtkWidget* %call6, %struct._GtkWidget** %weventbox, align 8
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  %2 = bitcast %struct._GtkWidget* %1 to %struct._GTypeInstance*
  %call7 = call i64 @gtk_box_get_type() #8
  %call8 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %2, i64 %call7)
  %3 = bitcast %struct._GTypeInstance* %call8 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %3, i32 0)
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage.addr, align 8
  %tobool9 = icmp ne %struct._GtkWidget* %4, null
  br i1 %tobool9, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %5 = load i8, i8* %text_image.addr, align 1
  %tobool10 = trunc i8 %5 to i1
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  %7 = bitcast %struct._GtkWidget* %6 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_box_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %7, i64 %call11)
  %8 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkBox*
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage.addr, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %8, %struct._GtkWidget* %9, i32 1, i32 1, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %10 = load i8*, i8** %label.addr, align 8
  %tobool13 = icmp ne i8* %10, null
  br i1 %tobool13, label %if.then.14, label %if.end.18

if.then.14:                                       ; preds = %if.end
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  %12 = bitcast %struct._GtkWidget* %11 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_box_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %12, i64 %call15)
  %13 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkBox*
  %14 = load i8*, i8** %label.addr, align 8
  %call17 = call %struct._GtkWidget* @gtk_label_new(i8* %14)
  call void @gtk_box_pack_start(%struct._GtkBox* %13, %struct._GtkWidget* %call17, i32 1, i32 1, i32 0)
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.14, %if.end
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage.addr, align 8
  %tobool19 = icmp ne %struct._GtkWidget* %15, null
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.25

land.lhs.true.20:                                 ; preds = %if.end.18
  %16 = load i8, i8* %text_image.addr, align 1
  %tobool21 = trunc i8 %16 to i1
  br i1 %tobool21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %land.lhs.true.20
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call23 = call i64 @gtk_box_get_type() #8
  %call24 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 %call23)
  %19 = bitcast %struct._GTypeInstance* %call24 to %struct._GtkBox*
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage.addr, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %19, %struct._GtkWidget* %20, i32 1, i32 1, i32 0)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.22, %land.lhs.true.20, %if.end.18
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %22 = bitcast %struct._GtkWidget* %21 to %struct._GTypeInstance*
  %call26 = call i64 @gtk_button_get_type() #8
  %call27 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 %call26)
  %23 = bitcast %struct._GTypeInstance* %call27 to %struct._GtkButton*
  call void @gtk_button_set_focus_on_click(%struct._GtkButton* %23, i32 0)
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %25 = bitcast %struct._GtkWidget* %24 to %struct._GTypeInstance*
  %call28 = call i64 @gtk_button_get_type() #8
  %call29 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %25, i64 %call28)
  %26 = bitcast %struct._GTypeInstance* %call29 to %struct._GtkButton*
  call void @gtk_button_set_relief(%struct._GtkButton* %26, i32 2)
  %27 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %28 = bitcast %struct._GtkWidget* %27 to %struct._GTypeInstance*
  %call30 = call i64 @gtk_container_get_type() #8
  %call31 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %28, i64 %call30)
  %29 = bitcast %struct._GTypeInstance* %call31 to %struct._GtkContainer*
  %30 = load %struct._GtkWidget*, %struct._GtkWidget** %vb, align 8
  call void @gtk_container_add(%struct._GtkContainer* %29, %struct._GtkWidget* %30)
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %weventbox, align 8
  %32 = bitcast %struct._GtkWidget* %31 to %struct._GTypeInstance*
  %call32 = call i64 @gtk_container_get_type() #8
  %call33 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %32, i64 %call32)
  %33 = bitcast %struct._GTypeInstance* %call33 to %struct._GtkContainer*
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  call void @gtk_container_add(%struct._GtkContainer* %33, %struct._GtkWidget* %34)
  %35 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %36 = bitcast %struct._GtkToolItem* %35 to %struct._GTypeInstance*
  %call34 = call i64 @gtk_container_get_type() #8
  %call35 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %36, i64 %call34)
  %37 = bitcast %struct._GTypeInstance* %call35 to %struct._GtkContainer*
  %38 = load %struct._GtkWidget*, %struct._GtkWidget** %weventbox, align 8
  call void @gtk_container_add(%struct._GtkContainer* %37, %struct._GtkWidget* %38)
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %wimage.addr, align 8
  %tobool36 = icmp ne %struct._GtkWidget* %39, null
  br i1 %tobool36, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.25
  %40 = load i8*, i8** %label.addr, align 8
  %tobool37 = icmp ne i8* %40, null
  br i1 %tobool37, label %if.then.38, label %if.end.50

if.then.38:                                       ; preds = %lor.lhs.false, %if.end.25
  %41 = load i32, i32* %i.addr, align 4
  %conv = sext i32 %41 to i64
  store i64 %conv, i64* %ii, align 8
  %42 = load i64, i64* %ii, align 8
  %43 = inttoptr i64 %42 to i8*
  store i8* %43, i8** %gi, align 8
  %44 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %45 = bitcast %struct._GtkWidget* %44 to %struct._GTypeInstance*
  %call39 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %45, i64 80)
  %46 = bitcast %struct._GTypeInstance* %call39 to %struct._GObject*
  %47 = bitcast %struct._GObject* %46 to i8*
  %48 = load i8*, i8** %gi, align 8
  %call40 = call i64 @g_signal_connect_data(i8* %47, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @xg_tool_bar_callback to void ()*), i8* %48, void (i8*, %struct._GClosure*)* null, i32 0)
  %49 = load %struct._GtkWidget*, %struct._GtkWidget** %weventbox, align 8
  %50 = bitcast %struct._GtkWidget* %49 to %struct._GTypeInstance*
  %call41 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %50, i64 80)
  %51 = bitcast %struct._GTypeInstance* %call41 to %struct._GObject*
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %53 = bitcast %struct.frame* %52 to i8*
  call void @g_object_set_data(%struct._GObject* %51, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* %53)
  %54 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  %55 = bitcast %struct._GtkToolItem* %54 to %struct._GTypeInstance*
  %call42 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %55, i64 80)
  %56 = bitcast %struct._GTypeInstance* %call42 to %struct._GObject*
  %57 = bitcast %struct._GObject* %56 to i8*
  %call43 = call i64 @g_signal_connect_data(i8* %57, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.73, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventExpose*, i8*)* @xg_tool_bar_item_expose_callback to void ()*), i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  %58 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  call void @gtk_tool_item_set_homogeneous(%struct._GtkToolItem* %58, i32 0)
  %59 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %60 = bitcast %struct._GtkWidget* %59 to i8*
  %call44 = call i64 @g_signal_connect_data(i8* %60, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventButton*, i8*)* @xg_tool_bar_button_cb to void ()*), i8* null, void (i8*, %struct._GClosure*)* null, i32 0)
  %61 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %62 = bitcast %struct._GtkWidget* %61 to %struct._GTypeInstance*
  %call45 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %62, i64 80)
  %63 = bitcast %struct._GTypeInstance* %call45 to %struct._GObject*
  %64 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %65 = bitcast %struct.frame* %64 to i8*
  call void @g_object_set_data(%struct._GObject* %63, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0), i8* %65)
  %66 = load %struct._GtkWidget*, %struct._GtkWidget** %weventbox, align 8
  %67 = bitcast %struct._GtkWidget* %66 to %struct._GTypeInstance*
  %call46 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %67, i64 80)
  %68 = bitcast %struct._GTypeInstance* %call46 to %struct._GObject*
  %69 = bitcast %struct._GObject* %68 to i8*
  %70 = load i8*, i8** %gi, align 8
  %call47 = call i64 @g_signal_connect_data(i8* %69, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.62, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventCrossing*, i8*)* @xg_tool_bar_help_callback to void ()*), i8* %70, void (i8*, %struct._GClosure*)* null, i32 0)
  %71 = load %struct._GtkWidget*, %struct._GtkWidget** %weventbox, align 8
  %72 = bitcast %struct._GtkWidget* %71 to %struct._GTypeInstance*
  %call48 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %72, i64 80)
  %73 = bitcast %struct._GTypeInstance* %call48 to %struct._GObject*
  %74 = bitcast %struct._GObject* %73 to i8*
  %75 = load i8*, i8** %gi, align 8
  %call49 = call i64 @g_signal_connect_data(i8* %74, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.63, i32 0, i32 0), void ()* bitcast (i32 (%struct._GtkWidget*, %struct._GdkEventCrossing*, i8*)* @xg_tool_bar_help_callback to void ()*), i8* %75, void (i8*, %struct._GClosure*)* null, i32 0)
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.38, %lor.lhs.false
  %76 = load %struct._GtkWidget**, %struct._GtkWidget*** %wbutton.addr, align 8
  %tobool51 = icmp ne %struct._GtkWidget** %76, null
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.50
  %77 = load %struct._GtkWidget*, %struct._GtkWidget** %wb, align 8
  %78 = load %struct._GtkWidget**, %struct._GtkWidget*** %wbutton.addr, align 8
  store %struct._GtkWidget* %77, %struct._GtkWidget** %78, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.then.52, %if.end.50
  %79 = load %struct._GtkToolItem*, %struct._GtkToolItem** %ti, align 8
  ret %struct._GtkToolItem* %79
}

declare void @gtk_widget_set_sensitive(%struct._GtkWidget*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @xg_pack_tool_bar(%struct.frame* %f, i64 %pos) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %pos.addr = alloca i64, align 8
  %x = alloca %struct.x_output*, align 8
  %into_hbox = alloca i8, align 1
  %top_widget = alloca %struct._GtkWidget*, align 8
  %vbox_pos = alloca i8, align 1
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load i64, i64* %pos.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 607)
  %cmp = icmp eq i64 %2, %call
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %3 = load i64, i64* %pos.addr, align 8
  %call2 = call i64 @builtin_lisp_symbol(i32 811)
  %cmp3 = icmp eq i64 %3, %call2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %frombool = zext i1 %4 to i8
  store i8 %frombool, i8* %into_hbox, align 1
  %5 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %5, i32 0, i32 17
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget, align 8
  store %struct._GtkWidget* %6, %struct._GtkWidget** %top_widget, align 8
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget4 = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 17
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget4, align 8
  %9 = bitcast %struct._GtkWidget* %8 to %struct._GTypeInstance*
  %call5 = call i64 @gtk_orientable_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %9, i64 %call5)
  %10 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkOrientable*
  %11 = load i8, i8* %into_hbox, align 1
  %tobool = trunc i8 %11 to i1
  %cond = select i1 %tobool, i32 1, i32 0
  call void @gtk_orientable_set_orientation(%struct._GtkOrientable* %10, i32 %cond)
  %12 = load i8, i8* %into_hbox, align 1
  %tobool7 = trunc i8 %12 to i1
  br i1 %tobool7, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end
  %13 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 15
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %hbox_widget, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  %call8 = call i64 @gtk_box_get_type() #8
  %call9 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %15, i64 %call8)
  %16 = bitcast %struct._GTypeInstance* %call9 to %struct._GtkBox*
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %16, %struct._GtkWidget* %17, i32 0, i32 0, i32 0)
  %18 = load i64, i64* %pos.addr, align 8
  %call10 = call i64 @builtin_lisp_symbol(i32 607)
  %cmp11 = icmp eq i64 %18, %call10
  br i1 %cmp11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %if.then
  %19 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hbox_widget13 = getelementptr inbounds %struct.x_output, %struct.x_output* %19, i32 0, i32 15
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %hbox_widget13, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  %call14 = call i64 @gtk_box_get_type() #8
  %call15 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 %call14)
  %22 = bitcast %struct._GTypeInstance* %call15 to %struct._GtkBox*
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_box_reorder_child(%struct._GtkBox* %22, %struct._GtkWidget* %23, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then.12, %if.then
  %24 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_in_hbox = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 18
  %bf.load = load i8, i8* %toolbar_in_hbox, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %toolbar_in_hbox, align 8
  br label %if.end.31

if.else:                                          ; preds = %lor.end
  %25 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %25, i32 0, i32 16
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget, align 8
  %cmp16 = icmp ne %struct._GtkWidget* %26, null
  %frombool17 = zext i1 %cmp16 to i8
  store i8 %frombool17, i8* %vbox_pos, align 1
  %27 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %27, i32 0, i32 14
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget, align 8
  %29 = bitcast %struct._GtkWidget* %28 to %struct._GTypeInstance*
  %call18 = call i64 @gtk_box_get_type() #8
  %call19 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %29, i64 %call18)
  %30 = bitcast %struct._GTypeInstance* %call19 to %struct._GtkBox*
  %31 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %30, %struct._GtkWidget* %31, i32 0, i32 0, i32 0)
  %32 = load i64, i64* %pos.addr, align 8
  %call20 = call i64 @builtin_lisp_symbol(i32 928)
  %cmp21 = icmp eq i64 %32, %call20
  br i1 %cmp21, label %if.then.22, label %if.end.27

if.then.22:                                       ; preds = %if.else
  %33 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget23 = getelementptr inbounds %struct.x_output, %struct.x_output* %33, i32 0, i32 14
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget23, align 8
  %35 = bitcast %struct._GtkWidget* %34 to %struct._GTypeInstance*
  %call24 = call i64 @gtk_box_get_type() #8
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %35, i64 %call24)
  %36 = bitcast %struct._GTypeInstance* %call25 to %struct._GtkBox*
  %37 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  %38 = load i8, i8* %vbox_pos, align 1
  %tobool26 = trunc i8 %38 to i1
  %conv = zext i1 %tobool26 to i32
  call void @gtk_box_reorder_child(%struct._GtkBox* %36, %struct._GtkWidget* %37, i32 %conv)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.22, %if.else
  %39 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_in_hbox28 = getelementptr inbounds %struct.x_output, %struct.x_output* %39, i32 0, i32 18
  %bf.load29 = load i8, i8* %toolbar_in_hbox28, align 8
  %bf.clear30 = and i8 %bf.load29, -2
  store i8 %bf.clear30, i8* %toolbar_in_hbox28, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.27, %if.end
  %40 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_is_packed = getelementptr inbounds %struct.x_output, %struct.x_output* %40, i32 0, i32 18
  %bf.load32 = load i8, i8* %toolbar_is_packed, align 8
  %bf.clear33 = and i8 %bf.load32, -3
  %bf.set34 = or i8 %bf.clear33, 2
  store i8 %bf.set34, i8* %toolbar_is_packed, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @xg_update_tool_bar_sizes(%struct.frame* %f) #0 {
entry:
  %retval = alloca i1, align 1
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %req = alloca %struct._GtkRequisition, align 4
  %nl = alloca i32, align 4
  %nr = alloca i32, align 4
  %nt = alloca i32, align 4
  %nb = alloca i32, align 4
  %top_widget = alloca %struct._GtkWidget*, align 8
  %pos = alloca i32, align 4
  %pos8 = alloca i32, align 4
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  store i32 0, i32* %nl, align 4
  store i32 0, i32* %nr, align 4
  store i32 0, i32* %nt, align 4
  store i32 0, i32* %nb, align 4
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 17
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget, align 8
  store %struct._GtkWidget* %3, %struct._GtkWidget** %top_widget, align 8
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  %5 = bitcast %struct._GtkWidget* %4 to %struct._GTypeInstance*
  %call = call i64 @gtk_widget_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %5, i64 %call)
  %6 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkWidget*
  call void @gtk_widget_size_request(%struct._GtkWidget* %6, %struct._GtkRequisition* %req)
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_in_hbox = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 18
  %bf.load = load i8, i8* %toolbar_in_hbox, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then, label %if.else.7

if.then:                                          ; preds = %entry
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 15
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %hbox_widget, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call3 = call i64 @gtk_container_get_type() #8
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call3)
  %11 = bitcast %struct._GTypeInstance* %call4 to %struct._GtkContainer*
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void (%struct._GtkContainer*, %struct._GtkWidget*, i8*, ...) @gtk_container_child_get(%struct._GtkContainer* %11, %struct._GtkWidget* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.75, i32 0, i32 0), i32* %pos, i8* null)
  %13 = load i32, i32* %pos, align 4
  %cmp = icmp eq i32 %13, 0
  br i1 %cmp, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %width = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 0
  %14 = load i32, i32* %width, align 4
  store i32 %14, i32* %nl, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %width6 = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 0
  %15 = load i32, i32* %width6, align 4
  store i32 %15, i32* %nr, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %if.end.17

if.else.7:                                        ; preds = %entry
  %16 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 14
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_container_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 %call9)
  %19 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkContainer*
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void (%struct._GtkContainer*, %struct._GtkWidget*, i8*, ...) @gtk_container_child_get(%struct._GtkContainer* %19, %struct._GtkWidget* %20, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.75, i32 0, i32 0), i32* %pos8, i8* null)
  %21 = load i32, i32* %pos8, align 4
  %cmp11 = icmp eq i32 %21, 0
  br i1 %cmp11, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.7
  %22 = load i32, i32* %pos8, align 4
  %cmp12 = icmp eq i32 %22, 1
  br i1 %cmp12, label %land.lhs.true, label %if.else.14

land.lhs.true:                                    ; preds = %lor.lhs.false
  %23 = load %struct.x_output*, %struct.x_output** %x, align 8
  %menubar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %23, i32 0, i32 16
  %24 = load %struct._GtkWidget*, %struct._GtkWidget** %menubar_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %24, null
  br i1 %tobool, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %land.lhs.true, %if.else.7
  %height = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %25 = load i32, i32* %height, align 4
  store i32 %25, i32* %nt, align 4
  br label %if.end.16

if.else.14:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %height15 = getelementptr inbounds %struct._GtkRequisition, %struct._GtkRequisition* %req, i32 0, i32 1
  %26 = load i32, i32* %height15, align 4
  store i32 %26, i32* %nb, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.14, %if.then.13
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end
  %27 = load i32, i32* %nl, align 4
  %28 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data18 = getelementptr inbounds %struct.frame, %struct.frame* %28, i32 0, i32 62
  %x19 = bitcast %union.output_data* %output_data18 to %struct.x_output**
  %29 = load %struct.x_output*, %struct.x_output** %x19, align 8
  %toolbar_left_width = getelementptr inbounds %struct.x_output, %struct.x_output* %29, i32 0, i32 3
  %30 = load i32, i32* %toolbar_left_width, align 4
  %cmp20 = icmp ne i32 %27, %30
  br i1 %cmp20, label %if.then.33, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.end.17
  %31 = load i32, i32* %nr, align 4
  %32 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data22 = getelementptr inbounds %struct.frame, %struct.frame* %32, i32 0, i32 62
  %x23 = bitcast %union.output_data* %output_data22 to %struct.x_output**
  %33 = load %struct.x_output*, %struct.x_output** %x23, align 8
  %toolbar_right_width = getelementptr inbounds %struct.x_output, %struct.x_output* %33, i32 0, i32 4
  %34 = load i32, i32* %toolbar_right_width, align 4
  %cmp24 = icmp ne i32 %31, %34
  br i1 %cmp24, label %if.then.33, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %lor.lhs.false.21
  %35 = load i32, i32* %nt, align 4
  %36 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data26 = getelementptr inbounds %struct.frame, %struct.frame* %36, i32 0, i32 62
  %x27 = bitcast %union.output_data* %output_data26 to %struct.x_output**
  %37 = load %struct.x_output*, %struct.x_output** %x27, align 8
  %toolbar_top_height = getelementptr inbounds %struct.x_output, %struct.x_output* %37, i32 0, i32 1
  %38 = load i32, i32* %toolbar_top_height, align 4
  %cmp28 = icmp ne i32 %35, %38
  br i1 %cmp28, label %if.then.33, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false.25
  %39 = load i32, i32* %nb, align 4
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data30 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 62
  %x31 = bitcast %union.output_data* %output_data30 to %struct.x_output**
  %41 = load %struct.x_output*, %struct.x_output** %x31, align 8
  %toolbar_bottom_height = getelementptr inbounds %struct.x_output, %struct.x_output* %41, i32 0, i32 2
  %42 = load i32, i32* %toolbar_bottom_height, align 4
  %cmp32 = icmp ne i32 %39, %42
  br i1 %cmp32, label %if.then.33, label %if.else.58

if.then.33:                                       ; preds = %lor.lhs.false.29, %lor.lhs.false.25, %lor.lhs.false.21, %if.end.17
  %43 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data34 = getelementptr inbounds %struct.frame, %struct.frame* %43, i32 0, i32 62
  %x35 = bitcast %union.output_data* %output_data34 to %struct.x_output**
  %44 = load %struct.x_output*, %struct.x_output** %x35, align 8
  %toolbar_bottom_height36 = getelementptr inbounds %struct.x_output, %struct.x_output* %44, i32 0, i32 2
  store i32 0, i32* %toolbar_bottom_height36, align 4
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data37 = getelementptr inbounds %struct.frame, %struct.frame* %45, i32 0, i32 62
  %x38 = bitcast %union.output_data* %output_data37 to %struct.x_output**
  %46 = load %struct.x_output*, %struct.x_output** %x38, align 8
  %toolbar_top_height39 = getelementptr inbounds %struct.x_output, %struct.x_output* %46, i32 0, i32 1
  store i32 0, i32* %toolbar_top_height39, align 4
  %47 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data40 = getelementptr inbounds %struct.frame, %struct.frame* %47, i32 0, i32 62
  %x41 = bitcast %union.output_data* %output_data40 to %struct.x_output**
  %48 = load %struct.x_output*, %struct.x_output** %x41, align 8
  %toolbar_left_width42 = getelementptr inbounds %struct.x_output, %struct.x_output* %48, i32 0, i32 3
  store i32 0, i32* %toolbar_left_width42, align 4
  %49 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data43 = getelementptr inbounds %struct.frame, %struct.frame* %49, i32 0, i32 62
  %x44 = bitcast %union.output_data* %output_data43 to %struct.x_output**
  %50 = load %struct.x_output*, %struct.x_output** %x44, align 8
  %toolbar_right_width45 = getelementptr inbounds %struct.x_output, %struct.x_output* %50, i32 0, i32 4
  store i32 0, i32* %toolbar_right_width45, align 4
  %51 = load i32, i32* %nl, align 4
  %52 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data46 = getelementptr inbounds %struct.frame, %struct.frame* %52, i32 0, i32 62
  %x47 = bitcast %union.output_data* %output_data46 to %struct.x_output**
  %53 = load %struct.x_output*, %struct.x_output** %x47, align 8
  %toolbar_left_width48 = getelementptr inbounds %struct.x_output, %struct.x_output* %53, i32 0, i32 3
  store i32 %51, i32* %toolbar_left_width48, align 4
  %54 = load i32, i32* %nr, align 4
  %55 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data49 = getelementptr inbounds %struct.frame, %struct.frame* %55, i32 0, i32 62
  %x50 = bitcast %union.output_data* %output_data49 to %struct.x_output**
  %56 = load %struct.x_output*, %struct.x_output** %x50, align 8
  %toolbar_right_width51 = getelementptr inbounds %struct.x_output, %struct.x_output* %56, i32 0, i32 4
  store i32 %54, i32* %toolbar_right_width51, align 4
  %57 = load i32, i32* %nt, align 4
  %58 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data52 = getelementptr inbounds %struct.frame, %struct.frame* %58, i32 0, i32 62
  %x53 = bitcast %union.output_data* %output_data52 to %struct.x_output**
  %59 = load %struct.x_output*, %struct.x_output** %x53, align 8
  %toolbar_top_height54 = getelementptr inbounds %struct.x_output, %struct.x_output* %59, i32 0, i32 1
  store i32 %57, i32* %toolbar_top_height54, align 4
  %60 = load i32, i32* %nb, align 4
  %61 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data55 = getelementptr inbounds %struct.frame, %struct.frame* %61, i32 0, i32 62
  %x56 = bitcast %union.output_data* %output_data55 to %struct.x_output**
  %62 = load %struct.x_output*, %struct.x_output** %x56, align 8
  %toolbar_bottom_height57 = getelementptr inbounds %struct.x_output, %struct.x_output* %62, i32 0, i32 2
  store i32 %60, i32* %toolbar_bottom_height57, align 4
  store i1 true, i1* %retval
  br label %return

if.else.58:                                       ; preds = %lor.lhs.false.29
  store i1 false, i1* %retval
  br label %return

return:                                           ; preds = %if.else.58, %if.then.33
  %63 = load i1, i1* %retval
  ret i1 %63
}

declare i64 @Fmemq(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @free_frame_tool_bar(%struct.frame* %f) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %tbinfo = alloca %struct.xg_frame_tb_info*, align 8
  %top_widget = alloca %struct._GtkWidget*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 17
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget, align 8
  %tobool = icmp ne %struct._GtkWidget* %3, null
  br i1 %tobool, label %if.then, label %if.end.41

if.then:                                          ; preds = %entry
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget2 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 17
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget2, align 8
  store %struct._GtkWidget* %5, %struct._GtkWidget** %top_widget, align 8
  call void @block_input()
  %6 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_is_packed = getelementptr inbounds %struct.x_output, %struct.x_output* %6, i32 0, i32 18
  %bf.load = load i8, i8* %toolbar_is_packed, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then.3, label %if.else.11

if.then.3:                                        ; preds = %if.then
  %7 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_in_hbox = getelementptr inbounds %struct.x_output, %struct.x_output* %7, i32 0, i32 18
  %bf.load4 = load i8, i8* %toolbar_in_hbox, align 8
  %bf.clear5 = and i8 %bf.load4, 1
  %bf.cast6 = trunc i8 %bf.clear5 to i1
  br i1 %bf.cast6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %if.then.3
  %8 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %8, i32 0, i32 15
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %hbox_widget, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call = call i64 @gtk_container_get_type() #8
  %call8 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call)
  %11 = bitcast %struct._GTypeInstance* %call8 to %struct._GtkContainer*
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %11, %struct._GtkWidget* %12)
  br label %if.end

if.else:                                          ; preds = %if.then.3
  %13 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %13, i32 0, i32 14
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_container_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %15, i64 %call9)
  %16 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkContainer*
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %16, %struct._GtkWidget* %17)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.7
  br label %if.end.13

if.else.11:                                       ; preds = %if.then
  %18 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget12 = getelementptr inbounds %struct.x_output, %struct.x_output* %18, i32 0, i32 17
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget12, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %19)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.11, %if.end
  %20 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget14 = getelementptr inbounds %struct.x_output, %struct.x_output* %20, i32 0, i32 17
  store %struct._GtkWidget* null, %struct._GtkWidget** %toolbar_widget14, align 8
  %21 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget15 = getelementptr inbounds %struct.x_output, %struct.x_output* %21, i32 0, i32 17
  store %struct._GtkWidget* null, %struct._GtkWidget** %toolbar_widget15, align 8
  %22 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_is_packed16 = getelementptr inbounds %struct.x_output, %struct.x_output* %22, i32 0, i32 18
  %bf.load17 = load i8, i8* %toolbar_is_packed16, align 8
  %bf.clear18 = and i8 %bf.load17, -3
  store i8 %bf.clear18, i8* %toolbar_is_packed16, align 8
  %23 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data19 = getelementptr inbounds %struct.frame, %struct.frame* %23, i32 0, i32 62
  %x20 = bitcast %union.output_data* %output_data19 to %struct.x_output**
  %24 = load %struct.x_output*, %struct.x_output** %x20, align 8
  %toolbar_bottom_height = getelementptr inbounds %struct.x_output, %struct.x_output* %24, i32 0, i32 2
  store i32 0, i32* %toolbar_bottom_height, align 4
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data21 = getelementptr inbounds %struct.frame, %struct.frame* %25, i32 0, i32 62
  %x22 = bitcast %union.output_data* %output_data21 to %struct.x_output**
  %26 = load %struct.x_output*, %struct.x_output** %x22, align 8
  %toolbar_top_height = getelementptr inbounds %struct.x_output, %struct.x_output* %26, i32 0, i32 1
  store i32 0, i32* %toolbar_top_height, align 4
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data23 = getelementptr inbounds %struct.frame, %struct.frame* %27, i32 0, i32 62
  %x24 = bitcast %union.output_data* %output_data23 to %struct.x_output**
  %28 = load %struct.x_output*, %struct.x_output** %x24, align 8
  %toolbar_right_width = getelementptr inbounds %struct.x_output, %struct.x_output* %28, i32 0, i32 4
  store i32 0, i32* %toolbar_right_width, align 4
  %29 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data25 = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 62
  %x26 = bitcast %union.output_data* %output_data25 to %struct.x_output**
  %30 = load %struct.x_output*, %struct.x_output** %x26, align 8
  %toolbar_left_width = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 3
  store i32 0, i32* %toolbar_left_width, align 4
  %31 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data27 = getelementptr inbounds %struct.frame, %struct.frame* %31, i32 0, i32 62
  %x28 = bitcast %union.output_data* %output_data27 to %struct.x_output**
  %32 = load %struct.x_output*, %struct.x_output** %x28, align 8
  %widget = getelementptr inbounds %struct.x_output, %struct.x_output* %32, i32 0, i32 12
  %33 = load %struct._GtkWidget*, %struct._GtkWidget** %widget, align 8
  %34 = bitcast %struct._GtkWidget* %33 to %struct._GTypeInstance*
  %call29 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %34, i64 80)
  %35 = bitcast %struct._GTypeInstance* %call29 to %struct._GObject*
  %call30 = call i8* @g_object_get_data(%struct._GObject* %35, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0))
  %36 = bitcast i8* %call30 to %struct.xg_frame_tb_info*
  store %struct.xg_frame_tb_info* %36, %struct.xg_frame_tb_info** %tbinfo, align 8
  %37 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %tobool31 = icmp ne %struct.xg_frame_tb_info* %37, null
  br i1 %tobool31, label %if.then.32, label %if.end.37

if.then.32:                                       ; preds = %if.end.13
  %38 = load %struct.xg_frame_tb_info*, %struct.xg_frame_tb_info** %tbinfo, align 8
  %39 = bitcast %struct.xg_frame_tb_info* %38 to i8*
  call void @xfree(i8* %39)
  %40 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data33 = getelementptr inbounds %struct.frame, %struct.frame* %40, i32 0, i32 62
  %x34 = bitcast %union.output_data* %output_data33 to %struct.x_output**
  %41 = load %struct.x_output*, %struct.x_output** %x34, align 8
  %widget35 = getelementptr inbounds %struct.x_output, %struct.x_output* %41, i32 0, i32 12
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %widget35, align 8
  %43 = bitcast %struct._GtkWidget* %42 to %struct._GTypeInstance*
  %call36 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %43, i64 80)
  %44 = bitcast %struct._GTypeInstance* %call36 to %struct._GObject*
  call void @g_object_set_data(%struct._GObject* %44, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i8* null)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.32, %if.end.13
  %45 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call38 = call i64 @builtin_lisp_symbol(i32 465)
  %call39 = call i64 @builtin_lisp_symbol(i32 0)
  call void @frame_size_history_add(%struct.frame* %45, i64 %call38, i32 0, i32 0, i64 %call39)
  %46 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call40 = call i64 @builtin_lisp_symbol(i32 923)
  call void @adjust_frame_size(%struct.frame* %46, i32 -1, i32 -1, i32 2, i1 zeroext false, i64 %call40)
  call void @unblock_input()
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.37, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @xg_change_toolbar_position(%struct.frame* %f, i64 %pos) #0 {
entry:
  %f.addr = alloca %struct.frame*, align 8
  %pos.addr = alloca i64, align 8
  %x = alloca %struct.x_output*, align 8
  %top_widget = alloca %struct._GtkWidget*, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %0, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %1 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %1, %struct.x_output** %x, align 8
  %2 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %2, i32 0, i32 17
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget, align 8
  store %struct._GtkWidget* %3, %struct._GtkWidget** %top_widget, align 8
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_widget2 = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 17
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %toolbar_widget2, align 8
  %tobool = icmp ne %struct._GtkWidget* %5, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  %tobool3 = icmp ne %struct._GtkWidget* %6, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  call void @block_input()
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  %8 = bitcast %struct._GtkWidget* %7 to i8*
  %call = call i8* @g_object_ref(i8* %8)
  %9 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_is_packed = getelementptr inbounds %struct.x_output, %struct.x_output* %9, i32 0, i32 18
  %bf.load = load i8, i8* %toolbar_is_packed, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = trunc i8 %bf.clear to i1
  br i1 %bf.cast, label %if.then.4, label %if.end.14

if.then.4:                                        ; preds = %if.end
  %10 = load %struct.x_output*, %struct.x_output** %x, align 8
  %toolbar_in_hbox = getelementptr inbounds %struct.x_output, %struct.x_output* %10, i32 0, i32 18
  %bf.load5 = load i8, i8* %toolbar_in_hbox, align 8
  %bf.clear6 = and i8 %bf.load5, 1
  %bf.cast7 = trunc i8 %bf.clear6 to i1
  br i1 %bf.cast7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.then.4
  %11 = load %struct.x_output*, %struct.x_output** %x, align 8
  %hbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %11, i32 0, i32 15
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %hbox_widget, align 8
  %13 = bitcast %struct._GtkWidget* %12 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_container_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %13, i64 %call9)
  %14 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkContainer*
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %14, %struct._GtkWidget* %15)
  br label %if.end.13

if.else:                                          ; preds = %if.then.4
  %16 = load %struct.x_output*, %struct.x_output** %x, align 8
  %vbox_widget = getelementptr inbounds %struct.x_output, %struct.x_output* %16, i32 0, i32 14
  %17 = load %struct._GtkWidget*, %struct._GtkWidget** %vbox_widget, align 8
  %18 = bitcast %struct._GtkWidget* %17 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_container_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %18, i64 %call11)
  %19 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkContainer*
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %19, %struct._GtkWidget* %20)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.8
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %21 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %22 = load i64, i64* %pos.addr, align 8
  call void @xg_pack_tool_bar(%struct.frame* %21, i64 %22)
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %top_widget, align 8
  %24 = bitcast %struct._GtkWidget* %23 to i8*
  call void @g_object_unref(i8* %24)
  %25 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call15 = call zeroext i1 @xg_update_tool_bar_sizes(%struct.frame* %25)
  br i1 %call15, label %if.then.16, label %if.end.20

if.then.16:                                       ; preds = %if.end.14
  %26 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call17 = call i64 @builtin_lisp_symbol(i32 1064)
  %call18 = call i64 @builtin_lisp_symbol(i32 0)
  call void @frame_size_history_add(%struct.frame* %26, i64 %call17, i32 0, i32 0, i64 %call18)
  %27 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %call19 = call i64 @builtin_lisp_symbol(i32 923)
  call void @adjust_frame_size(%struct.frame* %27, i32 -1, i32 -1, i32 2, i1 zeroext false, i64 %call19)
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.16, %if.end.14
  call void @unblock_input()
  br label %return

return:                                           ; preds = %if.end.20, %if.then
  ret void
}

declare i8* @g_object_ref(i8*) #1

; Function Attrs: nounwind uwtable
define void @xg_initialize() #0 {
entry:
  %binding_set = alloca %struct._GtkBindingSet*, align 8
  %settings = alloca %struct._GtkSettings*, align 8
  %call = call i32 @XftInit(i8* null)
  store %struct._GdkDisplay* null, %struct._GdkDisplay** @gdpy_def, align 8
  store i8 0, i8* @xg_ignore_gtk_scrollbar, align 1
  store %struct.xg_list_node_* null, %struct.xg_list_node_** getelementptr inbounds (%struct.xg_list_node_, %struct.xg_list_node_* @xg_menu_item_cb_list, i32 0, i32 1), align 8
  store %struct.xg_list_node_* null, %struct.xg_list_node_** getelementptr inbounds (%struct.xg_list_node_, %struct.xg_list_node_* @xg_menu_item_cb_list, i32 0, i32 0), align 8
  store %struct.xg_list_node_* null, %struct.xg_list_node_** getelementptr inbounds (%struct.xg_list_node_, %struct.xg_list_node_* @xg_menu_cb_list, i32 0, i32 1), align 8
  store %struct.xg_list_node_* null, %struct.xg_list_node_** getelementptr inbounds (%struct.xg_list_node_, %struct.xg_list_node_* @xg_menu_cb_list, i32 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 2), align 8
  store i64 0, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  store %struct._GtkWidget** null, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %call1 = call %struct._GdkDisplay* @gdk_display_get_default()
  %call2 = call %struct._GdkScreen* @gdk_display_get_default_screen(%struct._GdkDisplay* %call1)
  %call3 = call %struct._GtkSettings* @gtk_settings_get_for_screen(%struct._GdkScreen* %call2)
  store %struct._GtkSettings* %call3, %struct._GtkSettings** %settings, align 8
  %0 = load %struct._GtkSettings*, %struct._GtkSettings** %settings, align 8
  call void @gtk_settings_set_string_property(%struct._GtkSettings* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %1 = load %struct._GtkSettings*, %struct._GtkSettings** %settings, align 8
  call void @gtk_settings_set_string_property(%struct._GtkSettings* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0))
  %call4 = call i64 @gtk_dialog_get_type() #8
  %call5 = call i8* @g_type_class_ref(i64 %call4)
  %call6 = call %struct._GtkBindingSet* @gtk_binding_set_by_class(i8* %call5)
  store %struct._GtkBindingSet* %call6, %struct._GtkBindingSet** %binding_set, align 8
  %2 = load %struct._GtkBindingSet*, %struct._GtkBindingSet** %binding_set, align 8
  call void (%struct._GtkBindingSet*, i32, i32, i8*, i32, ...) @gtk_binding_entry_add_signal(%struct._GtkBindingSet* %2, i32 103, i32 4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), i32 0)
  %call7 = call i64 @gtk_menu_shell_get_type() #8
  %call8 = call i8* @g_type_class_ref(i64 %call7)
  %call9 = call %struct._GtkBindingSet* @gtk_binding_set_by_class(i8* %call8)
  store %struct._GtkBindingSet* %call9, %struct._GtkBindingSet** %binding_set, align 8
  %3 = load %struct._GtkBindingSet*, %struct._GtkBindingSet** %binding_set, align 8
  call void (%struct._GtkBindingSet*, i32, i32, i8*, i32, ...) @gtk_binding_entry_add_signal(%struct._GtkBindingSet* %3, i32 103, i32 4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i32 0, i32 0), i32 0)
  call void @update_theme_scrollbar_width()
  call void @update_theme_scrollbar_height()
  store i8* null, i8** @x_last_font_name, align 8
  ret void
}

declare i32 @XftInit(i8*) #1

declare %struct._GdkScreen* @gdk_display_get_default_screen(%struct._GdkDisplay*) #1

declare void @gtk_settings_set_string_property(%struct._GtkSettings*, i8*, i8*, i8*) #1

declare %struct._GtkBindingSet* @gtk_binding_set_by_class(i8*) #1

declare i8* @g_type_class_ref(i64) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_dialog_get_type() #3

declare void @gtk_binding_entry_add_signal(%struct._GtkBindingSet*, i32, i32, i8*, i32, ...) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_menu_shell_get_type() #3

; Function Attrs: nounwind uwtable
define internal void @update_theme_scrollbar_width() #0 {
entry:
  %vadj = alloca %struct._GtkObject*, align 8
  %wscroll = alloca %struct._GtkWidget*, align 8
  %w = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 0, i32* %w, align 4
  store i32 0, i32* %b, align 4
  %call = call %struct._GtkObject* @gtk_adjustment_new(double 1.000000e+00, double 1.000000e+00, double 1.000000e+07, double 1.000000e-01, double 1.000000e-01, double 1.000000e-01)
  store %struct._GtkObject* %call, %struct._GtkObject** %vadj, align 8
  %0 = load %struct._GtkObject*, %struct._GtkObject** %vadj, align 8
  %1 = bitcast %struct._GtkObject* %0 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_adjustment_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call1)
  %2 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkAdjustment*
  %call3 = call %struct._GtkWidget* @gtk_vscrollbar_new(%struct._GtkAdjustment* %2)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %wscroll, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %4 = bitcast %struct._GtkWidget* %3 to %struct._GTypeInstance*
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %4, i64 80)
  %5 = bitcast %struct._GTypeInstance* %call4 to %struct._GObject*
  %6 = bitcast %struct._GObject* %5 to i8*
  %call5 = call i8* @g_object_ref_sink(i8* %6)
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void (%struct._GtkWidget*, i8*, ...) @gtk_widget_style_get(%struct._GtkWidget* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i32 0, i32 0), i32* %w, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i32 0, i32 0), i32* %b, i8* null)
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %8)
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 80)
  %11 = bitcast %struct._GTypeInstance* %call6 to %struct._GObject*
  %12 = bitcast %struct._GObject* %11 to i8*
  call void @g_object_unref(i8* %12)
  %13 = load i32, i32* %b, align 4
  %mul = mul nsw i32 2, %13
  %14 = load i32, i32* %w, align 4
  %add = add nsw i32 %14, %mul
  store i32 %add, i32* %w, align 4
  %15 = load i32, i32* %w, align 4
  %cmp = icmp slt i32 %15, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 16, i32* %w, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load i32, i32* %w, align 4
  store i32 %16, i32* @scroll_bar_width_for_theme, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @update_theme_scrollbar_height() #0 {
entry:
  %hadj = alloca %struct._GtkObject*, align 8
  %wscroll = alloca %struct._GtkWidget*, align 8
  %w = alloca i32, align 4
  %b = alloca i32, align 4
  store i32 0, i32* %w, align 4
  store i32 0, i32* %b, align 4
  %call = call %struct._GtkObject* @gtk_adjustment_new(double 1.000000e+00, double 1.000000e+00, double 1.000000e+07, double 1.000000e-01, double 1.000000e-01, double 1.000000e-01)
  store %struct._GtkObject* %call, %struct._GtkObject** %hadj, align 8
  %0 = load %struct._GtkObject*, %struct._GtkObject** %hadj, align 8
  %1 = bitcast %struct._GtkObject* %0 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_adjustment_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call1)
  %2 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkAdjustment*
  %call3 = call %struct._GtkWidget* @gtk_hscrollbar_new(%struct._GtkAdjustment* %2)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %wscroll, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %4 = bitcast %struct._GtkWidget* %3 to %struct._GTypeInstance*
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %4, i64 80)
  %5 = bitcast %struct._GTypeInstance* %call4 to %struct._GObject*
  %6 = bitcast %struct._GObject* %5 to i8*
  %call5 = call i8* @g_object_ref_sink(i8* %6)
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void (%struct._GtkWidget*, i8*, ...) @gtk_widget_style_get(%struct._GtkWidget* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i32 0, i32 0), i32* %w, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i32 0, i32 0), i32* %b, i8* null)
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %8)
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %wscroll, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 80)
  %11 = bitcast %struct._GTypeInstance* %call6 to %struct._GObject*
  %12 = bitcast %struct._GObject* %11 to i8*
  call void @g_object_unref(i8* %12)
  %13 = load i32, i32* %b, align 4
  %mul = mul nsw i32 2, %13
  %14 = load i32, i32* %w, align 4
  %add = add nsw i32 %14, %mul
  store i32 %add, i32* %w, align 4
  %15 = load i32, i32* %w, align 4
  %cmp = icmp slt i32 %15, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 12, i32* %w, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load i32, i32* %w, align 4
  store i32 %16, i32* @scroll_bar_height_for_theme, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @getenv(i8*) #5

; Function Attrs: nounwind readonly
declare i64 @atol(i8*) #2

; Function Attrs: nounwind readnone
declare i64 @gtk_menu_get_type() #3

declare void @gtk_menu_set_screen(%struct._GtkMenu*, %struct._GdkScreen*) #1

declare void @gtk_window_set_screen(%struct._GtkWindow*, %struct._GdkScreen*) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #5

declare i32 @g_log_set_handler(i8*, i32, void (i8*, i32, i8*, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @my_log_handler(i8* %log_domain, i32 %log_level, i8* %msg, i8* %user_data) #0 {
entry:
  %log_domain.addr = alloca i8*, align 8
  %log_level.addr = alloca i32, align 4
  %msg.addr = alloca i8*, align 8
  %user_data.addr = alloca i8*, align 8
  store i8* %log_domain, i8** %log_domain.addr, align 8
  store i32 %log_level, i32* %log_level.addr, align 4
  store i8* %msg, i8** %msg.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %msg.addr, align 8
  %call = call i8* @strstr(i8* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i32 0, i32 0)) #7
  %tobool = icmp ne i8* %call, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i8*, i8** %log_domain.addr, align 8
  %3 = load i8*, i8** %msg.addr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.42, i32 0, i32 0), i8* %2, i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @gtk_window_parse_geometry(%struct._GtkWindow*, i8*) #1

declare void @g_log_remove_handler(i8*, i32) #1

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #2

declare %struct._GdkColormap* @gtk_widget_get_colormap(%struct._GtkWidget*) #1

declare void @gdk_colormap_query_color(%struct._GdkColormap*, i64, %struct._GdkColor*) #1

declare void @gtk_widget_modify_bg(%struct._GtkWidget*, i32, %struct._GdkColor*) #1

declare %struct._GtkWidget* @gtk_label_new(i8*) #1

declare %struct._GtkWidget* @gtk_widget_get_toplevel(%struct._GtkWidget*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_label_get_type() #3

declare void @gtk_label_set_line_wrap(%struct._GtkLabel*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @hierarchy_ch_cb(%struct._GtkWidget* %widget, %struct._GtkWidget* %previous_toplevel, i8* %user_data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %previous_toplevel.addr = alloca %struct._GtkWidget*, align 8
  %user_data.addr = alloca i8*, align 8
  %f = alloca %struct.frame*, align 8
  %x = alloca %struct.x_output*, align 8
  %top = alloca %struct._GtkWidget*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store %struct._GtkWidget* %previous_toplevel, %struct._GtkWidget** %previous_toplevel.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.frame*
  store %struct.frame* %1, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %2, i32 0, i32 62
  %x1 = bitcast %union.output_data* %output_data to %struct.x_output**
  %3 = load %struct.x_output*, %struct.x_output** %x1, align 8
  store %struct.x_output* %3, %struct.x_output** %x, align 8
  %4 = load %struct.x_output*, %struct.x_output** %x, align 8
  %ttip_lbl = getelementptr inbounds %struct.x_output, %struct.x_output* %4, i32 0, i32 22
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %ttip_lbl, align 8
  %call = call %struct._GtkWidget* @gtk_widget_get_toplevel(%struct._GtkWidget* %5)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %top, align 8
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %top, align 8
  %tobool = icmp ne %struct._GtkWidget* %6, null
  br i1 %tobool, label %lor.lhs.false, label %if.then.11

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %top, align 8
  %8 = bitcast %struct._GtkWidget* %7 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %8, %struct._GTypeInstance** %__inst, align 8
  %call2 = call i64 @gtk_window_get_type() #8
  store i64 %call2, i64* %__t, align 8
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool3 = icmp ne %struct._GTypeInstance* %9, null
  br i1 %tobool3, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %__r, align 4
  br label %if.end.9

if.else:                                          ; preds = %lor.lhs.false
  %10 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %10, i32 0, i32 0
  %11 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool4 = icmp ne %struct._GTypeClass* %11, null
  br i1 %tobool4, label %land.lhs.true, label %if.else.7

land.lhs.true:                                    ; preds = %if.else
  %12 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class5 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %12, i32 0, i32 0
  %13 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class5, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %13, i32 0, i32 0
  %14 = load i64, i64* %g_type, align 8
  %15 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %14, %15
  br i1 %cmp, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.7:                                        ; preds = %land.lhs.true, %if.else
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %17 = load i64, i64* %__t, align 8
  %call8 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %16, i64 %17) #7
  store i32 %call8, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.7, %if.then.6
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then
  %18 = load i32, i32* %__r, align 4
  store i32 %18, i32* %tmp
  %19 = load i32, i32* %tmp
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %if.end.9, %entry
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %previous_toplevel.addr, align 8
  call void @gtk_widget_hide(%struct._GtkWidget* %20)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.9
  ret void
}

declare i8* @gdk_display_get_name(%struct._GdkDisplay*) #1

declare i64 @intern(i8*) #1

declare void @kbd_buffer_store_event(%struct.input_event*) #1

declare void @x_set_scroll_bar_default_width(%struct.frame*) #1

declare void @x_set_scroll_bar_default_height(%struct.frame*) #1

declare i32 @XGetGeometry(%struct._XDisplay*, i64, i64*, i32*, i32*, i32*, i32*, i32*, i32*) #1

declare %struct._XImage* @XGetImage(%struct._XDisplay*, i64, i32, i32, i32, i32, i64, i32) #1

declare %struct._GdkPixbuf* @gdk_pixbuf_new(i32, i32, i32, i32, i32) #1

declare i8* @gdk_pixbuf_get_pixels(%struct._GdkPixbuf*) #1

declare i32 @gdk_pixbuf_get_rowstride(%struct._GdkPixbuf*) #1

declare %struct._GtkWidget* @gtk_file_selection_new(i8*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_file_selection_get_type() #3

declare void @gtk_file_selection_set_filename(%struct._GtkFileSelection*, i8*) #1

declare void @gtk_file_selection_hide_fileop_buttons(%struct._GtkFileSelection*) #1

; Function Attrs: nounwind uwtable
define internal i8* @xg_get_file_name_from_selector(%struct._GtkWidget* %w) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %filesel = alloca %struct._GtkFileSelection*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_file_selection_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkFileSelection*
  store %struct._GtkFileSelection* %2, %struct._GtkFileSelection** %filesel, align 8
  %3 = load %struct._GtkFileSelection*, %struct._GtkFileSelection** %filesel, align 8
  %call2 = call i8* @gtk_file_selection_get_filename(%struct._GtkFileSelection* %3)
  %call3 = call noalias i8* @xstrdup(i8* %call2)
  ret i8* %call3
}

declare i8* @gtk_file_selection_get_filename(%struct._GtkFileSelection*) #1

declare %struct._GtkWidget* @gtk_file_chooser_dialog_new(i8*, %struct._GtkWindow*, i32, i8*, ...) #1

declare void @gtk_file_chooser_set_local_only(%struct._GtkFileChooser*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_file_chooser_get_type() #3

declare void @gtk_widget_show(%struct._GtkWidget*) #1

declare %struct._GtkWidget* @gtk_check_button_new_with_label(i8*) #1

declare void @gtk_toggle_button_set_active(%struct._GtkToggleButton*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_toggle_button_get_type() #3

; Function Attrs: nounwind uwtable
define internal void @xg_toggle_visibility_cb(%struct._GtkWidget* %widget, i8* %data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %data.addr = alloca i8*, align 8
  %dialog = alloca %struct._GtkFileChooser*, align 8
  %visible = alloca i32, align 4
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_file_chooser_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkFileChooser*
  store %struct._GtkFileChooser* %2, %struct._GtkFileChooser** %dialog, align 8
  %3 = load %struct._GtkFileChooser*, %struct._GtkFileChooser** %dialog, align 8
  %4 = bitcast %struct._GtkFileChooser* %3 to %struct._GTypeInstance*
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %4, i64 80)
  %5 = bitcast %struct._GTypeInstance* %call2 to %struct._GObject*
  %6 = bitcast %struct._GObject* %5 to i8*
  call void (i8*, i8*, ...) @g_object_get(i8* %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), i32* %visible, i8* null)
  %7 = load %struct._GtkFileChooser*, %struct._GtkFileChooser** %dialog, align 8
  %8 = bitcast %struct._GtkFileChooser* %7 to %struct._GTypeInstance*
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %8, i64 80)
  %9 = bitcast %struct._GTypeInstance* %call3 to %struct._GObject*
  %10 = bitcast %struct._GObject* %9 to i8*
  %11 = load i32, i32* %visible, align 4
  %tobool = icmp ne i32 %11, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  call void (i8*, i8*, ...) @g_object_set(i8* %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), i32 %lnot.ext, i8* null)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xg_toggle_notify_cb(%struct._GObject* %gobject, %struct._GParamSpec* %arg1, i8* %user_data) #0 {
entry:
  %gobject.addr = alloca %struct._GObject*, align 8
  %arg1.addr = alloca %struct._GParamSpec*, align 8
  %user_data.addr = alloca i8*, align 8
  %wtoggle = alloca %struct._GtkWidget*, align 8
  %visible = alloca i32, align 4
  %toggle_on = alloca i32, align 4
  %cb = alloca i8*, align 8
  store %struct._GObject* %gobject, %struct._GObject** %gobject.addr, align 8
  store %struct._GParamSpec* %arg1, %struct._GParamSpec** %arg1.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load %struct._GParamSpec*, %struct._GParamSpec** %arg1.addr, align 8
  %name = getelementptr inbounds %struct._GParamSpec, %struct._GParamSpec* %0, i32 0, i32 1
  %1 = load i8*, i8** %name, align 8
  %call = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0)) #7
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %user_data.addr, align 8
  %3 = bitcast i8* %2 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_widget_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 %call1)
  %4 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkWidget*
  store %struct._GtkWidget* %4, %struct._GtkWidget** %wtoggle, align 8
  %5 = load %struct._GObject*, %struct._GObject** %gobject.addr, align 8
  %6 = bitcast %struct._GObject* %5 to %struct._GTypeInstance*
  %call3 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 80)
  %7 = bitcast %struct._GTypeInstance* %call3 to %struct._GObject*
  %8 = bitcast %struct._GObject* %7 to i8*
  call void (i8*, i8*, ...) @g_object_get(i8* %8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i32 0, i32 0), i32* %visible, i8* null)
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call4 = call i64 @gtk_toggle_button_get_type() #8
  %call5 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call4)
  %11 = bitcast %struct._GTypeInstance* %call5 to %struct._GtkToggleButton*
  %call6 = call i32 @gtk_toggle_button_get_active(%struct._GtkToggleButton* %11)
  store i32 %call6, i32* %toggle_on, align 4
  %12 = load i32, i32* %visible, align 4
  %tobool = icmp ne i32 %12, 0
  %lnot = xor i1 %tobool, true
  %lnot7 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot7 to i32
  %13 = load i32, i32* %toggle_on, align 4
  %tobool8 = icmp ne i32 %13, 0
  %lnot9 = xor i1 %tobool8, true
  %lnot11 = xor i1 %lnot9, true
  %lnot.ext12 = zext i1 %lnot11 to i32
  %cmp13 = icmp ne i32 %lnot.ext, %lnot.ext12
  br i1 %cmp13, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then
  store i8* bitcast (void (%struct._GtkWidget*, i8*)* @xg_toggle_visibility_cb to i8*), i8** %cb, align 8
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  %call15 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %15, i64 80)
  %16 = bitcast %struct._GTypeInstance* %call15 to %struct._GObject*
  %17 = bitcast %struct._GObject* %16 to i8*
  %18 = load i8*, i8** %cb, align 8
  %19 = load %struct._GObject*, %struct._GObject** %gobject.addr, align 8
  %20 = bitcast %struct._GObject* %19 to i8*
  %call16 = call i32 @g_signal_handlers_block_matched(i8* %17, i32 24, i32 0, i32 0, %struct._GClosure* null, i8* %18, i8* %20)
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %22 = bitcast %struct._GtkWidget* %21 to %struct._GTypeInstance*
  %call17 = call i64 @gtk_toggle_button_get_type() #8
  %call18 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %22, i64 %call17)
  %23 = bitcast %struct._GTypeInstance* %call18 to %struct._GtkToggleButton*
  %24 = load i32, i32* %visible, align 4
  call void @gtk_toggle_button_set_active(%struct._GtkToggleButton* %23, i32 %24)
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoggle, align 8
  %26 = bitcast %struct._GtkWidget* %25 to %struct._GTypeInstance*
  %call19 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %26, i64 80)
  %27 = bitcast %struct._GTypeInstance* %call19 to %struct._GObject*
  %28 = bitcast %struct._GObject* %27 to i8*
  %29 = load i8*, i8** %cb, align 8
  %30 = load %struct._GObject*, %struct._GObject** %gobject.addr, align 8
  %31 = bitcast %struct._GObject* %30 to i8*
  %call20 = call i32 @g_signal_handlers_unblock_matched(i8* %28, i32 24, i32 0, i32 0, %struct._GClosure* null, i8* %29, i8* %31)
  br label %if.end

if.end:                                           ; preds = %if.then.14, %if.then
  %32 = load i32, i32* %visible, align 4
  %tobool21 = icmp ne i32 %32, 0
  %frombool = zext i1 %tobool21 to i8
  store i8 %frombool, i8* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 503), align 1
  br label %if.end.22

if.end.22:                                        ; preds = %if.end, %entry
  ret void
}

declare i8* @gtk_check_version(i32, i32, i32) #1

; Function Attrs: nounwind
declare i8* @stpcpy(i8*, i8*) #5

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #5

declare void @gtk_file_chooser_set_extra_widget(%struct._GtkFileChooser*, %struct._GtkWidget*) #1

declare i64 @Fexpand_file_name(i64, i64) #1

declare i64 @Ffile_directory_p(i64) #1

declare i32 @gtk_file_chooser_set_current_folder(%struct._GtkFileChooser*, i8*) #1

declare i32 @gtk_file_chooser_set_filename(%struct._GtkFileChooser*, i8*) #1

declare void @gtk_file_chooser_set_current_name(%struct._GtkFileChooser*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i8* @xg_get_file_name_from_chooser(%struct._GtkWidget* %w) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_file_chooser_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkFileChooser*
  %call2 = call i8* @gtk_file_chooser_get_filename(%struct._GtkFileChooser* %2)
  ret i8* %call2
}

declare i32 @gtk_toggle_button_get_active(%struct._GtkToggleButton*) #1

declare i32 @g_signal_handlers_block_matched(i8*, i32, i32, i32, %struct._GClosure*, i8*, i8*) #1

declare i32 @g_signal_handlers_unblock_matched(i8*, i32, i32, i32, %struct._GClosure*, i8*, i8*) #1

declare i8* @gtk_file_chooser_get_filename(%struct._GtkFileChooser*) #1

declare i64 @SPECPDL_INDEX() #1

declare %struct._GMainLoop* @g_main_loop_new(%struct._GMainContext*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @xg_dialog_response_cb(%struct._GtkDialog* %w, i32 %response, i8* %user_data) #0 {
entry:
  %w.addr = alloca %struct._GtkDialog*, align 8
  %response.addr = alloca i32, align 4
  %user_data.addr = alloca i8*, align 8
  %dd = alloca %struct.xg_dialog_data*, align 8
  store %struct._GtkDialog* %w, %struct._GtkDialog** %w.addr, align 8
  store i32 %response, i32* %response.addr, align 4
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.xg_dialog_data*
  store %struct.xg_dialog_data* %1, %struct.xg_dialog_data** %dd, align 8
  %2 = load i32, i32* %response.addr, align 4
  %3 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %response1 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %3, i32 0, i32 1
  store i32 %2, i32* %response1, align 4
  %4 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %loop = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %4, i32 0, i32 0
  %5 = load %struct._GMainLoop*, %struct._GMainLoop** %loop, align 8
  call void @g_main_loop_quit(%struct._GMainLoop* %5)
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @gtk_true() #3

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @pop_down_dialog(i8* %arg) #0 {
entry:
  %arg.addr = alloca i8*, align 8
  %dd = alloca %struct.xg_dialog_data*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load i8*, i8** %arg.addr, align 8
  %1 = bitcast i8* %0 to %struct.xg_dialog_data*
  store %struct.xg_dialog_data* %1, %struct.xg_dialog_data** %dd, align 8
  call void @block_input()
  %2 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %w = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %2, i32 0, i32 2
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %tobool = icmp ne %struct._GtkWidget* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %w1 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %4, i32 0, i32 2
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %w1, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %timerid = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %6, i32 0, i32 3
  %7 = load i32, i32* %timerid, align 4
  %cmp = icmp ne i32 %7, 0
  br i1 %cmp, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %8 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %timerid3 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %8, i32 0, i32 3
  %9 = load i32, i32* %timerid3, align 4
  %call = call i32 @g_source_remove(i32 %9)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %10 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %loop = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %10, i32 0, i32 0
  %11 = load %struct._GMainLoop*, %struct._GMainLoop** %loop, align 8
  call void @g_main_loop_quit(%struct._GMainLoop* %11)
  %12 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %loop5 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %12, i32 0, i32 0
  %13 = load %struct._GMainLoop*, %struct._GMainLoop** %loop5, align 8
  call void @g_main_loop_unref(%struct._GMainLoop* %13)
  call void @unblock_input()
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @xg_maybe_add_timer(i8* %data) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %dd = alloca %struct.xg_dialog_data*, align 8
  %next_time = alloca %struct.timespec, align 8
  %s = alloca i64, align 8
  %per_ms = alloca i32, align 4
  %ms = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.xg_dialog_data*
  store %struct.xg_dialog_data* %1, %struct.xg_dialog_data** %dd, align 8
  %call = call { i64, i64 } @timer_check()
  %2 = bitcast %struct.timespec* %next_time to { i64, i64 }*
  %3 = getelementptr { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0
  %4 = extractvalue { i64, i64 } %call, 0
  store i64 %4, i64* %3, align 8
  %5 = getelementptr { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1
  %6 = extractvalue { i64, i64 } %call, 1
  store i64 %6, i64* %5, align 8
  %7 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %timerid = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %7, i32 0, i32 3
  store i32 0, i32* %timerid, align 4
  %8 = bitcast %struct.timespec* %next_time to { i64, i64 }*
  %9 = getelementptr { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 1
  %11 = getelementptr { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 1
  %call1 = call zeroext i1 @timespec_valid_p(i64 %10, i64 %12)
  br i1 %call1, label %if.then, label %if.end.14

if.then:                                          ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %next_time, i32 0, i32 0
  %13 = load i64, i64* %tv_sec, align 8
  store i64 %13, i64* %s, align 8
  store i32 1000000, i32* %per_ms, align 4
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %next_time, i32 0, i32 1
  %14 = load i64, i64* %tv_nsec, align 8
  %15 = load i32, i32* %per_ms, align 4
  %conv = sext i32 %15 to i64
  %add = add nsw i64 %14, %conv
  %sub = sub nsw i64 %add, 1
  %16 = load i32, i32* %per_ms, align 4
  %conv2 = sext i32 %16 to i64
  %div = sdiv i64 %sub, %conv2
  %conv3 = trunc i64 %div to i32
  store i32 %conv3, i32* %ms, align 4
  %17 = load i64, i64* %s, align 8
  %18 = load i32, i32* %ms, align 4
  %sub4 = sub i32 -1, %18
  %div5 = udiv i32 %sub4, 1000
  %conv6 = zext i32 %div5 to i64
  %cmp = icmp sle i64 %17, %conv6
  br i1 %cmp, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.then
  %19 = load i64, i64* %s, align 8
  %mul = mul nsw i64 %19, 1000
  %20 = load i32, i32* %ms, align 4
  %conv9 = sext i32 %20 to i64
  %add10 = add nsw i64 %mul, %conv9
  %conv11 = trunc i64 %add10 to i32
  %21 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %22 = bitcast %struct.xg_dialog_data* %21 to i8*
  %call12 = call i32 @g_timeout_add(i32 %conv11, i32 (i8*)* @xg_maybe_add_timer, i8* %22)
  %23 = load %struct.xg_dialog_data*, %struct.xg_dialog_data** %dd, align 8
  %timerid13 = getelementptr inbounds %struct.xg_dialog_data, %struct.xg_dialog_data* %23, i32 0, i32 3
  store i32 %call12, i32* %timerid13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.8, %if.then
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %entry
  ret i32 0
}

declare void @g_main_loop_run(%struct._GMainLoop*) #1

declare i64 @unbind_to(i64, i64) #1

declare void @g_main_loop_quit(%struct._GMainLoop*) #1

declare i32 @g_source_remove(i32) #1

declare void @g_main_loop_unref(%struct._GMainLoop*) #1

declare { i64, i64 } @timer_check() #1

declare zeroext i1 @timespec_valid_p(i64, i64) #1

declare i32 @g_timeout_add(i32, i32 (i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i8* @get_dialog_title(i8 signext %key) #0 {
entry:
  %key.addr = alloca i8, align 1
  %title = alloca i8*, align 8
  store i8 %key, i8* %key.addr, align 1
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.29, i32 0, i32 0), i8** %title, align 8
  %0 = load i8, i8* %key.addr, align 1
  %conv = sext i8 %0 to i32
  switch i32 %conv, label %sw.epilog [
    i32 69, label %sw.bb
    i32 101, label %sw.bb
    i32 73, label %sw.bb.1
    i32 105, label %sw.bb.1
    i32 76, label %sw.bb.2
    i32 108, label %sw.bb.2
    i32 80, label %sw.bb.3
    i32 112, label %sw.bb.3
    i32 81, label %sw.bb.4
    i32 113, label %sw.bb.4
  ]

sw.bb:                                            ; preds = %entry, %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0), i8** %title, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.58, i32 0, i32 0), i8** %title, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry, %entry
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8** %title, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry, %entry
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8** %title, align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry, %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.60, i32 0, i32 0), i8** %title, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i8*, i8** %title, align 8
  ret i8* %1
}

declare %struct._GtkWidget* @gtk_dialog_new() #1

declare %struct._GtkWidget* @gtk_dialog_get_action_area(%struct._GtkDialog*) #1

; Function Attrs: nounwind uwtable
define internal i32 @dialog_delete_callback(%struct._GtkWidget* %w, %union._GdkEvent* %event, i8* %user_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %union._GdkEvent*, align 8
  %user_data.addr = alloca i8*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store %union._GdkEvent* %event, %union._GdkEvent** %event.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  call void @gtk_widget_unmap(%struct._GtkWidget* %0)
  ret i32 1
}

; Function Attrs: nounwind uwtable
define internal i8* @get_utf8_string(i8* %str) #0 {
entry:
  %retval = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %utf8_str = alloca i8*, align 8
  %len = alloca i64, align 8
  %nr_bad = alloca i64, align 8
  %bytes_read = alloca i64, align 8
  %bytes_written = alloca i64, align 8
  %p = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %up = alloca i8*, align 8
  %err = alloca %struct._GError*, align 8
  %alloc = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %str.addr, align 8
  %call = call i32 @g_utf8_validate(i8* %1, i64 -1, i8** null)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %2 = load i8*, i8** %str.addr, align 8
  %call3 = call noalias i8* @g_locale_to_utf8(i8* %2, i64 -1, i64* null, i64* null, %struct._GError** null)
  store i8* %call3, i8** %utf8_str, align 8
  br label %if.end.5

if.else:                                          ; preds = %if.end
  %3 = load i8*, i8** %str.addr, align 8
  %call4 = call noalias i8* @g_strdup(i8* %3)
  store i8* %call4, i8** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.2
  %4 = load i8*, i8** %utf8_str, align 8
  %tobool6 = icmp ne i8* %4, null
  br i1 %tobool6, label %if.end.4424, label %if.then.7

if.then.7:                                        ; preds = %if.end.5
  store i64 0, i64* %nr_bad, align 8
  %5 = load i8*, i8** %str.addr, align 8
  store i8* %5, i8** %p, align 8
  store %struct._GError* null, %struct._GError** %err, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.7
  %6 = load i8*, i8** %p, align 8
  %call8 = call noalias i8* @g_locale_to_utf8(i8* %6, i64 -1, i64* %bytes_read, i64* %bytes_written, %struct._GError** %err)
  store i8* %call8, i8** %cp, align 8
  %tobool9 = icmp ne i8* %call8, null
  br i1 %tobool9, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %7 = load %struct._GError*, %struct._GError** %err, align 8
  %code = getelementptr inbounds %struct._GError, %struct._GError* %7, i32 0, i32 1
  %8 = load i32, i32* %code, align 4
  %cmp = icmp eq i32 %8, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load i64, i64* %nr_bad, align 8
  %inc = add nsw i64 %10, 1
  store i64 %inc, i64* %nr_bad, align 8
  %11 = load i64, i64* %bytes_written, align 8
  %add = add i64 %11, 1
  %12 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %add
  store i8* %add.ptr, i8** %p, align 8
  %13 = load %struct._GError*, %struct._GError** %err, align 8
  call void @g_error_free(%struct._GError* %13)
  store %struct._GError* null, %struct._GError** %err, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %14 = load %struct._GError*, %struct._GError** %err, align 8
  %tobool10 = icmp ne %struct._GError* %14, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %while.end
  %15 = load %struct._GError*, %struct._GError** %err, align 8
  call void @g_error_free(%struct._GError* %15)
  store %struct._GError* null, %struct._GError** %err, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %while.end
  %16 = load i8*, i8** %cp, align 8
  %tobool13 = icmp ne i8* %16, null
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.12
  %17 = load i8*, i8** %cp, align 8
  call void @g_free(i8* %17)
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.end.12
  %18 = load i8*, i8** %str.addr, align 8
  %call16 = call i64 @strlen(i8* %18) #7
  store i64 %call16, i64* %len, align 8
  br i1 false, label %cond.true, label %cond.false.489

cond.true:                                        ; preds = %if.end.15
  br i1 false, label %cond.true.17, label %cond.false.274

cond.true.17:                                     ; preds = %cond.true
  %19 = load i64, i64* %nr_bad, align 8
  %conv = trunc i64 %19 to i8
  %conv18 = sext i8 %conv to i32
  %add19 = add nsw i32 0, %conv18
  %mul = mul nsw i32 0, %add19
  %sub = sub nsw i32 %mul, 1
  %cmp20 = icmp slt i32 %sub, 0
  br i1 %cmp20, label %cond.true.22, label %cond.false

cond.true.22:                                     ; preds = %cond.true.17
  %20 = load i64, i64* %nr_bad, align 8
  %conv23 = trunc i64 %20 to i8
  %conv24 = sext i8 %conv23 to i32
  %add25 = add nsw i32 0, %conv24
  %mul26 = mul nsw i32 0, %add25
  %add27 = add nsw i32 %mul26, 0
  %neg = xor i32 %add27, -1
  %cmp28 = icmp eq i32 %neg, -1
  %conv29 = zext i1 %cmp28 to i32
  %sub30 = sub nsw i32 0, %conv29
  %21 = load i64, i64* %nr_bad, align 8
  %conv31 = trunc i64 %21 to i8
  %conv32 = sext i8 %conv31 to i32
  %add33 = add nsw i32 0, %conv32
  %mul34 = mul nsw i32 0, %add33
  %add35 = add nsw i32 %mul34, 1
  %shl = shl i32 %add35, 30
  %sub36 = sub nsw i32 %shl, 1
  %mul37 = mul nsw i32 %sub36, 2
  %add38 = add nsw i32 %mul37, 1
  %sub39 = sub nsw i32 %sub30, %add38
  br label %cond.end

cond.false:                                       ; preds = %cond.true.17
  %22 = load i64, i64* %nr_bad, align 8
  %conv40 = trunc i64 %22 to i8
  %conv41 = sext i8 %conv40 to i32
  %add42 = add nsw i32 0, %conv41
  %mul43 = mul nsw i32 0, %add42
  %add44 = add nsw i32 %mul43, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.22
  %cond = phi i32 [ %sub39, %cond.true.22 ], [ %add44, %cond.false ]
  %cmp45 = icmp eq i32 %cond, 0
  br i1 %cmp45, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %cond.end
  %23 = load i64, i64* %nr_bad, align 8
  %conv47 = trunc i64 %23 to i8
  %conv48 = sext i8 %conv47 to i32
  %cmp49 = icmp slt i32 %conv48, 0
  br i1 %cmp49, label %cond.true.228, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %cond.end
  br i1 false, label %cond.true.51, label %cond.false.129

cond.true.51:                                     ; preds = %lor.lhs.false
  %24 = load i64, i64* %nr_bad, align 8
  %conv52 = trunc i64 %24 to i8
  %conv53 = sext i8 %conv52 to i32
  %cmp54 = icmp slt i32 %conv53, 0
  br i1 %cmp54, label %cond.true.56, label %cond.false.86

cond.true.56:                                     ; preds = %cond.true.51
  %25 = load i64, i64* %nr_bad, align 8
  %conv57 = trunc i64 %25 to i8
  %conv58 = sext i8 %conv57 to i32
  %26 = load i64, i64* %nr_bad, align 8
  %conv59 = trunc i64 %26 to i8
  %conv60 = sext i8 %conv59 to i32
  %add61 = add nsw i32 0, %conv60
  %mul62 = mul nsw i32 0, %add61
  %sub63 = sub nsw i32 %mul62, 1
  %cmp64 = icmp slt i32 %sub63, 0
  br i1 %cmp64, label %cond.true.66, label %cond.false.76

cond.true.66:                                     ; preds = %cond.true.56
  %27 = load i64, i64* %nr_bad, align 8
  %conv67 = trunc i64 %27 to i8
  %conv68 = sext i8 %conv67 to i32
  %add69 = add nsw i32 0, %conv68
  %mul70 = mul nsw i32 0, %add69
  %add71 = add nsw i32 %mul70, 1
  %shl72 = shl i32 %add71, 30
  %sub73 = sub nsw i32 %shl72, 1
  %mul74 = mul nsw i32 %sub73, 2
  %add75 = add nsw i32 %mul74, 1
  br label %cond.end.82

cond.false.76:                                    ; preds = %cond.true.56
  %28 = load i64, i64* %nr_bad, align 8
  %conv77 = trunc i64 %28 to i8
  %conv78 = sext i8 %conv77 to i32
  %add79 = add nsw i32 0, %conv78
  %mul80 = mul nsw i32 0, %add79
  %sub81 = sub nsw i32 %mul80, 1
  br label %cond.end.82

cond.end.82:                                      ; preds = %cond.false.76, %cond.true.66
  %cond83 = phi i32 [ %add75, %cond.true.66 ], [ %sub81, %cond.false.76 ]
  %div = sdiv i32 %cond83, 4
  %cmp84 = icmp slt i32 %conv58, %div
  br i1 %cmp84, label %cond.true.228, label %lor.lhs.false.208

cond.false.86:                                    ; preds = %cond.true.51
  br i1 false, label %cond.true.87, label %cond.false.88

cond.true.87:                                     ; preds = %cond.false.86
  br i1 false, label %cond.true.228, label %lor.lhs.false.208

cond.false.88:                                    ; preds = %cond.false.86
  %29 = load i64, i64* %nr_bad, align 8
  %conv89 = trunc i64 %29 to i8
  %conv90 = sext i8 %conv89 to i32
  %add91 = add nsw i32 0, %conv90
  %mul92 = mul nsw i32 0, %add91
  %sub93 = sub nsw i32 %mul92, 1
  %cmp94 = icmp slt i32 %sub93, 0
  br i1 %cmp94, label %cond.true.96, label %cond.false.116

cond.true.96:                                     ; preds = %cond.false.88
  %30 = load i64, i64* %nr_bad, align 8
  %conv97 = trunc i64 %30 to i8
  %conv98 = sext i8 %conv97 to i32
  %add99 = add nsw i32 0, %conv98
  %mul100 = mul nsw i32 0, %add99
  %add101 = add nsw i32 %mul100, 0
  %neg102 = xor i32 %add101, -1
  %cmp103 = icmp eq i32 %neg102, -1
  %conv104 = zext i1 %cmp103 to i32
  %sub105 = sub nsw i32 0, %conv104
  %31 = load i64, i64* %nr_bad, align 8
  %conv106 = trunc i64 %31 to i8
  %conv107 = sext i8 %conv106 to i32
  %add108 = add nsw i32 0, %conv107
  %mul109 = mul nsw i32 0, %add108
  %add110 = add nsw i32 %mul109, 1
  %shl111 = shl i32 %add110, 30
  %sub112 = sub nsw i32 %shl111, 1
  %mul113 = mul nsw i32 %sub112, 2
  %add114 = add nsw i32 %mul113, 1
  %sub115 = sub nsw i32 %sub105, %add114
  br label %cond.end.122

cond.false.116:                                   ; preds = %cond.false.88
  %32 = load i64, i64* %nr_bad, align 8
  %conv117 = trunc i64 %32 to i8
  %conv118 = sext i8 %conv117 to i32
  %add119 = add nsw i32 0, %conv118
  %mul120 = mul nsw i32 0, %add119
  %add121 = add nsw i32 %mul120, 0
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.false.116, %cond.true.96
  %cond123 = phi i32 [ %sub115, %cond.true.96 ], [ %add121, %cond.false.116 ]
  %div124 = sdiv i32 %cond123, 4
  %33 = load i64, i64* %nr_bad, align 8
  %conv125 = trunc i64 %33 to i8
  %conv126 = sext i8 %conv125 to i32
  %cmp127 = icmp slt i32 %div124, %conv126
  br i1 %cmp127, label %cond.true.228, label %lor.lhs.false.208

cond.false.129:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.130, label %cond.false.131

cond.true.130:                                    ; preds = %cond.false.129
  br i1 false, label %cond.true.228, label %lor.lhs.false.208

cond.false.131:                                   ; preds = %cond.false.129
  %34 = load i64, i64* %nr_bad, align 8
  %conv132 = trunc i64 %34 to i8
  %conv133 = sext i8 %conv132 to i32
  %cmp134 = icmp slt i32 %conv133, 0
  br i1 %cmp134, label %cond.true.136, label %cond.false.177

cond.true.136:                                    ; preds = %cond.false.131
  %35 = load i64, i64* %nr_bad, align 8
  %conv137 = trunc i64 %35 to i8
  %conv138 = sext i8 %conv137 to i32
  %36 = load i64, i64* %nr_bad, align 8
  %conv139 = trunc i64 %36 to i8
  %conv140 = sext i8 %conv139 to i32
  %add141 = add nsw i32 0, %conv140
  %mul142 = mul nsw i32 0, %add141
  %sub143 = sub nsw i32 %mul142, 1
  %cmp144 = icmp slt i32 %sub143, 0
  br i1 %cmp144, label %cond.true.146, label %cond.false.166

cond.true.146:                                    ; preds = %cond.true.136
  %37 = load i64, i64* %nr_bad, align 8
  %conv147 = trunc i64 %37 to i8
  %conv148 = sext i8 %conv147 to i32
  %add149 = add nsw i32 0, %conv148
  %mul150 = mul nsw i32 0, %add149
  %add151 = add nsw i32 %mul150, 0
  %neg152 = xor i32 %add151, -1
  %cmp153 = icmp eq i32 %neg152, -1
  %conv154 = zext i1 %cmp153 to i32
  %sub155 = sub nsw i32 0, %conv154
  %38 = load i64, i64* %nr_bad, align 8
  %conv156 = trunc i64 %38 to i8
  %conv157 = sext i8 %conv156 to i32
  %add158 = add nsw i32 0, %conv157
  %mul159 = mul nsw i32 0, %add158
  %add160 = add nsw i32 %mul159, 1
  %shl161 = shl i32 %add160, 30
  %sub162 = sub nsw i32 %shl161, 1
  %mul163 = mul nsw i32 %sub162, 2
  %add164 = add nsw i32 %mul163, 1
  %sub165 = sub nsw i32 %sub155, %add164
  br label %cond.end.172

cond.false.166:                                   ; preds = %cond.true.136
  %39 = load i64, i64* %nr_bad, align 8
  %conv167 = trunc i64 %39 to i8
  %conv168 = sext i8 %conv167 to i32
  %add169 = add nsw i32 0, %conv168
  %mul170 = mul nsw i32 0, %add169
  %add171 = add nsw i32 %mul170, 0
  br label %cond.end.172

cond.end.172:                                     ; preds = %cond.false.166, %cond.true.146
  %cond173 = phi i32 [ %sub165, %cond.true.146 ], [ %add171, %cond.false.166 ]
  %div174 = sdiv i32 %cond173, 4
  %cmp175 = icmp slt i32 %conv138, %div174
  br i1 %cmp175, label %cond.true.228, label %lor.lhs.false.208

cond.false.177:                                   ; preds = %cond.false.131
  %40 = load i64, i64* %nr_bad, align 8
  %conv178 = trunc i64 %40 to i8
  %conv179 = sext i8 %conv178 to i32
  %add180 = add nsw i32 0, %conv179
  %mul181 = mul nsw i32 0, %add180
  %sub182 = sub nsw i32 %mul181, 1
  %cmp183 = icmp slt i32 %sub182, 0
  br i1 %cmp183, label %cond.true.185, label %cond.false.195

cond.true.185:                                    ; preds = %cond.false.177
  %41 = load i64, i64* %nr_bad, align 8
  %conv186 = trunc i64 %41 to i8
  %conv187 = sext i8 %conv186 to i32
  %add188 = add nsw i32 0, %conv187
  %mul189 = mul nsw i32 0, %add188
  %add190 = add nsw i32 %mul189, 1
  %shl191 = shl i32 %add190, 30
  %sub192 = sub nsw i32 %shl191, 1
  %mul193 = mul nsw i32 %sub192, 2
  %add194 = add nsw i32 %mul193, 1
  br label %cond.end.201

cond.false.195:                                   ; preds = %cond.false.177
  %42 = load i64, i64* %nr_bad, align 8
  %conv196 = trunc i64 %42 to i8
  %conv197 = sext i8 %conv196 to i32
  %add198 = add nsw i32 0, %conv197
  %mul199 = mul nsw i32 0, %add198
  %sub200 = sub nsw i32 %mul199, 1
  br label %cond.end.201

cond.end.201:                                     ; preds = %cond.false.195, %cond.true.185
  %cond202 = phi i32 [ %add194, %cond.true.185 ], [ %sub200, %cond.false.195 ]
  %div203 = sdiv i32 %cond202, 4
  %43 = load i64, i64* %nr_bad, align 8
  %conv204 = trunc i64 %43 to i8
  %conv205 = sext i8 %conv204 to i32
  %cmp206 = icmp slt i32 %div203, %conv205
  br i1 %cmp206, label %cond.true.228, label %lor.lhs.false.208

lor.lhs.false.208:                                ; preds = %cond.end.201, %cond.end.172, %cond.true.130, %cond.end.122, %cond.true.87, %cond.end.82
  %44 = load i64, i64* %nr_bad, align 8
  %conv209 = trunc i64 %44 to i8
  %conv210 = sext i8 %conv209 to i32
  %mul211 = mul nsw i32 %conv210, 4
  %mul212 = mul nsw i32 0, %mul211
  %sub213 = sub nsw i32 %mul212, 1
  %cmp214 = icmp slt i32 %sub213, 0
  br i1 %cmp214, label %land.lhs.true.216, label %lor.lhs.false.222

land.lhs.true.216:                                ; preds = %lor.lhs.false.208
  %45 = load i64, i64* %nr_bad, align 8
  %conv217 = trunc i64 %45 to i8
  %conv218 = sext i8 %conv217 to i32
  %mul219 = mul nsw i32 %conv218, 4
  %cmp220 = icmp slt i32 %mul219, -128
  br i1 %cmp220, label %cond.true.228, label %lor.lhs.false.222

lor.lhs.false.222:                                ; preds = %land.lhs.true.216, %lor.lhs.false.208
  %46 = load i64, i64* %nr_bad, align 8
  %conv223 = trunc i64 %46 to i8
  %conv224 = sext i8 %conv223 to i32
  %mul225 = mul nsw i32 %conv224, 4
  %cmp226 = icmp slt i32 127, %mul225
  br i1 %cmp226, label %cond.true.228, label %cond.false.251

cond.true.228:                                    ; preds = %lor.lhs.false.222, %land.lhs.true.216, %cond.end.201, %cond.end.172, %cond.true.130, %cond.end.122, %cond.true.87, %cond.end.82, %land.lhs.true
  %47 = load i64, i64* %nr_bad, align 8
  %conv229 = trunc i64 %47 to i8
  %conv230 = zext i8 %conv229 to i32
  %mul231 = mul nsw i32 %conv230, 4
  %cmp232 = icmp sle i32 %mul231, 127
  br i1 %cmp232, label %cond.true.234, label %cond.false.240

cond.true.234:                                    ; preds = %cond.true.228
  %48 = load i64, i64* %nr_bad, align 8
  %conv235 = trunc i64 %48 to i8
  %conv236 = zext i8 %conv235 to i32
  %mul237 = mul nsw i32 %conv236, 4
  %conv238 = trunc i32 %mul237 to i8
  %conv239 = sext i8 %conv238 to i32
  br label %cond.end.248

cond.false.240:                                   ; preds = %cond.true.228
  %49 = load i64, i64* %nr_bad, align 8
  %conv241 = trunc i64 %49 to i8
  %conv242 = zext i8 %conv241 to i32
  %mul243 = mul nsw i32 %conv242, 4
  %sub244 = sub nsw i32 %mul243, -128
  %conv245 = trunc i32 %sub244 to i8
  %conv246 = sext i8 %conv245 to i32
  %add247 = add nsw i32 %conv246, -128
  br label %cond.end.248

cond.end.248:                                     ; preds = %cond.false.240, %cond.true.234
  %cond249 = phi i32 [ %conv239, %cond.true.234 ], [ %add247, %cond.false.240 ]
  %conv250 = sext i32 %cond249 to i64
  store i64 %conv250, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.251:                                   ; preds = %lor.lhs.false.222
  %50 = load i64, i64* %nr_bad, align 8
  %conv252 = trunc i64 %50 to i8
  %conv253 = zext i8 %conv252 to i32
  %mul254 = mul nsw i32 %conv253, 4
  %cmp255 = icmp sle i32 %mul254, 127
  br i1 %cmp255, label %cond.true.257, label %cond.false.263

cond.true.257:                                    ; preds = %cond.false.251
  %51 = load i64, i64* %nr_bad, align 8
  %conv258 = trunc i64 %51 to i8
  %conv259 = zext i8 %conv258 to i32
  %mul260 = mul nsw i32 %conv259, 4
  %conv261 = trunc i32 %mul260 to i8
  %conv262 = sext i8 %conv261 to i32
  br label %cond.end.271

cond.false.263:                                   ; preds = %cond.false.251
  %52 = load i64, i64* %nr_bad, align 8
  %conv264 = trunc i64 %52 to i8
  %conv265 = zext i8 %conv264 to i32
  %mul266 = mul nsw i32 %conv265, 4
  %sub267 = sub nsw i32 %mul266, -128
  %conv268 = trunc i32 %sub267 to i8
  %conv269 = sext i8 %conv268 to i32
  %add270 = add nsw i32 %conv269, -128
  br label %cond.end.271

cond.end.271:                                     ; preds = %cond.false.263, %cond.true.257
  %cond272 = phi i32 [ %conv262, %cond.true.257 ], [ %add270, %cond.false.263 ]
  %conv273 = sext i32 %cond272 to i64
  store i64 %conv273, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.274:                                   ; preds = %cond.true
  %53 = load i64, i64* %nr_bad, align 8
  %add275 = add nsw i64 0, %53
  %mul276 = mul nsw i64 0, %add275
  %sub277 = sub nsw i64 %mul276, 1
  %cmp278 = icmp slt i64 %sub277, 0
  br i1 %cmp278, label %cond.true.280, label %cond.false.297

cond.true.280:                                    ; preds = %cond.false.274
  %54 = load i64, i64* %nr_bad, align 8
  %add281 = add nsw i64 0, %54
  %mul282 = mul nsw i64 0, %add281
  %add283 = add nsw i64 %mul282, 0
  %neg284 = xor i64 %add283, -1
  %cmp285 = icmp eq i64 %neg284, -1
  %conv286 = zext i1 %cmp285 to i32
  %sub287 = sub nsw i32 0, %conv286
  %conv288 = sext i32 %sub287 to i64
  %55 = load i64, i64* %nr_bad, align 8
  %add289 = add nsw i64 0, %55
  %mul290 = mul nsw i64 0, %add289
  %add291 = add nsw i64 %mul290, 1
  %shl292 = shl i64 %add291, 62
  %sub293 = sub nsw i64 %shl292, 1
  %mul294 = mul nsw i64 %sub293, 2
  %add295 = add nsw i64 %mul294, 1
  %sub296 = sub nsw i64 %conv288, %add295
  br label %cond.end.301

cond.false.297:                                   ; preds = %cond.false.274
  %56 = load i64, i64* %nr_bad, align 8
  %add298 = add nsw i64 0, %56
  %mul299 = mul nsw i64 0, %add298
  %add300 = add nsw i64 %mul299, 0
  br label %cond.end.301

cond.end.301:                                     ; preds = %cond.false.297, %cond.true.280
  %cond302 = phi i64 [ %sub296, %cond.true.280 ], [ %add300, %cond.false.297 ]
  %cmp303 = icmp eq i64 %cond302, 0
  br i1 %cmp303, label %land.lhs.true.305, label %lor.lhs.false.308

land.lhs.true.305:                                ; preds = %cond.end.301
  %57 = load i64, i64* %nr_bad, align 8
  %cmp306 = icmp slt i64 %57, 0
  br i1 %cmp306, label %cond.true.443, label %lor.lhs.false.308

lor.lhs.false.308:                                ; preds = %land.lhs.true.305, %cond.end.301
  br i1 false, label %cond.true.309, label %cond.false.369

cond.true.309:                                    ; preds = %lor.lhs.false.308
  %58 = load i64, i64* %nr_bad, align 8
  %cmp310 = icmp slt i64 %58, 0
  br i1 %cmp310, label %cond.true.312, label %cond.false.335

cond.true.312:                                    ; preds = %cond.true.309
  %59 = load i64, i64* %nr_bad, align 8
  %60 = load i64, i64* %nr_bad, align 8
  %add313 = add nsw i64 0, %60
  %mul314 = mul nsw i64 0, %add313
  %sub315 = sub nsw i64 %mul314, 1
  %cmp316 = icmp slt i64 %sub315, 0
  br i1 %cmp316, label %cond.true.318, label %cond.false.326

cond.true.318:                                    ; preds = %cond.true.312
  %61 = load i64, i64* %nr_bad, align 8
  %add319 = add nsw i64 0, %61
  %mul320 = mul nsw i64 0, %add319
  %add321 = add nsw i64 %mul320, 1
  %shl322 = shl i64 %add321, 62
  %sub323 = sub nsw i64 %shl322, 1
  %mul324 = mul nsw i64 %sub323, 2
  %add325 = add nsw i64 %mul324, 1
  br label %cond.end.330

cond.false.326:                                   ; preds = %cond.true.312
  %62 = load i64, i64* %nr_bad, align 8
  %add327 = add nsw i64 0, %62
  %mul328 = mul nsw i64 0, %add327
  %sub329 = sub nsw i64 %mul328, 1
  br label %cond.end.330

cond.end.330:                                     ; preds = %cond.false.326, %cond.true.318
  %cond331 = phi i64 [ %add325, %cond.true.318 ], [ %sub329, %cond.false.326 ]
  %div332 = sdiv i64 %cond331, 4
  %cmp333 = icmp slt i64 %59, %div332
  br i1 %cmp333, label %cond.true.443, label %lor.lhs.false.429

cond.false.335:                                   ; preds = %cond.true.309
  br i1 false, label %cond.true.336, label %cond.false.337

cond.true.336:                                    ; preds = %cond.false.335
  br i1 false, label %cond.true.443, label %lor.lhs.false.429

cond.false.337:                                   ; preds = %cond.false.335
  %63 = load i64, i64* %nr_bad, align 8
  %add338 = add nsw i64 0, %63
  %mul339 = mul nsw i64 0, %add338
  %sub340 = sub nsw i64 %mul339, 1
  %cmp341 = icmp slt i64 %sub340, 0
  br i1 %cmp341, label %cond.true.343, label %cond.false.360

cond.true.343:                                    ; preds = %cond.false.337
  %64 = load i64, i64* %nr_bad, align 8
  %add344 = add nsw i64 0, %64
  %mul345 = mul nsw i64 0, %add344
  %add346 = add nsw i64 %mul345, 0
  %neg347 = xor i64 %add346, -1
  %cmp348 = icmp eq i64 %neg347, -1
  %conv349 = zext i1 %cmp348 to i32
  %sub350 = sub nsw i32 0, %conv349
  %conv351 = sext i32 %sub350 to i64
  %65 = load i64, i64* %nr_bad, align 8
  %add352 = add nsw i64 0, %65
  %mul353 = mul nsw i64 0, %add352
  %add354 = add nsw i64 %mul353, 1
  %shl355 = shl i64 %add354, 62
  %sub356 = sub nsw i64 %shl355, 1
  %mul357 = mul nsw i64 %sub356, 2
  %add358 = add nsw i64 %mul357, 1
  %sub359 = sub nsw i64 %conv351, %add358
  br label %cond.end.364

cond.false.360:                                   ; preds = %cond.false.337
  %66 = load i64, i64* %nr_bad, align 8
  %add361 = add nsw i64 0, %66
  %mul362 = mul nsw i64 0, %add361
  %add363 = add nsw i64 %mul362, 0
  br label %cond.end.364

cond.end.364:                                     ; preds = %cond.false.360, %cond.true.343
  %cond365 = phi i64 [ %sub359, %cond.true.343 ], [ %add363, %cond.false.360 ]
  %div366 = sdiv i64 %cond365, 4
  %67 = load i64, i64* %nr_bad, align 8
  %cmp367 = icmp slt i64 %div366, %67
  br i1 %cmp367, label %cond.true.443, label %lor.lhs.false.429

cond.false.369:                                   ; preds = %lor.lhs.false.308
  br i1 false, label %cond.true.370, label %cond.false.371

cond.true.370:                                    ; preds = %cond.false.369
  br i1 false, label %cond.true.443, label %lor.lhs.false.429

cond.false.371:                                   ; preds = %cond.false.369
  %68 = load i64, i64* %nr_bad, align 8
  %cmp372 = icmp slt i64 %68, 0
  br i1 %cmp372, label %cond.true.374, label %cond.false.406

cond.true.374:                                    ; preds = %cond.false.371
  %69 = load i64, i64* %nr_bad, align 8
  %70 = load i64, i64* %nr_bad, align 8
  %add375 = add nsw i64 0, %70
  %mul376 = mul nsw i64 0, %add375
  %sub377 = sub nsw i64 %mul376, 1
  %cmp378 = icmp slt i64 %sub377, 0
  br i1 %cmp378, label %cond.true.380, label %cond.false.397

cond.true.380:                                    ; preds = %cond.true.374
  %71 = load i64, i64* %nr_bad, align 8
  %add381 = add nsw i64 0, %71
  %mul382 = mul nsw i64 0, %add381
  %add383 = add nsw i64 %mul382, 0
  %neg384 = xor i64 %add383, -1
  %cmp385 = icmp eq i64 %neg384, -1
  %conv386 = zext i1 %cmp385 to i32
  %sub387 = sub nsw i32 0, %conv386
  %conv388 = sext i32 %sub387 to i64
  %72 = load i64, i64* %nr_bad, align 8
  %add389 = add nsw i64 0, %72
  %mul390 = mul nsw i64 0, %add389
  %add391 = add nsw i64 %mul390, 1
  %shl392 = shl i64 %add391, 62
  %sub393 = sub nsw i64 %shl392, 1
  %mul394 = mul nsw i64 %sub393, 2
  %add395 = add nsw i64 %mul394, 1
  %sub396 = sub nsw i64 %conv388, %add395
  br label %cond.end.401

cond.false.397:                                   ; preds = %cond.true.374
  %73 = load i64, i64* %nr_bad, align 8
  %add398 = add nsw i64 0, %73
  %mul399 = mul nsw i64 0, %add398
  %add400 = add nsw i64 %mul399, 0
  br label %cond.end.401

cond.end.401:                                     ; preds = %cond.false.397, %cond.true.380
  %cond402 = phi i64 [ %sub396, %cond.true.380 ], [ %add400, %cond.false.397 ]
  %div403 = sdiv i64 %cond402, 4
  %cmp404 = icmp slt i64 %69, %div403
  br i1 %cmp404, label %cond.true.443, label %lor.lhs.false.429

cond.false.406:                                   ; preds = %cond.false.371
  %74 = load i64, i64* %nr_bad, align 8
  %add407 = add nsw i64 0, %74
  %mul408 = mul nsw i64 0, %add407
  %sub409 = sub nsw i64 %mul408, 1
  %cmp410 = icmp slt i64 %sub409, 0
  br i1 %cmp410, label %cond.true.412, label %cond.false.420

cond.true.412:                                    ; preds = %cond.false.406
  %75 = load i64, i64* %nr_bad, align 8
  %add413 = add nsw i64 0, %75
  %mul414 = mul nsw i64 0, %add413
  %add415 = add nsw i64 %mul414, 1
  %shl416 = shl i64 %add415, 62
  %sub417 = sub nsw i64 %shl416, 1
  %mul418 = mul nsw i64 %sub417, 2
  %add419 = add nsw i64 %mul418, 1
  br label %cond.end.424

cond.false.420:                                   ; preds = %cond.false.406
  %76 = load i64, i64* %nr_bad, align 8
  %add421 = add nsw i64 0, %76
  %mul422 = mul nsw i64 0, %add421
  %sub423 = sub nsw i64 %mul422, 1
  br label %cond.end.424

cond.end.424:                                     ; preds = %cond.false.420, %cond.true.412
  %cond425 = phi i64 [ %add419, %cond.true.412 ], [ %sub423, %cond.false.420 ]
  %div426 = sdiv i64 %cond425, 4
  %77 = load i64, i64* %nr_bad, align 8
  %cmp427 = icmp slt i64 %div426, %77
  br i1 %cmp427, label %cond.true.443, label %lor.lhs.false.429

lor.lhs.false.429:                                ; preds = %cond.end.424, %cond.end.401, %cond.true.370, %cond.end.364, %cond.true.336, %cond.end.330
  %78 = load i64, i64* %nr_bad, align 8
  %mul430 = mul nsw i64 %78, 4
  %mul431 = mul nsw i64 0, %mul430
  %sub432 = sub nsw i64 %mul431, 1
  %cmp433 = icmp slt i64 %sub432, 0
  br i1 %cmp433, label %land.lhs.true.435, label %lor.lhs.false.439

land.lhs.true.435:                                ; preds = %lor.lhs.false.429
  %79 = load i64, i64* %nr_bad, align 8
  %mul436 = mul nsw i64 %79, 4
  %cmp437 = icmp slt i64 %mul436, -128
  br i1 %cmp437, label %cond.true.443, label %lor.lhs.false.439

lor.lhs.false.439:                                ; preds = %land.lhs.true.435, %lor.lhs.false.429
  %80 = load i64, i64* %nr_bad, align 8
  %mul440 = mul nsw i64 %80, 4
  %cmp441 = icmp slt i64 127, %mul440
  br i1 %cmp441, label %cond.true.443, label %cond.false.466

cond.true.443:                                    ; preds = %lor.lhs.false.439, %land.lhs.true.435, %cond.end.424, %cond.end.401, %cond.true.370, %cond.end.364, %cond.true.336, %cond.end.330, %land.lhs.true.305
  %81 = load i64, i64* %nr_bad, align 8
  %conv444 = trunc i64 %81 to i8
  %conv445 = zext i8 %conv444 to i32
  %mul446 = mul nsw i32 %conv445, 4
  %cmp447 = icmp sle i32 %mul446, 127
  br i1 %cmp447, label %cond.true.449, label %cond.false.455

cond.true.449:                                    ; preds = %cond.true.443
  %82 = load i64, i64* %nr_bad, align 8
  %conv450 = trunc i64 %82 to i8
  %conv451 = zext i8 %conv450 to i32
  %mul452 = mul nsw i32 %conv451, 4
  %conv453 = trunc i32 %mul452 to i8
  %conv454 = sext i8 %conv453 to i32
  br label %cond.end.463

cond.false.455:                                   ; preds = %cond.true.443
  %83 = load i64, i64* %nr_bad, align 8
  %conv456 = trunc i64 %83 to i8
  %conv457 = zext i8 %conv456 to i32
  %mul458 = mul nsw i32 %conv457, 4
  %sub459 = sub nsw i32 %mul458, -128
  %conv460 = trunc i32 %sub459 to i8
  %conv461 = sext i8 %conv460 to i32
  %add462 = add nsw i32 %conv461, -128
  br label %cond.end.463

cond.end.463:                                     ; preds = %cond.false.455, %cond.true.449
  %cond464 = phi i32 [ %conv454, %cond.true.449 ], [ %add462, %cond.false.455 ]
  %conv465 = sext i32 %cond464 to i64
  store i64 %conv465, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.466:                                   ; preds = %lor.lhs.false.439
  %84 = load i64, i64* %nr_bad, align 8
  %conv467 = trunc i64 %84 to i8
  %conv468 = zext i8 %conv467 to i32
  %mul469 = mul nsw i32 %conv468, 4
  %cmp470 = icmp sle i32 %mul469, 127
  br i1 %cmp470, label %cond.true.472, label %cond.false.478

cond.true.472:                                    ; preds = %cond.false.466
  %85 = load i64, i64* %nr_bad, align 8
  %conv473 = trunc i64 %85 to i8
  %conv474 = zext i8 %conv473 to i32
  %mul475 = mul nsw i32 %conv474, 4
  %conv476 = trunc i32 %mul475 to i8
  %conv477 = sext i8 %conv476 to i32
  br label %cond.end.486

cond.false.478:                                   ; preds = %cond.false.466
  %86 = load i64, i64* %nr_bad, align 8
  %conv479 = trunc i64 %86 to i8
  %conv480 = zext i8 %conv479 to i32
  %mul481 = mul nsw i32 %conv480, 4
  %sub482 = sub nsw i32 %mul481, -128
  %conv483 = trunc i32 %sub482 to i8
  %conv484 = sext i8 %conv483 to i32
  %add485 = add nsw i32 %conv484, -128
  br label %cond.end.486

cond.end.486:                                     ; preds = %cond.false.478, %cond.true.472
  %cond487 = phi i32 [ %conv477, %cond.true.472 ], [ %add485, %cond.false.478 ]
  %conv488 = sext i32 %cond487 to i64
  store i64 %conv488, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.489:                                   ; preds = %if.end.15
  br i1 false, label %cond.true.490, label %cond.false.974

cond.true.490:                                    ; preds = %cond.false.489
  br i1 false, label %cond.true.491, label %cond.false.759

cond.true.491:                                    ; preds = %cond.true.490
  %87 = load i64, i64* %nr_bad, align 8
  %conv492 = trunc i64 %87 to i16
  %conv493 = sext i16 %conv492 to i32
  %add494 = add nsw i32 0, %conv493
  %mul495 = mul nsw i32 0, %add494
  %sub496 = sub nsw i32 %mul495, 1
  %cmp497 = icmp slt i32 %sub496, 0
  br i1 %cmp497, label %cond.true.499, label %cond.false.519

cond.true.499:                                    ; preds = %cond.true.491
  %88 = load i64, i64* %nr_bad, align 8
  %conv500 = trunc i64 %88 to i16
  %conv501 = sext i16 %conv500 to i32
  %add502 = add nsw i32 0, %conv501
  %mul503 = mul nsw i32 0, %add502
  %add504 = add nsw i32 %mul503, 0
  %neg505 = xor i32 %add504, -1
  %cmp506 = icmp eq i32 %neg505, -1
  %conv507 = zext i1 %cmp506 to i32
  %sub508 = sub nsw i32 0, %conv507
  %89 = load i64, i64* %nr_bad, align 8
  %conv509 = trunc i64 %89 to i16
  %conv510 = sext i16 %conv509 to i32
  %add511 = add nsw i32 0, %conv510
  %mul512 = mul nsw i32 0, %add511
  %add513 = add nsw i32 %mul512, 1
  %shl514 = shl i32 %add513, 30
  %sub515 = sub nsw i32 %shl514, 1
  %mul516 = mul nsw i32 %sub515, 2
  %add517 = add nsw i32 %mul516, 1
  %sub518 = sub nsw i32 %sub508, %add517
  br label %cond.end.525

cond.false.519:                                   ; preds = %cond.true.491
  %90 = load i64, i64* %nr_bad, align 8
  %conv520 = trunc i64 %90 to i16
  %conv521 = sext i16 %conv520 to i32
  %add522 = add nsw i32 0, %conv521
  %mul523 = mul nsw i32 0, %add522
  %add524 = add nsw i32 %mul523, 0
  br label %cond.end.525

cond.end.525:                                     ; preds = %cond.false.519, %cond.true.499
  %cond526 = phi i32 [ %sub518, %cond.true.499 ], [ %add524, %cond.false.519 ]
  %cmp527 = icmp eq i32 %cond526, 0
  br i1 %cmp527, label %land.lhs.true.529, label %lor.lhs.false.534

land.lhs.true.529:                                ; preds = %cond.end.525
  %91 = load i64, i64* %nr_bad, align 8
  %conv530 = trunc i64 %91 to i16
  %conv531 = sext i16 %conv530 to i32
  %cmp532 = icmp slt i32 %conv531, 0
  br i1 %cmp532, label %cond.true.713, label %lor.lhs.false.534

lor.lhs.false.534:                                ; preds = %land.lhs.true.529, %cond.end.525
  br i1 false, label %cond.true.535, label %cond.false.614

cond.true.535:                                    ; preds = %lor.lhs.false.534
  %92 = load i64, i64* %nr_bad, align 8
  %conv536 = trunc i64 %92 to i16
  %conv537 = sext i16 %conv536 to i32
  %cmp538 = icmp slt i32 %conv537, 0
  br i1 %cmp538, label %cond.true.540, label %cond.false.571

cond.true.540:                                    ; preds = %cond.true.535
  %93 = load i64, i64* %nr_bad, align 8
  %conv541 = trunc i64 %93 to i16
  %conv542 = sext i16 %conv541 to i32
  %94 = load i64, i64* %nr_bad, align 8
  %conv543 = trunc i64 %94 to i16
  %conv544 = sext i16 %conv543 to i32
  %add545 = add nsw i32 0, %conv544
  %mul546 = mul nsw i32 0, %add545
  %sub547 = sub nsw i32 %mul546, 1
  %cmp548 = icmp slt i32 %sub547, 0
  br i1 %cmp548, label %cond.true.550, label %cond.false.560

cond.true.550:                                    ; preds = %cond.true.540
  %95 = load i64, i64* %nr_bad, align 8
  %conv551 = trunc i64 %95 to i16
  %conv552 = sext i16 %conv551 to i32
  %add553 = add nsw i32 0, %conv552
  %mul554 = mul nsw i32 0, %add553
  %add555 = add nsw i32 %mul554, 1
  %shl556 = shl i32 %add555, 30
  %sub557 = sub nsw i32 %shl556, 1
  %mul558 = mul nsw i32 %sub557, 2
  %add559 = add nsw i32 %mul558, 1
  br label %cond.end.566

cond.false.560:                                   ; preds = %cond.true.540
  %96 = load i64, i64* %nr_bad, align 8
  %conv561 = trunc i64 %96 to i16
  %conv562 = sext i16 %conv561 to i32
  %add563 = add nsw i32 0, %conv562
  %mul564 = mul nsw i32 0, %add563
  %sub565 = sub nsw i32 %mul564, 1
  br label %cond.end.566

cond.end.566:                                     ; preds = %cond.false.560, %cond.true.550
  %cond567 = phi i32 [ %add559, %cond.true.550 ], [ %sub565, %cond.false.560 ]
  %div568 = sdiv i32 %cond567, 4
  %cmp569 = icmp slt i32 %conv542, %div568
  br i1 %cmp569, label %cond.true.713, label %lor.lhs.false.693

cond.false.571:                                   ; preds = %cond.true.535
  br i1 false, label %cond.true.572, label %cond.false.573

cond.true.572:                                    ; preds = %cond.false.571
  br i1 false, label %cond.true.713, label %lor.lhs.false.693

cond.false.573:                                   ; preds = %cond.false.571
  %97 = load i64, i64* %nr_bad, align 8
  %conv574 = trunc i64 %97 to i16
  %conv575 = sext i16 %conv574 to i32
  %add576 = add nsw i32 0, %conv575
  %mul577 = mul nsw i32 0, %add576
  %sub578 = sub nsw i32 %mul577, 1
  %cmp579 = icmp slt i32 %sub578, 0
  br i1 %cmp579, label %cond.true.581, label %cond.false.601

cond.true.581:                                    ; preds = %cond.false.573
  %98 = load i64, i64* %nr_bad, align 8
  %conv582 = trunc i64 %98 to i16
  %conv583 = sext i16 %conv582 to i32
  %add584 = add nsw i32 0, %conv583
  %mul585 = mul nsw i32 0, %add584
  %add586 = add nsw i32 %mul585, 0
  %neg587 = xor i32 %add586, -1
  %cmp588 = icmp eq i32 %neg587, -1
  %conv589 = zext i1 %cmp588 to i32
  %sub590 = sub nsw i32 0, %conv589
  %99 = load i64, i64* %nr_bad, align 8
  %conv591 = trunc i64 %99 to i16
  %conv592 = sext i16 %conv591 to i32
  %add593 = add nsw i32 0, %conv592
  %mul594 = mul nsw i32 0, %add593
  %add595 = add nsw i32 %mul594, 1
  %shl596 = shl i32 %add595, 30
  %sub597 = sub nsw i32 %shl596, 1
  %mul598 = mul nsw i32 %sub597, 2
  %add599 = add nsw i32 %mul598, 1
  %sub600 = sub nsw i32 %sub590, %add599
  br label %cond.end.607

cond.false.601:                                   ; preds = %cond.false.573
  %100 = load i64, i64* %nr_bad, align 8
  %conv602 = trunc i64 %100 to i16
  %conv603 = sext i16 %conv602 to i32
  %add604 = add nsw i32 0, %conv603
  %mul605 = mul nsw i32 0, %add604
  %add606 = add nsw i32 %mul605, 0
  br label %cond.end.607

cond.end.607:                                     ; preds = %cond.false.601, %cond.true.581
  %cond608 = phi i32 [ %sub600, %cond.true.581 ], [ %add606, %cond.false.601 ]
  %div609 = sdiv i32 %cond608, 4
  %101 = load i64, i64* %nr_bad, align 8
  %conv610 = trunc i64 %101 to i16
  %conv611 = sext i16 %conv610 to i32
  %cmp612 = icmp slt i32 %div609, %conv611
  br i1 %cmp612, label %cond.true.713, label %lor.lhs.false.693

cond.false.614:                                   ; preds = %lor.lhs.false.534
  br i1 false, label %cond.true.615, label %cond.false.616

cond.true.615:                                    ; preds = %cond.false.614
  br i1 false, label %cond.true.713, label %lor.lhs.false.693

cond.false.616:                                   ; preds = %cond.false.614
  %102 = load i64, i64* %nr_bad, align 8
  %conv617 = trunc i64 %102 to i16
  %conv618 = sext i16 %conv617 to i32
  %cmp619 = icmp slt i32 %conv618, 0
  br i1 %cmp619, label %cond.true.621, label %cond.false.662

cond.true.621:                                    ; preds = %cond.false.616
  %103 = load i64, i64* %nr_bad, align 8
  %conv622 = trunc i64 %103 to i16
  %conv623 = sext i16 %conv622 to i32
  %104 = load i64, i64* %nr_bad, align 8
  %conv624 = trunc i64 %104 to i16
  %conv625 = sext i16 %conv624 to i32
  %add626 = add nsw i32 0, %conv625
  %mul627 = mul nsw i32 0, %add626
  %sub628 = sub nsw i32 %mul627, 1
  %cmp629 = icmp slt i32 %sub628, 0
  br i1 %cmp629, label %cond.true.631, label %cond.false.651

cond.true.631:                                    ; preds = %cond.true.621
  %105 = load i64, i64* %nr_bad, align 8
  %conv632 = trunc i64 %105 to i16
  %conv633 = sext i16 %conv632 to i32
  %add634 = add nsw i32 0, %conv633
  %mul635 = mul nsw i32 0, %add634
  %add636 = add nsw i32 %mul635, 0
  %neg637 = xor i32 %add636, -1
  %cmp638 = icmp eq i32 %neg637, -1
  %conv639 = zext i1 %cmp638 to i32
  %sub640 = sub nsw i32 0, %conv639
  %106 = load i64, i64* %nr_bad, align 8
  %conv641 = trunc i64 %106 to i16
  %conv642 = sext i16 %conv641 to i32
  %add643 = add nsw i32 0, %conv642
  %mul644 = mul nsw i32 0, %add643
  %add645 = add nsw i32 %mul644, 1
  %shl646 = shl i32 %add645, 30
  %sub647 = sub nsw i32 %shl646, 1
  %mul648 = mul nsw i32 %sub647, 2
  %add649 = add nsw i32 %mul648, 1
  %sub650 = sub nsw i32 %sub640, %add649
  br label %cond.end.657

cond.false.651:                                   ; preds = %cond.true.621
  %107 = load i64, i64* %nr_bad, align 8
  %conv652 = trunc i64 %107 to i16
  %conv653 = sext i16 %conv652 to i32
  %add654 = add nsw i32 0, %conv653
  %mul655 = mul nsw i32 0, %add654
  %add656 = add nsw i32 %mul655, 0
  br label %cond.end.657

cond.end.657:                                     ; preds = %cond.false.651, %cond.true.631
  %cond658 = phi i32 [ %sub650, %cond.true.631 ], [ %add656, %cond.false.651 ]
  %div659 = sdiv i32 %cond658, 4
  %cmp660 = icmp slt i32 %conv623, %div659
  br i1 %cmp660, label %cond.true.713, label %lor.lhs.false.693

cond.false.662:                                   ; preds = %cond.false.616
  %108 = load i64, i64* %nr_bad, align 8
  %conv663 = trunc i64 %108 to i16
  %conv664 = sext i16 %conv663 to i32
  %add665 = add nsw i32 0, %conv664
  %mul666 = mul nsw i32 0, %add665
  %sub667 = sub nsw i32 %mul666, 1
  %cmp668 = icmp slt i32 %sub667, 0
  br i1 %cmp668, label %cond.true.670, label %cond.false.680

cond.true.670:                                    ; preds = %cond.false.662
  %109 = load i64, i64* %nr_bad, align 8
  %conv671 = trunc i64 %109 to i16
  %conv672 = sext i16 %conv671 to i32
  %add673 = add nsw i32 0, %conv672
  %mul674 = mul nsw i32 0, %add673
  %add675 = add nsw i32 %mul674, 1
  %shl676 = shl i32 %add675, 30
  %sub677 = sub nsw i32 %shl676, 1
  %mul678 = mul nsw i32 %sub677, 2
  %add679 = add nsw i32 %mul678, 1
  br label %cond.end.686

cond.false.680:                                   ; preds = %cond.false.662
  %110 = load i64, i64* %nr_bad, align 8
  %conv681 = trunc i64 %110 to i16
  %conv682 = sext i16 %conv681 to i32
  %add683 = add nsw i32 0, %conv682
  %mul684 = mul nsw i32 0, %add683
  %sub685 = sub nsw i32 %mul684, 1
  br label %cond.end.686

cond.end.686:                                     ; preds = %cond.false.680, %cond.true.670
  %cond687 = phi i32 [ %add679, %cond.true.670 ], [ %sub685, %cond.false.680 ]
  %div688 = sdiv i32 %cond687, 4
  %111 = load i64, i64* %nr_bad, align 8
  %conv689 = trunc i64 %111 to i16
  %conv690 = sext i16 %conv689 to i32
  %cmp691 = icmp slt i32 %div688, %conv690
  br i1 %cmp691, label %cond.true.713, label %lor.lhs.false.693

lor.lhs.false.693:                                ; preds = %cond.end.686, %cond.end.657, %cond.true.615, %cond.end.607, %cond.true.572, %cond.end.566
  %112 = load i64, i64* %nr_bad, align 8
  %conv694 = trunc i64 %112 to i16
  %conv695 = sext i16 %conv694 to i32
  %mul696 = mul nsw i32 %conv695, 4
  %mul697 = mul nsw i32 0, %mul696
  %sub698 = sub nsw i32 %mul697, 1
  %cmp699 = icmp slt i32 %sub698, 0
  br i1 %cmp699, label %land.lhs.true.701, label %lor.lhs.false.707

land.lhs.true.701:                                ; preds = %lor.lhs.false.693
  %113 = load i64, i64* %nr_bad, align 8
  %conv702 = trunc i64 %113 to i16
  %conv703 = sext i16 %conv702 to i32
  %mul704 = mul nsw i32 %conv703, 4
  %cmp705 = icmp slt i32 %mul704, -32768
  br i1 %cmp705, label %cond.true.713, label %lor.lhs.false.707

lor.lhs.false.707:                                ; preds = %land.lhs.true.701, %lor.lhs.false.693
  %114 = load i64, i64* %nr_bad, align 8
  %conv708 = trunc i64 %114 to i16
  %conv709 = sext i16 %conv708 to i32
  %mul710 = mul nsw i32 %conv709, 4
  %cmp711 = icmp slt i32 32767, %mul710
  br i1 %cmp711, label %cond.true.713, label %cond.false.736

cond.true.713:                                    ; preds = %lor.lhs.false.707, %land.lhs.true.701, %cond.end.686, %cond.end.657, %cond.true.615, %cond.end.607, %cond.true.572, %cond.end.566, %land.lhs.true.529
  %115 = load i64, i64* %nr_bad, align 8
  %conv714 = trunc i64 %115 to i16
  %conv715 = zext i16 %conv714 to i32
  %mul716 = mul nsw i32 %conv715, 4
  %cmp717 = icmp sle i32 %mul716, 32767
  br i1 %cmp717, label %cond.true.719, label %cond.false.725

cond.true.719:                                    ; preds = %cond.true.713
  %116 = load i64, i64* %nr_bad, align 8
  %conv720 = trunc i64 %116 to i16
  %conv721 = zext i16 %conv720 to i32
  %mul722 = mul nsw i32 %conv721, 4
  %conv723 = trunc i32 %mul722 to i16
  %conv724 = sext i16 %conv723 to i32
  br label %cond.end.733

cond.false.725:                                   ; preds = %cond.true.713
  %117 = load i64, i64* %nr_bad, align 8
  %conv726 = trunc i64 %117 to i16
  %conv727 = zext i16 %conv726 to i32
  %mul728 = mul nsw i32 %conv727, 4
  %sub729 = sub nsw i32 %mul728, -32768
  %conv730 = trunc i32 %sub729 to i16
  %conv731 = sext i16 %conv730 to i32
  %add732 = add nsw i32 %conv731, -32768
  br label %cond.end.733

cond.end.733:                                     ; preds = %cond.false.725, %cond.true.719
  %cond734 = phi i32 [ %conv724, %cond.true.719 ], [ %add732, %cond.false.725 ]
  %conv735 = sext i32 %cond734 to i64
  store i64 %conv735, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.736:                                   ; preds = %lor.lhs.false.707
  %118 = load i64, i64* %nr_bad, align 8
  %conv737 = trunc i64 %118 to i16
  %conv738 = zext i16 %conv737 to i32
  %mul739 = mul nsw i32 %conv738, 4
  %cmp740 = icmp sle i32 %mul739, 32767
  br i1 %cmp740, label %cond.true.742, label %cond.false.748

cond.true.742:                                    ; preds = %cond.false.736
  %119 = load i64, i64* %nr_bad, align 8
  %conv743 = trunc i64 %119 to i16
  %conv744 = zext i16 %conv743 to i32
  %mul745 = mul nsw i32 %conv744, 4
  %conv746 = trunc i32 %mul745 to i16
  %conv747 = sext i16 %conv746 to i32
  br label %cond.end.756

cond.false.748:                                   ; preds = %cond.false.736
  %120 = load i64, i64* %nr_bad, align 8
  %conv749 = trunc i64 %120 to i16
  %conv750 = zext i16 %conv749 to i32
  %mul751 = mul nsw i32 %conv750, 4
  %sub752 = sub nsw i32 %mul751, -32768
  %conv753 = trunc i32 %sub752 to i16
  %conv754 = sext i16 %conv753 to i32
  %add755 = add nsw i32 %conv754, -32768
  br label %cond.end.756

cond.end.756:                                     ; preds = %cond.false.748, %cond.true.742
  %cond757 = phi i32 [ %conv747, %cond.true.742 ], [ %add755, %cond.false.748 ]
  %conv758 = sext i32 %cond757 to i64
  store i64 %conv758, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.759:                                   ; preds = %cond.true.490
  %121 = load i64, i64* %nr_bad, align 8
  %add760 = add nsw i64 0, %121
  %mul761 = mul nsw i64 0, %add760
  %sub762 = sub nsw i64 %mul761, 1
  %cmp763 = icmp slt i64 %sub762, 0
  br i1 %cmp763, label %cond.true.765, label %cond.false.782

cond.true.765:                                    ; preds = %cond.false.759
  %122 = load i64, i64* %nr_bad, align 8
  %add766 = add nsw i64 0, %122
  %mul767 = mul nsw i64 0, %add766
  %add768 = add nsw i64 %mul767, 0
  %neg769 = xor i64 %add768, -1
  %cmp770 = icmp eq i64 %neg769, -1
  %conv771 = zext i1 %cmp770 to i32
  %sub772 = sub nsw i32 0, %conv771
  %conv773 = sext i32 %sub772 to i64
  %123 = load i64, i64* %nr_bad, align 8
  %add774 = add nsw i64 0, %123
  %mul775 = mul nsw i64 0, %add774
  %add776 = add nsw i64 %mul775, 1
  %shl777 = shl i64 %add776, 62
  %sub778 = sub nsw i64 %shl777, 1
  %mul779 = mul nsw i64 %sub778, 2
  %add780 = add nsw i64 %mul779, 1
  %sub781 = sub nsw i64 %conv773, %add780
  br label %cond.end.786

cond.false.782:                                   ; preds = %cond.false.759
  %124 = load i64, i64* %nr_bad, align 8
  %add783 = add nsw i64 0, %124
  %mul784 = mul nsw i64 0, %add783
  %add785 = add nsw i64 %mul784, 0
  br label %cond.end.786

cond.end.786:                                     ; preds = %cond.false.782, %cond.true.765
  %cond787 = phi i64 [ %sub781, %cond.true.765 ], [ %add785, %cond.false.782 ]
  %cmp788 = icmp eq i64 %cond787, 0
  br i1 %cmp788, label %land.lhs.true.790, label %lor.lhs.false.793

land.lhs.true.790:                                ; preds = %cond.end.786
  %125 = load i64, i64* %nr_bad, align 8
  %cmp791 = icmp slt i64 %125, 0
  br i1 %cmp791, label %cond.true.928, label %lor.lhs.false.793

lor.lhs.false.793:                                ; preds = %land.lhs.true.790, %cond.end.786
  br i1 false, label %cond.true.794, label %cond.false.854

cond.true.794:                                    ; preds = %lor.lhs.false.793
  %126 = load i64, i64* %nr_bad, align 8
  %cmp795 = icmp slt i64 %126, 0
  br i1 %cmp795, label %cond.true.797, label %cond.false.820

cond.true.797:                                    ; preds = %cond.true.794
  %127 = load i64, i64* %nr_bad, align 8
  %128 = load i64, i64* %nr_bad, align 8
  %add798 = add nsw i64 0, %128
  %mul799 = mul nsw i64 0, %add798
  %sub800 = sub nsw i64 %mul799, 1
  %cmp801 = icmp slt i64 %sub800, 0
  br i1 %cmp801, label %cond.true.803, label %cond.false.811

cond.true.803:                                    ; preds = %cond.true.797
  %129 = load i64, i64* %nr_bad, align 8
  %add804 = add nsw i64 0, %129
  %mul805 = mul nsw i64 0, %add804
  %add806 = add nsw i64 %mul805, 1
  %shl807 = shl i64 %add806, 62
  %sub808 = sub nsw i64 %shl807, 1
  %mul809 = mul nsw i64 %sub808, 2
  %add810 = add nsw i64 %mul809, 1
  br label %cond.end.815

cond.false.811:                                   ; preds = %cond.true.797
  %130 = load i64, i64* %nr_bad, align 8
  %add812 = add nsw i64 0, %130
  %mul813 = mul nsw i64 0, %add812
  %sub814 = sub nsw i64 %mul813, 1
  br label %cond.end.815

cond.end.815:                                     ; preds = %cond.false.811, %cond.true.803
  %cond816 = phi i64 [ %add810, %cond.true.803 ], [ %sub814, %cond.false.811 ]
  %div817 = sdiv i64 %cond816, 4
  %cmp818 = icmp slt i64 %127, %div817
  br i1 %cmp818, label %cond.true.928, label %lor.lhs.false.914

cond.false.820:                                   ; preds = %cond.true.794
  br i1 false, label %cond.true.821, label %cond.false.822

cond.true.821:                                    ; preds = %cond.false.820
  br i1 false, label %cond.true.928, label %lor.lhs.false.914

cond.false.822:                                   ; preds = %cond.false.820
  %131 = load i64, i64* %nr_bad, align 8
  %add823 = add nsw i64 0, %131
  %mul824 = mul nsw i64 0, %add823
  %sub825 = sub nsw i64 %mul824, 1
  %cmp826 = icmp slt i64 %sub825, 0
  br i1 %cmp826, label %cond.true.828, label %cond.false.845

cond.true.828:                                    ; preds = %cond.false.822
  %132 = load i64, i64* %nr_bad, align 8
  %add829 = add nsw i64 0, %132
  %mul830 = mul nsw i64 0, %add829
  %add831 = add nsw i64 %mul830, 0
  %neg832 = xor i64 %add831, -1
  %cmp833 = icmp eq i64 %neg832, -1
  %conv834 = zext i1 %cmp833 to i32
  %sub835 = sub nsw i32 0, %conv834
  %conv836 = sext i32 %sub835 to i64
  %133 = load i64, i64* %nr_bad, align 8
  %add837 = add nsw i64 0, %133
  %mul838 = mul nsw i64 0, %add837
  %add839 = add nsw i64 %mul838, 1
  %shl840 = shl i64 %add839, 62
  %sub841 = sub nsw i64 %shl840, 1
  %mul842 = mul nsw i64 %sub841, 2
  %add843 = add nsw i64 %mul842, 1
  %sub844 = sub nsw i64 %conv836, %add843
  br label %cond.end.849

cond.false.845:                                   ; preds = %cond.false.822
  %134 = load i64, i64* %nr_bad, align 8
  %add846 = add nsw i64 0, %134
  %mul847 = mul nsw i64 0, %add846
  %add848 = add nsw i64 %mul847, 0
  br label %cond.end.849

cond.end.849:                                     ; preds = %cond.false.845, %cond.true.828
  %cond850 = phi i64 [ %sub844, %cond.true.828 ], [ %add848, %cond.false.845 ]
  %div851 = sdiv i64 %cond850, 4
  %135 = load i64, i64* %nr_bad, align 8
  %cmp852 = icmp slt i64 %div851, %135
  br i1 %cmp852, label %cond.true.928, label %lor.lhs.false.914

cond.false.854:                                   ; preds = %lor.lhs.false.793
  br i1 false, label %cond.true.855, label %cond.false.856

cond.true.855:                                    ; preds = %cond.false.854
  br i1 false, label %cond.true.928, label %lor.lhs.false.914

cond.false.856:                                   ; preds = %cond.false.854
  %136 = load i64, i64* %nr_bad, align 8
  %cmp857 = icmp slt i64 %136, 0
  br i1 %cmp857, label %cond.true.859, label %cond.false.891

cond.true.859:                                    ; preds = %cond.false.856
  %137 = load i64, i64* %nr_bad, align 8
  %138 = load i64, i64* %nr_bad, align 8
  %add860 = add nsw i64 0, %138
  %mul861 = mul nsw i64 0, %add860
  %sub862 = sub nsw i64 %mul861, 1
  %cmp863 = icmp slt i64 %sub862, 0
  br i1 %cmp863, label %cond.true.865, label %cond.false.882

cond.true.865:                                    ; preds = %cond.true.859
  %139 = load i64, i64* %nr_bad, align 8
  %add866 = add nsw i64 0, %139
  %mul867 = mul nsw i64 0, %add866
  %add868 = add nsw i64 %mul867, 0
  %neg869 = xor i64 %add868, -1
  %cmp870 = icmp eq i64 %neg869, -1
  %conv871 = zext i1 %cmp870 to i32
  %sub872 = sub nsw i32 0, %conv871
  %conv873 = sext i32 %sub872 to i64
  %140 = load i64, i64* %nr_bad, align 8
  %add874 = add nsw i64 0, %140
  %mul875 = mul nsw i64 0, %add874
  %add876 = add nsw i64 %mul875, 1
  %shl877 = shl i64 %add876, 62
  %sub878 = sub nsw i64 %shl877, 1
  %mul879 = mul nsw i64 %sub878, 2
  %add880 = add nsw i64 %mul879, 1
  %sub881 = sub nsw i64 %conv873, %add880
  br label %cond.end.886

cond.false.882:                                   ; preds = %cond.true.859
  %141 = load i64, i64* %nr_bad, align 8
  %add883 = add nsw i64 0, %141
  %mul884 = mul nsw i64 0, %add883
  %add885 = add nsw i64 %mul884, 0
  br label %cond.end.886

cond.end.886:                                     ; preds = %cond.false.882, %cond.true.865
  %cond887 = phi i64 [ %sub881, %cond.true.865 ], [ %add885, %cond.false.882 ]
  %div888 = sdiv i64 %cond887, 4
  %cmp889 = icmp slt i64 %137, %div888
  br i1 %cmp889, label %cond.true.928, label %lor.lhs.false.914

cond.false.891:                                   ; preds = %cond.false.856
  %142 = load i64, i64* %nr_bad, align 8
  %add892 = add nsw i64 0, %142
  %mul893 = mul nsw i64 0, %add892
  %sub894 = sub nsw i64 %mul893, 1
  %cmp895 = icmp slt i64 %sub894, 0
  br i1 %cmp895, label %cond.true.897, label %cond.false.905

cond.true.897:                                    ; preds = %cond.false.891
  %143 = load i64, i64* %nr_bad, align 8
  %add898 = add nsw i64 0, %143
  %mul899 = mul nsw i64 0, %add898
  %add900 = add nsw i64 %mul899, 1
  %shl901 = shl i64 %add900, 62
  %sub902 = sub nsw i64 %shl901, 1
  %mul903 = mul nsw i64 %sub902, 2
  %add904 = add nsw i64 %mul903, 1
  br label %cond.end.909

cond.false.905:                                   ; preds = %cond.false.891
  %144 = load i64, i64* %nr_bad, align 8
  %add906 = add nsw i64 0, %144
  %mul907 = mul nsw i64 0, %add906
  %sub908 = sub nsw i64 %mul907, 1
  br label %cond.end.909

cond.end.909:                                     ; preds = %cond.false.905, %cond.true.897
  %cond910 = phi i64 [ %add904, %cond.true.897 ], [ %sub908, %cond.false.905 ]
  %div911 = sdiv i64 %cond910, 4
  %145 = load i64, i64* %nr_bad, align 8
  %cmp912 = icmp slt i64 %div911, %145
  br i1 %cmp912, label %cond.true.928, label %lor.lhs.false.914

lor.lhs.false.914:                                ; preds = %cond.end.909, %cond.end.886, %cond.true.855, %cond.end.849, %cond.true.821, %cond.end.815
  %146 = load i64, i64* %nr_bad, align 8
  %mul915 = mul nsw i64 %146, 4
  %mul916 = mul nsw i64 0, %mul915
  %sub917 = sub nsw i64 %mul916, 1
  %cmp918 = icmp slt i64 %sub917, 0
  br i1 %cmp918, label %land.lhs.true.920, label %lor.lhs.false.924

land.lhs.true.920:                                ; preds = %lor.lhs.false.914
  %147 = load i64, i64* %nr_bad, align 8
  %mul921 = mul nsw i64 %147, 4
  %cmp922 = icmp slt i64 %mul921, -32768
  br i1 %cmp922, label %cond.true.928, label %lor.lhs.false.924

lor.lhs.false.924:                                ; preds = %land.lhs.true.920, %lor.lhs.false.914
  %148 = load i64, i64* %nr_bad, align 8
  %mul925 = mul nsw i64 %148, 4
  %cmp926 = icmp slt i64 32767, %mul925
  br i1 %cmp926, label %cond.true.928, label %cond.false.951

cond.true.928:                                    ; preds = %lor.lhs.false.924, %land.lhs.true.920, %cond.end.909, %cond.end.886, %cond.true.855, %cond.end.849, %cond.true.821, %cond.end.815, %land.lhs.true.790
  %149 = load i64, i64* %nr_bad, align 8
  %conv929 = trunc i64 %149 to i16
  %conv930 = zext i16 %conv929 to i32
  %mul931 = mul nsw i32 %conv930, 4
  %cmp932 = icmp sle i32 %mul931, 32767
  br i1 %cmp932, label %cond.true.934, label %cond.false.940

cond.true.934:                                    ; preds = %cond.true.928
  %150 = load i64, i64* %nr_bad, align 8
  %conv935 = trunc i64 %150 to i16
  %conv936 = zext i16 %conv935 to i32
  %mul937 = mul nsw i32 %conv936, 4
  %conv938 = trunc i32 %mul937 to i16
  %conv939 = sext i16 %conv938 to i32
  br label %cond.end.948

cond.false.940:                                   ; preds = %cond.true.928
  %151 = load i64, i64* %nr_bad, align 8
  %conv941 = trunc i64 %151 to i16
  %conv942 = zext i16 %conv941 to i32
  %mul943 = mul nsw i32 %conv942, 4
  %sub944 = sub nsw i32 %mul943, -32768
  %conv945 = trunc i32 %sub944 to i16
  %conv946 = sext i16 %conv945 to i32
  %add947 = add nsw i32 %conv946, -32768
  br label %cond.end.948

cond.end.948:                                     ; preds = %cond.false.940, %cond.true.934
  %cond949 = phi i32 [ %conv939, %cond.true.934 ], [ %add947, %cond.false.940 ]
  %conv950 = sext i32 %cond949 to i64
  store i64 %conv950, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.951:                                   ; preds = %lor.lhs.false.924
  %152 = load i64, i64* %nr_bad, align 8
  %conv952 = trunc i64 %152 to i16
  %conv953 = zext i16 %conv952 to i32
  %mul954 = mul nsw i32 %conv953, 4
  %cmp955 = icmp sle i32 %mul954, 32767
  br i1 %cmp955, label %cond.true.957, label %cond.false.963

cond.true.957:                                    ; preds = %cond.false.951
  %153 = load i64, i64* %nr_bad, align 8
  %conv958 = trunc i64 %153 to i16
  %conv959 = zext i16 %conv958 to i32
  %mul960 = mul nsw i32 %conv959, 4
  %conv961 = trunc i32 %mul960 to i16
  %conv962 = sext i16 %conv961 to i32
  br label %cond.end.971

cond.false.963:                                   ; preds = %cond.false.951
  %154 = load i64, i64* %nr_bad, align 8
  %conv964 = trunc i64 %154 to i16
  %conv965 = zext i16 %conv964 to i32
  %mul966 = mul nsw i32 %conv965, 4
  %sub967 = sub nsw i32 %mul966, -32768
  %conv968 = trunc i32 %sub967 to i16
  %conv969 = sext i16 %conv968 to i32
  %add970 = add nsw i32 %conv969, -32768
  br label %cond.end.971

cond.end.971:                                     ; preds = %cond.false.963, %cond.true.957
  %cond972 = phi i32 [ %conv962, %cond.true.957 ], [ %add970, %cond.false.963 ]
  %conv973 = sext i32 %cond972 to i64
  store i64 %conv973, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.974:                                   ; preds = %cond.false.489
  br i1 false, label %cond.true.975, label %cond.false.1403

cond.true.975:                                    ; preds = %cond.false.974
  br i1 false, label %cond.true.976, label %cond.false.1202

cond.true.976:                                    ; preds = %cond.true.975
  %155 = load i64, i64* %nr_bad, align 8
  %conv977 = trunc i64 %155 to i32
  %add978 = add nsw i32 0, %conv977
  %mul979 = mul nsw i32 0, %add978
  %sub980 = sub nsw i32 %mul979, 1
  %cmp981 = icmp slt i32 %sub980, 0
  br i1 %cmp981, label %cond.true.983, label %cond.false.1001

cond.true.983:                                    ; preds = %cond.true.976
  %156 = load i64, i64* %nr_bad, align 8
  %conv984 = trunc i64 %156 to i32
  %add985 = add nsw i32 0, %conv984
  %mul986 = mul nsw i32 0, %add985
  %add987 = add nsw i32 %mul986, 0
  %neg988 = xor i32 %add987, -1
  %cmp989 = icmp eq i32 %neg988, -1
  %conv990 = zext i1 %cmp989 to i32
  %sub991 = sub nsw i32 0, %conv990
  %157 = load i64, i64* %nr_bad, align 8
  %conv992 = trunc i64 %157 to i32
  %add993 = add nsw i32 0, %conv992
  %mul994 = mul nsw i32 0, %add993
  %add995 = add nsw i32 %mul994, 1
  %shl996 = shl i32 %add995, 30
  %sub997 = sub nsw i32 %shl996, 1
  %mul998 = mul nsw i32 %sub997, 2
  %add999 = add nsw i32 %mul998, 1
  %sub1000 = sub nsw i32 %sub991, %add999
  br label %cond.end.1006

cond.false.1001:                                  ; preds = %cond.true.976
  %158 = load i64, i64* %nr_bad, align 8
  %conv1002 = trunc i64 %158 to i32
  %add1003 = add nsw i32 0, %conv1002
  %mul1004 = mul nsw i32 0, %add1003
  %add1005 = add nsw i32 %mul1004, 0
  br label %cond.end.1006

cond.end.1006:                                    ; preds = %cond.false.1001, %cond.true.983
  %cond1007 = phi i32 [ %sub1000, %cond.true.983 ], [ %add1005, %cond.false.1001 ]
  %cmp1008 = icmp eq i32 %cond1007, 0
  br i1 %cmp1008, label %land.lhs.true.1010, label %lor.lhs.false.1014

land.lhs.true.1010:                               ; preds = %cond.end.1006
  %159 = load i64, i64* %nr_bad, align 8
  %conv1011 = trunc i64 %159 to i32
  %cmp1012 = icmp slt i32 %conv1011, 0
  br i1 %cmp1012, label %cond.true.1170, label %lor.lhs.false.1014

lor.lhs.false.1014:                               ; preds = %land.lhs.true.1010, %cond.end.1006
  br i1 false, label %cond.true.1015, label %cond.false.1084

cond.true.1015:                                   ; preds = %lor.lhs.false.1014
  %160 = load i64, i64* %nr_bad, align 8
  %conv1016 = trunc i64 %160 to i32
  %cmp1017 = icmp slt i32 %conv1016, 0
  br i1 %cmp1017, label %cond.true.1019, label %cond.false.1046

cond.true.1019:                                   ; preds = %cond.true.1015
  %161 = load i64, i64* %nr_bad, align 8
  %conv1020 = trunc i64 %161 to i32
  %162 = load i64, i64* %nr_bad, align 8
  %conv1021 = trunc i64 %162 to i32
  %add1022 = add nsw i32 0, %conv1021
  %mul1023 = mul nsw i32 0, %add1022
  %sub1024 = sub nsw i32 %mul1023, 1
  %cmp1025 = icmp slt i32 %sub1024, 0
  br i1 %cmp1025, label %cond.true.1027, label %cond.false.1036

cond.true.1027:                                   ; preds = %cond.true.1019
  %163 = load i64, i64* %nr_bad, align 8
  %conv1028 = trunc i64 %163 to i32
  %add1029 = add nsw i32 0, %conv1028
  %mul1030 = mul nsw i32 0, %add1029
  %add1031 = add nsw i32 %mul1030, 1
  %shl1032 = shl i32 %add1031, 30
  %sub1033 = sub nsw i32 %shl1032, 1
  %mul1034 = mul nsw i32 %sub1033, 2
  %add1035 = add nsw i32 %mul1034, 1
  br label %cond.end.1041

cond.false.1036:                                  ; preds = %cond.true.1019
  %164 = load i64, i64* %nr_bad, align 8
  %conv1037 = trunc i64 %164 to i32
  %add1038 = add nsw i32 0, %conv1037
  %mul1039 = mul nsw i32 0, %add1038
  %sub1040 = sub nsw i32 %mul1039, 1
  br label %cond.end.1041

cond.end.1041:                                    ; preds = %cond.false.1036, %cond.true.1027
  %cond1042 = phi i32 [ %add1035, %cond.true.1027 ], [ %sub1040, %cond.false.1036 ]
  %div1043 = sdiv i32 %cond1042, 4
  %cmp1044 = icmp slt i32 %conv1020, %div1043
  br i1 %cmp1044, label %cond.true.1170, label %lor.lhs.false.1153

cond.false.1046:                                  ; preds = %cond.true.1015
  br i1 false, label %cond.true.1047, label %cond.false.1048

cond.true.1047:                                   ; preds = %cond.false.1046
  br i1 false, label %cond.true.1170, label %lor.lhs.false.1153

cond.false.1048:                                  ; preds = %cond.false.1046
  %165 = load i64, i64* %nr_bad, align 8
  %conv1049 = trunc i64 %165 to i32
  %add1050 = add nsw i32 0, %conv1049
  %mul1051 = mul nsw i32 0, %add1050
  %sub1052 = sub nsw i32 %mul1051, 1
  %cmp1053 = icmp slt i32 %sub1052, 0
  br i1 %cmp1053, label %cond.true.1055, label %cond.false.1073

cond.true.1055:                                   ; preds = %cond.false.1048
  %166 = load i64, i64* %nr_bad, align 8
  %conv1056 = trunc i64 %166 to i32
  %add1057 = add nsw i32 0, %conv1056
  %mul1058 = mul nsw i32 0, %add1057
  %add1059 = add nsw i32 %mul1058, 0
  %neg1060 = xor i32 %add1059, -1
  %cmp1061 = icmp eq i32 %neg1060, -1
  %conv1062 = zext i1 %cmp1061 to i32
  %sub1063 = sub nsw i32 0, %conv1062
  %167 = load i64, i64* %nr_bad, align 8
  %conv1064 = trunc i64 %167 to i32
  %add1065 = add nsw i32 0, %conv1064
  %mul1066 = mul nsw i32 0, %add1065
  %add1067 = add nsw i32 %mul1066, 1
  %shl1068 = shl i32 %add1067, 30
  %sub1069 = sub nsw i32 %shl1068, 1
  %mul1070 = mul nsw i32 %sub1069, 2
  %add1071 = add nsw i32 %mul1070, 1
  %sub1072 = sub nsw i32 %sub1063, %add1071
  br label %cond.end.1078

cond.false.1073:                                  ; preds = %cond.false.1048
  %168 = load i64, i64* %nr_bad, align 8
  %conv1074 = trunc i64 %168 to i32
  %add1075 = add nsw i32 0, %conv1074
  %mul1076 = mul nsw i32 0, %add1075
  %add1077 = add nsw i32 %mul1076, 0
  br label %cond.end.1078

cond.end.1078:                                    ; preds = %cond.false.1073, %cond.true.1055
  %cond1079 = phi i32 [ %sub1072, %cond.true.1055 ], [ %add1077, %cond.false.1073 ]
  %div1080 = sdiv i32 %cond1079, 4
  %169 = load i64, i64* %nr_bad, align 8
  %conv1081 = trunc i64 %169 to i32
  %cmp1082 = icmp slt i32 %div1080, %conv1081
  br i1 %cmp1082, label %cond.true.1170, label %lor.lhs.false.1153

cond.false.1084:                                  ; preds = %lor.lhs.false.1014
  br i1 false, label %cond.true.1085, label %cond.false.1086

cond.true.1085:                                   ; preds = %cond.false.1084
  br i1 false, label %cond.true.1170, label %lor.lhs.false.1153

cond.false.1086:                                  ; preds = %cond.false.1084
  %170 = load i64, i64* %nr_bad, align 8
  %conv1087 = trunc i64 %170 to i32
  %cmp1088 = icmp slt i32 %conv1087, 0
  br i1 %cmp1088, label %cond.true.1090, label %cond.false.1126

cond.true.1090:                                   ; preds = %cond.false.1086
  %171 = load i64, i64* %nr_bad, align 8
  %conv1091 = trunc i64 %171 to i32
  %172 = load i64, i64* %nr_bad, align 8
  %conv1092 = trunc i64 %172 to i32
  %add1093 = add nsw i32 0, %conv1092
  %mul1094 = mul nsw i32 0, %add1093
  %sub1095 = sub nsw i32 %mul1094, 1
  %cmp1096 = icmp slt i32 %sub1095, 0
  br i1 %cmp1096, label %cond.true.1098, label %cond.false.1116

cond.true.1098:                                   ; preds = %cond.true.1090
  %173 = load i64, i64* %nr_bad, align 8
  %conv1099 = trunc i64 %173 to i32
  %add1100 = add nsw i32 0, %conv1099
  %mul1101 = mul nsw i32 0, %add1100
  %add1102 = add nsw i32 %mul1101, 0
  %neg1103 = xor i32 %add1102, -1
  %cmp1104 = icmp eq i32 %neg1103, -1
  %conv1105 = zext i1 %cmp1104 to i32
  %sub1106 = sub nsw i32 0, %conv1105
  %174 = load i64, i64* %nr_bad, align 8
  %conv1107 = trunc i64 %174 to i32
  %add1108 = add nsw i32 0, %conv1107
  %mul1109 = mul nsw i32 0, %add1108
  %add1110 = add nsw i32 %mul1109, 1
  %shl1111 = shl i32 %add1110, 30
  %sub1112 = sub nsw i32 %shl1111, 1
  %mul1113 = mul nsw i32 %sub1112, 2
  %add1114 = add nsw i32 %mul1113, 1
  %sub1115 = sub nsw i32 %sub1106, %add1114
  br label %cond.end.1121

cond.false.1116:                                  ; preds = %cond.true.1090
  %175 = load i64, i64* %nr_bad, align 8
  %conv1117 = trunc i64 %175 to i32
  %add1118 = add nsw i32 0, %conv1117
  %mul1119 = mul nsw i32 0, %add1118
  %add1120 = add nsw i32 %mul1119, 0
  br label %cond.end.1121

cond.end.1121:                                    ; preds = %cond.false.1116, %cond.true.1098
  %cond1122 = phi i32 [ %sub1115, %cond.true.1098 ], [ %add1120, %cond.false.1116 ]
  %div1123 = sdiv i32 %cond1122, 4
  %cmp1124 = icmp slt i32 %conv1091, %div1123
  br i1 %cmp1124, label %cond.true.1170, label %lor.lhs.false.1153

cond.false.1126:                                  ; preds = %cond.false.1086
  %176 = load i64, i64* %nr_bad, align 8
  %conv1127 = trunc i64 %176 to i32
  %add1128 = add nsw i32 0, %conv1127
  %mul1129 = mul nsw i32 0, %add1128
  %sub1130 = sub nsw i32 %mul1129, 1
  %cmp1131 = icmp slt i32 %sub1130, 0
  br i1 %cmp1131, label %cond.true.1133, label %cond.false.1142

cond.true.1133:                                   ; preds = %cond.false.1126
  %177 = load i64, i64* %nr_bad, align 8
  %conv1134 = trunc i64 %177 to i32
  %add1135 = add nsw i32 0, %conv1134
  %mul1136 = mul nsw i32 0, %add1135
  %add1137 = add nsw i32 %mul1136, 1
  %shl1138 = shl i32 %add1137, 30
  %sub1139 = sub nsw i32 %shl1138, 1
  %mul1140 = mul nsw i32 %sub1139, 2
  %add1141 = add nsw i32 %mul1140, 1
  br label %cond.end.1147

cond.false.1142:                                  ; preds = %cond.false.1126
  %178 = load i64, i64* %nr_bad, align 8
  %conv1143 = trunc i64 %178 to i32
  %add1144 = add nsw i32 0, %conv1143
  %mul1145 = mul nsw i32 0, %add1144
  %sub1146 = sub nsw i32 %mul1145, 1
  br label %cond.end.1147

cond.end.1147:                                    ; preds = %cond.false.1142, %cond.true.1133
  %cond1148 = phi i32 [ %add1141, %cond.true.1133 ], [ %sub1146, %cond.false.1142 ]
  %div1149 = sdiv i32 %cond1148, 4
  %179 = load i64, i64* %nr_bad, align 8
  %conv1150 = trunc i64 %179 to i32
  %cmp1151 = icmp slt i32 %div1149, %conv1150
  br i1 %cmp1151, label %cond.true.1170, label %lor.lhs.false.1153

lor.lhs.false.1153:                               ; preds = %cond.end.1147, %cond.end.1121, %cond.true.1085, %cond.end.1078, %cond.true.1047, %cond.end.1041
  %180 = load i64, i64* %nr_bad, align 8
  %conv1154 = trunc i64 %180 to i32
  %mul1155 = mul nsw i32 %conv1154, 4
  %mul1156 = mul nsw i32 0, %mul1155
  %sub1157 = sub nsw i32 %mul1156, 1
  %cmp1158 = icmp slt i32 %sub1157, 0
  br i1 %cmp1158, label %land.lhs.true.1160, label %lor.lhs.false.1165

land.lhs.true.1160:                               ; preds = %lor.lhs.false.1153
  %181 = load i64, i64* %nr_bad, align 8
  %conv1161 = trunc i64 %181 to i32
  %mul1162 = mul nsw i32 %conv1161, 4
  %cmp1163 = icmp slt i32 %mul1162, -2147483648
  br i1 %cmp1163, label %cond.true.1170, label %lor.lhs.false.1165

lor.lhs.false.1165:                               ; preds = %land.lhs.true.1160, %lor.lhs.false.1153
  %182 = load i64, i64* %nr_bad, align 8
  %conv1166 = trunc i64 %182 to i32
  %mul1167 = mul nsw i32 %conv1166, 4
  %cmp1168 = icmp slt i32 2147483647, %mul1167
  br i1 %cmp1168, label %cond.true.1170, label %cond.false.1186

cond.true.1170:                                   ; preds = %lor.lhs.false.1165, %land.lhs.true.1160, %cond.end.1147, %cond.end.1121, %cond.true.1085, %cond.end.1078, %cond.true.1047, %cond.end.1041, %land.lhs.true.1010
  %183 = load i64, i64* %nr_bad, align 8
  %conv1171 = trunc i64 %183 to i32
  %mul1172 = mul i32 %conv1171, 4
  %cmp1173 = icmp ule i32 %mul1172, 2147483647
  br i1 %cmp1173, label %cond.true.1175, label %cond.false.1178

cond.true.1175:                                   ; preds = %cond.true.1170
  %184 = load i64, i64* %nr_bad, align 8
  %conv1176 = trunc i64 %184 to i32
  %mul1177 = mul i32 %conv1176, 4
  br label %cond.end.1183

cond.false.1178:                                  ; preds = %cond.true.1170
  %185 = load i64, i64* %nr_bad, align 8
  %conv1179 = trunc i64 %185 to i32
  %mul1180 = mul i32 %conv1179, 4
  %sub1181 = sub i32 %mul1180, -2147483648
  %add1182 = add nsw i32 %sub1181, -2147483648
  br label %cond.end.1183

cond.end.1183:                                    ; preds = %cond.false.1178, %cond.true.1175
  %cond1184 = phi i32 [ %mul1177, %cond.true.1175 ], [ %add1182, %cond.false.1178 ]
  %conv1185 = sext i32 %cond1184 to i64
  store i64 %conv1185, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1186:                                  ; preds = %lor.lhs.false.1165
  %186 = load i64, i64* %nr_bad, align 8
  %conv1187 = trunc i64 %186 to i32
  %mul1188 = mul i32 %conv1187, 4
  %cmp1189 = icmp ule i32 %mul1188, 2147483647
  br i1 %cmp1189, label %cond.true.1191, label %cond.false.1194

cond.true.1191:                                   ; preds = %cond.false.1186
  %187 = load i64, i64* %nr_bad, align 8
  %conv1192 = trunc i64 %187 to i32
  %mul1193 = mul i32 %conv1192, 4
  br label %cond.end.1199

cond.false.1194:                                  ; preds = %cond.false.1186
  %188 = load i64, i64* %nr_bad, align 8
  %conv1195 = trunc i64 %188 to i32
  %mul1196 = mul i32 %conv1195, 4
  %sub1197 = sub i32 %mul1196, -2147483648
  %add1198 = add nsw i32 %sub1197, -2147483648
  br label %cond.end.1199

cond.end.1199:                                    ; preds = %cond.false.1194, %cond.true.1191
  %cond1200 = phi i32 [ %mul1193, %cond.true.1191 ], [ %add1198, %cond.false.1194 ]
  %conv1201 = sext i32 %cond1200 to i64
  store i64 %conv1201, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1202:                                  ; preds = %cond.true.975
  %189 = load i64, i64* %nr_bad, align 8
  %add1203 = add nsw i64 0, %189
  %mul1204 = mul nsw i64 0, %add1203
  %sub1205 = sub nsw i64 %mul1204, 1
  %cmp1206 = icmp slt i64 %sub1205, 0
  br i1 %cmp1206, label %cond.true.1208, label %cond.false.1225

cond.true.1208:                                   ; preds = %cond.false.1202
  %190 = load i64, i64* %nr_bad, align 8
  %add1209 = add nsw i64 0, %190
  %mul1210 = mul nsw i64 0, %add1209
  %add1211 = add nsw i64 %mul1210, 0
  %neg1212 = xor i64 %add1211, -1
  %cmp1213 = icmp eq i64 %neg1212, -1
  %conv1214 = zext i1 %cmp1213 to i32
  %sub1215 = sub nsw i32 0, %conv1214
  %conv1216 = sext i32 %sub1215 to i64
  %191 = load i64, i64* %nr_bad, align 8
  %add1217 = add nsw i64 0, %191
  %mul1218 = mul nsw i64 0, %add1217
  %add1219 = add nsw i64 %mul1218, 1
  %shl1220 = shl i64 %add1219, 62
  %sub1221 = sub nsw i64 %shl1220, 1
  %mul1222 = mul nsw i64 %sub1221, 2
  %add1223 = add nsw i64 %mul1222, 1
  %sub1224 = sub nsw i64 %conv1216, %add1223
  br label %cond.end.1229

cond.false.1225:                                  ; preds = %cond.false.1202
  %192 = load i64, i64* %nr_bad, align 8
  %add1226 = add nsw i64 0, %192
  %mul1227 = mul nsw i64 0, %add1226
  %add1228 = add nsw i64 %mul1227, 0
  br label %cond.end.1229

cond.end.1229:                                    ; preds = %cond.false.1225, %cond.true.1208
  %cond1230 = phi i64 [ %sub1224, %cond.true.1208 ], [ %add1228, %cond.false.1225 ]
  %cmp1231 = icmp eq i64 %cond1230, 0
  br i1 %cmp1231, label %land.lhs.true.1233, label %lor.lhs.false.1236

land.lhs.true.1233:                               ; preds = %cond.end.1229
  %193 = load i64, i64* %nr_bad, align 8
  %cmp1234 = icmp slt i64 %193, 0
  br i1 %cmp1234, label %cond.true.1371, label %lor.lhs.false.1236

lor.lhs.false.1236:                               ; preds = %land.lhs.true.1233, %cond.end.1229
  br i1 false, label %cond.true.1237, label %cond.false.1297

cond.true.1237:                                   ; preds = %lor.lhs.false.1236
  %194 = load i64, i64* %nr_bad, align 8
  %cmp1238 = icmp slt i64 %194, 0
  br i1 %cmp1238, label %cond.true.1240, label %cond.false.1263

cond.true.1240:                                   ; preds = %cond.true.1237
  %195 = load i64, i64* %nr_bad, align 8
  %196 = load i64, i64* %nr_bad, align 8
  %add1241 = add nsw i64 0, %196
  %mul1242 = mul nsw i64 0, %add1241
  %sub1243 = sub nsw i64 %mul1242, 1
  %cmp1244 = icmp slt i64 %sub1243, 0
  br i1 %cmp1244, label %cond.true.1246, label %cond.false.1254

cond.true.1246:                                   ; preds = %cond.true.1240
  %197 = load i64, i64* %nr_bad, align 8
  %add1247 = add nsw i64 0, %197
  %mul1248 = mul nsw i64 0, %add1247
  %add1249 = add nsw i64 %mul1248, 1
  %shl1250 = shl i64 %add1249, 62
  %sub1251 = sub nsw i64 %shl1250, 1
  %mul1252 = mul nsw i64 %sub1251, 2
  %add1253 = add nsw i64 %mul1252, 1
  br label %cond.end.1258

cond.false.1254:                                  ; preds = %cond.true.1240
  %198 = load i64, i64* %nr_bad, align 8
  %add1255 = add nsw i64 0, %198
  %mul1256 = mul nsw i64 0, %add1255
  %sub1257 = sub nsw i64 %mul1256, 1
  br label %cond.end.1258

cond.end.1258:                                    ; preds = %cond.false.1254, %cond.true.1246
  %cond1259 = phi i64 [ %add1253, %cond.true.1246 ], [ %sub1257, %cond.false.1254 ]
  %div1260 = sdiv i64 %cond1259, 4
  %cmp1261 = icmp slt i64 %195, %div1260
  br i1 %cmp1261, label %cond.true.1371, label %lor.lhs.false.1357

cond.false.1263:                                  ; preds = %cond.true.1237
  br i1 false, label %cond.true.1264, label %cond.false.1265

cond.true.1264:                                   ; preds = %cond.false.1263
  br i1 false, label %cond.true.1371, label %lor.lhs.false.1357

cond.false.1265:                                  ; preds = %cond.false.1263
  %199 = load i64, i64* %nr_bad, align 8
  %add1266 = add nsw i64 0, %199
  %mul1267 = mul nsw i64 0, %add1266
  %sub1268 = sub nsw i64 %mul1267, 1
  %cmp1269 = icmp slt i64 %sub1268, 0
  br i1 %cmp1269, label %cond.true.1271, label %cond.false.1288

cond.true.1271:                                   ; preds = %cond.false.1265
  %200 = load i64, i64* %nr_bad, align 8
  %add1272 = add nsw i64 0, %200
  %mul1273 = mul nsw i64 0, %add1272
  %add1274 = add nsw i64 %mul1273, 0
  %neg1275 = xor i64 %add1274, -1
  %cmp1276 = icmp eq i64 %neg1275, -1
  %conv1277 = zext i1 %cmp1276 to i32
  %sub1278 = sub nsw i32 0, %conv1277
  %conv1279 = sext i32 %sub1278 to i64
  %201 = load i64, i64* %nr_bad, align 8
  %add1280 = add nsw i64 0, %201
  %mul1281 = mul nsw i64 0, %add1280
  %add1282 = add nsw i64 %mul1281, 1
  %shl1283 = shl i64 %add1282, 62
  %sub1284 = sub nsw i64 %shl1283, 1
  %mul1285 = mul nsw i64 %sub1284, 2
  %add1286 = add nsw i64 %mul1285, 1
  %sub1287 = sub nsw i64 %conv1279, %add1286
  br label %cond.end.1292

cond.false.1288:                                  ; preds = %cond.false.1265
  %202 = load i64, i64* %nr_bad, align 8
  %add1289 = add nsw i64 0, %202
  %mul1290 = mul nsw i64 0, %add1289
  %add1291 = add nsw i64 %mul1290, 0
  br label %cond.end.1292

cond.end.1292:                                    ; preds = %cond.false.1288, %cond.true.1271
  %cond1293 = phi i64 [ %sub1287, %cond.true.1271 ], [ %add1291, %cond.false.1288 ]
  %div1294 = sdiv i64 %cond1293, 4
  %203 = load i64, i64* %nr_bad, align 8
  %cmp1295 = icmp slt i64 %div1294, %203
  br i1 %cmp1295, label %cond.true.1371, label %lor.lhs.false.1357

cond.false.1297:                                  ; preds = %lor.lhs.false.1236
  br i1 false, label %cond.true.1298, label %cond.false.1299

cond.true.1298:                                   ; preds = %cond.false.1297
  br i1 false, label %cond.true.1371, label %lor.lhs.false.1357

cond.false.1299:                                  ; preds = %cond.false.1297
  %204 = load i64, i64* %nr_bad, align 8
  %cmp1300 = icmp slt i64 %204, 0
  br i1 %cmp1300, label %cond.true.1302, label %cond.false.1334

cond.true.1302:                                   ; preds = %cond.false.1299
  %205 = load i64, i64* %nr_bad, align 8
  %206 = load i64, i64* %nr_bad, align 8
  %add1303 = add nsw i64 0, %206
  %mul1304 = mul nsw i64 0, %add1303
  %sub1305 = sub nsw i64 %mul1304, 1
  %cmp1306 = icmp slt i64 %sub1305, 0
  br i1 %cmp1306, label %cond.true.1308, label %cond.false.1325

cond.true.1308:                                   ; preds = %cond.true.1302
  %207 = load i64, i64* %nr_bad, align 8
  %add1309 = add nsw i64 0, %207
  %mul1310 = mul nsw i64 0, %add1309
  %add1311 = add nsw i64 %mul1310, 0
  %neg1312 = xor i64 %add1311, -1
  %cmp1313 = icmp eq i64 %neg1312, -1
  %conv1314 = zext i1 %cmp1313 to i32
  %sub1315 = sub nsw i32 0, %conv1314
  %conv1316 = sext i32 %sub1315 to i64
  %208 = load i64, i64* %nr_bad, align 8
  %add1317 = add nsw i64 0, %208
  %mul1318 = mul nsw i64 0, %add1317
  %add1319 = add nsw i64 %mul1318, 1
  %shl1320 = shl i64 %add1319, 62
  %sub1321 = sub nsw i64 %shl1320, 1
  %mul1322 = mul nsw i64 %sub1321, 2
  %add1323 = add nsw i64 %mul1322, 1
  %sub1324 = sub nsw i64 %conv1316, %add1323
  br label %cond.end.1329

cond.false.1325:                                  ; preds = %cond.true.1302
  %209 = load i64, i64* %nr_bad, align 8
  %add1326 = add nsw i64 0, %209
  %mul1327 = mul nsw i64 0, %add1326
  %add1328 = add nsw i64 %mul1327, 0
  br label %cond.end.1329

cond.end.1329:                                    ; preds = %cond.false.1325, %cond.true.1308
  %cond1330 = phi i64 [ %sub1324, %cond.true.1308 ], [ %add1328, %cond.false.1325 ]
  %div1331 = sdiv i64 %cond1330, 4
  %cmp1332 = icmp slt i64 %205, %div1331
  br i1 %cmp1332, label %cond.true.1371, label %lor.lhs.false.1357

cond.false.1334:                                  ; preds = %cond.false.1299
  %210 = load i64, i64* %nr_bad, align 8
  %add1335 = add nsw i64 0, %210
  %mul1336 = mul nsw i64 0, %add1335
  %sub1337 = sub nsw i64 %mul1336, 1
  %cmp1338 = icmp slt i64 %sub1337, 0
  br i1 %cmp1338, label %cond.true.1340, label %cond.false.1348

cond.true.1340:                                   ; preds = %cond.false.1334
  %211 = load i64, i64* %nr_bad, align 8
  %add1341 = add nsw i64 0, %211
  %mul1342 = mul nsw i64 0, %add1341
  %add1343 = add nsw i64 %mul1342, 1
  %shl1344 = shl i64 %add1343, 62
  %sub1345 = sub nsw i64 %shl1344, 1
  %mul1346 = mul nsw i64 %sub1345, 2
  %add1347 = add nsw i64 %mul1346, 1
  br label %cond.end.1352

cond.false.1348:                                  ; preds = %cond.false.1334
  %212 = load i64, i64* %nr_bad, align 8
  %add1349 = add nsw i64 0, %212
  %mul1350 = mul nsw i64 0, %add1349
  %sub1351 = sub nsw i64 %mul1350, 1
  br label %cond.end.1352

cond.end.1352:                                    ; preds = %cond.false.1348, %cond.true.1340
  %cond1353 = phi i64 [ %add1347, %cond.true.1340 ], [ %sub1351, %cond.false.1348 ]
  %div1354 = sdiv i64 %cond1353, 4
  %213 = load i64, i64* %nr_bad, align 8
  %cmp1355 = icmp slt i64 %div1354, %213
  br i1 %cmp1355, label %cond.true.1371, label %lor.lhs.false.1357

lor.lhs.false.1357:                               ; preds = %cond.end.1352, %cond.end.1329, %cond.true.1298, %cond.end.1292, %cond.true.1264, %cond.end.1258
  %214 = load i64, i64* %nr_bad, align 8
  %mul1358 = mul nsw i64 %214, 4
  %mul1359 = mul nsw i64 0, %mul1358
  %sub1360 = sub nsw i64 %mul1359, 1
  %cmp1361 = icmp slt i64 %sub1360, 0
  br i1 %cmp1361, label %land.lhs.true.1363, label %lor.lhs.false.1367

land.lhs.true.1363:                               ; preds = %lor.lhs.false.1357
  %215 = load i64, i64* %nr_bad, align 8
  %mul1364 = mul nsw i64 %215, 4
  %cmp1365 = icmp slt i64 %mul1364, -2147483648
  br i1 %cmp1365, label %cond.true.1371, label %lor.lhs.false.1367

lor.lhs.false.1367:                               ; preds = %land.lhs.true.1363, %lor.lhs.false.1357
  %216 = load i64, i64* %nr_bad, align 8
  %mul1368 = mul nsw i64 %216, 4
  %cmp1369 = icmp slt i64 2147483647, %mul1368
  br i1 %cmp1369, label %cond.true.1371, label %cond.false.1387

cond.true.1371:                                   ; preds = %lor.lhs.false.1367, %land.lhs.true.1363, %cond.end.1352, %cond.end.1329, %cond.true.1298, %cond.end.1292, %cond.true.1264, %cond.end.1258, %land.lhs.true.1233
  %217 = load i64, i64* %nr_bad, align 8
  %conv1372 = trunc i64 %217 to i32
  %mul1373 = mul i32 %conv1372, 4
  %cmp1374 = icmp ule i32 %mul1373, 2147483647
  br i1 %cmp1374, label %cond.true.1376, label %cond.false.1379

cond.true.1376:                                   ; preds = %cond.true.1371
  %218 = load i64, i64* %nr_bad, align 8
  %conv1377 = trunc i64 %218 to i32
  %mul1378 = mul i32 %conv1377, 4
  br label %cond.end.1384

cond.false.1379:                                  ; preds = %cond.true.1371
  %219 = load i64, i64* %nr_bad, align 8
  %conv1380 = trunc i64 %219 to i32
  %mul1381 = mul i32 %conv1380, 4
  %sub1382 = sub i32 %mul1381, -2147483648
  %add1383 = add nsw i32 %sub1382, -2147483648
  br label %cond.end.1384

cond.end.1384:                                    ; preds = %cond.false.1379, %cond.true.1376
  %cond1385 = phi i32 [ %mul1378, %cond.true.1376 ], [ %add1383, %cond.false.1379 ]
  %conv1386 = sext i32 %cond1385 to i64
  store i64 %conv1386, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1387:                                  ; preds = %lor.lhs.false.1367
  %220 = load i64, i64* %nr_bad, align 8
  %conv1388 = trunc i64 %220 to i32
  %mul1389 = mul i32 %conv1388, 4
  %cmp1390 = icmp ule i32 %mul1389, 2147483647
  br i1 %cmp1390, label %cond.true.1392, label %cond.false.1395

cond.true.1392:                                   ; preds = %cond.false.1387
  %221 = load i64, i64* %nr_bad, align 8
  %conv1393 = trunc i64 %221 to i32
  %mul1394 = mul i32 %conv1393, 4
  br label %cond.end.1400

cond.false.1395:                                  ; preds = %cond.false.1387
  %222 = load i64, i64* %nr_bad, align 8
  %conv1396 = trunc i64 %222 to i32
  %mul1397 = mul i32 %conv1396, 4
  %sub1398 = sub i32 %mul1397, -2147483648
  %add1399 = add nsw i32 %sub1398, -2147483648
  br label %cond.end.1400

cond.end.1400:                                    ; preds = %cond.false.1395, %cond.true.1392
  %cond1401 = phi i32 [ %mul1394, %cond.true.1392 ], [ %add1399, %cond.false.1395 ]
  %conv1402 = sext i32 %cond1401 to i64
  store i64 %conv1402, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1403:                                  ; preds = %cond.false.974
  br i1 true, label %cond.true.1404, label %cond.false.1791

cond.true.1404:                                   ; preds = %cond.false.1403
  br i1 false, label %cond.true.1405, label %cond.false.1598

cond.true.1405:                                   ; preds = %cond.true.1404
  %223 = load i64, i64* %nr_bad, align 8
  %add1406 = add nsw i64 0, %223
  %mul1407 = mul nsw i64 0, %add1406
  %sub1408 = sub nsw i64 %mul1407, 1
  %cmp1409 = icmp slt i64 %sub1408, 0
  br i1 %cmp1409, label %cond.true.1411, label %cond.false.1428

cond.true.1411:                                   ; preds = %cond.true.1405
  %224 = load i64, i64* %nr_bad, align 8
  %add1412 = add nsw i64 0, %224
  %mul1413 = mul nsw i64 0, %add1412
  %add1414 = add nsw i64 %mul1413, 0
  %neg1415 = xor i64 %add1414, -1
  %cmp1416 = icmp eq i64 %neg1415, -1
  %conv1417 = zext i1 %cmp1416 to i32
  %sub1418 = sub nsw i32 0, %conv1417
  %conv1419 = sext i32 %sub1418 to i64
  %225 = load i64, i64* %nr_bad, align 8
  %add1420 = add nsw i64 0, %225
  %mul1421 = mul nsw i64 0, %add1420
  %add1422 = add nsw i64 %mul1421, 1
  %shl1423 = shl i64 %add1422, 62
  %sub1424 = sub nsw i64 %shl1423, 1
  %mul1425 = mul nsw i64 %sub1424, 2
  %add1426 = add nsw i64 %mul1425, 1
  %sub1427 = sub nsw i64 %conv1419, %add1426
  br label %cond.end.1432

cond.false.1428:                                  ; preds = %cond.true.1405
  %226 = load i64, i64* %nr_bad, align 8
  %add1429 = add nsw i64 0, %226
  %mul1430 = mul nsw i64 0, %add1429
  %add1431 = add nsw i64 %mul1430, 0
  br label %cond.end.1432

cond.end.1432:                                    ; preds = %cond.false.1428, %cond.true.1411
  %cond1433 = phi i64 [ %sub1427, %cond.true.1411 ], [ %add1431, %cond.false.1428 ]
  %cmp1434 = icmp eq i64 %cond1433, 0
  br i1 %cmp1434, label %land.lhs.true.1436, label %lor.lhs.false.1439

land.lhs.true.1436:                               ; preds = %cond.end.1432
  %227 = load i64, i64* %nr_bad, align 8
  %cmp1437 = icmp slt i64 %227, 0
  br i1 %cmp1437, label %cond.true.1574, label %lor.lhs.false.1439

lor.lhs.false.1439:                               ; preds = %land.lhs.true.1436, %cond.end.1432
  br i1 false, label %cond.true.1440, label %cond.false.1500

cond.true.1440:                                   ; preds = %lor.lhs.false.1439
  %228 = load i64, i64* %nr_bad, align 8
  %cmp1441 = icmp slt i64 %228, 0
  br i1 %cmp1441, label %cond.true.1443, label %cond.false.1466

cond.true.1443:                                   ; preds = %cond.true.1440
  %229 = load i64, i64* %nr_bad, align 8
  %230 = load i64, i64* %nr_bad, align 8
  %add1444 = add nsw i64 0, %230
  %mul1445 = mul nsw i64 0, %add1444
  %sub1446 = sub nsw i64 %mul1445, 1
  %cmp1447 = icmp slt i64 %sub1446, 0
  br i1 %cmp1447, label %cond.true.1449, label %cond.false.1457

cond.true.1449:                                   ; preds = %cond.true.1443
  %231 = load i64, i64* %nr_bad, align 8
  %add1450 = add nsw i64 0, %231
  %mul1451 = mul nsw i64 0, %add1450
  %add1452 = add nsw i64 %mul1451, 1
  %shl1453 = shl i64 %add1452, 62
  %sub1454 = sub nsw i64 %shl1453, 1
  %mul1455 = mul nsw i64 %sub1454, 2
  %add1456 = add nsw i64 %mul1455, 1
  br label %cond.end.1461

cond.false.1457:                                  ; preds = %cond.true.1443
  %232 = load i64, i64* %nr_bad, align 8
  %add1458 = add nsw i64 0, %232
  %mul1459 = mul nsw i64 0, %add1458
  %sub1460 = sub nsw i64 %mul1459, 1
  br label %cond.end.1461

cond.end.1461:                                    ; preds = %cond.false.1457, %cond.true.1449
  %cond1462 = phi i64 [ %add1456, %cond.true.1449 ], [ %sub1460, %cond.false.1457 ]
  %div1463 = sdiv i64 %cond1462, 4
  %cmp1464 = icmp slt i64 %229, %div1463
  br i1 %cmp1464, label %cond.true.1574, label %lor.lhs.false.1560

cond.false.1466:                                  ; preds = %cond.true.1440
  br i1 false, label %cond.true.1467, label %cond.false.1468

cond.true.1467:                                   ; preds = %cond.false.1466
  br i1 false, label %cond.true.1574, label %lor.lhs.false.1560

cond.false.1468:                                  ; preds = %cond.false.1466
  %233 = load i64, i64* %nr_bad, align 8
  %add1469 = add nsw i64 0, %233
  %mul1470 = mul nsw i64 0, %add1469
  %sub1471 = sub nsw i64 %mul1470, 1
  %cmp1472 = icmp slt i64 %sub1471, 0
  br i1 %cmp1472, label %cond.true.1474, label %cond.false.1491

cond.true.1474:                                   ; preds = %cond.false.1468
  %234 = load i64, i64* %nr_bad, align 8
  %add1475 = add nsw i64 0, %234
  %mul1476 = mul nsw i64 0, %add1475
  %add1477 = add nsw i64 %mul1476, 0
  %neg1478 = xor i64 %add1477, -1
  %cmp1479 = icmp eq i64 %neg1478, -1
  %conv1480 = zext i1 %cmp1479 to i32
  %sub1481 = sub nsw i32 0, %conv1480
  %conv1482 = sext i32 %sub1481 to i64
  %235 = load i64, i64* %nr_bad, align 8
  %add1483 = add nsw i64 0, %235
  %mul1484 = mul nsw i64 0, %add1483
  %add1485 = add nsw i64 %mul1484, 1
  %shl1486 = shl i64 %add1485, 62
  %sub1487 = sub nsw i64 %shl1486, 1
  %mul1488 = mul nsw i64 %sub1487, 2
  %add1489 = add nsw i64 %mul1488, 1
  %sub1490 = sub nsw i64 %conv1482, %add1489
  br label %cond.end.1495

cond.false.1491:                                  ; preds = %cond.false.1468
  %236 = load i64, i64* %nr_bad, align 8
  %add1492 = add nsw i64 0, %236
  %mul1493 = mul nsw i64 0, %add1492
  %add1494 = add nsw i64 %mul1493, 0
  br label %cond.end.1495

cond.end.1495:                                    ; preds = %cond.false.1491, %cond.true.1474
  %cond1496 = phi i64 [ %sub1490, %cond.true.1474 ], [ %add1494, %cond.false.1491 ]
  %div1497 = sdiv i64 %cond1496, 4
  %237 = load i64, i64* %nr_bad, align 8
  %cmp1498 = icmp slt i64 %div1497, %237
  br i1 %cmp1498, label %cond.true.1574, label %lor.lhs.false.1560

cond.false.1500:                                  ; preds = %lor.lhs.false.1439
  br i1 false, label %cond.true.1501, label %cond.false.1502

cond.true.1501:                                   ; preds = %cond.false.1500
  br i1 false, label %cond.true.1574, label %lor.lhs.false.1560

cond.false.1502:                                  ; preds = %cond.false.1500
  %238 = load i64, i64* %nr_bad, align 8
  %cmp1503 = icmp slt i64 %238, 0
  br i1 %cmp1503, label %cond.true.1505, label %cond.false.1537

cond.true.1505:                                   ; preds = %cond.false.1502
  %239 = load i64, i64* %nr_bad, align 8
  %240 = load i64, i64* %nr_bad, align 8
  %add1506 = add nsw i64 0, %240
  %mul1507 = mul nsw i64 0, %add1506
  %sub1508 = sub nsw i64 %mul1507, 1
  %cmp1509 = icmp slt i64 %sub1508, 0
  br i1 %cmp1509, label %cond.true.1511, label %cond.false.1528

cond.true.1511:                                   ; preds = %cond.true.1505
  %241 = load i64, i64* %nr_bad, align 8
  %add1512 = add nsw i64 0, %241
  %mul1513 = mul nsw i64 0, %add1512
  %add1514 = add nsw i64 %mul1513, 0
  %neg1515 = xor i64 %add1514, -1
  %cmp1516 = icmp eq i64 %neg1515, -1
  %conv1517 = zext i1 %cmp1516 to i32
  %sub1518 = sub nsw i32 0, %conv1517
  %conv1519 = sext i32 %sub1518 to i64
  %242 = load i64, i64* %nr_bad, align 8
  %add1520 = add nsw i64 0, %242
  %mul1521 = mul nsw i64 0, %add1520
  %add1522 = add nsw i64 %mul1521, 1
  %shl1523 = shl i64 %add1522, 62
  %sub1524 = sub nsw i64 %shl1523, 1
  %mul1525 = mul nsw i64 %sub1524, 2
  %add1526 = add nsw i64 %mul1525, 1
  %sub1527 = sub nsw i64 %conv1519, %add1526
  br label %cond.end.1532

cond.false.1528:                                  ; preds = %cond.true.1505
  %243 = load i64, i64* %nr_bad, align 8
  %add1529 = add nsw i64 0, %243
  %mul1530 = mul nsw i64 0, %add1529
  %add1531 = add nsw i64 %mul1530, 0
  br label %cond.end.1532

cond.end.1532:                                    ; preds = %cond.false.1528, %cond.true.1511
  %cond1533 = phi i64 [ %sub1527, %cond.true.1511 ], [ %add1531, %cond.false.1528 ]
  %div1534 = sdiv i64 %cond1533, 4
  %cmp1535 = icmp slt i64 %239, %div1534
  br i1 %cmp1535, label %cond.true.1574, label %lor.lhs.false.1560

cond.false.1537:                                  ; preds = %cond.false.1502
  %244 = load i64, i64* %nr_bad, align 8
  %add1538 = add nsw i64 0, %244
  %mul1539 = mul nsw i64 0, %add1538
  %sub1540 = sub nsw i64 %mul1539, 1
  %cmp1541 = icmp slt i64 %sub1540, 0
  br i1 %cmp1541, label %cond.true.1543, label %cond.false.1551

cond.true.1543:                                   ; preds = %cond.false.1537
  %245 = load i64, i64* %nr_bad, align 8
  %add1544 = add nsw i64 0, %245
  %mul1545 = mul nsw i64 0, %add1544
  %add1546 = add nsw i64 %mul1545, 1
  %shl1547 = shl i64 %add1546, 62
  %sub1548 = sub nsw i64 %shl1547, 1
  %mul1549 = mul nsw i64 %sub1548, 2
  %add1550 = add nsw i64 %mul1549, 1
  br label %cond.end.1555

cond.false.1551:                                  ; preds = %cond.false.1537
  %246 = load i64, i64* %nr_bad, align 8
  %add1552 = add nsw i64 0, %246
  %mul1553 = mul nsw i64 0, %add1552
  %sub1554 = sub nsw i64 %mul1553, 1
  br label %cond.end.1555

cond.end.1555:                                    ; preds = %cond.false.1551, %cond.true.1543
  %cond1556 = phi i64 [ %add1550, %cond.true.1543 ], [ %sub1554, %cond.false.1551 ]
  %div1557 = sdiv i64 %cond1556, 4
  %247 = load i64, i64* %nr_bad, align 8
  %cmp1558 = icmp slt i64 %div1557, %247
  br i1 %cmp1558, label %cond.true.1574, label %lor.lhs.false.1560

lor.lhs.false.1560:                               ; preds = %cond.end.1555, %cond.end.1532, %cond.true.1501, %cond.end.1495, %cond.true.1467, %cond.end.1461
  %248 = load i64, i64* %nr_bad, align 8
  %mul1561 = mul nsw i64 %248, 4
  %mul1562 = mul nsw i64 0, %mul1561
  %sub1563 = sub nsw i64 %mul1562, 1
  %cmp1564 = icmp slt i64 %sub1563, 0
  br i1 %cmp1564, label %land.lhs.true.1566, label %lor.lhs.false.1570

land.lhs.true.1566:                               ; preds = %lor.lhs.false.1560
  %249 = load i64, i64* %nr_bad, align 8
  %mul1567 = mul nsw i64 %249, 4
  %cmp1568 = icmp slt i64 %mul1567, -9223372036854775808
  br i1 %cmp1568, label %cond.true.1574, label %lor.lhs.false.1570

lor.lhs.false.1570:                               ; preds = %land.lhs.true.1566, %lor.lhs.false.1560
  %250 = load i64, i64* %nr_bad, align 8
  %mul1571 = mul nsw i64 %250, 4
  %cmp1572 = icmp slt i64 9223372036854775807, %mul1571
  br i1 %cmp1572, label %cond.true.1574, label %cond.false.1586

cond.true.1574:                                   ; preds = %lor.lhs.false.1570, %land.lhs.true.1566, %cond.end.1555, %cond.end.1532, %cond.true.1501, %cond.end.1495, %cond.true.1467, %cond.end.1461, %land.lhs.true.1436
  %251 = load i64, i64* %nr_bad, align 8
  %mul1575 = mul i64 %251, 4
  %cmp1576 = icmp ule i64 %mul1575, 9223372036854775807
  br i1 %cmp1576, label %cond.true.1578, label %cond.false.1580

cond.true.1578:                                   ; preds = %cond.true.1574
  %252 = load i64, i64* %nr_bad, align 8
  %mul1579 = mul i64 %252, 4
  br label %cond.end.1584

cond.false.1580:                                  ; preds = %cond.true.1574
  %253 = load i64, i64* %nr_bad, align 8
  %mul1581 = mul i64 %253, 4
  %sub1582 = sub i64 %mul1581, -9223372036854775808
  %add1583 = add nsw i64 %sub1582, -9223372036854775808
  br label %cond.end.1584

cond.end.1584:                                    ; preds = %cond.false.1580, %cond.true.1578
  %cond1585 = phi i64 [ %mul1579, %cond.true.1578 ], [ %add1583, %cond.false.1580 ]
  store i64 %cond1585, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1586:                                  ; preds = %lor.lhs.false.1570
  %254 = load i64, i64* %nr_bad, align 8
  %mul1587 = mul i64 %254, 4
  %cmp1588 = icmp ule i64 %mul1587, 9223372036854775807
  br i1 %cmp1588, label %cond.true.1590, label %cond.false.1592

cond.true.1590:                                   ; preds = %cond.false.1586
  %255 = load i64, i64* %nr_bad, align 8
  %mul1591 = mul i64 %255, 4
  br label %cond.end.1596

cond.false.1592:                                  ; preds = %cond.false.1586
  %256 = load i64, i64* %nr_bad, align 8
  %mul1593 = mul i64 %256, 4
  %sub1594 = sub i64 %mul1593, -9223372036854775808
  %add1595 = add nsw i64 %sub1594, -9223372036854775808
  br label %cond.end.1596

cond.end.1596:                                    ; preds = %cond.false.1592, %cond.true.1590
  %cond1597 = phi i64 [ %mul1591, %cond.true.1590 ], [ %add1595, %cond.false.1592 ]
  store i64 %cond1597, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1598:                                  ; preds = %cond.true.1404
  %257 = load i64, i64* %nr_bad, align 8
  %add1599 = add nsw i64 0, %257
  %mul1600 = mul nsw i64 0, %add1599
  %sub1601 = sub nsw i64 %mul1600, 1
  %cmp1602 = icmp slt i64 %sub1601, 0
  br i1 %cmp1602, label %cond.true.1604, label %cond.false.1621

cond.true.1604:                                   ; preds = %cond.false.1598
  %258 = load i64, i64* %nr_bad, align 8
  %add1605 = add nsw i64 0, %258
  %mul1606 = mul nsw i64 0, %add1605
  %add1607 = add nsw i64 %mul1606, 0
  %neg1608 = xor i64 %add1607, -1
  %cmp1609 = icmp eq i64 %neg1608, -1
  %conv1610 = zext i1 %cmp1609 to i32
  %sub1611 = sub nsw i32 0, %conv1610
  %conv1612 = sext i32 %sub1611 to i64
  %259 = load i64, i64* %nr_bad, align 8
  %add1613 = add nsw i64 0, %259
  %mul1614 = mul nsw i64 0, %add1613
  %add1615 = add nsw i64 %mul1614, 1
  %shl1616 = shl i64 %add1615, 62
  %sub1617 = sub nsw i64 %shl1616, 1
  %mul1618 = mul nsw i64 %sub1617, 2
  %add1619 = add nsw i64 %mul1618, 1
  %sub1620 = sub nsw i64 %conv1612, %add1619
  br label %cond.end.1625

cond.false.1621:                                  ; preds = %cond.false.1598
  %260 = load i64, i64* %nr_bad, align 8
  %add1622 = add nsw i64 0, %260
  %mul1623 = mul nsw i64 0, %add1622
  %add1624 = add nsw i64 %mul1623, 0
  br label %cond.end.1625

cond.end.1625:                                    ; preds = %cond.false.1621, %cond.true.1604
  %cond1626 = phi i64 [ %sub1620, %cond.true.1604 ], [ %add1624, %cond.false.1621 ]
  %cmp1627 = icmp eq i64 %cond1626, 0
  br i1 %cmp1627, label %land.lhs.true.1629, label %lor.lhs.false.1632

land.lhs.true.1629:                               ; preds = %cond.end.1625
  %261 = load i64, i64* %nr_bad, align 8
  %cmp1630 = icmp slt i64 %261, 0
  br i1 %cmp1630, label %cond.true.1767, label %lor.lhs.false.1632

lor.lhs.false.1632:                               ; preds = %land.lhs.true.1629, %cond.end.1625
  br i1 false, label %cond.true.1633, label %cond.false.1693

cond.true.1633:                                   ; preds = %lor.lhs.false.1632
  %262 = load i64, i64* %nr_bad, align 8
  %cmp1634 = icmp slt i64 %262, 0
  br i1 %cmp1634, label %cond.true.1636, label %cond.false.1659

cond.true.1636:                                   ; preds = %cond.true.1633
  %263 = load i64, i64* %nr_bad, align 8
  %264 = load i64, i64* %nr_bad, align 8
  %add1637 = add nsw i64 0, %264
  %mul1638 = mul nsw i64 0, %add1637
  %sub1639 = sub nsw i64 %mul1638, 1
  %cmp1640 = icmp slt i64 %sub1639, 0
  br i1 %cmp1640, label %cond.true.1642, label %cond.false.1650

cond.true.1642:                                   ; preds = %cond.true.1636
  %265 = load i64, i64* %nr_bad, align 8
  %add1643 = add nsw i64 0, %265
  %mul1644 = mul nsw i64 0, %add1643
  %add1645 = add nsw i64 %mul1644, 1
  %shl1646 = shl i64 %add1645, 62
  %sub1647 = sub nsw i64 %shl1646, 1
  %mul1648 = mul nsw i64 %sub1647, 2
  %add1649 = add nsw i64 %mul1648, 1
  br label %cond.end.1654

cond.false.1650:                                  ; preds = %cond.true.1636
  %266 = load i64, i64* %nr_bad, align 8
  %add1651 = add nsw i64 0, %266
  %mul1652 = mul nsw i64 0, %add1651
  %sub1653 = sub nsw i64 %mul1652, 1
  br label %cond.end.1654

cond.end.1654:                                    ; preds = %cond.false.1650, %cond.true.1642
  %cond1655 = phi i64 [ %add1649, %cond.true.1642 ], [ %sub1653, %cond.false.1650 ]
  %div1656 = sdiv i64 %cond1655, 4
  %cmp1657 = icmp slt i64 %263, %div1656
  br i1 %cmp1657, label %cond.true.1767, label %lor.lhs.false.1753

cond.false.1659:                                  ; preds = %cond.true.1633
  br i1 false, label %cond.true.1660, label %cond.false.1661

cond.true.1660:                                   ; preds = %cond.false.1659
  br i1 false, label %cond.true.1767, label %lor.lhs.false.1753

cond.false.1661:                                  ; preds = %cond.false.1659
  %267 = load i64, i64* %nr_bad, align 8
  %add1662 = add nsw i64 0, %267
  %mul1663 = mul nsw i64 0, %add1662
  %sub1664 = sub nsw i64 %mul1663, 1
  %cmp1665 = icmp slt i64 %sub1664, 0
  br i1 %cmp1665, label %cond.true.1667, label %cond.false.1684

cond.true.1667:                                   ; preds = %cond.false.1661
  %268 = load i64, i64* %nr_bad, align 8
  %add1668 = add nsw i64 0, %268
  %mul1669 = mul nsw i64 0, %add1668
  %add1670 = add nsw i64 %mul1669, 0
  %neg1671 = xor i64 %add1670, -1
  %cmp1672 = icmp eq i64 %neg1671, -1
  %conv1673 = zext i1 %cmp1672 to i32
  %sub1674 = sub nsw i32 0, %conv1673
  %conv1675 = sext i32 %sub1674 to i64
  %269 = load i64, i64* %nr_bad, align 8
  %add1676 = add nsw i64 0, %269
  %mul1677 = mul nsw i64 0, %add1676
  %add1678 = add nsw i64 %mul1677, 1
  %shl1679 = shl i64 %add1678, 62
  %sub1680 = sub nsw i64 %shl1679, 1
  %mul1681 = mul nsw i64 %sub1680, 2
  %add1682 = add nsw i64 %mul1681, 1
  %sub1683 = sub nsw i64 %conv1675, %add1682
  br label %cond.end.1688

cond.false.1684:                                  ; preds = %cond.false.1661
  %270 = load i64, i64* %nr_bad, align 8
  %add1685 = add nsw i64 0, %270
  %mul1686 = mul nsw i64 0, %add1685
  %add1687 = add nsw i64 %mul1686, 0
  br label %cond.end.1688

cond.end.1688:                                    ; preds = %cond.false.1684, %cond.true.1667
  %cond1689 = phi i64 [ %sub1683, %cond.true.1667 ], [ %add1687, %cond.false.1684 ]
  %div1690 = sdiv i64 %cond1689, 4
  %271 = load i64, i64* %nr_bad, align 8
  %cmp1691 = icmp slt i64 %div1690, %271
  br i1 %cmp1691, label %cond.true.1767, label %lor.lhs.false.1753

cond.false.1693:                                  ; preds = %lor.lhs.false.1632
  br i1 false, label %cond.true.1694, label %cond.false.1695

cond.true.1694:                                   ; preds = %cond.false.1693
  br i1 false, label %cond.true.1767, label %lor.lhs.false.1753

cond.false.1695:                                  ; preds = %cond.false.1693
  %272 = load i64, i64* %nr_bad, align 8
  %cmp1696 = icmp slt i64 %272, 0
  br i1 %cmp1696, label %cond.true.1698, label %cond.false.1730

cond.true.1698:                                   ; preds = %cond.false.1695
  %273 = load i64, i64* %nr_bad, align 8
  %274 = load i64, i64* %nr_bad, align 8
  %add1699 = add nsw i64 0, %274
  %mul1700 = mul nsw i64 0, %add1699
  %sub1701 = sub nsw i64 %mul1700, 1
  %cmp1702 = icmp slt i64 %sub1701, 0
  br i1 %cmp1702, label %cond.true.1704, label %cond.false.1721

cond.true.1704:                                   ; preds = %cond.true.1698
  %275 = load i64, i64* %nr_bad, align 8
  %add1705 = add nsw i64 0, %275
  %mul1706 = mul nsw i64 0, %add1705
  %add1707 = add nsw i64 %mul1706, 0
  %neg1708 = xor i64 %add1707, -1
  %cmp1709 = icmp eq i64 %neg1708, -1
  %conv1710 = zext i1 %cmp1709 to i32
  %sub1711 = sub nsw i32 0, %conv1710
  %conv1712 = sext i32 %sub1711 to i64
  %276 = load i64, i64* %nr_bad, align 8
  %add1713 = add nsw i64 0, %276
  %mul1714 = mul nsw i64 0, %add1713
  %add1715 = add nsw i64 %mul1714, 1
  %shl1716 = shl i64 %add1715, 62
  %sub1717 = sub nsw i64 %shl1716, 1
  %mul1718 = mul nsw i64 %sub1717, 2
  %add1719 = add nsw i64 %mul1718, 1
  %sub1720 = sub nsw i64 %conv1712, %add1719
  br label %cond.end.1725

cond.false.1721:                                  ; preds = %cond.true.1698
  %277 = load i64, i64* %nr_bad, align 8
  %add1722 = add nsw i64 0, %277
  %mul1723 = mul nsw i64 0, %add1722
  %add1724 = add nsw i64 %mul1723, 0
  br label %cond.end.1725

cond.end.1725:                                    ; preds = %cond.false.1721, %cond.true.1704
  %cond1726 = phi i64 [ %sub1720, %cond.true.1704 ], [ %add1724, %cond.false.1721 ]
  %div1727 = sdiv i64 %cond1726, 4
  %cmp1728 = icmp slt i64 %273, %div1727
  br i1 %cmp1728, label %cond.true.1767, label %lor.lhs.false.1753

cond.false.1730:                                  ; preds = %cond.false.1695
  %278 = load i64, i64* %nr_bad, align 8
  %add1731 = add nsw i64 0, %278
  %mul1732 = mul nsw i64 0, %add1731
  %sub1733 = sub nsw i64 %mul1732, 1
  %cmp1734 = icmp slt i64 %sub1733, 0
  br i1 %cmp1734, label %cond.true.1736, label %cond.false.1744

cond.true.1736:                                   ; preds = %cond.false.1730
  %279 = load i64, i64* %nr_bad, align 8
  %add1737 = add nsw i64 0, %279
  %mul1738 = mul nsw i64 0, %add1737
  %add1739 = add nsw i64 %mul1738, 1
  %shl1740 = shl i64 %add1739, 62
  %sub1741 = sub nsw i64 %shl1740, 1
  %mul1742 = mul nsw i64 %sub1741, 2
  %add1743 = add nsw i64 %mul1742, 1
  br label %cond.end.1748

cond.false.1744:                                  ; preds = %cond.false.1730
  %280 = load i64, i64* %nr_bad, align 8
  %add1745 = add nsw i64 0, %280
  %mul1746 = mul nsw i64 0, %add1745
  %sub1747 = sub nsw i64 %mul1746, 1
  br label %cond.end.1748

cond.end.1748:                                    ; preds = %cond.false.1744, %cond.true.1736
  %cond1749 = phi i64 [ %add1743, %cond.true.1736 ], [ %sub1747, %cond.false.1744 ]
  %div1750 = sdiv i64 %cond1749, 4
  %281 = load i64, i64* %nr_bad, align 8
  %cmp1751 = icmp slt i64 %div1750, %281
  br i1 %cmp1751, label %cond.true.1767, label %lor.lhs.false.1753

lor.lhs.false.1753:                               ; preds = %cond.end.1748, %cond.end.1725, %cond.true.1694, %cond.end.1688, %cond.true.1660, %cond.end.1654
  %282 = load i64, i64* %nr_bad, align 8
  %mul1754 = mul nsw i64 %282, 4
  %mul1755 = mul nsw i64 0, %mul1754
  %sub1756 = sub nsw i64 %mul1755, 1
  %cmp1757 = icmp slt i64 %sub1756, 0
  br i1 %cmp1757, label %land.lhs.true.1759, label %lor.lhs.false.1763

land.lhs.true.1759:                               ; preds = %lor.lhs.false.1753
  %283 = load i64, i64* %nr_bad, align 8
  %mul1760 = mul nsw i64 %283, 4
  %cmp1761 = icmp slt i64 %mul1760, -9223372036854775808
  br i1 %cmp1761, label %cond.true.1767, label %lor.lhs.false.1763

lor.lhs.false.1763:                               ; preds = %land.lhs.true.1759, %lor.lhs.false.1753
  %284 = load i64, i64* %nr_bad, align 8
  %mul1764 = mul nsw i64 %284, 4
  %cmp1765 = icmp slt i64 9223372036854775807, %mul1764
  br i1 %cmp1765, label %cond.true.1767, label %cond.false.1779

cond.true.1767:                                   ; preds = %lor.lhs.false.1763, %land.lhs.true.1759, %cond.end.1748, %cond.end.1725, %cond.true.1694, %cond.end.1688, %cond.true.1660, %cond.end.1654, %land.lhs.true.1629
  %285 = load i64, i64* %nr_bad, align 8
  %mul1768 = mul i64 %285, 4
  %cmp1769 = icmp ule i64 %mul1768, 9223372036854775807
  br i1 %cmp1769, label %cond.true.1771, label %cond.false.1773

cond.true.1771:                                   ; preds = %cond.true.1767
  %286 = load i64, i64* %nr_bad, align 8
  %mul1772 = mul i64 %286, 4
  br label %cond.end.1777

cond.false.1773:                                  ; preds = %cond.true.1767
  %287 = load i64, i64* %nr_bad, align 8
  %mul1774 = mul i64 %287, 4
  %sub1775 = sub i64 %mul1774, -9223372036854775808
  %add1776 = add nsw i64 %sub1775, -9223372036854775808
  br label %cond.end.1777

cond.end.1777:                                    ; preds = %cond.false.1773, %cond.true.1771
  %cond1778 = phi i64 [ %mul1772, %cond.true.1771 ], [ %add1776, %cond.false.1773 ]
  store i64 %cond1778, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1779:                                  ; preds = %lor.lhs.false.1763
  %288 = load i64, i64* %nr_bad, align 8
  %mul1780 = mul i64 %288, 4
  %cmp1781 = icmp ule i64 %mul1780, 9223372036854775807
  br i1 %cmp1781, label %cond.true.1783, label %cond.false.1785

cond.true.1783:                                   ; preds = %cond.false.1779
  %289 = load i64, i64* %nr_bad, align 8
  %mul1784 = mul i64 %289, 4
  br label %cond.end.1789

cond.false.1785:                                  ; preds = %cond.false.1779
  %290 = load i64, i64* %nr_bad, align 8
  %mul1786 = mul i64 %290, 4
  %sub1787 = sub i64 %mul1786, -9223372036854775808
  %add1788 = add nsw i64 %sub1787, -9223372036854775808
  br label %cond.end.1789

cond.end.1789:                                    ; preds = %cond.false.1785, %cond.true.1783
  %cond1790 = phi i64 [ %mul1784, %cond.true.1783 ], [ %add1788, %cond.false.1785 ]
  store i64 %cond1790, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1791:                                  ; preds = %cond.false.1403
  br i1 false, label %cond.true.1792, label %cond.false.1985

cond.true.1792:                                   ; preds = %cond.false.1791
  %291 = load i64, i64* %nr_bad, align 8
  %add1793 = add nsw i64 0, %291
  %mul1794 = mul nsw i64 0, %add1793
  %sub1795 = sub nsw i64 %mul1794, 1
  %cmp1796 = icmp slt i64 %sub1795, 0
  br i1 %cmp1796, label %cond.true.1798, label %cond.false.1815

cond.true.1798:                                   ; preds = %cond.true.1792
  %292 = load i64, i64* %nr_bad, align 8
  %add1799 = add nsw i64 0, %292
  %mul1800 = mul nsw i64 0, %add1799
  %add1801 = add nsw i64 %mul1800, 0
  %neg1802 = xor i64 %add1801, -1
  %cmp1803 = icmp eq i64 %neg1802, -1
  %conv1804 = zext i1 %cmp1803 to i32
  %sub1805 = sub nsw i32 0, %conv1804
  %conv1806 = sext i32 %sub1805 to i64
  %293 = load i64, i64* %nr_bad, align 8
  %add1807 = add nsw i64 0, %293
  %mul1808 = mul nsw i64 0, %add1807
  %add1809 = add nsw i64 %mul1808, 1
  %shl1810 = shl i64 %add1809, 62
  %sub1811 = sub nsw i64 %shl1810, 1
  %mul1812 = mul nsw i64 %sub1811, 2
  %add1813 = add nsw i64 %mul1812, 1
  %sub1814 = sub nsw i64 %conv1806, %add1813
  br label %cond.end.1819

cond.false.1815:                                  ; preds = %cond.true.1792
  %294 = load i64, i64* %nr_bad, align 8
  %add1816 = add nsw i64 0, %294
  %mul1817 = mul nsw i64 0, %add1816
  %add1818 = add nsw i64 %mul1817, 0
  br label %cond.end.1819

cond.end.1819:                                    ; preds = %cond.false.1815, %cond.true.1798
  %cond1820 = phi i64 [ %sub1814, %cond.true.1798 ], [ %add1818, %cond.false.1815 ]
  %cmp1821 = icmp eq i64 %cond1820, 0
  br i1 %cmp1821, label %land.lhs.true.1823, label %lor.lhs.false.1826

land.lhs.true.1823:                               ; preds = %cond.end.1819
  %295 = load i64, i64* %nr_bad, align 8
  %cmp1824 = icmp slt i64 %295, 0
  br i1 %cmp1824, label %cond.true.1961, label %lor.lhs.false.1826

lor.lhs.false.1826:                               ; preds = %land.lhs.true.1823, %cond.end.1819
  br i1 false, label %cond.true.1827, label %cond.false.1887

cond.true.1827:                                   ; preds = %lor.lhs.false.1826
  %296 = load i64, i64* %nr_bad, align 8
  %cmp1828 = icmp slt i64 %296, 0
  br i1 %cmp1828, label %cond.true.1830, label %cond.false.1853

cond.true.1830:                                   ; preds = %cond.true.1827
  %297 = load i64, i64* %nr_bad, align 8
  %298 = load i64, i64* %nr_bad, align 8
  %add1831 = add nsw i64 0, %298
  %mul1832 = mul nsw i64 0, %add1831
  %sub1833 = sub nsw i64 %mul1832, 1
  %cmp1834 = icmp slt i64 %sub1833, 0
  br i1 %cmp1834, label %cond.true.1836, label %cond.false.1844

cond.true.1836:                                   ; preds = %cond.true.1830
  %299 = load i64, i64* %nr_bad, align 8
  %add1837 = add nsw i64 0, %299
  %mul1838 = mul nsw i64 0, %add1837
  %add1839 = add nsw i64 %mul1838, 1
  %shl1840 = shl i64 %add1839, 62
  %sub1841 = sub nsw i64 %shl1840, 1
  %mul1842 = mul nsw i64 %sub1841, 2
  %add1843 = add nsw i64 %mul1842, 1
  br label %cond.end.1848

cond.false.1844:                                  ; preds = %cond.true.1830
  %300 = load i64, i64* %nr_bad, align 8
  %add1845 = add nsw i64 0, %300
  %mul1846 = mul nsw i64 0, %add1845
  %sub1847 = sub nsw i64 %mul1846, 1
  br label %cond.end.1848

cond.end.1848:                                    ; preds = %cond.false.1844, %cond.true.1836
  %cond1849 = phi i64 [ %add1843, %cond.true.1836 ], [ %sub1847, %cond.false.1844 ]
  %div1850 = sdiv i64 %cond1849, 4
  %cmp1851 = icmp slt i64 %297, %div1850
  br i1 %cmp1851, label %cond.true.1961, label %lor.lhs.false.1947

cond.false.1853:                                  ; preds = %cond.true.1827
  br i1 false, label %cond.true.1854, label %cond.false.1855

cond.true.1854:                                   ; preds = %cond.false.1853
  br i1 false, label %cond.true.1961, label %lor.lhs.false.1947

cond.false.1855:                                  ; preds = %cond.false.1853
  %301 = load i64, i64* %nr_bad, align 8
  %add1856 = add nsw i64 0, %301
  %mul1857 = mul nsw i64 0, %add1856
  %sub1858 = sub nsw i64 %mul1857, 1
  %cmp1859 = icmp slt i64 %sub1858, 0
  br i1 %cmp1859, label %cond.true.1861, label %cond.false.1878

cond.true.1861:                                   ; preds = %cond.false.1855
  %302 = load i64, i64* %nr_bad, align 8
  %add1862 = add nsw i64 0, %302
  %mul1863 = mul nsw i64 0, %add1862
  %add1864 = add nsw i64 %mul1863, 0
  %neg1865 = xor i64 %add1864, -1
  %cmp1866 = icmp eq i64 %neg1865, -1
  %conv1867 = zext i1 %cmp1866 to i32
  %sub1868 = sub nsw i32 0, %conv1867
  %conv1869 = sext i32 %sub1868 to i64
  %303 = load i64, i64* %nr_bad, align 8
  %add1870 = add nsw i64 0, %303
  %mul1871 = mul nsw i64 0, %add1870
  %add1872 = add nsw i64 %mul1871, 1
  %shl1873 = shl i64 %add1872, 62
  %sub1874 = sub nsw i64 %shl1873, 1
  %mul1875 = mul nsw i64 %sub1874, 2
  %add1876 = add nsw i64 %mul1875, 1
  %sub1877 = sub nsw i64 %conv1869, %add1876
  br label %cond.end.1882

cond.false.1878:                                  ; preds = %cond.false.1855
  %304 = load i64, i64* %nr_bad, align 8
  %add1879 = add nsw i64 0, %304
  %mul1880 = mul nsw i64 0, %add1879
  %add1881 = add nsw i64 %mul1880, 0
  br label %cond.end.1882

cond.end.1882:                                    ; preds = %cond.false.1878, %cond.true.1861
  %cond1883 = phi i64 [ %sub1877, %cond.true.1861 ], [ %add1881, %cond.false.1878 ]
  %div1884 = sdiv i64 %cond1883, 4
  %305 = load i64, i64* %nr_bad, align 8
  %cmp1885 = icmp slt i64 %div1884, %305
  br i1 %cmp1885, label %cond.true.1961, label %lor.lhs.false.1947

cond.false.1887:                                  ; preds = %lor.lhs.false.1826
  br i1 false, label %cond.true.1888, label %cond.false.1889

cond.true.1888:                                   ; preds = %cond.false.1887
  br i1 false, label %cond.true.1961, label %lor.lhs.false.1947

cond.false.1889:                                  ; preds = %cond.false.1887
  %306 = load i64, i64* %nr_bad, align 8
  %cmp1890 = icmp slt i64 %306, 0
  br i1 %cmp1890, label %cond.true.1892, label %cond.false.1924

cond.true.1892:                                   ; preds = %cond.false.1889
  %307 = load i64, i64* %nr_bad, align 8
  %308 = load i64, i64* %nr_bad, align 8
  %add1893 = add nsw i64 0, %308
  %mul1894 = mul nsw i64 0, %add1893
  %sub1895 = sub nsw i64 %mul1894, 1
  %cmp1896 = icmp slt i64 %sub1895, 0
  br i1 %cmp1896, label %cond.true.1898, label %cond.false.1915

cond.true.1898:                                   ; preds = %cond.true.1892
  %309 = load i64, i64* %nr_bad, align 8
  %add1899 = add nsw i64 0, %309
  %mul1900 = mul nsw i64 0, %add1899
  %add1901 = add nsw i64 %mul1900, 0
  %neg1902 = xor i64 %add1901, -1
  %cmp1903 = icmp eq i64 %neg1902, -1
  %conv1904 = zext i1 %cmp1903 to i32
  %sub1905 = sub nsw i32 0, %conv1904
  %conv1906 = sext i32 %sub1905 to i64
  %310 = load i64, i64* %nr_bad, align 8
  %add1907 = add nsw i64 0, %310
  %mul1908 = mul nsw i64 0, %add1907
  %add1909 = add nsw i64 %mul1908, 1
  %shl1910 = shl i64 %add1909, 62
  %sub1911 = sub nsw i64 %shl1910, 1
  %mul1912 = mul nsw i64 %sub1911, 2
  %add1913 = add nsw i64 %mul1912, 1
  %sub1914 = sub nsw i64 %conv1906, %add1913
  br label %cond.end.1919

cond.false.1915:                                  ; preds = %cond.true.1892
  %311 = load i64, i64* %nr_bad, align 8
  %add1916 = add nsw i64 0, %311
  %mul1917 = mul nsw i64 0, %add1916
  %add1918 = add nsw i64 %mul1917, 0
  br label %cond.end.1919

cond.end.1919:                                    ; preds = %cond.false.1915, %cond.true.1898
  %cond1920 = phi i64 [ %sub1914, %cond.true.1898 ], [ %add1918, %cond.false.1915 ]
  %div1921 = sdiv i64 %cond1920, 4
  %cmp1922 = icmp slt i64 %307, %div1921
  br i1 %cmp1922, label %cond.true.1961, label %lor.lhs.false.1947

cond.false.1924:                                  ; preds = %cond.false.1889
  %312 = load i64, i64* %nr_bad, align 8
  %add1925 = add nsw i64 0, %312
  %mul1926 = mul nsw i64 0, %add1925
  %sub1927 = sub nsw i64 %mul1926, 1
  %cmp1928 = icmp slt i64 %sub1927, 0
  br i1 %cmp1928, label %cond.true.1930, label %cond.false.1938

cond.true.1930:                                   ; preds = %cond.false.1924
  %313 = load i64, i64* %nr_bad, align 8
  %add1931 = add nsw i64 0, %313
  %mul1932 = mul nsw i64 0, %add1931
  %add1933 = add nsw i64 %mul1932, 1
  %shl1934 = shl i64 %add1933, 62
  %sub1935 = sub nsw i64 %shl1934, 1
  %mul1936 = mul nsw i64 %sub1935, 2
  %add1937 = add nsw i64 %mul1936, 1
  br label %cond.end.1942

cond.false.1938:                                  ; preds = %cond.false.1924
  %314 = load i64, i64* %nr_bad, align 8
  %add1939 = add nsw i64 0, %314
  %mul1940 = mul nsw i64 0, %add1939
  %sub1941 = sub nsw i64 %mul1940, 1
  br label %cond.end.1942

cond.end.1942:                                    ; preds = %cond.false.1938, %cond.true.1930
  %cond1943 = phi i64 [ %add1937, %cond.true.1930 ], [ %sub1941, %cond.false.1938 ]
  %div1944 = sdiv i64 %cond1943, 4
  %315 = load i64, i64* %nr_bad, align 8
  %cmp1945 = icmp slt i64 %div1944, %315
  br i1 %cmp1945, label %cond.true.1961, label %lor.lhs.false.1947

lor.lhs.false.1947:                               ; preds = %cond.end.1942, %cond.end.1919, %cond.true.1888, %cond.end.1882, %cond.true.1854, %cond.end.1848
  %316 = load i64, i64* %nr_bad, align 8
  %mul1948 = mul nsw i64 %316, 4
  %mul1949 = mul nsw i64 0, %mul1948
  %sub1950 = sub nsw i64 %mul1949, 1
  %cmp1951 = icmp slt i64 %sub1950, 0
  br i1 %cmp1951, label %land.lhs.true.1953, label %lor.lhs.false.1957

land.lhs.true.1953:                               ; preds = %lor.lhs.false.1947
  %317 = load i64, i64* %nr_bad, align 8
  %mul1954 = mul nsw i64 %317, 4
  %cmp1955 = icmp slt i64 %mul1954, -9223372036854775808
  br i1 %cmp1955, label %cond.true.1961, label %lor.lhs.false.1957

lor.lhs.false.1957:                               ; preds = %land.lhs.true.1953, %lor.lhs.false.1947
  %318 = load i64, i64* %nr_bad, align 8
  %mul1958 = mul nsw i64 %318, 4
  %cmp1959 = icmp slt i64 9223372036854775807, %mul1958
  br i1 %cmp1959, label %cond.true.1961, label %cond.false.1973

cond.true.1961:                                   ; preds = %lor.lhs.false.1957, %land.lhs.true.1953, %cond.end.1942, %cond.end.1919, %cond.true.1888, %cond.end.1882, %cond.true.1854, %cond.end.1848, %land.lhs.true.1823
  %319 = load i64, i64* %nr_bad, align 8
  %mul1962 = mul i64 %319, 4
  %cmp1963 = icmp ule i64 %mul1962, 9223372036854775807
  br i1 %cmp1963, label %cond.true.1965, label %cond.false.1967

cond.true.1965:                                   ; preds = %cond.true.1961
  %320 = load i64, i64* %nr_bad, align 8
  %mul1966 = mul i64 %320, 4
  br label %cond.end.1971

cond.false.1967:                                  ; preds = %cond.true.1961
  %321 = load i64, i64* %nr_bad, align 8
  %mul1968 = mul i64 %321, 4
  %sub1969 = sub i64 %mul1968, -9223372036854775808
  %add1970 = add nsw i64 %sub1969, -9223372036854775808
  br label %cond.end.1971

cond.end.1971:                                    ; preds = %cond.false.1967, %cond.true.1965
  %cond1972 = phi i64 [ %mul1966, %cond.true.1965 ], [ %add1970, %cond.false.1967 ]
  store i64 %cond1972, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1973:                                  ; preds = %lor.lhs.false.1957
  %322 = load i64, i64* %nr_bad, align 8
  %mul1974 = mul i64 %322, 4
  %cmp1975 = icmp ule i64 %mul1974, 9223372036854775807
  br i1 %cmp1975, label %cond.true.1977, label %cond.false.1979

cond.true.1977:                                   ; preds = %cond.false.1973
  %323 = load i64, i64* %nr_bad, align 8
  %mul1978 = mul i64 %323, 4
  br label %cond.end.1983

cond.false.1979:                                  ; preds = %cond.false.1973
  %324 = load i64, i64* %nr_bad, align 8
  %mul1980 = mul i64 %324, 4
  %sub1981 = sub i64 %mul1980, -9223372036854775808
  %add1982 = add nsw i64 %sub1981, -9223372036854775808
  br label %cond.end.1983

cond.end.1983:                                    ; preds = %cond.false.1979, %cond.true.1977
  %cond1984 = phi i64 [ %mul1978, %cond.true.1977 ], [ %add1982, %cond.false.1979 ]
  store i64 %cond1984, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

cond.false.1985:                                  ; preds = %cond.false.1791
  %325 = load i64, i64* %nr_bad, align 8
  %add1986 = add nsw i64 0, %325
  %mul1987 = mul nsw i64 0, %add1986
  %sub1988 = sub nsw i64 %mul1987, 1
  %cmp1989 = icmp slt i64 %sub1988, 0
  br i1 %cmp1989, label %cond.true.1991, label %cond.false.2008

cond.true.1991:                                   ; preds = %cond.false.1985
  %326 = load i64, i64* %nr_bad, align 8
  %add1992 = add nsw i64 0, %326
  %mul1993 = mul nsw i64 0, %add1992
  %add1994 = add nsw i64 %mul1993, 0
  %neg1995 = xor i64 %add1994, -1
  %cmp1996 = icmp eq i64 %neg1995, -1
  %conv1997 = zext i1 %cmp1996 to i32
  %sub1998 = sub nsw i32 0, %conv1997
  %conv1999 = sext i32 %sub1998 to i64
  %327 = load i64, i64* %nr_bad, align 8
  %add2000 = add nsw i64 0, %327
  %mul2001 = mul nsw i64 0, %add2000
  %add2002 = add nsw i64 %mul2001, 1
  %shl2003 = shl i64 %add2002, 62
  %sub2004 = sub nsw i64 %shl2003, 1
  %mul2005 = mul nsw i64 %sub2004, 2
  %add2006 = add nsw i64 %mul2005, 1
  %sub2007 = sub nsw i64 %conv1999, %add2006
  br label %cond.end.2012

cond.false.2008:                                  ; preds = %cond.false.1985
  %328 = load i64, i64* %nr_bad, align 8
  %add2009 = add nsw i64 0, %328
  %mul2010 = mul nsw i64 0, %add2009
  %add2011 = add nsw i64 %mul2010, 0
  br label %cond.end.2012

cond.end.2012:                                    ; preds = %cond.false.2008, %cond.true.1991
  %cond2013 = phi i64 [ %sub2007, %cond.true.1991 ], [ %add2011, %cond.false.2008 ]
  %cmp2014 = icmp eq i64 %cond2013, 0
  br i1 %cmp2014, label %land.lhs.true.2016, label %lor.lhs.false.2019

land.lhs.true.2016:                               ; preds = %cond.end.2012
  %329 = load i64, i64* %nr_bad, align 8
  %cmp2017 = icmp slt i64 %329, 0
  br i1 %cmp2017, label %cond.true.2154, label %lor.lhs.false.2019

lor.lhs.false.2019:                               ; preds = %land.lhs.true.2016, %cond.end.2012
  br i1 false, label %cond.true.2020, label %cond.false.2080

cond.true.2020:                                   ; preds = %lor.lhs.false.2019
  %330 = load i64, i64* %nr_bad, align 8
  %cmp2021 = icmp slt i64 %330, 0
  br i1 %cmp2021, label %cond.true.2023, label %cond.false.2046

cond.true.2023:                                   ; preds = %cond.true.2020
  %331 = load i64, i64* %nr_bad, align 8
  %332 = load i64, i64* %nr_bad, align 8
  %add2024 = add nsw i64 0, %332
  %mul2025 = mul nsw i64 0, %add2024
  %sub2026 = sub nsw i64 %mul2025, 1
  %cmp2027 = icmp slt i64 %sub2026, 0
  br i1 %cmp2027, label %cond.true.2029, label %cond.false.2037

cond.true.2029:                                   ; preds = %cond.true.2023
  %333 = load i64, i64* %nr_bad, align 8
  %add2030 = add nsw i64 0, %333
  %mul2031 = mul nsw i64 0, %add2030
  %add2032 = add nsw i64 %mul2031, 1
  %shl2033 = shl i64 %add2032, 62
  %sub2034 = sub nsw i64 %shl2033, 1
  %mul2035 = mul nsw i64 %sub2034, 2
  %add2036 = add nsw i64 %mul2035, 1
  br label %cond.end.2041

cond.false.2037:                                  ; preds = %cond.true.2023
  %334 = load i64, i64* %nr_bad, align 8
  %add2038 = add nsw i64 0, %334
  %mul2039 = mul nsw i64 0, %add2038
  %sub2040 = sub nsw i64 %mul2039, 1
  br label %cond.end.2041

cond.end.2041:                                    ; preds = %cond.false.2037, %cond.true.2029
  %cond2042 = phi i64 [ %add2036, %cond.true.2029 ], [ %sub2040, %cond.false.2037 ]
  %div2043 = sdiv i64 %cond2042, 4
  %cmp2044 = icmp slt i64 %331, %div2043
  br i1 %cmp2044, label %cond.true.2154, label %lor.lhs.false.2140

cond.false.2046:                                  ; preds = %cond.true.2020
  br i1 false, label %cond.true.2047, label %cond.false.2048

cond.true.2047:                                   ; preds = %cond.false.2046
  br i1 false, label %cond.true.2154, label %lor.lhs.false.2140

cond.false.2048:                                  ; preds = %cond.false.2046
  %335 = load i64, i64* %nr_bad, align 8
  %add2049 = add nsw i64 0, %335
  %mul2050 = mul nsw i64 0, %add2049
  %sub2051 = sub nsw i64 %mul2050, 1
  %cmp2052 = icmp slt i64 %sub2051, 0
  br i1 %cmp2052, label %cond.true.2054, label %cond.false.2071

cond.true.2054:                                   ; preds = %cond.false.2048
  %336 = load i64, i64* %nr_bad, align 8
  %add2055 = add nsw i64 0, %336
  %mul2056 = mul nsw i64 0, %add2055
  %add2057 = add nsw i64 %mul2056, 0
  %neg2058 = xor i64 %add2057, -1
  %cmp2059 = icmp eq i64 %neg2058, -1
  %conv2060 = zext i1 %cmp2059 to i32
  %sub2061 = sub nsw i32 0, %conv2060
  %conv2062 = sext i32 %sub2061 to i64
  %337 = load i64, i64* %nr_bad, align 8
  %add2063 = add nsw i64 0, %337
  %mul2064 = mul nsw i64 0, %add2063
  %add2065 = add nsw i64 %mul2064, 1
  %shl2066 = shl i64 %add2065, 62
  %sub2067 = sub nsw i64 %shl2066, 1
  %mul2068 = mul nsw i64 %sub2067, 2
  %add2069 = add nsw i64 %mul2068, 1
  %sub2070 = sub nsw i64 %conv2062, %add2069
  br label %cond.end.2075

cond.false.2071:                                  ; preds = %cond.false.2048
  %338 = load i64, i64* %nr_bad, align 8
  %add2072 = add nsw i64 0, %338
  %mul2073 = mul nsw i64 0, %add2072
  %add2074 = add nsw i64 %mul2073, 0
  br label %cond.end.2075

cond.end.2075:                                    ; preds = %cond.false.2071, %cond.true.2054
  %cond2076 = phi i64 [ %sub2070, %cond.true.2054 ], [ %add2074, %cond.false.2071 ]
  %div2077 = sdiv i64 %cond2076, 4
  %339 = load i64, i64* %nr_bad, align 8
  %cmp2078 = icmp slt i64 %div2077, %339
  br i1 %cmp2078, label %cond.true.2154, label %lor.lhs.false.2140

cond.false.2080:                                  ; preds = %lor.lhs.false.2019
  br i1 false, label %cond.true.2081, label %cond.false.2082

cond.true.2081:                                   ; preds = %cond.false.2080
  br i1 false, label %cond.true.2154, label %lor.lhs.false.2140

cond.false.2082:                                  ; preds = %cond.false.2080
  %340 = load i64, i64* %nr_bad, align 8
  %cmp2083 = icmp slt i64 %340, 0
  br i1 %cmp2083, label %cond.true.2085, label %cond.false.2117

cond.true.2085:                                   ; preds = %cond.false.2082
  %341 = load i64, i64* %nr_bad, align 8
  %342 = load i64, i64* %nr_bad, align 8
  %add2086 = add nsw i64 0, %342
  %mul2087 = mul nsw i64 0, %add2086
  %sub2088 = sub nsw i64 %mul2087, 1
  %cmp2089 = icmp slt i64 %sub2088, 0
  br i1 %cmp2089, label %cond.true.2091, label %cond.false.2108

cond.true.2091:                                   ; preds = %cond.true.2085
  %343 = load i64, i64* %nr_bad, align 8
  %add2092 = add nsw i64 0, %343
  %mul2093 = mul nsw i64 0, %add2092
  %add2094 = add nsw i64 %mul2093, 0
  %neg2095 = xor i64 %add2094, -1
  %cmp2096 = icmp eq i64 %neg2095, -1
  %conv2097 = zext i1 %cmp2096 to i32
  %sub2098 = sub nsw i32 0, %conv2097
  %conv2099 = sext i32 %sub2098 to i64
  %344 = load i64, i64* %nr_bad, align 8
  %add2100 = add nsw i64 0, %344
  %mul2101 = mul nsw i64 0, %add2100
  %add2102 = add nsw i64 %mul2101, 1
  %shl2103 = shl i64 %add2102, 62
  %sub2104 = sub nsw i64 %shl2103, 1
  %mul2105 = mul nsw i64 %sub2104, 2
  %add2106 = add nsw i64 %mul2105, 1
  %sub2107 = sub nsw i64 %conv2099, %add2106
  br label %cond.end.2112

cond.false.2108:                                  ; preds = %cond.true.2085
  %345 = load i64, i64* %nr_bad, align 8
  %add2109 = add nsw i64 0, %345
  %mul2110 = mul nsw i64 0, %add2109
  %add2111 = add nsw i64 %mul2110, 0
  br label %cond.end.2112

cond.end.2112:                                    ; preds = %cond.false.2108, %cond.true.2091
  %cond2113 = phi i64 [ %sub2107, %cond.true.2091 ], [ %add2111, %cond.false.2108 ]
  %div2114 = sdiv i64 %cond2113, 4
  %cmp2115 = icmp slt i64 %341, %div2114
  br i1 %cmp2115, label %cond.true.2154, label %lor.lhs.false.2140

cond.false.2117:                                  ; preds = %cond.false.2082
  %346 = load i64, i64* %nr_bad, align 8
  %add2118 = add nsw i64 0, %346
  %mul2119 = mul nsw i64 0, %add2118
  %sub2120 = sub nsw i64 %mul2119, 1
  %cmp2121 = icmp slt i64 %sub2120, 0
  br i1 %cmp2121, label %cond.true.2123, label %cond.false.2131

cond.true.2123:                                   ; preds = %cond.false.2117
  %347 = load i64, i64* %nr_bad, align 8
  %add2124 = add nsw i64 0, %347
  %mul2125 = mul nsw i64 0, %add2124
  %add2126 = add nsw i64 %mul2125, 1
  %shl2127 = shl i64 %add2126, 62
  %sub2128 = sub nsw i64 %shl2127, 1
  %mul2129 = mul nsw i64 %sub2128, 2
  %add2130 = add nsw i64 %mul2129, 1
  br label %cond.end.2135

cond.false.2131:                                  ; preds = %cond.false.2117
  %348 = load i64, i64* %nr_bad, align 8
  %add2132 = add nsw i64 0, %348
  %mul2133 = mul nsw i64 0, %add2132
  %sub2134 = sub nsw i64 %mul2133, 1
  br label %cond.end.2135

cond.end.2135:                                    ; preds = %cond.false.2131, %cond.true.2123
  %cond2136 = phi i64 [ %add2130, %cond.true.2123 ], [ %sub2134, %cond.false.2131 ]
  %div2137 = sdiv i64 %cond2136, 4
  %349 = load i64, i64* %nr_bad, align 8
  %cmp2138 = icmp slt i64 %div2137, %349
  br i1 %cmp2138, label %cond.true.2154, label %lor.lhs.false.2140

lor.lhs.false.2140:                               ; preds = %cond.end.2135, %cond.end.2112, %cond.true.2081, %cond.end.2075, %cond.true.2047, %cond.end.2041
  %350 = load i64, i64* %nr_bad, align 8
  %mul2141 = mul nsw i64 %350, 4
  %mul2142 = mul nsw i64 0, %mul2141
  %sub2143 = sub nsw i64 %mul2142, 1
  %cmp2144 = icmp slt i64 %sub2143, 0
  br i1 %cmp2144, label %land.lhs.true.2146, label %lor.lhs.false.2150

land.lhs.true.2146:                               ; preds = %lor.lhs.false.2140
  %351 = load i64, i64* %nr_bad, align 8
  %mul2147 = mul nsw i64 %351, 4
  %cmp2148 = icmp slt i64 %mul2147, -9223372036854775808
  br i1 %cmp2148, label %cond.true.2154, label %lor.lhs.false.2150

lor.lhs.false.2150:                               ; preds = %land.lhs.true.2146, %lor.lhs.false.2140
  %352 = load i64, i64* %nr_bad, align 8
  %mul2151 = mul nsw i64 %352, 4
  %cmp2152 = icmp slt i64 9223372036854775807, %mul2151
  br i1 %cmp2152, label %cond.true.2154, label %cond.false.2166

cond.true.2154:                                   ; preds = %lor.lhs.false.2150, %land.lhs.true.2146, %cond.end.2135, %cond.end.2112, %cond.true.2081, %cond.end.2075, %cond.true.2047, %cond.end.2041, %land.lhs.true.2016
  %353 = load i64, i64* %nr_bad, align 8
  %mul2155 = mul i64 %353, 4
  %cmp2156 = icmp ule i64 %mul2155, 9223372036854775807
  br i1 %cmp2156, label %cond.true.2158, label %cond.false.2160

cond.true.2158:                                   ; preds = %cond.true.2154
  %354 = load i64, i64* %nr_bad, align 8
  %mul2159 = mul i64 %354, 4
  br label %cond.end.2164

cond.false.2160:                                  ; preds = %cond.true.2154
  %355 = load i64, i64* %nr_bad, align 8
  %mul2161 = mul i64 %355, 4
  %sub2162 = sub i64 %mul2161, -9223372036854775808
  %add2163 = add nsw i64 %sub2162, -9223372036854775808
  br label %cond.end.2164

cond.end.2164:                                    ; preds = %cond.false.2160, %cond.true.2158
  %cond2165 = phi i64 [ %mul2159, %cond.true.2158 ], [ %add2163, %cond.false.2160 ]
  store i64 %cond2165, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.2178

cond.false.2166:                                  ; preds = %lor.lhs.false.2150
  %356 = load i64, i64* %nr_bad, align 8
  %mul2167 = mul i64 %356, 4
  %cmp2168 = icmp ule i64 %mul2167, 9223372036854775807
  br i1 %cmp2168, label %cond.true.2170, label %cond.false.2172

cond.true.2170:                                   ; preds = %cond.false.2166
  %357 = load i64, i64* %nr_bad, align 8
  %mul2171 = mul i64 %357, 4
  br label %cond.end.2176

cond.false.2172:                                  ; preds = %cond.false.2166
  %358 = load i64, i64* %nr_bad, align 8
  %mul2173 = mul i64 %358, 4
  %sub2174 = sub i64 %mul2173, -9223372036854775808
  %add2175 = add nsw i64 %sub2174, -9223372036854775808
  br label %cond.end.2176

cond.end.2176:                                    ; preds = %cond.false.2172, %cond.true.2170
  %cond2177 = phi i64 [ %mul2171, %cond.true.2170 ], [ %add2175, %cond.false.2172 ]
  store i64 %cond2177, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.2178

lor.lhs.false.2178:                               ; preds = %cond.end.2176, %cond.end.2164, %cond.end.1983, %cond.end.1971, %cond.end.1789, %cond.end.1777, %cond.end.1596, %cond.end.1584, %cond.end.1400, %cond.end.1384, %cond.end.1199, %cond.end.1183, %cond.end.971, %cond.end.948, %cond.end.756, %cond.end.733, %cond.end.486, %cond.end.463, %cond.end.271, %cond.end.248
  br i1 false, label %cond.true.2179, label %cond.false.2700

cond.true.2179:                                   ; preds = %lor.lhs.false.2178
  br i1 false, label %cond.true.2180, label %cond.false.2483

cond.true.2180:                                   ; preds = %cond.true.2179
  %359 = load i64, i64* %alloc, align 8
  %conv2181 = trunc i64 %359 to i8
  %conv2182 = sext i8 %conv2181 to i32
  %mul2183 = mul nsw i32 0, %conv2182
  %360 = load i64, i64* %len, align 8
  %add2184 = add nsw i64 %360, 1
  %conv2185 = trunc i64 %add2184 to i8
  %conv2186 = sext i8 %conv2185 to i32
  %add2187 = add nsw i32 %mul2183, %conv2186
  %mul2188 = mul nsw i32 0, %add2187
  %sub2189 = sub nsw i32 %mul2188, 1
  %cmp2190 = icmp slt i32 %sub2189, 0
  br i1 %cmp2190, label %cond.true.2192, label %cond.false.2220

cond.true.2192:                                   ; preds = %cond.true.2180
  %361 = load i64, i64* %alloc, align 8
  %conv2193 = trunc i64 %361 to i8
  %conv2194 = sext i8 %conv2193 to i32
  %mul2195 = mul nsw i32 0, %conv2194
  %362 = load i64, i64* %len, align 8
  %add2196 = add nsw i64 %362, 1
  %conv2197 = trunc i64 %add2196 to i8
  %conv2198 = sext i8 %conv2197 to i32
  %add2199 = add nsw i32 %mul2195, %conv2198
  %mul2200 = mul nsw i32 0, %add2199
  %add2201 = add nsw i32 %mul2200, 0
  %neg2202 = xor i32 %add2201, -1
  %cmp2203 = icmp eq i32 %neg2202, -1
  %conv2204 = zext i1 %cmp2203 to i32
  %sub2205 = sub nsw i32 0, %conv2204
  %363 = load i64, i64* %alloc, align 8
  %conv2206 = trunc i64 %363 to i8
  %conv2207 = sext i8 %conv2206 to i32
  %mul2208 = mul nsw i32 0, %conv2207
  %364 = load i64, i64* %len, align 8
  %add2209 = add nsw i64 %364, 1
  %conv2210 = trunc i64 %add2209 to i8
  %conv2211 = sext i8 %conv2210 to i32
  %add2212 = add nsw i32 %mul2208, %conv2211
  %mul2213 = mul nsw i32 0, %add2212
  %add2214 = add nsw i32 %mul2213, 1
  %shl2215 = shl i32 %add2214, 30
  %sub2216 = sub nsw i32 %shl2215, 1
  %mul2217 = mul nsw i32 %sub2216, 2
  %add2218 = add nsw i32 %mul2217, 1
  %sub2219 = sub nsw i32 %sub2205, %add2218
  br label %cond.end.2230

cond.false.2220:                                  ; preds = %cond.true.2180
  %365 = load i64, i64* %alloc, align 8
  %conv2221 = trunc i64 %365 to i8
  %conv2222 = sext i8 %conv2221 to i32
  %mul2223 = mul nsw i32 0, %conv2222
  %366 = load i64, i64* %len, align 8
  %add2224 = add nsw i64 %366, 1
  %conv2225 = trunc i64 %add2224 to i8
  %conv2226 = sext i8 %conv2225 to i32
  %add2227 = add nsw i32 %mul2223, %conv2226
  %mul2228 = mul nsw i32 0, %add2227
  %add2229 = add nsw i32 %mul2228, 0
  br label %cond.end.2230

cond.end.2230:                                    ; preds = %cond.false.2220, %cond.true.2192
  %cond2231 = phi i32 [ %sub2219, %cond.true.2192 ], [ %add2229, %cond.false.2220 ]
  %cmp2232 = icmp slt i32 %cond2231, 0
  br i1 %cmp2232, label %cond.true.2234, label %cond.false.2345

cond.true.2234:                                   ; preds = %cond.end.2230
  %367 = load i64, i64* %alloc, align 8
  %conv2235 = trunc i64 %367 to i8
  %conv2236 = sext i8 %conv2235 to i32
  %cmp2237 = icmp slt i32 %conv2236, 0
  br i1 %cmp2237, label %cond.true.2239, label %cond.false.2299

cond.true.2239:                                   ; preds = %cond.true.2234
  %368 = load i64, i64* %len, align 8
  %add2240 = add nsw i64 %368, 1
  %conv2241 = trunc i64 %add2240 to i8
  %conv2242 = sext i8 %conv2241 to i32
  %369 = load i64, i64* %alloc, align 8
  %conv2243 = trunc i64 %369 to i8
  %conv2244 = sext i8 %conv2243 to i32
  %mul2245 = mul nsw i32 0, %conv2244
  %370 = load i64, i64* %len, align 8
  %add2246 = add nsw i64 %370, 1
  %conv2247 = trunc i64 %add2246 to i8
  %conv2248 = sext i8 %conv2247 to i32
  %add2249 = add nsw i32 %mul2245, %conv2248
  %mul2250 = mul nsw i32 0, %add2249
  %sub2251 = sub nsw i32 %mul2250, 1
  %cmp2252 = icmp slt i32 %sub2251, 0
  br i1 %cmp2252, label %cond.true.2254, label %cond.false.2282

cond.true.2254:                                   ; preds = %cond.true.2239
  %371 = load i64, i64* %alloc, align 8
  %conv2255 = trunc i64 %371 to i8
  %conv2256 = sext i8 %conv2255 to i32
  %mul2257 = mul nsw i32 0, %conv2256
  %372 = load i64, i64* %len, align 8
  %add2258 = add nsw i64 %372, 1
  %conv2259 = trunc i64 %add2258 to i8
  %conv2260 = sext i8 %conv2259 to i32
  %add2261 = add nsw i32 %mul2257, %conv2260
  %mul2262 = mul nsw i32 0, %add2261
  %add2263 = add nsw i32 %mul2262, 0
  %neg2264 = xor i32 %add2263, -1
  %cmp2265 = icmp eq i32 %neg2264, -1
  %conv2266 = zext i1 %cmp2265 to i32
  %sub2267 = sub nsw i32 0, %conv2266
  %373 = load i64, i64* %alloc, align 8
  %conv2268 = trunc i64 %373 to i8
  %conv2269 = sext i8 %conv2268 to i32
  %mul2270 = mul nsw i32 0, %conv2269
  %374 = load i64, i64* %len, align 8
  %add2271 = add nsw i64 %374, 1
  %conv2272 = trunc i64 %add2271 to i8
  %conv2273 = sext i8 %conv2272 to i32
  %add2274 = add nsw i32 %mul2270, %conv2273
  %mul2275 = mul nsw i32 0, %add2274
  %add2276 = add nsw i32 %mul2275, 1
  %shl2277 = shl i32 %add2276, 30
  %sub2278 = sub nsw i32 %shl2277, 1
  %mul2279 = mul nsw i32 %sub2278, 2
  %add2280 = add nsw i32 %mul2279, 1
  %sub2281 = sub nsw i32 %sub2267, %add2280
  br label %cond.end.2292

cond.false.2282:                                  ; preds = %cond.true.2239
  %375 = load i64, i64* %alloc, align 8
  %conv2283 = trunc i64 %375 to i8
  %conv2284 = sext i8 %conv2283 to i32
  %mul2285 = mul nsw i32 0, %conv2284
  %376 = load i64, i64* %len, align 8
  %add2286 = add nsw i64 %376, 1
  %conv2287 = trunc i64 %add2286 to i8
  %conv2288 = sext i8 %conv2287 to i32
  %add2289 = add nsw i32 %mul2285, %conv2288
  %mul2290 = mul nsw i32 0, %add2289
  %add2291 = add nsw i32 %mul2290, 0
  br label %cond.end.2292

cond.end.2292:                                    ; preds = %cond.false.2282, %cond.true.2254
  %cond2293 = phi i32 [ %sub2281, %cond.true.2254 ], [ %add2291, %cond.false.2282 ]
  %377 = load i64, i64* %alloc, align 8
  %conv2294 = trunc i64 %377 to i8
  %conv2295 = sext i8 %conv2294 to i32
  %sub2296 = sub nsw i32 %cond2293, %conv2295
  %cmp2297 = icmp slt i32 %conv2242, %sub2296
  br i1 %cmp2297, label %cond.true.2419, label %lor.lhs.false.2390

cond.false.2299:                                  ; preds = %cond.true.2234
  %378 = load i64, i64* %alloc, align 8
  %conv2300 = trunc i64 %378 to i8
  %conv2301 = sext i8 %conv2300 to i32
  %mul2302 = mul nsw i32 0, %conv2301
  %379 = load i64, i64* %len, align 8
  %add2303 = add nsw i64 %379, 1
  %conv2304 = trunc i64 %add2303 to i8
  %conv2305 = sext i8 %conv2304 to i32
  %add2306 = add nsw i32 %mul2302, %conv2305
  %mul2307 = mul nsw i32 0, %add2306
  %sub2308 = sub nsw i32 %mul2307, 1
  %cmp2309 = icmp slt i32 %sub2308, 0
  br i1 %cmp2309, label %cond.true.2311, label %cond.false.2325

cond.true.2311:                                   ; preds = %cond.false.2299
  %380 = load i64, i64* %alloc, align 8
  %conv2312 = trunc i64 %380 to i8
  %conv2313 = sext i8 %conv2312 to i32
  %mul2314 = mul nsw i32 0, %conv2313
  %381 = load i64, i64* %len, align 8
  %add2315 = add nsw i64 %381, 1
  %conv2316 = trunc i64 %add2315 to i8
  %conv2317 = sext i8 %conv2316 to i32
  %add2318 = add nsw i32 %mul2314, %conv2317
  %mul2319 = mul nsw i32 0, %add2318
  %add2320 = add nsw i32 %mul2319, 1
  %shl2321 = shl i32 %add2320, 30
  %sub2322 = sub nsw i32 %shl2321, 1
  %mul2323 = mul nsw i32 %sub2322, 2
  %add2324 = add nsw i32 %mul2323, 1
  br label %cond.end.2335

cond.false.2325:                                  ; preds = %cond.false.2299
  %382 = load i64, i64* %alloc, align 8
  %conv2326 = trunc i64 %382 to i8
  %conv2327 = sext i8 %conv2326 to i32
  %mul2328 = mul nsw i32 0, %conv2327
  %383 = load i64, i64* %len, align 8
  %add2329 = add nsw i64 %383, 1
  %conv2330 = trunc i64 %add2329 to i8
  %conv2331 = sext i8 %conv2330 to i32
  %add2332 = add nsw i32 %mul2328, %conv2331
  %mul2333 = mul nsw i32 0, %add2332
  %sub2334 = sub nsw i32 %mul2333, 1
  br label %cond.end.2335

cond.end.2335:                                    ; preds = %cond.false.2325, %cond.true.2311
  %cond2336 = phi i32 [ %add2324, %cond.true.2311 ], [ %sub2334, %cond.false.2325 ]
  %384 = load i64, i64* %alloc, align 8
  %conv2337 = trunc i64 %384 to i8
  %conv2338 = sext i8 %conv2337 to i32
  %sub2339 = sub nsw i32 %cond2336, %conv2338
  %385 = load i64, i64* %len, align 8
  %add2340 = add nsw i64 %385, 1
  %conv2341 = trunc i64 %add2340 to i8
  %conv2342 = sext i8 %conv2341 to i32
  %cmp2343 = icmp slt i32 %sub2339, %conv2342
  br i1 %cmp2343, label %cond.true.2419, label %lor.lhs.false.2390

cond.false.2345:                                  ; preds = %cond.end.2230
  %386 = load i64, i64* %len, align 8
  %add2346 = add nsw i64 %386, 1
  %conv2347 = trunc i64 %add2346 to i8
  %conv2348 = sext i8 %conv2347 to i32
  %cmp2349 = icmp slt i32 %conv2348, 0
  br i1 %cmp2349, label %cond.true.2351, label %cond.false.2362

cond.true.2351:                                   ; preds = %cond.false.2345
  %387 = load i64, i64* %alloc, align 8
  %conv2352 = trunc i64 %387 to i8
  %conv2353 = sext i8 %conv2352 to i32
  %388 = load i64, i64* %len, align 8
  %add2354 = add nsw i64 %388, 1
  %conv2355 = trunc i64 %add2354 to i8
  %conv2356 = sext i8 %conv2355 to i32
  %389 = load i64, i64* %alloc, align 8
  %conv2357 = trunc i64 %389 to i8
  %conv2358 = sext i8 %conv2357 to i32
  %add2359 = add nsw i32 %conv2356, %conv2358
  %cmp2360 = icmp sle i32 %conv2353, %add2359
  br i1 %cmp2360, label %cond.true.2419, label %lor.lhs.false.2390

cond.false.2362:                                  ; preds = %cond.false.2345
  %390 = load i64, i64* %alloc, align 8
  %conv2363 = trunc i64 %390 to i8
  %conv2364 = sext i8 %conv2363 to i32
  %cmp2365 = icmp slt i32 %conv2364, 0
  br i1 %cmp2365, label %cond.true.2367, label %cond.false.2379

cond.true.2367:                                   ; preds = %cond.false.2362
  %391 = load i64, i64* %len, align 8
  %add2368 = add nsw i64 %391, 1
  %conv2369 = trunc i64 %add2368 to i8
  %conv2370 = sext i8 %conv2369 to i32
  %392 = load i64, i64* %len, align 8
  %add2371 = add nsw i64 %392, 1
  %conv2372 = trunc i64 %add2371 to i8
  %conv2373 = sext i8 %conv2372 to i32
  %393 = load i64, i64* %alloc, align 8
  %conv2374 = trunc i64 %393 to i8
  %conv2375 = sext i8 %conv2374 to i32
  %add2376 = add nsw i32 %conv2373, %conv2375
  %cmp2377 = icmp sle i32 %conv2370, %add2376
  br i1 %cmp2377, label %cond.true.2419, label %lor.lhs.false.2390

cond.false.2379:                                  ; preds = %cond.false.2362
  %394 = load i64, i64* %len, align 8
  %add2380 = add nsw i64 %394, 1
  %conv2381 = trunc i64 %add2380 to i8
  %conv2382 = sext i8 %conv2381 to i32
  %395 = load i64, i64* %alloc, align 8
  %conv2383 = trunc i64 %395 to i8
  %conv2384 = sext i8 %conv2383 to i32
  %add2385 = add nsw i32 %conv2382, %conv2384
  %396 = load i64, i64* %alloc, align 8
  %conv2386 = trunc i64 %396 to i8
  %conv2387 = sext i8 %conv2386 to i32
  %cmp2388 = icmp slt i32 %add2385, %conv2387
  br i1 %cmp2388, label %cond.true.2419, label %lor.lhs.false.2390

lor.lhs.false.2390:                               ; preds = %cond.false.2379, %cond.true.2367, %cond.true.2351, %cond.end.2335, %cond.end.2292
  %397 = load i64, i64* %len, align 8
  %add2391 = add nsw i64 %397, 1
  %conv2392 = trunc i64 %add2391 to i8
  %conv2393 = sext i8 %conv2392 to i32
  %398 = load i64, i64* %alloc, align 8
  %conv2394 = trunc i64 %398 to i8
  %conv2395 = sext i8 %conv2394 to i32
  %add2396 = add nsw i32 %conv2393, %conv2395
  %mul2397 = mul nsw i32 0, %add2396
  %sub2398 = sub nsw i32 %mul2397, 1
  %cmp2399 = icmp slt i32 %sub2398, 0
  br i1 %cmp2399, label %land.lhs.true.2401, label %lor.lhs.false.2410

land.lhs.true.2401:                               ; preds = %lor.lhs.false.2390
  %399 = load i64, i64* %len, align 8
  %add2402 = add nsw i64 %399, 1
  %conv2403 = trunc i64 %add2402 to i8
  %conv2404 = sext i8 %conv2403 to i32
  %400 = load i64, i64* %alloc, align 8
  %conv2405 = trunc i64 %400 to i8
  %conv2406 = sext i8 %conv2405 to i32
  %add2407 = add nsw i32 %conv2404, %conv2406
  %cmp2408 = icmp slt i32 %add2407, -128
  br i1 %cmp2408, label %cond.true.2419, label %lor.lhs.false.2410

lor.lhs.false.2410:                               ; preds = %land.lhs.true.2401, %lor.lhs.false.2390
  %401 = load i64, i64* %len, align 8
  %add2411 = add nsw i64 %401, 1
  %conv2412 = trunc i64 %add2411 to i8
  %conv2413 = sext i8 %conv2412 to i32
  %402 = load i64, i64* %alloc, align 8
  %conv2414 = trunc i64 %402 to i8
  %conv2415 = sext i8 %conv2414 to i32
  %add2416 = add nsw i32 %conv2413, %conv2415
  %cmp2417 = icmp slt i32 127, %add2416
  br i1 %cmp2417, label %cond.true.2419, label %cond.false.2451

cond.true.2419:                                   ; preds = %lor.lhs.false.2410, %land.lhs.true.2401, %cond.false.2379, %cond.true.2367, %cond.true.2351, %cond.end.2335, %cond.end.2292
  %403 = load i64, i64* %len, align 8
  %add2420 = add nsw i64 %403, 1
  %conv2421 = trunc i64 %add2420 to i8
  %conv2422 = zext i8 %conv2421 to i32
  %404 = load i64, i64* %alloc, align 8
  %conv2423 = trunc i64 %404 to i8
  %conv2424 = zext i8 %conv2423 to i32
  %add2425 = add nsw i32 %conv2422, %conv2424
  %cmp2426 = icmp sle i32 %add2425, 127
  br i1 %cmp2426, label %cond.true.2428, label %cond.false.2437

cond.true.2428:                                   ; preds = %cond.true.2419
  %405 = load i64, i64* %len, align 8
  %add2429 = add nsw i64 %405, 1
  %conv2430 = trunc i64 %add2429 to i8
  %conv2431 = zext i8 %conv2430 to i32
  %406 = load i64, i64* %alloc, align 8
  %conv2432 = trunc i64 %406 to i8
  %conv2433 = zext i8 %conv2432 to i32
  %add2434 = add nsw i32 %conv2431, %conv2433
  %conv2435 = trunc i32 %add2434 to i8
  %conv2436 = sext i8 %conv2435 to i32
  br label %cond.end.2448

cond.false.2437:                                  ; preds = %cond.true.2419
  %407 = load i64, i64* %len, align 8
  %add2438 = add nsw i64 %407, 1
  %conv2439 = trunc i64 %add2438 to i8
  %conv2440 = zext i8 %conv2439 to i32
  %408 = load i64, i64* %alloc, align 8
  %conv2441 = trunc i64 %408 to i8
  %conv2442 = zext i8 %conv2441 to i32
  %add2443 = add nsw i32 %conv2440, %conv2442
  %sub2444 = sub nsw i32 %add2443, -128
  %conv2445 = trunc i32 %sub2444 to i8
  %conv2446 = sext i8 %conv2445 to i32
  %add2447 = add nsw i32 %conv2446, -128
  br label %cond.end.2448

cond.end.2448:                                    ; preds = %cond.false.2437, %cond.true.2428
  %cond2449 = phi i32 [ %conv2436, %cond.true.2428 ], [ %add2447, %cond.false.2437 ]
  %conv2450 = sext i32 %cond2449 to i64
  store i64 %conv2450, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.2451:                                  ; preds = %lor.lhs.false.2410
  %409 = load i64, i64* %len, align 8
  %add2452 = add nsw i64 %409, 1
  %conv2453 = trunc i64 %add2452 to i8
  %conv2454 = zext i8 %conv2453 to i32
  %410 = load i64, i64* %alloc, align 8
  %conv2455 = trunc i64 %410 to i8
  %conv2456 = zext i8 %conv2455 to i32
  %add2457 = add nsw i32 %conv2454, %conv2456
  %cmp2458 = icmp sle i32 %add2457, 127
  br i1 %cmp2458, label %cond.true.2460, label %cond.false.2469

cond.true.2460:                                   ; preds = %cond.false.2451
  %411 = load i64, i64* %len, align 8
  %add2461 = add nsw i64 %411, 1
  %conv2462 = trunc i64 %add2461 to i8
  %conv2463 = zext i8 %conv2462 to i32
  %412 = load i64, i64* %alloc, align 8
  %conv2464 = trunc i64 %412 to i8
  %conv2465 = zext i8 %conv2464 to i32
  %add2466 = add nsw i32 %conv2463, %conv2465
  %conv2467 = trunc i32 %add2466 to i8
  %conv2468 = sext i8 %conv2467 to i32
  br label %cond.end.2480

cond.false.2469:                                  ; preds = %cond.false.2451
  %413 = load i64, i64* %len, align 8
  %add2470 = add nsw i64 %413, 1
  %conv2471 = trunc i64 %add2470 to i8
  %conv2472 = zext i8 %conv2471 to i32
  %414 = load i64, i64* %alloc, align 8
  %conv2473 = trunc i64 %414 to i8
  %conv2474 = zext i8 %conv2473 to i32
  %add2475 = add nsw i32 %conv2472, %conv2474
  %sub2476 = sub nsw i32 %add2475, -128
  %conv2477 = trunc i32 %sub2476 to i8
  %conv2478 = sext i8 %conv2477 to i32
  %add2479 = add nsw i32 %conv2478, -128
  br label %cond.end.2480

cond.end.2480:                                    ; preds = %cond.false.2469, %cond.true.2460
  %cond2481 = phi i32 [ %conv2468, %cond.true.2460 ], [ %add2479, %cond.false.2469 ]
  %conv2482 = sext i32 %cond2481 to i64
  store i64 %conv2482, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.2483:                                  ; preds = %cond.true.2179
  %415 = load i64, i64* %alloc, align 8
  %mul2484 = mul nsw i64 0, %415
  %416 = load i64, i64* %len, align 8
  %add2485 = add nsw i64 %416, 1
  %add2486 = add nsw i64 %mul2484, %add2485
  %mul2487 = mul nsw i64 0, %add2486
  %sub2488 = sub nsw i64 %mul2487, 1
  %cmp2489 = icmp slt i64 %sub2488, 0
  br i1 %cmp2489, label %cond.true.2491, label %cond.false.2512

cond.true.2491:                                   ; preds = %cond.false.2483
  %417 = load i64, i64* %alloc, align 8
  %mul2492 = mul nsw i64 0, %417
  %418 = load i64, i64* %len, align 8
  %add2493 = add nsw i64 %418, 1
  %add2494 = add nsw i64 %mul2492, %add2493
  %mul2495 = mul nsw i64 0, %add2494
  %add2496 = add nsw i64 %mul2495, 0
  %neg2497 = xor i64 %add2496, -1
  %cmp2498 = icmp eq i64 %neg2497, -1
  %conv2499 = zext i1 %cmp2498 to i32
  %sub2500 = sub nsw i32 0, %conv2499
  %conv2501 = sext i32 %sub2500 to i64
  %419 = load i64, i64* %alloc, align 8
  %mul2502 = mul nsw i64 0, %419
  %420 = load i64, i64* %len, align 8
  %add2503 = add nsw i64 %420, 1
  %add2504 = add nsw i64 %mul2502, %add2503
  %mul2505 = mul nsw i64 0, %add2504
  %add2506 = add nsw i64 %mul2505, 1
  %shl2507 = shl i64 %add2506, 62
  %sub2508 = sub nsw i64 %shl2507, 1
  %mul2509 = mul nsw i64 %sub2508, 2
  %add2510 = add nsw i64 %mul2509, 1
  %sub2511 = sub nsw i64 %conv2501, %add2510
  br label %cond.end.2518

cond.false.2512:                                  ; preds = %cond.false.2483
  %421 = load i64, i64* %alloc, align 8
  %mul2513 = mul nsw i64 0, %421
  %422 = load i64, i64* %len, align 8
  %add2514 = add nsw i64 %422, 1
  %add2515 = add nsw i64 %mul2513, %add2514
  %mul2516 = mul nsw i64 0, %add2515
  %add2517 = add nsw i64 %mul2516, 0
  br label %cond.end.2518

cond.end.2518:                                    ; preds = %cond.false.2512, %cond.true.2491
  %cond2519 = phi i64 [ %sub2511, %cond.true.2491 ], [ %add2517, %cond.false.2512 ]
  %cmp2520 = icmp slt i64 %cond2519, 0
  br i1 %cmp2520, label %cond.true.2522, label %cond.false.2596

cond.true.2522:                                   ; preds = %cond.end.2518
  %423 = load i64, i64* %alloc, align 8
  %cmp2523 = icmp slt i64 %423, 0
  br i1 %cmp2523, label %cond.true.2525, label %cond.false.2566

cond.true.2525:                                   ; preds = %cond.true.2522
  %424 = load i64, i64* %len, align 8
  %add2526 = add nsw i64 %424, 1
  %425 = load i64, i64* %alloc, align 8
  %mul2527 = mul nsw i64 0, %425
  %426 = load i64, i64* %len, align 8
  %add2528 = add nsw i64 %426, 1
  %add2529 = add nsw i64 %mul2527, %add2528
  %mul2530 = mul nsw i64 0, %add2529
  %sub2531 = sub nsw i64 %mul2530, 1
  %cmp2532 = icmp slt i64 %sub2531, 0
  br i1 %cmp2532, label %cond.true.2534, label %cond.false.2555

cond.true.2534:                                   ; preds = %cond.true.2525
  %427 = load i64, i64* %alloc, align 8
  %mul2535 = mul nsw i64 0, %427
  %428 = load i64, i64* %len, align 8
  %add2536 = add nsw i64 %428, 1
  %add2537 = add nsw i64 %mul2535, %add2536
  %mul2538 = mul nsw i64 0, %add2537
  %add2539 = add nsw i64 %mul2538, 0
  %neg2540 = xor i64 %add2539, -1
  %cmp2541 = icmp eq i64 %neg2540, -1
  %conv2542 = zext i1 %cmp2541 to i32
  %sub2543 = sub nsw i32 0, %conv2542
  %conv2544 = sext i32 %sub2543 to i64
  %429 = load i64, i64* %alloc, align 8
  %mul2545 = mul nsw i64 0, %429
  %430 = load i64, i64* %len, align 8
  %add2546 = add nsw i64 %430, 1
  %add2547 = add nsw i64 %mul2545, %add2546
  %mul2548 = mul nsw i64 0, %add2547
  %add2549 = add nsw i64 %mul2548, 1
  %shl2550 = shl i64 %add2549, 62
  %sub2551 = sub nsw i64 %shl2550, 1
  %mul2552 = mul nsw i64 %sub2551, 2
  %add2553 = add nsw i64 %mul2552, 1
  %sub2554 = sub nsw i64 %conv2544, %add2553
  br label %cond.end.2561

cond.false.2555:                                  ; preds = %cond.true.2525
  %431 = load i64, i64* %alloc, align 8
  %mul2556 = mul nsw i64 0, %431
  %432 = load i64, i64* %len, align 8
  %add2557 = add nsw i64 %432, 1
  %add2558 = add nsw i64 %mul2556, %add2557
  %mul2559 = mul nsw i64 0, %add2558
  %add2560 = add nsw i64 %mul2559, 0
  br label %cond.end.2561

cond.end.2561:                                    ; preds = %cond.false.2555, %cond.true.2534
  %cond2562 = phi i64 [ %sub2554, %cond.true.2534 ], [ %add2560, %cond.false.2555 ]
  %433 = load i64, i64* %alloc, align 8
  %sub2563 = sub nsw i64 %cond2562, %433
  %cmp2564 = icmp slt i64 %add2526, %sub2563
  br i1 %cmp2564, label %cond.true.2636, label %lor.lhs.false.2619

cond.false.2566:                                  ; preds = %cond.true.2522
  %434 = load i64, i64* %alloc, align 8
  %mul2567 = mul nsw i64 0, %434
  %435 = load i64, i64* %len, align 8
  %add2568 = add nsw i64 %435, 1
  %add2569 = add nsw i64 %mul2567, %add2568
  %mul2570 = mul nsw i64 0, %add2569
  %sub2571 = sub nsw i64 %mul2570, 1
  %cmp2572 = icmp slt i64 %sub2571, 0
  br i1 %cmp2572, label %cond.true.2574, label %cond.false.2584

cond.true.2574:                                   ; preds = %cond.false.2566
  %436 = load i64, i64* %alloc, align 8
  %mul2575 = mul nsw i64 0, %436
  %437 = load i64, i64* %len, align 8
  %add2576 = add nsw i64 %437, 1
  %add2577 = add nsw i64 %mul2575, %add2576
  %mul2578 = mul nsw i64 0, %add2577
  %add2579 = add nsw i64 %mul2578, 1
  %shl2580 = shl i64 %add2579, 62
  %sub2581 = sub nsw i64 %shl2580, 1
  %mul2582 = mul nsw i64 %sub2581, 2
  %add2583 = add nsw i64 %mul2582, 1
  br label %cond.end.2590

cond.false.2584:                                  ; preds = %cond.false.2566
  %438 = load i64, i64* %alloc, align 8
  %mul2585 = mul nsw i64 0, %438
  %439 = load i64, i64* %len, align 8
  %add2586 = add nsw i64 %439, 1
  %add2587 = add nsw i64 %mul2585, %add2586
  %mul2588 = mul nsw i64 0, %add2587
  %sub2589 = sub nsw i64 %mul2588, 1
  br label %cond.end.2590

cond.end.2590:                                    ; preds = %cond.false.2584, %cond.true.2574
  %cond2591 = phi i64 [ %add2583, %cond.true.2574 ], [ %sub2589, %cond.false.2584 ]
  %440 = load i64, i64* %alloc, align 8
  %sub2592 = sub nsw i64 %cond2591, %440
  %441 = load i64, i64* %len, align 8
  %add2593 = add nsw i64 %441, 1
  %cmp2594 = icmp slt i64 %sub2592, %add2593
  br i1 %cmp2594, label %cond.true.2636, label %lor.lhs.false.2619

cond.false.2596:                                  ; preds = %cond.end.2518
  %442 = load i64, i64* %len, align 8
  %add2597 = add nsw i64 %442, 1
  %cmp2598 = icmp slt i64 %add2597, 0
  br i1 %cmp2598, label %cond.true.2600, label %cond.false.2605

cond.true.2600:                                   ; preds = %cond.false.2596
  %443 = load i64, i64* %alloc, align 8
  %444 = load i64, i64* %len, align 8
  %add2601 = add nsw i64 %444, 1
  %445 = load i64, i64* %alloc, align 8
  %add2602 = add nsw i64 %add2601, %445
  %cmp2603 = icmp sle i64 %443, %add2602
  br i1 %cmp2603, label %cond.true.2636, label %lor.lhs.false.2619

cond.false.2605:                                  ; preds = %cond.false.2596
  %446 = load i64, i64* %alloc, align 8
  %cmp2606 = icmp slt i64 %446, 0
  br i1 %cmp2606, label %cond.true.2608, label %cond.false.2614

cond.true.2608:                                   ; preds = %cond.false.2605
  %447 = load i64, i64* %len, align 8
  %add2609 = add nsw i64 %447, 1
  %448 = load i64, i64* %len, align 8
  %add2610 = add nsw i64 %448, 1
  %449 = load i64, i64* %alloc, align 8
  %add2611 = add nsw i64 %add2610, %449
  %cmp2612 = icmp sle i64 %add2609, %add2611
  br i1 %cmp2612, label %cond.true.2636, label %lor.lhs.false.2619

cond.false.2614:                                  ; preds = %cond.false.2605
  %450 = load i64, i64* %len, align 8
  %add2615 = add nsw i64 %450, 1
  %451 = load i64, i64* %alloc, align 8
  %add2616 = add nsw i64 %add2615, %451
  %452 = load i64, i64* %alloc, align 8
  %cmp2617 = icmp slt i64 %add2616, %452
  br i1 %cmp2617, label %cond.true.2636, label %lor.lhs.false.2619

lor.lhs.false.2619:                               ; preds = %cond.false.2614, %cond.true.2608, %cond.true.2600, %cond.end.2590, %cond.end.2561
  %453 = load i64, i64* %len, align 8
  %add2620 = add nsw i64 %453, 1
  %454 = load i64, i64* %alloc, align 8
  %add2621 = add nsw i64 %add2620, %454
  %mul2622 = mul nsw i64 0, %add2621
  %sub2623 = sub nsw i64 %mul2622, 1
  %cmp2624 = icmp slt i64 %sub2623, 0
  br i1 %cmp2624, label %land.lhs.true.2626, label %lor.lhs.false.2631

land.lhs.true.2626:                               ; preds = %lor.lhs.false.2619
  %455 = load i64, i64* %len, align 8
  %add2627 = add nsw i64 %455, 1
  %456 = load i64, i64* %alloc, align 8
  %add2628 = add nsw i64 %add2627, %456
  %cmp2629 = icmp slt i64 %add2628, -128
  br i1 %cmp2629, label %cond.true.2636, label %lor.lhs.false.2631

lor.lhs.false.2631:                               ; preds = %land.lhs.true.2626, %lor.lhs.false.2619
  %457 = load i64, i64* %len, align 8
  %add2632 = add nsw i64 %457, 1
  %458 = load i64, i64* %alloc, align 8
  %add2633 = add nsw i64 %add2632, %458
  %cmp2634 = icmp slt i64 127, %add2633
  br i1 %cmp2634, label %cond.true.2636, label %cond.false.2668

cond.true.2636:                                   ; preds = %lor.lhs.false.2631, %land.lhs.true.2626, %cond.false.2614, %cond.true.2608, %cond.true.2600, %cond.end.2590, %cond.end.2561
  %459 = load i64, i64* %len, align 8
  %add2637 = add nsw i64 %459, 1
  %conv2638 = trunc i64 %add2637 to i8
  %conv2639 = zext i8 %conv2638 to i32
  %460 = load i64, i64* %alloc, align 8
  %conv2640 = trunc i64 %460 to i8
  %conv2641 = zext i8 %conv2640 to i32
  %add2642 = add nsw i32 %conv2639, %conv2641
  %cmp2643 = icmp sle i32 %add2642, 127
  br i1 %cmp2643, label %cond.true.2645, label %cond.false.2654

cond.true.2645:                                   ; preds = %cond.true.2636
  %461 = load i64, i64* %len, align 8
  %add2646 = add nsw i64 %461, 1
  %conv2647 = trunc i64 %add2646 to i8
  %conv2648 = zext i8 %conv2647 to i32
  %462 = load i64, i64* %alloc, align 8
  %conv2649 = trunc i64 %462 to i8
  %conv2650 = zext i8 %conv2649 to i32
  %add2651 = add nsw i32 %conv2648, %conv2650
  %conv2652 = trunc i32 %add2651 to i8
  %conv2653 = sext i8 %conv2652 to i32
  br label %cond.end.2665

cond.false.2654:                                  ; preds = %cond.true.2636
  %463 = load i64, i64* %len, align 8
  %add2655 = add nsw i64 %463, 1
  %conv2656 = trunc i64 %add2655 to i8
  %conv2657 = zext i8 %conv2656 to i32
  %464 = load i64, i64* %alloc, align 8
  %conv2658 = trunc i64 %464 to i8
  %conv2659 = zext i8 %conv2658 to i32
  %add2660 = add nsw i32 %conv2657, %conv2659
  %sub2661 = sub nsw i32 %add2660, -128
  %conv2662 = trunc i32 %sub2661 to i8
  %conv2663 = sext i8 %conv2662 to i32
  %add2664 = add nsw i32 %conv2663, -128
  br label %cond.end.2665

cond.end.2665:                                    ; preds = %cond.false.2654, %cond.true.2645
  %cond2666 = phi i32 [ %conv2653, %cond.true.2645 ], [ %add2664, %cond.false.2654 ]
  %conv2667 = sext i32 %cond2666 to i64
  store i64 %conv2667, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.2668:                                  ; preds = %lor.lhs.false.2631
  %465 = load i64, i64* %len, align 8
  %add2669 = add nsw i64 %465, 1
  %conv2670 = trunc i64 %add2669 to i8
  %conv2671 = zext i8 %conv2670 to i32
  %466 = load i64, i64* %alloc, align 8
  %conv2672 = trunc i64 %466 to i8
  %conv2673 = zext i8 %conv2672 to i32
  %add2674 = add nsw i32 %conv2671, %conv2673
  %cmp2675 = icmp sle i32 %add2674, 127
  br i1 %cmp2675, label %cond.true.2677, label %cond.false.2686

cond.true.2677:                                   ; preds = %cond.false.2668
  %467 = load i64, i64* %len, align 8
  %add2678 = add nsw i64 %467, 1
  %conv2679 = trunc i64 %add2678 to i8
  %conv2680 = zext i8 %conv2679 to i32
  %468 = load i64, i64* %alloc, align 8
  %conv2681 = trunc i64 %468 to i8
  %conv2682 = zext i8 %conv2681 to i32
  %add2683 = add nsw i32 %conv2680, %conv2682
  %conv2684 = trunc i32 %add2683 to i8
  %conv2685 = sext i8 %conv2684 to i32
  br label %cond.end.2697

cond.false.2686:                                  ; preds = %cond.false.2668
  %469 = load i64, i64* %len, align 8
  %add2687 = add nsw i64 %469, 1
  %conv2688 = trunc i64 %add2687 to i8
  %conv2689 = zext i8 %conv2688 to i32
  %470 = load i64, i64* %alloc, align 8
  %conv2690 = trunc i64 %470 to i8
  %conv2691 = zext i8 %conv2690 to i32
  %add2692 = add nsw i32 %conv2689, %conv2691
  %sub2693 = sub nsw i32 %add2692, -128
  %conv2694 = trunc i32 %sub2693 to i8
  %conv2695 = sext i8 %conv2694 to i32
  %add2696 = add nsw i32 %conv2695, -128
  br label %cond.end.2697

cond.end.2697:                                    ; preds = %cond.false.2686, %cond.true.2677
  %cond2698 = phi i32 [ %conv2685, %cond.true.2677 ], [ %add2696, %cond.false.2686 ]
  %conv2699 = sext i32 %cond2698 to i64
  store i64 %conv2699, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.2700:                                  ; preds = %lor.lhs.false.2178
  br i1 false, label %cond.true.2701, label %cond.false.3222

cond.true.2701:                                   ; preds = %cond.false.2700
  br i1 false, label %cond.true.2702, label %cond.false.3005

cond.true.2702:                                   ; preds = %cond.true.2701
  %471 = load i64, i64* %alloc, align 8
  %conv2703 = trunc i64 %471 to i16
  %conv2704 = sext i16 %conv2703 to i32
  %mul2705 = mul nsw i32 0, %conv2704
  %472 = load i64, i64* %len, align 8
  %add2706 = add nsw i64 %472, 1
  %conv2707 = trunc i64 %add2706 to i16
  %conv2708 = sext i16 %conv2707 to i32
  %add2709 = add nsw i32 %mul2705, %conv2708
  %mul2710 = mul nsw i32 0, %add2709
  %sub2711 = sub nsw i32 %mul2710, 1
  %cmp2712 = icmp slt i32 %sub2711, 0
  br i1 %cmp2712, label %cond.true.2714, label %cond.false.2742

cond.true.2714:                                   ; preds = %cond.true.2702
  %473 = load i64, i64* %alloc, align 8
  %conv2715 = trunc i64 %473 to i16
  %conv2716 = sext i16 %conv2715 to i32
  %mul2717 = mul nsw i32 0, %conv2716
  %474 = load i64, i64* %len, align 8
  %add2718 = add nsw i64 %474, 1
  %conv2719 = trunc i64 %add2718 to i16
  %conv2720 = sext i16 %conv2719 to i32
  %add2721 = add nsw i32 %mul2717, %conv2720
  %mul2722 = mul nsw i32 0, %add2721
  %add2723 = add nsw i32 %mul2722, 0
  %neg2724 = xor i32 %add2723, -1
  %cmp2725 = icmp eq i32 %neg2724, -1
  %conv2726 = zext i1 %cmp2725 to i32
  %sub2727 = sub nsw i32 0, %conv2726
  %475 = load i64, i64* %alloc, align 8
  %conv2728 = trunc i64 %475 to i16
  %conv2729 = sext i16 %conv2728 to i32
  %mul2730 = mul nsw i32 0, %conv2729
  %476 = load i64, i64* %len, align 8
  %add2731 = add nsw i64 %476, 1
  %conv2732 = trunc i64 %add2731 to i16
  %conv2733 = sext i16 %conv2732 to i32
  %add2734 = add nsw i32 %mul2730, %conv2733
  %mul2735 = mul nsw i32 0, %add2734
  %add2736 = add nsw i32 %mul2735, 1
  %shl2737 = shl i32 %add2736, 30
  %sub2738 = sub nsw i32 %shl2737, 1
  %mul2739 = mul nsw i32 %sub2738, 2
  %add2740 = add nsw i32 %mul2739, 1
  %sub2741 = sub nsw i32 %sub2727, %add2740
  br label %cond.end.2752

cond.false.2742:                                  ; preds = %cond.true.2702
  %477 = load i64, i64* %alloc, align 8
  %conv2743 = trunc i64 %477 to i16
  %conv2744 = sext i16 %conv2743 to i32
  %mul2745 = mul nsw i32 0, %conv2744
  %478 = load i64, i64* %len, align 8
  %add2746 = add nsw i64 %478, 1
  %conv2747 = trunc i64 %add2746 to i16
  %conv2748 = sext i16 %conv2747 to i32
  %add2749 = add nsw i32 %mul2745, %conv2748
  %mul2750 = mul nsw i32 0, %add2749
  %add2751 = add nsw i32 %mul2750, 0
  br label %cond.end.2752

cond.end.2752:                                    ; preds = %cond.false.2742, %cond.true.2714
  %cond2753 = phi i32 [ %sub2741, %cond.true.2714 ], [ %add2751, %cond.false.2742 ]
  %cmp2754 = icmp slt i32 %cond2753, 0
  br i1 %cmp2754, label %cond.true.2756, label %cond.false.2867

cond.true.2756:                                   ; preds = %cond.end.2752
  %479 = load i64, i64* %alloc, align 8
  %conv2757 = trunc i64 %479 to i16
  %conv2758 = sext i16 %conv2757 to i32
  %cmp2759 = icmp slt i32 %conv2758, 0
  br i1 %cmp2759, label %cond.true.2761, label %cond.false.2821

cond.true.2761:                                   ; preds = %cond.true.2756
  %480 = load i64, i64* %len, align 8
  %add2762 = add nsw i64 %480, 1
  %conv2763 = trunc i64 %add2762 to i16
  %conv2764 = sext i16 %conv2763 to i32
  %481 = load i64, i64* %alloc, align 8
  %conv2765 = trunc i64 %481 to i16
  %conv2766 = sext i16 %conv2765 to i32
  %mul2767 = mul nsw i32 0, %conv2766
  %482 = load i64, i64* %len, align 8
  %add2768 = add nsw i64 %482, 1
  %conv2769 = trunc i64 %add2768 to i16
  %conv2770 = sext i16 %conv2769 to i32
  %add2771 = add nsw i32 %mul2767, %conv2770
  %mul2772 = mul nsw i32 0, %add2771
  %sub2773 = sub nsw i32 %mul2772, 1
  %cmp2774 = icmp slt i32 %sub2773, 0
  br i1 %cmp2774, label %cond.true.2776, label %cond.false.2804

cond.true.2776:                                   ; preds = %cond.true.2761
  %483 = load i64, i64* %alloc, align 8
  %conv2777 = trunc i64 %483 to i16
  %conv2778 = sext i16 %conv2777 to i32
  %mul2779 = mul nsw i32 0, %conv2778
  %484 = load i64, i64* %len, align 8
  %add2780 = add nsw i64 %484, 1
  %conv2781 = trunc i64 %add2780 to i16
  %conv2782 = sext i16 %conv2781 to i32
  %add2783 = add nsw i32 %mul2779, %conv2782
  %mul2784 = mul nsw i32 0, %add2783
  %add2785 = add nsw i32 %mul2784, 0
  %neg2786 = xor i32 %add2785, -1
  %cmp2787 = icmp eq i32 %neg2786, -1
  %conv2788 = zext i1 %cmp2787 to i32
  %sub2789 = sub nsw i32 0, %conv2788
  %485 = load i64, i64* %alloc, align 8
  %conv2790 = trunc i64 %485 to i16
  %conv2791 = sext i16 %conv2790 to i32
  %mul2792 = mul nsw i32 0, %conv2791
  %486 = load i64, i64* %len, align 8
  %add2793 = add nsw i64 %486, 1
  %conv2794 = trunc i64 %add2793 to i16
  %conv2795 = sext i16 %conv2794 to i32
  %add2796 = add nsw i32 %mul2792, %conv2795
  %mul2797 = mul nsw i32 0, %add2796
  %add2798 = add nsw i32 %mul2797, 1
  %shl2799 = shl i32 %add2798, 30
  %sub2800 = sub nsw i32 %shl2799, 1
  %mul2801 = mul nsw i32 %sub2800, 2
  %add2802 = add nsw i32 %mul2801, 1
  %sub2803 = sub nsw i32 %sub2789, %add2802
  br label %cond.end.2814

cond.false.2804:                                  ; preds = %cond.true.2761
  %487 = load i64, i64* %alloc, align 8
  %conv2805 = trunc i64 %487 to i16
  %conv2806 = sext i16 %conv2805 to i32
  %mul2807 = mul nsw i32 0, %conv2806
  %488 = load i64, i64* %len, align 8
  %add2808 = add nsw i64 %488, 1
  %conv2809 = trunc i64 %add2808 to i16
  %conv2810 = sext i16 %conv2809 to i32
  %add2811 = add nsw i32 %mul2807, %conv2810
  %mul2812 = mul nsw i32 0, %add2811
  %add2813 = add nsw i32 %mul2812, 0
  br label %cond.end.2814

cond.end.2814:                                    ; preds = %cond.false.2804, %cond.true.2776
  %cond2815 = phi i32 [ %sub2803, %cond.true.2776 ], [ %add2813, %cond.false.2804 ]
  %489 = load i64, i64* %alloc, align 8
  %conv2816 = trunc i64 %489 to i16
  %conv2817 = sext i16 %conv2816 to i32
  %sub2818 = sub nsw i32 %cond2815, %conv2817
  %cmp2819 = icmp slt i32 %conv2764, %sub2818
  br i1 %cmp2819, label %cond.true.2941, label %lor.lhs.false.2912

cond.false.2821:                                  ; preds = %cond.true.2756
  %490 = load i64, i64* %alloc, align 8
  %conv2822 = trunc i64 %490 to i16
  %conv2823 = sext i16 %conv2822 to i32
  %mul2824 = mul nsw i32 0, %conv2823
  %491 = load i64, i64* %len, align 8
  %add2825 = add nsw i64 %491, 1
  %conv2826 = trunc i64 %add2825 to i16
  %conv2827 = sext i16 %conv2826 to i32
  %add2828 = add nsw i32 %mul2824, %conv2827
  %mul2829 = mul nsw i32 0, %add2828
  %sub2830 = sub nsw i32 %mul2829, 1
  %cmp2831 = icmp slt i32 %sub2830, 0
  br i1 %cmp2831, label %cond.true.2833, label %cond.false.2847

cond.true.2833:                                   ; preds = %cond.false.2821
  %492 = load i64, i64* %alloc, align 8
  %conv2834 = trunc i64 %492 to i16
  %conv2835 = sext i16 %conv2834 to i32
  %mul2836 = mul nsw i32 0, %conv2835
  %493 = load i64, i64* %len, align 8
  %add2837 = add nsw i64 %493, 1
  %conv2838 = trunc i64 %add2837 to i16
  %conv2839 = sext i16 %conv2838 to i32
  %add2840 = add nsw i32 %mul2836, %conv2839
  %mul2841 = mul nsw i32 0, %add2840
  %add2842 = add nsw i32 %mul2841, 1
  %shl2843 = shl i32 %add2842, 30
  %sub2844 = sub nsw i32 %shl2843, 1
  %mul2845 = mul nsw i32 %sub2844, 2
  %add2846 = add nsw i32 %mul2845, 1
  br label %cond.end.2857

cond.false.2847:                                  ; preds = %cond.false.2821
  %494 = load i64, i64* %alloc, align 8
  %conv2848 = trunc i64 %494 to i16
  %conv2849 = sext i16 %conv2848 to i32
  %mul2850 = mul nsw i32 0, %conv2849
  %495 = load i64, i64* %len, align 8
  %add2851 = add nsw i64 %495, 1
  %conv2852 = trunc i64 %add2851 to i16
  %conv2853 = sext i16 %conv2852 to i32
  %add2854 = add nsw i32 %mul2850, %conv2853
  %mul2855 = mul nsw i32 0, %add2854
  %sub2856 = sub nsw i32 %mul2855, 1
  br label %cond.end.2857

cond.end.2857:                                    ; preds = %cond.false.2847, %cond.true.2833
  %cond2858 = phi i32 [ %add2846, %cond.true.2833 ], [ %sub2856, %cond.false.2847 ]
  %496 = load i64, i64* %alloc, align 8
  %conv2859 = trunc i64 %496 to i16
  %conv2860 = sext i16 %conv2859 to i32
  %sub2861 = sub nsw i32 %cond2858, %conv2860
  %497 = load i64, i64* %len, align 8
  %add2862 = add nsw i64 %497, 1
  %conv2863 = trunc i64 %add2862 to i16
  %conv2864 = sext i16 %conv2863 to i32
  %cmp2865 = icmp slt i32 %sub2861, %conv2864
  br i1 %cmp2865, label %cond.true.2941, label %lor.lhs.false.2912

cond.false.2867:                                  ; preds = %cond.end.2752
  %498 = load i64, i64* %len, align 8
  %add2868 = add nsw i64 %498, 1
  %conv2869 = trunc i64 %add2868 to i16
  %conv2870 = sext i16 %conv2869 to i32
  %cmp2871 = icmp slt i32 %conv2870, 0
  br i1 %cmp2871, label %cond.true.2873, label %cond.false.2884

cond.true.2873:                                   ; preds = %cond.false.2867
  %499 = load i64, i64* %alloc, align 8
  %conv2874 = trunc i64 %499 to i16
  %conv2875 = sext i16 %conv2874 to i32
  %500 = load i64, i64* %len, align 8
  %add2876 = add nsw i64 %500, 1
  %conv2877 = trunc i64 %add2876 to i16
  %conv2878 = sext i16 %conv2877 to i32
  %501 = load i64, i64* %alloc, align 8
  %conv2879 = trunc i64 %501 to i16
  %conv2880 = sext i16 %conv2879 to i32
  %add2881 = add nsw i32 %conv2878, %conv2880
  %cmp2882 = icmp sle i32 %conv2875, %add2881
  br i1 %cmp2882, label %cond.true.2941, label %lor.lhs.false.2912

cond.false.2884:                                  ; preds = %cond.false.2867
  %502 = load i64, i64* %alloc, align 8
  %conv2885 = trunc i64 %502 to i16
  %conv2886 = sext i16 %conv2885 to i32
  %cmp2887 = icmp slt i32 %conv2886, 0
  br i1 %cmp2887, label %cond.true.2889, label %cond.false.2901

cond.true.2889:                                   ; preds = %cond.false.2884
  %503 = load i64, i64* %len, align 8
  %add2890 = add nsw i64 %503, 1
  %conv2891 = trunc i64 %add2890 to i16
  %conv2892 = sext i16 %conv2891 to i32
  %504 = load i64, i64* %len, align 8
  %add2893 = add nsw i64 %504, 1
  %conv2894 = trunc i64 %add2893 to i16
  %conv2895 = sext i16 %conv2894 to i32
  %505 = load i64, i64* %alloc, align 8
  %conv2896 = trunc i64 %505 to i16
  %conv2897 = sext i16 %conv2896 to i32
  %add2898 = add nsw i32 %conv2895, %conv2897
  %cmp2899 = icmp sle i32 %conv2892, %add2898
  br i1 %cmp2899, label %cond.true.2941, label %lor.lhs.false.2912

cond.false.2901:                                  ; preds = %cond.false.2884
  %506 = load i64, i64* %len, align 8
  %add2902 = add nsw i64 %506, 1
  %conv2903 = trunc i64 %add2902 to i16
  %conv2904 = sext i16 %conv2903 to i32
  %507 = load i64, i64* %alloc, align 8
  %conv2905 = trunc i64 %507 to i16
  %conv2906 = sext i16 %conv2905 to i32
  %add2907 = add nsw i32 %conv2904, %conv2906
  %508 = load i64, i64* %alloc, align 8
  %conv2908 = trunc i64 %508 to i16
  %conv2909 = sext i16 %conv2908 to i32
  %cmp2910 = icmp slt i32 %add2907, %conv2909
  br i1 %cmp2910, label %cond.true.2941, label %lor.lhs.false.2912

lor.lhs.false.2912:                               ; preds = %cond.false.2901, %cond.true.2889, %cond.true.2873, %cond.end.2857, %cond.end.2814
  %509 = load i64, i64* %len, align 8
  %add2913 = add nsw i64 %509, 1
  %conv2914 = trunc i64 %add2913 to i16
  %conv2915 = sext i16 %conv2914 to i32
  %510 = load i64, i64* %alloc, align 8
  %conv2916 = trunc i64 %510 to i16
  %conv2917 = sext i16 %conv2916 to i32
  %add2918 = add nsw i32 %conv2915, %conv2917
  %mul2919 = mul nsw i32 0, %add2918
  %sub2920 = sub nsw i32 %mul2919, 1
  %cmp2921 = icmp slt i32 %sub2920, 0
  br i1 %cmp2921, label %land.lhs.true.2923, label %lor.lhs.false.2932

land.lhs.true.2923:                               ; preds = %lor.lhs.false.2912
  %511 = load i64, i64* %len, align 8
  %add2924 = add nsw i64 %511, 1
  %conv2925 = trunc i64 %add2924 to i16
  %conv2926 = sext i16 %conv2925 to i32
  %512 = load i64, i64* %alloc, align 8
  %conv2927 = trunc i64 %512 to i16
  %conv2928 = sext i16 %conv2927 to i32
  %add2929 = add nsw i32 %conv2926, %conv2928
  %cmp2930 = icmp slt i32 %add2929, -32768
  br i1 %cmp2930, label %cond.true.2941, label %lor.lhs.false.2932

lor.lhs.false.2932:                               ; preds = %land.lhs.true.2923, %lor.lhs.false.2912
  %513 = load i64, i64* %len, align 8
  %add2933 = add nsw i64 %513, 1
  %conv2934 = trunc i64 %add2933 to i16
  %conv2935 = sext i16 %conv2934 to i32
  %514 = load i64, i64* %alloc, align 8
  %conv2936 = trunc i64 %514 to i16
  %conv2937 = sext i16 %conv2936 to i32
  %add2938 = add nsw i32 %conv2935, %conv2937
  %cmp2939 = icmp slt i32 32767, %add2938
  br i1 %cmp2939, label %cond.true.2941, label %cond.false.2973

cond.true.2941:                                   ; preds = %lor.lhs.false.2932, %land.lhs.true.2923, %cond.false.2901, %cond.true.2889, %cond.true.2873, %cond.end.2857, %cond.end.2814
  %515 = load i64, i64* %len, align 8
  %add2942 = add nsw i64 %515, 1
  %conv2943 = trunc i64 %add2942 to i16
  %conv2944 = zext i16 %conv2943 to i32
  %516 = load i64, i64* %alloc, align 8
  %conv2945 = trunc i64 %516 to i16
  %conv2946 = zext i16 %conv2945 to i32
  %add2947 = add nsw i32 %conv2944, %conv2946
  %cmp2948 = icmp sle i32 %add2947, 32767
  br i1 %cmp2948, label %cond.true.2950, label %cond.false.2959

cond.true.2950:                                   ; preds = %cond.true.2941
  %517 = load i64, i64* %len, align 8
  %add2951 = add nsw i64 %517, 1
  %conv2952 = trunc i64 %add2951 to i16
  %conv2953 = zext i16 %conv2952 to i32
  %518 = load i64, i64* %alloc, align 8
  %conv2954 = trunc i64 %518 to i16
  %conv2955 = zext i16 %conv2954 to i32
  %add2956 = add nsw i32 %conv2953, %conv2955
  %conv2957 = trunc i32 %add2956 to i16
  %conv2958 = sext i16 %conv2957 to i32
  br label %cond.end.2970

cond.false.2959:                                  ; preds = %cond.true.2941
  %519 = load i64, i64* %len, align 8
  %add2960 = add nsw i64 %519, 1
  %conv2961 = trunc i64 %add2960 to i16
  %conv2962 = zext i16 %conv2961 to i32
  %520 = load i64, i64* %alloc, align 8
  %conv2963 = trunc i64 %520 to i16
  %conv2964 = zext i16 %conv2963 to i32
  %add2965 = add nsw i32 %conv2962, %conv2964
  %sub2966 = sub nsw i32 %add2965, -32768
  %conv2967 = trunc i32 %sub2966 to i16
  %conv2968 = sext i16 %conv2967 to i32
  %add2969 = add nsw i32 %conv2968, -32768
  br label %cond.end.2970

cond.end.2970:                                    ; preds = %cond.false.2959, %cond.true.2950
  %cond2971 = phi i32 [ %conv2958, %cond.true.2950 ], [ %add2969, %cond.false.2959 ]
  %conv2972 = sext i32 %cond2971 to i64
  store i64 %conv2972, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.2973:                                  ; preds = %lor.lhs.false.2932
  %521 = load i64, i64* %len, align 8
  %add2974 = add nsw i64 %521, 1
  %conv2975 = trunc i64 %add2974 to i16
  %conv2976 = zext i16 %conv2975 to i32
  %522 = load i64, i64* %alloc, align 8
  %conv2977 = trunc i64 %522 to i16
  %conv2978 = zext i16 %conv2977 to i32
  %add2979 = add nsw i32 %conv2976, %conv2978
  %cmp2980 = icmp sle i32 %add2979, 32767
  br i1 %cmp2980, label %cond.true.2982, label %cond.false.2991

cond.true.2982:                                   ; preds = %cond.false.2973
  %523 = load i64, i64* %len, align 8
  %add2983 = add nsw i64 %523, 1
  %conv2984 = trunc i64 %add2983 to i16
  %conv2985 = zext i16 %conv2984 to i32
  %524 = load i64, i64* %alloc, align 8
  %conv2986 = trunc i64 %524 to i16
  %conv2987 = zext i16 %conv2986 to i32
  %add2988 = add nsw i32 %conv2985, %conv2987
  %conv2989 = trunc i32 %add2988 to i16
  %conv2990 = sext i16 %conv2989 to i32
  br label %cond.end.3002

cond.false.2991:                                  ; preds = %cond.false.2973
  %525 = load i64, i64* %len, align 8
  %add2992 = add nsw i64 %525, 1
  %conv2993 = trunc i64 %add2992 to i16
  %conv2994 = zext i16 %conv2993 to i32
  %526 = load i64, i64* %alloc, align 8
  %conv2995 = trunc i64 %526 to i16
  %conv2996 = zext i16 %conv2995 to i32
  %add2997 = add nsw i32 %conv2994, %conv2996
  %sub2998 = sub nsw i32 %add2997, -32768
  %conv2999 = trunc i32 %sub2998 to i16
  %conv3000 = sext i16 %conv2999 to i32
  %add3001 = add nsw i32 %conv3000, -32768
  br label %cond.end.3002

cond.end.3002:                                    ; preds = %cond.false.2991, %cond.true.2982
  %cond3003 = phi i32 [ %conv2990, %cond.true.2982 ], [ %add3001, %cond.false.2991 ]
  %conv3004 = sext i32 %cond3003 to i64
  store i64 %conv3004, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3005:                                  ; preds = %cond.true.2701
  %527 = load i64, i64* %alloc, align 8
  %mul3006 = mul nsw i64 0, %527
  %528 = load i64, i64* %len, align 8
  %add3007 = add nsw i64 %528, 1
  %add3008 = add nsw i64 %mul3006, %add3007
  %mul3009 = mul nsw i64 0, %add3008
  %sub3010 = sub nsw i64 %mul3009, 1
  %cmp3011 = icmp slt i64 %sub3010, 0
  br i1 %cmp3011, label %cond.true.3013, label %cond.false.3034

cond.true.3013:                                   ; preds = %cond.false.3005
  %529 = load i64, i64* %alloc, align 8
  %mul3014 = mul nsw i64 0, %529
  %530 = load i64, i64* %len, align 8
  %add3015 = add nsw i64 %530, 1
  %add3016 = add nsw i64 %mul3014, %add3015
  %mul3017 = mul nsw i64 0, %add3016
  %add3018 = add nsw i64 %mul3017, 0
  %neg3019 = xor i64 %add3018, -1
  %cmp3020 = icmp eq i64 %neg3019, -1
  %conv3021 = zext i1 %cmp3020 to i32
  %sub3022 = sub nsw i32 0, %conv3021
  %conv3023 = sext i32 %sub3022 to i64
  %531 = load i64, i64* %alloc, align 8
  %mul3024 = mul nsw i64 0, %531
  %532 = load i64, i64* %len, align 8
  %add3025 = add nsw i64 %532, 1
  %add3026 = add nsw i64 %mul3024, %add3025
  %mul3027 = mul nsw i64 0, %add3026
  %add3028 = add nsw i64 %mul3027, 1
  %shl3029 = shl i64 %add3028, 62
  %sub3030 = sub nsw i64 %shl3029, 1
  %mul3031 = mul nsw i64 %sub3030, 2
  %add3032 = add nsw i64 %mul3031, 1
  %sub3033 = sub nsw i64 %conv3023, %add3032
  br label %cond.end.3040

cond.false.3034:                                  ; preds = %cond.false.3005
  %533 = load i64, i64* %alloc, align 8
  %mul3035 = mul nsw i64 0, %533
  %534 = load i64, i64* %len, align 8
  %add3036 = add nsw i64 %534, 1
  %add3037 = add nsw i64 %mul3035, %add3036
  %mul3038 = mul nsw i64 0, %add3037
  %add3039 = add nsw i64 %mul3038, 0
  br label %cond.end.3040

cond.end.3040:                                    ; preds = %cond.false.3034, %cond.true.3013
  %cond3041 = phi i64 [ %sub3033, %cond.true.3013 ], [ %add3039, %cond.false.3034 ]
  %cmp3042 = icmp slt i64 %cond3041, 0
  br i1 %cmp3042, label %cond.true.3044, label %cond.false.3118

cond.true.3044:                                   ; preds = %cond.end.3040
  %535 = load i64, i64* %alloc, align 8
  %cmp3045 = icmp slt i64 %535, 0
  br i1 %cmp3045, label %cond.true.3047, label %cond.false.3088

cond.true.3047:                                   ; preds = %cond.true.3044
  %536 = load i64, i64* %len, align 8
  %add3048 = add nsw i64 %536, 1
  %537 = load i64, i64* %alloc, align 8
  %mul3049 = mul nsw i64 0, %537
  %538 = load i64, i64* %len, align 8
  %add3050 = add nsw i64 %538, 1
  %add3051 = add nsw i64 %mul3049, %add3050
  %mul3052 = mul nsw i64 0, %add3051
  %sub3053 = sub nsw i64 %mul3052, 1
  %cmp3054 = icmp slt i64 %sub3053, 0
  br i1 %cmp3054, label %cond.true.3056, label %cond.false.3077

cond.true.3056:                                   ; preds = %cond.true.3047
  %539 = load i64, i64* %alloc, align 8
  %mul3057 = mul nsw i64 0, %539
  %540 = load i64, i64* %len, align 8
  %add3058 = add nsw i64 %540, 1
  %add3059 = add nsw i64 %mul3057, %add3058
  %mul3060 = mul nsw i64 0, %add3059
  %add3061 = add nsw i64 %mul3060, 0
  %neg3062 = xor i64 %add3061, -1
  %cmp3063 = icmp eq i64 %neg3062, -1
  %conv3064 = zext i1 %cmp3063 to i32
  %sub3065 = sub nsw i32 0, %conv3064
  %conv3066 = sext i32 %sub3065 to i64
  %541 = load i64, i64* %alloc, align 8
  %mul3067 = mul nsw i64 0, %541
  %542 = load i64, i64* %len, align 8
  %add3068 = add nsw i64 %542, 1
  %add3069 = add nsw i64 %mul3067, %add3068
  %mul3070 = mul nsw i64 0, %add3069
  %add3071 = add nsw i64 %mul3070, 1
  %shl3072 = shl i64 %add3071, 62
  %sub3073 = sub nsw i64 %shl3072, 1
  %mul3074 = mul nsw i64 %sub3073, 2
  %add3075 = add nsw i64 %mul3074, 1
  %sub3076 = sub nsw i64 %conv3066, %add3075
  br label %cond.end.3083

cond.false.3077:                                  ; preds = %cond.true.3047
  %543 = load i64, i64* %alloc, align 8
  %mul3078 = mul nsw i64 0, %543
  %544 = load i64, i64* %len, align 8
  %add3079 = add nsw i64 %544, 1
  %add3080 = add nsw i64 %mul3078, %add3079
  %mul3081 = mul nsw i64 0, %add3080
  %add3082 = add nsw i64 %mul3081, 0
  br label %cond.end.3083

cond.end.3083:                                    ; preds = %cond.false.3077, %cond.true.3056
  %cond3084 = phi i64 [ %sub3076, %cond.true.3056 ], [ %add3082, %cond.false.3077 ]
  %545 = load i64, i64* %alloc, align 8
  %sub3085 = sub nsw i64 %cond3084, %545
  %cmp3086 = icmp slt i64 %add3048, %sub3085
  br i1 %cmp3086, label %cond.true.3158, label %lor.lhs.false.3141

cond.false.3088:                                  ; preds = %cond.true.3044
  %546 = load i64, i64* %alloc, align 8
  %mul3089 = mul nsw i64 0, %546
  %547 = load i64, i64* %len, align 8
  %add3090 = add nsw i64 %547, 1
  %add3091 = add nsw i64 %mul3089, %add3090
  %mul3092 = mul nsw i64 0, %add3091
  %sub3093 = sub nsw i64 %mul3092, 1
  %cmp3094 = icmp slt i64 %sub3093, 0
  br i1 %cmp3094, label %cond.true.3096, label %cond.false.3106

cond.true.3096:                                   ; preds = %cond.false.3088
  %548 = load i64, i64* %alloc, align 8
  %mul3097 = mul nsw i64 0, %548
  %549 = load i64, i64* %len, align 8
  %add3098 = add nsw i64 %549, 1
  %add3099 = add nsw i64 %mul3097, %add3098
  %mul3100 = mul nsw i64 0, %add3099
  %add3101 = add nsw i64 %mul3100, 1
  %shl3102 = shl i64 %add3101, 62
  %sub3103 = sub nsw i64 %shl3102, 1
  %mul3104 = mul nsw i64 %sub3103, 2
  %add3105 = add nsw i64 %mul3104, 1
  br label %cond.end.3112

cond.false.3106:                                  ; preds = %cond.false.3088
  %550 = load i64, i64* %alloc, align 8
  %mul3107 = mul nsw i64 0, %550
  %551 = load i64, i64* %len, align 8
  %add3108 = add nsw i64 %551, 1
  %add3109 = add nsw i64 %mul3107, %add3108
  %mul3110 = mul nsw i64 0, %add3109
  %sub3111 = sub nsw i64 %mul3110, 1
  br label %cond.end.3112

cond.end.3112:                                    ; preds = %cond.false.3106, %cond.true.3096
  %cond3113 = phi i64 [ %add3105, %cond.true.3096 ], [ %sub3111, %cond.false.3106 ]
  %552 = load i64, i64* %alloc, align 8
  %sub3114 = sub nsw i64 %cond3113, %552
  %553 = load i64, i64* %len, align 8
  %add3115 = add nsw i64 %553, 1
  %cmp3116 = icmp slt i64 %sub3114, %add3115
  br i1 %cmp3116, label %cond.true.3158, label %lor.lhs.false.3141

cond.false.3118:                                  ; preds = %cond.end.3040
  %554 = load i64, i64* %len, align 8
  %add3119 = add nsw i64 %554, 1
  %cmp3120 = icmp slt i64 %add3119, 0
  br i1 %cmp3120, label %cond.true.3122, label %cond.false.3127

cond.true.3122:                                   ; preds = %cond.false.3118
  %555 = load i64, i64* %alloc, align 8
  %556 = load i64, i64* %len, align 8
  %add3123 = add nsw i64 %556, 1
  %557 = load i64, i64* %alloc, align 8
  %add3124 = add nsw i64 %add3123, %557
  %cmp3125 = icmp sle i64 %555, %add3124
  br i1 %cmp3125, label %cond.true.3158, label %lor.lhs.false.3141

cond.false.3127:                                  ; preds = %cond.false.3118
  %558 = load i64, i64* %alloc, align 8
  %cmp3128 = icmp slt i64 %558, 0
  br i1 %cmp3128, label %cond.true.3130, label %cond.false.3136

cond.true.3130:                                   ; preds = %cond.false.3127
  %559 = load i64, i64* %len, align 8
  %add3131 = add nsw i64 %559, 1
  %560 = load i64, i64* %len, align 8
  %add3132 = add nsw i64 %560, 1
  %561 = load i64, i64* %alloc, align 8
  %add3133 = add nsw i64 %add3132, %561
  %cmp3134 = icmp sle i64 %add3131, %add3133
  br i1 %cmp3134, label %cond.true.3158, label %lor.lhs.false.3141

cond.false.3136:                                  ; preds = %cond.false.3127
  %562 = load i64, i64* %len, align 8
  %add3137 = add nsw i64 %562, 1
  %563 = load i64, i64* %alloc, align 8
  %add3138 = add nsw i64 %add3137, %563
  %564 = load i64, i64* %alloc, align 8
  %cmp3139 = icmp slt i64 %add3138, %564
  br i1 %cmp3139, label %cond.true.3158, label %lor.lhs.false.3141

lor.lhs.false.3141:                               ; preds = %cond.false.3136, %cond.true.3130, %cond.true.3122, %cond.end.3112, %cond.end.3083
  %565 = load i64, i64* %len, align 8
  %add3142 = add nsw i64 %565, 1
  %566 = load i64, i64* %alloc, align 8
  %add3143 = add nsw i64 %add3142, %566
  %mul3144 = mul nsw i64 0, %add3143
  %sub3145 = sub nsw i64 %mul3144, 1
  %cmp3146 = icmp slt i64 %sub3145, 0
  br i1 %cmp3146, label %land.lhs.true.3148, label %lor.lhs.false.3153

land.lhs.true.3148:                               ; preds = %lor.lhs.false.3141
  %567 = load i64, i64* %len, align 8
  %add3149 = add nsw i64 %567, 1
  %568 = load i64, i64* %alloc, align 8
  %add3150 = add nsw i64 %add3149, %568
  %cmp3151 = icmp slt i64 %add3150, -32768
  br i1 %cmp3151, label %cond.true.3158, label %lor.lhs.false.3153

lor.lhs.false.3153:                               ; preds = %land.lhs.true.3148, %lor.lhs.false.3141
  %569 = load i64, i64* %len, align 8
  %add3154 = add nsw i64 %569, 1
  %570 = load i64, i64* %alloc, align 8
  %add3155 = add nsw i64 %add3154, %570
  %cmp3156 = icmp slt i64 32767, %add3155
  br i1 %cmp3156, label %cond.true.3158, label %cond.false.3190

cond.true.3158:                                   ; preds = %lor.lhs.false.3153, %land.lhs.true.3148, %cond.false.3136, %cond.true.3130, %cond.true.3122, %cond.end.3112, %cond.end.3083
  %571 = load i64, i64* %len, align 8
  %add3159 = add nsw i64 %571, 1
  %conv3160 = trunc i64 %add3159 to i16
  %conv3161 = zext i16 %conv3160 to i32
  %572 = load i64, i64* %alloc, align 8
  %conv3162 = trunc i64 %572 to i16
  %conv3163 = zext i16 %conv3162 to i32
  %add3164 = add nsw i32 %conv3161, %conv3163
  %cmp3165 = icmp sle i32 %add3164, 32767
  br i1 %cmp3165, label %cond.true.3167, label %cond.false.3176

cond.true.3167:                                   ; preds = %cond.true.3158
  %573 = load i64, i64* %len, align 8
  %add3168 = add nsw i64 %573, 1
  %conv3169 = trunc i64 %add3168 to i16
  %conv3170 = zext i16 %conv3169 to i32
  %574 = load i64, i64* %alloc, align 8
  %conv3171 = trunc i64 %574 to i16
  %conv3172 = zext i16 %conv3171 to i32
  %add3173 = add nsw i32 %conv3170, %conv3172
  %conv3174 = trunc i32 %add3173 to i16
  %conv3175 = sext i16 %conv3174 to i32
  br label %cond.end.3187

cond.false.3176:                                  ; preds = %cond.true.3158
  %575 = load i64, i64* %len, align 8
  %add3177 = add nsw i64 %575, 1
  %conv3178 = trunc i64 %add3177 to i16
  %conv3179 = zext i16 %conv3178 to i32
  %576 = load i64, i64* %alloc, align 8
  %conv3180 = trunc i64 %576 to i16
  %conv3181 = zext i16 %conv3180 to i32
  %add3182 = add nsw i32 %conv3179, %conv3181
  %sub3183 = sub nsw i32 %add3182, -32768
  %conv3184 = trunc i32 %sub3183 to i16
  %conv3185 = sext i16 %conv3184 to i32
  %add3186 = add nsw i32 %conv3185, -32768
  br label %cond.end.3187

cond.end.3187:                                    ; preds = %cond.false.3176, %cond.true.3167
  %cond3188 = phi i32 [ %conv3175, %cond.true.3167 ], [ %add3186, %cond.false.3176 ]
  %conv3189 = sext i32 %cond3188 to i64
  store i64 %conv3189, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3190:                                  ; preds = %lor.lhs.false.3153
  %577 = load i64, i64* %len, align 8
  %add3191 = add nsw i64 %577, 1
  %conv3192 = trunc i64 %add3191 to i16
  %conv3193 = zext i16 %conv3192 to i32
  %578 = load i64, i64* %alloc, align 8
  %conv3194 = trunc i64 %578 to i16
  %conv3195 = zext i16 %conv3194 to i32
  %add3196 = add nsw i32 %conv3193, %conv3195
  %cmp3197 = icmp sle i32 %add3196, 32767
  br i1 %cmp3197, label %cond.true.3199, label %cond.false.3208

cond.true.3199:                                   ; preds = %cond.false.3190
  %579 = load i64, i64* %len, align 8
  %add3200 = add nsw i64 %579, 1
  %conv3201 = trunc i64 %add3200 to i16
  %conv3202 = zext i16 %conv3201 to i32
  %580 = load i64, i64* %alloc, align 8
  %conv3203 = trunc i64 %580 to i16
  %conv3204 = zext i16 %conv3203 to i32
  %add3205 = add nsw i32 %conv3202, %conv3204
  %conv3206 = trunc i32 %add3205 to i16
  %conv3207 = sext i16 %conv3206 to i32
  br label %cond.end.3219

cond.false.3208:                                  ; preds = %cond.false.3190
  %581 = load i64, i64* %len, align 8
  %add3209 = add nsw i64 %581, 1
  %conv3210 = trunc i64 %add3209 to i16
  %conv3211 = zext i16 %conv3210 to i32
  %582 = load i64, i64* %alloc, align 8
  %conv3212 = trunc i64 %582 to i16
  %conv3213 = zext i16 %conv3212 to i32
  %add3214 = add nsw i32 %conv3211, %conv3213
  %sub3215 = sub nsw i32 %add3214, -32768
  %conv3216 = trunc i32 %sub3215 to i16
  %conv3217 = sext i16 %conv3216 to i32
  %add3218 = add nsw i32 %conv3217, -32768
  br label %cond.end.3219

cond.end.3219:                                    ; preds = %cond.false.3208, %cond.true.3199
  %cond3220 = phi i32 [ %conv3207, %cond.true.3199 ], [ %add3218, %cond.false.3208 ]
  %conv3221 = sext i32 %cond3220 to i64
  store i64 %conv3221, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3222:                                  ; preds = %cond.false.2700
  br i1 false, label %cond.true.3223, label %cond.false.3660

cond.true.3223:                                   ; preds = %cond.false.3222
  br i1 false, label %cond.true.3224, label %cond.false.3463

cond.true.3224:                                   ; preds = %cond.true.3223
  %583 = load i64, i64* %alloc, align 8
  %conv3225 = trunc i64 %583 to i32
  %mul3226 = mul nsw i32 0, %conv3225
  %584 = load i64, i64* %len, align 8
  %add3227 = add nsw i64 %584, 1
  %conv3228 = trunc i64 %add3227 to i32
  %add3229 = add nsw i32 %mul3226, %conv3228
  %mul3230 = mul nsw i32 0, %add3229
  %sub3231 = sub nsw i32 %mul3230, 1
  %cmp3232 = icmp slt i32 %sub3231, 0
  br i1 %cmp3232, label %cond.true.3234, label %cond.false.3258

cond.true.3234:                                   ; preds = %cond.true.3224
  %585 = load i64, i64* %alloc, align 8
  %conv3235 = trunc i64 %585 to i32
  %mul3236 = mul nsw i32 0, %conv3235
  %586 = load i64, i64* %len, align 8
  %add3237 = add nsw i64 %586, 1
  %conv3238 = trunc i64 %add3237 to i32
  %add3239 = add nsw i32 %mul3236, %conv3238
  %mul3240 = mul nsw i32 0, %add3239
  %add3241 = add nsw i32 %mul3240, 0
  %neg3242 = xor i32 %add3241, -1
  %cmp3243 = icmp eq i32 %neg3242, -1
  %conv3244 = zext i1 %cmp3243 to i32
  %sub3245 = sub nsw i32 0, %conv3244
  %587 = load i64, i64* %alloc, align 8
  %conv3246 = trunc i64 %587 to i32
  %mul3247 = mul nsw i32 0, %conv3246
  %588 = load i64, i64* %len, align 8
  %add3248 = add nsw i64 %588, 1
  %conv3249 = trunc i64 %add3248 to i32
  %add3250 = add nsw i32 %mul3247, %conv3249
  %mul3251 = mul nsw i32 0, %add3250
  %add3252 = add nsw i32 %mul3251, 1
  %shl3253 = shl i32 %add3252, 30
  %sub3254 = sub nsw i32 %shl3253, 1
  %mul3255 = mul nsw i32 %sub3254, 2
  %add3256 = add nsw i32 %mul3255, 1
  %sub3257 = sub nsw i32 %sub3245, %add3256
  br label %cond.end.3266

cond.false.3258:                                  ; preds = %cond.true.3224
  %589 = load i64, i64* %alloc, align 8
  %conv3259 = trunc i64 %589 to i32
  %mul3260 = mul nsw i32 0, %conv3259
  %590 = load i64, i64* %len, align 8
  %add3261 = add nsw i64 %590, 1
  %conv3262 = trunc i64 %add3261 to i32
  %add3263 = add nsw i32 %mul3260, %conv3262
  %mul3264 = mul nsw i32 0, %add3263
  %add3265 = add nsw i32 %mul3264, 0
  br label %cond.end.3266

cond.end.3266:                                    ; preds = %cond.false.3258, %cond.true.3234
  %cond3267 = phi i32 [ %sub3257, %cond.true.3234 ], [ %add3265, %cond.false.3258 ]
  %cmp3268 = icmp slt i32 %cond3267, 0
  br i1 %cmp3268, label %cond.true.3270, label %cond.false.3362

cond.true.3270:                                   ; preds = %cond.end.3266
  %591 = load i64, i64* %alloc, align 8
  %conv3271 = trunc i64 %591 to i32
  %cmp3272 = icmp slt i32 %conv3271, 0
  br i1 %cmp3272, label %cond.true.3274, label %cond.false.3324

cond.true.3274:                                   ; preds = %cond.true.3270
  %592 = load i64, i64* %len, align 8
  %add3275 = add nsw i64 %592, 1
  %conv3276 = trunc i64 %add3275 to i32
  %593 = load i64, i64* %alloc, align 8
  %conv3277 = trunc i64 %593 to i32
  %mul3278 = mul nsw i32 0, %conv3277
  %594 = load i64, i64* %len, align 8
  %add3279 = add nsw i64 %594, 1
  %conv3280 = trunc i64 %add3279 to i32
  %add3281 = add nsw i32 %mul3278, %conv3280
  %mul3282 = mul nsw i32 0, %add3281
  %sub3283 = sub nsw i32 %mul3282, 1
  %cmp3284 = icmp slt i32 %sub3283, 0
  br i1 %cmp3284, label %cond.true.3286, label %cond.false.3310

cond.true.3286:                                   ; preds = %cond.true.3274
  %595 = load i64, i64* %alloc, align 8
  %conv3287 = trunc i64 %595 to i32
  %mul3288 = mul nsw i32 0, %conv3287
  %596 = load i64, i64* %len, align 8
  %add3289 = add nsw i64 %596, 1
  %conv3290 = trunc i64 %add3289 to i32
  %add3291 = add nsw i32 %mul3288, %conv3290
  %mul3292 = mul nsw i32 0, %add3291
  %add3293 = add nsw i32 %mul3292, 0
  %neg3294 = xor i32 %add3293, -1
  %cmp3295 = icmp eq i32 %neg3294, -1
  %conv3296 = zext i1 %cmp3295 to i32
  %sub3297 = sub nsw i32 0, %conv3296
  %597 = load i64, i64* %alloc, align 8
  %conv3298 = trunc i64 %597 to i32
  %mul3299 = mul nsw i32 0, %conv3298
  %598 = load i64, i64* %len, align 8
  %add3300 = add nsw i64 %598, 1
  %conv3301 = trunc i64 %add3300 to i32
  %add3302 = add nsw i32 %mul3299, %conv3301
  %mul3303 = mul nsw i32 0, %add3302
  %add3304 = add nsw i32 %mul3303, 1
  %shl3305 = shl i32 %add3304, 30
  %sub3306 = sub nsw i32 %shl3305, 1
  %mul3307 = mul nsw i32 %sub3306, 2
  %add3308 = add nsw i32 %mul3307, 1
  %sub3309 = sub nsw i32 %sub3297, %add3308
  br label %cond.end.3318

cond.false.3310:                                  ; preds = %cond.true.3274
  %599 = load i64, i64* %alloc, align 8
  %conv3311 = trunc i64 %599 to i32
  %mul3312 = mul nsw i32 0, %conv3311
  %600 = load i64, i64* %len, align 8
  %add3313 = add nsw i64 %600, 1
  %conv3314 = trunc i64 %add3313 to i32
  %add3315 = add nsw i32 %mul3312, %conv3314
  %mul3316 = mul nsw i32 0, %add3315
  %add3317 = add nsw i32 %mul3316, 0
  br label %cond.end.3318

cond.end.3318:                                    ; preds = %cond.false.3310, %cond.true.3286
  %cond3319 = phi i32 [ %sub3309, %cond.true.3286 ], [ %add3317, %cond.false.3310 ]
  %601 = load i64, i64* %alloc, align 8
  %conv3320 = trunc i64 %601 to i32
  %sub3321 = sub nsw i32 %cond3319, %conv3320
  %cmp3322 = icmp slt i32 %conv3276, %sub3321
  br i1 %cmp3322, label %cond.true.3419, label %lor.lhs.false.3396

cond.false.3324:                                  ; preds = %cond.true.3270
  %602 = load i64, i64* %alloc, align 8
  %conv3325 = trunc i64 %602 to i32
  %mul3326 = mul nsw i32 0, %conv3325
  %603 = load i64, i64* %len, align 8
  %add3327 = add nsw i64 %603, 1
  %conv3328 = trunc i64 %add3327 to i32
  %add3329 = add nsw i32 %mul3326, %conv3328
  %mul3330 = mul nsw i32 0, %add3329
  %sub3331 = sub nsw i32 %mul3330, 1
  %cmp3332 = icmp slt i32 %sub3331, 0
  br i1 %cmp3332, label %cond.true.3334, label %cond.false.3346

cond.true.3334:                                   ; preds = %cond.false.3324
  %604 = load i64, i64* %alloc, align 8
  %conv3335 = trunc i64 %604 to i32
  %mul3336 = mul nsw i32 0, %conv3335
  %605 = load i64, i64* %len, align 8
  %add3337 = add nsw i64 %605, 1
  %conv3338 = trunc i64 %add3337 to i32
  %add3339 = add nsw i32 %mul3336, %conv3338
  %mul3340 = mul nsw i32 0, %add3339
  %add3341 = add nsw i32 %mul3340, 1
  %shl3342 = shl i32 %add3341, 30
  %sub3343 = sub nsw i32 %shl3342, 1
  %mul3344 = mul nsw i32 %sub3343, 2
  %add3345 = add nsw i32 %mul3344, 1
  br label %cond.end.3354

cond.false.3346:                                  ; preds = %cond.false.3324
  %606 = load i64, i64* %alloc, align 8
  %conv3347 = trunc i64 %606 to i32
  %mul3348 = mul nsw i32 0, %conv3347
  %607 = load i64, i64* %len, align 8
  %add3349 = add nsw i64 %607, 1
  %conv3350 = trunc i64 %add3349 to i32
  %add3351 = add nsw i32 %mul3348, %conv3350
  %mul3352 = mul nsw i32 0, %add3351
  %sub3353 = sub nsw i32 %mul3352, 1
  br label %cond.end.3354

cond.end.3354:                                    ; preds = %cond.false.3346, %cond.true.3334
  %cond3355 = phi i32 [ %add3345, %cond.true.3334 ], [ %sub3353, %cond.false.3346 ]
  %608 = load i64, i64* %alloc, align 8
  %conv3356 = trunc i64 %608 to i32
  %sub3357 = sub nsw i32 %cond3355, %conv3356
  %609 = load i64, i64* %len, align 8
  %add3358 = add nsw i64 %609, 1
  %conv3359 = trunc i64 %add3358 to i32
  %cmp3360 = icmp slt i32 %sub3357, %conv3359
  br i1 %cmp3360, label %cond.true.3419, label %lor.lhs.false.3396

cond.false.3362:                                  ; preds = %cond.end.3266
  %610 = load i64, i64* %len, align 8
  %add3363 = add nsw i64 %610, 1
  %conv3364 = trunc i64 %add3363 to i32
  %cmp3365 = icmp slt i32 %conv3364, 0
  br i1 %cmp3365, label %cond.true.3367, label %cond.false.3375

cond.true.3367:                                   ; preds = %cond.false.3362
  %611 = load i64, i64* %alloc, align 8
  %conv3368 = trunc i64 %611 to i32
  %612 = load i64, i64* %len, align 8
  %add3369 = add nsw i64 %612, 1
  %conv3370 = trunc i64 %add3369 to i32
  %613 = load i64, i64* %alloc, align 8
  %conv3371 = trunc i64 %613 to i32
  %add3372 = add nsw i32 %conv3370, %conv3371
  %cmp3373 = icmp sle i32 %conv3368, %add3372
  br i1 %cmp3373, label %cond.true.3419, label %lor.lhs.false.3396

cond.false.3375:                                  ; preds = %cond.false.3362
  %614 = load i64, i64* %alloc, align 8
  %conv3376 = trunc i64 %614 to i32
  %cmp3377 = icmp slt i32 %conv3376, 0
  br i1 %cmp3377, label %cond.true.3379, label %cond.false.3388

cond.true.3379:                                   ; preds = %cond.false.3375
  %615 = load i64, i64* %len, align 8
  %add3380 = add nsw i64 %615, 1
  %conv3381 = trunc i64 %add3380 to i32
  %616 = load i64, i64* %len, align 8
  %add3382 = add nsw i64 %616, 1
  %conv3383 = trunc i64 %add3382 to i32
  %617 = load i64, i64* %alloc, align 8
  %conv3384 = trunc i64 %617 to i32
  %add3385 = add nsw i32 %conv3383, %conv3384
  %cmp3386 = icmp sle i32 %conv3381, %add3385
  br i1 %cmp3386, label %cond.true.3419, label %lor.lhs.false.3396

cond.false.3388:                                  ; preds = %cond.false.3375
  %618 = load i64, i64* %len, align 8
  %add3389 = add nsw i64 %618, 1
  %conv3390 = trunc i64 %add3389 to i32
  %619 = load i64, i64* %alloc, align 8
  %conv3391 = trunc i64 %619 to i32
  %add3392 = add nsw i32 %conv3390, %conv3391
  %620 = load i64, i64* %alloc, align 8
  %conv3393 = trunc i64 %620 to i32
  %cmp3394 = icmp slt i32 %add3392, %conv3393
  br i1 %cmp3394, label %cond.true.3419, label %lor.lhs.false.3396

lor.lhs.false.3396:                               ; preds = %cond.false.3388, %cond.true.3379, %cond.true.3367, %cond.end.3354, %cond.end.3318
  %621 = load i64, i64* %len, align 8
  %add3397 = add nsw i64 %621, 1
  %conv3398 = trunc i64 %add3397 to i32
  %622 = load i64, i64* %alloc, align 8
  %conv3399 = trunc i64 %622 to i32
  %add3400 = add nsw i32 %conv3398, %conv3399
  %mul3401 = mul nsw i32 0, %add3400
  %sub3402 = sub nsw i32 %mul3401, 1
  %cmp3403 = icmp slt i32 %sub3402, 0
  br i1 %cmp3403, label %land.lhs.true.3405, label %lor.lhs.false.3412

land.lhs.true.3405:                               ; preds = %lor.lhs.false.3396
  %623 = load i64, i64* %len, align 8
  %add3406 = add nsw i64 %623, 1
  %conv3407 = trunc i64 %add3406 to i32
  %624 = load i64, i64* %alloc, align 8
  %conv3408 = trunc i64 %624 to i32
  %add3409 = add nsw i32 %conv3407, %conv3408
  %cmp3410 = icmp slt i32 %add3409, -2147483648
  br i1 %cmp3410, label %cond.true.3419, label %lor.lhs.false.3412

lor.lhs.false.3412:                               ; preds = %land.lhs.true.3405, %lor.lhs.false.3396
  %625 = load i64, i64* %len, align 8
  %add3413 = add nsw i64 %625, 1
  %conv3414 = trunc i64 %add3413 to i32
  %626 = load i64, i64* %alloc, align 8
  %conv3415 = trunc i64 %626 to i32
  %add3416 = add nsw i32 %conv3414, %conv3415
  %cmp3417 = icmp slt i32 2147483647, %add3416
  br i1 %cmp3417, label %cond.true.3419, label %cond.false.3441

cond.true.3419:                                   ; preds = %lor.lhs.false.3412, %land.lhs.true.3405, %cond.false.3388, %cond.true.3379, %cond.true.3367, %cond.end.3354, %cond.end.3318
  %627 = load i64, i64* %len, align 8
  %add3420 = add nsw i64 %627, 1
  %conv3421 = trunc i64 %add3420 to i32
  %628 = load i64, i64* %alloc, align 8
  %conv3422 = trunc i64 %628 to i32
  %add3423 = add i32 %conv3421, %conv3422
  %cmp3424 = icmp ule i32 %add3423, 2147483647
  br i1 %cmp3424, label %cond.true.3426, label %cond.false.3431

cond.true.3426:                                   ; preds = %cond.true.3419
  %629 = load i64, i64* %len, align 8
  %add3427 = add nsw i64 %629, 1
  %conv3428 = trunc i64 %add3427 to i32
  %630 = load i64, i64* %alloc, align 8
  %conv3429 = trunc i64 %630 to i32
  %add3430 = add i32 %conv3428, %conv3429
  br label %cond.end.3438

cond.false.3431:                                  ; preds = %cond.true.3419
  %631 = load i64, i64* %len, align 8
  %add3432 = add nsw i64 %631, 1
  %conv3433 = trunc i64 %add3432 to i32
  %632 = load i64, i64* %alloc, align 8
  %conv3434 = trunc i64 %632 to i32
  %add3435 = add i32 %conv3433, %conv3434
  %sub3436 = sub i32 %add3435, -2147483648
  %add3437 = add nsw i32 %sub3436, -2147483648
  br label %cond.end.3438

cond.end.3438:                                    ; preds = %cond.false.3431, %cond.true.3426
  %cond3439 = phi i32 [ %add3430, %cond.true.3426 ], [ %add3437, %cond.false.3431 ]
  %conv3440 = sext i32 %cond3439 to i64
  store i64 %conv3440, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3441:                                  ; preds = %lor.lhs.false.3412
  %633 = load i64, i64* %len, align 8
  %add3442 = add nsw i64 %633, 1
  %conv3443 = trunc i64 %add3442 to i32
  %634 = load i64, i64* %alloc, align 8
  %conv3444 = trunc i64 %634 to i32
  %add3445 = add i32 %conv3443, %conv3444
  %cmp3446 = icmp ule i32 %add3445, 2147483647
  br i1 %cmp3446, label %cond.true.3448, label %cond.false.3453

cond.true.3448:                                   ; preds = %cond.false.3441
  %635 = load i64, i64* %len, align 8
  %add3449 = add nsw i64 %635, 1
  %conv3450 = trunc i64 %add3449 to i32
  %636 = load i64, i64* %alloc, align 8
  %conv3451 = trunc i64 %636 to i32
  %add3452 = add i32 %conv3450, %conv3451
  br label %cond.end.3460

cond.false.3453:                                  ; preds = %cond.false.3441
  %637 = load i64, i64* %len, align 8
  %add3454 = add nsw i64 %637, 1
  %conv3455 = trunc i64 %add3454 to i32
  %638 = load i64, i64* %alloc, align 8
  %conv3456 = trunc i64 %638 to i32
  %add3457 = add i32 %conv3455, %conv3456
  %sub3458 = sub i32 %add3457, -2147483648
  %add3459 = add nsw i32 %sub3458, -2147483648
  br label %cond.end.3460

cond.end.3460:                                    ; preds = %cond.false.3453, %cond.true.3448
  %cond3461 = phi i32 [ %add3452, %cond.true.3448 ], [ %add3459, %cond.false.3453 ]
  %conv3462 = sext i32 %cond3461 to i64
  store i64 %conv3462, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3463:                                  ; preds = %cond.true.3223
  %639 = load i64, i64* %alloc, align 8
  %mul3464 = mul nsw i64 0, %639
  %640 = load i64, i64* %len, align 8
  %add3465 = add nsw i64 %640, 1
  %add3466 = add nsw i64 %mul3464, %add3465
  %mul3467 = mul nsw i64 0, %add3466
  %sub3468 = sub nsw i64 %mul3467, 1
  %cmp3469 = icmp slt i64 %sub3468, 0
  br i1 %cmp3469, label %cond.true.3471, label %cond.false.3492

cond.true.3471:                                   ; preds = %cond.false.3463
  %641 = load i64, i64* %alloc, align 8
  %mul3472 = mul nsw i64 0, %641
  %642 = load i64, i64* %len, align 8
  %add3473 = add nsw i64 %642, 1
  %add3474 = add nsw i64 %mul3472, %add3473
  %mul3475 = mul nsw i64 0, %add3474
  %add3476 = add nsw i64 %mul3475, 0
  %neg3477 = xor i64 %add3476, -1
  %cmp3478 = icmp eq i64 %neg3477, -1
  %conv3479 = zext i1 %cmp3478 to i32
  %sub3480 = sub nsw i32 0, %conv3479
  %conv3481 = sext i32 %sub3480 to i64
  %643 = load i64, i64* %alloc, align 8
  %mul3482 = mul nsw i64 0, %643
  %644 = load i64, i64* %len, align 8
  %add3483 = add nsw i64 %644, 1
  %add3484 = add nsw i64 %mul3482, %add3483
  %mul3485 = mul nsw i64 0, %add3484
  %add3486 = add nsw i64 %mul3485, 1
  %shl3487 = shl i64 %add3486, 62
  %sub3488 = sub nsw i64 %shl3487, 1
  %mul3489 = mul nsw i64 %sub3488, 2
  %add3490 = add nsw i64 %mul3489, 1
  %sub3491 = sub nsw i64 %conv3481, %add3490
  br label %cond.end.3498

cond.false.3492:                                  ; preds = %cond.false.3463
  %645 = load i64, i64* %alloc, align 8
  %mul3493 = mul nsw i64 0, %645
  %646 = load i64, i64* %len, align 8
  %add3494 = add nsw i64 %646, 1
  %add3495 = add nsw i64 %mul3493, %add3494
  %mul3496 = mul nsw i64 0, %add3495
  %add3497 = add nsw i64 %mul3496, 0
  br label %cond.end.3498

cond.end.3498:                                    ; preds = %cond.false.3492, %cond.true.3471
  %cond3499 = phi i64 [ %sub3491, %cond.true.3471 ], [ %add3497, %cond.false.3492 ]
  %cmp3500 = icmp slt i64 %cond3499, 0
  br i1 %cmp3500, label %cond.true.3502, label %cond.false.3576

cond.true.3502:                                   ; preds = %cond.end.3498
  %647 = load i64, i64* %alloc, align 8
  %cmp3503 = icmp slt i64 %647, 0
  br i1 %cmp3503, label %cond.true.3505, label %cond.false.3546

cond.true.3505:                                   ; preds = %cond.true.3502
  %648 = load i64, i64* %len, align 8
  %add3506 = add nsw i64 %648, 1
  %649 = load i64, i64* %alloc, align 8
  %mul3507 = mul nsw i64 0, %649
  %650 = load i64, i64* %len, align 8
  %add3508 = add nsw i64 %650, 1
  %add3509 = add nsw i64 %mul3507, %add3508
  %mul3510 = mul nsw i64 0, %add3509
  %sub3511 = sub nsw i64 %mul3510, 1
  %cmp3512 = icmp slt i64 %sub3511, 0
  br i1 %cmp3512, label %cond.true.3514, label %cond.false.3535

cond.true.3514:                                   ; preds = %cond.true.3505
  %651 = load i64, i64* %alloc, align 8
  %mul3515 = mul nsw i64 0, %651
  %652 = load i64, i64* %len, align 8
  %add3516 = add nsw i64 %652, 1
  %add3517 = add nsw i64 %mul3515, %add3516
  %mul3518 = mul nsw i64 0, %add3517
  %add3519 = add nsw i64 %mul3518, 0
  %neg3520 = xor i64 %add3519, -1
  %cmp3521 = icmp eq i64 %neg3520, -1
  %conv3522 = zext i1 %cmp3521 to i32
  %sub3523 = sub nsw i32 0, %conv3522
  %conv3524 = sext i32 %sub3523 to i64
  %653 = load i64, i64* %alloc, align 8
  %mul3525 = mul nsw i64 0, %653
  %654 = load i64, i64* %len, align 8
  %add3526 = add nsw i64 %654, 1
  %add3527 = add nsw i64 %mul3525, %add3526
  %mul3528 = mul nsw i64 0, %add3527
  %add3529 = add nsw i64 %mul3528, 1
  %shl3530 = shl i64 %add3529, 62
  %sub3531 = sub nsw i64 %shl3530, 1
  %mul3532 = mul nsw i64 %sub3531, 2
  %add3533 = add nsw i64 %mul3532, 1
  %sub3534 = sub nsw i64 %conv3524, %add3533
  br label %cond.end.3541

cond.false.3535:                                  ; preds = %cond.true.3505
  %655 = load i64, i64* %alloc, align 8
  %mul3536 = mul nsw i64 0, %655
  %656 = load i64, i64* %len, align 8
  %add3537 = add nsw i64 %656, 1
  %add3538 = add nsw i64 %mul3536, %add3537
  %mul3539 = mul nsw i64 0, %add3538
  %add3540 = add nsw i64 %mul3539, 0
  br label %cond.end.3541

cond.end.3541:                                    ; preds = %cond.false.3535, %cond.true.3514
  %cond3542 = phi i64 [ %sub3534, %cond.true.3514 ], [ %add3540, %cond.false.3535 ]
  %657 = load i64, i64* %alloc, align 8
  %sub3543 = sub nsw i64 %cond3542, %657
  %cmp3544 = icmp slt i64 %add3506, %sub3543
  br i1 %cmp3544, label %cond.true.3616, label %lor.lhs.false.3599

cond.false.3546:                                  ; preds = %cond.true.3502
  %658 = load i64, i64* %alloc, align 8
  %mul3547 = mul nsw i64 0, %658
  %659 = load i64, i64* %len, align 8
  %add3548 = add nsw i64 %659, 1
  %add3549 = add nsw i64 %mul3547, %add3548
  %mul3550 = mul nsw i64 0, %add3549
  %sub3551 = sub nsw i64 %mul3550, 1
  %cmp3552 = icmp slt i64 %sub3551, 0
  br i1 %cmp3552, label %cond.true.3554, label %cond.false.3564

cond.true.3554:                                   ; preds = %cond.false.3546
  %660 = load i64, i64* %alloc, align 8
  %mul3555 = mul nsw i64 0, %660
  %661 = load i64, i64* %len, align 8
  %add3556 = add nsw i64 %661, 1
  %add3557 = add nsw i64 %mul3555, %add3556
  %mul3558 = mul nsw i64 0, %add3557
  %add3559 = add nsw i64 %mul3558, 1
  %shl3560 = shl i64 %add3559, 62
  %sub3561 = sub nsw i64 %shl3560, 1
  %mul3562 = mul nsw i64 %sub3561, 2
  %add3563 = add nsw i64 %mul3562, 1
  br label %cond.end.3570

cond.false.3564:                                  ; preds = %cond.false.3546
  %662 = load i64, i64* %alloc, align 8
  %mul3565 = mul nsw i64 0, %662
  %663 = load i64, i64* %len, align 8
  %add3566 = add nsw i64 %663, 1
  %add3567 = add nsw i64 %mul3565, %add3566
  %mul3568 = mul nsw i64 0, %add3567
  %sub3569 = sub nsw i64 %mul3568, 1
  br label %cond.end.3570

cond.end.3570:                                    ; preds = %cond.false.3564, %cond.true.3554
  %cond3571 = phi i64 [ %add3563, %cond.true.3554 ], [ %sub3569, %cond.false.3564 ]
  %664 = load i64, i64* %alloc, align 8
  %sub3572 = sub nsw i64 %cond3571, %664
  %665 = load i64, i64* %len, align 8
  %add3573 = add nsw i64 %665, 1
  %cmp3574 = icmp slt i64 %sub3572, %add3573
  br i1 %cmp3574, label %cond.true.3616, label %lor.lhs.false.3599

cond.false.3576:                                  ; preds = %cond.end.3498
  %666 = load i64, i64* %len, align 8
  %add3577 = add nsw i64 %666, 1
  %cmp3578 = icmp slt i64 %add3577, 0
  br i1 %cmp3578, label %cond.true.3580, label %cond.false.3585

cond.true.3580:                                   ; preds = %cond.false.3576
  %667 = load i64, i64* %alloc, align 8
  %668 = load i64, i64* %len, align 8
  %add3581 = add nsw i64 %668, 1
  %669 = load i64, i64* %alloc, align 8
  %add3582 = add nsw i64 %add3581, %669
  %cmp3583 = icmp sle i64 %667, %add3582
  br i1 %cmp3583, label %cond.true.3616, label %lor.lhs.false.3599

cond.false.3585:                                  ; preds = %cond.false.3576
  %670 = load i64, i64* %alloc, align 8
  %cmp3586 = icmp slt i64 %670, 0
  br i1 %cmp3586, label %cond.true.3588, label %cond.false.3594

cond.true.3588:                                   ; preds = %cond.false.3585
  %671 = load i64, i64* %len, align 8
  %add3589 = add nsw i64 %671, 1
  %672 = load i64, i64* %len, align 8
  %add3590 = add nsw i64 %672, 1
  %673 = load i64, i64* %alloc, align 8
  %add3591 = add nsw i64 %add3590, %673
  %cmp3592 = icmp sle i64 %add3589, %add3591
  br i1 %cmp3592, label %cond.true.3616, label %lor.lhs.false.3599

cond.false.3594:                                  ; preds = %cond.false.3585
  %674 = load i64, i64* %len, align 8
  %add3595 = add nsw i64 %674, 1
  %675 = load i64, i64* %alloc, align 8
  %add3596 = add nsw i64 %add3595, %675
  %676 = load i64, i64* %alloc, align 8
  %cmp3597 = icmp slt i64 %add3596, %676
  br i1 %cmp3597, label %cond.true.3616, label %lor.lhs.false.3599

lor.lhs.false.3599:                               ; preds = %cond.false.3594, %cond.true.3588, %cond.true.3580, %cond.end.3570, %cond.end.3541
  %677 = load i64, i64* %len, align 8
  %add3600 = add nsw i64 %677, 1
  %678 = load i64, i64* %alloc, align 8
  %add3601 = add nsw i64 %add3600, %678
  %mul3602 = mul nsw i64 0, %add3601
  %sub3603 = sub nsw i64 %mul3602, 1
  %cmp3604 = icmp slt i64 %sub3603, 0
  br i1 %cmp3604, label %land.lhs.true.3606, label %lor.lhs.false.3611

land.lhs.true.3606:                               ; preds = %lor.lhs.false.3599
  %679 = load i64, i64* %len, align 8
  %add3607 = add nsw i64 %679, 1
  %680 = load i64, i64* %alloc, align 8
  %add3608 = add nsw i64 %add3607, %680
  %cmp3609 = icmp slt i64 %add3608, -2147483648
  br i1 %cmp3609, label %cond.true.3616, label %lor.lhs.false.3611

lor.lhs.false.3611:                               ; preds = %land.lhs.true.3606, %lor.lhs.false.3599
  %681 = load i64, i64* %len, align 8
  %add3612 = add nsw i64 %681, 1
  %682 = load i64, i64* %alloc, align 8
  %add3613 = add nsw i64 %add3612, %682
  %cmp3614 = icmp slt i64 2147483647, %add3613
  br i1 %cmp3614, label %cond.true.3616, label %cond.false.3638

cond.true.3616:                                   ; preds = %lor.lhs.false.3611, %land.lhs.true.3606, %cond.false.3594, %cond.true.3588, %cond.true.3580, %cond.end.3570, %cond.end.3541
  %683 = load i64, i64* %len, align 8
  %add3617 = add nsw i64 %683, 1
  %conv3618 = trunc i64 %add3617 to i32
  %684 = load i64, i64* %alloc, align 8
  %conv3619 = trunc i64 %684 to i32
  %add3620 = add i32 %conv3618, %conv3619
  %cmp3621 = icmp ule i32 %add3620, 2147483647
  br i1 %cmp3621, label %cond.true.3623, label %cond.false.3628

cond.true.3623:                                   ; preds = %cond.true.3616
  %685 = load i64, i64* %len, align 8
  %add3624 = add nsw i64 %685, 1
  %conv3625 = trunc i64 %add3624 to i32
  %686 = load i64, i64* %alloc, align 8
  %conv3626 = trunc i64 %686 to i32
  %add3627 = add i32 %conv3625, %conv3626
  br label %cond.end.3635

cond.false.3628:                                  ; preds = %cond.true.3616
  %687 = load i64, i64* %len, align 8
  %add3629 = add nsw i64 %687, 1
  %conv3630 = trunc i64 %add3629 to i32
  %688 = load i64, i64* %alloc, align 8
  %conv3631 = trunc i64 %688 to i32
  %add3632 = add i32 %conv3630, %conv3631
  %sub3633 = sub i32 %add3632, -2147483648
  %add3634 = add nsw i32 %sub3633, -2147483648
  br label %cond.end.3635

cond.end.3635:                                    ; preds = %cond.false.3628, %cond.true.3623
  %cond3636 = phi i32 [ %add3627, %cond.true.3623 ], [ %add3634, %cond.false.3628 ]
  %conv3637 = sext i32 %cond3636 to i64
  store i64 %conv3637, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3638:                                  ; preds = %lor.lhs.false.3611
  %689 = load i64, i64* %len, align 8
  %add3639 = add nsw i64 %689, 1
  %conv3640 = trunc i64 %add3639 to i32
  %690 = load i64, i64* %alloc, align 8
  %conv3641 = trunc i64 %690 to i32
  %add3642 = add i32 %conv3640, %conv3641
  %cmp3643 = icmp ule i32 %add3642, 2147483647
  br i1 %cmp3643, label %cond.true.3645, label %cond.false.3650

cond.true.3645:                                   ; preds = %cond.false.3638
  %691 = load i64, i64* %len, align 8
  %add3646 = add nsw i64 %691, 1
  %conv3647 = trunc i64 %add3646 to i32
  %692 = load i64, i64* %alloc, align 8
  %conv3648 = trunc i64 %692 to i32
  %add3649 = add i32 %conv3647, %conv3648
  br label %cond.end.3657

cond.false.3650:                                  ; preds = %cond.false.3638
  %693 = load i64, i64* %len, align 8
  %add3651 = add nsw i64 %693, 1
  %conv3652 = trunc i64 %add3651 to i32
  %694 = load i64, i64* %alloc, align 8
  %conv3653 = trunc i64 %694 to i32
  %add3654 = add i32 %conv3652, %conv3653
  %sub3655 = sub i32 %add3654, -2147483648
  %add3656 = add nsw i32 %sub3655, -2147483648
  br label %cond.end.3657

cond.end.3657:                                    ; preds = %cond.false.3650, %cond.true.3645
  %cond3658 = phi i32 [ %add3649, %cond.true.3645 ], [ %add3656, %cond.false.3650 ]
  %conv3659 = sext i32 %cond3658 to i64
  store i64 %conv3659, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3660:                                  ; preds = %cond.false.3222
  br i1 true, label %cond.true.3661, label %cond.false.4028

cond.true.3661:                                   ; preds = %cond.false.3660
  br i1 false, label %cond.true.3662, label %cond.false.3845

cond.true.3662:                                   ; preds = %cond.true.3661
  %695 = load i64, i64* %alloc, align 8
  %mul3663 = mul nsw i64 0, %695
  %696 = load i64, i64* %len, align 8
  %add3664 = add nsw i64 %696, 1
  %add3665 = add nsw i64 %mul3663, %add3664
  %mul3666 = mul nsw i64 0, %add3665
  %sub3667 = sub nsw i64 %mul3666, 1
  %cmp3668 = icmp slt i64 %sub3667, 0
  br i1 %cmp3668, label %cond.true.3670, label %cond.false.3691

cond.true.3670:                                   ; preds = %cond.true.3662
  %697 = load i64, i64* %alloc, align 8
  %mul3671 = mul nsw i64 0, %697
  %698 = load i64, i64* %len, align 8
  %add3672 = add nsw i64 %698, 1
  %add3673 = add nsw i64 %mul3671, %add3672
  %mul3674 = mul nsw i64 0, %add3673
  %add3675 = add nsw i64 %mul3674, 0
  %neg3676 = xor i64 %add3675, -1
  %cmp3677 = icmp eq i64 %neg3676, -1
  %conv3678 = zext i1 %cmp3677 to i32
  %sub3679 = sub nsw i32 0, %conv3678
  %conv3680 = sext i32 %sub3679 to i64
  %699 = load i64, i64* %alloc, align 8
  %mul3681 = mul nsw i64 0, %699
  %700 = load i64, i64* %len, align 8
  %add3682 = add nsw i64 %700, 1
  %add3683 = add nsw i64 %mul3681, %add3682
  %mul3684 = mul nsw i64 0, %add3683
  %add3685 = add nsw i64 %mul3684, 1
  %shl3686 = shl i64 %add3685, 62
  %sub3687 = sub nsw i64 %shl3686, 1
  %mul3688 = mul nsw i64 %sub3687, 2
  %add3689 = add nsw i64 %mul3688, 1
  %sub3690 = sub nsw i64 %conv3680, %add3689
  br label %cond.end.3697

cond.false.3691:                                  ; preds = %cond.true.3662
  %701 = load i64, i64* %alloc, align 8
  %mul3692 = mul nsw i64 0, %701
  %702 = load i64, i64* %len, align 8
  %add3693 = add nsw i64 %702, 1
  %add3694 = add nsw i64 %mul3692, %add3693
  %mul3695 = mul nsw i64 0, %add3694
  %add3696 = add nsw i64 %mul3695, 0
  br label %cond.end.3697

cond.end.3697:                                    ; preds = %cond.false.3691, %cond.true.3670
  %cond3698 = phi i64 [ %sub3690, %cond.true.3670 ], [ %add3696, %cond.false.3691 ]
  %cmp3699 = icmp slt i64 %cond3698, 0
  br i1 %cmp3699, label %cond.true.3701, label %cond.false.3775

cond.true.3701:                                   ; preds = %cond.end.3697
  %703 = load i64, i64* %alloc, align 8
  %cmp3702 = icmp slt i64 %703, 0
  br i1 %cmp3702, label %cond.true.3704, label %cond.false.3745

cond.true.3704:                                   ; preds = %cond.true.3701
  %704 = load i64, i64* %len, align 8
  %add3705 = add nsw i64 %704, 1
  %705 = load i64, i64* %alloc, align 8
  %mul3706 = mul nsw i64 0, %705
  %706 = load i64, i64* %len, align 8
  %add3707 = add nsw i64 %706, 1
  %add3708 = add nsw i64 %mul3706, %add3707
  %mul3709 = mul nsw i64 0, %add3708
  %sub3710 = sub nsw i64 %mul3709, 1
  %cmp3711 = icmp slt i64 %sub3710, 0
  br i1 %cmp3711, label %cond.true.3713, label %cond.false.3734

cond.true.3713:                                   ; preds = %cond.true.3704
  %707 = load i64, i64* %alloc, align 8
  %mul3714 = mul nsw i64 0, %707
  %708 = load i64, i64* %len, align 8
  %add3715 = add nsw i64 %708, 1
  %add3716 = add nsw i64 %mul3714, %add3715
  %mul3717 = mul nsw i64 0, %add3716
  %add3718 = add nsw i64 %mul3717, 0
  %neg3719 = xor i64 %add3718, -1
  %cmp3720 = icmp eq i64 %neg3719, -1
  %conv3721 = zext i1 %cmp3720 to i32
  %sub3722 = sub nsw i32 0, %conv3721
  %conv3723 = sext i32 %sub3722 to i64
  %709 = load i64, i64* %alloc, align 8
  %mul3724 = mul nsw i64 0, %709
  %710 = load i64, i64* %len, align 8
  %add3725 = add nsw i64 %710, 1
  %add3726 = add nsw i64 %mul3724, %add3725
  %mul3727 = mul nsw i64 0, %add3726
  %add3728 = add nsw i64 %mul3727, 1
  %shl3729 = shl i64 %add3728, 62
  %sub3730 = sub nsw i64 %shl3729, 1
  %mul3731 = mul nsw i64 %sub3730, 2
  %add3732 = add nsw i64 %mul3731, 1
  %sub3733 = sub nsw i64 %conv3723, %add3732
  br label %cond.end.3740

cond.false.3734:                                  ; preds = %cond.true.3704
  %711 = load i64, i64* %alloc, align 8
  %mul3735 = mul nsw i64 0, %711
  %712 = load i64, i64* %len, align 8
  %add3736 = add nsw i64 %712, 1
  %add3737 = add nsw i64 %mul3735, %add3736
  %mul3738 = mul nsw i64 0, %add3737
  %add3739 = add nsw i64 %mul3738, 0
  br label %cond.end.3740

cond.end.3740:                                    ; preds = %cond.false.3734, %cond.true.3713
  %cond3741 = phi i64 [ %sub3733, %cond.true.3713 ], [ %add3739, %cond.false.3734 ]
  %713 = load i64, i64* %alloc, align 8
  %sub3742 = sub nsw i64 %cond3741, %713
  %cmp3743 = icmp slt i64 %add3705, %sub3742
  br i1 %cmp3743, label %cond.true.3815, label %lor.lhs.false.3798

cond.false.3745:                                  ; preds = %cond.true.3701
  %714 = load i64, i64* %alloc, align 8
  %mul3746 = mul nsw i64 0, %714
  %715 = load i64, i64* %len, align 8
  %add3747 = add nsw i64 %715, 1
  %add3748 = add nsw i64 %mul3746, %add3747
  %mul3749 = mul nsw i64 0, %add3748
  %sub3750 = sub nsw i64 %mul3749, 1
  %cmp3751 = icmp slt i64 %sub3750, 0
  br i1 %cmp3751, label %cond.true.3753, label %cond.false.3763

cond.true.3753:                                   ; preds = %cond.false.3745
  %716 = load i64, i64* %alloc, align 8
  %mul3754 = mul nsw i64 0, %716
  %717 = load i64, i64* %len, align 8
  %add3755 = add nsw i64 %717, 1
  %add3756 = add nsw i64 %mul3754, %add3755
  %mul3757 = mul nsw i64 0, %add3756
  %add3758 = add nsw i64 %mul3757, 1
  %shl3759 = shl i64 %add3758, 62
  %sub3760 = sub nsw i64 %shl3759, 1
  %mul3761 = mul nsw i64 %sub3760, 2
  %add3762 = add nsw i64 %mul3761, 1
  br label %cond.end.3769

cond.false.3763:                                  ; preds = %cond.false.3745
  %718 = load i64, i64* %alloc, align 8
  %mul3764 = mul nsw i64 0, %718
  %719 = load i64, i64* %len, align 8
  %add3765 = add nsw i64 %719, 1
  %add3766 = add nsw i64 %mul3764, %add3765
  %mul3767 = mul nsw i64 0, %add3766
  %sub3768 = sub nsw i64 %mul3767, 1
  br label %cond.end.3769

cond.end.3769:                                    ; preds = %cond.false.3763, %cond.true.3753
  %cond3770 = phi i64 [ %add3762, %cond.true.3753 ], [ %sub3768, %cond.false.3763 ]
  %720 = load i64, i64* %alloc, align 8
  %sub3771 = sub nsw i64 %cond3770, %720
  %721 = load i64, i64* %len, align 8
  %add3772 = add nsw i64 %721, 1
  %cmp3773 = icmp slt i64 %sub3771, %add3772
  br i1 %cmp3773, label %cond.true.3815, label %lor.lhs.false.3798

cond.false.3775:                                  ; preds = %cond.end.3697
  %722 = load i64, i64* %len, align 8
  %add3776 = add nsw i64 %722, 1
  %cmp3777 = icmp slt i64 %add3776, 0
  br i1 %cmp3777, label %cond.true.3779, label %cond.false.3784

cond.true.3779:                                   ; preds = %cond.false.3775
  %723 = load i64, i64* %alloc, align 8
  %724 = load i64, i64* %len, align 8
  %add3780 = add nsw i64 %724, 1
  %725 = load i64, i64* %alloc, align 8
  %add3781 = add nsw i64 %add3780, %725
  %cmp3782 = icmp sle i64 %723, %add3781
  br i1 %cmp3782, label %cond.true.3815, label %lor.lhs.false.3798

cond.false.3784:                                  ; preds = %cond.false.3775
  %726 = load i64, i64* %alloc, align 8
  %cmp3785 = icmp slt i64 %726, 0
  br i1 %cmp3785, label %cond.true.3787, label %cond.false.3793

cond.true.3787:                                   ; preds = %cond.false.3784
  %727 = load i64, i64* %len, align 8
  %add3788 = add nsw i64 %727, 1
  %728 = load i64, i64* %len, align 8
  %add3789 = add nsw i64 %728, 1
  %729 = load i64, i64* %alloc, align 8
  %add3790 = add nsw i64 %add3789, %729
  %cmp3791 = icmp sle i64 %add3788, %add3790
  br i1 %cmp3791, label %cond.true.3815, label %lor.lhs.false.3798

cond.false.3793:                                  ; preds = %cond.false.3784
  %730 = load i64, i64* %len, align 8
  %add3794 = add nsw i64 %730, 1
  %731 = load i64, i64* %alloc, align 8
  %add3795 = add nsw i64 %add3794, %731
  %732 = load i64, i64* %alloc, align 8
  %cmp3796 = icmp slt i64 %add3795, %732
  br i1 %cmp3796, label %cond.true.3815, label %lor.lhs.false.3798

lor.lhs.false.3798:                               ; preds = %cond.false.3793, %cond.true.3787, %cond.true.3779, %cond.end.3769, %cond.end.3740
  %733 = load i64, i64* %len, align 8
  %add3799 = add nsw i64 %733, 1
  %734 = load i64, i64* %alloc, align 8
  %add3800 = add nsw i64 %add3799, %734
  %mul3801 = mul nsw i64 0, %add3800
  %sub3802 = sub nsw i64 %mul3801, 1
  %cmp3803 = icmp slt i64 %sub3802, 0
  br i1 %cmp3803, label %land.lhs.true.3805, label %lor.lhs.false.3810

land.lhs.true.3805:                               ; preds = %lor.lhs.false.3798
  %735 = load i64, i64* %len, align 8
  %add3806 = add nsw i64 %735, 1
  %736 = load i64, i64* %alloc, align 8
  %add3807 = add nsw i64 %add3806, %736
  %cmp3808 = icmp slt i64 %add3807, -9223372036854775808
  br i1 %cmp3808, label %cond.true.3815, label %lor.lhs.false.3810

lor.lhs.false.3810:                               ; preds = %land.lhs.true.3805, %lor.lhs.false.3798
  %737 = load i64, i64* %len, align 8
  %add3811 = add nsw i64 %737, 1
  %738 = load i64, i64* %alloc, align 8
  %add3812 = add nsw i64 %add3811, %738
  %cmp3813 = icmp slt i64 9223372036854775807, %add3812
  br i1 %cmp3813, label %cond.true.3815, label %cond.false.3830

cond.true.3815:                                   ; preds = %lor.lhs.false.3810, %land.lhs.true.3805, %cond.false.3793, %cond.true.3787, %cond.true.3779, %cond.end.3769, %cond.end.3740
  %739 = load i64, i64* %len, align 8
  %add3816 = add nsw i64 %739, 1
  %740 = load i64, i64* %alloc, align 8
  %add3817 = add i64 %add3816, %740
  %cmp3818 = icmp ule i64 %add3817, 9223372036854775807
  br i1 %cmp3818, label %cond.true.3820, label %cond.false.3823

cond.true.3820:                                   ; preds = %cond.true.3815
  %741 = load i64, i64* %len, align 8
  %add3821 = add nsw i64 %741, 1
  %742 = load i64, i64* %alloc, align 8
  %add3822 = add i64 %add3821, %742
  br label %cond.end.3828

cond.false.3823:                                  ; preds = %cond.true.3815
  %743 = load i64, i64* %len, align 8
  %add3824 = add nsw i64 %743, 1
  %744 = load i64, i64* %alloc, align 8
  %add3825 = add i64 %add3824, %744
  %sub3826 = sub i64 %add3825, -9223372036854775808
  %add3827 = add nsw i64 %sub3826, -9223372036854775808
  br label %cond.end.3828

cond.end.3828:                                    ; preds = %cond.false.3823, %cond.true.3820
  %cond3829 = phi i64 [ %add3822, %cond.true.3820 ], [ %add3827, %cond.false.3823 ]
  store i64 %cond3829, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3830:                                  ; preds = %lor.lhs.false.3810
  %745 = load i64, i64* %len, align 8
  %add3831 = add nsw i64 %745, 1
  %746 = load i64, i64* %alloc, align 8
  %add3832 = add i64 %add3831, %746
  %cmp3833 = icmp ule i64 %add3832, 9223372036854775807
  br i1 %cmp3833, label %cond.true.3835, label %cond.false.3838

cond.true.3835:                                   ; preds = %cond.false.3830
  %747 = load i64, i64* %len, align 8
  %add3836 = add nsw i64 %747, 1
  %748 = load i64, i64* %alloc, align 8
  %add3837 = add i64 %add3836, %748
  br label %cond.end.3843

cond.false.3838:                                  ; preds = %cond.false.3830
  %749 = load i64, i64* %len, align 8
  %add3839 = add nsw i64 %749, 1
  %750 = load i64, i64* %alloc, align 8
  %add3840 = add i64 %add3839, %750
  %sub3841 = sub i64 %add3840, -9223372036854775808
  %add3842 = add nsw i64 %sub3841, -9223372036854775808
  br label %cond.end.3843

cond.end.3843:                                    ; preds = %cond.false.3838, %cond.true.3835
  %cond3844 = phi i64 [ %add3837, %cond.true.3835 ], [ %add3842, %cond.false.3838 ]
  store i64 %cond3844, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.3845:                                  ; preds = %cond.true.3661
  %751 = load i64, i64* %alloc, align 8
  %mul3846 = mul nsw i64 0, %751
  %752 = load i64, i64* %len, align 8
  %add3847 = add nsw i64 %752, 1
  %add3848 = add nsw i64 %mul3846, %add3847
  %mul3849 = mul nsw i64 0, %add3848
  %sub3850 = sub nsw i64 %mul3849, 1
  %cmp3851 = icmp slt i64 %sub3850, 0
  br i1 %cmp3851, label %cond.true.3853, label %cond.false.3874

cond.true.3853:                                   ; preds = %cond.false.3845
  %753 = load i64, i64* %alloc, align 8
  %mul3854 = mul nsw i64 0, %753
  %754 = load i64, i64* %len, align 8
  %add3855 = add nsw i64 %754, 1
  %add3856 = add nsw i64 %mul3854, %add3855
  %mul3857 = mul nsw i64 0, %add3856
  %add3858 = add nsw i64 %mul3857, 0
  %neg3859 = xor i64 %add3858, -1
  %cmp3860 = icmp eq i64 %neg3859, -1
  %conv3861 = zext i1 %cmp3860 to i32
  %sub3862 = sub nsw i32 0, %conv3861
  %conv3863 = sext i32 %sub3862 to i64
  %755 = load i64, i64* %alloc, align 8
  %mul3864 = mul nsw i64 0, %755
  %756 = load i64, i64* %len, align 8
  %add3865 = add nsw i64 %756, 1
  %add3866 = add nsw i64 %mul3864, %add3865
  %mul3867 = mul nsw i64 0, %add3866
  %add3868 = add nsw i64 %mul3867, 1
  %shl3869 = shl i64 %add3868, 62
  %sub3870 = sub nsw i64 %shl3869, 1
  %mul3871 = mul nsw i64 %sub3870, 2
  %add3872 = add nsw i64 %mul3871, 1
  %sub3873 = sub nsw i64 %conv3863, %add3872
  br label %cond.end.3880

cond.false.3874:                                  ; preds = %cond.false.3845
  %757 = load i64, i64* %alloc, align 8
  %mul3875 = mul nsw i64 0, %757
  %758 = load i64, i64* %len, align 8
  %add3876 = add nsw i64 %758, 1
  %add3877 = add nsw i64 %mul3875, %add3876
  %mul3878 = mul nsw i64 0, %add3877
  %add3879 = add nsw i64 %mul3878, 0
  br label %cond.end.3880

cond.end.3880:                                    ; preds = %cond.false.3874, %cond.true.3853
  %cond3881 = phi i64 [ %sub3873, %cond.true.3853 ], [ %add3879, %cond.false.3874 ]
  %cmp3882 = icmp slt i64 %cond3881, 0
  br i1 %cmp3882, label %cond.true.3884, label %cond.false.3958

cond.true.3884:                                   ; preds = %cond.end.3880
  %759 = load i64, i64* %alloc, align 8
  %cmp3885 = icmp slt i64 %759, 0
  br i1 %cmp3885, label %cond.true.3887, label %cond.false.3928

cond.true.3887:                                   ; preds = %cond.true.3884
  %760 = load i64, i64* %len, align 8
  %add3888 = add nsw i64 %760, 1
  %761 = load i64, i64* %alloc, align 8
  %mul3889 = mul nsw i64 0, %761
  %762 = load i64, i64* %len, align 8
  %add3890 = add nsw i64 %762, 1
  %add3891 = add nsw i64 %mul3889, %add3890
  %mul3892 = mul nsw i64 0, %add3891
  %sub3893 = sub nsw i64 %mul3892, 1
  %cmp3894 = icmp slt i64 %sub3893, 0
  br i1 %cmp3894, label %cond.true.3896, label %cond.false.3917

cond.true.3896:                                   ; preds = %cond.true.3887
  %763 = load i64, i64* %alloc, align 8
  %mul3897 = mul nsw i64 0, %763
  %764 = load i64, i64* %len, align 8
  %add3898 = add nsw i64 %764, 1
  %add3899 = add nsw i64 %mul3897, %add3898
  %mul3900 = mul nsw i64 0, %add3899
  %add3901 = add nsw i64 %mul3900, 0
  %neg3902 = xor i64 %add3901, -1
  %cmp3903 = icmp eq i64 %neg3902, -1
  %conv3904 = zext i1 %cmp3903 to i32
  %sub3905 = sub nsw i32 0, %conv3904
  %conv3906 = sext i32 %sub3905 to i64
  %765 = load i64, i64* %alloc, align 8
  %mul3907 = mul nsw i64 0, %765
  %766 = load i64, i64* %len, align 8
  %add3908 = add nsw i64 %766, 1
  %add3909 = add nsw i64 %mul3907, %add3908
  %mul3910 = mul nsw i64 0, %add3909
  %add3911 = add nsw i64 %mul3910, 1
  %shl3912 = shl i64 %add3911, 62
  %sub3913 = sub nsw i64 %shl3912, 1
  %mul3914 = mul nsw i64 %sub3913, 2
  %add3915 = add nsw i64 %mul3914, 1
  %sub3916 = sub nsw i64 %conv3906, %add3915
  br label %cond.end.3923

cond.false.3917:                                  ; preds = %cond.true.3887
  %767 = load i64, i64* %alloc, align 8
  %mul3918 = mul nsw i64 0, %767
  %768 = load i64, i64* %len, align 8
  %add3919 = add nsw i64 %768, 1
  %add3920 = add nsw i64 %mul3918, %add3919
  %mul3921 = mul nsw i64 0, %add3920
  %add3922 = add nsw i64 %mul3921, 0
  br label %cond.end.3923

cond.end.3923:                                    ; preds = %cond.false.3917, %cond.true.3896
  %cond3924 = phi i64 [ %sub3916, %cond.true.3896 ], [ %add3922, %cond.false.3917 ]
  %769 = load i64, i64* %alloc, align 8
  %sub3925 = sub nsw i64 %cond3924, %769
  %cmp3926 = icmp slt i64 %add3888, %sub3925
  br i1 %cmp3926, label %cond.true.3998, label %lor.lhs.false.3981

cond.false.3928:                                  ; preds = %cond.true.3884
  %770 = load i64, i64* %alloc, align 8
  %mul3929 = mul nsw i64 0, %770
  %771 = load i64, i64* %len, align 8
  %add3930 = add nsw i64 %771, 1
  %add3931 = add nsw i64 %mul3929, %add3930
  %mul3932 = mul nsw i64 0, %add3931
  %sub3933 = sub nsw i64 %mul3932, 1
  %cmp3934 = icmp slt i64 %sub3933, 0
  br i1 %cmp3934, label %cond.true.3936, label %cond.false.3946

cond.true.3936:                                   ; preds = %cond.false.3928
  %772 = load i64, i64* %alloc, align 8
  %mul3937 = mul nsw i64 0, %772
  %773 = load i64, i64* %len, align 8
  %add3938 = add nsw i64 %773, 1
  %add3939 = add nsw i64 %mul3937, %add3938
  %mul3940 = mul nsw i64 0, %add3939
  %add3941 = add nsw i64 %mul3940, 1
  %shl3942 = shl i64 %add3941, 62
  %sub3943 = sub nsw i64 %shl3942, 1
  %mul3944 = mul nsw i64 %sub3943, 2
  %add3945 = add nsw i64 %mul3944, 1
  br label %cond.end.3952

cond.false.3946:                                  ; preds = %cond.false.3928
  %774 = load i64, i64* %alloc, align 8
  %mul3947 = mul nsw i64 0, %774
  %775 = load i64, i64* %len, align 8
  %add3948 = add nsw i64 %775, 1
  %add3949 = add nsw i64 %mul3947, %add3948
  %mul3950 = mul nsw i64 0, %add3949
  %sub3951 = sub nsw i64 %mul3950, 1
  br label %cond.end.3952

cond.end.3952:                                    ; preds = %cond.false.3946, %cond.true.3936
  %cond3953 = phi i64 [ %add3945, %cond.true.3936 ], [ %sub3951, %cond.false.3946 ]
  %776 = load i64, i64* %alloc, align 8
  %sub3954 = sub nsw i64 %cond3953, %776
  %777 = load i64, i64* %len, align 8
  %add3955 = add nsw i64 %777, 1
  %cmp3956 = icmp slt i64 %sub3954, %add3955
  br i1 %cmp3956, label %cond.true.3998, label %lor.lhs.false.3981

cond.false.3958:                                  ; preds = %cond.end.3880
  %778 = load i64, i64* %len, align 8
  %add3959 = add nsw i64 %778, 1
  %cmp3960 = icmp slt i64 %add3959, 0
  br i1 %cmp3960, label %cond.true.3962, label %cond.false.3967

cond.true.3962:                                   ; preds = %cond.false.3958
  %779 = load i64, i64* %alloc, align 8
  %780 = load i64, i64* %len, align 8
  %add3963 = add nsw i64 %780, 1
  %781 = load i64, i64* %alloc, align 8
  %add3964 = add nsw i64 %add3963, %781
  %cmp3965 = icmp sle i64 %779, %add3964
  br i1 %cmp3965, label %cond.true.3998, label %lor.lhs.false.3981

cond.false.3967:                                  ; preds = %cond.false.3958
  %782 = load i64, i64* %alloc, align 8
  %cmp3968 = icmp slt i64 %782, 0
  br i1 %cmp3968, label %cond.true.3970, label %cond.false.3976

cond.true.3970:                                   ; preds = %cond.false.3967
  %783 = load i64, i64* %len, align 8
  %add3971 = add nsw i64 %783, 1
  %784 = load i64, i64* %len, align 8
  %add3972 = add nsw i64 %784, 1
  %785 = load i64, i64* %alloc, align 8
  %add3973 = add nsw i64 %add3972, %785
  %cmp3974 = icmp sle i64 %add3971, %add3973
  br i1 %cmp3974, label %cond.true.3998, label %lor.lhs.false.3981

cond.false.3976:                                  ; preds = %cond.false.3967
  %786 = load i64, i64* %len, align 8
  %add3977 = add nsw i64 %786, 1
  %787 = load i64, i64* %alloc, align 8
  %add3978 = add nsw i64 %add3977, %787
  %788 = load i64, i64* %alloc, align 8
  %cmp3979 = icmp slt i64 %add3978, %788
  br i1 %cmp3979, label %cond.true.3998, label %lor.lhs.false.3981

lor.lhs.false.3981:                               ; preds = %cond.false.3976, %cond.true.3970, %cond.true.3962, %cond.end.3952, %cond.end.3923
  %789 = load i64, i64* %len, align 8
  %add3982 = add nsw i64 %789, 1
  %790 = load i64, i64* %alloc, align 8
  %add3983 = add nsw i64 %add3982, %790
  %mul3984 = mul nsw i64 0, %add3983
  %sub3985 = sub nsw i64 %mul3984, 1
  %cmp3986 = icmp slt i64 %sub3985, 0
  br i1 %cmp3986, label %land.lhs.true.3988, label %lor.lhs.false.3993

land.lhs.true.3988:                               ; preds = %lor.lhs.false.3981
  %791 = load i64, i64* %len, align 8
  %add3989 = add nsw i64 %791, 1
  %792 = load i64, i64* %alloc, align 8
  %add3990 = add nsw i64 %add3989, %792
  %cmp3991 = icmp slt i64 %add3990, -9223372036854775808
  br i1 %cmp3991, label %cond.true.3998, label %lor.lhs.false.3993

lor.lhs.false.3993:                               ; preds = %land.lhs.true.3988, %lor.lhs.false.3981
  %793 = load i64, i64* %len, align 8
  %add3994 = add nsw i64 %793, 1
  %794 = load i64, i64* %alloc, align 8
  %add3995 = add nsw i64 %add3994, %794
  %cmp3996 = icmp slt i64 9223372036854775807, %add3995
  br i1 %cmp3996, label %cond.true.3998, label %cond.false.4013

cond.true.3998:                                   ; preds = %lor.lhs.false.3993, %land.lhs.true.3988, %cond.false.3976, %cond.true.3970, %cond.true.3962, %cond.end.3952, %cond.end.3923
  %795 = load i64, i64* %len, align 8
  %add3999 = add nsw i64 %795, 1
  %796 = load i64, i64* %alloc, align 8
  %add4000 = add i64 %add3999, %796
  %cmp4001 = icmp ule i64 %add4000, 9223372036854775807
  br i1 %cmp4001, label %cond.true.4003, label %cond.false.4006

cond.true.4003:                                   ; preds = %cond.true.3998
  %797 = load i64, i64* %len, align 8
  %add4004 = add nsw i64 %797, 1
  %798 = load i64, i64* %alloc, align 8
  %add4005 = add i64 %add4004, %798
  br label %cond.end.4011

cond.false.4006:                                  ; preds = %cond.true.3998
  %799 = load i64, i64* %len, align 8
  %add4007 = add nsw i64 %799, 1
  %800 = load i64, i64* %alloc, align 8
  %add4008 = add i64 %add4007, %800
  %sub4009 = sub i64 %add4008, -9223372036854775808
  %add4010 = add nsw i64 %sub4009, -9223372036854775808
  br label %cond.end.4011

cond.end.4011:                                    ; preds = %cond.false.4006, %cond.true.4003
  %cond4012 = phi i64 [ %add4005, %cond.true.4003 ], [ %add4010, %cond.false.4006 ]
  store i64 %cond4012, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.4013:                                  ; preds = %lor.lhs.false.3993
  %801 = load i64, i64* %len, align 8
  %add4014 = add nsw i64 %801, 1
  %802 = load i64, i64* %alloc, align 8
  %add4015 = add i64 %add4014, %802
  %cmp4016 = icmp ule i64 %add4015, 9223372036854775807
  br i1 %cmp4016, label %cond.true.4018, label %cond.false.4021

cond.true.4018:                                   ; preds = %cond.false.4013
  %803 = load i64, i64* %len, align 8
  %add4019 = add nsw i64 %803, 1
  %804 = load i64, i64* %alloc, align 8
  %add4020 = add i64 %add4019, %804
  br label %cond.end.4026

cond.false.4021:                                  ; preds = %cond.false.4013
  %805 = load i64, i64* %len, align 8
  %add4022 = add nsw i64 %805, 1
  %806 = load i64, i64* %alloc, align 8
  %add4023 = add i64 %add4022, %806
  %sub4024 = sub i64 %add4023, -9223372036854775808
  %add4025 = add nsw i64 %sub4024, -9223372036854775808
  br label %cond.end.4026

cond.end.4026:                                    ; preds = %cond.false.4021, %cond.true.4018
  %cond4027 = phi i64 [ %add4020, %cond.true.4018 ], [ %add4025, %cond.false.4021 ]
  store i64 %cond4027, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.4028:                                  ; preds = %cond.false.3660
  br i1 false, label %cond.true.4029, label %cond.false.4212

cond.true.4029:                                   ; preds = %cond.false.4028
  %807 = load i64, i64* %alloc, align 8
  %mul4030 = mul nsw i64 0, %807
  %808 = load i64, i64* %len, align 8
  %add4031 = add nsw i64 %808, 1
  %add4032 = add nsw i64 %mul4030, %add4031
  %mul4033 = mul nsw i64 0, %add4032
  %sub4034 = sub nsw i64 %mul4033, 1
  %cmp4035 = icmp slt i64 %sub4034, 0
  br i1 %cmp4035, label %cond.true.4037, label %cond.false.4058

cond.true.4037:                                   ; preds = %cond.true.4029
  %809 = load i64, i64* %alloc, align 8
  %mul4038 = mul nsw i64 0, %809
  %810 = load i64, i64* %len, align 8
  %add4039 = add nsw i64 %810, 1
  %add4040 = add nsw i64 %mul4038, %add4039
  %mul4041 = mul nsw i64 0, %add4040
  %add4042 = add nsw i64 %mul4041, 0
  %neg4043 = xor i64 %add4042, -1
  %cmp4044 = icmp eq i64 %neg4043, -1
  %conv4045 = zext i1 %cmp4044 to i32
  %sub4046 = sub nsw i32 0, %conv4045
  %conv4047 = sext i32 %sub4046 to i64
  %811 = load i64, i64* %alloc, align 8
  %mul4048 = mul nsw i64 0, %811
  %812 = load i64, i64* %len, align 8
  %add4049 = add nsw i64 %812, 1
  %add4050 = add nsw i64 %mul4048, %add4049
  %mul4051 = mul nsw i64 0, %add4050
  %add4052 = add nsw i64 %mul4051, 1
  %shl4053 = shl i64 %add4052, 62
  %sub4054 = sub nsw i64 %shl4053, 1
  %mul4055 = mul nsw i64 %sub4054, 2
  %add4056 = add nsw i64 %mul4055, 1
  %sub4057 = sub nsw i64 %conv4047, %add4056
  br label %cond.end.4064

cond.false.4058:                                  ; preds = %cond.true.4029
  %813 = load i64, i64* %alloc, align 8
  %mul4059 = mul nsw i64 0, %813
  %814 = load i64, i64* %len, align 8
  %add4060 = add nsw i64 %814, 1
  %add4061 = add nsw i64 %mul4059, %add4060
  %mul4062 = mul nsw i64 0, %add4061
  %add4063 = add nsw i64 %mul4062, 0
  br label %cond.end.4064

cond.end.4064:                                    ; preds = %cond.false.4058, %cond.true.4037
  %cond4065 = phi i64 [ %sub4057, %cond.true.4037 ], [ %add4063, %cond.false.4058 ]
  %cmp4066 = icmp slt i64 %cond4065, 0
  br i1 %cmp4066, label %cond.true.4068, label %cond.false.4142

cond.true.4068:                                   ; preds = %cond.end.4064
  %815 = load i64, i64* %alloc, align 8
  %cmp4069 = icmp slt i64 %815, 0
  br i1 %cmp4069, label %cond.true.4071, label %cond.false.4112

cond.true.4071:                                   ; preds = %cond.true.4068
  %816 = load i64, i64* %len, align 8
  %add4072 = add nsw i64 %816, 1
  %817 = load i64, i64* %alloc, align 8
  %mul4073 = mul nsw i64 0, %817
  %818 = load i64, i64* %len, align 8
  %add4074 = add nsw i64 %818, 1
  %add4075 = add nsw i64 %mul4073, %add4074
  %mul4076 = mul nsw i64 0, %add4075
  %sub4077 = sub nsw i64 %mul4076, 1
  %cmp4078 = icmp slt i64 %sub4077, 0
  br i1 %cmp4078, label %cond.true.4080, label %cond.false.4101

cond.true.4080:                                   ; preds = %cond.true.4071
  %819 = load i64, i64* %alloc, align 8
  %mul4081 = mul nsw i64 0, %819
  %820 = load i64, i64* %len, align 8
  %add4082 = add nsw i64 %820, 1
  %add4083 = add nsw i64 %mul4081, %add4082
  %mul4084 = mul nsw i64 0, %add4083
  %add4085 = add nsw i64 %mul4084, 0
  %neg4086 = xor i64 %add4085, -1
  %cmp4087 = icmp eq i64 %neg4086, -1
  %conv4088 = zext i1 %cmp4087 to i32
  %sub4089 = sub nsw i32 0, %conv4088
  %conv4090 = sext i32 %sub4089 to i64
  %821 = load i64, i64* %alloc, align 8
  %mul4091 = mul nsw i64 0, %821
  %822 = load i64, i64* %len, align 8
  %add4092 = add nsw i64 %822, 1
  %add4093 = add nsw i64 %mul4091, %add4092
  %mul4094 = mul nsw i64 0, %add4093
  %add4095 = add nsw i64 %mul4094, 1
  %shl4096 = shl i64 %add4095, 62
  %sub4097 = sub nsw i64 %shl4096, 1
  %mul4098 = mul nsw i64 %sub4097, 2
  %add4099 = add nsw i64 %mul4098, 1
  %sub4100 = sub nsw i64 %conv4090, %add4099
  br label %cond.end.4107

cond.false.4101:                                  ; preds = %cond.true.4071
  %823 = load i64, i64* %alloc, align 8
  %mul4102 = mul nsw i64 0, %823
  %824 = load i64, i64* %len, align 8
  %add4103 = add nsw i64 %824, 1
  %add4104 = add nsw i64 %mul4102, %add4103
  %mul4105 = mul nsw i64 0, %add4104
  %add4106 = add nsw i64 %mul4105, 0
  br label %cond.end.4107

cond.end.4107:                                    ; preds = %cond.false.4101, %cond.true.4080
  %cond4108 = phi i64 [ %sub4100, %cond.true.4080 ], [ %add4106, %cond.false.4101 ]
  %825 = load i64, i64* %alloc, align 8
  %sub4109 = sub nsw i64 %cond4108, %825
  %cmp4110 = icmp slt i64 %add4072, %sub4109
  br i1 %cmp4110, label %cond.true.4182, label %lor.lhs.false.4165

cond.false.4112:                                  ; preds = %cond.true.4068
  %826 = load i64, i64* %alloc, align 8
  %mul4113 = mul nsw i64 0, %826
  %827 = load i64, i64* %len, align 8
  %add4114 = add nsw i64 %827, 1
  %add4115 = add nsw i64 %mul4113, %add4114
  %mul4116 = mul nsw i64 0, %add4115
  %sub4117 = sub nsw i64 %mul4116, 1
  %cmp4118 = icmp slt i64 %sub4117, 0
  br i1 %cmp4118, label %cond.true.4120, label %cond.false.4130

cond.true.4120:                                   ; preds = %cond.false.4112
  %828 = load i64, i64* %alloc, align 8
  %mul4121 = mul nsw i64 0, %828
  %829 = load i64, i64* %len, align 8
  %add4122 = add nsw i64 %829, 1
  %add4123 = add nsw i64 %mul4121, %add4122
  %mul4124 = mul nsw i64 0, %add4123
  %add4125 = add nsw i64 %mul4124, 1
  %shl4126 = shl i64 %add4125, 62
  %sub4127 = sub nsw i64 %shl4126, 1
  %mul4128 = mul nsw i64 %sub4127, 2
  %add4129 = add nsw i64 %mul4128, 1
  br label %cond.end.4136

cond.false.4130:                                  ; preds = %cond.false.4112
  %830 = load i64, i64* %alloc, align 8
  %mul4131 = mul nsw i64 0, %830
  %831 = load i64, i64* %len, align 8
  %add4132 = add nsw i64 %831, 1
  %add4133 = add nsw i64 %mul4131, %add4132
  %mul4134 = mul nsw i64 0, %add4133
  %sub4135 = sub nsw i64 %mul4134, 1
  br label %cond.end.4136

cond.end.4136:                                    ; preds = %cond.false.4130, %cond.true.4120
  %cond4137 = phi i64 [ %add4129, %cond.true.4120 ], [ %sub4135, %cond.false.4130 ]
  %832 = load i64, i64* %alloc, align 8
  %sub4138 = sub nsw i64 %cond4137, %832
  %833 = load i64, i64* %len, align 8
  %add4139 = add nsw i64 %833, 1
  %cmp4140 = icmp slt i64 %sub4138, %add4139
  br i1 %cmp4140, label %cond.true.4182, label %lor.lhs.false.4165

cond.false.4142:                                  ; preds = %cond.end.4064
  %834 = load i64, i64* %len, align 8
  %add4143 = add nsw i64 %834, 1
  %cmp4144 = icmp slt i64 %add4143, 0
  br i1 %cmp4144, label %cond.true.4146, label %cond.false.4151

cond.true.4146:                                   ; preds = %cond.false.4142
  %835 = load i64, i64* %alloc, align 8
  %836 = load i64, i64* %len, align 8
  %add4147 = add nsw i64 %836, 1
  %837 = load i64, i64* %alloc, align 8
  %add4148 = add nsw i64 %add4147, %837
  %cmp4149 = icmp sle i64 %835, %add4148
  br i1 %cmp4149, label %cond.true.4182, label %lor.lhs.false.4165

cond.false.4151:                                  ; preds = %cond.false.4142
  %838 = load i64, i64* %alloc, align 8
  %cmp4152 = icmp slt i64 %838, 0
  br i1 %cmp4152, label %cond.true.4154, label %cond.false.4160

cond.true.4154:                                   ; preds = %cond.false.4151
  %839 = load i64, i64* %len, align 8
  %add4155 = add nsw i64 %839, 1
  %840 = load i64, i64* %len, align 8
  %add4156 = add nsw i64 %840, 1
  %841 = load i64, i64* %alloc, align 8
  %add4157 = add nsw i64 %add4156, %841
  %cmp4158 = icmp sle i64 %add4155, %add4157
  br i1 %cmp4158, label %cond.true.4182, label %lor.lhs.false.4165

cond.false.4160:                                  ; preds = %cond.false.4151
  %842 = load i64, i64* %len, align 8
  %add4161 = add nsw i64 %842, 1
  %843 = load i64, i64* %alloc, align 8
  %add4162 = add nsw i64 %add4161, %843
  %844 = load i64, i64* %alloc, align 8
  %cmp4163 = icmp slt i64 %add4162, %844
  br i1 %cmp4163, label %cond.true.4182, label %lor.lhs.false.4165

lor.lhs.false.4165:                               ; preds = %cond.false.4160, %cond.true.4154, %cond.true.4146, %cond.end.4136, %cond.end.4107
  %845 = load i64, i64* %len, align 8
  %add4166 = add nsw i64 %845, 1
  %846 = load i64, i64* %alloc, align 8
  %add4167 = add nsw i64 %add4166, %846
  %mul4168 = mul nsw i64 0, %add4167
  %sub4169 = sub nsw i64 %mul4168, 1
  %cmp4170 = icmp slt i64 %sub4169, 0
  br i1 %cmp4170, label %land.lhs.true.4172, label %lor.lhs.false.4177

land.lhs.true.4172:                               ; preds = %lor.lhs.false.4165
  %847 = load i64, i64* %len, align 8
  %add4173 = add nsw i64 %847, 1
  %848 = load i64, i64* %alloc, align 8
  %add4174 = add nsw i64 %add4173, %848
  %cmp4175 = icmp slt i64 %add4174, -9223372036854775808
  br i1 %cmp4175, label %cond.true.4182, label %lor.lhs.false.4177

lor.lhs.false.4177:                               ; preds = %land.lhs.true.4172, %lor.lhs.false.4165
  %849 = load i64, i64* %len, align 8
  %add4178 = add nsw i64 %849, 1
  %850 = load i64, i64* %alloc, align 8
  %add4179 = add nsw i64 %add4178, %850
  %cmp4180 = icmp slt i64 9223372036854775807, %add4179
  br i1 %cmp4180, label %cond.true.4182, label %cond.false.4197

cond.true.4182:                                   ; preds = %lor.lhs.false.4177, %land.lhs.true.4172, %cond.false.4160, %cond.true.4154, %cond.true.4146, %cond.end.4136, %cond.end.4107
  %851 = load i64, i64* %len, align 8
  %add4183 = add nsw i64 %851, 1
  %852 = load i64, i64* %alloc, align 8
  %add4184 = add i64 %add4183, %852
  %cmp4185 = icmp ule i64 %add4184, 9223372036854775807
  br i1 %cmp4185, label %cond.true.4187, label %cond.false.4190

cond.true.4187:                                   ; preds = %cond.true.4182
  %853 = load i64, i64* %len, align 8
  %add4188 = add nsw i64 %853, 1
  %854 = load i64, i64* %alloc, align 8
  %add4189 = add i64 %add4188, %854
  br label %cond.end.4195

cond.false.4190:                                  ; preds = %cond.true.4182
  %855 = load i64, i64* %len, align 8
  %add4191 = add nsw i64 %855, 1
  %856 = load i64, i64* %alloc, align 8
  %add4192 = add i64 %add4191, %856
  %sub4193 = sub i64 %add4192, -9223372036854775808
  %add4194 = add nsw i64 %sub4193, -9223372036854775808
  br label %cond.end.4195

cond.end.4195:                                    ; preds = %cond.false.4190, %cond.true.4187
  %cond4196 = phi i64 [ %add4189, %cond.true.4187 ], [ %add4194, %cond.false.4190 ]
  store i64 %cond4196, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.4197:                                  ; preds = %lor.lhs.false.4177
  %857 = load i64, i64* %len, align 8
  %add4198 = add nsw i64 %857, 1
  %858 = load i64, i64* %alloc, align 8
  %add4199 = add i64 %add4198, %858
  %cmp4200 = icmp ule i64 %add4199, 9223372036854775807
  br i1 %cmp4200, label %cond.true.4202, label %cond.false.4205

cond.true.4202:                                   ; preds = %cond.false.4197
  %859 = load i64, i64* %len, align 8
  %add4203 = add nsw i64 %859, 1
  %860 = load i64, i64* %alloc, align 8
  %add4204 = add i64 %add4203, %860
  br label %cond.end.4210

cond.false.4205:                                  ; preds = %cond.false.4197
  %861 = load i64, i64* %len, align 8
  %add4206 = add nsw i64 %861, 1
  %862 = load i64, i64* %alloc, align 8
  %add4207 = add i64 %add4206, %862
  %sub4208 = sub i64 %add4207, -9223372036854775808
  %add4209 = add nsw i64 %sub4208, -9223372036854775808
  br label %cond.end.4210

cond.end.4210:                                    ; preds = %cond.false.4205, %cond.true.4202
  %cond4211 = phi i64 [ %add4204, %cond.true.4202 ], [ %add4209, %cond.false.4205 ]
  store i64 %cond4211, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

cond.false.4212:                                  ; preds = %cond.false.4028
  %863 = load i64, i64* %alloc, align 8
  %mul4213 = mul nsw i64 0, %863
  %864 = load i64, i64* %len, align 8
  %add4214 = add nsw i64 %864, 1
  %add4215 = add nsw i64 %mul4213, %add4214
  %mul4216 = mul nsw i64 0, %add4215
  %sub4217 = sub nsw i64 %mul4216, 1
  %cmp4218 = icmp slt i64 %sub4217, 0
  br i1 %cmp4218, label %cond.true.4220, label %cond.false.4241

cond.true.4220:                                   ; preds = %cond.false.4212
  %865 = load i64, i64* %alloc, align 8
  %mul4221 = mul nsw i64 0, %865
  %866 = load i64, i64* %len, align 8
  %add4222 = add nsw i64 %866, 1
  %add4223 = add nsw i64 %mul4221, %add4222
  %mul4224 = mul nsw i64 0, %add4223
  %add4225 = add nsw i64 %mul4224, 0
  %neg4226 = xor i64 %add4225, -1
  %cmp4227 = icmp eq i64 %neg4226, -1
  %conv4228 = zext i1 %cmp4227 to i32
  %sub4229 = sub nsw i32 0, %conv4228
  %conv4230 = sext i32 %sub4229 to i64
  %867 = load i64, i64* %alloc, align 8
  %mul4231 = mul nsw i64 0, %867
  %868 = load i64, i64* %len, align 8
  %add4232 = add nsw i64 %868, 1
  %add4233 = add nsw i64 %mul4231, %add4232
  %mul4234 = mul nsw i64 0, %add4233
  %add4235 = add nsw i64 %mul4234, 1
  %shl4236 = shl i64 %add4235, 62
  %sub4237 = sub nsw i64 %shl4236, 1
  %mul4238 = mul nsw i64 %sub4237, 2
  %add4239 = add nsw i64 %mul4238, 1
  %sub4240 = sub nsw i64 %conv4230, %add4239
  br label %cond.end.4247

cond.false.4241:                                  ; preds = %cond.false.4212
  %869 = load i64, i64* %alloc, align 8
  %mul4242 = mul nsw i64 0, %869
  %870 = load i64, i64* %len, align 8
  %add4243 = add nsw i64 %870, 1
  %add4244 = add nsw i64 %mul4242, %add4243
  %mul4245 = mul nsw i64 0, %add4244
  %add4246 = add nsw i64 %mul4245, 0
  br label %cond.end.4247

cond.end.4247:                                    ; preds = %cond.false.4241, %cond.true.4220
  %cond4248 = phi i64 [ %sub4240, %cond.true.4220 ], [ %add4246, %cond.false.4241 ]
  %cmp4249 = icmp slt i64 %cond4248, 0
  br i1 %cmp4249, label %cond.true.4251, label %cond.false.4325

cond.true.4251:                                   ; preds = %cond.end.4247
  %871 = load i64, i64* %alloc, align 8
  %cmp4252 = icmp slt i64 %871, 0
  br i1 %cmp4252, label %cond.true.4254, label %cond.false.4295

cond.true.4254:                                   ; preds = %cond.true.4251
  %872 = load i64, i64* %len, align 8
  %add4255 = add nsw i64 %872, 1
  %873 = load i64, i64* %alloc, align 8
  %mul4256 = mul nsw i64 0, %873
  %874 = load i64, i64* %len, align 8
  %add4257 = add nsw i64 %874, 1
  %add4258 = add nsw i64 %mul4256, %add4257
  %mul4259 = mul nsw i64 0, %add4258
  %sub4260 = sub nsw i64 %mul4259, 1
  %cmp4261 = icmp slt i64 %sub4260, 0
  br i1 %cmp4261, label %cond.true.4263, label %cond.false.4284

cond.true.4263:                                   ; preds = %cond.true.4254
  %875 = load i64, i64* %alloc, align 8
  %mul4264 = mul nsw i64 0, %875
  %876 = load i64, i64* %len, align 8
  %add4265 = add nsw i64 %876, 1
  %add4266 = add nsw i64 %mul4264, %add4265
  %mul4267 = mul nsw i64 0, %add4266
  %add4268 = add nsw i64 %mul4267, 0
  %neg4269 = xor i64 %add4268, -1
  %cmp4270 = icmp eq i64 %neg4269, -1
  %conv4271 = zext i1 %cmp4270 to i32
  %sub4272 = sub nsw i32 0, %conv4271
  %conv4273 = sext i32 %sub4272 to i64
  %877 = load i64, i64* %alloc, align 8
  %mul4274 = mul nsw i64 0, %877
  %878 = load i64, i64* %len, align 8
  %add4275 = add nsw i64 %878, 1
  %add4276 = add nsw i64 %mul4274, %add4275
  %mul4277 = mul nsw i64 0, %add4276
  %add4278 = add nsw i64 %mul4277, 1
  %shl4279 = shl i64 %add4278, 62
  %sub4280 = sub nsw i64 %shl4279, 1
  %mul4281 = mul nsw i64 %sub4280, 2
  %add4282 = add nsw i64 %mul4281, 1
  %sub4283 = sub nsw i64 %conv4273, %add4282
  br label %cond.end.4290

cond.false.4284:                                  ; preds = %cond.true.4254
  %879 = load i64, i64* %alloc, align 8
  %mul4285 = mul nsw i64 0, %879
  %880 = load i64, i64* %len, align 8
  %add4286 = add nsw i64 %880, 1
  %add4287 = add nsw i64 %mul4285, %add4286
  %mul4288 = mul nsw i64 0, %add4287
  %add4289 = add nsw i64 %mul4288, 0
  br label %cond.end.4290

cond.end.4290:                                    ; preds = %cond.false.4284, %cond.true.4263
  %cond4291 = phi i64 [ %sub4283, %cond.true.4263 ], [ %add4289, %cond.false.4284 ]
  %881 = load i64, i64* %alloc, align 8
  %sub4292 = sub nsw i64 %cond4291, %881
  %cmp4293 = icmp slt i64 %add4255, %sub4292
  br i1 %cmp4293, label %cond.true.4365, label %lor.lhs.false.4348

cond.false.4295:                                  ; preds = %cond.true.4251
  %882 = load i64, i64* %alloc, align 8
  %mul4296 = mul nsw i64 0, %882
  %883 = load i64, i64* %len, align 8
  %add4297 = add nsw i64 %883, 1
  %add4298 = add nsw i64 %mul4296, %add4297
  %mul4299 = mul nsw i64 0, %add4298
  %sub4300 = sub nsw i64 %mul4299, 1
  %cmp4301 = icmp slt i64 %sub4300, 0
  br i1 %cmp4301, label %cond.true.4303, label %cond.false.4313

cond.true.4303:                                   ; preds = %cond.false.4295
  %884 = load i64, i64* %alloc, align 8
  %mul4304 = mul nsw i64 0, %884
  %885 = load i64, i64* %len, align 8
  %add4305 = add nsw i64 %885, 1
  %add4306 = add nsw i64 %mul4304, %add4305
  %mul4307 = mul nsw i64 0, %add4306
  %add4308 = add nsw i64 %mul4307, 1
  %shl4309 = shl i64 %add4308, 62
  %sub4310 = sub nsw i64 %shl4309, 1
  %mul4311 = mul nsw i64 %sub4310, 2
  %add4312 = add nsw i64 %mul4311, 1
  br label %cond.end.4319

cond.false.4313:                                  ; preds = %cond.false.4295
  %886 = load i64, i64* %alloc, align 8
  %mul4314 = mul nsw i64 0, %886
  %887 = load i64, i64* %len, align 8
  %add4315 = add nsw i64 %887, 1
  %add4316 = add nsw i64 %mul4314, %add4315
  %mul4317 = mul nsw i64 0, %add4316
  %sub4318 = sub nsw i64 %mul4317, 1
  br label %cond.end.4319

cond.end.4319:                                    ; preds = %cond.false.4313, %cond.true.4303
  %cond4320 = phi i64 [ %add4312, %cond.true.4303 ], [ %sub4318, %cond.false.4313 ]
  %888 = load i64, i64* %alloc, align 8
  %sub4321 = sub nsw i64 %cond4320, %888
  %889 = load i64, i64* %len, align 8
  %add4322 = add nsw i64 %889, 1
  %cmp4323 = icmp slt i64 %sub4321, %add4322
  br i1 %cmp4323, label %cond.true.4365, label %lor.lhs.false.4348

cond.false.4325:                                  ; preds = %cond.end.4247
  %890 = load i64, i64* %len, align 8
  %add4326 = add nsw i64 %890, 1
  %cmp4327 = icmp slt i64 %add4326, 0
  br i1 %cmp4327, label %cond.true.4329, label %cond.false.4334

cond.true.4329:                                   ; preds = %cond.false.4325
  %891 = load i64, i64* %alloc, align 8
  %892 = load i64, i64* %len, align 8
  %add4330 = add nsw i64 %892, 1
  %893 = load i64, i64* %alloc, align 8
  %add4331 = add nsw i64 %add4330, %893
  %cmp4332 = icmp sle i64 %891, %add4331
  br i1 %cmp4332, label %cond.true.4365, label %lor.lhs.false.4348

cond.false.4334:                                  ; preds = %cond.false.4325
  %894 = load i64, i64* %alloc, align 8
  %cmp4335 = icmp slt i64 %894, 0
  br i1 %cmp4335, label %cond.true.4337, label %cond.false.4343

cond.true.4337:                                   ; preds = %cond.false.4334
  %895 = load i64, i64* %len, align 8
  %add4338 = add nsw i64 %895, 1
  %896 = load i64, i64* %len, align 8
  %add4339 = add nsw i64 %896, 1
  %897 = load i64, i64* %alloc, align 8
  %add4340 = add nsw i64 %add4339, %897
  %cmp4341 = icmp sle i64 %add4338, %add4340
  br i1 %cmp4341, label %cond.true.4365, label %lor.lhs.false.4348

cond.false.4343:                                  ; preds = %cond.false.4334
  %898 = load i64, i64* %len, align 8
  %add4344 = add nsw i64 %898, 1
  %899 = load i64, i64* %alloc, align 8
  %add4345 = add nsw i64 %add4344, %899
  %900 = load i64, i64* %alloc, align 8
  %cmp4346 = icmp slt i64 %add4345, %900
  br i1 %cmp4346, label %cond.true.4365, label %lor.lhs.false.4348

lor.lhs.false.4348:                               ; preds = %cond.false.4343, %cond.true.4337, %cond.true.4329, %cond.end.4319, %cond.end.4290
  %901 = load i64, i64* %len, align 8
  %add4349 = add nsw i64 %901, 1
  %902 = load i64, i64* %alloc, align 8
  %add4350 = add nsw i64 %add4349, %902
  %mul4351 = mul nsw i64 0, %add4350
  %sub4352 = sub nsw i64 %mul4351, 1
  %cmp4353 = icmp slt i64 %sub4352, 0
  br i1 %cmp4353, label %land.lhs.true.4355, label %lor.lhs.false.4360

land.lhs.true.4355:                               ; preds = %lor.lhs.false.4348
  %903 = load i64, i64* %len, align 8
  %add4356 = add nsw i64 %903, 1
  %904 = load i64, i64* %alloc, align 8
  %add4357 = add nsw i64 %add4356, %904
  %cmp4358 = icmp slt i64 %add4357, -9223372036854775808
  br i1 %cmp4358, label %cond.true.4365, label %lor.lhs.false.4360

lor.lhs.false.4360:                               ; preds = %land.lhs.true.4355, %lor.lhs.false.4348
  %905 = load i64, i64* %len, align 8
  %add4361 = add nsw i64 %905, 1
  %906 = load i64, i64* %alloc, align 8
  %add4362 = add nsw i64 %add4361, %906
  %cmp4363 = icmp slt i64 9223372036854775807, %add4362
  br i1 %cmp4363, label %cond.true.4365, label %cond.false.4380

cond.true.4365:                                   ; preds = %lor.lhs.false.4360, %land.lhs.true.4355, %cond.false.4343, %cond.true.4337, %cond.true.4329, %cond.end.4319, %cond.end.4290
  %907 = load i64, i64* %len, align 8
  %add4366 = add nsw i64 %907, 1
  %908 = load i64, i64* %alloc, align 8
  %add4367 = add i64 %add4366, %908
  %cmp4368 = icmp ule i64 %add4367, 9223372036854775807
  br i1 %cmp4368, label %cond.true.4370, label %cond.false.4373

cond.true.4370:                                   ; preds = %cond.true.4365
  %909 = load i64, i64* %len, align 8
  %add4371 = add nsw i64 %909, 1
  %910 = load i64, i64* %alloc, align 8
  %add4372 = add i64 %add4371, %910
  br label %cond.end.4378

cond.false.4373:                                  ; preds = %cond.true.4365
  %911 = load i64, i64* %len, align 8
  %add4374 = add nsw i64 %911, 1
  %912 = load i64, i64* %alloc, align 8
  %add4375 = add i64 %add4374, %912
  %sub4376 = sub i64 %add4375, -9223372036854775808
  %add4377 = add nsw i64 %sub4376, -9223372036854775808
  br label %cond.end.4378

cond.end.4378:                                    ; preds = %cond.false.4373, %cond.true.4370
  %cond4379 = phi i64 [ %add4372, %cond.true.4370 ], [ %add4377, %cond.false.4373 ]
  store i64 %cond4379, i64* %alloc, align 8
  br i1 true, label %if.then.4398, label %lor.lhs.false.4395

cond.false.4380:                                  ; preds = %lor.lhs.false.4360
  %913 = load i64, i64* %len, align 8
  %add4381 = add nsw i64 %913, 1
  %914 = load i64, i64* %alloc, align 8
  %add4382 = add i64 %add4381, %914
  %cmp4383 = icmp ule i64 %add4382, 9223372036854775807
  br i1 %cmp4383, label %cond.true.4385, label %cond.false.4388

cond.true.4385:                                   ; preds = %cond.false.4380
  %915 = load i64, i64* %len, align 8
  %add4386 = add nsw i64 %915, 1
  %916 = load i64, i64* %alloc, align 8
  %add4387 = add i64 %add4386, %916
  br label %cond.end.4393

cond.false.4388:                                  ; preds = %cond.false.4380
  %917 = load i64, i64* %len, align 8
  %add4389 = add nsw i64 %917, 1
  %918 = load i64, i64* %alloc, align 8
  %add4390 = add i64 %add4389, %918
  %sub4391 = sub i64 %add4390, -9223372036854775808
  %add4392 = add nsw i64 %sub4391, -9223372036854775808
  br label %cond.end.4393

cond.end.4393:                                    ; preds = %cond.false.4388, %cond.true.4385
  %cond4394 = phi i64 [ %add4387, %cond.true.4385 ], [ %add4392, %cond.false.4388 ]
  store i64 %cond4394, i64* %alloc, align 8
  br i1 false, label %if.then.4398, label %lor.lhs.false.4395

lor.lhs.false.4395:                               ; preds = %cond.end.4393, %cond.end.4378, %cond.end.4210, %cond.end.4195, %cond.end.4026, %cond.end.4011, %cond.end.3843, %cond.end.3828, %cond.end.3657, %cond.end.3635, %cond.end.3460, %cond.end.3438, %cond.end.3219, %cond.end.3187, %cond.end.3002, %cond.end.2970, %cond.end.2697, %cond.end.2665, %cond.end.2480, %cond.end.2448
  %919 = load i64, i64* %alloc, align 8
  %cmp4396 = icmp ult i64 -1, %919
  br i1 %cmp4396, label %if.then.4398, label %if.end.4399

if.then.4398:                                     ; preds = %lor.lhs.false.4395, %cond.end.4393, %cond.end.4378, %cond.end.4210, %cond.end.4195, %cond.end.4026, %cond.end.4011, %cond.end.3843, %cond.end.3828, %cond.end.3657, %cond.end.3635, %cond.end.3460, %cond.end.3438, %cond.end.3219, %cond.end.3187, %cond.end.3002, %cond.end.2970, %cond.end.2697, %cond.end.2665, %cond.end.2480, %cond.end.2448, %cond.end.2176, %cond.end.2164, %cond.end.1983, %cond.end.1971, %cond.end.1789, %cond.end.1777, %cond.end.1596, %cond.end.1584, %cond.end.1400, %cond.end.1384, %cond.end.1199, %cond.end.1183, %cond.end.971, %cond.end.948, %cond.end.756, %cond.end.733, %cond.end.486, %cond.end.463, %cond.end.271, %cond.end.248
  call void @memory_full(i64 -1) #9
  unreachable

if.end.4399:                                      ; preds = %lor.lhs.false.4395
  %920 = load i64, i64* %alloc, align 8
  %call4400 = call noalias i8* @xmalloc(i64 %920)
  store i8* %call4400, i8** %utf8_str, align 8
  store i8* %call4400, i8** %up, align 8
  %921 = load i8*, i8** %str.addr, align 8
  store i8* %921, i8** %p, align 8
  br label %while.cond.4401

while.cond.4401:                                  ; preds = %while.body.4409, %if.end.4399
  %922 = load i8*, i8** %p, align 8
  %call4402 = call noalias i8* @g_locale_to_utf8(i8* %922, i64 -1, i64* %bytes_read, i64* %bytes_written, %struct._GError** %err)
  store i8* %call4402, i8** %cp, align 8
  %tobool4403 = icmp ne i8* %call4402, null
  br i1 %tobool4403, label %land.end.4408, label %land.rhs.4404

land.rhs.4404:                                    ; preds = %while.cond.4401
  %923 = load %struct._GError*, %struct._GError** %err, align 8
  %code4405 = getelementptr inbounds %struct._GError, %struct._GError* %923, i32 0, i32 1
  %924 = load i32, i32* %code4405, align 4
  %cmp4406 = icmp eq i32 %924, 1
  br label %land.end.4408

land.end.4408:                                    ; preds = %land.rhs.4404, %while.cond.4401
  %925 = phi i1 [ false, %while.cond.4401 ], [ %cmp4406, %land.rhs.4404 ]
  br i1 %925, label %while.body.4409, label %while.end.4416

while.body.4409:                                  ; preds = %land.end.4408
  %926 = load i8*, i8** %up, align 8
  %927 = load i8*, i8** %p, align 8
  %928 = load i64, i64* %bytes_written, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %926, i8* %927, i64 %928, i32 1, i1 false)
  %929 = load i64, i64* %bytes_written, align 8
  %930 = load i8*, i8** %up, align 8
  %add.ptr4410 = getelementptr inbounds i8, i8* %930, i64 %929
  store i8* %add.ptr4410, i8** %up, align 8
  %931 = load i8*, i8** %up, align 8
  %932 = load i64, i64* %bytes_written, align 8
  %933 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %933, i64 %932
  %934 = load i8, i8* %arrayidx, align 1
  %conv4411 = zext i8 %934 to i32
  %call4412 = call i32 (i8*, i8*, ...) @sprintf(i8* %931, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i32 0, i32 0), i32 %conv4411) #4
  %935 = load i8*, i8** %up, align 8
  %idx.ext = sext i32 %call4412 to i64
  %add.ptr4413 = getelementptr inbounds i8, i8* %935, i64 %idx.ext
  store i8* %add.ptr4413, i8** %up, align 8
  %936 = load i64, i64* %bytes_written, align 8
  %add4414 = add i64 %936, 1
  %937 = load i8*, i8** %p, align 8
  %add.ptr4415 = getelementptr inbounds i8, i8* %937, i64 %add4414
  store i8* %add.ptr4415, i8** %p, align 8
  %938 = load %struct._GError*, %struct._GError** %err, align 8
  call void @g_error_free(%struct._GError* %938)
  store %struct._GError* null, %struct._GError** %err, align 8
  br label %while.cond.4401

while.end.4416:                                   ; preds = %land.end.4408
  %939 = load i8*, i8** %cp, align 8
  %tobool4417 = icmp ne i8* %939, null
  br i1 %tobool4417, label %if.then.4418, label %if.end.4420

if.then.4418:                                     ; preds = %while.end.4416
  %940 = load i8*, i8** %up, align 8
  %941 = load i8*, i8** %cp, align 8
  %call4419 = call i8* @strcpy(i8* %940, i8* %941) #4
  %942 = load i8*, i8** %cp, align 8
  call void @g_free(i8* %942)
  br label %if.end.4420

if.end.4420:                                      ; preds = %if.then.4418, %while.end.4416
  %943 = load %struct._GError*, %struct._GError** %err, align 8
  %tobool4421 = icmp ne %struct._GError* %943, null
  br i1 %tobool4421, label %if.then.4422, label %if.end.4423

if.then.4422:                                     ; preds = %if.end.4420
  %944 = load %struct._GError*, %struct._GError** %err, align 8
  call void @g_error_free(%struct._GError* %944)
  store %struct._GError* null, %struct._GError** %err, align 8
  br label %if.end.4423

if.end.4423:                                      ; preds = %if.then.4422, %if.end.4420
  br label %if.end.4424

if.end.4424:                                      ; preds = %if.end.4423, %if.end.5
  %945 = load i8*, i8** %utf8_str, align 8
  store i8* %945, i8** %retval
  br label %return

return:                                           ; preds = %if.end.4424, %if.else, %if.then
  %946 = load i8*, i8** %retval
  ret i8* %946
}

declare %struct._GtkWidget* @gtk_dialog_get_content_area(%struct._GtkDialog*) #1

declare void @gtk_misc_set_alignment(%struct._GtkMisc*, float, float) #1

declare void @gtk_box_set_spacing(%struct._GtkBox*, i32) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #2

declare %struct._GtkWidget* @gtk_button_new_with_label(i8*) #1

declare void @gtk_widget_unmap(%struct._GtkWidget*) #1

declare i32 @g_utf8_validate(i8*, i64, i8**) #1

declare noalias i8* @g_locale_to_utf8(i8*, i64, i64*, i64*, %struct._GError**) #1

declare void @g_error_free(%struct._GError*) #1

; Function Attrs: noreturn
declare void @memory_full(i64) #6

declare noalias i8* @xmalloc(i64) #1

declare %struct._GtkWidget* @gtk_menu_new() #1

; Function Attrs: nounwind uwtable
define internal i32 @menuitem_highlight_callback(%struct._GtkWidget* %w, %struct._GdkEventCrossing* %event, i8* %client_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %struct._GdkEventCrossing*, align 8
  %client_data.addr = alloca i8*, align 8
  %ev = alloca %union._GdkEvent, align 8
  %subwidget = alloca %struct._GtkWidget*, align 8
  %data = alloca %struct.xg_menu_item_cb_data_*, align 8
  %call_data = alloca i8*, align 8
  %func = alloca void (%struct._GtkWidget*, i8*)*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store %struct._GdkEventCrossing* %event, %struct._GdkEventCrossing** %event.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  %crossing = bitcast %union._GdkEvent* %ev to %struct._GdkEventCrossing*
  %0 = load %struct._GdkEventCrossing*, %struct._GdkEventCrossing** %event.addr, align 8
  %1 = bitcast %struct._GdkEventCrossing* %crossing to i8*
  %2 = bitcast %struct._GdkEventCrossing* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 88, i32 8, i1 false)
  %call = call %struct._GtkWidget* @gtk_get_event_widget(%union._GdkEvent* %ev)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %subwidget, align 8
  %3 = load %struct._GtkWidget*, %struct._GtkWidget** %subwidget, align 8
  %4 = bitcast %struct._GtkWidget* %3 to %struct._GTypeInstance*
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %4, i64 80)
  %5 = bitcast %struct._GTypeInstance* %call1 to %struct._GObject*
  %call2 = call i8* @g_object_get_data(%struct._GObject* %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0))
  %6 = bitcast i8* %call2 to %struct.xg_menu_item_cb_data_*
  store %struct.xg_menu_item_cb_data_* %6, %struct.xg_menu_item_cb_data_** %data, align 8
  %7 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  %tobool = icmp ne %struct.xg_menu_item_cb_data_* %7, null
  br i1 %tobool, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %8 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  %help = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %8, i32 0, i32 2
  %9 = load i64, i64* %help, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %9, %call3
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  %cl_data = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %10, i32 0, i32 4
  %11 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data, align 8
  %highlight_cb = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %11, i32 0, i32 4
  %12 = load void ()*, void ()** %highlight_cb, align 8
  %tobool4 = icmp ne void ()* %12, null
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %land.lhs.true
  %13 = load %struct._GdkEventCrossing*, %struct._GdkEventCrossing** %event.addr, align 8
  %type = getelementptr inbounds %struct._GdkEventCrossing, %struct._GdkEventCrossing* %13, i32 0, i32 0
  %14 = load i32, i32* %type, align 4
  %cmp6 = icmp eq i32 %14, 11
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.5
  br label %cond.end

cond.false:                                       ; preds = %if.then.5
  %15 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.xg_menu_item_cb_data_* [ null, %cond.true ], [ %15, %cond.false ]
  %16 = bitcast %struct.xg_menu_item_cb_data_* %cond to i8*
  store i8* %16, i8** %call_data, align 8
  %17 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  %cl_data7 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %17, i32 0, i32 4
  %18 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data7, align 8
  %highlight_cb8 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %18, i32 0, i32 4
  %19 = load void ()*, void ()** %highlight_cb8, align 8
  %20 = bitcast void ()* %19 to void (%struct._GtkWidget*, i8*)*
  store void (%struct._GtkWidget*, i8*)* %20, void (%struct._GtkWidget*, i8*)** %func, align 8
  %21 = load void (%struct._GtkWidget*, i8*)*, void (%struct._GtkWidget*, i8*)** %func, align 8
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %subwidget, align 8
  %23 = load i8*, i8** %call_data, align 8
  call void %21(%struct._GtkWidget* %22, i8* %23)
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true, %if.then
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %entry
  ret i32 0
}

declare %struct._GtkWidget* @gtk_menu_bar_new() #1

; Function Attrs: nounwind uwtable
define internal %struct.xg_menu_cb_data_* @make_cl_data(%struct.xg_menu_cb_data_* %cl_data, %struct.frame* %f, void ()* %highlight_cb) #0 {
entry:
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  %0 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %tobool = icmp ne %struct.xg_menu_cb_data_* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call noalias i8* @xmalloc(i64 56)
  %1 = bitcast i8* %call to %struct.xg_menu_cb_data_*
  store %struct.xg_menu_cb_data_* %1, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %2 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %3 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %f1 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %3, i32 0, i32 1
  store %struct.frame* %2, %struct.frame** %f1, align 8
  %4 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_vector = getelementptr inbounds %struct.frame, %struct.frame* %4, i32 0, i32 13
  %5 = load i64, i64* %menu_bar_vector, align 8
  %6 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %menu_bar_vector2 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %6, i32 0, i32 2
  store i64 %5, i64* %menu_bar_vector2, align 8
  %7 = load %struct.frame*, %struct.frame** %f.addr, align 8
  %menu_bar_items_used = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 21
  %8 = load i32, i32* %menu_bar_items_used, align 4
  %9 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %menu_bar_items_used3 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %9, i32 0, i32 3
  store i32 %8, i32* %menu_bar_items_used3, align 4
  %10 = load void ()*, void ()** %highlight_cb.addr, align 8
  %11 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %highlight_cb4 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %11, i32 0, i32 4
  store void ()* %10, void ()** %highlight_cb4, align 8
  %12 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ref_count = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %12, i32 0, i32 5
  store i32 0, i32* %ref_count, align 4
  %13 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ptrs = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %13, i32 0, i32 0
  call void @xg_list_insert(%struct.xg_list_node_* @xg_menu_cb_list, %struct.xg_list_node_* %ptrs)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ref_count5 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %14, i32 0, i32 5
  %15 = load i32, i32* %ref_count5, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %ref_count5, align 4
  %16 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  ret %struct.xg_menu_cb_data_* %16
}

; Function Attrs: nounwind uwtable
define internal void @menu_destroy_callback(%struct._GtkWidget* %w, i8* %client_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %client_data.addr = alloca i8*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  %0 = load i8*, i8** %client_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.xg_menu_cb_data_*
  call void @unref_cl_data(%struct.xg_menu_cb_data_* %1)
  ret void
}

declare zeroext i1 @menu_separator_name_p(i8*) #1

declare %struct._GtkWidget* @gtk_menu_item_new_with_label(i8*) #1

declare %struct._GtkWidget* @gtk_separator_menu_item_new() #1

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_create_one_menuitem(%struct._widget_value* %item, %struct.frame* %f, void ()* %select_cb, void ()* %highlight_cb, %struct.xg_menu_cb_data_* %cl_data, %struct._GSList** %group) #0 {
entry:
  %item.addr = alloca %struct._widget_value*, align 8
  %f.addr = alloca %struct.frame*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %group.addr = alloca %struct._GSList**, align 8
  %utf8_label = alloca i8*, align 8
  %utf8_key = alloca i8*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %cb_data = alloca %struct.xg_menu_item_cb_data_*, align 8
  store %struct._widget_value* %item, %struct._widget_value** %item.addr, align 8
  store %struct.frame* %f, %struct.frame** %f.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  store %struct._GSList** %group, %struct._GSList*** %group.addr, align 8
  %0 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %name = getelementptr inbounds %struct._widget_value, %struct._widget_value* %0, i32 0, i32 1
  %1 = load i8*, i8** %name, align 8
  %call = call i8* @get_utf8_string(i8* %1)
  store i8* %call, i8** %utf8_label, align 8
  %2 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %key = getelementptr inbounds %struct._widget_value, %struct._widget_value* %2, i32 0, i32 4
  %3 = load i8*, i8** %key, align 8
  %call1 = call i8* @get_utf8_string(i8* %3)
  store i8* %call1, i8** %utf8_key, align 8
  %4 = load i8*, i8** %utf8_label, align 8
  %5 = load i8*, i8** %utf8_key, align 8
  %6 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %7 = load %struct._GSList**, %struct._GSList*** %group.addr, align 8
  %call2 = call %struct._GtkWidget* @make_menu_item(i8* %4, i8* %5, %struct._widget_value* %6, %struct._GSList** %7)
  store %struct._GtkWidget* %call2, %struct._GtkWidget** %w, align 8
  %8 = load i8*, i8** %utf8_label, align 8
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i8*, i8** %utf8_label, align 8
  call void @g_free(i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8*, i8** %utf8_key, align 8
  %tobool3 = icmp ne i8* %10, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  %11 = load i8*, i8** %utf8_key, align 8
  call void @g_free(i8* %11)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %call6 = call noalias i8* @xmalloc(i64 48)
  %12 = bitcast i8* %call6 to %struct.xg_menu_item_cb_data_*
  store %struct.xg_menu_item_cb_data_* %12, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %13 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %ptrs = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %13, i32 0, i32 0
  call void @xg_list_insert(%struct.xg_list_node_* @xg_menu_item_cb_list, %struct.xg_list_node_* %ptrs)
  %14 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %14, i32 0, i32 1
  store i64 0, i64* %select_id, align 8
  %15 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %help = getelementptr inbounds %struct._widget_value, %struct._widget_value* %15, i32 0, i32 5
  %16 = load i64, i64* %help, align 8
  %17 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %help7 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %17, i32 0, i32 2
  store i64 %16, i64* %help7, align 8
  %18 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %19 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %cl_data8 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %19, i32 0, i32 4
  store %struct.xg_menu_cb_data_* %18, %struct.xg_menu_cb_data_** %cl_data8, align 8
  %20 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %call_data = getelementptr inbounds %struct._widget_value, %struct._widget_value* %20, i32 0, i32 11
  %21 = load i8*, i8** %call_data, align 8
  %22 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %call_data9 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %22, i32 0, i32 3
  store i8* %21, i8** %call_data9, align 8
  %23 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %24 = bitcast %struct._GtkWidget* %23 to %struct._GTypeInstance*
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %24, i64 80)
  %25 = bitcast %struct._GTypeInstance* %call10 to %struct._GObject*
  %26 = bitcast %struct._GObject* %25 to i8*
  %27 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %28 = bitcast %struct.xg_menu_item_cb_data_* %27 to i8*
  %call11 = call i64 @g_signal_connect_data(i8* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), void ()* bitcast (void (%struct._GtkWidget*, i8*)* @menuitem_destroy_callback to void ()*), i8* %28, void (i8*, %struct._GClosure*)* null, i32 0)
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %30 = bitcast %struct._GtkWidget* %29 to %struct._GTypeInstance*
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %30, i64 80)
  %31 = bitcast %struct._GTypeInstance* %call12 to %struct._GObject*
  %32 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %33 = bitcast %struct.xg_menu_item_cb_data_* %32 to i8*
  call void @g_object_set_data(%struct._GObject* %31, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), i8* %33)
  %34 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %call_data13 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %34, i32 0, i32 11
  %35 = load i8*, i8** %call_data13, align 8
  %tobool14 = icmp ne i8* %35, null
  br i1 %tobool14, label %land.lhs.true, label %if.end.23

land.lhs.true:                                    ; preds = %if.end.5
  %36 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %36, i32 0, i32 10
  %37 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  %tobool15 = icmp ne %struct._widget_value* %37, null
  br i1 %tobool15, label %if.end.23, label %if.then.16

if.then.16:                                       ; preds = %land.lhs.true
  %38 = load void ()*, void ()** %select_cb.addr, align 8
  %tobool17 = icmp ne void ()* %38, null
  br i1 %tobool17, label %if.then.18, label %if.end.22

if.then.18:                                       ; preds = %if.then.16
  %39 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %40 = bitcast %struct._GtkWidget* %39 to %struct._GTypeInstance*
  %call19 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %40, i64 80)
  %41 = bitcast %struct._GTypeInstance* %call19 to %struct._GObject*
  %42 = bitcast %struct._GObject* %41 to i8*
  %43 = load void ()*, void ()** %select_cb.addr, align 8
  %44 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %45 = bitcast %struct.xg_menu_item_cb_data_* %44 to i8*
  %call20 = call i64 @g_signal_connect_data(i8* %42, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.67, i32 0, i32 0), void ()* %43, i8* %45, void (i8*, %struct._GClosure*)* null, i32 0)
  %46 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id21 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %46, i32 0, i32 1
  store i64 %call20, i64* %select_id21, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.18, %if.then.16
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %land.lhs.true, %if.end.5
  %47 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  ret %struct._GtkWidget* %47
}

declare void @gtk_menu_shell_append(%struct._GtkMenuShell*, %struct._GtkWidget*) #1

; Function Attrs: nounwind uwtable
define internal void @xg_list_insert(%struct.xg_list_node_* %list, %struct.xg_list_node_* %node) #0 {
entry:
  %list.addr = alloca %struct.xg_list_node_*, align 8
  %node.addr = alloca %struct.xg_list_node_*, align 8
  %list_start = alloca %struct.xg_list_node_*, align 8
  store %struct.xg_list_node_* %list, %struct.xg_list_node_** %list.addr, align 8
  store %struct.xg_list_node_* %node, %struct.xg_list_node_** %node.addr, align 8
  %0 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list.addr, align 8
  %next = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %0, i32 0, i32 1
  %1 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next, align 8
  store %struct.xg_list_node_* %1, %struct.xg_list_node_** %list_start, align 8
  %2 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list_start, align 8
  %tobool = icmp ne %struct.xg_list_node_* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %4 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list_start, align 8
  %prev = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %4, i32 0, i32 0
  store %struct.xg_list_node_* %3, %struct.xg_list_node_** %prev, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list_start, align 8
  %6 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %next1 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %6, i32 0, i32 1
  store %struct.xg_list_node_* %5, %struct.xg_list_node_** %next1, align 8
  %7 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %prev2 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %7, i32 0, i32 0
  store %struct.xg_list_node_* null, %struct.xg_list_node_** %prev2, align 8
  %8 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %9 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list.addr, align 8
  %next3 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %9, i32 0, i32 1
  store %struct.xg_list_node_* %8, %struct.xg_list_node_** %next3, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @unref_cl_data(%struct.xg_menu_cb_data_* %cl_data) #0 {
entry:
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %0 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %tobool = icmp ne %struct.xg_menu_cb_data_* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ref_count = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %1, i32 0, i32 5
  %2 = load i32, i32* %ref_count, align 4
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ref_count1 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %3, i32 0, i32 5
  %4 = load i32, i32* %ref_count1, align 4
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %ref_count1, align 4
  %5 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ref_count2 = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %5, i32 0, i32 5
  %6 = load i32, i32* %ref_count2, align 4
  %cmp3 = icmp eq i32 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %7 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %ptrs = getelementptr inbounds %struct.xg_menu_cb_data_, %struct.xg_menu_cb_data_* %7, i32 0, i32 0
  call void @xg_list_remove(%struct.xg_list_node_* @xg_menu_cb_list, %struct.xg_list_node_* %ptrs)
  %8 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %9 = bitcast %struct.xg_menu_cb_data_* %8 to i8*
  call void @xfree(i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xg_list_remove(%struct.xg_list_node_* %list, %struct.xg_list_node_* %node) #0 {
entry:
  %list.addr = alloca %struct.xg_list_node_*, align 8
  %node.addr = alloca %struct.xg_list_node_*, align 8
  %list_start = alloca %struct.xg_list_node_*, align 8
  store %struct.xg_list_node_* %list, %struct.xg_list_node_** %list.addr, align 8
  store %struct.xg_list_node_* %node, %struct.xg_list_node_** %node.addr, align 8
  %0 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list.addr, align 8
  %next = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %0, i32 0, i32 1
  %1 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next, align 8
  store %struct.xg_list_node_* %1, %struct.xg_list_node_** %list_start, align 8
  %2 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %3 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list_start, align 8
  %cmp = icmp eq %struct.xg_list_node_* %2, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %next1 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %4, i32 0, i32 1
  %5 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next1, align 8
  %6 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list.addr, align 8
  %next2 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %6, i32 0, i32 1
  store %struct.xg_list_node_* %5, %struct.xg_list_node_** %next2, align 8
  %7 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list.addr, align 8
  %next3 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %7, i32 0, i32 1
  %8 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next3, align 8
  %tobool = icmp ne %struct.xg_list_node_* %8, null
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %9 = load %struct.xg_list_node_*, %struct.xg_list_node_** %list.addr, align 8
  %next5 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %9, i32 0, i32 1
  %10 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next5, align 8
  %prev = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %10, i32 0, i32 0
  store %struct.xg_list_node_* null, %struct.xg_list_node_** %prev, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %if.end.16

if.else:                                          ; preds = %entry
  %11 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %next6 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %11, i32 0, i32 1
  %12 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next6, align 8
  %13 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %prev7 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %13, i32 0, i32 0
  %14 = load %struct.xg_list_node_*, %struct.xg_list_node_** %prev7, align 8
  %next8 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %14, i32 0, i32 1
  store %struct.xg_list_node_* %12, %struct.xg_list_node_** %next8, align 8
  %15 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %next9 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %15, i32 0, i32 1
  %16 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next9, align 8
  %tobool10 = icmp ne %struct.xg_list_node_* %16, null
  br i1 %tobool10, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %if.else
  %17 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %prev12 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %17, i32 0, i32 0
  %18 = load %struct.xg_list_node_*, %struct.xg_list_node_** %prev12, align 8
  %19 = load %struct.xg_list_node_*, %struct.xg_list_node_** %node.addr, align 8
  %next13 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %19, i32 0, i32 1
  %20 = load %struct.xg_list_node_*, %struct.xg_list_node_** %next13, align 8
  %prev14 = getelementptr inbounds %struct.xg_list_node_, %struct.xg_list_node_* %20, i32 0, i32 0
  store %struct.xg_list_node_* %18, %struct.xg_list_node_** %prev14, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.11, %if.else
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @make_menu_item(i8* %utf8_label, i8* %utf8_key, %struct._widget_value* %item, %struct._GSList** %group) #0 {
entry:
  %utf8_label.addr = alloca i8*, align 8
  %utf8_key.addr = alloca i8*, align 8
  %item.addr = alloca %struct._widget_value*, align 8
  %group.addr = alloca %struct._GSList**, align 8
  %w = alloca %struct._GtkWidget*, align 8
  %wtoadd = alloca %struct._GtkWidget*, align 8
  store i8* %utf8_label, i8** %utf8_label.addr, align 8
  store i8* %utf8_key, i8** %utf8_key.addr, align 8
  store %struct._widget_value* %item, %struct._widget_value** %item.addr, align 8
  store %struct._GSList** %group, %struct._GSList*** %group.addr, align 8
  store %struct._GtkWidget* null, %struct._GtkWidget** %wtoadd, align 8
  %0 = load i8*, i8** %utf8_label.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68, i32 0, i32 0), i8** %utf8_label.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %utf8_key.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %2 = load i8*, i8** %utf8_label.addr, align 8
  %3 = load i8*, i8** %utf8_key.addr, align 8
  %call = call %struct._GtkWidget* @make_widget_for_menu_item(i8* %2, i8* %3)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wtoadd, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %4 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %button_type = getelementptr inbounds %struct._widget_value, %struct._widget_value* %4, i32 0, i32 9
  %5 = load i32, i32* %button_type, align 4
  %cmp = icmp eq i32 %5, 1
  br i1 %cmp, label %if.then.4, label %if.else.13

if.then.4:                                        ; preds = %if.end.3
  %6 = load %struct._GSList**, %struct._GSList*** %group.addr, align 8
  store %struct._GSList* null, %struct._GSList** %6, align 8
  %7 = load i8*, i8** %utf8_key.addr, align 8
  %tobool5 = icmp ne i8* %7, null
  br i1 %tobool5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then.4
  %call7 = call %struct._GtkWidget* @gtk_check_menu_item_new()
  store %struct._GtkWidget* %call7, %struct._GtkWidget** %w, align 8
  br label %if.end.9

if.else:                                          ; preds = %if.then.4
  %8 = load i8*, i8** %utf8_label.addr, align 8
  %call8 = call %struct._GtkWidget* @gtk_check_menu_item_new_with_label(i8* %8)
  store %struct._GtkWidget* %call8, %struct._GtkWidget** %w, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.6
  %9 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %10 = bitcast %struct._GtkWidget* %9 to %struct._GTypeInstance*
  %call10 = call i64 @gtk_check_menu_item_get_type() #8
  %call11 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %10, i64 %call10)
  %11 = bitcast %struct._GTypeInstance* %call11 to %struct._GtkCheckMenuItem*
  %12 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %selected = getelementptr inbounds %struct._widget_value, %struct._widget_value* %12, i32 0, i32 7
  %13 = load i8, i8* %selected, align 1
  %tobool12 = trunc i8 %13 to i1
  %conv = zext i1 %tobool12 to i32
  call void @gtk_check_menu_item_set_active(%struct._GtkCheckMenuItem* %11, i32 %conv)
  br label %if.end.41

if.else.13:                                       ; preds = %if.end.3
  %14 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %button_type14 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %14, i32 0, i32 9
  %15 = load i32, i32* %button_type14, align 4
  %cmp15 = icmp eq i32 %15, 2
  br i1 %cmp15, label %if.then.17, label %if.else.33

if.then.17:                                       ; preds = %if.else.13
  %16 = load i8*, i8** %utf8_key.addr, align 8
  %tobool18 = icmp ne i8* %16, null
  br i1 %tobool18, label %if.then.19, label %if.else.21

if.then.19:                                       ; preds = %if.then.17
  %17 = load %struct._GSList**, %struct._GSList*** %group.addr, align 8
  %18 = load %struct._GSList*, %struct._GSList** %17, align 8
  %call20 = call %struct._GtkWidget* @gtk_radio_menu_item_new(%struct._GSList* %18)
  store %struct._GtkWidget* %call20, %struct._GtkWidget** %w, align 8
  br label %if.end.23

if.else.21:                                       ; preds = %if.then.17
  %19 = load %struct._GSList**, %struct._GSList*** %group.addr, align 8
  %20 = load %struct._GSList*, %struct._GSList** %19, align 8
  %21 = load i8*, i8** %utf8_label.addr, align 8
  %call22 = call %struct._GtkWidget* @gtk_radio_menu_item_new_with_label(%struct._GSList* %20, i8* %21)
  store %struct._GtkWidget* %call22, %struct._GtkWidget** %w, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.21, %if.then.19
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %23 = bitcast %struct._GtkWidget* %22 to %struct._GTypeInstance*
  %call24 = call i64 @gtk_radio_menu_item_get_type() #8
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %23, i64 %call24)
  %24 = bitcast %struct._GTypeInstance* %call25 to %struct._GtkRadioMenuItem*
  %call26 = call %struct._GSList* @gtk_radio_menu_item_get_group(%struct._GtkRadioMenuItem* %24)
  %25 = load %struct._GSList**, %struct._GSList*** %group.addr, align 8
  store %struct._GSList* %call26, %struct._GSList** %25, align 8
  %26 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %selected27 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %26, i32 0, i32 7
  %27 = load i8, i8* %selected27, align 1
  %tobool28 = trunc i8 %27 to i1
  br i1 %tobool28, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %if.end.23
  %28 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %29 = bitcast %struct._GtkWidget* %28 to %struct._GTypeInstance*
  %call30 = call i64 @gtk_check_menu_item_get_type() #8
  %call31 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %29, i64 %call30)
  %30 = bitcast %struct._GTypeInstance* %call31 to %struct._GtkCheckMenuItem*
  call void @gtk_check_menu_item_set_active(%struct._GtkCheckMenuItem* %30, i32 1)
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %if.end.23
  br label %if.end.40

if.else.33:                                       ; preds = %if.else.13
  %31 = load %struct._GSList**, %struct._GSList*** %group.addr, align 8
  store %struct._GSList* null, %struct._GSList** %31, align 8
  %32 = load i8*, i8** %utf8_key.addr, align 8
  %tobool34 = icmp ne i8* %32, null
  br i1 %tobool34, label %if.then.35, label %if.else.37

if.then.35:                                       ; preds = %if.else.33
  %call36 = call %struct._GtkWidget* @gtk_menu_item_new()
  store %struct._GtkWidget* %call36, %struct._GtkWidget** %w, align 8
  br label %if.end.39

if.else.37:                                       ; preds = %if.else.33
  %33 = load i8*, i8** %utf8_label.addr, align 8
  %call38 = call %struct._GtkWidget* @gtk_menu_item_new_with_label(i8* %33)
  store %struct._GtkWidget* %call38, %struct._GtkWidget** %w, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.37, %if.then.35
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.end.32
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.9
  %34 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoadd, align 8
  %tobool42 = icmp ne %struct._GtkWidget* %34, null
  br i1 %tobool42, label %if.then.43, label %if.end.46

if.then.43:                                       ; preds = %if.end.41
  %35 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  %36 = bitcast %struct._GtkWidget* %35 to %struct._GTypeInstance*
  %call44 = call i64 @gtk_container_get_type() #8
  %call45 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %36, i64 %call44)
  %37 = bitcast %struct._GTypeInstance* %call45 to %struct._GtkContainer*
  %38 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoadd, align 8
  call void @gtk_container_add(%struct._GtkContainer* %37, %struct._GtkWidget* %38)
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.43, %if.end.41
  %39 = load %struct._widget_value*, %struct._widget_value** %item.addr, align 8
  %enabled = getelementptr inbounds %struct._widget_value, %struct._widget_value* %39, i32 0, i32 6
  %40 = load i8, i8* %enabled, align 1
  %tobool47 = trunc i8 %40 to i1
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.46
  %41 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %41, i32 0)
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.48, %if.end.46
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  ret %struct._GtkWidget* %42
}

; Function Attrs: nounwind uwtable
define internal void @menuitem_destroy_callback(%struct._GtkWidget* %w, i8* %client_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %client_data.addr = alloca i8*, align 8
  %data = alloca %struct.xg_menu_item_cb_data_*, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  %0 = load i8*, i8** %client_data.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %client_data.addr, align 8
  %2 = bitcast i8* %1 to %struct.xg_menu_item_cb_data_*
  store %struct.xg_menu_item_cb_data_* %2, %struct.xg_menu_item_cb_data_** %data, align 8
  %3 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  %ptrs = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %3, i32 0, i32 0
  call void @xg_list_remove(%struct.xg_list_node_* @xg_menu_item_cb_list, %struct.xg_list_node_* %ptrs)
  %4 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %data, align 8
  %5 = bitcast %struct.xg_menu_item_cb_data_* %4 to i8*
  call void @xfree(i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @make_widget_for_menu_item(i8* %utf8_label, i8* %utf8_key) #0 {
entry:
  %utf8_label.addr = alloca i8*, align 8
  %utf8_key.addr = alloca i8*, align 8
  %wlbl = alloca %struct._GtkWidget*, align 8
  %wkey = alloca %struct._GtkWidget*, align 8
  %wbox = alloca %struct._GtkWidget*, align 8
  store i8* %utf8_label, i8** %utf8_label.addr, align 8
  store i8* %utf8_key, i8** %utf8_key.addr, align 8
  %call = call %struct._GtkWidget* @gtk_hbox_new(i32 0, i32 0)
  store %struct._GtkWidget* %call, %struct._GtkWidget** %wbox, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call1 = call i64 @gtk_box_get_type() #8
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call1)
  %2 = bitcast %struct._GTypeInstance* %call2 to %struct._GtkBox*
  call void @gtk_box_set_homogeneous(%struct._GtkBox* %2, i32 0)
  %3 = load i8*, i8** %utf8_label.addr, align 8
  %call3 = call %struct._GtkWidget* @gtk_label_new(i8* %3)
  store %struct._GtkWidget* %call3, %struct._GtkWidget** %wlbl, align 8
  %4 = load i8*, i8** %utf8_key.addr, align 8
  %call4 = call %struct._GtkWidget* @gtk_label_new(i8* %4)
  store %struct._GtkWidget* %call4, %struct._GtkWidget** %wkey, align 8
  %5 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  %6 = bitcast %struct._GtkWidget* %5 to %struct._GTypeInstance*
  %call5 = call i64 @gtk_misc_get_type() #8
  %call6 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %6, i64 %call5)
  %7 = bitcast %struct._GTypeInstance* %call6 to %struct._GtkMisc*
  call void @gtk_misc_set_alignment(%struct._GtkMisc* %7, float 0.000000e+00, float 5.000000e-01)
  %8 = load %struct._GtkWidget*, %struct._GtkWidget** %wkey, align 8
  %9 = bitcast %struct._GtkWidget* %8 to %struct._GTypeInstance*
  %call7 = call i64 @gtk_misc_get_type() #8
  %call8 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %9, i64 %call7)
  %10 = bitcast %struct._GTypeInstance* %call8 to %struct._GtkMisc*
  call void @gtk_misc_set_alignment(%struct._GtkMisc* %10, float 0.000000e+00, float 5.000000e-01)
  %11 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  %12 = bitcast %struct._GtkWidget* %11 to %struct._GTypeInstance*
  %call9 = call i64 @gtk_box_get_type() #8
  %call10 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %12, i64 %call9)
  %13 = bitcast %struct._GTypeInstance* %call10 to %struct._GtkBox*
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %13, %struct._GtkWidget* %14, i32 1, i32 1, i32 0)
  %15 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  %16 = bitcast %struct._GtkWidget* %15 to %struct._GTypeInstance*
  %call11 = call i64 @gtk_box_get_type() #8
  %call12 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %16, i64 %call11)
  %17 = bitcast %struct._GTypeInstance* %call12 to %struct._GtkBox*
  %18 = load %struct._GtkWidget*, %struct._GtkWidget** %wkey, align 8
  call void @gtk_box_pack_start(%struct._GtkBox* %17, %struct._GtkWidget* %18, i32 0, i32 0, i32 0)
  %19 = load %struct._GtkWidget*, %struct._GtkWidget** %wlbl, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0))
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wkey, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0))
  %21 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  call void @gtk_widget_set_name(%struct._GtkWidget* %21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.65, i32 0, i32 0))
  %22 = load %struct._GtkWidget*, %struct._GtkWidget** %wbox, align 8
  ret %struct._GtkWidget* %22
}

declare %struct._GtkWidget* @gtk_check_menu_item_new() #1

declare %struct._GtkWidget* @gtk_check_menu_item_new_with_label(i8*) #1

declare void @gtk_check_menu_item_set_active(%struct._GtkCheckMenuItem*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_check_menu_item_get_type() #3

declare %struct._GtkWidget* @gtk_radio_menu_item_new(%struct._GSList*) #1

declare %struct._GtkWidget* @gtk_radio_menu_item_new_with_label(%struct._GSList*, i8*) #1

declare %struct._GSList* @gtk_radio_menu_item_get_group(%struct._GtkRadioMenuItem*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_radio_menu_item_get_type() #3

declare %struct._GtkWidget* @gtk_menu_item_new() #1

declare %struct._GList* @gdk_window_peek_children(%struct._GdkDrawable*) #1

declare void @gdk_window_set_cursor(%struct._GdkDrawable*, %struct._GdkCursor*) #1

; Function Attrs: nounwind readnone
declare i64 @gdk_window_object_get_type() #3

; Function Attrs: nounwind uwtable
define internal void @xg_destroy_widgets(%struct._GList* %list) #0 {
entry:
  %list.addr = alloca %struct._GList*, align 8
  %iter = alloca %struct._GList*, align 8
  %w = alloca %struct._GtkWidget*, align 8
  store %struct._GList* %list, %struct._GList** %list.addr, align 8
  %0 = load %struct._GList*, %struct._GList** %list.addr, align 8
  store %struct._GList* %0, %struct._GList** %iter, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end, %entry
  %1 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool = icmp ne %struct._GList* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct._GList*, %struct._GList** %iter, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %2, i32 0, i32 0
  %3 = load i8*, i8** %data, align 8
  %4 = bitcast i8* %3 to %struct._GTypeInstance*
  %call = call i64 @gtk_widget_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %4, i64 %call)
  %5 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkWidget*
  store %struct._GtkWidget* %5, %struct._GtkWidget** %w, align 8
  %6 = load %struct._GtkWidget*, %struct._GtkWidget** %w, align 8
  call void @gtk_widget_destroy(%struct._GtkWidget* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct._GList*, %struct._GList** %iter, align 8
  %tobool2 = icmp ne %struct._GList* %7, null
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.inc
  %8 = load %struct._GList*, %struct._GList** %iter, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %8, i32 0, i32 1
  %9 = load %struct._GList*, %struct._GList** %next, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.inc
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._GList* [ %9, %cond.true ], [ null, %cond.false ]
  store %struct._GList* %cond, %struct._GList** %iter, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare void @gtk_menu_shell_insert(%struct._GtkMenuShell*, %struct._GtkWidget*, i32) #1

declare void @gtk_label_set_text(%struct._GtkLabel*, i8*) #1

declare void @g_object_notify(%struct._GObject*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i8* @xg_get_menu_item_label(%struct._GtkMenuItem* %witem) #0 {
entry:
  %witem.addr = alloca %struct._GtkMenuItem*, align 8
  %wlabel = alloca %struct._GtkLabel*, align 8
  store %struct._GtkMenuItem* %witem, %struct._GtkMenuItem** %witem.addr, align 8
  %0 = load %struct._GtkMenuItem*, %struct._GtkMenuItem** %witem.addr, align 8
  %1 = bitcast %struct._GtkMenuItem* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_bin_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkBin*
  %call2 = call %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin* %2)
  %3 = bitcast %struct._GtkWidget* %call2 to %struct._GTypeInstance*
  %call3 = call i64 @gtk_label_get_type() #8
  %call4 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 %call3)
  %4 = bitcast %struct._GTypeInstance* %call4 to %struct._GtkLabel*
  store %struct._GtkLabel* %4, %struct._GtkLabel** %wlabel, align 8
  %5 = load %struct._GtkLabel*, %struct._GtkLabel** %wlabel, align 8
  %call5 = call i8* @gtk_label_get_label(%struct._GtkLabel* %5)
  ret i8* %call5
}

declare i8* @gtk_label_get_label(%struct._GtkLabel*) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_separator_menu_item_get_type() #3

; Function Attrs: nounwind uwtable
define internal void @xg_update_toggle_item(%struct._widget_value* %val, %struct._GtkWidget* %w) #0 {
entry:
  %val.addr = alloca %struct._widget_value*, align 8
  %w.addr = alloca %struct._GtkWidget*, align 8
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_check_menu_item_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkCheckMenuItem*
  %3 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %selected = getelementptr inbounds %struct._widget_value, %struct._widget_value* %3, i32 0, i32 7
  %4 = load i8, i8* %selected, align 1
  %tobool = trunc i8 %4 to i1
  %conv = zext i1 %tobool to i32
  call void @gtk_check_menu_item_set_active(%struct._GtkCheckMenuItem* %2, i32 %conv)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xg_update_menu_item(%struct._widget_value* %val, %struct._GtkWidget* %w, void ()* %select_cb, void ()* %highlight_cb, %struct.xg_menu_cb_data_* %cl_data) #0 {
entry:
  %val.addr = alloca %struct._widget_value*, align 8
  %w.addr = alloca %struct._GtkWidget*, align 8
  %select_cb.addr = alloca void ()*, align 8
  %highlight_cb.addr = alloca void ()*, align 8
  %cl_data.addr = alloca %struct.xg_menu_cb_data_*, align 8
  %wchild = alloca %struct._GtkWidget*, align 8
  %wlbl = alloca %struct._GtkLabel*, align 8
  %wkey = alloca %struct._GtkLabel*, align 8
  %utf8_label = alloca i8*, align 8
  %utf8_key = alloca i8*, align 8
  %old_label = alloca i8*, align 8
  %old_key = alloca i8*, align 8
  %cb_data = alloca %struct.xg_menu_item_cb_data_*, align 8
  %label_changed = alloca i8, align 1
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %list = alloca %struct._GList*, align 8
  %wtoadd = alloca %struct._GtkWidget*, align 8
  %list43 = alloca %struct._GList*, align 8
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store void ()* %select_cb, void ()** %select_cb.addr, align 8
  store void ()* %highlight_cb, void ()** %highlight_cb.addr, align 8
  store %struct.xg_menu_cb_data_* %cl_data, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  store %struct._GtkLabel* null, %struct._GtkLabel** %wlbl, align 8
  store %struct._GtkLabel* null, %struct._GtkLabel** %wkey, align 8
  store i8* null, i8** %old_label, align 8
  store i8* null, i8** %old_key, align 8
  store i8 0, i8* %label_changed, align 1
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_bin_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkBin*
  %call2 = call %struct._GtkWidget* @gtk_bin_get_child(%struct._GtkBin* %2)
  store %struct._GtkWidget* %call2, %struct._GtkWidget** %wchild, align 8
  %3 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %name = getelementptr inbounds %struct._widget_value, %struct._widget_value* %3, i32 0, i32 1
  %4 = load i8*, i8** %name, align 8
  %call3 = call i8* @get_utf8_string(i8* %4)
  store i8* %call3, i8** %utf8_label, align 8
  %5 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %key = getelementptr inbounds %struct._widget_value, %struct._widget_value* %5, i32 0, i32 4
  %6 = load i8*, i8** %key, align 8
  %call4 = call i8* @get_utf8_string(i8* %6)
  store i8* %call4, i8** %utf8_key, align 8
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %wchild, align 8
  %8 = bitcast %struct._GtkWidget* %7 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %8, %struct._GTypeInstance** %__inst, align 8
  %call5 = call i64 @gtk_box_get_type() #8
  store i64 %call5, i64* %__t, align 8
  %9 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool = icmp ne %struct._GTypeInstance* %9, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %__r, align 4
  br label %if.end.11

if.else:                                          ; preds = %entry
  %10 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %10, i32 0, i32 0
  %11 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool6 = icmp ne %struct._GTypeClass* %11, null
  br i1 %tobool6, label %land.lhs.true, label %if.else.9

land.lhs.true:                                    ; preds = %if.else
  %12 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class7 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %12, i32 0, i32 0
  %13 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class7, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %13, i32 0, i32 0
  %14 = load i64, i64* %g_type, align 8
  %15 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %14, %15
  br i1 %cmp, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.9:                                        ; preds = %land.lhs.true, %if.else
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %17 = load i64, i64* %__t, align 8
  %call10 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %16, i64 %17) #7
  store i32 %call10, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.9, %if.then.8
  br label %if.end.11

if.end.11:                                        ; preds = %if.end, %if.then
  %18 = load i32, i32* %__r, align 4
  store i32 %18, i32* %tmp
  %19 = load i32, i32* %tmp
  %tobool12 = icmp ne i32 %19, 0
  br i1 %tobool12, label %if.then.13, label %if.else.35

if.then.13:                                       ; preds = %if.end.11
  %20 = load %struct._GtkWidget*, %struct._GtkWidget** %wchild, align 8
  %21 = bitcast %struct._GtkWidget* %20 to %struct._GTypeInstance*
  %call15 = call i64 @gtk_container_get_type() #8
  %call16 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %21, i64 %call15)
  %22 = bitcast %struct._GTypeInstance* %call16 to %struct._GtkContainer*
  %call17 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %22)
  store %struct._GList* %call17, %struct._GList** %list, align 8
  %23 = load %struct._GList*, %struct._GList** %list, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %23, i32 0, i32 0
  %24 = load i8*, i8** %data, align 8
  %25 = bitcast i8* %24 to %struct._GTypeInstance*
  %call18 = call i64 @gtk_label_get_type() #8
  %call19 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %25, i64 %call18)
  %26 = bitcast %struct._GTypeInstance* %call19 to %struct._GtkLabel*
  store %struct._GtkLabel* %26, %struct._GtkLabel** %wlbl, align 8
  %27 = load %struct._GList*, %struct._GList** %list, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %27, i32 0, i32 1
  %28 = load %struct._GList*, %struct._GList** %next, align 8
  %data20 = getelementptr inbounds %struct._GList, %struct._GList* %28, i32 0, i32 0
  %29 = load i8*, i8** %data20, align 8
  %30 = bitcast i8* %29 to %struct._GTypeInstance*
  %call21 = call i64 @gtk_label_get_type() #8
  %call22 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %30, i64 %call21)
  %31 = bitcast %struct._GTypeInstance* %call22 to %struct._GtkLabel*
  store %struct._GtkLabel* %31, %struct._GtkLabel** %wkey, align 8
  %32 = load %struct._GList*, %struct._GList** %list, align 8
  call void @g_list_free(%struct._GList* %32)
  %33 = load i8*, i8** %utf8_key, align 8
  %tobool23 = icmp ne i8* %33, null
  br i1 %tobool23, label %if.end.34, label %if.then.24

if.then.24:                                       ; preds = %if.then.13
  %34 = load %struct._GtkLabel*, %struct._GtkLabel** %wlbl, align 8
  %35 = bitcast %struct._GtkLabel* %34 to %struct._GTypeInstance*
  %call25 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %35, i64 80)
  %36 = bitcast %struct._GTypeInstance* %call25 to %struct._GObject*
  %37 = bitcast %struct._GObject* %36 to i8*
  %call26 = call i8* @g_object_ref(i8* %37)
  %38 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %39 = bitcast %struct._GtkWidget* %38 to %struct._GTypeInstance*
  %call27 = call i64 @gtk_container_get_type() #8
  %call28 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %39, i64 %call27)
  %40 = bitcast %struct._GTypeInstance* %call28 to %struct._GtkContainer*
  %41 = load %struct._GtkWidget*, %struct._GtkWidget** %wchild, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %40, %struct._GtkWidget* %41)
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %43 = bitcast %struct._GtkWidget* %42 to %struct._GTypeInstance*
  %call29 = call i64 @gtk_container_get_type() #8
  %call30 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %43, i64 %call29)
  %44 = bitcast %struct._GTypeInstance* %call30 to %struct._GtkContainer*
  %45 = load %struct._GtkLabel*, %struct._GtkLabel** %wlbl, align 8
  %46 = bitcast %struct._GtkLabel* %45 to %struct._GTypeInstance*
  %call31 = call i64 @gtk_widget_get_type() #8
  %call32 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %46, i64 %call31)
  %47 = bitcast %struct._GTypeInstance* %call32 to %struct._GtkWidget*
  call void @gtk_container_add(%struct._GtkContainer* %44, %struct._GtkWidget* %47)
  %48 = load %struct._GtkLabel*, %struct._GtkLabel** %wlbl, align 8
  %49 = bitcast %struct._GtkLabel* %48 to %struct._GTypeInstance*
  %call33 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %49, i64 80)
  %50 = bitcast %struct._GTypeInstance* %call33 to %struct._GObject*
  %51 = bitcast %struct._GObject* %50 to i8*
  call void @g_object_unref(i8* %51)
  store %struct._GtkLabel* null, %struct._GtkLabel** %wkey, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.24, %if.then.13
  br label %if.end.59

if.else.35:                                       ; preds = %if.end.11
  %52 = load %struct._GtkWidget*, %struct._GtkWidget** %wchild, align 8
  %53 = bitcast %struct._GtkWidget* %52 to %struct._GTypeInstance*
  %call36 = call i64 @gtk_label_get_type() #8
  %call37 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %53, i64 %call36)
  %54 = bitcast %struct._GTypeInstance* %call37 to %struct._GtkLabel*
  store %struct._GtkLabel* %54, %struct._GtkLabel** %wlbl, align 8
  %55 = load i8*, i8** %utf8_key, align 8
  %tobool38 = icmp ne i8* %55, null
  br i1 %tobool38, label %if.then.39, label %if.end.58

if.then.39:                                       ; preds = %if.else.35
  %56 = load i8*, i8** %utf8_label, align 8
  %57 = load i8*, i8** %utf8_key, align 8
  %call41 = call %struct._GtkWidget* @make_widget_for_menu_item(i8* %56, i8* %57)
  store %struct._GtkWidget* %call41, %struct._GtkWidget** %wtoadd, align 8
  %58 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoadd, align 8
  %59 = bitcast %struct._GtkWidget* %58 to %struct._GTypeInstance*
  %call44 = call i64 @gtk_container_get_type() #8
  %call45 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %59, i64 %call44)
  %60 = bitcast %struct._GTypeInstance* %call45 to %struct._GtkContainer*
  %call46 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %60)
  store %struct._GList* %call46, %struct._GList** %list43, align 8
  %61 = load %struct._GList*, %struct._GList** %list43, align 8
  %data47 = getelementptr inbounds %struct._GList, %struct._GList* %61, i32 0, i32 0
  %62 = load i8*, i8** %data47, align 8
  %63 = bitcast i8* %62 to %struct._GTypeInstance*
  %call48 = call i64 @gtk_label_get_type() #8
  %call49 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %63, i64 %call48)
  %64 = bitcast %struct._GTypeInstance* %call49 to %struct._GtkLabel*
  store %struct._GtkLabel* %64, %struct._GtkLabel** %wlbl, align 8
  %65 = load %struct._GList*, %struct._GList** %list43, align 8
  %next50 = getelementptr inbounds %struct._GList, %struct._GList* %65, i32 0, i32 1
  %66 = load %struct._GList*, %struct._GList** %next50, align 8
  %data51 = getelementptr inbounds %struct._GList, %struct._GList* %66, i32 0, i32 0
  %67 = load i8*, i8** %data51, align 8
  %68 = bitcast i8* %67 to %struct._GTypeInstance*
  %call52 = call i64 @gtk_label_get_type() #8
  %call53 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %68, i64 %call52)
  %69 = bitcast %struct._GTypeInstance* %call53 to %struct._GtkLabel*
  store %struct._GtkLabel* %69, %struct._GtkLabel** %wkey, align 8
  %70 = load %struct._GList*, %struct._GList** %list43, align 8
  call void @g_list_free(%struct._GList* %70)
  %71 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %72 = bitcast %struct._GtkWidget* %71 to %struct._GTypeInstance*
  %call54 = call i64 @gtk_container_get_type() #8
  %call55 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %72, i64 %call54)
  %73 = bitcast %struct._GTypeInstance* %call55 to %struct._GtkContainer*
  %74 = load %struct._GtkWidget*, %struct._GtkWidget** %wchild, align 8
  call void @gtk_container_remove(%struct._GtkContainer* %73, %struct._GtkWidget* %74)
  %75 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %76 = bitcast %struct._GtkWidget* %75 to %struct._GTypeInstance*
  %call56 = call i64 @gtk_container_get_type() #8
  %call57 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %76, i64 %call56)
  %77 = bitcast %struct._GTypeInstance* %call57 to %struct._GtkContainer*
  %78 = load %struct._GtkWidget*, %struct._GtkWidget** %wtoadd, align 8
  call void @gtk_container_add(%struct._GtkContainer* %77, %struct._GtkWidget* %78)
  br label %if.end.58

if.end.58:                                        ; preds = %if.then.39, %if.else.35
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.end.34
  %79 = load %struct._GtkLabel*, %struct._GtkLabel** %wkey, align 8
  %tobool60 = icmp ne %struct._GtkLabel* %79, null
  br i1 %tobool60, label %if.then.61, label %if.end.63

if.then.61:                                       ; preds = %if.end.59
  %80 = load %struct._GtkLabel*, %struct._GtkLabel** %wkey, align 8
  %call62 = call i8* @gtk_label_get_label(%struct._GtkLabel* %80)
  store i8* %call62, i8** %old_key, align 8
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.61, %if.end.59
  %81 = load %struct._GtkLabel*, %struct._GtkLabel** %wlbl, align 8
  %tobool64 = icmp ne %struct._GtkLabel* %81, null
  br i1 %tobool64, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.end.63
  %82 = load %struct._GtkLabel*, %struct._GtkLabel** %wlbl, align 8
  %call66 = call i8* @gtk_label_get_label(%struct._GtkLabel* %82)
  store i8* %call66, i8** %old_label, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %if.end.63
  %83 = load %struct._GtkLabel*, %struct._GtkLabel** %wkey, align 8
  %tobool68 = icmp ne %struct._GtkLabel* %83, null
  br i1 %tobool68, label %land.lhs.true.69, label %if.end.76

land.lhs.true.69:                                 ; preds = %if.end.67
  %84 = load i8*, i8** %utf8_key, align 8
  %tobool70 = icmp ne i8* %84, null
  br i1 %tobool70, label %land.lhs.true.71, label %if.end.76

land.lhs.true.71:                                 ; preds = %land.lhs.true.69
  %85 = load i8*, i8** %old_key, align 8
  %tobool72 = icmp ne i8* %85, null
  br i1 %tobool72, label %lor.lhs.false, label %if.then.75

lor.lhs.false:                                    ; preds = %land.lhs.true.71
  %86 = load i8*, i8** %utf8_key, align 8
  %87 = load i8*, i8** %old_key, align 8
  %call73 = call i32 @strcmp(i8* %86, i8* %87) #7
  %cmp74 = icmp ne i32 %call73, 0
  br i1 %cmp74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %lor.lhs.false, %land.lhs.true.71
  store i8 1, i8* %label_changed, align 1
  %88 = load %struct._GtkLabel*, %struct._GtkLabel** %wkey, align 8
  %89 = load i8*, i8** %utf8_key, align 8
  call void @gtk_label_set_text(%struct._GtkLabel* %88, i8* %89)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.75, %lor.lhs.false, %land.lhs.true.69, %if.end.67
  %90 = load i8*, i8** %old_label, align 8
  %tobool77 = icmp ne i8* %90, null
  br i1 %tobool77, label %lor.lhs.false.78, label %if.then.81

lor.lhs.false.78:                                 ; preds = %if.end.76
  %91 = load i8*, i8** %utf8_label, align 8
  %92 = load i8*, i8** %old_label, align 8
  %call79 = call i32 @strcmp(i8* %91, i8* %92) #7
  %cmp80 = icmp ne i32 %call79, 0
  br i1 %cmp80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %lor.lhs.false.78, %if.end.76
  store i8 1, i8* %label_changed, align 1
  %93 = load %struct._GtkLabel*, %struct._GtkLabel** %wlbl, align 8
  %94 = load i8*, i8** %utf8_label, align 8
  call void @gtk_label_set_text(%struct._GtkLabel* %93, i8* %94)
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.81, %lor.lhs.false.78
  %95 = load i8*, i8** %utf8_key, align 8
  %tobool83 = icmp ne i8* %95, null
  br i1 %tobool83, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %if.end.82
  %96 = load i8*, i8** %utf8_key, align 8
  call void @g_free(i8* %96)
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.84, %if.end.82
  %97 = load i8*, i8** %utf8_label, align 8
  %tobool86 = icmp ne i8* %97, null
  br i1 %tobool86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.end.85
  %98 = load i8*, i8** %utf8_label, align 8
  call void @g_free(i8* %98)
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %if.end.85
  %99 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %enabled = getelementptr inbounds %struct._widget_value, %struct._widget_value* %99, i32 0, i32 6
  %100 = load i8, i8* %enabled, align 1
  %tobool89 = trunc i8 %100 to i1
  br i1 %tobool89, label %if.else.94, label %land.lhs.true.90

land.lhs.true.90:                                 ; preds = %if.end.88
  %101 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %call91 = call i32 @gtk_widget_get_sensitive(%struct._GtkWidget* %101)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %land.lhs.true.90
  %102 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %102, i32 0)
  br label %if.end.102

if.else.94:                                       ; preds = %land.lhs.true.90, %if.end.88
  %103 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %enabled95 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %103, i32 0, i32 6
  %104 = load i8, i8* %enabled95, align 1
  %tobool96 = trunc i8 %104 to i1
  br i1 %tobool96, label %land.lhs.true.97, label %if.end.101

land.lhs.true.97:                                 ; preds = %if.else.94
  %105 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %call98 = call i32 @gtk_widget_get_sensitive(%struct._GtkWidget* %105)
  %tobool99 = icmp ne i32 %call98, 0
  br i1 %tobool99, label %if.end.101, label %if.then.100

if.then.100:                                      ; preds = %land.lhs.true.97
  %106 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  call void @gtk_widget_set_sensitive(%struct._GtkWidget* %106, i32 1)
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.100, %land.lhs.true.97, %if.else.94
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.then.93
  %107 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %108 = bitcast %struct._GtkWidget* %107 to %struct._GTypeInstance*
  %call103 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %108, i64 80)
  %109 = bitcast %struct._GTypeInstance* %call103 to %struct._GObject*
  %call104 = call i8* @g_object_get_data(%struct._GObject* %109, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0))
  %110 = bitcast i8* %call104 to %struct.xg_menu_item_cb_data_*
  store %struct.xg_menu_item_cb_data_* %110, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %111 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %tobool105 = icmp ne %struct.xg_menu_item_cb_data_* %111, null
  br i1 %tobool105, label %if.then.106, label %if.end.129

if.then.106:                                      ; preds = %if.end.102
  %112 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %call_data = getelementptr inbounds %struct._widget_value, %struct._widget_value* %112, i32 0, i32 11
  %113 = load i8*, i8** %call_data, align 8
  %114 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %call_data107 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %114, i32 0, i32 3
  store i8* %113, i8** %call_data107, align 8
  %115 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %help = getelementptr inbounds %struct._widget_value, %struct._widget_value* %115, i32 0, i32 5
  %116 = load i64, i64* %help, align 8
  %117 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %help108 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %117, i32 0, i32 2
  store i64 %116, i64* %help108, align 8
  %118 = load %struct.xg_menu_cb_data_*, %struct.xg_menu_cb_data_** %cl_data.addr, align 8
  %119 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %cl_data109 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %119, i32 0, i32 4
  store %struct.xg_menu_cb_data_* %118, %struct.xg_menu_cb_data_** %cl_data109, align 8
  %120 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %call_data110 = getelementptr inbounds %struct._widget_value, %struct._widget_value* %120, i32 0, i32 11
  %121 = load i8*, i8** %call_data110, align 8
  %tobool111 = icmp ne i8* %121, null
  br i1 %tobool111, label %land.lhs.true.112, label %if.else.121

land.lhs.true.112:                                ; preds = %if.then.106
  %122 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %contents = getelementptr inbounds %struct._widget_value, %struct._widget_value* %122, i32 0, i32 10
  %123 = load %struct._widget_value*, %struct._widget_value** %contents, align 8
  %tobool113 = icmp ne %struct._widget_value* %123, null
  br i1 %tobool113, label %if.else.121, label %if.then.114

if.then.114:                                      ; preds = %land.lhs.true.112
  %124 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %124, i32 0, i32 1
  %125 = load i64, i64* %select_id, align 8
  %tobool115 = icmp ne i64 %125, 0
  br i1 %tobool115, label %if.end.120, label %if.then.116

if.then.116:                                      ; preds = %if.then.114
  %126 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %127 = bitcast %struct._GtkWidget* %126 to %struct._GTypeInstance*
  %call117 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %127, i64 80)
  %128 = bitcast %struct._GTypeInstance* %call117 to %struct._GObject*
  %129 = bitcast %struct._GObject* %128 to i8*
  %130 = load void ()*, void ()** %select_cb.addr, align 8
  %131 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %132 = bitcast %struct.xg_menu_item_cb_data_* %131 to i8*
  %call118 = call i64 @g_signal_connect_data(i8* %129, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.67, i32 0, i32 0), void ()* %130, i8* %132, void (i8*, %struct._GClosure*)* null, i32 0)
  %133 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id119 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %133, i32 0, i32 1
  store i64 %call118, i64* %select_id119, align 8
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.116, %if.then.114
  br label %if.end.128

if.else.121:                                      ; preds = %land.lhs.true.112, %if.then.106
  %134 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id122 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %134, i32 0, i32 1
  %135 = load i64, i64* %select_id122, align 8
  %tobool123 = icmp ne i64 %135, 0
  br i1 %tobool123, label %if.then.124, label %if.end.127

if.then.124:                                      ; preds = %if.else.121
  %136 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %137 = bitcast %struct._GtkWidget* %136 to i8*
  %138 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id125 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %138, i32 0, i32 1
  %139 = load i64, i64* %select_id125, align 8
  call void @g_signal_handler_disconnect(i8* %137, i64 %139)
  %140 = load %struct.xg_menu_item_cb_data_*, %struct.xg_menu_item_cb_data_** %cb_data, align 8
  %select_id126 = getelementptr inbounds %struct.xg_menu_item_cb_data_, %struct.xg_menu_item_cb_data_* %140, i32 0, i32 1
  store i64 0, i64* %select_id126, align 8
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.124, %if.else.121
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.end.120
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.end.102
  %141 = load i8, i8* %label_changed, align 1
  %tobool130 = trunc i8 %141 to i1
  br i1 %tobool130, label %if.then.131, label %if.end.133

if.then.131:                                      ; preds = %if.end.129
  %142 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %143 = bitcast %struct._GtkWidget* %142 to %struct._GTypeInstance*
  %call132 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %143, i64 80)
  %144 = bitcast %struct._GTypeInstance* %call132 to %struct._GObject*
  call void @g_object_notify(%struct._GObject* %144, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0))
  br label %if.end.133

if.end.133:                                       ; preds = %if.then.131, %if.end.129
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @xg_update_radio_item(%struct._widget_value* %val, %struct._GtkWidget* %w) #0 {
entry:
  %val.addr = alloca %struct._widget_value*, align 8
  %w.addr = alloca %struct._GtkWidget*, align 8
  store %struct._widget_value* %val, %struct._widget_value** %val.addr, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_check_menu_item_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkCheckMenuItem*
  %3 = load %struct._widget_value*, %struct._widget_value** %val.addr, align 8
  %selected = getelementptr inbounds %struct._widget_value, %struct._widget_value* %3, i32 0, i32 7
  %4 = load i8, i8* %selected, align 1
  %tobool = trunc i8 %4 to i1
  %conv = zext i1 %tobool to i32
  call void @gtk_check_menu_item_set_active(%struct._GtkCheckMenuItem* %2, i32 %conv)
  ret void
}

declare i32 @gtk_widget_get_sensitive(%struct._GtkWidget*) #1

declare void @g_signal_handler_disconnect(i8*, i64) #1

declare i8* @xnrealloc(i8*, i64, i64) #1

; Function Attrs: noreturn
declare void @emacs_abort() #6

; Function Attrs: nounwind uwtable
define internal void @xg_remove_widget_from_map(i64 %idx) #0 {
entry:
  %idx.addr = alloca i64, align 8
  store i64 %idx, i64* %idx.addr, align 8
  %0 = load i64, i64* %idx.addr, align 8
  %1 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 1), align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i64, i64* %idx.addr, align 8
  %3 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %3, i64 %2
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %arrayidx, align 8
  %cmp1 = icmp ne %struct._GtkWidget* %4, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load i64, i64* %idx.addr, align 8
  %6 = load %struct._GtkWidget**, %struct._GtkWidget*** getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 0), align 8
  %arrayidx2 = getelementptr inbounds %struct._GtkWidget*, %struct._GtkWidget** %6, i64 %5
  store %struct._GtkWidget* null, %struct._GtkWidget** %arrayidx2, align 8
  %7 = load i64, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 2), align 8
  %dec = add nsw i64 %7, -1
  store i64 %dec, i64* getelementptr inbounds (%struct.anon.14, %struct.anon.14* @id_to_widget, i32 0, i32 2), align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

declare double @gtk_range_get_value(%struct._GtkRange*) #1

declare %struct._GtkWidget* @gtk_toolbar_new() #1

declare void @gtk_toolbar_set_style(%struct._GtkToolbar*, i32) #1

declare void @gtk_orientable_set_orientation(%struct._GtkOrientable*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_orientable_get_type() #3

; Function Attrs: nounwind uwtable
define internal void @tb_size_cb(%struct._GtkWidget* %widget, %struct._GdkRectangle* %allocation, i8* %user_data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %allocation.addr = alloca %struct._GdkRectangle*, align 8
  %user_data.addr = alloca i8*, align 8
  %f = alloca %struct.frame*, align 8
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store %struct._GdkRectangle* %allocation, %struct._GdkRectangle** %allocation.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.frame*
  store %struct.frame* %1, %struct.frame** %f, align 8
  %2 = load %struct.frame*, %struct.frame** %f, align 8
  %call = call zeroext i1 @xg_update_tool_bar_sizes(%struct.frame* %2)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.frame*, %struct.frame** %f, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 903)
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  call void @frame_size_history_add(%struct.frame* %3, i64 %call1, i32 0, i32 0, i64 %call2)
  %4 = load %struct.frame*, %struct.frame** %f, align 8
  %call3 = call i64 @builtin_lisp_symbol(i32 923)
  call void @adjust_frame_size(%struct.frame* %4, i32 -1, i32 -1, i32 5, i1 zeroext false, i64 %call3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @gtk_icon_theme_has_icon(%struct._GtkIconTheme*, i8*) #1

declare i32 @gtk_stock_lookup(i8*, %struct._GtkStockItem*) #1

declare i64 @Ffile_name_nondirectory(i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._GtkWidget* @xg_get_tool_bar_widgets(%struct._GtkWidget* %vb, %struct._GtkWidget** %wimage) #0 {
entry:
  %vb.addr = alloca %struct._GtkWidget*, align 8
  %wimage.addr = alloca %struct._GtkWidget**, align 8
  %clist = alloca %struct._GList*, align 8
  %c1 = alloca %struct._GtkWidget*, align 8
  %c2 = alloca %struct._GtkWidget*, align 8
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst19 = alloca %struct._GTypeInstance*, align 8
  %__t21 = alloca i64, align 8
  %__r24 = alloca i32, align 4
  %tmp39 = alloca i32, align 4
  store %struct._GtkWidget* %vb, %struct._GtkWidget** %vb.addr, align 8
  store %struct._GtkWidget** %wimage, %struct._GtkWidget*** %wimage.addr, align 8
  %0 = load %struct._GtkWidget*, %struct._GtkWidget** %vb.addr, align 8
  %1 = bitcast %struct._GtkWidget* %0 to %struct._GTypeInstance*
  %call = call i64 @gtk_container_get_type() #8
  %call1 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %1, i64 %call)
  %2 = bitcast %struct._GTypeInstance* %call1 to %struct._GtkContainer*
  %call2 = call %struct._GList* @gtk_container_get_children(%struct._GtkContainer* %2)
  store %struct._GList* %call2, %struct._GList** %clist, align 8
  %3 = load %struct._GList*, %struct._GList** %clist, align 8
  %data = getelementptr inbounds %struct._GList, %struct._GList* %3, i32 0, i32 0
  %4 = load i8*, i8** %data, align 8
  %5 = bitcast i8* %4 to %struct._GtkWidget*
  store %struct._GtkWidget* %5, %struct._GtkWidget** %c1, align 8
  %6 = load %struct._GList*, %struct._GList** %clist, align 8
  %next = getelementptr inbounds %struct._GList, %struct._GList* %6, i32 0, i32 1
  %7 = load %struct._GList*, %struct._GList** %next, align 8
  %tobool = icmp ne %struct._GList* %7, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load %struct._GList*, %struct._GList** %clist, align 8
  %next3 = getelementptr inbounds %struct._GList, %struct._GList* %8, i32 0, i32 1
  %9 = load %struct._GList*, %struct._GList** %next3, align 8
  %data4 = getelementptr inbounds %struct._GList, %struct._GList* %9, i32 0, i32 0
  %10 = load i8*, i8** %data4, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ null, %cond.false ]
  %11 = bitcast i8* %cond to %struct._GtkWidget*
  store %struct._GtkWidget* %11, %struct._GtkWidget** %c2, align 8
  %12 = load %struct._GtkWidget*, %struct._GtkWidget** %c1, align 8
  %13 = bitcast %struct._GtkWidget* %12 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %13, %struct._GTypeInstance** %__inst, align 8
  %call5 = call i64 @gtk_image_get_type() #8
  store i64 %call5, i64* %__t, align 8
  %14 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool6 = icmp ne %struct._GTypeInstance* %14, null
  br i1 %tobool6, label %if.else, label %if.then

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %__r, align 4
  br label %if.end.12

if.else:                                          ; preds = %cond.end
  %15 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %15, i32 0, i32 0
  %16 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool7 = icmp ne %struct._GTypeClass* %16, null
  br i1 %tobool7, label %land.lhs.true, label %if.else.10

land.lhs.true:                                    ; preds = %if.else
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class8 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class8, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %18, i32 0, i32 0
  %19 = load i64, i64* %g_type, align 8
  %20 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %19, %20
  br i1 %cmp, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.10:                                       ; preds = %land.lhs.true, %if.else
  %21 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %22 = load i64, i64* %__t, align 8
  %call11 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %21, i64 %22) #7
  store i32 %call11, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.10, %if.then.9
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then
  %23 = load i32, i32* %__r, align 4
  store i32 %23, i32* %tmp
  %24 = load i32, i32* %tmp
  %tobool13 = icmp ne i32 %24, 0
  br i1 %tobool13, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %if.end.12
  %25 = load %struct._GtkWidget*, %struct._GtkWidget** %c1, align 8
  br label %cond.end.16

cond.false.15:                                    ; preds = %if.end.12
  %26 = load %struct._GtkWidget*, %struct._GtkWidget** %c2, align 8
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.14
  %cond17 = phi %struct._GtkWidget* [ %25, %cond.true.14 ], [ %26, %cond.false.15 ]
  %27 = load %struct._GtkWidget**, %struct._GtkWidget*** %wimage.addr, align 8
  store %struct._GtkWidget* %cond17, %struct._GtkWidget** %27, align 8
  %28 = load %struct._GList*, %struct._GList** %clist, align 8
  call void @g_list_free(%struct._GList* %28)
  %29 = load %struct._GtkWidget*, %struct._GtkWidget** %c1, align 8
  %30 = bitcast %struct._GtkWidget* %29 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %30, %struct._GTypeInstance** %__inst19, align 8
  %call22 = call i64 @gtk_label_get_type() #8
  store i64 %call22, i64* %__t21, align 8
  %31 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst19, align 8
  %tobool25 = icmp ne %struct._GTypeInstance* %31, null
  br i1 %tobool25, label %if.else.27, label %if.then.26

if.then.26:                                       ; preds = %cond.end.16
  store i32 0, i32* %__r24, align 4
  br label %if.end.38

if.else.27:                                       ; preds = %cond.end.16
  %32 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst19, align 8
  %g_class28 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %32, i32 0, i32 0
  %33 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class28, align 8
  %tobool29 = icmp ne %struct._GTypeClass* %33, null
  br i1 %tobool29, label %land.lhs.true.30, label %if.else.35

land.lhs.true.30:                                 ; preds = %if.else.27
  %34 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst19, align 8
  %g_class31 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %34, i32 0, i32 0
  %35 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class31, align 8
  %g_type32 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %35, i32 0, i32 0
  %36 = load i64, i64* %g_type32, align 8
  %37 = load i64, i64* %__t21, align 8
  %cmp33 = icmp eq i64 %36, %37
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %land.lhs.true.30
  store i32 1, i32* %__r24, align 4
  br label %if.end.37

if.else.35:                                       ; preds = %land.lhs.true.30, %if.else.27
  %38 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst19, align 8
  %39 = load i64, i64* %__t21, align 8
  %call36 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %38, i64 %39) #7
  store i32 %call36, i32* %__r24, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.35, %if.then.34
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.then.26
  %40 = load i32, i32* %__r24, align 4
  store i32 %40, i32* %tmp39
  %41 = load i32, i32* %tmp39
  %tobool40 = icmp ne i32 %41, 0
  br i1 %tobool40, label %cond.true.41, label %cond.false.42

cond.true.41:                                     ; preds = %if.end.38
  %42 = load %struct._GtkWidget*, %struct._GtkWidget** %c1, align 8
  br label %cond.end.43

cond.false.42:                                    ; preds = %if.end.38
  %43 = load %struct._GtkWidget*, %struct._GtkWidget** %c2, align 8
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.42, %cond.true.41
  %cond44 = phi %struct._GtkWidget* [ %42, %cond.true.41 ], [ %43, %cond.false.42 ]
  ret %struct._GtkWidget* %cond44
}

; Function Attrs: nounwind uwtable
define internal zeroext i1 @is_box_type(%struct._GtkWidget* %vb, i1 zeroext %is_horizontal) #0 {
entry:
  %vb.addr = alloca %struct._GtkWidget*, align 8
  %is_horizontal.addr = alloca i8, align 1
  %__inst = alloca %struct._GTypeInstance*, align 8
  %__t = alloca i64, align 8
  %__r = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__inst9 = alloca %struct._GTypeInstance*, align 8
  %__t11 = alloca i64, align 8
  %__r14 = alloca i32, align 4
  %tmp29 = alloca i32, align 4
  store %struct._GtkWidget* %vb, %struct._GtkWidget** %vb.addr, align 8
  %frombool = zext i1 %is_horizontal to i8
  store i8 %frombool, i8* %is_horizontal.addr, align 1
  %0 = load i8, i8* %is_horizontal.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct._GtkWidget*, %struct._GtkWidget** %vb.addr, align 8
  %2 = bitcast %struct._GtkWidget* %1 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %2, %struct._GTypeInstance** %__inst, align 8
  %call = call i64 @gtk_vbox_get_type() #8
  store i64 %call, i64* %__t, align 8
  %3 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %tobool1 = icmp ne %struct._GTypeInstance* %3, null
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %cond.true
  store i32 0, i32* %__r, align 4
  br label %if.end.7

if.else:                                          ; preds = %cond.true
  %4 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %4, i32 0, i32 0
  %5 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class, align 8
  %tobool2 = icmp ne %struct._GTypeClass* %5, null
  br i1 %tobool2, label %land.lhs.true, label %if.else.5

land.lhs.true:                                    ; preds = %if.else
  %6 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %g_class3 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %6, i32 0, i32 0
  %7 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class3, align 8
  %g_type = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %7, i32 0, i32 0
  %8 = load i64, i64* %g_type, align 8
  %9 = load i64, i64* %__t, align 8
  %cmp = icmp eq i64 %8, %9
  br i1 %cmp, label %if.then.4, label %if.else.5

if.then.4:                                        ; preds = %land.lhs.true
  store i32 1, i32* %__r, align 4
  br label %if.end

if.else.5:                                        ; preds = %land.lhs.true, %if.else
  %10 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst, align 8
  %11 = load i64, i64* %__t, align 8
  %call6 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %10, i64 %11) #7
  store i32 %call6, i32* %__r, align 4
  br label %if.end

if.end:                                           ; preds = %if.else.5, %if.then.4
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  %12 = load i32, i32* %__r, align 4
  store i32 %12, i32* %tmp
  %13 = load i32, i32* %tmp
  br label %cond.end

cond.false:                                       ; preds = %entry
  %14 = load %struct._GtkWidget*, %struct._GtkWidget** %vb.addr, align 8
  %15 = bitcast %struct._GtkWidget* %14 to %struct._GTypeInstance*
  store %struct._GTypeInstance* %15, %struct._GTypeInstance** %__inst9, align 8
  %call12 = call i64 @gtk_hbox_get_type() #8
  store i64 %call12, i64* %__t11, align 8
  %16 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst9, align 8
  %tobool15 = icmp ne %struct._GTypeInstance* %16, null
  br i1 %tobool15, label %if.else.17, label %if.then.16

if.then.16:                                       ; preds = %cond.false
  store i32 0, i32* %__r14, align 4
  br label %if.end.28

if.else.17:                                       ; preds = %cond.false
  %17 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst9, align 8
  %g_class18 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %17, i32 0, i32 0
  %18 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class18, align 8
  %tobool19 = icmp ne %struct._GTypeClass* %18, null
  br i1 %tobool19, label %land.lhs.true.20, label %if.else.25

land.lhs.true.20:                                 ; preds = %if.else.17
  %19 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst9, align 8
  %g_class21 = getelementptr inbounds %struct._GTypeInstance, %struct._GTypeInstance* %19, i32 0, i32 0
  %20 = load %struct._GTypeClass*, %struct._GTypeClass** %g_class21, align 8
  %g_type22 = getelementptr inbounds %struct._GTypeClass, %struct._GTypeClass* %20, i32 0, i32 0
  %21 = load i64, i64* %g_type22, align 8
  %22 = load i64, i64* %__t11, align 8
  %cmp23 = icmp eq i64 %21, %22
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %land.lhs.true.20
  store i32 1, i32* %__r14, align 4
  br label %if.end.27

if.else.25:                                       ; preds = %land.lhs.true.20, %if.else.17
  %23 = load %struct._GTypeInstance*, %struct._GTypeInstance** %__inst9, align 8
  %24 = load i64, i64* %__t11, align 8
  %call26 = call i32 @g_type_check_instance_is_a(%struct._GTypeInstance* %23, i64 %24) #7
  store i32 %call26, i32* %__r14, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.24
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.16
  %25 = load i32, i32* %__r14, align 4
  store i32 %25, i32* %tmp29
  %26 = load i32, i32* %tmp29
  br label %cond.end

cond.end:                                         ; preds = %if.end.28, %if.end.7
  %cond = phi i32 [ %13, %if.end.7 ], [ %26, %if.end.28 ]
  %tobool30 = icmp ne i32 %cond, 0
  ret i1 %tobool30
}

; Function Attrs: nounwind readnone
declare i64 @gtk_image_get_type() #3

; Function Attrs: nounwind readnone
declare i64 @gtk_vbox_get_type() #3

; Function Attrs: nounwind readnone
declare i64 @gtk_hbox_get_type() #3

declare i64 @x_find_image_file(i64) #1

declare i64 @encode_file_name(i64) #1

declare %struct._GtkWidget* @gtk_image_new_from_file(i8*) #1

declare void @gtk_image_set_from_file(%struct._GtkImage*, i8*) #1

declare %struct._GtkWidget* @gtk_image_new_from_pixbuf(%struct._GdkPixbuf*) #1

declare void @gtk_image_set_from_pixbuf(%struct._GtkImage*, %struct._GdkPixbuf*) #1

declare %struct._GtkToolItem* @gtk_tool_item_new() #1

declare %struct._GtkWidget* @gtk_button_new() #1

declare void @gtk_button_set_focus_on_click(%struct._GtkButton*, i32) #1

; Function Attrs: nounwind readnone
declare i64 @gtk_button_get_type() #3

declare void @gtk_button_set_relief(%struct._GtkButton*, i32) #1

; Function Attrs: nounwind uwtable
define internal void @xg_tool_bar_callback(%struct._GtkWidget* %w, i8* %client_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %client_data.addr = alloca i8*, align 8
  %idx = alloca i64, align 8
  %gmod = alloca i8*, align 8
  %mod = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %key = alloca i64, align 8
  %frame = alloca i64, align 8
  %event = alloca %struct.input_event, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  %0 = load i8*, i8** %client_data.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  store i64 %1, i64* %idx, align 8
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %3 = bitcast %struct._GtkWidget* %2 to %struct._GTypeInstance*
  %call = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 80)
  %4 = bitcast %struct._GTypeInstance* %call to %struct._GObject*
  %call1 = call i8* @g_object_get_data(%struct._GObject* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.74, i32 0, i32 0))
  store i8* %call1, i8** %gmod, align 8
  %5 = load i8*, i8** %gmod, align 8
  %6 = ptrtoint i8* %5 to i64
  store i64 %6, i64* %mod, align 8
  %7 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %8 = bitcast %struct._GtkWidget* %7 to %struct._GTypeInstance*
  %call2 = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %8, i64 80)
  %9 = bitcast %struct._GTypeInstance* %call2 to %struct._GObject*
  %call3 = call i8* @g_object_get_data(%struct._GObject* %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0))
  %10 = bitcast i8* %call3 to %struct.frame*
  store %struct.frame* %10, %struct.frame** %f, align 8
  %11 = bitcast %struct.input_event* %event to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 56, i32 8, i1 false)
  %12 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool = icmp ne %struct.frame* %12, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %13 = load %struct.frame*, %struct.frame** %f, align 8
  %n_tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %13, i32 0, i32 30
  %14 = load i32, i32* %n_tool_bar_items, align 4
  %tobool4 = icmp ne i32 %14, 0
  br i1 %tobool4, label %lor.lhs.false.5, label %if.then

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %15 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %15, i32 0, i32 17
  %16 = load i64, i64* %tool_bar_items, align 8
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %16, %call6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5
  %17 = load i64, i64* %idx, align 8
  %mul = mul nsw i64 %17, 11
  store i64 %mul, i64* %idx, align 8
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_items7 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 17
  %19 = load i64, i64* %tool_bar_items7, align 8
  %20 = load i64, i64* %idx, align 8
  %add = add nsw i64 %20, 0
  %call8 = call i64 @AREF(i64 %19, i64 %add)
  store i64 %call8, i64* %key, align 8
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %22 = bitcast %struct.frame* %21 to i8*
  %call9 = call i64 @make_lisp_ptr(i8* %22, i32 5)
  store i64 %call9, i64* %frame, align 8
  %23 = bitcast %struct.input_event* %event to i32*
  %bf.load = load i32, i32* %23, align 8
  %bf.clear = and i32 %bf.load, -65536
  %bf.set = or i32 %bf.clear, 21
  store i32 %bf.set, i32* %23, align 8
  %24 = load i64, i64* %frame, align 8
  %frame_or_window = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 6
  store i64 %24, i64* %frame_or_window, align 8
  %25 = load i64, i64* %frame, align 8
  %arg = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 7
  store i64 %25, i64* %arg, align 8
  call void @kbd_buffer_store_event(%struct.input_event* %event)
  %26 = bitcast %struct.input_event* %event to i32*
  %bf.load10 = load i32, i32* %26, align 8
  %bf.clear11 = and i32 %bf.load10, -65536
  %bf.set12 = or i32 %bf.clear11, 21
  store i32 %bf.set12, i32* %26, align 8
  %27 = load i64, i64* %frame, align 8
  %frame_or_window13 = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 6
  store i64 %27, i64* %frame_or_window13, align 8
  %28 = load i64, i64* %key, align 8
  %arg14 = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 7
  store i64 %28, i64* %arg14, align 8
  %29 = load %struct.frame*, %struct.frame** %f, align 8
  %output_data = getelementptr inbounds %struct.frame, %struct.frame* %29, i32 0, i32 62
  %x = bitcast %union.output_data* %output_data to %struct.x_output**
  %30 = load %struct.x_output*, %struct.x_output** %x, align 8
  %display_info = getelementptr inbounds %struct.x_output, %struct.x_output* %30, i32 0, i32 44
  %31 = load %struct.x_display_info*, %struct.x_display_info** %display_info, align 8
  %32 = load i64, i64* %mod, align 8
  %conv = trunc i64 %32 to i32
  %call15 = call i32 @x_x_to_emacs_modifiers(%struct.x_display_info* %31, i32 %conv)
  %modifiers = getelementptr inbounds %struct.input_event, %struct.input_event* %event, i32 0, i32 2
  store i32 %call15, i32* %modifiers, align 4
  call void @kbd_buffer_store_event(%struct.input_event* %event)
  %33 = load %struct.frame*, %struct.frame** %f, align 8
  call void @x_focus_frame(%struct.frame* %33)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @xg_tool_bar_item_expose_callback(%struct._GtkWidget* %w, %struct._GdkEventExpose* %event, i8* %client_data) #0 {
entry:
  %w.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %struct._GdkEventExpose*, align 8
  %client_data.addr = alloca i8*, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store %struct._GdkEventExpose* %event, %struct._GdkEventExpose** %event.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  %0 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %window = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %0, i32 0, i32 1
  %1 = load %struct._GdkDrawable*, %struct._GdkDrawable** %window, align 8
  call void @gdk_drawable_get_size(%struct._GdkDrawable* %1, i32* %width, i32* %height)
  %2 = load i32, i32* %width, align 4
  %3 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %3, i32 0, i32 3
  %width1 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area, i32 0, i32 2
  %4 = load i32, i32* %width1, align 4
  %cmp = icmp sgt i32 %2, %4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load i32, i32* %width, align 4
  %6 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area2 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %6, i32 0, i32 3
  %width3 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area2, i32 0, i32 2
  %7 = load i32, i32* %width3, align 4
  %sub = sub nsw i32 %5, %7
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ]
  %8 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area4 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %8, i32 0, i32 3
  %x = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area4, i32 0, i32 0
  %9 = load i32, i32* %x, align 4
  %sub5 = sub nsw i32 %9, %cond
  store i32 %sub5, i32* %x, align 4
  %10 = load i32, i32* %height, align 4
  %11 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area6 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %11, i32 0, i32 3
  %height7 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area6, i32 0, i32 3
  %12 = load i32, i32* %height7, align 4
  %cmp8 = icmp sgt i32 %10, %12
  br i1 %cmp8, label %cond.true.9, label %cond.false.13

cond.true.9:                                      ; preds = %cond.end
  %13 = load i32, i32* %height, align 4
  %14 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area10 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %14, i32 0, i32 3
  %height11 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area10, i32 0, i32 3
  %15 = load i32, i32* %height11, align 4
  %sub12 = sub nsw i32 %13, %15
  br label %cond.end.14

cond.false.13:                                    ; preds = %cond.end
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.9
  %cond15 = phi i32 [ %sub12, %cond.true.9 ], [ 0, %cond.false.13 ]
  %16 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area16 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %16, i32 0, i32 3
  %y = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area16, i32 0, i32 1
  %17 = load i32, i32* %y, align 4
  %sub17 = sub nsw i32 %17, %cond15
  store i32 %sub17, i32* %y, align 4
  %18 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area18 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %18, i32 0, i32 3
  %x19 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area18, i32 0, i32 0
  %19 = load i32, i32* %x19, align 4
  %cmp20 = icmp sgt i32 0, %19
  br i1 %cmp20, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %cond.end.14
  br label %cond.end.25

cond.false.22:                                    ; preds = %cond.end.14
  %20 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area23 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %20, i32 0, i32 3
  %x24 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area23, i32 0, i32 0
  %21 = load i32, i32* %x24, align 4
  br label %cond.end.25

cond.end.25:                                      ; preds = %cond.false.22, %cond.true.21
  %cond26 = phi i32 [ 0, %cond.true.21 ], [ %21, %cond.false.22 ]
  %22 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area27 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %22, i32 0, i32 3
  %x28 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area27, i32 0, i32 0
  store i32 %cond26, i32* %x28, align 4
  %23 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area29 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %23, i32 0, i32 3
  %y30 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area29, i32 0, i32 1
  %24 = load i32, i32* %y30, align 4
  %cmp31 = icmp sgt i32 0, %24
  br i1 %cmp31, label %cond.true.32, label %cond.false.33

cond.true.32:                                     ; preds = %cond.end.25
  br label %cond.end.36

cond.false.33:                                    ; preds = %cond.end.25
  %25 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area34 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %25, i32 0, i32 3
  %y35 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area34, i32 0, i32 1
  %26 = load i32, i32* %y35, align 4
  br label %cond.end.36

cond.end.36:                                      ; preds = %cond.false.33, %cond.true.32
  %cond37 = phi i32 [ 0, %cond.true.32 ], [ %26, %cond.false.33 ]
  %27 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area38 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %27, i32 0, i32 3
  %y39 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area38, i32 0, i32 1
  store i32 %cond37, i32* %y39, align 4
  %28 = load i32, i32* %width, align 4
  %29 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area40 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %29, i32 0, i32 3
  %width41 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area40, i32 0, i32 2
  %30 = load i32, i32* %width41, align 4
  %cmp42 = icmp sgt i32 %28, %30
  br i1 %cmp42, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %cond.end.36
  %31 = load i32, i32* %width, align 4
  br label %cond.end.47

cond.false.44:                                    ; preds = %cond.end.36
  %32 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area45 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %32, i32 0, i32 3
  %width46 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area45, i32 0, i32 2
  %33 = load i32, i32* %width46, align 4
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.44, %cond.true.43
  %cond48 = phi i32 [ %31, %cond.true.43 ], [ %33, %cond.false.44 ]
  %34 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area49 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %34, i32 0, i32 3
  %width50 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area49, i32 0, i32 2
  store i32 %cond48, i32* %width50, align 4
  %35 = load i32, i32* %height, align 4
  %36 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area51 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %36, i32 0, i32 3
  %height52 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area51, i32 0, i32 3
  %37 = load i32, i32* %height52, align 4
  %cmp53 = icmp sgt i32 %35, %37
  br i1 %cmp53, label %cond.true.54, label %cond.false.55

cond.true.54:                                     ; preds = %cond.end.47
  %38 = load i32, i32* %height, align 4
  br label %cond.end.58

cond.false.55:                                    ; preds = %cond.end.47
  %39 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area56 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %39, i32 0, i32 3
  %height57 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area56, i32 0, i32 3
  %40 = load i32, i32* %height57, align 4
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.55, %cond.true.54
  %cond59 = phi i32 [ %38, %cond.true.54 ], [ %40, %cond.false.55 ]
  %41 = load %struct._GdkEventExpose*, %struct._GdkEventExpose** %event.addr, align 8
  %area60 = getelementptr inbounds %struct._GdkEventExpose, %struct._GdkEventExpose* %41, i32 0, i32 3
  %height61 = getelementptr inbounds %struct._GdkRectangle, %struct._GdkRectangle* %area60, i32 0, i32 3
  store i32 %cond59, i32* %height61, align 4
  ret i32 0
}

declare void @gtk_tool_item_set_homogeneous(%struct._GtkToolItem*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @xg_tool_bar_button_cb(%struct._GtkWidget* %widget, %struct._GdkEventButton* %event, i8* %user_data) #0 {
entry:
  %widget.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %struct._GdkEventButton*, align 8
  %user_data.addr = alloca i8*, align 8
  %state = alloca i64, align 8
  %ptr = alloca i8*, align 8
  store %struct._GtkWidget* %widget, %struct._GtkWidget** %widget.addr, align 8
  store %struct._GdkEventButton* %event, %struct._GdkEventButton** %event.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load %struct._GdkEventButton*, %struct._GdkEventButton** %event.addr, align 8
  %state1 = getelementptr inbounds %struct._GdkEventButton, %struct._GdkEventButton* %0, i32 0, i32 7
  %1 = load i32, i32* %state1, align 4
  %conv = zext i32 %1 to i64
  store i64 %conv, i64* %state, align 8
  %2 = load i64, i64* %state, align 8
  %3 = inttoptr i64 %2 to i8*
  store i8* %3, i8** %ptr, align 8
  %4 = load %struct._GtkWidget*, %struct._GtkWidget** %widget.addr, align 8
  %5 = bitcast %struct._GtkWidget* %4 to %struct._GTypeInstance*
  %call = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %5, i64 80)
  %6 = bitcast %struct._GTypeInstance* %call to %struct._GObject*
  %7 = load i8*, i8** %ptr, align 8
  call void @g_object_set_data(%struct._GObject* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.74, i32 0, i32 0), i8* %7)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @xg_tool_bar_help_callback(%struct._GtkWidget* %w, %struct._GdkEventCrossing* %event, i8* %client_data) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca %struct._GtkWidget*, align 8
  %event.addr = alloca %struct._GdkEventCrossing*, align 8
  %client_data.addr = alloca i8*, align 8
  %idx = alloca i64, align 8
  %f = alloca %struct.frame*, align 8
  %help = alloca i64, align 8
  %frame = alloca i64, align 8
  store %struct._GtkWidget* %w, %struct._GtkWidget** %w.addr, align 8
  store %struct._GdkEventCrossing* %event, %struct._GdkEventCrossing** %event.addr, align 8
  store i8* %client_data, i8** %client_data.addr, align 8
  %0 = load i8*, i8** %client_data.addr, align 8
  %1 = ptrtoint i8* %0 to i64
  store i64 %1, i64* %idx, align 8
  %2 = load %struct._GtkWidget*, %struct._GtkWidget** %w.addr, align 8
  %3 = bitcast %struct._GtkWidget* %2 to %struct._GTypeInstance*
  %call = call %struct._GTypeInstance* @g_type_check_instance_cast(%struct._GTypeInstance* %3, i64 80)
  %4 = bitcast %struct._GTypeInstance* %call to %struct._GObject*
  %call1 = call i8* @g_object_get_data(%struct._GObject* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i32 0, i32 0))
  %5 = bitcast i8* %call1 to %struct.frame*
  store %struct.frame* %5, %struct.frame** %f, align 8
  %6 = load %struct.frame*, %struct.frame** %f, align 8
  %tobool = icmp ne %struct.frame* %6, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %7 = load %struct.frame*, %struct.frame** %f, align 8
  %n_tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %7, i32 0, i32 30
  %8 = load i32, i32* %n_tool_bar_items, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %lor.lhs.false.3, label %if.then

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %9 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_items = getelementptr inbounds %struct.frame, %struct.frame* %9, i32 0, i32 17
  %10 = load i64, i64* %tool_bar_items, align 8
  %call4 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %10, %call4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.3
  %11 = load %struct._GdkEventCrossing*, %struct._GdkEventCrossing** %event.addr, align 8
  %type = getelementptr inbounds %struct._GdkEventCrossing, %struct._GdkEventCrossing* %11, i32 0, i32 0
  %12 = load i32, i32* %type, align 4
  %cmp5 = icmp eq i32 %12, 10
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %13 = load i64, i64* %idx, align 8
  %mul = mul nsw i64 %13, 11
  store i64 %mul, i64* %idx, align 8
  %14 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_items7 = getelementptr inbounds %struct.frame, %struct.frame* %14, i32 0, i32 17
  %15 = load i64, i64* %tool_bar_items7, align 8
  %16 = load i64, i64* %idx, align 8
  %add = add nsw i64 %16, 7
  %call8 = call i64 @AREF(i64 %15, i64 %add)
  store i64 %call8, i64* %help, align 8
  %17 = load i64, i64* %help, align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp10 = icmp eq i64 %17, %call9
  br i1 %cmp10, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %if.then.6
  %18 = load %struct.frame*, %struct.frame** %f, align 8
  %tool_bar_items12 = getelementptr inbounds %struct.frame, %struct.frame* %18, i32 0, i32 17
  %19 = load i64, i64* %tool_bar_items12, align 8
  %20 = load i64, i64* %idx, align 8
  %add13 = add nsw i64 %20, 3
  %call14 = call i64 @AREF(i64 %19, i64 %add13)
  store i64 %call14, i64* %help, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.11, %if.then.6
  br label %if.end.17

if.else:                                          ; preds = %if.end
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call16, i64* %help, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.end.15
  %21 = load %struct.frame*, %struct.frame** %f, align 8
  %22 = bitcast %struct.frame* %21 to i8*
  %call18 = call i64 @make_lisp_ptr(i8* %22, i32 5)
  store i64 %call18, i64* %frame, align 8
  %23 = load i64, i64* %frame, align 8
  %24 = load i64, i64* %help, align 8
  call void @kbd_buffer_store_help_event(i64 %23, i64 %24)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

declare i32 @x_x_to_emacs_modifiers(%struct.x_display_info*, i32) #1

declare void @x_focus_frame(%struct.frame*) #1

declare void @gdk_drawable_get_size(%struct._GdkDrawable*, i32*, i32*) #1

declare void @kbd_buffer_store_help_event(i64, i64) #1

declare i8* @g_object_ref_sink(i8*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind readnone }
attributes #9 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
