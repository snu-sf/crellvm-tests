; ModuleID = './src/character.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.composition = type { i32, i16, i16, i16, i16, i16, i32, i32, i64, i8*, i16* }
%struct.buffer = type { %struct.vectorlike_header, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.buffer_text, %struct.buffer_text*, %struct.buffer*, i64, i64, i64, i64, i64, i64, %struct.buffer*, i32, i32, [50 x i8], %struct.timespec, i64, i64, i64, i64, i64, %struct.region_cache*, %struct.region_cache*, %struct.region_cache*, i8, %struct.Lisp_Overlay*, %struct.Lisp_Overlay*, i64, i64 }
%struct.vectorlike_header = type { i64 }
%struct.buffer_text = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.interval*, %struct.Lisp_Marker*, i8 }
%struct.interval = type opaque
%struct.Lisp_Marker = type { i32, %struct.buffer*, %struct.Lisp_Marker*, i64, i64 }
%struct.timespec = type { i64, i64 }
%struct.region_cache = type opaque
%struct.Lisp_Overlay = type { i32, %struct.Lisp_Overlay*, i64, i64, i64 }
%struct.emacs_globals = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Lisp_Subr = type { %struct.vectorlike_header, %union.anon.0, i16, i16, i8*, i8*, i8* }
%union.anon.0 = type { i64 ()* }
%struct.Lisp_Objfwd = type { i32, i64* }
%struct.Lisp_Cons = type { i64, %union.anon }
%union.anon = type { i64 }
%struct.Lisp_Char_Table = type { %struct.vectorlike_header, i64, i64, i64, i64, [64 x i64], [0 x i64] }
%struct.Lisp_Sub_Char_Table = type { %struct.vectorlike_header, i32, i32, [0 x i64] }

@.str = private unnamed_addr constant [22 x i8] c"Invalid character: %x\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Not a unibyte character: %d\00", align 1
@composition_table = external global %struct.composition**, align 8
@current_buffer = external global %struct.buffer*, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"\5C%03o\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"Not an ASCII nor an 8-bit character: %d\00", align 1
@globals = external global %struct.emacs_globals, align 8
@Vchar_unify_table = common global i64 0, align 8
@Smax_char = internal global %struct.Lisp_Subr { %struct.vectorlike_header { i64 167772160 }, %union.anon.0 { i64 ()* @Fmax_char }, i16 0, i16 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i8* null, i8* null }, align 8
@syms_of_character.o_fwd = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.4 = private unnamed_addr constant [25 x i8] c"translation-table-vector\00", align 1
@syms_of_character.o_fwd.5 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.6 = private unnamed_addr constant [16 x i8] c"auto-fill-chars\00", align 1
@syms_of_character.o_fwd.7 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.8 = private unnamed_addr constant [17 x i8] c"char-width-table\00", align 1
@syms_of_character.o_fwd.9 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.10 = private unnamed_addr constant [16 x i8] c"printable-chars\00", align 1
@syms_of_character.o_fwd.11 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.12 = private unnamed_addr constant [18 x i8] c"char-script-table\00", align 1
@syms_of_character.o_fwd.13 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.14 = private unnamed_addr constant [28 x i8] c"script-representative-chars\00", align 1
@syms_of_character.o_fwd.15 = internal global %struct.Lisp_Objfwd zeroinitializer, align 8
@.str.16 = private unnamed_addr constant [23 x i8] c"unicode-category-table\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"max-char\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"characterp\00", align 1
@Scharacterp = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fcharacterp }, i16 1, i16 2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.19 = private unnamed_addr constant [26 x i8] c"unibyte-char-to-multibyte\00", align 1
@Sunibyte_char_to_multibyte = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Funibyte_char_to_multibyte }, i16 1, i16 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.19, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.20 = private unnamed_addr constant [26 x i8] c"multibyte-char-to-unibyte\00", align 1
@Smultibyte_char_to_unibyte = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fmultibyte_char_to_unibyte }, i16 1, i16 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.20, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.21 = private unnamed_addr constant [11 x i8] c"char-width\00", align 1
@Schar_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fchar_width }, i16 1, i16 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.22 = private unnamed_addr constant [13 x i8] c"string-width\00", align 1
@Sstring_width = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fstring_width }, i16 1, i16 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.23 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@Sstring = internal global { %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64*)* } { i64 (i64, i64*)* @Fstring }, i16 0, i16 -2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.24 = private unnamed_addr constant [15 x i8] c"unibyte-string\00", align 1
@Sunibyte_string = internal global { %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64*)* } { i64 (i64, i64*)* @Funibyte_string }, i16 0, i16 -2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.25 = private unnamed_addr constant [23 x i8] c"char-resolve-modifiers\00", align 1
@Schar_resolve_modifiers = internal global { %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64)* } { i64 (i64)* @Fchar_resolve_modifiers }, i16 1, i16 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i32 0, i32 0), i8* null, i8* null }, align 8
@.str.26 = private unnamed_addr constant [9 x i8] c"get-byte\00", align 1
@Sget_byte = internal global { %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* } { %struct.vectorlike_header { i64 167772160 }, { i64 (i64, i64)* } { i64 (i64, i64)* @Fget_byte }, i16 0, i16 2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i32 0, i32 0), i8* null, i8* null }, align 8

; Function Attrs: nounwind readnone uwtable
define i64 @char_resolve_modifier_mask(i64 %c) #0 {
entry:
  %retval = alloca i64, align 8
  %c.addr = alloca i64, align 8
  store i64 %c, i64* %c.addr, align 8
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load i64, i64* %c.addr, align 8
  %and = and i64 %0, -264241153
  %add = add nsw i64 %and, 0
  %cmp = icmp slt i64 %add, 128
  br i1 %cmp, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  %1 = load i64, i64* %c.addr, align 8
  %and1 = and i64 %1, -264241153
  %add2 = add i64 %and1, 0
  %cmp3 = icmp ult i64 %add2, 128
  br i1 %cmp3, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  %2 = load i64, i64* %c.addr, align 8
  store i64 %2, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %3 = load i64, i64* %c.addr, align 8
  %and4 = and i64 %3, 33554432
  %tobool = icmp ne i64 %and4, 0
  br i1 %tobool, label %if.then.5, label %if.end.27

if.then.5:                                        ; preds = %if.end
  %4 = load i64, i64* %c.addr, align 8
  %and6 = and i64 %4, 255
  %cmp7 = icmp sge i64 %and6, 65
  br i1 %cmp7, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.5
  %5 = load i64, i64* %c.addr, align 8
  %and8 = and i64 %5, 255
  %cmp9 = icmp sle i64 %and8, 90
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %land.lhs.true
  %6 = load i64, i64* %c.addr, align 8
  %and11 = and i64 %6, -33554433
  store i64 %and11, i64* %c.addr, align 8
  br label %if.end.26

if.else:                                          ; preds = %land.lhs.true, %if.then.5
  %7 = load i64, i64* %c.addr, align 8
  %and12 = and i64 %7, 255
  %cmp13 = icmp sge i64 %and12, 97
  br i1 %cmp13, label %land.lhs.true.14, label %if.else.19

land.lhs.true.14:                                 ; preds = %if.else
  %8 = load i64, i64* %c.addr, align 8
  %and15 = and i64 %8, 255
  %cmp16 = icmp sle i64 %and15, 122
  br i1 %cmp16, label %if.then.17, label %if.else.19

if.then.17:                                       ; preds = %land.lhs.true.14
  %9 = load i64, i64* %c.addr, align 8
  %and18 = and i64 %9, -33554433
  %sub = sub nsw i64 %and18, 32
  store i64 %sub, i64* %c.addr, align 8
  br label %if.end.25

if.else.19:                                       ; preds = %land.lhs.true.14, %if.else
  %10 = load i64, i64* %c.addr, align 8
  %and20 = and i64 %10, -264241153
  %cmp21 = icmp sle i64 %and20, 32
  br i1 %cmp21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %if.else.19
  %11 = load i64, i64* %c.addr, align 8
  %and23 = and i64 %11, -33554433
  store i64 %and23, i64* %c.addr, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %if.else.19
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.then.17
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.then.10
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end
  %12 = load i64, i64* %c.addr, align 8
  %and28 = and i64 %12, 67108864
  %tobool29 = icmp ne i64 %and28, 0
  br i1 %tobool29, label %if.then.30, label %if.end.61

if.then.30:                                       ; preds = %if.end.27
  %13 = load i64, i64* %c.addr, align 8
  %and31 = and i64 %13, 255
  %cmp32 = icmp eq i64 %and31, 32
  br i1 %cmp32, label %if.then.33, label %if.else.35

if.then.33:                                       ; preds = %if.then.30
  %14 = load i64, i64* %c.addr, align 8
  %and34 = and i64 %14, -67108992
  store i64 %and34, i64* %c.addr, align 8
  br label %if.end.60

if.else.35:                                       ; preds = %if.then.30
  %15 = load i64, i64* %c.addr, align 8
  %and36 = and i64 %15, 255
  %cmp37 = icmp eq i64 %and36, 63
  br i1 %cmp37, label %if.then.38, label %if.else.41

if.then.38:                                       ; preds = %if.else.35
  %16 = load i64, i64* %c.addr, align 8
  %and39 = and i64 %16, -128
  %and40 = and i64 %and39, -67108865
  %or = or i64 127, %and40
  store i64 %or, i64* %c.addr, align 8
  br label %if.end.59

if.else.41:                                       ; preds = %if.else.35
  %17 = load i64, i64* %c.addr, align 8
  %and42 = and i64 %17, 95
  %cmp43 = icmp sge i64 %and42, 65
  br i1 %cmp43, label %land.lhs.true.44, label %if.else.49

land.lhs.true.44:                                 ; preds = %if.else.41
  %18 = load i64, i64* %c.addr, align 8
  %and45 = and i64 %18, 95
  %cmp46 = icmp sle i64 %and45, 90
  br i1 %cmp46, label %if.then.47, label %if.else.49

if.then.47:                                       ; preds = %land.lhs.true.44
  %19 = load i64, i64* %c.addr, align 8
  %and48 = and i64 %19, -67108961
  store i64 %and48, i64* %c.addr, align 8
  br label %if.end.58

if.else.49:                                       ; preds = %land.lhs.true.44, %if.else.41
  %20 = load i64, i64* %c.addr, align 8
  %and50 = and i64 %20, 127
  %cmp51 = icmp sge i64 %and50, 64
  br i1 %cmp51, label %land.lhs.true.52, label %if.end.57

land.lhs.true.52:                                 ; preds = %if.else.49
  %21 = load i64, i64* %c.addr, align 8
  %and53 = and i64 %21, 127
  %cmp54 = icmp sle i64 %and53, 95
  br i1 %cmp54, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %land.lhs.true.52
  %22 = load i64, i64* %c.addr, align 8
  %and56 = and i64 %22, -67108961
  store i64 %and56, i64* %c.addr, align 8
  br label %if.end.57

if.end.57:                                        ; preds = %if.then.55, %land.lhs.true.52, %if.else.49
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then.47
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.then.38
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.then.33
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.end.27
  %23 = load i64, i64* %c.addr, align 8
  store i64 %23, i64* %retval
  br label %return

return:                                           ; preds = %if.end.61, %if.then
  %24 = load i64, i64* %retval
  ret i64 %24
}

; Function Attrs: nounwind uwtable
define i32 @char_string(i32 %c, i8* %p) #1 {
entry:
  %c.addr = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %bytes = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = load i32, i32* %c.addr, align 4
  %and = and i32 %0, 264241152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4
  %conv = zext i32 %1 to i64
  %call = call i64 @char_resolve_modifier_mask(i64 %conv) #6
  %conv1 = trunc i64 %call to i32
  store i32 %conv1, i32* %c.addr, align 4
  %2 = load i32, i32* %c.addr, align 4
  %and2 = and i32 %2, -264241153
  store i32 %and2, i32* %c.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %c.addr, align 4
  %cmp = icmp ule i32 %3, 65535
  br i1 %cmp, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.4
  %4 = load i32, i32* %c.addr, align 4
  %add = add i32 %4, 0
  %cmp5 = icmp ule i32 %add, 127
  br i1 %cmp5, label %cond.true.11, label %cond.false.13

cond.false:                                       ; preds = %if.then.4
  %5 = load i32, i32* %c.addr, align 4
  %conv7 = zext i32 %5 to i64
  %add8 = add i64 %conv7, 0
  %cmp9 = icmp ule i64 %add8, 127
  br i1 %cmp9, label %cond.true.11, label %cond.false.13

cond.true.11:                                     ; preds = %cond.false, %cond.true
  %6 = load i32, i32* %c.addr, align 4
  %conv12 = trunc i32 %6 to i8
  %7 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  store i8 %conv12, i8* %arrayidx, align 1
  br label %cond.end.58

cond.false.13:                                    ; preds = %cond.false, %cond.true
  br i1 true, label %cond.true.14, label %cond.false.18

cond.true.14:                                     ; preds = %cond.false.13
  %8 = load i32, i32* %c.addr, align 4
  %add15 = add i32 %8, 0
  %cmp16 = icmp ule i32 %add15, 2047
  br i1 %cmp16, label %cond.true.23, label %cond.false.30

cond.false.18:                                    ; preds = %cond.false.13
  %9 = load i32, i32* %c.addr, align 4
  %conv19 = zext i32 %9 to i64
  %add20 = add i64 %conv19, 0
  %cmp21 = icmp ule i64 %add20, 2047
  br i1 %cmp21, label %cond.true.23, label %cond.false.30

cond.true.23:                                     ; preds = %cond.false.18, %cond.true.14
  %10 = load i32, i32* %c.addr, align 4
  %shr = lshr i32 %10, 6
  %or = or i32 192, %shr
  %conv24 = trunc i32 %or to i8
  %11 = load i8*, i8** %p.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %11, i64 0
  store i8 %conv24, i8* %arrayidx25, align 1
  %12 = load i32, i32* %c.addr, align 4
  %and26 = and i32 %12, 63
  %or27 = or i32 128, %and26
  %conv28 = trunc i32 %or27 to i8
  %13 = load i8*, i8** %p.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %conv28, i8* %arrayidx29, align 1
  br label %cond.end.56

cond.false.30:                                    ; preds = %cond.false.18, %cond.true.14
  br i1 true, label %cond.true.31, label %cond.false.35

cond.true.31:                                     ; preds = %cond.false.30
  %14 = load i32, i32* %c.addr, align 4
  %add32 = add i32 %14, 0
  %cmp33 = icmp ule i32 %add32, 65535
  br i1 %cmp33, label %cond.true.40, label %cond.false.54

cond.false.35:                                    ; preds = %cond.false.30
  %15 = load i32, i32* %c.addr, align 4
  %conv36 = zext i32 %15 to i64
  %add37 = add i64 %conv36, 0
  %cmp38 = icmp ule i64 %add37, 65535
  br i1 %cmp38, label %cond.true.40, label %cond.false.54

cond.true.40:                                     ; preds = %cond.false.35, %cond.true.31
  %16 = load i32, i32* %c.addr, align 4
  %shr41 = lshr i32 %16, 12
  %or42 = or i32 224, %shr41
  %conv43 = trunc i32 %or42 to i8
  %17 = load i8*, i8** %p.addr, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %17, i64 0
  store i8 %conv43, i8* %arrayidx44, align 1
  %18 = load i32, i32* %c.addr, align 4
  %shr45 = lshr i32 %18, 6
  %and46 = and i32 %shr45, 63
  %or47 = or i32 128, %and46
  %conv48 = trunc i32 %or47 to i8
  %19 = load i8*, i8** %p.addr, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %19, i64 1
  store i8 %conv48, i8* %arrayidx49, align 1
  %20 = load i32, i32* %c.addr, align 4
  %and50 = and i32 %20, 63
  %or51 = or i32 128, %and50
  %conv52 = trunc i32 %or51 to i8
  %21 = load i8*, i8** %p.addr, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 %conv52, i8* %arrayidx53, align 1
  br label %cond.end

cond.false.54:                                    ; preds = %cond.false.35, %cond.true.31
  %22 = load i32, i32* %c.addr, align 4
  %23 = load i8*, i8** %p.addr, align 8
  %call55 = call i32 @char_string(i32 %22, i8* %23)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.54, %cond.true.40
  %cond = phi i32 [ 3, %cond.true.40 ], [ %call55, %cond.false.54 ]
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.end, %cond.true.23
  %cond57 = phi i32 [ 2, %cond.true.23 ], [ %cond, %cond.end ]
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.end.56, %cond.true.11
  %cond59 = phi i32 [ 1, %cond.true.11 ], [ %cond57, %cond.end.56 ]
  store i32 %cond59, i32* %bytes, align 4
  br label %if.end.129

if.else:                                          ; preds = %if.end
  %24 = load i32, i32* %c.addr, align 4
  %cmp60 = icmp ule i32 %24, 2097151
  br i1 %cmp60, label %if.then.62, label %if.else.81

if.then.62:                                       ; preds = %if.else
  %25 = load i32, i32* %c.addr, align 4
  %shr63 = lshr i32 %25, 18
  %or64 = or i32 240, %shr63
  %conv65 = trunc i32 %or64 to i8
  %26 = load i8*, i8** %p.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %26, i64 0
  store i8 %conv65, i8* %arrayidx66, align 1
  %27 = load i32, i32* %c.addr, align 4
  %shr67 = lshr i32 %27, 12
  %and68 = and i32 %shr67, 63
  %or69 = or i32 128, %and68
  %conv70 = trunc i32 %or69 to i8
  %28 = load i8*, i8** %p.addr, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 %conv70, i8* %arrayidx71, align 1
  %29 = load i32, i32* %c.addr, align 4
  %shr72 = lshr i32 %29, 6
  %and73 = and i32 %shr72, 63
  %or74 = or i32 128, %and73
  %conv75 = trunc i32 %or74 to i8
  %30 = load i8*, i8** %p.addr, align 8
  %arrayidx76 = getelementptr inbounds i8, i8* %30, i64 2
  store i8 %conv75, i8* %arrayidx76, align 1
  %31 = load i32, i32* %c.addr, align 4
  %and77 = and i32 %31, 63
  %or78 = or i32 128, %and77
  %conv79 = trunc i32 %or78 to i8
  %32 = load i8*, i8** %p.addr, align 8
  %arrayidx80 = getelementptr inbounds i8, i8* %32, i64 3
  store i8 %conv79, i8* %arrayidx80, align 1
  store i32 4, i32* %bytes, align 4
  br label %if.end.128

if.else.81:                                       ; preds = %if.else
  %33 = load i32, i32* %c.addr, align 4
  %cmp82 = icmp ule i32 %33, 4194175
  br i1 %cmp82, label %if.then.84, label %if.else.105

if.then.84:                                       ; preds = %if.else.81
  %34 = load i8*, i8** %p.addr, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %34, i64 0
  store i8 -8, i8* %arrayidx85, align 1
  %35 = load i32, i32* %c.addr, align 4
  %shr86 = lshr i32 %35, 18
  %and87 = and i32 %shr86, 15
  %or88 = or i32 128, %and87
  %conv89 = trunc i32 %or88 to i8
  %36 = load i8*, i8** %p.addr, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %36, i64 1
  store i8 %conv89, i8* %arrayidx90, align 1
  %37 = load i32, i32* %c.addr, align 4
  %shr91 = lshr i32 %37, 12
  %and92 = and i32 %shr91, 63
  %or93 = or i32 128, %and92
  %conv94 = trunc i32 %or93 to i8
  %38 = load i8*, i8** %p.addr, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %38, i64 2
  store i8 %conv94, i8* %arrayidx95, align 1
  %39 = load i32, i32* %c.addr, align 4
  %shr96 = lshr i32 %39, 6
  %and97 = and i32 %shr96, 63
  %or98 = or i32 128, %and97
  %conv99 = trunc i32 %or98 to i8
  %40 = load i8*, i8** %p.addr, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %40, i64 3
  store i8 %conv99, i8* %arrayidx100, align 1
  %41 = load i32, i32* %c.addr, align 4
  %and101 = and i32 %41, 63
  %or102 = or i32 128, %and101
  %conv103 = trunc i32 %or102 to i8
  %42 = load i8*, i8** %p.addr, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %42, i64 4
  store i8 %conv103, i8* %arrayidx104, align 1
  store i32 5, i32* %bytes, align 4
  br label %if.end.127

if.else.105:                                      ; preds = %if.else.81
  %43 = load i32, i32* %c.addr, align 4
  %cmp106 = icmp ule i32 %43, 4194303
  br i1 %cmp106, label %if.then.108, label %if.else.125

if.then.108:                                      ; preds = %if.else.105
  %44 = load i32, i32* %c.addr, align 4
  %cmp109 = icmp ugt i32 %44, 4194175
  br i1 %cmp109, label %cond.true.111, label %cond.false.112

cond.true.111:                                    ; preds = %if.then.108
  %45 = load i32, i32* %c.addr, align 4
  %sub = sub i32 %45, 4194048
  br label %cond.end.114

cond.false.112:                                   ; preds = %if.then.108
  %46 = load i32, i32* %c.addr, align 4
  %and113 = and i32 %46, 255
  br label %cond.end.114

cond.end.114:                                     ; preds = %cond.false.112, %cond.true.111
  %cond115 = phi i32 [ %sub, %cond.true.111 ], [ %and113, %cond.false.112 ]
  store i32 %cond115, i32* %c.addr, align 4
  %47 = load i32, i32* %c.addr, align 4
  %shr116 = lshr i32 %47, 6
  %and117 = and i32 %shr116, 1
  %or118 = or i32 192, %and117
  %conv119 = trunc i32 %or118 to i8
  %48 = load i8*, i8** %p.addr, align 8
  %arrayidx120 = getelementptr inbounds i8, i8* %48, i64 0
  store i8 %conv119, i8* %arrayidx120, align 1
  %49 = load i32, i32* %c.addr, align 4
  %and121 = and i32 %49, 63
  %or122 = or i32 128, %and121
  %conv123 = trunc i32 %or122 to i8
  %50 = load i8*, i8** %p.addr, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %conv123, i8* %arrayidx124, align 1
  store i32 2, i32* %bytes, align 4
  br label %if.end.126

if.else.125:                                      ; preds = %if.else.105
  %51 = load i32, i32* %c.addr, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i32 %51) #7
  unreachable

if.end.126:                                       ; preds = %cond.end.114
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.then.84
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.127, %if.then.62
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %cond.end.58
  %52 = load i32, i32* %bytes, align 4
  ret i32 %52
}

; Function Attrs: noreturn
declare void @error(i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @string_char(i8* %p, i8** %advanced, i32* %len) #1 {
entry:
  %p.addr = alloca i8*, align 8
  %advanced.addr = alloca i8**, align 8
  %len.addr = alloca i32*, align 8
  %c = alloca i32, align 4
  %saved_p = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8** %advanced, i8*** %advanced.addr, align 8
  store i32* %len, i32** %len.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  store i8* %0, i8** %saved_p, align 8
  %1 = load i8*, i8** %p.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = zext i8 %2 to i32
  %cmp = icmp slt i32 %conv, 128
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8*, i8** %p.addr, align 8
  %4 = load i8, i8* %3, align 1
  %conv2 = zext i8 %4 to i32
  %and = and i32 %conv2, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false.3, label %if.then

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %5 = load i8*, i8** %p.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv4 = zext i8 %6 to i32
  %and5 = and i32 %conv4, 16
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.else, label %if.then

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  %7 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx, align 1
  %conv7 = zext i8 %8 to i32
  %and8 = and i32 %conv7, 128
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then
  %9 = load i8*, i8** %p.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %p.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv10 = zext i8 %10 to i32
  br label %cond.end.51

cond.false:                                       ; preds = %if.then
  %11 = load i8*, i8** %p.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %12 to i32
  %and13 = and i32 %conv12, 32
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %cond.false.27, label %cond.true.15

cond.true.15:                                     ; preds = %cond.false
  %13 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 2
  store i8* %add.ptr, i8** %p.addr, align 8
  %14 = load i8*, i8** %p.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i64 -2
  %15 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %15 to i32
  %and18 = and i32 %conv17, 31
  %shl = shl i32 %and18, 6
  %16 = load i8*, i8** %p.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %16, i64 -1
  %17 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %17 to i32
  %and21 = and i32 %conv20, 63
  %or = or i32 %shl, %and21
  %18 = load i8*, i8** %p.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i64 -2
  %19 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %19 to i32
  %cmp24 = icmp slt i32 %conv23, 194
  %cond = select i1 %cmp24, i32 4194176, i32 0
  %or26 = or i32 %or, %cond
  br label %cond.end.49

cond.false.27:                                    ; preds = %cond.false
  %20 = load i8*, i8** %p.addr, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %21 to i32
  %and30 = and i32 %conv29, 16
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %cond.false.47, label %cond.true.32

cond.true.32:                                     ; preds = %cond.false.27
  %22 = load i8*, i8** %p.addr, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %22, i64 3
  store i8* %add.ptr33, i8** %p.addr, align 8
  %23 = load i8*, i8** %p.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %23, i64 -3
  %24 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %24 to i32
  %and36 = and i32 %conv35, 15
  %shl37 = shl i32 %and36, 12
  %25 = load i8*, i8** %p.addr, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %25, i64 -2
  %26 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %26 to i32
  %and40 = and i32 %conv39, 63
  %shl41 = shl i32 %and40, 6
  %or42 = or i32 %shl37, %shl41
  %27 = load i8*, i8** %p.addr, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %27, i64 -1
  %28 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %28 to i32
  %and45 = and i32 %conv44, 63
  %or46 = or i32 %or42, %and45
  br label %cond.end

cond.false.47:                                    ; preds = %cond.false.27
  %29 = load i8*, i8** %p.addr, align 8
  %call = call i32 @string_char(i8* %29, i8** %p.addr, i32* null)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.47, %cond.true.32
  %cond48 = phi i32 [ %or46, %cond.true.32 ], [ %call, %cond.false.47 ]
  br label %cond.end.49

cond.end.49:                                      ; preds = %cond.end, %cond.true.15
  %cond50 = phi i32 [ %or26, %cond.true.15 ], [ %cond48, %cond.end ]
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.end.49, %cond.true
  %cond52 = phi i32 [ %conv10, %cond.true ], [ %cond50, %cond.end.49 ]
  store i32 %cond52, i32* %c, align 4
  br label %if.end.96

if.else:                                          ; preds = %lor.lhs.false.3
  %30 = load i8*, i8** %p.addr, align 8
  %31 = load i8, i8* %30, align 1
  %conv53 = zext i8 %31 to i32
  %and54 = and i32 %conv53, 8
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.else.76, label %if.then.56

if.then.56:                                       ; preds = %if.else
  %32 = load i8*, i8** %p.addr, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %33 to i32
  %and59 = and i32 %conv58, 7
  %shl60 = shl i32 %and59, 18
  %34 = load i8*, i8** %p.addr, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %35 to i32
  %and63 = and i32 %conv62, 63
  %shl64 = shl i32 %and63, 12
  %or65 = or i32 %shl60, %shl64
  %36 = load i8*, i8** %p.addr, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %36, i64 2
  %37 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %37 to i32
  %and68 = and i32 %conv67, 63
  %shl69 = shl i32 %and68, 6
  %or70 = or i32 %or65, %shl69
  %38 = load i8*, i8** %p.addr, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %38, i64 3
  %39 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %39 to i32
  %and73 = and i32 %conv72, 63
  %or74 = or i32 %or70, %and73
  store i32 %or74, i32* %c, align 4
  %40 = load i8*, i8** %p.addr, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %40, i64 4
  store i8* %add.ptr75, i8** %p.addr, align 8
  br label %if.end

if.else.76:                                       ; preds = %if.else
  %41 = load i8*, i8** %p.addr, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %42 to i32
  %and79 = and i32 %conv78, 63
  %shl80 = shl i32 %and79, 18
  %43 = load i8*, i8** %p.addr, align 8
  %arrayidx81 = getelementptr inbounds i8, i8* %43, i64 2
  %44 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %44 to i32
  %and83 = and i32 %conv82, 63
  %shl84 = shl i32 %and83, 12
  %or85 = or i32 %shl80, %shl84
  %45 = load i8*, i8** %p.addr, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %45, i64 3
  %46 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %46 to i32
  %and88 = and i32 %conv87, 63
  %shl89 = shl i32 %and88, 6
  %or90 = or i32 %or85, %shl89
  %47 = load i8*, i8** %p.addr, align 8
  %arrayidx91 = getelementptr inbounds i8, i8* %47, i64 4
  %48 = load i8, i8* %arrayidx91, align 1
  %conv92 = zext i8 %48 to i32
  %and93 = and i32 %conv92, 63
  %or94 = or i32 %or90, %and93
  store i32 %or94, i32* %c, align 4
  %49 = load i8*, i8** %p.addr, align 8
  %add.ptr95 = getelementptr inbounds i8, i8* %49, i64 5
  store i8* %add.ptr95, i8** %p.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.76, %if.then.56
  br label %if.end.96

if.end.96:                                        ; preds = %if.end, %cond.end.51
  %50 = load i32*, i32** %len.addr, align 8
  %tobool97 = icmp ne i32* %50, null
  br i1 %tobool97, label %if.then.98, label %if.end.100

if.then.98:                                       ; preds = %if.end.96
  %51 = load i8*, i8** %p.addr, align 8
  %52 = load i8*, i8** %saved_p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv99 = trunc i64 %sub.ptr.sub to i32
  %53 = load i32*, i32** %len.addr, align 8
  store i32 %conv99, i32* %53, align 4
  br label %if.end.100

if.end.100:                                       ; preds = %if.then.98, %if.end.96
  %54 = load i8**, i8*** %advanced.addr, align 8
  %tobool101 = icmp ne i8** %54, null
  br i1 %tobool101, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.end.100
  %55 = load i8*, i8** %p.addr, align 8
  %56 = load i8**, i8*** %advanced.addr, align 8
  store i8* %55, i8** %56, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.102, %if.end.100
  %57 = load i32, i32* %c, align 4
  ret i32 %57
}

; Function Attrs: nounwind uwtable
define i32 @translate_char(i64 %table, i32 %c) #1 {
entry:
  %table.addr = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %ch = alloca i64, align 8
  store i64 %table, i64* %table.addr, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* %table.addr, align 8
  %call = call zeroext i1 @CHAR_TABLE_P(i64 %0)
  br i1 %call, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %table.addr, align 8
  %2 = load i32, i32* %c.addr, align 4
  %call1 = call i64 @CHAR_TABLE_REF(i64 %1, i32 %2)
  store i64 %call1, i64* %ch, align 8
  %3 = load i64, i64* %ch, align 8
  %call2 = call zeroext i1 @NATNUMP(i64 %3)
  br i1 %call2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %4 = load i64, i64* %ch, align 8
  %shr = ashr i64 %4, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %land.lhs.true
  %5 = load i64, i64* %ch, align 8
  %shr4 = ashr i64 %5, 2
  %conv = trunc i64 %shr4 to i32
  store i32 %conv, i32* %c.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.3, %land.lhs.true, %if.then
  br label %if.end.10

if.else:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %6 = load i64, i64* %table.addr, align 8
  %and = and i64 %6, 7
  %conv5 = trunc i64 %and to i32
  %cmp6 = icmp eq i32 %conv5, 3
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %table.addr, align 8
  %sub = sub nsw i64 %7, 3
  %8 = inttoptr i64 %sub to i8*
  %9 = bitcast i8* %8 to %struct.Lisp_Cons*
  %car = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %9, i32 0, i32 0
  %10 = load i64, i64* %car, align 8
  %11 = load i32, i32* %c.addr, align 4
  %call8 = call i32 @translate_char(i64 %10, i32 %11)
  store i32 %call8, i32* %c.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i64, i64* %table.addr, align 8
  %sub9 = sub nsw i64 %12, 3
  %13 = inttoptr i64 %sub9 to i8*
  %14 = bitcast i8* %13 to %struct.Lisp_Cons*
  %u = getelementptr inbounds %struct.Lisp_Cons, %struct.Lisp_Cons* %14, i32 0, i32 1
  %cdr = bitcast %union.anon* %u to i64*
  %15 = load i64, i64* %cdr, align 8
  store i64 %15, i64* %table.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.10

if.end.10:                                        ; preds = %for.end, %if.end
  %16 = load i32, i32* %c.addr, align 4
  ret i32 %16
}

declare zeroext i1 @CHAR_TABLE_P(i64) #3

declare i64 @CHAR_TABLE_REF(i64, i32) #3

declare zeroext i1 @NATNUMP(i64) #3

; Function Attrs: nounwind readnone uwtable
define i64 @Fcharacterp(i64 %object, i64 %ignore) #0 {
entry:
  %object.addr = alloca i64, align 8
  %ignore.addr = alloca i64, align 8
  store i64 %object, i64* %object.addr, align 8
  store i64 %ignore, i64* %ignore.addr, align 8
  %0 = load i64, i64* %object.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %object.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %call1 = call i64 @builtin_lisp_symbol(i32 901)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call2 = call i64 @builtin_lisp_symbol(i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret i64 %cond
}

declare i64 @builtin_lisp_symbol(i32) #3

; Function Attrs: nounwind readnone uwtable
define i64 @Fmax_char() #0 {
entry:
  ret i64 16777214
}

; Function Attrs: nounwind uwtable
define i64 @Funibyte_char_to_multibyte(i64 %ch) #1 {
entry:
  %ch.addr = alloca i64, align 8
  %c = alloca i32, align 4
  store i64 %ch, i64* %ch.addr, align 8
  %0 = load i64, i64* %ch.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %ch.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %ch.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %ch.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %c, align 4
  %6 = load i32, i32* %c, align 4
  %cmp3 = icmp sge i32 %6, 256
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %c, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i32 0, i32 0), i32 %7) #7
  unreachable

if.end:                                           ; preds = %cond.end
  br i1 true, label %cond.true.5, label %cond.false.8

cond.true.5:                                      ; preds = %if.end
  %8 = load i32, i32* %c, align 4
  %add = add i32 %8, 0
  %cmp6 = icmp ult i32 %add, 128
  br i1 %cmp6, label %cond.true.13, label %cond.false.14

cond.false.8:                                     ; preds = %if.end
  %9 = load i32, i32* %c, align 4
  %conv9 = sext i32 %9 to i64
  %add10 = add i64 %conv9, 0
  %cmp11 = icmp ult i64 %add10, 128
  br i1 %cmp11, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %cond.false.8, %cond.true.5
  %10 = load i32, i32* %c, align 4
  br label %cond.end.16

cond.false.14:                                    ; preds = %cond.false.8, %cond.true.5
  %11 = load i32, i32* %c, align 4
  %add15 = add nsw i32 %11, 4194048
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.14, %cond.true.13
  %cond = phi i32 [ %10, %cond.true.13 ], [ %add15, %cond.false.14 ]
  store i32 %cond, i32* %c, align 4
  %12 = load i32, i32* %c, align 4
  %conv17 = sext i32 %12 to i64
  %shl = shl i64 %conv17, 2
  %add18 = add i64 %shl, 2
  ret i64 %add18
}

; Function Attrs: noreturn
declare i64 @wrong_type_argument(i64, i64) #2

; Function Attrs: nounwind uwtable
define i64 @Fmultibyte_char_to_unibyte(i64 %ch) #1 {
entry:
  %retval = alloca i64, align 8
  %ch.addr = alloca i64, align 8
  %cm = alloca i32, align 4
  %cu = alloca i32, align 4
  store i64 %ch, i64* %ch.addr, align 8
  %0 = load i64, i64* %ch.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %ch.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %ch.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %ch.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %cm, align 4
  %6 = load i32, i32* %cm, align 4
  %cmp3 = icmp slt i32 %6, 256
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %7 = load i64, i64* %ch.addr, align 8
  store i64 %7, i64* %retval
  br label %return

if.else:                                          ; preds = %cond.end
  br i1 true, label %cond.true.5, label %cond.false.8

cond.true.5:                                      ; preds = %if.else
  %8 = load i32, i32* %cm, align 4
  %add = add i32 %8, 0
  %cmp6 = icmp ult i32 %add, 128
  br i1 %cmp6, label %cond.true.13, label %cond.false.14

cond.false.8:                                     ; preds = %if.else
  %9 = load i32, i32* %cm, align 4
  %conv9 = sext i32 %9 to i64
  %add10 = add i64 %conv9, 0
  %cmp11 = icmp ult i64 %add10, 128
  br i1 %cmp11, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %cond.false.8, %cond.true.5
  %10 = load i32, i32* %cm, align 4
  br label %cond.end.20

cond.false.14:                                    ; preds = %cond.false.8, %cond.true.5
  %11 = load i32, i32* %cm, align 4
  %cmp15 = icmp sgt i32 %11, 4194175
  br i1 %cmp15, label %cond.true.17, label %cond.false.18

cond.true.17:                                     ; preds = %cond.false.14
  %12 = load i32, i32* %cm, align 4
  %sub = sub nsw i32 %12, 4194048
  br label %cond.end.19

cond.false.18:                                    ; preds = %cond.false.14
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.18, %cond.true.17
  %cond = phi i32 [ %sub, %cond.true.17 ], [ -1, %cond.false.18 ]
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.end.19, %cond.true.13
  %cond21 = phi i32 [ %10, %cond.true.13 ], [ %cond, %cond.end.19 ]
  store i32 %cond21, i32* %cu, align 4
  %13 = load i32, i32* %cu, align 4
  %conv22 = sext i32 %13 to i64
  %shl = shl i64 %conv22, 2
  %add23 = add i64 %shl, 2
  store i64 %add23, i64* %retval
  br label %return

return:                                           ; preds = %cond.end.20, %if.then
  %14 = load i64, i64* %retval
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define i64 @Fchar_width(i64 %ch) #1 {
entry:
  %ch.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %width = alloca i64, align 8
  store i64 %ch, i64* %ch.addr, align 8
  %0 = load i64, i64* %ch.addr, align 8
  %call = call zeroext i1 @NATNUMP(i64 %0)
  br i1 %call, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %ch.addr, align 8
  %shr = ashr i64 %1, 2
  %cmp = icmp sle i64 %shr, 4194303
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %entry
  %call1 = call i64 @builtin_lisp_symbol(i32 260)
  %2 = load i64, i64* %ch.addr, align 8
  %3 = call i64 @wrong_type_argument(i64 %call1, i64 %2) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %4, %cond.true
  %5 = load i64, i64* %ch.addr, align 8
  %shr2 = ashr i64 %5, 2
  %conv = trunc i64 %shr2 to i32
  store i32 %conv, i32* %c, align 4
  %6 = load i32, i32* %c, align 4
  %call3 = call %struct.Lisp_Char_Table* @buffer_display_table()
  %call4 = call i64 @char_width(i32 %6, %struct.Lisp_Char_Table* %call3)
  store i64 %call4, i64* %width, align 8
  %7 = load i64, i64* %width, align 8
  %shl = shl i64 %7, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define internal i64 @char_width(i32 %c, %struct.Lisp_Char_Table* %dp) #1 {
entry:
  %c.addr = alloca i32, align 4
  %dp.addr = alloca %struct.Lisp_Char_Table*, align 8
  %width = alloca i64, align 8
  %disp = alloca i64, align 8
  %ch = alloca i64, align 8
  %i = alloca i32, align 4
  %w = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  store %struct.Lisp_Char_Table* %dp, %struct.Lisp_Char_Table** %dp.addr, align 8
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load i32, i32* %c.addr, align 4
  %add = add i32 %0, 0
  %cmp = icmp ult i32 %add, 128
  br i1 %cmp, label %cond.true.4, label %cond.false.36

cond.false:                                       ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4
  %conv = sext i32 %1 to i64
  %add1 = add i64 %conv, 0
  %cmp2 = icmp ult i64 %add1, 128
  br i1 %cmp2, label %cond.true.4, label %cond.false.36

cond.true.4:                                      ; preds = %cond.false, %cond.true
  %2 = load i32, i32* %c.addr, align 4
  %cmp5 = icmp slt i32 %2, 32
  br i1 %cmp5, label %cond.true.7, label %cond.false.22

cond.true.7:                                      ; preds = %cond.true.4
  %3 = load i32, i32* %c.addr, align 4
  %cmp8 = icmp eq i32 %3, 9
  br i1 %cmp8, label %cond.true.10, label %cond.false.11

cond.true.10:                                     ; preds = %cond.true.7
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tab_width_ = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 19
  %5 = load i64, i64* %tab_width_, align 8
  %shr = ashr i64 %5, 2
  %call = call i32 @sanitize_tab_width(i64 %shr)
  br label %cond.end.20

cond.false.11:                                    ; preds = %cond.true.7
  %6 = load i32, i32* %c.addr, align 4
  %cmp12 = icmp eq i32 %6, 10
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false.11
  br label %cond.end

cond.false.15:                                    ; preds = %cond.false.11
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_ = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 29
  %8 = load i64, i64* %ctl_arrow_, align 8
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp17 = icmp eq i64 %8, %call16
  %cond = select i1 %cmp17, i32 4, i32 2
  br label %cond.end

cond.end:                                         ; preds = %cond.false.15, %cond.true.14
  %cond19 = phi i32 [ 0, %cond.true.14 ], [ %cond, %cond.false.15 ]
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.end, %cond.true.10
  %cond21 = phi i32 [ %call, %cond.true.10 ], [ %cond19, %cond.end ]
  br label %cond.end.34

cond.false.22:                                    ; preds = %cond.true.4
  %9 = load i32, i32* %c.addr, align 4
  %cmp23 = icmp slt i32 %9, 127
  br i1 %cmp23, label %cond.true.25, label %cond.false.26

cond.true.25:                                     ; preds = %cond.false.22
  br label %cond.end.32

cond.false.26:                                    ; preds = %cond.false.22
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_27 = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 29
  %11 = load i64, i64* %ctl_arrow_27, align 8
  %call28 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp29 = icmp eq i64 %11, %call28
  %cond31 = select i1 %cmp29, i32 4, i32 2
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.26, %cond.true.25
  %cond33 = phi i32 [ 1, %cond.true.25 ], [ %cond31, %cond.false.26 ]
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.end.32, %cond.end.20
  %cond35 = phi i32 [ %cond21, %cond.end.20 ], [ %cond33, %cond.end.32 ]
  br label %cond.end.40

cond.false.36:                                    ; preds = %cond.false, %cond.true
  %12 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  %13 = load i32, i32* %c.addr, align 4
  %call37 = call i64 @CHAR_TABLE_REF(i64 %12, i32 %13)
  %shr38 = ashr i64 %call37, 2
  %call39 = call i32 @sanitize_char_width(i64 %shr38)
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.false.36, %cond.end.34
  %cond41 = phi i32 [ %cond35, %cond.end.34 ], [ %call39, %cond.false.36 ]
  %conv42 = sext i32 %cond41 to i64
  store i64 %conv42, i64* %width, align 8
  %14 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %tobool = icmp ne %struct.Lisp_Char_Table* %14, null
  br i1 %tobool, label %if.then, label %if.end.2232

if.then:                                          ; preds = %cond.end.40
  br i1 true, label %cond.true.43, label %cond.false.47

cond.true.43:                                     ; preds = %if.then
  %15 = load i32, i32* %c.addr, align 4
  %add44 = add i32 %15, 0
  %cmp45 = icmp ult i32 %add44, 128
  br i1 %cmp45, label %cond.true.52, label %cond.false.70

cond.false.47:                                    ; preds = %if.then
  %16 = load i32, i32* %c.addr, align 4
  %conv48 = sext i32 %16 to i64
  %add49 = add i64 %conv48, 0
  %cmp50 = icmp ult i64 %add49, 128
  br i1 %cmp50, label %cond.true.52, label %cond.false.70

cond.true.52:                                     ; preds = %cond.false.47, %cond.true.43
  %17 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %ascii = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %17, i32 0, i32 4
  %18 = load i64, i64* %ascii, align 8
  %call53 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp54 = icmp eq i64 %18, %call53
  br i1 %cmp54, label %cond.true.56, label %cond.false.57

cond.true.56:                                     ; preds = %cond.true.52
  %19 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %defalt = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %19, i32 0, i32 1
  %20 = load i64, i64* %defalt, align 8
  br label %cond.end.68

cond.false.57:                                    ; preds = %cond.true.52
  %21 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %ascii58 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %21, i32 0, i32 4
  %22 = load i64, i64* %ascii58, align 8
  %call59 = call zeroext i1 @SUB_CHAR_TABLE_P(i64 %22)
  br i1 %call59, label %cond.true.61, label %cond.false.64

cond.true.61:                                     ; preds = %cond.false.57
  %23 = load i32, i32* %c.addr, align 4
  %idxprom = sext i32 %23 to i64
  %24 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %ascii62 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %24, i32 0, i32 4
  %25 = load i64, i64* %ascii62, align 8
  %call63 = call %struct.Lisp_Sub_Char_Table* @XSUB_CHAR_TABLE(i64 %25)
  %contents = getelementptr inbounds %struct.Lisp_Sub_Char_Table, %struct.Lisp_Sub_Char_Table* %call63, i32 0, i32 3
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* %contents, i32 0, i64 %idxprom
  %26 = load i64, i64* %arrayidx, align 8
  br label %cond.end.66

cond.false.64:                                    ; preds = %cond.false.57
  %27 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %ascii65 = getelementptr inbounds %struct.Lisp_Char_Table, %struct.Lisp_Char_Table* %27, i32 0, i32 4
  %28 = load i64, i64* %ascii65, align 8
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.64, %cond.true.61
  %cond67 = phi i64 [ %26, %cond.true.61 ], [ %28, %cond.false.64 ]
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.end.66, %cond.true.56
  %cond69 = phi i64 [ %20, %cond.true.56 ], [ %cond67, %cond.end.66 ]
  br label %cond.end.72

cond.false.70:                                    ; preds = %cond.false.47, %cond.true.43
  %29 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp.addr, align 8
  %30 = load i32, i32* %c.addr, align 4
  %call71 = call i64 @disp_char_vector(%struct.Lisp_Char_Table* %29, i32 %30)
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.70, %cond.end.68
  %cond73 = phi i64 [ %cond69, %cond.end.68 ], [ %call71, %cond.false.70 ]
  store i64 %cond73, i64* %disp, align 8
  %31 = load i64, i64* %disp, align 8
  %call74 = call zeroext i1 @VECTORP(i64 %31)
  br i1 %call74, label %if.then.75, label %if.end.2231

if.then.75:                                       ; preds = %cond.end.72
  store i32 0, i32* %i, align 4
  store i64 0, i64* %width, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.75
  %32 = load i32, i32* %i, align 4
  %conv76 = sext i32 %32 to i64
  %33 = load i64, i64* %disp, align 8
  %call77 = call i64 @ASIZE(i64 %33)
  %cmp78 = icmp slt i64 %conv76, %call77
  br i1 %cmp78, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load i64, i64* %disp, align 8
  %35 = load i32, i32* %i, align 4
  %conv80 = sext i32 %35 to i64
  %call81 = call i64 @AREF(i64 %34, i64 %conv80)
  store i64 %call81, i64* %ch, align 8
  %36 = load i64, i64* %ch, align 8
  %call82 = call zeroext i1 @NATNUMP(i64 %36)
  br i1 %call82, label %land.lhs.true, label %if.end.2230

land.lhs.true:                                    ; preds = %for.body
  %37 = load i64, i64* %ch, align 8
  %shr84 = ashr i64 %37, 2
  %cmp85 = icmp sle i64 %shr84, 4194303
  br i1 %cmp85, label %if.then.87, label %if.end.2230

if.then.87:                                       ; preds = %land.lhs.true
  br i1 false, label %cond.true.88, label %cond.false.93

cond.true.88:                                     ; preds = %if.then.87
  %38 = load i64, i64* %ch, align 8
  %shr89 = ashr i64 %38, 2
  %add90 = add nsw i64 %shr89, 0
  %cmp91 = icmp slt i64 %add90, 128
  br i1 %cmp91, label %cond.true.98, label %cond.false.140

cond.false.93:                                    ; preds = %if.then.87
  %39 = load i64, i64* %ch, align 8
  %shr94 = ashr i64 %39, 2
  %add95 = add i64 %shr94, 0
  %cmp96 = icmp ult i64 %add95, 128
  br i1 %cmp96, label %cond.true.98, label %cond.false.140

cond.true.98:                                     ; preds = %cond.false.93, %cond.true.88
  %40 = load i64, i64* %ch, align 8
  %shr99 = ashr i64 %40, 2
  %cmp100 = icmp slt i64 %shr99, 32
  br i1 %cmp100, label %cond.true.102, label %cond.false.125

cond.true.102:                                    ; preds = %cond.true.98
  %41 = load i64, i64* %ch, align 8
  %shr103 = ashr i64 %41, 2
  %cmp104 = icmp eq i64 %shr103, 9
  br i1 %cmp104, label %cond.true.106, label %cond.false.110

cond.true.106:                                    ; preds = %cond.true.102
  %42 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %tab_width_107 = getelementptr inbounds %struct.buffer, %struct.buffer* %42, i32 0, i32 19
  %43 = load i64, i64* %tab_width_107, align 8
  %shr108 = ashr i64 %43, 2
  %call109 = call i32 @sanitize_tab_width(i64 %shr108)
  br label %cond.end.123

cond.false.110:                                   ; preds = %cond.true.102
  %44 = load i64, i64* %ch, align 8
  %shr111 = ashr i64 %44, 2
  %cmp112 = icmp eq i64 %shr111, 10
  br i1 %cmp112, label %cond.true.114, label %cond.false.115

cond.true.114:                                    ; preds = %cond.false.110
  br label %cond.end.121

cond.false.115:                                   ; preds = %cond.false.110
  %45 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_116 = getelementptr inbounds %struct.buffer, %struct.buffer* %45, i32 0, i32 29
  %46 = load i64, i64* %ctl_arrow_116, align 8
  %call117 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp118 = icmp eq i64 %46, %call117
  %cond120 = select i1 %cmp118, i32 4, i32 2
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.false.115, %cond.true.114
  %cond122 = phi i32 [ 0, %cond.true.114 ], [ %cond120, %cond.false.115 ]
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.end.121, %cond.true.106
  %cond124 = phi i32 [ %call109, %cond.true.106 ], [ %cond122, %cond.end.121 ]
  br label %cond.end.138

cond.false.125:                                   ; preds = %cond.true.98
  %47 = load i64, i64* %ch, align 8
  %shr126 = ashr i64 %47, 2
  %cmp127 = icmp slt i64 %shr126, 127
  br i1 %cmp127, label %cond.true.129, label %cond.false.130

cond.true.129:                                    ; preds = %cond.false.125
  br label %cond.end.136

cond.false.130:                                   ; preds = %cond.false.125
  %48 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %ctl_arrow_131 = getelementptr inbounds %struct.buffer, %struct.buffer* %48, i32 0, i32 29
  %49 = load i64, i64* %ctl_arrow_131, align 8
  %call132 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp133 = icmp eq i64 %49, %call132
  %cond135 = select i1 %cmp133, i32 4, i32 2
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.130, %cond.true.129
  %cond137 = phi i32 [ 1, %cond.true.129 ], [ %cond135, %cond.false.130 ]
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.end.136, %cond.end.123
  %cond139 = phi i32 [ %cond124, %cond.end.123 ], [ %cond137, %cond.end.136 ]
  br label %cond.end.146

cond.false.140:                                   ; preds = %cond.false.93, %cond.true.88
  %50 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  %51 = load i64, i64* %ch, align 8
  %shr141 = ashr i64 %51, 2
  %conv142 = trunc i64 %shr141 to i32
  %call143 = call i64 @CHAR_TABLE_REF(i64 %50, i32 %conv142)
  %shr144 = ashr i64 %call143, 2
  %call145 = call i32 @sanitize_char_width(i64 %shr144)
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.false.140, %cond.end.138
  %cond147 = phi i32 [ %cond139, %cond.end.138 ], [ %call145, %cond.false.140 ]
  store i32 %cond147, i32* %w, align 4
  br i1 false, label %cond.true.148, label %cond.false.631

cond.true.148:                                    ; preds = %cond.end.146
  br i1 false, label %cond.true.149, label %cond.false.420

cond.true.149:                                    ; preds = %cond.true.148
  %52 = load i32, i32* %w, align 4
  %conv150 = trunc i32 %52 to i8
  %conv151 = sext i8 %conv150 to i32
  %mul = mul nsw i32 0, %conv151
  %53 = load i64, i64* %width, align 8
  %conv152 = trunc i64 %53 to i8
  %conv153 = sext i8 %conv152 to i32
  %add154 = add nsw i32 %mul, %conv153
  %mul155 = mul nsw i32 0, %add154
  %sub = sub nsw i32 %mul155, 1
  %cmp156 = icmp slt i32 %sub, 0
  br i1 %cmp156, label %cond.true.158, label %cond.false.182

cond.true.158:                                    ; preds = %cond.true.149
  %54 = load i32, i32* %w, align 4
  %conv159 = trunc i32 %54 to i8
  %conv160 = sext i8 %conv159 to i32
  %mul161 = mul nsw i32 0, %conv160
  %55 = load i64, i64* %width, align 8
  %conv162 = trunc i64 %55 to i8
  %conv163 = sext i8 %conv162 to i32
  %add164 = add nsw i32 %mul161, %conv163
  %mul165 = mul nsw i32 0, %add164
  %add166 = add nsw i32 %mul165, 0
  %neg = xor i32 %add166, -1
  %cmp167 = icmp eq i32 %neg, -1
  %conv168 = zext i1 %cmp167 to i32
  %sub169 = sub nsw i32 0, %conv168
  %56 = load i32, i32* %w, align 4
  %conv170 = trunc i32 %56 to i8
  %conv171 = sext i8 %conv170 to i32
  %mul172 = mul nsw i32 0, %conv171
  %57 = load i64, i64* %width, align 8
  %conv173 = trunc i64 %57 to i8
  %conv174 = sext i8 %conv173 to i32
  %add175 = add nsw i32 %mul172, %conv174
  %mul176 = mul nsw i32 0, %add175
  %add177 = add nsw i32 %mul176, 1
  %shl = shl i32 %add177, 30
  %sub178 = sub nsw i32 %shl, 1
  %mul179 = mul nsw i32 %sub178, 2
  %add180 = add nsw i32 %mul179, 1
  %sub181 = sub nsw i32 %sub169, %add180
  br label %cond.end.191

cond.false.182:                                   ; preds = %cond.true.149
  %58 = load i32, i32* %w, align 4
  %conv183 = trunc i32 %58 to i8
  %conv184 = sext i8 %conv183 to i32
  %mul185 = mul nsw i32 0, %conv184
  %59 = load i64, i64* %width, align 8
  %conv186 = trunc i64 %59 to i8
  %conv187 = sext i8 %conv186 to i32
  %add188 = add nsw i32 %mul185, %conv187
  %mul189 = mul nsw i32 0, %add188
  %add190 = add nsw i32 %mul189, 0
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.182, %cond.true.158
  %cond192 = phi i32 [ %sub181, %cond.true.158 ], [ %add190, %cond.false.182 ]
  %cmp193 = icmp slt i32 %cond192, 0
  br i1 %cmp193, label %cond.true.195, label %cond.false.297

cond.true.195:                                    ; preds = %cond.end.191
  %60 = load i32, i32* %w, align 4
  %conv196 = trunc i32 %60 to i8
  %conv197 = sext i8 %conv196 to i32
  %cmp198 = icmp slt i32 %conv197, 0
  br i1 %cmp198, label %cond.true.200, label %cond.false.255

cond.true.200:                                    ; preds = %cond.true.195
  %61 = load i64, i64* %width, align 8
  %conv201 = trunc i64 %61 to i8
  %conv202 = sext i8 %conv201 to i32
  %62 = load i32, i32* %w, align 4
  %conv203 = trunc i32 %62 to i8
  %conv204 = sext i8 %conv203 to i32
  %mul205 = mul nsw i32 0, %conv204
  %63 = load i64, i64* %width, align 8
  %conv206 = trunc i64 %63 to i8
  %conv207 = sext i8 %conv206 to i32
  %add208 = add nsw i32 %mul205, %conv207
  %mul209 = mul nsw i32 0, %add208
  %sub210 = sub nsw i32 %mul209, 1
  %cmp211 = icmp slt i32 %sub210, 0
  br i1 %cmp211, label %cond.true.213, label %cond.false.239

cond.true.213:                                    ; preds = %cond.true.200
  %64 = load i32, i32* %w, align 4
  %conv214 = trunc i32 %64 to i8
  %conv215 = sext i8 %conv214 to i32
  %mul216 = mul nsw i32 0, %conv215
  %65 = load i64, i64* %width, align 8
  %conv217 = trunc i64 %65 to i8
  %conv218 = sext i8 %conv217 to i32
  %add219 = add nsw i32 %mul216, %conv218
  %mul220 = mul nsw i32 0, %add219
  %add221 = add nsw i32 %mul220, 0
  %neg222 = xor i32 %add221, -1
  %cmp223 = icmp eq i32 %neg222, -1
  %conv224 = zext i1 %cmp223 to i32
  %sub225 = sub nsw i32 0, %conv224
  %66 = load i32, i32* %w, align 4
  %conv226 = trunc i32 %66 to i8
  %conv227 = sext i8 %conv226 to i32
  %mul228 = mul nsw i32 0, %conv227
  %67 = load i64, i64* %width, align 8
  %conv229 = trunc i64 %67 to i8
  %conv230 = sext i8 %conv229 to i32
  %add231 = add nsw i32 %mul228, %conv230
  %mul232 = mul nsw i32 0, %add231
  %add233 = add nsw i32 %mul232, 1
  %shl234 = shl i32 %add233, 30
  %sub235 = sub nsw i32 %shl234, 1
  %mul236 = mul nsw i32 %sub235, 2
  %add237 = add nsw i32 %mul236, 1
  %sub238 = sub nsw i32 %sub225, %add237
  br label %cond.end.248

cond.false.239:                                   ; preds = %cond.true.200
  %68 = load i32, i32* %w, align 4
  %conv240 = trunc i32 %68 to i8
  %conv241 = sext i8 %conv240 to i32
  %mul242 = mul nsw i32 0, %conv241
  %69 = load i64, i64* %width, align 8
  %conv243 = trunc i64 %69 to i8
  %conv244 = sext i8 %conv243 to i32
  %add245 = add nsw i32 %mul242, %conv244
  %mul246 = mul nsw i32 0, %add245
  %add247 = add nsw i32 %mul246, 0
  br label %cond.end.248

cond.end.248:                                     ; preds = %cond.false.239, %cond.true.213
  %cond249 = phi i32 [ %sub238, %cond.true.213 ], [ %add247, %cond.false.239 ]
  %70 = load i32, i32* %w, align 4
  %conv250 = trunc i32 %70 to i8
  %conv251 = sext i8 %conv250 to i32
  %sub252 = sub nsw i32 %cond249, %conv251
  %cmp253 = icmp slt i32 %conv202, %sub252
  br i1 %cmp253, label %cond.true.362, label %lor.lhs.false

cond.false.255:                                   ; preds = %cond.true.195
  %71 = load i32, i32* %w, align 4
  %conv256 = trunc i32 %71 to i8
  %conv257 = sext i8 %conv256 to i32
  %mul258 = mul nsw i32 0, %conv257
  %72 = load i64, i64* %width, align 8
  %conv259 = trunc i64 %72 to i8
  %conv260 = sext i8 %conv259 to i32
  %add261 = add nsw i32 %mul258, %conv260
  %mul262 = mul nsw i32 0, %add261
  %sub263 = sub nsw i32 %mul262, 1
  %cmp264 = icmp slt i32 %sub263, 0
  br i1 %cmp264, label %cond.true.266, label %cond.false.279

cond.true.266:                                    ; preds = %cond.false.255
  %73 = load i32, i32* %w, align 4
  %conv267 = trunc i32 %73 to i8
  %conv268 = sext i8 %conv267 to i32
  %mul269 = mul nsw i32 0, %conv268
  %74 = load i64, i64* %width, align 8
  %conv270 = trunc i64 %74 to i8
  %conv271 = sext i8 %conv270 to i32
  %add272 = add nsw i32 %mul269, %conv271
  %mul273 = mul nsw i32 0, %add272
  %add274 = add nsw i32 %mul273, 1
  %shl275 = shl i32 %add274, 30
  %sub276 = sub nsw i32 %shl275, 1
  %mul277 = mul nsw i32 %sub276, 2
  %add278 = add nsw i32 %mul277, 1
  br label %cond.end.288

cond.false.279:                                   ; preds = %cond.false.255
  %75 = load i32, i32* %w, align 4
  %conv280 = trunc i32 %75 to i8
  %conv281 = sext i8 %conv280 to i32
  %mul282 = mul nsw i32 0, %conv281
  %76 = load i64, i64* %width, align 8
  %conv283 = trunc i64 %76 to i8
  %conv284 = sext i8 %conv283 to i32
  %add285 = add nsw i32 %mul282, %conv284
  %mul286 = mul nsw i32 0, %add285
  %sub287 = sub nsw i32 %mul286, 1
  br label %cond.end.288

cond.end.288:                                     ; preds = %cond.false.279, %cond.true.266
  %cond289 = phi i32 [ %add278, %cond.true.266 ], [ %sub287, %cond.false.279 ]
  %77 = load i32, i32* %w, align 4
  %conv290 = trunc i32 %77 to i8
  %conv291 = sext i8 %conv290 to i32
  %sub292 = sub nsw i32 %cond289, %conv291
  %78 = load i64, i64* %width, align 8
  %conv293 = trunc i64 %78 to i8
  %conv294 = sext i8 %conv293 to i32
  %cmp295 = icmp slt i32 %sub292, %conv294
  br i1 %cmp295, label %cond.true.362, label %lor.lhs.false

cond.false.297:                                   ; preds = %cond.end.191
  %79 = load i64, i64* %width, align 8
  %conv298 = trunc i64 %79 to i8
  %conv299 = sext i8 %conv298 to i32
  %cmp300 = icmp slt i32 %conv299, 0
  br i1 %cmp300, label %cond.true.302, label %cond.false.312

cond.true.302:                                    ; preds = %cond.false.297
  %80 = load i32, i32* %w, align 4
  %conv303 = trunc i32 %80 to i8
  %conv304 = sext i8 %conv303 to i32
  %81 = load i64, i64* %width, align 8
  %conv305 = trunc i64 %81 to i8
  %conv306 = sext i8 %conv305 to i32
  %82 = load i32, i32* %w, align 4
  %conv307 = trunc i32 %82 to i8
  %conv308 = sext i8 %conv307 to i32
  %add309 = add nsw i32 %conv306, %conv308
  %cmp310 = icmp sle i32 %conv304, %add309
  br i1 %cmp310, label %cond.true.362, label %lor.lhs.false

cond.false.312:                                   ; preds = %cond.false.297
  %83 = load i32, i32* %w, align 4
  %conv313 = trunc i32 %83 to i8
  %conv314 = sext i8 %conv313 to i32
  %cmp315 = icmp slt i32 %conv314, 0
  br i1 %cmp315, label %cond.true.317, label %cond.false.327

cond.true.317:                                    ; preds = %cond.false.312
  %84 = load i64, i64* %width, align 8
  %conv318 = trunc i64 %84 to i8
  %conv319 = sext i8 %conv318 to i32
  %85 = load i64, i64* %width, align 8
  %conv320 = trunc i64 %85 to i8
  %conv321 = sext i8 %conv320 to i32
  %86 = load i32, i32* %w, align 4
  %conv322 = trunc i32 %86 to i8
  %conv323 = sext i8 %conv322 to i32
  %add324 = add nsw i32 %conv321, %conv323
  %cmp325 = icmp sle i32 %conv319, %add324
  br i1 %cmp325, label %cond.true.362, label %lor.lhs.false

cond.false.327:                                   ; preds = %cond.false.312
  %87 = load i64, i64* %width, align 8
  %conv328 = trunc i64 %87 to i8
  %conv329 = sext i8 %conv328 to i32
  %88 = load i32, i32* %w, align 4
  %conv330 = trunc i32 %88 to i8
  %conv331 = sext i8 %conv330 to i32
  %add332 = add nsw i32 %conv329, %conv331
  %89 = load i32, i32* %w, align 4
  %conv333 = trunc i32 %89 to i8
  %conv334 = sext i8 %conv333 to i32
  %cmp335 = icmp slt i32 %add332, %conv334
  br i1 %cmp335, label %cond.true.362, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.327, %cond.true.317, %cond.true.302, %cond.end.288, %cond.end.248
  %90 = load i64, i64* %width, align 8
  %conv337 = trunc i64 %90 to i8
  %conv338 = sext i8 %conv337 to i32
  %91 = load i32, i32* %w, align 4
  %conv339 = trunc i32 %91 to i8
  %conv340 = sext i8 %conv339 to i32
  %add341 = add nsw i32 %conv338, %conv340
  %mul342 = mul nsw i32 0, %add341
  %sub343 = sub nsw i32 %mul342, 1
  %cmp344 = icmp slt i32 %sub343, 0
  br i1 %cmp344, label %land.lhs.true.346, label %lor.lhs.false.354

land.lhs.true.346:                                ; preds = %lor.lhs.false
  %92 = load i64, i64* %width, align 8
  %conv347 = trunc i64 %92 to i8
  %conv348 = sext i8 %conv347 to i32
  %93 = load i32, i32* %w, align 4
  %conv349 = trunc i32 %93 to i8
  %conv350 = sext i8 %conv349 to i32
  %add351 = add nsw i32 %conv348, %conv350
  %cmp352 = icmp slt i32 %add351, -128
  br i1 %cmp352, label %cond.true.362, label %lor.lhs.false.354

lor.lhs.false.354:                                ; preds = %land.lhs.true.346, %lor.lhs.false
  %94 = load i64, i64* %width, align 8
  %conv355 = trunc i64 %94 to i8
  %conv356 = sext i8 %conv355 to i32
  %95 = load i32, i32* %w, align 4
  %conv357 = trunc i32 %95 to i8
  %conv358 = sext i8 %conv357 to i32
  %add359 = add nsw i32 %conv356, %conv358
  %cmp360 = icmp slt i32 127, %add359
  br i1 %cmp360, label %cond.true.362, label %cond.false.391

cond.true.362:                                    ; preds = %lor.lhs.false.354, %land.lhs.true.346, %cond.false.327, %cond.true.317, %cond.true.302, %cond.end.288, %cond.end.248
  %96 = load i64, i64* %width, align 8
  %conv363 = trunc i64 %96 to i8
  %conv364 = zext i8 %conv363 to i32
  %97 = load i32, i32* %w, align 4
  %conv365 = trunc i32 %97 to i8
  %conv366 = zext i8 %conv365 to i32
  %add367 = add nsw i32 %conv364, %conv366
  %cmp368 = icmp sle i32 %add367, 127
  br i1 %cmp368, label %cond.true.370, label %cond.false.378

cond.true.370:                                    ; preds = %cond.true.362
  %98 = load i64, i64* %width, align 8
  %conv371 = trunc i64 %98 to i8
  %conv372 = zext i8 %conv371 to i32
  %99 = load i32, i32* %w, align 4
  %conv373 = trunc i32 %99 to i8
  %conv374 = zext i8 %conv373 to i32
  %add375 = add nsw i32 %conv372, %conv374
  %conv376 = trunc i32 %add375 to i8
  %conv377 = sext i8 %conv376 to i32
  br label %cond.end.388

cond.false.378:                                   ; preds = %cond.true.362
  %100 = load i64, i64* %width, align 8
  %conv379 = trunc i64 %100 to i8
  %conv380 = zext i8 %conv379 to i32
  %101 = load i32, i32* %w, align 4
  %conv381 = trunc i32 %101 to i8
  %conv382 = zext i8 %conv381 to i32
  %add383 = add nsw i32 %conv380, %conv382
  %sub384 = sub nsw i32 %add383, -128
  %conv385 = trunc i32 %sub384 to i8
  %conv386 = sext i8 %conv385 to i32
  %add387 = add nsw i32 %conv386, -128
  br label %cond.end.388

cond.end.388:                                     ; preds = %cond.false.378, %cond.true.370
  %cond389 = phi i32 [ %conv377, %cond.true.370 ], [ %add387, %cond.false.378 ]
  %conv390 = sext i32 %cond389 to i64
  store i64 %conv390, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.391:                                   ; preds = %lor.lhs.false.354
  %102 = load i64, i64* %width, align 8
  %conv392 = trunc i64 %102 to i8
  %conv393 = zext i8 %conv392 to i32
  %103 = load i32, i32* %w, align 4
  %conv394 = trunc i32 %103 to i8
  %conv395 = zext i8 %conv394 to i32
  %add396 = add nsw i32 %conv393, %conv395
  %cmp397 = icmp sle i32 %add396, 127
  br i1 %cmp397, label %cond.true.399, label %cond.false.407

cond.true.399:                                    ; preds = %cond.false.391
  %104 = load i64, i64* %width, align 8
  %conv400 = trunc i64 %104 to i8
  %conv401 = zext i8 %conv400 to i32
  %105 = load i32, i32* %w, align 4
  %conv402 = trunc i32 %105 to i8
  %conv403 = zext i8 %conv402 to i32
  %add404 = add nsw i32 %conv401, %conv403
  %conv405 = trunc i32 %add404 to i8
  %conv406 = sext i8 %conv405 to i32
  br label %cond.end.417

cond.false.407:                                   ; preds = %cond.false.391
  %106 = load i64, i64* %width, align 8
  %conv408 = trunc i64 %106 to i8
  %conv409 = zext i8 %conv408 to i32
  %107 = load i32, i32* %w, align 4
  %conv410 = trunc i32 %107 to i8
  %conv411 = zext i8 %conv410 to i32
  %add412 = add nsw i32 %conv409, %conv411
  %sub413 = sub nsw i32 %add412, -128
  %conv414 = trunc i32 %sub413 to i8
  %conv415 = sext i8 %conv414 to i32
  %add416 = add nsw i32 %conv415, -128
  br label %cond.end.417

cond.end.417:                                     ; preds = %cond.false.407, %cond.true.399
  %cond418 = phi i32 [ %conv406, %cond.true.399 ], [ %add416, %cond.false.407 ]
  %conv419 = sext i32 %cond418 to i64
  store i64 %conv419, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.420:                                   ; preds = %cond.true.148
  %108 = load i32, i32* %w, align 4
  %mul421 = mul nsw i32 0, %108
  %conv422 = sext i32 %mul421 to i64
  %109 = load i64, i64* %width, align 8
  %add423 = add nsw i64 %conv422, %109
  %mul424 = mul nsw i64 0, %add423
  %sub425 = sub nsw i64 %mul424, 1
  %cmp426 = icmp slt i64 %sub425, 0
  br i1 %cmp426, label %cond.true.428, label %cond.false.449

cond.true.428:                                    ; preds = %cond.false.420
  %110 = load i32, i32* %w, align 4
  %mul429 = mul nsw i32 0, %110
  %conv430 = sext i32 %mul429 to i64
  %111 = load i64, i64* %width, align 8
  %add431 = add nsw i64 %conv430, %111
  %mul432 = mul nsw i64 0, %add431
  %add433 = add nsw i64 %mul432, 0
  %neg434 = xor i64 %add433, -1
  %cmp435 = icmp eq i64 %neg434, -1
  %conv436 = zext i1 %cmp435 to i32
  %sub437 = sub nsw i32 0, %conv436
  %conv438 = sext i32 %sub437 to i64
  %112 = load i32, i32* %w, align 4
  %mul439 = mul nsw i32 0, %112
  %conv440 = sext i32 %mul439 to i64
  %113 = load i64, i64* %width, align 8
  %add441 = add nsw i64 %conv440, %113
  %mul442 = mul nsw i64 0, %add441
  %add443 = add nsw i64 %mul442, 1
  %shl444 = shl i64 %add443, 62
  %sub445 = sub nsw i64 %shl444, 1
  %mul446 = mul nsw i64 %sub445, 2
  %add447 = add nsw i64 %mul446, 1
  %sub448 = sub nsw i64 %conv438, %add447
  br label %cond.end.455

cond.false.449:                                   ; preds = %cond.false.420
  %114 = load i32, i32* %w, align 4
  %mul450 = mul nsw i32 0, %114
  %conv451 = sext i32 %mul450 to i64
  %115 = load i64, i64* %width, align 8
  %add452 = add nsw i64 %conv451, %115
  %mul453 = mul nsw i64 0, %add452
  %add454 = add nsw i64 %mul453, 0
  br label %cond.end.455

cond.end.455:                                     ; preds = %cond.false.449, %cond.true.428
  %cond456 = phi i64 [ %sub448, %cond.true.428 ], [ %add454, %cond.false.449 ]
  %cmp457 = icmp slt i64 %cond456, 0
  br i1 %cmp457, label %cond.true.459, label %cond.false.533

cond.true.459:                                    ; preds = %cond.end.455
  %116 = load i32, i32* %w, align 4
  %cmp460 = icmp slt i32 %116, 0
  br i1 %cmp460, label %cond.true.462, label %cond.false.503

cond.true.462:                                    ; preds = %cond.true.459
  %117 = load i64, i64* %width, align 8
  %118 = load i32, i32* %w, align 4
  %mul463 = mul nsw i32 0, %118
  %conv464 = sext i32 %mul463 to i64
  %119 = load i64, i64* %width, align 8
  %add465 = add nsw i64 %conv464, %119
  %mul466 = mul nsw i64 0, %add465
  %sub467 = sub nsw i64 %mul466, 1
  %cmp468 = icmp slt i64 %sub467, 0
  br i1 %cmp468, label %cond.true.470, label %cond.false.491

cond.true.470:                                    ; preds = %cond.true.462
  %120 = load i32, i32* %w, align 4
  %mul471 = mul nsw i32 0, %120
  %conv472 = sext i32 %mul471 to i64
  %121 = load i64, i64* %width, align 8
  %add473 = add nsw i64 %conv472, %121
  %mul474 = mul nsw i64 0, %add473
  %add475 = add nsw i64 %mul474, 0
  %neg476 = xor i64 %add475, -1
  %cmp477 = icmp eq i64 %neg476, -1
  %conv478 = zext i1 %cmp477 to i32
  %sub479 = sub nsw i32 0, %conv478
  %conv480 = sext i32 %sub479 to i64
  %122 = load i32, i32* %w, align 4
  %mul481 = mul nsw i32 0, %122
  %conv482 = sext i32 %mul481 to i64
  %123 = load i64, i64* %width, align 8
  %add483 = add nsw i64 %conv482, %123
  %mul484 = mul nsw i64 0, %add483
  %add485 = add nsw i64 %mul484, 1
  %shl486 = shl i64 %add485, 62
  %sub487 = sub nsw i64 %shl486, 1
  %mul488 = mul nsw i64 %sub487, 2
  %add489 = add nsw i64 %mul488, 1
  %sub490 = sub nsw i64 %conv480, %add489
  br label %cond.end.497

cond.false.491:                                   ; preds = %cond.true.462
  %124 = load i32, i32* %w, align 4
  %mul492 = mul nsw i32 0, %124
  %conv493 = sext i32 %mul492 to i64
  %125 = load i64, i64* %width, align 8
  %add494 = add nsw i64 %conv493, %125
  %mul495 = mul nsw i64 0, %add494
  %add496 = add nsw i64 %mul495, 0
  br label %cond.end.497

cond.end.497:                                     ; preds = %cond.false.491, %cond.true.470
  %cond498 = phi i64 [ %sub490, %cond.true.470 ], [ %add496, %cond.false.491 ]
  %126 = load i32, i32* %w, align 4
  %conv499 = sext i32 %126 to i64
  %sub500 = sub nsw i64 %cond498, %conv499
  %cmp501 = icmp slt i64 %117, %sub500
  br i1 %cmp501, label %cond.true.573, label %lor.lhs.false.556

cond.false.503:                                   ; preds = %cond.true.459
  %127 = load i32, i32* %w, align 4
  %mul504 = mul nsw i32 0, %127
  %conv505 = sext i32 %mul504 to i64
  %128 = load i64, i64* %width, align 8
  %add506 = add nsw i64 %conv505, %128
  %mul507 = mul nsw i64 0, %add506
  %sub508 = sub nsw i64 %mul507, 1
  %cmp509 = icmp slt i64 %sub508, 0
  br i1 %cmp509, label %cond.true.511, label %cond.false.521

cond.true.511:                                    ; preds = %cond.false.503
  %129 = load i32, i32* %w, align 4
  %mul512 = mul nsw i32 0, %129
  %conv513 = sext i32 %mul512 to i64
  %130 = load i64, i64* %width, align 8
  %add514 = add nsw i64 %conv513, %130
  %mul515 = mul nsw i64 0, %add514
  %add516 = add nsw i64 %mul515, 1
  %shl517 = shl i64 %add516, 62
  %sub518 = sub nsw i64 %shl517, 1
  %mul519 = mul nsw i64 %sub518, 2
  %add520 = add nsw i64 %mul519, 1
  br label %cond.end.527

cond.false.521:                                   ; preds = %cond.false.503
  %131 = load i32, i32* %w, align 4
  %mul522 = mul nsw i32 0, %131
  %conv523 = sext i32 %mul522 to i64
  %132 = load i64, i64* %width, align 8
  %add524 = add nsw i64 %conv523, %132
  %mul525 = mul nsw i64 0, %add524
  %sub526 = sub nsw i64 %mul525, 1
  br label %cond.end.527

cond.end.527:                                     ; preds = %cond.false.521, %cond.true.511
  %cond528 = phi i64 [ %add520, %cond.true.511 ], [ %sub526, %cond.false.521 ]
  %133 = load i32, i32* %w, align 4
  %conv529 = sext i32 %133 to i64
  %sub530 = sub nsw i64 %cond528, %conv529
  %134 = load i64, i64* %width, align 8
  %cmp531 = icmp slt i64 %sub530, %134
  br i1 %cmp531, label %cond.true.573, label %lor.lhs.false.556

cond.false.533:                                   ; preds = %cond.end.455
  %135 = load i64, i64* %width, align 8
  %cmp534 = icmp slt i64 %135, 0
  br i1 %cmp534, label %cond.true.536, label %cond.false.542

cond.true.536:                                    ; preds = %cond.false.533
  %136 = load i32, i32* %w, align 4
  %conv537 = sext i32 %136 to i64
  %137 = load i64, i64* %width, align 8
  %138 = load i32, i32* %w, align 4
  %conv538 = sext i32 %138 to i64
  %add539 = add nsw i64 %137, %conv538
  %cmp540 = icmp sle i64 %conv537, %add539
  br i1 %cmp540, label %cond.true.573, label %lor.lhs.false.556

cond.false.542:                                   ; preds = %cond.false.533
  %139 = load i32, i32* %w, align 4
  %cmp543 = icmp slt i32 %139, 0
  br i1 %cmp543, label %cond.true.545, label %cond.false.550

cond.true.545:                                    ; preds = %cond.false.542
  %140 = load i64, i64* %width, align 8
  %141 = load i64, i64* %width, align 8
  %142 = load i32, i32* %w, align 4
  %conv546 = sext i32 %142 to i64
  %add547 = add nsw i64 %141, %conv546
  %cmp548 = icmp sle i64 %140, %add547
  br i1 %cmp548, label %cond.true.573, label %lor.lhs.false.556

cond.false.550:                                   ; preds = %cond.false.542
  %143 = load i64, i64* %width, align 8
  %144 = load i32, i32* %w, align 4
  %conv551 = sext i32 %144 to i64
  %add552 = add nsw i64 %143, %conv551
  %145 = load i32, i32* %w, align 4
  %conv553 = sext i32 %145 to i64
  %cmp554 = icmp slt i64 %add552, %conv553
  br i1 %cmp554, label %cond.true.573, label %lor.lhs.false.556

lor.lhs.false.556:                                ; preds = %cond.false.550, %cond.true.545, %cond.true.536, %cond.end.527, %cond.end.497
  %146 = load i64, i64* %width, align 8
  %147 = load i32, i32* %w, align 4
  %conv557 = sext i32 %147 to i64
  %add558 = add nsw i64 %146, %conv557
  %mul559 = mul nsw i64 0, %add558
  %sub560 = sub nsw i64 %mul559, 1
  %cmp561 = icmp slt i64 %sub560, 0
  br i1 %cmp561, label %land.lhs.true.563, label %lor.lhs.false.568

land.lhs.true.563:                                ; preds = %lor.lhs.false.556
  %148 = load i64, i64* %width, align 8
  %149 = load i32, i32* %w, align 4
  %conv564 = sext i32 %149 to i64
  %add565 = add nsw i64 %148, %conv564
  %cmp566 = icmp slt i64 %add565, -128
  br i1 %cmp566, label %cond.true.573, label %lor.lhs.false.568

lor.lhs.false.568:                                ; preds = %land.lhs.true.563, %lor.lhs.false.556
  %150 = load i64, i64* %width, align 8
  %151 = load i32, i32* %w, align 4
  %conv569 = sext i32 %151 to i64
  %add570 = add nsw i64 %150, %conv569
  %cmp571 = icmp slt i64 127, %add570
  br i1 %cmp571, label %cond.true.573, label %cond.false.602

cond.true.573:                                    ; preds = %lor.lhs.false.568, %land.lhs.true.563, %cond.false.550, %cond.true.545, %cond.true.536, %cond.end.527, %cond.end.497
  %152 = load i64, i64* %width, align 8
  %conv574 = trunc i64 %152 to i8
  %conv575 = zext i8 %conv574 to i32
  %153 = load i32, i32* %w, align 4
  %conv576 = trunc i32 %153 to i8
  %conv577 = zext i8 %conv576 to i32
  %add578 = add nsw i32 %conv575, %conv577
  %cmp579 = icmp sle i32 %add578, 127
  br i1 %cmp579, label %cond.true.581, label %cond.false.589

cond.true.581:                                    ; preds = %cond.true.573
  %154 = load i64, i64* %width, align 8
  %conv582 = trunc i64 %154 to i8
  %conv583 = zext i8 %conv582 to i32
  %155 = load i32, i32* %w, align 4
  %conv584 = trunc i32 %155 to i8
  %conv585 = zext i8 %conv584 to i32
  %add586 = add nsw i32 %conv583, %conv585
  %conv587 = trunc i32 %add586 to i8
  %conv588 = sext i8 %conv587 to i32
  br label %cond.end.599

cond.false.589:                                   ; preds = %cond.true.573
  %156 = load i64, i64* %width, align 8
  %conv590 = trunc i64 %156 to i8
  %conv591 = zext i8 %conv590 to i32
  %157 = load i32, i32* %w, align 4
  %conv592 = trunc i32 %157 to i8
  %conv593 = zext i8 %conv592 to i32
  %add594 = add nsw i32 %conv591, %conv593
  %sub595 = sub nsw i32 %add594, -128
  %conv596 = trunc i32 %sub595 to i8
  %conv597 = sext i8 %conv596 to i32
  %add598 = add nsw i32 %conv597, -128
  br label %cond.end.599

cond.end.599:                                     ; preds = %cond.false.589, %cond.true.581
  %cond600 = phi i32 [ %conv588, %cond.true.581 ], [ %add598, %cond.false.589 ]
  %conv601 = sext i32 %cond600 to i64
  store i64 %conv601, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.602:                                   ; preds = %lor.lhs.false.568
  %158 = load i64, i64* %width, align 8
  %conv603 = trunc i64 %158 to i8
  %conv604 = zext i8 %conv603 to i32
  %159 = load i32, i32* %w, align 4
  %conv605 = trunc i32 %159 to i8
  %conv606 = zext i8 %conv605 to i32
  %add607 = add nsw i32 %conv604, %conv606
  %cmp608 = icmp sle i32 %add607, 127
  br i1 %cmp608, label %cond.true.610, label %cond.false.618

cond.true.610:                                    ; preds = %cond.false.602
  %160 = load i64, i64* %width, align 8
  %conv611 = trunc i64 %160 to i8
  %conv612 = zext i8 %conv611 to i32
  %161 = load i32, i32* %w, align 4
  %conv613 = trunc i32 %161 to i8
  %conv614 = zext i8 %conv613 to i32
  %add615 = add nsw i32 %conv612, %conv614
  %conv616 = trunc i32 %add615 to i8
  %conv617 = sext i8 %conv616 to i32
  br label %cond.end.628

cond.false.618:                                   ; preds = %cond.false.602
  %162 = load i64, i64* %width, align 8
  %conv619 = trunc i64 %162 to i8
  %conv620 = zext i8 %conv619 to i32
  %163 = load i32, i32* %w, align 4
  %conv621 = trunc i32 %163 to i8
  %conv622 = zext i8 %conv621 to i32
  %add623 = add nsw i32 %conv620, %conv622
  %sub624 = sub nsw i32 %add623, -128
  %conv625 = trunc i32 %sub624 to i8
  %conv626 = sext i8 %conv625 to i32
  %add627 = add nsw i32 %conv626, -128
  br label %cond.end.628

cond.end.628:                                     ; preds = %cond.false.618, %cond.true.610
  %cond629 = phi i32 [ %conv617, %cond.true.610 ], [ %add627, %cond.false.618 ]
  %conv630 = sext i32 %cond629 to i64
  store i64 %conv630, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.631:                                   ; preds = %cond.end.146
  br i1 false, label %cond.true.632, label %cond.false.1120

cond.true.632:                                    ; preds = %cond.false.631
  br i1 false, label %cond.true.633, label %cond.false.909

cond.true.633:                                    ; preds = %cond.true.632
  %164 = load i32, i32* %w, align 4
  %conv634 = trunc i32 %164 to i16
  %conv635 = sext i16 %conv634 to i32
  %mul636 = mul nsw i32 0, %conv635
  %165 = load i64, i64* %width, align 8
  %conv637 = trunc i64 %165 to i16
  %conv638 = sext i16 %conv637 to i32
  %add639 = add nsw i32 %mul636, %conv638
  %mul640 = mul nsw i32 0, %add639
  %sub641 = sub nsw i32 %mul640, 1
  %cmp642 = icmp slt i32 %sub641, 0
  br i1 %cmp642, label %cond.true.644, label %cond.false.670

cond.true.644:                                    ; preds = %cond.true.633
  %166 = load i32, i32* %w, align 4
  %conv645 = trunc i32 %166 to i16
  %conv646 = sext i16 %conv645 to i32
  %mul647 = mul nsw i32 0, %conv646
  %167 = load i64, i64* %width, align 8
  %conv648 = trunc i64 %167 to i16
  %conv649 = sext i16 %conv648 to i32
  %add650 = add nsw i32 %mul647, %conv649
  %mul651 = mul nsw i32 0, %add650
  %add652 = add nsw i32 %mul651, 0
  %neg653 = xor i32 %add652, -1
  %cmp654 = icmp eq i32 %neg653, -1
  %conv655 = zext i1 %cmp654 to i32
  %sub656 = sub nsw i32 0, %conv655
  %168 = load i32, i32* %w, align 4
  %conv657 = trunc i32 %168 to i16
  %conv658 = sext i16 %conv657 to i32
  %mul659 = mul nsw i32 0, %conv658
  %169 = load i64, i64* %width, align 8
  %conv660 = trunc i64 %169 to i16
  %conv661 = sext i16 %conv660 to i32
  %add662 = add nsw i32 %mul659, %conv661
  %mul663 = mul nsw i32 0, %add662
  %add664 = add nsw i32 %mul663, 1
  %shl665 = shl i32 %add664, 30
  %sub666 = sub nsw i32 %shl665, 1
  %mul667 = mul nsw i32 %sub666, 2
  %add668 = add nsw i32 %mul667, 1
  %sub669 = sub nsw i32 %sub656, %add668
  br label %cond.end.679

cond.false.670:                                   ; preds = %cond.true.633
  %170 = load i32, i32* %w, align 4
  %conv671 = trunc i32 %170 to i16
  %conv672 = sext i16 %conv671 to i32
  %mul673 = mul nsw i32 0, %conv672
  %171 = load i64, i64* %width, align 8
  %conv674 = trunc i64 %171 to i16
  %conv675 = sext i16 %conv674 to i32
  %add676 = add nsw i32 %mul673, %conv675
  %mul677 = mul nsw i32 0, %add676
  %add678 = add nsw i32 %mul677, 0
  br label %cond.end.679

cond.end.679:                                     ; preds = %cond.false.670, %cond.true.644
  %cond680 = phi i32 [ %sub669, %cond.true.644 ], [ %add678, %cond.false.670 ]
  %cmp681 = icmp slt i32 %cond680, 0
  br i1 %cmp681, label %cond.true.683, label %cond.false.785

cond.true.683:                                    ; preds = %cond.end.679
  %172 = load i32, i32* %w, align 4
  %conv684 = trunc i32 %172 to i16
  %conv685 = sext i16 %conv684 to i32
  %cmp686 = icmp slt i32 %conv685, 0
  br i1 %cmp686, label %cond.true.688, label %cond.false.743

cond.true.688:                                    ; preds = %cond.true.683
  %173 = load i64, i64* %width, align 8
  %conv689 = trunc i64 %173 to i16
  %conv690 = sext i16 %conv689 to i32
  %174 = load i32, i32* %w, align 4
  %conv691 = trunc i32 %174 to i16
  %conv692 = sext i16 %conv691 to i32
  %mul693 = mul nsw i32 0, %conv692
  %175 = load i64, i64* %width, align 8
  %conv694 = trunc i64 %175 to i16
  %conv695 = sext i16 %conv694 to i32
  %add696 = add nsw i32 %mul693, %conv695
  %mul697 = mul nsw i32 0, %add696
  %sub698 = sub nsw i32 %mul697, 1
  %cmp699 = icmp slt i32 %sub698, 0
  br i1 %cmp699, label %cond.true.701, label %cond.false.727

cond.true.701:                                    ; preds = %cond.true.688
  %176 = load i32, i32* %w, align 4
  %conv702 = trunc i32 %176 to i16
  %conv703 = sext i16 %conv702 to i32
  %mul704 = mul nsw i32 0, %conv703
  %177 = load i64, i64* %width, align 8
  %conv705 = trunc i64 %177 to i16
  %conv706 = sext i16 %conv705 to i32
  %add707 = add nsw i32 %mul704, %conv706
  %mul708 = mul nsw i32 0, %add707
  %add709 = add nsw i32 %mul708, 0
  %neg710 = xor i32 %add709, -1
  %cmp711 = icmp eq i32 %neg710, -1
  %conv712 = zext i1 %cmp711 to i32
  %sub713 = sub nsw i32 0, %conv712
  %178 = load i32, i32* %w, align 4
  %conv714 = trunc i32 %178 to i16
  %conv715 = sext i16 %conv714 to i32
  %mul716 = mul nsw i32 0, %conv715
  %179 = load i64, i64* %width, align 8
  %conv717 = trunc i64 %179 to i16
  %conv718 = sext i16 %conv717 to i32
  %add719 = add nsw i32 %mul716, %conv718
  %mul720 = mul nsw i32 0, %add719
  %add721 = add nsw i32 %mul720, 1
  %shl722 = shl i32 %add721, 30
  %sub723 = sub nsw i32 %shl722, 1
  %mul724 = mul nsw i32 %sub723, 2
  %add725 = add nsw i32 %mul724, 1
  %sub726 = sub nsw i32 %sub713, %add725
  br label %cond.end.736

cond.false.727:                                   ; preds = %cond.true.688
  %180 = load i32, i32* %w, align 4
  %conv728 = trunc i32 %180 to i16
  %conv729 = sext i16 %conv728 to i32
  %mul730 = mul nsw i32 0, %conv729
  %181 = load i64, i64* %width, align 8
  %conv731 = trunc i64 %181 to i16
  %conv732 = sext i16 %conv731 to i32
  %add733 = add nsw i32 %mul730, %conv732
  %mul734 = mul nsw i32 0, %add733
  %add735 = add nsw i32 %mul734, 0
  br label %cond.end.736

cond.end.736:                                     ; preds = %cond.false.727, %cond.true.701
  %cond737 = phi i32 [ %sub726, %cond.true.701 ], [ %add735, %cond.false.727 ]
  %182 = load i32, i32* %w, align 4
  %conv738 = trunc i32 %182 to i16
  %conv739 = sext i16 %conv738 to i32
  %sub740 = sub nsw i32 %cond737, %conv739
  %cmp741 = icmp slt i32 %conv690, %sub740
  br i1 %cmp741, label %cond.true.851, label %lor.lhs.false.825

cond.false.743:                                   ; preds = %cond.true.683
  %183 = load i32, i32* %w, align 4
  %conv744 = trunc i32 %183 to i16
  %conv745 = sext i16 %conv744 to i32
  %mul746 = mul nsw i32 0, %conv745
  %184 = load i64, i64* %width, align 8
  %conv747 = trunc i64 %184 to i16
  %conv748 = sext i16 %conv747 to i32
  %add749 = add nsw i32 %mul746, %conv748
  %mul750 = mul nsw i32 0, %add749
  %sub751 = sub nsw i32 %mul750, 1
  %cmp752 = icmp slt i32 %sub751, 0
  br i1 %cmp752, label %cond.true.754, label %cond.false.767

cond.true.754:                                    ; preds = %cond.false.743
  %185 = load i32, i32* %w, align 4
  %conv755 = trunc i32 %185 to i16
  %conv756 = sext i16 %conv755 to i32
  %mul757 = mul nsw i32 0, %conv756
  %186 = load i64, i64* %width, align 8
  %conv758 = trunc i64 %186 to i16
  %conv759 = sext i16 %conv758 to i32
  %add760 = add nsw i32 %mul757, %conv759
  %mul761 = mul nsw i32 0, %add760
  %add762 = add nsw i32 %mul761, 1
  %shl763 = shl i32 %add762, 30
  %sub764 = sub nsw i32 %shl763, 1
  %mul765 = mul nsw i32 %sub764, 2
  %add766 = add nsw i32 %mul765, 1
  br label %cond.end.776

cond.false.767:                                   ; preds = %cond.false.743
  %187 = load i32, i32* %w, align 4
  %conv768 = trunc i32 %187 to i16
  %conv769 = sext i16 %conv768 to i32
  %mul770 = mul nsw i32 0, %conv769
  %188 = load i64, i64* %width, align 8
  %conv771 = trunc i64 %188 to i16
  %conv772 = sext i16 %conv771 to i32
  %add773 = add nsw i32 %mul770, %conv772
  %mul774 = mul nsw i32 0, %add773
  %sub775 = sub nsw i32 %mul774, 1
  br label %cond.end.776

cond.end.776:                                     ; preds = %cond.false.767, %cond.true.754
  %cond777 = phi i32 [ %add766, %cond.true.754 ], [ %sub775, %cond.false.767 ]
  %189 = load i32, i32* %w, align 4
  %conv778 = trunc i32 %189 to i16
  %conv779 = sext i16 %conv778 to i32
  %sub780 = sub nsw i32 %cond777, %conv779
  %190 = load i64, i64* %width, align 8
  %conv781 = trunc i64 %190 to i16
  %conv782 = sext i16 %conv781 to i32
  %cmp783 = icmp slt i32 %sub780, %conv782
  br i1 %cmp783, label %cond.true.851, label %lor.lhs.false.825

cond.false.785:                                   ; preds = %cond.end.679
  %191 = load i64, i64* %width, align 8
  %conv786 = trunc i64 %191 to i16
  %conv787 = sext i16 %conv786 to i32
  %cmp788 = icmp slt i32 %conv787, 0
  br i1 %cmp788, label %cond.true.790, label %cond.false.800

cond.true.790:                                    ; preds = %cond.false.785
  %192 = load i32, i32* %w, align 4
  %conv791 = trunc i32 %192 to i16
  %conv792 = sext i16 %conv791 to i32
  %193 = load i64, i64* %width, align 8
  %conv793 = trunc i64 %193 to i16
  %conv794 = sext i16 %conv793 to i32
  %194 = load i32, i32* %w, align 4
  %conv795 = trunc i32 %194 to i16
  %conv796 = sext i16 %conv795 to i32
  %add797 = add nsw i32 %conv794, %conv796
  %cmp798 = icmp sle i32 %conv792, %add797
  br i1 %cmp798, label %cond.true.851, label %lor.lhs.false.825

cond.false.800:                                   ; preds = %cond.false.785
  %195 = load i32, i32* %w, align 4
  %conv801 = trunc i32 %195 to i16
  %conv802 = sext i16 %conv801 to i32
  %cmp803 = icmp slt i32 %conv802, 0
  br i1 %cmp803, label %cond.true.805, label %cond.false.815

cond.true.805:                                    ; preds = %cond.false.800
  %196 = load i64, i64* %width, align 8
  %conv806 = trunc i64 %196 to i16
  %conv807 = sext i16 %conv806 to i32
  %197 = load i64, i64* %width, align 8
  %conv808 = trunc i64 %197 to i16
  %conv809 = sext i16 %conv808 to i32
  %198 = load i32, i32* %w, align 4
  %conv810 = trunc i32 %198 to i16
  %conv811 = sext i16 %conv810 to i32
  %add812 = add nsw i32 %conv809, %conv811
  %cmp813 = icmp sle i32 %conv807, %add812
  br i1 %cmp813, label %cond.true.851, label %lor.lhs.false.825

cond.false.815:                                   ; preds = %cond.false.800
  %199 = load i64, i64* %width, align 8
  %conv816 = trunc i64 %199 to i16
  %conv817 = sext i16 %conv816 to i32
  %200 = load i32, i32* %w, align 4
  %conv818 = trunc i32 %200 to i16
  %conv819 = sext i16 %conv818 to i32
  %add820 = add nsw i32 %conv817, %conv819
  %201 = load i32, i32* %w, align 4
  %conv821 = trunc i32 %201 to i16
  %conv822 = sext i16 %conv821 to i32
  %cmp823 = icmp slt i32 %add820, %conv822
  br i1 %cmp823, label %cond.true.851, label %lor.lhs.false.825

lor.lhs.false.825:                                ; preds = %cond.false.815, %cond.true.805, %cond.true.790, %cond.end.776, %cond.end.736
  %202 = load i64, i64* %width, align 8
  %conv826 = trunc i64 %202 to i16
  %conv827 = sext i16 %conv826 to i32
  %203 = load i32, i32* %w, align 4
  %conv828 = trunc i32 %203 to i16
  %conv829 = sext i16 %conv828 to i32
  %add830 = add nsw i32 %conv827, %conv829
  %mul831 = mul nsw i32 0, %add830
  %sub832 = sub nsw i32 %mul831, 1
  %cmp833 = icmp slt i32 %sub832, 0
  br i1 %cmp833, label %land.lhs.true.835, label %lor.lhs.false.843

land.lhs.true.835:                                ; preds = %lor.lhs.false.825
  %204 = load i64, i64* %width, align 8
  %conv836 = trunc i64 %204 to i16
  %conv837 = sext i16 %conv836 to i32
  %205 = load i32, i32* %w, align 4
  %conv838 = trunc i32 %205 to i16
  %conv839 = sext i16 %conv838 to i32
  %add840 = add nsw i32 %conv837, %conv839
  %cmp841 = icmp slt i32 %add840, -32768
  br i1 %cmp841, label %cond.true.851, label %lor.lhs.false.843

lor.lhs.false.843:                                ; preds = %land.lhs.true.835, %lor.lhs.false.825
  %206 = load i64, i64* %width, align 8
  %conv844 = trunc i64 %206 to i16
  %conv845 = sext i16 %conv844 to i32
  %207 = load i32, i32* %w, align 4
  %conv846 = trunc i32 %207 to i16
  %conv847 = sext i16 %conv846 to i32
  %add848 = add nsw i32 %conv845, %conv847
  %cmp849 = icmp slt i32 32767, %add848
  br i1 %cmp849, label %cond.true.851, label %cond.false.880

cond.true.851:                                    ; preds = %lor.lhs.false.843, %land.lhs.true.835, %cond.false.815, %cond.true.805, %cond.true.790, %cond.end.776, %cond.end.736
  %208 = load i64, i64* %width, align 8
  %conv852 = trunc i64 %208 to i16
  %conv853 = zext i16 %conv852 to i32
  %209 = load i32, i32* %w, align 4
  %conv854 = trunc i32 %209 to i16
  %conv855 = zext i16 %conv854 to i32
  %add856 = add nsw i32 %conv853, %conv855
  %cmp857 = icmp sle i32 %add856, 32767
  br i1 %cmp857, label %cond.true.859, label %cond.false.867

cond.true.859:                                    ; preds = %cond.true.851
  %210 = load i64, i64* %width, align 8
  %conv860 = trunc i64 %210 to i16
  %conv861 = zext i16 %conv860 to i32
  %211 = load i32, i32* %w, align 4
  %conv862 = trunc i32 %211 to i16
  %conv863 = zext i16 %conv862 to i32
  %add864 = add nsw i32 %conv861, %conv863
  %conv865 = trunc i32 %add864 to i16
  %conv866 = sext i16 %conv865 to i32
  br label %cond.end.877

cond.false.867:                                   ; preds = %cond.true.851
  %212 = load i64, i64* %width, align 8
  %conv868 = trunc i64 %212 to i16
  %conv869 = zext i16 %conv868 to i32
  %213 = load i32, i32* %w, align 4
  %conv870 = trunc i32 %213 to i16
  %conv871 = zext i16 %conv870 to i32
  %add872 = add nsw i32 %conv869, %conv871
  %sub873 = sub nsw i32 %add872, -32768
  %conv874 = trunc i32 %sub873 to i16
  %conv875 = sext i16 %conv874 to i32
  %add876 = add nsw i32 %conv875, -32768
  br label %cond.end.877

cond.end.877:                                     ; preds = %cond.false.867, %cond.true.859
  %cond878 = phi i32 [ %conv866, %cond.true.859 ], [ %add876, %cond.false.867 ]
  %conv879 = sext i32 %cond878 to i64
  store i64 %conv879, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.880:                                   ; preds = %lor.lhs.false.843
  %214 = load i64, i64* %width, align 8
  %conv881 = trunc i64 %214 to i16
  %conv882 = zext i16 %conv881 to i32
  %215 = load i32, i32* %w, align 4
  %conv883 = trunc i32 %215 to i16
  %conv884 = zext i16 %conv883 to i32
  %add885 = add nsw i32 %conv882, %conv884
  %cmp886 = icmp sle i32 %add885, 32767
  br i1 %cmp886, label %cond.true.888, label %cond.false.896

cond.true.888:                                    ; preds = %cond.false.880
  %216 = load i64, i64* %width, align 8
  %conv889 = trunc i64 %216 to i16
  %conv890 = zext i16 %conv889 to i32
  %217 = load i32, i32* %w, align 4
  %conv891 = trunc i32 %217 to i16
  %conv892 = zext i16 %conv891 to i32
  %add893 = add nsw i32 %conv890, %conv892
  %conv894 = trunc i32 %add893 to i16
  %conv895 = sext i16 %conv894 to i32
  br label %cond.end.906

cond.false.896:                                   ; preds = %cond.false.880
  %218 = load i64, i64* %width, align 8
  %conv897 = trunc i64 %218 to i16
  %conv898 = zext i16 %conv897 to i32
  %219 = load i32, i32* %w, align 4
  %conv899 = trunc i32 %219 to i16
  %conv900 = zext i16 %conv899 to i32
  %add901 = add nsw i32 %conv898, %conv900
  %sub902 = sub nsw i32 %add901, -32768
  %conv903 = trunc i32 %sub902 to i16
  %conv904 = sext i16 %conv903 to i32
  %add905 = add nsw i32 %conv904, -32768
  br label %cond.end.906

cond.end.906:                                     ; preds = %cond.false.896, %cond.true.888
  %cond907 = phi i32 [ %conv895, %cond.true.888 ], [ %add905, %cond.false.896 ]
  %conv908 = sext i32 %cond907 to i64
  store i64 %conv908, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.909:                                   ; preds = %cond.true.632
  %220 = load i32, i32* %w, align 4
  %mul910 = mul nsw i32 0, %220
  %conv911 = sext i32 %mul910 to i64
  %221 = load i64, i64* %width, align 8
  %add912 = add nsw i64 %conv911, %221
  %mul913 = mul nsw i64 0, %add912
  %sub914 = sub nsw i64 %mul913, 1
  %cmp915 = icmp slt i64 %sub914, 0
  br i1 %cmp915, label %cond.true.917, label %cond.false.938

cond.true.917:                                    ; preds = %cond.false.909
  %222 = load i32, i32* %w, align 4
  %mul918 = mul nsw i32 0, %222
  %conv919 = sext i32 %mul918 to i64
  %223 = load i64, i64* %width, align 8
  %add920 = add nsw i64 %conv919, %223
  %mul921 = mul nsw i64 0, %add920
  %add922 = add nsw i64 %mul921, 0
  %neg923 = xor i64 %add922, -1
  %cmp924 = icmp eq i64 %neg923, -1
  %conv925 = zext i1 %cmp924 to i32
  %sub926 = sub nsw i32 0, %conv925
  %conv927 = sext i32 %sub926 to i64
  %224 = load i32, i32* %w, align 4
  %mul928 = mul nsw i32 0, %224
  %conv929 = sext i32 %mul928 to i64
  %225 = load i64, i64* %width, align 8
  %add930 = add nsw i64 %conv929, %225
  %mul931 = mul nsw i64 0, %add930
  %add932 = add nsw i64 %mul931, 1
  %shl933 = shl i64 %add932, 62
  %sub934 = sub nsw i64 %shl933, 1
  %mul935 = mul nsw i64 %sub934, 2
  %add936 = add nsw i64 %mul935, 1
  %sub937 = sub nsw i64 %conv927, %add936
  br label %cond.end.944

cond.false.938:                                   ; preds = %cond.false.909
  %226 = load i32, i32* %w, align 4
  %mul939 = mul nsw i32 0, %226
  %conv940 = sext i32 %mul939 to i64
  %227 = load i64, i64* %width, align 8
  %add941 = add nsw i64 %conv940, %227
  %mul942 = mul nsw i64 0, %add941
  %add943 = add nsw i64 %mul942, 0
  br label %cond.end.944

cond.end.944:                                     ; preds = %cond.false.938, %cond.true.917
  %cond945 = phi i64 [ %sub937, %cond.true.917 ], [ %add943, %cond.false.938 ]
  %cmp946 = icmp slt i64 %cond945, 0
  br i1 %cmp946, label %cond.true.948, label %cond.false.1022

cond.true.948:                                    ; preds = %cond.end.944
  %228 = load i32, i32* %w, align 4
  %cmp949 = icmp slt i32 %228, 0
  br i1 %cmp949, label %cond.true.951, label %cond.false.992

cond.true.951:                                    ; preds = %cond.true.948
  %229 = load i64, i64* %width, align 8
  %230 = load i32, i32* %w, align 4
  %mul952 = mul nsw i32 0, %230
  %conv953 = sext i32 %mul952 to i64
  %231 = load i64, i64* %width, align 8
  %add954 = add nsw i64 %conv953, %231
  %mul955 = mul nsw i64 0, %add954
  %sub956 = sub nsw i64 %mul955, 1
  %cmp957 = icmp slt i64 %sub956, 0
  br i1 %cmp957, label %cond.true.959, label %cond.false.980

cond.true.959:                                    ; preds = %cond.true.951
  %232 = load i32, i32* %w, align 4
  %mul960 = mul nsw i32 0, %232
  %conv961 = sext i32 %mul960 to i64
  %233 = load i64, i64* %width, align 8
  %add962 = add nsw i64 %conv961, %233
  %mul963 = mul nsw i64 0, %add962
  %add964 = add nsw i64 %mul963, 0
  %neg965 = xor i64 %add964, -1
  %cmp966 = icmp eq i64 %neg965, -1
  %conv967 = zext i1 %cmp966 to i32
  %sub968 = sub nsw i32 0, %conv967
  %conv969 = sext i32 %sub968 to i64
  %234 = load i32, i32* %w, align 4
  %mul970 = mul nsw i32 0, %234
  %conv971 = sext i32 %mul970 to i64
  %235 = load i64, i64* %width, align 8
  %add972 = add nsw i64 %conv971, %235
  %mul973 = mul nsw i64 0, %add972
  %add974 = add nsw i64 %mul973, 1
  %shl975 = shl i64 %add974, 62
  %sub976 = sub nsw i64 %shl975, 1
  %mul977 = mul nsw i64 %sub976, 2
  %add978 = add nsw i64 %mul977, 1
  %sub979 = sub nsw i64 %conv969, %add978
  br label %cond.end.986

cond.false.980:                                   ; preds = %cond.true.951
  %236 = load i32, i32* %w, align 4
  %mul981 = mul nsw i32 0, %236
  %conv982 = sext i32 %mul981 to i64
  %237 = load i64, i64* %width, align 8
  %add983 = add nsw i64 %conv982, %237
  %mul984 = mul nsw i64 0, %add983
  %add985 = add nsw i64 %mul984, 0
  br label %cond.end.986

cond.end.986:                                     ; preds = %cond.false.980, %cond.true.959
  %cond987 = phi i64 [ %sub979, %cond.true.959 ], [ %add985, %cond.false.980 ]
  %238 = load i32, i32* %w, align 4
  %conv988 = sext i32 %238 to i64
  %sub989 = sub nsw i64 %cond987, %conv988
  %cmp990 = icmp slt i64 %229, %sub989
  br i1 %cmp990, label %cond.true.1062, label %lor.lhs.false.1045

cond.false.992:                                   ; preds = %cond.true.948
  %239 = load i32, i32* %w, align 4
  %mul993 = mul nsw i32 0, %239
  %conv994 = sext i32 %mul993 to i64
  %240 = load i64, i64* %width, align 8
  %add995 = add nsw i64 %conv994, %240
  %mul996 = mul nsw i64 0, %add995
  %sub997 = sub nsw i64 %mul996, 1
  %cmp998 = icmp slt i64 %sub997, 0
  br i1 %cmp998, label %cond.true.1000, label %cond.false.1010

cond.true.1000:                                   ; preds = %cond.false.992
  %241 = load i32, i32* %w, align 4
  %mul1001 = mul nsw i32 0, %241
  %conv1002 = sext i32 %mul1001 to i64
  %242 = load i64, i64* %width, align 8
  %add1003 = add nsw i64 %conv1002, %242
  %mul1004 = mul nsw i64 0, %add1003
  %add1005 = add nsw i64 %mul1004, 1
  %shl1006 = shl i64 %add1005, 62
  %sub1007 = sub nsw i64 %shl1006, 1
  %mul1008 = mul nsw i64 %sub1007, 2
  %add1009 = add nsw i64 %mul1008, 1
  br label %cond.end.1016

cond.false.1010:                                  ; preds = %cond.false.992
  %243 = load i32, i32* %w, align 4
  %mul1011 = mul nsw i32 0, %243
  %conv1012 = sext i32 %mul1011 to i64
  %244 = load i64, i64* %width, align 8
  %add1013 = add nsw i64 %conv1012, %244
  %mul1014 = mul nsw i64 0, %add1013
  %sub1015 = sub nsw i64 %mul1014, 1
  br label %cond.end.1016

cond.end.1016:                                    ; preds = %cond.false.1010, %cond.true.1000
  %cond1017 = phi i64 [ %add1009, %cond.true.1000 ], [ %sub1015, %cond.false.1010 ]
  %245 = load i32, i32* %w, align 4
  %conv1018 = sext i32 %245 to i64
  %sub1019 = sub nsw i64 %cond1017, %conv1018
  %246 = load i64, i64* %width, align 8
  %cmp1020 = icmp slt i64 %sub1019, %246
  br i1 %cmp1020, label %cond.true.1062, label %lor.lhs.false.1045

cond.false.1022:                                  ; preds = %cond.end.944
  %247 = load i64, i64* %width, align 8
  %cmp1023 = icmp slt i64 %247, 0
  br i1 %cmp1023, label %cond.true.1025, label %cond.false.1031

cond.true.1025:                                   ; preds = %cond.false.1022
  %248 = load i32, i32* %w, align 4
  %conv1026 = sext i32 %248 to i64
  %249 = load i64, i64* %width, align 8
  %250 = load i32, i32* %w, align 4
  %conv1027 = sext i32 %250 to i64
  %add1028 = add nsw i64 %249, %conv1027
  %cmp1029 = icmp sle i64 %conv1026, %add1028
  br i1 %cmp1029, label %cond.true.1062, label %lor.lhs.false.1045

cond.false.1031:                                  ; preds = %cond.false.1022
  %251 = load i32, i32* %w, align 4
  %cmp1032 = icmp slt i32 %251, 0
  br i1 %cmp1032, label %cond.true.1034, label %cond.false.1039

cond.true.1034:                                   ; preds = %cond.false.1031
  %252 = load i64, i64* %width, align 8
  %253 = load i64, i64* %width, align 8
  %254 = load i32, i32* %w, align 4
  %conv1035 = sext i32 %254 to i64
  %add1036 = add nsw i64 %253, %conv1035
  %cmp1037 = icmp sle i64 %252, %add1036
  br i1 %cmp1037, label %cond.true.1062, label %lor.lhs.false.1045

cond.false.1039:                                  ; preds = %cond.false.1031
  %255 = load i64, i64* %width, align 8
  %256 = load i32, i32* %w, align 4
  %conv1040 = sext i32 %256 to i64
  %add1041 = add nsw i64 %255, %conv1040
  %257 = load i32, i32* %w, align 4
  %conv1042 = sext i32 %257 to i64
  %cmp1043 = icmp slt i64 %add1041, %conv1042
  br i1 %cmp1043, label %cond.true.1062, label %lor.lhs.false.1045

lor.lhs.false.1045:                               ; preds = %cond.false.1039, %cond.true.1034, %cond.true.1025, %cond.end.1016, %cond.end.986
  %258 = load i64, i64* %width, align 8
  %259 = load i32, i32* %w, align 4
  %conv1046 = sext i32 %259 to i64
  %add1047 = add nsw i64 %258, %conv1046
  %mul1048 = mul nsw i64 0, %add1047
  %sub1049 = sub nsw i64 %mul1048, 1
  %cmp1050 = icmp slt i64 %sub1049, 0
  br i1 %cmp1050, label %land.lhs.true.1052, label %lor.lhs.false.1057

land.lhs.true.1052:                               ; preds = %lor.lhs.false.1045
  %260 = load i64, i64* %width, align 8
  %261 = load i32, i32* %w, align 4
  %conv1053 = sext i32 %261 to i64
  %add1054 = add nsw i64 %260, %conv1053
  %cmp1055 = icmp slt i64 %add1054, -32768
  br i1 %cmp1055, label %cond.true.1062, label %lor.lhs.false.1057

lor.lhs.false.1057:                               ; preds = %land.lhs.true.1052, %lor.lhs.false.1045
  %262 = load i64, i64* %width, align 8
  %263 = load i32, i32* %w, align 4
  %conv1058 = sext i32 %263 to i64
  %add1059 = add nsw i64 %262, %conv1058
  %cmp1060 = icmp slt i64 32767, %add1059
  br i1 %cmp1060, label %cond.true.1062, label %cond.false.1091

cond.true.1062:                                   ; preds = %lor.lhs.false.1057, %land.lhs.true.1052, %cond.false.1039, %cond.true.1034, %cond.true.1025, %cond.end.1016, %cond.end.986
  %264 = load i64, i64* %width, align 8
  %conv1063 = trunc i64 %264 to i16
  %conv1064 = zext i16 %conv1063 to i32
  %265 = load i32, i32* %w, align 4
  %conv1065 = trunc i32 %265 to i16
  %conv1066 = zext i16 %conv1065 to i32
  %add1067 = add nsw i32 %conv1064, %conv1066
  %cmp1068 = icmp sle i32 %add1067, 32767
  br i1 %cmp1068, label %cond.true.1070, label %cond.false.1078

cond.true.1070:                                   ; preds = %cond.true.1062
  %266 = load i64, i64* %width, align 8
  %conv1071 = trunc i64 %266 to i16
  %conv1072 = zext i16 %conv1071 to i32
  %267 = load i32, i32* %w, align 4
  %conv1073 = trunc i32 %267 to i16
  %conv1074 = zext i16 %conv1073 to i32
  %add1075 = add nsw i32 %conv1072, %conv1074
  %conv1076 = trunc i32 %add1075 to i16
  %conv1077 = sext i16 %conv1076 to i32
  br label %cond.end.1088

cond.false.1078:                                  ; preds = %cond.true.1062
  %268 = load i64, i64* %width, align 8
  %conv1079 = trunc i64 %268 to i16
  %conv1080 = zext i16 %conv1079 to i32
  %269 = load i32, i32* %w, align 4
  %conv1081 = trunc i32 %269 to i16
  %conv1082 = zext i16 %conv1081 to i32
  %add1083 = add nsw i32 %conv1080, %conv1082
  %sub1084 = sub nsw i32 %add1083, -32768
  %conv1085 = trunc i32 %sub1084 to i16
  %conv1086 = sext i16 %conv1085 to i32
  %add1087 = add nsw i32 %conv1086, -32768
  br label %cond.end.1088

cond.end.1088:                                    ; preds = %cond.false.1078, %cond.true.1070
  %cond1089 = phi i32 [ %conv1077, %cond.true.1070 ], [ %add1087, %cond.false.1078 ]
  %conv1090 = sext i32 %cond1089 to i64
  store i64 %conv1090, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.1091:                                  ; preds = %lor.lhs.false.1057
  %270 = load i64, i64* %width, align 8
  %conv1092 = trunc i64 %270 to i16
  %conv1093 = zext i16 %conv1092 to i32
  %271 = load i32, i32* %w, align 4
  %conv1094 = trunc i32 %271 to i16
  %conv1095 = zext i16 %conv1094 to i32
  %add1096 = add nsw i32 %conv1093, %conv1095
  %cmp1097 = icmp sle i32 %add1096, 32767
  br i1 %cmp1097, label %cond.true.1099, label %cond.false.1107

cond.true.1099:                                   ; preds = %cond.false.1091
  %272 = load i64, i64* %width, align 8
  %conv1100 = trunc i64 %272 to i16
  %conv1101 = zext i16 %conv1100 to i32
  %273 = load i32, i32* %w, align 4
  %conv1102 = trunc i32 %273 to i16
  %conv1103 = zext i16 %conv1102 to i32
  %add1104 = add nsw i32 %conv1101, %conv1103
  %conv1105 = trunc i32 %add1104 to i16
  %conv1106 = sext i16 %conv1105 to i32
  br label %cond.end.1117

cond.false.1107:                                  ; preds = %cond.false.1091
  %274 = load i64, i64* %width, align 8
  %conv1108 = trunc i64 %274 to i16
  %conv1109 = zext i16 %conv1108 to i32
  %275 = load i32, i32* %w, align 4
  %conv1110 = trunc i32 %275 to i16
  %conv1111 = zext i16 %conv1110 to i32
  %add1112 = add nsw i32 %conv1109, %conv1111
  %sub1113 = sub nsw i32 %add1112, -32768
  %conv1114 = trunc i32 %sub1113 to i16
  %conv1115 = sext i16 %conv1114 to i32
  %add1116 = add nsw i32 %conv1115, -32768
  br label %cond.end.1117

cond.end.1117:                                    ; preds = %cond.false.1107, %cond.true.1099
  %cond1118 = phi i32 [ %conv1106, %cond.true.1099 ], [ %add1116, %cond.false.1107 ]
  %conv1119 = sext i32 %cond1118 to i64
  store i64 %conv1119, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.1120:                                  ; preds = %cond.false.631
  br i1 false, label %cond.true.1121, label %cond.false.1490

cond.true.1121:                                   ; preds = %cond.false.1120
  br i1 false, label %cond.true.1122, label %cond.false.1305

cond.true.1122:                                   ; preds = %cond.true.1121
  %276 = load i32, i32* %w, align 4
  %mul1123 = mul nsw i32 0, %276
  %277 = load i64, i64* %width, align 8
  %conv1124 = trunc i64 %277 to i32
  %add1125 = add nsw i32 %mul1123, %conv1124
  %mul1126 = mul nsw i32 0, %add1125
  %sub1127 = sub nsw i32 %mul1126, 1
  %cmp1128 = icmp slt i32 %sub1127, 0
  br i1 %cmp1128, label %cond.true.1130, label %cond.false.1150

cond.true.1130:                                   ; preds = %cond.true.1122
  %278 = load i32, i32* %w, align 4
  %mul1131 = mul nsw i32 0, %278
  %279 = load i64, i64* %width, align 8
  %conv1132 = trunc i64 %279 to i32
  %add1133 = add nsw i32 %mul1131, %conv1132
  %mul1134 = mul nsw i32 0, %add1133
  %add1135 = add nsw i32 %mul1134, 0
  %neg1136 = xor i32 %add1135, -1
  %cmp1137 = icmp eq i32 %neg1136, -1
  %conv1138 = zext i1 %cmp1137 to i32
  %sub1139 = sub nsw i32 0, %conv1138
  %280 = load i32, i32* %w, align 4
  %mul1140 = mul nsw i32 0, %280
  %281 = load i64, i64* %width, align 8
  %conv1141 = trunc i64 %281 to i32
  %add1142 = add nsw i32 %mul1140, %conv1141
  %mul1143 = mul nsw i32 0, %add1142
  %add1144 = add nsw i32 %mul1143, 1
  %shl1145 = shl i32 %add1144, 30
  %sub1146 = sub nsw i32 %shl1145, 1
  %mul1147 = mul nsw i32 %sub1146, 2
  %add1148 = add nsw i32 %mul1147, 1
  %sub1149 = sub nsw i32 %sub1139, %add1148
  br label %cond.end.1156

cond.false.1150:                                  ; preds = %cond.true.1122
  %282 = load i32, i32* %w, align 4
  %mul1151 = mul nsw i32 0, %282
  %283 = load i64, i64* %width, align 8
  %conv1152 = trunc i64 %283 to i32
  %add1153 = add nsw i32 %mul1151, %conv1152
  %mul1154 = mul nsw i32 0, %add1153
  %add1155 = add nsw i32 %mul1154, 0
  br label %cond.end.1156

cond.end.1156:                                    ; preds = %cond.false.1150, %cond.true.1130
  %cond1157 = phi i32 [ %sub1149, %cond.true.1130 ], [ %add1155, %cond.false.1150 ]
  %cmp1158 = icmp slt i32 %cond1157, 0
  br i1 %cmp1158, label %cond.true.1160, label %cond.false.1233

cond.true.1160:                                   ; preds = %cond.end.1156
  %284 = load i32, i32* %w, align 4
  %cmp1161 = icmp slt i32 %284, 0
  br i1 %cmp1161, label %cond.true.1163, label %cond.false.1203

cond.true.1163:                                   ; preds = %cond.true.1160
  %285 = load i64, i64* %width, align 8
  %conv1164 = trunc i64 %285 to i32
  %286 = load i32, i32* %w, align 4
  %mul1165 = mul nsw i32 0, %286
  %287 = load i64, i64* %width, align 8
  %conv1166 = trunc i64 %287 to i32
  %add1167 = add nsw i32 %mul1165, %conv1166
  %mul1168 = mul nsw i32 0, %add1167
  %sub1169 = sub nsw i32 %mul1168, 1
  %cmp1170 = icmp slt i32 %sub1169, 0
  br i1 %cmp1170, label %cond.true.1172, label %cond.false.1192

cond.true.1172:                                   ; preds = %cond.true.1163
  %288 = load i32, i32* %w, align 4
  %mul1173 = mul nsw i32 0, %288
  %289 = load i64, i64* %width, align 8
  %conv1174 = trunc i64 %289 to i32
  %add1175 = add nsw i32 %mul1173, %conv1174
  %mul1176 = mul nsw i32 0, %add1175
  %add1177 = add nsw i32 %mul1176, 0
  %neg1178 = xor i32 %add1177, -1
  %cmp1179 = icmp eq i32 %neg1178, -1
  %conv1180 = zext i1 %cmp1179 to i32
  %sub1181 = sub nsw i32 0, %conv1180
  %290 = load i32, i32* %w, align 4
  %mul1182 = mul nsw i32 0, %290
  %291 = load i64, i64* %width, align 8
  %conv1183 = trunc i64 %291 to i32
  %add1184 = add nsw i32 %mul1182, %conv1183
  %mul1185 = mul nsw i32 0, %add1184
  %add1186 = add nsw i32 %mul1185, 1
  %shl1187 = shl i32 %add1186, 30
  %sub1188 = sub nsw i32 %shl1187, 1
  %mul1189 = mul nsw i32 %sub1188, 2
  %add1190 = add nsw i32 %mul1189, 1
  %sub1191 = sub nsw i32 %sub1181, %add1190
  br label %cond.end.1198

cond.false.1192:                                  ; preds = %cond.true.1163
  %292 = load i32, i32* %w, align 4
  %mul1193 = mul nsw i32 0, %292
  %293 = load i64, i64* %width, align 8
  %conv1194 = trunc i64 %293 to i32
  %add1195 = add nsw i32 %mul1193, %conv1194
  %mul1196 = mul nsw i32 0, %add1195
  %add1197 = add nsw i32 %mul1196, 0
  br label %cond.end.1198

cond.end.1198:                                    ; preds = %cond.false.1192, %cond.true.1172
  %cond1199 = phi i32 [ %sub1191, %cond.true.1172 ], [ %add1197, %cond.false.1192 ]
  %294 = load i32, i32* %w, align 4
  %sub1200 = sub nsw i32 %cond1199, %294
  %cmp1201 = icmp slt i32 %conv1164, %sub1200
  br i1 %cmp1201, label %cond.true.1273, label %lor.lhs.false.1256

cond.false.1203:                                  ; preds = %cond.true.1160
  %295 = load i32, i32* %w, align 4
  %mul1204 = mul nsw i32 0, %295
  %296 = load i64, i64* %width, align 8
  %conv1205 = trunc i64 %296 to i32
  %add1206 = add nsw i32 %mul1204, %conv1205
  %mul1207 = mul nsw i32 0, %add1206
  %sub1208 = sub nsw i32 %mul1207, 1
  %cmp1209 = icmp slt i32 %sub1208, 0
  br i1 %cmp1209, label %cond.true.1211, label %cond.false.1221

cond.true.1211:                                   ; preds = %cond.false.1203
  %297 = load i32, i32* %w, align 4
  %mul1212 = mul nsw i32 0, %297
  %298 = load i64, i64* %width, align 8
  %conv1213 = trunc i64 %298 to i32
  %add1214 = add nsw i32 %mul1212, %conv1213
  %mul1215 = mul nsw i32 0, %add1214
  %add1216 = add nsw i32 %mul1215, 1
  %shl1217 = shl i32 %add1216, 30
  %sub1218 = sub nsw i32 %shl1217, 1
  %mul1219 = mul nsw i32 %sub1218, 2
  %add1220 = add nsw i32 %mul1219, 1
  br label %cond.end.1227

cond.false.1221:                                  ; preds = %cond.false.1203
  %299 = load i32, i32* %w, align 4
  %mul1222 = mul nsw i32 0, %299
  %300 = load i64, i64* %width, align 8
  %conv1223 = trunc i64 %300 to i32
  %add1224 = add nsw i32 %mul1222, %conv1223
  %mul1225 = mul nsw i32 0, %add1224
  %sub1226 = sub nsw i32 %mul1225, 1
  br label %cond.end.1227

cond.end.1227:                                    ; preds = %cond.false.1221, %cond.true.1211
  %cond1228 = phi i32 [ %add1220, %cond.true.1211 ], [ %sub1226, %cond.false.1221 ]
  %301 = load i32, i32* %w, align 4
  %sub1229 = sub nsw i32 %cond1228, %301
  %302 = load i64, i64* %width, align 8
  %conv1230 = trunc i64 %302 to i32
  %cmp1231 = icmp slt i32 %sub1229, %conv1230
  br i1 %cmp1231, label %cond.true.1273, label %lor.lhs.false.1256

cond.false.1233:                                  ; preds = %cond.end.1156
  %303 = load i64, i64* %width, align 8
  %conv1234 = trunc i64 %303 to i32
  %cmp1235 = icmp slt i32 %conv1234, 0
  br i1 %cmp1235, label %cond.true.1237, label %cond.false.1242

cond.true.1237:                                   ; preds = %cond.false.1233
  %304 = load i32, i32* %w, align 4
  %305 = load i64, i64* %width, align 8
  %conv1238 = trunc i64 %305 to i32
  %306 = load i32, i32* %w, align 4
  %add1239 = add nsw i32 %conv1238, %306
  %cmp1240 = icmp sle i32 %304, %add1239
  br i1 %cmp1240, label %cond.true.1273, label %lor.lhs.false.1256

cond.false.1242:                                  ; preds = %cond.false.1233
  %307 = load i32, i32* %w, align 4
  %cmp1243 = icmp slt i32 %307, 0
  br i1 %cmp1243, label %cond.true.1245, label %cond.false.1251

cond.true.1245:                                   ; preds = %cond.false.1242
  %308 = load i64, i64* %width, align 8
  %conv1246 = trunc i64 %308 to i32
  %309 = load i64, i64* %width, align 8
  %conv1247 = trunc i64 %309 to i32
  %310 = load i32, i32* %w, align 4
  %add1248 = add nsw i32 %conv1247, %310
  %cmp1249 = icmp sle i32 %conv1246, %add1248
  br i1 %cmp1249, label %cond.true.1273, label %lor.lhs.false.1256

cond.false.1251:                                  ; preds = %cond.false.1242
  %311 = load i64, i64* %width, align 8
  %conv1252 = trunc i64 %311 to i32
  %312 = load i32, i32* %w, align 4
  %add1253 = add nsw i32 %conv1252, %312
  %313 = load i32, i32* %w, align 4
  %cmp1254 = icmp slt i32 %add1253, %313
  br i1 %cmp1254, label %cond.true.1273, label %lor.lhs.false.1256

lor.lhs.false.1256:                               ; preds = %cond.false.1251, %cond.true.1245, %cond.true.1237, %cond.end.1227, %cond.end.1198
  %314 = load i64, i64* %width, align 8
  %conv1257 = trunc i64 %314 to i32
  %315 = load i32, i32* %w, align 4
  %add1258 = add nsw i32 %conv1257, %315
  %mul1259 = mul nsw i32 0, %add1258
  %sub1260 = sub nsw i32 %mul1259, 1
  %cmp1261 = icmp slt i32 %sub1260, 0
  br i1 %cmp1261, label %land.lhs.true.1263, label %lor.lhs.false.1268

land.lhs.true.1263:                               ; preds = %lor.lhs.false.1256
  %316 = load i64, i64* %width, align 8
  %conv1264 = trunc i64 %316 to i32
  %317 = load i32, i32* %w, align 4
  %add1265 = add nsw i32 %conv1264, %317
  %cmp1266 = icmp slt i32 %add1265, -2147483648
  br i1 %cmp1266, label %cond.true.1273, label %lor.lhs.false.1268

lor.lhs.false.1268:                               ; preds = %land.lhs.true.1263, %lor.lhs.false.1256
  %318 = load i64, i64* %width, align 8
  %conv1269 = trunc i64 %318 to i32
  %319 = load i32, i32* %w, align 4
  %add1270 = add nsw i32 %conv1269, %319
  %cmp1271 = icmp slt i32 2147483647, %add1270
  br i1 %cmp1271, label %cond.true.1273, label %cond.false.1289

cond.true.1273:                                   ; preds = %lor.lhs.false.1268, %land.lhs.true.1263, %cond.false.1251, %cond.true.1245, %cond.true.1237, %cond.end.1227, %cond.end.1198
  %320 = load i64, i64* %width, align 8
  %conv1274 = trunc i64 %320 to i32
  %321 = load i32, i32* %w, align 4
  %add1275 = add i32 %conv1274, %321
  %cmp1276 = icmp ule i32 %add1275, 2147483647
  br i1 %cmp1276, label %cond.true.1278, label %cond.false.1281

cond.true.1278:                                   ; preds = %cond.true.1273
  %322 = load i64, i64* %width, align 8
  %conv1279 = trunc i64 %322 to i32
  %323 = load i32, i32* %w, align 4
  %add1280 = add i32 %conv1279, %323
  br label %cond.end.1286

cond.false.1281:                                  ; preds = %cond.true.1273
  %324 = load i64, i64* %width, align 8
  %conv1282 = trunc i64 %324 to i32
  %325 = load i32, i32* %w, align 4
  %add1283 = add i32 %conv1282, %325
  %sub1284 = sub i32 %add1283, -2147483648
  %add1285 = add nsw i32 %sub1284, -2147483648
  br label %cond.end.1286

cond.end.1286:                                    ; preds = %cond.false.1281, %cond.true.1278
  %cond1287 = phi i32 [ %add1280, %cond.true.1278 ], [ %add1285, %cond.false.1281 ]
  %conv1288 = sext i32 %cond1287 to i64
  store i64 %conv1288, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.1289:                                  ; preds = %lor.lhs.false.1268
  %326 = load i64, i64* %width, align 8
  %conv1290 = trunc i64 %326 to i32
  %327 = load i32, i32* %w, align 4
  %add1291 = add i32 %conv1290, %327
  %cmp1292 = icmp ule i32 %add1291, 2147483647
  br i1 %cmp1292, label %cond.true.1294, label %cond.false.1297

cond.true.1294:                                   ; preds = %cond.false.1289
  %328 = load i64, i64* %width, align 8
  %conv1295 = trunc i64 %328 to i32
  %329 = load i32, i32* %w, align 4
  %add1296 = add i32 %conv1295, %329
  br label %cond.end.1302

cond.false.1297:                                  ; preds = %cond.false.1289
  %330 = load i64, i64* %width, align 8
  %conv1298 = trunc i64 %330 to i32
  %331 = load i32, i32* %w, align 4
  %add1299 = add i32 %conv1298, %331
  %sub1300 = sub i32 %add1299, -2147483648
  %add1301 = add nsw i32 %sub1300, -2147483648
  br label %cond.end.1302

cond.end.1302:                                    ; preds = %cond.false.1297, %cond.true.1294
  %cond1303 = phi i32 [ %add1296, %cond.true.1294 ], [ %add1301, %cond.false.1297 ]
  %conv1304 = sext i32 %cond1303 to i64
  store i64 %conv1304, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.1305:                                  ; preds = %cond.true.1121
  %332 = load i32, i32* %w, align 4
  %mul1306 = mul nsw i32 0, %332
  %conv1307 = sext i32 %mul1306 to i64
  %333 = load i64, i64* %width, align 8
  %add1308 = add nsw i64 %conv1307, %333
  %mul1309 = mul nsw i64 0, %add1308
  %sub1310 = sub nsw i64 %mul1309, 1
  %cmp1311 = icmp slt i64 %sub1310, 0
  br i1 %cmp1311, label %cond.true.1313, label %cond.false.1334

cond.true.1313:                                   ; preds = %cond.false.1305
  %334 = load i32, i32* %w, align 4
  %mul1314 = mul nsw i32 0, %334
  %conv1315 = sext i32 %mul1314 to i64
  %335 = load i64, i64* %width, align 8
  %add1316 = add nsw i64 %conv1315, %335
  %mul1317 = mul nsw i64 0, %add1316
  %add1318 = add nsw i64 %mul1317, 0
  %neg1319 = xor i64 %add1318, -1
  %cmp1320 = icmp eq i64 %neg1319, -1
  %conv1321 = zext i1 %cmp1320 to i32
  %sub1322 = sub nsw i32 0, %conv1321
  %conv1323 = sext i32 %sub1322 to i64
  %336 = load i32, i32* %w, align 4
  %mul1324 = mul nsw i32 0, %336
  %conv1325 = sext i32 %mul1324 to i64
  %337 = load i64, i64* %width, align 8
  %add1326 = add nsw i64 %conv1325, %337
  %mul1327 = mul nsw i64 0, %add1326
  %add1328 = add nsw i64 %mul1327, 1
  %shl1329 = shl i64 %add1328, 62
  %sub1330 = sub nsw i64 %shl1329, 1
  %mul1331 = mul nsw i64 %sub1330, 2
  %add1332 = add nsw i64 %mul1331, 1
  %sub1333 = sub nsw i64 %conv1323, %add1332
  br label %cond.end.1340

cond.false.1334:                                  ; preds = %cond.false.1305
  %338 = load i32, i32* %w, align 4
  %mul1335 = mul nsw i32 0, %338
  %conv1336 = sext i32 %mul1335 to i64
  %339 = load i64, i64* %width, align 8
  %add1337 = add nsw i64 %conv1336, %339
  %mul1338 = mul nsw i64 0, %add1337
  %add1339 = add nsw i64 %mul1338, 0
  br label %cond.end.1340

cond.end.1340:                                    ; preds = %cond.false.1334, %cond.true.1313
  %cond1341 = phi i64 [ %sub1333, %cond.true.1313 ], [ %add1339, %cond.false.1334 ]
  %cmp1342 = icmp slt i64 %cond1341, 0
  br i1 %cmp1342, label %cond.true.1344, label %cond.false.1418

cond.true.1344:                                   ; preds = %cond.end.1340
  %340 = load i32, i32* %w, align 4
  %cmp1345 = icmp slt i32 %340, 0
  br i1 %cmp1345, label %cond.true.1347, label %cond.false.1388

cond.true.1347:                                   ; preds = %cond.true.1344
  %341 = load i64, i64* %width, align 8
  %342 = load i32, i32* %w, align 4
  %mul1348 = mul nsw i32 0, %342
  %conv1349 = sext i32 %mul1348 to i64
  %343 = load i64, i64* %width, align 8
  %add1350 = add nsw i64 %conv1349, %343
  %mul1351 = mul nsw i64 0, %add1350
  %sub1352 = sub nsw i64 %mul1351, 1
  %cmp1353 = icmp slt i64 %sub1352, 0
  br i1 %cmp1353, label %cond.true.1355, label %cond.false.1376

cond.true.1355:                                   ; preds = %cond.true.1347
  %344 = load i32, i32* %w, align 4
  %mul1356 = mul nsw i32 0, %344
  %conv1357 = sext i32 %mul1356 to i64
  %345 = load i64, i64* %width, align 8
  %add1358 = add nsw i64 %conv1357, %345
  %mul1359 = mul nsw i64 0, %add1358
  %add1360 = add nsw i64 %mul1359, 0
  %neg1361 = xor i64 %add1360, -1
  %cmp1362 = icmp eq i64 %neg1361, -1
  %conv1363 = zext i1 %cmp1362 to i32
  %sub1364 = sub nsw i32 0, %conv1363
  %conv1365 = sext i32 %sub1364 to i64
  %346 = load i32, i32* %w, align 4
  %mul1366 = mul nsw i32 0, %346
  %conv1367 = sext i32 %mul1366 to i64
  %347 = load i64, i64* %width, align 8
  %add1368 = add nsw i64 %conv1367, %347
  %mul1369 = mul nsw i64 0, %add1368
  %add1370 = add nsw i64 %mul1369, 1
  %shl1371 = shl i64 %add1370, 62
  %sub1372 = sub nsw i64 %shl1371, 1
  %mul1373 = mul nsw i64 %sub1372, 2
  %add1374 = add nsw i64 %mul1373, 1
  %sub1375 = sub nsw i64 %conv1365, %add1374
  br label %cond.end.1382

cond.false.1376:                                  ; preds = %cond.true.1347
  %348 = load i32, i32* %w, align 4
  %mul1377 = mul nsw i32 0, %348
  %conv1378 = sext i32 %mul1377 to i64
  %349 = load i64, i64* %width, align 8
  %add1379 = add nsw i64 %conv1378, %349
  %mul1380 = mul nsw i64 0, %add1379
  %add1381 = add nsw i64 %mul1380, 0
  br label %cond.end.1382

cond.end.1382:                                    ; preds = %cond.false.1376, %cond.true.1355
  %cond1383 = phi i64 [ %sub1375, %cond.true.1355 ], [ %add1381, %cond.false.1376 ]
  %350 = load i32, i32* %w, align 4
  %conv1384 = sext i32 %350 to i64
  %sub1385 = sub nsw i64 %cond1383, %conv1384
  %cmp1386 = icmp slt i64 %341, %sub1385
  br i1 %cmp1386, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1388:                                  ; preds = %cond.true.1344
  %351 = load i32, i32* %w, align 4
  %mul1389 = mul nsw i32 0, %351
  %conv1390 = sext i32 %mul1389 to i64
  %352 = load i64, i64* %width, align 8
  %add1391 = add nsw i64 %conv1390, %352
  %mul1392 = mul nsw i64 0, %add1391
  %sub1393 = sub nsw i64 %mul1392, 1
  %cmp1394 = icmp slt i64 %sub1393, 0
  br i1 %cmp1394, label %cond.true.1396, label %cond.false.1406

cond.true.1396:                                   ; preds = %cond.false.1388
  %353 = load i32, i32* %w, align 4
  %mul1397 = mul nsw i32 0, %353
  %conv1398 = sext i32 %mul1397 to i64
  %354 = load i64, i64* %width, align 8
  %add1399 = add nsw i64 %conv1398, %354
  %mul1400 = mul nsw i64 0, %add1399
  %add1401 = add nsw i64 %mul1400, 1
  %shl1402 = shl i64 %add1401, 62
  %sub1403 = sub nsw i64 %shl1402, 1
  %mul1404 = mul nsw i64 %sub1403, 2
  %add1405 = add nsw i64 %mul1404, 1
  br label %cond.end.1412

cond.false.1406:                                  ; preds = %cond.false.1388
  %355 = load i32, i32* %w, align 4
  %mul1407 = mul nsw i32 0, %355
  %conv1408 = sext i32 %mul1407 to i64
  %356 = load i64, i64* %width, align 8
  %add1409 = add nsw i64 %conv1408, %356
  %mul1410 = mul nsw i64 0, %add1409
  %sub1411 = sub nsw i64 %mul1410, 1
  br label %cond.end.1412

cond.end.1412:                                    ; preds = %cond.false.1406, %cond.true.1396
  %cond1413 = phi i64 [ %add1405, %cond.true.1396 ], [ %sub1411, %cond.false.1406 ]
  %357 = load i32, i32* %w, align 4
  %conv1414 = sext i32 %357 to i64
  %sub1415 = sub nsw i64 %cond1413, %conv1414
  %358 = load i64, i64* %width, align 8
  %cmp1416 = icmp slt i64 %sub1415, %358
  br i1 %cmp1416, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1418:                                  ; preds = %cond.end.1340
  %359 = load i64, i64* %width, align 8
  %cmp1419 = icmp slt i64 %359, 0
  br i1 %cmp1419, label %cond.true.1421, label %cond.false.1427

cond.true.1421:                                   ; preds = %cond.false.1418
  %360 = load i32, i32* %w, align 4
  %conv1422 = sext i32 %360 to i64
  %361 = load i64, i64* %width, align 8
  %362 = load i32, i32* %w, align 4
  %conv1423 = sext i32 %362 to i64
  %add1424 = add nsw i64 %361, %conv1423
  %cmp1425 = icmp sle i64 %conv1422, %add1424
  br i1 %cmp1425, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1427:                                  ; preds = %cond.false.1418
  %363 = load i32, i32* %w, align 4
  %cmp1428 = icmp slt i32 %363, 0
  br i1 %cmp1428, label %cond.true.1430, label %cond.false.1435

cond.true.1430:                                   ; preds = %cond.false.1427
  %364 = load i64, i64* %width, align 8
  %365 = load i64, i64* %width, align 8
  %366 = load i32, i32* %w, align 4
  %conv1431 = sext i32 %366 to i64
  %add1432 = add nsw i64 %365, %conv1431
  %cmp1433 = icmp sle i64 %364, %add1432
  br i1 %cmp1433, label %cond.true.1458, label %lor.lhs.false.1441

cond.false.1435:                                  ; preds = %cond.false.1427
  %367 = load i64, i64* %width, align 8
  %368 = load i32, i32* %w, align 4
  %conv1436 = sext i32 %368 to i64
  %add1437 = add nsw i64 %367, %conv1436
  %369 = load i32, i32* %w, align 4
  %conv1438 = sext i32 %369 to i64
  %cmp1439 = icmp slt i64 %add1437, %conv1438
  br i1 %cmp1439, label %cond.true.1458, label %lor.lhs.false.1441

lor.lhs.false.1441:                               ; preds = %cond.false.1435, %cond.true.1430, %cond.true.1421, %cond.end.1412, %cond.end.1382
  %370 = load i64, i64* %width, align 8
  %371 = load i32, i32* %w, align 4
  %conv1442 = sext i32 %371 to i64
  %add1443 = add nsw i64 %370, %conv1442
  %mul1444 = mul nsw i64 0, %add1443
  %sub1445 = sub nsw i64 %mul1444, 1
  %cmp1446 = icmp slt i64 %sub1445, 0
  br i1 %cmp1446, label %land.lhs.true.1448, label %lor.lhs.false.1453

land.lhs.true.1448:                               ; preds = %lor.lhs.false.1441
  %372 = load i64, i64* %width, align 8
  %373 = load i32, i32* %w, align 4
  %conv1449 = sext i32 %373 to i64
  %add1450 = add nsw i64 %372, %conv1449
  %cmp1451 = icmp slt i64 %add1450, -2147483648
  br i1 %cmp1451, label %cond.true.1458, label %lor.lhs.false.1453

lor.lhs.false.1453:                               ; preds = %land.lhs.true.1448, %lor.lhs.false.1441
  %374 = load i64, i64* %width, align 8
  %375 = load i32, i32* %w, align 4
  %conv1454 = sext i32 %375 to i64
  %add1455 = add nsw i64 %374, %conv1454
  %cmp1456 = icmp slt i64 2147483647, %add1455
  br i1 %cmp1456, label %cond.true.1458, label %cond.false.1474

cond.true.1458:                                   ; preds = %lor.lhs.false.1453, %land.lhs.true.1448, %cond.false.1435, %cond.true.1430, %cond.true.1421, %cond.end.1412, %cond.end.1382
  %376 = load i64, i64* %width, align 8
  %conv1459 = trunc i64 %376 to i32
  %377 = load i32, i32* %w, align 4
  %add1460 = add i32 %conv1459, %377
  %cmp1461 = icmp ule i32 %add1460, 2147483647
  br i1 %cmp1461, label %cond.true.1463, label %cond.false.1466

cond.true.1463:                                   ; preds = %cond.true.1458
  %378 = load i64, i64* %width, align 8
  %conv1464 = trunc i64 %378 to i32
  %379 = load i32, i32* %w, align 4
  %add1465 = add i32 %conv1464, %379
  br label %cond.end.1471

cond.false.1466:                                  ; preds = %cond.true.1458
  %380 = load i64, i64* %width, align 8
  %conv1467 = trunc i64 %380 to i32
  %381 = load i32, i32* %w, align 4
  %add1468 = add i32 %conv1467, %381
  %sub1469 = sub i32 %add1468, -2147483648
  %add1470 = add nsw i32 %sub1469, -2147483648
  br label %cond.end.1471

cond.end.1471:                                    ; preds = %cond.false.1466, %cond.true.1463
  %cond1472 = phi i32 [ %add1465, %cond.true.1463 ], [ %add1470, %cond.false.1466 ]
  %conv1473 = sext i32 %cond1472 to i64
  store i64 %conv1473, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.1474:                                  ; preds = %lor.lhs.false.1453
  %382 = load i64, i64* %width, align 8
  %conv1475 = trunc i64 %382 to i32
  %383 = load i32, i32* %w, align 4
  %add1476 = add i32 %conv1475, %383
  %cmp1477 = icmp ule i32 %add1476, 2147483647
  br i1 %cmp1477, label %cond.true.1479, label %cond.false.1482

cond.true.1479:                                   ; preds = %cond.false.1474
  %384 = load i64, i64* %width, align 8
  %conv1480 = trunc i64 %384 to i32
  %385 = load i32, i32* %w, align 4
  %add1481 = add i32 %conv1480, %385
  br label %cond.end.1487

cond.false.1482:                                  ; preds = %cond.false.1474
  %386 = load i64, i64* %width, align 8
  %conv1483 = trunc i64 %386 to i32
  %387 = load i32, i32* %w, align 4
  %add1484 = add i32 %conv1483, %387
  %sub1485 = sub i32 %add1484, -2147483648
  %add1486 = add nsw i32 %sub1485, -2147483648
  br label %cond.end.1487

cond.end.1487:                                    ; preds = %cond.false.1482, %cond.true.1479
  %cond1488 = phi i32 [ %add1481, %cond.true.1479 ], [ %add1486, %cond.false.1482 ]
  %conv1489 = sext i32 %cond1488 to i64
  store i64 %conv1489, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.1490:                                  ; preds = %cond.false.1120
  br i1 true, label %cond.true.1491, label %cond.false.1860

cond.true.1491:                                   ; preds = %cond.false.1490
  br i1 false, label %cond.true.1492, label %cond.false.1677

cond.true.1492:                                   ; preds = %cond.true.1491
  %388 = load i32, i32* %w, align 4
  %conv1493 = sext i32 %388 to i64
  %mul1494 = mul nsw i64 0, %conv1493
  %389 = load i64, i64* %width, align 8
  %add1495 = add nsw i64 %mul1494, %389
  %mul1496 = mul nsw i64 0, %add1495
  %sub1497 = sub nsw i64 %mul1496, 1
  %cmp1498 = icmp slt i64 %sub1497, 0
  br i1 %cmp1498, label %cond.true.1500, label %cond.false.1521

cond.true.1500:                                   ; preds = %cond.true.1492
  %390 = load i32, i32* %w, align 4
  %conv1501 = sext i32 %390 to i64
  %mul1502 = mul nsw i64 0, %conv1501
  %391 = load i64, i64* %width, align 8
  %add1503 = add nsw i64 %mul1502, %391
  %mul1504 = mul nsw i64 0, %add1503
  %add1505 = add nsw i64 %mul1504, 0
  %neg1506 = xor i64 %add1505, -1
  %cmp1507 = icmp eq i64 %neg1506, -1
  %conv1508 = zext i1 %cmp1507 to i32
  %sub1509 = sub nsw i32 0, %conv1508
  %conv1510 = sext i32 %sub1509 to i64
  %392 = load i32, i32* %w, align 4
  %conv1511 = sext i32 %392 to i64
  %mul1512 = mul nsw i64 0, %conv1511
  %393 = load i64, i64* %width, align 8
  %add1513 = add nsw i64 %mul1512, %393
  %mul1514 = mul nsw i64 0, %add1513
  %add1515 = add nsw i64 %mul1514, 1
  %shl1516 = shl i64 %add1515, 62
  %sub1517 = sub nsw i64 %shl1516, 1
  %mul1518 = mul nsw i64 %sub1517, 2
  %add1519 = add nsw i64 %mul1518, 1
  %sub1520 = sub nsw i64 %conv1510, %add1519
  br label %cond.end.1527

cond.false.1521:                                  ; preds = %cond.true.1492
  %394 = load i32, i32* %w, align 4
  %conv1522 = sext i32 %394 to i64
  %mul1523 = mul nsw i64 0, %conv1522
  %395 = load i64, i64* %width, align 8
  %add1524 = add nsw i64 %mul1523, %395
  %mul1525 = mul nsw i64 0, %add1524
  %add1526 = add nsw i64 %mul1525, 0
  br label %cond.end.1527

cond.end.1527:                                    ; preds = %cond.false.1521, %cond.true.1500
  %cond1528 = phi i64 [ %sub1520, %cond.true.1500 ], [ %add1526, %cond.false.1521 ]
  %cmp1529 = icmp slt i64 %cond1528, 0
  br i1 %cmp1529, label %cond.true.1531, label %cond.false.1606

cond.true.1531:                                   ; preds = %cond.end.1527
  %396 = load i32, i32* %w, align 4
  %conv1532 = sext i32 %396 to i64
  %cmp1533 = icmp slt i64 %conv1532, 0
  br i1 %cmp1533, label %cond.true.1535, label %cond.false.1576

cond.true.1535:                                   ; preds = %cond.true.1531
  %397 = load i64, i64* %width, align 8
  %398 = load i32, i32* %w, align 4
  %conv1536 = sext i32 %398 to i64
  %mul1537 = mul nsw i64 0, %conv1536
  %399 = load i64, i64* %width, align 8
  %add1538 = add nsw i64 %mul1537, %399
  %mul1539 = mul nsw i64 0, %add1538
  %sub1540 = sub nsw i64 %mul1539, 1
  %cmp1541 = icmp slt i64 %sub1540, 0
  br i1 %cmp1541, label %cond.true.1543, label %cond.false.1564

cond.true.1543:                                   ; preds = %cond.true.1535
  %400 = load i32, i32* %w, align 4
  %conv1544 = sext i32 %400 to i64
  %mul1545 = mul nsw i64 0, %conv1544
  %401 = load i64, i64* %width, align 8
  %add1546 = add nsw i64 %mul1545, %401
  %mul1547 = mul nsw i64 0, %add1546
  %add1548 = add nsw i64 %mul1547, 0
  %neg1549 = xor i64 %add1548, -1
  %cmp1550 = icmp eq i64 %neg1549, -1
  %conv1551 = zext i1 %cmp1550 to i32
  %sub1552 = sub nsw i32 0, %conv1551
  %conv1553 = sext i32 %sub1552 to i64
  %402 = load i32, i32* %w, align 4
  %conv1554 = sext i32 %402 to i64
  %mul1555 = mul nsw i64 0, %conv1554
  %403 = load i64, i64* %width, align 8
  %add1556 = add nsw i64 %mul1555, %403
  %mul1557 = mul nsw i64 0, %add1556
  %add1558 = add nsw i64 %mul1557, 1
  %shl1559 = shl i64 %add1558, 62
  %sub1560 = sub nsw i64 %shl1559, 1
  %mul1561 = mul nsw i64 %sub1560, 2
  %add1562 = add nsw i64 %mul1561, 1
  %sub1563 = sub nsw i64 %conv1553, %add1562
  br label %cond.end.1570

cond.false.1564:                                  ; preds = %cond.true.1535
  %404 = load i32, i32* %w, align 4
  %conv1565 = sext i32 %404 to i64
  %mul1566 = mul nsw i64 0, %conv1565
  %405 = load i64, i64* %width, align 8
  %add1567 = add nsw i64 %mul1566, %405
  %mul1568 = mul nsw i64 0, %add1567
  %add1569 = add nsw i64 %mul1568, 0
  br label %cond.end.1570

cond.end.1570:                                    ; preds = %cond.false.1564, %cond.true.1543
  %cond1571 = phi i64 [ %sub1563, %cond.true.1543 ], [ %add1569, %cond.false.1564 ]
  %406 = load i32, i32* %w, align 4
  %conv1572 = sext i32 %406 to i64
  %sub1573 = sub nsw i64 %cond1571, %conv1572
  %cmp1574 = icmp slt i64 %397, %sub1573
  br i1 %cmp1574, label %cond.true.1647, label %lor.lhs.false.1630

cond.false.1576:                                  ; preds = %cond.true.1531
  %407 = load i32, i32* %w, align 4
  %conv1577 = sext i32 %407 to i64
  %mul1578 = mul nsw i64 0, %conv1577
  %408 = load i64, i64* %width, align 8
  %add1579 = add nsw i64 %mul1578, %408
  %mul1580 = mul nsw i64 0, %add1579
  %sub1581 = sub nsw i64 %mul1580, 1
  %cmp1582 = icmp slt i64 %sub1581, 0
  br i1 %cmp1582, label %cond.true.1584, label %cond.false.1594

cond.true.1584:                                   ; preds = %cond.false.1576
  %409 = load i32, i32* %w, align 4
  %conv1585 = sext i32 %409 to i64
  %mul1586 = mul nsw i64 0, %conv1585
  %410 = load i64, i64* %width, align 8
  %add1587 = add nsw i64 %mul1586, %410
  %mul1588 = mul nsw i64 0, %add1587
  %add1589 = add nsw i64 %mul1588, 1
  %shl1590 = shl i64 %add1589, 62
  %sub1591 = sub nsw i64 %shl1590, 1
  %mul1592 = mul nsw i64 %sub1591, 2
  %add1593 = add nsw i64 %mul1592, 1
  br label %cond.end.1600

cond.false.1594:                                  ; preds = %cond.false.1576
  %411 = load i32, i32* %w, align 4
  %conv1595 = sext i32 %411 to i64
  %mul1596 = mul nsw i64 0, %conv1595
  %412 = load i64, i64* %width, align 8
  %add1597 = add nsw i64 %mul1596, %412
  %mul1598 = mul nsw i64 0, %add1597
  %sub1599 = sub nsw i64 %mul1598, 1
  br label %cond.end.1600

cond.end.1600:                                    ; preds = %cond.false.1594, %cond.true.1584
  %cond1601 = phi i64 [ %add1593, %cond.true.1584 ], [ %sub1599, %cond.false.1594 ]
  %413 = load i32, i32* %w, align 4
  %conv1602 = sext i32 %413 to i64
  %sub1603 = sub nsw i64 %cond1601, %conv1602
  %414 = load i64, i64* %width, align 8
  %cmp1604 = icmp slt i64 %sub1603, %414
  br i1 %cmp1604, label %cond.true.1647, label %lor.lhs.false.1630

cond.false.1606:                                  ; preds = %cond.end.1527
  %415 = load i64, i64* %width, align 8
  %cmp1607 = icmp slt i64 %415, 0
  br i1 %cmp1607, label %cond.true.1609, label %cond.false.1615

cond.true.1609:                                   ; preds = %cond.false.1606
  %416 = load i32, i32* %w, align 4
  %conv1610 = sext i32 %416 to i64
  %417 = load i64, i64* %width, align 8
  %418 = load i32, i32* %w, align 4
  %conv1611 = sext i32 %418 to i64
  %add1612 = add nsw i64 %417, %conv1611
  %cmp1613 = icmp sle i64 %conv1610, %add1612
  br i1 %cmp1613, label %cond.true.1647, label %lor.lhs.false.1630

cond.false.1615:                                  ; preds = %cond.false.1606
  %419 = load i32, i32* %w, align 4
  %conv1616 = sext i32 %419 to i64
  %cmp1617 = icmp slt i64 %conv1616, 0
  br i1 %cmp1617, label %cond.true.1619, label %cond.false.1624

cond.true.1619:                                   ; preds = %cond.false.1615
  %420 = load i64, i64* %width, align 8
  %421 = load i64, i64* %width, align 8
  %422 = load i32, i32* %w, align 4
  %conv1620 = sext i32 %422 to i64
  %add1621 = add nsw i64 %421, %conv1620
  %cmp1622 = icmp sle i64 %420, %add1621
  br i1 %cmp1622, label %cond.true.1647, label %lor.lhs.false.1630

cond.false.1624:                                  ; preds = %cond.false.1615
  %423 = load i64, i64* %width, align 8
  %424 = load i32, i32* %w, align 4
  %conv1625 = sext i32 %424 to i64
  %add1626 = add nsw i64 %423, %conv1625
  %425 = load i32, i32* %w, align 4
  %conv1627 = sext i32 %425 to i64
  %cmp1628 = icmp slt i64 %add1626, %conv1627
  br i1 %cmp1628, label %cond.true.1647, label %lor.lhs.false.1630

lor.lhs.false.1630:                               ; preds = %cond.false.1624, %cond.true.1619, %cond.true.1609, %cond.end.1600, %cond.end.1570
  %426 = load i64, i64* %width, align 8
  %427 = load i32, i32* %w, align 4
  %conv1631 = sext i32 %427 to i64
  %add1632 = add nsw i64 %426, %conv1631
  %mul1633 = mul nsw i64 0, %add1632
  %sub1634 = sub nsw i64 %mul1633, 1
  %cmp1635 = icmp slt i64 %sub1634, 0
  br i1 %cmp1635, label %land.lhs.true.1637, label %lor.lhs.false.1642

land.lhs.true.1637:                               ; preds = %lor.lhs.false.1630
  %428 = load i64, i64* %width, align 8
  %429 = load i32, i32* %w, align 4
  %conv1638 = sext i32 %429 to i64
  %add1639 = add nsw i64 %428, %conv1638
  %cmp1640 = icmp slt i64 %add1639, -9223372036854775808
  br i1 %cmp1640, label %cond.true.1647, label %lor.lhs.false.1642

lor.lhs.false.1642:                               ; preds = %land.lhs.true.1637, %lor.lhs.false.1630
  %430 = load i64, i64* %width, align 8
  %431 = load i32, i32* %w, align 4
  %conv1643 = sext i32 %431 to i64
  %add1644 = add nsw i64 %430, %conv1643
  %cmp1645 = icmp slt i64 9223372036854775807, %add1644
  br i1 %cmp1645, label %cond.true.1647, label %cond.false.1662

cond.true.1647:                                   ; preds = %lor.lhs.false.1642, %land.lhs.true.1637, %cond.false.1624, %cond.true.1619, %cond.true.1609, %cond.end.1600, %cond.end.1570
  %432 = load i64, i64* %width, align 8
  %433 = load i32, i32* %w, align 4
  %conv1648 = sext i32 %433 to i64
  %add1649 = add i64 %432, %conv1648
  %cmp1650 = icmp ule i64 %add1649, 9223372036854775807
  br i1 %cmp1650, label %cond.true.1652, label %cond.false.1655

cond.true.1652:                                   ; preds = %cond.true.1647
  %434 = load i64, i64* %width, align 8
  %435 = load i32, i32* %w, align 4
  %conv1653 = sext i32 %435 to i64
  %add1654 = add i64 %434, %conv1653
  br label %cond.end.1660

cond.false.1655:                                  ; preds = %cond.true.1647
  %436 = load i64, i64* %width, align 8
  %437 = load i32, i32* %w, align 4
  %conv1656 = sext i32 %437 to i64
  %add1657 = add i64 %436, %conv1656
  %sub1658 = sub i64 %add1657, -9223372036854775808
  %add1659 = add nsw i64 %sub1658, -9223372036854775808
  br label %cond.end.1660

cond.end.1660:                                    ; preds = %cond.false.1655, %cond.true.1652
  %cond1661 = phi i64 [ %add1654, %cond.true.1652 ], [ %add1659, %cond.false.1655 ]
  store i64 %cond1661, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.1662:                                  ; preds = %lor.lhs.false.1642
  %438 = load i64, i64* %width, align 8
  %439 = load i32, i32* %w, align 4
  %conv1663 = sext i32 %439 to i64
  %add1664 = add i64 %438, %conv1663
  %cmp1665 = icmp ule i64 %add1664, 9223372036854775807
  br i1 %cmp1665, label %cond.true.1667, label %cond.false.1670

cond.true.1667:                                   ; preds = %cond.false.1662
  %440 = load i64, i64* %width, align 8
  %441 = load i32, i32* %w, align 4
  %conv1668 = sext i32 %441 to i64
  %add1669 = add i64 %440, %conv1668
  br label %cond.end.1675

cond.false.1670:                                  ; preds = %cond.false.1662
  %442 = load i64, i64* %width, align 8
  %443 = load i32, i32* %w, align 4
  %conv1671 = sext i32 %443 to i64
  %add1672 = add i64 %442, %conv1671
  %sub1673 = sub i64 %add1672, -9223372036854775808
  %add1674 = add nsw i64 %sub1673, -9223372036854775808
  br label %cond.end.1675

cond.end.1675:                                    ; preds = %cond.false.1670, %cond.true.1667
  %cond1676 = phi i64 [ %add1669, %cond.true.1667 ], [ %add1674, %cond.false.1670 ]
  store i64 %cond1676, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.1677:                                  ; preds = %cond.true.1491
  %444 = load i32, i32* %w, align 4
  %mul1678 = mul nsw i32 0, %444
  %conv1679 = sext i32 %mul1678 to i64
  %445 = load i64, i64* %width, align 8
  %add1680 = add nsw i64 %conv1679, %445
  %mul1681 = mul nsw i64 0, %add1680
  %sub1682 = sub nsw i64 %mul1681, 1
  %cmp1683 = icmp slt i64 %sub1682, 0
  br i1 %cmp1683, label %cond.true.1685, label %cond.false.1706

cond.true.1685:                                   ; preds = %cond.false.1677
  %446 = load i32, i32* %w, align 4
  %mul1686 = mul nsw i32 0, %446
  %conv1687 = sext i32 %mul1686 to i64
  %447 = load i64, i64* %width, align 8
  %add1688 = add nsw i64 %conv1687, %447
  %mul1689 = mul nsw i64 0, %add1688
  %add1690 = add nsw i64 %mul1689, 0
  %neg1691 = xor i64 %add1690, -1
  %cmp1692 = icmp eq i64 %neg1691, -1
  %conv1693 = zext i1 %cmp1692 to i32
  %sub1694 = sub nsw i32 0, %conv1693
  %conv1695 = sext i32 %sub1694 to i64
  %448 = load i32, i32* %w, align 4
  %mul1696 = mul nsw i32 0, %448
  %conv1697 = sext i32 %mul1696 to i64
  %449 = load i64, i64* %width, align 8
  %add1698 = add nsw i64 %conv1697, %449
  %mul1699 = mul nsw i64 0, %add1698
  %add1700 = add nsw i64 %mul1699, 1
  %shl1701 = shl i64 %add1700, 62
  %sub1702 = sub nsw i64 %shl1701, 1
  %mul1703 = mul nsw i64 %sub1702, 2
  %add1704 = add nsw i64 %mul1703, 1
  %sub1705 = sub nsw i64 %conv1695, %add1704
  br label %cond.end.1712

cond.false.1706:                                  ; preds = %cond.false.1677
  %450 = load i32, i32* %w, align 4
  %mul1707 = mul nsw i32 0, %450
  %conv1708 = sext i32 %mul1707 to i64
  %451 = load i64, i64* %width, align 8
  %add1709 = add nsw i64 %conv1708, %451
  %mul1710 = mul nsw i64 0, %add1709
  %add1711 = add nsw i64 %mul1710, 0
  br label %cond.end.1712

cond.end.1712:                                    ; preds = %cond.false.1706, %cond.true.1685
  %cond1713 = phi i64 [ %sub1705, %cond.true.1685 ], [ %add1711, %cond.false.1706 ]
  %cmp1714 = icmp slt i64 %cond1713, 0
  br i1 %cmp1714, label %cond.true.1716, label %cond.false.1790

cond.true.1716:                                   ; preds = %cond.end.1712
  %452 = load i32, i32* %w, align 4
  %cmp1717 = icmp slt i32 %452, 0
  br i1 %cmp1717, label %cond.true.1719, label %cond.false.1760

cond.true.1719:                                   ; preds = %cond.true.1716
  %453 = load i64, i64* %width, align 8
  %454 = load i32, i32* %w, align 4
  %mul1720 = mul nsw i32 0, %454
  %conv1721 = sext i32 %mul1720 to i64
  %455 = load i64, i64* %width, align 8
  %add1722 = add nsw i64 %conv1721, %455
  %mul1723 = mul nsw i64 0, %add1722
  %sub1724 = sub nsw i64 %mul1723, 1
  %cmp1725 = icmp slt i64 %sub1724, 0
  br i1 %cmp1725, label %cond.true.1727, label %cond.false.1748

cond.true.1727:                                   ; preds = %cond.true.1719
  %456 = load i32, i32* %w, align 4
  %mul1728 = mul nsw i32 0, %456
  %conv1729 = sext i32 %mul1728 to i64
  %457 = load i64, i64* %width, align 8
  %add1730 = add nsw i64 %conv1729, %457
  %mul1731 = mul nsw i64 0, %add1730
  %add1732 = add nsw i64 %mul1731, 0
  %neg1733 = xor i64 %add1732, -1
  %cmp1734 = icmp eq i64 %neg1733, -1
  %conv1735 = zext i1 %cmp1734 to i32
  %sub1736 = sub nsw i32 0, %conv1735
  %conv1737 = sext i32 %sub1736 to i64
  %458 = load i32, i32* %w, align 4
  %mul1738 = mul nsw i32 0, %458
  %conv1739 = sext i32 %mul1738 to i64
  %459 = load i64, i64* %width, align 8
  %add1740 = add nsw i64 %conv1739, %459
  %mul1741 = mul nsw i64 0, %add1740
  %add1742 = add nsw i64 %mul1741, 1
  %shl1743 = shl i64 %add1742, 62
  %sub1744 = sub nsw i64 %shl1743, 1
  %mul1745 = mul nsw i64 %sub1744, 2
  %add1746 = add nsw i64 %mul1745, 1
  %sub1747 = sub nsw i64 %conv1737, %add1746
  br label %cond.end.1754

cond.false.1748:                                  ; preds = %cond.true.1719
  %460 = load i32, i32* %w, align 4
  %mul1749 = mul nsw i32 0, %460
  %conv1750 = sext i32 %mul1749 to i64
  %461 = load i64, i64* %width, align 8
  %add1751 = add nsw i64 %conv1750, %461
  %mul1752 = mul nsw i64 0, %add1751
  %add1753 = add nsw i64 %mul1752, 0
  br label %cond.end.1754

cond.end.1754:                                    ; preds = %cond.false.1748, %cond.true.1727
  %cond1755 = phi i64 [ %sub1747, %cond.true.1727 ], [ %add1753, %cond.false.1748 ]
  %462 = load i32, i32* %w, align 4
  %conv1756 = sext i32 %462 to i64
  %sub1757 = sub nsw i64 %cond1755, %conv1756
  %cmp1758 = icmp slt i64 %453, %sub1757
  br i1 %cmp1758, label %cond.true.1830, label %lor.lhs.false.1813

cond.false.1760:                                  ; preds = %cond.true.1716
  %463 = load i32, i32* %w, align 4
  %mul1761 = mul nsw i32 0, %463
  %conv1762 = sext i32 %mul1761 to i64
  %464 = load i64, i64* %width, align 8
  %add1763 = add nsw i64 %conv1762, %464
  %mul1764 = mul nsw i64 0, %add1763
  %sub1765 = sub nsw i64 %mul1764, 1
  %cmp1766 = icmp slt i64 %sub1765, 0
  br i1 %cmp1766, label %cond.true.1768, label %cond.false.1778

cond.true.1768:                                   ; preds = %cond.false.1760
  %465 = load i32, i32* %w, align 4
  %mul1769 = mul nsw i32 0, %465
  %conv1770 = sext i32 %mul1769 to i64
  %466 = load i64, i64* %width, align 8
  %add1771 = add nsw i64 %conv1770, %466
  %mul1772 = mul nsw i64 0, %add1771
  %add1773 = add nsw i64 %mul1772, 1
  %shl1774 = shl i64 %add1773, 62
  %sub1775 = sub nsw i64 %shl1774, 1
  %mul1776 = mul nsw i64 %sub1775, 2
  %add1777 = add nsw i64 %mul1776, 1
  br label %cond.end.1784

cond.false.1778:                                  ; preds = %cond.false.1760
  %467 = load i32, i32* %w, align 4
  %mul1779 = mul nsw i32 0, %467
  %conv1780 = sext i32 %mul1779 to i64
  %468 = load i64, i64* %width, align 8
  %add1781 = add nsw i64 %conv1780, %468
  %mul1782 = mul nsw i64 0, %add1781
  %sub1783 = sub nsw i64 %mul1782, 1
  br label %cond.end.1784

cond.end.1784:                                    ; preds = %cond.false.1778, %cond.true.1768
  %cond1785 = phi i64 [ %add1777, %cond.true.1768 ], [ %sub1783, %cond.false.1778 ]
  %469 = load i32, i32* %w, align 4
  %conv1786 = sext i32 %469 to i64
  %sub1787 = sub nsw i64 %cond1785, %conv1786
  %470 = load i64, i64* %width, align 8
  %cmp1788 = icmp slt i64 %sub1787, %470
  br i1 %cmp1788, label %cond.true.1830, label %lor.lhs.false.1813

cond.false.1790:                                  ; preds = %cond.end.1712
  %471 = load i64, i64* %width, align 8
  %cmp1791 = icmp slt i64 %471, 0
  br i1 %cmp1791, label %cond.true.1793, label %cond.false.1799

cond.true.1793:                                   ; preds = %cond.false.1790
  %472 = load i32, i32* %w, align 4
  %conv1794 = sext i32 %472 to i64
  %473 = load i64, i64* %width, align 8
  %474 = load i32, i32* %w, align 4
  %conv1795 = sext i32 %474 to i64
  %add1796 = add nsw i64 %473, %conv1795
  %cmp1797 = icmp sle i64 %conv1794, %add1796
  br i1 %cmp1797, label %cond.true.1830, label %lor.lhs.false.1813

cond.false.1799:                                  ; preds = %cond.false.1790
  %475 = load i32, i32* %w, align 4
  %cmp1800 = icmp slt i32 %475, 0
  br i1 %cmp1800, label %cond.true.1802, label %cond.false.1807

cond.true.1802:                                   ; preds = %cond.false.1799
  %476 = load i64, i64* %width, align 8
  %477 = load i64, i64* %width, align 8
  %478 = load i32, i32* %w, align 4
  %conv1803 = sext i32 %478 to i64
  %add1804 = add nsw i64 %477, %conv1803
  %cmp1805 = icmp sle i64 %476, %add1804
  br i1 %cmp1805, label %cond.true.1830, label %lor.lhs.false.1813

cond.false.1807:                                  ; preds = %cond.false.1799
  %479 = load i64, i64* %width, align 8
  %480 = load i32, i32* %w, align 4
  %conv1808 = sext i32 %480 to i64
  %add1809 = add nsw i64 %479, %conv1808
  %481 = load i32, i32* %w, align 4
  %conv1810 = sext i32 %481 to i64
  %cmp1811 = icmp slt i64 %add1809, %conv1810
  br i1 %cmp1811, label %cond.true.1830, label %lor.lhs.false.1813

lor.lhs.false.1813:                               ; preds = %cond.false.1807, %cond.true.1802, %cond.true.1793, %cond.end.1784, %cond.end.1754
  %482 = load i64, i64* %width, align 8
  %483 = load i32, i32* %w, align 4
  %conv1814 = sext i32 %483 to i64
  %add1815 = add nsw i64 %482, %conv1814
  %mul1816 = mul nsw i64 0, %add1815
  %sub1817 = sub nsw i64 %mul1816, 1
  %cmp1818 = icmp slt i64 %sub1817, 0
  br i1 %cmp1818, label %land.lhs.true.1820, label %lor.lhs.false.1825

land.lhs.true.1820:                               ; preds = %lor.lhs.false.1813
  %484 = load i64, i64* %width, align 8
  %485 = load i32, i32* %w, align 4
  %conv1821 = sext i32 %485 to i64
  %add1822 = add nsw i64 %484, %conv1821
  %cmp1823 = icmp slt i64 %add1822, -9223372036854775808
  br i1 %cmp1823, label %cond.true.1830, label %lor.lhs.false.1825

lor.lhs.false.1825:                               ; preds = %land.lhs.true.1820, %lor.lhs.false.1813
  %486 = load i64, i64* %width, align 8
  %487 = load i32, i32* %w, align 4
  %conv1826 = sext i32 %487 to i64
  %add1827 = add nsw i64 %486, %conv1826
  %cmp1828 = icmp slt i64 9223372036854775807, %add1827
  br i1 %cmp1828, label %cond.true.1830, label %cond.false.1845

cond.true.1830:                                   ; preds = %lor.lhs.false.1825, %land.lhs.true.1820, %cond.false.1807, %cond.true.1802, %cond.true.1793, %cond.end.1784, %cond.end.1754
  %488 = load i64, i64* %width, align 8
  %489 = load i32, i32* %w, align 4
  %conv1831 = sext i32 %489 to i64
  %add1832 = add i64 %488, %conv1831
  %cmp1833 = icmp ule i64 %add1832, 9223372036854775807
  br i1 %cmp1833, label %cond.true.1835, label %cond.false.1838

cond.true.1835:                                   ; preds = %cond.true.1830
  %490 = load i64, i64* %width, align 8
  %491 = load i32, i32* %w, align 4
  %conv1836 = sext i32 %491 to i64
  %add1837 = add i64 %490, %conv1836
  br label %cond.end.1843

cond.false.1838:                                  ; preds = %cond.true.1830
  %492 = load i64, i64* %width, align 8
  %493 = load i32, i32* %w, align 4
  %conv1839 = sext i32 %493 to i64
  %add1840 = add i64 %492, %conv1839
  %sub1841 = sub i64 %add1840, -9223372036854775808
  %add1842 = add nsw i64 %sub1841, -9223372036854775808
  br label %cond.end.1843

cond.end.1843:                                    ; preds = %cond.false.1838, %cond.true.1835
  %cond1844 = phi i64 [ %add1837, %cond.true.1835 ], [ %add1842, %cond.false.1838 ]
  store i64 %cond1844, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.1845:                                  ; preds = %lor.lhs.false.1825
  %494 = load i64, i64* %width, align 8
  %495 = load i32, i32* %w, align 4
  %conv1846 = sext i32 %495 to i64
  %add1847 = add i64 %494, %conv1846
  %cmp1848 = icmp ule i64 %add1847, 9223372036854775807
  br i1 %cmp1848, label %cond.true.1850, label %cond.false.1853

cond.true.1850:                                   ; preds = %cond.false.1845
  %496 = load i64, i64* %width, align 8
  %497 = load i32, i32* %w, align 4
  %conv1851 = sext i32 %497 to i64
  %add1852 = add i64 %496, %conv1851
  br label %cond.end.1858

cond.false.1853:                                  ; preds = %cond.false.1845
  %498 = load i64, i64* %width, align 8
  %499 = load i32, i32* %w, align 4
  %conv1854 = sext i32 %499 to i64
  %add1855 = add i64 %498, %conv1854
  %sub1856 = sub i64 %add1855, -9223372036854775808
  %add1857 = add nsw i64 %sub1856, -9223372036854775808
  br label %cond.end.1858

cond.end.1858:                                    ; preds = %cond.false.1853, %cond.true.1850
  %cond1859 = phi i64 [ %add1852, %cond.true.1850 ], [ %add1857, %cond.false.1853 ]
  store i64 %cond1859, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.1860:                                  ; preds = %cond.false.1490
  br i1 false, label %cond.true.1861, label %cond.false.2046

cond.true.1861:                                   ; preds = %cond.false.1860
  %500 = load i32, i32* %w, align 4
  %conv1862 = sext i32 %500 to i64
  %mul1863 = mul nsw i64 0, %conv1862
  %501 = load i64, i64* %width, align 8
  %add1864 = add nsw i64 %mul1863, %501
  %mul1865 = mul nsw i64 0, %add1864
  %sub1866 = sub nsw i64 %mul1865, 1
  %cmp1867 = icmp slt i64 %sub1866, 0
  br i1 %cmp1867, label %cond.true.1869, label %cond.false.1890

cond.true.1869:                                   ; preds = %cond.true.1861
  %502 = load i32, i32* %w, align 4
  %conv1870 = sext i32 %502 to i64
  %mul1871 = mul nsw i64 0, %conv1870
  %503 = load i64, i64* %width, align 8
  %add1872 = add nsw i64 %mul1871, %503
  %mul1873 = mul nsw i64 0, %add1872
  %add1874 = add nsw i64 %mul1873, 0
  %neg1875 = xor i64 %add1874, -1
  %cmp1876 = icmp eq i64 %neg1875, -1
  %conv1877 = zext i1 %cmp1876 to i32
  %sub1878 = sub nsw i32 0, %conv1877
  %conv1879 = sext i32 %sub1878 to i64
  %504 = load i32, i32* %w, align 4
  %conv1880 = sext i32 %504 to i64
  %mul1881 = mul nsw i64 0, %conv1880
  %505 = load i64, i64* %width, align 8
  %add1882 = add nsw i64 %mul1881, %505
  %mul1883 = mul nsw i64 0, %add1882
  %add1884 = add nsw i64 %mul1883, 1
  %shl1885 = shl i64 %add1884, 62
  %sub1886 = sub nsw i64 %shl1885, 1
  %mul1887 = mul nsw i64 %sub1886, 2
  %add1888 = add nsw i64 %mul1887, 1
  %sub1889 = sub nsw i64 %conv1879, %add1888
  br label %cond.end.1896

cond.false.1890:                                  ; preds = %cond.true.1861
  %506 = load i32, i32* %w, align 4
  %conv1891 = sext i32 %506 to i64
  %mul1892 = mul nsw i64 0, %conv1891
  %507 = load i64, i64* %width, align 8
  %add1893 = add nsw i64 %mul1892, %507
  %mul1894 = mul nsw i64 0, %add1893
  %add1895 = add nsw i64 %mul1894, 0
  br label %cond.end.1896

cond.end.1896:                                    ; preds = %cond.false.1890, %cond.true.1869
  %cond1897 = phi i64 [ %sub1889, %cond.true.1869 ], [ %add1895, %cond.false.1890 ]
  %cmp1898 = icmp slt i64 %cond1897, 0
  br i1 %cmp1898, label %cond.true.1900, label %cond.false.1975

cond.true.1900:                                   ; preds = %cond.end.1896
  %508 = load i32, i32* %w, align 4
  %conv1901 = sext i32 %508 to i64
  %cmp1902 = icmp slt i64 %conv1901, 0
  br i1 %cmp1902, label %cond.true.1904, label %cond.false.1945

cond.true.1904:                                   ; preds = %cond.true.1900
  %509 = load i64, i64* %width, align 8
  %510 = load i32, i32* %w, align 4
  %conv1905 = sext i32 %510 to i64
  %mul1906 = mul nsw i64 0, %conv1905
  %511 = load i64, i64* %width, align 8
  %add1907 = add nsw i64 %mul1906, %511
  %mul1908 = mul nsw i64 0, %add1907
  %sub1909 = sub nsw i64 %mul1908, 1
  %cmp1910 = icmp slt i64 %sub1909, 0
  br i1 %cmp1910, label %cond.true.1912, label %cond.false.1933

cond.true.1912:                                   ; preds = %cond.true.1904
  %512 = load i32, i32* %w, align 4
  %conv1913 = sext i32 %512 to i64
  %mul1914 = mul nsw i64 0, %conv1913
  %513 = load i64, i64* %width, align 8
  %add1915 = add nsw i64 %mul1914, %513
  %mul1916 = mul nsw i64 0, %add1915
  %add1917 = add nsw i64 %mul1916, 0
  %neg1918 = xor i64 %add1917, -1
  %cmp1919 = icmp eq i64 %neg1918, -1
  %conv1920 = zext i1 %cmp1919 to i32
  %sub1921 = sub nsw i32 0, %conv1920
  %conv1922 = sext i32 %sub1921 to i64
  %514 = load i32, i32* %w, align 4
  %conv1923 = sext i32 %514 to i64
  %mul1924 = mul nsw i64 0, %conv1923
  %515 = load i64, i64* %width, align 8
  %add1925 = add nsw i64 %mul1924, %515
  %mul1926 = mul nsw i64 0, %add1925
  %add1927 = add nsw i64 %mul1926, 1
  %shl1928 = shl i64 %add1927, 62
  %sub1929 = sub nsw i64 %shl1928, 1
  %mul1930 = mul nsw i64 %sub1929, 2
  %add1931 = add nsw i64 %mul1930, 1
  %sub1932 = sub nsw i64 %conv1922, %add1931
  br label %cond.end.1939

cond.false.1933:                                  ; preds = %cond.true.1904
  %516 = load i32, i32* %w, align 4
  %conv1934 = sext i32 %516 to i64
  %mul1935 = mul nsw i64 0, %conv1934
  %517 = load i64, i64* %width, align 8
  %add1936 = add nsw i64 %mul1935, %517
  %mul1937 = mul nsw i64 0, %add1936
  %add1938 = add nsw i64 %mul1937, 0
  br label %cond.end.1939

cond.end.1939:                                    ; preds = %cond.false.1933, %cond.true.1912
  %cond1940 = phi i64 [ %sub1932, %cond.true.1912 ], [ %add1938, %cond.false.1933 ]
  %518 = load i32, i32* %w, align 4
  %conv1941 = sext i32 %518 to i64
  %sub1942 = sub nsw i64 %cond1940, %conv1941
  %cmp1943 = icmp slt i64 %509, %sub1942
  br i1 %cmp1943, label %cond.true.2016, label %lor.lhs.false.1999

cond.false.1945:                                  ; preds = %cond.true.1900
  %519 = load i32, i32* %w, align 4
  %conv1946 = sext i32 %519 to i64
  %mul1947 = mul nsw i64 0, %conv1946
  %520 = load i64, i64* %width, align 8
  %add1948 = add nsw i64 %mul1947, %520
  %mul1949 = mul nsw i64 0, %add1948
  %sub1950 = sub nsw i64 %mul1949, 1
  %cmp1951 = icmp slt i64 %sub1950, 0
  br i1 %cmp1951, label %cond.true.1953, label %cond.false.1963

cond.true.1953:                                   ; preds = %cond.false.1945
  %521 = load i32, i32* %w, align 4
  %conv1954 = sext i32 %521 to i64
  %mul1955 = mul nsw i64 0, %conv1954
  %522 = load i64, i64* %width, align 8
  %add1956 = add nsw i64 %mul1955, %522
  %mul1957 = mul nsw i64 0, %add1956
  %add1958 = add nsw i64 %mul1957, 1
  %shl1959 = shl i64 %add1958, 62
  %sub1960 = sub nsw i64 %shl1959, 1
  %mul1961 = mul nsw i64 %sub1960, 2
  %add1962 = add nsw i64 %mul1961, 1
  br label %cond.end.1969

cond.false.1963:                                  ; preds = %cond.false.1945
  %523 = load i32, i32* %w, align 4
  %conv1964 = sext i32 %523 to i64
  %mul1965 = mul nsw i64 0, %conv1964
  %524 = load i64, i64* %width, align 8
  %add1966 = add nsw i64 %mul1965, %524
  %mul1967 = mul nsw i64 0, %add1966
  %sub1968 = sub nsw i64 %mul1967, 1
  br label %cond.end.1969

cond.end.1969:                                    ; preds = %cond.false.1963, %cond.true.1953
  %cond1970 = phi i64 [ %add1962, %cond.true.1953 ], [ %sub1968, %cond.false.1963 ]
  %525 = load i32, i32* %w, align 4
  %conv1971 = sext i32 %525 to i64
  %sub1972 = sub nsw i64 %cond1970, %conv1971
  %526 = load i64, i64* %width, align 8
  %cmp1973 = icmp slt i64 %sub1972, %526
  br i1 %cmp1973, label %cond.true.2016, label %lor.lhs.false.1999

cond.false.1975:                                  ; preds = %cond.end.1896
  %527 = load i64, i64* %width, align 8
  %cmp1976 = icmp slt i64 %527, 0
  br i1 %cmp1976, label %cond.true.1978, label %cond.false.1984

cond.true.1978:                                   ; preds = %cond.false.1975
  %528 = load i32, i32* %w, align 4
  %conv1979 = sext i32 %528 to i64
  %529 = load i64, i64* %width, align 8
  %530 = load i32, i32* %w, align 4
  %conv1980 = sext i32 %530 to i64
  %add1981 = add nsw i64 %529, %conv1980
  %cmp1982 = icmp sle i64 %conv1979, %add1981
  br i1 %cmp1982, label %cond.true.2016, label %lor.lhs.false.1999

cond.false.1984:                                  ; preds = %cond.false.1975
  %531 = load i32, i32* %w, align 4
  %conv1985 = sext i32 %531 to i64
  %cmp1986 = icmp slt i64 %conv1985, 0
  br i1 %cmp1986, label %cond.true.1988, label %cond.false.1993

cond.true.1988:                                   ; preds = %cond.false.1984
  %532 = load i64, i64* %width, align 8
  %533 = load i64, i64* %width, align 8
  %534 = load i32, i32* %w, align 4
  %conv1989 = sext i32 %534 to i64
  %add1990 = add nsw i64 %533, %conv1989
  %cmp1991 = icmp sle i64 %532, %add1990
  br i1 %cmp1991, label %cond.true.2016, label %lor.lhs.false.1999

cond.false.1993:                                  ; preds = %cond.false.1984
  %535 = load i64, i64* %width, align 8
  %536 = load i32, i32* %w, align 4
  %conv1994 = sext i32 %536 to i64
  %add1995 = add nsw i64 %535, %conv1994
  %537 = load i32, i32* %w, align 4
  %conv1996 = sext i32 %537 to i64
  %cmp1997 = icmp slt i64 %add1995, %conv1996
  br i1 %cmp1997, label %cond.true.2016, label %lor.lhs.false.1999

lor.lhs.false.1999:                               ; preds = %cond.false.1993, %cond.true.1988, %cond.true.1978, %cond.end.1969, %cond.end.1939
  %538 = load i64, i64* %width, align 8
  %539 = load i32, i32* %w, align 4
  %conv2000 = sext i32 %539 to i64
  %add2001 = add nsw i64 %538, %conv2000
  %mul2002 = mul nsw i64 0, %add2001
  %sub2003 = sub nsw i64 %mul2002, 1
  %cmp2004 = icmp slt i64 %sub2003, 0
  br i1 %cmp2004, label %land.lhs.true.2006, label %lor.lhs.false.2011

land.lhs.true.2006:                               ; preds = %lor.lhs.false.1999
  %540 = load i64, i64* %width, align 8
  %541 = load i32, i32* %w, align 4
  %conv2007 = sext i32 %541 to i64
  %add2008 = add nsw i64 %540, %conv2007
  %cmp2009 = icmp slt i64 %add2008, -9223372036854775808
  br i1 %cmp2009, label %cond.true.2016, label %lor.lhs.false.2011

lor.lhs.false.2011:                               ; preds = %land.lhs.true.2006, %lor.lhs.false.1999
  %542 = load i64, i64* %width, align 8
  %543 = load i32, i32* %w, align 4
  %conv2012 = sext i32 %543 to i64
  %add2013 = add nsw i64 %542, %conv2012
  %cmp2014 = icmp slt i64 9223372036854775807, %add2013
  br i1 %cmp2014, label %cond.true.2016, label %cond.false.2031

cond.true.2016:                                   ; preds = %lor.lhs.false.2011, %land.lhs.true.2006, %cond.false.1993, %cond.true.1988, %cond.true.1978, %cond.end.1969, %cond.end.1939
  %544 = load i64, i64* %width, align 8
  %545 = load i32, i32* %w, align 4
  %conv2017 = sext i32 %545 to i64
  %add2018 = add i64 %544, %conv2017
  %cmp2019 = icmp ule i64 %add2018, 9223372036854775807
  br i1 %cmp2019, label %cond.true.2021, label %cond.false.2024

cond.true.2021:                                   ; preds = %cond.true.2016
  %546 = load i64, i64* %width, align 8
  %547 = load i32, i32* %w, align 4
  %conv2022 = sext i32 %547 to i64
  %add2023 = add i64 %546, %conv2022
  br label %cond.end.2029

cond.false.2024:                                  ; preds = %cond.true.2016
  %548 = load i64, i64* %width, align 8
  %549 = load i32, i32* %w, align 4
  %conv2025 = sext i32 %549 to i64
  %add2026 = add i64 %548, %conv2025
  %sub2027 = sub i64 %add2026, -9223372036854775808
  %add2028 = add nsw i64 %sub2027, -9223372036854775808
  br label %cond.end.2029

cond.end.2029:                                    ; preds = %cond.false.2024, %cond.true.2021
  %cond2030 = phi i64 [ %add2023, %cond.true.2021 ], [ %add2028, %cond.false.2024 ]
  store i64 %cond2030, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.2031:                                  ; preds = %lor.lhs.false.2011
  %550 = load i64, i64* %width, align 8
  %551 = load i32, i32* %w, align 4
  %conv2032 = sext i32 %551 to i64
  %add2033 = add i64 %550, %conv2032
  %cmp2034 = icmp ule i64 %add2033, 9223372036854775807
  br i1 %cmp2034, label %cond.true.2036, label %cond.false.2039

cond.true.2036:                                   ; preds = %cond.false.2031
  %552 = load i64, i64* %width, align 8
  %553 = load i32, i32* %w, align 4
  %conv2037 = sext i32 %553 to i64
  %add2038 = add i64 %552, %conv2037
  br label %cond.end.2044

cond.false.2039:                                  ; preds = %cond.false.2031
  %554 = load i64, i64* %width, align 8
  %555 = load i32, i32* %w, align 4
  %conv2040 = sext i32 %555 to i64
  %add2041 = add i64 %554, %conv2040
  %sub2042 = sub i64 %add2041, -9223372036854775808
  %add2043 = add nsw i64 %sub2042, -9223372036854775808
  br label %cond.end.2044

cond.end.2044:                                    ; preds = %cond.false.2039, %cond.true.2036
  %cond2045 = phi i64 [ %add2038, %cond.true.2036 ], [ %add2043, %cond.false.2039 ]
  store i64 %cond2045, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

cond.false.2046:                                  ; preds = %cond.false.1860
  %556 = load i32, i32* %w, align 4
  %mul2047 = mul nsw i32 0, %556
  %conv2048 = sext i32 %mul2047 to i64
  %557 = load i64, i64* %width, align 8
  %add2049 = add nsw i64 %conv2048, %557
  %mul2050 = mul nsw i64 0, %add2049
  %sub2051 = sub nsw i64 %mul2050, 1
  %cmp2052 = icmp slt i64 %sub2051, 0
  br i1 %cmp2052, label %cond.true.2054, label %cond.false.2075

cond.true.2054:                                   ; preds = %cond.false.2046
  %558 = load i32, i32* %w, align 4
  %mul2055 = mul nsw i32 0, %558
  %conv2056 = sext i32 %mul2055 to i64
  %559 = load i64, i64* %width, align 8
  %add2057 = add nsw i64 %conv2056, %559
  %mul2058 = mul nsw i64 0, %add2057
  %add2059 = add nsw i64 %mul2058, 0
  %neg2060 = xor i64 %add2059, -1
  %cmp2061 = icmp eq i64 %neg2060, -1
  %conv2062 = zext i1 %cmp2061 to i32
  %sub2063 = sub nsw i32 0, %conv2062
  %conv2064 = sext i32 %sub2063 to i64
  %560 = load i32, i32* %w, align 4
  %mul2065 = mul nsw i32 0, %560
  %conv2066 = sext i32 %mul2065 to i64
  %561 = load i64, i64* %width, align 8
  %add2067 = add nsw i64 %conv2066, %561
  %mul2068 = mul nsw i64 0, %add2067
  %add2069 = add nsw i64 %mul2068, 1
  %shl2070 = shl i64 %add2069, 62
  %sub2071 = sub nsw i64 %shl2070, 1
  %mul2072 = mul nsw i64 %sub2071, 2
  %add2073 = add nsw i64 %mul2072, 1
  %sub2074 = sub nsw i64 %conv2064, %add2073
  br label %cond.end.2081

cond.false.2075:                                  ; preds = %cond.false.2046
  %562 = load i32, i32* %w, align 4
  %mul2076 = mul nsw i32 0, %562
  %conv2077 = sext i32 %mul2076 to i64
  %563 = load i64, i64* %width, align 8
  %add2078 = add nsw i64 %conv2077, %563
  %mul2079 = mul nsw i64 0, %add2078
  %add2080 = add nsw i64 %mul2079, 0
  br label %cond.end.2081

cond.end.2081:                                    ; preds = %cond.false.2075, %cond.true.2054
  %cond2082 = phi i64 [ %sub2074, %cond.true.2054 ], [ %add2080, %cond.false.2075 ]
  %cmp2083 = icmp slt i64 %cond2082, 0
  br i1 %cmp2083, label %cond.true.2085, label %cond.false.2159

cond.true.2085:                                   ; preds = %cond.end.2081
  %564 = load i32, i32* %w, align 4
  %cmp2086 = icmp slt i32 %564, 0
  br i1 %cmp2086, label %cond.true.2088, label %cond.false.2129

cond.true.2088:                                   ; preds = %cond.true.2085
  %565 = load i64, i64* %width, align 8
  %566 = load i32, i32* %w, align 4
  %mul2089 = mul nsw i32 0, %566
  %conv2090 = sext i32 %mul2089 to i64
  %567 = load i64, i64* %width, align 8
  %add2091 = add nsw i64 %conv2090, %567
  %mul2092 = mul nsw i64 0, %add2091
  %sub2093 = sub nsw i64 %mul2092, 1
  %cmp2094 = icmp slt i64 %sub2093, 0
  br i1 %cmp2094, label %cond.true.2096, label %cond.false.2117

cond.true.2096:                                   ; preds = %cond.true.2088
  %568 = load i32, i32* %w, align 4
  %mul2097 = mul nsw i32 0, %568
  %conv2098 = sext i32 %mul2097 to i64
  %569 = load i64, i64* %width, align 8
  %add2099 = add nsw i64 %conv2098, %569
  %mul2100 = mul nsw i64 0, %add2099
  %add2101 = add nsw i64 %mul2100, 0
  %neg2102 = xor i64 %add2101, -1
  %cmp2103 = icmp eq i64 %neg2102, -1
  %conv2104 = zext i1 %cmp2103 to i32
  %sub2105 = sub nsw i32 0, %conv2104
  %conv2106 = sext i32 %sub2105 to i64
  %570 = load i32, i32* %w, align 4
  %mul2107 = mul nsw i32 0, %570
  %conv2108 = sext i32 %mul2107 to i64
  %571 = load i64, i64* %width, align 8
  %add2109 = add nsw i64 %conv2108, %571
  %mul2110 = mul nsw i64 0, %add2109
  %add2111 = add nsw i64 %mul2110, 1
  %shl2112 = shl i64 %add2111, 62
  %sub2113 = sub nsw i64 %shl2112, 1
  %mul2114 = mul nsw i64 %sub2113, 2
  %add2115 = add nsw i64 %mul2114, 1
  %sub2116 = sub nsw i64 %conv2106, %add2115
  br label %cond.end.2123

cond.false.2117:                                  ; preds = %cond.true.2088
  %572 = load i32, i32* %w, align 4
  %mul2118 = mul nsw i32 0, %572
  %conv2119 = sext i32 %mul2118 to i64
  %573 = load i64, i64* %width, align 8
  %add2120 = add nsw i64 %conv2119, %573
  %mul2121 = mul nsw i64 0, %add2120
  %add2122 = add nsw i64 %mul2121, 0
  br label %cond.end.2123

cond.end.2123:                                    ; preds = %cond.false.2117, %cond.true.2096
  %cond2124 = phi i64 [ %sub2116, %cond.true.2096 ], [ %add2122, %cond.false.2117 ]
  %574 = load i32, i32* %w, align 4
  %conv2125 = sext i32 %574 to i64
  %sub2126 = sub nsw i64 %cond2124, %conv2125
  %cmp2127 = icmp slt i64 %565, %sub2126
  br i1 %cmp2127, label %cond.true.2199, label %lor.lhs.false.2182

cond.false.2129:                                  ; preds = %cond.true.2085
  %575 = load i32, i32* %w, align 4
  %mul2130 = mul nsw i32 0, %575
  %conv2131 = sext i32 %mul2130 to i64
  %576 = load i64, i64* %width, align 8
  %add2132 = add nsw i64 %conv2131, %576
  %mul2133 = mul nsw i64 0, %add2132
  %sub2134 = sub nsw i64 %mul2133, 1
  %cmp2135 = icmp slt i64 %sub2134, 0
  br i1 %cmp2135, label %cond.true.2137, label %cond.false.2147

cond.true.2137:                                   ; preds = %cond.false.2129
  %577 = load i32, i32* %w, align 4
  %mul2138 = mul nsw i32 0, %577
  %conv2139 = sext i32 %mul2138 to i64
  %578 = load i64, i64* %width, align 8
  %add2140 = add nsw i64 %conv2139, %578
  %mul2141 = mul nsw i64 0, %add2140
  %add2142 = add nsw i64 %mul2141, 1
  %shl2143 = shl i64 %add2142, 62
  %sub2144 = sub nsw i64 %shl2143, 1
  %mul2145 = mul nsw i64 %sub2144, 2
  %add2146 = add nsw i64 %mul2145, 1
  br label %cond.end.2153

cond.false.2147:                                  ; preds = %cond.false.2129
  %579 = load i32, i32* %w, align 4
  %mul2148 = mul nsw i32 0, %579
  %conv2149 = sext i32 %mul2148 to i64
  %580 = load i64, i64* %width, align 8
  %add2150 = add nsw i64 %conv2149, %580
  %mul2151 = mul nsw i64 0, %add2150
  %sub2152 = sub nsw i64 %mul2151, 1
  br label %cond.end.2153

cond.end.2153:                                    ; preds = %cond.false.2147, %cond.true.2137
  %cond2154 = phi i64 [ %add2146, %cond.true.2137 ], [ %sub2152, %cond.false.2147 ]
  %581 = load i32, i32* %w, align 4
  %conv2155 = sext i32 %581 to i64
  %sub2156 = sub nsw i64 %cond2154, %conv2155
  %582 = load i64, i64* %width, align 8
  %cmp2157 = icmp slt i64 %sub2156, %582
  br i1 %cmp2157, label %cond.true.2199, label %lor.lhs.false.2182

cond.false.2159:                                  ; preds = %cond.end.2081
  %583 = load i64, i64* %width, align 8
  %cmp2160 = icmp slt i64 %583, 0
  br i1 %cmp2160, label %cond.true.2162, label %cond.false.2168

cond.true.2162:                                   ; preds = %cond.false.2159
  %584 = load i32, i32* %w, align 4
  %conv2163 = sext i32 %584 to i64
  %585 = load i64, i64* %width, align 8
  %586 = load i32, i32* %w, align 4
  %conv2164 = sext i32 %586 to i64
  %add2165 = add nsw i64 %585, %conv2164
  %cmp2166 = icmp sle i64 %conv2163, %add2165
  br i1 %cmp2166, label %cond.true.2199, label %lor.lhs.false.2182

cond.false.2168:                                  ; preds = %cond.false.2159
  %587 = load i32, i32* %w, align 4
  %cmp2169 = icmp slt i32 %587, 0
  br i1 %cmp2169, label %cond.true.2171, label %cond.false.2176

cond.true.2171:                                   ; preds = %cond.false.2168
  %588 = load i64, i64* %width, align 8
  %589 = load i64, i64* %width, align 8
  %590 = load i32, i32* %w, align 4
  %conv2172 = sext i32 %590 to i64
  %add2173 = add nsw i64 %589, %conv2172
  %cmp2174 = icmp sle i64 %588, %add2173
  br i1 %cmp2174, label %cond.true.2199, label %lor.lhs.false.2182

cond.false.2176:                                  ; preds = %cond.false.2168
  %591 = load i64, i64* %width, align 8
  %592 = load i32, i32* %w, align 4
  %conv2177 = sext i32 %592 to i64
  %add2178 = add nsw i64 %591, %conv2177
  %593 = load i32, i32* %w, align 4
  %conv2179 = sext i32 %593 to i64
  %cmp2180 = icmp slt i64 %add2178, %conv2179
  br i1 %cmp2180, label %cond.true.2199, label %lor.lhs.false.2182

lor.lhs.false.2182:                               ; preds = %cond.false.2176, %cond.true.2171, %cond.true.2162, %cond.end.2153, %cond.end.2123
  %594 = load i64, i64* %width, align 8
  %595 = load i32, i32* %w, align 4
  %conv2183 = sext i32 %595 to i64
  %add2184 = add nsw i64 %594, %conv2183
  %mul2185 = mul nsw i64 0, %add2184
  %sub2186 = sub nsw i64 %mul2185, 1
  %cmp2187 = icmp slt i64 %sub2186, 0
  br i1 %cmp2187, label %land.lhs.true.2189, label %lor.lhs.false.2194

land.lhs.true.2189:                               ; preds = %lor.lhs.false.2182
  %596 = load i64, i64* %width, align 8
  %597 = load i32, i32* %w, align 4
  %conv2190 = sext i32 %597 to i64
  %add2191 = add nsw i64 %596, %conv2190
  %cmp2192 = icmp slt i64 %add2191, -9223372036854775808
  br i1 %cmp2192, label %cond.true.2199, label %lor.lhs.false.2194

lor.lhs.false.2194:                               ; preds = %land.lhs.true.2189, %lor.lhs.false.2182
  %598 = load i64, i64* %width, align 8
  %599 = load i32, i32* %w, align 4
  %conv2195 = sext i32 %599 to i64
  %add2196 = add nsw i64 %598, %conv2195
  %cmp2197 = icmp slt i64 9223372036854775807, %add2196
  br i1 %cmp2197, label %cond.true.2199, label %cond.false.2214

cond.true.2199:                                   ; preds = %lor.lhs.false.2194, %land.lhs.true.2189, %cond.false.2176, %cond.true.2171, %cond.true.2162, %cond.end.2153, %cond.end.2123
  %600 = load i64, i64* %width, align 8
  %601 = load i32, i32* %w, align 4
  %conv2200 = sext i32 %601 to i64
  %add2201 = add i64 %600, %conv2200
  %cmp2202 = icmp ule i64 %add2201, 9223372036854775807
  br i1 %cmp2202, label %cond.true.2204, label %cond.false.2207

cond.true.2204:                                   ; preds = %cond.true.2199
  %602 = load i64, i64* %width, align 8
  %603 = load i32, i32* %w, align 4
  %conv2205 = sext i32 %603 to i64
  %add2206 = add i64 %602, %conv2205
  br label %cond.end.2212

cond.false.2207:                                  ; preds = %cond.true.2199
  %604 = load i64, i64* %width, align 8
  %605 = load i32, i32* %w, align 4
  %conv2208 = sext i32 %605 to i64
  %add2209 = add i64 %604, %conv2208
  %sub2210 = sub i64 %add2209, -9223372036854775808
  %add2211 = add nsw i64 %sub2210, -9223372036854775808
  br label %cond.end.2212

cond.end.2212:                                    ; preds = %cond.false.2207, %cond.true.2204
  %cond2213 = phi i64 [ %add2206, %cond.true.2204 ], [ %add2211, %cond.false.2207 ]
  store i64 %cond2213, i64* %width, align 8
  br i1 true, label %if.then.2229, label %if.end

cond.false.2214:                                  ; preds = %lor.lhs.false.2194
  %606 = load i64, i64* %width, align 8
  %607 = load i32, i32* %w, align 4
  %conv2215 = sext i32 %607 to i64
  %add2216 = add i64 %606, %conv2215
  %cmp2217 = icmp ule i64 %add2216, 9223372036854775807
  br i1 %cmp2217, label %cond.true.2219, label %cond.false.2222

cond.true.2219:                                   ; preds = %cond.false.2214
  %608 = load i64, i64* %width, align 8
  %609 = load i32, i32* %w, align 4
  %conv2220 = sext i32 %609 to i64
  %add2221 = add i64 %608, %conv2220
  br label %cond.end.2227

cond.false.2222:                                  ; preds = %cond.false.2214
  %610 = load i64, i64* %width, align 8
  %611 = load i32, i32* %w, align 4
  %conv2223 = sext i32 %611 to i64
  %add2224 = add i64 %610, %conv2223
  %sub2225 = sub i64 %add2224, -9223372036854775808
  %add2226 = add nsw i64 %sub2225, -9223372036854775808
  br label %cond.end.2227

cond.end.2227:                                    ; preds = %cond.false.2222, %cond.true.2219
  %cond2228 = phi i64 [ %add2221, %cond.true.2219 ], [ %add2226, %cond.false.2222 ]
  store i64 %cond2228, i64* %width, align 8
  br i1 false, label %if.then.2229, label %if.end

if.then.2229:                                     ; preds = %cond.end.2227, %cond.end.2212, %cond.end.2044, %cond.end.2029, %cond.end.1858, %cond.end.1843, %cond.end.1675, %cond.end.1660, %cond.end.1487, %cond.end.1471, %cond.end.1302, %cond.end.1286, %cond.end.1117, %cond.end.1088, %cond.end.906, %cond.end.877, %cond.end.628, %cond.end.599, %cond.end.417, %cond.end.388
  call void @string_overflow() #7
  unreachable

if.end:                                           ; preds = %cond.end.2227, %cond.end.2212, %cond.end.2044, %cond.end.2029, %cond.end.1858, %cond.end.1843, %cond.end.1675, %cond.end.1660, %cond.end.1487, %cond.end.1471, %cond.end.1302, %cond.end.1286, %cond.end.1117, %cond.end.1088, %cond.end.906, %cond.end.877, %cond.end.628, %cond.end.599, %cond.end.417, %cond.end.388
  br label %if.end.2230

if.end.2230:                                      ; preds = %if.end, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.2230
  %612 = load i32, i32* %i, align 4
  %inc = add nsw i32 %612, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.2231

if.end.2231:                                      ; preds = %for.end, %cond.end.72
  br label %if.end.2232

if.end.2232:                                      ; preds = %if.end.2231, %cond.end.40
  %613 = load i64, i64* %width, align 8
  ret i64 %613
}

declare %struct.Lisp_Char_Table* @buffer_display_table() #3

; Function Attrs: nounwind uwtable
define i64 @c_string_width(i8* %str, i64 %len, i32 %precision, i64* %nchars, i64* %nbytes) #1 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %precision.addr = alloca i32, align 4
  %nchars.addr = alloca i64*, align 8
  %nbytes.addr = alloca i64*, align 8
  %i = alloca i64, align 8
  %i_byte = alloca i64, align 8
  %width = alloca i64, align 8
  %dp = alloca %struct.Lisp_Char_Table*, align 8
  %bytes = alloca i32, align 4
  %c = alloca i32, align 4
  %thiswidth = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %precision, i32* %precision.addr, align 4
  store i64* %nchars, i64** %nchars.addr, align 8
  store i64* %nbytes, i64** %nbytes.addr, align 8
  store i64 0, i64* %i, align 8
  store i64 0, i64* %i_byte, align 8
  store i64 0, i64* %width, align 8
  %call = call %struct.Lisp_Char_Table* @buffer_display_table()
  store %struct.Lisp_Char_Table* %call, %struct.Lisp_Char_Table** %dp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.2004, %entry
  %0 = load i64, i64* %i_byte, align 8
  %1 = load i64, i64* %len.addr, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %str.addr, align 8
  %3 = load i64, i64* %i_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %3
  %arrayidx = getelementptr inbounds i8, i8* %add.ptr, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.body
  store i32 1, i32* %bytes, align 4
  %5 = load i8*, i8** %str.addr, align 8
  %6 = load i64, i64* %i_byte, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 %6
  %arrayidx2 = getelementptr inbounds i8, i8* %add.ptr1, i64 0
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  br label %cond.end.52

cond.false:                                       ; preds = %while.body
  %8 = load i8*, i8** %str.addr, align 8
  %9 = load i64, i64* %i_byte, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %8, i64 %9
  %arrayidx5 = getelementptr inbounds i8, i8* %add.ptr4, i64 0
  %10 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %10 to i32
  %and7 = and i32 %conv6, 32
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.false.23, label %cond.true.9

cond.true.9:                                      ; preds = %cond.false
  store i32 2, i32* %bytes, align 4
  %11 = load i8*, i8** %str.addr, align 8
  %12 = load i64, i64* %i_byte, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %11, i64 %12
  %arrayidx11 = getelementptr inbounds i8, i8* %add.ptr10, i64 0
  %13 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %13 to i32
  %and13 = and i32 %conv12, 31
  %shl = shl i32 %and13, 6
  %14 = load i8*, i8** %str.addr, align 8
  %15 = load i64, i64* %i_byte, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %14, i64 %15
  %arrayidx15 = getelementptr inbounds i8, i8* %add.ptr14, i64 1
  %16 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %16 to i32
  %and17 = and i32 %conv16, 63
  %or = or i32 %shl, %and17
  %17 = load i8*, i8** %str.addr, align 8
  %18 = load i64, i64* %i_byte, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %17, i64 %18
  %arrayidx19 = getelementptr inbounds i8, i8* %add.ptr18, i64 0
  %19 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %19 to i32
  %cmp21 = icmp slt i32 %conv20, 194
  %cond = select i1 %cmp21, i32 4194176, i32 0
  %add = add nsw i32 %or, %cond
  br label %cond.end.50

cond.false.23:                                    ; preds = %cond.false
  %20 = load i8*, i8** %str.addr, align 8
  %21 = load i64, i64* %i_byte, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %20, i64 %21
  %arrayidx25 = getelementptr inbounds i8, i8* %add.ptr24, i64 0
  %22 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %22 to i32
  %and27 = and i32 %conv26, 16
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false.46, label %cond.true.29

cond.true.29:                                     ; preds = %cond.false.23
  store i32 3, i32* %bytes, align 4
  %23 = load i8*, i8** %str.addr, align 8
  %24 = load i64, i64* %i_byte, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %23, i64 %24
  %arrayidx31 = getelementptr inbounds i8, i8* %add.ptr30, i64 0
  %25 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %25 to i32
  %and33 = and i32 %conv32, 15
  %shl34 = shl i32 %and33, 12
  %26 = load i8*, i8** %str.addr, align 8
  %27 = load i64, i64* %i_byte, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %26, i64 %27
  %arrayidx36 = getelementptr inbounds i8, i8* %add.ptr35, i64 1
  %28 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %28 to i32
  %and38 = and i32 %conv37, 63
  %shl39 = shl i32 %and38, 6
  %or40 = or i32 %shl34, %shl39
  %29 = load i8*, i8** %str.addr, align 8
  %30 = load i64, i64* %i_byte, align 8
  %add.ptr41 = getelementptr inbounds i8, i8* %29, i64 %30
  %arrayidx42 = getelementptr inbounds i8, i8* %add.ptr41, i64 2
  %31 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %31 to i32
  %and44 = and i32 %conv43, 63
  %or45 = or i32 %or40, %and44
  br label %cond.end

cond.false.46:                                    ; preds = %cond.false.23
  %32 = load i8*, i8** %str.addr, align 8
  %33 = load i64, i64* %i_byte, align 8
  %add.ptr47 = getelementptr inbounds i8, i8* %32, i64 %33
  %call48 = call i32 @string_char(i8* %add.ptr47, i8** null, i32* %bytes)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.46, %cond.true.29
  %cond49 = phi i32 [ %or45, %cond.true.29 ], [ %call48, %cond.false.46 ]
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.end, %cond.true.9
  %cond51 = phi i32 [ %add, %cond.true.9 ], [ %cond49, %cond.end ]
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.end.50, %cond.true
  %cond53 = phi i32 [ %conv3, %cond.true ], [ %cond51, %cond.end.50 ]
  store i32 %cond53, i32* %c, align 4
  %34 = load i32, i32* %c, align 4
  %35 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp, align 8
  %call54 = call i64 @char_width(i32 %34, %struct.Lisp_Char_Table* %35)
  store i64 %call54, i64* %thiswidth, align 8
  %36 = load i32, i32* %precision.addr, align 4
  %cmp55 = icmp slt i32 0, %36
  br i1 %cmp55, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end.52
  %37 = load i32, i32* %precision.addr, align 4
  %conv57 = sext i32 %37 to i64
  %38 = load i64, i64* %width, align 8
  %sub = sub nsw i64 %conv57, %38
  %39 = load i64, i64* %thiswidth, align 8
  %cmp58 = icmp slt i64 %sub, %39
  br i1 %cmp58, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %40 = load i64, i64* %i, align 8
  %41 = load i64*, i64** %nchars.addr, align 8
  store i64 %40, i64* %41, align 8
  %42 = load i64, i64* %i_byte, align 8
  %43 = load i64*, i64** %nbytes.addr, align 8
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %width, align 8
  store i64 %44, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.end.52
  br i1 false, label %cond.true.60, label %cond.false.524

cond.true.60:                                     ; preds = %if.end
  br i1 false, label %cond.true.61, label %cond.false.334

cond.true.61:                                     ; preds = %cond.true.60
  %45 = load i64, i64* %width, align 8
  %conv62 = trunc i64 %45 to i8
  %conv63 = sext i8 %conv62 to i32
  %mul = mul nsw i32 0, %conv63
  %46 = load i64, i64* %thiswidth, align 8
  %conv64 = trunc i64 %46 to i8
  %conv65 = sext i8 %conv64 to i32
  %add66 = add nsw i32 %mul, %conv65
  %mul67 = mul nsw i32 0, %add66
  %sub68 = sub nsw i32 %mul67, 1
  %cmp69 = icmp slt i32 %sub68, 0
  br i1 %cmp69, label %cond.true.71, label %cond.false.96

cond.true.71:                                     ; preds = %cond.true.61
  %47 = load i64, i64* %width, align 8
  %conv72 = trunc i64 %47 to i8
  %conv73 = sext i8 %conv72 to i32
  %mul74 = mul nsw i32 0, %conv73
  %48 = load i64, i64* %thiswidth, align 8
  %conv75 = trunc i64 %48 to i8
  %conv76 = sext i8 %conv75 to i32
  %add77 = add nsw i32 %mul74, %conv76
  %mul78 = mul nsw i32 0, %add77
  %add79 = add nsw i32 %mul78, 0
  %neg = xor i32 %add79, -1
  %cmp80 = icmp eq i32 %neg, -1
  %conv81 = zext i1 %cmp80 to i32
  %sub82 = sub nsw i32 0, %conv81
  %49 = load i64, i64* %width, align 8
  %conv83 = trunc i64 %49 to i8
  %conv84 = sext i8 %conv83 to i32
  %mul85 = mul nsw i32 0, %conv84
  %50 = load i64, i64* %thiswidth, align 8
  %conv86 = trunc i64 %50 to i8
  %conv87 = sext i8 %conv86 to i32
  %add88 = add nsw i32 %mul85, %conv87
  %mul89 = mul nsw i32 0, %add88
  %add90 = add nsw i32 %mul89, 1
  %shl91 = shl i32 %add90, 30
  %sub92 = sub nsw i32 %shl91, 1
  %mul93 = mul nsw i32 %sub92, 2
  %add94 = add nsw i32 %mul93, 1
  %sub95 = sub nsw i32 %sub82, %add94
  br label %cond.end.105

cond.false.96:                                    ; preds = %cond.true.61
  %51 = load i64, i64* %width, align 8
  %conv97 = trunc i64 %51 to i8
  %conv98 = sext i8 %conv97 to i32
  %mul99 = mul nsw i32 0, %conv98
  %52 = load i64, i64* %thiswidth, align 8
  %conv100 = trunc i64 %52 to i8
  %conv101 = sext i8 %conv100 to i32
  %add102 = add nsw i32 %mul99, %conv101
  %mul103 = mul nsw i32 0, %add102
  %add104 = add nsw i32 %mul103, 0
  br label %cond.end.105

cond.end.105:                                     ; preds = %cond.false.96, %cond.true.71
  %cond106 = phi i32 [ %sub95, %cond.true.71 ], [ %add104, %cond.false.96 ]
  %cmp107 = icmp slt i32 %cond106, 0
  br i1 %cmp107, label %cond.true.109, label %cond.false.211

cond.true.109:                                    ; preds = %cond.end.105
  %53 = load i64, i64* %width, align 8
  %conv110 = trunc i64 %53 to i8
  %conv111 = sext i8 %conv110 to i32
  %cmp112 = icmp slt i32 %conv111, 0
  br i1 %cmp112, label %cond.true.114, label %cond.false.169

cond.true.114:                                    ; preds = %cond.true.109
  %54 = load i64, i64* %thiswidth, align 8
  %conv115 = trunc i64 %54 to i8
  %conv116 = sext i8 %conv115 to i32
  %55 = load i64, i64* %width, align 8
  %conv117 = trunc i64 %55 to i8
  %conv118 = sext i8 %conv117 to i32
  %mul119 = mul nsw i32 0, %conv118
  %56 = load i64, i64* %thiswidth, align 8
  %conv120 = trunc i64 %56 to i8
  %conv121 = sext i8 %conv120 to i32
  %add122 = add nsw i32 %mul119, %conv121
  %mul123 = mul nsw i32 0, %add122
  %sub124 = sub nsw i32 %mul123, 1
  %cmp125 = icmp slt i32 %sub124, 0
  br i1 %cmp125, label %cond.true.127, label %cond.false.153

cond.true.127:                                    ; preds = %cond.true.114
  %57 = load i64, i64* %width, align 8
  %conv128 = trunc i64 %57 to i8
  %conv129 = sext i8 %conv128 to i32
  %mul130 = mul nsw i32 0, %conv129
  %58 = load i64, i64* %thiswidth, align 8
  %conv131 = trunc i64 %58 to i8
  %conv132 = sext i8 %conv131 to i32
  %add133 = add nsw i32 %mul130, %conv132
  %mul134 = mul nsw i32 0, %add133
  %add135 = add nsw i32 %mul134, 0
  %neg136 = xor i32 %add135, -1
  %cmp137 = icmp eq i32 %neg136, -1
  %conv138 = zext i1 %cmp137 to i32
  %sub139 = sub nsw i32 0, %conv138
  %59 = load i64, i64* %width, align 8
  %conv140 = trunc i64 %59 to i8
  %conv141 = sext i8 %conv140 to i32
  %mul142 = mul nsw i32 0, %conv141
  %60 = load i64, i64* %thiswidth, align 8
  %conv143 = trunc i64 %60 to i8
  %conv144 = sext i8 %conv143 to i32
  %add145 = add nsw i32 %mul142, %conv144
  %mul146 = mul nsw i32 0, %add145
  %add147 = add nsw i32 %mul146, 1
  %shl148 = shl i32 %add147, 30
  %sub149 = sub nsw i32 %shl148, 1
  %mul150 = mul nsw i32 %sub149, 2
  %add151 = add nsw i32 %mul150, 1
  %sub152 = sub nsw i32 %sub139, %add151
  br label %cond.end.162

cond.false.153:                                   ; preds = %cond.true.114
  %61 = load i64, i64* %width, align 8
  %conv154 = trunc i64 %61 to i8
  %conv155 = sext i8 %conv154 to i32
  %mul156 = mul nsw i32 0, %conv155
  %62 = load i64, i64* %thiswidth, align 8
  %conv157 = trunc i64 %62 to i8
  %conv158 = sext i8 %conv157 to i32
  %add159 = add nsw i32 %mul156, %conv158
  %mul160 = mul nsw i32 0, %add159
  %add161 = add nsw i32 %mul160, 0
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.153, %cond.true.127
  %cond163 = phi i32 [ %sub152, %cond.true.127 ], [ %add161, %cond.false.153 ]
  %63 = load i64, i64* %width, align 8
  %conv164 = trunc i64 %63 to i8
  %conv165 = sext i8 %conv164 to i32
  %sub166 = sub nsw i32 %cond163, %conv165
  %cmp167 = icmp slt i32 %conv116, %sub166
  br i1 %cmp167, label %cond.true.276, label %lor.lhs.false

cond.false.169:                                   ; preds = %cond.true.109
  %64 = load i64, i64* %width, align 8
  %conv170 = trunc i64 %64 to i8
  %conv171 = sext i8 %conv170 to i32
  %mul172 = mul nsw i32 0, %conv171
  %65 = load i64, i64* %thiswidth, align 8
  %conv173 = trunc i64 %65 to i8
  %conv174 = sext i8 %conv173 to i32
  %add175 = add nsw i32 %mul172, %conv174
  %mul176 = mul nsw i32 0, %add175
  %sub177 = sub nsw i32 %mul176, 1
  %cmp178 = icmp slt i32 %sub177, 0
  br i1 %cmp178, label %cond.true.180, label %cond.false.193

cond.true.180:                                    ; preds = %cond.false.169
  %66 = load i64, i64* %width, align 8
  %conv181 = trunc i64 %66 to i8
  %conv182 = sext i8 %conv181 to i32
  %mul183 = mul nsw i32 0, %conv182
  %67 = load i64, i64* %thiswidth, align 8
  %conv184 = trunc i64 %67 to i8
  %conv185 = sext i8 %conv184 to i32
  %add186 = add nsw i32 %mul183, %conv185
  %mul187 = mul nsw i32 0, %add186
  %add188 = add nsw i32 %mul187, 1
  %shl189 = shl i32 %add188, 30
  %sub190 = sub nsw i32 %shl189, 1
  %mul191 = mul nsw i32 %sub190, 2
  %add192 = add nsw i32 %mul191, 1
  br label %cond.end.202

cond.false.193:                                   ; preds = %cond.false.169
  %68 = load i64, i64* %width, align 8
  %conv194 = trunc i64 %68 to i8
  %conv195 = sext i8 %conv194 to i32
  %mul196 = mul nsw i32 0, %conv195
  %69 = load i64, i64* %thiswidth, align 8
  %conv197 = trunc i64 %69 to i8
  %conv198 = sext i8 %conv197 to i32
  %add199 = add nsw i32 %mul196, %conv198
  %mul200 = mul nsw i32 0, %add199
  %sub201 = sub nsw i32 %mul200, 1
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.false.193, %cond.true.180
  %cond203 = phi i32 [ %add192, %cond.true.180 ], [ %sub201, %cond.false.193 ]
  %70 = load i64, i64* %width, align 8
  %conv204 = trunc i64 %70 to i8
  %conv205 = sext i8 %conv204 to i32
  %sub206 = sub nsw i32 %cond203, %conv205
  %71 = load i64, i64* %thiswidth, align 8
  %conv207 = trunc i64 %71 to i8
  %conv208 = sext i8 %conv207 to i32
  %cmp209 = icmp slt i32 %sub206, %conv208
  br i1 %cmp209, label %cond.true.276, label %lor.lhs.false

cond.false.211:                                   ; preds = %cond.end.105
  %72 = load i64, i64* %thiswidth, align 8
  %conv212 = trunc i64 %72 to i8
  %conv213 = sext i8 %conv212 to i32
  %cmp214 = icmp slt i32 %conv213, 0
  br i1 %cmp214, label %cond.true.216, label %cond.false.226

cond.true.216:                                    ; preds = %cond.false.211
  %73 = load i64, i64* %width, align 8
  %conv217 = trunc i64 %73 to i8
  %conv218 = sext i8 %conv217 to i32
  %74 = load i64, i64* %thiswidth, align 8
  %conv219 = trunc i64 %74 to i8
  %conv220 = sext i8 %conv219 to i32
  %75 = load i64, i64* %width, align 8
  %conv221 = trunc i64 %75 to i8
  %conv222 = sext i8 %conv221 to i32
  %add223 = add nsw i32 %conv220, %conv222
  %cmp224 = icmp sle i32 %conv218, %add223
  br i1 %cmp224, label %cond.true.276, label %lor.lhs.false

cond.false.226:                                   ; preds = %cond.false.211
  %76 = load i64, i64* %width, align 8
  %conv227 = trunc i64 %76 to i8
  %conv228 = sext i8 %conv227 to i32
  %cmp229 = icmp slt i32 %conv228, 0
  br i1 %cmp229, label %cond.true.231, label %cond.false.241

cond.true.231:                                    ; preds = %cond.false.226
  %77 = load i64, i64* %thiswidth, align 8
  %conv232 = trunc i64 %77 to i8
  %conv233 = sext i8 %conv232 to i32
  %78 = load i64, i64* %thiswidth, align 8
  %conv234 = trunc i64 %78 to i8
  %conv235 = sext i8 %conv234 to i32
  %79 = load i64, i64* %width, align 8
  %conv236 = trunc i64 %79 to i8
  %conv237 = sext i8 %conv236 to i32
  %add238 = add nsw i32 %conv235, %conv237
  %cmp239 = icmp sle i32 %conv233, %add238
  br i1 %cmp239, label %cond.true.276, label %lor.lhs.false

cond.false.241:                                   ; preds = %cond.false.226
  %80 = load i64, i64* %thiswidth, align 8
  %conv242 = trunc i64 %80 to i8
  %conv243 = sext i8 %conv242 to i32
  %81 = load i64, i64* %width, align 8
  %conv244 = trunc i64 %81 to i8
  %conv245 = sext i8 %conv244 to i32
  %add246 = add nsw i32 %conv243, %conv245
  %82 = load i64, i64* %width, align 8
  %conv247 = trunc i64 %82 to i8
  %conv248 = sext i8 %conv247 to i32
  %cmp249 = icmp slt i32 %add246, %conv248
  br i1 %cmp249, label %cond.true.276, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.241, %cond.true.231, %cond.true.216, %cond.end.202, %cond.end.162
  %83 = load i64, i64* %thiswidth, align 8
  %conv251 = trunc i64 %83 to i8
  %conv252 = sext i8 %conv251 to i32
  %84 = load i64, i64* %width, align 8
  %conv253 = trunc i64 %84 to i8
  %conv254 = sext i8 %conv253 to i32
  %add255 = add nsw i32 %conv252, %conv254
  %mul256 = mul nsw i32 0, %add255
  %sub257 = sub nsw i32 %mul256, 1
  %cmp258 = icmp slt i32 %sub257, 0
  br i1 %cmp258, label %land.lhs.true.260, label %lor.lhs.false.268

land.lhs.true.260:                                ; preds = %lor.lhs.false
  %85 = load i64, i64* %thiswidth, align 8
  %conv261 = trunc i64 %85 to i8
  %conv262 = sext i8 %conv261 to i32
  %86 = load i64, i64* %width, align 8
  %conv263 = trunc i64 %86 to i8
  %conv264 = sext i8 %conv263 to i32
  %add265 = add nsw i32 %conv262, %conv264
  %cmp266 = icmp slt i32 %add265, -128
  br i1 %cmp266, label %cond.true.276, label %lor.lhs.false.268

lor.lhs.false.268:                                ; preds = %land.lhs.true.260, %lor.lhs.false
  %87 = load i64, i64* %thiswidth, align 8
  %conv269 = trunc i64 %87 to i8
  %conv270 = sext i8 %conv269 to i32
  %88 = load i64, i64* %width, align 8
  %conv271 = trunc i64 %88 to i8
  %conv272 = sext i8 %conv271 to i32
  %add273 = add nsw i32 %conv270, %conv272
  %cmp274 = icmp slt i32 127, %add273
  br i1 %cmp274, label %cond.true.276, label %cond.false.305

cond.true.276:                                    ; preds = %lor.lhs.false.268, %land.lhs.true.260, %cond.false.241, %cond.true.231, %cond.true.216, %cond.end.202, %cond.end.162
  %89 = load i64, i64* %thiswidth, align 8
  %conv277 = trunc i64 %89 to i8
  %conv278 = zext i8 %conv277 to i32
  %90 = load i64, i64* %width, align 8
  %conv279 = trunc i64 %90 to i8
  %conv280 = zext i8 %conv279 to i32
  %add281 = add nsw i32 %conv278, %conv280
  %cmp282 = icmp sle i32 %add281, 127
  br i1 %cmp282, label %cond.true.284, label %cond.false.292

cond.true.284:                                    ; preds = %cond.true.276
  %91 = load i64, i64* %thiswidth, align 8
  %conv285 = trunc i64 %91 to i8
  %conv286 = zext i8 %conv285 to i32
  %92 = load i64, i64* %width, align 8
  %conv287 = trunc i64 %92 to i8
  %conv288 = zext i8 %conv287 to i32
  %add289 = add nsw i32 %conv286, %conv288
  %conv290 = trunc i32 %add289 to i8
  %conv291 = sext i8 %conv290 to i32
  br label %cond.end.302

cond.false.292:                                   ; preds = %cond.true.276
  %93 = load i64, i64* %thiswidth, align 8
  %conv293 = trunc i64 %93 to i8
  %conv294 = zext i8 %conv293 to i32
  %94 = load i64, i64* %width, align 8
  %conv295 = trunc i64 %94 to i8
  %conv296 = zext i8 %conv295 to i32
  %add297 = add nsw i32 %conv294, %conv296
  %sub298 = sub nsw i32 %add297, -128
  %conv299 = trunc i32 %sub298 to i8
  %conv300 = sext i8 %conv299 to i32
  %add301 = add nsw i32 %conv300, -128
  br label %cond.end.302

cond.end.302:                                     ; preds = %cond.false.292, %cond.true.284
  %cond303 = phi i32 [ %conv291, %cond.true.284 ], [ %add301, %cond.false.292 ]
  %conv304 = sext i32 %cond303 to i64
  store i64 %conv304, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.305:                                   ; preds = %lor.lhs.false.268
  %95 = load i64, i64* %thiswidth, align 8
  %conv306 = trunc i64 %95 to i8
  %conv307 = zext i8 %conv306 to i32
  %96 = load i64, i64* %width, align 8
  %conv308 = trunc i64 %96 to i8
  %conv309 = zext i8 %conv308 to i32
  %add310 = add nsw i32 %conv307, %conv309
  %cmp311 = icmp sle i32 %add310, 127
  br i1 %cmp311, label %cond.true.313, label %cond.false.321

cond.true.313:                                    ; preds = %cond.false.305
  %97 = load i64, i64* %thiswidth, align 8
  %conv314 = trunc i64 %97 to i8
  %conv315 = zext i8 %conv314 to i32
  %98 = load i64, i64* %width, align 8
  %conv316 = trunc i64 %98 to i8
  %conv317 = zext i8 %conv316 to i32
  %add318 = add nsw i32 %conv315, %conv317
  %conv319 = trunc i32 %add318 to i8
  %conv320 = sext i8 %conv319 to i32
  br label %cond.end.331

cond.false.321:                                   ; preds = %cond.false.305
  %99 = load i64, i64* %thiswidth, align 8
  %conv322 = trunc i64 %99 to i8
  %conv323 = zext i8 %conv322 to i32
  %100 = load i64, i64* %width, align 8
  %conv324 = trunc i64 %100 to i8
  %conv325 = zext i8 %conv324 to i32
  %add326 = add nsw i32 %conv323, %conv325
  %sub327 = sub nsw i32 %add326, -128
  %conv328 = trunc i32 %sub327 to i8
  %conv329 = sext i8 %conv328 to i32
  %add330 = add nsw i32 %conv329, -128
  br label %cond.end.331

cond.end.331:                                     ; preds = %cond.false.321, %cond.true.313
  %cond332 = phi i32 [ %conv320, %cond.true.313 ], [ %add330, %cond.false.321 ]
  %conv333 = sext i32 %cond332 to i64
  store i64 %conv333, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.334:                                   ; preds = %cond.true.60
  %101 = load i64, i64* %width, align 8
  %mul335 = mul nsw i64 0, %101
  %102 = load i64, i64* %thiswidth, align 8
  %add336 = add nsw i64 %mul335, %102
  %mul337 = mul nsw i64 0, %add336
  %sub338 = sub nsw i64 %mul337, 1
  %cmp339 = icmp slt i64 %sub338, 0
  br i1 %cmp339, label %cond.true.341, label %cond.false.360

cond.true.341:                                    ; preds = %cond.false.334
  %103 = load i64, i64* %width, align 8
  %mul342 = mul nsw i64 0, %103
  %104 = load i64, i64* %thiswidth, align 8
  %add343 = add nsw i64 %mul342, %104
  %mul344 = mul nsw i64 0, %add343
  %add345 = add nsw i64 %mul344, 0
  %neg346 = xor i64 %add345, -1
  %cmp347 = icmp eq i64 %neg346, -1
  %conv348 = zext i1 %cmp347 to i32
  %sub349 = sub nsw i32 0, %conv348
  %conv350 = sext i32 %sub349 to i64
  %105 = load i64, i64* %width, align 8
  %mul351 = mul nsw i64 0, %105
  %106 = load i64, i64* %thiswidth, align 8
  %add352 = add nsw i64 %mul351, %106
  %mul353 = mul nsw i64 0, %add352
  %add354 = add nsw i64 %mul353, 1
  %shl355 = shl i64 %add354, 62
  %sub356 = sub nsw i64 %shl355, 1
  %mul357 = mul nsw i64 %sub356, 2
  %add358 = add nsw i64 %mul357, 1
  %sub359 = sub nsw i64 %conv350, %add358
  br label %cond.end.365

cond.false.360:                                   ; preds = %cond.false.334
  %107 = load i64, i64* %width, align 8
  %mul361 = mul nsw i64 0, %107
  %108 = load i64, i64* %thiswidth, align 8
  %add362 = add nsw i64 %mul361, %108
  %mul363 = mul nsw i64 0, %add362
  %add364 = add nsw i64 %mul363, 0
  br label %cond.end.365

cond.end.365:                                     ; preds = %cond.false.360, %cond.true.341
  %cond366 = phi i64 [ %sub359, %cond.true.341 ], [ %add364, %cond.false.360 ]
  %cmp367 = icmp slt i64 %cond366, 0
  br i1 %cmp367, label %cond.true.369, label %cond.false.434

cond.true.369:                                    ; preds = %cond.end.365
  %109 = load i64, i64* %width, align 8
  %cmp370 = icmp slt i64 %109, 0
  br i1 %cmp370, label %cond.true.372, label %cond.false.408

cond.true.372:                                    ; preds = %cond.true.369
  %110 = load i64, i64* %thiswidth, align 8
  %111 = load i64, i64* %width, align 8
  %mul373 = mul nsw i64 0, %111
  %112 = load i64, i64* %thiswidth, align 8
  %add374 = add nsw i64 %mul373, %112
  %mul375 = mul nsw i64 0, %add374
  %sub376 = sub nsw i64 %mul375, 1
  %cmp377 = icmp slt i64 %sub376, 0
  br i1 %cmp377, label %cond.true.379, label %cond.false.398

cond.true.379:                                    ; preds = %cond.true.372
  %113 = load i64, i64* %width, align 8
  %mul380 = mul nsw i64 0, %113
  %114 = load i64, i64* %thiswidth, align 8
  %add381 = add nsw i64 %mul380, %114
  %mul382 = mul nsw i64 0, %add381
  %add383 = add nsw i64 %mul382, 0
  %neg384 = xor i64 %add383, -1
  %cmp385 = icmp eq i64 %neg384, -1
  %conv386 = zext i1 %cmp385 to i32
  %sub387 = sub nsw i32 0, %conv386
  %conv388 = sext i32 %sub387 to i64
  %115 = load i64, i64* %width, align 8
  %mul389 = mul nsw i64 0, %115
  %116 = load i64, i64* %thiswidth, align 8
  %add390 = add nsw i64 %mul389, %116
  %mul391 = mul nsw i64 0, %add390
  %add392 = add nsw i64 %mul391, 1
  %shl393 = shl i64 %add392, 62
  %sub394 = sub nsw i64 %shl393, 1
  %mul395 = mul nsw i64 %sub394, 2
  %add396 = add nsw i64 %mul395, 1
  %sub397 = sub nsw i64 %conv388, %add396
  br label %cond.end.403

cond.false.398:                                   ; preds = %cond.true.372
  %117 = load i64, i64* %width, align 8
  %mul399 = mul nsw i64 0, %117
  %118 = load i64, i64* %thiswidth, align 8
  %add400 = add nsw i64 %mul399, %118
  %mul401 = mul nsw i64 0, %add400
  %add402 = add nsw i64 %mul401, 0
  br label %cond.end.403

cond.end.403:                                     ; preds = %cond.false.398, %cond.true.379
  %cond404 = phi i64 [ %sub397, %cond.true.379 ], [ %add402, %cond.false.398 ]
  %119 = load i64, i64* %width, align 8
  %sub405 = sub nsw i64 %cond404, %119
  %cmp406 = icmp slt i64 %110, %sub405
  br i1 %cmp406, label %cond.true.466, label %lor.lhs.false.452

cond.false.408:                                   ; preds = %cond.true.369
  %120 = load i64, i64* %width, align 8
  %mul409 = mul nsw i64 0, %120
  %121 = load i64, i64* %thiswidth, align 8
  %add410 = add nsw i64 %mul409, %121
  %mul411 = mul nsw i64 0, %add410
  %sub412 = sub nsw i64 %mul411, 1
  %cmp413 = icmp slt i64 %sub412, 0
  br i1 %cmp413, label %cond.true.415, label %cond.false.424

cond.true.415:                                    ; preds = %cond.false.408
  %122 = load i64, i64* %width, align 8
  %mul416 = mul nsw i64 0, %122
  %123 = load i64, i64* %thiswidth, align 8
  %add417 = add nsw i64 %mul416, %123
  %mul418 = mul nsw i64 0, %add417
  %add419 = add nsw i64 %mul418, 1
  %shl420 = shl i64 %add419, 62
  %sub421 = sub nsw i64 %shl420, 1
  %mul422 = mul nsw i64 %sub421, 2
  %add423 = add nsw i64 %mul422, 1
  br label %cond.end.429

cond.false.424:                                   ; preds = %cond.false.408
  %124 = load i64, i64* %width, align 8
  %mul425 = mul nsw i64 0, %124
  %125 = load i64, i64* %thiswidth, align 8
  %add426 = add nsw i64 %mul425, %125
  %mul427 = mul nsw i64 0, %add426
  %sub428 = sub nsw i64 %mul427, 1
  br label %cond.end.429

cond.end.429:                                     ; preds = %cond.false.424, %cond.true.415
  %cond430 = phi i64 [ %add423, %cond.true.415 ], [ %sub428, %cond.false.424 ]
  %126 = load i64, i64* %width, align 8
  %sub431 = sub nsw i64 %cond430, %126
  %127 = load i64, i64* %thiswidth, align 8
  %cmp432 = icmp slt i64 %sub431, %127
  br i1 %cmp432, label %cond.true.466, label %lor.lhs.false.452

cond.false.434:                                   ; preds = %cond.end.365
  %128 = load i64, i64* %thiswidth, align 8
  %cmp435 = icmp slt i64 %128, 0
  br i1 %cmp435, label %cond.true.437, label %cond.false.441

cond.true.437:                                    ; preds = %cond.false.434
  %129 = load i64, i64* %width, align 8
  %130 = load i64, i64* %thiswidth, align 8
  %131 = load i64, i64* %width, align 8
  %add438 = add nsw i64 %130, %131
  %cmp439 = icmp sle i64 %129, %add438
  br i1 %cmp439, label %cond.true.466, label %lor.lhs.false.452

cond.false.441:                                   ; preds = %cond.false.434
  %132 = load i64, i64* %width, align 8
  %cmp442 = icmp slt i64 %132, 0
  br i1 %cmp442, label %cond.true.444, label %cond.false.448

cond.true.444:                                    ; preds = %cond.false.441
  %133 = load i64, i64* %thiswidth, align 8
  %134 = load i64, i64* %thiswidth, align 8
  %135 = load i64, i64* %width, align 8
  %add445 = add nsw i64 %134, %135
  %cmp446 = icmp sle i64 %133, %add445
  br i1 %cmp446, label %cond.true.466, label %lor.lhs.false.452

cond.false.448:                                   ; preds = %cond.false.441
  %136 = load i64, i64* %thiswidth, align 8
  %137 = load i64, i64* %width, align 8
  %add449 = add nsw i64 %136, %137
  %138 = load i64, i64* %width, align 8
  %cmp450 = icmp slt i64 %add449, %138
  br i1 %cmp450, label %cond.true.466, label %lor.lhs.false.452

lor.lhs.false.452:                                ; preds = %cond.false.448, %cond.true.444, %cond.true.437, %cond.end.429, %cond.end.403
  %139 = load i64, i64* %thiswidth, align 8
  %140 = load i64, i64* %width, align 8
  %add453 = add nsw i64 %139, %140
  %mul454 = mul nsw i64 0, %add453
  %sub455 = sub nsw i64 %mul454, 1
  %cmp456 = icmp slt i64 %sub455, 0
  br i1 %cmp456, label %land.lhs.true.458, label %lor.lhs.false.462

land.lhs.true.458:                                ; preds = %lor.lhs.false.452
  %141 = load i64, i64* %thiswidth, align 8
  %142 = load i64, i64* %width, align 8
  %add459 = add nsw i64 %141, %142
  %cmp460 = icmp slt i64 %add459, -128
  br i1 %cmp460, label %cond.true.466, label %lor.lhs.false.462

lor.lhs.false.462:                                ; preds = %land.lhs.true.458, %lor.lhs.false.452
  %143 = load i64, i64* %thiswidth, align 8
  %144 = load i64, i64* %width, align 8
  %add463 = add nsw i64 %143, %144
  %cmp464 = icmp slt i64 127, %add463
  br i1 %cmp464, label %cond.true.466, label %cond.false.495

cond.true.466:                                    ; preds = %lor.lhs.false.462, %land.lhs.true.458, %cond.false.448, %cond.true.444, %cond.true.437, %cond.end.429, %cond.end.403
  %145 = load i64, i64* %thiswidth, align 8
  %conv467 = trunc i64 %145 to i8
  %conv468 = zext i8 %conv467 to i32
  %146 = load i64, i64* %width, align 8
  %conv469 = trunc i64 %146 to i8
  %conv470 = zext i8 %conv469 to i32
  %add471 = add nsw i32 %conv468, %conv470
  %cmp472 = icmp sle i32 %add471, 127
  br i1 %cmp472, label %cond.true.474, label %cond.false.482

cond.true.474:                                    ; preds = %cond.true.466
  %147 = load i64, i64* %thiswidth, align 8
  %conv475 = trunc i64 %147 to i8
  %conv476 = zext i8 %conv475 to i32
  %148 = load i64, i64* %width, align 8
  %conv477 = trunc i64 %148 to i8
  %conv478 = zext i8 %conv477 to i32
  %add479 = add nsw i32 %conv476, %conv478
  %conv480 = trunc i32 %add479 to i8
  %conv481 = sext i8 %conv480 to i32
  br label %cond.end.492

cond.false.482:                                   ; preds = %cond.true.466
  %149 = load i64, i64* %thiswidth, align 8
  %conv483 = trunc i64 %149 to i8
  %conv484 = zext i8 %conv483 to i32
  %150 = load i64, i64* %width, align 8
  %conv485 = trunc i64 %150 to i8
  %conv486 = zext i8 %conv485 to i32
  %add487 = add nsw i32 %conv484, %conv486
  %sub488 = sub nsw i32 %add487, -128
  %conv489 = trunc i32 %sub488 to i8
  %conv490 = sext i8 %conv489 to i32
  %add491 = add nsw i32 %conv490, -128
  br label %cond.end.492

cond.end.492:                                     ; preds = %cond.false.482, %cond.true.474
  %cond493 = phi i32 [ %conv481, %cond.true.474 ], [ %add491, %cond.false.482 ]
  %conv494 = sext i32 %cond493 to i64
  store i64 %conv494, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.495:                                   ; preds = %lor.lhs.false.462
  %151 = load i64, i64* %thiswidth, align 8
  %conv496 = trunc i64 %151 to i8
  %conv497 = zext i8 %conv496 to i32
  %152 = load i64, i64* %width, align 8
  %conv498 = trunc i64 %152 to i8
  %conv499 = zext i8 %conv498 to i32
  %add500 = add nsw i32 %conv497, %conv499
  %cmp501 = icmp sle i32 %add500, 127
  br i1 %cmp501, label %cond.true.503, label %cond.false.511

cond.true.503:                                    ; preds = %cond.false.495
  %153 = load i64, i64* %thiswidth, align 8
  %conv504 = trunc i64 %153 to i8
  %conv505 = zext i8 %conv504 to i32
  %154 = load i64, i64* %width, align 8
  %conv506 = trunc i64 %154 to i8
  %conv507 = zext i8 %conv506 to i32
  %add508 = add nsw i32 %conv505, %conv507
  %conv509 = trunc i32 %add508 to i8
  %conv510 = sext i8 %conv509 to i32
  br label %cond.end.521

cond.false.511:                                   ; preds = %cond.false.495
  %155 = load i64, i64* %thiswidth, align 8
  %conv512 = trunc i64 %155 to i8
  %conv513 = zext i8 %conv512 to i32
  %156 = load i64, i64* %width, align 8
  %conv514 = trunc i64 %156 to i8
  %conv515 = zext i8 %conv514 to i32
  %add516 = add nsw i32 %conv513, %conv515
  %sub517 = sub nsw i32 %add516, -128
  %conv518 = trunc i32 %sub517 to i8
  %conv519 = sext i8 %conv518 to i32
  %add520 = add nsw i32 %conv519, -128
  br label %cond.end.521

cond.end.521:                                     ; preds = %cond.false.511, %cond.true.503
  %cond522 = phi i32 [ %conv510, %cond.true.503 ], [ %add520, %cond.false.511 ]
  %conv523 = sext i32 %cond522 to i64
  store i64 %conv523, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.524:                                   ; preds = %if.end
  br i1 false, label %cond.true.525, label %cond.false.992

cond.true.525:                                    ; preds = %cond.false.524
  br i1 false, label %cond.true.526, label %cond.false.802

cond.true.526:                                    ; preds = %cond.true.525
  %157 = load i64, i64* %width, align 8
  %conv527 = trunc i64 %157 to i16
  %conv528 = sext i16 %conv527 to i32
  %mul529 = mul nsw i32 0, %conv528
  %158 = load i64, i64* %thiswidth, align 8
  %conv530 = trunc i64 %158 to i16
  %conv531 = sext i16 %conv530 to i32
  %add532 = add nsw i32 %mul529, %conv531
  %mul533 = mul nsw i32 0, %add532
  %sub534 = sub nsw i32 %mul533, 1
  %cmp535 = icmp slt i32 %sub534, 0
  br i1 %cmp535, label %cond.true.537, label %cond.false.563

cond.true.537:                                    ; preds = %cond.true.526
  %159 = load i64, i64* %width, align 8
  %conv538 = trunc i64 %159 to i16
  %conv539 = sext i16 %conv538 to i32
  %mul540 = mul nsw i32 0, %conv539
  %160 = load i64, i64* %thiswidth, align 8
  %conv541 = trunc i64 %160 to i16
  %conv542 = sext i16 %conv541 to i32
  %add543 = add nsw i32 %mul540, %conv542
  %mul544 = mul nsw i32 0, %add543
  %add545 = add nsw i32 %mul544, 0
  %neg546 = xor i32 %add545, -1
  %cmp547 = icmp eq i32 %neg546, -1
  %conv548 = zext i1 %cmp547 to i32
  %sub549 = sub nsw i32 0, %conv548
  %161 = load i64, i64* %width, align 8
  %conv550 = trunc i64 %161 to i16
  %conv551 = sext i16 %conv550 to i32
  %mul552 = mul nsw i32 0, %conv551
  %162 = load i64, i64* %thiswidth, align 8
  %conv553 = trunc i64 %162 to i16
  %conv554 = sext i16 %conv553 to i32
  %add555 = add nsw i32 %mul552, %conv554
  %mul556 = mul nsw i32 0, %add555
  %add557 = add nsw i32 %mul556, 1
  %shl558 = shl i32 %add557, 30
  %sub559 = sub nsw i32 %shl558, 1
  %mul560 = mul nsw i32 %sub559, 2
  %add561 = add nsw i32 %mul560, 1
  %sub562 = sub nsw i32 %sub549, %add561
  br label %cond.end.572

cond.false.563:                                   ; preds = %cond.true.526
  %163 = load i64, i64* %width, align 8
  %conv564 = trunc i64 %163 to i16
  %conv565 = sext i16 %conv564 to i32
  %mul566 = mul nsw i32 0, %conv565
  %164 = load i64, i64* %thiswidth, align 8
  %conv567 = trunc i64 %164 to i16
  %conv568 = sext i16 %conv567 to i32
  %add569 = add nsw i32 %mul566, %conv568
  %mul570 = mul nsw i32 0, %add569
  %add571 = add nsw i32 %mul570, 0
  br label %cond.end.572

cond.end.572:                                     ; preds = %cond.false.563, %cond.true.537
  %cond573 = phi i32 [ %sub562, %cond.true.537 ], [ %add571, %cond.false.563 ]
  %cmp574 = icmp slt i32 %cond573, 0
  br i1 %cmp574, label %cond.true.576, label %cond.false.678

cond.true.576:                                    ; preds = %cond.end.572
  %165 = load i64, i64* %width, align 8
  %conv577 = trunc i64 %165 to i16
  %conv578 = sext i16 %conv577 to i32
  %cmp579 = icmp slt i32 %conv578, 0
  br i1 %cmp579, label %cond.true.581, label %cond.false.636

cond.true.581:                                    ; preds = %cond.true.576
  %166 = load i64, i64* %thiswidth, align 8
  %conv582 = trunc i64 %166 to i16
  %conv583 = sext i16 %conv582 to i32
  %167 = load i64, i64* %width, align 8
  %conv584 = trunc i64 %167 to i16
  %conv585 = sext i16 %conv584 to i32
  %mul586 = mul nsw i32 0, %conv585
  %168 = load i64, i64* %thiswidth, align 8
  %conv587 = trunc i64 %168 to i16
  %conv588 = sext i16 %conv587 to i32
  %add589 = add nsw i32 %mul586, %conv588
  %mul590 = mul nsw i32 0, %add589
  %sub591 = sub nsw i32 %mul590, 1
  %cmp592 = icmp slt i32 %sub591, 0
  br i1 %cmp592, label %cond.true.594, label %cond.false.620

cond.true.594:                                    ; preds = %cond.true.581
  %169 = load i64, i64* %width, align 8
  %conv595 = trunc i64 %169 to i16
  %conv596 = sext i16 %conv595 to i32
  %mul597 = mul nsw i32 0, %conv596
  %170 = load i64, i64* %thiswidth, align 8
  %conv598 = trunc i64 %170 to i16
  %conv599 = sext i16 %conv598 to i32
  %add600 = add nsw i32 %mul597, %conv599
  %mul601 = mul nsw i32 0, %add600
  %add602 = add nsw i32 %mul601, 0
  %neg603 = xor i32 %add602, -1
  %cmp604 = icmp eq i32 %neg603, -1
  %conv605 = zext i1 %cmp604 to i32
  %sub606 = sub nsw i32 0, %conv605
  %171 = load i64, i64* %width, align 8
  %conv607 = trunc i64 %171 to i16
  %conv608 = sext i16 %conv607 to i32
  %mul609 = mul nsw i32 0, %conv608
  %172 = load i64, i64* %thiswidth, align 8
  %conv610 = trunc i64 %172 to i16
  %conv611 = sext i16 %conv610 to i32
  %add612 = add nsw i32 %mul609, %conv611
  %mul613 = mul nsw i32 0, %add612
  %add614 = add nsw i32 %mul613, 1
  %shl615 = shl i32 %add614, 30
  %sub616 = sub nsw i32 %shl615, 1
  %mul617 = mul nsw i32 %sub616, 2
  %add618 = add nsw i32 %mul617, 1
  %sub619 = sub nsw i32 %sub606, %add618
  br label %cond.end.629

cond.false.620:                                   ; preds = %cond.true.581
  %173 = load i64, i64* %width, align 8
  %conv621 = trunc i64 %173 to i16
  %conv622 = sext i16 %conv621 to i32
  %mul623 = mul nsw i32 0, %conv622
  %174 = load i64, i64* %thiswidth, align 8
  %conv624 = trunc i64 %174 to i16
  %conv625 = sext i16 %conv624 to i32
  %add626 = add nsw i32 %mul623, %conv625
  %mul627 = mul nsw i32 0, %add626
  %add628 = add nsw i32 %mul627, 0
  br label %cond.end.629

cond.end.629:                                     ; preds = %cond.false.620, %cond.true.594
  %cond630 = phi i32 [ %sub619, %cond.true.594 ], [ %add628, %cond.false.620 ]
  %175 = load i64, i64* %width, align 8
  %conv631 = trunc i64 %175 to i16
  %conv632 = sext i16 %conv631 to i32
  %sub633 = sub nsw i32 %cond630, %conv632
  %cmp634 = icmp slt i32 %conv583, %sub633
  br i1 %cmp634, label %cond.true.744, label %lor.lhs.false.718

cond.false.636:                                   ; preds = %cond.true.576
  %176 = load i64, i64* %width, align 8
  %conv637 = trunc i64 %176 to i16
  %conv638 = sext i16 %conv637 to i32
  %mul639 = mul nsw i32 0, %conv638
  %177 = load i64, i64* %thiswidth, align 8
  %conv640 = trunc i64 %177 to i16
  %conv641 = sext i16 %conv640 to i32
  %add642 = add nsw i32 %mul639, %conv641
  %mul643 = mul nsw i32 0, %add642
  %sub644 = sub nsw i32 %mul643, 1
  %cmp645 = icmp slt i32 %sub644, 0
  br i1 %cmp645, label %cond.true.647, label %cond.false.660

cond.true.647:                                    ; preds = %cond.false.636
  %178 = load i64, i64* %width, align 8
  %conv648 = trunc i64 %178 to i16
  %conv649 = sext i16 %conv648 to i32
  %mul650 = mul nsw i32 0, %conv649
  %179 = load i64, i64* %thiswidth, align 8
  %conv651 = trunc i64 %179 to i16
  %conv652 = sext i16 %conv651 to i32
  %add653 = add nsw i32 %mul650, %conv652
  %mul654 = mul nsw i32 0, %add653
  %add655 = add nsw i32 %mul654, 1
  %shl656 = shl i32 %add655, 30
  %sub657 = sub nsw i32 %shl656, 1
  %mul658 = mul nsw i32 %sub657, 2
  %add659 = add nsw i32 %mul658, 1
  br label %cond.end.669

cond.false.660:                                   ; preds = %cond.false.636
  %180 = load i64, i64* %width, align 8
  %conv661 = trunc i64 %180 to i16
  %conv662 = sext i16 %conv661 to i32
  %mul663 = mul nsw i32 0, %conv662
  %181 = load i64, i64* %thiswidth, align 8
  %conv664 = trunc i64 %181 to i16
  %conv665 = sext i16 %conv664 to i32
  %add666 = add nsw i32 %mul663, %conv665
  %mul667 = mul nsw i32 0, %add666
  %sub668 = sub nsw i32 %mul667, 1
  br label %cond.end.669

cond.end.669:                                     ; preds = %cond.false.660, %cond.true.647
  %cond670 = phi i32 [ %add659, %cond.true.647 ], [ %sub668, %cond.false.660 ]
  %182 = load i64, i64* %width, align 8
  %conv671 = trunc i64 %182 to i16
  %conv672 = sext i16 %conv671 to i32
  %sub673 = sub nsw i32 %cond670, %conv672
  %183 = load i64, i64* %thiswidth, align 8
  %conv674 = trunc i64 %183 to i16
  %conv675 = sext i16 %conv674 to i32
  %cmp676 = icmp slt i32 %sub673, %conv675
  br i1 %cmp676, label %cond.true.744, label %lor.lhs.false.718

cond.false.678:                                   ; preds = %cond.end.572
  %184 = load i64, i64* %thiswidth, align 8
  %conv679 = trunc i64 %184 to i16
  %conv680 = sext i16 %conv679 to i32
  %cmp681 = icmp slt i32 %conv680, 0
  br i1 %cmp681, label %cond.true.683, label %cond.false.693

cond.true.683:                                    ; preds = %cond.false.678
  %185 = load i64, i64* %width, align 8
  %conv684 = trunc i64 %185 to i16
  %conv685 = sext i16 %conv684 to i32
  %186 = load i64, i64* %thiswidth, align 8
  %conv686 = trunc i64 %186 to i16
  %conv687 = sext i16 %conv686 to i32
  %187 = load i64, i64* %width, align 8
  %conv688 = trunc i64 %187 to i16
  %conv689 = sext i16 %conv688 to i32
  %add690 = add nsw i32 %conv687, %conv689
  %cmp691 = icmp sle i32 %conv685, %add690
  br i1 %cmp691, label %cond.true.744, label %lor.lhs.false.718

cond.false.693:                                   ; preds = %cond.false.678
  %188 = load i64, i64* %width, align 8
  %conv694 = trunc i64 %188 to i16
  %conv695 = sext i16 %conv694 to i32
  %cmp696 = icmp slt i32 %conv695, 0
  br i1 %cmp696, label %cond.true.698, label %cond.false.708

cond.true.698:                                    ; preds = %cond.false.693
  %189 = load i64, i64* %thiswidth, align 8
  %conv699 = trunc i64 %189 to i16
  %conv700 = sext i16 %conv699 to i32
  %190 = load i64, i64* %thiswidth, align 8
  %conv701 = trunc i64 %190 to i16
  %conv702 = sext i16 %conv701 to i32
  %191 = load i64, i64* %width, align 8
  %conv703 = trunc i64 %191 to i16
  %conv704 = sext i16 %conv703 to i32
  %add705 = add nsw i32 %conv702, %conv704
  %cmp706 = icmp sle i32 %conv700, %add705
  br i1 %cmp706, label %cond.true.744, label %lor.lhs.false.718

cond.false.708:                                   ; preds = %cond.false.693
  %192 = load i64, i64* %thiswidth, align 8
  %conv709 = trunc i64 %192 to i16
  %conv710 = sext i16 %conv709 to i32
  %193 = load i64, i64* %width, align 8
  %conv711 = trunc i64 %193 to i16
  %conv712 = sext i16 %conv711 to i32
  %add713 = add nsw i32 %conv710, %conv712
  %194 = load i64, i64* %width, align 8
  %conv714 = trunc i64 %194 to i16
  %conv715 = sext i16 %conv714 to i32
  %cmp716 = icmp slt i32 %add713, %conv715
  br i1 %cmp716, label %cond.true.744, label %lor.lhs.false.718

lor.lhs.false.718:                                ; preds = %cond.false.708, %cond.true.698, %cond.true.683, %cond.end.669, %cond.end.629
  %195 = load i64, i64* %thiswidth, align 8
  %conv719 = trunc i64 %195 to i16
  %conv720 = sext i16 %conv719 to i32
  %196 = load i64, i64* %width, align 8
  %conv721 = trunc i64 %196 to i16
  %conv722 = sext i16 %conv721 to i32
  %add723 = add nsw i32 %conv720, %conv722
  %mul724 = mul nsw i32 0, %add723
  %sub725 = sub nsw i32 %mul724, 1
  %cmp726 = icmp slt i32 %sub725, 0
  br i1 %cmp726, label %land.lhs.true.728, label %lor.lhs.false.736

land.lhs.true.728:                                ; preds = %lor.lhs.false.718
  %197 = load i64, i64* %thiswidth, align 8
  %conv729 = trunc i64 %197 to i16
  %conv730 = sext i16 %conv729 to i32
  %198 = load i64, i64* %width, align 8
  %conv731 = trunc i64 %198 to i16
  %conv732 = sext i16 %conv731 to i32
  %add733 = add nsw i32 %conv730, %conv732
  %cmp734 = icmp slt i32 %add733, -32768
  br i1 %cmp734, label %cond.true.744, label %lor.lhs.false.736

lor.lhs.false.736:                                ; preds = %land.lhs.true.728, %lor.lhs.false.718
  %199 = load i64, i64* %thiswidth, align 8
  %conv737 = trunc i64 %199 to i16
  %conv738 = sext i16 %conv737 to i32
  %200 = load i64, i64* %width, align 8
  %conv739 = trunc i64 %200 to i16
  %conv740 = sext i16 %conv739 to i32
  %add741 = add nsw i32 %conv738, %conv740
  %cmp742 = icmp slt i32 32767, %add741
  br i1 %cmp742, label %cond.true.744, label %cond.false.773

cond.true.744:                                    ; preds = %lor.lhs.false.736, %land.lhs.true.728, %cond.false.708, %cond.true.698, %cond.true.683, %cond.end.669, %cond.end.629
  %201 = load i64, i64* %thiswidth, align 8
  %conv745 = trunc i64 %201 to i16
  %conv746 = zext i16 %conv745 to i32
  %202 = load i64, i64* %width, align 8
  %conv747 = trunc i64 %202 to i16
  %conv748 = zext i16 %conv747 to i32
  %add749 = add nsw i32 %conv746, %conv748
  %cmp750 = icmp sle i32 %add749, 32767
  br i1 %cmp750, label %cond.true.752, label %cond.false.760

cond.true.752:                                    ; preds = %cond.true.744
  %203 = load i64, i64* %thiswidth, align 8
  %conv753 = trunc i64 %203 to i16
  %conv754 = zext i16 %conv753 to i32
  %204 = load i64, i64* %width, align 8
  %conv755 = trunc i64 %204 to i16
  %conv756 = zext i16 %conv755 to i32
  %add757 = add nsw i32 %conv754, %conv756
  %conv758 = trunc i32 %add757 to i16
  %conv759 = sext i16 %conv758 to i32
  br label %cond.end.770

cond.false.760:                                   ; preds = %cond.true.744
  %205 = load i64, i64* %thiswidth, align 8
  %conv761 = trunc i64 %205 to i16
  %conv762 = zext i16 %conv761 to i32
  %206 = load i64, i64* %width, align 8
  %conv763 = trunc i64 %206 to i16
  %conv764 = zext i16 %conv763 to i32
  %add765 = add nsw i32 %conv762, %conv764
  %sub766 = sub nsw i32 %add765, -32768
  %conv767 = trunc i32 %sub766 to i16
  %conv768 = sext i16 %conv767 to i32
  %add769 = add nsw i32 %conv768, -32768
  br label %cond.end.770

cond.end.770:                                     ; preds = %cond.false.760, %cond.true.752
  %cond771 = phi i32 [ %conv759, %cond.true.752 ], [ %add769, %cond.false.760 ]
  %conv772 = sext i32 %cond771 to i64
  store i64 %conv772, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.773:                                   ; preds = %lor.lhs.false.736
  %207 = load i64, i64* %thiswidth, align 8
  %conv774 = trunc i64 %207 to i16
  %conv775 = zext i16 %conv774 to i32
  %208 = load i64, i64* %width, align 8
  %conv776 = trunc i64 %208 to i16
  %conv777 = zext i16 %conv776 to i32
  %add778 = add nsw i32 %conv775, %conv777
  %cmp779 = icmp sle i32 %add778, 32767
  br i1 %cmp779, label %cond.true.781, label %cond.false.789

cond.true.781:                                    ; preds = %cond.false.773
  %209 = load i64, i64* %thiswidth, align 8
  %conv782 = trunc i64 %209 to i16
  %conv783 = zext i16 %conv782 to i32
  %210 = load i64, i64* %width, align 8
  %conv784 = trunc i64 %210 to i16
  %conv785 = zext i16 %conv784 to i32
  %add786 = add nsw i32 %conv783, %conv785
  %conv787 = trunc i32 %add786 to i16
  %conv788 = sext i16 %conv787 to i32
  br label %cond.end.799

cond.false.789:                                   ; preds = %cond.false.773
  %211 = load i64, i64* %thiswidth, align 8
  %conv790 = trunc i64 %211 to i16
  %conv791 = zext i16 %conv790 to i32
  %212 = load i64, i64* %width, align 8
  %conv792 = trunc i64 %212 to i16
  %conv793 = zext i16 %conv792 to i32
  %add794 = add nsw i32 %conv791, %conv793
  %sub795 = sub nsw i32 %add794, -32768
  %conv796 = trunc i32 %sub795 to i16
  %conv797 = sext i16 %conv796 to i32
  %add798 = add nsw i32 %conv797, -32768
  br label %cond.end.799

cond.end.799:                                     ; preds = %cond.false.789, %cond.true.781
  %cond800 = phi i32 [ %conv788, %cond.true.781 ], [ %add798, %cond.false.789 ]
  %conv801 = sext i32 %cond800 to i64
  store i64 %conv801, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.802:                                   ; preds = %cond.true.525
  %213 = load i64, i64* %width, align 8
  %mul803 = mul nsw i64 0, %213
  %214 = load i64, i64* %thiswidth, align 8
  %add804 = add nsw i64 %mul803, %214
  %mul805 = mul nsw i64 0, %add804
  %sub806 = sub nsw i64 %mul805, 1
  %cmp807 = icmp slt i64 %sub806, 0
  br i1 %cmp807, label %cond.true.809, label %cond.false.828

cond.true.809:                                    ; preds = %cond.false.802
  %215 = load i64, i64* %width, align 8
  %mul810 = mul nsw i64 0, %215
  %216 = load i64, i64* %thiswidth, align 8
  %add811 = add nsw i64 %mul810, %216
  %mul812 = mul nsw i64 0, %add811
  %add813 = add nsw i64 %mul812, 0
  %neg814 = xor i64 %add813, -1
  %cmp815 = icmp eq i64 %neg814, -1
  %conv816 = zext i1 %cmp815 to i32
  %sub817 = sub nsw i32 0, %conv816
  %conv818 = sext i32 %sub817 to i64
  %217 = load i64, i64* %width, align 8
  %mul819 = mul nsw i64 0, %217
  %218 = load i64, i64* %thiswidth, align 8
  %add820 = add nsw i64 %mul819, %218
  %mul821 = mul nsw i64 0, %add820
  %add822 = add nsw i64 %mul821, 1
  %shl823 = shl i64 %add822, 62
  %sub824 = sub nsw i64 %shl823, 1
  %mul825 = mul nsw i64 %sub824, 2
  %add826 = add nsw i64 %mul825, 1
  %sub827 = sub nsw i64 %conv818, %add826
  br label %cond.end.833

cond.false.828:                                   ; preds = %cond.false.802
  %219 = load i64, i64* %width, align 8
  %mul829 = mul nsw i64 0, %219
  %220 = load i64, i64* %thiswidth, align 8
  %add830 = add nsw i64 %mul829, %220
  %mul831 = mul nsw i64 0, %add830
  %add832 = add nsw i64 %mul831, 0
  br label %cond.end.833

cond.end.833:                                     ; preds = %cond.false.828, %cond.true.809
  %cond834 = phi i64 [ %sub827, %cond.true.809 ], [ %add832, %cond.false.828 ]
  %cmp835 = icmp slt i64 %cond834, 0
  br i1 %cmp835, label %cond.true.837, label %cond.false.902

cond.true.837:                                    ; preds = %cond.end.833
  %221 = load i64, i64* %width, align 8
  %cmp838 = icmp slt i64 %221, 0
  br i1 %cmp838, label %cond.true.840, label %cond.false.876

cond.true.840:                                    ; preds = %cond.true.837
  %222 = load i64, i64* %thiswidth, align 8
  %223 = load i64, i64* %width, align 8
  %mul841 = mul nsw i64 0, %223
  %224 = load i64, i64* %thiswidth, align 8
  %add842 = add nsw i64 %mul841, %224
  %mul843 = mul nsw i64 0, %add842
  %sub844 = sub nsw i64 %mul843, 1
  %cmp845 = icmp slt i64 %sub844, 0
  br i1 %cmp845, label %cond.true.847, label %cond.false.866

cond.true.847:                                    ; preds = %cond.true.840
  %225 = load i64, i64* %width, align 8
  %mul848 = mul nsw i64 0, %225
  %226 = load i64, i64* %thiswidth, align 8
  %add849 = add nsw i64 %mul848, %226
  %mul850 = mul nsw i64 0, %add849
  %add851 = add nsw i64 %mul850, 0
  %neg852 = xor i64 %add851, -1
  %cmp853 = icmp eq i64 %neg852, -1
  %conv854 = zext i1 %cmp853 to i32
  %sub855 = sub nsw i32 0, %conv854
  %conv856 = sext i32 %sub855 to i64
  %227 = load i64, i64* %width, align 8
  %mul857 = mul nsw i64 0, %227
  %228 = load i64, i64* %thiswidth, align 8
  %add858 = add nsw i64 %mul857, %228
  %mul859 = mul nsw i64 0, %add858
  %add860 = add nsw i64 %mul859, 1
  %shl861 = shl i64 %add860, 62
  %sub862 = sub nsw i64 %shl861, 1
  %mul863 = mul nsw i64 %sub862, 2
  %add864 = add nsw i64 %mul863, 1
  %sub865 = sub nsw i64 %conv856, %add864
  br label %cond.end.871

cond.false.866:                                   ; preds = %cond.true.840
  %229 = load i64, i64* %width, align 8
  %mul867 = mul nsw i64 0, %229
  %230 = load i64, i64* %thiswidth, align 8
  %add868 = add nsw i64 %mul867, %230
  %mul869 = mul nsw i64 0, %add868
  %add870 = add nsw i64 %mul869, 0
  br label %cond.end.871

cond.end.871:                                     ; preds = %cond.false.866, %cond.true.847
  %cond872 = phi i64 [ %sub865, %cond.true.847 ], [ %add870, %cond.false.866 ]
  %231 = load i64, i64* %width, align 8
  %sub873 = sub nsw i64 %cond872, %231
  %cmp874 = icmp slt i64 %222, %sub873
  br i1 %cmp874, label %cond.true.934, label %lor.lhs.false.920

cond.false.876:                                   ; preds = %cond.true.837
  %232 = load i64, i64* %width, align 8
  %mul877 = mul nsw i64 0, %232
  %233 = load i64, i64* %thiswidth, align 8
  %add878 = add nsw i64 %mul877, %233
  %mul879 = mul nsw i64 0, %add878
  %sub880 = sub nsw i64 %mul879, 1
  %cmp881 = icmp slt i64 %sub880, 0
  br i1 %cmp881, label %cond.true.883, label %cond.false.892

cond.true.883:                                    ; preds = %cond.false.876
  %234 = load i64, i64* %width, align 8
  %mul884 = mul nsw i64 0, %234
  %235 = load i64, i64* %thiswidth, align 8
  %add885 = add nsw i64 %mul884, %235
  %mul886 = mul nsw i64 0, %add885
  %add887 = add nsw i64 %mul886, 1
  %shl888 = shl i64 %add887, 62
  %sub889 = sub nsw i64 %shl888, 1
  %mul890 = mul nsw i64 %sub889, 2
  %add891 = add nsw i64 %mul890, 1
  br label %cond.end.897

cond.false.892:                                   ; preds = %cond.false.876
  %236 = load i64, i64* %width, align 8
  %mul893 = mul nsw i64 0, %236
  %237 = load i64, i64* %thiswidth, align 8
  %add894 = add nsw i64 %mul893, %237
  %mul895 = mul nsw i64 0, %add894
  %sub896 = sub nsw i64 %mul895, 1
  br label %cond.end.897

cond.end.897:                                     ; preds = %cond.false.892, %cond.true.883
  %cond898 = phi i64 [ %add891, %cond.true.883 ], [ %sub896, %cond.false.892 ]
  %238 = load i64, i64* %width, align 8
  %sub899 = sub nsw i64 %cond898, %238
  %239 = load i64, i64* %thiswidth, align 8
  %cmp900 = icmp slt i64 %sub899, %239
  br i1 %cmp900, label %cond.true.934, label %lor.lhs.false.920

cond.false.902:                                   ; preds = %cond.end.833
  %240 = load i64, i64* %thiswidth, align 8
  %cmp903 = icmp slt i64 %240, 0
  br i1 %cmp903, label %cond.true.905, label %cond.false.909

cond.true.905:                                    ; preds = %cond.false.902
  %241 = load i64, i64* %width, align 8
  %242 = load i64, i64* %thiswidth, align 8
  %243 = load i64, i64* %width, align 8
  %add906 = add nsw i64 %242, %243
  %cmp907 = icmp sle i64 %241, %add906
  br i1 %cmp907, label %cond.true.934, label %lor.lhs.false.920

cond.false.909:                                   ; preds = %cond.false.902
  %244 = load i64, i64* %width, align 8
  %cmp910 = icmp slt i64 %244, 0
  br i1 %cmp910, label %cond.true.912, label %cond.false.916

cond.true.912:                                    ; preds = %cond.false.909
  %245 = load i64, i64* %thiswidth, align 8
  %246 = load i64, i64* %thiswidth, align 8
  %247 = load i64, i64* %width, align 8
  %add913 = add nsw i64 %246, %247
  %cmp914 = icmp sle i64 %245, %add913
  br i1 %cmp914, label %cond.true.934, label %lor.lhs.false.920

cond.false.916:                                   ; preds = %cond.false.909
  %248 = load i64, i64* %thiswidth, align 8
  %249 = load i64, i64* %width, align 8
  %add917 = add nsw i64 %248, %249
  %250 = load i64, i64* %width, align 8
  %cmp918 = icmp slt i64 %add917, %250
  br i1 %cmp918, label %cond.true.934, label %lor.lhs.false.920

lor.lhs.false.920:                                ; preds = %cond.false.916, %cond.true.912, %cond.true.905, %cond.end.897, %cond.end.871
  %251 = load i64, i64* %thiswidth, align 8
  %252 = load i64, i64* %width, align 8
  %add921 = add nsw i64 %251, %252
  %mul922 = mul nsw i64 0, %add921
  %sub923 = sub nsw i64 %mul922, 1
  %cmp924 = icmp slt i64 %sub923, 0
  br i1 %cmp924, label %land.lhs.true.926, label %lor.lhs.false.930

land.lhs.true.926:                                ; preds = %lor.lhs.false.920
  %253 = load i64, i64* %thiswidth, align 8
  %254 = load i64, i64* %width, align 8
  %add927 = add nsw i64 %253, %254
  %cmp928 = icmp slt i64 %add927, -32768
  br i1 %cmp928, label %cond.true.934, label %lor.lhs.false.930

lor.lhs.false.930:                                ; preds = %land.lhs.true.926, %lor.lhs.false.920
  %255 = load i64, i64* %thiswidth, align 8
  %256 = load i64, i64* %width, align 8
  %add931 = add nsw i64 %255, %256
  %cmp932 = icmp slt i64 32767, %add931
  br i1 %cmp932, label %cond.true.934, label %cond.false.963

cond.true.934:                                    ; preds = %lor.lhs.false.930, %land.lhs.true.926, %cond.false.916, %cond.true.912, %cond.true.905, %cond.end.897, %cond.end.871
  %257 = load i64, i64* %thiswidth, align 8
  %conv935 = trunc i64 %257 to i16
  %conv936 = zext i16 %conv935 to i32
  %258 = load i64, i64* %width, align 8
  %conv937 = trunc i64 %258 to i16
  %conv938 = zext i16 %conv937 to i32
  %add939 = add nsw i32 %conv936, %conv938
  %cmp940 = icmp sle i32 %add939, 32767
  br i1 %cmp940, label %cond.true.942, label %cond.false.950

cond.true.942:                                    ; preds = %cond.true.934
  %259 = load i64, i64* %thiswidth, align 8
  %conv943 = trunc i64 %259 to i16
  %conv944 = zext i16 %conv943 to i32
  %260 = load i64, i64* %width, align 8
  %conv945 = trunc i64 %260 to i16
  %conv946 = zext i16 %conv945 to i32
  %add947 = add nsw i32 %conv944, %conv946
  %conv948 = trunc i32 %add947 to i16
  %conv949 = sext i16 %conv948 to i32
  br label %cond.end.960

cond.false.950:                                   ; preds = %cond.true.934
  %261 = load i64, i64* %thiswidth, align 8
  %conv951 = trunc i64 %261 to i16
  %conv952 = zext i16 %conv951 to i32
  %262 = load i64, i64* %width, align 8
  %conv953 = trunc i64 %262 to i16
  %conv954 = zext i16 %conv953 to i32
  %add955 = add nsw i32 %conv952, %conv954
  %sub956 = sub nsw i32 %add955, -32768
  %conv957 = trunc i32 %sub956 to i16
  %conv958 = sext i16 %conv957 to i32
  %add959 = add nsw i32 %conv958, -32768
  br label %cond.end.960

cond.end.960:                                     ; preds = %cond.false.950, %cond.true.942
  %cond961 = phi i32 [ %conv949, %cond.true.942 ], [ %add959, %cond.false.950 ]
  %conv962 = sext i32 %cond961 to i64
  store i64 %conv962, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.963:                                   ; preds = %lor.lhs.false.930
  %263 = load i64, i64* %thiswidth, align 8
  %conv964 = trunc i64 %263 to i16
  %conv965 = zext i16 %conv964 to i32
  %264 = load i64, i64* %width, align 8
  %conv966 = trunc i64 %264 to i16
  %conv967 = zext i16 %conv966 to i32
  %add968 = add nsw i32 %conv965, %conv967
  %cmp969 = icmp sle i32 %add968, 32767
  br i1 %cmp969, label %cond.true.971, label %cond.false.979

cond.true.971:                                    ; preds = %cond.false.963
  %265 = load i64, i64* %thiswidth, align 8
  %conv972 = trunc i64 %265 to i16
  %conv973 = zext i16 %conv972 to i32
  %266 = load i64, i64* %width, align 8
  %conv974 = trunc i64 %266 to i16
  %conv975 = zext i16 %conv974 to i32
  %add976 = add nsw i32 %conv973, %conv975
  %conv977 = trunc i32 %add976 to i16
  %conv978 = sext i16 %conv977 to i32
  br label %cond.end.989

cond.false.979:                                   ; preds = %cond.false.963
  %267 = load i64, i64* %thiswidth, align 8
  %conv980 = trunc i64 %267 to i16
  %conv981 = zext i16 %conv980 to i32
  %268 = load i64, i64* %width, align 8
  %conv982 = trunc i64 %268 to i16
  %conv983 = zext i16 %conv982 to i32
  %add984 = add nsw i32 %conv981, %conv983
  %sub985 = sub nsw i32 %add984, -32768
  %conv986 = trunc i32 %sub985 to i16
  %conv987 = sext i16 %conv986 to i32
  %add988 = add nsw i32 %conv987, -32768
  br label %cond.end.989

cond.end.989:                                     ; preds = %cond.false.979, %cond.true.971
  %cond990 = phi i32 [ %conv978, %cond.true.971 ], [ %add988, %cond.false.979 ]
  %conv991 = sext i32 %cond990 to i64
  store i64 %conv991, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.992:                                   ; preds = %cond.false.524
  br i1 false, label %cond.true.993, label %cond.false.1376

cond.true.993:                                    ; preds = %cond.false.992
  br i1 false, label %cond.true.994, label %cond.false.1206

cond.true.994:                                    ; preds = %cond.true.993
  %269 = load i64, i64* %width, align 8
  %conv995 = trunc i64 %269 to i32
  %mul996 = mul nsw i32 0, %conv995
  %270 = load i64, i64* %thiswidth, align 8
  %conv997 = trunc i64 %270 to i32
  %add998 = add nsw i32 %mul996, %conv997
  %mul999 = mul nsw i32 0, %add998
  %sub1000 = sub nsw i32 %mul999, 1
  %cmp1001 = icmp slt i32 %sub1000, 0
  br i1 %cmp1001, label %cond.true.1003, label %cond.false.1025

cond.true.1003:                                   ; preds = %cond.true.994
  %271 = load i64, i64* %width, align 8
  %conv1004 = trunc i64 %271 to i32
  %mul1005 = mul nsw i32 0, %conv1004
  %272 = load i64, i64* %thiswidth, align 8
  %conv1006 = trunc i64 %272 to i32
  %add1007 = add nsw i32 %mul1005, %conv1006
  %mul1008 = mul nsw i32 0, %add1007
  %add1009 = add nsw i32 %mul1008, 0
  %neg1010 = xor i32 %add1009, -1
  %cmp1011 = icmp eq i32 %neg1010, -1
  %conv1012 = zext i1 %cmp1011 to i32
  %sub1013 = sub nsw i32 0, %conv1012
  %273 = load i64, i64* %width, align 8
  %conv1014 = trunc i64 %273 to i32
  %mul1015 = mul nsw i32 0, %conv1014
  %274 = load i64, i64* %thiswidth, align 8
  %conv1016 = trunc i64 %274 to i32
  %add1017 = add nsw i32 %mul1015, %conv1016
  %mul1018 = mul nsw i32 0, %add1017
  %add1019 = add nsw i32 %mul1018, 1
  %shl1020 = shl i32 %add1019, 30
  %sub1021 = sub nsw i32 %shl1020, 1
  %mul1022 = mul nsw i32 %sub1021, 2
  %add1023 = add nsw i32 %mul1022, 1
  %sub1024 = sub nsw i32 %sub1013, %add1023
  br label %cond.end.1032

cond.false.1025:                                  ; preds = %cond.true.994
  %275 = load i64, i64* %width, align 8
  %conv1026 = trunc i64 %275 to i32
  %mul1027 = mul nsw i32 0, %conv1026
  %276 = load i64, i64* %thiswidth, align 8
  %conv1028 = trunc i64 %276 to i32
  %add1029 = add nsw i32 %mul1027, %conv1028
  %mul1030 = mul nsw i32 0, %add1029
  %add1031 = add nsw i32 %mul1030, 0
  br label %cond.end.1032

cond.end.1032:                                    ; preds = %cond.false.1025, %cond.true.1003
  %cond1033 = phi i32 [ %sub1024, %cond.true.1003 ], [ %add1031, %cond.false.1025 ]
  %cmp1034 = icmp slt i32 %cond1033, 0
  br i1 %cmp1034, label %cond.true.1036, label %cond.false.1119

cond.true.1036:                                   ; preds = %cond.end.1032
  %277 = load i64, i64* %width, align 8
  %conv1037 = trunc i64 %277 to i32
  %cmp1038 = icmp slt i32 %conv1037, 0
  br i1 %cmp1038, label %cond.true.1040, label %cond.false.1085

cond.true.1040:                                   ; preds = %cond.true.1036
  %278 = load i64, i64* %thiswidth, align 8
  %conv1041 = trunc i64 %278 to i32
  %279 = load i64, i64* %width, align 8
  %conv1042 = trunc i64 %279 to i32
  %mul1043 = mul nsw i32 0, %conv1042
  %280 = load i64, i64* %thiswidth, align 8
  %conv1044 = trunc i64 %280 to i32
  %add1045 = add nsw i32 %mul1043, %conv1044
  %mul1046 = mul nsw i32 0, %add1045
  %sub1047 = sub nsw i32 %mul1046, 1
  %cmp1048 = icmp slt i32 %sub1047, 0
  br i1 %cmp1048, label %cond.true.1050, label %cond.false.1072

cond.true.1050:                                   ; preds = %cond.true.1040
  %281 = load i64, i64* %width, align 8
  %conv1051 = trunc i64 %281 to i32
  %mul1052 = mul nsw i32 0, %conv1051
  %282 = load i64, i64* %thiswidth, align 8
  %conv1053 = trunc i64 %282 to i32
  %add1054 = add nsw i32 %mul1052, %conv1053
  %mul1055 = mul nsw i32 0, %add1054
  %add1056 = add nsw i32 %mul1055, 0
  %neg1057 = xor i32 %add1056, -1
  %cmp1058 = icmp eq i32 %neg1057, -1
  %conv1059 = zext i1 %cmp1058 to i32
  %sub1060 = sub nsw i32 0, %conv1059
  %283 = load i64, i64* %width, align 8
  %conv1061 = trunc i64 %283 to i32
  %mul1062 = mul nsw i32 0, %conv1061
  %284 = load i64, i64* %thiswidth, align 8
  %conv1063 = trunc i64 %284 to i32
  %add1064 = add nsw i32 %mul1062, %conv1063
  %mul1065 = mul nsw i32 0, %add1064
  %add1066 = add nsw i32 %mul1065, 1
  %shl1067 = shl i32 %add1066, 30
  %sub1068 = sub nsw i32 %shl1067, 1
  %mul1069 = mul nsw i32 %sub1068, 2
  %add1070 = add nsw i32 %mul1069, 1
  %sub1071 = sub nsw i32 %sub1060, %add1070
  br label %cond.end.1079

cond.false.1072:                                  ; preds = %cond.true.1040
  %285 = load i64, i64* %width, align 8
  %conv1073 = trunc i64 %285 to i32
  %mul1074 = mul nsw i32 0, %conv1073
  %286 = load i64, i64* %thiswidth, align 8
  %conv1075 = trunc i64 %286 to i32
  %add1076 = add nsw i32 %mul1074, %conv1075
  %mul1077 = mul nsw i32 0, %add1076
  %add1078 = add nsw i32 %mul1077, 0
  br label %cond.end.1079

cond.end.1079:                                    ; preds = %cond.false.1072, %cond.true.1050
  %cond1080 = phi i32 [ %sub1071, %cond.true.1050 ], [ %add1078, %cond.false.1072 ]
  %287 = load i64, i64* %width, align 8
  %conv1081 = trunc i64 %287 to i32
  %sub1082 = sub nsw i32 %cond1080, %conv1081
  %cmp1083 = icmp slt i32 %conv1041, %sub1082
  br i1 %cmp1083, label %cond.true.1168, label %lor.lhs.false.1148

cond.false.1085:                                  ; preds = %cond.true.1036
  %288 = load i64, i64* %width, align 8
  %conv1086 = trunc i64 %288 to i32
  %mul1087 = mul nsw i32 0, %conv1086
  %289 = load i64, i64* %thiswidth, align 8
  %conv1088 = trunc i64 %289 to i32
  %add1089 = add nsw i32 %mul1087, %conv1088
  %mul1090 = mul nsw i32 0, %add1089
  %sub1091 = sub nsw i32 %mul1090, 1
  %cmp1092 = icmp slt i32 %sub1091, 0
  br i1 %cmp1092, label %cond.true.1094, label %cond.false.1105

cond.true.1094:                                   ; preds = %cond.false.1085
  %290 = load i64, i64* %width, align 8
  %conv1095 = trunc i64 %290 to i32
  %mul1096 = mul nsw i32 0, %conv1095
  %291 = load i64, i64* %thiswidth, align 8
  %conv1097 = trunc i64 %291 to i32
  %add1098 = add nsw i32 %mul1096, %conv1097
  %mul1099 = mul nsw i32 0, %add1098
  %add1100 = add nsw i32 %mul1099, 1
  %shl1101 = shl i32 %add1100, 30
  %sub1102 = sub nsw i32 %shl1101, 1
  %mul1103 = mul nsw i32 %sub1102, 2
  %add1104 = add nsw i32 %mul1103, 1
  br label %cond.end.1112

cond.false.1105:                                  ; preds = %cond.false.1085
  %292 = load i64, i64* %width, align 8
  %conv1106 = trunc i64 %292 to i32
  %mul1107 = mul nsw i32 0, %conv1106
  %293 = load i64, i64* %thiswidth, align 8
  %conv1108 = trunc i64 %293 to i32
  %add1109 = add nsw i32 %mul1107, %conv1108
  %mul1110 = mul nsw i32 0, %add1109
  %sub1111 = sub nsw i32 %mul1110, 1
  br label %cond.end.1112

cond.end.1112:                                    ; preds = %cond.false.1105, %cond.true.1094
  %cond1113 = phi i32 [ %add1104, %cond.true.1094 ], [ %sub1111, %cond.false.1105 ]
  %294 = load i64, i64* %width, align 8
  %conv1114 = trunc i64 %294 to i32
  %sub1115 = sub nsw i32 %cond1113, %conv1114
  %295 = load i64, i64* %thiswidth, align 8
  %conv1116 = trunc i64 %295 to i32
  %cmp1117 = icmp slt i32 %sub1115, %conv1116
  br i1 %cmp1117, label %cond.true.1168, label %lor.lhs.false.1148

cond.false.1119:                                  ; preds = %cond.end.1032
  %296 = load i64, i64* %thiswidth, align 8
  %conv1120 = trunc i64 %296 to i32
  %cmp1121 = icmp slt i32 %conv1120, 0
  br i1 %cmp1121, label %cond.true.1123, label %cond.false.1130

cond.true.1123:                                   ; preds = %cond.false.1119
  %297 = load i64, i64* %width, align 8
  %conv1124 = trunc i64 %297 to i32
  %298 = load i64, i64* %thiswidth, align 8
  %conv1125 = trunc i64 %298 to i32
  %299 = load i64, i64* %width, align 8
  %conv1126 = trunc i64 %299 to i32
  %add1127 = add nsw i32 %conv1125, %conv1126
  %cmp1128 = icmp sle i32 %conv1124, %add1127
  br i1 %cmp1128, label %cond.true.1168, label %lor.lhs.false.1148

cond.false.1130:                                  ; preds = %cond.false.1119
  %300 = load i64, i64* %width, align 8
  %conv1131 = trunc i64 %300 to i32
  %cmp1132 = icmp slt i32 %conv1131, 0
  br i1 %cmp1132, label %cond.true.1134, label %cond.false.1141

cond.true.1134:                                   ; preds = %cond.false.1130
  %301 = load i64, i64* %thiswidth, align 8
  %conv1135 = trunc i64 %301 to i32
  %302 = load i64, i64* %thiswidth, align 8
  %conv1136 = trunc i64 %302 to i32
  %303 = load i64, i64* %width, align 8
  %conv1137 = trunc i64 %303 to i32
  %add1138 = add nsw i32 %conv1136, %conv1137
  %cmp1139 = icmp sle i32 %conv1135, %add1138
  br i1 %cmp1139, label %cond.true.1168, label %lor.lhs.false.1148

cond.false.1141:                                  ; preds = %cond.false.1130
  %304 = load i64, i64* %thiswidth, align 8
  %conv1142 = trunc i64 %304 to i32
  %305 = load i64, i64* %width, align 8
  %conv1143 = trunc i64 %305 to i32
  %add1144 = add nsw i32 %conv1142, %conv1143
  %306 = load i64, i64* %width, align 8
  %conv1145 = trunc i64 %306 to i32
  %cmp1146 = icmp slt i32 %add1144, %conv1145
  br i1 %cmp1146, label %cond.true.1168, label %lor.lhs.false.1148

lor.lhs.false.1148:                               ; preds = %cond.false.1141, %cond.true.1134, %cond.true.1123, %cond.end.1112, %cond.end.1079
  %307 = load i64, i64* %thiswidth, align 8
  %conv1149 = trunc i64 %307 to i32
  %308 = load i64, i64* %width, align 8
  %conv1150 = trunc i64 %308 to i32
  %add1151 = add nsw i32 %conv1149, %conv1150
  %mul1152 = mul nsw i32 0, %add1151
  %sub1153 = sub nsw i32 %mul1152, 1
  %cmp1154 = icmp slt i32 %sub1153, 0
  br i1 %cmp1154, label %land.lhs.true.1156, label %lor.lhs.false.1162

land.lhs.true.1156:                               ; preds = %lor.lhs.false.1148
  %309 = load i64, i64* %thiswidth, align 8
  %conv1157 = trunc i64 %309 to i32
  %310 = load i64, i64* %width, align 8
  %conv1158 = trunc i64 %310 to i32
  %add1159 = add nsw i32 %conv1157, %conv1158
  %cmp1160 = icmp slt i32 %add1159, -2147483648
  br i1 %cmp1160, label %cond.true.1168, label %lor.lhs.false.1162

lor.lhs.false.1162:                               ; preds = %land.lhs.true.1156, %lor.lhs.false.1148
  %311 = load i64, i64* %thiswidth, align 8
  %conv1163 = trunc i64 %311 to i32
  %312 = load i64, i64* %width, align 8
  %conv1164 = trunc i64 %312 to i32
  %add1165 = add nsw i32 %conv1163, %conv1164
  %cmp1166 = icmp slt i32 2147483647, %add1165
  br i1 %cmp1166, label %cond.true.1168, label %cond.false.1187

cond.true.1168:                                   ; preds = %lor.lhs.false.1162, %land.lhs.true.1156, %cond.false.1141, %cond.true.1134, %cond.true.1123, %cond.end.1112, %cond.end.1079
  %313 = load i64, i64* %thiswidth, align 8
  %conv1169 = trunc i64 %313 to i32
  %314 = load i64, i64* %width, align 8
  %conv1170 = trunc i64 %314 to i32
  %add1171 = add i32 %conv1169, %conv1170
  %cmp1172 = icmp ule i32 %add1171, 2147483647
  br i1 %cmp1172, label %cond.true.1174, label %cond.false.1178

cond.true.1174:                                   ; preds = %cond.true.1168
  %315 = load i64, i64* %thiswidth, align 8
  %conv1175 = trunc i64 %315 to i32
  %316 = load i64, i64* %width, align 8
  %conv1176 = trunc i64 %316 to i32
  %add1177 = add i32 %conv1175, %conv1176
  br label %cond.end.1184

cond.false.1178:                                  ; preds = %cond.true.1168
  %317 = load i64, i64* %thiswidth, align 8
  %conv1179 = trunc i64 %317 to i32
  %318 = load i64, i64* %width, align 8
  %conv1180 = trunc i64 %318 to i32
  %add1181 = add i32 %conv1179, %conv1180
  %sub1182 = sub i32 %add1181, -2147483648
  %add1183 = add nsw i32 %sub1182, -2147483648
  br label %cond.end.1184

cond.end.1184:                                    ; preds = %cond.false.1178, %cond.true.1174
  %cond1185 = phi i32 [ %add1177, %cond.true.1174 ], [ %add1183, %cond.false.1178 ]
  %conv1186 = sext i32 %cond1185 to i64
  store i64 %conv1186, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.1187:                                  ; preds = %lor.lhs.false.1162
  %319 = load i64, i64* %thiswidth, align 8
  %conv1188 = trunc i64 %319 to i32
  %320 = load i64, i64* %width, align 8
  %conv1189 = trunc i64 %320 to i32
  %add1190 = add i32 %conv1188, %conv1189
  %cmp1191 = icmp ule i32 %add1190, 2147483647
  br i1 %cmp1191, label %cond.true.1193, label %cond.false.1197

cond.true.1193:                                   ; preds = %cond.false.1187
  %321 = load i64, i64* %thiswidth, align 8
  %conv1194 = trunc i64 %321 to i32
  %322 = load i64, i64* %width, align 8
  %conv1195 = trunc i64 %322 to i32
  %add1196 = add i32 %conv1194, %conv1195
  br label %cond.end.1203

cond.false.1197:                                  ; preds = %cond.false.1187
  %323 = load i64, i64* %thiswidth, align 8
  %conv1198 = trunc i64 %323 to i32
  %324 = load i64, i64* %width, align 8
  %conv1199 = trunc i64 %324 to i32
  %add1200 = add i32 %conv1198, %conv1199
  %sub1201 = sub i32 %add1200, -2147483648
  %add1202 = add nsw i32 %sub1201, -2147483648
  br label %cond.end.1203

cond.end.1203:                                    ; preds = %cond.false.1197, %cond.true.1193
  %cond1204 = phi i32 [ %add1196, %cond.true.1193 ], [ %add1202, %cond.false.1197 ]
  %conv1205 = sext i32 %cond1204 to i64
  store i64 %conv1205, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.1206:                                  ; preds = %cond.true.993
  %325 = load i64, i64* %width, align 8
  %mul1207 = mul nsw i64 0, %325
  %326 = load i64, i64* %thiswidth, align 8
  %add1208 = add nsw i64 %mul1207, %326
  %mul1209 = mul nsw i64 0, %add1208
  %sub1210 = sub nsw i64 %mul1209, 1
  %cmp1211 = icmp slt i64 %sub1210, 0
  br i1 %cmp1211, label %cond.true.1213, label %cond.false.1232

cond.true.1213:                                   ; preds = %cond.false.1206
  %327 = load i64, i64* %width, align 8
  %mul1214 = mul nsw i64 0, %327
  %328 = load i64, i64* %thiswidth, align 8
  %add1215 = add nsw i64 %mul1214, %328
  %mul1216 = mul nsw i64 0, %add1215
  %add1217 = add nsw i64 %mul1216, 0
  %neg1218 = xor i64 %add1217, -1
  %cmp1219 = icmp eq i64 %neg1218, -1
  %conv1220 = zext i1 %cmp1219 to i32
  %sub1221 = sub nsw i32 0, %conv1220
  %conv1222 = sext i32 %sub1221 to i64
  %329 = load i64, i64* %width, align 8
  %mul1223 = mul nsw i64 0, %329
  %330 = load i64, i64* %thiswidth, align 8
  %add1224 = add nsw i64 %mul1223, %330
  %mul1225 = mul nsw i64 0, %add1224
  %add1226 = add nsw i64 %mul1225, 1
  %shl1227 = shl i64 %add1226, 62
  %sub1228 = sub nsw i64 %shl1227, 1
  %mul1229 = mul nsw i64 %sub1228, 2
  %add1230 = add nsw i64 %mul1229, 1
  %sub1231 = sub nsw i64 %conv1222, %add1230
  br label %cond.end.1237

cond.false.1232:                                  ; preds = %cond.false.1206
  %331 = load i64, i64* %width, align 8
  %mul1233 = mul nsw i64 0, %331
  %332 = load i64, i64* %thiswidth, align 8
  %add1234 = add nsw i64 %mul1233, %332
  %mul1235 = mul nsw i64 0, %add1234
  %add1236 = add nsw i64 %mul1235, 0
  br label %cond.end.1237

cond.end.1237:                                    ; preds = %cond.false.1232, %cond.true.1213
  %cond1238 = phi i64 [ %sub1231, %cond.true.1213 ], [ %add1236, %cond.false.1232 ]
  %cmp1239 = icmp slt i64 %cond1238, 0
  br i1 %cmp1239, label %cond.true.1241, label %cond.false.1306

cond.true.1241:                                   ; preds = %cond.end.1237
  %333 = load i64, i64* %width, align 8
  %cmp1242 = icmp slt i64 %333, 0
  br i1 %cmp1242, label %cond.true.1244, label %cond.false.1280

cond.true.1244:                                   ; preds = %cond.true.1241
  %334 = load i64, i64* %thiswidth, align 8
  %335 = load i64, i64* %width, align 8
  %mul1245 = mul nsw i64 0, %335
  %336 = load i64, i64* %thiswidth, align 8
  %add1246 = add nsw i64 %mul1245, %336
  %mul1247 = mul nsw i64 0, %add1246
  %sub1248 = sub nsw i64 %mul1247, 1
  %cmp1249 = icmp slt i64 %sub1248, 0
  br i1 %cmp1249, label %cond.true.1251, label %cond.false.1270

cond.true.1251:                                   ; preds = %cond.true.1244
  %337 = load i64, i64* %width, align 8
  %mul1252 = mul nsw i64 0, %337
  %338 = load i64, i64* %thiswidth, align 8
  %add1253 = add nsw i64 %mul1252, %338
  %mul1254 = mul nsw i64 0, %add1253
  %add1255 = add nsw i64 %mul1254, 0
  %neg1256 = xor i64 %add1255, -1
  %cmp1257 = icmp eq i64 %neg1256, -1
  %conv1258 = zext i1 %cmp1257 to i32
  %sub1259 = sub nsw i32 0, %conv1258
  %conv1260 = sext i32 %sub1259 to i64
  %339 = load i64, i64* %width, align 8
  %mul1261 = mul nsw i64 0, %339
  %340 = load i64, i64* %thiswidth, align 8
  %add1262 = add nsw i64 %mul1261, %340
  %mul1263 = mul nsw i64 0, %add1262
  %add1264 = add nsw i64 %mul1263, 1
  %shl1265 = shl i64 %add1264, 62
  %sub1266 = sub nsw i64 %shl1265, 1
  %mul1267 = mul nsw i64 %sub1266, 2
  %add1268 = add nsw i64 %mul1267, 1
  %sub1269 = sub nsw i64 %conv1260, %add1268
  br label %cond.end.1275

cond.false.1270:                                  ; preds = %cond.true.1244
  %341 = load i64, i64* %width, align 8
  %mul1271 = mul nsw i64 0, %341
  %342 = load i64, i64* %thiswidth, align 8
  %add1272 = add nsw i64 %mul1271, %342
  %mul1273 = mul nsw i64 0, %add1272
  %add1274 = add nsw i64 %mul1273, 0
  br label %cond.end.1275

cond.end.1275:                                    ; preds = %cond.false.1270, %cond.true.1251
  %cond1276 = phi i64 [ %sub1269, %cond.true.1251 ], [ %add1274, %cond.false.1270 ]
  %343 = load i64, i64* %width, align 8
  %sub1277 = sub nsw i64 %cond1276, %343
  %cmp1278 = icmp slt i64 %334, %sub1277
  br i1 %cmp1278, label %cond.true.1338, label %lor.lhs.false.1324

cond.false.1280:                                  ; preds = %cond.true.1241
  %344 = load i64, i64* %width, align 8
  %mul1281 = mul nsw i64 0, %344
  %345 = load i64, i64* %thiswidth, align 8
  %add1282 = add nsw i64 %mul1281, %345
  %mul1283 = mul nsw i64 0, %add1282
  %sub1284 = sub nsw i64 %mul1283, 1
  %cmp1285 = icmp slt i64 %sub1284, 0
  br i1 %cmp1285, label %cond.true.1287, label %cond.false.1296

cond.true.1287:                                   ; preds = %cond.false.1280
  %346 = load i64, i64* %width, align 8
  %mul1288 = mul nsw i64 0, %346
  %347 = load i64, i64* %thiswidth, align 8
  %add1289 = add nsw i64 %mul1288, %347
  %mul1290 = mul nsw i64 0, %add1289
  %add1291 = add nsw i64 %mul1290, 1
  %shl1292 = shl i64 %add1291, 62
  %sub1293 = sub nsw i64 %shl1292, 1
  %mul1294 = mul nsw i64 %sub1293, 2
  %add1295 = add nsw i64 %mul1294, 1
  br label %cond.end.1301

cond.false.1296:                                  ; preds = %cond.false.1280
  %348 = load i64, i64* %width, align 8
  %mul1297 = mul nsw i64 0, %348
  %349 = load i64, i64* %thiswidth, align 8
  %add1298 = add nsw i64 %mul1297, %349
  %mul1299 = mul nsw i64 0, %add1298
  %sub1300 = sub nsw i64 %mul1299, 1
  br label %cond.end.1301

cond.end.1301:                                    ; preds = %cond.false.1296, %cond.true.1287
  %cond1302 = phi i64 [ %add1295, %cond.true.1287 ], [ %sub1300, %cond.false.1296 ]
  %350 = load i64, i64* %width, align 8
  %sub1303 = sub nsw i64 %cond1302, %350
  %351 = load i64, i64* %thiswidth, align 8
  %cmp1304 = icmp slt i64 %sub1303, %351
  br i1 %cmp1304, label %cond.true.1338, label %lor.lhs.false.1324

cond.false.1306:                                  ; preds = %cond.end.1237
  %352 = load i64, i64* %thiswidth, align 8
  %cmp1307 = icmp slt i64 %352, 0
  br i1 %cmp1307, label %cond.true.1309, label %cond.false.1313

cond.true.1309:                                   ; preds = %cond.false.1306
  %353 = load i64, i64* %width, align 8
  %354 = load i64, i64* %thiswidth, align 8
  %355 = load i64, i64* %width, align 8
  %add1310 = add nsw i64 %354, %355
  %cmp1311 = icmp sle i64 %353, %add1310
  br i1 %cmp1311, label %cond.true.1338, label %lor.lhs.false.1324

cond.false.1313:                                  ; preds = %cond.false.1306
  %356 = load i64, i64* %width, align 8
  %cmp1314 = icmp slt i64 %356, 0
  br i1 %cmp1314, label %cond.true.1316, label %cond.false.1320

cond.true.1316:                                   ; preds = %cond.false.1313
  %357 = load i64, i64* %thiswidth, align 8
  %358 = load i64, i64* %thiswidth, align 8
  %359 = load i64, i64* %width, align 8
  %add1317 = add nsw i64 %358, %359
  %cmp1318 = icmp sle i64 %357, %add1317
  br i1 %cmp1318, label %cond.true.1338, label %lor.lhs.false.1324

cond.false.1320:                                  ; preds = %cond.false.1313
  %360 = load i64, i64* %thiswidth, align 8
  %361 = load i64, i64* %width, align 8
  %add1321 = add nsw i64 %360, %361
  %362 = load i64, i64* %width, align 8
  %cmp1322 = icmp slt i64 %add1321, %362
  br i1 %cmp1322, label %cond.true.1338, label %lor.lhs.false.1324

lor.lhs.false.1324:                               ; preds = %cond.false.1320, %cond.true.1316, %cond.true.1309, %cond.end.1301, %cond.end.1275
  %363 = load i64, i64* %thiswidth, align 8
  %364 = load i64, i64* %width, align 8
  %add1325 = add nsw i64 %363, %364
  %mul1326 = mul nsw i64 0, %add1325
  %sub1327 = sub nsw i64 %mul1326, 1
  %cmp1328 = icmp slt i64 %sub1327, 0
  br i1 %cmp1328, label %land.lhs.true.1330, label %lor.lhs.false.1334

land.lhs.true.1330:                               ; preds = %lor.lhs.false.1324
  %365 = load i64, i64* %thiswidth, align 8
  %366 = load i64, i64* %width, align 8
  %add1331 = add nsw i64 %365, %366
  %cmp1332 = icmp slt i64 %add1331, -2147483648
  br i1 %cmp1332, label %cond.true.1338, label %lor.lhs.false.1334

lor.lhs.false.1334:                               ; preds = %land.lhs.true.1330, %lor.lhs.false.1324
  %367 = load i64, i64* %thiswidth, align 8
  %368 = load i64, i64* %width, align 8
  %add1335 = add nsw i64 %367, %368
  %cmp1336 = icmp slt i64 2147483647, %add1335
  br i1 %cmp1336, label %cond.true.1338, label %cond.false.1357

cond.true.1338:                                   ; preds = %lor.lhs.false.1334, %land.lhs.true.1330, %cond.false.1320, %cond.true.1316, %cond.true.1309, %cond.end.1301, %cond.end.1275
  %369 = load i64, i64* %thiswidth, align 8
  %conv1339 = trunc i64 %369 to i32
  %370 = load i64, i64* %width, align 8
  %conv1340 = trunc i64 %370 to i32
  %add1341 = add i32 %conv1339, %conv1340
  %cmp1342 = icmp ule i32 %add1341, 2147483647
  br i1 %cmp1342, label %cond.true.1344, label %cond.false.1348

cond.true.1344:                                   ; preds = %cond.true.1338
  %371 = load i64, i64* %thiswidth, align 8
  %conv1345 = trunc i64 %371 to i32
  %372 = load i64, i64* %width, align 8
  %conv1346 = trunc i64 %372 to i32
  %add1347 = add i32 %conv1345, %conv1346
  br label %cond.end.1354

cond.false.1348:                                  ; preds = %cond.true.1338
  %373 = load i64, i64* %thiswidth, align 8
  %conv1349 = trunc i64 %373 to i32
  %374 = load i64, i64* %width, align 8
  %conv1350 = trunc i64 %374 to i32
  %add1351 = add i32 %conv1349, %conv1350
  %sub1352 = sub i32 %add1351, -2147483648
  %add1353 = add nsw i32 %sub1352, -2147483648
  br label %cond.end.1354

cond.end.1354:                                    ; preds = %cond.false.1348, %cond.true.1344
  %cond1355 = phi i32 [ %add1347, %cond.true.1344 ], [ %add1353, %cond.false.1348 ]
  %conv1356 = sext i32 %cond1355 to i64
  store i64 %conv1356, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.1357:                                  ; preds = %lor.lhs.false.1334
  %375 = load i64, i64* %thiswidth, align 8
  %conv1358 = trunc i64 %375 to i32
  %376 = load i64, i64* %width, align 8
  %conv1359 = trunc i64 %376 to i32
  %add1360 = add i32 %conv1358, %conv1359
  %cmp1361 = icmp ule i32 %add1360, 2147483647
  br i1 %cmp1361, label %cond.true.1363, label %cond.false.1367

cond.true.1363:                                   ; preds = %cond.false.1357
  %377 = load i64, i64* %thiswidth, align 8
  %conv1364 = trunc i64 %377 to i32
  %378 = load i64, i64* %width, align 8
  %conv1365 = trunc i64 %378 to i32
  %add1366 = add i32 %conv1364, %conv1365
  br label %cond.end.1373

cond.false.1367:                                  ; preds = %cond.false.1357
  %379 = load i64, i64* %thiswidth, align 8
  %conv1368 = trunc i64 %379 to i32
  %380 = load i64, i64* %width, align 8
  %conv1369 = trunc i64 %380 to i32
  %add1370 = add i32 %conv1368, %conv1369
  %sub1371 = sub i32 %add1370, -2147483648
  %add1372 = add nsw i32 %sub1371, -2147483648
  br label %cond.end.1373

cond.end.1373:                                    ; preds = %cond.false.1367, %cond.true.1363
  %cond1374 = phi i32 [ %add1366, %cond.true.1363 ], [ %add1372, %cond.false.1367 ]
  %conv1375 = sext i32 %cond1374 to i64
  store i64 %conv1375, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.1376:                                  ; preds = %cond.false.992
  br i1 true, label %cond.true.1377, label %cond.false.1690

cond.true.1377:                                   ; preds = %cond.false.1376
  br i1 false, label %cond.true.1378, label %cond.false.1534

cond.true.1378:                                   ; preds = %cond.true.1377
  %381 = load i64, i64* %width, align 8
  %mul1379 = mul nsw i64 0, %381
  %382 = load i64, i64* %thiswidth, align 8
  %add1380 = add nsw i64 %mul1379, %382
  %mul1381 = mul nsw i64 0, %add1380
  %sub1382 = sub nsw i64 %mul1381, 1
  %cmp1383 = icmp slt i64 %sub1382, 0
  br i1 %cmp1383, label %cond.true.1385, label %cond.false.1404

cond.true.1385:                                   ; preds = %cond.true.1378
  %383 = load i64, i64* %width, align 8
  %mul1386 = mul nsw i64 0, %383
  %384 = load i64, i64* %thiswidth, align 8
  %add1387 = add nsw i64 %mul1386, %384
  %mul1388 = mul nsw i64 0, %add1387
  %add1389 = add nsw i64 %mul1388, 0
  %neg1390 = xor i64 %add1389, -1
  %cmp1391 = icmp eq i64 %neg1390, -1
  %conv1392 = zext i1 %cmp1391 to i32
  %sub1393 = sub nsw i32 0, %conv1392
  %conv1394 = sext i32 %sub1393 to i64
  %385 = load i64, i64* %width, align 8
  %mul1395 = mul nsw i64 0, %385
  %386 = load i64, i64* %thiswidth, align 8
  %add1396 = add nsw i64 %mul1395, %386
  %mul1397 = mul nsw i64 0, %add1396
  %add1398 = add nsw i64 %mul1397, 1
  %shl1399 = shl i64 %add1398, 62
  %sub1400 = sub nsw i64 %shl1399, 1
  %mul1401 = mul nsw i64 %sub1400, 2
  %add1402 = add nsw i64 %mul1401, 1
  %sub1403 = sub nsw i64 %conv1394, %add1402
  br label %cond.end.1409

cond.false.1404:                                  ; preds = %cond.true.1378
  %387 = load i64, i64* %width, align 8
  %mul1405 = mul nsw i64 0, %387
  %388 = load i64, i64* %thiswidth, align 8
  %add1406 = add nsw i64 %mul1405, %388
  %mul1407 = mul nsw i64 0, %add1406
  %add1408 = add nsw i64 %mul1407, 0
  br label %cond.end.1409

cond.end.1409:                                    ; preds = %cond.false.1404, %cond.true.1385
  %cond1410 = phi i64 [ %sub1403, %cond.true.1385 ], [ %add1408, %cond.false.1404 ]
  %cmp1411 = icmp slt i64 %cond1410, 0
  br i1 %cmp1411, label %cond.true.1413, label %cond.false.1478

cond.true.1413:                                   ; preds = %cond.end.1409
  %389 = load i64, i64* %width, align 8
  %cmp1414 = icmp slt i64 %389, 0
  br i1 %cmp1414, label %cond.true.1416, label %cond.false.1452

cond.true.1416:                                   ; preds = %cond.true.1413
  %390 = load i64, i64* %thiswidth, align 8
  %391 = load i64, i64* %width, align 8
  %mul1417 = mul nsw i64 0, %391
  %392 = load i64, i64* %thiswidth, align 8
  %add1418 = add nsw i64 %mul1417, %392
  %mul1419 = mul nsw i64 0, %add1418
  %sub1420 = sub nsw i64 %mul1419, 1
  %cmp1421 = icmp slt i64 %sub1420, 0
  br i1 %cmp1421, label %cond.true.1423, label %cond.false.1442

cond.true.1423:                                   ; preds = %cond.true.1416
  %393 = load i64, i64* %width, align 8
  %mul1424 = mul nsw i64 0, %393
  %394 = load i64, i64* %thiswidth, align 8
  %add1425 = add nsw i64 %mul1424, %394
  %mul1426 = mul nsw i64 0, %add1425
  %add1427 = add nsw i64 %mul1426, 0
  %neg1428 = xor i64 %add1427, -1
  %cmp1429 = icmp eq i64 %neg1428, -1
  %conv1430 = zext i1 %cmp1429 to i32
  %sub1431 = sub nsw i32 0, %conv1430
  %conv1432 = sext i32 %sub1431 to i64
  %395 = load i64, i64* %width, align 8
  %mul1433 = mul nsw i64 0, %395
  %396 = load i64, i64* %thiswidth, align 8
  %add1434 = add nsw i64 %mul1433, %396
  %mul1435 = mul nsw i64 0, %add1434
  %add1436 = add nsw i64 %mul1435, 1
  %shl1437 = shl i64 %add1436, 62
  %sub1438 = sub nsw i64 %shl1437, 1
  %mul1439 = mul nsw i64 %sub1438, 2
  %add1440 = add nsw i64 %mul1439, 1
  %sub1441 = sub nsw i64 %conv1432, %add1440
  br label %cond.end.1447

cond.false.1442:                                  ; preds = %cond.true.1416
  %397 = load i64, i64* %width, align 8
  %mul1443 = mul nsw i64 0, %397
  %398 = load i64, i64* %thiswidth, align 8
  %add1444 = add nsw i64 %mul1443, %398
  %mul1445 = mul nsw i64 0, %add1444
  %add1446 = add nsw i64 %mul1445, 0
  br label %cond.end.1447

cond.end.1447:                                    ; preds = %cond.false.1442, %cond.true.1423
  %cond1448 = phi i64 [ %sub1441, %cond.true.1423 ], [ %add1446, %cond.false.1442 ]
  %399 = load i64, i64* %width, align 8
  %sub1449 = sub nsw i64 %cond1448, %399
  %cmp1450 = icmp slt i64 %390, %sub1449
  br i1 %cmp1450, label %cond.true.1510, label %lor.lhs.false.1496

cond.false.1452:                                  ; preds = %cond.true.1413
  %400 = load i64, i64* %width, align 8
  %mul1453 = mul nsw i64 0, %400
  %401 = load i64, i64* %thiswidth, align 8
  %add1454 = add nsw i64 %mul1453, %401
  %mul1455 = mul nsw i64 0, %add1454
  %sub1456 = sub nsw i64 %mul1455, 1
  %cmp1457 = icmp slt i64 %sub1456, 0
  br i1 %cmp1457, label %cond.true.1459, label %cond.false.1468

cond.true.1459:                                   ; preds = %cond.false.1452
  %402 = load i64, i64* %width, align 8
  %mul1460 = mul nsw i64 0, %402
  %403 = load i64, i64* %thiswidth, align 8
  %add1461 = add nsw i64 %mul1460, %403
  %mul1462 = mul nsw i64 0, %add1461
  %add1463 = add nsw i64 %mul1462, 1
  %shl1464 = shl i64 %add1463, 62
  %sub1465 = sub nsw i64 %shl1464, 1
  %mul1466 = mul nsw i64 %sub1465, 2
  %add1467 = add nsw i64 %mul1466, 1
  br label %cond.end.1473

cond.false.1468:                                  ; preds = %cond.false.1452
  %404 = load i64, i64* %width, align 8
  %mul1469 = mul nsw i64 0, %404
  %405 = load i64, i64* %thiswidth, align 8
  %add1470 = add nsw i64 %mul1469, %405
  %mul1471 = mul nsw i64 0, %add1470
  %sub1472 = sub nsw i64 %mul1471, 1
  br label %cond.end.1473

cond.end.1473:                                    ; preds = %cond.false.1468, %cond.true.1459
  %cond1474 = phi i64 [ %add1467, %cond.true.1459 ], [ %sub1472, %cond.false.1468 ]
  %406 = load i64, i64* %width, align 8
  %sub1475 = sub nsw i64 %cond1474, %406
  %407 = load i64, i64* %thiswidth, align 8
  %cmp1476 = icmp slt i64 %sub1475, %407
  br i1 %cmp1476, label %cond.true.1510, label %lor.lhs.false.1496

cond.false.1478:                                  ; preds = %cond.end.1409
  %408 = load i64, i64* %thiswidth, align 8
  %cmp1479 = icmp slt i64 %408, 0
  br i1 %cmp1479, label %cond.true.1481, label %cond.false.1485

cond.true.1481:                                   ; preds = %cond.false.1478
  %409 = load i64, i64* %width, align 8
  %410 = load i64, i64* %thiswidth, align 8
  %411 = load i64, i64* %width, align 8
  %add1482 = add nsw i64 %410, %411
  %cmp1483 = icmp sle i64 %409, %add1482
  br i1 %cmp1483, label %cond.true.1510, label %lor.lhs.false.1496

cond.false.1485:                                  ; preds = %cond.false.1478
  %412 = load i64, i64* %width, align 8
  %cmp1486 = icmp slt i64 %412, 0
  br i1 %cmp1486, label %cond.true.1488, label %cond.false.1492

cond.true.1488:                                   ; preds = %cond.false.1485
  %413 = load i64, i64* %thiswidth, align 8
  %414 = load i64, i64* %thiswidth, align 8
  %415 = load i64, i64* %width, align 8
  %add1489 = add nsw i64 %414, %415
  %cmp1490 = icmp sle i64 %413, %add1489
  br i1 %cmp1490, label %cond.true.1510, label %lor.lhs.false.1496

cond.false.1492:                                  ; preds = %cond.false.1485
  %416 = load i64, i64* %thiswidth, align 8
  %417 = load i64, i64* %width, align 8
  %add1493 = add nsw i64 %416, %417
  %418 = load i64, i64* %width, align 8
  %cmp1494 = icmp slt i64 %add1493, %418
  br i1 %cmp1494, label %cond.true.1510, label %lor.lhs.false.1496

lor.lhs.false.1496:                               ; preds = %cond.false.1492, %cond.true.1488, %cond.true.1481, %cond.end.1473, %cond.end.1447
  %419 = load i64, i64* %thiswidth, align 8
  %420 = load i64, i64* %width, align 8
  %add1497 = add nsw i64 %419, %420
  %mul1498 = mul nsw i64 0, %add1497
  %sub1499 = sub nsw i64 %mul1498, 1
  %cmp1500 = icmp slt i64 %sub1499, 0
  br i1 %cmp1500, label %land.lhs.true.1502, label %lor.lhs.false.1506

land.lhs.true.1502:                               ; preds = %lor.lhs.false.1496
  %421 = load i64, i64* %thiswidth, align 8
  %422 = load i64, i64* %width, align 8
  %add1503 = add nsw i64 %421, %422
  %cmp1504 = icmp slt i64 %add1503, -9223372036854775808
  br i1 %cmp1504, label %cond.true.1510, label %lor.lhs.false.1506

lor.lhs.false.1506:                               ; preds = %land.lhs.true.1502, %lor.lhs.false.1496
  %423 = load i64, i64* %thiswidth, align 8
  %424 = load i64, i64* %width, align 8
  %add1507 = add nsw i64 %423, %424
  %cmp1508 = icmp slt i64 9223372036854775807, %add1507
  br i1 %cmp1508, label %cond.true.1510, label %cond.false.1522

cond.true.1510:                                   ; preds = %lor.lhs.false.1506, %land.lhs.true.1502, %cond.false.1492, %cond.true.1488, %cond.true.1481, %cond.end.1473, %cond.end.1447
  %425 = load i64, i64* %thiswidth, align 8
  %426 = load i64, i64* %width, align 8
  %add1511 = add i64 %425, %426
  %cmp1512 = icmp ule i64 %add1511, 9223372036854775807
  br i1 %cmp1512, label %cond.true.1514, label %cond.false.1516

cond.true.1514:                                   ; preds = %cond.true.1510
  %427 = load i64, i64* %thiswidth, align 8
  %428 = load i64, i64* %width, align 8
  %add1515 = add i64 %427, %428
  br label %cond.end.1520

cond.false.1516:                                  ; preds = %cond.true.1510
  %429 = load i64, i64* %thiswidth, align 8
  %430 = load i64, i64* %width, align 8
  %add1517 = add i64 %429, %430
  %sub1518 = sub i64 %add1517, -9223372036854775808
  %add1519 = add nsw i64 %sub1518, -9223372036854775808
  br label %cond.end.1520

cond.end.1520:                                    ; preds = %cond.false.1516, %cond.true.1514
  %cond1521 = phi i64 [ %add1515, %cond.true.1514 ], [ %add1519, %cond.false.1516 ]
  store i64 %cond1521, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.1522:                                  ; preds = %lor.lhs.false.1506
  %431 = load i64, i64* %thiswidth, align 8
  %432 = load i64, i64* %width, align 8
  %add1523 = add i64 %431, %432
  %cmp1524 = icmp ule i64 %add1523, 9223372036854775807
  br i1 %cmp1524, label %cond.true.1526, label %cond.false.1528

cond.true.1526:                                   ; preds = %cond.false.1522
  %433 = load i64, i64* %thiswidth, align 8
  %434 = load i64, i64* %width, align 8
  %add1527 = add i64 %433, %434
  br label %cond.end.1532

cond.false.1528:                                  ; preds = %cond.false.1522
  %435 = load i64, i64* %thiswidth, align 8
  %436 = load i64, i64* %width, align 8
  %add1529 = add i64 %435, %436
  %sub1530 = sub i64 %add1529, -9223372036854775808
  %add1531 = add nsw i64 %sub1530, -9223372036854775808
  br label %cond.end.1532

cond.end.1532:                                    ; preds = %cond.false.1528, %cond.true.1526
  %cond1533 = phi i64 [ %add1527, %cond.true.1526 ], [ %add1531, %cond.false.1528 ]
  store i64 %cond1533, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.1534:                                  ; preds = %cond.true.1377
  %437 = load i64, i64* %width, align 8
  %mul1535 = mul nsw i64 0, %437
  %438 = load i64, i64* %thiswidth, align 8
  %add1536 = add nsw i64 %mul1535, %438
  %mul1537 = mul nsw i64 0, %add1536
  %sub1538 = sub nsw i64 %mul1537, 1
  %cmp1539 = icmp slt i64 %sub1538, 0
  br i1 %cmp1539, label %cond.true.1541, label %cond.false.1560

cond.true.1541:                                   ; preds = %cond.false.1534
  %439 = load i64, i64* %width, align 8
  %mul1542 = mul nsw i64 0, %439
  %440 = load i64, i64* %thiswidth, align 8
  %add1543 = add nsw i64 %mul1542, %440
  %mul1544 = mul nsw i64 0, %add1543
  %add1545 = add nsw i64 %mul1544, 0
  %neg1546 = xor i64 %add1545, -1
  %cmp1547 = icmp eq i64 %neg1546, -1
  %conv1548 = zext i1 %cmp1547 to i32
  %sub1549 = sub nsw i32 0, %conv1548
  %conv1550 = sext i32 %sub1549 to i64
  %441 = load i64, i64* %width, align 8
  %mul1551 = mul nsw i64 0, %441
  %442 = load i64, i64* %thiswidth, align 8
  %add1552 = add nsw i64 %mul1551, %442
  %mul1553 = mul nsw i64 0, %add1552
  %add1554 = add nsw i64 %mul1553, 1
  %shl1555 = shl i64 %add1554, 62
  %sub1556 = sub nsw i64 %shl1555, 1
  %mul1557 = mul nsw i64 %sub1556, 2
  %add1558 = add nsw i64 %mul1557, 1
  %sub1559 = sub nsw i64 %conv1550, %add1558
  br label %cond.end.1565

cond.false.1560:                                  ; preds = %cond.false.1534
  %443 = load i64, i64* %width, align 8
  %mul1561 = mul nsw i64 0, %443
  %444 = load i64, i64* %thiswidth, align 8
  %add1562 = add nsw i64 %mul1561, %444
  %mul1563 = mul nsw i64 0, %add1562
  %add1564 = add nsw i64 %mul1563, 0
  br label %cond.end.1565

cond.end.1565:                                    ; preds = %cond.false.1560, %cond.true.1541
  %cond1566 = phi i64 [ %sub1559, %cond.true.1541 ], [ %add1564, %cond.false.1560 ]
  %cmp1567 = icmp slt i64 %cond1566, 0
  br i1 %cmp1567, label %cond.true.1569, label %cond.false.1634

cond.true.1569:                                   ; preds = %cond.end.1565
  %445 = load i64, i64* %width, align 8
  %cmp1570 = icmp slt i64 %445, 0
  br i1 %cmp1570, label %cond.true.1572, label %cond.false.1608

cond.true.1572:                                   ; preds = %cond.true.1569
  %446 = load i64, i64* %thiswidth, align 8
  %447 = load i64, i64* %width, align 8
  %mul1573 = mul nsw i64 0, %447
  %448 = load i64, i64* %thiswidth, align 8
  %add1574 = add nsw i64 %mul1573, %448
  %mul1575 = mul nsw i64 0, %add1574
  %sub1576 = sub nsw i64 %mul1575, 1
  %cmp1577 = icmp slt i64 %sub1576, 0
  br i1 %cmp1577, label %cond.true.1579, label %cond.false.1598

cond.true.1579:                                   ; preds = %cond.true.1572
  %449 = load i64, i64* %width, align 8
  %mul1580 = mul nsw i64 0, %449
  %450 = load i64, i64* %thiswidth, align 8
  %add1581 = add nsw i64 %mul1580, %450
  %mul1582 = mul nsw i64 0, %add1581
  %add1583 = add nsw i64 %mul1582, 0
  %neg1584 = xor i64 %add1583, -1
  %cmp1585 = icmp eq i64 %neg1584, -1
  %conv1586 = zext i1 %cmp1585 to i32
  %sub1587 = sub nsw i32 0, %conv1586
  %conv1588 = sext i32 %sub1587 to i64
  %451 = load i64, i64* %width, align 8
  %mul1589 = mul nsw i64 0, %451
  %452 = load i64, i64* %thiswidth, align 8
  %add1590 = add nsw i64 %mul1589, %452
  %mul1591 = mul nsw i64 0, %add1590
  %add1592 = add nsw i64 %mul1591, 1
  %shl1593 = shl i64 %add1592, 62
  %sub1594 = sub nsw i64 %shl1593, 1
  %mul1595 = mul nsw i64 %sub1594, 2
  %add1596 = add nsw i64 %mul1595, 1
  %sub1597 = sub nsw i64 %conv1588, %add1596
  br label %cond.end.1603

cond.false.1598:                                  ; preds = %cond.true.1572
  %453 = load i64, i64* %width, align 8
  %mul1599 = mul nsw i64 0, %453
  %454 = load i64, i64* %thiswidth, align 8
  %add1600 = add nsw i64 %mul1599, %454
  %mul1601 = mul nsw i64 0, %add1600
  %add1602 = add nsw i64 %mul1601, 0
  br label %cond.end.1603

cond.end.1603:                                    ; preds = %cond.false.1598, %cond.true.1579
  %cond1604 = phi i64 [ %sub1597, %cond.true.1579 ], [ %add1602, %cond.false.1598 ]
  %455 = load i64, i64* %width, align 8
  %sub1605 = sub nsw i64 %cond1604, %455
  %cmp1606 = icmp slt i64 %446, %sub1605
  br i1 %cmp1606, label %cond.true.1666, label %lor.lhs.false.1652

cond.false.1608:                                  ; preds = %cond.true.1569
  %456 = load i64, i64* %width, align 8
  %mul1609 = mul nsw i64 0, %456
  %457 = load i64, i64* %thiswidth, align 8
  %add1610 = add nsw i64 %mul1609, %457
  %mul1611 = mul nsw i64 0, %add1610
  %sub1612 = sub nsw i64 %mul1611, 1
  %cmp1613 = icmp slt i64 %sub1612, 0
  br i1 %cmp1613, label %cond.true.1615, label %cond.false.1624

cond.true.1615:                                   ; preds = %cond.false.1608
  %458 = load i64, i64* %width, align 8
  %mul1616 = mul nsw i64 0, %458
  %459 = load i64, i64* %thiswidth, align 8
  %add1617 = add nsw i64 %mul1616, %459
  %mul1618 = mul nsw i64 0, %add1617
  %add1619 = add nsw i64 %mul1618, 1
  %shl1620 = shl i64 %add1619, 62
  %sub1621 = sub nsw i64 %shl1620, 1
  %mul1622 = mul nsw i64 %sub1621, 2
  %add1623 = add nsw i64 %mul1622, 1
  br label %cond.end.1629

cond.false.1624:                                  ; preds = %cond.false.1608
  %460 = load i64, i64* %width, align 8
  %mul1625 = mul nsw i64 0, %460
  %461 = load i64, i64* %thiswidth, align 8
  %add1626 = add nsw i64 %mul1625, %461
  %mul1627 = mul nsw i64 0, %add1626
  %sub1628 = sub nsw i64 %mul1627, 1
  br label %cond.end.1629

cond.end.1629:                                    ; preds = %cond.false.1624, %cond.true.1615
  %cond1630 = phi i64 [ %add1623, %cond.true.1615 ], [ %sub1628, %cond.false.1624 ]
  %462 = load i64, i64* %width, align 8
  %sub1631 = sub nsw i64 %cond1630, %462
  %463 = load i64, i64* %thiswidth, align 8
  %cmp1632 = icmp slt i64 %sub1631, %463
  br i1 %cmp1632, label %cond.true.1666, label %lor.lhs.false.1652

cond.false.1634:                                  ; preds = %cond.end.1565
  %464 = load i64, i64* %thiswidth, align 8
  %cmp1635 = icmp slt i64 %464, 0
  br i1 %cmp1635, label %cond.true.1637, label %cond.false.1641

cond.true.1637:                                   ; preds = %cond.false.1634
  %465 = load i64, i64* %width, align 8
  %466 = load i64, i64* %thiswidth, align 8
  %467 = load i64, i64* %width, align 8
  %add1638 = add nsw i64 %466, %467
  %cmp1639 = icmp sle i64 %465, %add1638
  br i1 %cmp1639, label %cond.true.1666, label %lor.lhs.false.1652

cond.false.1641:                                  ; preds = %cond.false.1634
  %468 = load i64, i64* %width, align 8
  %cmp1642 = icmp slt i64 %468, 0
  br i1 %cmp1642, label %cond.true.1644, label %cond.false.1648

cond.true.1644:                                   ; preds = %cond.false.1641
  %469 = load i64, i64* %thiswidth, align 8
  %470 = load i64, i64* %thiswidth, align 8
  %471 = load i64, i64* %width, align 8
  %add1645 = add nsw i64 %470, %471
  %cmp1646 = icmp sle i64 %469, %add1645
  br i1 %cmp1646, label %cond.true.1666, label %lor.lhs.false.1652

cond.false.1648:                                  ; preds = %cond.false.1641
  %472 = load i64, i64* %thiswidth, align 8
  %473 = load i64, i64* %width, align 8
  %add1649 = add nsw i64 %472, %473
  %474 = load i64, i64* %width, align 8
  %cmp1650 = icmp slt i64 %add1649, %474
  br i1 %cmp1650, label %cond.true.1666, label %lor.lhs.false.1652

lor.lhs.false.1652:                               ; preds = %cond.false.1648, %cond.true.1644, %cond.true.1637, %cond.end.1629, %cond.end.1603
  %475 = load i64, i64* %thiswidth, align 8
  %476 = load i64, i64* %width, align 8
  %add1653 = add nsw i64 %475, %476
  %mul1654 = mul nsw i64 0, %add1653
  %sub1655 = sub nsw i64 %mul1654, 1
  %cmp1656 = icmp slt i64 %sub1655, 0
  br i1 %cmp1656, label %land.lhs.true.1658, label %lor.lhs.false.1662

land.lhs.true.1658:                               ; preds = %lor.lhs.false.1652
  %477 = load i64, i64* %thiswidth, align 8
  %478 = load i64, i64* %width, align 8
  %add1659 = add nsw i64 %477, %478
  %cmp1660 = icmp slt i64 %add1659, -9223372036854775808
  br i1 %cmp1660, label %cond.true.1666, label %lor.lhs.false.1662

lor.lhs.false.1662:                               ; preds = %land.lhs.true.1658, %lor.lhs.false.1652
  %479 = load i64, i64* %thiswidth, align 8
  %480 = load i64, i64* %width, align 8
  %add1663 = add nsw i64 %479, %480
  %cmp1664 = icmp slt i64 9223372036854775807, %add1663
  br i1 %cmp1664, label %cond.true.1666, label %cond.false.1678

cond.true.1666:                                   ; preds = %lor.lhs.false.1662, %land.lhs.true.1658, %cond.false.1648, %cond.true.1644, %cond.true.1637, %cond.end.1629, %cond.end.1603
  %481 = load i64, i64* %thiswidth, align 8
  %482 = load i64, i64* %width, align 8
  %add1667 = add i64 %481, %482
  %cmp1668 = icmp ule i64 %add1667, 9223372036854775807
  br i1 %cmp1668, label %cond.true.1670, label %cond.false.1672

cond.true.1670:                                   ; preds = %cond.true.1666
  %483 = load i64, i64* %thiswidth, align 8
  %484 = load i64, i64* %width, align 8
  %add1671 = add i64 %483, %484
  br label %cond.end.1676

cond.false.1672:                                  ; preds = %cond.true.1666
  %485 = load i64, i64* %thiswidth, align 8
  %486 = load i64, i64* %width, align 8
  %add1673 = add i64 %485, %486
  %sub1674 = sub i64 %add1673, -9223372036854775808
  %add1675 = add nsw i64 %sub1674, -9223372036854775808
  br label %cond.end.1676

cond.end.1676:                                    ; preds = %cond.false.1672, %cond.true.1670
  %cond1677 = phi i64 [ %add1671, %cond.true.1670 ], [ %add1675, %cond.false.1672 ]
  store i64 %cond1677, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.1678:                                  ; preds = %lor.lhs.false.1662
  %487 = load i64, i64* %thiswidth, align 8
  %488 = load i64, i64* %width, align 8
  %add1679 = add i64 %487, %488
  %cmp1680 = icmp ule i64 %add1679, 9223372036854775807
  br i1 %cmp1680, label %cond.true.1682, label %cond.false.1684

cond.true.1682:                                   ; preds = %cond.false.1678
  %489 = load i64, i64* %thiswidth, align 8
  %490 = load i64, i64* %width, align 8
  %add1683 = add i64 %489, %490
  br label %cond.end.1688

cond.false.1684:                                  ; preds = %cond.false.1678
  %491 = load i64, i64* %thiswidth, align 8
  %492 = load i64, i64* %width, align 8
  %add1685 = add i64 %491, %492
  %sub1686 = sub i64 %add1685, -9223372036854775808
  %add1687 = add nsw i64 %sub1686, -9223372036854775808
  br label %cond.end.1688

cond.end.1688:                                    ; preds = %cond.false.1684, %cond.true.1682
  %cond1689 = phi i64 [ %add1683, %cond.true.1682 ], [ %add1687, %cond.false.1684 ]
  store i64 %cond1689, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.1690:                                  ; preds = %cond.false.1376
  br i1 false, label %cond.true.1691, label %cond.false.1847

cond.true.1691:                                   ; preds = %cond.false.1690
  %493 = load i64, i64* %width, align 8
  %mul1692 = mul nsw i64 0, %493
  %494 = load i64, i64* %thiswidth, align 8
  %add1693 = add nsw i64 %mul1692, %494
  %mul1694 = mul nsw i64 0, %add1693
  %sub1695 = sub nsw i64 %mul1694, 1
  %cmp1696 = icmp slt i64 %sub1695, 0
  br i1 %cmp1696, label %cond.true.1698, label %cond.false.1717

cond.true.1698:                                   ; preds = %cond.true.1691
  %495 = load i64, i64* %width, align 8
  %mul1699 = mul nsw i64 0, %495
  %496 = load i64, i64* %thiswidth, align 8
  %add1700 = add nsw i64 %mul1699, %496
  %mul1701 = mul nsw i64 0, %add1700
  %add1702 = add nsw i64 %mul1701, 0
  %neg1703 = xor i64 %add1702, -1
  %cmp1704 = icmp eq i64 %neg1703, -1
  %conv1705 = zext i1 %cmp1704 to i32
  %sub1706 = sub nsw i32 0, %conv1705
  %conv1707 = sext i32 %sub1706 to i64
  %497 = load i64, i64* %width, align 8
  %mul1708 = mul nsw i64 0, %497
  %498 = load i64, i64* %thiswidth, align 8
  %add1709 = add nsw i64 %mul1708, %498
  %mul1710 = mul nsw i64 0, %add1709
  %add1711 = add nsw i64 %mul1710, 1
  %shl1712 = shl i64 %add1711, 62
  %sub1713 = sub nsw i64 %shl1712, 1
  %mul1714 = mul nsw i64 %sub1713, 2
  %add1715 = add nsw i64 %mul1714, 1
  %sub1716 = sub nsw i64 %conv1707, %add1715
  br label %cond.end.1722

cond.false.1717:                                  ; preds = %cond.true.1691
  %499 = load i64, i64* %width, align 8
  %mul1718 = mul nsw i64 0, %499
  %500 = load i64, i64* %thiswidth, align 8
  %add1719 = add nsw i64 %mul1718, %500
  %mul1720 = mul nsw i64 0, %add1719
  %add1721 = add nsw i64 %mul1720, 0
  br label %cond.end.1722

cond.end.1722:                                    ; preds = %cond.false.1717, %cond.true.1698
  %cond1723 = phi i64 [ %sub1716, %cond.true.1698 ], [ %add1721, %cond.false.1717 ]
  %cmp1724 = icmp slt i64 %cond1723, 0
  br i1 %cmp1724, label %cond.true.1726, label %cond.false.1791

cond.true.1726:                                   ; preds = %cond.end.1722
  %501 = load i64, i64* %width, align 8
  %cmp1727 = icmp slt i64 %501, 0
  br i1 %cmp1727, label %cond.true.1729, label %cond.false.1765

cond.true.1729:                                   ; preds = %cond.true.1726
  %502 = load i64, i64* %thiswidth, align 8
  %503 = load i64, i64* %width, align 8
  %mul1730 = mul nsw i64 0, %503
  %504 = load i64, i64* %thiswidth, align 8
  %add1731 = add nsw i64 %mul1730, %504
  %mul1732 = mul nsw i64 0, %add1731
  %sub1733 = sub nsw i64 %mul1732, 1
  %cmp1734 = icmp slt i64 %sub1733, 0
  br i1 %cmp1734, label %cond.true.1736, label %cond.false.1755

cond.true.1736:                                   ; preds = %cond.true.1729
  %505 = load i64, i64* %width, align 8
  %mul1737 = mul nsw i64 0, %505
  %506 = load i64, i64* %thiswidth, align 8
  %add1738 = add nsw i64 %mul1737, %506
  %mul1739 = mul nsw i64 0, %add1738
  %add1740 = add nsw i64 %mul1739, 0
  %neg1741 = xor i64 %add1740, -1
  %cmp1742 = icmp eq i64 %neg1741, -1
  %conv1743 = zext i1 %cmp1742 to i32
  %sub1744 = sub nsw i32 0, %conv1743
  %conv1745 = sext i32 %sub1744 to i64
  %507 = load i64, i64* %width, align 8
  %mul1746 = mul nsw i64 0, %507
  %508 = load i64, i64* %thiswidth, align 8
  %add1747 = add nsw i64 %mul1746, %508
  %mul1748 = mul nsw i64 0, %add1747
  %add1749 = add nsw i64 %mul1748, 1
  %shl1750 = shl i64 %add1749, 62
  %sub1751 = sub nsw i64 %shl1750, 1
  %mul1752 = mul nsw i64 %sub1751, 2
  %add1753 = add nsw i64 %mul1752, 1
  %sub1754 = sub nsw i64 %conv1745, %add1753
  br label %cond.end.1760

cond.false.1755:                                  ; preds = %cond.true.1729
  %509 = load i64, i64* %width, align 8
  %mul1756 = mul nsw i64 0, %509
  %510 = load i64, i64* %thiswidth, align 8
  %add1757 = add nsw i64 %mul1756, %510
  %mul1758 = mul nsw i64 0, %add1757
  %add1759 = add nsw i64 %mul1758, 0
  br label %cond.end.1760

cond.end.1760:                                    ; preds = %cond.false.1755, %cond.true.1736
  %cond1761 = phi i64 [ %sub1754, %cond.true.1736 ], [ %add1759, %cond.false.1755 ]
  %511 = load i64, i64* %width, align 8
  %sub1762 = sub nsw i64 %cond1761, %511
  %cmp1763 = icmp slt i64 %502, %sub1762
  br i1 %cmp1763, label %cond.true.1823, label %lor.lhs.false.1809

cond.false.1765:                                  ; preds = %cond.true.1726
  %512 = load i64, i64* %width, align 8
  %mul1766 = mul nsw i64 0, %512
  %513 = load i64, i64* %thiswidth, align 8
  %add1767 = add nsw i64 %mul1766, %513
  %mul1768 = mul nsw i64 0, %add1767
  %sub1769 = sub nsw i64 %mul1768, 1
  %cmp1770 = icmp slt i64 %sub1769, 0
  br i1 %cmp1770, label %cond.true.1772, label %cond.false.1781

cond.true.1772:                                   ; preds = %cond.false.1765
  %514 = load i64, i64* %width, align 8
  %mul1773 = mul nsw i64 0, %514
  %515 = load i64, i64* %thiswidth, align 8
  %add1774 = add nsw i64 %mul1773, %515
  %mul1775 = mul nsw i64 0, %add1774
  %add1776 = add nsw i64 %mul1775, 1
  %shl1777 = shl i64 %add1776, 62
  %sub1778 = sub nsw i64 %shl1777, 1
  %mul1779 = mul nsw i64 %sub1778, 2
  %add1780 = add nsw i64 %mul1779, 1
  br label %cond.end.1786

cond.false.1781:                                  ; preds = %cond.false.1765
  %516 = load i64, i64* %width, align 8
  %mul1782 = mul nsw i64 0, %516
  %517 = load i64, i64* %thiswidth, align 8
  %add1783 = add nsw i64 %mul1782, %517
  %mul1784 = mul nsw i64 0, %add1783
  %sub1785 = sub nsw i64 %mul1784, 1
  br label %cond.end.1786

cond.end.1786:                                    ; preds = %cond.false.1781, %cond.true.1772
  %cond1787 = phi i64 [ %add1780, %cond.true.1772 ], [ %sub1785, %cond.false.1781 ]
  %518 = load i64, i64* %width, align 8
  %sub1788 = sub nsw i64 %cond1787, %518
  %519 = load i64, i64* %thiswidth, align 8
  %cmp1789 = icmp slt i64 %sub1788, %519
  br i1 %cmp1789, label %cond.true.1823, label %lor.lhs.false.1809

cond.false.1791:                                  ; preds = %cond.end.1722
  %520 = load i64, i64* %thiswidth, align 8
  %cmp1792 = icmp slt i64 %520, 0
  br i1 %cmp1792, label %cond.true.1794, label %cond.false.1798

cond.true.1794:                                   ; preds = %cond.false.1791
  %521 = load i64, i64* %width, align 8
  %522 = load i64, i64* %thiswidth, align 8
  %523 = load i64, i64* %width, align 8
  %add1795 = add nsw i64 %522, %523
  %cmp1796 = icmp sle i64 %521, %add1795
  br i1 %cmp1796, label %cond.true.1823, label %lor.lhs.false.1809

cond.false.1798:                                  ; preds = %cond.false.1791
  %524 = load i64, i64* %width, align 8
  %cmp1799 = icmp slt i64 %524, 0
  br i1 %cmp1799, label %cond.true.1801, label %cond.false.1805

cond.true.1801:                                   ; preds = %cond.false.1798
  %525 = load i64, i64* %thiswidth, align 8
  %526 = load i64, i64* %thiswidth, align 8
  %527 = load i64, i64* %width, align 8
  %add1802 = add nsw i64 %526, %527
  %cmp1803 = icmp sle i64 %525, %add1802
  br i1 %cmp1803, label %cond.true.1823, label %lor.lhs.false.1809

cond.false.1805:                                  ; preds = %cond.false.1798
  %528 = load i64, i64* %thiswidth, align 8
  %529 = load i64, i64* %width, align 8
  %add1806 = add nsw i64 %528, %529
  %530 = load i64, i64* %width, align 8
  %cmp1807 = icmp slt i64 %add1806, %530
  br i1 %cmp1807, label %cond.true.1823, label %lor.lhs.false.1809

lor.lhs.false.1809:                               ; preds = %cond.false.1805, %cond.true.1801, %cond.true.1794, %cond.end.1786, %cond.end.1760
  %531 = load i64, i64* %thiswidth, align 8
  %532 = load i64, i64* %width, align 8
  %add1810 = add nsw i64 %531, %532
  %mul1811 = mul nsw i64 0, %add1810
  %sub1812 = sub nsw i64 %mul1811, 1
  %cmp1813 = icmp slt i64 %sub1812, 0
  br i1 %cmp1813, label %land.lhs.true.1815, label %lor.lhs.false.1819

land.lhs.true.1815:                               ; preds = %lor.lhs.false.1809
  %533 = load i64, i64* %thiswidth, align 8
  %534 = load i64, i64* %width, align 8
  %add1816 = add nsw i64 %533, %534
  %cmp1817 = icmp slt i64 %add1816, -9223372036854775808
  br i1 %cmp1817, label %cond.true.1823, label %lor.lhs.false.1819

lor.lhs.false.1819:                               ; preds = %land.lhs.true.1815, %lor.lhs.false.1809
  %535 = load i64, i64* %thiswidth, align 8
  %536 = load i64, i64* %width, align 8
  %add1820 = add nsw i64 %535, %536
  %cmp1821 = icmp slt i64 9223372036854775807, %add1820
  br i1 %cmp1821, label %cond.true.1823, label %cond.false.1835

cond.true.1823:                                   ; preds = %lor.lhs.false.1819, %land.lhs.true.1815, %cond.false.1805, %cond.true.1801, %cond.true.1794, %cond.end.1786, %cond.end.1760
  %537 = load i64, i64* %thiswidth, align 8
  %538 = load i64, i64* %width, align 8
  %add1824 = add i64 %537, %538
  %cmp1825 = icmp ule i64 %add1824, 9223372036854775807
  br i1 %cmp1825, label %cond.true.1827, label %cond.false.1829

cond.true.1827:                                   ; preds = %cond.true.1823
  %539 = load i64, i64* %thiswidth, align 8
  %540 = load i64, i64* %width, align 8
  %add1828 = add i64 %539, %540
  br label %cond.end.1833

cond.false.1829:                                  ; preds = %cond.true.1823
  %541 = load i64, i64* %thiswidth, align 8
  %542 = load i64, i64* %width, align 8
  %add1830 = add i64 %541, %542
  %sub1831 = sub i64 %add1830, -9223372036854775808
  %add1832 = add nsw i64 %sub1831, -9223372036854775808
  br label %cond.end.1833

cond.end.1833:                                    ; preds = %cond.false.1829, %cond.true.1827
  %cond1834 = phi i64 [ %add1828, %cond.true.1827 ], [ %add1832, %cond.false.1829 ]
  store i64 %cond1834, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.1835:                                  ; preds = %lor.lhs.false.1819
  %543 = load i64, i64* %thiswidth, align 8
  %544 = load i64, i64* %width, align 8
  %add1836 = add i64 %543, %544
  %cmp1837 = icmp ule i64 %add1836, 9223372036854775807
  br i1 %cmp1837, label %cond.true.1839, label %cond.false.1841

cond.true.1839:                                   ; preds = %cond.false.1835
  %545 = load i64, i64* %thiswidth, align 8
  %546 = load i64, i64* %width, align 8
  %add1840 = add i64 %545, %546
  br label %cond.end.1845

cond.false.1841:                                  ; preds = %cond.false.1835
  %547 = load i64, i64* %thiswidth, align 8
  %548 = load i64, i64* %width, align 8
  %add1842 = add i64 %547, %548
  %sub1843 = sub i64 %add1842, -9223372036854775808
  %add1844 = add nsw i64 %sub1843, -9223372036854775808
  br label %cond.end.1845

cond.end.1845:                                    ; preds = %cond.false.1841, %cond.true.1839
  %cond1846 = phi i64 [ %add1840, %cond.true.1839 ], [ %add1844, %cond.false.1841 ]
  store i64 %cond1846, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

cond.false.1847:                                  ; preds = %cond.false.1690
  %549 = load i64, i64* %width, align 8
  %mul1848 = mul nsw i64 0, %549
  %550 = load i64, i64* %thiswidth, align 8
  %add1849 = add nsw i64 %mul1848, %550
  %mul1850 = mul nsw i64 0, %add1849
  %sub1851 = sub nsw i64 %mul1850, 1
  %cmp1852 = icmp slt i64 %sub1851, 0
  br i1 %cmp1852, label %cond.true.1854, label %cond.false.1873

cond.true.1854:                                   ; preds = %cond.false.1847
  %551 = load i64, i64* %width, align 8
  %mul1855 = mul nsw i64 0, %551
  %552 = load i64, i64* %thiswidth, align 8
  %add1856 = add nsw i64 %mul1855, %552
  %mul1857 = mul nsw i64 0, %add1856
  %add1858 = add nsw i64 %mul1857, 0
  %neg1859 = xor i64 %add1858, -1
  %cmp1860 = icmp eq i64 %neg1859, -1
  %conv1861 = zext i1 %cmp1860 to i32
  %sub1862 = sub nsw i32 0, %conv1861
  %conv1863 = sext i32 %sub1862 to i64
  %553 = load i64, i64* %width, align 8
  %mul1864 = mul nsw i64 0, %553
  %554 = load i64, i64* %thiswidth, align 8
  %add1865 = add nsw i64 %mul1864, %554
  %mul1866 = mul nsw i64 0, %add1865
  %add1867 = add nsw i64 %mul1866, 1
  %shl1868 = shl i64 %add1867, 62
  %sub1869 = sub nsw i64 %shl1868, 1
  %mul1870 = mul nsw i64 %sub1869, 2
  %add1871 = add nsw i64 %mul1870, 1
  %sub1872 = sub nsw i64 %conv1863, %add1871
  br label %cond.end.1878

cond.false.1873:                                  ; preds = %cond.false.1847
  %555 = load i64, i64* %width, align 8
  %mul1874 = mul nsw i64 0, %555
  %556 = load i64, i64* %thiswidth, align 8
  %add1875 = add nsw i64 %mul1874, %556
  %mul1876 = mul nsw i64 0, %add1875
  %add1877 = add nsw i64 %mul1876, 0
  br label %cond.end.1878

cond.end.1878:                                    ; preds = %cond.false.1873, %cond.true.1854
  %cond1879 = phi i64 [ %sub1872, %cond.true.1854 ], [ %add1877, %cond.false.1873 ]
  %cmp1880 = icmp slt i64 %cond1879, 0
  br i1 %cmp1880, label %cond.true.1882, label %cond.false.1947

cond.true.1882:                                   ; preds = %cond.end.1878
  %557 = load i64, i64* %width, align 8
  %cmp1883 = icmp slt i64 %557, 0
  br i1 %cmp1883, label %cond.true.1885, label %cond.false.1921

cond.true.1885:                                   ; preds = %cond.true.1882
  %558 = load i64, i64* %thiswidth, align 8
  %559 = load i64, i64* %width, align 8
  %mul1886 = mul nsw i64 0, %559
  %560 = load i64, i64* %thiswidth, align 8
  %add1887 = add nsw i64 %mul1886, %560
  %mul1888 = mul nsw i64 0, %add1887
  %sub1889 = sub nsw i64 %mul1888, 1
  %cmp1890 = icmp slt i64 %sub1889, 0
  br i1 %cmp1890, label %cond.true.1892, label %cond.false.1911

cond.true.1892:                                   ; preds = %cond.true.1885
  %561 = load i64, i64* %width, align 8
  %mul1893 = mul nsw i64 0, %561
  %562 = load i64, i64* %thiswidth, align 8
  %add1894 = add nsw i64 %mul1893, %562
  %mul1895 = mul nsw i64 0, %add1894
  %add1896 = add nsw i64 %mul1895, 0
  %neg1897 = xor i64 %add1896, -1
  %cmp1898 = icmp eq i64 %neg1897, -1
  %conv1899 = zext i1 %cmp1898 to i32
  %sub1900 = sub nsw i32 0, %conv1899
  %conv1901 = sext i32 %sub1900 to i64
  %563 = load i64, i64* %width, align 8
  %mul1902 = mul nsw i64 0, %563
  %564 = load i64, i64* %thiswidth, align 8
  %add1903 = add nsw i64 %mul1902, %564
  %mul1904 = mul nsw i64 0, %add1903
  %add1905 = add nsw i64 %mul1904, 1
  %shl1906 = shl i64 %add1905, 62
  %sub1907 = sub nsw i64 %shl1906, 1
  %mul1908 = mul nsw i64 %sub1907, 2
  %add1909 = add nsw i64 %mul1908, 1
  %sub1910 = sub nsw i64 %conv1901, %add1909
  br label %cond.end.1916

cond.false.1911:                                  ; preds = %cond.true.1885
  %565 = load i64, i64* %width, align 8
  %mul1912 = mul nsw i64 0, %565
  %566 = load i64, i64* %thiswidth, align 8
  %add1913 = add nsw i64 %mul1912, %566
  %mul1914 = mul nsw i64 0, %add1913
  %add1915 = add nsw i64 %mul1914, 0
  br label %cond.end.1916

cond.end.1916:                                    ; preds = %cond.false.1911, %cond.true.1892
  %cond1917 = phi i64 [ %sub1910, %cond.true.1892 ], [ %add1915, %cond.false.1911 ]
  %567 = load i64, i64* %width, align 8
  %sub1918 = sub nsw i64 %cond1917, %567
  %cmp1919 = icmp slt i64 %558, %sub1918
  br i1 %cmp1919, label %cond.true.1979, label %lor.lhs.false.1965

cond.false.1921:                                  ; preds = %cond.true.1882
  %568 = load i64, i64* %width, align 8
  %mul1922 = mul nsw i64 0, %568
  %569 = load i64, i64* %thiswidth, align 8
  %add1923 = add nsw i64 %mul1922, %569
  %mul1924 = mul nsw i64 0, %add1923
  %sub1925 = sub nsw i64 %mul1924, 1
  %cmp1926 = icmp slt i64 %sub1925, 0
  br i1 %cmp1926, label %cond.true.1928, label %cond.false.1937

cond.true.1928:                                   ; preds = %cond.false.1921
  %570 = load i64, i64* %width, align 8
  %mul1929 = mul nsw i64 0, %570
  %571 = load i64, i64* %thiswidth, align 8
  %add1930 = add nsw i64 %mul1929, %571
  %mul1931 = mul nsw i64 0, %add1930
  %add1932 = add nsw i64 %mul1931, 1
  %shl1933 = shl i64 %add1932, 62
  %sub1934 = sub nsw i64 %shl1933, 1
  %mul1935 = mul nsw i64 %sub1934, 2
  %add1936 = add nsw i64 %mul1935, 1
  br label %cond.end.1942

cond.false.1937:                                  ; preds = %cond.false.1921
  %572 = load i64, i64* %width, align 8
  %mul1938 = mul nsw i64 0, %572
  %573 = load i64, i64* %thiswidth, align 8
  %add1939 = add nsw i64 %mul1938, %573
  %mul1940 = mul nsw i64 0, %add1939
  %sub1941 = sub nsw i64 %mul1940, 1
  br label %cond.end.1942

cond.end.1942:                                    ; preds = %cond.false.1937, %cond.true.1928
  %cond1943 = phi i64 [ %add1936, %cond.true.1928 ], [ %sub1941, %cond.false.1937 ]
  %574 = load i64, i64* %width, align 8
  %sub1944 = sub nsw i64 %cond1943, %574
  %575 = load i64, i64* %thiswidth, align 8
  %cmp1945 = icmp slt i64 %sub1944, %575
  br i1 %cmp1945, label %cond.true.1979, label %lor.lhs.false.1965

cond.false.1947:                                  ; preds = %cond.end.1878
  %576 = load i64, i64* %thiswidth, align 8
  %cmp1948 = icmp slt i64 %576, 0
  br i1 %cmp1948, label %cond.true.1950, label %cond.false.1954

cond.true.1950:                                   ; preds = %cond.false.1947
  %577 = load i64, i64* %width, align 8
  %578 = load i64, i64* %thiswidth, align 8
  %579 = load i64, i64* %width, align 8
  %add1951 = add nsw i64 %578, %579
  %cmp1952 = icmp sle i64 %577, %add1951
  br i1 %cmp1952, label %cond.true.1979, label %lor.lhs.false.1965

cond.false.1954:                                  ; preds = %cond.false.1947
  %580 = load i64, i64* %width, align 8
  %cmp1955 = icmp slt i64 %580, 0
  br i1 %cmp1955, label %cond.true.1957, label %cond.false.1961

cond.true.1957:                                   ; preds = %cond.false.1954
  %581 = load i64, i64* %thiswidth, align 8
  %582 = load i64, i64* %thiswidth, align 8
  %583 = load i64, i64* %width, align 8
  %add1958 = add nsw i64 %582, %583
  %cmp1959 = icmp sle i64 %581, %add1958
  br i1 %cmp1959, label %cond.true.1979, label %lor.lhs.false.1965

cond.false.1961:                                  ; preds = %cond.false.1954
  %584 = load i64, i64* %thiswidth, align 8
  %585 = load i64, i64* %width, align 8
  %add1962 = add nsw i64 %584, %585
  %586 = load i64, i64* %width, align 8
  %cmp1963 = icmp slt i64 %add1962, %586
  br i1 %cmp1963, label %cond.true.1979, label %lor.lhs.false.1965

lor.lhs.false.1965:                               ; preds = %cond.false.1961, %cond.true.1957, %cond.true.1950, %cond.end.1942, %cond.end.1916
  %587 = load i64, i64* %thiswidth, align 8
  %588 = load i64, i64* %width, align 8
  %add1966 = add nsw i64 %587, %588
  %mul1967 = mul nsw i64 0, %add1966
  %sub1968 = sub nsw i64 %mul1967, 1
  %cmp1969 = icmp slt i64 %sub1968, 0
  br i1 %cmp1969, label %land.lhs.true.1971, label %lor.lhs.false.1975

land.lhs.true.1971:                               ; preds = %lor.lhs.false.1965
  %589 = load i64, i64* %thiswidth, align 8
  %590 = load i64, i64* %width, align 8
  %add1972 = add nsw i64 %589, %590
  %cmp1973 = icmp slt i64 %add1972, -9223372036854775808
  br i1 %cmp1973, label %cond.true.1979, label %lor.lhs.false.1975

lor.lhs.false.1975:                               ; preds = %land.lhs.true.1971, %lor.lhs.false.1965
  %591 = load i64, i64* %thiswidth, align 8
  %592 = load i64, i64* %width, align 8
  %add1976 = add nsw i64 %591, %592
  %cmp1977 = icmp slt i64 9223372036854775807, %add1976
  br i1 %cmp1977, label %cond.true.1979, label %cond.false.1991

cond.true.1979:                                   ; preds = %lor.lhs.false.1975, %land.lhs.true.1971, %cond.false.1961, %cond.true.1957, %cond.true.1950, %cond.end.1942, %cond.end.1916
  %593 = load i64, i64* %thiswidth, align 8
  %594 = load i64, i64* %width, align 8
  %add1980 = add i64 %593, %594
  %cmp1981 = icmp ule i64 %add1980, 9223372036854775807
  br i1 %cmp1981, label %cond.true.1983, label %cond.false.1985

cond.true.1983:                                   ; preds = %cond.true.1979
  %595 = load i64, i64* %thiswidth, align 8
  %596 = load i64, i64* %width, align 8
  %add1984 = add i64 %595, %596
  br label %cond.end.1989

cond.false.1985:                                  ; preds = %cond.true.1979
  %597 = load i64, i64* %thiswidth, align 8
  %598 = load i64, i64* %width, align 8
  %add1986 = add i64 %597, %598
  %sub1987 = sub i64 %add1986, -9223372036854775808
  %add1988 = add nsw i64 %sub1987, -9223372036854775808
  br label %cond.end.1989

cond.end.1989:                                    ; preds = %cond.false.1985, %cond.true.1983
  %cond1990 = phi i64 [ %add1984, %cond.true.1983 ], [ %add1988, %cond.false.1985 ]
  store i64 %cond1990, i64* %width, align 8
  br i1 true, label %if.then.2003, label %if.end.2004

cond.false.1991:                                  ; preds = %lor.lhs.false.1975
  %599 = load i64, i64* %thiswidth, align 8
  %600 = load i64, i64* %width, align 8
  %add1992 = add i64 %599, %600
  %cmp1993 = icmp ule i64 %add1992, 9223372036854775807
  br i1 %cmp1993, label %cond.true.1995, label %cond.false.1997

cond.true.1995:                                   ; preds = %cond.false.1991
  %601 = load i64, i64* %thiswidth, align 8
  %602 = load i64, i64* %width, align 8
  %add1996 = add i64 %601, %602
  br label %cond.end.2001

cond.false.1997:                                  ; preds = %cond.false.1991
  %603 = load i64, i64* %thiswidth, align 8
  %604 = load i64, i64* %width, align 8
  %add1998 = add i64 %603, %604
  %sub1999 = sub i64 %add1998, -9223372036854775808
  %add2000 = add nsw i64 %sub1999, -9223372036854775808
  br label %cond.end.2001

cond.end.2001:                                    ; preds = %cond.false.1997, %cond.true.1995
  %cond2002 = phi i64 [ %add1996, %cond.true.1995 ], [ %add2000, %cond.false.1997 ]
  store i64 %cond2002, i64* %width, align 8
  br i1 false, label %if.then.2003, label %if.end.2004

if.then.2003:                                     ; preds = %cond.end.2001, %cond.end.1989, %cond.end.1845, %cond.end.1833, %cond.end.1688, %cond.end.1676, %cond.end.1532, %cond.end.1520, %cond.end.1373, %cond.end.1354, %cond.end.1203, %cond.end.1184, %cond.end.989, %cond.end.960, %cond.end.799, %cond.end.770, %cond.end.521, %cond.end.492, %cond.end.331, %cond.end.302
  call void @string_overflow() #7
  unreachable

if.end.2004:                                      ; preds = %cond.end.2001, %cond.end.1989, %cond.end.1845, %cond.end.1833, %cond.end.1688, %cond.end.1676, %cond.end.1532, %cond.end.1520, %cond.end.1373, %cond.end.1354, %cond.end.1203, %cond.end.1184, %cond.end.989, %cond.end.960, %cond.end.799, %cond.end.770, %cond.end.521, %cond.end.492, %cond.end.331, %cond.end.302
  %605 = load i64, i64* %i, align 8
  %inc = add nsw i64 %605, 1
  store i64 %inc, i64* %i, align 8
  %606 = load i32, i32* %bytes, align 4
  %conv2005 = sext i32 %606 to i64
  %607 = load i64, i64* %i_byte, align 8
  %add2006 = add nsw i64 %607, %conv2005
  store i64 %add2006, i64* %i_byte, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %608 = load i32, i32* %precision.addr, align 4
  %cmp2007 = icmp sgt i32 %608, 0
  br i1 %cmp2007, label %if.then.2009, label %if.end.2010

if.then.2009:                                     ; preds = %while.end
  %609 = load i64, i64* %i, align 8
  %610 = load i64*, i64** %nchars.addr, align 8
  store i64 %609, i64* %610, align 8
  %611 = load i64, i64* %i_byte, align 8
  %612 = load i64*, i64** %nbytes.addr, align 8
  store i64 %611, i64* %612, align 8
  br label %if.end.2010

if.end.2010:                                      ; preds = %if.then.2009, %while.end
  %613 = load i64, i64* %width, align 8
  store i64 %613, i64* %retval
  br label %return

return:                                           ; preds = %if.end.2010, %if.then
  %614 = load i64, i64* %retval
  ret i64 %614
}

; Function Attrs: noreturn
declare void @string_overflow() #2

; Function Attrs: nounwind uwtable
define i64 @strwidth(i8* %str, i64 %len) #1 {
entry:
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %call = call i64 @c_string_width(i8* %0, i64 %1, i32 -1, i64* null, i64* null)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define i64 @lisp_string_width(i64 %string, i64 %precision, i64* %nchars, i64* %nbytes) #1 {
entry:
  %retval = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %precision.addr = alloca i64, align 8
  %nchars.addr = alloca i64*, align 8
  %nbytes.addr = alloca i64*, align 8
  %len = alloca i64, align 8
  %multibyte = alloca i8, align 1
  %str = alloca i8*, align 8
  %i = alloca i64, align 8
  %i_byte = alloca i64, align 8
  %width = alloca i64, align 8
  %dp = alloca %struct.Lisp_Char_Table*, align 8
  %chars = alloca i64, align 8
  %bytes = alloca i64, align 8
  %thiswidth = alloca i64, align 8
  %val = alloca i64, align 8
  %cmp_id = alloca i64, align 8
  %ignore = alloca i64, align 8
  %end = alloca i64, align 8
  %c = alloca i32, align 4
  %cbytes = alloca i32, align 4
  store i64 %string, i64* %string.addr, align 8
  store i64 %precision, i64* %precision.addr, align 8
  store i64* %nchars, i64** %nchars.addr, align 8
  store i64* %nbytes, i64** %nbytes.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %call = call i64 @SCHARS(i64 %0)
  store i64 %call, i64* %len, align 8
  %1 = load i64, i64* %len, align 8
  %2 = load i64, i64* %string.addr, align 8
  %call1 = call i64 @SBYTES(i64 %2)
  %cmp = icmp slt i64 %1, %call1
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %multibyte, align 1
  %3 = load i64, i64* %string.addr, align 8
  %call2 = call i8* @SDATA(i64 %3)
  store i8* %call2, i8** %str, align 8
  store i64 0, i64* %i, align 8
  store i64 0, i64* %i_byte, align 8
  store i64 0, i64* %width, align 8
  %call3 = call %struct.Lisp_Char_Table* @buffer_display_table()
  store %struct.Lisp_Char_Table* %call3, %struct.Lisp_Char_Table** %dp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.2027, %entry
  %4 = load i64, i64* %i, align 8
  %5 = load i64, i64* %len, align 8
  %cmp4 = icmp slt i64 %4, %5
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64, i64* %i, align 8
  %7 = load i64, i64* %string.addr, align 8
  %call5 = call zeroext i1 @find_composition(i64 %6, i64 -1, i64* %ignore, i64* %end, i64* %val, i64 %7)
  br i1 %call5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %8 = load i64, i64* %i, align 8
  %9 = load i64, i64* %i_byte, align 8
  %10 = load i64, i64* %end, align 8
  %11 = load i64, i64* %i, align 8
  %sub = sub nsw i64 %10, %11
  %12 = load i64, i64* %val, align 8
  %13 = load i64, i64* %string.addr, align 8
  %call6 = call i64 @get_composition_id(i64 %8, i64 %9, i64 %sub, i64 %12, i64 %13)
  store i64 %call6, i64* %cmp_id, align 8
  %cmp7 = icmp sge i64 %call6, 0
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %14 = load i64, i64* %cmp_id, align 8
  %15 = load %struct.composition**, %struct.composition*** @composition_table, align 8
  %arrayidx = getelementptr inbounds %struct.composition*, %struct.composition** %15, i64 %14
  %16 = load %struct.composition*, %struct.composition** %arrayidx, align 8
  %width8 = getelementptr inbounds %struct.composition, %struct.composition* %16, i32 0, i32 6
  %17 = load i32, i32* %width8, align 4
  %conv = sext i32 %17 to i64
  store i64 %conv, i64* %thiswidth, align 8
  %18 = load i64, i64* %end, align 8
  %19 = load i64, i64* %i, align 8
  %sub9 = sub nsw i64 %18, %19
  store i64 %sub9, i64* %chars, align 8
  %20 = load i64, i64* %string.addr, align 8
  %21 = load i64, i64* %end, align 8
  %call10 = call i64 @string_char_to_byte(i64 %20, i64 %21)
  %22 = load i64, i64* %i_byte, align 8
  %sub11 = sub nsw i64 %call10, %22
  store i64 %sub11, i64* %bytes, align 8
  br label %if.end.74

if.else:                                          ; preds = %land.lhs.true, %while.body
  %23 = load i8, i8* %multibyte, align 1
  %tobool = trunc i8 %23 to i1
  br i1 %tobool, label %if.then.12, label %if.else.70

if.then.12:                                       ; preds = %if.else
  %24 = load i8*, i8** %str, align 8
  %25 = load i64, i64* %i_byte, align 8
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %25
  %arrayidx13 = getelementptr inbounds i8, i8* %add.ptr, i64 0
  %26 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %26 to i32
  %and = and i32 %conv14, 128
  %tobool15 = icmp ne i32 %and, 0
  br i1 %tobool15, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then.12
  store i32 1, i32* %cbytes, align 4
  %27 = load i8*, i8** %str, align 8
  %28 = load i64, i64* %i_byte, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %27, i64 %28
  %arrayidx17 = getelementptr inbounds i8, i8* %add.ptr16, i64 0
  %29 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %29 to i32
  br label %cond.end.67

cond.false:                                       ; preds = %if.then.12
  %30 = load i8*, i8** %str, align 8
  %31 = load i64, i64* %i_byte, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %30, i64 %31
  %arrayidx20 = getelementptr inbounds i8, i8* %add.ptr19, i64 0
  %32 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %32 to i32
  %and22 = and i32 %conv21, 32
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %cond.false.38, label %cond.true.24

cond.true.24:                                     ; preds = %cond.false
  store i32 2, i32* %cbytes, align 4
  %33 = load i8*, i8** %str, align 8
  %34 = load i64, i64* %i_byte, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %33, i64 %34
  %arrayidx26 = getelementptr inbounds i8, i8* %add.ptr25, i64 0
  %35 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %35 to i32
  %and28 = and i32 %conv27, 31
  %shl = shl i32 %and28, 6
  %36 = load i8*, i8** %str, align 8
  %37 = load i64, i64* %i_byte, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %36, i64 %37
  %arrayidx30 = getelementptr inbounds i8, i8* %add.ptr29, i64 1
  %38 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %38 to i32
  %and32 = and i32 %conv31, 63
  %or = or i32 %shl, %and32
  %39 = load i8*, i8** %str, align 8
  %40 = load i64, i64* %i_byte, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %39, i64 %40
  %arrayidx34 = getelementptr inbounds i8, i8* %add.ptr33, i64 0
  %41 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %41 to i32
  %cmp36 = icmp slt i32 %conv35, 194
  %cond = select i1 %cmp36, i32 4194176, i32 0
  %add = add nsw i32 %or, %cond
  br label %cond.end.65

cond.false.38:                                    ; preds = %cond.false
  %42 = load i8*, i8** %str, align 8
  %43 = load i64, i64* %i_byte, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %42, i64 %43
  %arrayidx40 = getelementptr inbounds i8, i8* %add.ptr39, i64 0
  %44 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %44 to i32
  %and42 = and i32 %conv41, 16
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %cond.false.61, label %cond.true.44

cond.true.44:                                     ; preds = %cond.false.38
  store i32 3, i32* %cbytes, align 4
  %45 = load i8*, i8** %str, align 8
  %46 = load i64, i64* %i_byte, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %45, i64 %46
  %arrayidx46 = getelementptr inbounds i8, i8* %add.ptr45, i64 0
  %47 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %47 to i32
  %and48 = and i32 %conv47, 15
  %shl49 = shl i32 %and48, 12
  %48 = load i8*, i8** %str, align 8
  %49 = load i64, i64* %i_byte, align 8
  %add.ptr50 = getelementptr inbounds i8, i8* %48, i64 %49
  %arrayidx51 = getelementptr inbounds i8, i8* %add.ptr50, i64 1
  %50 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %50 to i32
  %and53 = and i32 %conv52, 63
  %shl54 = shl i32 %and53, 6
  %or55 = or i32 %shl49, %shl54
  %51 = load i8*, i8** %str, align 8
  %52 = load i64, i64* %i_byte, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %51, i64 %52
  %arrayidx57 = getelementptr inbounds i8, i8* %add.ptr56, i64 2
  %53 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %53 to i32
  %and59 = and i32 %conv58, 63
  %or60 = or i32 %or55, %and59
  br label %cond.end

cond.false.61:                                    ; preds = %cond.false.38
  %54 = load i8*, i8** %str, align 8
  %55 = load i64, i64* %i_byte, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %54, i64 %55
  %call63 = call i32 @string_char(i8* %add.ptr62, i8** null, i32* %cbytes)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.61, %cond.true.44
  %cond64 = phi i32 [ %or60, %cond.true.44 ], [ %call63, %cond.false.61 ]
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.end, %cond.true.24
  %cond66 = phi i32 [ %add, %cond.true.24 ], [ %cond64, %cond.end ]
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.end.65, %cond.true
  %cond68 = phi i32 [ %conv18, %cond.true ], [ %cond66, %cond.end.65 ]
  store i32 %cond68, i32* %c, align 4
  %56 = load i32, i32* %cbytes, align 4
  %conv69 = sext i32 %56 to i64
  store i64 %conv69, i64* %bytes, align 8
  br label %if.end

if.else.70:                                       ; preds = %if.else
  %57 = load i64, i64* %i_byte, align 8
  %58 = load i8*, i8** %str, align 8
  %arrayidx71 = getelementptr inbounds i8, i8* %58, i64 %57
  %59 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %59 to i32
  store i32 %conv72, i32* %c, align 4
  store i64 1, i64* %bytes, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.70, %cond.end.67
  store i64 1, i64* %chars, align 8
  %60 = load i32, i32* %c, align 4
  %61 = load %struct.Lisp_Char_Table*, %struct.Lisp_Char_Table** %dp, align 8
  %call73 = call i64 @char_width(i32 %60, %struct.Lisp_Char_Table* %61)
  store i64 %call73, i64* %thiswidth, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.end, %if.then
  %62 = load i64, i64* %precision.addr, align 8
  %cmp75 = icmp slt i64 0, %62
  br i1 %cmp75, label %land.lhs.true.77, label %if.end.82

land.lhs.true.77:                                 ; preds = %if.end.74
  %63 = load i64, i64* %precision.addr, align 8
  %64 = load i64, i64* %width, align 8
  %sub78 = sub nsw i64 %63, %64
  %65 = load i64, i64* %thiswidth, align 8
  %cmp79 = icmp slt i64 %sub78, %65
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %land.lhs.true.77
  %66 = load i64, i64* %i, align 8
  %67 = load i64*, i64** %nchars.addr, align 8
  store i64 %66, i64* %67, align 8
  %68 = load i64, i64* %i_byte, align 8
  %69 = load i64*, i64** %nbytes.addr, align 8
  store i64 %68, i64* %69, align 8
  %70 = load i64, i64* %width, align 8
  store i64 %70, i64* %retval
  br label %return

if.end.82:                                        ; preds = %land.lhs.true.77, %if.end.74
  br i1 false, label %cond.true.83, label %cond.false.547

cond.true.83:                                     ; preds = %if.end.82
  br i1 false, label %cond.true.84, label %cond.false.357

cond.true.84:                                     ; preds = %cond.true.83
  %71 = load i64, i64* %width, align 8
  %conv85 = trunc i64 %71 to i8
  %conv86 = sext i8 %conv85 to i32
  %mul = mul nsw i32 0, %conv86
  %72 = load i64, i64* %thiswidth, align 8
  %conv87 = trunc i64 %72 to i8
  %conv88 = sext i8 %conv87 to i32
  %add89 = add nsw i32 %mul, %conv88
  %mul90 = mul nsw i32 0, %add89
  %sub91 = sub nsw i32 %mul90, 1
  %cmp92 = icmp slt i32 %sub91, 0
  br i1 %cmp92, label %cond.true.94, label %cond.false.119

cond.true.94:                                     ; preds = %cond.true.84
  %73 = load i64, i64* %width, align 8
  %conv95 = trunc i64 %73 to i8
  %conv96 = sext i8 %conv95 to i32
  %mul97 = mul nsw i32 0, %conv96
  %74 = load i64, i64* %thiswidth, align 8
  %conv98 = trunc i64 %74 to i8
  %conv99 = sext i8 %conv98 to i32
  %add100 = add nsw i32 %mul97, %conv99
  %mul101 = mul nsw i32 0, %add100
  %add102 = add nsw i32 %mul101, 0
  %neg = xor i32 %add102, -1
  %cmp103 = icmp eq i32 %neg, -1
  %conv104 = zext i1 %cmp103 to i32
  %sub105 = sub nsw i32 0, %conv104
  %75 = load i64, i64* %width, align 8
  %conv106 = trunc i64 %75 to i8
  %conv107 = sext i8 %conv106 to i32
  %mul108 = mul nsw i32 0, %conv107
  %76 = load i64, i64* %thiswidth, align 8
  %conv109 = trunc i64 %76 to i8
  %conv110 = sext i8 %conv109 to i32
  %add111 = add nsw i32 %mul108, %conv110
  %mul112 = mul nsw i32 0, %add111
  %add113 = add nsw i32 %mul112, 1
  %shl114 = shl i32 %add113, 30
  %sub115 = sub nsw i32 %shl114, 1
  %mul116 = mul nsw i32 %sub115, 2
  %add117 = add nsw i32 %mul116, 1
  %sub118 = sub nsw i32 %sub105, %add117
  br label %cond.end.128

cond.false.119:                                   ; preds = %cond.true.84
  %77 = load i64, i64* %width, align 8
  %conv120 = trunc i64 %77 to i8
  %conv121 = sext i8 %conv120 to i32
  %mul122 = mul nsw i32 0, %conv121
  %78 = load i64, i64* %thiswidth, align 8
  %conv123 = trunc i64 %78 to i8
  %conv124 = sext i8 %conv123 to i32
  %add125 = add nsw i32 %mul122, %conv124
  %mul126 = mul nsw i32 0, %add125
  %add127 = add nsw i32 %mul126, 0
  br label %cond.end.128

cond.end.128:                                     ; preds = %cond.false.119, %cond.true.94
  %cond129 = phi i32 [ %sub118, %cond.true.94 ], [ %add127, %cond.false.119 ]
  %cmp130 = icmp slt i32 %cond129, 0
  br i1 %cmp130, label %cond.true.132, label %cond.false.234

cond.true.132:                                    ; preds = %cond.end.128
  %79 = load i64, i64* %width, align 8
  %conv133 = trunc i64 %79 to i8
  %conv134 = sext i8 %conv133 to i32
  %cmp135 = icmp slt i32 %conv134, 0
  br i1 %cmp135, label %cond.true.137, label %cond.false.192

cond.true.137:                                    ; preds = %cond.true.132
  %80 = load i64, i64* %thiswidth, align 8
  %conv138 = trunc i64 %80 to i8
  %conv139 = sext i8 %conv138 to i32
  %81 = load i64, i64* %width, align 8
  %conv140 = trunc i64 %81 to i8
  %conv141 = sext i8 %conv140 to i32
  %mul142 = mul nsw i32 0, %conv141
  %82 = load i64, i64* %thiswidth, align 8
  %conv143 = trunc i64 %82 to i8
  %conv144 = sext i8 %conv143 to i32
  %add145 = add nsw i32 %mul142, %conv144
  %mul146 = mul nsw i32 0, %add145
  %sub147 = sub nsw i32 %mul146, 1
  %cmp148 = icmp slt i32 %sub147, 0
  br i1 %cmp148, label %cond.true.150, label %cond.false.176

cond.true.150:                                    ; preds = %cond.true.137
  %83 = load i64, i64* %width, align 8
  %conv151 = trunc i64 %83 to i8
  %conv152 = sext i8 %conv151 to i32
  %mul153 = mul nsw i32 0, %conv152
  %84 = load i64, i64* %thiswidth, align 8
  %conv154 = trunc i64 %84 to i8
  %conv155 = sext i8 %conv154 to i32
  %add156 = add nsw i32 %mul153, %conv155
  %mul157 = mul nsw i32 0, %add156
  %add158 = add nsw i32 %mul157, 0
  %neg159 = xor i32 %add158, -1
  %cmp160 = icmp eq i32 %neg159, -1
  %conv161 = zext i1 %cmp160 to i32
  %sub162 = sub nsw i32 0, %conv161
  %85 = load i64, i64* %width, align 8
  %conv163 = trunc i64 %85 to i8
  %conv164 = sext i8 %conv163 to i32
  %mul165 = mul nsw i32 0, %conv164
  %86 = load i64, i64* %thiswidth, align 8
  %conv166 = trunc i64 %86 to i8
  %conv167 = sext i8 %conv166 to i32
  %add168 = add nsw i32 %mul165, %conv167
  %mul169 = mul nsw i32 0, %add168
  %add170 = add nsw i32 %mul169, 1
  %shl171 = shl i32 %add170, 30
  %sub172 = sub nsw i32 %shl171, 1
  %mul173 = mul nsw i32 %sub172, 2
  %add174 = add nsw i32 %mul173, 1
  %sub175 = sub nsw i32 %sub162, %add174
  br label %cond.end.185

cond.false.176:                                   ; preds = %cond.true.137
  %87 = load i64, i64* %width, align 8
  %conv177 = trunc i64 %87 to i8
  %conv178 = sext i8 %conv177 to i32
  %mul179 = mul nsw i32 0, %conv178
  %88 = load i64, i64* %thiswidth, align 8
  %conv180 = trunc i64 %88 to i8
  %conv181 = sext i8 %conv180 to i32
  %add182 = add nsw i32 %mul179, %conv181
  %mul183 = mul nsw i32 0, %add182
  %add184 = add nsw i32 %mul183, 0
  br label %cond.end.185

cond.end.185:                                     ; preds = %cond.false.176, %cond.true.150
  %cond186 = phi i32 [ %sub175, %cond.true.150 ], [ %add184, %cond.false.176 ]
  %89 = load i64, i64* %width, align 8
  %conv187 = trunc i64 %89 to i8
  %conv188 = sext i8 %conv187 to i32
  %sub189 = sub nsw i32 %cond186, %conv188
  %cmp190 = icmp slt i32 %conv139, %sub189
  br i1 %cmp190, label %cond.true.299, label %lor.lhs.false

cond.false.192:                                   ; preds = %cond.true.132
  %90 = load i64, i64* %width, align 8
  %conv193 = trunc i64 %90 to i8
  %conv194 = sext i8 %conv193 to i32
  %mul195 = mul nsw i32 0, %conv194
  %91 = load i64, i64* %thiswidth, align 8
  %conv196 = trunc i64 %91 to i8
  %conv197 = sext i8 %conv196 to i32
  %add198 = add nsw i32 %mul195, %conv197
  %mul199 = mul nsw i32 0, %add198
  %sub200 = sub nsw i32 %mul199, 1
  %cmp201 = icmp slt i32 %sub200, 0
  br i1 %cmp201, label %cond.true.203, label %cond.false.216

cond.true.203:                                    ; preds = %cond.false.192
  %92 = load i64, i64* %width, align 8
  %conv204 = trunc i64 %92 to i8
  %conv205 = sext i8 %conv204 to i32
  %mul206 = mul nsw i32 0, %conv205
  %93 = load i64, i64* %thiswidth, align 8
  %conv207 = trunc i64 %93 to i8
  %conv208 = sext i8 %conv207 to i32
  %add209 = add nsw i32 %mul206, %conv208
  %mul210 = mul nsw i32 0, %add209
  %add211 = add nsw i32 %mul210, 1
  %shl212 = shl i32 %add211, 30
  %sub213 = sub nsw i32 %shl212, 1
  %mul214 = mul nsw i32 %sub213, 2
  %add215 = add nsw i32 %mul214, 1
  br label %cond.end.225

cond.false.216:                                   ; preds = %cond.false.192
  %94 = load i64, i64* %width, align 8
  %conv217 = trunc i64 %94 to i8
  %conv218 = sext i8 %conv217 to i32
  %mul219 = mul nsw i32 0, %conv218
  %95 = load i64, i64* %thiswidth, align 8
  %conv220 = trunc i64 %95 to i8
  %conv221 = sext i8 %conv220 to i32
  %add222 = add nsw i32 %mul219, %conv221
  %mul223 = mul nsw i32 0, %add222
  %sub224 = sub nsw i32 %mul223, 1
  br label %cond.end.225

cond.end.225:                                     ; preds = %cond.false.216, %cond.true.203
  %cond226 = phi i32 [ %add215, %cond.true.203 ], [ %sub224, %cond.false.216 ]
  %96 = load i64, i64* %width, align 8
  %conv227 = trunc i64 %96 to i8
  %conv228 = sext i8 %conv227 to i32
  %sub229 = sub nsw i32 %cond226, %conv228
  %97 = load i64, i64* %thiswidth, align 8
  %conv230 = trunc i64 %97 to i8
  %conv231 = sext i8 %conv230 to i32
  %cmp232 = icmp slt i32 %sub229, %conv231
  br i1 %cmp232, label %cond.true.299, label %lor.lhs.false

cond.false.234:                                   ; preds = %cond.end.128
  %98 = load i64, i64* %thiswidth, align 8
  %conv235 = trunc i64 %98 to i8
  %conv236 = sext i8 %conv235 to i32
  %cmp237 = icmp slt i32 %conv236, 0
  br i1 %cmp237, label %cond.true.239, label %cond.false.249

cond.true.239:                                    ; preds = %cond.false.234
  %99 = load i64, i64* %width, align 8
  %conv240 = trunc i64 %99 to i8
  %conv241 = sext i8 %conv240 to i32
  %100 = load i64, i64* %thiswidth, align 8
  %conv242 = trunc i64 %100 to i8
  %conv243 = sext i8 %conv242 to i32
  %101 = load i64, i64* %width, align 8
  %conv244 = trunc i64 %101 to i8
  %conv245 = sext i8 %conv244 to i32
  %add246 = add nsw i32 %conv243, %conv245
  %cmp247 = icmp sle i32 %conv241, %add246
  br i1 %cmp247, label %cond.true.299, label %lor.lhs.false

cond.false.249:                                   ; preds = %cond.false.234
  %102 = load i64, i64* %width, align 8
  %conv250 = trunc i64 %102 to i8
  %conv251 = sext i8 %conv250 to i32
  %cmp252 = icmp slt i32 %conv251, 0
  br i1 %cmp252, label %cond.true.254, label %cond.false.264

cond.true.254:                                    ; preds = %cond.false.249
  %103 = load i64, i64* %thiswidth, align 8
  %conv255 = trunc i64 %103 to i8
  %conv256 = sext i8 %conv255 to i32
  %104 = load i64, i64* %thiswidth, align 8
  %conv257 = trunc i64 %104 to i8
  %conv258 = sext i8 %conv257 to i32
  %105 = load i64, i64* %width, align 8
  %conv259 = trunc i64 %105 to i8
  %conv260 = sext i8 %conv259 to i32
  %add261 = add nsw i32 %conv258, %conv260
  %cmp262 = icmp sle i32 %conv256, %add261
  br i1 %cmp262, label %cond.true.299, label %lor.lhs.false

cond.false.264:                                   ; preds = %cond.false.249
  %106 = load i64, i64* %thiswidth, align 8
  %conv265 = trunc i64 %106 to i8
  %conv266 = sext i8 %conv265 to i32
  %107 = load i64, i64* %width, align 8
  %conv267 = trunc i64 %107 to i8
  %conv268 = sext i8 %conv267 to i32
  %add269 = add nsw i32 %conv266, %conv268
  %108 = load i64, i64* %width, align 8
  %conv270 = trunc i64 %108 to i8
  %conv271 = sext i8 %conv270 to i32
  %cmp272 = icmp slt i32 %add269, %conv271
  br i1 %cmp272, label %cond.true.299, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.264, %cond.true.254, %cond.true.239, %cond.end.225, %cond.end.185
  %109 = load i64, i64* %thiswidth, align 8
  %conv274 = trunc i64 %109 to i8
  %conv275 = sext i8 %conv274 to i32
  %110 = load i64, i64* %width, align 8
  %conv276 = trunc i64 %110 to i8
  %conv277 = sext i8 %conv276 to i32
  %add278 = add nsw i32 %conv275, %conv277
  %mul279 = mul nsw i32 0, %add278
  %sub280 = sub nsw i32 %mul279, 1
  %cmp281 = icmp slt i32 %sub280, 0
  br i1 %cmp281, label %land.lhs.true.283, label %lor.lhs.false.291

land.lhs.true.283:                                ; preds = %lor.lhs.false
  %111 = load i64, i64* %thiswidth, align 8
  %conv284 = trunc i64 %111 to i8
  %conv285 = sext i8 %conv284 to i32
  %112 = load i64, i64* %width, align 8
  %conv286 = trunc i64 %112 to i8
  %conv287 = sext i8 %conv286 to i32
  %add288 = add nsw i32 %conv285, %conv287
  %cmp289 = icmp slt i32 %add288, -128
  br i1 %cmp289, label %cond.true.299, label %lor.lhs.false.291

lor.lhs.false.291:                                ; preds = %land.lhs.true.283, %lor.lhs.false
  %113 = load i64, i64* %thiswidth, align 8
  %conv292 = trunc i64 %113 to i8
  %conv293 = sext i8 %conv292 to i32
  %114 = load i64, i64* %width, align 8
  %conv294 = trunc i64 %114 to i8
  %conv295 = sext i8 %conv294 to i32
  %add296 = add nsw i32 %conv293, %conv295
  %cmp297 = icmp slt i32 127, %add296
  br i1 %cmp297, label %cond.true.299, label %cond.false.328

cond.true.299:                                    ; preds = %lor.lhs.false.291, %land.lhs.true.283, %cond.false.264, %cond.true.254, %cond.true.239, %cond.end.225, %cond.end.185
  %115 = load i64, i64* %thiswidth, align 8
  %conv300 = trunc i64 %115 to i8
  %conv301 = zext i8 %conv300 to i32
  %116 = load i64, i64* %width, align 8
  %conv302 = trunc i64 %116 to i8
  %conv303 = zext i8 %conv302 to i32
  %add304 = add nsw i32 %conv301, %conv303
  %cmp305 = icmp sle i32 %add304, 127
  br i1 %cmp305, label %cond.true.307, label %cond.false.315

cond.true.307:                                    ; preds = %cond.true.299
  %117 = load i64, i64* %thiswidth, align 8
  %conv308 = trunc i64 %117 to i8
  %conv309 = zext i8 %conv308 to i32
  %118 = load i64, i64* %width, align 8
  %conv310 = trunc i64 %118 to i8
  %conv311 = zext i8 %conv310 to i32
  %add312 = add nsw i32 %conv309, %conv311
  %conv313 = trunc i32 %add312 to i8
  %conv314 = sext i8 %conv313 to i32
  br label %cond.end.325

cond.false.315:                                   ; preds = %cond.true.299
  %119 = load i64, i64* %thiswidth, align 8
  %conv316 = trunc i64 %119 to i8
  %conv317 = zext i8 %conv316 to i32
  %120 = load i64, i64* %width, align 8
  %conv318 = trunc i64 %120 to i8
  %conv319 = zext i8 %conv318 to i32
  %add320 = add nsw i32 %conv317, %conv319
  %sub321 = sub nsw i32 %add320, -128
  %conv322 = trunc i32 %sub321 to i8
  %conv323 = sext i8 %conv322 to i32
  %add324 = add nsw i32 %conv323, -128
  br label %cond.end.325

cond.end.325:                                     ; preds = %cond.false.315, %cond.true.307
  %cond326 = phi i32 [ %conv314, %cond.true.307 ], [ %add324, %cond.false.315 ]
  %conv327 = sext i32 %cond326 to i64
  store i64 %conv327, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.328:                                   ; preds = %lor.lhs.false.291
  %121 = load i64, i64* %thiswidth, align 8
  %conv329 = trunc i64 %121 to i8
  %conv330 = zext i8 %conv329 to i32
  %122 = load i64, i64* %width, align 8
  %conv331 = trunc i64 %122 to i8
  %conv332 = zext i8 %conv331 to i32
  %add333 = add nsw i32 %conv330, %conv332
  %cmp334 = icmp sle i32 %add333, 127
  br i1 %cmp334, label %cond.true.336, label %cond.false.344

cond.true.336:                                    ; preds = %cond.false.328
  %123 = load i64, i64* %thiswidth, align 8
  %conv337 = trunc i64 %123 to i8
  %conv338 = zext i8 %conv337 to i32
  %124 = load i64, i64* %width, align 8
  %conv339 = trunc i64 %124 to i8
  %conv340 = zext i8 %conv339 to i32
  %add341 = add nsw i32 %conv338, %conv340
  %conv342 = trunc i32 %add341 to i8
  %conv343 = sext i8 %conv342 to i32
  br label %cond.end.354

cond.false.344:                                   ; preds = %cond.false.328
  %125 = load i64, i64* %thiswidth, align 8
  %conv345 = trunc i64 %125 to i8
  %conv346 = zext i8 %conv345 to i32
  %126 = load i64, i64* %width, align 8
  %conv347 = trunc i64 %126 to i8
  %conv348 = zext i8 %conv347 to i32
  %add349 = add nsw i32 %conv346, %conv348
  %sub350 = sub nsw i32 %add349, -128
  %conv351 = trunc i32 %sub350 to i8
  %conv352 = sext i8 %conv351 to i32
  %add353 = add nsw i32 %conv352, -128
  br label %cond.end.354

cond.end.354:                                     ; preds = %cond.false.344, %cond.true.336
  %cond355 = phi i32 [ %conv343, %cond.true.336 ], [ %add353, %cond.false.344 ]
  %conv356 = sext i32 %cond355 to i64
  store i64 %conv356, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.357:                                   ; preds = %cond.true.83
  %127 = load i64, i64* %width, align 8
  %mul358 = mul nsw i64 0, %127
  %128 = load i64, i64* %thiswidth, align 8
  %add359 = add nsw i64 %mul358, %128
  %mul360 = mul nsw i64 0, %add359
  %sub361 = sub nsw i64 %mul360, 1
  %cmp362 = icmp slt i64 %sub361, 0
  br i1 %cmp362, label %cond.true.364, label %cond.false.383

cond.true.364:                                    ; preds = %cond.false.357
  %129 = load i64, i64* %width, align 8
  %mul365 = mul nsw i64 0, %129
  %130 = load i64, i64* %thiswidth, align 8
  %add366 = add nsw i64 %mul365, %130
  %mul367 = mul nsw i64 0, %add366
  %add368 = add nsw i64 %mul367, 0
  %neg369 = xor i64 %add368, -1
  %cmp370 = icmp eq i64 %neg369, -1
  %conv371 = zext i1 %cmp370 to i32
  %sub372 = sub nsw i32 0, %conv371
  %conv373 = sext i32 %sub372 to i64
  %131 = load i64, i64* %width, align 8
  %mul374 = mul nsw i64 0, %131
  %132 = load i64, i64* %thiswidth, align 8
  %add375 = add nsw i64 %mul374, %132
  %mul376 = mul nsw i64 0, %add375
  %add377 = add nsw i64 %mul376, 1
  %shl378 = shl i64 %add377, 62
  %sub379 = sub nsw i64 %shl378, 1
  %mul380 = mul nsw i64 %sub379, 2
  %add381 = add nsw i64 %mul380, 1
  %sub382 = sub nsw i64 %conv373, %add381
  br label %cond.end.388

cond.false.383:                                   ; preds = %cond.false.357
  %133 = load i64, i64* %width, align 8
  %mul384 = mul nsw i64 0, %133
  %134 = load i64, i64* %thiswidth, align 8
  %add385 = add nsw i64 %mul384, %134
  %mul386 = mul nsw i64 0, %add385
  %add387 = add nsw i64 %mul386, 0
  br label %cond.end.388

cond.end.388:                                     ; preds = %cond.false.383, %cond.true.364
  %cond389 = phi i64 [ %sub382, %cond.true.364 ], [ %add387, %cond.false.383 ]
  %cmp390 = icmp slt i64 %cond389, 0
  br i1 %cmp390, label %cond.true.392, label %cond.false.457

cond.true.392:                                    ; preds = %cond.end.388
  %135 = load i64, i64* %width, align 8
  %cmp393 = icmp slt i64 %135, 0
  br i1 %cmp393, label %cond.true.395, label %cond.false.431

cond.true.395:                                    ; preds = %cond.true.392
  %136 = load i64, i64* %thiswidth, align 8
  %137 = load i64, i64* %width, align 8
  %mul396 = mul nsw i64 0, %137
  %138 = load i64, i64* %thiswidth, align 8
  %add397 = add nsw i64 %mul396, %138
  %mul398 = mul nsw i64 0, %add397
  %sub399 = sub nsw i64 %mul398, 1
  %cmp400 = icmp slt i64 %sub399, 0
  br i1 %cmp400, label %cond.true.402, label %cond.false.421

cond.true.402:                                    ; preds = %cond.true.395
  %139 = load i64, i64* %width, align 8
  %mul403 = mul nsw i64 0, %139
  %140 = load i64, i64* %thiswidth, align 8
  %add404 = add nsw i64 %mul403, %140
  %mul405 = mul nsw i64 0, %add404
  %add406 = add nsw i64 %mul405, 0
  %neg407 = xor i64 %add406, -1
  %cmp408 = icmp eq i64 %neg407, -1
  %conv409 = zext i1 %cmp408 to i32
  %sub410 = sub nsw i32 0, %conv409
  %conv411 = sext i32 %sub410 to i64
  %141 = load i64, i64* %width, align 8
  %mul412 = mul nsw i64 0, %141
  %142 = load i64, i64* %thiswidth, align 8
  %add413 = add nsw i64 %mul412, %142
  %mul414 = mul nsw i64 0, %add413
  %add415 = add nsw i64 %mul414, 1
  %shl416 = shl i64 %add415, 62
  %sub417 = sub nsw i64 %shl416, 1
  %mul418 = mul nsw i64 %sub417, 2
  %add419 = add nsw i64 %mul418, 1
  %sub420 = sub nsw i64 %conv411, %add419
  br label %cond.end.426

cond.false.421:                                   ; preds = %cond.true.395
  %143 = load i64, i64* %width, align 8
  %mul422 = mul nsw i64 0, %143
  %144 = load i64, i64* %thiswidth, align 8
  %add423 = add nsw i64 %mul422, %144
  %mul424 = mul nsw i64 0, %add423
  %add425 = add nsw i64 %mul424, 0
  br label %cond.end.426

cond.end.426:                                     ; preds = %cond.false.421, %cond.true.402
  %cond427 = phi i64 [ %sub420, %cond.true.402 ], [ %add425, %cond.false.421 ]
  %145 = load i64, i64* %width, align 8
  %sub428 = sub nsw i64 %cond427, %145
  %cmp429 = icmp slt i64 %136, %sub428
  br i1 %cmp429, label %cond.true.489, label %lor.lhs.false.475

cond.false.431:                                   ; preds = %cond.true.392
  %146 = load i64, i64* %width, align 8
  %mul432 = mul nsw i64 0, %146
  %147 = load i64, i64* %thiswidth, align 8
  %add433 = add nsw i64 %mul432, %147
  %mul434 = mul nsw i64 0, %add433
  %sub435 = sub nsw i64 %mul434, 1
  %cmp436 = icmp slt i64 %sub435, 0
  br i1 %cmp436, label %cond.true.438, label %cond.false.447

cond.true.438:                                    ; preds = %cond.false.431
  %148 = load i64, i64* %width, align 8
  %mul439 = mul nsw i64 0, %148
  %149 = load i64, i64* %thiswidth, align 8
  %add440 = add nsw i64 %mul439, %149
  %mul441 = mul nsw i64 0, %add440
  %add442 = add nsw i64 %mul441, 1
  %shl443 = shl i64 %add442, 62
  %sub444 = sub nsw i64 %shl443, 1
  %mul445 = mul nsw i64 %sub444, 2
  %add446 = add nsw i64 %mul445, 1
  br label %cond.end.452

cond.false.447:                                   ; preds = %cond.false.431
  %150 = load i64, i64* %width, align 8
  %mul448 = mul nsw i64 0, %150
  %151 = load i64, i64* %thiswidth, align 8
  %add449 = add nsw i64 %mul448, %151
  %mul450 = mul nsw i64 0, %add449
  %sub451 = sub nsw i64 %mul450, 1
  br label %cond.end.452

cond.end.452:                                     ; preds = %cond.false.447, %cond.true.438
  %cond453 = phi i64 [ %add446, %cond.true.438 ], [ %sub451, %cond.false.447 ]
  %152 = load i64, i64* %width, align 8
  %sub454 = sub nsw i64 %cond453, %152
  %153 = load i64, i64* %thiswidth, align 8
  %cmp455 = icmp slt i64 %sub454, %153
  br i1 %cmp455, label %cond.true.489, label %lor.lhs.false.475

cond.false.457:                                   ; preds = %cond.end.388
  %154 = load i64, i64* %thiswidth, align 8
  %cmp458 = icmp slt i64 %154, 0
  br i1 %cmp458, label %cond.true.460, label %cond.false.464

cond.true.460:                                    ; preds = %cond.false.457
  %155 = load i64, i64* %width, align 8
  %156 = load i64, i64* %thiswidth, align 8
  %157 = load i64, i64* %width, align 8
  %add461 = add nsw i64 %156, %157
  %cmp462 = icmp sle i64 %155, %add461
  br i1 %cmp462, label %cond.true.489, label %lor.lhs.false.475

cond.false.464:                                   ; preds = %cond.false.457
  %158 = load i64, i64* %width, align 8
  %cmp465 = icmp slt i64 %158, 0
  br i1 %cmp465, label %cond.true.467, label %cond.false.471

cond.true.467:                                    ; preds = %cond.false.464
  %159 = load i64, i64* %thiswidth, align 8
  %160 = load i64, i64* %thiswidth, align 8
  %161 = load i64, i64* %width, align 8
  %add468 = add nsw i64 %160, %161
  %cmp469 = icmp sle i64 %159, %add468
  br i1 %cmp469, label %cond.true.489, label %lor.lhs.false.475

cond.false.471:                                   ; preds = %cond.false.464
  %162 = load i64, i64* %thiswidth, align 8
  %163 = load i64, i64* %width, align 8
  %add472 = add nsw i64 %162, %163
  %164 = load i64, i64* %width, align 8
  %cmp473 = icmp slt i64 %add472, %164
  br i1 %cmp473, label %cond.true.489, label %lor.lhs.false.475

lor.lhs.false.475:                                ; preds = %cond.false.471, %cond.true.467, %cond.true.460, %cond.end.452, %cond.end.426
  %165 = load i64, i64* %thiswidth, align 8
  %166 = load i64, i64* %width, align 8
  %add476 = add nsw i64 %165, %166
  %mul477 = mul nsw i64 0, %add476
  %sub478 = sub nsw i64 %mul477, 1
  %cmp479 = icmp slt i64 %sub478, 0
  br i1 %cmp479, label %land.lhs.true.481, label %lor.lhs.false.485

land.lhs.true.481:                                ; preds = %lor.lhs.false.475
  %167 = load i64, i64* %thiswidth, align 8
  %168 = load i64, i64* %width, align 8
  %add482 = add nsw i64 %167, %168
  %cmp483 = icmp slt i64 %add482, -128
  br i1 %cmp483, label %cond.true.489, label %lor.lhs.false.485

lor.lhs.false.485:                                ; preds = %land.lhs.true.481, %lor.lhs.false.475
  %169 = load i64, i64* %thiswidth, align 8
  %170 = load i64, i64* %width, align 8
  %add486 = add nsw i64 %169, %170
  %cmp487 = icmp slt i64 127, %add486
  br i1 %cmp487, label %cond.true.489, label %cond.false.518

cond.true.489:                                    ; preds = %lor.lhs.false.485, %land.lhs.true.481, %cond.false.471, %cond.true.467, %cond.true.460, %cond.end.452, %cond.end.426
  %171 = load i64, i64* %thiswidth, align 8
  %conv490 = trunc i64 %171 to i8
  %conv491 = zext i8 %conv490 to i32
  %172 = load i64, i64* %width, align 8
  %conv492 = trunc i64 %172 to i8
  %conv493 = zext i8 %conv492 to i32
  %add494 = add nsw i32 %conv491, %conv493
  %cmp495 = icmp sle i32 %add494, 127
  br i1 %cmp495, label %cond.true.497, label %cond.false.505

cond.true.497:                                    ; preds = %cond.true.489
  %173 = load i64, i64* %thiswidth, align 8
  %conv498 = trunc i64 %173 to i8
  %conv499 = zext i8 %conv498 to i32
  %174 = load i64, i64* %width, align 8
  %conv500 = trunc i64 %174 to i8
  %conv501 = zext i8 %conv500 to i32
  %add502 = add nsw i32 %conv499, %conv501
  %conv503 = trunc i32 %add502 to i8
  %conv504 = sext i8 %conv503 to i32
  br label %cond.end.515

cond.false.505:                                   ; preds = %cond.true.489
  %175 = load i64, i64* %thiswidth, align 8
  %conv506 = trunc i64 %175 to i8
  %conv507 = zext i8 %conv506 to i32
  %176 = load i64, i64* %width, align 8
  %conv508 = trunc i64 %176 to i8
  %conv509 = zext i8 %conv508 to i32
  %add510 = add nsw i32 %conv507, %conv509
  %sub511 = sub nsw i32 %add510, -128
  %conv512 = trunc i32 %sub511 to i8
  %conv513 = sext i8 %conv512 to i32
  %add514 = add nsw i32 %conv513, -128
  br label %cond.end.515

cond.end.515:                                     ; preds = %cond.false.505, %cond.true.497
  %cond516 = phi i32 [ %conv504, %cond.true.497 ], [ %add514, %cond.false.505 ]
  %conv517 = sext i32 %cond516 to i64
  store i64 %conv517, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.518:                                   ; preds = %lor.lhs.false.485
  %177 = load i64, i64* %thiswidth, align 8
  %conv519 = trunc i64 %177 to i8
  %conv520 = zext i8 %conv519 to i32
  %178 = load i64, i64* %width, align 8
  %conv521 = trunc i64 %178 to i8
  %conv522 = zext i8 %conv521 to i32
  %add523 = add nsw i32 %conv520, %conv522
  %cmp524 = icmp sle i32 %add523, 127
  br i1 %cmp524, label %cond.true.526, label %cond.false.534

cond.true.526:                                    ; preds = %cond.false.518
  %179 = load i64, i64* %thiswidth, align 8
  %conv527 = trunc i64 %179 to i8
  %conv528 = zext i8 %conv527 to i32
  %180 = load i64, i64* %width, align 8
  %conv529 = trunc i64 %180 to i8
  %conv530 = zext i8 %conv529 to i32
  %add531 = add nsw i32 %conv528, %conv530
  %conv532 = trunc i32 %add531 to i8
  %conv533 = sext i8 %conv532 to i32
  br label %cond.end.544

cond.false.534:                                   ; preds = %cond.false.518
  %181 = load i64, i64* %thiswidth, align 8
  %conv535 = trunc i64 %181 to i8
  %conv536 = zext i8 %conv535 to i32
  %182 = load i64, i64* %width, align 8
  %conv537 = trunc i64 %182 to i8
  %conv538 = zext i8 %conv537 to i32
  %add539 = add nsw i32 %conv536, %conv538
  %sub540 = sub nsw i32 %add539, -128
  %conv541 = trunc i32 %sub540 to i8
  %conv542 = sext i8 %conv541 to i32
  %add543 = add nsw i32 %conv542, -128
  br label %cond.end.544

cond.end.544:                                     ; preds = %cond.false.534, %cond.true.526
  %cond545 = phi i32 [ %conv533, %cond.true.526 ], [ %add543, %cond.false.534 ]
  %conv546 = sext i32 %cond545 to i64
  store i64 %conv546, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.547:                                   ; preds = %if.end.82
  br i1 false, label %cond.true.548, label %cond.false.1015

cond.true.548:                                    ; preds = %cond.false.547
  br i1 false, label %cond.true.549, label %cond.false.825

cond.true.549:                                    ; preds = %cond.true.548
  %183 = load i64, i64* %width, align 8
  %conv550 = trunc i64 %183 to i16
  %conv551 = sext i16 %conv550 to i32
  %mul552 = mul nsw i32 0, %conv551
  %184 = load i64, i64* %thiswidth, align 8
  %conv553 = trunc i64 %184 to i16
  %conv554 = sext i16 %conv553 to i32
  %add555 = add nsw i32 %mul552, %conv554
  %mul556 = mul nsw i32 0, %add555
  %sub557 = sub nsw i32 %mul556, 1
  %cmp558 = icmp slt i32 %sub557, 0
  br i1 %cmp558, label %cond.true.560, label %cond.false.586

cond.true.560:                                    ; preds = %cond.true.549
  %185 = load i64, i64* %width, align 8
  %conv561 = trunc i64 %185 to i16
  %conv562 = sext i16 %conv561 to i32
  %mul563 = mul nsw i32 0, %conv562
  %186 = load i64, i64* %thiswidth, align 8
  %conv564 = trunc i64 %186 to i16
  %conv565 = sext i16 %conv564 to i32
  %add566 = add nsw i32 %mul563, %conv565
  %mul567 = mul nsw i32 0, %add566
  %add568 = add nsw i32 %mul567, 0
  %neg569 = xor i32 %add568, -1
  %cmp570 = icmp eq i32 %neg569, -1
  %conv571 = zext i1 %cmp570 to i32
  %sub572 = sub nsw i32 0, %conv571
  %187 = load i64, i64* %width, align 8
  %conv573 = trunc i64 %187 to i16
  %conv574 = sext i16 %conv573 to i32
  %mul575 = mul nsw i32 0, %conv574
  %188 = load i64, i64* %thiswidth, align 8
  %conv576 = trunc i64 %188 to i16
  %conv577 = sext i16 %conv576 to i32
  %add578 = add nsw i32 %mul575, %conv577
  %mul579 = mul nsw i32 0, %add578
  %add580 = add nsw i32 %mul579, 1
  %shl581 = shl i32 %add580, 30
  %sub582 = sub nsw i32 %shl581, 1
  %mul583 = mul nsw i32 %sub582, 2
  %add584 = add nsw i32 %mul583, 1
  %sub585 = sub nsw i32 %sub572, %add584
  br label %cond.end.595

cond.false.586:                                   ; preds = %cond.true.549
  %189 = load i64, i64* %width, align 8
  %conv587 = trunc i64 %189 to i16
  %conv588 = sext i16 %conv587 to i32
  %mul589 = mul nsw i32 0, %conv588
  %190 = load i64, i64* %thiswidth, align 8
  %conv590 = trunc i64 %190 to i16
  %conv591 = sext i16 %conv590 to i32
  %add592 = add nsw i32 %mul589, %conv591
  %mul593 = mul nsw i32 0, %add592
  %add594 = add nsw i32 %mul593, 0
  br label %cond.end.595

cond.end.595:                                     ; preds = %cond.false.586, %cond.true.560
  %cond596 = phi i32 [ %sub585, %cond.true.560 ], [ %add594, %cond.false.586 ]
  %cmp597 = icmp slt i32 %cond596, 0
  br i1 %cmp597, label %cond.true.599, label %cond.false.701

cond.true.599:                                    ; preds = %cond.end.595
  %191 = load i64, i64* %width, align 8
  %conv600 = trunc i64 %191 to i16
  %conv601 = sext i16 %conv600 to i32
  %cmp602 = icmp slt i32 %conv601, 0
  br i1 %cmp602, label %cond.true.604, label %cond.false.659

cond.true.604:                                    ; preds = %cond.true.599
  %192 = load i64, i64* %thiswidth, align 8
  %conv605 = trunc i64 %192 to i16
  %conv606 = sext i16 %conv605 to i32
  %193 = load i64, i64* %width, align 8
  %conv607 = trunc i64 %193 to i16
  %conv608 = sext i16 %conv607 to i32
  %mul609 = mul nsw i32 0, %conv608
  %194 = load i64, i64* %thiswidth, align 8
  %conv610 = trunc i64 %194 to i16
  %conv611 = sext i16 %conv610 to i32
  %add612 = add nsw i32 %mul609, %conv611
  %mul613 = mul nsw i32 0, %add612
  %sub614 = sub nsw i32 %mul613, 1
  %cmp615 = icmp slt i32 %sub614, 0
  br i1 %cmp615, label %cond.true.617, label %cond.false.643

cond.true.617:                                    ; preds = %cond.true.604
  %195 = load i64, i64* %width, align 8
  %conv618 = trunc i64 %195 to i16
  %conv619 = sext i16 %conv618 to i32
  %mul620 = mul nsw i32 0, %conv619
  %196 = load i64, i64* %thiswidth, align 8
  %conv621 = trunc i64 %196 to i16
  %conv622 = sext i16 %conv621 to i32
  %add623 = add nsw i32 %mul620, %conv622
  %mul624 = mul nsw i32 0, %add623
  %add625 = add nsw i32 %mul624, 0
  %neg626 = xor i32 %add625, -1
  %cmp627 = icmp eq i32 %neg626, -1
  %conv628 = zext i1 %cmp627 to i32
  %sub629 = sub nsw i32 0, %conv628
  %197 = load i64, i64* %width, align 8
  %conv630 = trunc i64 %197 to i16
  %conv631 = sext i16 %conv630 to i32
  %mul632 = mul nsw i32 0, %conv631
  %198 = load i64, i64* %thiswidth, align 8
  %conv633 = trunc i64 %198 to i16
  %conv634 = sext i16 %conv633 to i32
  %add635 = add nsw i32 %mul632, %conv634
  %mul636 = mul nsw i32 0, %add635
  %add637 = add nsw i32 %mul636, 1
  %shl638 = shl i32 %add637, 30
  %sub639 = sub nsw i32 %shl638, 1
  %mul640 = mul nsw i32 %sub639, 2
  %add641 = add nsw i32 %mul640, 1
  %sub642 = sub nsw i32 %sub629, %add641
  br label %cond.end.652

cond.false.643:                                   ; preds = %cond.true.604
  %199 = load i64, i64* %width, align 8
  %conv644 = trunc i64 %199 to i16
  %conv645 = sext i16 %conv644 to i32
  %mul646 = mul nsw i32 0, %conv645
  %200 = load i64, i64* %thiswidth, align 8
  %conv647 = trunc i64 %200 to i16
  %conv648 = sext i16 %conv647 to i32
  %add649 = add nsw i32 %mul646, %conv648
  %mul650 = mul nsw i32 0, %add649
  %add651 = add nsw i32 %mul650, 0
  br label %cond.end.652

cond.end.652:                                     ; preds = %cond.false.643, %cond.true.617
  %cond653 = phi i32 [ %sub642, %cond.true.617 ], [ %add651, %cond.false.643 ]
  %201 = load i64, i64* %width, align 8
  %conv654 = trunc i64 %201 to i16
  %conv655 = sext i16 %conv654 to i32
  %sub656 = sub nsw i32 %cond653, %conv655
  %cmp657 = icmp slt i32 %conv606, %sub656
  br i1 %cmp657, label %cond.true.767, label %lor.lhs.false.741

cond.false.659:                                   ; preds = %cond.true.599
  %202 = load i64, i64* %width, align 8
  %conv660 = trunc i64 %202 to i16
  %conv661 = sext i16 %conv660 to i32
  %mul662 = mul nsw i32 0, %conv661
  %203 = load i64, i64* %thiswidth, align 8
  %conv663 = trunc i64 %203 to i16
  %conv664 = sext i16 %conv663 to i32
  %add665 = add nsw i32 %mul662, %conv664
  %mul666 = mul nsw i32 0, %add665
  %sub667 = sub nsw i32 %mul666, 1
  %cmp668 = icmp slt i32 %sub667, 0
  br i1 %cmp668, label %cond.true.670, label %cond.false.683

cond.true.670:                                    ; preds = %cond.false.659
  %204 = load i64, i64* %width, align 8
  %conv671 = trunc i64 %204 to i16
  %conv672 = sext i16 %conv671 to i32
  %mul673 = mul nsw i32 0, %conv672
  %205 = load i64, i64* %thiswidth, align 8
  %conv674 = trunc i64 %205 to i16
  %conv675 = sext i16 %conv674 to i32
  %add676 = add nsw i32 %mul673, %conv675
  %mul677 = mul nsw i32 0, %add676
  %add678 = add nsw i32 %mul677, 1
  %shl679 = shl i32 %add678, 30
  %sub680 = sub nsw i32 %shl679, 1
  %mul681 = mul nsw i32 %sub680, 2
  %add682 = add nsw i32 %mul681, 1
  br label %cond.end.692

cond.false.683:                                   ; preds = %cond.false.659
  %206 = load i64, i64* %width, align 8
  %conv684 = trunc i64 %206 to i16
  %conv685 = sext i16 %conv684 to i32
  %mul686 = mul nsw i32 0, %conv685
  %207 = load i64, i64* %thiswidth, align 8
  %conv687 = trunc i64 %207 to i16
  %conv688 = sext i16 %conv687 to i32
  %add689 = add nsw i32 %mul686, %conv688
  %mul690 = mul nsw i32 0, %add689
  %sub691 = sub nsw i32 %mul690, 1
  br label %cond.end.692

cond.end.692:                                     ; preds = %cond.false.683, %cond.true.670
  %cond693 = phi i32 [ %add682, %cond.true.670 ], [ %sub691, %cond.false.683 ]
  %208 = load i64, i64* %width, align 8
  %conv694 = trunc i64 %208 to i16
  %conv695 = sext i16 %conv694 to i32
  %sub696 = sub nsw i32 %cond693, %conv695
  %209 = load i64, i64* %thiswidth, align 8
  %conv697 = trunc i64 %209 to i16
  %conv698 = sext i16 %conv697 to i32
  %cmp699 = icmp slt i32 %sub696, %conv698
  br i1 %cmp699, label %cond.true.767, label %lor.lhs.false.741

cond.false.701:                                   ; preds = %cond.end.595
  %210 = load i64, i64* %thiswidth, align 8
  %conv702 = trunc i64 %210 to i16
  %conv703 = sext i16 %conv702 to i32
  %cmp704 = icmp slt i32 %conv703, 0
  br i1 %cmp704, label %cond.true.706, label %cond.false.716

cond.true.706:                                    ; preds = %cond.false.701
  %211 = load i64, i64* %width, align 8
  %conv707 = trunc i64 %211 to i16
  %conv708 = sext i16 %conv707 to i32
  %212 = load i64, i64* %thiswidth, align 8
  %conv709 = trunc i64 %212 to i16
  %conv710 = sext i16 %conv709 to i32
  %213 = load i64, i64* %width, align 8
  %conv711 = trunc i64 %213 to i16
  %conv712 = sext i16 %conv711 to i32
  %add713 = add nsw i32 %conv710, %conv712
  %cmp714 = icmp sle i32 %conv708, %add713
  br i1 %cmp714, label %cond.true.767, label %lor.lhs.false.741

cond.false.716:                                   ; preds = %cond.false.701
  %214 = load i64, i64* %width, align 8
  %conv717 = trunc i64 %214 to i16
  %conv718 = sext i16 %conv717 to i32
  %cmp719 = icmp slt i32 %conv718, 0
  br i1 %cmp719, label %cond.true.721, label %cond.false.731

cond.true.721:                                    ; preds = %cond.false.716
  %215 = load i64, i64* %thiswidth, align 8
  %conv722 = trunc i64 %215 to i16
  %conv723 = sext i16 %conv722 to i32
  %216 = load i64, i64* %thiswidth, align 8
  %conv724 = trunc i64 %216 to i16
  %conv725 = sext i16 %conv724 to i32
  %217 = load i64, i64* %width, align 8
  %conv726 = trunc i64 %217 to i16
  %conv727 = sext i16 %conv726 to i32
  %add728 = add nsw i32 %conv725, %conv727
  %cmp729 = icmp sle i32 %conv723, %add728
  br i1 %cmp729, label %cond.true.767, label %lor.lhs.false.741

cond.false.731:                                   ; preds = %cond.false.716
  %218 = load i64, i64* %thiswidth, align 8
  %conv732 = trunc i64 %218 to i16
  %conv733 = sext i16 %conv732 to i32
  %219 = load i64, i64* %width, align 8
  %conv734 = trunc i64 %219 to i16
  %conv735 = sext i16 %conv734 to i32
  %add736 = add nsw i32 %conv733, %conv735
  %220 = load i64, i64* %width, align 8
  %conv737 = trunc i64 %220 to i16
  %conv738 = sext i16 %conv737 to i32
  %cmp739 = icmp slt i32 %add736, %conv738
  br i1 %cmp739, label %cond.true.767, label %lor.lhs.false.741

lor.lhs.false.741:                                ; preds = %cond.false.731, %cond.true.721, %cond.true.706, %cond.end.692, %cond.end.652
  %221 = load i64, i64* %thiswidth, align 8
  %conv742 = trunc i64 %221 to i16
  %conv743 = sext i16 %conv742 to i32
  %222 = load i64, i64* %width, align 8
  %conv744 = trunc i64 %222 to i16
  %conv745 = sext i16 %conv744 to i32
  %add746 = add nsw i32 %conv743, %conv745
  %mul747 = mul nsw i32 0, %add746
  %sub748 = sub nsw i32 %mul747, 1
  %cmp749 = icmp slt i32 %sub748, 0
  br i1 %cmp749, label %land.lhs.true.751, label %lor.lhs.false.759

land.lhs.true.751:                                ; preds = %lor.lhs.false.741
  %223 = load i64, i64* %thiswidth, align 8
  %conv752 = trunc i64 %223 to i16
  %conv753 = sext i16 %conv752 to i32
  %224 = load i64, i64* %width, align 8
  %conv754 = trunc i64 %224 to i16
  %conv755 = sext i16 %conv754 to i32
  %add756 = add nsw i32 %conv753, %conv755
  %cmp757 = icmp slt i32 %add756, -32768
  br i1 %cmp757, label %cond.true.767, label %lor.lhs.false.759

lor.lhs.false.759:                                ; preds = %land.lhs.true.751, %lor.lhs.false.741
  %225 = load i64, i64* %thiswidth, align 8
  %conv760 = trunc i64 %225 to i16
  %conv761 = sext i16 %conv760 to i32
  %226 = load i64, i64* %width, align 8
  %conv762 = trunc i64 %226 to i16
  %conv763 = sext i16 %conv762 to i32
  %add764 = add nsw i32 %conv761, %conv763
  %cmp765 = icmp slt i32 32767, %add764
  br i1 %cmp765, label %cond.true.767, label %cond.false.796

cond.true.767:                                    ; preds = %lor.lhs.false.759, %land.lhs.true.751, %cond.false.731, %cond.true.721, %cond.true.706, %cond.end.692, %cond.end.652
  %227 = load i64, i64* %thiswidth, align 8
  %conv768 = trunc i64 %227 to i16
  %conv769 = zext i16 %conv768 to i32
  %228 = load i64, i64* %width, align 8
  %conv770 = trunc i64 %228 to i16
  %conv771 = zext i16 %conv770 to i32
  %add772 = add nsw i32 %conv769, %conv771
  %cmp773 = icmp sle i32 %add772, 32767
  br i1 %cmp773, label %cond.true.775, label %cond.false.783

cond.true.775:                                    ; preds = %cond.true.767
  %229 = load i64, i64* %thiswidth, align 8
  %conv776 = trunc i64 %229 to i16
  %conv777 = zext i16 %conv776 to i32
  %230 = load i64, i64* %width, align 8
  %conv778 = trunc i64 %230 to i16
  %conv779 = zext i16 %conv778 to i32
  %add780 = add nsw i32 %conv777, %conv779
  %conv781 = trunc i32 %add780 to i16
  %conv782 = sext i16 %conv781 to i32
  br label %cond.end.793

cond.false.783:                                   ; preds = %cond.true.767
  %231 = load i64, i64* %thiswidth, align 8
  %conv784 = trunc i64 %231 to i16
  %conv785 = zext i16 %conv784 to i32
  %232 = load i64, i64* %width, align 8
  %conv786 = trunc i64 %232 to i16
  %conv787 = zext i16 %conv786 to i32
  %add788 = add nsw i32 %conv785, %conv787
  %sub789 = sub nsw i32 %add788, -32768
  %conv790 = trunc i32 %sub789 to i16
  %conv791 = sext i16 %conv790 to i32
  %add792 = add nsw i32 %conv791, -32768
  br label %cond.end.793

cond.end.793:                                     ; preds = %cond.false.783, %cond.true.775
  %cond794 = phi i32 [ %conv782, %cond.true.775 ], [ %add792, %cond.false.783 ]
  %conv795 = sext i32 %cond794 to i64
  store i64 %conv795, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.796:                                   ; preds = %lor.lhs.false.759
  %233 = load i64, i64* %thiswidth, align 8
  %conv797 = trunc i64 %233 to i16
  %conv798 = zext i16 %conv797 to i32
  %234 = load i64, i64* %width, align 8
  %conv799 = trunc i64 %234 to i16
  %conv800 = zext i16 %conv799 to i32
  %add801 = add nsw i32 %conv798, %conv800
  %cmp802 = icmp sle i32 %add801, 32767
  br i1 %cmp802, label %cond.true.804, label %cond.false.812

cond.true.804:                                    ; preds = %cond.false.796
  %235 = load i64, i64* %thiswidth, align 8
  %conv805 = trunc i64 %235 to i16
  %conv806 = zext i16 %conv805 to i32
  %236 = load i64, i64* %width, align 8
  %conv807 = trunc i64 %236 to i16
  %conv808 = zext i16 %conv807 to i32
  %add809 = add nsw i32 %conv806, %conv808
  %conv810 = trunc i32 %add809 to i16
  %conv811 = sext i16 %conv810 to i32
  br label %cond.end.822

cond.false.812:                                   ; preds = %cond.false.796
  %237 = load i64, i64* %thiswidth, align 8
  %conv813 = trunc i64 %237 to i16
  %conv814 = zext i16 %conv813 to i32
  %238 = load i64, i64* %width, align 8
  %conv815 = trunc i64 %238 to i16
  %conv816 = zext i16 %conv815 to i32
  %add817 = add nsw i32 %conv814, %conv816
  %sub818 = sub nsw i32 %add817, -32768
  %conv819 = trunc i32 %sub818 to i16
  %conv820 = sext i16 %conv819 to i32
  %add821 = add nsw i32 %conv820, -32768
  br label %cond.end.822

cond.end.822:                                     ; preds = %cond.false.812, %cond.true.804
  %cond823 = phi i32 [ %conv811, %cond.true.804 ], [ %add821, %cond.false.812 ]
  %conv824 = sext i32 %cond823 to i64
  store i64 %conv824, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.825:                                   ; preds = %cond.true.548
  %239 = load i64, i64* %width, align 8
  %mul826 = mul nsw i64 0, %239
  %240 = load i64, i64* %thiswidth, align 8
  %add827 = add nsw i64 %mul826, %240
  %mul828 = mul nsw i64 0, %add827
  %sub829 = sub nsw i64 %mul828, 1
  %cmp830 = icmp slt i64 %sub829, 0
  br i1 %cmp830, label %cond.true.832, label %cond.false.851

cond.true.832:                                    ; preds = %cond.false.825
  %241 = load i64, i64* %width, align 8
  %mul833 = mul nsw i64 0, %241
  %242 = load i64, i64* %thiswidth, align 8
  %add834 = add nsw i64 %mul833, %242
  %mul835 = mul nsw i64 0, %add834
  %add836 = add nsw i64 %mul835, 0
  %neg837 = xor i64 %add836, -1
  %cmp838 = icmp eq i64 %neg837, -1
  %conv839 = zext i1 %cmp838 to i32
  %sub840 = sub nsw i32 0, %conv839
  %conv841 = sext i32 %sub840 to i64
  %243 = load i64, i64* %width, align 8
  %mul842 = mul nsw i64 0, %243
  %244 = load i64, i64* %thiswidth, align 8
  %add843 = add nsw i64 %mul842, %244
  %mul844 = mul nsw i64 0, %add843
  %add845 = add nsw i64 %mul844, 1
  %shl846 = shl i64 %add845, 62
  %sub847 = sub nsw i64 %shl846, 1
  %mul848 = mul nsw i64 %sub847, 2
  %add849 = add nsw i64 %mul848, 1
  %sub850 = sub nsw i64 %conv841, %add849
  br label %cond.end.856

cond.false.851:                                   ; preds = %cond.false.825
  %245 = load i64, i64* %width, align 8
  %mul852 = mul nsw i64 0, %245
  %246 = load i64, i64* %thiswidth, align 8
  %add853 = add nsw i64 %mul852, %246
  %mul854 = mul nsw i64 0, %add853
  %add855 = add nsw i64 %mul854, 0
  br label %cond.end.856

cond.end.856:                                     ; preds = %cond.false.851, %cond.true.832
  %cond857 = phi i64 [ %sub850, %cond.true.832 ], [ %add855, %cond.false.851 ]
  %cmp858 = icmp slt i64 %cond857, 0
  br i1 %cmp858, label %cond.true.860, label %cond.false.925

cond.true.860:                                    ; preds = %cond.end.856
  %247 = load i64, i64* %width, align 8
  %cmp861 = icmp slt i64 %247, 0
  br i1 %cmp861, label %cond.true.863, label %cond.false.899

cond.true.863:                                    ; preds = %cond.true.860
  %248 = load i64, i64* %thiswidth, align 8
  %249 = load i64, i64* %width, align 8
  %mul864 = mul nsw i64 0, %249
  %250 = load i64, i64* %thiswidth, align 8
  %add865 = add nsw i64 %mul864, %250
  %mul866 = mul nsw i64 0, %add865
  %sub867 = sub nsw i64 %mul866, 1
  %cmp868 = icmp slt i64 %sub867, 0
  br i1 %cmp868, label %cond.true.870, label %cond.false.889

cond.true.870:                                    ; preds = %cond.true.863
  %251 = load i64, i64* %width, align 8
  %mul871 = mul nsw i64 0, %251
  %252 = load i64, i64* %thiswidth, align 8
  %add872 = add nsw i64 %mul871, %252
  %mul873 = mul nsw i64 0, %add872
  %add874 = add nsw i64 %mul873, 0
  %neg875 = xor i64 %add874, -1
  %cmp876 = icmp eq i64 %neg875, -1
  %conv877 = zext i1 %cmp876 to i32
  %sub878 = sub nsw i32 0, %conv877
  %conv879 = sext i32 %sub878 to i64
  %253 = load i64, i64* %width, align 8
  %mul880 = mul nsw i64 0, %253
  %254 = load i64, i64* %thiswidth, align 8
  %add881 = add nsw i64 %mul880, %254
  %mul882 = mul nsw i64 0, %add881
  %add883 = add nsw i64 %mul882, 1
  %shl884 = shl i64 %add883, 62
  %sub885 = sub nsw i64 %shl884, 1
  %mul886 = mul nsw i64 %sub885, 2
  %add887 = add nsw i64 %mul886, 1
  %sub888 = sub nsw i64 %conv879, %add887
  br label %cond.end.894

cond.false.889:                                   ; preds = %cond.true.863
  %255 = load i64, i64* %width, align 8
  %mul890 = mul nsw i64 0, %255
  %256 = load i64, i64* %thiswidth, align 8
  %add891 = add nsw i64 %mul890, %256
  %mul892 = mul nsw i64 0, %add891
  %add893 = add nsw i64 %mul892, 0
  br label %cond.end.894

cond.end.894:                                     ; preds = %cond.false.889, %cond.true.870
  %cond895 = phi i64 [ %sub888, %cond.true.870 ], [ %add893, %cond.false.889 ]
  %257 = load i64, i64* %width, align 8
  %sub896 = sub nsw i64 %cond895, %257
  %cmp897 = icmp slt i64 %248, %sub896
  br i1 %cmp897, label %cond.true.957, label %lor.lhs.false.943

cond.false.899:                                   ; preds = %cond.true.860
  %258 = load i64, i64* %width, align 8
  %mul900 = mul nsw i64 0, %258
  %259 = load i64, i64* %thiswidth, align 8
  %add901 = add nsw i64 %mul900, %259
  %mul902 = mul nsw i64 0, %add901
  %sub903 = sub nsw i64 %mul902, 1
  %cmp904 = icmp slt i64 %sub903, 0
  br i1 %cmp904, label %cond.true.906, label %cond.false.915

cond.true.906:                                    ; preds = %cond.false.899
  %260 = load i64, i64* %width, align 8
  %mul907 = mul nsw i64 0, %260
  %261 = load i64, i64* %thiswidth, align 8
  %add908 = add nsw i64 %mul907, %261
  %mul909 = mul nsw i64 0, %add908
  %add910 = add nsw i64 %mul909, 1
  %shl911 = shl i64 %add910, 62
  %sub912 = sub nsw i64 %shl911, 1
  %mul913 = mul nsw i64 %sub912, 2
  %add914 = add nsw i64 %mul913, 1
  br label %cond.end.920

cond.false.915:                                   ; preds = %cond.false.899
  %262 = load i64, i64* %width, align 8
  %mul916 = mul nsw i64 0, %262
  %263 = load i64, i64* %thiswidth, align 8
  %add917 = add nsw i64 %mul916, %263
  %mul918 = mul nsw i64 0, %add917
  %sub919 = sub nsw i64 %mul918, 1
  br label %cond.end.920

cond.end.920:                                     ; preds = %cond.false.915, %cond.true.906
  %cond921 = phi i64 [ %add914, %cond.true.906 ], [ %sub919, %cond.false.915 ]
  %264 = load i64, i64* %width, align 8
  %sub922 = sub nsw i64 %cond921, %264
  %265 = load i64, i64* %thiswidth, align 8
  %cmp923 = icmp slt i64 %sub922, %265
  br i1 %cmp923, label %cond.true.957, label %lor.lhs.false.943

cond.false.925:                                   ; preds = %cond.end.856
  %266 = load i64, i64* %thiswidth, align 8
  %cmp926 = icmp slt i64 %266, 0
  br i1 %cmp926, label %cond.true.928, label %cond.false.932

cond.true.928:                                    ; preds = %cond.false.925
  %267 = load i64, i64* %width, align 8
  %268 = load i64, i64* %thiswidth, align 8
  %269 = load i64, i64* %width, align 8
  %add929 = add nsw i64 %268, %269
  %cmp930 = icmp sle i64 %267, %add929
  br i1 %cmp930, label %cond.true.957, label %lor.lhs.false.943

cond.false.932:                                   ; preds = %cond.false.925
  %270 = load i64, i64* %width, align 8
  %cmp933 = icmp slt i64 %270, 0
  br i1 %cmp933, label %cond.true.935, label %cond.false.939

cond.true.935:                                    ; preds = %cond.false.932
  %271 = load i64, i64* %thiswidth, align 8
  %272 = load i64, i64* %thiswidth, align 8
  %273 = load i64, i64* %width, align 8
  %add936 = add nsw i64 %272, %273
  %cmp937 = icmp sle i64 %271, %add936
  br i1 %cmp937, label %cond.true.957, label %lor.lhs.false.943

cond.false.939:                                   ; preds = %cond.false.932
  %274 = load i64, i64* %thiswidth, align 8
  %275 = load i64, i64* %width, align 8
  %add940 = add nsw i64 %274, %275
  %276 = load i64, i64* %width, align 8
  %cmp941 = icmp slt i64 %add940, %276
  br i1 %cmp941, label %cond.true.957, label %lor.lhs.false.943

lor.lhs.false.943:                                ; preds = %cond.false.939, %cond.true.935, %cond.true.928, %cond.end.920, %cond.end.894
  %277 = load i64, i64* %thiswidth, align 8
  %278 = load i64, i64* %width, align 8
  %add944 = add nsw i64 %277, %278
  %mul945 = mul nsw i64 0, %add944
  %sub946 = sub nsw i64 %mul945, 1
  %cmp947 = icmp slt i64 %sub946, 0
  br i1 %cmp947, label %land.lhs.true.949, label %lor.lhs.false.953

land.lhs.true.949:                                ; preds = %lor.lhs.false.943
  %279 = load i64, i64* %thiswidth, align 8
  %280 = load i64, i64* %width, align 8
  %add950 = add nsw i64 %279, %280
  %cmp951 = icmp slt i64 %add950, -32768
  br i1 %cmp951, label %cond.true.957, label %lor.lhs.false.953

lor.lhs.false.953:                                ; preds = %land.lhs.true.949, %lor.lhs.false.943
  %281 = load i64, i64* %thiswidth, align 8
  %282 = load i64, i64* %width, align 8
  %add954 = add nsw i64 %281, %282
  %cmp955 = icmp slt i64 32767, %add954
  br i1 %cmp955, label %cond.true.957, label %cond.false.986

cond.true.957:                                    ; preds = %lor.lhs.false.953, %land.lhs.true.949, %cond.false.939, %cond.true.935, %cond.true.928, %cond.end.920, %cond.end.894
  %283 = load i64, i64* %thiswidth, align 8
  %conv958 = trunc i64 %283 to i16
  %conv959 = zext i16 %conv958 to i32
  %284 = load i64, i64* %width, align 8
  %conv960 = trunc i64 %284 to i16
  %conv961 = zext i16 %conv960 to i32
  %add962 = add nsw i32 %conv959, %conv961
  %cmp963 = icmp sle i32 %add962, 32767
  br i1 %cmp963, label %cond.true.965, label %cond.false.973

cond.true.965:                                    ; preds = %cond.true.957
  %285 = load i64, i64* %thiswidth, align 8
  %conv966 = trunc i64 %285 to i16
  %conv967 = zext i16 %conv966 to i32
  %286 = load i64, i64* %width, align 8
  %conv968 = trunc i64 %286 to i16
  %conv969 = zext i16 %conv968 to i32
  %add970 = add nsw i32 %conv967, %conv969
  %conv971 = trunc i32 %add970 to i16
  %conv972 = sext i16 %conv971 to i32
  br label %cond.end.983

cond.false.973:                                   ; preds = %cond.true.957
  %287 = load i64, i64* %thiswidth, align 8
  %conv974 = trunc i64 %287 to i16
  %conv975 = zext i16 %conv974 to i32
  %288 = load i64, i64* %width, align 8
  %conv976 = trunc i64 %288 to i16
  %conv977 = zext i16 %conv976 to i32
  %add978 = add nsw i32 %conv975, %conv977
  %sub979 = sub nsw i32 %add978, -32768
  %conv980 = trunc i32 %sub979 to i16
  %conv981 = sext i16 %conv980 to i32
  %add982 = add nsw i32 %conv981, -32768
  br label %cond.end.983

cond.end.983:                                     ; preds = %cond.false.973, %cond.true.965
  %cond984 = phi i32 [ %conv972, %cond.true.965 ], [ %add982, %cond.false.973 ]
  %conv985 = sext i32 %cond984 to i64
  store i64 %conv985, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.986:                                   ; preds = %lor.lhs.false.953
  %289 = load i64, i64* %thiswidth, align 8
  %conv987 = trunc i64 %289 to i16
  %conv988 = zext i16 %conv987 to i32
  %290 = load i64, i64* %width, align 8
  %conv989 = trunc i64 %290 to i16
  %conv990 = zext i16 %conv989 to i32
  %add991 = add nsw i32 %conv988, %conv990
  %cmp992 = icmp sle i32 %add991, 32767
  br i1 %cmp992, label %cond.true.994, label %cond.false.1002

cond.true.994:                                    ; preds = %cond.false.986
  %291 = load i64, i64* %thiswidth, align 8
  %conv995 = trunc i64 %291 to i16
  %conv996 = zext i16 %conv995 to i32
  %292 = load i64, i64* %width, align 8
  %conv997 = trunc i64 %292 to i16
  %conv998 = zext i16 %conv997 to i32
  %add999 = add nsw i32 %conv996, %conv998
  %conv1000 = trunc i32 %add999 to i16
  %conv1001 = sext i16 %conv1000 to i32
  br label %cond.end.1012

cond.false.1002:                                  ; preds = %cond.false.986
  %293 = load i64, i64* %thiswidth, align 8
  %conv1003 = trunc i64 %293 to i16
  %conv1004 = zext i16 %conv1003 to i32
  %294 = load i64, i64* %width, align 8
  %conv1005 = trunc i64 %294 to i16
  %conv1006 = zext i16 %conv1005 to i32
  %add1007 = add nsw i32 %conv1004, %conv1006
  %sub1008 = sub nsw i32 %add1007, -32768
  %conv1009 = trunc i32 %sub1008 to i16
  %conv1010 = sext i16 %conv1009 to i32
  %add1011 = add nsw i32 %conv1010, -32768
  br label %cond.end.1012

cond.end.1012:                                    ; preds = %cond.false.1002, %cond.true.994
  %cond1013 = phi i32 [ %conv1001, %cond.true.994 ], [ %add1011, %cond.false.1002 ]
  %conv1014 = sext i32 %cond1013 to i64
  store i64 %conv1014, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.1015:                                  ; preds = %cond.false.547
  br i1 false, label %cond.true.1016, label %cond.false.1399

cond.true.1016:                                   ; preds = %cond.false.1015
  br i1 false, label %cond.true.1017, label %cond.false.1229

cond.true.1017:                                   ; preds = %cond.true.1016
  %295 = load i64, i64* %width, align 8
  %conv1018 = trunc i64 %295 to i32
  %mul1019 = mul nsw i32 0, %conv1018
  %296 = load i64, i64* %thiswidth, align 8
  %conv1020 = trunc i64 %296 to i32
  %add1021 = add nsw i32 %mul1019, %conv1020
  %mul1022 = mul nsw i32 0, %add1021
  %sub1023 = sub nsw i32 %mul1022, 1
  %cmp1024 = icmp slt i32 %sub1023, 0
  br i1 %cmp1024, label %cond.true.1026, label %cond.false.1048

cond.true.1026:                                   ; preds = %cond.true.1017
  %297 = load i64, i64* %width, align 8
  %conv1027 = trunc i64 %297 to i32
  %mul1028 = mul nsw i32 0, %conv1027
  %298 = load i64, i64* %thiswidth, align 8
  %conv1029 = trunc i64 %298 to i32
  %add1030 = add nsw i32 %mul1028, %conv1029
  %mul1031 = mul nsw i32 0, %add1030
  %add1032 = add nsw i32 %mul1031, 0
  %neg1033 = xor i32 %add1032, -1
  %cmp1034 = icmp eq i32 %neg1033, -1
  %conv1035 = zext i1 %cmp1034 to i32
  %sub1036 = sub nsw i32 0, %conv1035
  %299 = load i64, i64* %width, align 8
  %conv1037 = trunc i64 %299 to i32
  %mul1038 = mul nsw i32 0, %conv1037
  %300 = load i64, i64* %thiswidth, align 8
  %conv1039 = trunc i64 %300 to i32
  %add1040 = add nsw i32 %mul1038, %conv1039
  %mul1041 = mul nsw i32 0, %add1040
  %add1042 = add nsw i32 %mul1041, 1
  %shl1043 = shl i32 %add1042, 30
  %sub1044 = sub nsw i32 %shl1043, 1
  %mul1045 = mul nsw i32 %sub1044, 2
  %add1046 = add nsw i32 %mul1045, 1
  %sub1047 = sub nsw i32 %sub1036, %add1046
  br label %cond.end.1055

cond.false.1048:                                  ; preds = %cond.true.1017
  %301 = load i64, i64* %width, align 8
  %conv1049 = trunc i64 %301 to i32
  %mul1050 = mul nsw i32 0, %conv1049
  %302 = load i64, i64* %thiswidth, align 8
  %conv1051 = trunc i64 %302 to i32
  %add1052 = add nsw i32 %mul1050, %conv1051
  %mul1053 = mul nsw i32 0, %add1052
  %add1054 = add nsw i32 %mul1053, 0
  br label %cond.end.1055

cond.end.1055:                                    ; preds = %cond.false.1048, %cond.true.1026
  %cond1056 = phi i32 [ %sub1047, %cond.true.1026 ], [ %add1054, %cond.false.1048 ]
  %cmp1057 = icmp slt i32 %cond1056, 0
  br i1 %cmp1057, label %cond.true.1059, label %cond.false.1142

cond.true.1059:                                   ; preds = %cond.end.1055
  %303 = load i64, i64* %width, align 8
  %conv1060 = trunc i64 %303 to i32
  %cmp1061 = icmp slt i32 %conv1060, 0
  br i1 %cmp1061, label %cond.true.1063, label %cond.false.1108

cond.true.1063:                                   ; preds = %cond.true.1059
  %304 = load i64, i64* %thiswidth, align 8
  %conv1064 = trunc i64 %304 to i32
  %305 = load i64, i64* %width, align 8
  %conv1065 = trunc i64 %305 to i32
  %mul1066 = mul nsw i32 0, %conv1065
  %306 = load i64, i64* %thiswidth, align 8
  %conv1067 = trunc i64 %306 to i32
  %add1068 = add nsw i32 %mul1066, %conv1067
  %mul1069 = mul nsw i32 0, %add1068
  %sub1070 = sub nsw i32 %mul1069, 1
  %cmp1071 = icmp slt i32 %sub1070, 0
  br i1 %cmp1071, label %cond.true.1073, label %cond.false.1095

cond.true.1073:                                   ; preds = %cond.true.1063
  %307 = load i64, i64* %width, align 8
  %conv1074 = trunc i64 %307 to i32
  %mul1075 = mul nsw i32 0, %conv1074
  %308 = load i64, i64* %thiswidth, align 8
  %conv1076 = trunc i64 %308 to i32
  %add1077 = add nsw i32 %mul1075, %conv1076
  %mul1078 = mul nsw i32 0, %add1077
  %add1079 = add nsw i32 %mul1078, 0
  %neg1080 = xor i32 %add1079, -1
  %cmp1081 = icmp eq i32 %neg1080, -1
  %conv1082 = zext i1 %cmp1081 to i32
  %sub1083 = sub nsw i32 0, %conv1082
  %309 = load i64, i64* %width, align 8
  %conv1084 = trunc i64 %309 to i32
  %mul1085 = mul nsw i32 0, %conv1084
  %310 = load i64, i64* %thiswidth, align 8
  %conv1086 = trunc i64 %310 to i32
  %add1087 = add nsw i32 %mul1085, %conv1086
  %mul1088 = mul nsw i32 0, %add1087
  %add1089 = add nsw i32 %mul1088, 1
  %shl1090 = shl i32 %add1089, 30
  %sub1091 = sub nsw i32 %shl1090, 1
  %mul1092 = mul nsw i32 %sub1091, 2
  %add1093 = add nsw i32 %mul1092, 1
  %sub1094 = sub nsw i32 %sub1083, %add1093
  br label %cond.end.1102

cond.false.1095:                                  ; preds = %cond.true.1063
  %311 = load i64, i64* %width, align 8
  %conv1096 = trunc i64 %311 to i32
  %mul1097 = mul nsw i32 0, %conv1096
  %312 = load i64, i64* %thiswidth, align 8
  %conv1098 = trunc i64 %312 to i32
  %add1099 = add nsw i32 %mul1097, %conv1098
  %mul1100 = mul nsw i32 0, %add1099
  %add1101 = add nsw i32 %mul1100, 0
  br label %cond.end.1102

cond.end.1102:                                    ; preds = %cond.false.1095, %cond.true.1073
  %cond1103 = phi i32 [ %sub1094, %cond.true.1073 ], [ %add1101, %cond.false.1095 ]
  %313 = load i64, i64* %width, align 8
  %conv1104 = trunc i64 %313 to i32
  %sub1105 = sub nsw i32 %cond1103, %conv1104
  %cmp1106 = icmp slt i32 %conv1064, %sub1105
  br i1 %cmp1106, label %cond.true.1191, label %lor.lhs.false.1171

cond.false.1108:                                  ; preds = %cond.true.1059
  %314 = load i64, i64* %width, align 8
  %conv1109 = trunc i64 %314 to i32
  %mul1110 = mul nsw i32 0, %conv1109
  %315 = load i64, i64* %thiswidth, align 8
  %conv1111 = trunc i64 %315 to i32
  %add1112 = add nsw i32 %mul1110, %conv1111
  %mul1113 = mul nsw i32 0, %add1112
  %sub1114 = sub nsw i32 %mul1113, 1
  %cmp1115 = icmp slt i32 %sub1114, 0
  br i1 %cmp1115, label %cond.true.1117, label %cond.false.1128

cond.true.1117:                                   ; preds = %cond.false.1108
  %316 = load i64, i64* %width, align 8
  %conv1118 = trunc i64 %316 to i32
  %mul1119 = mul nsw i32 0, %conv1118
  %317 = load i64, i64* %thiswidth, align 8
  %conv1120 = trunc i64 %317 to i32
  %add1121 = add nsw i32 %mul1119, %conv1120
  %mul1122 = mul nsw i32 0, %add1121
  %add1123 = add nsw i32 %mul1122, 1
  %shl1124 = shl i32 %add1123, 30
  %sub1125 = sub nsw i32 %shl1124, 1
  %mul1126 = mul nsw i32 %sub1125, 2
  %add1127 = add nsw i32 %mul1126, 1
  br label %cond.end.1135

cond.false.1128:                                  ; preds = %cond.false.1108
  %318 = load i64, i64* %width, align 8
  %conv1129 = trunc i64 %318 to i32
  %mul1130 = mul nsw i32 0, %conv1129
  %319 = load i64, i64* %thiswidth, align 8
  %conv1131 = trunc i64 %319 to i32
  %add1132 = add nsw i32 %mul1130, %conv1131
  %mul1133 = mul nsw i32 0, %add1132
  %sub1134 = sub nsw i32 %mul1133, 1
  br label %cond.end.1135

cond.end.1135:                                    ; preds = %cond.false.1128, %cond.true.1117
  %cond1136 = phi i32 [ %add1127, %cond.true.1117 ], [ %sub1134, %cond.false.1128 ]
  %320 = load i64, i64* %width, align 8
  %conv1137 = trunc i64 %320 to i32
  %sub1138 = sub nsw i32 %cond1136, %conv1137
  %321 = load i64, i64* %thiswidth, align 8
  %conv1139 = trunc i64 %321 to i32
  %cmp1140 = icmp slt i32 %sub1138, %conv1139
  br i1 %cmp1140, label %cond.true.1191, label %lor.lhs.false.1171

cond.false.1142:                                  ; preds = %cond.end.1055
  %322 = load i64, i64* %thiswidth, align 8
  %conv1143 = trunc i64 %322 to i32
  %cmp1144 = icmp slt i32 %conv1143, 0
  br i1 %cmp1144, label %cond.true.1146, label %cond.false.1153

cond.true.1146:                                   ; preds = %cond.false.1142
  %323 = load i64, i64* %width, align 8
  %conv1147 = trunc i64 %323 to i32
  %324 = load i64, i64* %thiswidth, align 8
  %conv1148 = trunc i64 %324 to i32
  %325 = load i64, i64* %width, align 8
  %conv1149 = trunc i64 %325 to i32
  %add1150 = add nsw i32 %conv1148, %conv1149
  %cmp1151 = icmp sle i32 %conv1147, %add1150
  br i1 %cmp1151, label %cond.true.1191, label %lor.lhs.false.1171

cond.false.1153:                                  ; preds = %cond.false.1142
  %326 = load i64, i64* %width, align 8
  %conv1154 = trunc i64 %326 to i32
  %cmp1155 = icmp slt i32 %conv1154, 0
  br i1 %cmp1155, label %cond.true.1157, label %cond.false.1164

cond.true.1157:                                   ; preds = %cond.false.1153
  %327 = load i64, i64* %thiswidth, align 8
  %conv1158 = trunc i64 %327 to i32
  %328 = load i64, i64* %thiswidth, align 8
  %conv1159 = trunc i64 %328 to i32
  %329 = load i64, i64* %width, align 8
  %conv1160 = trunc i64 %329 to i32
  %add1161 = add nsw i32 %conv1159, %conv1160
  %cmp1162 = icmp sle i32 %conv1158, %add1161
  br i1 %cmp1162, label %cond.true.1191, label %lor.lhs.false.1171

cond.false.1164:                                  ; preds = %cond.false.1153
  %330 = load i64, i64* %thiswidth, align 8
  %conv1165 = trunc i64 %330 to i32
  %331 = load i64, i64* %width, align 8
  %conv1166 = trunc i64 %331 to i32
  %add1167 = add nsw i32 %conv1165, %conv1166
  %332 = load i64, i64* %width, align 8
  %conv1168 = trunc i64 %332 to i32
  %cmp1169 = icmp slt i32 %add1167, %conv1168
  br i1 %cmp1169, label %cond.true.1191, label %lor.lhs.false.1171

lor.lhs.false.1171:                               ; preds = %cond.false.1164, %cond.true.1157, %cond.true.1146, %cond.end.1135, %cond.end.1102
  %333 = load i64, i64* %thiswidth, align 8
  %conv1172 = trunc i64 %333 to i32
  %334 = load i64, i64* %width, align 8
  %conv1173 = trunc i64 %334 to i32
  %add1174 = add nsw i32 %conv1172, %conv1173
  %mul1175 = mul nsw i32 0, %add1174
  %sub1176 = sub nsw i32 %mul1175, 1
  %cmp1177 = icmp slt i32 %sub1176, 0
  br i1 %cmp1177, label %land.lhs.true.1179, label %lor.lhs.false.1185

land.lhs.true.1179:                               ; preds = %lor.lhs.false.1171
  %335 = load i64, i64* %thiswidth, align 8
  %conv1180 = trunc i64 %335 to i32
  %336 = load i64, i64* %width, align 8
  %conv1181 = trunc i64 %336 to i32
  %add1182 = add nsw i32 %conv1180, %conv1181
  %cmp1183 = icmp slt i32 %add1182, -2147483648
  br i1 %cmp1183, label %cond.true.1191, label %lor.lhs.false.1185

lor.lhs.false.1185:                               ; preds = %land.lhs.true.1179, %lor.lhs.false.1171
  %337 = load i64, i64* %thiswidth, align 8
  %conv1186 = trunc i64 %337 to i32
  %338 = load i64, i64* %width, align 8
  %conv1187 = trunc i64 %338 to i32
  %add1188 = add nsw i32 %conv1186, %conv1187
  %cmp1189 = icmp slt i32 2147483647, %add1188
  br i1 %cmp1189, label %cond.true.1191, label %cond.false.1210

cond.true.1191:                                   ; preds = %lor.lhs.false.1185, %land.lhs.true.1179, %cond.false.1164, %cond.true.1157, %cond.true.1146, %cond.end.1135, %cond.end.1102
  %339 = load i64, i64* %thiswidth, align 8
  %conv1192 = trunc i64 %339 to i32
  %340 = load i64, i64* %width, align 8
  %conv1193 = trunc i64 %340 to i32
  %add1194 = add i32 %conv1192, %conv1193
  %cmp1195 = icmp ule i32 %add1194, 2147483647
  br i1 %cmp1195, label %cond.true.1197, label %cond.false.1201

cond.true.1197:                                   ; preds = %cond.true.1191
  %341 = load i64, i64* %thiswidth, align 8
  %conv1198 = trunc i64 %341 to i32
  %342 = load i64, i64* %width, align 8
  %conv1199 = trunc i64 %342 to i32
  %add1200 = add i32 %conv1198, %conv1199
  br label %cond.end.1207

cond.false.1201:                                  ; preds = %cond.true.1191
  %343 = load i64, i64* %thiswidth, align 8
  %conv1202 = trunc i64 %343 to i32
  %344 = load i64, i64* %width, align 8
  %conv1203 = trunc i64 %344 to i32
  %add1204 = add i32 %conv1202, %conv1203
  %sub1205 = sub i32 %add1204, -2147483648
  %add1206 = add nsw i32 %sub1205, -2147483648
  br label %cond.end.1207

cond.end.1207:                                    ; preds = %cond.false.1201, %cond.true.1197
  %cond1208 = phi i32 [ %add1200, %cond.true.1197 ], [ %add1206, %cond.false.1201 ]
  %conv1209 = sext i32 %cond1208 to i64
  store i64 %conv1209, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.1210:                                  ; preds = %lor.lhs.false.1185
  %345 = load i64, i64* %thiswidth, align 8
  %conv1211 = trunc i64 %345 to i32
  %346 = load i64, i64* %width, align 8
  %conv1212 = trunc i64 %346 to i32
  %add1213 = add i32 %conv1211, %conv1212
  %cmp1214 = icmp ule i32 %add1213, 2147483647
  br i1 %cmp1214, label %cond.true.1216, label %cond.false.1220

cond.true.1216:                                   ; preds = %cond.false.1210
  %347 = load i64, i64* %thiswidth, align 8
  %conv1217 = trunc i64 %347 to i32
  %348 = load i64, i64* %width, align 8
  %conv1218 = trunc i64 %348 to i32
  %add1219 = add i32 %conv1217, %conv1218
  br label %cond.end.1226

cond.false.1220:                                  ; preds = %cond.false.1210
  %349 = load i64, i64* %thiswidth, align 8
  %conv1221 = trunc i64 %349 to i32
  %350 = load i64, i64* %width, align 8
  %conv1222 = trunc i64 %350 to i32
  %add1223 = add i32 %conv1221, %conv1222
  %sub1224 = sub i32 %add1223, -2147483648
  %add1225 = add nsw i32 %sub1224, -2147483648
  br label %cond.end.1226

cond.end.1226:                                    ; preds = %cond.false.1220, %cond.true.1216
  %cond1227 = phi i32 [ %add1219, %cond.true.1216 ], [ %add1225, %cond.false.1220 ]
  %conv1228 = sext i32 %cond1227 to i64
  store i64 %conv1228, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.1229:                                  ; preds = %cond.true.1016
  %351 = load i64, i64* %width, align 8
  %mul1230 = mul nsw i64 0, %351
  %352 = load i64, i64* %thiswidth, align 8
  %add1231 = add nsw i64 %mul1230, %352
  %mul1232 = mul nsw i64 0, %add1231
  %sub1233 = sub nsw i64 %mul1232, 1
  %cmp1234 = icmp slt i64 %sub1233, 0
  br i1 %cmp1234, label %cond.true.1236, label %cond.false.1255

cond.true.1236:                                   ; preds = %cond.false.1229
  %353 = load i64, i64* %width, align 8
  %mul1237 = mul nsw i64 0, %353
  %354 = load i64, i64* %thiswidth, align 8
  %add1238 = add nsw i64 %mul1237, %354
  %mul1239 = mul nsw i64 0, %add1238
  %add1240 = add nsw i64 %mul1239, 0
  %neg1241 = xor i64 %add1240, -1
  %cmp1242 = icmp eq i64 %neg1241, -1
  %conv1243 = zext i1 %cmp1242 to i32
  %sub1244 = sub nsw i32 0, %conv1243
  %conv1245 = sext i32 %sub1244 to i64
  %355 = load i64, i64* %width, align 8
  %mul1246 = mul nsw i64 0, %355
  %356 = load i64, i64* %thiswidth, align 8
  %add1247 = add nsw i64 %mul1246, %356
  %mul1248 = mul nsw i64 0, %add1247
  %add1249 = add nsw i64 %mul1248, 1
  %shl1250 = shl i64 %add1249, 62
  %sub1251 = sub nsw i64 %shl1250, 1
  %mul1252 = mul nsw i64 %sub1251, 2
  %add1253 = add nsw i64 %mul1252, 1
  %sub1254 = sub nsw i64 %conv1245, %add1253
  br label %cond.end.1260

cond.false.1255:                                  ; preds = %cond.false.1229
  %357 = load i64, i64* %width, align 8
  %mul1256 = mul nsw i64 0, %357
  %358 = load i64, i64* %thiswidth, align 8
  %add1257 = add nsw i64 %mul1256, %358
  %mul1258 = mul nsw i64 0, %add1257
  %add1259 = add nsw i64 %mul1258, 0
  br label %cond.end.1260

cond.end.1260:                                    ; preds = %cond.false.1255, %cond.true.1236
  %cond1261 = phi i64 [ %sub1254, %cond.true.1236 ], [ %add1259, %cond.false.1255 ]
  %cmp1262 = icmp slt i64 %cond1261, 0
  br i1 %cmp1262, label %cond.true.1264, label %cond.false.1329

cond.true.1264:                                   ; preds = %cond.end.1260
  %359 = load i64, i64* %width, align 8
  %cmp1265 = icmp slt i64 %359, 0
  br i1 %cmp1265, label %cond.true.1267, label %cond.false.1303

cond.true.1267:                                   ; preds = %cond.true.1264
  %360 = load i64, i64* %thiswidth, align 8
  %361 = load i64, i64* %width, align 8
  %mul1268 = mul nsw i64 0, %361
  %362 = load i64, i64* %thiswidth, align 8
  %add1269 = add nsw i64 %mul1268, %362
  %mul1270 = mul nsw i64 0, %add1269
  %sub1271 = sub nsw i64 %mul1270, 1
  %cmp1272 = icmp slt i64 %sub1271, 0
  br i1 %cmp1272, label %cond.true.1274, label %cond.false.1293

cond.true.1274:                                   ; preds = %cond.true.1267
  %363 = load i64, i64* %width, align 8
  %mul1275 = mul nsw i64 0, %363
  %364 = load i64, i64* %thiswidth, align 8
  %add1276 = add nsw i64 %mul1275, %364
  %mul1277 = mul nsw i64 0, %add1276
  %add1278 = add nsw i64 %mul1277, 0
  %neg1279 = xor i64 %add1278, -1
  %cmp1280 = icmp eq i64 %neg1279, -1
  %conv1281 = zext i1 %cmp1280 to i32
  %sub1282 = sub nsw i32 0, %conv1281
  %conv1283 = sext i32 %sub1282 to i64
  %365 = load i64, i64* %width, align 8
  %mul1284 = mul nsw i64 0, %365
  %366 = load i64, i64* %thiswidth, align 8
  %add1285 = add nsw i64 %mul1284, %366
  %mul1286 = mul nsw i64 0, %add1285
  %add1287 = add nsw i64 %mul1286, 1
  %shl1288 = shl i64 %add1287, 62
  %sub1289 = sub nsw i64 %shl1288, 1
  %mul1290 = mul nsw i64 %sub1289, 2
  %add1291 = add nsw i64 %mul1290, 1
  %sub1292 = sub nsw i64 %conv1283, %add1291
  br label %cond.end.1298

cond.false.1293:                                  ; preds = %cond.true.1267
  %367 = load i64, i64* %width, align 8
  %mul1294 = mul nsw i64 0, %367
  %368 = load i64, i64* %thiswidth, align 8
  %add1295 = add nsw i64 %mul1294, %368
  %mul1296 = mul nsw i64 0, %add1295
  %add1297 = add nsw i64 %mul1296, 0
  br label %cond.end.1298

cond.end.1298:                                    ; preds = %cond.false.1293, %cond.true.1274
  %cond1299 = phi i64 [ %sub1292, %cond.true.1274 ], [ %add1297, %cond.false.1293 ]
  %369 = load i64, i64* %width, align 8
  %sub1300 = sub nsw i64 %cond1299, %369
  %cmp1301 = icmp slt i64 %360, %sub1300
  br i1 %cmp1301, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1303:                                  ; preds = %cond.true.1264
  %370 = load i64, i64* %width, align 8
  %mul1304 = mul nsw i64 0, %370
  %371 = load i64, i64* %thiswidth, align 8
  %add1305 = add nsw i64 %mul1304, %371
  %mul1306 = mul nsw i64 0, %add1305
  %sub1307 = sub nsw i64 %mul1306, 1
  %cmp1308 = icmp slt i64 %sub1307, 0
  br i1 %cmp1308, label %cond.true.1310, label %cond.false.1319

cond.true.1310:                                   ; preds = %cond.false.1303
  %372 = load i64, i64* %width, align 8
  %mul1311 = mul nsw i64 0, %372
  %373 = load i64, i64* %thiswidth, align 8
  %add1312 = add nsw i64 %mul1311, %373
  %mul1313 = mul nsw i64 0, %add1312
  %add1314 = add nsw i64 %mul1313, 1
  %shl1315 = shl i64 %add1314, 62
  %sub1316 = sub nsw i64 %shl1315, 1
  %mul1317 = mul nsw i64 %sub1316, 2
  %add1318 = add nsw i64 %mul1317, 1
  br label %cond.end.1324

cond.false.1319:                                  ; preds = %cond.false.1303
  %374 = load i64, i64* %width, align 8
  %mul1320 = mul nsw i64 0, %374
  %375 = load i64, i64* %thiswidth, align 8
  %add1321 = add nsw i64 %mul1320, %375
  %mul1322 = mul nsw i64 0, %add1321
  %sub1323 = sub nsw i64 %mul1322, 1
  br label %cond.end.1324

cond.end.1324:                                    ; preds = %cond.false.1319, %cond.true.1310
  %cond1325 = phi i64 [ %add1318, %cond.true.1310 ], [ %sub1323, %cond.false.1319 ]
  %376 = load i64, i64* %width, align 8
  %sub1326 = sub nsw i64 %cond1325, %376
  %377 = load i64, i64* %thiswidth, align 8
  %cmp1327 = icmp slt i64 %sub1326, %377
  br i1 %cmp1327, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1329:                                  ; preds = %cond.end.1260
  %378 = load i64, i64* %thiswidth, align 8
  %cmp1330 = icmp slt i64 %378, 0
  br i1 %cmp1330, label %cond.true.1332, label %cond.false.1336

cond.true.1332:                                   ; preds = %cond.false.1329
  %379 = load i64, i64* %width, align 8
  %380 = load i64, i64* %thiswidth, align 8
  %381 = load i64, i64* %width, align 8
  %add1333 = add nsw i64 %380, %381
  %cmp1334 = icmp sle i64 %379, %add1333
  br i1 %cmp1334, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1336:                                  ; preds = %cond.false.1329
  %382 = load i64, i64* %width, align 8
  %cmp1337 = icmp slt i64 %382, 0
  br i1 %cmp1337, label %cond.true.1339, label %cond.false.1343

cond.true.1339:                                   ; preds = %cond.false.1336
  %383 = load i64, i64* %thiswidth, align 8
  %384 = load i64, i64* %thiswidth, align 8
  %385 = load i64, i64* %width, align 8
  %add1340 = add nsw i64 %384, %385
  %cmp1341 = icmp sle i64 %383, %add1340
  br i1 %cmp1341, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1343:                                  ; preds = %cond.false.1336
  %386 = load i64, i64* %thiswidth, align 8
  %387 = load i64, i64* %width, align 8
  %add1344 = add nsw i64 %386, %387
  %388 = load i64, i64* %width, align 8
  %cmp1345 = icmp slt i64 %add1344, %388
  br i1 %cmp1345, label %cond.true.1361, label %lor.lhs.false.1347

lor.lhs.false.1347:                               ; preds = %cond.false.1343, %cond.true.1339, %cond.true.1332, %cond.end.1324, %cond.end.1298
  %389 = load i64, i64* %thiswidth, align 8
  %390 = load i64, i64* %width, align 8
  %add1348 = add nsw i64 %389, %390
  %mul1349 = mul nsw i64 0, %add1348
  %sub1350 = sub nsw i64 %mul1349, 1
  %cmp1351 = icmp slt i64 %sub1350, 0
  br i1 %cmp1351, label %land.lhs.true.1353, label %lor.lhs.false.1357

land.lhs.true.1353:                               ; preds = %lor.lhs.false.1347
  %391 = load i64, i64* %thiswidth, align 8
  %392 = load i64, i64* %width, align 8
  %add1354 = add nsw i64 %391, %392
  %cmp1355 = icmp slt i64 %add1354, -2147483648
  br i1 %cmp1355, label %cond.true.1361, label %lor.lhs.false.1357

lor.lhs.false.1357:                               ; preds = %land.lhs.true.1353, %lor.lhs.false.1347
  %393 = load i64, i64* %thiswidth, align 8
  %394 = load i64, i64* %width, align 8
  %add1358 = add nsw i64 %393, %394
  %cmp1359 = icmp slt i64 2147483647, %add1358
  br i1 %cmp1359, label %cond.true.1361, label %cond.false.1380

cond.true.1361:                                   ; preds = %lor.lhs.false.1357, %land.lhs.true.1353, %cond.false.1343, %cond.true.1339, %cond.true.1332, %cond.end.1324, %cond.end.1298
  %395 = load i64, i64* %thiswidth, align 8
  %conv1362 = trunc i64 %395 to i32
  %396 = load i64, i64* %width, align 8
  %conv1363 = trunc i64 %396 to i32
  %add1364 = add i32 %conv1362, %conv1363
  %cmp1365 = icmp ule i32 %add1364, 2147483647
  br i1 %cmp1365, label %cond.true.1367, label %cond.false.1371

cond.true.1367:                                   ; preds = %cond.true.1361
  %397 = load i64, i64* %thiswidth, align 8
  %conv1368 = trunc i64 %397 to i32
  %398 = load i64, i64* %width, align 8
  %conv1369 = trunc i64 %398 to i32
  %add1370 = add i32 %conv1368, %conv1369
  br label %cond.end.1377

cond.false.1371:                                  ; preds = %cond.true.1361
  %399 = load i64, i64* %thiswidth, align 8
  %conv1372 = trunc i64 %399 to i32
  %400 = load i64, i64* %width, align 8
  %conv1373 = trunc i64 %400 to i32
  %add1374 = add i32 %conv1372, %conv1373
  %sub1375 = sub i32 %add1374, -2147483648
  %add1376 = add nsw i32 %sub1375, -2147483648
  br label %cond.end.1377

cond.end.1377:                                    ; preds = %cond.false.1371, %cond.true.1367
  %cond1378 = phi i32 [ %add1370, %cond.true.1367 ], [ %add1376, %cond.false.1371 ]
  %conv1379 = sext i32 %cond1378 to i64
  store i64 %conv1379, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.1380:                                  ; preds = %lor.lhs.false.1357
  %401 = load i64, i64* %thiswidth, align 8
  %conv1381 = trunc i64 %401 to i32
  %402 = load i64, i64* %width, align 8
  %conv1382 = trunc i64 %402 to i32
  %add1383 = add i32 %conv1381, %conv1382
  %cmp1384 = icmp ule i32 %add1383, 2147483647
  br i1 %cmp1384, label %cond.true.1386, label %cond.false.1390

cond.true.1386:                                   ; preds = %cond.false.1380
  %403 = load i64, i64* %thiswidth, align 8
  %conv1387 = trunc i64 %403 to i32
  %404 = load i64, i64* %width, align 8
  %conv1388 = trunc i64 %404 to i32
  %add1389 = add i32 %conv1387, %conv1388
  br label %cond.end.1396

cond.false.1390:                                  ; preds = %cond.false.1380
  %405 = load i64, i64* %thiswidth, align 8
  %conv1391 = trunc i64 %405 to i32
  %406 = load i64, i64* %width, align 8
  %conv1392 = trunc i64 %406 to i32
  %add1393 = add i32 %conv1391, %conv1392
  %sub1394 = sub i32 %add1393, -2147483648
  %add1395 = add nsw i32 %sub1394, -2147483648
  br label %cond.end.1396

cond.end.1396:                                    ; preds = %cond.false.1390, %cond.true.1386
  %cond1397 = phi i32 [ %add1389, %cond.true.1386 ], [ %add1395, %cond.false.1390 ]
  %conv1398 = sext i32 %cond1397 to i64
  store i64 %conv1398, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.1399:                                  ; preds = %cond.false.1015
  br i1 true, label %cond.true.1400, label %cond.false.1713

cond.true.1400:                                   ; preds = %cond.false.1399
  br i1 false, label %cond.true.1401, label %cond.false.1557

cond.true.1401:                                   ; preds = %cond.true.1400
  %407 = load i64, i64* %width, align 8
  %mul1402 = mul nsw i64 0, %407
  %408 = load i64, i64* %thiswidth, align 8
  %add1403 = add nsw i64 %mul1402, %408
  %mul1404 = mul nsw i64 0, %add1403
  %sub1405 = sub nsw i64 %mul1404, 1
  %cmp1406 = icmp slt i64 %sub1405, 0
  br i1 %cmp1406, label %cond.true.1408, label %cond.false.1427

cond.true.1408:                                   ; preds = %cond.true.1401
  %409 = load i64, i64* %width, align 8
  %mul1409 = mul nsw i64 0, %409
  %410 = load i64, i64* %thiswidth, align 8
  %add1410 = add nsw i64 %mul1409, %410
  %mul1411 = mul nsw i64 0, %add1410
  %add1412 = add nsw i64 %mul1411, 0
  %neg1413 = xor i64 %add1412, -1
  %cmp1414 = icmp eq i64 %neg1413, -1
  %conv1415 = zext i1 %cmp1414 to i32
  %sub1416 = sub nsw i32 0, %conv1415
  %conv1417 = sext i32 %sub1416 to i64
  %411 = load i64, i64* %width, align 8
  %mul1418 = mul nsw i64 0, %411
  %412 = load i64, i64* %thiswidth, align 8
  %add1419 = add nsw i64 %mul1418, %412
  %mul1420 = mul nsw i64 0, %add1419
  %add1421 = add nsw i64 %mul1420, 1
  %shl1422 = shl i64 %add1421, 62
  %sub1423 = sub nsw i64 %shl1422, 1
  %mul1424 = mul nsw i64 %sub1423, 2
  %add1425 = add nsw i64 %mul1424, 1
  %sub1426 = sub nsw i64 %conv1417, %add1425
  br label %cond.end.1432

cond.false.1427:                                  ; preds = %cond.true.1401
  %413 = load i64, i64* %width, align 8
  %mul1428 = mul nsw i64 0, %413
  %414 = load i64, i64* %thiswidth, align 8
  %add1429 = add nsw i64 %mul1428, %414
  %mul1430 = mul nsw i64 0, %add1429
  %add1431 = add nsw i64 %mul1430, 0
  br label %cond.end.1432

cond.end.1432:                                    ; preds = %cond.false.1427, %cond.true.1408
  %cond1433 = phi i64 [ %sub1426, %cond.true.1408 ], [ %add1431, %cond.false.1427 ]
  %cmp1434 = icmp slt i64 %cond1433, 0
  br i1 %cmp1434, label %cond.true.1436, label %cond.false.1501

cond.true.1436:                                   ; preds = %cond.end.1432
  %415 = load i64, i64* %width, align 8
  %cmp1437 = icmp slt i64 %415, 0
  br i1 %cmp1437, label %cond.true.1439, label %cond.false.1475

cond.true.1439:                                   ; preds = %cond.true.1436
  %416 = load i64, i64* %thiswidth, align 8
  %417 = load i64, i64* %width, align 8
  %mul1440 = mul nsw i64 0, %417
  %418 = load i64, i64* %thiswidth, align 8
  %add1441 = add nsw i64 %mul1440, %418
  %mul1442 = mul nsw i64 0, %add1441
  %sub1443 = sub nsw i64 %mul1442, 1
  %cmp1444 = icmp slt i64 %sub1443, 0
  br i1 %cmp1444, label %cond.true.1446, label %cond.false.1465

cond.true.1446:                                   ; preds = %cond.true.1439
  %419 = load i64, i64* %width, align 8
  %mul1447 = mul nsw i64 0, %419
  %420 = load i64, i64* %thiswidth, align 8
  %add1448 = add nsw i64 %mul1447, %420
  %mul1449 = mul nsw i64 0, %add1448
  %add1450 = add nsw i64 %mul1449, 0
  %neg1451 = xor i64 %add1450, -1
  %cmp1452 = icmp eq i64 %neg1451, -1
  %conv1453 = zext i1 %cmp1452 to i32
  %sub1454 = sub nsw i32 0, %conv1453
  %conv1455 = sext i32 %sub1454 to i64
  %421 = load i64, i64* %width, align 8
  %mul1456 = mul nsw i64 0, %421
  %422 = load i64, i64* %thiswidth, align 8
  %add1457 = add nsw i64 %mul1456, %422
  %mul1458 = mul nsw i64 0, %add1457
  %add1459 = add nsw i64 %mul1458, 1
  %shl1460 = shl i64 %add1459, 62
  %sub1461 = sub nsw i64 %shl1460, 1
  %mul1462 = mul nsw i64 %sub1461, 2
  %add1463 = add nsw i64 %mul1462, 1
  %sub1464 = sub nsw i64 %conv1455, %add1463
  br label %cond.end.1470

cond.false.1465:                                  ; preds = %cond.true.1439
  %423 = load i64, i64* %width, align 8
  %mul1466 = mul nsw i64 0, %423
  %424 = load i64, i64* %thiswidth, align 8
  %add1467 = add nsw i64 %mul1466, %424
  %mul1468 = mul nsw i64 0, %add1467
  %add1469 = add nsw i64 %mul1468, 0
  br label %cond.end.1470

cond.end.1470:                                    ; preds = %cond.false.1465, %cond.true.1446
  %cond1471 = phi i64 [ %sub1464, %cond.true.1446 ], [ %add1469, %cond.false.1465 ]
  %425 = load i64, i64* %width, align 8
  %sub1472 = sub nsw i64 %cond1471, %425
  %cmp1473 = icmp slt i64 %416, %sub1472
  br i1 %cmp1473, label %cond.true.1533, label %lor.lhs.false.1519

cond.false.1475:                                  ; preds = %cond.true.1436
  %426 = load i64, i64* %width, align 8
  %mul1476 = mul nsw i64 0, %426
  %427 = load i64, i64* %thiswidth, align 8
  %add1477 = add nsw i64 %mul1476, %427
  %mul1478 = mul nsw i64 0, %add1477
  %sub1479 = sub nsw i64 %mul1478, 1
  %cmp1480 = icmp slt i64 %sub1479, 0
  br i1 %cmp1480, label %cond.true.1482, label %cond.false.1491

cond.true.1482:                                   ; preds = %cond.false.1475
  %428 = load i64, i64* %width, align 8
  %mul1483 = mul nsw i64 0, %428
  %429 = load i64, i64* %thiswidth, align 8
  %add1484 = add nsw i64 %mul1483, %429
  %mul1485 = mul nsw i64 0, %add1484
  %add1486 = add nsw i64 %mul1485, 1
  %shl1487 = shl i64 %add1486, 62
  %sub1488 = sub nsw i64 %shl1487, 1
  %mul1489 = mul nsw i64 %sub1488, 2
  %add1490 = add nsw i64 %mul1489, 1
  br label %cond.end.1496

cond.false.1491:                                  ; preds = %cond.false.1475
  %430 = load i64, i64* %width, align 8
  %mul1492 = mul nsw i64 0, %430
  %431 = load i64, i64* %thiswidth, align 8
  %add1493 = add nsw i64 %mul1492, %431
  %mul1494 = mul nsw i64 0, %add1493
  %sub1495 = sub nsw i64 %mul1494, 1
  br label %cond.end.1496

cond.end.1496:                                    ; preds = %cond.false.1491, %cond.true.1482
  %cond1497 = phi i64 [ %add1490, %cond.true.1482 ], [ %sub1495, %cond.false.1491 ]
  %432 = load i64, i64* %width, align 8
  %sub1498 = sub nsw i64 %cond1497, %432
  %433 = load i64, i64* %thiswidth, align 8
  %cmp1499 = icmp slt i64 %sub1498, %433
  br i1 %cmp1499, label %cond.true.1533, label %lor.lhs.false.1519

cond.false.1501:                                  ; preds = %cond.end.1432
  %434 = load i64, i64* %thiswidth, align 8
  %cmp1502 = icmp slt i64 %434, 0
  br i1 %cmp1502, label %cond.true.1504, label %cond.false.1508

cond.true.1504:                                   ; preds = %cond.false.1501
  %435 = load i64, i64* %width, align 8
  %436 = load i64, i64* %thiswidth, align 8
  %437 = load i64, i64* %width, align 8
  %add1505 = add nsw i64 %436, %437
  %cmp1506 = icmp sle i64 %435, %add1505
  br i1 %cmp1506, label %cond.true.1533, label %lor.lhs.false.1519

cond.false.1508:                                  ; preds = %cond.false.1501
  %438 = load i64, i64* %width, align 8
  %cmp1509 = icmp slt i64 %438, 0
  br i1 %cmp1509, label %cond.true.1511, label %cond.false.1515

cond.true.1511:                                   ; preds = %cond.false.1508
  %439 = load i64, i64* %thiswidth, align 8
  %440 = load i64, i64* %thiswidth, align 8
  %441 = load i64, i64* %width, align 8
  %add1512 = add nsw i64 %440, %441
  %cmp1513 = icmp sle i64 %439, %add1512
  br i1 %cmp1513, label %cond.true.1533, label %lor.lhs.false.1519

cond.false.1515:                                  ; preds = %cond.false.1508
  %442 = load i64, i64* %thiswidth, align 8
  %443 = load i64, i64* %width, align 8
  %add1516 = add nsw i64 %442, %443
  %444 = load i64, i64* %width, align 8
  %cmp1517 = icmp slt i64 %add1516, %444
  br i1 %cmp1517, label %cond.true.1533, label %lor.lhs.false.1519

lor.lhs.false.1519:                               ; preds = %cond.false.1515, %cond.true.1511, %cond.true.1504, %cond.end.1496, %cond.end.1470
  %445 = load i64, i64* %thiswidth, align 8
  %446 = load i64, i64* %width, align 8
  %add1520 = add nsw i64 %445, %446
  %mul1521 = mul nsw i64 0, %add1520
  %sub1522 = sub nsw i64 %mul1521, 1
  %cmp1523 = icmp slt i64 %sub1522, 0
  br i1 %cmp1523, label %land.lhs.true.1525, label %lor.lhs.false.1529

land.lhs.true.1525:                               ; preds = %lor.lhs.false.1519
  %447 = load i64, i64* %thiswidth, align 8
  %448 = load i64, i64* %width, align 8
  %add1526 = add nsw i64 %447, %448
  %cmp1527 = icmp slt i64 %add1526, -9223372036854775808
  br i1 %cmp1527, label %cond.true.1533, label %lor.lhs.false.1529

lor.lhs.false.1529:                               ; preds = %land.lhs.true.1525, %lor.lhs.false.1519
  %449 = load i64, i64* %thiswidth, align 8
  %450 = load i64, i64* %width, align 8
  %add1530 = add nsw i64 %449, %450
  %cmp1531 = icmp slt i64 9223372036854775807, %add1530
  br i1 %cmp1531, label %cond.true.1533, label %cond.false.1545

cond.true.1533:                                   ; preds = %lor.lhs.false.1529, %land.lhs.true.1525, %cond.false.1515, %cond.true.1511, %cond.true.1504, %cond.end.1496, %cond.end.1470
  %451 = load i64, i64* %thiswidth, align 8
  %452 = load i64, i64* %width, align 8
  %add1534 = add i64 %451, %452
  %cmp1535 = icmp ule i64 %add1534, 9223372036854775807
  br i1 %cmp1535, label %cond.true.1537, label %cond.false.1539

cond.true.1537:                                   ; preds = %cond.true.1533
  %453 = load i64, i64* %thiswidth, align 8
  %454 = load i64, i64* %width, align 8
  %add1538 = add i64 %453, %454
  br label %cond.end.1543

cond.false.1539:                                  ; preds = %cond.true.1533
  %455 = load i64, i64* %thiswidth, align 8
  %456 = load i64, i64* %width, align 8
  %add1540 = add i64 %455, %456
  %sub1541 = sub i64 %add1540, -9223372036854775808
  %add1542 = add nsw i64 %sub1541, -9223372036854775808
  br label %cond.end.1543

cond.end.1543:                                    ; preds = %cond.false.1539, %cond.true.1537
  %cond1544 = phi i64 [ %add1538, %cond.true.1537 ], [ %add1542, %cond.false.1539 ]
  store i64 %cond1544, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.1545:                                  ; preds = %lor.lhs.false.1529
  %457 = load i64, i64* %thiswidth, align 8
  %458 = load i64, i64* %width, align 8
  %add1546 = add i64 %457, %458
  %cmp1547 = icmp ule i64 %add1546, 9223372036854775807
  br i1 %cmp1547, label %cond.true.1549, label %cond.false.1551

cond.true.1549:                                   ; preds = %cond.false.1545
  %459 = load i64, i64* %thiswidth, align 8
  %460 = load i64, i64* %width, align 8
  %add1550 = add i64 %459, %460
  br label %cond.end.1555

cond.false.1551:                                  ; preds = %cond.false.1545
  %461 = load i64, i64* %thiswidth, align 8
  %462 = load i64, i64* %width, align 8
  %add1552 = add i64 %461, %462
  %sub1553 = sub i64 %add1552, -9223372036854775808
  %add1554 = add nsw i64 %sub1553, -9223372036854775808
  br label %cond.end.1555

cond.end.1555:                                    ; preds = %cond.false.1551, %cond.true.1549
  %cond1556 = phi i64 [ %add1550, %cond.true.1549 ], [ %add1554, %cond.false.1551 ]
  store i64 %cond1556, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.1557:                                  ; preds = %cond.true.1400
  %463 = load i64, i64* %width, align 8
  %mul1558 = mul nsw i64 0, %463
  %464 = load i64, i64* %thiswidth, align 8
  %add1559 = add nsw i64 %mul1558, %464
  %mul1560 = mul nsw i64 0, %add1559
  %sub1561 = sub nsw i64 %mul1560, 1
  %cmp1562 = icmp slt i64 %sub1561, 0
  br i1 %cmp1562, label %cond.true.1564, label %cond.false.1583

cond.true.1564:                                   ; preds = %cond.false.1557
  %465 = load i64, i64* %width, align 8
  %mul1565 = mul nsw i64 0, %465
  %466 = load i64, i64* %thiswidth, align 8
  %add1566 = add nsw i64 %mul1565, %466
  %mul1567 = mul nsw i64 0, %add1566
  %add1568 = add nsw i64 %mul1567, 0
  %neg1569 = xor i64 %add1568, -1
  %cmp1570 = icmp eq i64 %neg1569, -1
  %conv1571 = zext i1 %cmp1570 to i32
  %sub1572 = sub nsw i32 0, %conv1571
  %conv1573 = sext i32 %sub1572 to i64
  %467 = load i64, i64* %width, align 8
  %mul1574 = mul nsw i64 0, %467
  %468 = load i64, i64* %thiswidth, align 8
  %add1575 = add nsw i64 %mul1574, %468
  %mul1576 = mul nsw i64 0, %add1575
  %add1577 = add nsw i64 %mul1576, 1
  %shl1578 = shl i64 %add1577, 62
  %sub1579 = sub nsw i64 %shl1578, 1
  %mul1580 = mul nsw i64 %sub1579, 2
  %add1581 = add nsw i64 %mul1580, 1
  %sub1582 = sub nsw i64 %conv1573, %add1581
  br label %cond.end.1588

cond.false.1583:                                  ; preds = %cond.false.1557
  %469 = load i64, i64* %width, align 8
  %mul1584 = mul nsw i64 0, %469
  %470 = load i64, i64* %thiswidth, align 8
  %add1585 = add nsw i64 %mul1584, %470
  %mul1586 = mul nsw i64 0, %add1585
  %add1587 = add nsw i64 %mul1586, 0
  br label %cond.end.1588

cond.end.1588:                                    ; preds = %cond.false.1583, %cond.true.1564
  %cond1589 = phi i64 [ %sub1582, %cond.true.1564 ], [ %add1587, %cond.false.1583 ]
  %cmp1590 = icmp slt i64 %cond1589, 0
  br i1 %cmp1590, label %cond.true.1592, label %cond.false.1657

cond.true.1592:                                   ; preds = %cond.end.1588
  %471 = load i64, i64* %width, align 8
  %cmp1593 = icmp slt i64 %471, 0
  br i1 %cmp1593, label %cond.true.1595, label %cond.false.1631

cond.true.1595:                                   ; preds = %cond.true.1592
  %472 = load i64, i64* %thiswidth, align 8
  %473 = load i64, i64* %width, align 8
  %mul1596 = mul nsw i64 0, %473
  %474 = load i64, i64* %thiswidth, align 8
  %add1597 = add nsw i64 %mul1596, %474
  %mul1598 = mul nsw i64 0, %add1597
  %sub1599 = sub nsw i64 %mul1598, 1
  %cmp1600 = icmp slt i64 %sub1599, 0
  br i1 %cmp1600, label %cond.true.1602, label %cond.false.1621

cond.true.1602:                                   ; preds = %cond.true.1595
  %475 = load i64, i64* %width, align 8
  %mul1603 = mul nsw i64 0, %475
  %476 = load i64, i64* %thiswidth, align 8
  %add1604 = add nsw i64 %mul1603, %476
  %mul1605 = mul nsw i64 0, %add1604
  %add1606 = add nsw i64 %mul1605, 0
  %neg1607 = xor i64 %add1606, -1
  %cmp1608 = icmp eq i64 %neg1607, -1
  %conv1609 = zext i1 %cmp1608 to i32
  %sub1610 = sub nsw i32 0, %conv1609
  %conv1611 = sext i32 %sub1610 to i64
  %477 = load i64, i64* %width, align 8
  %mul1612 = mul nsw i64 0, %477
  %478 = load i64, i64* %thiswidth, align 8
  %add1613 = add nsw i64 %mul1612, %478
  %mul1614 = mul nsw i64 0, %add1613
  %add1615 = add nsw i64 %mul1614, 1
  %shl1616 = shl i64 %add1615, 62
  %sub1617 = sub nsw i64 %shl1616, 1
  %mul1618 = mul nsw i64 %sub1617, 2
  %add1619 = add nsw i64 %mul1618, 1
  %sub1620 = sub nsw i64 %conv1611, %add1619
  br label %cond.end.1626

cond.false.1621:                                  ; preds = %cond.true.1595
  %479 = load i64, i64* %width, align 8
  %mul1622 = mul nsw i64 0, %479
  %480 = load i64, i64* %thiswidth, align 8
  %add1623 = add nsw i64 %mul1622, %480
  %mul1624 = mul nsw i64 0, %add1623
  %add1625 = add nsw i64 %mul1624, 0
  br label %cond.end.1626

cond.end.1626:                                    ; preds = %cond.false.1621, %cond.true.1602
  %cond1627 = phi i64 [ %sub1620, %cond.true.1602 ], [ %add1625, %cond.false.1621 ]
  %481 = load i64, i64* %width, align 8
  %sub1628 = sub nsw i64 %cond1627, %481
  %cmp1629 = icmp slt i64 %472, %sub1628
  br i1 %cmp1629, label %cond.true.1689, label %lor.lhs.false.1675

cond.false.1631:                                  ; preds = %cond.true.1592
  %482 = load i64, i64* %width, align 8
  %mul1632 = mul nsw i64 0, %482
  %483 = load i64, i64* %thiswidth, align 8
  %add1633 = add nsw i64 %mul1632, %483
  %mul1634 = mul nsw i64 0, %add1633
  %sub1635 = sub nsw i64 %mul1634, 1
  %cmp1636 = icmp slt i64 %sub1635, 0
  br i1 %cmp1636, label %cond.true.1638, label %cond.false.1647

cond.true.1638:                                   ; preds = %cond.false.1631
  %484 = load i64, i64* %width, align 8
  %mul1639 = mul nsw i64 0, %484
  %485 = load i64, i64* %thiswidth, align 8
  %add1640 = add nsw i64 %mul1639, %485
  %mul1641 = mul nsw i64 0, %add1640
  %add1642 = add nsw i64 %mul1641, 1
  %shl1643 = shl i64 %add1642, 62
  %sub1644 = sub nsw i64 %shl1643, 1
  %mul1645 = mul nsw i64 %sub1644, 2
  %add1646 = add nsw i64 %mul1645, 1
  br label %cond.end.1652

cond.false.1647:                                  ; preds = %cond.false.1631
  %486 = load i64, i64* %width, align 8
  %mul1648 = mul nsw i64 0, %486
  %487 = load i64, i64* %thiswidth, align 8
  %add1649 = add nsw i64 %mul1648, %487
  %mul1650 = mul nsw i64 0, %add1649
  %sub1651 = sub nsw i64 %mul1650, 1
  br label %cond.end.1652

cond.end.1652:                                    ; preds = %cond.false.1647, %cond.true.1638
  %cond1653 = phi i64 [ %add1646, %cond.true.1638 ], [ %sub1651, %cond.false.1647 ]
  %488 = load i64, i64* %width, align 8
  %sub1654 = sub nsw i64 %cond1653, %488
  %489 = load i64, i64* %thiswidth, align 8
  %cmp1655 = icmp slt i64 %sub1654, %489
  br i1 %cmp1655, label %cond.true.1689, label %lor.lhs.false.1675

cond.false.1657:                                  ; preds = %cond.end.1588
  %490 = load i64, i64* %thiswidth, align 8
  %cmp1658 = icmp slt i64 %490, 0
  br i1 %cmp1658, label %cond.true.1660, label %cond.false.1664

cond.true.1660:                                   ; preds = %cond.false.1657
  %491 = load i64, i64* %width, align 8
  %492 = load i64, i64* %thiswidth, align 8
  %493 = load i64, i64* %width, align 8
  %add1661 = add nsw i64 %492, %493
  %cmp1662 = icmp sle i64 %491, %add1661
  br i1 %cmp1662, label %cond.true.1689, label %lor.lhs.false.1675

cond.false.1664:                                  ; preds = %cond.false.1657
  %494 = load i64, i64* %width, align 8
  %cmp1665 = icmp slt i64 %494, 0
  br i1 %cmp1665, label %cond.true.1667, label %cond.false.1671

cond.true.1667:                                   ; preds = %cond.false.1664
  %495 = load i64, i64* %thiswidth, align 8
  %496 = load i64, i64* %thiswidth, align 8
  %497 = load i64, i64* %width, align 8
  %add1668 = add nsw i64 %496, %497
  %cmp1669 = icmp sle i64 %495, %add1668
  br i1 %cmp1669, label %cond.true.1689, label %lor.lhs.false.1675

cond.false.1671:                                  ; preds = %cond.false.1664
  %498 = load i64, i64* %thiswidth, align 8
  %499 = load i64, i64* %width, align 8
  %add1672 = add nsw i64 %498, %499
  %500 = load i64, i64* %width, align 8
  %cmp1673 = icmp slt i64 %add1672, %500
  br i1 %cmp1673, label %cond.true.1689, label %lor.lhs.false.1675

lor.lhs.false.1675:                               ; preds = %cond.false.1671, %cond.true.1667, %cond.true.1660, %cond.end.1652, %cond.end.1626
  %501 = load i64, i64* %thiswidth, align 8
  %502 = load i64, i64* %width, align 8
  %add1676 = add nsw i64 %501, %502
  %mul1677 = mul nsw i64 0, %add1676
  %sub1678 = sub nsw i64 %mul1677, 1
  %cmp1679 = icmp slt i64 %sub1678, 0
  br i1 %cmp1679, label %land.lhs.true.1681, label %lor.lhs.false.1685

land.lhs.true.1681:                               ; preds = %lor.lhs.false.1675
  %503 = load i64, i64* %thiswidth, align 8
  %504 = load i64, i64* %width, align 8
  %add1682 = add nsw i64 %503, %504
  %cmp1683 = icmp slt i64 %add1682, -9223372036854775808
  br i1 %cmp1683, label %cond.true.1689, label %lor.lhs.false.1685

lor.lhs.false.1685:                               ; preds = %land.lhs.true.1681, %lor.lhs.false.1675
  %505 = load i64, i64* %thiswidth, align 8
  %506 = load i64, i64* %width, align 8
  %add1686 = add nsw i64 %505, %506
  %cmp1687 = icmp slt i64 9223372036854775807, %add1686
  br i1 %cmp1687, label %cond.true.1689, label %cond.false.1701

cond.true.1689:                                   ; preds = %lor.lhs.false.1685, %land.lhs.true.1681, %cond.false.1671, %cond.true.1667, %cond.true.1660, %cond.end.1652, %cond.end.1626
  %507 = load i64, i64* %thiswidth, align 8
  %508 = load i64, i64* %width, align 8
  %add1690 = add i64 %507, %508
  %cmp1691 = icmp ule i64 %add1690, 9223372036854775807
  br i1 %cmp1691, label %cond.true.1693, label %cond.false.1695

cond.true.1693:                                   ; preds = %cond.true.1689
  %509 = load i64, i64* %thiswidth, align 8
  %510 = load i64, i64* %width, align 8
  %add1694 = add i64 %509, %510
  br label %cond.end.1699

cond.false.1695:                                  ; preds = %cond.true.1689
  %511 = load i64, i64* %thiswidth, align 8
  %512 = load i64, i64* %width, align 8
  %add1696 = add i64 %511, %512
  %sub1697 = sub i64 %add1696, -9223372036854775808
  %add1698 = add nsw i64 %sub1697, -9223372036854775808
  br label %cond.end.1699

cond.end.1699:                                    ; preds = %cond.false.1695, %cond.true.1693
  %cond1700 = phi i64 [ %add1694, %cond.true.1693 ], [ %add1698, %cond.false.1695 ]
  store i64 %cond1700, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.1701:                                  ; preds = %lor.lhs.false.1685
  %513 = load i64, i64* %thiswidth, align 8
  %514 = load i64, i64* %width, align 8
  %add1702 = add i64 %513, %514
  %cmp1703 = icmp ule i64 %add1702, 9223372036854775807
  br i1 %cmp1703, label %cond.true.1705, label %cond.false.1707

cond.true.1705:                                   ; preds = %cond.false.1701
  %515 = load i64, i64* %thiswidth, align 8
  %516 = load i64, i64* %width, align 8
  %add1706 = add i64 %515, %516
  br label %cond.end.1711

cond.false.1707:                                  ; preds = %cond.false.1701
  %517 = load i64, i64* %thiswidth, align 8
  %518 = load i64, i64* %width, align 8
  %add1708 = add i64 %517, %518
  %sub1709 = sub i64 %add1708, -9223372036854775808
  %add1710 = add nsw i64 %sub1709, -9223372036854775808
  br label %cond.end.1711

cond.end.1711:                                    ; preds = %cond.false.1707, %cond.true.1705
  %cond1712 = phi i64 [ %add1706, %cond.true.1705 ], [ %add1710, %cond.false.1707 ]
  store i64 %cond1712, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.1713:                                  ; preds = %cond.false.1399
  br i1 false, label %cond.true.1714, label %cond.false.1870

cond.true.1714:                                   ; preds = %cond.false.1713
  %519 = load i64, i64* %width, align 8
  %mul1715 = mul nsw i64 0, %519
  %520 = load i64, i64* %thiswidth, align 8
  %add1716 = add nsw i64 %mul1715, %520
  %mul1717 = mul nsw i64 0, %add1716
  %sub1718 = sub nsw i64 %mul1717, 1
  %cmp1719 = icmp slt i64 %sub1718, 0
  br i1 %cmp1719, label %cond.true.1721, label %cond.false.1740

cond.true.1721:                                   ; preds = %cond.true.1714
  %521 = load i64, i64* %width, align 8
  %mul1722 = mul nsw i64 0, %521
  %522 = load i64, i64* %thiswidth, align 8
  %add1723 = add nsw i64 %mul1722, %522
  %mul1724 = mul nsw i64 0, %add1723
  %add1725 = add nsw i64 %mul1724, 0
  %neg1726 = xor i64 %add1725, -1
  %cmp1727 = icmp eq i64 %neg1726, -1
  %conv1728 = zext i1 %cmp1727 to i32
  %sub1729 = sub nsw i32 0, %conv1728
  %conv1730 = sext i32 %sub1729 to i64
  %523 = load i64, i64* %width, align 8
  %mul1731 = mul nsw i64 0, %523
  %524 = load i64, i64* %thiswidth, align 8
  %add1732 = add nsw i64 %mul1731, %524
  %mul1733 = mul nsw i64 0, %add1732
  %add1734 = add nsw i64 %mul1733, 1
  %shl1735 = shl i64 %add1734, 62
  %sub1736 = sub nsw i64 %shl1735, 1
  %mul1737 = mul nsw i64 %sub1736, 2
  %add1738 = add nsw i64 %mul1737, 1
  %sub1739 = sub nsw i64 %conv1730, %add1738
  br label %cond.end.1745

cond.false.1740:                                  ; preds = %cond.true.1714
  %525 = load i64, i64* %width, align 8
  %mul1741 = mul nsw i64 0, %525
  %526 = load i64, i64* %thiswidth, align 8
  %add1742 = add nsw i64 %mul1741, %526
  %mul1743 = mul nsw i64 0, %add1742
  %add1744 = add nsw i64 %mul1743, 0
  br label %cond.end.1745

cond.end.1745:                                    ; preds = %cond.false.1740, %cond.true.1721
  %cond1746 = phi i64 [ %sub1739, %cond.true.1721 ], [ %add1744, %cond.false.1740 ]
  %cmp1747 = icmp slt i64 %cond1746, 0
  br i1 %cmp1747, label %cond.true.1749, label %cond.false.1814

cond.true.1749:                                   ; preds = %cond.end.1745
  %527 = load i64, i64* %width, align 8
  %cmp1750 = icmp slt i64 %527, 0
  br i1 %cmp1750, label %cond.true.1752, label %cond.false.1788

cond.true.1752:                                   ; preds = %cond.true.1749
  %528 = load i64, i64* %thiswidth, align 8
  %529 = load i64, i64* %width, align 8
  %mul1753 = mul nsw i64 0, %529
  %530 = load i64, i64* %thiswidth, align 8
  %add1754 = add nsw i64 %mul1753, %530
  %mul1755 = mul nsw i64 0, %add1754
  %sub1756 = sub nsw i64 %mul1755, 1
  %cmp1757 = icmp slt i64 %sub1756, 0
  br i1 %cmp1757, label %cond.true.1759, label %cond.false.1778

cond.true.1759:                                   ; preds = %cond.true.1752
  %531 = load i64, i64* %width, align 8
  %mul1760 = mul nsw i64 0, %531
  %532 = load i64, i64* %thiswidth, align 8
  %add1761 = add nsw i64 %mul1760, %532
  %mul1762 = mul nsw i64 0, %add1761
  %add1763 = add nsw i64 %mul1762, 0
  %neg1764 = xor i64 %add1763, -1
  %cmp1765 = icmp eq i64 %neg1764, -1
  %conv1766 = zext i1 %cmp1765 to i32
  %sub1767 = sub nsw i32 0, %conv1766
  %conv1768 = sext i32 %sub1767 to i64
  %533 = load i64, i64* %width, align 8
  %mul1769 = mul nsw i64 0, %533
  %534 = load i64, i64* %thiswidth, align 8
  %add1770 = add nsw i64 %mul1769, %534
  %mul1771 = mul nsw i64 0, %add1770
  %add1772 = add nsw i64 %mul1771, 1
  %shl1773 = shl i64 %add1772, 62
  %sub1774 = sub nsw i64 %shl1773, 1
  %mul1775 = mul nsw i64 %sub1774, 2
  %add1776 = add nsw i64 %mul1775, 1
  %sub1777 = sub nsw i64 %conv1768, %add1776
  br label %cond.end.1783

cond.false.1778:                                  ; preds = %cond.true.1752
  %535 = load i64, i64* %width, align 8
  %mul1779 = mul nsw i64 0, %535
  %536 = load i64, i64* %thiswidth, align 8
  %add1780 = add nsw i64 %mul1779, %536
  %mul1781 = mul nsw i64 0, %add1780
  %add1782 = add nsw i64 %mul1781, 0
  br label %cond.end.1783

cond.end.1783:                                    ; preds = %cond.false.1778, %cond.true.1759
  %cond1784 = phi i64 [ %sub1777, %cond.true.1759 ], [ %add1782, %cond.false.1778 ]
  %537 = load i64, i64* %width, align 8
  %sub1785 = sub nsw i64 %cond1784, %537
  %cmp1786 = icmp slt i64 %528, %sub1785
  br i1 %cmp1786, label %cond.true.1846, label %lor.lhs.false.1832

cond.false.1788:                                  ; preds = %cond.true.1749
  %538 = load i64, i64* %width, align 8
  %mul1789 = mul nsw i64 0, %538
  %539 = load i64, i64* %thiswidth, align 8
  %add1790 = add nsw i64 %mul1789, %539
  %mul1791 = mul nsw i64 0, %add1790
  %sub1792 = sub nsw i64 %mul1791, 1
  %cmp1793 = icmp slt i64 %sub1792, 0
  br i1 %cmp1793, label %cond.true.1795, label %cond.false.1804

cond.true.1795:                                   ; preds = %cond.false.1788
  %540 = load i64, i64* %width, align 8
  %mul1796 = mul nsw i64 0, %540
  %541 = load i64, i64* %thiswidth, align 8
  %add1797 = add nsw i64 %mul1796, %541
  %mul1798 = mul nsw i64 0, %add1797
  %add1799 = add nsw i64 %mul1798, 1
  %shl1800 = shl i64 %add1799, 62
  %sub1801 = sub nsw i64 %shl1800, 1
  %mul1802 = mul nsw i64 %sub1801, 2
  %add1803 = add nsw i64 %mul1802, 1
  br label %cond.end.1809

cond.false.1804:                                  ; preds = %cond.false.1788
  %542 = load i64, i64* %width, align 8
  %mul1805 = mul nsw i64 0, %542
  %543 = load i64, i64* %thiswidth, align 8
  %add1806 = add nsw i64 %mul1805, %543
  %mul1807 = mul nsw i64 0, %add1806
  %sub1808 = sub nsw i64 %mul1807, 1
  br label %cond.end.1809

cond.end.1809:                                    ; preds = %cond.false.1804, %cond.true.1795
  %cond1810 = phi i64 [ %add1803, %cond.true.1795 ], [ %sub1808, %cond.false.1804 ]
  %544 = load i64, i64* %width, align 8
  %sub1811 = sub nsw i64 %cond1810, %544
  %545 = load i64, i64* %thiswidth, align 8
  %cmp1812 = icmp slt i64 %sub1811, %545
  br i1 %cmp1812, label %cond.true.1846, label %lor.lhs.false.1832

cond.false.1814:                                  ; preds = %cond.end.1745
  %546 = load i64, i64* %thiswidth, align 8
  %cmp1815 = icmp slt i64 %546, 0
  br i1 %cmp1815, label %cond.true.1817, label %cond.false.1821

cond.true.1817:                                   ; preds = %cond.false.1814
  %547 = load i64, i64* %width, align 8
  %548 = load i64, i64* %thiswidth, align 8
  %549 = load i64, i64* %width, align 8
  %add1818 = add nsw i64 %548, %549
  %cmp1819 = icmp sle i64 %547, %add1818
  br i1 %cmp1819, label %cond.true.1846, label %lor.lhs.false.1832

cond.false.1821:                                  ; preds = %cond.false.1814
  %550 = load i64, i64* %width, align 8
  %cmp1822 = icmp slt i64 %550, 0
  br i1 %cmp1822, label %cond.true.1824, label %cond.false.1828

cond.true.1824:                                   ; preds = %cond.false.1821
  %551 = load i64, i64* %thiswidth, align 8
  %552 = load i64, i64* %thiswidth, align 8
  %553 = load i64, i64* %width, align 8
  %add1825 = add nsw i64 %552, %553
  %cmp1826 = icmp sle i64 %551, %add1825
  br i1 %cmp1826, label %cond.true.1846, label %lor.lhs.false.1832

cond.false.1828:                                  ; preds = %cond.false.1821
  %554 = load i64, i64* %thiswidth, align 8
  %555 = load i64, i64* %width, align 8
  %add1829 = add nsw i64 %554, %555
  %556 = load i64, i64* %width, align 8
  %cmp1830 = icmp slt i64 %add1829, %556
  br i1 %cmp1830, label %cond.true.1846, label %lor.lhs.false.1832

lor.lhs.false.1832:                               ; preds = %cond.false.1828, %cond.true.1824, %cond.true.1817, %cond.end.1809, %cond.end.1783
  %557 = load i64, i64* %thiswidth, align 8
  %558 = load i64, i64* %width, align 8
  %add1833 = add nsw i64 %557, %558
  %mul1834 = mul nsw i64 0, %add1833
  %sub1835 = sub nsw i64 %mul1834, 1
  %cmp1836 = icmp slt i64 %sub1835, 0
  br i1 %cmp1836, label %land.lhs.true.1838, label %lor.lhs.false.1842

land.lhs.true.1838:                               ; preds = %lor.lhs.false.1832
  %559 = load i64, i64* %thiswidth, align 8
  %560 = load i64, i64* %width, align 8
  %add1839 = add nsw i64 %559, %560
  %cmp1840 = icmp slt i64 %add1839, -9223372036854775808
  br i1 %cmp1840, label %cond.true.1846, label %lor.lhs.false.1842

lor.lhs.false.1842:                               ; preds = %land.lhs.true.1838, %lor.lhs.false.1832
  %561 = load i64, i64* %thiswidth, align 8
  %562 = load i64, i64* %width, align 8
  %add1843 = add nsw i64 %561, %562
  %cmp1844 = icmp slt i64 9223372036854775807, %add1843
  br i1 %cmp1844, label %cond.true.1846, label %cond.false.1858

cond.true.1846:                                   ; preds = %lor.lhs.false.1842, %land.lhs.true.1838, %cond.false.1828, %cond.true.1824, %cond.true.1817, %cond.end.1809, %cond.end.1783
  %563 = load i64, i64* %thiswidth, align 8
  %564 = load i64, i64* %width, align 8
  %add1847 = add i64 %563, %564
  %cmp1848 = icmp ule i64 %add1847, 9223372036854775807
  br i1 %cmp1848, label %cond.true.1850, label %cond.false.1852

cond.true.1850:                                   ; preds = %cond.true.1846
  %565 = load i64, i64* %thiswidth, align 8
  %566 = load i64, i64* %width, align 8
  %add1851 = add i64 %565, %566
  br label %cond.end.1856

cond.false.1852:                                  ; preds = %cond.true.1846
  %567 = load i64, i64* %thiswidth, align 8
  %568 = load i64, i64* %width, align 8
  %add1853 = add i64 %567, %568
  %sub1854 = sub i64 %add1853, -9223372036854775808
  %add1855 = add nsw i64 %sub1854, -9223372036854775808
  br label %cond.end.1856

cond.end.1856:                                    ; preds = %cond.false.1852, %cond.true.1850
  %cond1857 = phi i64 [ %add1851, %cond.true.1850 ], [ %add1855, %cond.false.1852 ]
  store i64 %cond1857, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.1858:                                  ; preds = %lor.lhs.false.1842
  %569 = load i64, i64* %thiswidth, align 8
  %570 = load i64, i64* %width, align 8
  %add1859 = add i64 %569, %570
  %cmp1860 = icmp ule i64 %add1859, 9223372036854775807
  br i1 %cmp1860, label %cond.true.1862, label %cond.false.1864

cond.true.1862:                                   ; preds = %cond.false.1858
  %571 = load i64, i64* %thiswidth, align 8
  %572 = load i64, i64* %width, align 8
  %add1863 = add i64 %571, %572
  br label %cond.end.1868

cond.false.1864:                                  ; preds = %cond.false.1858
  %573 = load i64, i64* %thiswidth, align 8
  %574 = load i64, i64* %width, align 8
  %add1865 = add i64 %573, %574
  %sub1866 = sub i64 %add1865, -9223372036854775808
  %add1867 = add nsw i64 %sub1866, -9223372036854775808
  br label %cond.end.1868

cond.end.1868:                                    ; preds = %cond.false.1864, %cond.true.1862
  %cond1869 = phi i64 [ %add1863, %cond.true.1862 ], [ %add1867, %cond.false.1864 ]
  store i64 %cond1869, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

cond.false.1870:                                  ; preds = %cond.false.1713
  %575 = load i64, i64* %width, align 8
  %mul1871 = mul nsw i64 0, %575
  %576 = load i64, i64* %thiswidth, align 8
  %add1872 = add nsw i64 %mul1871, %576
  %mul1873 = mul nsw i64 0, %add1872
  %sub1874 = sub nsw i64 %mul1873, 1
  %cmp1875 = icmp slt i64 %sub1874, 0
  br i1 %cmp1875, label %cond.true.1877, label %cond.false.1896

cond.true.1877:                                   ; preds = %cond.false.1870
  %577 = load i64, i64* %width, align 8
  %mul1878 = mul nsw i64 0, %577
  %578 = load i64, i64* %thiswidth, align 8
  %add1879 = add nsw i64 %mul1878, %578
  %mul1880 = mul nsw i64 0, %add1879
  %add1881 = add nsw i64 %mul1880, 0
  %neg1882 = xor i64 %add1881, -1
  %cmp1883 = icmp eq i64 %neg1882, -1
  %conv1884 = zext i1 %cmp1883 to i32
  %sub1885 = sub nsw i32 0, %conv1884
  %conv1886 = sext i32 %sub1885 to i64
  %579 = load i64, i64* %width, align 8
  %mul1887 = mul nsw i64 0, %579
  %580 = load i64, i64* %thiswidth, align 8
  %add1888 = add nsw i64 %mul1887, %580
  %mul1889 = mul nsw i64 0, %add1888
  %add1890 = add nsw i64 %mul1889, 1
  %shl1891 = shl i64 %add1890, 62
  %sub1892 = sub nsw i64 %shl1891, 1
  %mul1893 = mul nsw i64 %sub1892, 2
  %add1894 = add nsw i64 %mul1893, 1
  %sub1895 = sub nsw i64 %conv1886, %add1894
  br label %cond.end.1901

cond.false.1896:                                  ; preds = %cond.false.1870
  %581 = load i64, i64* %width, align 8
  %mul1897 = mul nsw i64 0, %581
  %582 = load i64, i64* %thiswidth, align 8
  %add1898 = add nsw i64 %mul1897, %582
  %mul1899 = mul nsw i64 0, %add1898
  %add1900 = add nsw i64 %mul1899, 0
  br label %cond.end.1901

cond.end.1901:                                    ; preds = %cond.false.1896, %cond.true.1877
  %cond1902 = phi i64 [ %sub1895, %cond.true.1877 ], [ %add1900, %cond.false.1896 ]
  %cmp1903 = icmp slt i64 %cond1902, 0
  br i1 %cmp1903, label %cond.true.1905, label %cond.false.1970

cond.true.1905:                                   ; preds = %cond.end.1901
  %583 = load i64, i64* %width, align 8
  %cmp1906 = icmp slt i64 %583, 0
  br i1 %cmp1906, label %cond.true.1908, label %cond.false.1944

cond.true.1908:                                   ; preds = %cond.true.1905
  %584 = load i64, i64* %thiswidth, align 8
  %585 = load i64, i64* %width, align 8
  %mul1909 = mul nsw i64 0, %585
  %586 = load i64, i64* %thiswidth, align 8
  %add1910 = add nsw i64 %mul1909, %586
  %mul1911 = mul nsw i64 0, %add1910
  %sub1912 = sub nsw i64 %mul1911, 1
  %cmp1913 = icmp slt i64 %sub1912, 0
  br i1 %cmp1913, label %cond.true.1915, label %cond.false.1934

cond.true.1915:                                   ; preds = %cond.true.1908
  %587 = load i64, i64* %width, align 8
  %mul1916 = mul nsw i64 0, %587
  %588 = load i64, i64* %thiswidth, align 8
  %add1917 = add nsw i64 %mul1916, %588
  %mul1918 = mul nsw i64 0, %add1917
  %add1919 = add nsw i64 %mul1918, 0
  %neg1920 = xor i64 %add1919, -1
  %cmp1921 = icmp eq i64 %neg1920, -1
  %conv1922 = zext i1 %cmp1921 to i32
  %sub1923 = sub nsw i32 0, %conv1922
  %conv1924 = sext i32 %sub1923 to i64
  %589 = load i64, i64* %width, align 8
  %mul1925 = mul nsw i64 0, %589
  %590 = load i64, i64* %thiswidth, align 8
  %add1926 = add nsw i64 %mul1925, %590
  %mul1927 = mul nsw i64 0, %add1926
  %add1928 = add nsw i64 %mul1927, 1
  %shl1929 = shl i64 %add1928, 62
  %sub1930 = sub nsw i64 %shl1929, 1
  %mul1931 = mul nsw i64 %sub1930, 2
  %add1932 = add nsw i64 %mul1931, 1
  %sub1933 = sub nsw i64 %conv1924, %add1932
  br label %cond.end.1939

cond.false.1934:                                  ; preds = %cond.true.1908
  %591 = load i64, i64* %width, align 8
  %mul1935 = mul nsw i64 0, %591
  %592 = load i64, i64* %thiswidth, align 8
  %add1936 = add nsw i64 %mul1935, %592
  %mul1937 = mul nsw i64 0, %add1936
  %add1938 = add nsw i64 %mul1937, 0
  br label %cond.end.1939

cond.end.1939:                                    ; preds = %cond.false.1934, %cond.true.1915
  %cond1940 = phi i64 [ %sub1933, %cond.true.1915 ], [ %add1938, %cond.false.1934 ]
  %593 = load i64, i64* %width, align 8
  %sub1941 = sub nsw i64 %cond1940, %593
  %cmp1942 = icmp slt i64 %584, %sub1941
  br i1 %cmp1942, label %cond.true.2002, label %lor.lhs.false.1988

cond.false.1944:                                  ; preds = %cond.true.1905
  %594 = load i64, i64* %width, align 8
  %mul1945 = mul nsw i64 0, %594
  %595 = load i64, i64* %thiswidth, align 8
  %add1946 = add nsw i64 %mul1945, %595
  %mul1947 = mul nsw i64 0, %add1946
  %sub1948 = sub nsw i64 %mul1947, 1
  %cmp1949 = icmp slt i64 %sub1948, 0
  br i1 %cmp1949, label %cond.true.1951, label %cond.false.1960

cond.true.1951:                                   ; preds = %cond.false.1944
  %596 = load i64, i64* %width, align 8
  %mul1952 = mul nsw i64 0, %596
  %597 = load i64, i64* %thiswidth, align 8
  %add1953 = add nsw i64 %mul1952, %597
  %mul1954 = mul nsw i64 0, %add1953
  %add1955 = add nsw i64 %mul1954, 1
  %shl1956 = shl i64 %add1955, 62
  %sub1957 = sub nsw i64 %shl1956, 1
  %mul1958 = mul nsw i64 %sub1957, 2
  %add1959 = add nsw i64 %mul1958, 1
  br label %cond.end.1965

cond.false.1960:                                  ; preds = %cond.false.1944
  %598 = load i64, i64* %width, align 8
  %mul1961 = mul nsw i64 0, %598
  %599 = load i64, i64* %thiswidth, align 8
  %add1962 = add nsw i64 %mul1961, %599
  %mul1963 = mul nsw i64 0, %add1962
  %sub1964 = sub nsw i64 %mul1963, 1
  br label %cond.end.1965

cond.end.1965:                                    ; preds = %cond.false.1960, %cond.true.1951
  %cond1966 = phi i64 [ %add1959, %cond.true.1951 ], [ %sub1964, %cond.false.1960 ]
  %600 = load i64, i64* %width, align 8
  %sub1967 = sub nsw i64 %cond1966, %600
  %601 = load i64, i64* %thiswidth, align 8
  %cmp1968 = icmp slt i64 %sub1967, %601
  br i1 %cmp1968, label %cond.true.2002, label %lor.lhs.false.1988

cond.false.1970:                                  ; preds = %cond.end.1901
  %602 = load i64, i64* %thiswidth, align 8
  %cmp1971 = icmp slt i64 %602, 0
  br i1 %cmp1971, label %cond.true.1973, label %cond.false.1977

cond.true.1973:                                   ; preds = %cond.false.1970
  %603 = load i64, i64* %width, align 8
  %604 = load i64, i64* %thiswidth, align 8
  %605 = load i64, i64* %width, align 8
  %add1974 = add nsw i64 %604, %605
  %cmp1975 = icmp sle i64 %603, %add1974
  br i1 %cmp1975, label %cond.true.2002, label %lor.lhs.false.1988

cond.false.1977:                                  ; preds = %cond.false.1970
  %606 = load i64, i64* %width, align 8
  %cmp1978 = icmp slt i64 %606, 0
  br i1 %cmp1978, label %cond.true.1980, label %cond.false.1984

cond.true.1980:                                   ; preds = %cond.false.1977
  %607 = load i64, i64* %thiswidth, align 8
  %608 = load i64, i64* %thiswidth, align 8
  %609 = load i64, i64* %width, align 8
  %add1981 = add nsw i64 %608, %609
  %cmp1982 = icmp sle i64 %607, %add1981
  br i1 %cmp1982, label %cond.true.2002, label %lor.lhs.false.1988

cond.false.1984:                                  ; preds = %cond.false.1977
  %610 = load i64, i64* %thiswidth, align 8
  %611 = load i64, i64* %width, align 8
  %add1985 = add nsw i64 %610, %611
  %612 = load i64, i64* %width, align 8
  %cmp1986 = icmp slt i64 %add1985, %612
  br i1 %cmp1986, label %cond.true.2002, label %lor.lhs.false.1988

lor.lhs.false.1988:                               ; preds = %cond.false.1984, %cond.true.1980, %cond.true.1973, %cond.end.1965, %cond.end.1939
  %613 = load i64, i64* %thiswidth, align 8
  %614 = load i64, i64* %width, align 8
  %add1989 = add nsw i64 %613, %614
  %mul1990 = mul nsw i64 0, %add1989
  %sub1991 = sub nsw i64 %mul1990, 1
  %cmp1992 = icmp slt i64 %sub1991, 0
  br i1 %cmp1992, label %land.lhs.true.1994, label %lor.lhs.false.1998

land.lhs.true.1994:                               ; preds = %lor.lhs.false.1988
  %615 = load i64, i64* %thiswidth, align 8
  %616 = load i64, i64* %width, align 8
  %add1995 = add nsw i64 %615, %616
  %cmp1996 = icmp slt i64 %add1995, -9223372036854775808
  br i1 %cmp1996, label %cond.true.2002, label %lor.lhs.false.1998

lor.lhs.false.1998:                               ; preds = %land.lhs.true.1994, %lor.lhs.false.1988
  %617 = load i64, i64* %thiswidth, align 8
  %618 = load i64, i64* %width, align 8
  %add1999 = add nsw i64 %617, %618
  %cmp2000 = icmp slt i64 9223372036854775807, %add1999
  br i1 %cmp2000, label %cond.true.2002, label %cond.false.2014

cond.true.2002:                                   ; preds = %lor.lhs.false.1998, %land.lhs.true.1994, %cond.false.1984, %cond.true.1980, %cond.true.1973, %cond.end.1965, %cond.end.1939
  %619 = load i64, i64* %thiswidth, align 8
  %620 = load i64, i64* %width, align 8
  %add2003 = add i64 %619, %620
  %cmp2004 = icmp ule i64 %add2003, 9223372036854775807
  br i1 %cmp2004, label %cond.true.2006, label %cond.false.2008

cond.true.2006:                                   ; preds = %cond.true.2002
  %621 = load i64, i64* %thiswidth, align 8
  %622 = load i64, i64* %width, align 8
  %add2007 = add i64 %621, %622
  br label %cond.end.2012

cond.false.2008:                                  ; preds = %cond.true.2002
  %623 = load i64, i64* %thiswidth, align 8
  %624 = load i64, i64* %width, align 8
  %add2009 = add i64 %623, %624
  %sub2010 = sub i64 %add2009, -9223372036854775808
  %add2011 = add nsw i64 %sub2010, -9223372036854775808
  br label %cond.end.2012

cond.end.2012:                                    ; preds = %cond.false.2008, %cond.true.2006
  %cond2013 = phi i64 [ %add2007, %cond.true.2006 ], [ %add2011, %cond.false.2008 ]
  store i64 %cond2013, i64* %width, align 8
  br i1 true, label %if.then.2026, label %if.end.2027

cond.false.2014:                                  ; preds = %lor.lhs.false.1998
  %625 = load i64, i64* %thiswidth, align 8
  %626 = load i64, i64* %width, align 8
  %add2015 = add i64 %625, %626
  %cmp2016 = icmp ule i64 %add2015, 9223372036854775807
  br i1 %cmp2016, label %cond.true.2018, label %cond.false.2020

cond.true.2018:                                   ; preds = %cond.false.2014
  %627 = load i64, i64* %thiswidth, align 8
  %628 = load i64, i64* %width, align 8
  %add2019 = add i64 %627, %628
  br label %cond.end.2024

cond.false.2020:                                  ; preds = %cond.false.2014
  %629 = load i64, i64* %thiswidth, align 8
  %630 = load i64, i64* %width, align 8
  %add2021 = add i64 %629, %630
  %sub2022 = sub i64 %add2021, -9223372036854775808
  %add2023 = add nsw i64 %sub2022, -9223372036854775808
  br label %cond.end.2024

cond.end.2024:                                    ; preds = %cond.false.2020, %cond.true.2018
  %cond2025 = phi i64 [ %add2019, %cond.true.2018 ], [ %add2023, %cond.false.2020 ]
  store i64 %cond2025, i64* %width, align 8
  br i1 false, label %if.then.2026, label %if.end.2027

if.then.2026:                                     ; preds = %cond.end.2024, %cond.end.2012, %cond.end.1868, %cond.end.1856, %cond.end.1711, %cond.end.1699, %cond.end.1555, %cond.end.1543, %cond.end.1396, %cond.end.1377, %cond.end.1226, %cond.end.1207, %cond.end.1012, %cond.end.983, %cond.end.822, %cond.end.793, %cond.end.544, %cond.end.515, %cond.end.354, %cond.end.325
  call void @string_overflow() #7
  unreachable

if.end.2027:                                      ; preds = %cond.end.2024, %cond.end.2012, %cond.end.1868, %cond.end.1856, %cond.end.1711, %cond.end.1699, %cond.end.1555, %cond.end.1543, %cond.end.1396, %cond.end.1377, %cond.end.1226, %cond.end.1207, %cond.end.1012, %cond.end.983, %cond.end.822, %cond.end.793, %cond.end.544, %cond.end.515, %cond.end.354, %cond.end.325
  %631 = load i64, i64* %chars, align 8
  %632 = load i64, i64* %i, align 8
  %add2028 = add nsw i64 %632, %631
  store i64 %add2028, i64* %i, align 8
  %633 = load i64, i64* %bytes, align 8
  %634 = load i64, i64* %i_byte, align 8
  %add2029 = add nsw i64 %634, %633
  store i64 %add2029, i64* %i_byte, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %635 = load i64, i64* %precision.addr, align 8
  %cmp2030 = icmp sgt i64 %635, 0
  br i1 %cmp2030, label %if.then.2032, label %if.end.2033

if.then.2032:                                     ; preds = %while.end
  %636 = load i64, i64* %i, align 8
  %637 = load i64*, i64** %nchars.addr, align 8
  store i64 %636, i64* %637, align 8
  %638 = load i64, i64* %i_byte, align 8
  %639 = load i64*, i64** %nbytes.addr, align 8
  store i64 %638, i64* %639, align 8
  br label %if.end.2033

if.end.2033:                                      ; preds = %if.then.2032, %while.end
  %640 = load i64, i64* %width, align 8
  store i64 %640, i64* %retval
  br label %return

return:                                           ; preds = %if.end.2033, %if.then.81
  %641 = load i64, i64* %retval
  ret i64 %641
}

declare i64 @SCHARS(i64) #3

declare i64 @SBYTES(i64) #3

declare i8* @SDATA(i64) #3

declare zeroext i1 @find_composition(i64, i64, i64*, i64*, i64*, i64) #3

declare i64 @get_composition_id(i64, i64, i64, i64, i64) #3

declare i64 @string_char_to_byte(i64, i64) #3

; Function Attrs: nounwind uwtable
define i64 @Fstring_width(i64 %str) #1 {
entry:
  %str.addr = alloca i64, align 8
  %val = alloca i64, align 8
  store i64 %str, i64* %str.addr, align 8
  %0 = load i64, i64* %str.addr, align 8
  call void @CHECK_STRING(i64 %0)
  %1 = load i64, i64* %str.addr, align 8
  %call = call i64 @lisp_string_width(i64 %1, i64 -1, i64* null, i64* null)
  %call1 = call i64 @make_natnum(i64 %call)
  store i64 %call1, i64* %val, align 8
  %2 = load i64, i64* %val, align 8
  ret i64 %2
}

declare void @CHECK_STRING(i64) #3

declare i64 @make_natnum(i64) #3

; Function Attrs: nounwind uwtable
define i64 @chars_in_text(i8* %ptr, i64 %nbytes) #1 {
entry:
  %retval = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  %0 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %cmp = icmp eq %struct.buffer* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %1, i32 0, i32 39
  %2 = load i64, i64* %enable_multibyte_characters_, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp1 = icmp eq i64 %2, %call
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i64, i64* %nbytes.addr, align 8
  store i64 %3, i64* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i64, i64* %nbytes.addr, align 8
  %call2 = call i64 @multibyte_chars_in_text(i8* %4, i64 %5)
  store i64 %call2, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval
  ret i64 %6
}

; Function Attrs: nounwind uwtable
define i64 @multibyte_chars_in_text(i8* %ptr, i64 %nbytes) #1 {
entry:
  %ptr.addr = alloca i8*, align 8
  %nbytes.addr = alloca i64, align 8
  %endp = alloca i8*, align 8
  %chars = alloca i64, align 8
  %len = alloca i32, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i64, i64* %nbytes.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %endp, align 8
  store i64 0, i64* %chars, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %endp, align 8
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8*, i8** %endp, align 8
  %cmp1 = icmp uge i8* %4, %5
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  br label %cond.end.92

cond.false:                                       ; preds = %while.body
  %6 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false.3, label %cond.true.2

cond.true.2:                                      ; preds = %cond.false
  br label %cond.end.90

cond.false.3:                                     ; preds = %cond.false
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %8, i64 1
  %9 = load i8*, i8** %endp, align 8
  %cmp5 = icmp uge i8* %add.ptr4, %9
  br i1 %cmp5, label %cond.true.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.3
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %11 to i32
  %and9 = and i32 %conv8, 192
  %cmp10 = icmp ne i32 %and9, 128
  br i1 %cmp10, label %cond.true.12, label %cond.false.13

cond.true.12:                                     ; preds = %lor.lhs.false, %cond.false.3
  br label %cond.end.88

cond.false.13:                                    ; preds = %lor.lhs.false
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %13 to i32
  %and16 = and i32 %conv15, 224
  %cmp17 = icmp eq i32 %and16, 192
  br i1 %cmp17, label %cond.true.19, label %cond.false.20

cond.true.19:                                     ; preds = %cond.false.13
  br label %cond.end.86

cond.false.20:                                    ; preds = %cond.false.13
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %14, i64 2
  %15 = load i8*, i8** %endp, align 8
  %cmp22 = icmp uge i8* %add.ptr21, %15
  br i1 %cmp22, label %cond.true.30, label %lor.lhs.false.24

lor.lhs.false.24:                                 ; preds = %cond.false.20
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %16, i64 2
  %17 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %17 to i32
  %and27 = and i32 %conv26, 192
  %cmp28 = icmp ne i32 %and27, 128
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %lor.lhs.false.24, %cond.false.20
  br label %cond.end.84

cond.false.31:                                    ; preds = %lor.lhs.false.24
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %19 to i32
  %and34 = and i32 %conv33, 240
  %cmp35 = icmp eq i32 %and34, 224
  br i1 %cmp35, label %cond.true.37, label %cond.false.38

cond.true.37:                                     ; preds = %cond.false.31
  br label %cond.end.82

cond.false.38:                                    ; preds = %cond.false.31
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %20, i64 3
  %21 = load i8*, i8** %endp, align 8
  %cmp40 = icmp uge i8* %add.ptr39, %21
  br i1 %cmp40, label %cond.true.48, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %cond.false.38
  %22 = load i8*, i8** %ptr.addr, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %22, i64 3
  %23 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %23 to i32
  %and45 = and i32 %conv44, 192
  %cmp46 = icmp ne i32 %and45, 128
  br i1 %cmp46, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %lor.lhs.false.42, %cond.false.38
  br label %cond.end.80

cond.false.49:                                    ; preds = %lor.lhs.false.42
  %24 = load i8*, i8** %ptr.addr, align 8
  %arrayidx50 = getelementptr inbounds i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx50, align 1
  %conv51 = zext i8 %25 to i32
  %and52 = and i32 %conv51, 248
  %cmp53 = icmp eq i32 %and52, 240
  br i1 %cmp53, label %cond.true.55, label %cond.false.56

cond.true.55:                                     ; preds = %cond.false.49
  br label %cond.end.78

cond.false.56:                                    ; preds = %cond.false.49
  %26 = load i8*, i8** %ptr.addr, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %26, i64 4
  %27 = load i8*, i8** %endp, align 8
  %cmp58 = icmp uge i8* %add.ptr57, %27
  br i1 %cmp58, label %cond.true.66, label %lor.lhs.false.60

lor.lhs.false.60:                                 ; preds = %cond.false.56
  %28 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %28, i64 4
  %29 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %29 to i32
  %and63 = and i32 %conv62, 192
  %cmp64 = icmp ne i32 %and63, 128
  br i1 %cmp64, label %cond.true.66, label %cond.false.67

cond.true.66:                                     ; preds = %lor.lhs.false.60, %cond.false.56
  br label %cond.end

cond.false.67:                                    ; preds = %lor.lhs.false.60
  %30 = load i8*, i8** %ptr.addr, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %31 to i32
  %cmp70 = icmp eq i32 %conv69, 248
  br i1 %cmp70, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false.67
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx72 = getelementptr inbounds i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %33 to i32
  %and74 = and i32 %conv73, 240
  %cmp75 = icmp eq i32 %and74, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false.67
  %34 = phi i1 [ false, %cond.false.67 ], [ %cmp75, %land.rhs ]
  %cond = select i1 %34, i32 5, i32 0
  br label %cond.end

cond.end:                                         ; preds = %land.end, %cond.true.66
  %cond77 = phi i32 [ 0, %cond.true.66 ], [ %cond, %land.end ]
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.end, %cond.true.55
  %cond79 = phi i32 [ 4, %cond.true.55 ], [ %cond77, %cond.end ]
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.end.78, %cond.true.48
  %cond81 = phi i32 [ 0, %cond.true.48 ], [ %cond79, %cond.end.78 ]
  br label %cond.end.82

cond.end.82:                                      ; preds = %cond.end.80, %cond.true.37
  %cond83 = phi i32 [ 3, %cond.true.37 ], [ %cond81, %cond.end.80 ]
  br label %cond.end.84

cond.end.84:                                      ; preds = %cond.end.82, %cond.true.30
  %cond85 = phi i32 [ 0, %cond.true.30 ], [ %cond83, %cond.end.82 ]
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.end.84, %cond.true.19
  %cond87 = phi i32 [ 2, %cond.true.19 ], [ %cond85, %cond.end.84 ]
  br label %cond.end.88

cond.end.88:                                      ; preds = %cond.end.86, %cond.true.12
  %cond89 = phi i32 [ 0, %cond.true.12 ], [ %cond87, %cond.end.86 ]
  br label %cond.end.90

cond.end.90:                                      ; preds = %cond.end.88, %cond.true.2
  %cond91 = phi i32 [ 1, %cond.true.2 ], [ %cond89, %cond.end.88 ]
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.end.90, %cond.true
  %cond93 = phi i32 [ 0, %cond.true ], [ %cond91, %cond.end.90 ]
  store i32 %cond93, i32* %len, align 4
  %35 = load i32, i32* %len, align 4
  %cmp94 = icmp eq i32 %35, 0
  br i1 %cmp94, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.92
  call void @emacs_abort() #7
  unreachable

if.end:                                           ; preds = %cond.end.92
  %36 = load i32, i32* %len, align 4
  %37 = load i8*, i8** %ptr.addr, align 8
  %idx.ext = sext i32 %36 to i64
  %add.ptr96 = getelementptr inbounds i8, i8* %37, i64 %idx.ext
  store i8* %add.ptr96, i8** %ptr.addr, align 8
  %38 = load i64, i64* %chars, align 8
  %inc = add nsw i64 %38, 1
  store i64 %inc, i64* %chars, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %39 = load i64, i64* %chars, align 8
  ret i64 %39
}

; Function Attrs: noreturn
declare void @emacs_abort() #2

; Function Attrs: nounwind uwtable
define void @parse_str_as_multibyte(i8* %str, i64 %len, i64* %nchars, i64* %nbytes) #1 {
entry:
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %nchars.addr = alloca i64*, align 8
  %nbytes.addr = alloca i64*, align 8
  %endp = alloca i8*, align 8
  %n = alloca i32, align 4
  %chars = alloca i64, align 8
  %bytes = alloca i64, align 8
  %adjusted_endp = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64* %nchars, i64** %nchars.addr, align 8
  store i64* %nbytes, i64** %nbytes.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %endp, align 8
  store i64 0, i64* %chars, align 8
  store i64 0, i64* %bytes, align 8
  %2 = load i64, i64* %len.addr, align 8
  %cmp = icmp sge i64 %2, 5
  br i1 %cmp, label %if.then, label %if.end.88

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %endp, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 -5
  store i8* %add.ptr1, i8** %adjusted_endp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %4 = load i8*, i8** %str.addr, align 8
  %5 = load i8*, i8** %adjusted_endp, align 8
  %cmp2 = icmp ult i8* %4, %5
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %str.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv = zext i8 %7 to i32
  %cmp3 = icmp eq i32 %conv, 192
  br i1 %cmp3, label %if.else, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %8 = load i8*, i8** %str.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv5 = zext i8 %9 to i32
  %cmp6 = icmp eq i32 %conv5, 193
  br i1 %cmp6, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %10 = load i8*, i8** %str.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx, align 1
  %conv8 = zext i8 %11 to i32
  %and = and i32 %conv8, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end.80

cond.false:                                       ; preds = %land.lhs.true
  %12 = load i8*, i8** %str.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %13 to i32
  %and11 = and i32 %conv10, 192
  %cmp12 = icmp ne i32 %and11, 128
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false
  br label %cond.end.78

cond.false.15:                                    ; preds = %cond.false
  %14 = load i8*, i8** %str.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %15 to i32
  %and18 = and i32 %conv17, 224
  %cmp19 = icmp eq i32 %and18, 192
  br i1 %cmp19, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %cond.false.15
  br label %cond.end.76

cond.false.22:                                    ; preds = %cond.false.15
  %16 = load i8*, i8** %str.addr, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %16, i64 2
  %17 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %17 to i32
  %and25 = and i32 %conv24, 192
  %cmp26 = icmp ne i32 %and25, 128
  br i1 %cmp26, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %cond.false.22
  br label %cond.end.74

cond.false.29:                                    ; preds = %cond.false.22
  %18 = load i8*, i8** %str.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %19 to i32
  %and32 = and i32 %conv31, 240
  %cmp33 = icmp eq i32 %and32, 224
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.false.29
  br label %cond.end.72

cond.false.36:                                    ; preds = %cond.false.29
  %20 = load i8*, i8** %str.addr, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %20, i64 3
  %21 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %21 to i32
  %and39 = and i32 %conv38, 192
  %cmp40 = icmp ne i32 %and39, 128
  br i1 %cmp40, label %cond.true.42, label %cond.false.43

cond.true.42:                                     ; preds = %cond.false.36
  br label %cond.end.70

cond.false.43:                                    ; preds = %cond.false.36
  %22 = load i8*, i8** %str.addr, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %22, i64 0
  %23 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %23 to i32
  %and46 = and i32 %conv45, 248
  %cmp47 = icmp eq i32 %and46, 240
  br i1 %cmp47, label %cond.true.49, label %cond.false.50

cond.true.49:                                     ; preds = %cond.false.43
  br label %cond.end.68

cond.false.50:                                    ; preds = %cond.false.43
  %24 = load i8*, i8** %str.addr, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %24, i64 4
  %25 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %25 to i32
  %and53 = and i32 %conv52, 192
  %cmp54 = icmp ne i32 %and53, 128
  br i1 %cmp54, label %cond.true.56, label %cond.false.57

cond.true.56:                                     ; preds = %cond.false.50
  br label %cond.end

cond.false.57:                                    ; preds = %cond.false.50
  %26 = load i8*, i8** %str.addr, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %26, i64 0
  %27 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %27 to i32
  %cmp60 = icmp eq i32 %conv59, 248
  br i1 %cmp60, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false.57
  %28 = load i8*, i8** %str.addr, align 8
  %arrayidx62 = getelementptr inbounds i8, i8* %28, i64 1
  %29 = load i8, i8* %arrayidx62, align 1
  %conv63 = zext i8 %29 to i32
  %and64 = and i32 %conv63, 240
  %cmp65 = icmp eq i32 %and64, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false.57
  %30 = phi i1 [ false, %cond.false.57 ], [ %cmp65, %land.rhs ]
  %cond = select i1 %30, i32 5, i32 0
  br label %cond.end

cond.end:                                         ; preds = %land.end, %cond.true.56
  %cond67 = phi i32 [ 0, %cond.true.56 ], [ %cond, %land.end ]
  br label %cond.end.68

cond.end.68:                                      ; preds = %cond.end, %cond.true.49
  %cond69 = phi i32 [ 4, %cond.true.49 ], [ %cond67, %cond.end ]
  br label %cond.end.70

cond.end.70:                                      ; preds = %cond.end.68, %cond.true.42
  %cond71 = phi i32 [ 0, %cond.true.42 ], [ %cond69, %cond.end.68 ]
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.end.70, %cond.true.35
  %cond73 = phi i32 [ 3, %cond.true.35 ], [ %cond71, %cond.end.70 ]
  br label %cond.end.74

cond.end.74:                                      ; preds = %cond.end.72, %cond.true.28
  %cond75 = phi i32 [ 0, %cond.true.28 ], [ %cond73, %cond.end.72 ]
  br label %cond.end.76

cond.end.76:                                      ; preds = %cond.end.74, %cond.true.21
  %cond77 = phi i32 [ 2, %cond.true.21 ], [ %cond75, %cond.end.74 ]
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.end.76, %cond.true.14
  %cond79 = phi i32 [ 0, %cond.true.14 ], [ %cond77, %cond.end.76 ]
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.end.78, %cond.true
  %cond81 = phi i32 [ 1, %cond.true ], [ %cond79, %cond.end.78 ]
  store i32 %cond81, i32* %n, align 4
  %cmp82 = icmp sgt i32 %cond81, 0
  br i1 %cmp82, label %if.then.84, label %if.else

if.then.84:                                       ; preds = %cond.end.80
  %31 = load i32, i32* %n, align 4
  %32 = load i8*, i8** %str.addr, align 8
  %idx.ext = sext i32 %31 to i64
  %add.ptr85 = getelementptr inbounds i8, i8* %32, i64 %idx.ext
  store i8* %add.ptr85, i8** %str.addr, align 8
  %33 = load i32, i32* %n, align 4
  %conv86 = sext i32 %33 to i64
  %34 = load i64, i64* %bytes, align 8
  %add = add nsw i64 %34, %conv86
  store i64 %add, i64* %bytes, align 8
  br label %if.end

if.else:                                          ; preds = %cond.end.80, %lor.lhs.false, %while.body
  %35 = load i8*, i8** %str.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 8
  %36 = load i64, i64* %bytes, align 8
  %add87 = add nsw i64 %36, 2
  store i64 %add87, i64* %bytes, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.84
  %37 = load i64, i64* %chars, align 8
  %inc = add nsw i64 %37, 1
  store i64 %inc, i64* %chars, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.88

if.end.88:                                        ; preds = %while.end, %entry
  br label %while.cond.89

while.cond.89:                                    ; preds = %if.end.216, %if.end.88
  %38 = load i8*, i8** %str.addr, align 8
  %39 = load i8*, i8** %endp, align 8
  %cmp90 = icmp ult i8* %38, %39
  br i1 %cmp90, label %while.body.92, label %while.end.218

while.body.92:                                    ; preds = %while.cond.89
  %40 = load i8*, i8** %str.addr, align 8
  %41 = load i8, i8* %40, align 1
  %conv93 = zext i8 %41 to i32
  %cmp94 = icmp eq i32 %conv93, 192
  br i1 %cmp94, label %if.else.213, label %lor.lhs.false.96

lor.lhs.false.96:                                 ; preds = %while.body.92
  %42 = load i8*, i8** %str.addr, align 8
  %43 = load i8, i8* %42, align 1
  %conv97 = zext i8 %43 to i32
  %cmp98 = icmp eq i32 %conv97, 193
  br i1 %cmp98, label %if.else.213, label %land.lhs.true.100

land.lhs.true.100:                                ; preds = %lor.lhs.false.96
  %44 = load i8*, i8** %str.addr, align 8
  %45 = load i8*, i8** %endp, align 8
  %cmp101 = icmp uge i8* %44, %45
  br i1 %cmp101, label %cond.true.103, label %cond.false.104

cond.true.103:                                    ; preds = %land.lhs.true.100
  br label %cond.end.204

cond.false.104:                                   ; preds = %land.lhs.true.100
  %46 = load i8*, i8** %str.addr, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %46, i64 0
  %47 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %47 to i32
  %and107 = and i32 %conv106, 128
  %tobool108 = icmp ne i32 %and107, 0
  br i1 %tobool108, label %cond.false.110, label %cond.true.109

cond.true.109:                                    ; preds = %cond.false.104
  br label %cond.end.202

cond.false.110:                                   ; preds = %cond.false.104
  %48 = load i8*, i8** %str.addr, align 8
  %add.ptr111 = getelementptr inbounds i8, i8* %48, i64 1
  %49 = load i8*, i8** %endp, align 8
  %cmp112 = icmp uge i8* %add.ptr111, %49
  br i1 %cmp112, label %cond.true.120, label %lor.lhs.false.114

lor.lhs.false.114:                                ; preds = %cond.false.110
  %50 = load i8*, i8** %str.addr, align 8
  %arrayidx115 = getelementptr inbounds i8, i8* %50, i64 1
  %51 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %51 to i32
  %and117 = and i32 %conv116, 192
  %cmp118 = icmp ne i32 %and117, 128
  br i1 %cmp118, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %lor.lhs.false.114, %cond.false.110
  br label %cond.end.200

cond.false.121:                                   ; preds = %lor.lhs.false.114
  %52 = load i8*, i8** %str.addr, align 8
  %arrayidx122 = getelementptr inbounds i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx122, align 1
  %conv123 = zext i8 %53 to i32
  %and124 = and i32 %conv123, 224
  %cmp125 = icmp eq i32 %and124, 192
  br i1 %cmp125, label %cond.true.127, label %cond.false.128

cond.true.127:                                    ; preds = %cond.false.121
  br label %cond.end.198

cond.false.128:                                   ; preds = %cond.false.121
  %54 = load i8*, i8** %str.addr, align 8
  %add.ptr129 = getelementptr inbounds i8, i8* %54, i64 2
  %55 = load i8*, i8** %endp, align 8
  %cmp130 = icmp uge i8* %add.ptr129, %55
  br i1 %cmp130, label %cond.true.138, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %cond.false.128
  %56 = load i8*, i8** %str.addr, align 8
  %arrayidx133 = getelementptr inbounds i8, i8* %56, i64 2
  %57 = load i8, i8* %arrayidx133, align 1
  %conv134 = zext i8 %57 to i32
  %and135 = and i32 %conv134, 192
  %cmp136 = icmp ne i32 %and135, 128
  br i1 %cmp136, label %cond.true.138, label %cond.false.139

cond.true.138:                                    ; preds = %lor.lhs.false.132, %cond.false.128
  br label %cond.end.196

cond.false.139:                                   ; preds = %lor.lhs.false.132
  %58 = load i8*, i8** %str.addr, align 8
  %arrayidx140 = getelementptr inbounds i8, i8* %58, i64 0
  %59 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %59 to i32
  %and142 = and i32 %conv141, 240
  %cmp143 = icmp eq i32 %and142, 224
  br i1 %cmp143, label %cond.true.145, label %cond.false.146

cond.true.145:                                    ; preds = %cond.false.139
  br label %cond.end.194

cond.false.146:                                   ; preds = %cond.false.139
  %60 = load i8*, i8** %str.addr, align 8
  %add.ptr147 = getelementptr inbounds i8, i8* %60, i64 3
  %61 = load i8*, i8** %endp, align 8
  %cmp148 = icmp uge i8* %add.ptr147, %61
  br i1 %cmp148, label %cond.true.156, label %lor.lhs.false.150

lor.lhs.false.150:                                ; preds = %cond.false.146
  %62 = load i8*, i8** %str.addr, align 8
  %arrayidx151 = getelementptr inbounds i8, i8* %62, i64 3
  %63 = load i8, i8* %arrayidx151, align 1
  %conv152 = zext i8 %63 to i32
  %and153 = and i32 %conv152, 192
  %cmp154 = icmp ne i32 %and153, 128
  br i1 %cmp154, label %cond.true.156, label %cond.false.157

cond.true.156:                                    ; preds = %lor.lhs.false.150, %cond.false.146
  br label %cond.end.192

cond.false.157:                                   ; preds = %lor.lhs.false.150
  %64 = load i8*, i8** %str.addr, align 8
  %arrayidx158 = getelementptr inbounds i8, i8* %64, i64 0
  %65 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %65 to i32
  %and160 = and i32 %conv159, 248
  %cmp161 = icmp eq i32 %and160, 240
  br i1 %cmp161, label %cond.true.163, label %cond.false.164

cond.true.163:                                    ; preds = %cond.false.157
  br label %cond.end.190

cond.false.164:                                   ; preds = %cond.false.157
  %66 = load i8*, i8** %str.addr, align 8
  %add.ptr165 = getelementptr inbounds i8, i8* %66, i64 4
  %67 = load i8*, i8** %endp, align 8
  %cmp166 = icmp uge i8* %add.ptr165, %67
  br i1 %cmp166, label %cond.true.174, label %lor.lhs.false.168

lor.lhs.false.168:                                ; preds = %cond.false.164
  %68 = load i8*, i8** %str.addr, align 8
  %arrayidx169 = getelementptr inbounds i8, i8* %68, i64 4
  %69 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %69 to i32
  %and171 = and i32 %conv170, 192
  %cmp172 = icmp ne i32 %and171, 128
  br i1 %cmp172, label %cond.true.174, label %cond.false.175

cond.true.174:                                    ; preds = %lor.lhs.false.168, %cond.false.164
  br label %cond.end.188

cond.false.175:                                   ; preds = %lor.lhs.false.168
  %70 = load i8*, i8** %str.addr, align 8
  %arrayidx176 = getelementptr inbounds i8, i8* %70, i64 0
  %71 = load i8, i8* %arrayidx176, align 1
  %conv177 = zext i8 %71 to i32
  %cmp178 = icmp eq i32 %conv177, 248
  br i1 %cmp178, label %land.rhs.180, label %land.end.186

land.rhs.180:                                     ; preds = %cond.false.175
  %72 = load i8*, i8** %str.addr, align 8
  %arrayidx181 = getelementptr inbounds i8, i8* %72, i64 1
  %73 = load i8, i8* %arrayidx181, align 1
  %conv182 = zext i8 %73 to i32
  %and183 = and i32 %conv182, 240
  %cmp184 = icmp eq i32 %and183, 128
  br label %land.end.186

land.end.186:                                     ; preds = %land.rhs.180, %cond.false.175
  %74 = phi i1 [ false, %cond.false.175 ], [ %cmp184, %land.rhs.180 ]
  %cond187 = select i1 %74, i32 5, i32 0
  br label %cond.end.188

cond.end.188:                                     ; preds = %land.end.186, %cond.true.174
  %cond189 = phi i32 [ 0, %cond.true.174 ], [ %cond187, %land.end.186 ]
  br label %cond.end.190

cond.end.190:                                     ; preds = %cond.end.188, %cond.true.163
  %cond191 = phi i32 [ 4, %cond.true.163 ], [ %cond189, %cond.end.188 ]
  br label %cond.end.192

cond.end.192:                                     ; preds = %cond.end.190, %cond.true.156
  %cond193 = phi i32 [ 0, %cond.true.156 ], [ %cond191, %cond.end.190 ]
  br label %cond.end.194

cond.end.194:                                     ; preds = %cond.end.192, %cond.true.145
  %cond195 = phi i32 [ 3, %cond.true.145 ], [ %cond193, %cond.end.192 ]
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.end.194, %cond.true.138
  %cond197 = phi i32 [ 0, %cond.true.138 ], [ %cond195, %cond.end.194 ]
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.end.196, %cond.true.127
  %cond199 = phi i32 [ 2, %cond.true.127 ], [ %cond197, %cond.end.196 ]
  br label %cond.end.200

cond.end.200:                                     ; preds = %cond.end.198, %cond.true.120
  %cond201 = phi i32 [ 0, %cond.true.120 ], [ %cond199, %cond.end.198 ]
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.end.200, %cond.true.109
  %cond203 = phi i32 [ 1, %cond.true.109 ], [ %cond201, %cond.end.200 ]
  br label %cond.end.204

cond.end.204:                                     ; preds = %cond.end.202, %cond.true.103
  %cond205 = phi i32 [ 0, %cond.true.103 ], [ %cond203, %cond.end.202 ]
  store i32 %cond205, i32* %n, align 4
  %cmp206 = icmp sgt i32 %cond205, 0
  br i1 %cmp206, label %if.then.208, label %if.else.213

if.then.208:                                      ; preds = %cond.end.204
  %75 = load i32, i32* %n, align 4
  %76 = load i8*, i8** %str.addr, align 8
  %idx.ext209 = sext i32 %75 to i64
  %add.ptr210 = getelementptr inbounds i8, i8* %76, i64 %idx.ext209
  store i8* %add.ptr210, i8** %str.addr, align 8
  %77 = load i32, i32* %n, align 4
  %conv211 = sext i32 %77 to i64
  %78 = load i64, i64* %bytes, align 8
  %add212 = add nsw i64 %78, %conv211
  store i64 %add212, i64* %bytes, align 8
  br label %if.end.216

if.else.213:                                      ; preds = %cond.end.204, %lor.lhs.false.96, %while.body.92
  %79 = load i8*, i8** %str.addr, align 8
  %incdec.ptr214 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %incdec.ptr214, i8** %str.addr, align 8
  %80 = load i64, i64* %bytes, align 8
  %add215 = add nsw i64 %80, 2
  store i64 %add215, i64* %bytes, align 8
  br label %if.end.216

if.end.216:                                       ; preds = %if.else.213, %if.then.208
  %81 = load i64, i64* %chars, align 8
  %inc217 = add nsw i64 %81, 1
  store i64 %inc217, i64* %chars, align 8
  br label %while.cond.89

while.end.218:                                    ; preds = %while.cond.89
  %82 = load i64, i64* %chars, align 8
  %83 = load i64*, i64** %nchars.addr, align 8
  store i64 %82, i64* %83, align 8
  %84 = load i64, i64* %bytes, align 8
  %85 = load i64*, i64** %nbytes.addr, align 8
  store i64 %84, i64* %85, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @str_as_multibyte(i8* %str, i64 %len, i64 %nbytes, i64* %nchars) #1 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %nbytes.addr = alloca i64, align 8
  %nchars.addr = alloca i64*, align 8
  %p = alloca i8*, align 8
  %endp = alloca i8*, align 8
  %to = alloca i8*, align 8
  %chars = alloca i64, align 8
  %n = alloca i32, align 4
  %adjusted_endp = alloca i8*, align 8
  %adjusted_endp226 = alloca i8*, align 8
  %c = alloca i32, align 4
  %c527 = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 %nbytes, i64* %nbytes.addr, align 8
  store i64* %nchars, i64** %nchars.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = load i8*, i8** %str.addr, align 8
  %2 = load i64, i64* %nbytes.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %add.ptr, i8** %endp, align 8
  store i64 0, i64* %chars, align 8
  %3 = load i64, i64* %nbytes.addr, align 8
  %cmp = icmp sge i64 %3, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %endp, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 -5
  store i8* %add.ptr1, i8** %adjusted_endp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %5 = load i8*, i8** %p, align 8
  %6 = load i8*, i8** %adjusted_endp, align 8
  %cmp2 = icmp ult i8* %5, %6
  br i1 %cmp2, label %land.lhs.true, label %land.end.85

land.lhs.true:                                    ; preds = %while.cond
  %7 = load i8*, i8** %p, align 8
  %8 = load i8, i8* %7, align 1
  %conv = zext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 192
  br i1 %cmp3, label %land.end.85, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load i8*, i8** %p, align 8
  %10 = load i8, i8* %9, align 1
  %conv5 = zext i8 %10 to i32
  %cmp6 = icmp eq i32 %conv5, 193
  br i1 %cmp6, label %land.end.85, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false
  %11 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx, align 1
  %conv8 = zext i8 %12 to i32
  %and = and i32 %conv8, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.rhs
  br label %cond.end.81

cond.false:                                       ; preds = %land.rhs
  %13 = load i8*, i8** %p, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %14 to i32
  %and11 = and i32 %conv10, 192
  %cmp12 = icmp ne i32 %and11, 128
  br i1 %cmp12, label %cond.true.14, label %cond.false.15

cond.true.14:                                     ; preds = %cond.false
  br label %cond.end.79

cond.false.15:                                    ; preds = %cond.false
  %15 = load i8*, i8** %p, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %16 to i32
  %and18 = and i32 %conv17, 224
  %cmp19 = icmp eq i32 %and18, 192
  br i1 %cmp19, label %cond.true.21, label %cond.false.22

cond.true.21:                                     ; preds = %cond.false.15
  br label %cond.end.77

cond.false.22:                                    ; preds = %cond.false.15
  %17 = load i8*, i8** %p, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %17, i64 2
  %18 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %18 to i32
  %and25 = and i32 %conv24, 192
  %cmp26 = icmp ne i32 %and25, 128
  br i1 %cmp26, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %cond.false.22
  br label %cond.end.75

cond.false.29:                                    ; preds = %cond.false.22
  %19 = load i8*, i8** %p, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %20 to i32
  %and32 = and i32 %conv31, 240
  %cmp33 = icmp eq i32 %and32, 224
  br i1 %cmp33, label %cond.true.35, label %cond.false.36

cond.true.35:                                     ; preds = %cond.false.29
  br label %cond.end.73

cond.false.36:                                    ; preds = %cond.false.29
  %21 = load i8*, i8** %p, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %21, i64 3
  %22 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %22 to i32
  %and39 = and i32 %conv38, 192
  %cmp40 = icmp ne i32 %and39, 128
  br i1 %cmp40, label %cond.true.42, label %cond.false.43

cond.true.42:                                     ; preds = %cond.false.36
  br label %cond.end.71

cond.false.43:                                    ; preds = %cond.false.36
  %23 = load i8*, i8** %p, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %23, i64 0
  %24 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %24 to i32
  %and46 = and i32 %conv45, 248
  %cmp47 = icmp eq i32 %and46, 240
  br i1 %cmp47, label %cond.true.49, label %cond.false.50

cond.true.49:                                     ; preds = %cond.false.43
  br label %cond.end.69

cond.false.50:                                    ; preds = %cond.false.43
  %25 = load i8*, i8** %p, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %25, i64 4
  %26 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %26 to i32
  %and53 = and i32 %conv52, 192
  %cmp54 = icmp ne i32 %and53, 128
  br i1 %cmp54, label %cond.true.56, label %cond.false.57

cond.true.56:                                     ; preds = %cond.false.50
  br label %cond.end

cond.false.57:                                    ; preds = %cond.false.50
  %27 = load i8*, i8** %p, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %28 to i32
  %cmp60 = icmp eq i32 %conv59, 248
  br i1 %cmp60, label %land.rhs.62, label %land.end

land.rhs.62:                                      ; preds = %cond.false.57
  %29 = load i8*, i8** %p, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %29, i64 1
  %30 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %30 to i32
  %and65 = and i32 %conv64, 240
  %cmp66 = icmp eq i32 %and65, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs.62, %cond.false.57
  %31 = phi i1 [ false, %cond.false.57 ], [ %cmp66, %land.rhs.62 ]
  %cond = select i1 %31, i32 5, i32 0
  br label %cond.end

cond.end:                                         ; preds = %land.end, %cond.true.56
  %cond68 = phi i32 [ 0, %cond.true.56 ], [ %cond, %land.end ]
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.end, %cond.true.49
  %cond70 = phi i32 [ 4, %cond.true.49 ], [ %cond68, %cond.end ]
  br label %cond.end.71

cond.end.71:                                      ; preds = %cond.end.69, %cond.true.42
  %cond72 = phi i32 [ 0, %cond.true.42 ], [ %cond70, %cond.end.69 ]
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.end.71, %cond.true.35
  %cond74 = phi i32 [ 3, %cond.true.35 ], [ %cond72, %cond.end.71 ]
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.end.73, %cond.true.28
  %cond76 = phi i32 [ 0, %cond.true.28 ], [ %cond74, %cond.end.73 ]
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.end.75, %cond.true.21
  %cond78 = phi i32 [ 2, %cond.true.21 ], [ %cond76, %cond.end.75 ]
  br label %cond.end.79

cond.end.79:                                      ; preds = %cond.end.77, %cond.true.14
  %cond80 = phi i32 [ 0, %cond.true.14 ], [ %cond78, %cond.end.77 ]
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.end.79, %cond.true
  %cond82 = phi i32 [ 1, %cond.true ], [ %cond80, %cond.end.79 ]
  store i32 %cond82, i32* %n, align 4
  %cmp83 = icmp sgt i32 %cond82, 0
  br label %land.end.85

land.end.85:                                      ; preds = %cond.end.81, %lor.lhs.false, %land.lhs.true, %while.cond
  %32 = phi i1 [ false, %lor.lhs.false ], [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp83, %cond.end.81 ]
  br i1 %32, label %while.body, label %while.end

while.body:                                       ; preds = %land.end.85
  %33 = load i32, i32* %n, align 4
  %34 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %33 to i64
  %add.ptr86 = getelementptr inbounds i8, i8* %34, i64 %idx.ext
  store i8* %add.ptr86, i8** %p, align 8
  %35 = load i64, i64* %chars, align 8
  %inc = add nsw i64 %35, 1
  store i64 %inc, i64* %chars, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end.85
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  br label %while.cond.87

while.cond.87:                                    ; preds = %while.body.207, %if.end
  %36 = load i8*, i8** %p, align 8
  %37 = load i8*, i8** %endp, align 8
  %cmp88 = icmp ult i8* %36, %37
  br i1 %cmp88, label %land.lhs.true.90, label %land.end.206

land.lhs.true.90:                                 ; preds = %while.cond.87
  %38 = load i8*, i8** %p, align 8
  %39 = load i8, i8* %38, align 1
  %conv91 = zext i8 %39 to i32
  %cmp92 = icmp eq i32 %conv91, 192
  br i1 %cmp92, label %land.end.206, label %lor.lhs.false.94

lor.lhs.false.94:                                 ; preds = %land.lhs.true.90
  %40 = load i8*, i8** %p, align 8
  %41 = load i8, i8* %40, align 1
  %conv95 = zext i8 %41 to i32
  %cmp96 = icmp eq i32 %conv95, 193
  br i1 %cmp96, label %land.end.206, label %land.rhs.98

land.rhs.98:                                      ; preds = %lor.lhs.false.94
  %42 = load i8*, i8** %p, align 8
  %43 = load i8*, i8** %endp, align 8
  %cmp99 = icmp uge i8* %42, %43
  br i1 %cmp99, label %cond.true.101, label %cond.false.102

cond.true.101:                                    ; preds = %land.rhs.98
  br label %cond.end.202

cond.false.102:                                   ; preds = %land.rhs.98
  %44 = load i8*, i8** %p, align 8
  %arrayidx103 = getelementptr inbounds i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx103, align 1
  %conv104 = zext i8 %45 to i32
  %and105 = and i32 %conv104, 128
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %cond.false.108, label %cond.true.107

cond.true.107:                                    ; preds = %cond.false.102
  br label %cond.end.200

cond.false.108:                                   ; preds = %cond.false.102
  %46 = load i8*, i8** %p, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %46, i64 1
  %47 = load i8*, i8** %endp, align 8
  %cmp110 = icmp uge i8* %add.ptr109, %47
  br i1 %cmp110, label %cond.true.118, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %cond.false.108
  %48 = load i8*, i8** %p, align 8
  %arrayidx113 = getelementptr inbounds i8, i8* %48, i64 1
  %49 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %49 to i32
  %and115 = and i32 %conv114, 192
  %cmp116 = icmp ne i32 %and115, 128
  br i1 %cmp116, label %cond.true.118, label %cond.false.119

cond.true.118:                                    ; preds = %lor.lhs.false.112, %cond.false.108
  br label %cond.end.198

cond.false.119:                                   ; preds = %lor.lhs.false.112
  %50 = load i8*, i8** %p, align 8
  %arrayidx120 = getelementptr inbounds i8, i8* %50, i64 0
  %51 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %51 to i32
  %and122 = and i32 %conv121, 224
  %cmp123 = icmp eq i32 %and122, 192
  br i1 %cmp123, label %cond.true.125, label %cond.false.126

cond.true.125:                                    ; preds = %cond.false.119
  br label %cond.end.196

cond.false.126:                                   ; preds = %cond.false.119
  %52 = load i8*, i8** %p, align 8
  %add.ptr127 = getelementptr inbounds i8, i8* %52, i64 2
  %53 = load i8*, i8** %endp, align 8
  %cmp128 = icmp uge i8* %add.ptr127, %53
  br i1 %cmp128, label %cond.true.136, label %lor.lhs.false.130

lor.lhs.false.130:                                ; preds = %cond.false.126
  %54 = load i8*, i8** %p, align 8
  %arrayidx131 = getelementptr inbounds i8, i8* %54, i64 2
  %55 = load i8, i8* %arrayidx131, align 1
  %conv132 = zext i8 %55 to i32
  %and133 = and i32 %conv132, 192
  %cmp134 = icmp ne i32 %and133, 128
  br i1 %cmp134, label %cond.true.136, label %cond.false.137

cond.true.136:                                    ; preds = %lor.lhs.false.130, %cond.false.126
  br label %cond.end.194

cond.false.137:                                   ; preds = %lor.lhs.false.130
  %56 = load i8*, i8** %p, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %56, i64 0
  %57 = load i8, i8* %arrayidx138, align 1
  %conv139 = zext i8 %57 to i32
  %and140 = and i32 %conv139, 240
  %cmp141 = icmp eq i32 %and140, 224
  br i1 %cmp141, label %cond.true.143, label %cond.false.144

cond.true.143:                                    ; preds = %cond.false.137
  br label %cond.end.192

cond.false.144:                                   ; preds = %cond.false.137
  %58 = load i8*, i8** %p, align 8
  %add.ptr145 = getelementptr inbounds i8, i8* %58, i64 3
  %59 = load i8*, i8** %endp, align 8
  %cmp146 = icmp uge i8* %add.ptr145, %59
  br i1 %cmp146, label %cond.true.154, label %lor.lhs.false.148

lor.lhs.false.148:                                ; preds = %cond.false.144
  %60 = load i8*, i8** %p, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %60, i64 3
  %61 = load i8, i8* %arrayidx149, align 1
  %conv150 = zext i8 %61 to i32
  %and151 = and i32 %conv150, 192
  %cmp152 = icmp ne i32 %and151, 128
  br i1 %cmp152, label %cond.true.154, label %cond.false.155

cond.true.154:                                    ; preds = %lor.lhs.false.148, %cond.false.144
  br label %cond.end.190

cond.false.155:                                   ; preds = %lor.lhs.false.148
  %62 = load i8*, i8** %p, align 8
  %arrayidx156 = getelementptr inbounds i8, i8* %62, i64 0
  %63 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %63 to i32
  %and158 = and i32 %conv157, 248
  %cmp159 = icmp eq i32 %and158, 240
  br i1 %cmp159, label %cond.true.161, label %cond.false.162

cond.true.161:                                    ; preds = %cond.false.155
  br label %cond.end.188

cond.false.162:                                   ; preds = %cond.false.155
  %64 = load i8*, i8** %p, align 8
  %add.ptr163 = getelementptr inbounds i8, i8* %64, i64 4
  %65 = load i8*, i8** %endp, align 8
  %cmp164 = icmp uge i8* %add.ptr163, %65
  br i1 %cmp164, label %cond.true.172, label %lor.lhs.false.166

lor.lhs.false.166:                                ; preds = %cond.false.162
  %66 = load i8*, i8** %p, align 8
  %arrayidx167 = getelementptr inbounds i8, i8* %66, i64 4
  %67 = load i8, i8* %arrayidx167, align 1
  %conv168 = zext i8 %67 to i32
  %and169 = and i32 %conv168, 192
  %cmp170 = icmp ne i32 %and169, 128
  br i1 %cmp170, label %cond.true.172, label %cond.false.173

cond.true.172:                                    ; preds = %lor.lhs.false.166, %cond.false.162
  br label %cond.end.186

cond.false.173:                                   ; preds = %lor.lhs.false.166
  %68 = load i8*, i8** %p, align 8
  %arrayidx174 = getelementptr inbounds i8, i8* %68, i64 0
  %69 = load i8, i8* %arrayidx174, align 1
  %conv175 = zext i8 %69 to i32
  %cmp176 = icmp eq i32 %conv175, 248
  br i1 %cmp176, label %land.rhs.178, label %land.end.184

land.rhs.178:                                     ; preds = %cond.false.173
  %70 = load i8*, i8** %p, align 8
  %arrayidx179 = getelementptr inbounds i8, i8* %70, i64 1
  %71 = load i8, i8* %arrayidx179, align 1
  %conv180 = zext i8 %71 to i32
  %and181 = and i32 %conv180, 240
  %cmp182 = icmp eq i32 %and181, 128
  br label %land.end.184

land.end.184:                                     ; preds = %land.rhs.178, %cond.false.173
  %72 = phi i1 [ false, %cond.false.173 ], [ %cmp182, %land.rhs.178 ]
  %cond185 = select i1 %72, i32 5, i32 0
  br label %cond.end.186

cond.end.186:                                     ; preds = %land.end.184, %cond.true.172
  %cond187 = phi i32 [ 0, %cond.true.172 ], [ %cond185, %land.end.184 ]
  br label %cond.end.188

cond.end.188:                                     ; preds = %cond.end.186, %cond.true.161
  %cond189 = phi i32 [ 4, %cond.true.161 ], [ %cond187, %cond.end.186 ]
  br label %cond.end.190

cond.end.190:                                     ; preds = %cond.end.188, %cond.true.154
  %cond191 = phi i32 [ 0, %cond.true.154 ], [ %cond189, %cond.end.188 ]
  br label %cond.end.192

cond.end.192:                                     ; preds = %cond.end.190, %cond.true.143
  %cond193 = phi i32 [ 3, %cond.true.143 ], [ %cond191, %cond.end.190 ]
  br label %cond.end.194

cond.end.194:                                     ; preds = %cond.end.192, %cond.true.136
  %cond195 = phi i32 [ 0, %cond.true.136 ], [ %cond193, %cond.end.192 ]
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.end.194, %cond.true.125
  %cond197 = phi i32 [ 2, %cond.true.125 ], [ %cond195, %cond.end.194 ]
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.end.196, %cond.true.118
  %cond199 = phi i32 [ 0, %cond.true.118 ], [ %cond197, %cond.end.196 ]
  br label %cond.end.200

cond.end.200:                                     ; preds = %cond.end.198, %cond.true.107
  %cond201 = phi i32 [ 1, %cond.true.107 ], [ %cond199, %cond.end.198 ]
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.end.200, %cond.true.101
  %cond203 = phi i32 [ 0, %cond.true.101 ], [ %cond201, %cond.end.200 ]
  store i32 %cond203, i32* %n, align 4
  %cmp204 = icmp sgt i32 %cond203, 0
  br label %land.end.206

land.end.206:                                     ; preds = %cond.end.202, %lor.lhs.false.94, %land.lhs.true.90, %while.cond.87
  %73 = phi i1 [ false, %lor.lhs.false.94 ], [ false, %land.lhs.true.90 ], [ false, %while.cond.87 ], [ %cmp204, %cond.end.202 ]
  br i1 %73, label %while.body.207, label %while.end.211

while.body.207:                                   ; preds = %land.end.206
  %74 = load i32, i32* %n, align 4
  %75 = load i8*, i8** %p, align 8
  %idx.ext208 = sext i32 %74 to i64
  %add.ptr209 = getelementptr inbounds i8, i8* %75, i64 %idx.ext208
  store i8* %add.ptr209, i8** %p, align 8
  %76 = load i64, i64* %chars, align 8
  %inc210 = add nsw i64 %76, 1
  store i64 %inc210, i64* %chars, align 8
  br label %while.cond.87

while.end.211:                                    ; preds = %land.end.206
  %77 = load i64*, i64** %nchars.addr, align 8
  %tobool212 = icmp ne i64* %77, null
  br i1 %tobool212, label %if.then.213, label %if.end.214

if.then.213:                                      ; preds = %while.end.211
  %78 = load i64, i64* %chars, align 8
  %79 = load i64*, i64** %nchars.addr, align 8
  store i64 %78, i64* %79, align 8
  br label %if.end.214

if.end.214:                                       ; preds = %if.then.213, %while.end.211
  %80 = load i8*, i8** %p, align 8
  %81 = load i8*, i8** %endp, align 8
  %cmp215 = icmp eq i8* %80, %81
  br i1 %cmp215, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %if.end.214
  %82 = load i64, i64* %nbytes.addr, align 8
  store i64 %82, i64* %retval
  br label %return

if.end.218:                                       ; preds = %if.end.214
  %83 = load i8*, i8** %p, align 8
  store i8* %83, i8** %to, align 8
  %84 = load i8*, i8** %endp, align 8
  %85 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %84 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %85 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %nbytes.addr, align 8
  %86 = load i8*, i8** %str.addr, align 8
  %87 = load i64, i64* %len.addr, align 8
  %add.ptr219 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8* %add.ptr219, i8** %endp, align 8
  %88 = load i8*, i8** %endp, align 8
  %89 = load i64, i64* %nbytes.addr, align 8
  %idx.neg = sub i64 0, %89
  %add.ptr220 = getelementptr inbounds i8, i8* %88, i64 %idx.neg
  %90 = load i8*, i8** %p, align 8
  %91 = load i64, i64* %nbytes.addr, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr220, i8* %90, i64 %91, i32 1, i1 false)
  %92 = load i8*, i8** %endp, align 8
  %93 = load i64, i64* %nbytes.addr, align 8
  %idx.neg221 = sub i64 0, %93
  %add.ptr222 = getelementptr inbounds i8, i8* %92, i64 %idx.neg221
  store i8* %add.ptr222, i8** %p, align 8
  %94 = load i64, i64* %nbytes.addr, align 8
  %cmp223 = icmp sge i64 %94, 5
  br i1 %cmp223, label %if.then.225, label %if.end.398

if.then.225:                                      ; preds = %if.end.218
  %95 = load i8*, i8** %endp, align 8
  %add.ptr227 = getelementptr inbounds i8, i8* %95, i64 -5
  store i8* %add.ptr227, i8** %adjusted_endp226, align 8
  br label %while.cond.228

while.cond.228:                                   ; preds = %if.end.395, %if.then.225
  %96 = load i8*, i8** %p, align 8
  %97 = load i8*, i8** %adjusted_endp226, align 8
  %cmp229 = icmp ult i8* %96, %97
  br i1 %cmp229, label %while.body.231, label %while.end.396

while.body.231:                                   ; preds = %while.cond.228
  %98 = load i8*, i8** %p, align 8
  %99 = load i8, i8* %98, align 1
  %conv232 = zext i8 %99 to i32
  %cmp233 = icmp eq i32 %conv232, 192
  br i1 %cmp233, label %if.else, label %lor.lhs.false.235

lor.lhs.false.235:                                ; preds = %while.body.231
  %100 = load i8*, i8** %p, align 8
  %101 = load i8, i8* %100, align 1
  %conv236 = zext i8 %101 to i32
  %cmp237 = icmp eq i32 %conv236, 193
  br i1 %cmp237, label %if.else, label %land.lhs.true.239

land.lhs.true.239:                                ; preds = %lor.lhs.false.235
  %102 = load i8*, i8** %p, align 8
  %arrayidx240 = getelementptr inbounds i8, i8* %102, i64 0
  %103 = load i8, i8* %arrayidx240, align 1
  %conv241 = zext i8 %103 to i32
  %and242 = and i32 %conv241, 128
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %cond.false.245, label %cond.true.244

cond.true.244:                                    ; preds = %land.lhs.true.239
  br label %cond.end.321

cond.false.245:                                   ; preds = %land.lhs.true.239
  %104 = load i8*, i8** %p, align 8
  %arrayidx246 = getelementptr inbounds i8, i8* %104, i64 1
  %105 = load i8, i8* %arrayidx246, align 1
  %conv247 = zext i8 %105 to i32
  %and248 = and i32 %conv247, 192
  %cmp249 = icmp ne i32 %and248, 128
  br i1 %cmp249, label %cond.true.251, label %cond.false.252

cond.true.251:                                    ; preds = %cond.false.245
  br label %cond.end.319

cond.false.252:                                   ; preds = %cond.false.245
  %106 = load i8*, i8** %p, align 8
  %arrayidx253 = getelementptr inbounds i8, i8* %106, i64 0
  %107 = load i8, i8* %arrayidx253, align 1
  %conv254 = zext i8 %107 to i32
  %and255 = and i32 %conv254, 224
  %cmp256 = icmp eq i32 %and255, 192
  br i1 %cmp256, label %cond.true.258, label %cond.false.259

cond.true.258:                                    ; preds = %cond.false.252
  br label %cond.end.317

cond.false.259:                                   ; preds = %cond.false.252
  %108 = load i8*, i8** %p, align 8
  %arrayidx260 = getelementptr inbounds i8, i8* %108, i64 2
  %109 = load i8, i8* %arrayidx260, align 1
  %conv261 = zext i8 %109 to i32
  %and262 = and i32 %conv261, 192
  %cmp263 = icmp ne i32 %and262, 128
  br i1 %cmp263, label %cond.true.265, label %cond.false.266

cond.true.265:                                    ; preds = %cond.false.259
  br label %cond.end.315

cond.false.266:                                   ; preds = %cond.false.259
  %110 = load i8*, i8** %p, align 8
  %arrayidx267 = getelementptr inbounds i8, i8* %110, i64 0
  %111 = load i8, i8* %arrayidx267, align 1
  %conv268 = zext i8 %111 to i32
  %and269 = and i32 %conv268, 240
  %cmp270 = icmp eq i32 %and269, 224
  br i1 %cmp270, label %cond.true.272, label %cond.false.273

cond.true.272:                                    ; preds = %cond.false.266
  br label %cond.end.313

cond.false.273:                                   ; preds = %cond.false.266
  %112 = load i8*, i8** %p, align 8
  %arrayidx274 = getelementptr inbounds i8, i8* %112, i64 3
  %113 = load i8, i8* %arrayidx274, align 1
  %conv275 = zext i8 %113 to i32
  %and276 = and i32 %conv275, 192
  %cmp277 = icmp ne i32 %and276, 128
  br i1 %cmp277, label %cond.true.279, label %cond.false.280

cond.true.279:                                    ; preds = %cond.false.273
  br label %cond.end.311

cond.false.280:                                   ; preds = %cond.false.273
  %114 = load i8*, i8** %p, align 8
  %arrayidx281 = getelementptr inbounds i8, i8* %114, i64 0
  %115 = load i8, i8* %arrayidx281, align 1
  %conv282 = zext i8 %115 to i32
  %and283 = and i32 %conv282, 248
  %cmp284 = icmp eq i32 %and283, 240
  br i1 %cmp284, label %cond.true.286, label %cond.false.287

cond.true.286:                                    ; preds = %cond.false.280
  br label %cond.end.309

cond.false.287:                                   ; preds = %cond.false.280
  %116 = load i8*, i8** %p, align 8
  %arrayidx288 = getelementptr inbounds i8, i8* %116, i64 4
  %117 = load i8, i8* %arrayidx288, align 1
  %conv289 = zext i8 %117 to i32
  %and290 = and i32 %conv289, 192
  %cmp291 = icmp ne i32 %and290, 128
  br i1 %cmp291, label %cond.true.293, label %cond.false.294

cond.true.293:                                    ; preds = %cond.false.287
  br label %cond.end.307

cond.false.294:                                   ; preds = %cond.false.287
  %118 = load i8*, i8** %p, align 8
  %arrayidx295 = getelementptr inbounds i8, i8* %118, i64 0
  %119 = load i8, i8* %arrayidx295, align 1
  %conv296 = zext i8 %119 to i32
  %cmp297 = icmp eq i32 %conv296, 248
  br i1 %cmp297, label %land.rhs.299, label %land.end.305

land.rhs.299:                                     ; preds = %cond.false.294
  %120 = load i8*, i8** %p, align 8
  %arrayidx300 = getelementptr inbounds i8, i8* %120, i64 1
  %121 = load i8, i8* %arrayidx300, align 1
  %conv301 = zext i8 %121 to i32
  %and302 = and i32 %conv301, 240
  %cmp303 = icmp eq i32 %and302, 128
  br label %land.end.305

land.end.305:                                     ; preds = %land.rhs.299, %cond.false.294
  %122 = phi i1 [ false, %cond.false.294 ], [ %cmp303, %land.rhs.299 ]
  %cond306 = select i1 %122, i32 5, i32 0
  br label %cond.end.307

cond.end.307:                                     ; preds = %land.end.305, %cond.true.293
  %cond308 = phi i32 [ 0, %cond.true.293 ], [ %cond306, %land.end.305 ]
  br label %cond.end.309

cond.end.309:                                     ; preds = %cond.end.307, %cond.true.286
  %cond310 = phi i32 [ 4, %cond.true.286 ], [ %cond308, %cond.end.307 ]
  br label %cond.end.311

cond.end.311:                                     ; preds = %cond.end.309, %cond.true.279
  %cond312 = phi i32 [ 0, %cond.true.279 ], [ %cond310, %cond.end.309 ]
  br label %cond.end.313

cond.end.313:                                     ; preds = %cond.end.311, %cond.true.272
  %cond314 = phi i32 [ 3, %cond.true.272 ], [ %cond312, %cond.end.311 ]
  br label %cond.end.315

cond.end.315:                                     ; preds = %cond.end.313, %cond.true.265
  %cond316 = phi i32 [ 0, %cond.true.265 ], [ %cond314, %cond.end.313 ]
  br label %cond.end.317

cond.end.317:                                     ; preds = %cond.end.315, %cond.true.258
  %cond318 = phi i32 [ 2, %cond.true.258 ], [ %cond316, %cond.end.315 ]
  br label %cond.end.319

cond.end.319:                                     ; preds = %cond.end.317, %cond.true.251
  %cond320 = phi i32 [ 0, %cond.true.251 ], [ %cond318, %cond.end.317 ]
  br label %cond.end.321

cond.end.321:                                     ; preds = %cond.end.319, %cond.true.244
  %cond322 = phi i32 [ 1, %cond.true.244 ], [ %cond320, %cond.end.319 ]
  store i32 %cond322, i32* %n, align 4
  %cmp323 = icmp sgt i32 %cond322, 0
  br i1 %cmp323, label %if.then.325, label %if.else

if.then.325:                                      ; preds = %cond.end.321
  br label %while.cond.326

while.cond.326:                                   ; preds = %while.body.328, %if.then.325
  %123 = load i32, i32* %n, align 4
  %dec = add nsw i32 %123, -1
  store i32 %dec, i32* %n, align 4
  %tobool327 = icmp ne i32 %123, 0
  br i1 %tobool327, label %while.body.328, label %while.end.330

while.body.328:                                   ; preds = %while.cond.326
  %124 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %125 = load i8, i8* %124, align 1
  %126 = load i8*, i8** %to, align 8
  %incdec.ptr329 = getelementptr inbounds i8, i8* %126, i32 1
  store i8* %incdec.ptr329, i8** %to, align 8
  store i8 %125, i8* %126, align 1
  br label %while.cond.326

while.end.330:                                    ; preds = %while.cond.326
  br label %if.end.395

if.else:                                          ; preds = %cond.end.321, %lor.lhs.false.235, %while.body.231
  %127 = load i8*, i8** %p, align 8
  %incdec.ptr331 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr331, i8** %p, align 8
  %128 = load i8, i8* %127, align 1
  %conv332 = zext i8 %128 to i32
  store i32 %conv332, i32* %c, align 4
  %129 = load i32, i32* %c, align 4
  %add = add nsw i32 %129, 4194048
  store i32 %add, i32* %c, align 4
  br i1 true, label %cond.true.333, label %cond.false.337

cond.true.333:                                    ; preds = %if.else
  %130 = load i32, i32* %c, align 4
  %add334 = add i32 %130, 0
  %cmp335 = icmp ule i32 %add334, 127
  br i1 %cmp335, label %cond.true.342, label %cond.false.345

cond.false.337:                                   ; preds = %if.else
  %131 = load i32, i32* %c, align 4
  %conv338 = sext i32 %131 to i64
  %add339 = add i64 %conv338, 0
  %cmp340 = icmp ule i64 %add339, 127
  br i1 %cmp340, label %cond.true.342, label %cond.false.345

cond.true.342:                                    ; preds = %cond.false.337, %cond.true.333
  %132 = load i32, i32* %c, align 4
  %conv343 = trunc i32 %132 to i8
  %133 = load i8*, i8** %to, align 8
  %arrayidx344 = getelementptr inbounds i8, i8* %133, i64 0
  store i8 %conv343, i8* %arrayidx344, align 1
  br label %cond.end.391

cond.false.345:                                   ; preds = %cond.false.337, %cond.true.333
  br i1 true, label %cond.true.346, label %cond.false.350

cond.true.346:                                    ; preds = %cond.false.345
  %134 = load i32, i32* %c, align 4
  %add347 = add i32 %134, 0
  %cmp348 = icmp ule i32 %add347, 2047
  br i1 %cmp348, label %cond.true.355, label %cond.false.362

cond.false.350:                                   ; preds = %cond.false.345
  %135 = load i32, i32* %c, align 4
  %conv351 = sext i32 %135 to i64
  %add352 = add i64 %conv351, 0
  %cmp353 = icmp ule i64 %add352, 2047
  br i1 %cmp353, label %cond.true.355, label %cond.false.362

cond.true.355:                                    ; preds = %cond.false.350, %cond.true.346
  %136 = load i32, i32* %c, align 4
  %shr = ashr i32 %136, 6
  %or = or i32 192, %shr
  %conv356 = trunc i32 %or to i8
  %137 = load i8*, i8** %to, align 8
  %arrayidx357 = getelementptr inbounds i8, i8* %137, i64 0
  store i8 %conv356, i8* %arrayidx357, align 1
  %138 = load i32, i32* %c, align 4
  %and358 = and i32 %138, 63
  %or359 = or i32 128, %and358
  %conv360 = trunc i32 %or359 to i8
  %139 = load i8*, i8** %to, align 8
  %arrayidx361 = getelementptr inbounds i8, i8* %139, i64 1
  store i8 %conv360, i8* %arrayidx361, align 1
  br label %cond.end.389

cond.false.362:                                   ; preds = %cond.false.350, %cond.true.346
  br i1 true, label %cond.true.363, label %cond.false.367

cond.true.363:                                    ; preds = %cond.false.362
  %140 = load i32, i32* %c, align 4
  %add364 = add i32 %140, 0
  %cmp365 = icmp ule i32 %add364, 65535
  br i1 %cmp365, label %cond.true.372, label %cond.false.386

cond.false.367:                                   ; preds = %cond.false.362
  %141 = load i32, i32* %c, align 4
  %conv368 = sext i32 %141 to i64
  %add369 = add i64 %conv368, 0
  %cmp370 = icmp ule i64 %add369, 65535
  br i1 %cmp370, label %cond.true.372, label %cond.false.386

cond.true.372:                                    ; preds = %cond.false.367, %cond.true.363
  %142 = load i32, i32* %c, align 4
  %shr373 = ashr i32 %142, 12
  %or374 = or i32 224, %shr373
  %conv375 = trunc i32 %or374 to i8
  %143 = load i8*, i8** %to, align 8
  %arrayidx376 = getelementptr inbounds i8, i8* %143, i64 0
  store i8 %conv375, i8* %arrayidx376, align 1
  %144 = load i32, i32* %c, align 4
  %shr377 = ashr i32 %144, 6
  %and378 = and i32 %shr377, 63
  %or379 = or i32 128, %and378
  %conv380 = trunc i32 %or379 to i8
  %145 = load i8*, i8** %to, align 8
  %arrayidx381 = getelementptr inbounds i8, i8* %145, i64 1
  store i8 %conv380, i8* %arrayidx381, align 1
  %146 = load i32, i32* %c, align 4
  %and382 = and i32 %146, 63
  %or383 = or i32 128, %and382
  %conv384 = trunc i32 %or383 to i8
  %147 = load i8*, i8** %to, align 8
  %arrayidx385 = getelementptr inbounds i8, i8* %147, i64 2
  store i8 %conv384, i8* %arrayidx385, align 1
  br label %cond.end.387

cond.false.386:                                   ; preds = %cond.false.367, %cond.true.363
  %148 = load i32, i32* %c, align 4
  %149 = load i8*, i8** %to, align 8
  %call = call i32 @char_string(i32 %148, i8* %149)
  br label %cond.end.387

cond.end.387:                                     ; preds = %cond.false.386, %cond.true.372
  %cond388 = phi i32 [ 3, %cond.true.372 ], [ %call, %cond.false.386 ]
  br label %cond.end.389

cond.end.389:                                     ; preds = %cond.end.387, %cond.true.355
  %cond390 = phi i32 [ 2, %cond.true.355 ], [ %cond388, %cond.end.387 ]
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.end.389, %cond.true.342
  %cond392 = phi i32 [ 1, %cond.true.342 ], [ %cond390, %cond.end.389 ]
  %150 = load i8*, i8** %to, align 8
  %idx.ext393 = sext i32 %cond392 to i64
  %add.ptr394 = getelementptr inbounds i8, i8* %150, i64 %idx.ext393
  store i8* %add.ptr394, i8** %to, align 8
  br label %if.end.395

if.end.395:                                       ; preds = %cond.end.391, %while.end.330
  br label %while.cond.228

while.end.396:                                    ; preds = %while.cond.228
  %151 = load i64, i64* %chars, align 8
  %inc397 = add nsw i64 %151, 1
  store i64 %inc397, i64* %chars, align 8
  br label %if.end.398

if.end.398:                                       ; preds = %while.end.396, %if.end.218
  br label %while.cond.399

while.cond.399:                                   ; preds = %if.end.596, %if.end.398
  %152 = load i8*, i8** %p, align 8
  %153 = load i8*, i8** %endp, align 8
  %cmp400 = icmp ult i8* %152, %153
  br i1 %cmp400, label %while.body.402, label %while.end.598

while.body.402:                                   ; preds = %while.cond.399
  %154 = load i8*, i8** %p, align 8
  %155 = load i8, i8* %154, align 1
  %conv403 = zext i8 %155 to i32
  %cmp404 = icmp eq i32 %conv403, 192
  br i1 %cmp404, label %if.else.526, label %lor.lhs.false.406

lor.lhs.false.406:                                ; preds = %while.body.402
  %156 = load i8*, i8** %p, align 8
  %157 = load i8, i8* %156, align 1
  %conv407 = zext i8 %157 to i32
  %cmp408 = icmp eq i32 %conv407, 193
  br i1 %cmp408, label %if.else.526, label %land.lhs.true.410

land.lhs.true.410:                                ; preds = %lor.lhs.false.406
  %158 = load i8*, i8** %p, align 8
  %159 = load i8*, i8** %endp, align 8
  %cmp411 = icmp uge i8* %158, %159
  br i1 %cmp411, label %cond.true.413, label %cond.false.414

cond.true.413:                                    ; preds = %land.lhs.true.410
  br label %cond.end.514

cond.false.414:                                   ; preds = %land.lhs.true.410
  %160 = load i8*, i8** %p, align 8
  %arrayidx415 = getelementptr inbounds i8, i8* %160, i64 0
  %161 = load i8, i8* %arrayidx415, align 1
  %conv416 = zext i8 %161 to i32
  %and417 = and i32 %conv416, 128
  %tobool418 = icmp ne i32 %and417, 0
  br i1 %tobool418, label %cond.false.420, label %cond.true.419

cond.true.419:                                    ; preds = %cond.false.414
  br label %cond.end.512

cond.false.420:                                   ; preds = %cond.false.414
  %162 = load i8*, i8** %p, align 8
  %add.ptr421 = getelementptr inbounds i8, i8* %162, i64 1
  %163 = load i8*, i8** %endp, align 8
  %cmp422 = icmp uge i8* %add.ptr421, %163
  br i1 %cmp422, label %cond.true.430, label %lor.lhs.false.424

lor.lhs.false.424:                                ; preds = %cond.false.420
  %164 = load i8*, i8** %p, align 8
  %arrayidx425 = getelementptr inbounds i8, i8* %164, i64 1
  %165 = load i8, i8* %arrayidx425, align 1
  %conv426 = zext i8 %165 to i32
  %and427 = and i32 %conv426, 192
  %cmp428 = icmp ne i32 %and427, 128
  br i1 %cmp428, label %cond.true.430, label %cond.false.431

cond.true.430:                                    ; preds = %lor.lhs.false.424, %cond.false.420
  br label %cond.end.510

cond.false.431:                                   ; preds = %lor.lhs.false.424
  %166 = load i8*, i8** %p, align 8
  %arrayidx432 = getelementptr inbounds i8, i8* %166, i64 0
  %167 = load i8, i8* %arrayidx432, align 1
  %conv433 = zext i8 %167 to i32
  %and434 = and i32 %conv433, 224
  %cmp435 = icmp eq i32 %and434, 192
  br i1 %cmp435, label %cond.true.437, label %cond.false.438

cond.true.437:                                    ; preds = %cond.false.431
  br label %cond.end.508

cond.false.438:                                   ; preds = %cond.false.431
  %168 = load i8*, i8** %p, align 8
  %add.ptr439 = getelementptr inbounds i8, i8* %168, i64 2
  %169 = load i8*, i8** %endp, align 8
  %cmp440 = icmp uge i8* %add.ptr439, %169
  br i1 %cmp440, label %cond.true.448, label %lor.lhs.false.442

lor.lhs.false.442:                                ; preds = %cond.false.438
  %170 = load i8*, i8** %p, align 8
  %arrayidx443 = getelementptr inbounds i8, i8* %170, i64 2
  %171 = load i8, i8* %arrayidx443, align 1
  %conv444 = zext i8 %171 to i32
  %and445 = and i32 %conv444, 192
  %cmp446 = icmp ne i32 %and445, 128
  br i1 %cmp446, label %cond.true.448, label %cond.false.449

cond.true.448:                                    ; preds = %lor.lhs.false.442, %cond.false.438
  br label %cond.end.506

cond.false.449:                                   ; preds = %lor.lhs.false.442
  %172 = load i8*, i8** %p, align 8
  %arrayidx450 = getelementptr inbounds i8, i8* %172, i64 0
  %173 = load i8, i8* %arrayidx450, align 1
  %conv451 = zext i8 %173 to i32
  %and452 = and i32 %conv451, 240
  %cmp453 = icmp eq i32 %and452, 224
  br i1 %cmp453, label %cond.true.455, label %cond.false.456

cond.true.455:                                    ; preds = %cond.false.449
  br label %cond.end.504

cond.false.456:                                   ; preds = %cond.false.449
  %174 = load i8*, i8** %p, align 8
  %add.ptr457 = getelementptr inbounds i8, i8* %174, i64 3
  %175 = load i8*, i8** %endp, align 8
  %cmp458 = icmp uge i8* %add.ptr457, %175
  br i1 %cmp458, label %cond.true.466, label %lor.lhs.false.460

lor.lhs.false.460:                                ; preds = %cond.false.456
  %176 = load i8*, i8** %p, align 8
  %arrayidx461 = getelementptr inbounds i8, i8* %176, i64 3
  %177 = load i8, i8* %arrayidx461, align 1
  %conv462 = zext i8 %177 to i32
  %and463 = and i32 %conv462, 192
  %cmp464 = icmp ne i32 %and463, 128
  br i1 %cmp464, label %cond.true.466, label %cond.false.467

cond.true.466:                                    ; preds = %lor.lhs.false.460, %cond.false.456
  br label %cond.end.502

cond.false.467:                                   ; preds = %lor.lhs.false.460
  %178 = load i8*, i8** %p, align 8
  %arrayidx468 = getelementptr inbounds i8, i8* %178, i64 0
  %179 = load i8, i8* %arrayidx468, align 1
  %conv469 = zext i8 %179 to i32
  %and470 = and i32 %conv469, 248
  %cmp471 = icmp eq i32 %and470, 240
  br i1 %cmp471, label %cond.true.473, label %cond.false.474

cond.true.473:                                    ; preds = %cond.false.467
  br label %cond.end.500

cond.false.474:                                   ; preds = %cond.false.467
  %180 = load i8*, i8** %p, align 8
  %add.ptr475 = getelementptr inbounds i8, i8* %180, i64 4
  %181 = load i8*, i8** %endp, align 8
  %cmp476 = icmp uge i8* %add.ptr475, %181
  br i1 %cmp476, label %cond.true.484, label %lor.lhs.false.478

lor.lhs.false.478:                                ; preds = %cond.false.474
  %182 = load i8*, i8** %p, align 8
  %arrayidx479 = getelementptr inbounds i8, i8* %182, i64 4
  %183 = load i8, i8* %arrayidx479, align 1
  %conv480 = zext i8 %183 to i32
  %and481 = and i32 %conv480, 192
  %cmp482 = icmp ne i32 %and481, 128
  br i1 %cmp482, label %cond.true.484, label %cond.false.485

cond.true.484:                                    ; preds = %lor.lhs.false.478, %cond.false.474
  br label %cond.end.498

cond.false.485:                                   ; preds = %lor.lhs.false.478
  %184 = load i8*, i8** %p, align 8
  %arrayidx486 = getelementptr inbounds i8, i8* %184, i64 0
  %185 = load i8, i8* %arrayidx486, align 1
  %conv487 = zext i8 %185 to i32
  %cmp488 = icmp eq i32 %conv487, 248
  br i1 %cmp488, label %land.rhs.490, label %land.end.496

land.rhs.490:                                     ; preds = %cond.false.485
  %186 = load i8*, i8** %p, align 8
  %arrayidx491 = getelementptr inbounds i8, i8* %186, i64 1
  %187 = load i8, i8* %arrayidx491, align 1
  %conv492 = zext i8 %187 to i32
  %and493 = and i32 %conv492, 240
  %cmp494 = icmp eq i32 %and493, 128
  br label %land.end.496

land.end.496:                                     ; preds = %land.rhs.490, %cond.false.485
  %188 = phi i1 [ false, %cond.false.485 ], [ %cmp494, %land.rhs.490 ]
  %cond497 = select i1 %188, i32 5, i32 0
  br label %cond.end.498

cond.end.498:                                     ; preds = %land.end.496, %cond.true.484
  %cond499 = phi i32 [ 0, %cond.true.484 ], [ %cond497, %land.end.496 ]
  br label %cond.end.500

cond.end.500:                                     ; preds = %cond.end.498, %cond.true.473
  %cond501 = phi i32 [ 4, %cond.true.473 ], [ %cond499, %cond.end.498 ]
  br label %cond.end.502

cond.end.502:                                     ; preds = %cond.end.500, %cond.true.466
  %cond503 = phi i32 [ 0, %cond.true.466 ], [ %cond501, %cond.end.500 ]
  br label %cond.end.504

cond.end.504:                                     ; preds = %cond.end.502, %cond.true.455
  %cond505 = phi i32 [ 3, %cond.true.455 ], [ %cond503, %cond.end.502 ]
  br label %cond.end.506

cond.end.506:                                     ; preds = %cond.end.504, %cond.true.448
  %cond507 = phi i32 [ 0, %cond.true.448 ], [ %cond505, %cond.end.504 ]
  br label %cond.end.508

cond.end.508:                                     ; preds = %cond.end.506, %cond.true.437
  %cond509 = phi i32 [ 2, %cond.true.437 ], [ %cond507, %cond.end.506 ]
  br label %cond.end.510

cond.end.510:                                     ; preds = %cond.end.508, %cond.true.430
  %cond511 = phi i32 [ 0, %cond.true.430 ], [ %cond509, %cond.end.508 ]
  br label %cond.end.512

cond.end.512:                                     ; preds = %cond.end.510, %cond.true.419
  %cond513 = phi i32 [ 1, %cond.true.419 ], [ %cond511, %cond.end.510 ]
  br label %cond.end.514

cond.end.514:                                     ; preds = %cond.end.512, %cond.true.413
  %cond515 = phi i32 [ 0, %cond.true.413 ], [ %cond513, %cond.end.512 ]
  store i32 %cond515, i32* %n, align 4
  %cmp516 = icmp sgt i32 %cond515, 0
  br i1 %cmp516, label %if.then.518, label %if.else.526

if.then.518:                                      ; preds = %cond.end.514
  br label %while.cond.519

while.cond.519:                                   ; preds = %while.body.522, %if.then.518
  %189 = load i32, i32* %n, align 4
  %dec520 = add nsw i32 %189, -1
  store i32 %dec520, i32* %n, align 4
  %tobool521 = icmp ne i32 %189, 0
  br i1 %tobool521, label %while.body.522, label %while.end.525

while.body.522:                                   ; preds = %while.cond.519
  %190 = load i8*, i8** %p, align 8
  %incdec.ptr523 = getelementptr inbounds i8, i8* %190, i32 1
  store i8* %incdec.ptr523, i8** %p, align 8
  %191 = load i8, i8* %190, align 1
  %192 = load i8*, i8** %to, align 8
  %incdec.ptr524 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %incdec.ptr524, i8** %to, align 8
  store i8 %191, i8* %192, align 1
  br label %while.cond.519

while.end.525:                                    ; preds = %while.cond.519
  br label %if.end.596

if.else.526:                                      ; preds = %cond.end.514, %lor.lhs.false.406, %while.body.402
  %193 = load i8*, i8** %p, align 8
  %incdec.ptr528 = getelementptr inbounds i8, i8* %193, i32 1
  store i8* %incdec.ptr528, i8** %p, align 8
  %194 = load i8, i8* %193, align 1
  %conv529 = zext i8 %194 to i32
  store i32 %conv529, i32* %c527, align 4
  %195 = load i32, i32* %c527, align 4
  %add530 = add nsw i32 %195, 4194048
  store i32 %add530, i32* %c527, align 4
  br i1 true, label %cond.true.531, label %cond.false.535

cond.true.531:                                    ; preds = %if.else.526
  %196 = load i32, i32* %c527, align 4
  %add532 = add i32 %196, 0
  %cmp533 = icmp ule i32 %add532, 127
  br i1 %cmp533, label %cond.true.540, label %cond.false.543

cond.false.535:                                   ; preds = %if.else.526
  %197 = load i32, i32* %c527, align 4
  %conv536 = sext i32 %197 to i64
  %add537 = add i64 %conv536, 0
  %cmp538 = icmp ule i64 %add537, 127
  br i1 %cmp538, label %cond.true.540, label %cond.false.543

cond.true.540:                                    ; preds = %cond.false.535, %cond.true.531
  %198 = load i32, i32* %c527, align 4
  %conv541 = trunc i32 %198 to i8
  %199 = load i8*, i8** %to, align 8
  %arrayidx542 = getelementptr inbounds i8, i8* %199, i64 0
  store i8 %conv541, i8* %arrayidx542, align 1
  br label %cond.end.592

cond.false.543:                                   ; preds = %cond.false.535, %cond.true.531
  br i1 true, label %cond.true.544, label %cond.false.548

cond.true.544:                                    ; preds = %cond.false.543
  %200 = load i32, i32* %c527, align 4
  %add545 = add i32 %200, 0
  %cmp546 = icmp ule i32 %add545, 2047
  br i1 %cmp546, label %cond.true.553, label %cond.false.562

cond.false.548:                                   ; preds = %cond.false.543
  %201 = load i32, i32* %c527, align 4
  %conv549 = sext i32 %201 to i64
  %add550 = add i64 %conv549, 0
  %cmp551 = icmp ule i64 %add550, 2047
  br i1 %cmp551, label %cond.true.553, label %cond.false.562

cond.true.553:                                    ; preds = %cond.false.548, %cond.true.544
  %202 = load i32, i32* %c527, align 4
  %shr554 = ashr i32 %202, 6
  %or555 = or i32 192, %shr554
  %conv556 = trunc i32 %or555 to i8
  %203 = load i8*, i8** %to, align 8
  %arrayidx557 = getelementptr inbounds i8, i8* %203, i64 0
  store i8 %conv556, i8* %arrayidx557, align 1
  %204 = load i32, i32* %c527, align 4
  %and558 = and i32 %204, 63
  %or559 = or i32 128, %and558
  %conv560 = trunc i32 %or559 to i8
  %205 = load i8*, i8** %to, align 8
  %arrayidx561 = getelementptr inbounds i8, i8* %205, i64 1
  store i8 %conv560, i8* %arrayidx561, align 1
  br label %cond.end.590

cond.false.562:                                   ; preds = %cond.false.548, %cond.true.544
  br i1 true, label %cond.true.563, label %cond.false.567

cond.true.563:                                    ; preds = %cond.false.562
  %206 = load i32, i32* %c527, align 4
  %add564 = add i32 %206, 0
  %cmp565 = icmp ule i32 %add564, 65535
  br i1 %cmp565, label %cond.true.572, label %cond.false.586

cond.false.567:                                   ; preds = %cond.false.562
  %207 = load i32, i32* %c527, align 4
  %conv568 = sext i32 %207 to i64
  %add569 = add i64 %conv568, 0
  %cmp570 = icmp ule i64 %add569, 65535
  br i1 %cmp570, label %cond.true.572, label %cond.false.586

cond.true.572:                                    ; preds = %cond.false.567, %cond.true.563
  %208 = load i32, i32* %c527, align 4
  %shr573 = ashr i32 %208, 12
  %or574 = or i32 224, %shr573
  %conv575 = trunc i32 %or574 to i8
  %209 = load i8*, i8** %to, align 8
  %arrayidx576 = getelementptr inbounds i8, i8* %209, i64 0
  store i8 %conv575, i8* %arrayidx576, align 1
  %210 = load i32, i32* %c527, align 4
  %shr577 = ashr i32 %210, 6
  %and578 = and i32 %shr577, 63
  %or579 = or i32 128, %and578
  %conv580 = trunc i32 %or579 to i8
  %211 = load i8*, i8** %to, align 8
  %arrayidx581 = getelementptr inbounds i8, i8* %211, i64 1
  store i8 %conv580, i8* %arrayidx581, align 1
  %212 = load i32, i32* %c527, align 4
  %and582 = and i32 %212, 63
  %or583 = or i32 128, %and582
  %conv584 = trunc i32 %or583 to i8
  %213 = load i8*, i8** %to, align 8
  %arrayidx585 = getelementptr inbounds i8, i8* %213, i64 2
  store i8 %conv584, i8* %arrayidx585, align 1
  br label %cond.end.588

cond.false.586:                                   ; preds = %cond.false.567, %cond.true.563
  %214 = load i32, i32* %c527, align 4
  %215 = load i8*, i8** %to, align 8
  %call587 = call i32 @char_string(i32 %214, i8* %215)
  br label %cond.end.588

cond.end.588:                                     ; preds = %cond.false.586, %cond.true.572
  %cond589 = phi i32 [ 3, %cond.true.572 ], [ %call587, %cond.false.586 ]
  br label %cond.end.590

cond.end.590:                                     ; preds = %cond.end.588, %cond.true.553
  %cond591 = phi i32 [ 2, %cond.true.553 ], [ %cond589, %cond.end.588 ]
  br label %cond.end.592

cond.end.592:                                     ; preds = %cond.end.590, %cond.true.540
  %cond593 = phi i32 [ 1, %cond.true.540 ], [ %cond591, %cond.end.590 ]
  %216 = load i8*, i8** %to, align 8
  %idx.ext594 = sext i32 %cond593 to i64
  %add.ptr595 = getelementptr inbounds i8, i8* %216, i64 %idx.ext594
  store i8* %add.ptr595, i8** %to, align 8
  br label %if.end.596

if.end.596:                                       ; preds = %cond.end.592, %while.end.525
  %217 = load i64, i64* %chars, align 8
  %inc597 = add nsw i64 %217, 1
  store i64 %inc597, i64* %chars, align 8
  br label %while.cond.399

while.end.598:                                    ; preds = %while.cond.399
  %218 = load i64*, i64** %nchars.addr, align 8
  %tobool599 = icmp ne i64* %218, null
  br i1 %tobool599, label %if.then.600, label %if.end.601

if.then.600:                                      ; preds = %while.end.598
  %219 = load i64, i64* %chars, align 8
  %220 = load i64*, i64** %nchars.addr, align 8
  store i64 %219, i64* %220, align 8
  br label %if.end.601

if.end.601:                                       ; preds = %if.then.600, %while.end.598
  %221 = load i8*, i8** %to, align 8
  %222 = load i8*, i8** %str.addr, align 8
  %sub.ptr.lhs.cast602 = ptrtoint i8* %221 to i64
  %sub.ptr.rhs.cast603 = ptrtoint i8* %222 to i64
  %sub.ptr.sub604 = sub i64 %sub.ptr.lhs.cast602, %sub.ptr.rhs.cast603
  store i64 %sub.ptr.sub604, i64* %retval
  br label %return

return:                                           ; preds = %if.end.601, %if.then.217
  %223 = load i64, i64* %retval
  ret i64 %223
}

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define i64 @count_size_as_multibyte(i8* %str, i64 %len) #1 {
entry:
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %endp = alloca i8*, align 8
  %bytes = alloca i64, align 8
  %n = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %1 = load i64, i64* %len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %1
  store i8* %add.ptr, i8** %endp, align 8
  store i64 0, i64* %bytes, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %str.addr, align 8
  %3 = load i8*, i8** %endp, align 8
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %str.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = zext i8 %5 to i32
  %cmp1 = icmp slt i32 %conv, 128
  %cond = select i1 %cmp1, i32 1, i32 2
  store i32 %cond, i32* %n, align 4
  br i1 false, label %cond.true, label %cond.false.481

cond.true:                                        ; preds = %for.body
  br i1 false, label %cond.true.3, label %cond.false.270

cond.true.3:                                      ; preds = %cond.true
  %6 = load i32, i32* %n, align 4
  %conv4 = trunc i32 %6 to i8
  %conv5 = sext i8 %conv4 to i32
  %mul = mul nsw i32 0, %conv5
  %7 = load i64, i64* %bytes, align 8
  %conv6 = trunc i64 %7 to i8
  %conv7 = sext i8 %conv6 to i32
  %add = add nsw i32 %mul, %conv7
  %mul8 = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul8, 1
  %cmp9 = icmp slt i32 %sub, 0
  br i1 %cmp9, label %cond.true.11, label %cond.false

cond.true.11:                                     ; preds = %cond.true.3
  %8 = load i32, i32* %n, align 4
  %conv12 = trunc i32 %8 to i8
  %conv13 = sext i8 %conv12 to i32
  %mul14 = mul nsw i32 0, %conv13
  %9 = load i64, i64* %bytes, align 8
  %conv15 = trunc i64 %9 to i8
  %conv16 = sext i8 %conv15 to i32
  %add17 = add nsw i32 %mul14, %conv16
  %mul18 = mul nsw i32 0, %add17
  %add19 = add nsw i32 %mul18, 0
  %neg = xor i32 %add19, -1
  %cmp20 = icmp eq i32 %neg, -1
  %conv21 = zext i1 %cmp20 to i32
  %sub22 = sub nsw i32 0, %conv21
  %10 = load i32, i32* %n, align 4
  %conv23 = trunc i32 %10 to i8
  %conv24 = sext i8 %conv23 to i32
  %mul25 = mul nsw i32 0, %conv24
  %11 = load i64, i64* %bytes, align 8
  %conv26 = trunc i64 %11 to i8
  %conv27 = sext i8 %conv26 to i32
  %add28 = add nsw i32 %mul25, %conv27
  %mul29 = mul nsw i32 0, %add28
  %add30 = add nsw i32 %mul29, 1
  %shl = shl i32 %add30, 30
  %sub31 = sub nsw i32 %shl, 1
  %mul32 = mul nsw i32 %sub31, 2
  %add33 = add nsw i32 %mul32, 1
  %sub34 = sub nsw i32 %sub22, %add33
  br label %cond.end

cond.false:                                       ; preds = %cond.true.3
  %12 = load i32, i32* %n, align 4
  %conv35 = trunc i32 %12 to i8
  %conv36 = sext i8 %conv35 to i32
  %mul37 = mul nsw i32 0, %conv36
  %13 = load i64, i64* %bytes, align 8
  %conv38 = trunc i64 %13 to i8
  %conv39 = sext i8 %conv38 to i32
  %add40 = add nsw i32 %mul37, %conv39
  %mul41 = mul nsw i32 0, %add40
  %add42 = add nsw i32 %mul41, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.11
  %cond43 = phi i32 [ %sub34, %cond.true.11 ], [ %add42, %cond.false ]
  %cmp44 = icmp slt i32 %cond43, 0
  br i1 %cmp44, label %cond.true.46, label %cond.false.148

cond.true.46:                                     ; preds = %cond.end
  %14 = load i32, i32* %n, align 4
  %conv47 = trunc i32 %14 to i8
  %conv48 = sext i8 %conv47 to i32
  %cmp49 = icmp slt i32 %conv48, 0
  br i1 %cmp49, label %cond.true.51, label %cond.false.106

cond.true.51:                                     ; preds = %cond.true.46
  %15 = load i64, i64* %bytes, align 8
  %conv52 = trunc i64 %15 to i8
  %conv53 = sext i8 %conv52 to i32
  %16 = load i32, i32* %n, align 4
  %conv54 = trunc i32 %16 to i8
  %conv55 = sext i8 %conv54 to i32
  %mul56 = mul nsw i32 0, %conv55
  %17 = load i64, i64* %bytes, align 8
  %conv57 = trunc i64 %17 to i8
  %conv58 = sext i8 %conv57 to i32
  %add59 = add nsw i32 %mul56, %conv58
  %mul60 = mul nsw i32 0, %add59
  %sub61 = sub nsw i32 %mul60, 1
  %cmp62 = icmp slt i32 %sub61, 0
  br i1 %cmp62, label %cond.true.64, label %cond.false.90

cond.true.64:                                     ; preds = %cond.true.51
  %18 = load i32, i32* %n, align 4
  %conv65 = trunc i32 %18 to i8
  %conv66 = sext i8 %conv65 to i32
  %mul67 = mul nsw i32 0, %conv66
  %19 = load i64, i64* %bytes, align 8
  %conv68 = trunc i64 %19 to i8
  %conv69 = sext i8 %conv68 to i32
  %add70 = add nsw i32 %mul67, %conv69
  %mul71 = mul nsw i32 0, %add70
  %add72 = add nsw i32 %mul71, 0
  %neg73 = xor i32 %add72, -1
  %cmp74 = icmp eq i32 %neg73, -1
  %conv75 = zext i1 %cmp74 to i32
  %sub76 = sub nsw i32 0, %conv75
  %20 = load i32, i32* %n, align 4
  %conv77 = trunc i32 %20 to i8
  %conv78 = sext i8 %conv77 to i32
  %mul79 = mul nsw i32 0, %conv78
  %21 = load i64, i64* %bytes, align 8
  %conv80 = trunc i64 %21 to i8
  %conv81 = sext i8 %conv80 to i32
  %add82 = add nsw i32 %mul79, %conv81
  %mul83 = mul nsw i32 0, %add82
  %add84 = add nsw i32 %mul83, 1
  %shl85 = shl i32 %add84, 30
  %sub86 = sub nsw i32 %shl85, 1
  %mul87 = mul nsw i32 %sub86, 2
  %add88 = add nsw i32 %mul87, 1
  %sub89 = sub nsw i32 %sub76, %add88
  br label %cond.end.99

cond.false.90:                                    ; preds = %cond.true.51
  %22 = load i32, i32* %n, align 4
  %conv91 = trunc i32 %22 to i8
  %conv92 = sext i8 %conv91 to i32
  %mul93 = mul nsw i32 0, %conv92
  %23 = load i64, i64* %bytes, align 8
  %conv94 = trunc i64 %23 to i8
  %conv95 = sext i8 %conv94 to i32
  %add96 = add nsw i32 %mul93, %conv95
  %mul97 = mul nsw i32 0, %add96
  %add98 = add nsw i32 %mul97, 0
  br label %cond.end.99

cond.end.99:                                      ; preds = %cond.false.90, %cond.true.64
  %cond100 = phi i32 [ %sub89, %cond.true.64 ], [ %add98, %cond.false.90 ]
  %24 = load i32, i32* %n, align 4
  %conv101 = trunc i32 %24 to i8
  %conv102 = sext i8 %conv101 to i32
  %sub103 = sub nsw i32 %cond100, %conv102
  %cmp104 = icmp slt i32 %conv53, %sub103
  br i1 %cmp104, label %cond.true.212, label %lor.lhs.false

cond.false.106:                                   ; preds = %cond.true.46
  %25 = load i32, i32* %n, align 4
  %conv107 = trunc i32 %25 to i8
  %conv108 = sext i8 %conv107 to i32
  %mul109 = mul nsw i32 0, %conv108
  %26 = load i64, i64* %bytes, align 8
  %conv110 = trunc i64 %26 to i8
  %conv111 = sext i8 %conv110 to i32
  %add112 = add nsw i32 %mul109, %conv111
  %mul113 = mul nsw i32 0, %add112
  %sub114 = sub nsw i32 %mul113, 1
  %cmp115 = icmp slt i32 %sub114, 0
  br i1 %cmp115, label %cond.true.117, label %cond.false.130

cond.true.117:                                    ; preds = %cond.false.106
  %27 = load i32, i32* %n, align 4
  %conv118 = trunc i32 %27 to i8
  %conv119 = sext i8 %conv118 to i32
  %mul120 = mul nsw i32 0, %conv119
  %28 = load i64, i64* %bytes, align 8
  %conv121 = trunc i64 %28 to i8
  %conv122 = sext i8 %conv121 to i32
  %add123 = add nsw i32 %mul120, %conv122
  %mul124 = mul nsw i32 0, %add123
  %add125 = add nsw i32 %mul124, 1
  %shl126 = shl i32 %add125, 30
  %sub127 = sub nsw i32 %shl126, 1
  %mul128 = mul nsw i32 %sub127, 2
  %add129 = add nsw i32 %mul128, 1
  br label %cond.end.139

cond.false.130:                                   ; preds = %cond.false.106
  %29 = load i32, i32* %n, align 4
  %conv131 = trunc i32 %29 to i8
  %conv132 = sext i8 %conv131 to i32
  %mul133 = mul nsw i32 0, %conv132
  %30 = load i64, i64* %bytes, align 8
  %conv134 = trunc i64 %30 to i8
  %conv135 = sext i8 %conv134 to i32
  %add136 = add nsw i32 %mul133, %conv135
  %mul137 = mul nsw i32 0, %add136
  %sub138 = sub nsw i32 %mul137, 1
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.130, %cond.true.117
  %cond140 = phi i32 [ %add129, %cond.true.117 ], [ %sub138, %cond.false.130 ]
  %31 = load i32, i32* %n, align 4
  %conv141 = trunc i32 %31 to i8
  %conv142 = sext i8 %conv141 to i32
  %sub143 = sub nsw i32 %cond140, %conv142
  %32 = load i64, i64* %bytes, align 8
  %conv144 = trunc i64 %32 to i8
  %conv145 = sext i8 %conv144 to i32
  %cmp146 = icmp slt i32 %sub143, %conv145
  br i1 %cmp146, label %cond.true.212, label %lor.lhs.false

cond.false.148:                                   ; preds = %cond.end
  %33 = load i64, i64* %bytes, align 8
  %conv149 = trunc i64 %33 to i8
  %conv150 = sext i8 %conv149 to i32
  %cmp151 = icmp slt i32 %conv150, 0
  br i1 %cmp151, label %cond.true.153, label %cond.false.163

cond.true.153:                                    ; preds = %cond.false.148
  %34 = load i32, i32* %n, align 4
  %conv154 = trunc i32 %34 to i8
  %conv155 = sext i8 %conv154 to i32
  %35 = load i64, i64* %bytes, align 8
  %conv156 = trunc i64 %35 to i8
  %conv157 = sext i8 %conv156 to i32
  %36 = load i32, i32* %n, align 4
  %conv158 = trunc i32 %36 to i8
  %conv159 = sext i8 %conv158 to i32
  %add160 = add nsw i32 %conv157, %conv159
  %cmp161 = icmp sle i32 %conv155, %add160
  br i1 %cmp161, label %cond.true.212, label %lor.lhs.false

cond.false.163:                                   ; preds = %cond.false.148
  %37 = load i32, i32* %n, align 4
  %conv164 = trunc i32 %37 to i8
  %conv165 = sext i8 %conv164 to i32
  %cmp166 = icmp slt i32 %conv165, 0
  br i1 %cmp166, label %cond.true.168, label %cond.false.178

cond.true.168:                                    ; preds = %cond.false.163
  %38 = load i64, i64* %bytes, align 8
  %conv169 = trunc i64 %38 to i8
  %conv170 = sext i8 %conv169 to i32
  %39 = load i64, i64* %bytes, align 8
  %conv171 = trunc i64 %39 to i8
  %conv172 = sext i8 %conv171 to i32
  %40 = load i32, i32* %n, align 4
  %conv173 = trunc i32 %40 to i8
  %conv174 = sext i8 %conv173 to i32
  %add175 = add nsw i32 %conv172, %conv174
  %cmp176 = icmp sle i32 %conv170, %add175
  br i1 %cmp176, label %cond.true.212, label %lor.lhs.false

cond.false.178:                                   ; preds = %cond.false.163
  %41 = load i64, i64* %bytes, align 8
  %conv179 = trunc i64 %41 to i8
  %conv180 = sext i8 %conv179 to i32
  %42 = load i32, i32* %n, align 4
  %conv181 = trunc i32 %42 to i8
  %conv182 = sext i8 %conv181 to i32
  %add183 = add nsw i32 %conv180, %conv182
  %43 = load i32, i32* %n, align 4
  %conv184 = trunc i32 %43 to i8
  %conv185 = sext i8 %conv184 to i32
  %cmp186 = icmp slt i32 %add183, %conv185
  br i1 %cmp186, label %cond.true.212, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false.178, %cond.true.168, %cond.true.153, %cond.end.139, %cond.end.99
  %44 = load i64, i64* %bytes, align 8
  %conv188 = trunc i64 %44 to i8
  %conv189 = sext i8 %conv188 to i32
  %45 = load i32, i32* %n, align 4
  %conv190 = trunc i32 %45 to i8
  %conv191 = sext i8 %conv190 to i32
  %add192 = add nsw i32 %conv189, %conv191
  %mul193 = mul nsw i32 0, %add192
  %sub194 = sub nsw i32 %mul193, 1
  %cmp195 = icmp slt i32 %sub194, 0
  br i1 %cmp195, label %land.lhs.true, label %lor.lhs.false.204

land.lhs.true:                                    ; preds = %lor.lhs.false
  %46 = load i64, i64* %bytes, align 8
  %conv197 = trunc i64 %46 to i8
  %conv198 = sext i8 %conv197 to i32
  %47 = load i32, i32* %n, align 4
  %conv199 = trunc i32 %47 to i8
  %conv200 = sext i8 %conv199 to i32
  %add201 = add nsw i32 %conv198, %conv200
  %cmp202 = icmp slt i32 %add201, -128
  br i1 %cmp202, label %cond.true.212, label %lor.lhs.false.204

lor.lhs.false.204:                                ; preds = %land.lhs.true, %lor.lhs.false
  %48 = load i64, i64* %bytes, align 8
  %conv205 = trunc i64 %48 to i8
  %conv206 = sext i8 %conv205 to i32
  %49 = load i32, i32* %n, align 4
  %conv207 = trunc i32 %49 to i8
  %conv208 = sext i8 %conv207 to i32
  %add209 = add nsw i32 %conv206, %conv208
  %cmp210 = icmp slt i32 127, %add209
  br i1 %cmp210, label %cond.true.212, label %cond.false.241

cond.true.212:                                    ; preds = %lor.lhs.false.204, %land.lhs.true, %cond.false.178, %cond.true.168, %cond.true.153, %cond.end.139, %cond.end.99
  %50 = load i64, i64* %bytes, align 8
  %conv213 = trunc i64 %50 to i8
  %conv214 = zext i8 %conv213 to i32
  %51 = load i32, i32* %n, align 4
  %conv215 = trunc i32 %51 to i8
  %conv216 = zext i8 %conv215 to i32
  %add217 = add nsw i32 %conv214, %conv216
  %cmp218 = icmp sle i32 %add217, 127
  br i1 %cmp218, label %cond.true.220, label %cond.false.228

cond.true.220:                                    ; preds = %cond.true.212
  %52 = load i64, i64* %bytes, align 8
  %conv221 = trunc i64 %52 to i8
  %conv222 = zext i8 %conv221 to i32
  %53 = load i32, i32* %n, align 4
  %conv223 = trunc i32 %53 to i8
  %conv224 = zext i8 %conv223 to i32
  %add225 = add nsw i32 %conv222, %conv224
  %conv226 = trunc i32 %add225 to i8
  %conv227 = sext i8 %conv226 to i32
  br label %cond.end.238

cond.false.228:                                   ; preds = %cond.true.212
  %54 = load i64, i64* %bytes, align 8
  %conv229 = trunc i64 %54 to i8
  %conv230 = zext i8 %conv229 to i32
  %55 = load i32, i32* %n, align 4
  %conv231 = trunc i32 %55 to i8
  %conv232 = zext i8 %conv231 to i32
  %add233 = add nsw i32 %conv230, %conv232
  %sub234 = sub nsw i32 %add233, -128
  %conv235 = trunc i32 %sub234 to i8
  %conv236 = sext i8 %conv235 to i32
  %add237 = add nsw i32 %conv236, -128
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.228, %cond.true.220
  %cond239 = phi i32 [ %conv227, %cond.true.220 ], [ %add237, %cond.false.228 ]
  %conv240 = sext i32 %cond239 to i64
  store i64 %conv240, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.241:                                   ; preds = %lor.lhs.false.204
  %56 = load i64, i64* %bytes, align 8
  %conv242 = trunc i64 %56 to i8
  %conv243 = zext i8 %conv242 to i32
  %57 = load i32, i32* %n, align 4
  %conv244 = trunc i32 %57 to i8
  %conv245 = zext i8 %conv244 to i32
  %add246 = add nsw i32 %conv243, %conv245
  %cmp247 = icmp sle i32 %add246, 127
  br i1 %cmp247, label %cond.true.249, label %cond.false.257

cond.true.249:                                    ; preds = %cond.false.241
  %58 = load i64, i64* %bytes, align 8
  %conv250 = trunc i64 %58 to i8
  %conv251 = zext i8 %conv250 to i32
  %59 = load i32, i32* %n, align 4
  %conv252 = trunc i32 %59 to i8
  %conv253 = zext i8 %conv252 to i32
  %add254 = add nsw i32 %conv251, %conv253
  %conv255 = trunc i32 %add254 to i8
  %conv256 = sext i8 %conv255 to i32
  br label %cond.end.267

cond.false.257:                                   ; preds = %cond.false.241
  %60 = load i64, i64* %bytes, align 8
  %conv258 = trunc i64 %60 to i8
  %conv259 = zext i8 %conv258 to i32
  %61 = load i32, i32* %n, align 4
  %conv260 = trunc i32 %61 to i8
  %conv261 = zext i8 %conv260 to i32
  %add262 = add nsw i32 %conv259, %conv261
  %sub263 = sub nsw i32 %add262, -128
  %conv264 = trunc i32 %sub263 to i8
  %conv265 = sext i8 %conv264 to i32
  %add266 = add nsw i32 %conv265, -128
  br label %cond.end.267

cond.end.267:                                     ; preds = %cond.false.257, %cond.true.249
  %cond268 = phi i32 [ %conv256, %cond.true.249 ], [ %add266, %cond.false.257 ]
  %conv269 = sext i32 %cond268 to i64
  store i64 %conv269, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.270:                                   ; preds = %cond.true
  %62 = load i32, i32* %n, align 4
  %mul271 = mul nsw i32 0, %62
  %conv272 = sext i32 %mul271 to i64
  %63 = load i64, i64* %bytes, align 8
  %add273 = add nsw i64 %conv272, %63
  %mul274 = mul nsw i64 0, %add273
  %sub275 = sub nsw i64 %mul274, 1
  %cmp276 = icmp slt i64 %sub275, 0
  br i1 %cmp276, label %cond.true.278, label %cond.false.299

cond.true.278:                                    ; preds = %cond.false.270
  %64 = load i32, i32* %n, align 4
  %mul279 = mul nsw i32 0, %64
  %conv280 = sext i32 %mul279 to i64
  %65 = load i64, i64* %bytes, align 8
  %add281 = add nsw i64 %conv280, %65
  %mul282 = mul nsw i64 0, %add281
  %add283 = add nsw i64 %mul282, 0
  %neg284 = xor i64 %add283, -1
  %cmp285 = icmp eq i64 %neg284, -1
  %conv286 = zext i1 %cmp285 to i32
  %sub287 = sub nsw i32 0, %conv286
  %conv288 = sext i32 %sub287 to i64
  %66 = load i32, i32* %n, align 4
  %mul289 = mul nsw i32 0, %66
  %conv290 = sext i32 %mul289 to i64
  %67 = load i64, i64* %bytes, align 8
  %add291 = add nsw i64 %conv290, %67
  %mul292 = mul nsw i64 0, %add291
  %add293 = add nsw i64 %mul292, 1
  %shl294 = shl i64 %add293, 62
  %sub295 = sub nsw i64 %shl294, 1
  %mul296 = mul nsw i64 %sub295, 2
  %add297 = add nsw i64 %mul296, 1
  %sub298 = sub nsw i64 %conv288, %add297
  br label %cond.end.305

cond.false.299:                                   ; preds = %cond.false.270
  %68 = load i32, i32* %n, align 4
  %mul300 = mul nsw i32 0, %68
  %conv301 = sext i32 %mul300 to i64
  %69 = load i64, i64* %bytes, align 8
  %add302 = add nsw i64 %conv301, %69
  %mul303 = mul nsw i64 0, %add302
  %add304 = add nsw i64 %mul303, 0
  br label %cond.end.305

cond.end.305:                                     ; preds = %cond.false.299, %cond.true.278
  %cond306 = phi i64 [ %sub298, %cond.true.278 ], [ %add304, %cond.false.299 ]
  %cmp307 = icmp slt i64 %cond306, 0
  br i1 %cmp307, label %cond.true.309, label %cond.false.383

cond.true.309:                                    ; preds = %cond.end.305
  %70 = load i32, i32* %n, align 4
  %cmp310 = icmp slt i32 %70, 0
  br i1 %cmp310, label %cond.true.312, label %cond.false.353

cond.true.312:                                    ; preds = %cond.true.309
  %71 = load i64, i64* %bytes, align 8
  %72 = load i32, i32* %n, align 4
  %mul313 = mul nsw i32 0, %72
  %conv314 = sext i32 %mul313 to i64
  %73 = load i64, i64* %bytes, align 8
  %add315 = add nsw i64 %conv314, %73
  %mul316 = mul nsw i64 0, %add315
  %sub317 = sub nsw i64 %mul316, 1
  %cmp318 = icmp slt i64 %sub317, 0
  br i1 %cmp318, label %cond.true.320, label %cond.false.341

cond.true.320:                                    ; preds = %cond.true.312
  %74 = load i32, i32* %n, align 4
  %mul321 = mul nsw i32 0, %74
  %conv322 = sext i32 %mul321 to i64
  %75 = load i64, i64* %bytes, align 8
  %add323 = add nsw i64 %conv322, %75
  %mul324 = mul nsw i64 0, %add323
  %add325 = add nsw i64 %mul324, 0
  %neg326 = xor i64 %add325, -1
  %cmp327 = icmp eq i64 %neg326, -1
  %conv328 = zext i1 %cmp327 to i32
  %sub329 = sub nsw i32 0, %conv328
  %conv330 = sext i32 %sub329 to i64
  %76 = load i32, i32* %n, align 4
  %mul331 = mul nsw i32 0, %76
  %conv332 = sext i32 %mul331 to i64
  %77 = load i64, i64* %bytes, align 8
  %add333 = add nsw i64 %conv332, %77
  %mul334 = mul nsw i64 0, %add333
  %add335 = add nsw i64 %mul334, 1
  %shl336 = shl i64 %add335, 62
  %sub337 = sub nsw i64 %shl336, 1
  %mul338 = mul nsw i64 %sub337, 2
  %add339 = add nsw i64 %mul338, 1
  %sub340 = sub nsw i64 %conv330, %add339
  br label %cond.end.347

cond.false.341:                                   ; preds = %cond.true.312
  %78 = load i32, i32* %n, align 4
  %mul342 = mul nsw i32 0, %78
  %conv343 = sext i32 %mul342 to i64
  %79 = load i64, i64* %bytes, align 8
  %add344 = add nsw i64 %conv343, %79
  %mul345 = mul nsw i64 0, %add344
  %add346 = add nsw i64 %mul345, 0
  br label %cond.end.347

cond.end.347:                                     ; preds = %cond.false.341, %cond.true.320
  %cond348 = phi i64 [ %sub340, %cond.true.320 ], [ %add346, %cond.false.341 ]
  %80 = load i32, i32* %n, align 4
  %conv349 = sext i32 %80 to i64
  %sub350 = sub nsw i64 %cond348, %conv349
  %cmp351 = icmp slt i64 %71, %sub350
  br i1 %cmp351, label %cond.true.423, label %lor.lhs.false.406

cond.false.353:                                   ; preds = %cond.true.309
  %81 = load i32, i32* %n, align 4
  %mul354 = mul nsw i32 0, %81
  %conv355 = sext i32 %mul354 to i64
  %82 = load i64, i64* %bytes, align 8
  %add356 = add nsw i64 %conv355, %82
  %mul357 = mul nsw i64 0, %add356
  %sub358 = sub nsw i64 %mul357, 1
  %cmp359 = icmp slt i64 %sub358, 0
  br i1 %cmp359, label %cond.true.361, label %cond.false.371

cond.true.361:                                    ; preds = %cond.false.353
  %83 = load i32, i32* %n, align 4
  %mul362 = mul nsw i32 0, %83
  %conv363 = sext i32 %mul362 to i64
  %84 = load i64, i64* %bytes, align 8
  %add364 = add nsw i64 %conv363, %84
  %mul365 = mul nsw i64 0, %add364
  %add366 = add nsw i64 %mul365, 1
  %shl367 = shl i64 %add366, 62
  %sub368 = sub nsw i64 %shl367, 1
  %mul369 = mul nsw i64 %sub368, 2
  %add370 = add nsw i64 %mul369, 1
  br label %cond.end.377

cond.false.371:                                   ; preds = %cond.false.353
  %85 = load i32, i32* %n, align 4
  %mul372 = mul nsw i32 0, %85
  %conv373 = sext i32 %mul372 to i64
  %86 = load i64, i64* %bytes, align 8
  %add374 = add nsw i64 %conv373, %86
  %mul375 = mul nsw i64 0, %add374
  %sub376 = sub nsw i64 %mul375, 1
  br label %cond.end.377

cond.end.377:                                     ; preds = %cond.false.371, %cond.true.361
  %cond378 = phi i64 [ %add370, %cond.true.361 ], [ %sub376, %cond.false.371 ]
  %87 = load i32, i32* %n, align 4
  %conv379 = sext i32 %87 to i64
  %sub380 = sub nsw i64 %cond378, %conv379
  %88 = load i64, i64* %bytes, align 8
  %cmp381 = icmp slt i64 %sub380, %88
  br i1 %cmp381, label %cond.true.423, label %lor.lhs.false.406

cond.false.383:                                   ; preds = %cond.end.305
  %89 = load i64, i64* %bytes, align 8
  %cmp384 = icmp slt i64 %89, 0
  br i1 %cmp384, label %cond.true.386, label %cond.false.392

cond.true.386:                                    ; preds = %cond.false.383
  %90 = load i32, i32* %n, align 4
  %conv387 = sext i32 %90 to i64
  %91 = load i64, i64* %bytes, align 8
  %92 = load i32, i32* %n, align 4
  %conv388 = sext i32 %92 to i64
  %add389 = add nsw i64 %91, %conv388
  %cmp390 = icmp sle i64 %conv387, %add389
  br i1 %cmp390, label %cond.true.423, label %lor.lhs.false.406

cond.false.392:                                   ; preds = %cond.false.383
  %93 = load i32, i32* %n, align 4
  %cmp393 = icmp slt i32 %93, 0
  br i1 %cmp393, label %cond.true.395, label %cond.false.400

cond.true.395:                                    ; preds = %cond.false.392
  %94 = load i64, i64* %bytes, align 8
  %95 = load i64, i64* %bytes, align 8
  %96 = load i32, i32* %n, align 4
  %conv396 = sext i32 %96 to i64
  %add397 = add nsw i64 %95, %conv396
  %cmp398 = icmp sle i64 %94, %add397
  br i1 %cmp398, label %cond.true.423, label %lor.lhs.false.406

cond.false.400:                                   ; preds = %cond.false.392
  %97 = load i64, i64* %bytes, align 8
  %98 = load i32, i32* %n, align 4
  %conv401 = sext i32 %98 to i64
  %add402 = add nsw i64 %97, %conv401
  %99 = load i32, i32* %n, align 4
  %conv403 = sext i32 %99 to i64
  %cmp404 = icmp slt i64 %add402, %conv403
  br i1 %cmp404, label %cond.true.423, label %lor.lhs.false.406

lor.lhs.false.406:                                ; preds = %cond.false.400, %cond.true.395, %cond.true.386, %cond.end.377, %cond.end.347
  %100 = load i64, i64* %bytes, align 8
  %101 = load i32, i32* %n, align 4
  %conv407 = sext i32 %101 to i64
  %add408 = add nsw i64 %100, %conv407
  %mul409 = mul nsw i64 0, %add408
  %sub410 = sub nsw i64 %mul409, 1
  %cmp411 = icmp slt i64 %sub410, 0
  br i1 %cmp411, label %land.lhs.true.413, label %lor.lhs.false.418

land.lhs.true.413:                                ; preds = %lor.lhs.false.406
  %102 = load i64, i64* %bytes, align 8
  %103 = load i32, i32* %n, align 4
  %conv414 = sext i32 %103 to i64
  %add415 = add nsw i64 %102, %conv414
  %cmp416 = icmp slt i64 %add415, -128
  br i1 %cmp416, label %cond.true.423, label %lor.lhs.false.418

lor.lhs.false.418:                                ; preds = %land.lhs.true.413, %lor.lhs.false.406
  %104 = load i64, i64* %bytes, align 8
  %105 = load i32, i32* %n, align 4
  %conv419 = sext i32 %105 to i64
  %add420 = add nsw i64 %104, %conv419
  %cmp421 = icmp slt i64 127, %add420
  br i1 %cmp421, label %cond.true.423, label %cond.false.452

cond.true.423:                                    ; preds = %lor.lhs.false.418, %land.lhs.true.413, %cond.false.400, %cond.true.395, %cond.true.386, %cond.end.377, %cond.end.347
  %106 = load i64, i64* %bytes, align 8
  %conv424 = trunc i64 %106 to i8
  %conv425 = zext i8 %conv424 to i32
  %107 = load i32, i32* %n, align 4
  %conv426 = trunc i32 %107 to i8
  %conv427 = zext i8 %conv426 to i32
  %add428 = add nsw i32 %conv425, %conv427
  %cmp429 = icmp sle i32 %add428, 127
  br i1 %cmp429, label %cond.true.431, label %cond.false.439

cond.true.431:                                    ; preds = %cond.true.423
  %108 = load i64, i64* %bytes, align 8
  %conv432 = trunc i64 %108 to i8
  %conv433 = zext i8 %conv432 to i32
  %109 = load i32, i32* %n, align 4
  %conv434 = trunc i32 %109 to i8
  %conv435 = zext i8 %conv434 to i32
  %add436 = add nsw i32 %conv433, %conv435
  %conv437 = trunc i32 %add436 to i8
  %conv438 = sext i8 %conv437 to i32
  br label %cond.end.449

cond.false.439:                                   ; preds = %cond.true.423
  %110 = load i64, i64* %bytes, align 8
  %conv440 = trunc i64 %110 to i8
  %conv441 = zext i8 %conv440 to i32
  %111 = load i32, i32* %n, align 4
  %conv442 = trunc i32 %111 to i8
  %conv443 = zext i8 %conv442 to i32
  %add444 = add nsw i32 %conv441, %conv443
  %sub445 = sub nsw i32 %add444, -128
  %conv446 = trunc i32 %sub445 to i8
  %conv447 = sext i8 %conv446 to i32
  %add448 = add nsw i32 %conv447, -128
  br label %cond.end.449

cond.end.449:                                     ; preds = %cond.false.439, %cond.true.431
  %cond450 = phi i32 [ %conv438, %cond.true.431 ], [ %add448, %cond.false.439 ]
  %conv451 = sext i32 %cond450 to i64
  store i64 %conv451, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.452:                                   ; preds = %lor.lhs.false.418
  %112 = load i64, i64* %bytes, align 8
  %conv453 = trunc i64 %112 to i8
  %conv454 = zext i8 %conv453 to i32
  %113 = load i32, i32* %n, align 4
  %conv455 = trunc i32 %113 to i8
  %conv456 = zext i8 %conv455 to i32
  %add457 = add nsw i32 %conv454, %conv456
  %cmp458 = icmp sle i32 %add457, 127
  br i1 %cmp458, label %cond.true.460, label %cond.false.468

cond.true.460:                                    ; preds = %cond.false.452
  %114 = load i64, i64* %bytes, align 8
  %conv461 = trunc i64 %114 to i8
  %conv462 = zext i8 %conv461 to i32
  %115 = load i32, i32* %n, align 4
  %conv463 = trunc i32 %115 to i8
  %conv464 = zext i8 %conv463 to i32
  %add465 = add nsw i32 %conv462, %conv464
  %conv466 = trunc i32 %add465 to i8
  %conv467 = sext i8 %conv466 to i32
  br label %cond.end.478

cond.false.468:                                   ; preds = %cond.false.452
  %116 = load i64, i64* %bytes, align 8
  %conv469 = trunc i64 %116 to i8
  %conv470 = zext i8 %conv469 to i32
  %117 = load i32, i32* %n, align 4
  %conv471 = trunc i32 %117 to i8
  %conv472 = zext i8 %conv471 to i32
  %add473 = add nsw i32 %conv470, %conv472
  %sub474 = sub nsw i32 %add473, -128
  %conv475 = trunc i32 %sub474 to i8
  %conv476 = sext i8 %conv475 to i32
  %add477 = add nsw i32 %conv476, -128
  br label %cond.end.478

cond.end.478:                                     ; preds = %cond.false.468, %cond.true.460
  %cond479 = phi i32 [ %conv467, %cond.true.460 ], [ %add477, %cond.false.468 ]
  %conv480 = sext i32 %cond479 to i64
  store i64 %conv480, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.481:                                   ; preds = %for.body
  br i1 false, label %cond.true.482, label %cond.false.970

cond.true.482:                                    ; preds = %cond.false.481
  br i1 false, label %cond.true.483, label %cond.false.759

cond.true.483:                                    ; preds = %cond.true.482
  %118 = load i32, i32* %n, align 4
  %conv484 = trunc i32 %118 to i16
  %conv485 = sext i16 %conv484 to i32
  %mul486 = mul nsw i32 0, %conv485
  %119 = load i64, i64* %bytes, align 8
  %conv487 = trunc i64 %119 to i16
  %conv488 = sext i16 %conv487 to i32
  %add489 = add nsw i32 %mul486, %conv488
  %mul490 = mul nsw i32 0, %add489
  %sub491 = sub nsw i32 %mul490, 1
  %cmp492 = icmp slt i32 %sub491, 0
  br i1 %cmp492, label %cond.true.494, label %cond.false.520

cond.true.494:                                    ; preds = %cond.true.483
  %120 = load i32, i32* %n, align 4
  %conv495 = trunc i32 %120 to i16
  %conv496 = sext i16 %conv495 to i32
  %mul497 = mul nsw i32 0, %conv496
  %121 = load i64, i64* %bytes, align 8
  %conv498 = trunc i64 %121 to i16
  %conv499 = sext i16 %conv498 to i32
  %add500 = add nsw i32 %mul497, %conv499
  %mul501 = mul nsw i32 0, %add500
  %add502 = add nsw i32 %mul501, 0
  %neg503 = xor i32 %add502, -1
  %cmp504 = icmp eq i32 %neg503, -1
  %conv505 = zext i1 %cmp504 to i32
  %sub506 = sub nsw i32 0, %conv505
  %122 = load i32, i32* %n, align 4
  %conv507 = trunc i32 %122 to i16
  %conv508 = sext i16 %conv507 to i32
  %mul509 = mul nsw i32 0, %conv508
  %123 = load i64, i64* %bytes, align 8
  %conv510 = trunc i64 %123 to i16
  %conv511 = sext i16 %conv510 to i32
  %add512 = add nsw i32 %mul509, %conv511
  %mul513 = mul nsw i32 0, %add512
  %add514 = add nsw i32 %mul513, 1
  %shl515 = shl i32 %add514, 30
  %sub516 = sub nsw i32 %shl515, 1
  %mul517 = mul nsw i32 %sub516, 2
  %add518 = add nsw i32 %mul517, 1
  %sub519 = sub nsw i32 %sub506, %add518
  br label %cond.end.529

cond.false.520:                                   ; preds = %cond.true.483
  %124 = load i32, i32* %n, align 4
  %conv521 = trunc i32 %124 to i16
  %conv522 = sext i16 %conv521 to i32
  %mul523 = mul nsw i32 0, %conv522
  %125 = load i64, i64* %bytes, align 8
  %conv524 = trunc i64 %125 to i16
  %conv525 = sext i16 %conv524 to i32
  %add526 = add nsw i32 %mul523, %conv525
  %mul527 = mul nsw i32 0, %add526
  %add528 = add nsw i32 %mul527, 0
  br label %cond.end.529

cond.end.529:                                     ; preds = %cond.false.520, %cond.true.494
  %cond530 = phi i32 [ %sub519, %cond.true.494 ], [ %add528, %cond.false.520 ]
  %cmp531 = icmp slt i32 %cond530, 0
  br i1 %cmp531, label %cond.true.533, label %cond.false.635

cond.true.533:                                    ; preds = %cond.end.529
  %126 = load i32, i32* %n, align 4
  %conv534 = trunc i32 %126 to i16
  %conv535 = sext i16 %conv534 to i32
  %cmp536 = icmp slt i32 %conv535, 0
  br i1 %cmp536, label %cond.true.538, label %cond.false.593

cond.true.538:                                    ; preds = %cond.true.533
  %127 = load i64, i64* %bytes, align 8
  %conv539 = trunc i64 %127 to i16
  %conv540 = sext i16 %conv539 to i32
  %128 = load i32, i32* %n, align 4
  %conv541 = trunc i32 %128 to i16
  %conv542 = sext i16 %conv541 to i32
  %mul543 = mul nsw i32 0, %conv542
  %129 = load i64, i64* %bytes, align 8
  %conv544 = trunc i64 %129 to i16
  %conv545 = sext i16 %conv544 to i32
  %add546 = add nsw i32 %mul543, %conv545
  %mul547 = mul nsw i32 0, %add546
  %sub548 = sub nsw i32 %mul547, 1
  %cmp549 = icmp slt i32 %sub548, 0
  br i1 %cmp549, label %cond.true.551, label %cond.false.577

cond.true.551:                                    ; preds = %cond.true.538
  %130 = load i32, i32* %n, align 4
  %conv552 = trunc i32 %130 to i16
  %conv553 = sext i16 %conv552 to i32
  %mul554 = mul nsw i32 0, %conv553
  %131 = load i64, i64* %bytes, align 8
  %conv555 = trunc i64 %131 to i16
  %conv556 = sext i16 %conv555 to i32
  %add557 = add nsw i32 %mul554, %conv556
  %mul558 = mul nsw i32 0, %add557
  %add559 = add nsw i32 %mul558, 0
  %neg560 = xor i32 %add559, -1
  %cmp561 = icmp eq i32 %neg560, -1
  %conv562 = zext i1 %cmp561 to i32
  %sub563 = sub nsw i32 0, %conv562
  %132 = load i32, i32* %n, align 4
  %conv564 = trunc i32 %132 to i16
  %conv565 = sext i16 %conv564 to i32
  %mul566 = mul nsw i32 0, %conv565
  %133 = load i64, i64* %bytes, align 8
  %conv567 = trunc i64 %133 to i16
  %conv568 = sext i16 %conv567 to i32
  %add569 = add nsw i32 %mul566, %conv568
  %mul570 = mul nsw i32 0, %add569
  %add571 = add nsw i32 %mul570, 1
  %shl572 = shl i32 %add571, 30
  %sub573 = sub nsw i32 %shl572, 1
  %mul574 = mul nsw i32 %sub573, 2
  %add575 = add nsw i32 %mul574, 1
  %sub576 = sub nsw i32 %sub563, %add575
  br label %cond.end.586

cond.false.577:                                   ; preds = %cond.true.538
  %134 = load i32, i32* %n, align 4
  %conv578 = trunc i32 %134 to i16
  %conv579 = sext i16 %conv578 to i32
  %mul580 = mul nsw i32 0, %conv579
  %135 = load i64, i64* %bytes, align 8
  %conv581 = trunc i64 %135 to i16
  %conv582 = sext i16 %conv581 to i32
  %add583 = add nsw i32 %mul580, %conv582
  %mul584 = mul nsw i32 0, %add583
  %add585 = add nsw i32 %mul584, 0
  br label %cond.end.586

cond.end.586:                                     ; preds = %cond.false.577, %cond.true.551
  %cond587 = phi i32 [ %sub576, %cond.true.551 ], [ %add585, %cond.false.577 ]
  %136 = load i32, i32* %n, align 4
  %conv588 = trunc i32 %136 to i16
  %conv589 = sext i16 %conv588 to i32
  %sub590 = sub nsw i32 %cond587, %conv589
  %cmp591 = icmp slt i32 %conv540, %sub590
  br i1 %cmp591, label %cond.true.701, label %lor.lhs.false.675

cond.false.593:                                   ; preds = %cond.true.533
  %137 = load i32, i32* %n, align 4
  %conv594 = trunc i32 %137 to i16
  %conv595 = sext i16 %conv594 to i32
  %mul596 = mul nsw i32 0, %conv595
  %138 = load i64, i64* %bytes, align 8
  %conv597 = trunc i64 %138 to i16
  %conv598 = sext i16 %conv597 to i32
  %add599 = add nsw i32 %mul596, %conv598
  %mul600 = mul nsw i32 0, %add599
  %sub601 = sub nsw i32 %mul600, 1
  %cmp602 = icmp slt i32 %sub601, 0
  br i1 %cmp602, label %cond.true.604, label %cond.false.617

cond.true.604:                                    ; preds = %cond.false.593
  %139 = load i32, i32* %n, align 4
  %conv605 = trunc i32 %139 to i16
  %conv606 = sext i16 %conv605 to i32
  %mul607 = mul nsw i32 0, %conv606
  %140 = load i64, i64* %bytes, align 8
  %conv608 = trunc i64 %140 to i16
  %conv609 = sext i16 %conv608 to i32
  %add610 = add nsw i32 %mul607, %conv609
  %mul611 = mul nsw i32 0, %add610
  %add612 = add nsw i32 %mul611, 1
  %shl613 = shl i32 %add612, 30
  %sub614 = sub nsw i32 %shl613, 1
  %mul615 = mul nsw i32 %sub614, 2
  %add616 = add nsw i32 %mul615, 1
  br label %cond.end.626

cond.false.617:                                   ; preds = %cond.false.593
  %141 = load i32, i32* %n, align 4
  %conv618 = trunc i32 %141 to i16
  %conv619 = sext i16 %conv618 to i32
  %mul620 = mul nsw i32 0, %conv619
  %142 = load i64, i64* %bytes, align 8
  %conv621 = trunc i64 %142 to i16
  %conv622 = sext i16 %conv621 to i32
  %add623 = add nsw i32 %mul620, %conv622
  %mul624 = mul nsw i32 0, %add623
  %sub625 = sub nsw i32 %mul624, 1
  br label %cond.end.626

cond.end.626:                                     ; preds = %cond.false.617, %cond.true.604
  %cond627 = phi i32 [ %add616, %cond.true.604 ], [ %sub625, %cond.false.617 ]
  %143 = load i32, i32* %n, align 4
  %conv628 = trunc i32 %143 to i16
  %conv629 = sext i16 %conv628 to i32
  %sub630 = sub nsw i32 %cond627, %conv629
  %144 = load i64, i64* %bytes, align 8
  %conv631 = trunc i64 %144 to i16
  %conv632 = sext i16 %conv631 to i32
  %cmp633 = icmp slt i32 %sub630, %conv632
  br i1 %cmp633, label %cond.true.701, label %lor.lhs.false.675

cond.false.635:                                   ; preds = %cond.end.529
  %145 = load i64, i64* %bytes, align 8
  %conv636 = trunc i64 %145 to i16
  %conv637 = sext i16 %conv636 to i32
  %cmp638 = icmp slt i32 %conv637, 0
  br i1 %cmp638, label %cond.true.640, label %cond.false.650

cond.true.640:                                    ; preds = %cond.false.635
  %146 = load i32, i32* %n, align 4
  %conv641 = trunc i32 %146 to i16
  %conv642 = sext i16 %conv641 to i32
  %147 = load i64, i64* %bytes, align 8
  %conv643 = trunc i64 %147 to i16
  %conv644 = sext i16 %conv643 to i32
  %148 = load i32, i32* %n, align 4
  %conv645 = trunc i32 %148 to i16
  %conv646 = sext i16 %conv645 to i32
  %add647 = add nsw i32 %conv644, %conv646
  %cmp648 = icmp sle i32 %conv642, %add647
  br i1 %cmp648, label %cond.true.701, label %lor.lhs.false.675

cond.false.650:                                   ; preds = %cond.false.635
  %149 = load i32, i32* %n, align 4
  %conv651 = trunc i32 %149 to i16
  %conv652 = sext i16 %conv651 to i32
  %cmp653 = icmp slt i32 %conv652, 0
  br i1 %cmp653, label %cond.true.655, label %cond.false.665

cond.true.655:                                    ; preds = %cond.false.650
  %150 = load i64, i64* %bytes, align 8
  %conv656 = trunc i64 %150 to i16
  %conv657 = sext i16 %conv656 to i32
  %151 = load i64, i64* %bytes, align 8
  %conv658 = trunc i64 %151 to i16
  %conv659 = sext i16 %conv658 to i32
  %152 = load i32, i32* %n, align 4
  %conv660 = trunc i32 %152 to i16
  %conv661 = sext i16 %conv660 to i32
  %add662 = add nsw i32 %conv659, %conv661
  %cmp663 = icmp sle i32 %conv657, %add662
  br i1 %cmp663, label %cond.true.701, label %lor.lhs.false.675

cond.false.665:                                   ; preds = %cond.false.650
  %153 = load i64, i64* %bytes, align 8
  %conv666 = trunc i64 %153 to i16
  %conv667 = sext i16 %conv666 to i32
  %154 = load i32, i32* %n, align 4
  %conv668 = trunc i32 %154 to i16
  %conv669 = sext i16 %conv668 to i32
  %add670 = add nsw i32 %conv667, %conv669
  %155 = load i32, i32* %n, align 4
  %conv671 = trunc i32 %155 to i16
  %conv672 = sext i16 %conv671 to i32
  %cmp673 = icmp slt i32 %add670, %conv672
  br i1 %cmp673, label %cond.true.701, label %lor.lhs.false.675

lor.lhs.false.675:                                ; preds = %cond.false.665, %cond.true.655, %cond.true.640, %cond.end.626, %cond.end.586
  %156 = load i64, i64* %bytes, align 8
  %conv676 = trunc i64 %156 to i16
  %conv677 = sext i16 %conv676 to i32
  %157 = load i32, i32* %n, align 4
  %conv678 = trunc i32 %157 to i16
  %conv679 = sext i16 %conv678 to i32
  %add680 = add nsw i32 %conv677, %conv679
  %mul681 = mul nsw i32 0, %add680
  %sub682 = sub nsw i32 %mul681, 1
  %cmp683 = icmp slt i32 %sub682, 0
  br i1 %cmp683, label %land.lhs.true.685, label %lor.lhs.false.693

land.lhs.true.685:                                ; preds = %lor.lhs.false.675
  %158 = load i64, i64* %bytes, align 8
  %conv686 = trunc i64 %158 to i16
  %conv687 = sext i16 %conv686 to i32
  %159 = load i32, i32* %n, align 4
  %conv688 = trunc i32 %159 to i16
  %conv689 = sext i16 %conv688 to i32
  %add690 = add nsw i32 %conv687, %conv689
  %cmp691 = icmp slt i32 %add690, -32768
  br i1 %cmp691, label %cond.true.701, label %lor.lhs.false.693

lor.lhs.false.693:                                ; preds = %land.lhs.true.685, %lor.lhs.false.675
  %160 = load i64, i64* %bytes, align 8
  %conv694 = trunc i64 %160 to i16
  %conv695 = sext i16 %conv694 to i32
  %161 = load i32, i32* %n, align 4
  %conv696 = trunc i32 %161 to i16
  %conv697 = sext i16 %conv696 to i32
  %add698 = add nsw i32 %conv695, %conv697
  %cmp699 = icmp slt i32 32767, %add698
  br i1 %cmp699, label %cond.true.701, label %cond.false.730

cond.true.701:                                    ; preds = %lor.lhs.false.693, %land.lhs.true.685, %cond.false.665, %cond.true.655, %cond.true.640, %cond.end.626, %cond.end.586
  %162 = load i64, i64* %bytes, align 8
  %conv702 = trunc i64 %162 to i16
  %conv703 = zext i16 %conv702 to i32
  %163 = load i32, i32* %n, align 4
  %conv704 = trunc i32 %163 to i16
  %conv705 = zext i16 %conv704 to i32
  %add706 = add nsw i32 %conv703, %conv705
  %cmp707 = icmp sle i32 %add706, 32767
  br i1 %cmp707, label %cond.true.709, label %cond.false.717

cond.true.709:                                    ; preds = %cond.true.701
  %164 = load i64, i64* %bytes, align 8
  %conv710 = trunc i64 %164 to i16
  %conv711 = zext i16 %conv710 to i32
  %165 = load i32, i32* %n, align 4
  %conv712 = trunc i32 %165 to i16
  %conv713 = zext i16 %conv712 to i32
  %add714 = add nsw i32 %conv711, %conv713
  %conv715 = trunc i32 %add714 to i16
  %conv716 = sext i16 %conv715 to i32
  br label %cond.end.727

cond.false.717:                                   ; preds = %cond.true.701
  %166 = load i64, i64* %bytes, align 8
  %conv718 = trunc i64 %166 to i16
  %conv719 = zext i16 %conv718 to i32
  %167 = load i32, i32* %n, align 4
  %conv720 = trunc i32 %167 to i16
  %conv721 = zext i16 %conv720 to i32
  %add722 = add nsw i32 %conv719, %conv721
  %sub723 = sub nsw i32 %add722, -32768
  %conv724 = trunc i32 %sub723 to i16
  %conv725 = sext i16 %conv724 to i32
  %add726 = add nsw i32 %conv725, -32768
  br label %cond.end.727

cond.end.727:                                     ; preds = %cond.false.717, %cond.true.709
  %cond728 = phi i32 [ %conv716, %cond.true.709 ], [ %add726, %cond.false.717 ]
  %conv729 = sext i32 %cond728 to i64
  store i64 %conv729, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.730:                                   ; preds = %lor.lhs.false.693
  %168 = load i64, i64* %bytes, align 8
  %conv731 = trunc i64 %168 to i16
  %conv732 = zext i16 %conv731 to i32
  %169 = load i32, i32* %n, align 4
  %conv733 = trunc i32 %169 to i16
  %conv734 = zext i16 %conv733 to i32
  %add735 = add nsw i32 %conv732, %conv734
  %cmp736 = icmp sle i32 %add735, 32767
  br i1 %cmp736, label %cond.true.738, label %cond.false.746

cond.true.738:                                    ; preds = %cond.false.730
  %170 = load i64, i64* %bytes, align 8
  %conv739 = trunc i64 %170 to i16
  %conv740 = zext i16 %conv739 to i32
  %171 = load i32, i32* %n, align 4
  %conv741 = trunc i32 %171 to i16
  %conv742 = zext i16 %conv741 to i32
  %add743 = add nsw i32 %conv740, %conv742
  %conv744 = trunc i32 %add743 to i16
  %conv745 = sext i16 %conv744 to i32
  br label %cond.end.756

cond.false.746:                                   ; preds = %cond.false.730
  %172 = load i64, i64* %bytes, align 8
  %conv747 = trunc i64 %172 to i16
  %conv748 = zext i16 %conv747 to i32
  %173 = load i32, i32* %n, align 4
  %conv749 = trunc i32 %173 to i16
  %conv750 = zext i16 %conv749 to i32
  %add751 = add nsw i32 %conv748, %conv750
  %sub752 = sub nsw i32 %add751, -32768
  %conv753 = trunc i32 %sub752 to i16
  %conv754 = sext i16 %conv753 to i32
  %add755 = add nsw i32 %conv754, -32768
  br label %cond.end.756

cond.end.756:                                     ; preds = %cond.false.746, %cond.true.738
  %cond757 = phi i32 [ %conv745, %cond.true.738 ], [ %add755, %cond.false.746 ]
  %conv758 = sext i32 %cond757 to i64
  store i64 %conv758, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.759:                                   ; preds = %cond.true.482
  %174 = load i32, i32* %n, align 4
  %mul760 = mul nsw i32 0, %174
  %conv761 = sext i32 %mul760 to i64
  %175 = load i64, i64* %bytes, align 8
  %add762 = add nsw i64 %conv761, %175
  %mul763 = mul nsw i64 0, %add762
  %sub764 = sub nsw i64 %mul763, 1
  %cmp765 = icmp slt i64 %sub764, 0
  br i1 %cmp765, label %cond.true.767, label %cond.false.788

cond.true.767:                                    ; preds = %cond.false.759
  %176 = load i32, i32* %n, align 4
  %mul768 = mul nsw i32 0, %176
  %conv769 = sext i32 %mul768 to i64
  %177 = load i64, i64* %bytes, align 8
  %add770 = add nsw i64 %conv769, %177
  %mul771 = mul nsw i64 0, %add770
  %add772 = add nsw i64 %mul771, 0
  %neg773 = xor i64 %add772, -1
  %cmp774 = icmp eq i64 %neg773, -1
  %conv775 = zext i1 %cmp774 to i32
  %sub776 = sub nsw i32 0, %conv775
  %conv777 = sext i32 %sub776 to i64
  %178 = load i32, i32* %n, align 4
  %mul778 = mul nsw i32 0, %178
  %conv779 = sext i32 %mul778 to i64
  %179 = load i64, i64* %bytes, align 8
  %add780 = add nsw i64 %conv779, %179
  %mul781 = mul nsw i64 0, %add780
  %add782 = add nsw i64 %mul781, 1
  %shl783 = shl i64 %add782, 62
  %sub784 = sub nsw i64 %shl783, 1
  %mul785 = mul nsw i64 %sub784, 2
  %add786 = add nsw i64 %mul785, 1
  %sub787 = sub nsw i64 %conv777, %add786
  br label %cond.end.794

cond.false.788:                                   ; preds = %cond.false.759
  %180 = load i32, i32* %n, align 4
  %mul789 = mul nsw i32 0, %180
  %conv790 = sext i32 %mul789 to i64
  %181 = load i64, i64* %bytes, align 8
  %add791 = add nsw i64 %conv790, %181
  %mul792 = mul nsw i64 0, %add791
  %add793 = add nsw i64 %mul792, 0
  br label %cond.end.794

cond.end.794:                                     ; preds = %cond.false.788, %cond.true.767
  %cond795 = phi i64 [ %sub787, %cond.true.767 ], [ %add793, %cond.false.788 ]
  %cmp796 = icmp slt i64 %cond795, 0
  br i1 %cmp796, label %cond.true.798, label %cond.false.872

cond.true.798:                                    ; preds = %cond.end.794
  %182 = load i32, i32* %n, align 4
  %cmp799 = icmp slt i32 %182, 0
  br i1 %cmp799, label %cond.true.801, label %cond.false.842

cond.true.801:                                    ; preds = %cond.true.798
  %183 = load i64, i64* %bytes, align 8
  %184 = load i32, i32* %n, align 4
  %mul802 = mul nsw i32 0, %184
  %conv803 = sext i32 %mul802 to i64
  %185 = load i64, i64* %bytes, align 8
  %add804 = add nsw i64 %conv803, %185
  %mul805 = mul nsw i64 0, %add804
  %sub806 = sub nsw i64 %mul805, 1
  %cmp807 = icmp slt i64 %sub806, 0
  br i1 %cmp807, label %cond.true.809, label %cond.false.830

cond.true.809:                                    ; preds = %cond.true.801
  %186 = load i32, i32* %n, align 4
  %mul810 = mul nsw i32 0, %186
  %conv811 = sext i32 %mul810 to i64
  %187 = load i64, i64* %bytes, align 8
  %add812 = add nsw i64 %conv811, %187
  %mul813 = mul nsw i64 0, %add812
  %add814 = add nsw i64 %mul813, 0
  %neg815 = xor i64 %add814, -1
  %cmp816 = icmp eq i64 %neg815, -1
  %conv817 = zext i1 %cmp816 to i32
  %sub818 = sub nsw i32 0, %conv817
  %conv819 = sext i32 %sub818 to i64
  %188 = load i32, i32* %n, align 4
  %mul820 = mul nsw i32 0, %188
  %conv821 = sext i32 %mul820 to i64
  %189 = load i64, i64* %bytes, align 8
  %add822 = add nsw i64 %conv821, %189
  %mul823 = mul nsw i64 0, %add822
  %add824 = add nsw i64 %mul823, 1
  %shl825 = shl i64 %add824, 62
  %sub826 = sub nsw i64 %shl825, 1
  %mul827 = mul nsw i64 %sub826, 2
  %add828 = add nsw i64 %mul827, 1
  %sub829 = sub nsw i64 %conv819, %add828
  br label %cond.end.836

cond.false.830:                                   ; preds = %cond.true.801
  %190 = load i32, i32* %n, align 4
  %mul831 = mul nsw i32 0, %190
  %conv832 = sext i32 %mul831 to i64
  %191 = load i64, i64* %bytes, align 8
  %add833 = add nsw i64 %conv832, %191
  %mul834 = mul nsw i64 0, %add833
  %add835 = add nsw i64 %mul834, 0
  br label %cond.end.836

cond.end.836:                                     ; preds = %cond.false.830, %cond.true.809
  %cond837 = phi i64 [ %sub829, %cond.true.809 ], [ %add835, %cond.false.830 ]
  %192 = load i32, i32* %n, align 4
  %conv838 = sext i32 %192 to i64
  %sub839 = sub nsw i64 %cond837, %conv838
  %cmp840 = icmp slt i64 %183, %sub839
  br i1 %cmp840, label %cond.true.912, label %lor.lhs.false.895

cond.false.842:                                   ; preds = %cond.true.798
  %193 = load i32, i32* %n, align 4
  %mul843 = mul nsw i32 0, %193
  %conv844 = sext i32 %mul843 to i64
  %194 = load i64, i64* %bytes, align 8
  %add845 = add nsw i64 %conv844, %194
  %mul846 = mul nsw i64 0, %add845
  %sub847 = sub nsw i64 %mul846, 1
  %cmp848 = icmp slt i64 %sub847, 0
  br i1 %cmp848, label %cond.true.850, label %cond.false.860

cond.true.850:                                    ; preds = %cond.false.842
  %195 = load i32, i32* %n, align 4
  %mul851 = mul nsw i32 0, %195
  %conv852 = sext i32 %mul851 to i64
  %196 = load i64, i64* %bytes, align 8
  %add853 = add nsw i64 %conv852, %196
  %mul854 = mul nsw i64 0, %add853
  %add855 = add nsw i64 %mul854, 1
  %shl856 = shl i64 %add855, 62
  %sub857 = sub nsw i64 %shl856, 1
  %mul858 = mul nsw i64 %sub857, 2
  %add859 = add nsw i64 %mul858, 1
  br label %cond.end.866

cond.false.860:                                   ; preds = %cond.false.842
  %197 = load i32, i32* %n, align 4
  %mul861 = mul nsw i32 0, %197
  %conv862 = sext i32 %mul861 to i64
  %198 = load i64, i64* %bytes, align 8
  %add863 = add nsw i64 %conv862, %198
  %mul864 = mul nsw i64 0, %add863
  %sub865 = sub nsw i64 %mul864, 1
  br label %cond.end.866

cond.end.866:                                     ; preds = %cond.false.860, %cond.true.850
  %cond867 = phi i64 [ %add859, %cond.true.850 ], [ %sub865, %cond.false.860 ]
  %199 = load i32, i32* %n, align 4
  %conv868 = sext i32 %199 to i64
  %sub869 = sub nsw i64 %cond867, %conv868
  %200 = load i64, i64* %bytes, align 8
  %cmp870 = icmp slt i64 %sub869, %200
  br i1 %cmp870, label %cond.true.912, label %lor.lhs.false.895

cond.false.872:                                   ; preds = %cond.end.794
  %201 = load i64, i64* %bytes, align 8
  %cmp873 = icmp slt i64 %201, 0
  br i1 %cmp873, label %cond.true.875, label %cond.false.881

cond.true.875:                                    ; preds = %cond.false.872
  %202 = load i32, i32* %n, align 4
  %conv876 = sext i32 %202 to i64
  %203 = load i64, i64* %bytes, align 8
  %204 = load i32, i32* %n, align 4
  %conv877 = sext i32 %204 to i64
  %add878 = add nsw i64 %203, %conv877
  %cmp879 = icmp sle i64 %conv876, %add878
  br i1 %cmp879, label %cond.true.912, label %lor.lhs.false.895

cond.false.881:                                   ; preds = %cond.false.872
  %205 = load i32, i32* %n, align 4
  %cmp882 = icmp slt i32 %205, 0
  br i1 %cmp882, label %cond.true.884, label %cond.false.889

cond.true.884:                                    ; preds = %cond.false.881
  %206 = load i64, i64* %bytes, align 8
  %207 = load i64, i64* %bytes, align 8
  %208 = load i32, i32* %n, align 4
  %conv885 = sext i32 %208 to i64
  %add886 = add nsw i64 %207, %conv885
  %cmp887 = icmp sle i64 %206, %add886
  br i1 %cmp887, label %cond.true.912, label %lor.lhs.false.895

cond.false.889:                                   ; preds = %cond.false.881
  %209 = load i64, i64* %bytes, align 8
  %210 = load i32, i32* %n, align 4
  %conv890 = sext i32 %210 to i64
  %add891 = add nsw i64 %209, %conv890
  %211 = load i32, i32* %n, align 4
  %conv892 = sext i32 %211 to i64
  %cmp893 = icmp slt i64 %add891, %conv892
  br i1 %cmp893, label %cond.true.912, label %lor.lhs.false.895

lor.lhs.false.895:                                ; preds = %cond.false.889, %cond.true.884, %cond.true.875, %cond.end.866, %cond.end.836
  %212 = load i64, i64* %bytes, align 8
  %213 = load i32, i32* %n, align 4
  %conv896 = sext i32 %213 to i64
  %add897 = add nsw i64 %212, %conv896
  %mul898 = mul nsw i64 0, %add897
  %sub899 = sub nsw i64 %mul898, 1
  %cmp900 = icmp slt i64 %sub899, 0
  br i1 %cmp900, label %land.lhs.true.902, label %lor.lhs.false.907

land.lhs.true.902:                                ; preds = %lor.lhs.false.895
  %214 = load i64, i64* %bytes, align 8
  %215 = load i32, i32* %n, align 4
  %conv903 = sext i32 %215 to i64
  %add904 = add nsw i64 %214, %conv903
  %cmp905 = icmp slt i64 %add904, -32768
  br i1 %cmp905, label %cond.true.912, label %lor.lhs.false.907

lor.lhs.false.907:                                ; preds = %land.lhs.true.902, %lor.lhs.false.895
  %216 = load i64, i64* %bytes, align 8
  %217 = load i32, i32* %n, align 4
  %conv908 = sext i32 %217 to i64
  %add909 = add nsw i64 %216, %conv908
  %cmp910 = icmp slt i64 32767, %add909
  br i1 %cmp910, label %cond.true.912, label %cond.false.941

cond.true.912:                                    ; preds = %lor.lhs.false.907, %land.lhs.true.902, %cond.false.889, %cond.true.884, %cond.true.875, %cond.end.866, %cond.end.836
  %218 = load i64, i64* %bytes, align 8
  %conv913 = trunc i64 %218 to i16
  %conv914 = zext i16 %conv913 to i32
  %219 = load i32, i32* %n, align 4
  %conv915 = trunc i32 %219 to i16
  %conv916 = zext i16 %conv915 to i32
  %add917 = add nsw i32 %conv914, %conv916
  %cmp918 = icmp sle i32 %add917, 32767
  br i1 %cmp918, label %cond.true.920, label %cond.false.928

cond.true.920:                                    ; preds = %cond.true.912
  %220 = load i64, i64* %bytes, align 8
  %conv921 = trunc i64 %220 to i16
  %conv922 = zext i16 %conv921 to i32
  %221 = load i32, i32* %n, align 4
  %conv923 = trunc i32 %221 to i16
  %conv924 = zext i16 %conv923 to i32
  %add925 = add nsw i32 %conv922, %conv924
  %conv926 = trunc i32 %add925 to i16
  %conv927 = sext i16 %conv926 to i32
  br label %cond.end.938

cond.false.928:                                   ; preds = %cond.true.912
  %222 = load i64, i64* %bytes, align 8
  %conv929 = trunc i64 %222 to i16
  %conv930 = zext i16 %conv929 to i32
  %223 = load i32, i32* %n, align 4
  %conv931 = trunc i32 %223 to i16
  %conv932 = zext i16 %conv931 to i32
  %add933 = add nsw i32 %conv930, %conv932
  %sub934 = sub nsw i32 %add933, -32768
  %conv935 = trunc i32 %sub934 to i16
  %conv936 = sext i16 %conv935 to i32
  %add937 = add nsw i32 %conv936, -32768
  br label %cond.end.938

cond.end.938:                                     ; preds = %cond.false.928, %cond.true.920
  %cond939 = phi i32 [ %conv927, %cond.true.920 ], [ %add937, %cond.false.928 ]
  %conv940 = sext i32 %cond939 to i64
  store i64 %conv940, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.941:                                   ; preds = %lor.lhs.false.907
  %224 = load i64, i64* %bytes, align 8
  %conv942 = trunc i64 %224 to i16
  %conv943 = zext i16 %conv942 to i32
  %225 = load i32, i32* %n, align 4
  %conv944 = trunc i32 %225 to i16
  %conv945 = zext i16 %conv944 to i32
  %add946 = add nsw i32 %conv943, %conv945
  %cmp947 = icmp sle i32 %add946, 32767
  br i1 %cmp947, label %cond.true.949, label %cond.false.957

cond.true.949:                                    ; preds = %cond.false.941
  %226 = load i64, i64* %bytes, align 8
  %conv950 = trunc i64 %226 to i16
  %conv951 = zext i16 %conv950 to i32
  %227 = load i32, i32* %n, align 4
  %conv952 = trunc i32 %227 to i16
  %conv953 = zext i16 %conv952 to i32
  %add954 = add nsw i32 %conv951, %conv953
  %conv955 = trunc i32 %add954 to i16
  %conv956 = sext i16 %conv955 to i32
  br label %cond.end.967

cond.false.957:                                   ; preds = %cond.false.941
  %228 = load i64, i64* %bytes, align 8
  %conv958 = trunc i64 %228 to i16
  %conv959 = zext i16 %conv958 to i32
  %229 = load i32, i32* %n, align 4
  %conv960 = trunc i32 %229 to i16
  %conv961 = zext i16 %conv960 to i32
  %add962 = add nsw i32 %conv959, %conv961
  %sub963 = sub nsw i32 %add962, -32768
  %conv964 = trunc i32 %sub963 to i16
  %conv965 = sext i16 %conv964 to i32
  %add966 = add nsw i32 %conv965, -32768
  br label %cond.end.967

cond.end.967:                                     ; preds = %cond.false.957, %cond.true.949
  %cond968 = phi i32 [ %conv956, %cond.true.949 ], [ %add966, %cond.false.957 ]
  %conv969 = sext i32 %cond968 to i64
  store i64 %conv969, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.970:                                   ; preds = %cond.false.481
  br i1 false, label %cond.true.971, label %cond.false.1340

cond.true.971:                                    ; preds = %cond.false.970
  br i1 false, label %cond.true.972, label %cond.false.1155

cond.true.972:                                    ; preds = %cond.true.971
  %230 = load i32, i32* %n, align 4
  %mul973 = mul nsw i32 0, %230
  %231 = load i64, i64* %bytes, align 8
  %conv974 = trunc i64 %231 to i32
  %add975 = add nsw i32 %mul973, %conv974
  %mul976 = mul nsw i32 0, %add975
  %sub977 = sub nsw i32 %mul976, 1
  %cmp978 = icmp slt i32 %sub977, 0
  br i1 %cmp978, label %cond.true.980, label %cond.false.1000

cond.true.980:                                    ; preds = %cond.true.972
  %232 = load i32, i32* %n, align 4
  %mul981 = mul nsw i32 0, %232
  %233 = load i64, i64* %bytes, align 8
  %conv982 = trunc i64 %233 to i32
  %add983 = add nsw i32 %mul981, %conv982
  %mul984 = mul nsw i32 0, %add983
  %add985 = add nsw i32 %mul984, 0
  %neg986 = xor i32 %add985, -1
  %cmp987 = icmp eq i32 %neg986, -1
  %conv988 = zext i1 %cmp987 to i32
  %sub989 = sub nsw i32 0, %conv988
  %234 = load i32, i32* %n, align 4
  %mul990 = mul nsw i32 0, %234
  %235 = load i64, i64* %bytes, align 8
  %conv991 = trunc i64 %235 to i32
  %add992 = add nsw i32 %mul990, %conv991
  %mul993 = mul nsw i32 0, %add992
  %add994 = add nsw i32 %mul993, 1
  %shl995 = shl i32 %add994, 30
  %sub996 = sub nsw i32 %shl995, 1
  %mul997 = mul nsw i32 %sub996, 2
  %add998 = add nsw i32 %mul997, 1
  %sub999 = sub nsw i32 %sub989, %add998
  br label %cond.end.1006

cond.false.1000:                                  ; preds = %cond.true.972
  %236 = load i32, i32* %n, align 4
  %mul1001 = mul nsw i32 0, %236
  %237 = load i64, i64* %bytes, align 8
  %conv1002 = trunc i64 %237 to i32
  %add1003 = add nsw i32 %mul1001, %conv1002
  %mul1004 = mul nsw i32 0, %add1003
  %add1005 = add nsw i32 %mul1004, 0
  br label %cond.end.1006

cond.end.1006:                                    ; preds = %cond.false.1000, %cond.true.980
  %cond1007 = phi i32 [ %sub999, %cond.true.980 ], [ %add1005, %cond.false.1000 ]
  %cmp1008 = icmp slt i32 %cond1007, 0
  br i1 %cmp1008, label %cond.true.1010, label %cond.false.1083

cond.true.1010:                                   ; preds = %cond.end.1006
  %238 = load i32, i32* %n, align 4
  %cmp1011 = icmp slt i32 %238, 0
  br i1 %cmp1011, label %cond.true.1013, label %cond.false.1053

cond.true.1013:                                   ; preds = %cond.true.1010
  %239 = load i64, i64* %bytes, align 8
  %conv1014 = trunc i64 %239 to i32
  %240 = load i32, i32* %n, align 4
  %mul1015 = mul nsw i32 0, %240
  %241 = load i64, i64* %bytes, align 8
  %conv1016 = trunc i64 %241 to i32
  %add1017 = add nsw i32 %mul1015, %conv1016
  %mul1018 = mul nsw i32 0, %add1017
  %sub1019 = sub nsw i32 %mul1018, 1
  %cmp1020 = icmp slt i32 %sub1019, 0
  br i1 %cmp1020, label %cond.true.1022, label %cond.false.1042

cond.true.1022:                                   ; preds = %cond.true.1013
  %242 = load i32, i32* %n, align 4
  %mul1023 = mul nsw i32 0, %242
  %243 = load i64, i64* %bytes, align 8
  %conv1024 = trunc i64 %243 to i32
  %add1025 = add nsw i32 %mul1023, %conv1024
  %mul1026 = mul nsw i32 0, %add1025
  %add1027 = add nsw i32 %mul1026, 0
  %neg1028 = xor i32 %add1027, -1
  %cmp1029 = icmp eq i32 %neg1028, -1
  %conv1030 = zext i1 %cmp1029 to i32
  %sub1031 = sub nsw i32 0, %conv1030
  %244 = load i32, i32* %n, align 4
  %mul1032 = mul nsw i32 0, %244
  %245 = load i64, i64* %bytes, align 8
  %conv1033 = trunc i64 %245 to i32
  %add1034 = add nsw i32 %mul1032, %conv1033
  %mul1035 = mul nsw i32 0, %add1034
  %add1036 = add nsw i32 %mul1035, 1
  %shl1037 = shl i32 %add1036, 30
  %sub1038 = sub nsw i32 %shl1037, 1
  %mul1039 = mul nsw i32 %sub1038, 2
  %add1040 = add nsw i32 %mul1039, 1
  %sub1041 = sub nsw i32 %sub1031, %add1040
  br label %cond.end.1048

cond.false.1042:                                  ; preds = %cond.true.1013
  %246 = load i32, i32* %n, align 4
  %mul1043 = mul nsw i32 0, %246
  %247 = load i64, i64* %bytes, align 8
  %conv1044 = trunc i64 %247 to i32
  %add1045 = add nsw i32 %mul1043, %conv1044
  %mul1046 = mul nsw i32 0, %add1045
  %add1047 = add nsw i32 %mul1046, 0
  br label %cond.end.1048

cond.end.1048:                                    ; preds = %cond.false.1042, %cond.true.1022
  %cond1049 = phi i32 [ %sub1041, %cond.true.1022 ], [ %add1047, %cond.false.1042 ]
  %248 = load i32, i32* %n, align 4
  %sub1050 = sub nsw i32 %cond1049, %248
  %cmp1051 = icmp slt i32 %conv1014, %sub1050
  br i1 %cmp1051, label %cond.true.1123, label %lor.lhs.false.1106

cond.false.1053:                                  ; preds = %cond.true.1010
  %249 = load i32, i32* %n, align 4
  %mul1054 = mul nsw i32 0, %249
  %250 = load i64, i64* %bytes, align 8
  %conv1055 = trunc i64 %250 to i32
  %add1056 = add nsw i32 %mul1054, %conv1055
  %mul1057 = mul nsw i32 0, %add1056
  %sub1058 = sub nsw i32 %mul1057, 1
  %cmp1059 = icmp slt i32 %sub1058, 0
  br i1 %cmp1059, label %cond.true.1061, label %cond.false.1071

cond.true.1061:                                   ; preds = %cond.false.1053
  %251 = load i32, i32* %n, align 4
  %mul1062 = mul nsw i32 0, %251
  %252 = load i64, i64* %bytes, align 8
  %conv1063 = trunc i64 %252 to i32
  %add1064 = add nsw i32 %mul1062, %conv1063
  %mul1065 = mul nsw i32 0, %add1064
  %add1066 = add nsw i32 %mul1065, 1
  %shl1067 = shl i32 %add1066, 30
  %sub1068 = sub nsw i32 %shl1067, 1
  %mul1069 = mul nsw i32 %sub1068, 2
  %add1070 = add nsw i32 %mul1069, 1
  br label %cond.end.1077

cond.false.1071:                                  ; preds = %cond.false.1053
  %253 = load i32, i32* %n, align 4
  %mul1072 = mul nsw i32 0, %253
  %254 = load i64, i64* %bytes, align 8
  %conv1073 = trunc i64 %254 to i32
  %add1074 = add nsw i32 %mul1072, %conv1073
  %mul1075 = mul nsw i32 0, %add1074
  %sub1076 = sub nsw i32 %mul1075, 1
  br label %cond.end.1077

cond.end.1077:                                    ; preds = %cond.false.1071, %cond.true.1061
  %cond1078 = phi i32 [ %add1070, %cond.true.1061 ], [ %sub1076, %cond.false.1071 ]
  %255 = load i32, i32* %n, align 4
  %sub1079 = sub nsw i32 %cond1078, %255
  %256 = load i64, i64* %bytes, align 8
  %conv1080 = trunc i64 %256 to i32
  %cmp1081 = icmp slt i32 %sub1079, %conv1080
  br i1 %cmp1081, label %cond.true.1123, label %lor.lhs.false.1106

cond.false.1083:                                  ; preds = %cond.end.1006
  %257 = load i64, i64* %bytes, align 8
  %conv1084 = trunc i64 %257 to i32
  %cmp1085 = icmp slt i32 %conv1084, 0
  br i1 %cmp1085, label %cond.true.1087, label %cond.false.1092

cond.true.1087:                                   ; preds = %cond.false.1083
  %258 = load i32, i32* %n, align 4
  %259 = load i64, i64* %bytes, align 8
  %conv1088 = trunc i64 %259 to i32
  %260 = load i32, i32* %n, align 4
  %add1089 = add nsw i32 %conv1088, %260
  %cmp1090 = icmp sle i32 %258, %add1089
  br i1 %cmp1090, label %cond.true.1123, label %lor.lhs.false.1106

cond.false.1092:                                  ; preds = %cond.false.1083
  %261 = load i32, i32* %n, align 4
  %cmp1093 = icmp slt i32 %261, 0
  br i1 %cmp1093, label %cond.true.1095, label %cond.false.1101

cond.true.1095:                                   ; preds = %cond.false.1092
  %262 = load i64, i64* %bytes, align 8
  %conv1096 = trunc i64 %262 to i32
  %263 = load i64, i64* %bytes, align 8
  %conv1097 = trunc i64 %263 to i32
  %264 = load i32, i32* %n, align 4
  %add1098 = add nsw i32 %conv1097, %264
  %cmp1099 = icmp sle i32 %conv1096, %add1098
  br i1 %cmp1099, label %cond.true.1123, label %lor.lhs.false.1106

cond.false.1101:                                  ; preds = %cond.false.1092
  %265 = load i64, i64* %bytes, align 8
  %conv1102 = trunc i64 %265 to i32
  %266 = load i32, i32* %n, align 4
  %add1103 = add nsw i32 %conv1102, %266
  %267 = load i32, i32* %n, align 4
  %cmp1104 = icmp slt i32 %add1103, %267
  br i1 %cmp1104, label %cond.true.1123, label %lor.lhs.false.1106

lor.lhs.false.1106:                               ; preds = %cond.false.1101, %cond.true.1095, %cond.true.1087, %cond.end.1077, %cond.end.1048
  %268 = load i64, i64* %bytes, align 8
  %conv1107 = trunc i64 %268 to i32
  %269 = load i32, i32* %n, align 4
  %add1108 = add nsw i32 %conv1107, %269
  %mul1109 = mul nsw i32 0, %add1108
  %sub1110 = sub nsw i32 %mul1109, 1
  %cmp1111 = icmp slt i32 %sub1110, 0
  br i1 %cmp1111, label %land.lhs.true.1113, label %lor.lhs.false.1118

land.lhs.true.1113:                               ; preds = %lor.lhs.false.1106
  %270 = load i64, i64* %bytes, align 8
  %conv1114 = trunc i64 %270 to i32
  %271 = load i32, i32* %n, align 4
  %add1115 = add nsw i32 %conv1114, %271
  %cmp1116 = icmp slt i32 %add1115, -2147483648
  br i1 %cmp1116, label %cond.true.1123, label %lor.lhs.false.1118

lor.lhs.false.1118:                               ; preds = %land.lhs.true.1113, %lor.lhs.false.1106
  %272 = load i64, i64* %bytes, align 8
  %conv1119 = trunc i64 %272 to i32
  %273 = load i32, i32* %n, align 4
  %add1120 = add nsw i32 %conv1119, %273
  %cmp1121 = icmp slt i32 2147483647, %add1120
  br i1 %cmp1121, label %cond.true.1123, label %cond.false.1139

cond.true.1123:                                   ; preds = %lor.lhs.false.1118, %land.lhs.true.1113, %cond.false.1101, %cond.true.1095, %cond.true.1087, %cond.end.1077, %cond.end.1048
  %274 = load i64, i64* %bytes, align 8
  %conv1124 = trunc i64 %274 to i32
  %275 = load i32, i32* %n, align 4
  %add1125 = add i32 %conv1124, %275
  %cmp1126 = icmp ule i32 %add1125, 2147483647
  br i1 %cmp1126, label %cond.true.1128, label %cond.false.1131

cond.true.1128:                                   ; preds = %cond.true.1123
  %276 = load i64, i64* %bytes, align 8
  %conv1129 = trunc i64 %276 to i32
  %277 = load i32, i32* %n, align 4
  %add1130 = add i32 %conv1129, %277
  br label %cond.end.1136

cond.false.1131:                                  ; preds = %cond.true.1123
  %278 = load i64, i64* %bytes, align 8
  %conv1132 = trunc i64 %278 to i32
  %279 = load i32, i32* %n, align 4
  %add1133 = add i32 %conv1132, %279
  %sub1134 = sub i32 %add1133, -2147483648
  %add1135 = add nsw i32 %sub1134, -2147483648
  br label %cond.end.1136

cond.end.1136:                                    ; preds = %cond.false.1131, %cond.true.1128
  %cond1137 = phi i32 [ %add1130, %cond.true.1128 ], [ %add1135, %cond.false.1131 ]
  %conv1138 = sext i32 %cond1137 to i64
  store i64 %conv1138, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1139:                                  ; preds = %lor.lhs.false.1118
  %280 = load i64, i64* %bytes, align 8
  %conv1140 = trunc i64 %280 to i32
  %281 = load i32, i32* %n, align 4
  %add1141 = add i32 %conv1140, %281
  %cmp1142 = icmp ule i32 %add1141, 2147483647
  br i1 %cmp1142, label %cond.true.1144, label %cond.false.1147

cond.true.1144:                                   ; preds = %cond.false.1139
  %282 = load i64, i64* %bytes, align 8
  %conv1145 = trunc i64 %282 to i32
  %283 = load i32, i32* %n, align 4
  %add1146 = add i32 %conv1145, %283
  br label %cond.end.1152

cond.false.1147:                                  ; preds = %cond.false.1139
  %284 = load i64, i64* %bytes, align 8
  %conv1148 = trunc i64 %284 to i32
  %285 = load i32, i32* %n, align 4
  %add1149 = add i32 %conv1148, %285
  %sub1150 = sub i32 %add1149, -2147483648
  %add1151 = add nsw i32 %sub1150, -2147483648
  br label %cond.end.1152

cond.end.1152:                                    ; preds = %cond.false.1147, %cond.true.1144
  %cond1153 = phi i32 [ %add1146, %cond.true.1144 ], [ %add1151, %cond.false.1147 ]
  %conv1154 = sext i32 %cond1153 to i64
  store i64 %conv1154, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1155:                                  ; preds = %cond.true.971
  %286 = load i32, i32* %n, align 4
  %mul1156 = mul nsw i32 0, %286
  %conv1157 = sext i32 %mul1156 to i64
  %287 = load i64, i64* %bytes, align 8
  %add1158 = add nsw i64 %conv1157, %287
  %mul1159 = mul nsw i64 0, %add1158
  %sub1160 = sub nsw i64 %mul1159, 1
  %cmp1161 = icmp slt i64 %sub1160, 0
  br i1 %cmp1161, label %cond.true.1163, label %cond.false.1184

cond.true.1163:                                   ; preds = %cond.false.1155
  %288 = load i32, i32* %n, align 4
  %mul1164 = mul nsw i32 0, %288
  %conv1165 = sext i32 %mul1164 to i64
  %289 = load i64, i64* %bytes, align 8
  %add1166 = add nsw i64 %conv1165, %289
  %mul1167 = mul nsw i64 0, %add1166
  %add1168 = add nsw i64 %mul1167, 0
  %neg1169 = xor i64 %add1168, -1
  %cmp1170 = icmp eq i64 %neg1169, -1
  %conv1171 = zext i1 %cmp1170 to i32
  %sub1172 = sub nsw i32 0, %conv1171
  %conv1173 = sext i32 %sub1172 to i64
  %290 = load i32, i32* %n, align 4
  %mul1174 = mul nsw i32 0, %290
  %conv1175 = sext i32 %mul1174 to i64
  %291 = load i64, i64* %bytes, align 8
  %add1176 = add nsw i64 %conv1175, %291
  %mul1177 = mul nsw i64 0, %add1176
  %add1178 = add nsw i64 %mul1177, 1
  %shl1179 = shl i64 %add1178, 62
  %sub1180 = sub nsw i64 %shl1179, 1
  %mul1181 = mul nsw i64 %sub1180, 2
  %add1182 = add nsw i64 %mul1181, 1
  %sub1183 = sub nsw i64 %conv1173, %add1182
  br label %cond.end.1190

cond.false.1184:                                  ; preds = %cond.false.1155
  %292 = load i32, i32* %n, align 4
  %mul1185 = mul nsw i32 0, %292
  %conv1186 = sext i32 %mul1185 to i64
  %293 = load i64, i64* %bytes, align 8
  %add1187 = add nsw i64 %conv1186, %293
  %mul1188 = mul nsw i64 0, %add1187
  %add1189 = add nsw i64 %mul1188, 0
  br label %cond.end.1190

cond.end.1190:                                    ; preds = %cond.false.1184, %cond.true.1163
  %cond1191 = phi i64 [ %sub1183, %cond.true.1163 ], [ %add1189, %cond.false.1184 ]
  %cmp1192 = icmp slt i64 %cond1191, 0
  br i1 %cmp1192, label %cond.true.1194, label %cond.false.1268

cond.true.1194:                                   ; preds = %cond.end.1190
  %294 = load i32, i32* %n, align 4
  %cmp1195 = icmp slt i32 %294, 0
  br i1 %cmp1195, label %cond.true.1197, label %cond.false.1238

cond.true.1197:                                   ; preds = %cond.true.1194
  %295 = load i64, i64* %bytes, align 8
  %296 = load i32, i32* %n, align 4
  %mul1198 = mul nsw i32 0, %296
  %conv1199 = sext i32 %mul1198 to i64
  %297 = load i64, i64* %bytes, align 8
  %add1200 = add nsw i64 %conv1199, %297
  %mul1201 = mul nsw i64 0, %add1200
  %sub1202 = sub nsw i64 %mul1201, 1
  %cmp1203 = icmp slt i64 %sub1202, 0
  br i1 %cmp1203, label %cond.true.1205, label %cond.false.1226

cond.true.1205:                                   ; preds = %cond.true.1197
  %298 = load i32, i32* %n, align 4
  %mul1206 = mul nsw i32 0, %298
  %conv1207 = sext i32 %mul1206 to i64
  %299 = load i64, i64* %bytes, align 8
  %add1208 = add nsw i64 %conv1207, %299
  %mul1209 = mul nsw i64 0, %add1208
  %add1210 = add nsw i64 %mul1209, 0
  %neg1211 = xor i64 %add1210, -1
  %cmp1212 = icmp eq i64 %neg1211, -1
  %conv1213 = zext i1 %cmp1212 to i32
  %sub1214 = sub nsw i32 0, %conv1213
  %conv1215 = sext i32 %sub1214 to i64
  %300 = load i32, i32* %n, align 4
  %mul1216 = mul nsw i32 0, %300
  %conv1217 = sext i32 %mul1216 to i64
  %301 = load i64, i64* %bytes, align 8
  %add1218 = add nsw i64 %conv1217, %301
  %mul1219 = mul nsw i64 0, %add1218
  %add1220 = add nsw i64 %mul1219, 1
  %shl1221 = shl i64 %add1220, 62
  %sub1222 = sub nsw i64 %shl1221, 1
  %mul1223 = mul nsw i64 %sub1222, 2
  %add1224 = add nsw i64 %mul1223, 1
  %sub1225 = sub nsw i64 %conv1215, %add1224
  br label %cond.end.1232

cond.false.1226:                                  ; preds = %cond.true.1197
  %302 = load i32, i32* %n, align 4
  %mul1227 = mul nsw i32 0, %302
  %conv1228 = sext i32 %mul1227 to i64
  %303 = load i64, i64* %bytes, align 8
  %add1229 = add nsw i64 %conv1228, %303
  %mul1230 = mul nsw i64 0, %add1229
  %add1231 = add nsw i64 %mul1230, 0
  br label %cond.end.1232

cond.end.1232:                                    ; preds = %cond.false.1226, %cond.true.1205
  %cond1233 = phi i64 [ %sub1225, %cond.true.1205 ], [ %add1231, %cond.false.1226 ]
  %304 = load i32, i32* %n, align 4
  %conv1234 = sext i32 %304 to i64
  %sub1235 = sub nsw i64 %cond1233, %conv1234
  %cmp1236 = icmp slt i64 %295, %sub1235
  br i1 %cmp1236, label %cond.true.1308, label %lor.lhs.false.1291

cond.false.1238:                                  ; preds = %cond.true.1194
  %305 = load i32, i32* %n, align 4
  %mul1239 = mul nsw i32 0, %305
  %conv1240 = sext i32 %mul1239 to i64
  %306 = load i64, i64* %bytes, align 8
  %add1241 = add nsw i64 %conv1240, %306
  %mul1242 = mul nsw i64 0, %add1241
  %sub1243 = sub nsw i64 %mul1242, 1
  %cmp1244 = icmp slt i64 %sub1243, 0
  br i1 %cmp1244, label %cond.true.1246, label %cond.false.1256

cond.true.1246:                                   ; preds = %cond.false.1238
  %307 = load i32, i32* %n, align 4
  %mul1247 = mul nsw i32 0, %307
  %conv1248 = sext i32 %mul1247 to i64
  %308 = load i64, i64* %bytes, align 8
  %add1249 = add nsw i64 %conv1248, %308
  %mul1250 = mul nsw i64 0, %add1249
  %add1251 = add nsw i64 %mul1250, 1
  %shl1252 = shl i64 %add1251, 62
  %sub1253 = sub nsw i64 %shl1252, 1
  %mul1254 = mul nsw i64 %sub1253, 2
  %add1255 = add nsw i64 %mul1254, 1
  br label %cond.end.1262

cond.false.1256:                                  ; preds = %cond.false.1238
  %309 = load i32, i32* %n, align 4
  %mul1257 = mul nsw i32 0, %309
  %conv1258 = sext i32 %mul1257 to i64
  %310 = load i64, i64* %bytes, align 8
  %add1259 = add nsw i64 %conv1258, %310
  %mul1260 = mul nsw i64 0, %add1259
  %sub1261 = sub nsw i64 %mul1260, 1
  br label %cond.end.1262

cond.end.1262:                                    ; preds = %cond.false.1256, %cond.true.1246
  %cond1263 = phi i64 [ %add1255, %cond.true.1246 ], [ %sub1261, %cond.false.1256 ]
  %311 = load i32, i32* %n, align 4
  %conv1264 = sext i32 %311 to i64
  %sub1265 = sub nsw i64 %cond1263, %conv1264
  %312 = load i64, i64* %bytes, align 8
  %cmp1266 = icmp slt i64 %sub1265, %312
  br i1 %cmp1266, label %cond.true.1308, label %lor.lhs.false.1291

cond.false.1268:                                  ; preds = %cond.end.1190
  %313 = load i64, i64* %bytes, align 8
  %cmp1269 = icmp slt i64 %313, 0
  br i1 %cmp1269, label %cond.true.1271, label %cond.false.1277

cond.true.1271:                                   ; preds = %cond.false.1268
  %314 = load i32, i32* %n, align 4
  %conv1272 = sext i32 %314 to i64
  %315 = load i64, i64* %bytes, align 8
  %316 = load i32, i32* %n, align 4
  %conv1273 = sext i32 %316 to i64
  %add1274 = add nsw i64 %315, %conv1273
  %cmp1275 = icmp sle i64 %conv1272, %add1274
  br i1 %cmp1275, label %cond.true.1308, label %lor.lhs.false.1291

cond.false.1277:                                  ; preds = %cond.false.1268
  %317 = load i32, i32* %n, align 4
  %cmp1278 = icmp slt i32 %317, 0
  br i1 %cmp1278, label %cond.true.1280, label %cond.false.1285

cond.true.1280:                                   ; preds = %cond.false.1277
  %318 = load i64, i64* %bytes, align 8
  %319 = load i64, i64* %bytes, align 8
  %320 = load i32, i32* %n, align 4
  %conv1281 = sext i32 %320 to i64
  %add1282 = add nsw i64 %319, %conv1281
  %cmp1283 = icmp sle i64 %318, %add1282
  br i1 %cmp1283, label %cond.true.1308, label %lor.lhs.false.1291

cond.false.1285:                                  ; preds = %cond.false.1277
  %321 = load i64, i64* %bytes, align 8
  %322 = load i32, i32* %n, align 4
  %conv1286 = sext i32 %322 to i64
  %add1287 = add nsw i64 %321, %conv1286
  %323 = load i32, i32* %n, align 4
  %conv1288 = sext i32 %323 to i64
  %cmp1289 = icmp slt i64 %add1287, %conv1288
  br i1 %cmp1289, label %cond.true.1308, label %lor.lhs.false.1291

lor.lhs.false.1291:                               ; preds = %cond.false.1285, %cond.true.1280, %cond.true.1271, %cond.end.1262, %cond.end.1232
  %324 = load i64, i64* %bytes, align 8
  %325 = load i32, i32* %n, align 4
  %conv1292 = sext i32 %325 to i64
  %add1293 = add nsw i64 %324, %conv1292
  %mul1294 = mul nsw i64 0, %add1293
  %sub1295 = sub nsw i64 %mul1294, 1
  %cmp1296 = icmp slt i64 %sub1295, 0
  br i1 %cmp1296, label %land.lhs.true.1298, label %lor.lhs.false.1303

land.lhs.true.1298:                               ; preds = %lor.lhs.false.1291
  %326 = load i64, i64* %bytes, align 8
  %327 = load i32, i32* %n, align 4
  %conv1299 = sext i32 %327 to i64
  %add1300 = add nsw i64 %326, %conv1299
  %cmp1301 = icmp slt i64 %add1300, -2147483648
  br i1 %cmp1301, label %cond.true.1308, label %lor.lhs.false.1303

lor.lhs.false.1303:                               ; preds = %land.lhs.true.1298, %lor.lhs.false.1291
  %328 = load i64, i64* %bytes, align 8
  %329 = load i32, i32* %n, align 4
  %conv1304 = sext i32 %329 to i64
  %add1305 = add nsw i64 %328, %conv1304
  %cmp1306 = icmp slt i64 2147483647, %add1305
  br i1 %cmp1306, label %cond.true.1308, label %cond.false.1324

cond.true.1308:                                   ; preds = %lor.lhs.false.1303, %land.lhs.true.1298, %cond.false.1285, %cond.true.1280, %cond.true.1271, %cond.end.1262, %cond.end.1232
  %330 = load i64, i64* %bytes, align 8
  %conv1309 = trunc i64 %330 to i32
  %331 = load i32, i32* %n, align 4
  %add1310 = add i32 %conv1309, %331
  %cmp1311 = icmp ule i32 %add1310, 2147483647
  br i1 %cmp1311, label %cond.true.1313, label %cond.false.1316

cond.true.1313:                                   ; preds = %cond.true.1308
  %332 = load i64, i64* %bytes, align 8
  %conv1314 = trunc i64 %332 to i32
  %333 = load i32, i32* %n, align 4
  %add1315 = add i32 %conv1314, %333
  br label %cond.end.1321

cond.false.1316:                                  ; preds = %cond.true.1308
  %334 = load i64, i64* %bytes, align 8
  %conv1317 = trunc i64 %334 to i32
  %335 = load i32, i32* %n, align 4
  %add1318 = add i32 %conv1317, %335
  %sub1319 = sub i32 %add1318, -2147483648
  %add1320 = add nsw i32 %sub1319, -2147483648
  br label %cond.end.1321

cond.end.1321:                                    ; preds = %cond.false.1316, %cond.true.1313
  %cond1322 = phi i32 [ %add1315, %cond.true.1313 ], [ %add1320, %cond.false.1316 ]
  %conv1323 = sext i32 %cond1322 to i64
  store i64 %conv1323, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1324:                                  ; preds = %lor.lhs.false.1303
  %336 = load i64, i64* %bytes, align 8
  %conv1325 = trunc i64 %336 to i32
  %337 = load i32, i32* %n, align 4
  %add1326 = add i32 %conv1325, %337
  %cmp1327 = icmp ule i32 %add1326, 2147483647
  br i1 %cmp1327, label %cond.true.1329, label %cond.false.1332

cond.true.1329:                                   ; preds = %cond.false.1324
  %338 = load i64, i64* %bytes, align 8
  %conv1330 = trunc i64 %338 to i32
  %339 = load i32, i32* %n, align 4
  %add1331 = add i32 %conv1330, %339
  br label %cond.end.1337

cond.false.1332:                                  ; preds = %cond.false.1324
  %340 = load i64, i64* %bytes, align 8
  %conv1333 = trunc i64 %340 to i32
  %341 = load i32, i32* %n, align 4
  %add1334 = add i32 %conv1333, %341
  %sub1335 = sub i32 %add1334, -2147483648
  %add1336 = add nsw i32 %sub1335, -2147483648
  br label %cond.end.1337

cond.end.1337:                                    ; preds = %cond.false.1332, %cond.true.1329
  %cond1338 = phi i32 [ %add1331, %cond.true.1329 ], [ %add1336, %cond.false.1332 ]
  %conv1339 = sext i32 %cond1338 to i64
  store i64 %conv1339, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1340:                                  ; preds = %cond.false.970
  br i1 true, label %cond.true.1341, label %cond.false.1710

cond.true.1341:                                   ; preds = %cond.false.1340
  br i1 false, label %cond.true.1342, label %cond.false.1527

cond.true.1342:                                   ; preds = %cond.true.1341
  %342 = load i32, i32* %n, align 4
  %conv1343 = sext i32 %342 to i64
  %mul1344 = mul nsw i64 0, %conv1343
  %343 = load i64, i64* %bytes, align 8
  %add1345 = add nsw i64 %mul1344, %343
  %mul1346 = mul nsw i64 0, %add1345
  %sub1347 = sub nsw i64 %mul1346, 1
  %cmp1348 = icmp slt i64 %sub1347, 0
  br i1 %cmp1348, label %cond.true.1350, label %cond.false.1371

cond.true.1350:                                   ; preds = %cond.true.1342
  %344 = load i32, i32* %n, align 4
  %conv1351 = sext i32 %344 to i64
  %mul1352 = mul nsw i64 0, %conv1351
  %345 = load i64, i64* %bytes, align 8
  %add1353 = add nsw i64 %mul1352, %345
  %mul1354 = mul nsw i64 0, %add1353
  %add1355 = add nsw i64 %mul1354, 0
  %neg1356 = xor i64 %add1355, -1
  %cmp1357 = icmp eq i64 %neg1356, -1
  %conv1358 = zext i1 %cmp1357 to i32
  %sub1359 = sub nsw i32 0, %conv1358
  %conv1360 = sext i32 %sub1359 to i64
  %346 = load i32, i32* %n, align 4
  %conv1361 = sext i32 %346 to i64
  %mul1362 = mul nsw i64 0, %conv1361
  %347 = load i64, i64* %bytes, align 8
  %add1363 = add nsw i64 %mul1362, %347
  %mul1364 = mul nsw i64 0, %add1363
  %add1365 = add nsw i64 %mul1364, 1
  %shl1366 = shl i64 %add1365, 62
  %sub1367 = sub nsw i64 %shl1366, 1
  %mul1368 = mul nsw i64 %sub1367, 2
  %add1369 = add nsw i64 %mul1368, 1
  %sub1370 = sub nsw i64 %conv1360, %add1369
  br label %cond.end.1377

cond.false.1371:                                  ; preds = %cond.true.1342
  %348 = load i32, i32* %n, align 4
  %conv1372 = sext i32 %348 to i64
  %mul1373 = mul nsw i64 0, %conv1372
  %349 = load i64, i64* %bytes, align 8
  %add1374 = add nsw i64 %mul1373, %349
  %mul1375 = mul nsw i64 0, %add1374
  %add1376 = add nsw i64 %mul1375, 0
  br label %cond.end.1377

cond.end.1377:                                    ; preds = %cond.false.1371, %cond.true.1350
  %cond1378 = phi i64 [ %sub1370, %cond.true.1350 ], [ %add1376, %cond.false.1371 ]
  %cmp1379 = icmp slt i64 %cond1378, 0
  br i1 %cmp1379, label %cond.true.1381, label %cond.false.1456

cond.true.1381:                                   ; preds = %cond.end.1377
  %350 = load i32, i32* %n, align 4
  %conv1382 = sext i32 %350 to i64
  %cmp1383 = icmp slt i64 %conv1382, 0
  br i1 %cmp1383, label %cond.true.1385, label %cond.false.1426

cond.true.1385:                                   ; preds = %cond.true.1381
  %351 = load i64, i64* %bytes, align 8
  %352 = load i32, i32* %n, align 4
  %conv1386 = sext i32 %352 to i64
  %mul1387 = mul nsw i64 0, %conv1386
  %353 = load i64, i64* %bytes, align 8
  %add1388 = add nsw i64 %mul1387, %353
  %mul1389 = mul nsw i64 0, %add1388
  %sub1390 = sub nsw i64 %mul1389, 1
  %cmp1391 = icmp slt i64 %sub1390, 0
  br i1 %cmp1391, label %cond.true.1393, label %cond.false.1414

cond.true.1393:                                   ; preds = %cond.true.1385
  %354 = load i32, i32* %n, align 4
  %conv1394 = sext i32 %354 to i64
  %mul1395 = mul nsw i64 0, %conv1394
  %355 = load i64, i64* %bytes, align 8
  %add1396 = add nsw i64 %mul1395, %355
  %mul1397 = mul nsw i64 0, %add1396
  %add1398 = add nsw i64 %mul1397, 0
  %neg1399 = xor i64 %add1398, -1
  %cmp1400 = icmp eq i64 %neg1399, -1
  %conv1401 = zext i1 %cmp1400 to i32
  %sub1402 = sub nsw i32 0, %conv1401
  %conv1403 = sext i32 %sub1402 to i64
  %356 = load i32, i32* %n, align 4
  %conv1404 = sext i32 %356 to i64
  %mul1405 = mul nsw i64 0, %conv1404
  %357 = load i64, i64* %bytes, align 8
  %add1406 = add nsw i64 %mul1405, %357
  %mul1407 = mul nsw i64 0, %add1406
  %add1408 = add nsw i64 %mul1407, 1
  %shl1409 = shl i64 %add1408, 62
  %sub1410 = sub nsw i64 %shl1409, 1
  %mul1411 = mul nsw i64 %sub1410, 2
  %add1412 = add nsw i64 %mul1411, 1
  %sub1413 = sub nsw i64 %conv1403, %add1412
  br label %cond.end.1420

cond.false.1414:                                  ; preds = %cond.true.1385
  %358 = load i32, i32* %n, align 4
  %conv1415 = sext i32 %358 to i64
  %mul1416 = mul nsw i64 0, %conv1415
  %359 = load i64, i64* %bytes, align 8
  %add1417 = add nsw i64 %mul1416, %359
  %mul1418 = mul nsw i64 0, %add1417
  %add1419 = add nsw i64 %mul1418, 0
  br label %cond.end.1420

cond.end.1420:                                    ; preds = %cond.false.1414, %cond.true.1393
  %cond1421 = phi i64 [ %sub1413, %cond.true.1393 ], [ %add1419, %cond.false.1414 ]
  %360 = load i32, i32* %n, align 4
  %conv1422 = sext i32 %360 to i64
  %sub1423 = sub nsw i64 %cond1421, %conv1422
  %cmp1424 = icmp slt i64 %351, %sub1423
  br i1 %cmp1424, label %cond.true.1497, label %lor.lhs.false.1480

cond.false.1426:                                  ; preds = %cond.true.1381
  %361 = load i32, i32* %n, align 4
  %conv1427 = sext i32 %361 to i64
  %mul1428 = mul nsw i64 0, %conv1427
  %362 = load i64, i64* %bytes, align 8
  %add1429 = add nsw i64 %mul1428, %362
  %mul1430 = mul nsw i64 0, %add1429
  %sub1431 = sub nsw i64 %mul1430, 1
  %cmp1432 = icmp slt i64 %sub1431, 0
  br i1 %cmp1432, label %cond.true.1434, label %cond.false.1444

cond.true.1434:                                   ; preds = %cond.false.1426
  %363 = load i32, i32* %n, align 4
  %conv1435 = sext i32 %363 to i64
  %mul1436 = mul nsw i64 0, %conv1435
  %364 = load i64, i64* %bytes, align 8
  %add1437 = add nsw i64 %mul1436, %364
  %mul1438 = mul nsw i64 0, %add1437
  %add1439 = add nsw i64 %mul1438, 1
  %shl1440 = shl i64 %add1439, 62
  %sub1441 = sub nsw i64 %shl1440, 1
  %mul1442 = mul nsw i64 %sub1441, 2
  %add1443 = add nsw i64 %mul1442, 1
  br label %cond.end.1450

cond.false.1444:                                  ; preds = %cond.false.1426
  %365 = load i32, i32* %n, align 4
  %conv1445 = sext i32 %365 to i64
  %mul1446 = mul nsw i64 0, %conv1445
  %366 = load i64, i64* %bytes, align 8
  %add1447 = add nsw i64 %mul1446, %366
  %mul1448 = mul nsw i64 0, %add1447
  %sub1449 = sub nsw i64 %mul1448, 1
  br label %cond.end.1450

cond.end.1450:                                    ; preds = %cond.false.1444, %cond.true.1434
  %cond1451 = phi i64 [ %add1443, %cond.true.1434 ], [ %sub1449, %cond.false.1444 ]
  %367 = load i32, i32* %n, align 4
  %conv1452 = sext i32 %367 to i64
  %sub1453 = sub nsw i64 %cond1451, %conv1452
  %368 = load i64, i64* %bytes, align 8
  %cmp1454 = icmp slt i64 %sub1453, %368
  br i1 %cmp1454, label %cond.true.1497, label %lor.lhs.false.1480

cond.false.1456:                                  ; preds = %cond.end.1377
  %369 = load i64, i64* %bytes, align 8
  %cmp1457 = icmp slt i64 %369, 0
  br i1 %cmp1457, label %cond.true.1459, label %cond.false.1465

cond.true.1459:                                   ; preds = %cond.false.1456
  %370 = load i32, i32* %n, align 4
  %conv1460 = sext i32 %370 to i64
  %371 = load i64, i64* %bytes, align 8
  %372 = load i32, i32* %n, align 4
  %conv1461 = sext i32 %372 to i64
  %add1462 = add nsw i64 %371, %conv1461
  %cmp1463 = icmp sle i64 %conv1460, %add1462
  br i1 %cmp1463, label %cond.true.1497, label %lor.lhs.false.1480

cond.false.1465:                                  ; preds = %cond.false.1456
  %373 = load i32, i32* %n, align 4
  %conv1466 = sext i32 %373 to i64
  %cmp1467 = icmp slt i64 %conv1466, 0
  br i1 %cmp1467, label %cond.true.1469, label %cond.false.1474

cond.true.1469:                                   ; preds = %cond.false.1465
  %374 = load i64, i64* %bytes, align 8
  %375 = load i64, i64* %bytes, align 8
  %376 = load i32, i32* %n, align 4
  %conv1470 = sext i32 %376 to i64
  %add1471 = add nsw i64 %375, %conv1470
  %cmp1472 = icmp sle i64 %374, %add1471
  br i1 %cmp1472, label %cond.true.1497, label %lor.lhs.false.1480

cond.false.1474:                                  ; preds = %cond.false.1465
  %377 = load i64, i64* %bytes, align 8
  %378 = load i32, i32* %n, align 4
  %conv1475 = sext i32 %378 to i64
  %add1476 = add nsw i64 %377, %conv1475
  %379 = load i32, i32* %n, align 4
  %conv1477 = sext i32 %379 to i64
  %cmp1478 = icmp slt i64 %add1476, %conv1477
  br i1 %cmp1478, label %cond.true.1497, label %lor.lhs.false.1480

lor.lhs.false.1480:                               ; preds = %cond.false.1474, %cond.true.1469, %cond.true.1459, %cond.end.1450, %cond.end.1420
  %380 = load i64, i64* %bytes, align 8
  %381 = load i32, i32* %n, align 4
  %conv1481 = sext i32 %381 to i64
  %add1482 = add nsw i64 %380, %conv1481
  %mul1483 = mul nsw i64 0, %add1482
  %sub1484 = sub nsw i64 %mul1483, 1
  %cmp1485 = icmp slt i64 %sub1484, 0
  br i1 %cmp1485, label %land.lhs.true.1487, label %lor.lhs.false.1492

land.lhs.true.1487:                               ; preds = %lor.lhs.false.1480
  %382 = load i64, i64* %bytes, align 8
  %383 = load i32, i32* %n, align 4
  %conv1488 = sext i32 %383 to i64
  %add1489 = add nsw i64 %382, %conv1488
  %cmp1490 = icmp slt i64 %add1489, -9223372036854775808
  br i1 %cmp1490, label %cond.true.1497, label %lor.lhs.false.1492

lor.lhs.false.1492:                               ; preds = %land.lhs.true.1487, %lor.lhs.false.1480
  %384 = load i64, i64* %bytes, align 8
  %385 = load i32, i32* %n, align 4
  %conv1493 = sext i32 %385 to i64
  %add1494 = add nsw i64 %384, %conv1493
  %cmp1495 = icmp slt i64 9223372036854775807, %add1494
  br i1 %cmp1495, label %cond.true.1497, label %cond.false.1512

cond.true.1497:                                   ; preds = %lor.lhs.false.1492, %land.lhs.true.1487, %cond.false.1474, %cond.true.1469, %cond.true.1459, %cond.end.1450, %cond.end.1420
  %386 = load i64, i64* %bytes, align 8
  %387 = load i32, i32* %n, align 4
  %conv1498 = sext i32 %387 to i64
  %add1499 = add i64 %386, %conv1498
  %cmp1500 = icmp ule i64 %add1499, 9223372036854775807
  br i1 %cmp1500, label %cond.true.1502, label %cond.false.1505

cond.true.1502:                                   ; preds = %cond.true.1497
  %388 = load i64, i64* %bytes, align 8
  %389 = load i32, i32* %n, align 4
  %conv1503 = sext i32 %389 to i64
  %add1504 = add i64 %388, %conv1503
  br label %cond.end.1510

cond.false.1505:                                  ; preds = %cond.true.1497
  %390 = load i64, i64* %bytes, align 8
  %391 = load i32, i32* %n, align 4
  %conv1506 = sext i32 %391 to i64
  %add1507 = add i64 %390, %conv1506
  %sub1508 = sub i64 %add1507, -9223372036854775808
  %add1509 = add nsw i64 %sub1508, -9223372036854775808
  br label %cond.end.1510

cond.end.1510:                                    ; preds = %cond.false.1505, %cond.true.1502
  %cond1511 = phi i64 [ %add1504, %cond.true.1502 ], [ %add1509, %cond.false.1505 ]
  store i64 %cond1511, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1512:                                  ; preds = %lor.lhs.false.1492
  %392 = load i64, i64* %bytes, align 8
  %393 = load i32, i32* %n, align 4
  %conv1513 = sext i32 %393 to i64
  %add1514 = add i64 %392, %conv1513
  %cmp1515 = icmp ule i64 %add1514, 9223372036854775807
  br i1 %cmp1515, label %cond.true.1517, label %cond.false.1520

cond.true.1517:                                   ; preds = %cond.false.1512
  %394 = load i64, i64* %bytes, align 8
  %395 = load i32, i32* %n, align 4
  %conv1518 = sext i32 %395 to i64
  %add1519 = add i64 %394, %conv1518
  br label %cond.end.1525

cond.false.1520:                                  ; preds = %cond.false.1512
  %396 = load i64, i64* %bytes, align 8
  %397 = load i32, i32* %n, align 4
  %conv1521 = sext i32 %397 to i64
  %add1522 = add i64 %396, %conv1521
  %sub1523 = sub i64 %add1522, -9223372036854775808
  %add1524 = add nsw i64 %sub1523, -9223372036854775808
  br label %cond.end.1525

cond.end.1525:                                    ; preds = %cond.false.1520, %cond.true.1517
  %cond1526 = phi i64 [ %add1519, %cond.true.1517 ], [ %add1524, %cond.false.1520 ]
  store i64 %cond1526, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1527:                                  ; preds = %cond.true.1341
  %398 = load i32, i32* %n, align 4
  %mul1528 = mul nsw i32 0, %398
  %conv1529 = sext i32 %mul1528 to i64
  %399 = load i64, i64* %bytes, align 8
  %add1530 = add nsw i64 %conv1529, %399
  %mul1531 = mul nsw i64 0, %add1530
  %sub1532 = sub nsw i64 %mul1531, 1
  %cmp1533 = icmp slt i64 %sub1532, 0
  br i1 %cmp1533, label %cond.true.1535, label %cond.false.1556

cond.true.1535:                                   ; preds = %cond.false.1527
  %400 = load i32, i32* %n, align 4
  %mul1536 = mul nsw i32 0, %400
  %conv1537 = sext i32 %mul1536 to i64
  %401 = load i64, i64* %bytes, align 8
  %add1538 = add nsw i64 %conv1537, %401
  %mul1539 = mul nsw i64 0, %add1538
  %add1540 = add nsw i64 %mul1539, 0
  %neg1541 = xor i64 %add1540, -1
  %cmp1542 = icmp eq i64 %neg1541, -1
  %conv1543 = zext i1 %cmp1542 to i32
  %sub1544 = sub nsw i32 0, %conv1543
  %conv1545 = sext i32 %sub1544 to i64
  %402 = load i32, i32* %n, align 4
  %mul1546 = mul nsw i32 0, %402
  %conv1547 = sext i32 %mul1546 to i64
  %403 = load i64, i64* %bytes, align 8
  %add1548 = add nsw i64 %conv1547, %403
  %mul1549 = mul nsw i64 0, %add1548
  %add1550 = add nsw i64 %mul1549, 1
  %shl1551 = shl i64 %add1550, 62
  %sub1552 = sub nsw i64 %shl1551, 1
  %mul1553 = mul nsw i64 %sub1552, 2
  %add1554 = add nsw i64 %mul1553, 1
  %sub1555 = sub nsw i64 %conv1545, %add1554
  br label %cond.end.1562

cond.false.1556:                                  ; preds = %cond.false.1527
  %404 = load i32, i32* %n, align 4
  %mul1557 = mul nsw i32 0, %404
  %conv1558 = sext i32 %mul1557 to i64
  %405 = load i64, i64* %bytes, align 8
  %add1559 = add nsw i64 %conv1558, %405
  %mul1560 = mul nsw i64 0, %add1559
  %add1561 = add nsw i64 %mul1560, 0
  br label %cond.end.1562

cond.end.1562:                                    ; preds = %cond.false.1556, %cond.true.1535
  %cond1563 = phi i64 [ %sub1555, %cond.true.1535 ], [ %add1561, %cond.false.1556 ]
  %cmp1564 = icmp slt i64 %cond1563, 0
  br i1 %cmp1564, label %cond.true.1566, label %cond.false.1640

cond.true.1566:                                   ; preds = %cond.end.1562
  %406 = load i32, i32* %n, align 4
  %cmp1567 = icmp slt i32 %406, 0
  br i1 %cmp1567, label %cond.true.1569, label %cond.false.1610

cond.true.1569:                                   ; preds = %cond.true.1566
  %407 = load i64, i64* %bytes, align 8
  %408 = load i32, i32* %n, align 4
  %mul1570 = mul nsw i32 0, %408
  %conv1571 = sext i32 %mul1570 to i64
  %409 = load i64, i64* %bytes, align 8
  %add1572 = add nsw i64 %conv1571, %409
  %mul1573 = mul nsw i64 0, %add1572
  %sub1574 = sub nsw i64 %mul1573, 1
  %cmp1575 = icmp slt i64 %sub1574, 0
  br i1 %cmp1575, label %cond.true.1577, label %cond.false.1598

cond.true.1577:                                   ; preds = %cond.true.1569
  %410 = load i32, i32* %n, align 4
  %mul1578 = mul nsw i32 0, %410
  %conv1579 = sext i32 %mul1578 to i64
  %411 = load i64, i64* %bytes, align 8
  %add1580 = add nsw i64 %conv1579, %411
  %mul1581 = mul nsw i64 0, %add1580
  %add1582 = add nsw i64 %mul1581, 0
  %neg1583 = xor i64 %add1582, -1
  %cmp1584 = icmp eq i64 %neg1583, -1
  %conv1585 = zext i1 %cmp1584 to i32
  %sub1586 = sub nsw i32 0, %conv1585
  %conv1587 = sext i32 %sub1586 to i64
  %412 = load i32, i32* %n, align 4
  %mul1588 = mul nsw i32 0, %412
  %conv1589 = sext i32 %mul1588 to i64
  %413 = load i64, i64* %bytes, align 8
  %add1590 = add nsw i64 %conv1589, %413
  %mul1591 = mul nsw i64 0, %add1590
  %add1592 = add nsw i64 %mul1591, 1
  %shl1593 = shl i64 %add1592, 62
  %sub1594 = sub nsw i64 %shl1593, 1
  %mul1595 = mul nsw i64 %sub1594, 2
  %add1596 = add nsw i64 %mul1595, 1
  %sub1597 = sub nsw i64 %conv1587, %add1596
  br label %cond.end.1604

cond.false.1598:                                  ; preds = %cond.true.1569
  %414 = load i32, i32* %n, align 4
  %mul1599 = mul nsw i32 0, %414
  %conv1600 = sext i32 %mul1599 to i64
  %415 = load i64, i64* %bytes, align 8
  %add1601 = add nsw i64 %conv1600, %415
  %mul1602 = mul nsw i64 0, %add1601
  %add1603 = add nsw i64 %mul1602, 0
  br label %cond.end.1604

cond.end.1604:                                    ; preds = %cond.false.1598, %cond.true.1577
  %cond1605 = phi i64 [ %sub1597, %cond.true.1577 ], [ %add1603, %cond.false.1598 ]
  %416 = load i32, i32* %n, align 4
  %conv1606 = sext i32 %416 to i64
  %sub1607 = sub nsw i64 %cond1605, %conv1606
  %cmp1608 = icmp slt i64 %407, %sub1607
  br i1 %cmp1608, label %cond.true.1680, label %lor.lhs.false.1663

cond.false.1610:                                  ; preds = %cond.true.1566
  %417 = load i32, i32* %n, align 4
  %mul1611 = mul nsw i32 0, %417
  %conv1612 = sext i32 %mul1611 to i64
  %418 = load i64, i64* %bytes, align 8
  %add1613 = add nsw i64 %conv1612, %418
  %mul1614 = mul nsw i64 0, %add1613
  %sub1615 = sub nsw i64 %mul1614, 1
  %cmp1616 = icmp slt i64 %sub1615, 0
  br i1 %cmp1616, label %cond.true.1618, label %cond.false.1628

cond.true.1618:                                   ; preds = %cond.false.1610
  %419 = load i32, i32* %n, align 4
  %mul1619 = mul nsw i32 0, %419
  %conv1620 = sext i32 %mul1619 to i64
  %420 = load i64, i64* %bytes, align 8
  %add1621 = add nsw i64 %conv1620, %420
  %mul1622 = mul nsw i64 0, %add1621
  %add1623 = add nsw i64 %mul1622, 1
  %shl1624 = shl i64 %add1623, 62
  %sub1625 = sub nsw i64 %shl1624, 1
  %mul1626 = mul nsw i64 %sub1625, 2
  %add1627 = add nsw i64 %mul1626, 1
  br label %cond.end.1634

cond.false.1628:                                  ; preds = %cond.false.1610
  %421 = load i32, i32* %n, align 4
  %mul1629 = mul nsw i32 0, %421
  %conv1630 = sext i32 %mul1629 to i64
  %422 = load i64, i64* %bytes, align 8
  %add1631 = add nsw i64 %conv1630, %422
  %mul1632 = mul nsw i64 0, %add1631
  %sub1633 = sub nsw i64 %mul1632, 1
  br label %cond.end.1634

cond.end.1634:                                    ; preds = %cond.false.1628, %cond.true.1618
  %cond1635 = phi i64 [ %add1627, %cond.true.1618 ], [ %sub1633, %cond.false.1628 ]
  %423 = load i32, i32* %n, align 4
  %conv1636 = sext i32 %423 to i64
  %sub1637 = sub nsw i64 %cond1635, %conv1636
  %424 = load i64, i64* %bytes, align 8
  %cmp1638 = icmp slt i64 %sub1637, %424
  br i1 %cmp1638, label %cond.true.1680, label %lor.lhs.false.1663

cond.false.1640:                                  ; preds = %cond.end.1562
  %425 = load i64, i64* %bytes, align 8
  %cmp1641 = icmp slt i64 %425, 0
  br i1 %cmp1641, label %cond.true.1643, label %cond.false.1649

cond.true.1643:                                   ; preds = %cond.false.1640
  %426 = load i32, i32* %n, align 4
  %conv1644 = sext i32 %426 to i64
  %427 = load i64, i64* %bytes, align 8
  %428 = load i32, i32* %n, align 4
  %conv1645 = sext i32 %428 to i64
  %add1646 = add nsw i64 %427, %conv1645
  %cmp1647 = icmp sle i64 %conv1644, %add1646
  br i1 %cmp1647, label %cond.true.1680, label %lor.lhs.false.1663

cond.false.1649:                                  ; preds = %cond.false.1640
  %429 = load i32, i32* %n, align 4
  %cmp1650 = icmp slt i32 %429, 0
  br i1 %cmp1650, label %cond.true.1652, label %cond.false.1657

cond.true.1652:                                   ; preds = %cond.false.1649
  %430 = load i64, i64* %bytes, align 8
  %431 = load i64, i64* %bytes, align 8
  %432 = load i32, i32* %n, align 4
  %conv1653 = sext i32 %432 to i64
  %add1654 = add nsw i64 %431, %conv1653
  %cmp1655 = icmp sle i64 %430, %add1654
  br i1 %cmp1655, label %cond.true.1680, label %lor.lhs.false.1663

cond.false.1657:                                  ; preds = %cond.false.1649
  %433 = load i64, i64* %bytes, align 8
  %434 = load i32, i32* %n, align 4
  %conv1658 = sext i32 %434 to i64
  %add1659 = add nsw i64 %433, %conv1658
  %435 = load i32, i32* %n, align 4
  %conv1660 = sext i32 %435 to i64
  %cmp1661 = icmp slt i64 %add1659, %conv1660
  br i1 %cmp1661, label %cond.true.1680, label %lor.lhs.false.1663

lor.lhs.false.1663:                               ; preds = %cond.false.1657, %cond.true.1652, %cond.true.1643, %cond.end.1634, %cond.end.1604
  %436 = load i64, i64* %bytes, align 8
  %437 = load i32, i32* %n, align 4
  %conv1664 = sext i32 %437 to i64
  %add1665 = add nsw i64 %436, %conv1664
  %mul1666 = mul nsw i64 0, %add1665
  %sub1667 = sub nsw i64 %mul1666, 1
  %cmp1668 = icmp slt i64 %sub1667, 0
  br i1 %cmp1668, label %land.lhs.true.1670, label %lor.lhs.false.1675

land.lhs.true.1670:                               ; preds = %lor.lhs.false.1663
  %438 = load i64, i64* %bytes, align 8
  %439 = load i32, i32* %n, align 4
  %conv1671 = sext i32 %439 to i64
  %add1672 = add nsw i64 %438, %conv1671
  %cmp1673 = icmp slt i64 %add1672, -9223372036854775808
  br i1 %cmp1673, label %cond.true.1680, label %lor.lhs.false.1675

lor.lhs.false.1675:                               ; preds = %land.lhs.true.1670, %lor.lhs.false.1663
  %440 = load i64, i64* %bytes, align 8
  %441 = load i32, i32* %n, align 4
  %conv1676 = sext i32 %441 to i64
  %add1677 = add nsw i64 %440, %conv1676
  %cmp1678 = icmp slt i64 9223372036854775807, %add1677
  br i1 %cmp1678, label %cond.true.1680, label %cond.false.1695

cond.true.1680:                                   ; preds = %lor.lhs.false.1675, %land.lhs.true.1670, %cond.false.1657, %cond.true.1652, %cond.true.1643, %cond.end.1634, %cond.end.1604
  %442 = load i64, i64* %bytes, align 8
  %443 = load i32, i32* %n, align 4
  %conv1681 = sext i32 %443 to i64
  %add1682 = add i64 %442, %conv1681
  %cmp1683 = icmp ule i64 %add1682, 9223372036854775807
  br i1 %cmp1683, label %cond.true.1685, label %cond.false.1688

cond.true.1685:                                   ; preds = %cond.true.1680
  %444 = load i64, i64* %bytes, align 8
  %445 = load i32, i32* %n, align 4
  %conv1686 = sext i32 %445 to i64
  %add1687 = add i64 %444, %conv1686
  br label %cond.end.1693

cond.false.1688:                                  ; preds = %cond.true.1680
  %446 = load i64, i64* %bytes, align 8
  %447 = load i32, i32* %n, align 4
  %conv1689 = sext i32 %447 to i64
  %add1690 = add i64 %446, %conv1689
  %sub1691 = sub i64 %add1690, -9223372036854775808
  %add1692 = add nsw i64 %sub1691, -9223372036854775808
  br label %cond.end.1693

cond.end.1693:                                    ; preds = %cond.false.1688, %cond.true.1685
  %cond1694 = phi i64 [ %add1687, %cond.true.1685 ], [ %add1692, %cond.false.1688 ]
  store i64 %cond1694, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1695:                                  ; preds = %lor.lhs.false.1675
  %448 = load i64, i64* %bytes, align 8
  %449 = load i32, i32* %n, align 4
  %conv1696 = sext i32 %449 to i64
  %add1697 = add i64 %448, %conv1696
  %cmp1698 = icmp ule i64 %add1697, 9223372036854775807
  br i1 %cmp1698, label %cond.true.1700, label %cond.false.1703

cond.true.1700:                                   ; preds = %cond.false.1695
  %450 = load i64, i64* %bytes, align 8
  %451 = load i32, i32* %n, align 4
  %conv1701 = sext i32 %451 to i64
  %add1702 = add i64 %450, %conv1701
  br label %cond.end.1708

cond.false.1703:                                  ; preds = %cond.false.1695
  %452 = load i64, i64* %bytes, align 8
  %453 = load i32, i32* %n, align 4
  %conv1704 = sext i32 %453 to i64
  %add1705 = add i64 %452, %conv1704
  %sub1706 = sub i64 %add1705, -9223372036854775808
  %add1707 = add nsw i64 %sub1706, -9223372036854775808
  br label %cond.end.1708

cond.end.1708:                                    ; preds = %cond.false.1703, %cond.true.1700
  %cond1709 = phi i64 [ %add1702, %cond.true.1700 ], [ %add1707, %cond.false.1703 ]
  store i64 %cond1709, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1710:                                  ; preds = %cond.false.1340
  br i1 false, label %cond.true.1711, label %cond.false.1896

cond.true.1711:                                   ; preds = %cond.false.1710
  %454 = load i32, i32* %n, align 4
  %conv1712 = sext i32 %454 to i64
  %mul1713 = mul nsw i64 0, %conv1712
  %455 = load i64, i64* %bytes, align 8
  %add1714 = add nsw i64 %mul1713, %455
  %mul1715 = mul nsw i64 0, %add1714
  %sub1716 = sub nsw i64 %mul1715, 1
  %cmp1717 = icmp slt i64 %sub1716, 0
  br i1 %cmp1717, label %cond.true.1719, label %cond.false.1740

cond.true.1719:                                   ; preds = %cond.true.1711
  %456 = load i32, i32* %n, align 4
  %conv1720 = sext i32 %456 to i64
  %mul1721 = mul nsw i64 0, %conv1720
  %457 = load i64, i64* %bytes, align 8
  %add1722 = add nsw i64 %mul1721, %457
  %mul1723 = mul nsw i64 0, %add1722
  %add1724 = add nsw i64 %mul1723, 0
  %neg1725 = xor i64 %add1724, -1
  %cmp1726 = icmp eq i64 %neg1725, -1
  %conv1727 = zext i1 %cmp1726 to i32
  %sub1728 = sub nsw i32 0, %conv1727
  %conv1729 = sext i32 %sub1728 to i64
  %458 = load i32, i32* %n, align 4
  %conv1730 = sext i32 %458 to i64
  %mul1731 = mul nsw i64 0, %conv1730
  %459 = load i64, i64* %bytes, align 8
  %add1732 = add nsw i64 %mul1731, %459
  %mul1733 = mul nsw i64 0, %add1732
  %add1734 = add nsw i64 %mul1733, 1
  %shl1735 = shl i64 %add1734, 62
  %sub1736 = sub nsw i64 %shl1735, 1
  %mul1737 = mul nsw i64 %sub1736, 2
  %add1738 = add nsw i64 %mul1737, 1
  %sub1739 = sub nsw i64 %conv1729, %add1738
  br label %cond.end.1746

cond.false.1740:                                  ; preds = %cond.true.1711
  %460 = load i32, i32* %n, align 4
  %conv1741 = sext i32 %460 to i64
  %mul1742 = mul nsw i64 0, %conv1741
  %461 = load i64, i64* %bytes, align 8
  %add1743 = add nsw i64 %mul1742, %461
  %mul1744 = mul nsw i64 0, %add1743
  %add1745 = add nsw i64 %mul1744, 0
  br label %cond.end.1746

cond.end.1746:                                    ; preds = %cond.false.1740, %cond.true.1719
  %cond1747 = phi i64 [ %sub1739, %cond.true.1719 ], [ %add1745, %cond.false.1740 ]
  %cmp1748 = icmp slt i64 %cond1747, 0
  br i1 %cmp1748, label %cond.true.1750, label %cond.false.1825

cond.true.1750:                                   ; preds = %cond.end.1746
  %462 = load i32, i32* %n, align 4
  %conv1751 = sext i32 %462 to i64
  %cmp1752 = icmp slt i64 %conv1751, 0
  br i1 %cmp1752, label %cond.true.1754, label %cond.false.1795

cond.true.1754:                                   ; preds = %cond.true.1750
  %463 = load i64, i64* %bytes, align 8
  %464 = load i32, i32* %n, align 4
  %conv1755 = sext i32 %464 to i64
  %mul1756 = mul nsw i64 0, %conv1755
  %465 = load i64, i64* %bytes, align 8
  %add1757 = add nsw i64 %mul1756, %465
  %mul1758 = mul nsw i64 0, %add1757
  %sub1759 = sub nsw i64 %mul1758, 1
  %cmp1760 = icmp slt i64 %sub1759, 0
  br i1 %cmp1760, label %cond.true.1762, label %cond.false.1783

cond.true.1762:                                   ; preds = %cond.true.1754
  %466 = load i32, i32* %n, align 4
  %conv1763 = sext i32 %466 to i64
  %mul1764 = mul nsw i64 0, %conv1763
  %467 = load i64, i64* %bytes, align 8
  %add1765 = add nsw i64 %mul1764, %467
  %mul1766 = mul nsw i64 0, %add1765
  %add1767 = add nsw i64 %mul1766, 0
  %neg1768 = xor i64 %add1767, -1
  %cmp1769 = icmp eq i64 %neg1768, -1
  %conv1770 = zext i1 %cmp1769 to i32
  %sub1771 = sub nsw i32 0, %conv1770
  %conv1772 = sext i32 %sub1771 to i64
  %468 = load i32, i32* %n, align 4
  %conv1773 = sext i32 %468 to i64
  %mul1774 = mul nsw i64 0, %conv1773
  %469 = load i64, i64* %bytes, align 8
  %add1775 = add nsw i64 %mul1774, %469
  %mul1776 = mul nsw i64 0, %add1775
  %add1777 = add nsw i64 %mul1776, 1
  %shl1778 = shl i64 %add1777, 62
  %sub1779 = sub nsw i64 %shl1778, 1
  %mul1780 = mul nsw i64 %sub1779, 2
  %add1781 = add nsw i64 %mul1780, 1
  %sub1782 = sub nsw i64 %conv1772, %add1781
  br label %cond.end.1789

cond.false.1783:                                  ; preds = %cond.true.1754
  %470 = load i32, i32* %n, align 4
  %conv1784 = sext i32 %470 to i64
  %mul1785 = mul nsw i64 0, %conv1784
  %471 = load i64, i64* %bytes, align 8
  %add1786 = add nsw i64 %mul1785, %471
  %mul1787 = mul nsw i64 0, %add1786
  %add1788 = add nsw i64 %mul1787, 0
  br label %cond.end.1789

cond.end.1789:                                    ; preds = %cond.false.1783, %cond.true.1762
  %cond1790 = phi i64 [ %sub1782, %cond.true.1762 ], [ %add1788, %cond.false.1783 ]
  %472 = load i32, i32* %n, align 4
  %conv1791 = sext i32 %472 to i64
  %sub1792 = sub nsw i64 %cond1790, %conv1791
  %cmp1793 = icmp slt i64 %463, %sub1792
  br i1 %cmp1793, label %cond.true.1866, label %lor.lhs.false.1849

cond.false.1795:                                  ; preds = %cond.true.1750
  %473 = load i32, i32* %n, align 4
  %conv1796 = sext i32 %473 to i64
  %mul1797 = mul nsw i64 0, %conv1796
  %474 = load i64, i64* %bytes, align 8
  %add1798 = add nsw i64 %mul1797, %474
  %mul1799 = mul nsw i64 0, %add1798
  %sub1800 = sub nsw i64 %mul1799, 1
  %cmp1801 = icmp slt i64 %sub1800, 0
  br i1 %cmp1801, label %cond.true.1803, label %cond.false.1813

cond.true.1803:                                   ; preds = %cond.false.1795
  %475 = load i32, i32* %n, align 4
  %conv1804 = sext i32 %475 to i64
  %mul1805 = mul nsw i64 0, %conv1804
  %476 = load i64, i64* %bytes, align 8
  %add1806 = add nsw i64 %mul1805, %476
  %mul1807 = mul nsw i64 0, %add1806
  %add1808 = add nsw i64 %mul1807, 1
  %shl1809 = shl i64 %add1808, 62
  %sub1810 = sub nsw i64 %shl1809, 1
  %mul1811 = mul nsw i64 %sub1810, 2
  %add1812 = add nsw i64 %mul1811, 1
  br label %cond.end.1819

cond.false.1813:                                  ; preds = %cond.false.1795
  %477 = load i32, i32* %n, align 4
  %conv1814 = sext i32 %477 to i64
  %mul1815 = mul nsw i64 0, %conv1814
  %478 = load i64, i64* %bytes, align 8
  %add1816 = add nsw i64 %mul1815, %478
  %mul1817 = mul nsw i64 0, %add1816
  %sub1818 = sub nsw i64 %mul1817, 1
  br label %cond.end.1819

cond.end.1819:                                    ; preds = %cond.false.1813, %cond.true.1803
  %cond1820 = phi i64 [ %add1812, %cond.true.1803 ], [ %sub1818, %cond.false.1813 ]
  %479 = load i32, i32* %n, align 4
  %conv1821 = sext i32 %479 to i64
  %sub1822 = sub nsw i64 %cond1820, %conv1821
  %480 = load i64, i64* %bytes, align 8
  %cmp1823 = icmp slt i64 %sub1822, %480
  br i1 %cmp1823, label %cond.true.1866, label %lor.lhs.false.1849

cond.false.1825:                                  ; preds = %cond.end.1746
  %481 = load i64, i64* %bytes, align 8
  %cmp1826 = icmp slt i64 %481, 0
  br i1 %cmp1826, label %cond.true.1828, label %cond.false.1834

cond.true.1828:                                   ; preds = %cond.false.1825
  %482 = load i32, i32* %n, align 4
  %conv1829 = sext i32 %482 to i64
  %483 = load i64, i64* %bytes, align 8
  %484 = load i32, i32* %n, align 4
  %conv1830 = sext i32 %484 to i64
  %add1831 = add nsw i64 %483, %conv1830
  %cmp1832 = icmp sle i64 %conv1829, %add1831
  br i1 %cmp1832, label %cond.true.1866, label %lor.lhs.false.1849

cond.false.1834:                                  ; preds = %cond.false.1825
  %485 = load i32, i32* %n, align 4
  %conv1835 = sext i32 %485 to i64
  %cmp1836 = icmp slt i64 %conv1835, 0
  br i1 %cmp1836, label %cond.true.1838, label %cond.false.1843

cond.true.1838:                                   ; preds = %cond.false.1834
  %486 = load i64, i64* %bytes, align 8
  %487 = load i64, i64* %bytes, align 8
  %488 = load i32, i32* %n, align 4
  %conv1839 = sext i32 %488 to i64
  %add1840 = add nsw i64 %487, %conv1839
  %cmp1841 = icmp sle i64 %486, %add1840
  br i1 %cmp1841, label %cond.true.1866, label %lor.lhs.false.1849

cond.false.1843:                                  ; preds = %cond.false.1834
  %489 = load i64, i64* %bytes, align 8
  %490 = load i32, i32* %n, align 4
  %conv1844 = sext i32 %490 to i64
  %add1845 = add nsw i64 %489, %conv1844
  %491 = load i32, i32* %n, align 4
  %conv1846 = sext i32 %491 to i64
  %cmp1847 = icmp slt i64 %add1845, %conv1846
  br i1 %cmp1847, label %cond.true.1866, label %lor.lhs.false.1849

lor.lhs.false.1849:                               ; preds = %cond.false.1843, %cond.true.1838, %cond.true.1828, %cond.end.1819, %cond.end.1789
  %492 = load i64, i64* %bytes, align 8
  %493 = load i32, i32* %n, align 4
  %conv1850 = sext i32 %493 to i64
  %add1851 = add nsw i64 %492, %conv1850
  %mul1852 = mul nsw i64 0, %add1851
  %sub1853 = sub nsw i64 %mul1852, 1
  %cmp1854 = icmp slt i64 %sub1853, 0
  br i1 %cmp1854, label %land.lhs.true.1856, label %lor.lhs.false.1861

land.lhs.true.1856:                               ; preds = %lor.lhs.false.1849
  %494 = load i64, i64* %bytes, align 8
  %495 = load i32, i32* %n, align 4
  %conv1857 = sext i32 %495 to i64
  %add1858 = add nsw i64 %494, %conv1857
  %cmp1859 = icmp slt i64 %add1858, -9223372036854775808
  br i1 %cmp1859, label %cond.true.1866, label %lor.lhs.false.1861

lor.lhs.false.1861:                               ; preds = %land.lhs.true.1856, %lor.lhs.false.1849
  %496 = load i64, i64* %bytes, align 8
  %497 = load i32, i32* %n, align 4
  %conv1862 = sext i32 %497 to i64
  %add1863 = add nsw i64 %496, %conv1862
  %cmp1864 = icmp slt i64 9223372036854775807, %add1863
  br i1 %cmp1864, label %cond.true.1866, label %cond.false.1881

cond.true.1866:                                   ; preds = %lor.lhs.false.1861, %land.lhs.true.1856, %cond.false.1843, %cond.true.1838, %cond.true.1828, %cond.end.1819, %cond.end.1789
  %498 = load i64, i64* %bytes, align 8
  %499 = load i32, i32* %n, align 4
  %conv1867 = sext i32 %499 to i64
  %add1868 = add i64 %498, %conv1867
  %cmp1869 = icmp ule i64 %add1868, 9223372036854775807
  br i1 %cmp1869, label %cond.true.1871, label %cond.false.1874

cond.true.1871:                                   ; preds = %cond.true.1866
  %500 = load i64, i64* %bytes, align 8
  %501 = load i32, i32* %n, align 4
  %conv1872 = sext i32 %501 to i64
  %add1873 = add i64 %500, %conv1872
  br label %cond.end.1879

cond.false.1874:                                  ; preds = %cond.true.1866
  %502 = load i64, i64* %bytes, align 8
  %503 = load i32, i32* %n, align 4
  %conv1875 = sext i32 %503 to i64
  %add1876 = add i64 %502, %conv1875
  %sub1877 = sub i64 %add1876, -9223372036854775808
  %add1878 = add nsw i64 %sub1877, -9223372036854775808
  br label %cond.end.1879

cond.end.1879:                                    ; preds = %cond.false.1874, %cond.true.1871
  %cond1880 = phi i64 [ %add1873, %cond.true.1871 ], [ %add1878, %cond.false.1874 ]
  store i64 %cond1880, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.1881:                                  ; preds = %lor.lhs.false.1861
  %504 = load i64, i64* %bytes, align 8
  %505 = load i32, i32* %n, align 4
  %conv1882 = sext i32 %505 to i64
  %add1883 = add i64 %504, %conv1882
  %cmp1884 = icmp ule i64 %add1883, 9223372036854775807
  br i1 %cmp1884, label %cond.true.1886, label %cond.false.1889

cond.true.1886:                                   ; preds = %cond.false.1881
  %506 = load i64, i64* %bytes, align 8
  %507 = load i32, i32* %n, align 4
  %conv1887 = sext i32 %507 to i64
  %add1888 = add i64 %506, %conv1887
  br label %cond.end.1894

cond.false.1889:                                  ; preds = %cond.false.1881
  %508 = load i64, i64* %bytes, align 8
  %509 = load i32, i32* %n, align 4
  %conv1890 = sext i32 %509 to i64
  %add1891 = add i64 %508, %conv1890
  %sub1892 = sub i64 %add1891, -9223372036854775808
  %add1893 = add nsw i64 %sub1892, -9223372036854775808
  br label %cond.end.1894

cond.end.1894:                                    ; preds = %cond.false.1889, %cond.true.1886
  %cond1895 = phi i64 [ %add1888, %cond.true.1886 ], [ %add1893, %cond.false.1889 ]
  store i64 %cond1895, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

cond.false.1896:                                  ; preds = %cond.false.1710
  %510 = load i32, i32* %n, align 4
  %mul1897 = mul nsw i32 0, %510
  %conv1898 = sext i32 %mul1897 to i64
  %511 = load i64, i64* %bytes, align 8
  %add1899 = add nsw i64 %conv1898, %511
  %mul1900 = mul nsw i64 0, %add1899
  %sub1901 = sub nsw i64 %mul1900, 1
  %cmp1902 = icmp slt i64 %sub1901, 0
  br i1 %cmp1902, label %cond.true.1904, label %cond.false.1925

cond.true.1904:                                   ; preds = %cond.false.1896
  %512 = load i32, i32* %n, align 4
  %mul1905 = mul nsw i32 0, %512
  %conv1906 = sext i32 %mul1905 to i64
  %513 = load i64, i64* %bytes, align 8
  %add1907 = add nsw i64 %conv1906, %513
  %mul1908 = mul nsw i64 0, %add1907
  %add1909 = add nsw i64 %mul1908, 0
  %neg1910 = xor i64 %add1909, -1
  %cmp1911 = icmp eq i64 %neg1910, -1
  %conv1912 = zext i1 %cmp1911 to i32
  %sub1913 = sub nsw i32 0, %conv1912
  %conv1914 = sext i32 %sub1913 to i64
  %514 = load i32, i32* %n, align 4
  %mul1915 = mul nsw i32 0, %514
  %conv1916 = sext i32 %mul1915 to i64
  %515 = load i64, i64* %bytes, align 8
  %add1917 = add nsw i64 %conv1916, %515
  %mul1918 = mul nsw i64 0, %add1917
  %add1919 = add nsw i64 %mul1918, 1
  %shl1920 = shl i64 %add1919, 62
  %sub1921 = sub nsw i64 %shl1920, 1
  %mul1922 = mul nsw i64 %sub1921, 2
  %add1923 = add nsw i64 %mul1922, 1
  %sub1924 = sub nsw i64 %conv1914, %add1923
  br label %cond.end.1931

cond.false.1925:                                  ; preds = %cond.false.1896
  %516 = load i32, i32* %n, align 4
  %mul1926 = mul nsw i32 0, %516
  %conv1927 = sext i32 %mul1926 to i64
  %517 = load i64, i64* %bytes, align 8
  %add1928 = add nsw i64 %conv1927, %517
  %mul1929 = mul nsw i64 0, %add1928
  %add1930 = add nsw i64 %mul1929, 0
  br label %cond.end.1931

cond.end.1931:                                    ; preds = %cond.false.1925, %cond.true.1904
  %cond1932 = phi i64 [ %sub1924, %cond.true.1904 ], [ %add1930, %cond.false.1925 ]
  %cmp1933 = icmp slt i64 %cond1932, 0
  br i1 %cmp1933, label %cond.true.1935, label %cond.false.2009

cond.true.1935:                                   ; preds = %cond.end.1931
  %518 = load i32, i32* %n, align 4
  %cmp1936 = icmp slt i32 %518, 0
  br i1 %cmp1936, label %cond.true.1938, label %cond.false.1979

cond.true.1938:                                   ; preds = %cond.true.1935
  %519 = load i64, i64* %bytes, align 8
  %520 = load i32, i32* %n, align 4
  %mul1939 = mul nsw i32 0, %520
  %conv1940 = sext i32 %mul1939 to i64
  %521 = load i64, i64* %bytes, align 8
  %add1941 = add nsw i64 %conv1940, %521
  %mul1942 = mul nsw i64 0, %add1941
  %sub1943 = sub nsw i64 %mul1942, 1
  %cmp1944 = icmp slt i64 %sub1943, 0
  br i1 %cmp1944, label %cond.true.1946, label %cond.false.1967

cond.true.1946:                                   ; preds = %cond.true.1938
  %522 = load i32, i32* %n, align 4
  %mul1947 = mul nsw i32 0, %522
  %conv1948 = sext i32 %mul1947 to i64
  %523 = load i64, i64* %bytes, align 8
  %add1949 = add nsw i64 %conv1948, %523
  %mul1950 = mul nsw i64 0, %add1949
  %add1951 = add nsw i64 %mul1950, 0
  %neg1952 = xor i64 %add1951, -1
  %cmp1953 = icmp eq i64 %neg1952, -1
  %conv1954 = zext i1 %cmp1953 to i32
  %sub1955 = sub nsw i32 0, %conv1954
  %conv1956 = sext i32 %sub1955 to i64
  %524 = load i32, i32* %n, align 4
  %mul1957 = mul nsw i32 0, %524
  %conv1958 = sext i32 %mul1957 to i64
  %525 = load i64, i64* %bytes, align 8
  %add1959 = add nsw i64 %conv1958, %525
  %mul1960 = mul nsw i64 0, %add1959
  %add1961 = add nsw i64 %mul1960, 1
  %shl1962 = shl i64 %add1961, 62
  %sub1963 = sub nsw i64 %shl1962, 1
  %mul1964 = mul nsw i64 %sub1963, 2
  %add1965 = add nsw i64 %mul1964, 1
  %sub1966 = sub nsw i64 %conv1956, %add1965
  br label %cond.end.1973

cond.false.1967:                                  ; preds = %cond.true.1938
  %526 = load i32, i32* %n, align 4
  %mul1968 = mul nsw i32 0, %526
  %conv1969 = sext i32 %mul1968 to i64
  %527 = load i64, i64* %bytes, align 8
  %add1970 = add nsw i64 %conv1969, %527
  %mul1971 = mul nsw i64 0, %add1970
  %add1972 = add nsw i64 %mul1971, 0
  br label %cond.end.1973

cond.end.1973:                                    ; preds = %cond.false.1967, %cond.true.1946
  %cond1974 = phi i64 [ %sub1966, %cond.true.1946 ], [ %add1972, %cond.false.1967 ]
  %528 = load i32, i32* %n, align 4
  %conv1975 = sext i32 %528 to i64
  %sub1976 = sub nsw i64 %cond1974, %conv1975
  %cmp1977 = icmp slt i64 %519, %sub1976
  br i1 %cmp1977, label %cond.true.2049, label %lor.lhs.false.2032

cond.false.1979:                                  ; preds = %cond.true.1935
  %529 = load i32, i32* %n, align 4
  %mul1980 = mul nsw i32 0, %529
  %conv1981 = sext i32 %mul1980 to i64
  %530 = load i64, i64* %bytes, align 8
  %add1982 = add nsw i64 %conv1981, %530
  %mul1983 = mul nsw i64 0, %add1982
  %sub1984 = sub nsw i64 %mul1983, 1
  %cmp1985 = icmp slt i64 %sub1984, 0
  br i1 %cmp1985, label %cond.true.1987, label %cond.false.1997

cond.true.1987:                                   ; preds = %cond.false.1979
  %531 = load i32, i32* %n, align 4
  %mul1988 = mul nsw i32 0, %531
  %conv1989 = sext i32 %mul1988 to i64
  %532 = load i64, i64* %bytes, align 8
  %add1990 = add nsw i64 %conv1989, %532
  %mul1991 = mul nsw i64 0, %add1990
  %add1992 = add nsw i64 %mul1991, 1
  %shl1993 = shl i64 %add1992, 62
  %sub1994 = sub nsw i64 %shl1993, 1
  %mul1995 = mul nsw i64 %sub1994, 2
  %add1996 = add nsw i64 %mul1995, 1
  br label %cond.end.2003

cond.false.1997:                                  ; preds = %cond.false.1979
  %533 = load i32, i32* %n, align 4
  %mul1998 = mul nsw i32 0, %533
  %conv1999 = sext i32 %mul1998 to i64
  %534 = load i64, i64* %bytes, align 8
  %add2000 = add nsw i64 %conv1999, %534
  %mul2001 = mul nsw i64 0, %add2000
  %sub2002 = sub nsw i64 %mul2001, 1
  br label %cond.end.2003

cond.end.2003:                                    ; preds = %cond.false.1997, %cond.true.1987
  %cond2004 = phi i64 [ %add1996, %cond.true.1987 ], [ %sub2002, %cond.false.1997 ]
  %535 = load i32, i32* %n, align 4
  %conv2005 = sext i32 %535 to i64
  %sub2006 = sub nsw i64 %cond2004, %conv2005
  %536 = load i64, i64* %bytes, align 8
  %cmp2007 = icmp slt i64 %sub2006, %536
  br i1 %cmp2007, label %cond.true.2049, label %lor.lhs.false.2032

cond.false.2009:                                  ; preds = %cond.end.1931
  %537 = load i64, i64* %bytes, align 8
  %cmp2010 = icmp slt i64 %537, 0
  br i1 %cmp2010, label %cond.true.2012, label %cond.false.2018

cond.true.2012:                                   ; preds = %cond.false.2009
  %538 = load i32, i32* %n, align 4
  %conv2013 = sext i32 %538 to i64
  %539 = load i64, i64* %bytes, align 8
  %540 = load i32, i32* %n, align 4
  %conv2014 = sext i32 %540 to i64
  %add2015 = add nsw i64 %539, %conv2014
  %cmp2016 = icmp sle i64 %conv2013, %add2015
  br i1 %cmp2016, label %cond.true.2049, label %lor.lhs.false.2032

cond.false.2018:                                  ; preds = %cond.false.2009
  %541 = load i32, i32* %n, align 4
  %cmp2019 = icmp slt i32 %541, 0
  br i1 %cmp2019, label %cond.true.2021, label %cond.false.2026

cond.true.2021:                                   ; preds = %cond.false.2018
  %542 = load i64, i64* %bytes, align 8
  %543 = load i64, i64* %bytes, align 8
  %544 = load i32, i32* %n, align 4
  %conv2022 = sext i32 %544 to i64
  %add2023 = add nsw i64 %543, %conv2022
  %cmp2024 = icmp sle i64 %542, %add2023
  br i1 %cmp2024, label %cond.true.2049, label %lor.lhs.false.2032

cond.false.2026:                                  ; preds = %cond.false.2018
  %545 = load i64, i64* %bytes, align 8
  %546 = load i32, i32* %n, align 4
  %conv2027 = sext i32 %546 to i64
  %add2028 = add nsw i64 %545, %conv2027
  %547 = load i32, i32* %n, align 4
  %conv2029 = sext i32 %547 to i64
  %cmp2030 = icmp slt i64 %add2028, %conv2029
  br i1 %cmp2030, label %cond.true.2049, label %lor.lhs.false.2032

lor.lhs.false.2032:                               ; preds = %cond.false.2026, %cond.true.2021, %cond.true.2012, %cond.end.2003, %cond.end.1973
  %548 = load i64, i64* %bytes, align 8
  %549 = load i32, i32* %n, align 4
  %conv2033 = sext i32 %549 to i64
  %add2034 = add nsw i64 %548, %conv2033
  %mul2035 = mul nsw i64 0, %add2034
  %sub2036 = sub nsw i64 %mul2035, 1
  %cmp2037 = icmp slt i64 %sub2036, 0
  br i1 %cmp2037, label %land.lhs.true.2039, label %lor.lhs.false.2044

land.lhs.true.2039:                               ; preds = %lor.lhs.false.2032
  %550 = load i64, i64* %bytes, align 8
  %551 = load i32, i32* %n, align 4
  %conv2040 = sext i32 %551 to i64
  %add2041 = add nsw i64 %550, %conv2040
  %cmp2042 = icmp slt i64 %add2041, -9223372036854775808
  br i1 %cmp2042, label %cond.true.2049, label %lor.lhs.false.2044

lor.lhs.false.2044:                               ; preds = %land.lhs.true.2039, %lor.lhs.false.2032
  %552 = load i64, i64* %bytes, align 8
  %553 = load i32, i32* %n, align 4
  %conv2045 = sext i32 %553 to i64
  %add2046 = add nsw i64 %552, %conv2045
  %cmp2047 = icmp slt i64 9223372036854775807, %add2046
  br i1 %cmp2047, label %cond.true.2049, label %cond.false.2064

cond.true.2049:                                   ; preds = %lor.lhs.false.2044, %land.lhs.true.2039, %cond.false.2026, %cond.true.2021, %cond.true.2012, %cond.end.2003, %cond.end.1973
  %554 = load i64, i64* %bytes, align 8
  %555 = load i32, i32* %n, align 4
  %conv2050 = sext i32 %555 to i64
  %add2051 = add i64 %554, %conv2050
  %cmp2052 = icmp ule i64 %add2051, 9223372036854775807
  br i1 %cmp2052, label %cond.true.2054, label %cond.false.2057

cond.true.2054:                                   ; preds = %cond.true.2049
  %556 = load i64, i64* %bytes, align 8
  %557 = load i32, i32* %n, align 4
  %conv2055 = sext i32 %557 to i64
  %add2056 = add i64 %556, %conv2055
  br label %cond.end.2062

cond.false.2057:                                  ; preds = %cond.true.2049
  %558 = load i64, i64* %bytes, align 8
  %559 = load i32, i32* %n, align 4
  %conv2058 = sext i32 %559 to i64
  %add2059 = add i64 %558, %conv2058
  %sub2060 = sub i64 %add2059, -9223372036854775808
  %add2061 = add nsw i64 %sub2060, -9223372036854775808
  br label %cond.end.2062

cond.end.2062:                                    ; preds = %cond.false.2057, %cond.true.2054
  %cond2063 = phi i64 [ %add2056, %cond.true.2054 ], [ %add2061, %cond.false.2057 ]
  store i64 %cond2063, i64* %bytes, align 8
  br i1 true, label %if.then, label %if.end

cond.false.2064:                                  ; preds = %lor.lhs.false.2044
  %560 = load i64, i64* %bytes, align 8
  %561 = load i32, i32* %n, align 4
  %conv2065 = sext i32 %561 to i64
  %add2066 = add i64 %560, %conv2065
  %cmp2067 = icmp ule i64 %add2066, 9223372036854775807
  br i1 %cmp2067, label %cond.true.2069, label %cond.false.2072

cond.true.2069:                                   ; preds = %cond.false.2064
  %562 = load i64, i64* %bytes, align 8
  %563 = load i32, i32* %n, align 4
  %conv2070 = sext i32 %563 to i64
  %add2071 = add i64 %562, %conv2070
  br label %cond.end.2077

cond.false.2072:                                  ; preds = %cond.false.2064
  %564 = load i64, i64* %bytes, align 8
  %565 = load i32, i32* %n, align 4
  %conv2073 = sext i32 %565 to i64
  %add2074 = add i64 %564, %conv2073
  %sub2075 = sub i64 %add2074, -9223372036854775808
  %add2076 = add nsw i64 %sub2075, -9223372036854775808
  br label %cond.end.2077

cond.end.2077:                                    ; preds = %cond.false.2072, %cond.true.2069
  %cond2078 = phi i64 [ %add2071, %cond.true.2069 ], [ %add2076, %cond.false.2072 ]
  store i64 %cond2078, i64* %bytes, align 8
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.2077, %cond.end.2062, %cond.end.1894, %cond.end.1879, %cond.end.1708, %cond.end.1693, %cond.end.1525, %cond.end.1510, %cond.end.1337, %cond.end.1321, %cond.end.1152, %cond.end.1136, %cond.end.967, %cond.end.938, %cond.end.756, %cond.end.727, %cond.end.478, %cond.end.449, %cond.end.267, %cond.end.238
  call void @string_overflow() #7
  unreachable

if.end:                                           ; preds = %cond.end.2077, %cond.end.2062, %cond.end.1894, %cond.end.1879, %cond.end.1708, %cond.end.1693, %cond.end.1525, %cond.end.1510, %cond.end.1337, %cond.end.1321, %cond.end.1152, %cond.end.1136, %cond.end.967, %cond.end.938, %cond.end.756, %cond.end.727, %cond.end.478, %cond.end.449, %cond.end.267, %cond.end.238
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %566 = load i8*, i8** %str.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %566, i32 1
  store i8* %incdec.ptr, i8** %str.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %567 = load i64, i64* %bytes, align 8
  ret i64 %567
}

; Function Attrs: nounwind uwtable
define i64 @str_to_multibyte(i8* %str, i64 %len, i64 %bytes) #1 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %bytes.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %endp = alloca i8*, align 8
  %to = alloca i8*, align 8
  %c = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 %bytes, i64* %bytes.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = load i8*, i8** %str.addr, align 8
  %2 = load i64, i64* %bytes.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %add.ptr, i8** %endp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %3 = load i8*, i8** %p, align 8
  %4 = load i8*, i8** %endp, align 8
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i8*, i8** %p, align 8
  %6 = load i8, i8* %5, align 1
  %conv = zext i8 %6 to i32
  %cmp1 = icmp slt i32 %conv, 128
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i8*, i8** %p, align 8
  %10 = load i8*, i8** %endp, align 8
  %cmp3 = icmp eq i8* %9, %10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %11 = load i64, i64* %bytes.addr, align 8
  store i64 %11, i64* %retval
  br label %return

if.end:                                           ; preds = %while.end
  %12 = load i8*, i8** %p, align 8
  store i8* %12, i8** %to, align 8
  %13 = load i8*, i8** %endp, align 8
  %14 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %bytes.addr, align 8
  %15 = load i8*, i8** %str.addr, align 8
  %16 = load i64, i64* %len.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %16
  store i8* %add.ptr5, i8** %endp, align 8
  %17 = load i8*, i8** %endp, align 8
  %18 = load i64, i64* %bytes.addr, align 8
  %idx.neg = sub i64 0, %18
  %add.ptr6 = getelementptr inbounds i8, i8* %17, i64 %idx.neg
  %19 = load i8*, i8** %p, align 8
  %20 = load i64, i64* %bytes.addr, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr6, i8* %19, i64 %20, i32 1, i1 false)
  %21 = load i8*, i8** %endp, align 8
  %22 = load i64, i64* %bytes.addr, align 8
  %idx.neg7 = sub i64 0, %22
  %add.ptr8 = getelementptr inbounds i8, i8* %21, i64 %idx.neg7
  store i8* %add.ptr8, i8** %p, align 8
  br label %while.cond.9

while.cond.9:                                     ; preds = %cond.end.71, %if.end
  %23 = load i8*, i8** %p, align 8
  %24 = load i8*, i8** %endp, align 8
  %cmp10 = icmp ult i8* %23, %24
  br i1 %cmp10, label %while.body.12, label %while.end.74

while.body.12:                                    ; preds = %while.cond.9
  %25 = load i8*, i8** %p, align 8
  %incdec.ptr13 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr13, i8** %p, align 8
  %26 = load i8, i8* %25, align 1
  %conv14 = zext i8 %26 to i32
  store i32 %conv14, i32* %c, align 4
  %27 = load i32, i32* %c, align 4
  %cmp15 = icmp sge i32 %27, 128
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %while.body.12
  %28 = load i32, i32* %c, align 4
  %add = add nsw i32 %28, 4194048
  store i32 %add, i32* %c, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %while.body.12
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.18
  %29 = load i32, i32* %c, align 4
  %add19 = add i32 %29, 0
  %cmp20 = icmp ule i32 %add19, 127
  br i1 %cmp20, label %cond.true.26, label %cond.false.28

cond.false:                                       ; preds = %if.end.18
  %30 = load i32, i32* %c, align 4
  %conv22 = sext i32 %30 to i64
  %add23 = add i64 %conv22, 0
  %cmp24 = icmp ule i64 %add23, 127
  br i1 %cmp24, label %cond.true.26, label %cond.false.28

cond.true.26:                                     ; preds = %cond.false, %cond.true
  %31 = load i32, i32* %c, align 4
  %conv27 = trunc i32 %31 to i8
  %32 = load i8*, i8** %to, align 8
  %arrayidx = getelementptr inbounds i8, i8* %32, i64 0
  store i8 %conv27, i8* %arrayidx, align 1
  br label %cond.end.71

cond.false.28:                                    ; preds = %cond.false, %cond.true
  br i1 true, label %cond.true.29, label %cond.false.33

cond.true.29:                                     ; preds = %cond.false.28
  %33 = load i32, i32* %c, align 4
  %add30 = add i32 %33, 0
  %cmp31 = icmp ule i32 %add30, 2047
  br i1 %cmp31, label %cond.true.38, label %cond.false.44

cond.false.33:                                    ; preds = %cond.false.28
  %34 = load i32, i32* %c, align 4
  %conv34 = sext i32 %34 to i64
  %add35 = add i64 %conv34, 0
  %cmp36 = icmp ule i64 %add35, 2047
  br i1 %cmp36, label %cond.true.38, label %cond.false.44

cond.true.38:                                     ; preds = %cond.false.33, %cond.true.29
  %35 = load i32, i32* %c, align 4
  %shr = ashr i32 %35, 6
  %or = or i32 192, %shr
  %conv39 = trunc i32 %or to i8
  %36 = load i8*, i8** %to, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %36, i64 0
  store i8 %conv39, i8* %arrayidx40, align 1
  %37 = load i32, i32* %c, align 4
  %and = and i32 %37, 63
  %or41 = or i32 128, %and
  %conv42 = trunc i32 %or41 to i8
  %38 = load i8*, i8** %to, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %38, i64 1
  store i8 %conv42, i8* %arrayidx43, align 1
  br label %cond.end.69

cond.false.44:                                    ; preds = %cond.false.33, %cond.true.29
  br i1 true, label %cond.true.45, label %cond.false.49

cond.true.45:                                     ; preds = %cond.false.44
  %39 = load i32, i32* %c, align 4
  %add46 = add i32 %39, 0
  %cmp47 = icmp ule i32 %add46, 65535
  br i1 %cmp47, label %cond.true.54, label %cond.false.68

cond.false.49:                                    ; preds = %cond.false.44
  %40 = load i32, i32* %c, align 4
  %conv50 = sext i32 %40 to i64
  %add51 = add i64 %conv50, 0
  %cmp52 = icmp ule i64 %add51, 65535
  br i1 %cmp52, label %cond.true.54, label %cond.false.68

cond.true.54:                                     ; preds = %cond.false.49, %cond.true.45
  %41 = load i32, i32* %c, align 4
  %shr55 = ashr i32 %41, 12
  %or56 = or i32 224, %shr55
  %conv57 = trunc i32 %or56 to i8
  %42 = load i8*, i8** %to, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %42, i64 0
  store i8 %conv57, i8* %arrayidx58, align 1
  %43 = load i32, i32* %c, align 4
  %shr59 = ashr i32 %43, 6
  %and60 = and i32 %shr59, 63
  %or61 = or i32 128, %and60
  %conv62 = trunc i32 %or61 to i8
  %44 = load i8*, i8** %to, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %conv62, i8* %arrayidx63, align 1
  %45 = load i32, i32* %c, align 4
  %and64 = and i32 %45, 63
  %or65 = or i32 128, %and64
  %conv66 = trunc i32 %or65 to i8
  %46 = load i8*, i8** %to, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %46, i64 2
  store i8 %conv66, i8* %arrayidx67, align 1
  br label %cond.end

cond.false.68:                                    ; preds = %cond.false.49, %cond.true.45
  %47 = load i32, i32* %c, align 4
  %48 = load i8*, i8** %to, align 8
  %call = call i32 @char_string(i32 %47, i8* %48)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.68, %cond.true.54
  %cond = phi i32 [ 3, %cond.true.54 ], [ %call, %cond.false.68 ]
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.end, %cond.true.38
  %cond70 = phi i32 [ 2, %cond.true.38 ], [ %cond, %cond.end ]
  br label %cond.end.71

cond.end.71:                                      ; preds = %cond.end.69, %cond.true.26
  %cond72 = phi i32 [ 1, %cond.true.26 ], [ %cond70, %cond.end.69 ]
  %49 = load i8*, i8** %to, align 8
  %idx.ext = sext i32 %cond72 to i64
  %add.ptr73 = getelementptr inbounds i8, i8* %49, i64 %idx.ext
  store i8* %add.ptr73, i8** %to, align 8
  br label %while.cond.9

while.end.74:                                     ; preds = %while.cond.9
  %50 = load i8*, i8** %to, align 8
  %51 = load i8*, i8** %str.addr, align 8
  %sub.ptr.lhs.cast75 = ptrtoint i8* %50 to i64
  %sub.ptr.rhs.cast76 = ptrtoint i8* %51 to i64
  %sub.ptr.sub77 = sub i64 %sub.ptr.lhs.cast75, %sub.ptr.rhs.cast76
  store i64 %sub.ptr.sub77, i64* %retval
  br label %return

return:                                           ; preds = %while.end.74, %if.then
  %52 = load i64, i64* %retval
  ret i64 %52
}

; Function Attrs: nounwind uwtable
define i64 @str_as_unibyte(i8* %str, i64 %bytes) #1 {
entry:
  %str.addr = alloca i8*, align 8
  %bytes.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %endp = alloca i8*, align 8
  %to = alloca i8*, align 8
  %c = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store i64 %bytes, i64* %bytes.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = load i8*, i8** %str.addr, align 8
  %2 = load i64, i64* %bytes.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %add.ptr, i8** %endp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i8*, i8** %p, align 8
  %4 = load i8*, i8** %endp, align 8
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %p, align 8
  %6 = load i8, i8* %5, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %and = and i32 %7, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.body
  br label %cond.end.14

cond.false:                                       ; preds = %while.body
  %8 = load i32, i32* %c, align 4
  %and1 = and i32 %8, 32
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.false.4, label %cond.true.3

cond.true.3:                                      ; preds = %cond.false
  br label %cond.end.12

cond.false.4:                                     ; preds = %cond.false
  %9 = load i32, i32* %c, align 4
  %and5 = and i32 %9, 16
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.false.8, label %cond.true.7

cond.true.7:                                      ; preds = %cond.false.4
  br label %cond.end

cond.false.8:                                     ; preds = %cond.false.4
  %10 = load i32, i32* %c, align 4
  %and9 = and i32 %10, 8
  %tobool10 = icmp ne i32 %and9, 0
  %lnot = xor i1 %tobool10, true
  %cond = select i1 %lnot, i32 4, i32 5
  br label %cond.end

cond.end:                                         ; preds = %cond.false.8, %cond.true.7
  %cond11 = phi i32 [ 3, %cond.true.7 ], [ %cond, %cond.false.8 ]
  br label %cond.end.12

cond.end.12:                                      ; preds = %cond.end, %cond.true.3
  %cond13 = phi i32 [ 2, %cond.true.3 ], [ %cond11, %cond.end ]
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.end.12, %cond.true
  %cond15 = phi i32 [ 1, %cond.true ], [ %cond13, %cond.end.12 ]
  store i32 %cond15, i32* %len, align 4
  %11 = load i32, i32* %c, align 4
  %cmp16 = icmp eq i32 %11, 192
  br i1 %cmp16, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.14
  %12 = load i32, i32* %c, align 4
  %cmp18 = icmp eq i32 %12, 193
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end.14
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false
  %13 = load i32, i32* %len, align 4
  %14 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %13 to i64
  %add.ptr20 = getelementptr inbounds i8, i8* %14, i64 %idx.ext
  store i8* %add.ptr20, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %15 = load i8*, i8** %str.addr, align 8
  %16 = load i8*, i8** %p, align 8
  %17 = load i8*, i8** %str.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add.ptr21 = getelementptr inbounds i8, i8* %15, i64 %sub.ptr.sub
  store i8* %add.ptr21, i8** %to, align 8
  br label %while.cond.22

while.cond.22:                                    ; preds = %if.end.121, %while.end
  %18 = load i8*, i8** %p, align 8
  %19 = load i8*, i8** %endp, align 8
  %cmp23 = icmp ult i8* %18, %19
  br i1 %cmp23, label %while.body.25, label %while.end.122

while.body.25:                                    ; preds = %while.cond.22
  %20 = load i8*, i8** %p, align 8
  %21 = load i8, i8* %20, align 1
  %conv26 = zext i8 %21 to i32
  store i32 %conv26, i32* %c, align 4
  %22 = load i32, i32* %c, align 4
  %and27 = and i32 %22, 128
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false.30, label %cond.true.29

cond.true.29:                                     ; preds = %while.body.25
  br label %cond.end.47

cond.false.30:                                    ; preds = %while.body.25
  %23 = load i32, i32* %c, align 4
  %and31 = and i32 %23, 32
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.false.34, label %cond.true.33

cond.true.33:                                     ; preds = %cond.false.30
  br label %cond.end.45

cond.false.34:                                    ; preds = %cond.false.30
  %24 = load i32, i32* %c, align 4
  %and35 = and i32 %24, 16
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.false.38, label %cond.true.37

cond.true.37:                                     ; preds = %cond.false.34
  br label %cond.end.43

cond.false.38:                                    ; preds = %cond.false.34
  %25 = load i32, i32* %c, align 4
  %and39 = and i32 %25, 8
  %tobool40 = icmp ne i32 %and39, 0
  %lnot41 = xor i1 %tobool40, true
  %cond42 = select i1 %lnot41, i32 4, i32 5
  br label %cond.end.43

cond.end.43:                                      ; preds = %cond.false.38, %cond.true.37
  %cond44 = phi i32 [ 3, %cond.true.37 ], [ %cond42, %cond.false.38 ]
  br label %cond.end.45

cond.end.45:                                      ; preds = %cond.end.43, %cond.true.33
  %cond46 = phi i32 [ 2, %cond.true.33 ], [ %cond44, %cond.end.43 ]
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.end.45, %cond.true.29
  %cond48 = phi i32 [ 1, %cond.true.29 ], [ %cond46, %cond.end.45 ]
  store i32 %cond48, i32* %len, align 4
  %26 = load i32, i32* %c, align 4
  %cmp49 = icmp eq i32 %26, 192
  br i1 %cmp49, label %if.then.54, label %lor.lhs.false.51

lor.lhs.false.51:                                 ; preds = %cond.end.47
  %27 = load i32, i32* %c, align 4
  %cmp52 = icmp eq i32 %27, 193
  br i1 %cmp52, label %if.then.54, label %if.else

if.then.54:                                       ; preds = %lor.lhs.false.51, %cond.end.47
  %28 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %28, i64 0
  %29 = load i8, i8* %arrayidx, align 1
  %conv55 = zext i8 %29 to i32
  %and56 = and i32 %conv55, 128
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %cond.false.60, label %cond.true.58

cond.true.58:                                     ; preds = %if.then.54
  %30 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %31 = load i8, i8* %30, align 1
  %conv59 = zext i8 %31 to i32
  br label %cond.end.104

cond.false.60:                                    ; preds = %if.then.54
  %32 = load i8*, i8** %p, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %33 to i32
  %and63 = and i32 %conv62, 32
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.false.79, label %cond.true.65

cond.true.65:                                     ; preds = %cond.false.60
  %34 = load i8*, i8** %p, align 8
  %add.ptr66 = getelementptr inbounds i8, i8* %34, i64 2
  store i8* %add.ptr66, i8** %p, align 8
  %35 = load i8*, i8** %p, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %35, i64 -2
  %36 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %36 to i32
  %and69 = and i32 %conv68, 31
  %shl = shl i32 %and69, 6
  %37 = load i8*, i8** %p, align 8
  %arrayidx70 = getelementptr inbounds i8, i8* %37, i64 -1
  %38 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %38 to i32
  %and72 = and i32 %conv71, 63
  %or = or i32 %shl, %and72
  %39 = load i8*, i8** %p, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %39, i64 -2
  %40 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %40 to i32
  %cmp75 = icmp slt i32 %conv74, 194
  %cond77 = select i1 %cmp75, i32 4194176, i32 0
  %or78 = or i32 %or, %cond77
  br label %cond.end.102

cond.false.79:                                    ; preds = %cond.false.60
  %41 = load i8*, i8** %p, align 8
  %arrayidx80 = getelementptr inbounds i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx80, align 1
  %conv81 = zext i8 %42 to i32
  %and82 = and i32 %conv81, 16
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.false.99, label %cond.true.84

cond.true.84:                                     ; preds = %cond.false.79
  %43 = load i8*, i8** %p, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %43, i64 3
  store i8* %add.ptr85, i8** %p, align 8
  %44 = load i8*, i8** %p, align 8
  %arrayidx86 = getelementptr inbounds i8, i8* %44, i64 -3
  %45 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %45 to i32
  %and88 = and i32 %conv87, 15
  %shl89 = shl i32 %and88, 12
  %46 = load i8*, i8** %p, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %46, i64 -2
  %47 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %47 to i32
  %and92 = and i32 %conv91, 63
  %shl93 = shl i32 %and92, 6
  %or94 = or i32 %shl89, %shl93
  %48 = load i8*, i8** %p, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %48, i64 -1
  %49 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %49 to i32
  %and97 = and i32 %conv96, 63
  %or98 = or i32 %or94, %and97
  br label %cond.end.100

cond.false.99:                                    ; preds = %cond.false.79
  %50 = load i8*, i8** %p, align 8
  %call = call i32 @string_char(i8* %50, i8** %p, i32* null)
  br label %cond.end.100

cond.end.100:                                     ; preds = %cond.false.99, %cond.true.84
  %cond101 = phi i32 [ %or98, %cond.true.84 ], [ %call, %cond.false.99 ]
  br label %cond.end.102

cond.end.102:                                     ; preds = %cond.end.100, %cond.true.65
  %cond103 = phi i32 [ %or78, %cond.true.65 ], [ %cond101, %cond.end.100 ]
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.end.102, %cond.true.58
  %cond105 = phi i32 [ %conv59, %cond.true.58 ], [ %cond103, %cond.end.102 ]
  store i32 %cond105, i32* %c, align 4
  %51 = load i32, i32* %c, align 4
  %cmp106 = icmp sgt i32 %51, 4194175
  br i1 %cmp106, label %cond.true.108, label %cond.false.109

cond.true.108:                                    ; preds = %cond.end.104
  %52 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %52, 4194048
  br label %cond.end.111

cond.false.109:                                   ; preds = %cond.end.104
  %53 = load i32, i32* %c, align 4
  %and110 = and i32 %53, 255
  br label %cond.end.111

cond.end.111:                                     ; preds = %cond.false.109, %cond.true.108
  %cond112 = phi i32 [ %sub, %cond.true.108 ], [ %and110, %cond.false.109 ]
  %conv113 = trunc i32 %cond112 to i8
  %54 = load i8*, i8** %to, align 8
  %incdec.ptr114 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %incdec.ptr114, i8** %to, align 8
  store i8 %conv113, i8* %54, align 1
  br label %if.end.121

if.else:                                          ; preds = %lor.lhs.false.51
  br label %while.cond.115

while.cond.115:                                   ; preds = %while.body.117, %if.else
  %55 = load i32, i32* %len, align 4
  %dec = add nsw i32 %55, -1
  store i32 %dec, i32* %len, align 4
  %tobool116 = icmp ne i32 %55, 0
  br i1 %tobool116, label %while.body.117, label %while.end.120

while.body.117:                                   ; preds = %while.cond.115
  %56 = load i8*, i8** %p, align 8
  %incdec.ptr118 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %incdec.ptr118, i8** %p, align 8
  %57 = load i8, i8* %56, align 1
  %58 = load i8*, i8** %to, align 8
  %incdec.ptr119 = getelementptr inbounds i8, i8* %58, i32 1
  store i8* %incdec.ptr119, i8** %to, align 8
  store i8 %57, i8* %58, align 1
  br label %while.cond.115

while.end.120:                                    ; preds = %while.cond.115
  br label %if.end.121

if.end.121:                                       ; preds = %while.end.120, %cond.end.111
  br label %while.cond.22

while.end.122:                                    ; preds = %while.cond.22
  %59 = load i8*, i8** %to, align 8
  %60 = load i8*, i8** %str.addr, align 8
  %sub.ptr.lhs.cast123 = ptrtoint i8* %59 to i64
  %sub.ptr.rhs.cast124 = ptrtoint i8* %60 to i64
  %sub.ptr.sub125 = sub i64 %sub.ptr.lhs.cast123, %sub.ptr.rhs.cast124
  ret i64 %sub.ptr.sub125
}

; Function Attrs: nounwind uwtable
define i64 @str_to_unibyte(i8* %src, i8* %dst, i64 %chars) #1 {
entry:
  %retval = alloca i64, align 8
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %chars.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %chars, i64* %chars.addr, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %chars.addr, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %src.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %for.body
  %4 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv1 = zext i8 %5 to i32
  br label %cond.end.42

cond.false:                                       ; preds = %for.body
  %6 = load i8*, i8** %src.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %and4 = and i32 %conv3, 32
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.false.18, label %cond.true.6

cond.true.6:                                      ; preds = %cond.false
  %8 = load i8*, i8** %src.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 2
  store i8* %add.ptr, i8** %src.addr, align 8
  %9 = load i8*, i8** %src.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i64 -2
  %10 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %10 to i32
  %and9 = and i32 %conv8, 31
  %shl = shl i32 %and9, 6
  %11 = load i8*, i8** %src.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %11, i64 -1
  %12 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %12 to i32
  %and12 = and i32 %conv11, 63
  %or = or i32 %shl, %and12
  %13 = load i8*, i8** %src.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %13, i64 -2
  %14 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %14 to i32
  %cmp15 = icmp slt i32 %conv14, 194
  %cond = select i1 %cmp15, i32 4194176, i32 0
  %or17 = or i32 %or, %cond
  br label %cond.end.40

cond.false.18:                                    ; preds = %cond.false
  %15 = load i8*, i8** %src.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %16 to i32
  %and21 = and i32 %conv20, 16
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.false.38, label %cond.true.23

cond.true.23:                                     ; preds = %cond.false.18
  %17 = load i8*, i8** %src.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %17, i64 3
  store i8* %add.ptr24, i8** %src.addr, align 8
  %18 = load i8*, i8** %src.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %18, i64 -3
  %19 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %19 to i32
  %and27 = and i32 %conv26, 15
  %shl28 = shl i32 %and27, 12
  %20 = load i8*, i8** %src.addr, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %20, i64 -2
  %21 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %21 to i32
  %and31 = and i32 %conv30, 63
  %shl32 = shl i32 %and31, 6
  %or33 = or i32 %shl28, %shl32
  %22 = load i8*, i8** %src.addr, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %22, i64 -1
  %23 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %23 to i32
  %and36 = and i32 %conv35, 63
  %or37 = or i32 %or33, %and36
  br label %cond.end

cond.false.38:                                    ; preds = %cond.false.18
  %24 = load i8*, i8** %src.addr, align 8
  %call = call i32 @string_char(i8* %24, i8** %src.addr, i32* null)
  br label %cond.end

cond.end:                                         ; preds = %cond.false.38, %cond.true.23
  %cond39 = phi i32 [ %or37, %cond.true.23 ], [ %call, %cond.false.38 ]
  br label %cond.end.40

cond.end.40:                                      ; preds = %cond.end, %cond.true.6
  %cond41 = phi i32 [ %or17, %cond.true.6 ], [ %cond39, %cond.end ]
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.end.40, %cond.true
  %cond43 = phi i32 [ %conv1, %cond.true ], [ %cond41, %cond.end.40 ]
  store i32 %cond43, i32* %c, align 4
  %25 = load i32, i32* %c, align 4
  %cmp44 = icmp sgt i32 %25, 4194175
  br i1 %cmp44, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end.42
  %26 = load i32, i32* %c, align 4
  %cmp46 = icmp sgt i32 %26, 4194175
  br i1 %cmp46, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %if.then
  %27 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %27, 4194048
  br label %cond.end.51

cond.false.49:                                    ; preds = %if.then
  %28 = load i32, i32* %c, align 4
  %and50 = and i32 %28, 255
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.49, %cond.true.48
  %cond52 = phi i32 [ %sub, %cond.true.48 ], [ %and50, %cond.false.49 ]
  store i32 %cond52, i32* %c, align 4
  br label %if.end.62

if.else:                                          ; preds = %cond.end.42
  br i1 true, label %cond.true.53, label %cond.false.56

cond.true.53:                                     ; preds = %if.else
  %29 = load i32, i32* %c, align 4
  %add = add i32 %29, 0
  %cmp54 = icmp ult i32 %add, 128
  br i1 %cmp54, label %if.end, label %if.then.61

cond.false.56:                                    ; preds = %if.else
  %30 = load i32, i32* %c, align 4
  %conv57 = sext i32 %30 to i64
  %add58 = add i64 %conv57, 0
  %cmp59 = icmp ult i64 %add58, 128
  br i1 %cmp59, label %if.end, label %if.then.61

if.then.61:                                       ; preds = %cond.false.56, %cond.true.53
  %31 = load i64, i64* %i, align 8
  store i64 %31, i64* %retval
  br label %return

if.end:                                           ; preds = %cond.false.56, %cond.true.53
  br label %if.end.62

if.end.62:                                        ; preds = %if.end, %cond.end.51
  %32 = load i32, i32* %c, align 4
  %conv63 = trunc i32 %32 to i8
  %33 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr64, i8** %dst.addr, align 8
  store i8 %conv63, i8* %33, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end.62
  %34 = load i64, i64* %i, align 8
  %inc = add nsw i64 %34, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load i64, i64* %i, align 8
  store i64 %35, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.61
  %36 = load i64, i64* %retval
  ret i64 %36
}

; Function Attrs: nounwind uwtable
define i64 @string_escape_byte8(i64 %string) #1 {
entry:
  %retval = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %nchars = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %multibyte = alloca i8, align 1
  %byte8_count = alloca i64, align 8
  %thrice_byte8_count = alloca i64, align 8
  %uninit_nchars = alloca i64, align 8
  %uninit_nbytes = alloca i64, align 8
  %src = alloca i8*, align 8
  %src_end = alloca i8*, align 8
  %dst = alloca i8*, align 8
  %val = alloca i64, align 8
  %c = alloca i32, align 4
  %len = alloca i32, align 4
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %call = call i64 @SCHARS(i64 %0)
  store i64 %call, i64* %nchars, align 8
  %1 = load i64, i64* %string.addr, align 8
  %call1 = call i64 @SBYTES(i64 %1)
  store i64 %call1, i64* %nbytes, align 8
  %2 = load i64, i64* %string.addr, align 8
  %call2 = call zeroext i1 @STRING_MULTIBYTE(i64 %2)
  %frombool = zext i1 %call2 to i8
  store i8 %frombool, i8* %multibyte, align 1
  %3 = load i8, i8* %multibyte, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load i64, i64* %nchars, align 8
  %5 = load i64, i64* %nbytes, align 8
  %cmp = icmp eq i64 %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i64, i64* %string.addr, align 8
  store i64 %6, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %7 = load i64, i64* %string.addr, align 8
  %call3 = call i64 @string_count_byte8(i64 %7)
  store i64 %call3, i64* %byte8_count, align 8
  %8 = load i64, i64* %byte8_count, align 8
  %cmp4 = icmp eq i64 %8, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %9 = load i64, i64* %string.addr, align 8
  store i64 %9, i64* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  br i1 false, label %cond.true, label %cond.false.479

cond.true:                                        ; preds = %if.end.6
  br i1 false, label %cond.true.7, label %cond.false.264

cond.true.7:                                      ; preds = %cond.true
  %10 = load i64, i64* %byte8_count, align 8
  %conv = trunc i64 %10 to i8
  %conv8 = sext i8 %conv to i32
  %add = add nsw i32 0, %conv8
  %mul = mul nsw i32 0, %add
  %sub = sub nsw i32 %mul, 1
  %cmp9 = icmp slt i32 %sub, 0
  br i1 %cmp9, label %cond.true.11, label %cond.false

cond.true.11:                                     ; preds = %cond.true.7
  %11 = load i64, i64* %byte8_count, align 8
  %conv12 = trunc i64 %11 to i8
  %conv13 = sext i8 %conv12 to i32
  %add14 = add nsw i32 0, %conv13
  %mul15 = mul nsw i32 0, %add14
  %add16 = add nsw i32 %mul15, 0
  %neg = xor i32 %add16, -1
  %cmp17 = icmp eq i32 %neg, -1
  %conv18 = zext i1 %cmp17 to i32
  %sub19 = sub nsw i32 0, %conv18
  %12 = load i64, i64* %byte8_count, align 8
  %conv20 = trunc i64 %12 to i8
  %conv21 = sext i8 %conv20 to i32
  %add22 = add nsw i32 0, %conv21
  %mul23 = mul nsw i32 0, %add22
  %add24 = add nsw i32 %mul23, 1
  %shl = shl i32 %add24, 30
  %sub25 = sub nsw i32 %shl, 1
  %mul26 = mul nsw i32 %sub25, 2
  %add27 = add nsw i32 %mul26, 1
  %sub28 = sub nsw i32 %sub19, %add27
  br label %cond.end

cond.false:                                       ; preds = %cond.true.7
  %13 = load i64, i64* %byte8_count, align 8
  %conv29 = trunc i64 %13 to i8
  %conv30 = sext i8 %conv29 to i32
  %add31 = add nsw i32 0, %conv30
  %mul32 = mul nsw i32 0, %add31
  %add33 = add nsw i32 %mul32, 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.11
  %cond = phi i32 [ %sub28, %cond.true.11 ], [ %add33, %cond.false ]
  %cmp34 = icmp eq i32 %cond, 0
  br i1 %cmp34, label %land.lhs.true.36, label %lor.lhs.false

land.lhs.true.36:                                 ; preds = %cond.end
  %14 = load i64, i64* %byte8_count, align 8
  %conv37 = trunc i64 %14 to i8
  %conv38 = sext i8 %conv37 to i32
  %cmp39 = icmp slt i32 %conv38, 0
  br i1 %cmp39, label %cond.true.218, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.36, %cond.end
  br i1 false, label %cond.true.41, label %cond.false.119

cond.true.41:                                     ; preds = %lor.lhs.false
  %15 = load i64, i64* %byte8_count, align 8
  %conv42 = trunc i64 %15 to i8
  %conv43 = sext i8 %conv42 to i32
  %cmp44 = icmp slt i32 %conv43, 0
  br i1 %cmp44, label %cond.true.46, label %cond.false.76

cond.true.46:                                     ; preds = %cond.true.41
  %16 = load i64, i64* %byte8_count, align 8
  %conv47 = trunc i64 %16 to i8
  %conv48 = sext i8 %conv47 to i32
  %17 = load i64, i64* %byte8_count, align 8
  %conv49 = trunc i64 %17 to i8
  %conv50 = sext i8 %conv49 to i32
  %add51 = add nsw i32 0, %conv50
  %mul52 = mul nsw i32 0, %add51
  %sub53 = sub nsw i32 %mul52, 1
  %cmp54 = icmp slt i32 %sub53, 0
  br i1 %cmp54, label %cond.true.56, label %cond.false.66

cond.true.56:                                     ; preds = %cond.true.46
  %18 = load i64, i64* %byte8_count, align 8
  %conv57 = trunc i64 %18 to i8
  %conv58 = sext i8 %conv57 to i32
  %add59 = add nsw i32 0, %conv58
  %mul60 = mul nsw i32 0, %add59
  %add61 = add nsw i32 %mul60, 1
  %shl62 = shl i32 %add61, 30
  %sub63 = sub nsw i32 %shl62, 1
  %mul64 = mul nsw i32 %sub63, 2
  %add65 = add nsw i32 %mul64, 1
  br label %cond.end.72

cond.false.66:                                    ; preds = %cond.true.46
  %19 = load i64, i64* %byte8_count, align 8
  %conv67 = trunc i64 %19 to i8
  %conv68 = sext i8 %conv67 to i32
  %add69 = add nsw i32 0, %conv68
  %mul70 = mul nsw i32 0, %add69
  %sub71 = sub nsw i32 %mul70, 1
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.66, %cond.true.56
  %cond73 = phi i32 [ %add65, %cond.true.56 ], [ %sub71, %cond.false.66 ]
  %div = sdiv i32 %cond73, 3
  %cmp74 = icmp slt i32 %conv48, %div
  br i1 %cmp74, label %cond.true.218, label %lor.lhs.false.198

cond.false.76:                                    ; preds = %cond.true.41
  br i1 false, label %cond.true.77, label %cond.false.78

cond.true.77:                                     ; preds = %cond.false.76
  br i1 false, label %cond.true.218, label %lor.lhs.false.198

cond.false.78:                                    ; preds = %cond.false.76
  %20 = load i64, i64* %byte8_count, align 8
  %conv79 = trunc i64 %20 to i8
  %conv80 = sext i8 %conv79 to i32
  %add81 = add nsw i32 0, %conv80
  %mul82 = mul nsw i32 0, %add81
  %sub83 = sub nsw i32 %mul82, 1
  %cmp84 = icmp slt i32 %sub83, 0
  br i1 %cmp84, label %cond.true.86, label %cond.false.106

cond.true.86:                                     ; preds = %cond.false.78
  %21 = load i64, i64* %byte8_count, align 8
  %conv87 = trunc i64 %21 to i8
  %conv88 = sext i8 %conv87 to i32
  %add89 = add nsw i32 0, %conv88
  %mul90 = mul nsw i32 0, %add89
  %add91 = add nsw i32 %mul90, 0
  %neg92 = xor i32 %add91, -1
  %cmp93 = icmp eq i32 %neg92, -1
  %conv94 = zext i1 %cmp93 to i32
  %sub95 = sub nsw i32 0, %conv94
  %22 = load i64, i64* %byte8_count, align 8
  %conv96 = trunc i64 %22 to i8
  %conv97 = sext i8 %conv96 to i32
  %add98 = add nsw i32 0, %conv97
  %mul99 = mul nsw i32 0, %add98
  %add100 = add nsw i32 %mul99, 1
  %shl101 = shl i32 %add100, 30
  %sub102 = sub nsw i32 %shl101, 1
  %mul103 = mul nsw i32 %sub102, 2
  %add104 = add nsw i32 %mul103, 1
  %sub105 = sub nsw i32 %sub95, %add104
  br label %cond.end.112

cond.false.106:                                   ; preds = %cond.false.78
  %23 = load i64, i64* %byte8_count, align 8
  %conv107 = trunc i64 %23 to i8
  %conv108 = sext i8 %conv107 to i32
  %add109 = add nsw i32 0, %conv108
  %mul110 = mul nsw i32 0, %add109
  %add111 = add nsw i32 %mul110, 0
  br label %cond.end.112

cond.end.112:                                     ; preds = %cond.false.106, %cond.true.86
  %cond113 = phi i32 [ %sub105, %cond.true.86 ], [ %add111, %cond.false.106 ]
  %div114 = sdiv i32 %cond113, 3
  %24 = load i64, i64* %byte8_count, align 8
  %conv115 = trunc i64 %24 to i8
  %conv116 = sext i8 %conv115 to i32
  %cmp117 = icmp slt i32 %div114, %conv116
  br i1 %cmp117, label %cond.true.218, label %lor.lhs.false.198

cond.false.119:                                   ; preds = %lor.lhs.false
  br i1 false, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %cond.false.119
  br i1 false, label %cond.true.218, label %lor.lhs.false.198

cond.false.121:                                   ; preds = %cond.false.119
  %25 = load i64, i64* %byte8_count, align 8
  %conv122 = trunc i64 %25 to i8
  %conv123 = sext i8 %conv122 to i32
  %cmp124 = icmp slt i32 %conv123, 0
  br i1 %cmp124, label %cond.true.126, label %cond.false.167

cond.true.126:                                    ; preds = %cond.false.121
  %26 = load i64, i64* %byte8_count, align 8
  %conv127 = trunc i64 %26 to i8
  %conv128 = sext i8 %conv127 to i32
  %27 = load i64, i64* %byte8_count, align 8
  %conv129 = trunc i64 %27 to i8
  %conv130 = sext i8 %conv129 to i32
  %add131 = add nsw i32 0, %conv130
  %mul132 = mul nsw i32 0, %add131
  %sub133 = sub nsw i32 %mul132, 1
  %cmp134 = icmp slt i32 %sub133, 0
  br i1 %cmp134, label %cond.true.136, label %cond.false.156

cond.true.136:                                    ; preds = %cond.true.126
  %28 = load i64, i64* %byte8_count, align 8
  %conv137 = trunc i64 %28 to i8
  %conv138 = sext i8 %conv137 to i32
  %add139 = add nsw i32 0, %conv138
  %mul140 = mul nsw i32 0, %add139
  %add141 = add nsw i32 %mul140, 0
  %neg142 = xor i32 %add141, -1
  %cmp143 = icmp eq i32 %neg142, -1
  %conv144 = zext i1 %cmp143 to i32
  %sub145 = sub nsw i32 0, %conv144
  %29 = load i64, i64* %byte8_count, align 8
  %conv146 = trunc i64 %29 to i8
  %conv147 = sext i8 %conv146 to i32
  %add148 = add nsw i32 0, %conv147
  %mul149 = mul nsw i32 0, %add148
  %add150 = add nsw i32 %mul149, 1
  %shl151 = shl i32 %add150, 30
  %sub152 = sub nsw i32 %shl151, 1
  %mul153 = mul nsw i32 %sub152, 2
  %add154 = add nsw i32 %mul153, 1
  %sub155 = sub nsw i32 %sub145, %add154
  br label %cond.end.162

cond.false.156:                                   ; preds = %cond.true.126
  %30 = load i64, i64* %byte8_count, align 8
  %conv157 = trunc i64 %30 to i8
  %conv158 = sext i8 %conv157 to i32
  %add159 = add nsw i32 0, %conv158
  %mul160 = mul nsw i32 0, %add159
  %add161 = add nsw i32 %mul160, 0
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.156, %cond.true.136
  %cond163 = phi i32 [ %sub155, %cond.true.136 ], [ %add161, %cond.false.156 ]
  %div164 = sdiv i32 %cond163, 3
  %cmp165 = icmp slt i32 %conv128, %div164
  br i1 %cmp165, label %cond.true.218, label %lor.lhs.false.198

cond.false.167:                                   ; preds = %cond.false.121
  %31 = load i64, i64* %byte8_count, align 8
  %conv168 = trunc i64 %31 to i8
  %conv169 = sext i8 %conv168 to i32
  %add170 = add nsw i32 0, %conv169
  %mul171 = mul nsw i32 0, %add170
  %sub172 = sub nsw i32 %mul171, 1
  %cmp173 = icmp slt i32 %sub172, 0
  br i1 %cmp173, label %cond.true.175, label %cond.false.185

cond.true.175:                                    ; preds = %cond.false.167
  %32 = load i64, i64* %byte8_count, align 8
  %conv176 = trunc i64 %32 to i8
  %conv177 = sext i8 %conv176 to i32
  %add178 = add nsw i32 0, %conv177
  %mul179 = mul nsw i32 0, %add178
  %add180 = add nsw i32 %mul179, 1
  %shl181 = shl i32 %add180, 30
  %sub182 = sub nsw i32 %shl181, 1
  %mul183 = mul nsw i32 %sub182, 2
  %add184 = add nsw i32 %mul183, 1
  br label %cond.end.191

cond.false.185:                                   ; preds = %cond.false.167
  %33 = load i64, i64* %byte8_count, align 8
  %conv186 = trunc i64 %33 to i8
  %conv187 = sext i8 %conv186 to i32
  %add188 = add nsw i32 0, %conv187
  %mul189 = mul nsw i32 0, %add188
  %sub190 = sub nsw i32 %mul189, 1
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.185, %cond.true.175
  %cond192 = phi i32 [ %add184, %cond.true.175 ], [ %sub190, %cond.false.185 ]
  %div193 = sdiv i32 %cond192, 3
  %34 = load i64, i64* %byte8_count, align 8
  %conv194 = trunc i64 %34 to i8
  %conv195 = sext i8 %conv194 to i32
  %cmp196 = icmp slt i32 %div193, %conv195
  br i1 %cmp196, label %cond.true.218, label %lor.lhs.false.198

lor.lhs.false.198:                                ; preds = %cond.end.191, %cond.end.162, %cond.true.120, %cond.end.112, %cond.true.77, %cond.end.72
  %35 = load i64, i64* %byte8_count, align 8
  %conv199 = trunc i64 %35 to i8
  %conv200 = sext i8 %conv199 to i32
  %mul201 = mul nsw i32 %conv200, 3
  %mul202 = mul nsw i32 0, %mul201
  %sub203 = sub nsw i32 %mul202, 1
  %cmp204 = icmp slt i32 %sub203, 0
  br i1 %cmp204, label %land.lhs.true.206, label %lor.lhs.false.212

land.lhs.true.206:                                ; preds = %lor.lhs.false.198
  %36 = load i64, i64* %byte8_count, align 8
  %conv207 = trunc i64 %36 to i8
  %conv208 = sext i8 %conv207 to i32
  %mul209 = mul nsw i32 %conv208, 3
  %cmp210 = icmp slt i32 %mul209, -128
  br i1 %cmp210, label %cond.true.218, label %lor.lhs.false.212

lor.lhs.false.212:                                ; preds = %land.lhs.true.206, %lor.lhs.false.198
  %37 = load i64, i64* %byte8_count, align 8
  %conv213 = trunc i64 %37 to i8
  %conv214 = sext i8 %conv213 to i32
  %mul215 = mul nsw i32 %conv214, 3
  %cmp216 = icmp slt i32 127, %mul215
  br i1 %cmp216, label %cond.true.218, label %cond.false.241

cond.true.218:                                    ; preds = %lor.lhs.false.212, %land.lhs.true.206, %cond.end.191, %cond.end.162, %cond.true.120, %cond.end.112, %cond.true.77, %cond.end.72, %land.lhs.true.36
  %38 = load i64, i64* %byte8_count, align 8
  %conv219 = trunc i64 %38 to i8
  %conv220 = zext i8 %conv219 to i32
  %mul221 = mul nsw i32 %conv220, 3
  %cmp222 = icmp sle i32 %mul221, 127
  br i1 %cmp222, label %cond.true.224, label %cond.false.230

cond.true.224:                                    ; preds = %cond.true.218
  %39 = load i64, i64* %byte8_count, align 8
  %conv225 = trunc i64 %39 to i8
  %conv226 = zext i8 %conv225 to i32
  %mul227 = mul nsw i32 %conv226, 3
  %conv228 = trunc i32 %mul227 to i8
  %conv229 = sext i8 %conv228 to i32
  br label %cond.end.238

cond.false.230:                                   ; preds = %cond.true.218
  %40 = load i64, i64* %byte8_count, align 8
  %conv231 = trunc i64 %40 to i8
  %conv232 = zext i8 %conv231 to i32
  %mul233 = mul nsw i32 %conv232, 3
  %sub234 = sub nsw i32 %mul233, -128
  %conv235 = trunc i32 %sub234 to i8
  %conv236 = sext i8 %conv235 to i32
  %add237 = add nsw i32 %conv236, -128
  br label %cond.end.238

cond.end.238:                                     ; preds = %cond.false.230, %cond.true.224
  %cond239 = phi i32 [ %conv229, %cond.true.224 ], [ %add237, %cond.false.230 ]
  %conv240 = sext i32 %cond239 to i64
  store i64 %conv240, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.241:                                   ; preds = %lor.lhs.false.212
  %41 = load i64, i64* %byte8_count, align 8
  %conv242 = trunc i64 %41 to i8
  %conv243 = zext i8 %conv242 to i32
  %mul244 = mul nsw i32 %conv243, 3
  %cmp245 = icmp sle i32 %mul244, 127
  br i1 %cmp245, label %cond.true.247, label %cond.false.253

cond.true.247:                                    ; preds = %cond.false.241
  %42 = load i64, i64* %byte8_count, align 8
  %conv248 = trunc i64 %42 to i8
  %conv249 = zext i8 %conv248 to i32
  %mul250 = mul nsw i32 %conv249, 3
  %conv251 = trunc i32 %mul250 to i8
  %conv252 = sext i8 %conv251 to i32
  br label %cond.end.261

cond.false.253:                                   ; preds = %cond.false.241
  %43 = load i64, i64* %byte8_count, align 8
  %conv254 = trunc i64 %43 to i8
  %conv255 = zext i8 %conv254 to i32
  %mul256 = mul nsw i32 %conv255, 3
  %sub257 = sub nsw i32 %mul256, -128
  %conv258 = trunc i32 %sub257 to i8
  %conv259 = sext i8 %conv258 to i32
  %add260 = add nsw i32 %conv259, -128
  br label %cond.end.261

cond.end.261:                                     ; preds = %cond.false.253, %cond.true.247
  %cond262 = phi i32 [ %conv252, %cond.true.247 ], [ %add260, %cond.false.253 ]
  %conv263 = sext i32 %cond262 to i64
  store i64 %conv263, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.264:                                   ; preds = %cond.true
  %44 = load i64, i64* %byte8_count, align 8
  %add265 = add nsw i64 0, %44
  %mul266 = mul nsw i64 0, %add265
  %sub267 = sub nsw i64 %mul266, 1
  %cmp268 = icmp slt i64 %sub267, 0
  br i1 %cmp268, label %cond.true.270, label %cond.false.287

cond.true.270:                                    ; preds = %cond.false.264
  %45 = load i64, i64* %byte8_count, align 8
  %add271 = add nsw i64 0, %45
  %mul272 = mul nsw i64 0, %add271
  %add273 = add nsw i64 %mul272, 0
  %neg274 = xor i64 %add273, -1
  %cmp275 = icmp eq i64 %neg274, -1
  %conv276 = zext i1 %cmp275 to i32
  %sub277 = sub nsw i32 0, %conv276
  %conv278 = sext i32 %sub277 to i64
  %46 = load i64, i64* %byte8_count, align 8
  %add279 = add nsw i64 0, %46
  %mul280 = mul nsw i64 0, %add279
  %add281 = add nsw i64 %mul280, 1
  %shl282 = shl i64 %add281, 62
  %sub283 = sub nsw i64 %shl282, 1
  %mul284 = mul nsw i64 %sub283, 2
  %add285 = add nsw i64 %mul284, 1
  %sub286 = sub nsw i64 %conv278, %add285
  br label %cond.end.291

cond.false.287:                                   ; preds = %cond.false.264
  %47 = load i64, i64* %byte8_count, align 8
  %add288 = add nsw i64 0, %47
  %mul289 = mul nsw i64 0, %add288
  %add290 = add nsw i64 %mul289, 0
  br label %cond.end.291

cond.end.291:                                     ; preds = %cond.false.287, %cond.true.270
  %cond292 = phi i64 [ %sub286, %cond.true.270 ], [ %add290, %cond.false.287 ]
  %cmp293 = icmp eq i64 %cond292, 0
  br i1 %cmp293, label %land.lhs.true.295, label %lor.lhs.false.298

land.lhs.true.295:                                ; preds = %cond.end.291
  %48 = load i64, i64* %byte8_count, align 8
  %cmp296 = icmp slt i64 %48, 0
  br i1 %cmp296, label %cond.true.433, label %lor.lhs.false.298

lor.lhs.false.298:                                ; preds = %land.lhs.true.295, %cond.end.291
  br i1 false, label %cond.true.299, label %cond.false.359

cond.true.299:                                    ; preds = %lor.lhs.false.298
  %49 = load i64, i64* %byte8_count, align 8
  %cmp300 = icmp slt i64 %49, 0
  br i1 %cmp300, label %cond.true.302, label %cond.false.325

cond.true.302:                                    ; preds = %cond.true.299
  %50 = load i64, i64* %byte8_count, align 8
  %51 = load i64, i64* %byte8_count, align 8
  %add303 = add nsw i64 0, %51
  %mul304 = mul nsw i64 0, %add303
  %sub305 = sub nsw i64 %mul304, 1
  %cmp306 = icmp slt i64 %sub305, 0
  br i1 %cmp306, label %cond.true.308, label %cond.false.316

cond.true.308:                                    ; preds = %cond.true.302
  %52 = load i64, i64* %byte8_count, align 8
  %add309 = add nsw i64 0, %52
  %mul310 = mul nsw i64 0, %add309
  %add311 = add nsw i64 %mul310, 1
  %shl312 = shl i64 %add311, 62
  %sub313 = sub nsw i64 %shl312, 1
  %mul314 = mul nsw i64 %sub313, 2
  %add315 = add nsw i64 %mul314, 1
  br label %cond.end.320

cond.false.316:                                   ; preds = %cond.true.302
  %53 = load i64, i64* %byte8_count, align 8
  %add317 = add nsw i64 0, %53
  %mul318 = mul nsw i64 0, %add317
  %sub319 = sub nsw i64 %mul318, 1
  br label %cond.end.320

cond.end.320:                                     ; preds = %cond.false.316, %cond.true.308
  %cond321 = phi i64 [ %add315, %cond.true.308 ], [ %sub319, %cond.false.316 ]
  %div322 = sdiv i64 %cond321, 3
  %cmp323 = icmp slt i64 %50, %div322
  br i1 %cmp323, label %cond.true.433, label %lor.lhs.false.419

cond.false.325:                                   ; preds = %cond.true.299
  br i1 false, label %cond.true.326, label %cond.false.327

cond.true.326:                                    ; preds = %cond.false.325
  br i1 false, label %cond.true.433, label %lor.lhs.false.419

cond.false.327:                                   ; preds = %cond.false.325
  %54 = load i64, i64* %byte8_count, align 8
  %add328 = add nsw i64 0, %54
  %mul329 = mul nsw i64 0, %add328
  %sub330 = sub nsw i64 %mul329, 1
  %cmp331 = icmp slt i64 %sub330, 0
  br i1 %cmp331, label %cond.true.333, label %cond.false.350

cond.true.333:                                    ; preds = %cond.false.327
  %55 = load i64, i64* %byte8_count, align 8
  %add334 = add nsw i64 0, %55
  %mul335 = mul nsw i64 0, %add334
  %add336 = add nsw i64 %mul335, 0
  %neg337 = xor i64 %add336, -1
  %cmp338 = icmp eq i64 %neg337, -1
  %conv339 = zext i1 %cmp338 to i32
  %sub340 = sub nsw i32 0, %conv339
  %conv341 = sext i32 %sub340 to i64
  %56 = load i64, i64* %byte8_count, align 8
  %add342 = add nsw i64 0, %56
  %mul343 = mul nsw i64 0, %add342
  %add344 = add nsw i64 %mul343, 1
  %shl345 = shl i64 %add344, 62
  %sub346 = sub nsw i64 %shl345, 1
  %mul347 = mul nsw i64 %sub346, 2
  %add348 = add nsw i64 %mul347, 1
  %sub349 = sub nsw i64 %conv341, %add348
  br label %cond.end.354

cond.false.350:                                   ; preds = %cond.false.327
  %57 = load i64, i64* %byte8_count, align 8
  %add351 = add nsw i64 0, %57
  %mul352 = mul nsw i64 0, %add351
  %add353 = add nsw i64 %mul352, 0
  br label %cond.end.354

cond.end.354:                                     ; preds = %cond.false.350, %cond.true.333
  %cond355 = phi i64 [ %sub349, %cond.true.333 ], [ %add353, %cond.false.350 ]
  %div356 = sdiv i64 %cond355, 3
  %58 = load i64, i64* %byte8_count, align 8
  %cmp357 = icmp slt i64 %div356, %58
  br i1 %cmp357, label %cond.true.433, label %lor.lhs.false.419

cond.false.359:                                   ; preds = %lor.lhs.false.298
  br i1 false, label %cond.true.360, label %cond.false.361

cond.true.360:                                    ; preds = %cond.false.359
  br i1 false, label %cond.true.433, label %lor.lhs.false.419

cond.false.361:                                   ; preds = %cond.false.359
  %59 = load i64, i64* %byte8_count, align 8
  %cmp362 = icmp slt i64 %59, 0
  br i1 %cmp362, label %cond.true.364, label %cond.false.396

cond.true.364:                                    ; preds = %cond.false.361
  %60 = load i64, i64* %byte8_count, align 8
  %61 = load i64, i64* %byte8_count, align 8
  %add365 = add nsw i64 0, %61
  %mul366 = mul nsw i64 0, %add365
  %sub367 = sub nsw i64 %mul366, 1
  %cmp368 = icmp slt i64 %sub367, 0
  br i1 %cmp368, label %cond.true.370, label %cond.false.387

cond.true.370:                                    ; preds = %cond.true.364
  %62 = load i64, i64* %byte8_count, align 8
  %add371 = add nsw i64 0, %62
  %mul372 = mul nsw i64 0, %add371
  %add373 = add nsw i64 %mul372, 0
  %neg374 = xor i64 %add373, -1
  %cmp375 = icmp eq i64 %neg374, -1
  %conv376 = zext i1 %cmp375 to i32
  %sub377 = sub nsw i32 0, %conv376
  %conv378 = sext i32 %sub377 to i64
  %63 = load i64, i64* %byte8_count, align 8
  %add379 = add nsw i64 0, %63
  %mul380 = mul nsw i64 0, %add379
  %add381 = add nsw i64 %mul380, 1
  %shl382 = shl i64 %add381, 62
  %sub383 = sub nsw i64 %shl382, 1
  %mul384 = mul nsw i64 %sub383, 2
  %add385 = add nsw i64 %mul384, 1
  %sub386 = sub nsw i64 %conv378, %add385
  br label %cond.end.391

cond.false.387:                                   ; preds = %cond.true.364
  %64 = load i64, i64* %byte8_count, align 8
  %add388 = add nsw i64 0, %64
  %mul389 = mul nsw i64 0, %add388
  %add390 = add nsw i64 %mul389, 0
  br label %cond.end.391

cond.end.391:                                     ; preds = %cond.false.387, %cond.true.370
  %cond392 = phi i64 [ %sub386, %cond.true.370 ], [ %add390, %cond.false.387 ]
  %div393 = sdiv i64 %cond392, 3
  %cmp394 = icmp slt i64 %60, %div393
  br i1 %cmp394, label %cond.true.433, label %lor.lhs.false.419

cond.false.396:                                   ; preds = %cond.false.361
  %65 = load i64, i64* %byte8_count, align 8
  %add397 = add nsw i64 0, %65
  %mul398 = mul nsw i64 0, %add397
  %sub399 = sub nsw i64 %mul398, 1
  %cmp400 = icmp slt i64 %sub399, 0
  br i1 %cmp400, label %cond.true.402, label %cond.false.410

cond.true.402:                                    ; preds = %cond.false.396
  %66 = load i64, i64* %byte8_count, align 8
  %add403 = add nsw i64 0, %66
  %mul404 = mul nsw i64 0, %add403
  %add405 = add nsw i64 %mul404, 1
  %shl406 = shl i64 %add405, 62
  %sub407 = sub nsw i64 %shl406, 1
  %mul408 = mul nsw i64 %sub407, 2
  %add409 = add nsw i64 %mul408, 1
  br label %cond.end.414

cond.false.410:                                   ; preds = %cond.false.396
  %67 = load i64, i64* %byte8_count, align 8
  %add411 = add nsw i64 0, %67
  %mul412 = mul nsw i64 0, %add411
  %sub413 = sub nsw i64 %mul412, 1
  br label %cond.end.414

cond.end.414:                                     ; preds = %cond.false.410, %cond.true.402
  %cond415 = phi i64 [ %add409, %cond.true.402 ], [ %sub413, %cond.false.410 ]
  %div416 = sdiv i64 %cond415, 3
  %68 = load i64, i64* %byte8_count, align 8
  %cmp417 = icmp slt i64 %div416, %68
  br i1 %cmp417, label %cond.true.433, label %lor.lhs.false.419

lor.lhs.false.419:                                ; preds = %cond.end.414, %cond.end.391, %cond.true.360, %cond.end.354, %cond.true.326, %cond.end.320
  %69 = load i64, i64* %byte8_count, align 8
  %mul420 = mul nsw i64 %69, 3
  %mul421 = mul nsw i64 0, %mul420
  %sub422 = sub nsw i64 %mul421, 1
  %cmp423 = icmp slt i64 %sub422, 0
  br i1 %cmp423, label %land.lhs.true.425, label %lor.lhs.false.429

land.lhs.true.425:                                ; preds = %lor.lhs.false.419
  %70 = load i64, i64* %byte8_count, align 8
  %mul426 = mul nsw i64 %70, 3
  %cmp427 = icmp slt i64 %mul426, -128
  br i1 %cmp427, label %cond.true.433, label %lor.lhs.false.429

lor.lhs.false.429:                                ; preds = %land.lhs.true.425, %lor.lhs.false.419
  %71 = load i64, i64* %byte8_count, align 8
  %mul430 = mul nsw i64 %71, 3
  %cmp431 = icmp slt i64 127, %mul430
  br i1 %cmp431, label %cond.true.433, label %cond.false.456

cond.true.433:                                    ; preds = %lor.lhs.false.429, %land.lhs.true.425, %cond.end.414, %cond.end.391, %cond.true.360, %cond.end.354, %cond.true.326, %cond.end.320, %land.lhs.true.295
  %72 = load i64, i64* %byte8_count, align 8
  %conv434 = trunc i64 %72 to i8
  %conv435 = zext i8 %conv434 to i32
  %mul436 = mul nsw i32 %conv435, 3
  %cmp437 = icmp sle i32 %mul436, 127
  br i1 %cmp437, label %cond.true.439, label %cond.false.445

cond.true.439:                                    ; preds = %cond.true.433
  %73 = load i64, i64* %byte8_count, align 8
  %conv440 = trunc i64 %73 to i8
  %conv441 = zext i8 %conv440 to i32
  %mul442 = mul nsw i32 %conv441, 3
  %conv443 = trunc i32 %mul442 to i8
  %conv444 = sext i8 %conv443 to i32
  br label %cond.end.453

cond.false.445:                                   ; preds = %cond.true.433
  %74 = load i64, i64* %byte8_count, align 8
  %conv446 = trunc i64 %74 to i8
  %conv447 = zext i8 %conv446 to i32
  %mul448 = mul nsw i32 %conv447, 3
  %sub449 = sub nsw i32 %mul448, -128
  %conv450 = trunc i32 %sub449 to i8
  %conv451 = sext i8 %conv450 to i32
  %add452 = add nsw i32 %conv451, -128
  br label %cond.end.453

cond.end.453:                                     ; preds = %cond.false.445, %cond.true.439
  %cond454 = phi i32 [ %conv444, %cond.true.439 ], [ %add452, %cond.false.445 ]
  %conv455 = sext i32 %cond454 to i64
  store i64 %conv455, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.456:                                   ; preds = %lor.lhs.false.429
  %75 = load i64, i64* %byte8_count, align 8
  %conv457 = trunc i64 %75 to i8
  %conv458 = zext i8 %conv457 to i32
  %mul459 = mul nsw i32 %conv458, 3
  %cmp460 = icmp sle i32 %mul459, 127
  br i1 %cmp460, label %cond.true.462, label %cond.false.468

cond.true.462:                                    ; preds = %cond.false.456
  %76 = load i64, i64* %byte8_count, align 8
  %conv463 = trunc i64 %76 to i8
  %conv464 = zext i8 %conv463 to i32
  %mul465 = mul nsw i32 %conv464, 3
  %conv466 = trunc i32 %mul465 to i8
  %conv467 = sext i8 %conv466 to i32
  br label %cond.end.476

cond.false.468:                                   ; preds = %cond.false.456
  %77 = load i64, i64* %byte8_count, align 8
  %conv469 = trunc i64 %77 to i8
  %conv470 = zext i8 %conv469 to i32
  %mul471 = mul nsw i32 %conv470, 3
  %sub472 = sub nsw i32 %mul471, -128
  %conv473 = trunc i32 %sub472 to i8
  %conv474 = sext i8 %conv473 to i32
  %add475 = add nsw i32 %conv474, -128
  br label %cond.end.476

cond.end.476:                                     ; preds = %cond.false.468, %cond.true.462
  %cond477 = phi i32 [ %conv467, %cond.true.462 ], [ %add475, %cond.false.468 ]
  %conv478 = sext i32 %cond477 to i64
  store i64 %conv478, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.479:                                   ; preds = %if.end.6
  br i1 false, label %cond.true.480, label %cond.false.964

cond.true.480:                                    ; preds = %cond.false.479
  br i1 false, label %cond.true.481, label %cond.false.749

cond.true.481:                                    ; preds = %cond.true.480
  %78 = load i64, i64* %byte8_count, align 8
  %conv482 = trunc i64 %78 to i16
  %conv483 = sext i16 %conv482 to i32
  %add484 = add nsw i32 0, %conv483
  %mul485 = mul nsw i32 0, %add484
  %sub486 = sub nsw i32 %mul485, 1
  %cmp487 = icmp slt i32 %sub486, 0
  br i1 %cmp487, label %cond.true.489, label %cond.false.509

cond.true.489:                                    ; preds = %cond.true.481
  %79 = load i64, i64* %byte8_count, align 8
  %conv490 = trunc i64 %79 to i16
  %conv491 = sext i16 %conv490 to i32
  %add492 = add nsw i32 0, %conv491
  %mul493 = mul nsw i32 0, %add492
  %add494 = add nsw i32 %mul493, 0
  %neg495 = xor i32 %add494, -1
  %cmp496 = icmp eq i32 %neg495, -1
  %conv497 = zext i1 %cmp496 to i32
  %sub498 = sub nsw i32 0, %conv497
  %80 = load i64, i64* %byte8_count, align 8
  %conv499 = trunc i64 %80 to i16
  %conv500 = sext i16 %conv499 to i32
  %add501 = add nsw i32 0, %conv500
  %mul502 = mul nsw i32 0, %add501
  %add503 = add nsw i32 %mul502, 1
  %shl504 = shl i32 %add503, 30
  %sub505 = sub nsw i32 %shl504, 1
  %mul506 = mul nsw i32 %sub505, 2
  %add507 = add nsw i32 %mul506, 1
  %sub508 = sub nsw i32 %sub498, %add507
  br label %cond.end.515

cond.false.509:                                   ; preds = %cond.true.481
  %81 = load i64, i64* %byte8_count, align 8
  %conv510 = trunc i64 %81 to i16
  %conv511 = sext i16 %conv510 to i32
  %add512 = add nsw i32 0, %conv511
  %mul513 = mul nsw i32 0, %add512
  %add514 = add nsw i32 %mul513, 0
  br label %cond.end.515

cond.end.515:                                     ; preds = %cond.false.509, %cond.true.489
  %cond516 = phi i32 [ %sub508, %cond.true.489 ], [ %add514, %cond.false.509 ]
  %cmp517 = icmp eq i32 %cond516, 0
  br i1 %cmp517, label %land.lhs.true.519, label %lor.lhs.false.524

land.lhs.true.519:                                ; preds = %cond.end.515
  %82 = load i64, i64* %byte8_count, align 8
  %conv520 = trunc i64 %82 to i16
  %conv521 = sext i16 %conv520 to i32
  %cmp522 = icmp slt i32 %conv521, 0
  br i1 %cmp522, label %cond.true.703, label %lor.lhs.false.524

lor.lhs.false.524:                                ; preds = %land.lhs.true.519, %cond.end.515
  br i1 false, label %cond.true.525, label %cond.false.604

cond.true.525:                                    ; preds = %lor.lhs.false.524
  %83 = load i64, i64* %byte8_count, align 8
  %conv526 = trunc i64 %83 to i16
  %conv527 = sext i16 %conv526 to i32
  %cmp528 = icmp slt i32 %conv527, 0
  br i1 %cmp528, label %cond.true.530, label %cond.false.561

cond.true.530:                                    ; preds = %cond.true.525
  %84 = load i64, i64* %byte8_count, align 8
  %conv531 = trunc i64 %84 to i16
  %conv532 = sext i16 %conv531 to i32
  %85 = load i64, i64* %byte8_count, align 8
  %conv533 = trunc i64 %85 to i16
  %conv534 = sext i16 %conv533 to i32
  %add535 = add nsw i32 0, %conv534
  %mul536 = mul nsw i32 0, %add535
  %sub537 = sub nsw i32 %mul536, 1
  %cmp538 = icmp slt i32 %sub537, 0
  br i1 %cmp538, label %cond.true.540, label %cond.false.550

cond.true.540:                                    ; preds = %cond.true.530
  %86 = load i64, i64* %byte8_count, align 8
  %conv541 = trunc i64 %86 to i16
  %conv542 = sext i16 %conv541 to i32
  %add543 = add nsw i32 0, %conv542
  %mul544 = mul nsw i32 0, %add543
  %add545 = add nsw i32 %mul544, 1
  %shl546 = shl i32 %add545, 30
  %sub547 = sub nsw i32 %shl546, 1
  %mul548 = mul nsw i32 %sub547, 2
  %add549 = add nsw i32 %mul548, 1
  br label %cond.end.556

cond.false.550:                                   ; preds = %cond.true.530
  %87 = load i64, i64* %byte8_count, align 8
  %conv551 = trunc i64 %87 to i16
  %conv552 = sext i16 %conv551 to i32
  %add553 = add nsw i32 0, %conv552
  %mul554 = mul nsw i32 0, %add553
  %sub555 = sub nsw i32 %mul554, 1
  br label %cond.end.556

cond.end.556:                                     ; preds = %cond.false.550, %cond.true.540
  %cond557 = phi i32 [ %add549, %cond.true.540 ], [ %sub555, %cond.false.550 ]
  %div558 = sdiv i32 %cond557, 3
  %cmp559 = icmp slt i32 %conv532, %div558
  br i1 %cmp559, label %cond.true.703, label %lor.lhs.false.683

cond.false.561:                                   ; preds = %cond.true.525
  br i1 false, label %cond.true.562, label %cond.false.563

cond.true.562:                                    ; preds = %cond.false.561
  br i1 false, label %cond.true.703, label %lor.lhs.false.683

cond.false.563:                                   ; preds = %cond.false.561
  %88 = load i64, i64* %byte8_count, align 8
  %conv564 = trunc i64 %88 to i16
  %conv565 = sext i16 %conv564 to i32
  %add566 = add nsw i32 0, %conv565
  %mul567 = mul nsw i32 0, %add566
  %sub568 = sub nsw i32 %mul567, 1
  %cmp569 = icmp slt i32 %sub568, 0
  br i1 %cmp569, label %cond.true.571, label %cond.false.591

cond.true.571:                                    ; preds = %cond.false.563
  %89 = load i64, i64* %byte8_count, align 8
  %conv572 = trunc i64 %89 to i16
  %conv573 = sext i16 %conv572 to i32
  %add574 = add nsw i32 0, %conv573
  %mul575 = mul nsw i32 0, %add574
  %add576 = add nsw i32 %mul575, 0
  %neg577 = xor i32 %add576, -1
  %cmp578 = icmp eq i32 %neg577, -1
  %conv579 = zext i1 %cmp578 to i32
  %sub580 = sub nsw i32 0, %conv579
  %90 = load i64, i64* %byte8_count, align 8
  %conv581 = trunc i64 %90 to i16
  %conv582 = sext i16 %conv581 to i32
  %add583 = add nsw i32 0, %conv582
  %mul584 = mul nsw i32 0, %add583
  %add585 = add nsw i32 %mul584, 1
  %shl586 = shl i32 %add585, 30
  %sub587 = sub nsw i32 %shl586, 1
  %mul588 = mul nsw i32 %sub587, 2
  %add589 = add nsw i32 %mul588, 1
  %sub590 = sub nsw i32 %sub580, %add589
  br label %cond.end.597

cond.false.591:                                   ; preds = %cond.false.563
  %91 = load i64, i64* %byte8_count, align 8
  %conv592 = trunc i64 %91 to i16
  %conv593 = sext i16 %conv592 to i32
  %add594 = add nsw i32 0, %conv593
  %mul595 = mul nsw i32 0, %add594
  %add596 = add nsw i32 %mul595, 0
  br label %cond.end.597

cond.end.597:                                     ; preds = %cond.false.591, %cond.true.571
  %cond598 = phi i32 [ %sub590, %cond.true.571 ], [ %add596, %cond.false.591 ]
  %div599 = sdiv i32 %cond598, 3
  %92 = load i64, i64* %byte8_count, align 8
  %conv600 = trunc i64 %92 to i16
  %conv601 = sext i16 %conv600 to i32
  %cmp602 = icmp slt i32 %div599, %conv601
  br i1 %cmp602, label %cond.true.703, label %lor.lhs.false.683

cond.false.604:                                   ; preds = %lor.lhs.false.524
  br i1 false, label %cond.true.605, label %cond.false.606

cond.true.605:                                    ; preds = %cond.false.604
  br i1 false, label %cond.true.703, label %lor.lhs.false.683

cond.false.606:                                   ; preds = %cond.false.604
  %93 = load i64, i64* %byte8_count, align 8
  %conv607 = trunc i64 %93 to i16
  %conv608 = sext i16 %conv607 to i32
  %cmp609 = icmp slt i32 %conv608, 0
  br i1 %cmp609, label %cond.true.611, label %cond.false.652

cond.true.611:                                    ; preds = %cond.false.606
  %94 = load i64, i64* %byte8_count, align 8
  %conv612 = trunc i64 %94 to i16
  %conv613 = sext i16 %conv612 to i32
  %95 = load i64, i64* %byte8_count, align 8
  %conv614 = trunc i64 %95 to i16
  %conv615 = sext i16 %conv614 to i32
  %add616 = add nsw i32 0, %conv615
  %mul617 = mul nsw i32 0, %add616
  %sub618 = sub nsw i32 %mul617, 1
  %cmp619 = icmp slt i32 %sub618, 0
  br i1 %cmp619, label %cond.true.621, label %cond.false.641

cond.true.621:                                    ; preds = %cond.true.611
  %96 = load i64, i64* %byte8_count, align 8
  %conv622 = trunc i64 %96 to i16
  %conv623 = sext i16 %conv622 to i32
  %add624 = add nsw i32 0, %conv623
  %mul625 = mul nsw i32 0, %add624
  %add626 = add nsw i32 %mul625, 0
  %neg627 = xor i32 %add626, -1
  %cmp628 = icmp eq i32 %neg627, -1
  %conv629 = zext i1 %cmp628 to i32
  %sub630 = sub nsw i32 0, %conv629
  %97 = load i64, i64* %byte8_count, align 8
  %conv631 = trunc i64 %97 to i16
  %conv632 = sext i16 %conv631 to i32
  %add633 = add nsw i32 0, %conv632
  %mul634 = mul nsw i32 0, %add633
  %add635 = add nsw i32 %mul634, 1
  %shl636 = shl i32 %add635, 30
  %sub637 = sub nsw i32 %shl636, 1
  %mul638 = mul nsw i32 %sub637, 2
  %add639 = add nsw i32 %mul638, 1
  %sub640 = sub nsw i32 %sub630, %add639
  br label %cond.end.647

cond.false.641:                                   ; preds = %cond.true.611
  %98 = load i64, i64* %byte8_count, align 8
  %conv642 = trunc i64 %98 to i16
  %conv643 = sext i16 %conv642 to i32
  %add644 = add nsw i32 0, %conv643
  %mul645 = mul nsw i32 0, %add644
  %add646 = add nsw i32 %mul645, 0
  br label %cond.end.647

cond.end.647:                                     ; preds = %cond.false.641, %cond.true.621
  %cond648 = phi i32 [ %sub640, %cond.true.621 ], [ %add646, %cond.false.641 ]
  %div649 = sdiv i32 %cond648, 3
  %cmp650 = icmp slt i32 %conv613, %div649
  br i1 %cmp650, label %cond.true.703, label %lor.lhs.false.683

cond.false.652:                                   ; preds = %cond.false.606
  %99 = load i64, i64* %byte8_count, align 8
  %conv653 = trunc i64 %99 to i16
  %conv654 = sext i16 %conv653 to i32
  %add655 = add nsw i32 0, %conv654
  %mul656 = mul nsw i32 0, %add655
  %sub657 = sub nsw i32 %mul656, 1
  %cmp658 = icmp slt i32 %sub657, 0
  br i1 %cmp658, label %cond.true.660, label %cond.false.670

cond.true.660:                                    ; preds = %cond.false.652
  %100 = load i64, i64* %byte8_count, align 8
  %conv661 = trunc i64 %100 to i16
  %conv662 = sext i16 %conv661 to i32
  %add663 = add nsw i32 0, %conv662
  %mul664 = mul nsw i32 0, %add663
  %add665 = add nsw i32 %mul664, 1
  %shl666 = shl i32 %add665, 30
  %sub667 = sub nsw i32 %shl666, 1
  %mul668 = mul nsw i32 %sub667, 2
  %add669 = add nsw i32 %mul668, 1
  br label %cond.end.676

cond.false.670:                                   ; preds = %cond.false.652
  %101 = load i64, i64* %byte8_count, align 8
  %conv671 = trunc i64 %101 to i16
  %conv672 = sext i16 %conv671 to i32
  %add673 = add nsw i32 0, %conv672
  %mul674 = mul nsw i32 0, %add673
  %sub675 = sub nsw i32 %mul674, 1
  br label %cond.end.676

cond.end.676:                                     ; preds = %cond.false.670, %cond.true.660
  %cond677 = phi i32 [ %add669, %cond.true.660 ], [ %sub675, %cond.false.670 ]
  %div678 = sdiv i32 %cond677, 3
  %102 = load i64, i64* %byte8_count, align 8
  %conv679 = trunc i64 %102 to i16
  %conv680 = sext i16 %conv679 to i32
  %cmp681 = icmp slt i32 %div678, %conv680
  br i1 %cmp681, label %cond.true.703, label %lor.lhs.false.683

lor.lhs.false.683:                                ; preds = %cond.end.676, %cond.end.647, %cond.true.605, %cond.end.597, %cond.true.562, %cond.end.556
  %103 = load i64, i64* %byte8_count, align 8
  %conv684 = trunc i64 %103 to i16
  %conv685 = sext i16 %conv684 to i32
  %mul686 = mul nsw i32 %conv685, 3
  %mul687 = mul nsw i32 0, %mul686
  %sub688 = sub nsw i32 %mul687, 1
  %cmp689 = icmp slt i32 %sub688, 0
  br i1 %cmp689, label %land.lhs.true.691, label %lor.lhs.false.697

land.lhs.true.691:                                ; preds = %lor.lhs.false.683
  %104 = load i64, i64* %byte8_count, align 8
  %conv692 = trunc i64 %104 to i16
  %conv693 = sext i16 %conv692 to i32
  %mul694 = mul nsw i32 %conv693, 3
  %cmp695 = icmp slt i32 %mul694, -32768
  br i1 %cmp695, label %cond.true.703, label %lor.lhs.false.697

lor.lhs.false.697:                                ; preds = %land.lhs.true.691, %lor.lhs.false.683
  %105 = load i64, i64* %byte8_count, align 8
  %conv698 = trunc i64 %105 to i16
  %conv699 = sext i16 %conv698 to i32
  %mul700 = mul nsw i32 %conv699, 3
  %cmp701 = icmp slt i32 32767, %mul700
  br i1 %cmp701, label %cond.true.703, label %cond.false.726

cond.true.703:                                    ; preds = %lor.lhs.false.697, %land.lhs.true.691, %cond.end.676, %cond.end.647, %cond.true.605, %cond.end.597, %cond.true.562, %cond.end.556, %land.lhs.true.519
  %106 = load i64, i64* %byte8_count, align 8
  %conv704 = trunc i64 %106 to i16
  %conv705 = zext i16 %conv704 to i32
  %mul706 = mul nsw i32 %conv705, 3
  %cmp707 = icmp sle i32 %mul706, 32767
  br i1 %cmp707, label %cond.true.709, label %cond.false.715

cond.true.709:                                    ; preds = %cond.true.703
  %107 = load i64, i64* %byte8_count, align 8
  %conv710 = trunc i64 %107 to i16
  %conv711 = zext i16 %conv710 to i32
  %mul712 = mul nsw i32 %conv711, 3
  %conv713 = trunc i32 %mul712 to i16
  %conv714 = sext i16 %conv713 to i32
  br label %cond.end.723

cond.false.715:                                   ; preds = %cond.true.703
  %108 = load i64, i64* %byte8_count, align 8
  %conv716 = trunc i64 %108 to i16
  %conv717 = zext i16 %conv716 to i32
  %mul718 = mul nsw i32 %conv717, 3
  %sub719 = sub nsw i32 %mul718, -32768
  %conv720 = trunc i32 %sub719 to i16
  %conv721 = sext i16 %conv720 to i32
  %add722 = add nsw i32 %conv721, -32768
  br label %cond.end.723

cond.end.723:                                     ; preds = %cond.false.715, %cond.true.709
  %cond724 = phi i32 [ %conv714, %cond.true.709 ], [ %add722, %cond.false.715 ]
  %conv725 = sext i32 %cond724 to i64
  store i64 %conv725, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.726:                                   ; preds = %lor.lhs.false.697
  %109 = load i64, i64* %byte8_count, align 8
  %conv727 = trunc i64 %109 to i16
  %conv728 = zext i16 %conv727 to i32
  %mul729 = mul nsw i32 %conv728, 3
  %cmp730 = icmp sle i32 %mul729, 32767
  br i1 %cmp730, label %cond.true.732, label %cond.false.738

cond.true.732:                                    ; preds = %cond.false.726
  %110 = load i64, i64* %byte8_count, align 8
  %conv733 = trunc i64 %110 to i16
  %conv734 = zext i16 %conv733 to i32
  %mul735 = mul nsw i32 %conv734, 3
  %conv736 = trunc i32 %mul735 to i16
  %conv737 = sext i16 %conv736 to i32
  br label %cond.end.746

cond.false.738:                                   ; preds = %cond.false.726
  %111 = load i64, i64* %byte8_count, align 8
  %conv739 = trunc i64 %111 to i16
  %conv740 = zext i16 %conv739 to i32
  %mul741 = mul nsw i32 %conv740, 3
  %sub742 = sub nsw i32 %mul741, -32768
  %conv743 = trunc i32 %sub742 to i16
  %conv744 = sext i16 %conv743 to i32
  %add745 = add nsw i32 %conv744, -32768
  br label %cond.end.746

cond.end.746:                                     ; preds = %cond.false.738, %cond.true.732
  %cond747 = phi i32 [ %conv737, %cond.true.732 ], [ %add745, %cond.false.738 ]
  %conv748 = sext i32 %cond747 to i64
  store i64 %conv748, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.749:                                   ; preds = %cond.true.480
  %112 = load i64, i64* %byte8_count, align 8
  %add750 = add nsw i64 0, %112
  %mul751 = mul nsw i64 0, %add750
  %sub752 = sub nsw i64 %mul751, 1
  %cmp753 = icmp slt i64 %sub752, 0
  br i1 %cmp753, label %cond.true.755, label %cond.false.772

cond.true.755:                                    ; preds = %cond.false.749
  %113 = load i64, i64* %byte8_count, align 8
  %add756 = add nsw i64 0, %113
  %mul757 = mul nsw i64 0, %add756
  %add758 = add nsw i64 %mul757, 0
  %neg759 = xor i64 %add758, -1
  %cmp760 = icmp eq i64 %neg759, -1
  %conv761 = zext i1 %cmp760 to i32
  %sub762 = sub nsw i32 0, %conv761
  %conv763 = sext i32 %sub762 to i64
  %114 = load i64, i64* %byte8_count, align 8
  %add764 = add nsw i64 0, %114
  %mul765 = mul nsw i64 0, %add764
  %add766 = add nsw i64 %mul765, 1
  %shl767 = shl i64 %add766, 62
  %sub768 = sub nsw i64 %shl767, 1
  %mul769 = mul nsw i64 %sub768, 2
  %add770 = add nsw i64 %mul769, 1
  %sub771 = sub nsw i64 %conv763, %add770
  br label %cond.end.776

cond.false.772:                                   ; preds = %cond.false.749
  %115 = load i64, i64* %byte8_count, align 8
  %add773 = add nsw i64 0, %115
  %mul774 = mul nsw i64 0, %add773
  %add775 = add nsw i64 %mul774, 0
  br label %cond.end.776

cond.end.776:                                     ; preds = %cond.false.772, %cond.true.755
  %cond777 = phi i64 [ %sub771, %cond.true.755 ], [ %add775, %cond.false.772 ]
  %cmp778 = icmp eq i64 %cond777, 0
  br i1 %cmp778, label %land.lhs.true.780, label %lor.lhs.false.783

land.lhs.true.780:                                ; preds = %cond.end.776
  %116 = load i64, i64* %byte8_count, align 8
  %cmp781 = icmp slt i64 %116, 0
  br i1 %cmp781, label %cond.true.918, label %lor.lhs.false.783

lor.lhs.false.783:                                ; preds = %land.lhs.true.780, %cond.end.776
  br i1 false, label %cond.true.784, label %cond.false.844

cond.true.784:                                    ; preds = %lor.lhs.false.783
  %117 = load i64, i64* %byte8_count, align 8
  %cmp785 = icmp slt i64 %117, 0
  br i1 %cmp785, label %cond.true.787, label %cond.false.810

cond.true.787:                                    ; preds = %cond.true.784
  %118 = load i64, i64* %byte8_count, align 8
  %119 = load i64, i64* %byte8_count, align 8
  %add788 = add nsw i64 0, %119
  %mul789 = mul nsw i64 0, %add788
  %sub790 = sub nsw i64 %mul789, 1
  %cmp791 = icmp slt i64 %sub790, 0
  br i1 %cmp791, label %cond.true.793, label %cond.false.801

cond.true.793:                                    ; preds = %cond.true.787
  %120 = load i64, i64* %byte8_count, align 8
  %add794 = add nsw i64 0, %120
  %mul795 = mul nsw i64 0, %add794
  %add796 = add nsw i64 %mul795, 1
  %shl797 = shl i64 %add796, 62
  %sub798 = sub nsw i64 %shl797, 1
  %mul799 = mul nsw i64 %sub798, 2
  %add800 = add nsw i64 %mul799, 1
  br label %cond.end.805

cond.false.801:                                   ; preds = %cond.true.787
  %121 = load i64, i64* %byte8_count, align 8
  %add802 = add nsw i64 0, %121
  %mul803 = mul nsw i64 0, %add802
  %sub804 = sub nsw i64 %mul803, 1
  br label %cond.end.805

cond.end.805:                                     ; preds = %cond.false.801, %cond.true.793
  %cond806 = phi i64 [ %add800, %cond.true.793 ], [ %sub804, %cond.false.801 ]
  %div807 = sdiv i64 %cond806, 3
  %cmp808 = icmp slt i64 %118, %div807
  br i1 %cmp808, label %cond.true.918, label %lor.lhs.false.904

cond.false.810:                                   ; preds = %cond.true.784
  br i1 false, label %cond.true.811, label %cond.false.812

cond.true.811:                                    ; preds = %cond.false.810
  br i1 false, label %cond.true.918, label %lor.lhs.false.904

cond.false.812:                                   ; preds = %cond.false.810
  %122 = load i64, i64* %byte8_count, align 8
  %add813 = add nsw i64 0, %122
  %mul814 = mul nsw i64 0, %add813
  %sub815 = sub nsw i64 %mul814, 1
  %cmp816 = icmp slt i64 %sub815, 0
  br i1 %cmp816, label %cond.true.818, label %cond.false.835

cond.true.818:                                    ; preds = %cond.false.812
  %123 = load i64, i64* %byte8_count, align 8
  %add819 = add nsw i64 0, %123
  %mul820 = mul nsw i64 0, %add819
  %add821 = add nsw i64 %mul820, 0
  %neg822 = xor i64 %add821, -1
  %cmp823 = icmp eq i64 %neg822, -1
  %conv824 = zext i1 %cmp823 to i32
  %sub825 = sub nsw i32 0, %conv824
  %conv826 = sext i32 %sub825 to i64
  %124 = load i64, i64* %byte8_count, align 8
  %add827 = add nsw i64 0, %124
  %mul828 = mul nsw i64 0, %add827
  %add829 = add nsw i64 %mul828, 1
  %shl830 = shl i64 %add829, 62
  %sub831 = sub nsw i64 %shl830, 1
  %mul832 = mul nsw i64 %sub831, 2
  %add833 = add nsw i64 %mul832, 1
  %sub834 = sub nsw i64 %conv826, %add833
  br label %cond.end.839

cond.false.835:                                   ; preds = %cond.false.812
  %125 = load i64, i64* %byte8_count, align 8
  %add836 = add nsw i64 0, %125
  %mul837 = mul nsw i64 0, %add836
  %add838 = add nsw i64 %mul837, 0
  br label %cond.end.839

cond.end.839:                                     ; preds = %cond.false.835, %cond.true.818
  %cond840 = phi i64 [ %sub834, %cond.true.818 ], [ %add838, %cond.false.835 ]
  %div841 = sdiv i64 %cond840, 3
  %126 = load i64, i64* %byte8_count, align 8
  %cmp842 = icmp slt i64 %div841, %126
  br i1 %cmp842, label %cond.true.918, label %lor.lhs.false.904

cond.false.844:                                   ; preds = %lor.lhs.false.783
  br i1 false, label %cond.true.845, label %cond.false.846

cond.true.845:                                    ; preds = %cond.false.844
  br i1 false, label %cond.true.918, label %lor.lhs.false.904

cond.false.846:                                   ; preds = %cond.false.844
  %127 = load i64, i64* %byte8_count, align 8
  %cmp847 = icmp slt i64 %127, 0
  br i1 %cmp847, label %cond.true.849, label %cond.false.881

cond.true.849:                                    ; preds = %cond.false.846
  %128 = load i64, i64* %byte8_count, align 8
  %129 = load i64, i64* %byte8_count, align 8
  %add850 = add nsw i64 0, %129
  %mul851 = mul nsw i64 0, %add850
  %sub852 = sub nsw i64 %mul851, 1
  %cmp853 = icmp slt i64 %sub852, 0
  br i1 %cmp853, label %cond.true.855, label %cond.false.872

cond.true.855:                                    ; preds = %cond.true.849
  %130 = load i64, i64* %byte8_count, align 8
  %add856 = add nsw i64 0, %130
  %mul857 = mul nsw i64 0, %add856
  %add858 = add nsw i64 %mul857, 0
  %neg859 = xor i64 %add858, -1
  %cmp860 = icmp eq i64 %neg859, -1
  %conv861 = zext i1 %cmp860 to i32
  %sub862 = sub nsw i32 0, %conv861
  %conv863 = sext i32 %sub862 to i64
  %131 = load i64, i64* %byte8_count, align 8
  %add864 = add nsw i64 0, %131
  %mul865 = mul nsw i64 0, %add864
  %add866 = add nsw i64 %mul865, 1
  %shl867 = shl i64 %add866, 62
  %sub868 = sub nsw i64 %shl867, 1
  %mul869 = mul nsw i64 %sub868, 2
  %add870 = add nsw i64 %mul869, 1
  %sub871 = sub nsw i64 %conv863, %add870
  br label %cond.end.876

cond.false.872:                                   ; preds = %cond.true.849
  %132 = load i64, i64* %byte8_count, align 8
  %add873 = add nsw i64 0, %132
  %mul874 = mul nsw i64 0, %add873
  %add875 = add nsw i64 %mul874, 0
  br label %cond.end.876

cond.end.876:                                     ; preds = %cond.false.872, %cond.true.855
  %cond877 = phi i64 [ %sub871, %cond.true.855 ], [ %add875, %cond.false.872 ]
  %div878 = sdiv i64 %cond877, 3
  %cmp879 = icmp slt i64 %128, %div878
  br i1 %cmp879, label %cond.true.918, label %lor.lhs.false.904

cond.false.881:                                   ; preds = %cond.false.846
  %133 = load i64, i64* %byte8_count, align 8
  %add882 = add nsw i64 0, %133
  %mul883 = mul nsw i64 0, %add882
  %sub884 = sub nsw i64 %mul883, 1
  %cmp885 = icmp slt i64 %sub884, 0
  br i1 %cmp885, label %cond.true.887, label %cond.false.895

cond.true.887:                                    ; preds = %cond.false.881
  %134 = load i64, i64* %byte8_count, align 8
  %add888 = add nsw i64 0, %134
  %mul889 = mul nsw i64 0, %add888
  %add890 = add nsw i64 %mul889, 1
  %shl891 = shl i64 %add890, 62
  %sub892 = sub nsw i64 %shl891, 1
  %mul893 = mul nsw i64 %sub892, 2
  %add894 = add nsw i64 %mul893, 1
  br label %cond.end.899

cond.false.895:                                   ; preds = %cond.false.881
  %135 = load i64, i64* %byte8_count, align 8
  %add896 = add nsw i64 0, %135
  %mul897 = mul nsw i64 0, %add896
  %sub898 = sub nsw i64 %mul897, 1
  br label %cond.end.899

cond.end.899:                                     ; preds = %cond.false.895, %cond.true.887
  %cond900 = phi i64 [ %add894, %cond.true.887 ], [ %sub898, %cond.false.895 ]
  %div901 = sdiv i64 %cond900, 3
  %136 = load i64, i64* %byte8_count, align 8
  %cmp902 = icmp slt i64 %div901, %136
  br i1 %cmp902, label %cond.true.918, label %lor.lhs.false.904

lor.lhs.false.904:                                ; preds = %cond.end.899, %cond.end.876, %cond.true.845, %cond.end.839, %cond.true.811, %cond.end.805
  %137 = load i64, i64* %byte8_count, align 8
  %mul905 = mul nsw i64 %137, 3
  %mul906 = mul nsw i64 0, %mul905
  %sub907 = sub nsw i64 %mul906, 1
  %cmp908 = icmp slt i64 %sub907, 0
  br i1 %cmp908, label %land.lhs.true.910, label %lor.lhs.false.914

land.lhs.true.910:                                ; preds = %lor.lhs.false.904
  %138 = load i64, i64* %byte8_count, align 8
  %mul911 = mul nsw i64 %138, 3
  %cmp912 = icmp slt i64 %mul911, -32768
  br i1 %cmp912, label %cond.true.918, label %lor.lhs.false.914

lor.lhs.false.914:                                ; preds = %land.lhs.true.910, %lor.lhs.false.904
  %139 = load i64, i64* %byte8_count, align 8
  %mul915 = mul nsw i64 %139, 3
  %cmp916 = icmp slt i64 32767, %mul915
  br i1 %cmp916, label %cond.true.918, label %cond.false.941

cond.true.918:                                    ; preds = %lor.lhs.false.914, %land.lhs.true.910, %cond.end.899, %cond.end.876, %cond.true.845, %cond.end.839, %cond.true.811, %cond.end.805, %land.lhs.true.780
  %140 = load i64, i64* %byte8_count, align 8
  %conv919 = trunc i64 %140 to i16
  %conv920 = zext i16 %conv919 to i32
  %mul921 = mul nsw i32 %conv920, 3
  %cmp922 = icmp sle i32 %mul921, 32767
  br i1 %cmp922, label %cond.true.924, label %cond.false.930

cond.true.924:                                    ; preds = %cond.true.918
  %141 = load i64, i64* %byte8_count, align 8
  %conv925 = trunc i64 %141 to i16
  %conv926 = zext i16 %conv925 to i32
  %mul927 = mul nsw i32 %conv926, 3
  %conv928 = trunc i32 %mul927 to i16
  %conv929 = sext i16 %conv928 to i32
  br label %cond.end.938

cond.false.930:                                   ; preds = %cond.true.918
  %142 = load i64, i64* %byte8_count, align 8
  %conv931 = trunc i64 %142 to i16
  %conv932 = zext i16 %conv931 to i32
  %mul933 = mul nsw i32 %conv932, 3
  %sub934 = sub nsw i32 %mul933, -32768
  %conv935 = trunc i32 %sub934 to i16
  %conv936 = sext i16 %conv935 to i32
  %add937 = add nsw i32 %conv936, -32768
  br label %cond.end.938

cond.end.938:                                     ; preds = %cond.false.930, %cond.true.924
  %cond939 = phi i32 [ %conv929, %cond.true.924 ], [ %add937, %cond.false.930 ]
  %conv940 = sext i32 %cond939 to i64
  store i64 %conv940, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.941:                                   ; preds = %lor.lhs.false.914
  %143 = load i64, i64* %byte8_count, align 8
  %conv942 = trunc i64 %143 to i16
  %conv943 = zext i16 %conv942 to i32
  %mul944 = mul nsw i32 %conv943, 3
  %cmp945 = icmp sle i32 %mul944, 32767
  br i1 %cmp945, label %cond.true.947, label %cond.false.953

cond.true.947:                                    ; preds = %cond.false.941
  %144 = load i64, i64* %byte8_count, align 8
  %conv948 = trunc i64 %144 to i16
  %conv949 = zext i16 %conv948 to i32
  %mul950 = mul nsw i32 %conv949, 3
  %conv951 = trunc i32 %mul950 to i16
  %conv952 = sext i16 %conv951 to i32
  br label %cond.end.961

cond.false.953:                                   ; preds = %cond.false.941
  %145 = load i64, i64* %byte8_count, align 8
  %conv954 = trunc i64 %145 to i16
  %conv955 = zext i16 %conv954 to i32
  %mul956 = mul nsw i32 %conv955, 3
  %sub957 = sub nsw i32 %mul956, -32768
  %conv958 = trunc i32 %sub957 to i16
  %conv959 = sext i16 %conv958 to i32
  %add960 = add nsw i32 %conv959, -32768
  br label %cond.end.961

cond.end.961:                                     ; preds = %cond.false.953, %cond.true.947
  %cond962 = phi i32 [ %conv952, %cond.true.947 ], [ %add960, %cond.false.953 ]
  %conv963 = sext i32 %cond962 to i64
  store i64 %conv963, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.964:                                   ; preds = %cond.false.479
  br i1 false, label %cond.true.965, label %cond.false.1393

cond.true.965:                                    ; preds = %cond.false.964
  br i1 false, label %cond.true.966, label %cond.false.1192

cond.true.966:                                    ; preds = %cond.true.965
  %146 = load i64, i64* %byte8_count, align 8
  %conv967 = trunc i64 %146 to i32
  %add968 = add nsw i32 0, %conv967
  %mul969 = mul nsw i32 0, %add968
  %sub970 = sub nsw i32 %mul969, 1
  %cmp971 = icmp slt i32 %sub970, 0
  br i1 %cmp971, label %cond.true.973, label %cond.false.991

cond.true.973:                                    ; preds = %cond.true.966
  %147 = load i64, i64* %byte8_count, align 8
  %conv974 = trunc i64 %147 to i32
  %add975 = add nsw i32 0, %conv974
  %mul976 = mul nsw i32 0, %add975
  %add977 = add nsw i32 %mul976, 0
  %neg978 = xor i32 %add977, -1
  %cmp979 = icmp eq i32 %neg978, -1
  %conv980 = zext i1 %cmp979 to i32
  %sub981 = sub nsw i32 0, %conv980
  %148 = load i64, i64* %byte8_count, align 8
  %conv982 = trunc i64 %148 to i32
  %add983 = add nsw i32 0, %conv982
  %mul984 = mul nsw i32 0, %add983
  %add985 = add nsw i32 %mul984, 1
  %shl986 = shl i32 %add985, 30
  %sub987 = sub nsw i32 %shl986, 1
  %mul988 = mul nsw i32 %sub987, 2
  %add989 = add nsw i32 %mul988, 1
  %sub990 = sub nsw i32 %sub981, %add989
  br label %cond.end.996

cond.false.991:                                   ; preds = %cond.true.966
  %149 = load i64, i64* %byte8_count, align 8
  %conv992 = trunc i64 %149 to i32
  %add993 = add nsw i32 0, %conv992
  %mul994 = mul nsw i32 0, %add993
  %add995 = add nsw i32 %mul994, 0
  br label %cond.end.996

cond.end.996:                                     ; preds = %cond.false.991, %cond.true.973
  %cond997 = phi i32 [ %sub990, %cond.true.973 ], [ %add995, %cond.false.991 ]
  %cmp998 = icmp eq i32 %cond997, 0
  br i1 %cmp998, label %land.lhs.true.1000, label %lor.lhs.false.1004

land.lhs.true.1000:                               ; preds = %cond.end.996
  %150 = load i64, i64* %byte8_count, align 8
  %conv1001 = trunc i64 %150 to i32
  %cmp1002 = icmp slt i32 %conv1001, 0
  br i1 %cmp1002, label %cond.true.1160, label %lor.lhs.false.1004

lor.lhs.false.1004:                               ; preds = %land.lhs.true.1000, %cond.end.996
  br i1 false, label %cond.true.1005, label %cond.false.1074

cond.true.1005:                                   ; preds = %lor.lhs.false.1004
  %151 = load i64, i64* %byte8_count, align 8
  %conv1006 = trunc i64 %151 to i32
  %cmp1007 = icmp slt i32 %conv1006, 0
  br i1 %cmp1007, label %cond.true.1009, label %cond.false.1036

cond.true.1009:                                   ; preds = %cond.true.1005
  %152 = load i64, i64* %byte8_count, align 8
  %conv1010 = trunc i64 %152 to i32
  %153 = load i64, i64* %byte8_count, align 8
  %conv1011 = trunc i64 %153 to i32
  %add1012 = add nsw i32 0, %conv1011
  %mul1013 = mul nsw i32 0, %add1012
  %sub1014 = sub nsw i32 %mul1013, 1
  %cmp1015 = icmp slt i32 %sub1014, 0
  br i1 %cmp1015, label %cond.true.1017, label %cond.false.1026

cond.true.1017:                                   ; preds = %cond.true.1009
  %154 = load i64, i64* %byte8_count, align 8
  %conv1018 = trunc i64 %154 to i32
  %add1019 = add nsw i32 0, %conv1018
  %mul1020 = mul nsw i32 0, %add1019
  %add1021 = add nsw i32 %mul1020, 1
  %shl1022 = shl i32 %add1021, 30
  %sub1023 = sub nsw i32 %shl1022, 1
  %mul1024 = mul nsw i32 %sub1023, 2
  %add1025 = add nsw i32 %mul1024, 1
  br label %cond.end.1031

cond.false.1026:                                  ; preds = %cond.true.1009
  %155 = load i64, i64* %byte8_count, align 8
  %conv1027 = trunc i64 %155 to i32
  %add1028 = add nsw i32 0, %conv1027
  %mul1029 = mul nsw i32 0, %add1028
  %sub1030 = sub nsw i32 %mul1029, 1
  br label %cond.end.1031

cond.end.1031:                                    ; preds = %cond.false.1026, %cond.true.1017
  %cond1032 = phi i32 [ %add1025, %cond.true.1017 ], [ %sub1030, %cond.false.1026 ]
  %div1033 = sdiv i32 %cond1032, 3
  %cmp1034 = icmp slt i32 %conv1010, %div1033
  br i1 %cmp1034, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1036:                                  ; preds = %cond.true.1005
  br i1 false, label %cond.true.1037, label %cond.false.1038

cond.true.1037:                                   ; preds = %cond.false.1036
  br i1 false, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1038:                                  ; preds = %cond.false.1036
  %156 = load i64, i64* %byte8_count, align 8
  %conv1039 = trunc i64 %156 to i32
  %add1040 = add nsw i32 0, %conv1039
  %mul1041 = mul nsw i32 0, %add1040
  %sub1042 = sub nsw i32 %mul1041, 1
  %cmp1043 = icmp slt i32 %sub1042, 0
  br i1 %cmp1043, label %cond.true.1045, label %cond.false.1063

cond.true.1045:                                   ; preds = %cond.false.1038
  %157 = load i64, i64* %byte8_count, align 8
  %conv1046 = trunc i64 %157 to i32
  %add1047 = add nsw i32 0, %conv1046
  %mul1048 = mul nsw i32 0, %add1047
  %add1049 = add nsw i32 %mul1048, 0
  %neg1050 = xor i32 %add1049, -1
  %cmp1051 = icmp eq i32 %neg1050, -1
  %conv1052 = zext i1 %cmp1051 to i32
  %sub1053 = sub nsw i32 0, %conv1052
  %158 = load i64, i64* %byte8_count, align 8
  %conv1054 = trunc i64 %158 to i32
  %add1055 = add nsw i32 0, %conv1054
  %mul1056 = mul nsw i32 0, %add1055
  %add1057 = add nsw i32 %mul1056, 1
  %shl1058 = shl i32 %add1057, 30
  %sub1059 = sub nsw i32 %shl1058, 1
  %mul1060 = mul nsw i32 %sub1059, 2
  %add1061 = add nsw i32 %mul1060, 1
  %sub1062 = sub nsw i32 %sub1053, %add1061
  br label %cond.end.1068

cond.false.1063:                                  ; preds = %cond.false.1038
  %159 = load i64, i64* %byte8_count, align 8
  %conv1064 = trunc i64 %159 to i32
  %add1065 = add nsw i32 0, %conv1064
  %mul1066 = mul nsw i32 0, %add1065
  %add1067 = add nsw i32 %mul1066, 0
  br label %cond.end.1068

cond.end.1068:                                    ; preds = %cond.false.1063, %cond.true.1045
  %cond1069 = phi i32 [ %sub1062, %cond.true.1045 ], [ %add1067, %cond.false.1063 ]
  %div1070 = sdiv i32 %cond1069, 3
  %160 = load i64, i64* %byte8_count, align 8
  %conv1071 = trunc i64 %160 to i32
  %cmp1072 = icmp slt i32 %div1070, %conv1071
  br i1 %cmp1072, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1074:                                  ; preds = %lor.lhs.false.1004
  br i1 false, label %cond.true.1075, label %cond.false.1076

cond.true.1075:                                   ; preds = %cond.false.1074
  br i1 false, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1076:                                  ; preds = %cond.false.1074
  %161 = load i64, i64* %byte8_count, align 8
  %conv1077 = trunc i64 %161 to i32
  %cmp1078 = icmp slt i32 %conv1077, 0
  br i1 %cmp1078, label %cond.true.1080, label %cond.false.1116

cond.true.1080:                                   ; preds = %cond.false.1076
  %162 = load i64, i64* %byte8_count, align 8
  %conv1081 = trunc i64 %162 to i32
  %163 = load i64, i64* %byte8_count, align 8
  %conv1082 = trunc i64 %163 to i32
  %add1083 = add nsw i32 0, %conv1082
  %mul1084 = mul nsw i32 0, %add1083
  %sub1085 = sub nsw i32 %mul1084, 1
  %cmp1086 = icmp slt i32 %sub1085, 0
  br i1 %cmp1086, label %cond.true.1088, label %cond.false.1106

cond.true.1088:                                   ; preds = %cond.true.1080
  %164 = load i64, i64* %byte8_count, align 8
  %conv1089 = trunc i64 %164 to i32
  %add1090 = add nsw i32 0, %conv1089
  %mul1091 = mul nsw i32 0, %add1090
  %add1092 = add nsw i32 %mul1091, 0
  %neg1093 = xor i32 %add1092, -1
  %cmp1094 = icmp eq i32 %neg1093, -1
  %conv1095 = zext i1 %cmp1094 to i32
  %sub1096 = sub nsw i32 0, %conv1095
  %165 = load i64, i64* %byte8_count, align 8
  %conv1097 = trunc i64 %165 to i32
  %add1098 = add nsw i32 0, %conv1097
  %mul1099 = mul nsw i32 0, %add1098
  %add1100 = add nsw i32 %mul1099, 1
  %shl1101 = shl i32 %add1100, 30
  %sub1102 = sub nsw i32 %shl1101, 1
  %mul1103 = mul nsw i32 %sub1102, 2
  %add1104 = add nsw i32 %mul1103, 1
  %sub1105 = sub nsw i32 %sub1096, %add1104
  br label %cond.end.1111

cond.false.1106:                                  ; preds = %cond.true.1080
  %166 = load i64, i64* %byte8_count, align 8
  %conv1107 = trunc i64 %166 to i32
  %add1108 = add nsw i32 0, %conv1107
  %mul1109 = mul nsw i32 0, %add1108
  %add1110 = add nsw i32 %mul1109, 0
  br label %cond.end.1111

cond.end.1111:                                    ; preds = %cond.false.1106, %cond.true.1088
  %cond1112 = phi i32 [ %sub1105, %cond.true.1088 ], [ %add1110, %cond.false.1106 ]
  %div1113 = sdiv i32 %cond1112, 3
  %cmp1114 = icmp slt i32 %conv1081, %div1113
  br i1 %cmp1114, label %cond.true.1160, label %lor.lhs.false.1143

cond.false.1116:                                  ; preds = %cond.false.1076
  %167 = load i64, i64* %byte8_count, align 8
  %conv1117 = trunc i64 %167 to i32
  %add1118 = add nsw i32 0, %conv1117
  %mul1119 = mul nsw i32 0, %add1118
  %sub1120 = sub nsw i32 %mul1119, 1
  %cmp1121 = icmp slt i32 %sub1120, 0
  br i1 %cmp1121, label %cond.true.1123, label %cond.false.1132

cond.true.1123:                                   ; preds = %cond.false.1116
  %168 = load i64, i64* %byte8_count, align 8
  %conv1124 = trunc i64 %168 to i32
  %add1125 = add nsw i32 0, %conv1124
  %mul1126 = mul nsw i32 0, %add1125
  %add1127 = add nsw i32 %mul1126, 1
  %shl1128 = shl i32 %add1127, 30
  %sub1129 = sub nsw i32 %shl1128, 1
  %mul1130 = mul nsw i32 %sub1129, 2
  %add1131 = add nsw i32 %mul1130, 1
  br label %cond.end.1137

cond.false.1132:                                  ; preds = %cond.false.1116
  %169 = load i64, i64* %byte8_count, align 8
  %conv1133 = trunc i64 %169 to i32
  %add1134 = add nsw i32 0, %conv1133
  %mul1135 = mul nsw i32 0, %add1134
  %sub1136 = sub nsw i32 %mul1135, 1
  br label %cond.end.1137

cond.end.1137:                                    ; preds = %cond.false.1132, %cond.true.1123
  %cond1138 = phi i32 [ %add1131, %cond.true.1123 ], [ %sub1136, %cond.false.1132 ]
  %div1139 = sdiv i32 %cond1138, 3
  %170 = load i64, i64* %byte8_count, align 8
  %conv1140 = trunc i64 %170 to i32
  %cmp1141 = icmp slt i32 %div1139, %conv1140
  br i1 %cmp1141, label %cond.true.1160, label %lor.lhs.false.1143

lor.lhs.false.1143:                               ; preds = %cond.end.1137, %cond.end.1111, %cond.true.1075, %cond.end.1068, %cond.true.1037, %cond.end.1031
  %171 = load i64, i64* %byte8_count, align 8
  %conv1144 = trunc i64 %171 to i32
  %mul1145 = mul nsw i32 %conv1144, 3
  %mul1146 = mul nsw i32 0, %mul1145
  %sub1147 = sub nsw i32 %mul1146, 1
  %cmp1148 = icmp slt i32 %sub1147, 0
  br i1 %cmp1148, label %land.lhs.true.1150, label %lor.lhs.false.1155

land.lhs.true.1150:                               ; preds = %lor.lhs.false.1143
  %172 = load i64, i64* %byte8_count, align 8
  %conv1151 = trunc i64 %172 to i32
  %mul1152 = mul nsw i32 %conv1151, 3
  %cmp1153 = icmp slt i32 %mul1152, -2147483648
  br i1 %cmp1153, label %cond.true.1160, label %lor.lhs.false.1155

lor.lhs.false.1155:                               ; preds = %land.lhs.true.1150, %lor.lhs.false.1143
  %173 = load i64, i64* %byte8_count, align 8
  %conv1156 = trunc i64 %173 to i32
  %mul1157 = mul nsw i32 %conv1156, 3
  %cmp1158 = icmp slt i32 2147483647, %mul1157
  br i1 %cmp1158, label %cond.true.1160, label %cond.false.1176

cond.true.1160:                                   ; preds = %lor.lhs.false.1155, %land.lhs.true.1150, %cond.end.1137, %cond.end.1111, %cond.true.1075, %cond.end.1068, %cond.true.1037, %cond.end.1031, %land.lhs.true.1000
  %174 = load i64, i64* %byte8_count, align 8
  %conv1161 = trunc i64 %174 to i32
  %mul1162 = mul i32 %conv1161, 3
  %cmp1163 = icmp ule i32 %mul1162, 2147483647
  br i1 %cmp1163, label %cond.true.1165, label %cond.false.1168

cond.true.1165:                                   ; preds = %cond.true.1160
  %175 = load i64, i64* %byte8_count, align 8
  %conv1166 = trunc i64 %175 to i32
  %mul1167 = mul i32 %conv1166, 3
  br label %cond.end.1173

cond.false.1168:                                  ; preds = %cond.true.1160
  %176 = load i64, i64* %byte8_count, align 8
  %conv1169 = trunc i64 %176 to i32
  %mul1170 = mul i32 %conv1169, 3
  %sub1171 = sub i32 %mul1170, -2147483648
  %add1172 = add nsw i32 %sub1171, -2147483648
  br label %cond.end.1173

cond.end.1173:                                    ; preds = %cond.false.1168, %cond.true.1165
  %cond1174 = phi i32 [ %mul1167, %cond.true.1165 ], [ %add1172, %cond.false.1168 ]
  %conv1175 = sext i32 %cond1174 to i64
  store i64 %conv1175, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.1176:                                  ; preds = %lor.lhs.false.1155
  %177 = load i64, i64* %byte8_count, align 8
  %conv1177 = trunc i64 %177 to i32
  %mul1178 = mul i32 %conv1177, 3
  %cmp1179 = icmp ule i32 %mul1178, 2147483647
  br i1 %cmp1179, label %cond.true.1181, label %cond.false.1184

cond.true.1181:                                   ; preds = %cond.false.1176
  %178 = load i64, i64* %byte8_count, align 8
  %conv1182 = trunc i64 %178 to i32
  %mul1183 = mul i32 %conv1182, 3
  br label %cond.end.1189

cond.false.1184:                                  ; preds = %cond.false.1176
  %179 = load i64, i64* %byte8_count, align 8
  %conv1185 = trunc i64 %179 to i32
  %mul1186 = mul i32 %conv1185, 3
  %sub1187 = sub i32 %mul1186, -2147483648
  %add1188 = add nsw i32 %sub1187, -2147483648
  br label %cond.end.1189

cond.end.1189:                                    ; preds = %cond.false.1184, %cond.true.1181
  %cond1190 = phi i32 [ %mul1183, %cond.true.1181 ], [ %add1188, %cond.false.1184 ]
  %conv1191 = sext i32 %cond1190 to i64
  store i64 %conv1191, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.1192:                                  ; preds = %cond.true.965
  %180 = load i64, i64* %byte8_count, align 8
  %add1193 = add nsw i64 0, %180
  %mul1194 = mul nsw i64 0, %add1193
  %sub1195 = sub nsw i64 %mul1194, 1
  %cmp1196 = icmp slt i64 %sub1195, 0
  br i1 %cmp1196, label %cond.true.1198, label %cond.false.1215

cond.true.1198:                                   ; preds = %cond.false.1192
  %181 = load i64, i64* %byte8_count, align 8
  %add1199 = add nsw i64 0, %181
  %mul1200 = mul nsw i64 0, %add1199
  %add1201 = add nsw i64 %mul1200, 0
  %neg1202 = xor i64 %add1201, -1
  %cmp1203 = icmp eq i64 %neg1202, -1
  %conv1204 = zext i1 %cmp1203 to i32
  %sub1205 = sub nsw i32 0, %conv1204
  %conv1206 = sext i32 %sub1205 to i64
  %182 = load i64, i64* %byte8_count, align 8
  %add1207 = add nsw i64 0, %182
  %mul1208 = mul nsw i64 0, %add1207
  %add1209 = add nsw i64 %mul1208, 1
  %shl1210 = shl i64 %add1209, 62
  %sub1211 = sub nsw i64 %shl1210, 1
  %mul1212 = mul nsw i64 %sub1211, 2
  %add1213 = add nsw i64 %mul1212, 1
  %sub1214 = sub nsw i64 %conv1206, %add1213
  br label %cond.end.1219

cond.false.1215:                                  ; preds = %cond.false.1192
  %183 = load i64, i64* %byte8_count, align 8
  %add1216 = add nsw i64 0, %183
  %mul1217 = mul nsw i64 0, %add1216
  %add1218 = add nsw i64 %mul1217, 0
  br label %cond.end.1219

cond.end.1219:                                    ; preds = %cond.false.1215, %cond.true.1198
  %cond1220 = phi i64 [ %sub1214, %cond.true.1198 ], [ %add1218, %cond.false.1215 ]
  %cmp1221 = icmp eq i64 %cond1220, 0
  br i1 %cmp1221, label %land.lhs.true.1223, label %lor.lhs.false.1226

land.lhs.true.1223:                               ; preds = %cond.end.1219
  %184 = load i64, i64* %byte8_count, align 8
  %cmp1224 = icmp slt i64 %184, 0
  br i1 %cmp1224, label %cond.true.1361, label %lor.lhs.false.1226

lor.lhs.false.1226:                               ; preds = %land.lhs.true.1223, %cond.end.1219
  br i1 false, label %cond.true.1227, label %cond.false.1287

cond.true.1227:                                   ; preds = %lor.lhs.false.1226
  %185 = load i64, i64* %byte8_count, align 8
  %cmp1228 = icmp slt i64 %185, 0
  br i1 %cmp1228, label %cond.true.1230, label %cond.false.1253

cond.true.1230:                                   ; preds = %cond.true.1227
  %186 = load i64, i64* %byte8_count, align 8
  %187 = load i64, i64* %byte8_count, align 8
  %add1231 = add nsw i64 0, %187
  %mul1232 = mul nsw i64 0, %add1231
  %sub1233 = sub nsw i64 %mul1232, 1
  %cmp1234 = icmp slt i64 %sub1233, 0
  br i1 %cmp1234, label %cond.true.1236, label %cond.false.1244

cond.true.1236:                                   ; preds = %cond.true.1230
  %188 = load i64, i64* %byte8_count, align 8
  %add1237 = add nsw i64 0, %188
  %mul1238 = mul nsw i64 0, %add1237
  %add1239 = add nsw i64 %mul1238, 1
  %shl1240 = shl i64 %add1239, 62
  %sub1241 = sub nsw i64 %shl1240, 1
  %mul1242 = mul nsw i64 %sub1241, 2
  %add1243 = add nsw i64 %mul1242, 1
  br label %cond.end.1248

cond.false.1244:                                  ; preds = %cond.true.1230
  %189 = load i64, i64* %byte8_count, align 8
  %add1245 = add nsw i64 0, %189
  %mul1246 = mul nsw i64 0, %add1245
  %sub1247 = sub nsw i64 %mul1246, 1
  br label %cond.end.1248

cond.end.1248:                                    ; preds = %cond.false.1244, %cond.true.1236
  %cond1249 = phi i64 [ %add1243, %cond.true.1236 ], [ %sub1247, %cond.false.1244 ]
  %div1250 = sdiv i64 %cond1249, 3
  %cmp1251 = icmp slt i64 %186, %div1250
  br i1 %cmp1251, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1253:                                  ; preds = %cond.true.1227
  br i1 false, label %cond.true.1254, label %cond.false.1255

cond.true.1254:                                   ; preds = %cond.false.1253
  br i1 false, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1255:                                  ; preds = %cond.false.1253
  %190 = load i64, i64* %byte8_count, align 8
  %add1256 = add nsw i64 0, %190
  %mul1257 = mul nsw i64 0, %add1256
  %sub1258 = sub nsw i64 %mul1257, 1
  %cmp1259 = icmp slt i64 %sub1258, 0
  br i1 %cmp1259, label %cond.true.1261, label %cond.false.1278

cond.true.1261:                                   ; preds = %cond.false.1255
  %191 = load i64, i64* %byte8_count, align 8
  %add1262 = add nsw i64 0, %191
  %mul1263 = mul nsw i64 0, %add1262
  %add1264 = add nsw i64 %mul1263, 0
  %neg1265 = xor i64 %add1264, -1
  %cmp1266 = icmp eq i64 %neg1265, -1
  %conv1267 = zext i1 %cmp1266 to i32
  %sub1268 = sub nsw i32 0, %conv1267
  %conv1269 = sext i32 %sub1268 to i64
  %192 = load i64, i64* %byte8_count, align 8
  %add1270 = add nsw i64 0, %192
  %mul1271 = mul nsw i64 0, %add1270
  %add1272 = add nsw i64 %mul1271, 1
  %shl1273 = shl i64 %add1272, 62
  %sub1274 = sub nsw i64 %shl1273, 1
  %mul1275 = mul nsw i64 %sub1274, 2
  %add1276 = add nsw i64 %mul1275, 1
  %sub1277 = sub nsw i64 %conv1269, %add1276
  br label %cond.end.1282

cond.false.1278:                                  ; preds = %cond.false.1255
  %193 = load i64, i64* %byte8_count, align 8
  %add1279 = add nsw i64 0, %193
  %mul1280 = mul nsw i64 0, %add1279
  %add1281 = add nsw i64 %mul1280, 0
  br label %cond.end.1282

cond.end.1282:                                    ; preds = %cond.false.1278, %cond.true.1261
  %cond1283 = phi i64 [ %sub1277, %cond.true.1261 ], [ %add1281, %cond.false.1278 ]
  %div1284 = sdiv i64 %cond1283, 3
  %194 = load i64, i64* %byte8_count, align 8
  %cmp1285 = icmp slt i64 %div1284, %194
  br i1 %cmp1285, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1287:                                  ; preds = %lor.lhs.false.1226
  br i1 false, label %cond.true.1288, label %cond.false.1289

cond.true.1288:                                   ; preds = %cond.false.1287
  br i1 false, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1289:                                  ; preds = %cond.false.1287
  %195 = load i64, i64* %byte8_count, align 8
  %cmp1290 = icmp slt i64 %195, 0
  br i1 %cmp1290, label %cond.true.1292, label %cond.false.1324

cond.true.1292:                                   ; preds = %cond.false.1289
  %196 = load i64, i64* %byte8_count, align 8
  %197 = load i64, i64* %byte8_count, align 8
  %add1293 = add nsw i64 0, %197
  %mul1294 = mul nsw i64 0, %add1293
  %sub1295 = sub nsw i64 %mul1294, 1
  %cmp1296 = icmp slt i64 %sub1295, 0
  br i1 %cmp1296, label %cond.true.1298, label %cond.false.1315

cond.true.1298:                                   ; preds = %cond.true.1292
  %198 = load i64, i64* %byte8_count, align 8
  %add1299 = add nsw i64 0, %198
  %mul1300 = mul nsw i64 0, %add1299
  %add1301 = add nsw i64 %mul1300, 0
  %neg1302 = xor i64 %add1301, -1
  %cmp1303 = icmp eq i64 %neg1302, -1
  %conv1304 = zext i1 %cmp1303 to i32
  %sub1305 = sub nsw i32 0, %conv1304
  %conv1306 = sext i32 %sub1305 to i64
  %199 = load i64, i64* %byte8_count, align 8
  %add1307 = add nsw i64 0, %199
  %mul1308 = mul nsw i64 0, %add1307
  %add1309 = add nsw i64 %mul1308, 1
  %shl1310 = shl i64 %add1309, 62
  %sub1311 = sub nsw i64 %shl1310, 1
  %mul1312 = mul nsw i64 %sub1311, 2
  %add1313 = add nsw i64 %mul1312, 1
  %sub1314 = sub nsw i64 %conv1306, %add1313
  br label %cond.end.1319

cond.false.1315:                                  ; preds = %cond.true.1292
  %200 = load i64, i64* %byte8_count, align 8
  %add1316 = add nsw i64 0, %200
  %mul1317 = mul nsw i64 0, %add1316
  %add1318 = add nsw i64 %mul1317, 0
  br label %cond.end.1319

cond.end.1319:                                    ; preds = %cond.false.1315, %cond.true.1298
  %cond1320 = phi i64 [ %sub1314, %cond.true.1298 ], [ %add1318, %cond.false.1315 ]
  %div1321 = sdiv i64 %cond1320, 3
  %cmp1322 = icmp slt i64 %196, %div1321
  br i1 %cmp1322, label %cond.true.1361, label %lor.lhs.false.1347

cond.false.1324:                                  ; preds = %cond.false.1289
  %201 = load i64, i64* %byte8_count, align 8
  %add1325 = add nsw i64 0, %201
  %mul1326 = mul nsw i64 0, %add1325
  %sub1327 = sub nsw i64 %mul1326, 1
  %cmp1328 = icmp slt i64 %sub1327, 0
  br i1 %cmp1328, label %cond.true.1330, label %cond.false.1338

cond.true.1330:                                   ; preds = %cond.false.1324
  %202 = load i64, i64* %byte8_count, align 8
  %add1331 = add nsw i64 0, %202
  %mul1332 = mul nsw i64 0, %add1331
  %add1333 = add nsw i64 %mul1332, 1
  %shl1334 = shl i64 %add1333, 62
  %sub1335 = sub nsw i64 %shl1334, 1
  %mul1336 = mul nsw i64 %sub1335, 2
  %add1337 = add nsw i64 %mul1336, 1
  br label %cond.end.1342

cond.false.1338:                                  ; preds = %cond.false.1324
  %203 = load i64, i64* %byte8_count, align 8
  %add1339 = add nsw i64 0, %203
  %mul1340 = mul nsw i64 0, %add1339
  %sub1341 = sub nsw i64 %mul1340, 1
  br label %cond.end.1342

cond.end.1342:                                    ; preds = %cond.false.1338, %cond.true.1330
  %cond1343 = phi i64 [ %add1337, %cond.true.1330 ], [ %sub1341, %cond.false.1338 ]
  %div1344 = sdiv i64 %cond1343, 3
  %204 = load i64, i64* %byte8_count, align 8
  %cmp1345 = icmp slt i64 %div1344, %204
  br i1 %cmp1345, label %cond.true.1361, label %lor.lhs.false.1347

lor.lhs.false.1347:                               ; preds = %cond.end.1342, %cond.end.1319, %cond.true.1288, %cond.end.1282, %cond.true.1254, %cond.end.1248
  %205 = load i64, i64* %byte8_count, align 8
  %mul1348 = mul nsw i64 %205, 3
  %mul1349 = mul nsw i64 0, %mul1348
  %sub1350 = sub nsw i64 %mul1349, 1
  %cmp1351 = icmp slt i64 %sub1350, 0
  br i1 %cmp1351, label %land.lhs.true.1353, label %lor.lhs.false.1357

land.lhs.true.1353:                               ; preds = %lor.lhs.false.1347
  %206 = load i64, i64* %byte8_count, align 8
  %mul1354 = mul nsw i64 %206, 3
  %cmp1355 = icmp slt i64 %mul1354, -2147483648
  br i1 %cmp1355, label %cond.true.1361, label %lor.lhs.false.1357

lor.lhs.false.1357:                               ; preds = %land.lhs.true.1353, %lor.lhs.false.1347
  %207 = load i64, i64* %byte8_count, align 8
  %mul1358 = mul nsw i64 %207, 3
  %cmp1359 = icmp slt i64 2147483647, %mul1358
  br i1 %cmp1359, label %cond.true.1361, label %cond.false.1377

cond.true.1361:                                   ; preds = %lor.lhs.false.1357, %land.lhs.true.1353, %cond.end.1342, %cond.end.1319, %cond.true.1288, %cond.end.1282, %cond.true.1254, %cond.end.1248, %land.lhs.true.1223
  %208 = load i64, i64* %byte8_count, align 8
  %conv1362 = trunc i64 %208 to i32
  %mul1363 = mul i32 %conv1362, 3
  %cmp1364 = icmp ule i32 %mul1363, 2147483647
  br i1 %cmp1364, label %cond.true.1366, label %cond.false.1369

cond.true.1366:                                   ; preds = %cond.true.1361
  %209 = load i64, i64* %byte8_count, align 8
  %conv1367 = trunc i64 %209 to i32
  %mul1368 = mul i32 %conv1367, 3
  br label %cond.end.1374

cond.false.1369:                                  ; preds = %cond.true.1361
  %210 = load i64, i64* %byte8_count, align 8
  %conv1370 = trunc i64 %210 to i32
  %mul1371 = mul i32 %conv1370, 3
  %sub1372 = sub i32 %mul1371, -2147483648
  %add1373 = add nsw i32 %sub1372, -2147483648
  br label %cond.end.1374

cond.end.1374:                                    ; preds = %cond.false.1369, %cond.true.1366
  %cond1375 = phi i32 [ %mul1368, %cond.true.1366 ], [ %add1373, %cond.false.1369 ]
  %conv1376 = sext i32 %cond1375 to i64
  store i64 %conv1376, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.1377:                                  ; preds = %lor.lhs.false.1357
  %211 = load i64, i64* %byte8_count, align 8
  %conv1378 = trunc i64 %211 to i32
  %mul1379 = mul i32 %conv1378, 3
  %cmp1380 = icmp ule i32 %mul1379, 2147483647
  br i1 %cmp1380, label %cond.true.1382, label %cond.false.1385

cond.true.1382:                                   ; preds = %cond.false.1377
  %212 = load i64, i64* %byte8_count, align 8
  %conv1383 = trunc i64 %212 to i32
  %mul1384 = mul i32 %conv1383, 3
  br label %cond.end.1390

cond.false.1385:                                  ; preds = %cond.false.1377
  %213 = load i64, i64* %byte8_count, align 8
  %conv1386 = trunc i64 %213 to i32
  %mul1387 = mul i32 %conv1386, 3
  %sub1388 = sub i32 %mul1387, -2147483648
  %add1389 = add nsw i32 %sub1388, -2147483648
  br label %cond.end.1390

cond.end.1390:                                    ; preds = %cond.false.1385, %cond.true.1382
  %cond1391 = phi i32 [ %mul1384, %cond.true.1382 ], [ %add1389, %cond.false.1385 ]
  %conv1392 = sext i32 %cond1391 to i64
  store i64 %conv1392, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.1393:                                  ; preds = %cond.false.964
  br i1 true, label %cond.true.1394, label %cond.false.1781

cond.true.1394:                                   ; preds = %cond.false.1393
  br i1 false, label %cond.true.1395, label %cond.false.1588

cond.true.1395:                                   ; preds = %cond.true.1394
  %214 = load i64, i64* %byte8_count, align 8
  %add1396 = add nsw i64 0, %214
  %mul1397 = mul nsw i64 0, %add1396
  %sub1398 = sub nsw i64 %mul1397, 1
  %cmp1399 = icmp slt i64 %sub1398, 0
  br i1 %cmp1399, label %cond.true.1401, label %cond.false.1418

cond.true.1401:                                   ; preds = %cond.true.1395
  %215 = load i64, i64* %byte8_count, align 8
  %add1402 = add nsw i64 0, %215
  %mul1403 = mul nsw i64 0, %add1402
  %add1404 = add nsw i64 %mul1403, 0
  %neg1405 = xor i64 %add1404, -1
  %cmp1406 = icmp eq i64 %neg1405, -1
  %conv1407 = zext i1 %cmp1406 to i32
  %sub1408 = sub nsw i32 0, %conv1407
  %conv1409 = sext i32 %sub1408 to i64
  %216 = load i64, i64* %byte8_count, align 8
  %add1410 = add nsw i64 0, %216
  %mul1411 = mul nsw i64 0, %add1410
  %add1412 = add nsw i64 %mul1411, 1
  %shl1413 = shl i64 %add1412, 62
  %sub1414 = sub nsw i64 %shl1413, 1
  %mul1415 = mul nsw i64 %sub1414, 2
  %add1416 = add nsw i64 %mul1415, 1
  %sub1417 = sub nsw i64 %conv1409, %add1416
  br label %cond.end.1422

cond.false.1418:                                  ; preds = %cond.true.1395
  %217 = load i64, i64* %byte8_count, align 8
  %add1419 = add nsw i64 0, %217
  %mul1420 = mul nsw i64 0, %add1419
  %add1421 = add nsw i64 %mul1420, 0
  br label %cond.end.1422

cond.end.1422:                                    ; preds = %cond.false.1418, %cond.true.1401
  %cond1423 = phi i64 [ %sub1417, %cond.true.1401 ], [ %add1421, %cond.false.1418 ]
  %cmp1424 = icmp eq i64 %cond1423, 0
  br i1 %cmp1424, label %land.lhs.true.1426, label %lor.lhs.false.1429

land.lhs.true.1426:                               ; preds = %cond.end.1422
  %218 = load i64, i64* %byte8_count, align 8
  %cmp1427 = icmp slt i64 %218, 0
  br i1 %cmp1427, label %cond.true.1564, label %lor.lhs.false.1429

lor.lhs.false.1429:                               ; preds = %land.lhs.true.1426, %cond.end.1422
  br i1 false, label %cond.true.1430, label %cond.false.1490

cond.true.1430:                                   ; preds = %lor.lhs.false.1429
  %219 = load i64, i64* %byte8_count, align 8
  %cmp1431 = icmp slt i64 %219, 0
  br i1 %cmp1431, label %cond.true.1433, label %cond.false.1456

cond.true.1433:                                   ; preds = %cond.true.1430
  %220 = load i64, i64* %byte8_count, align 8
  %221 = load i64, i64* %byte8_count, align 8
  %add1434 = add nsw i64 0, %221
  %mul1435 = mul nsw i64 0, %add1434
  %sub1436 = sub nsw i64 %mul1435, 1
  %cmp1437 = icmp slt i64 %sub1436, 0
  br i1 %cmp1437, label %cond.true.1439, label %cond.false.1447

cond.true.1439:                                   ; preds = %cond.true.1433
  %222 = load i64, i64* %byte8_count, align 8
  %add1440 = add nsw i64 0, %222
  %mul1441 = mul nsw i64 0, %add1440
  %add1442 = add nsw i64 %mul1441, 1
  %shl1443 = shl i64 %add1442, 62
  %sub1444 = sub nsw i64 %shl1443, 1
  %mul1445 = mul nsw i64 %sub1444, 2
  %add1446 = add nsw i64 %mul1445, 1
  br label %cond.end.1451

cond.false.1447:                                  ; preds = %cond.true.1433
  %223 = load i64, i64* %byte8_count, align 8
  %add1448 = add nsw i64 0, %223
  %mul1449 = mul nsw i64 0, %add1448
  %sub1450 = sub nsw i64 %mul1449, 1
  br label %cond.end.1451

cond.end.1451:                                    ; preds = %cond.false.1447, %cond.true.1439
  %cond1452 = phi i64 [ %add1446, %cond.true.1439 ], [ %sub1450, %cond.false.1447 ]
  %div1453 = sdiv i64 %cond1452, 3
  %cmp1454 = icmp slt i64 %220, %div1453
  br i1 %cmp1454, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1456:                                  ; preds = %cond.true.1430
  br i1 false, label %cond.true.1457, label %cond.false.1458

cond.true.1457:                                   ; preds = %cond.false.1456
  br i1 false, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1458:                                  ; preds = %cond.false.1456
  %224 = load i64, i64* %byte8_count, align 8
  %add1459 = add nsw i64 0, %224
  %mul1460 = mul nsw i64 0, %add1459
  %sub1461 = sub nsw i64 %mul1460, 1
  %cmp1462 = icmp slt i64 %sub1461, 0
  br i1 %cmp1462, label %cond.true.1464, label %cond.false.1481

cond.true.1464:                                   ; preds = %cond.false.1458
  %225 = load i64, i64* %byte8_count, align 8
  %add1465 = add nsw i64 0, %225
  %mul1466 = mul nsw i64 0, %add1465
  %add1467 = add nsw i64 %mul1466, 0
  %neg1468 = xor i64 %add1467, -1
  %cmp1469 = icmp eq i64 %neg1468, -1
  %conv1470 = zext i1 %cmp1469 to i32
  %sub1471 = sub nsw i32 0, %conv1470
  %conv1472 = sext i32 %sub1471 to i64
  %226 = load i64, i64* %byte8_count, align 8
  %add1473 = add nsw i64 0, %226
  %mul1474 = mul nsw i64 0, %add1473
  %add1475 = add nsw i64 %mul1474, 1
  %shl1476 = shl i64 %add1475, 62
  %sub1477 = sub nsw i64 %shl1476, 1
  %mul1478 = mul nsw i64 %sub1477, 2
  %add1479 = add nsw i64 %mul1478, 1
  %sub1480 = sub nsw i64 %conv1472, %add1479
  br label %cond.end.1485

cond.false.1481:                                  ; preds = %cond.false.1458
  %227 = load i64, i64* %byte8_count, align 8
  %add1482 = add nsw i64 0, %227
  %mul1483 = mul nsw i64 0, %add1482
  %add1484 = add nsw i64 %mul1483, 0
  br label %cond.end.1485

cond.end.1485:                                    ; preds = %cond.false.1481, %cond.true.1464
  %cond1486 = phi i64 [ %sub1480, %cond.true.1464 ], [ %add1484, %cond.false.1481 ]
  %div1487 = sdiv i64 %cond1486, 3
  %228 = load i64, i64* %byte8_count, align 8
  %cmp1488 = icmp slt i64 %div1487, %228
  br i1 %cmp1488, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1490:                                  ; preds = %lor.lhs.false.1429
  br i1 false, label %cond.true.1491, label %cond.false.1492

cond.true.1491:                                   ; preds = %cond.false.1490
  br i1 false, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1492:                                  ; preds = %cond.false.1490
  %229 = load i64, i64* %byte8_count, align 8
  %cmp1493 = icmp slt i64 %229, 0
  br i1 %cmp1493, label %cond.true.1495, label %cond.false.1527

cond.true.1495:                                   ; preds = %cond.false.1492
  %230 = load i64, i64* %byte8_count, align 8
  %231 = load i64, i64* %byte8_count, align 8
  %add1496 = add nsw i64 0, %231
  %mul1497 = mul nsw i64 0, %add1496
  %sub1498 = sub nsw i64 %mul1497, 1
  %cmp1499 = icmp slt i64 %sub1498, 0
  br i1 %cmp1499, label %cond.true.1501, label %cond.false.1518

cond.true.1501:                                   ; preds = %cond.true.1495
  %232 = load i64, i64* %byte8_count, align 8
  %add1502 = add nsw i64 0, %232
  %mul1503 = mul nsw i64 0, %add1502
  %add1504 = add nsw i64 %mul1503, 0
  %neg1505 = xor i64 %add1504, -1
  %cmp1506 = icmp eq i64 %neg1505, -1
  %conv1507 = zext i1 %cmp1506 to i32
  %sub1508 = sub nsw i32 0, %conv1507
  %conv1509 = sext i32 %sub1508 to i64
  %233 = load i64, i64* %byte8_count, align 8
  %add1510 = add nsw i64 0, %233
  %mul1511 = mul nsw i64 0, %add1510
  %add1512 = add nsw i64 %mul1511, 1
  %shl1513 = shl i64 %add1512, 62
  %sub1514 = sub nsw i64 %shl1513, 1
  %mul1515 = mul nsw i64 %sub1514, 2
  %add1516 = add nsw i64 %mul1515, 1
  %sub1517 = sub nsw i64 %conv1509, %add1516
  br label %cond.end.1522

cond.false.1518:                                  ; preds = %cond.true.1495
  %234 = load i64, i64* %byte8_count, align 8
  %add1519 = add nsw i64 0, %234
  %mul1520 = mul nsw i64 0, %add1519
  %add1521 = add nsw i64 %mul1520, 0
  br label %cond.end.1522

cond.end.1522:                                    ; preds = %cond.false.1518, %cond.true.1501
  %cond1523 = phi i64 [ %sub1517, %cond.true.1501 ], [ %add1521, %cond.false.1518 ]
  %div1524 = sdiv i64 %cond1523, 3
  %cmp1525 = icmp slt i64 %230, %div1524
  br i1 %cmp1525, label %cond.true.1564, label %lor.lhs.false.1550

cond.false.1527:                                  ; preds = %cond.false.1492
  %235 = load i64, i64* %byte8_count, align 8
  %add1528 = add nsw i64 0, %235
  %mul1529 = mul nsw i64 0, %add1528
  %sub1530 = sub nsw i64 %mul1529, 1
  %cmp1531 = icmp slt i64 %sub1530, 0
  br i1 %cmp1531, label %cond.true.1533, label %cond.false.1541

cond.true.1533:                                   ; preds = %cond.false.1527
  %236 = load i64, i64* %byte8_count, align 8
  %add1534 = add nsw i64 0, %236
  %mul1535 = mul nsw i64 0, %add1534
  %add1536 = add nsw i64 %mul1535, 1
  %shl1537 = shl i64 %add1536, 62
  %sub1538 = sub nsw i64 %shl1537, 1
  %mul1539 = mul nsw i64 %sub1538, 2
  %add1540 = add nsw i64 %mul1539, 1
  br label %cond.end.1545

cond.false.1541:                                  ; preds = %cond.false.1527
  %237 = load i64, i64* %byte8_count, align 8
  %add1542 = add nsw i64 0, %237
  %mul1543 = mul nsw i64 0, %add1542
  %sub1544 = sub nsw i64 %mul1543, 1
  br label %cond.end.1545

cond.end.1545:                                    ; preds = %cond.false.1541, %cond.true.1533
  %cond1546 = phi i64 [ %add1540, %cond.true.1533 ], [ %sub1544, %cond.false.1541 ]
  %div1547 = sdiv i64 %cond1546, 3
  %238 = load i64, i64* %byte8_count, align 8
  %cmp1548 = icmp slt i64 %div1547, %238
  br i1 %cmp1548, label %cond.true.1564, label %lor.lhs.false.1550

lor.lhs.false.1550:                               ; preds = %cond.end.1545, %cond.end.1522, %cond.true.1491, %cond.end.1485, %cond.true.1457, %cond.end.1451
  %239 = load i64, i64* %byte8_count, align 8
  %mul1551 = mul nsw i64 %239, 3
  %mul1552 = mul nsw i64 0, %mul1551
  %sub1553 = sub nsw i64 %mul1552, 1
  %cmp1554 = icmp slt i64 %sub1553, 0
  br i1 %cmp1554, label %land.lhs.true.1556, label %lor.lhs.false.1560

land.lhs.true.1556:                               ; preds = %lor.lhs.false.1550
  %240 = load i64, i64* %byte8_count, align 8
  %mul1557 = mul nsw i64 %240, 3
  %cmp1558 = icmp slt i64 %mul1557, -9223372036854775808
  br i1 %cmp1558, label %cond.true.1564, label %lor.lhs.false.1560

lor.lhs.false.1560:                               ; preds = %land.lhs.true.1556, %lor.lhs.false.1550
  %241 = load i64, i64* %byte8_count, align 8
  %mul1561 = mul nsw i64 %241, 3
  %cmp1562 = icmp slt i64 9223372036854775807, %mul1561
  br i1 %cmp1562, label %cond.true.1564, label %cond.false.1576

cond.true.1564:                                   ; preds = %lor.lhs.false.1560, %land.lhs.true.1556, %cond.end.1545, %cond.end.1522, %cond.true.1491, %cond.end.1485, %cond.true.1457, %cond.end.1451, %land.lhs.true.1426
  %242 = load i64, i64* %byte8_count, align 8
  %mul1565 = mul i64 %242, 3
  %cmp1566 = icmp ule i64 %mul1565, 9223372036854775807
  br i1 %cmp1566, label %cond.true.1568, label %cond.false.1570

cond.true.1568:                                   ; preds = %cond.true.1564
  %243 = load i64, i64* %byte8_count, align 8
  %mul1569 = mul i64 %243, 3
  br label %cond.end.1574

cond.false.1570:                                  ; preds = %cond.true.1564
  %244 = load i64, i64* %byte8_count, align 8
  %mul1571 = mul i64 %244, 3
  %sub1572 = sub i64 %mul1571, -9223372036854775808
  %add1573 = add nsw i64 %sub1572, -9223372036854775808
  br label %cond.end.1574

cond.end.1574:                                    ; preds = %cond.false.1570, %cond.true.1568
  %cond1575 = phi i64 [ %mul1569, %cond.true.1568 ], [ %add1573, %cond.false.1570 ]
  store i64 %cond1575, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.1576:                                  ; preds = %lor.lhs.false.1560
  %245 = load i64, i64* %byte8_count, align 8
  %mul1577 = mul i64 %245, 3
  %cmp1578 = icmp ule i64 %mul1577, 9223372036854775807
  br i1 %cmp1578, label %cond.true.1580, label %cond.false.1582

cond.true.1580:                                   ; preds = %cond.false.1576
  %246 = load i64, i64* %byte8_count, align 8
  %mul1581 = mul i64 %246, 3
  br label %cond.end.1586

cond.false.1582:                                  ; preds = %cond.false.1576
  %247 = load i64, i64* %byte8_count, align 8
  %mul1583 = mul i64 %247, 3
  %sub1584 = sub i64 %mul1583, -9223372036854775808
  %add1585 = add nsw i64 %sub1584, -9223372036854775808
  br label %cond.end.1586

cond.end.1586:                                    ; preds = %cond.false.1582, %cond.true.1580
  %cond1587 = phi i64 [ %mul1581, %cond.true.1580 ], [ %add1585, %cond.false.1582 ]
  store i64 %cond1587, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.1588:                                  ; preds = %cond.true.1394
  %248 = load i64, i64* %byte8_count, align 8
  %add1589 = add nsw i64 0, %248
  %mul1590 = mul nsw i64 0, %add1589
  %sub1591 = sub nsw i64 %mul1590, 1
  %cmp1592 = icmp slt i64 %sub1591, 0
  br i1 %cmp1592, label %cond.true.1594, label %cond.false.1611

cond.true.1594:                                   ; preds = %cond.false.1588
  %249 = load i64, i64* %byte8_count, align 8
  %add1595 = add nsw i64 0, %249
  %mul1596 = mul nsw i64 0, %add1595
  %add1597 = add nsw i64 %mul1596, 0
  %neg1598 = xor i64 %add1597, -1
  %cmp1599 = icmp eq i64 %neg1598, -1
  %conv1600 = zext i1 %cmp1599 to i32
  %sub1601 = sub nsw i32 0, %conv1600
  %conv1602 = sext i32 %sub1601 to i64
  %250 = load i64, i64* %byte8_count, align 8
  %add1603 = add nsw i64 0, %250
  %mul1604 = mul nsw i64 0, %add1603
  %add1605 = add nsw i64 %mul1604, 1
  %shl1606 = shl i64 %add1605, 62
  %sub1607 = sub nsw i64 %shl1606, 1
  %mul1608 = mul nsw i64 %sub1607, 2
  %add1609 = add nsw i64 %mul1608, 1
  %sub1610 = sub nsw i64 %conv1602, %add1609
  br label %cond.end.1615

cond.false.1611:                                  ; preds = %cond.false.1588
  %251 = load i64, i64* %byte8_count, align 8
  %add1612 = add nsw i64 0, %251
  %mul1613 = mul nsw i64 0, %add1612
  %add1614 = add nsw i64 %mul1613, 0
  br label %cond.end.1615

cond.end.1615:                                    ; preds = %cond.false.1611, %cond.true.1594
  %cond1616 = phi i64 [ %sub1610, %cond.true.1594 ], [ %add1614, %cond.false.1611 ]
  %cmp1617 = icmp eq i64 %cond1616, 0
  br i1 %cmp1617, label %land.lhs.true.1619, label %lor.lhs.false.1622

land.lhs.true.1619:                               ; preds = %cond.end.1615
  %252 = load i64, i64* %byte8_count, align 8
  %cmp1620 = icmp slt i64 %252, 0
  br i1 %cmp1620, label %cond.true.1757, label %lor.lhs.false.1622

lor.lhs.false.1622:                               ; preds = %land.lhs.true.1619, %cond.end.1615
  br i1 false, label %cond.true.1623, label %cond.false.1683

cond.true.1623:                                   ; preds = %lor.lhs.false.1622
  %253 = load i64, i64* %byte8_count, align 8
  %cmp1624 = icmp slt i64 %253, 0
  br i1 %cmp1624, label %cond.true.1626, label %cond.false.1649

cond.true.1626:                                   ; preds = %cond.true.1623
  %254 = load i64, i64* %byte8_count, align 8
  %255 = load i64, i64* %byte8_count, align 8
  %add1627 = add nsw i64 0, %255
  %mul1628 = mul nsw i64 0, %add1627
  %sub1629 = sub nsw i64 %mul1628, 1
  %cmp1630 = icmp slt i64 %sub1629, 0
  br i1 %cmp1630, label %cond.true.1632, label %cond.false.1640

cond.true.1632:                                   ; preds = %cond.true.1626
  %256 = load i64, i64* %byte8_count, align 8
  %add1633 = add nsw i64 0, %256
  %mul1634 = mul nsw i64 0, %add1633
  %add1635 = add nsw i64 %mul1634, 1
  %shl1636 = shl i64 %add1635, 62
  %sub1637 = sub nsw i64 %shl1636, 1
  %mul1638 = mul nsw i64 %sub1637, 2
  %add1639 = add nsw i64 %mul1638, 1
  br label %cond.end.1644

cond.false.1640:                                  ; preds = %cond.true.1626
  %257 = load i64, i64* %byte8_count, align 8
  %add1641 = add nsw i64 0, %257
  %mul1642 = mul nsw i64 0, %add1641
  %sub1643 = sub nsw i64 %mul1642, 1
  br label %cond.end.1644

cond.end.1644:                                    ; preds = %cond.false.1640, %cond.true.1632
  %cond1645 = phi i64 [ %add1639, %cond.true.1632 ], [ %sub1643, %cond.false.1640 ]
  %div1646 = sdiv i64 %cond1645, 3
  %cmp1647 = icmp slt i64 %254, %div1646
  br i1 %cmp1647, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1649:                                  ; preds = %cond.true.1623
  br i1 false, label %cond.true.1650, label %cond.false.1651

cond.true.1650:                                   ; preds = %cond.false.1649
  br i1 false, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1651:                                  ; preds = %cond.false.1649
  %258 = load i64, i64* %byte8_count, align 8
  %add1652 = add nsw i64 0, %258
  %mul1653 = mul nsw i64 0, %add1652
  %sub1654 = sub nsw i64 %mul1653, 1
  %cmp1655 = icmp slt i64 %sub1654, 0
  br i1 %cmp1655, label %cond.true.1657, label %cond.false.1674

cond.true.1657:                                   ; preds = %cond.false.1651
  %259 = load i64, i64* %byte8_count, align 8
  %add1658 = add nsw i64 0, %259
  %mul1659 = mul nsw i64 0, %add1658
  %add1660 = add nsw i64 %mul1659, 0
  %neg1661 = xor i64 %add1660, -1
  %cmp1662 = icmp eq i64 %neg1661, -1
  %conv1663 = zext i1 %cmp1662 to i32
  %sub1664 = sub nsw i32 0, %conv1663
  %conv1665 = sext i32 %sub1664 to i64
  %260 = load i64, i64* %byte8_count, align 8
  %add1666 = add nsw i64 0, %260
  %mul1667 = mul nsw i64 0, %add1666
  %add1668 = add nsw i64 %mul1667, 1
  %shl1669 = shl i64 %add1668, 62
  %sub1670 = sub nsw i64 %shl1669, 1
  %mul1671 = mul nsw i64 %sub1670, 2
  %add1672 = add nsw i64 %mul1671, 1
  %sub1673 = sub nsw i64 %conv1665, %add1672
  br label %cond.end.1678

cond.false.1674:                                  ; preds = %cond.false.1651
  %261 = load i64, i64* %byte8_count, align 8
  %add1675 = add nsw i64 0, %261
  %mul1676 = mul nsw i64 0, %add1675
  %add1677 = add nsw i64 %mul1676, 0
  br label %cond.end.1678

cond.end.1678:                                    ; preds = %cond.false.1674, %cond.true.1657
  %cond1679 = phi i64 [ %sub1673, %cond.true.1657 ], [ %add1677, %cond.false.1674 ]
  %div1680 = sdiv i64 %cond1679, 3
  %262 = load i64, i64* %byte8_count, align 8
  %cmp1681 = icmp slt i64 %div1680, %262
  br i1 %cmp1681, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1683:                                  ; preds = %lor.lhs.false.1622
  br i1 false, label %cond.true.1684, label %cond.false.1685

cond.true.1684:                                   ; preds = %cond.false.1683
  br i1 false, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1685:                                  ; preds = %cond.false.1683
  %263 = load i64, i64* %byte8_count, align 8
  %cmp1686 = icmp slt i64 %263, 0
  br i1 %cmp1686, label %cond.true.1688, label %cond.false.1720

cond.true.1688:                                   ; preds = %cond.false.1685
  %264 = load i64, i64* %byte8_count, align 8
  %265 = load i64, i64* %byte8_count, align 8
  %add1689 = add nsw i64 0, %265
  %mul1690 = mul nsw i64 0, %add1689
  %sub1691 = sub nsw i64 %mul1690, 1
  %cmp1692 = icmp slt i64 %sub1691, 0
  br i1 %cmp1692, label %cond.true.1694, label %cond.false.1711

cond.true.1694:                                   ; preds = %cond.true.1688
  %266 = load i64, i64* %byte8_count, align 8
  %add1695 = add nsw i64 0, %266
  %mul1696 = mul nsw i64 0, %add1695
  %add1697 = add nsw i64 %mul1696, 0
  %neg1698 = xor i64 %add1697, -1
  %cmp1699 = icmp eq i64 %neg1698, -1
  %conv1700 = zext i1 %cmp1699 to i32
  %sub1701 = sub nsw i32 0, %conv1700
  %conv1702 = sext i32 %sub1701 to i64
  %267 = load i64, i64* %byte8_count, align 8
  %add1703 = add nsw i64 0, %267
  %mul1704 = mul nsw i64 0, %add1703
  %add1705 = add nsw i64 %mul1704, 1
  %shl1706 = shl i64 %add1705, 62
  %sub1707 = sub nsw i64 %shl1706, 1
  %mul1708 = mul nsw i64 %sub1707, 2
  %add1709 = add nsw i64 %mul1708, 1
  %sub1710 = sub nsw i64 %conv1702, %add1709
  br label %cond.end.1715

cond.false.1711:                                  ; preds = %cond.true.1688
  %268 = load i64, i64* %byte8_count, align 8
  %add1712 = add nsw i64 0, %268
  %mul1713 = mul nsw i64 0, %add1712
  %add1714 = add nsw i64 %mul1713, 0
  br label %cond.end.1715

cond.end.1715:                                    ; preds = %cond.false.1711, %cond.true.1694
  %cond1716 = phi i64 [ %sub1710, %cond.true.1694 ], [ %add1714, %cond.false.1711 ]
  %div1717 = sdiv i64 %cond1716, 3
  %cmp1718 = icmp slt i64 %264, %div1717
  br i1 %cmp1718, label %cond.true.1757, label %lor.lhs.false.1743

cond.false.1720:                                  ; preds = %cond.false.1685
  %269 = load i64, i64* %byte8_count, align 8
  %add1721 = add nsw i64 0, %269
  %mul1722 = mul nsw i64 0, %add1721
  %sub1723 = sub nsw i64 %mul1722, 1
  %cmp1724 = icmp slt i64 %sub1723, 0
  br i1 %cmp1724, label %cond.true.1726, label %cond.false.1734

cond.true.1726:                                   ; preds = %cond.false.1720
  %270 = load i64, i64* %byte8_count, align 8
  %add1727 = add nsw i64 0, %270
  %mul1728 = mul nsw i64 0, %add1727
  %add1729 = add nsw i64 %mul1728, 1
  %shl1730 = shl i64 %add1729, 62
  %sub1731 = sub nsw i64 %shl1730, 1
  %mul1732 = mul nsw i64 %sub1731, 2
  %add1733 = add nsw i64 %mul1732, 1
  br label %cond.end.1738

cond.false.1734:                                  ; preds = %cond.false.1720
  %271 = load i64, i64* %byte8_count, align 8
  %add1735 = add nsw i64 0, %271
  %mul1736 = mul nsw i64 0, %add1735
  %sub1737 = sub nsw i64 %mul1736, 1
  br label %cond.end.1738

cond.end.1738:                                    ; preds = %cond.false.1734, %cond.true.1726
  %cond1739 = phi i64 [ %add1733, %cond.true.1726 ], [ %sub1737, %cond.false.1734 ]
  %div1740 = sdiv i64 %cond1739, 3
  %272 = load i64, i64* %byte8_count, align 8
  %cmp1741 = icmp slt i64 %div1740, %272
  br i1 %cmp1741, label %cond.true.1757, label %lor.lhs.false.1743

lor.lhs.false.1743:                               ; preds = %cond.end.1738, %cond.end.1715, %cond.true.1684, %cond.end.1678, %cond.true.1650, %cond.end.1644
  %273 = load i64, i64* %byte8_count, align 8
  %mul1744 = mul nsw i64 %273, 3
  %mul1745 = mul nsw i64 0, %mul1744
  %sub1746 = sub nsw i64 %mul1745, 1
  %cmp1747 = icmp slt i64 %sub1746, 0
  br i1 %cmp1747, label %land.lhs.true.1749, label %lor.lhs.false.1753

land.lhs.true.1749:                               ; preds = %lor.lhs.false.1743
  %274 = load i64, i64* %byte8_count, align 8
  %mul1750 = mul nsw i64 %274, 3
  %cmp1751 = icmp slt i64 %mul1750, -9223372036854775808
  br i1 %cmp1751, label %cond.true.1757, label %lor.lhs.false.1753

lor.lhs.false.1753:                               ; preds = %land.lhs.true.1749, %lor.lhs.false.1743
  %275 = load i64, i64* %byte8_count, align 8
  %mul1754 = mul nsw i64 %275, 3
  %cmp1755 = icmp slt i64 9223372036854775807, %mul1754
  br i1 %cmp1755, label %cond.true.1757, label %cond.false.1769

cond.true.1757:                                   ; preds = %lor.lhs.false.1753, %land.lhs.true.1749, %cond.end.1738, %cond.end.1715, %cond.true.1684, %cond.end.1678, %cond.true.1650, %cond.end.1644, %land.lhs.true.1619
  %276 = load i64, i64* %byte8_count, align 8
  %mul1758 = mul i64 %276, 3
  %cmp1759 = icmp ule i64 %mul1758, 9223372036854775807
  br i1 %cmp1759, label %cond.true.1761, label %cond.false.1763

cond.true.1761:                                   ; preds = %cond.true.1757
  %277 = load i64, i64* %byte8_count, align 8
  %mul1762 = mul i64 %277, 3
  br label %cond.end.1767

cond.false.1763:                                  ; preds = %cond.true.1757
  %278 = load i64, i64* %byte8_count, align 8
  %mul1764 = mul i64 %278, 3
  %sub1765 = sub i64 %mul1764, -9223372036854775808
  %add1766 = add nsw i64 %sub1765, -9223372036854775808
  br label %cond.end.1767

cond.end.1767:                                    ; preds = %cond.false.1763, %cond.true.1761
  %cond1768 = phi i64 [ %mul1762, %cond.true.1761 ], [ %add1766, %cond.false.1763 ]
  store i64 %cond1768, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.1769:                                  ; preds = %lor.lhs.false.1753
  %279 = load i64, i64* %byte8_count, align 8
  %mul1770 = mul i64 %279, 3
  %cmp1771 = icmp ule i64 %mul1770, 9223372036854775807
  br i1 %cmp1771, label %cond.true.1773, label %cond.false.1775

cond.true.1773:                                   ; preds = %cond.false.1769
  %280 = load i64, i64* %byte8_count, align 8
  %mul1774 = mul i64 %280, 3
  br label %cond.end.1779

cond.false.1775:                                  ; preds = %cond.false.1769
  %281 = load i64, i64* %byte8_count, align 8
  %mul1776 = mul i64 %281, 3
  %sub1777 = sub i64 %mul1776, -9223372036854775808
  %add1778 = add nsw i64 %sub1777, -9223372036854775808
  br label %cond.end.1779

cond.end.1779:                                    ; preds = %cond.false.1775, %cond.true.1773
  %cond1780 = phi i64 [ %mul1774, %cond.true.1773 ], [ %add1778, %cond.false.1775 ]
  store i64 %cond1780, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.1781:                                  ; preds = %cond.false.1393
  br i1 false, label %cond.true.1782, label %cond.false.1975

cond.true.1782:                                   ; preds = %cond.false.1781
  %282 = load i64, i64* %byte8_count, align 8
  %add1783 = add nsw i64 0, %282
  %mul1784 = mul nsw i64 0, %add1783
  %sub1785 = sub nsw i64 %mul1784, 1
  %cmp1786 = icmp slt i64 %sub1785, 0
  br i1 %cmp1786, label %cond.true.1788, label %cond.false.1805

cond.true.1788:                                   ; preds = %cond.true.1782
  %283 = load i64, i64* %byte8_count, align 8
  %add1789 = add nsw i64 0, %283
  %mul1790 = mul nsw i64 0, %add1789
  %add1791 = add nsw i64 %mul1790, 0
  %neg1792 = xor i64 %add1791, -1
  %cmp1793 = icmp eq i64 %neg1792, -1
  %conv1794 = zext i1 %cmp1793 to i32
  %sub1795 = sub nsw i32 0, %conv1794
  %conv1796 = sext i32 %sub1795 to i64
  %284 = load i64, i64* %byte8_count, align 8
  %add1797 = add nsw i64 0, %284
  %mul1798 = mul nsw i64 0, %add1797
  %add1799 = add nsw i64 %mul1798, 1
  %shl1800 = shl i64 %add1799, 62
  %sub1801 = sub nsw i64 %shl1800, 1
  %mul1802 = mul nsw i64 %sub1801, 2
  %add1803 = add nsw i64 %mul1802, 1
  %sub1804 = sub nsw i64 %conv1796, %add1803
  br label %cond.end.1809

cond.false.1805:                                  ; preds = %cond.true.1782
  %285 = load i64, i64* %byte8_count, align 8
  %add1806 = add nsw i64 0, %285
  %mul1807 = mul nsw i64 0, %add1806
  %add1808 = add nsw i64 %mul1807, 0
  br label %cond.end.1809

cond.end.1809:                                    ; preds = %cond.false.1805, %cond.true.1788
  %cond1810 = phi i64 [ %sub1804, %cond.true.1788 ], [ %add1808, %cond.false.1805 ]
  %cmp1811 = icmp eq i64 %cond1810, 0
  br i1 %cmp1811, label %land.lhs.true.1813, label %lor.lhs.false.1816

land.lhs.true.1813:                               ; preds = %cond.end.1809
  %286 = load i64, i64* %byte8_count, align 8
  %cmp1814 = icmp slt i64 %286, 0
  br i1 %cmp1814, label %cond.true.1951, label %lor.lhs.false.1816

lor.lhs.false.1816:                               ; preds = %land.lhs.true.1813, %cond.end.1809
  br i1 false, label %cond.true.1817, label %cond.false.1877

cond.true.1817:                                   ; preds = %lor.lhs.false.1816
  %287 = load i64, i64* %byte8_count, align 8
  %cmp1818 = icmp slt i64 %287, 0
  br i1 %cmp1818, label %cond.true.1820, label %cond.false.1843

cond.true.1820:                                   ; preds = %cond.true.1817
  %288 = load i64, i64* %byte8_count, align 8
  %289 = load i64, i64* %byte8_count, align 8
  %add1821 = add nsw i64 0, %289
  %mul1822 = mul nsw i64 0, %add1821
  %sub1823 = sub nsw i64 %mul1822, 1
  %cmp1824 = icmp slt i64 %sub1823, 0
  br i1 %cmp1824, label %cond.true.1826, label %cond.false.1834

cond.true.1826:                                   ; preds = %cond.true.1820
  %290 = load i64, i64* %byte8_count, align 8
  %add1827 = add nsw i64 0, %290
  %mul1828 = mul nsw i64 0, %add1827
  %add1829 = add nsw i64 %mul1828, 1
  %shl1830 = shl i64 %add1829, 62
  %sub1831 = sub nsw i64 %shl1830, 1
  %mul1832 = mul nsw i64 %sub1831, 2
  %add1833 = add nsw i64 %mul1832, 1
  br label %cond.end.1838

cond.false.1834:                                  ; preds = %cond.true.1820
  %291 = load i64, i64* %byte8_count, align 8
  %add1835 = add nsw i64 0, %291
  %mul1836 = mul nsw i64 0, %add1835
  %sub1837 = sub nsw i64 %mul1836, 1
  br label %cond.end.1838

cond.end.1838:                                    ; preds = %cond.false.1834, %cond.true.1826
  %cond1839 = phi i64 [ %add1833, %cond.true.1826 ], [ %sub1837, %cond.false.1834 ]
  %div1840 = sdiv i64 %cond1839, 3
  %cmp1841 = icmp slt i64 %288, %div1840
  br i1 %cmp1841, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1843:                                  ; preds = %cond.true.1817
  br i1 false, label %cond.true.1844, label %cond.false.1845

cond.true.1844:                                   ; preds = %cond.false.1843
  br i1 false, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1845:                                  ; preds = %cond.false.1843
  %292 = load i64, i64* %byte8_count, align 8
  %add1846 = add nsw i64 0, %292
  %mul1847 = mul nsw i64 0, %add1846
  %sub1848 = sub nsw i64 %mul1847, 1
  %cmp1849 = icmp slt i64 %sub1848, 0
  br i1 %cmp1849, label %cond.true.1851, label %cond.false.1868

cond.true.1851:                                   ; preds = %cond.false.1845
  %293 = load i64, i64* %byte8_count, align 8
  %add1852 = add nsw i64 0, %293
  %mul1853 = mul nsw i64 0, %add1852
  %add1854 = add nsw i64 %mul1853, 0
  %neg1855 = xor i64 %add1854, -1
  %cmp1856 = icmp eq i64 %neg1855, -1
  %conv1857 = zext i1 %cmp1856 to i32
  %sub1858 = sub nsw i32 0, %conv1857
  %conv1859 = sext i32 %sub1858 to i64
  %294 = load i64, i64* %byte8_count, align 8
  %add1860 = add nsw i64 0, %294
  %mul1861 = mul nsw i64 0, %add1860
  %add1862 = add nsw i64 %mul1861, 1
  %shl1863 = shl i64 %add1862, 62
  %sub1864 = sub nsw i64 %shl1863, 1
  %mul1865 = mul nsw i64 %sub1864, 2
  %add1866 = add nsw i64 %mul1865, 1
  %sub1867 = sub nsw i64 %conv1859, %add1866
  br label %cond.end.1872

cond.false.1868:                                  ; preds = %cond.false.1845
  %295 = load i64, i64* %byte8_count, align 8
  %add1869 = add nsw i64 0, %295
  %mul1870 = mul nsw i64 0, %add1869
  %add1871 = add nsw i64 %mul1870, 0
  br label %cond.end.1872

cond.end.1872:                                    ; preds = %cond.false.1868, %cond.true.1851
  %cond1873 = phi i64 [ %sub1867, %cond.true.1851 ], [ %add1871, %cond.false.1868 ]
  %div1874 = sdiv i64 %cond1873, 3
  %296 = load i64, i64* %byte8_count, align 8
  %cmp1875 = icmp slt i64 %div1874, %296
  br i1 %cmp1875, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1877:                                  ; preds = %lor.lhs.false.1816
  br i1 false, label %cond.true.1878, label %cond.false.1879

cond.true.1878:                                   ; preds = %cond.false.1877
  br i1 false, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1879:                                  ; preds = %cond.false.1877
  %297 = load i64, i64* %byte8_count, align 8
  %cmp1880 = icmp slt i64 %297, 0
  br i1 %cmp1880, label %cond.true.1882, label %cond.false.1914

cond.true.1882:                                   ; preds = %cond.false.1879
  %298 = load i64, i64* %byte8_count, align 8
  %299 = load i64, i64* %byte8_count, align 8
  %add1883 = add nsw i64 0, %299
  %mul1884 = mul nsw i64 0, %add1883
  %sub1885 = sub nsw i64 %mul1884, 1
  %cmp1886 = icmp slt i64 %sub1885, 0
  br i1 %cmp1886, label %cond.true.1888, label %cond.false.1905

cond.true.1888:                                   ; preds = %cond.true.1882
  %300 = load i64, i64* %byte8_count, align 8
  %add1889 = add nsw i64 0, %300
  %mul1890 = mul nsw i64 0, %add1889
  %add1891 = add nsw i64 %mul1890, 0
  %neg1892 = xor i64 %add1891, -1
  %cmp1893 = icmp eq i64 %neg1892, -1
  %conv1894 = zext i1 %cmp1893 to i32
  %sub1895 = sub nsw i32 0, %conv1894
  %conv1896 = sext i32 %sub1895 to i64
  %301 = load i64, i64* %byte8_count, align 8
  %add1897 = add nsw i64 0, %301
  %mul1898 = mul nsw i64 0, %add1897
  %add1899 = add nsw i64 %mul1898, 1
  %shl1900 = shl i64 %add1899, 62
  %sub1901 = sub nsw i64 %shl1900, 1
  %mul1902 = mul nsw i64 %sub1901, 2
  %add1903 = add nsw i64 %mul1902, 1
  %sub1904 = sub nsw i64 %conv1896, %add1903
  br label %cond.end.1909

cond.false.1905:                                  ; preds = %cond.true.1882
  %302 = load i64, i64* %byte8_count, align 8
  %add1906 = add nsw i64 0, %302
  %mul1907 = mul nsw i64 0, %add1906
  %add1908 = add nsw i64 %mul1907, 0
  br label %cond.end.1909

cond.end.1909:                                    ; preds = %cond.false.1905, %cond.true.1888
  %cond1910 = phi i64 [ %sub1904, %cond.true.1888 ], [ %add1908, %cond.false.1905 ]
  %div1911 = sdiv i64 %cond1910, 3
  %cmp1912 = icmp slt i64 %298, %div1911
  br i1 %cmp1912, label %cond.true.1951, label %lor.lhs.false.1937

cond.false.1914:                                  ; preds = %cond.false.1879
  %303 = load i64, i64* %byte8_count, align 8
  %add1915 = add nsw i64 0, %303
  %mul1916 = mul nsw i64 0, %add1915
  %sub1917 = sub nsw i64 %mul1916, 1
  %cmp1918 = icmp slt i64 %sub1917, 0
  br i1 %cmp1918, label %cond.true.1920, label %cond.false.1928

cond.true.1920:                                   ; preds = %cond.false.1914
  %304 = load i64, i64* %byte8_count, align 8
  %add1921 = add nsw i64 0, %304
  %mul1922 = mul nsw i64 0, %add1921
  %add1923 = add nsw i64 %mul1922, 1
  %shl1924 = shl i64 %add1923, 62
  %sub1925 = sub nsw i64 %shl1924, 1
  %mul1926 = mul nsw i64 %sub1925, 2
  %add1927 = add nsw i64 %mul1926, 1
  br label %cond.end.1932

cond.false.1928:                                  ; preds = %cond.false.1914
  %305 = load i64, i64* %byte8_count, align 8
  %add1929 = add nsw i64 0, %305
  %mul1930 = mul nsw i64 0, %add1929
  %sub1931 = sub nsw i64 %mul1930, 1
  br label %cond.end.1932

cond.end.1932:                                    ; preds = %cond.false.1928, %cond.true.1920
  %cond1933 = phi i64 [ %add1927, %cond.true.1920 ], [ %sub1931, %cond.false.1928 ]
  %div1934 = sdiv i64 %cond1933, 3
  %306 = load i64, i64* %byte8_count, align 8
  %cmp1935 = icmp slt i64 %div1934, %306
  br i1 %cmp1935, label %cond.true.1951, label %lor.lhs.false.1937

lor.lhs.false.1937:                               ; preds = %cond.end.1932, %cond.end.1909, %cond.true.1878, %cond.end.1872, %cond.true.1844, %cond.end.1838
  %307 = load i64, i64* %byte8_count, align 8
  %mul1938 = mul nsw i64 %307, 3
  %mul1939 = mul nsw i64 0, %mul1938
  %sub1940 = sub nsw i64 %mul1939, 1
  %cmp1941 = icmp slt i64 %sub1940, 0
  br i1 %cmp1941, label %land.lhs.true.1943, label %lor.lhs.false.1947

land.lhs.true.1943:                               ; preds = %lor.lhs.false.1937
  %308 = load i64, i64* %byte8_count, align 8
  %mul1944 = mul nsw i64 %308, 3
  %cmp1945 = icmp slt i64 %mul1944, -9223372036854775808
  br i1 %cmp1945, label %cond.true.1951, label %lor.lhs.false.1947

lor.lhs.false.1947:                               ; preds = %land.lhs.true.1943, %lor.lhs.false.1937
  %309 = load i64, i64* %byte8_count, align 8
  %mul1948 = mul nsw i64 %309, 3
  %cmp1949 = icmp slt i64 9223372036854775807, %mul1948
  br i1 %cmp1949, label %cond.true.1951, label %cond.false.1963

cond.true.1951:                                   ; preds = %lor.lhs.false.1947, %land.lhs.true.1943, %cond.end.1932, %cond.end.1909, %cond.true.1878, %cond.end.1872, %cond.true.1844, %cond.end.1838, %land.lhs.true.1813
  %310 = load i64, i64* %byte8_count, align 8
  %mul1952 = mul i64 %310, 3
  %cmp1953 = icmp ule i64 %mul1952, 9223372036854775807
  br i1 %cmp1953, label %cond.true.1955, label %cond.false.1957

cond.true.1955:                                   ; preds = %cond.true.1951
  %311 = load i64, i64* %byte8_count, align 8
  %mul1956 = mul i64 %311, 3
  br label %cond.end.1961

cond.false.1957:                                  ; preds = %cond.true.1951
  %312 = load i64, i64* %byte8_count, align 8
  %mul1958 = mul i64 %312, 3
  %sub1959 = sub i64 %mul1958, -9223372036854775808
  %add1960 = add nsw i64 %sub1959, -9223372036854775808
  br label %cond.end.1961

cond.end.1961:                                    ; preds = %cond.false.1957, %cond.true.1955
  %cond1962 = phi i64 [ %mul1956, %cond.true.1955 ], [ %add1960, %cond.false.1957 ]
  store i64 %cond1962, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.1963:                                  ; preds = %lor.lhs.false.1947
  %313 = load i64, i64* %byte8_count, align 8
  %mul1964 = mul i64 %313, 3
  %cmp1965 = icmp ule i64 %mul1964, 9223372036854775807
  br i1 %cmp1965, label %cond.true.1967, label %cond.false.1969

cond.true.1967:                                   ; preds = %cond.false.1963
  %314 = load i64, i64* %byte8_count, align 8
  %mul1968 = mul i64 %314, 3
  br label %cond.end.1973

cond.false.1969:                                  ; preds = %cond.false.1963
  %315 = load i64, i64* %byte8_count, align 8
  %mul1970 = mul i64 %315, 3
  %sub1971 = sub i64 %mul1970, -9223372036854775808
  %add1972 = add nsw i64 %sub1971, -9223372036854775808
  br label %cond.end.1973

cond.end.1973:                                    ; preds = %cond.false.1969, %cond.true.1967
  %cond1974 = phi i64 [ %mul1968, %cond.true.1967 ], [ %add1972, %cond.false.1969 ]
  store i64 %cond1974, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

cond.false.1975:                                  ; preds = %cond.false.1781
  %316 = load i64, i64* %byte8_count, align 8
  %add1976 = add nsw i64 0, %316
  %mul1977 = mul nsw i64 0, %add1976
  %sub1978 = sub nsw i64 %mul1977, 1
  %cmp1979 = icmp slt i64 %sub1978, 0
  br i1 %cmp1979, label %cond.true.1981, label %cond.false.1998

cond.true.1981:                                   ; preds = %cond.false.1975
  %317 = load i64, i64* %byte8_count, align 8
  %add1982 = add nsw i64 0, %317
  %mul1983 = mul nsw i64 0, %add1982
  %add1984 = add nsw i64 %mul1983, 0
  %neg1985 = xor i64 %add1984, -1
  %cmp1986 = icmp eq i64 %neg1985, -1
  %conv1987 = zext i1 %cmp1986 to i32
  %sub1988 = sub nsw i32 0, %conv1987
  %conv1989 = sext i32 %sub1988 to i64
  %318 = load i64, i64* %byte8_count, align 8
  %add1990 = add nsw i64 0, %318
  %mul1991 = mul nsw i64 0, %add1990
  %add1992 = add nsw i64 %mul1991, 1
  %shl1993 = shl i64 %add1992, 62
  %sub1994 = sub nsw i64 %shl1993, 1
  %mul1995 = mul nsw i64 %sub1994, 2
  %add1996 = add nsw i64 %mul1995, 1
  %sub1997 = sub nsw i64 %conv1989, %add1996
  br label %cond.end.2002

cond.false.1998:                                  ; preds = %cond.false.1975
  %319 = load i64, i64* %byte8_count, align 8
  %add1999 = add nsw i64 0, %319
  %mul2000 = mul nsw i64 0, %add1999
  %add2001 = add nsw i64 %mul2000, 0
  br label %cond.end.2002

cond.end.2002:                                    ; preds = %cond.false.1998, %cond.true.1981
  %cond2003 = phi i64 [ %sub1997, %cond.true.1981 ], [ %add2001, %cond.false.1998 ]
  %cmp2004 = icmp eq i64 %cond2003, 0
  br i1 %cmp2004, label %land.lhs.true.2006, label %lor.lhs.false.2009

land.lhs.true.2006:                               ; preds = %cond.end.2002
  %320 = load i64, i64* %byte8_count, align 8
  %cmp2007 = icmp slt i64 %320, 0
  br i1 %cmp2007, label %cond.true.2144, label %lor.lhs.false.2009

lor.lhs.false.2009:                               ; preds = %land.lhs.true.2006, %cond.end.2002
  br i1 false, label %cond.true.2010, label %cond.false.2070

cond.true.2010:                                   ; preds = %lor.lhs.false.2009
  %321 = load i64, i64* %byte8_count, align 8
  %cmp2011 = icmp slt i64 %321, 0
  br i1 %cmp2011, label %cond.true.2013, label %cond.false.2036

cond.true.2013:                                   ; preds = %cond.true.2010
  %322 = load i64, i64* %byte8_count, align 8
  %323 = load i64, i64* %byte8_count, align 8
  %add2014 = add nsw i64 0, %323
  %mul2015 = mul nsw i64 0, %add2014
  %sub2016 = sub nsw i64 %mul2015, 1
  %cmp2017 = icmp slt i64 %sub2016, 0
  br i1 %cmp2017, label %cond.true.2019, label %cond.false.2027

cond.true.2019:                                   ; preds = %cond.true.2013
  %324 = load i64, i64* %byte8_count, align 8
  %add2020 = add nsw i64 0, %324
  %mul2021 = mul nsw i64 0, %add2020
  %add2022 = add nsw i64 %mul2021, 1
  %shl2023 = shl i64 %add2022, 62
  %sub2024 = sub nsw i64 %shl2023, 1
  %mul2025 = mul nsw i64 %sub2024, 2
  %add2026 = add nsw i64 %mul2025, 1
  br label %cond.end.2031

cond.false.2027:                                  ; preds = %cond.true.2013
  %325 = load i64, i64* %byte8_count, align 8
  %add2028 = add nsw i64 0, %325
  %mul2029 = mul nsw i64 0, %add2028
  %sub2030 = sub nsw i64 %mul2029, 1
  br label %cond.end.2031

cond.end.2031:                                    ; preds = %cond.false.2027, %cond.true.2019
  %cond2032 = phi i64 [ %add2026, %cond.true.2019 ], [ %sub2030, %cond.false.2027 ]
  %div2033 = sdiv i64 %cond2032, 3
  %cmp2034 = icmp slt i64 %322, %div2033
  br i1 %cmp2034, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2036:                                  ; preds = %cond.true.2010
  br i1 false, label %cond.true.2037, label %cond.false.2038

cond.true.2037:                                   ; preds = %cond.false.2036
  br i1 false, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2038:                                  ; preds = %cond.false.2036
  %326 = load i64, i64* %byte8_count, align 8
  %add2039 = add nsw i64 0, %326
  %mul2040 = mul nsw i64 0, %add2039
  %sub2041 = sub nsw i64 %mul2040, 1
  %cmp2042 = icmp slt i64 %sub2041, 0
  br i1 %cmp2042, label %cond.true.2044, label %cond.false.2061

cond.true.2044:                                   ; preds = %cond.false.2038
  %327 = load i64, i64* %byte8_count, align 8
  %add2045 = add nsw i64 0, %327
  %mul2046 = mul nsw i64 0, %add2045
  %add2047 = add nsw i64 %mul2046, 0
  %neg2048 = xor i64 %add2047, -1
  %cmp2049 = icmp eq i64 %neg2048, -1
  %conv2050 = zext i1 %cmp2049 to i32
  %sub2051 = sub nsw i32 0, %conv2050
  %conv2052 = sext i32 %sub2051 to i64
  %328 = load i64, i64* %byte8_count, align 8
  %add2053 = add nsw i64 0, %328
  %mul2054 = mul nsw i64 0, %add2053
  %add2055 = add nsw i64 %mul2054, 1
  %shl2056 = shl i64 %add2055, 62
  %sub2057 = sub nsw i64 %shl2056, 1
  %mul2058 = mul nsw i64 %sub2057, 2
  %add2059 = add nsw i64 %mul2058, 1
  %sub2060 = sub nsw i64 %conv2052, %add2059
  br label %cond.end.2065

cond.false.2061:                                  ; preds = %cond.false.2038
  %329 = load i64, i64* %byte8_count, align 8
  %add2062 = add nsw i64 0, %329
  %mul2063 = mul nsw i64 0, %add2062
  %add2064 = add nsw i64 %mul2063, 0
  br label %cond.end.2065

cond.end.2065:                                    ; preds = %cond.false.2061, %cond.true.2044
  %cond2066 = phi i64 [ %sub2060, %cond.true.2044 ], [ %add2064, %cond.false.2061 ]
  %div2067 = sdiv i64 %cond2066, 3
  %330 = load i64, i64* %byte8_count, align 8
  %cmp2068 = icmp slt i64 %div2067, %330
  br i1 %cmp2068, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2070:                                  ; preds = %lor.lhs.false.2009
  br i1 false, label %cond.true.2071, label %cond.false.2072

cond.true.2071:                                   ; preds = %cond.false.2070
  br i1 false, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2072:                                  ; preds = %cond.false.2070
  %331 = load i64, i64* %byte8_count, align 8
  %cmp2073 = icmp slt i64 %331, 0
  br i1 %cmp2073, label %cond.true.2075, label %cond.false.2107

cond.true.2075:                                   ; preds = %cond.false.2072
  %332 = load i64, i64* %byte8_count, align 8
  %333 = load i64, i64* %byte8_count, align 8
  %add2076 = add nsw i64 0, %333
  %mul2077 = mul nsw i64 0, %add2076
  %sub2078 = sub nsw i64 %mul2077, 1
  %cmp2079 = icmp slt i64 %sub2078, 0
  br i1 %cmp2079, label %cond.true.2081, label %cond.false.2098

cond.true.2081:                                   ; preds = %cond.true.2075
  %334 = load i64, i64* %byte8_count, align 8
  %add2082 = add nsw i64 0, %334
  %mul2083 = mul nsw i64 0, %add2082
  %add2084 = add nsw i64 %mul2083, 0
  %neg2085 = xor i64 %add2084, -1
  %cmp2086 = icmp eq i64 %neg2085, -1
  %conv2087 = zext i1 %cmp2086 to i32
  %sub2088 = sub nsw i32 0, %conv2087
  %conv2089 = sext i32 %sub2088 to i64
  %335 = load i64, i64* %byte8_count, align 8
  %add2090 = add nsw i64 0, %335
  %mul2091 = mul nsw i64 0, %add2090
  %add2092 = add nsw i64 %mul2091, 1
  %shl2093 = shl i64 %add2092, 62
  %sub2094 = sub nsw i64 %shl2093, 1
  %mul2095 = mul nsw i64 %sub2094, 2
  %add2096 = add nsw i64 %mul2095, 1
  %sub2097 = sub nsw i64 %conv2089, %add2096
  br label %cond.end.2102

cond.false.2098:                                  ; preds = %cond.true.2075
  %336 = load i64, i64* %byte8_count, align 8
  %add2099 = add nsw i64 0, %336
  %mul2100 = mul nsw i64 0, %add2099
  %add2101 = add nsw i64 %mul2100, 0
  br label %cond.end.2102

cond.end.2102:                                    ; preds = %cond.false.2098, %cond.true.2081
  %cond2103 = phi i64 [ %sub2097, %cond.true.2081 ], [ %add2101, %cond.false.2098 ]
  %div2104 = sdiv i64 %cond2103, 3
  %cmp2105 = icmp slt i64 %332, %div2104
  br i1 %cmp2105, label %cond.true.2144, label %lor.lhs.false.2130

cond.false.2107:                                  ; preds = %cond.false.2072
  %337 = load i64, i64* %byte8_count, align 8
  %add2108 = add nsw i64 0, %337
  %mul2109 = mul nsw i64 0, %add2108
  %sub2110 = sub nsw i64 %mul2109, 1
  %cmp2111 = icmp slt i64 %sub2110, 0
  br i1 %cmp2111, label %cond.true.2113, label %cond.false.2121

cond.true.2113:                                   ; preds = %cond.false.2107
  %338 = load i64, i64* %byte8_count, align 8
  %add2114 = add nsw i64 0, %338
  %mul2115 = mul nsw i64 0, %add2114
  %add2116 = add nsw i64 %mul2115, 1
  %shl2117 = shl i64 %add2116, 62
  %sub2118 = sub nsw i64 %shl2117, 1
  %mul2119 = mul nsw i64 %sub2118, 2
  %add2120 = add nsw i64 %mul2119, 1
  br label %cond.end.2125

cond.false.2121:                                  ; preds = %cond.false.2107
  %339 = load i64, i64* %byte8_count, align 8
  %add2122 = add nsw i64 0, %339
  %mul2123 = mul nsw i64 0, %add2122
  %sub2124 = sub nsw i64 %mul2123, 1
  br label %cond.end.2125

cond.end.2125:                                    ; preds = %cond.false.2121, %cond.true.2113
  %cond2126 = phi i64 [ %add2120, %cond.true.2113 ], [ %sub2124, %cond.false.2121 ]
  %div2127 = sdiv i64 %cond2126, 3
  %340 = load i64, i64* %byte8_count, align 8
  %cmp2128 = icmp slt i64 %div2127, %340
  br i1 %cmp2128, label %cond.true.2144, label %lor.lhs.false.2130

lor.lhs.false.2130:                               ; preds = %cond.end.2125, %cond.end.2102, %cond.true.2071, %cond.end.2065, %cond.true.2037, %cond.end.2031
  %341 = load i64, i64* %byte8_count, align 8
  %mul2131 = mul nsw i64 %341, 3
  %mul2132 = mul nsw i64 0, %mul2131
  %sub2133 = sub nsw i64 %mul2132, 1
  %cmp2134 = icmp slt i64 %sub2133, 0
  br i1 %cmp2134, label %land.lhs.true.2136, label %lor.lhs.false.2140

land.lhs.true.2136:                               ; preds = %lor.lhs.false.2130
  %342 = load i64, i64* %byte8_count, align 8
  %mul2137 = mul nsw i64 %342, 3
  %cmp2138 = icmp slt i64 %mul2137, -9223372036854775808
  br i1 %cmp2138, label %cond.true.2144, label %lor.lhs.false.2140

lor.lhs.false.2140:                               ; preds = %land.lhs.true.2136, %lor.lhs.false.2130
  %343 = load i64, i64* %byte8_count, align 8
  %mul2141 = mul nsw i64 %343, 3
  %cmp2142 = icmp slt i64 9223372036854775807, %mul2141
  br i1 %cmp2142, label %cond.true.2144, label %cond.false.2156

cond.true.2144:                                   ; preds = %lor.lhs.false.2140, %land.lhs.true.2136, %cond.end.2125, %cond.end.2102, %cond.true.2071, %cond.end.2065, %cond.true.2037, %cond.end.2031, %land.lhs.true.2006
  %344 = load i64, i64* %byte8_count, align 8
  %mul2145 = mul i64 %344, 3
  %cmp2146 = icmp ule i64 %mul2145, 9223372036854775807
  br i1 %cmp2146, label %cond.true.2148, label %cond.false.2150

cond.true.2148:                                   ; preds = %cond.true.2144
  %345 = load i64, i64* %byte8_count, align 8
  %mul2149 = mul i64 %345, 3
  br label %cond.end.2154

cond.false.2150:                                  ; preds = %cond.true.2144
  %346 = load i64, i64* %byte8_count, align 8
  %mul2151 = mul i64 %346, 3
  %sub2152 = sub i64 %mul2151, -9223372036854775808
  %add2153 = add nsw i64 %sub2152, -9223372036854775808
  br label %cond.end.2154

cond.end.2154:                                    ; preds = %cond.false.2150, %cond.true.2148
  %cond2155 = phi i64 [ %mul2149, %cond.true.2148 ], [ %add2153, %cond.false.2150 ]
  store i64 %cond2155, i64* %thrice_byte8_count, align 8
  br i1 true, label %if.then.2168, label %if.end.2169

cond.false.2156:                                  ; preds = %lor.lhs.false.2140
  %347 = load i64, i64* %byte8_count, align 8
  %mul2157 = mul i64 %347, 3
  %cmp2158 = icmp ule i64 %mul2157, 9223372036854775807
  br i1 %cmp2158, label %cond.true.2160, label %cond.false.2162

cond.true.2160:                                   ; preds = %cond.false.2156
  %348 = load i64, i64* %byte8_count, align 8
  %mul2161 = mul i64 %348, 3
  br label %cond.end.2166

cond.false.2162:                                  ; preds = %cond.false.2156
  %349 = load i64, i64* %byte8_count, align 8
  %mul2163 = mul i64 %349, 3
  %sub2164 = sub i64 %mul2163, -9223372036854775808
  %add2165 = add nsw i64 %sub2164, -9223372036854775808
  br label %cond.end.2166

cond.end.2166:                                    ; preds = %cond.false.2162, %cond.true.2160
  %cond2167 = phi i64 [ %mul2161, %cond.true.2160 ], [ %add2165, %cond.false.2162 ]
  store i64 %cond2167, i64* %thrice_byte8_count, align 8
  br i1 false, label %if.then.2168, label %if.end.2169

if.then.2168:                                     ; preds = %cond.end.2166, %cond.end.2154, %cond.end.1973, %cond.end.1961, %cond.end.1779, %cond.end.1767, %cond.end.1586, %cond.end.1574, %cond.end.1390, %cond.end.1374, %cond.end.1189, %cond.end.1173, %cond.end.961, %cond.end.938, %cond.end.746, %cond.end.723, %cond.end.476, %cond.end.453, %cond.end.261, %cond.end.238
  call void @string_overflow() #7
  unreachable

if.end.2169:                                      ; preds = %cond.end.2166, %cond.end.2154, %cond.end.1973, %cond.end.1961, %cond.end.1779, %cond.end.1767, %cond.end.1586, %cond.end.1574, %cond.end.1390, %cond.end.1374, %cond.end.1189, %cond.end.1173, %cond.end.961, %cond.end.938, %cond.end.746, %cond.end.723, %cond.end.476, %cond.end.453, %cond.end.261, %cond.end.238
  %350 = load i8, i8* %multibyte, align 1
  %tobool2170 = trunc i8 %350 to i1
  br i1 %tobool2170, label %if.then.2171, label %if.else

if.then.2171:                                     ; preds = %if.end.2169
  br i1 false, label %cond.true.2172, label %cond.false.2639

cond.true.2172:                                   ; preds = %if.then.2171
  br i1 false, label %cond.true.2173, label %cond.false.2449

cond.true.2173:                                   ; preds = %cond.true.2172
  %351 = load i64, i64* %thrice_byte8_count, align 8
  %conv2174 = trunc i64 %351 to i8
  %conv2175 = sext i8 %conv2174 to i32
  %mul2176 = mul nsw i32 0, %conv2175
  %352 = load i64, i64* %nchars, align 8
  %conv2177 = trunc i64 %352 to i8
  %conv2178 = sext i8 %conv2177 to i32
  %add2179 = add nsw i32 %mul2176, %conv2178
  %mul2180 = mul nsw i32 0, %add2179
  %sub2181 = sub nsw i32 %mul2180, 1
  %cmp2182 = icmp slt i32 %sub2181, 0
  br i1 %cmp2182, label %cond.true.2184, label %cond.false.2210

cond.true.2184:                                   ; preds = %cond.true.2173
  %353 = load i64, i64* %thrice_byte8_count, align 8
  %conv2185 = trunc i64 %353 to i8
  %conv2186 = sext i8 %conv2185 to i32
  %mul2187 = mul nsw i32 0, %conv2186
  %354 = load i64, i64* %nchars, align 8
  %conv2188 = trunc i64 %354 to i8
  %conv2189 = sext i8 %conv2188 to i32
  %add2190 = add nsw i32 %mul2187, %conv2189
  %mul2191 = mul nsw i32 0, %add2190
  %add2192 = add nsw i32 %mul2191, 0
  %neg2193 = xor i32 %add2192, -1
  %cmp2194 = icmp eq i32 %neg2193, -1
  %conv2195 = zext i1 %cmp2194 to i32
  %sub2196 = sub nsw i32 0, %conv2195
  %355 = load i64, i64* %thrice_byte8_count, align 8
  %conv2197 = trunc i64 %355 to i8
  %conv2198 = sext i8 %conv2197 to i32
  %mul2199 = mul nsw i32 0, %conv2198
  %356 = load i64, i64* %nchars, align 8
  %conv2200 = trunc i64 %356 to i8
  %conv2201 = sext i8 %conv2200 to i32
  %add2202 = add nsw i32 %mul2199, %conv2201
  %mul2203 = mul nsw i32 0, %add2202
  %add2204 = add nsw i32 %mul2203, 1
  %shl2205 = shl i32 %add2204, 30
  %sub2206 = sub nsw i32 %shl2205, 1
  %mul2207 = mul nsw i32 %sub2206, 2
  %add2208 = add nsw i32 %mul2207, 1
  %sub2209 = sub nsw i32 %sub2196, %add2208
  br label %cond.end.2219

cond.false.2210:                                  ; preds = %cond.true.2173
  %357 = load i64, i64* %thrice_byte8_count, align 8
  %conv2211 = trunc i64 %357 to i8
  %conv2212 = sext i8 %conv2211 to i32
  %mul2213 = mul nsw i32 0, %conv2212
  %358 = load i64, i64* %nchars, align 8
  %conv2214 = trunc i64 %358 to i8
  %conv2215 = sext i8 %conv2214 to i32
  %add2216 = add nsw i32 %mul2213, %conv2215
  %mul2217 = mul nsw i32 0, %add2216
  %add2218 = add nsw i32 %mul2217, 0
  br label %cond.end.2219

cond.end.2219:                                    ; preds = %cond.false.2210, %cond.true.2184
  %cond2220 = phi i32 [ %sub2209, %cond.true.2184 ], [ %add2218, %cond.false.2210 ]
  %cmp2221 = icmp slt i32 %cond2220, 0
  br i1 %cmp2221, label %cond.true.2223, label %cond.false.2325

cond.true.2223:                                   ; preds = %cond.end.2219
  %359 = load i64, i64* %thrice_byte8_count, align 8
  %conv2224 = trunc i64 %359 to i8
  %conv2225 = sext i8 %conv2224 to i32
  %cmp2226 = icmp slt i32 %conv2225, 0
  br i1 %cmp2226, label %cond.true.2228, label %cond.false.2283

cond.true.2228:                                   ; preds = %cond.true.2223
  %360 = load i64, i64* %nchars, align 8
  %conv2229 = trunc i64 %360 to i8
  %conv2230 = sext i8 %conv2229 to i32
  %361 = load i64, i64* %thrice_byte8_count, align 8
  %conv2231 = trunc i64 %361 to i8
  %conv2232 = sext i8 %conv2231 to i32
  %mul2233 = mul nsw i32 0, %conv2232
  %362 = load i64, i64* %nchars, align 8
  %conv2234 = trunc i64 %362 to i8
  %conv2235 = sext i8 %conv2234 to i32
  %add2236 = add nsw i32 %mul2233, %conv2235
  %mul2237 = mul nsw i32 0, %add2236
  %sub2238 = sub nsw i32 %mul2237, 1
  %cmp2239 = icmp slt i32 %sub2238, 0
  br i1 %cmp2239, label %cond.true.2241, label %cond.false.2267

cond.true.2241:                                   ; preds = %cond.true.2228
  %363 = load i64, i64* %thrice_byte8_count, align 8
  %conv2242 = trunc i64 %363 to i8
  %conv2243 = sext i8 %conv2242 to i32
  %mul2244 = mul nsw i32 0, %conv2243
  %364 = load i64, i64* %nchars, align 8
  %conv2245 = trunc i64 %364 to i8
  %conv2246 = sext i8 %conv2245 to i32
  %add2247 = add nsw i32 %mul2244, %conv2246
  %mul2248 = mul nsw i32 0, %add2247
  %add2249 = add nsw i32 %mul2248, 0
  %neg2250 = xor i32 %add2249, -1
  %cmp2251 = icmp eq i32 %neg2250, -1
  %conv2252 = zext i1 %cmp2251 to i32
  %sub2253 = sub nsw i32 0, %conv2252
  %365 = load i64, i64* %thrice_byte8_count, align 8
  %conv2254 = trunc i64 %365 to i8
  %conv2255 = sext i8 %conv2254 to i32
  %mul2256 = mul nsw i32 0, %conv2255
  %366 = load i64, i64* %nchars, align 8
  %conv2257 = trunc i64 %366 to i8
  %conv2258 = sext i8 %conv2257 to i32
  %add2259 = add nsw i32 %mul2256, %conv2258
  %mul2260 = mul nsw i32 0, %add2259
  %add2261 = add nsw i32 %mul2260, 1
  %shl2262 = shl i32 %add2261, 30
  %sub2263 = sub nsw i32 %shl2262, 1
  %mul2264 = mul nsw i32 %sub2263, 2
  %add2265 = add nsw i32 %mul2264, 1
  %sub2266 = sub nsw i32 %sub2253, %add2265
  br label %cond.end.2276

cond.false.2267:                                  ; preds = %cond.true.2228
  %367 = load i64, i64* %thrice_byte8_count, align 8
  %conv2268 = trunc i64 %367 to i8
  %conv2269 = sext i8 %conv2268 to i32
  %mul2270 = mul nsw i32 0, %conv2269
  %368 = load i64, i64* %nchars, align 8
  %conv2271 = trunc i64 %368 to i8
  %conv2272 = sext i8 %conv2271 to i32
  %add2273 = add nsw i32 %mul2270, %conv2272
  %mul2274 = mul nsw i32 0, %add2273
  %add2275 = add nsw i32 %mul2274, 0
  br label %cond.end.2276

cond.end.2276:                                    ; preds = %cond.false.2267, %cond.true.2241
  %cond2277 = phi i32 [ %sub2266, %cond.true.2241 ], [ %add2275, %cond.false.2267 ]
  %369 = load i64, i64* %thrice_byte8_count, align 8
  %conv2278 = trunc i64 %369 to i8
  %conv2279 = sext i8 %conv2278 to i32
  %sub2280 = sub nsw i32 %cond2277, %conv2279
  %cmp2281 = icmp slt i32 %conv2230, %sub2280
  br i1 %cmp2281, label %cond.true.2391, label %lor.lhs.false.2365

cond.false.2283:                                  ; preds = %cond.true.2223
  %370 = load i64, i64* %thrice_byte8_count, align 8
  %conv2284 = trunc i64 %370 to i8
  %conv2285 = sext i8 %conv2284 to i32
  %mul2286 = mul nsw i32 0, %conv2285
  %371 = load i64, i64* %nchars, align 8
  %conv2287 = trunc i64 %371 to i8
  %conv2288 = sext i8 %conv2287 to i32
  %add2289 = add nsw i32 %mul2286, %conv2288
  %mul2290 = mul nsw i32 0, %add2289
  %sub2291 = sub nsw i32 %mul2290, 1
  %cmp2292 = icmp slt i32 %sub2291, 0
  br i1 %cmp2292, label %cond.true.2294, label %cond.false.2307

cond.true.2294:                                   ; preds = %cond.false.2283
  %372 = load i64, i64* %thrice_byte8_count, align 8
  %conv2295 = trunc i64 %372 to i8
  %conv2296 = sext i8 %conv2295 to i32
  %mul2297 = mul nsw i32 0, %conv2296
  %373 = load i64, i64* %nchars, align 8
  %conv2298 = trunc i64 %373 to i8
  %conv2299 = sext i8 %conv2298 to i32
  %add2300 = add nsw i32 %mul2297, %conv2299
  %mul2301 = mul nsw i32 0, %add2300
  %add2302 = add nsw i32 %mul2301, 1
  %shl2303 = shl i32 %add2302, 30
  %sub2304 = sub nsw i32 %shl2303, 1
  %mul2305 = mul nsw i32 %sub2304, 2
  %add2306 = add nsw i32 %mul2305, 1
  br label %cond.end.2316

cond.false.2307:                                  ; preds = %cond.false.2283
  %374 = load i64, i64* %thrice_byte8_count, align 8
  %conv2308 = trunc i64 %374 to i8
  %conv2309 = sext i8 %conv2308 to i32
  %mul2310 = mul nsw i32 0, %conv2309
  %375 = load i64, i64* %nchars, align 8
  %conv2311 = trunc i64 %375 to i8
  %conv2312 = sext i8 %conv2311 to i32
  %add2313 = add nsw i32 %mul2310, %conv2312
  %mul2314 = mul nsw i32 0, %add2313
  %sub2315 = sub nsw i32 %mul2314, 1
  br label %cond.end.2316

cond.end.2316:                                    ; preds = %cond.false.2307, %cond.true.2294
  %cond2317 = phi i32 [ %add2306, %cond.true.2294 ], [ %sub2315, %cond.false.2307 ]
  %376 = load i64, i64* %thrice_byte8_count, align 8
  %conv2318 = trunc i64 %376 to i8
  %conv2319 = sext i8 %conv2318 to i32
  %sub2320 = sub nsw i32 %cond2317, %conv2319
  %377 = load i64, i64* %nchars, align 8
  %conv2321 = trunc i64 %377 to i8
  %conv2322 = sext i8 %conv2321 to i32
  %cmp2323 = icmp slt i32 %sub2320, %conv2322
  br i1 %cmp2323, label %cond.true.2391, label %lor.lhs.false.2365

cond.false.2325:                                  ; preds = %cond.end.2219
  %378 = load i64, i64* %nchars, align 8
  %conv2326 = trunc i64 %378 to i8
  %conv2327 = sext i8 %conv2326 to i32
  %cmp2328 = icmp slt i32 %conv2327, 0
  br i1 %cmp2328, label %cond.true.2330, label %cond.false.2340

cond.true.2330:                                   ; preds = %cond.false.2325
  %379 = load i64, i64* %thrice_byte8_count, align 8
  %conv2331 = trunc i64 %379 to i8
  %conv2332 = sext i8 %conv2331 to i32
  %380 = load i64, i64* %nchars, align 8
  %conv2333 = trunc i64 %380 to i8
  %conv2334 = sext i8 %conv2333 to i32
  %381 = load i64, i64* %thrice_byte8_count, align 8
  %conv2335 = trunc i64 %381 to i8
  %conv2336 = sext i8 %conv2335 to i32
  %add2337 = add nsw i32 %conv2334, %conv2336
  %cmp2338 = icmp sle i32 %conv2332, %add2337
  br i1 %cmp2338, label %cond.true.2391, label %lor.lhs.false.2365

cond.false.2340:                                  ; preds = %cond.false.2325
  %382 = load i64, i64* %thrice_byte8_count, align 8
  %conv2341 = trunc i64 %382 to i8
  %conv2342 = sext i8 %conv2341 to i32
  %cmp2343 = icmp slt i32 %conv2342, 0
  br i1 %cmp2343, label %cond.true.2345, label %cond.false.2355

cond.true.2345:                                   ; preds = %cond.false.2340
  %383 = load i64, i64* %nchars, align 8
  %conv2346 = trunc i64 %383 to i8
  %conv2347 = sext i8 %conv2346 to i32
  %384 = load i64, i64* %nchars, align 8
  %conv2348 = trunc i64 %384 to i8
  %conv2349 = sext i8 %conv2348 to i32
  %385 = load i64, i64* %thrice_byte8_count, align 8
  %conv2350 = trunc i64 %385 to i8
  %conv2351 = sext i8 %conv2350 to i32
  %add2352 = add nsw i32 %conv2349, %conv2351
  %cmp2353 = icmp sle i32 %conv2347, %add2352
  br i1 %cmp2353, label %cond.true.2391, label %lor.lhs.false.2365

cond.false.2355:                                  ; preds = %cond.false.2340
  %386 = load i64, i64* %nchars, align 8
  %conv2356 = trunc i64 %386 to i8
  %conv2357 = sext i8 %conv2356 to i32
  %387 = load i64, i64* %thrice_byte8_count, align 8
  %conv2358 = trunc i64 %387 to i8
  %conv2359 = sext i8 %conv2358 to i32
  %add2360 = add nsw i32 %conv2357, %conv2359
  %388 = load i64, i64* %thrice_byte8_count, align 8
  %conv2361 = trunc i64 %388 to i8
  %conv2362 = sext i8 %conv2361 to i32
  %cmp2363 = icmp slt i32 %add2360, %conv2362
  br i1 %cmp2363, label %cond.true.2391, label %lor.lhs.false.2365

lor.lhs.false.2365:                               ; preds = %cond.false.2355, %cond.true.2345, %cond.true.2330, %cond.end.2316, %cond.end.2276
  %389 = load i64, i64* %nchars, align 8
  %conv2366 = trunc i64 %389 to i8
  %conv2367 = sext i8 %conv2366 to i32
  %390 = load i64, i64* %thrice_byte8_count, align 8
  %conv2368 = trunc i64 %390 to i8
  %conv2369 = sext i8 %conv2368 to i32
  %add2370 = add nsw i32 %conv2367, %conv2369
  %mul2371 = mul nsw i32 0, %add2370
  %sub2372 = sub nsw i32 %mul2371, 1
  %cmp2373 = icmp slt i32 %sub2372, 0
  br i1 %cmp2373, label %land.lhs.true.2375, label %lor.lhs.false.2383

land.lhs.true.2375:                               ; preds = %lor.lhs.false.2365
  %391 = load i64, i64* %nchars, align 8
  %conv2376 = trunc i64 %391 to i8
  %conv2377 = sext i8 %conv2376 to i32
  %392 = load i64, i64* %thrice_byte8_count, align 8
  %conv2378 = trunc i64 %392 to i8
  %conv2379 = sext i8 %conv2378 to i32
  %add2380 = add nsw i32 %conv2377, %conv2379
  %cmp2381 = icmp slt i32 %add2380, -128
  br i1 %cmp2381, label %cond.true.2391, label %lor.lhs.false.2383

lor.lhs.false.2383:                               ; preds = %land.lhs.true.2375, %lor.lhs.false.2365
  %393 = load i64, i64* %nchars, align 8
  %conv2384 = trunc i64 %393 to i8
  %conv2385 = sext i8 %conv2384 to i32
  %394 = load i64, i64* %thrice_byte8_count, align 8
  %conv2386 = trunc i64 %394 to i8
  %conv2387 = sext i8 %conv2386 to i32
  %add2388 = add nsw i32 %conv2385, %conv2387
  %cmp2389 = icmp slt i32 127, %add2388
  br i1 %cmp2389, label %cond.true.2391, label %cond.false.2420

cond.true.2391:                                   ; preds = %lor.lhs.false.2383, %land.lhs.true.2375, %cond.false.2355, %cond.true.2345, %cond.true.2330, %cond.end.2316, %cond.end.2276
  %395 = load i64, i64* %nchars, align 8
  %conv2392 = trunc i64 %395 to i8
  %conv2393 = zext i8 %conv2392 to i32
  %396 = load i64, i64* %thrice_byte8_count, align 8
  %conv2394 = trunc i64 %396 to i8
  %conv2395 = zext i8 %conv2394 to i32
  %add2396 = add nsw i32 %conv2393, %conv2395
  %cmp2397 = icmp sle i32 %add2396, 127
  br i1 %cmp2397, label %cond.true.2399, label %cond.false.2407

cond.true.2399:                                   ; preds = %cond.true.2391
  %397 = load i64, i64* %nchars, align 8
  %conv2400 = trunc i64 %397 to i8
  %conv2401 = zext i8 %conv2400 to i32
  %398 = load i64, i64* %thrice_byte8_count, align 8
  %conv2402 = trunc i64 %398 to i8
  %conv2403 = zext i8 %conv2402 to i32
  %add2404 = add nsw i32 %conv2401, %conv2403
  %conv2405 = trunc i32 %add2404 to i8
  %conv2406 = sext i8 %conv2405 to i32
  br label %cond.end.2417

cond.false.2407:                                  ; preds = %cond.true.2391
  %399 = load i64, i64* %nchars, align 8
  %conv2408 = trunc i64 %399 to i8
  %conv2409 = zext i8 %conv2408 to i32
  %400 = load i64, i64* %thrice_byte8_count, align 8
  %conv2410 = trunc i64 %400 to i8
  %conv2411 = zext i8 %conv2410 to i32
  %add2412 = add nsw i32 %conv2409, %conv2411
  %sub2413 = sub nsw i32 %add2412, -128
  %conv2414 = trunc i32 %sub2413 to i8
  %conv2415 = sext i8 %conv2414 to i32
  %add2416 = add nsw i32 %conv2415, -128
  br label %cond.end.2417

cond.end.2417:                                    ; preds = %cond.false.2407, %cond.true.2399
  %cond2418 = phi i32 [ %conv2406, %cond.true.2399 ], [ %add2416, %cond.false.2407 ]
  %conv2419 = sext i32 %cond2418 to i64
  store i64 %conv2419, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.2420:                                  ; preds = %lor.lhs.false.2383
  %401 = load i64, i64* %nchars, align 8
  %conv2421 = trunc i64 %401 to i8
  %conv2422 = zext i8 %conv2421 to i32
  %402 = load i64, i64* %thrice_byte8_count, align 8
  %conv2423 = trunc i64 %402 to i8
  %conv2424 = zext i8 %conv2423 to i32
  %add2425 = add nsw i32 %conv2422, %conv2424
  %cmp2426 = icmp sle i32 %add2425, 127
  br i1 %cmp2426, label %cond.true.2428, label %cond.false.2436

cond.true.2428:                                   ; preds = %cond.false.2420
  %403 = load i64, i64* %nchars, align 8
  %conv2429 = trunc i64 %403 to i8
  %conv2430 = zext i8 %conv2429 to i32
  %404 = load i64, i64* %thrice_byte8_count, align 8
  %conv2431 = trunc i64 %404 to i8
  %conv2432 = zext i8 %conv2431 to i32
  %add2433 = add nsw i32 %conv2430, %conv2432
  %conv2434 = trunc i32 %add2433 to i8
  %conv2435 = sext i8 %conv2434 to i32
  br label %cond.end.2446

cond.false.2436:                                  ; preds = %cond.false.2420
  %405 = load i64, i64* %nchars, align 8
  %conv2437 = trunc i64 %405 to i8
  %conv2438 = zext i8 %conv2437 to i32
  %406 = load i64, i64* %thrice_byte8_count, align 8
  %conv2439 = trunc i64 %406 to i8
  %conv2440 = zext i8 %conv2439 to i32
  %add2441 = add nsw i32 %conv2438, %conv2440
  %sub2442 = sub nsw i32 %add2441, -128
  %conv2443 = trunc i32 %sub2442 to i8
  %conv2444 = sext i8 %conv2443 to i32
  %add2445 = add nsw i32 %conv2444, -128
  br label %cond.end.2446

cond.end.2446:                                    ; preds = %cond.false.2436, %cond.true.2428
  %cond2447 = phi i32 [ %conv2435, %cond.true.2428 ], [ %add2445, %cond.false.2436 ]
  %conv2448 = sext i32 %cond2447 to i64
  store i64 %conv2448, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.2449:                                  ; preds = %cond.true.2172
  %407 = load i64, i64* %thrice_byte8_count, align 8
  %mul2450 = mul nsw i64 0, %407
  %408 = load i64, i64* %nchars, align 8
  %add2451 = add nsw i64 %mul2450, %408
  %mul2452 = mul nsw i64 0, %add2451
  %sub2453 = sub nsw i64 %mul2452, 1
  %cmp2454 = icmp slt i64 %sub2453, 0
  br i1 %cmp2454, label %cond.true.2456, label %cond.false.2475

cond.true.2456:                                   ; preds = %cond.false.2449
  %409 = load i64, i64* %thrice_byte8_count, align 8
  %mul2457 = mul nsw i64 0, %409
  %410 = load i64, i64* %nchars, align 8
  %add2458 = add nsw i64 %mul2457, %410
  %mul2459 = mul nsw i64 0, %add2458
  %add2460 = add nsw i64 %mul2459, 0
  %neg2461 = xor i64 %add2460, -1
  %cmp2462 = icmp eq i64 %neg2461, -1
  %conv2463 = zext i1 %cmp2462 to i32
  %sub2464 = sub nsw i32 0, %conv2463
  %conv2465 = sext i32 %sub2464 to i64
  %411 = load i64, i64* %thrice_byte8_count, align 8
  %mul2466 = mul nsw i64 0, %411
  %412 = load i64, i64* %nchars, align 8
  %add2467 = add nsw i64 %mul2466, %412
  %mul2468 = mul nsw i64 0, %add2467
  %add2469 = add nsw i64 %mul2468, 1
  %shl2470 = shl i64 %add2469, 62
  %sub2471 = sub nsw i64 %shl2470, 1
  %mul2472 = mul nsw i64 %sub2471, 2
  %add2473 = add nsw i64 %mul2472, 1
  %sub2474 = sub nsw i64 %conv2465, %add2473
  br label %cond.end.2480

cond.false.2475:                                  ; preds = %cond.false.2449
  %413 = load i64, i64* %thrice_byte8_count, align 8
  %mul2476 = mul nsw i64 0, %413
  %414 = load i64, i64* %nchars, align 8
  %add2477 = add nsw i64 %mul2476, %414
  %mul2478 = mul nsw i64 0, %add2477
  %add2479 = add nsw i64 %mul2478, 0
  br label %cond.end.2480

cond.end.2480:                                    ; preds = %cond.false.2475, %cond.true.2456
  %cond2481 = phi i64 [ %sub2474, %cond.true.2456 ], [ %add2479, %cond.false.2475 ]
  %cmp2482 = icmp slt i64 %cond2481, 0
  br i1 %cmp2482, label %cond.true.2484, label %cond.false.2549

cond.true.2484:                                   ; preds = %cond.end.2480
  %415 = load i64, i64* %thrice_byte8_count, align 8
  %cmp2485 = icmp slt i64 %415, 0
  br i1 %cmp2485, label %cond.true.2487, label %cond.false.2523

cond.true.2487:                                   ; preds = %cond.true.2484
  %416 = load i64, i64* %nchars, align 8
  %417 = load i64, i64* %thrice_byte8_count, align 8
  %mul2488 = mul nsw i64 0, %417
  %418 = load i64, i64* %nchars, align 8
  %add2489 = add nsw i64 %mul2488, %418
  %mul2490 = mul nsw i64 0, %add2489
  %sub2491 = sub nsw i64 %mul2490, 1
  %cmp2492 = icmp slt i64 %sub2491, 0
  br i1 %cmp2492, label %cond.true.2494, label %cond.false.2513

cond.true.2494:                                   ; preds = %cond.true.2487
  %419 = load i64, i64* %thrice_byte8_count, align 8
  %mul2495 = mul nsw i64 0, %419
  %420 = load i64, i64* %nchars, align 8
  %add2496 = add nsw i64 %mul2495, %420
  %mul2497 = mul nsw i64 0, %add2496
  %add2498 = add nsw i64 %mul2497, 0
  %neg2499 = xor i64 %add2498, -1
  %cmp2500 = icmp eq i64 %neg2499, -1
  %conv2501 = zext i1 %cmp2500 to i32
  %sub2502 = sub nsw i32 0, %conv2501
  %conv2503 = sext i32 %sub2502 to i64
  %421 = load i64, i64* %thrice_byte8_count, align 8
  %mul2504 = mul nsw i64 0, %421
  %422 = load i64, i64* %nchars, align 8
  %add2505 = add nsw i64 %mul2504, %422
  %mul2506 = mul nsw i64 0, %add2505
  %add2507 = add nsw i64 %mul2506, 1
  %shl2508 = shl i64 %add2507, 62
  %sub2509 = sub nsw i64 %shl2508, 1
  %mul2510 = mul nsw i64 %sub2509, 2
  %add2511 = add nsw i64 %mul2510, 1
  %sub2512 = sub nsw i64 %conv2503, %add2511
  br label %cond.end.2518

cond.false.2513:                                  ; preds = %cond.true.2487
  %423 = load i64, i64* %thrice_byte8_count, align 8
  %mul2514 = mul nsw i64 0, %423
  %424 = load i64, i64* %nchars, align 8
  %add2515 = add nsw i64 %mul2514, %424
  %mul2516 = mul nsw i64 0, %add2515
  %add2517 = add nsw i64 %mul2516, 0
  br label %cond.end.2518

cond.end.2518:                                    ; preds = %cond.false.2513, %cond.true.2494
  %cond2519 = phi i64 [ %sub2512, %cond.true.2494 ], [ %add2517, %cond.false.2513 ]
  %425 = load i64, i64* %thrice_byte8_count, align 8
  %sub2520 = sub nsw i64 %cond2519, %425
  %cmp2521 = icmp slt i64 %416, %sub2520
  br i1 %cmp2521, label %cond.true.2581, label %lor.lhs.false.2567

cond.false.2523:                                  ; preds = %cond.true.2484
  %426 = load i64, i64* %thrice_byte8_count, align 8
  %mul2524 = mul nsw i64 0, %426
  %427 = load i64, i64* %nchars, align 8
  %add2525 = add nsw i64 %mul2524, %427
  %mul2526 = mul nsw i64 0, %add2525
  %sub2527 = sub nsw i64 %mul2526, 1
  %cmp2528 = icmp slt i64 %sub2527, 0
  br i1 %cmp2528, label %cond.true.2530, label %cond.false.2539

cond.true.2530:                                   ; preds = %cond.false.2523
  %428 = load i64, i64* %thrice_byte8_count, align 8
  %mul2531 = mul nsw i64 0, %428
  %429 = load i64, i64* %nchars, align 8
  %add2532 = add nsw i64 %mul2531, %429
  %mul2533 = mul nsw i64 0, %add2532
  %add2534 = add nsw i64 %mul2533, 1
  %shl2535 = shl i64 %add2534, 62
  %sub2536 = sub nsw i64 %shl2535, 1
  %mul2537 = mul nsw i64 %sub2536, 2
  %add2538 = add nsw i64 %mul2537, 1
  br label %cond.end.2544

cond.false.2539:                                  ; preds = %cond.false.2523
  %430 = load i64, i64* %thrice_byte8_count, align 8
  %mul2540 = mul nsw i64 0, %430
  %431 = load i64, i64* %nchars, align 8
  %add2541 = add nsw i64 %mul2540, %431
  %mul2542 = mul nsw i64 0, %add2541
  %sub2543 = sub nsw i64 %mul2542, 1
  br label %cond.end.2544

cond.end.2544:                                    ; preds = %cond.false.2539, %cond.true.2530
  %cond2545 = phi i64 [ %add2538, %cond.true.2530 ], [ %sub2543, %cond.false.2539 ]
  %432 = load i64, i64* %thrice_byte8_count, align 8
  %sub2546 = sub nsw i64 %cond2545, %432
  %433 = load i64, i64* %nchars, align 8
  %cmp2547 = icmp slt i64 %sub2546, %433
  br i1 %cmp2547, label %cond.true.2581, label %lor.lhs.false.2567

cond.false.2549:                                  ; preds = %cond.end.2480
  %434 = load i64, i64* %nchars, align 8
  %cmp2550 = icmp slt i64 %434, 0
  br i1 %cmp2550, label %cond.true.2552, label %cond.false.2556

cond.true.2552:                                   ; preds = %cond.false.2549
  %435 = load i64, i64* %thrice_byte8_count, align 8
  %436 = load i64, i64* %nchars, align 8
  %437 = load i64, i64* %thrice_byte8_count, align 8
  %add2553 = add nsw i64 %436, %437
  %cmp2554 = icmp sle i64 %435, %add2553
  br i1 %cmp2554, label %cond.true.2581, label %lor.lhs.false.2567

cond.false.2556:                                  ; preds = %cond.false.2549
  %438 = load i64, i64* %thrice_byte8_count, align 8
  %cmp2557 = icmp slt i64 %438, 0
  br i1 %cmp2557, label %cond.true.2559, label %cond.false.2563

cond.true.2559:                                   ; preds = %cond.false.2556
  %439 = load i64, i64* %nchars, align 8
  %440 = load i64, i64* %nchars, align 8
  %441 = load i64, i64* %thrice_byte8_count, align 8
  %add2560 = add nsw i64 %440, %441
  %cmp2561 = icmp sle i64 %439, %add2560
  br i1 %cmp2561, label %cond.true.2581, label %lor.lhs.false.2567

cond.false.2563:                                  ; preds = %cond.false.2556
  %442 = load i64, i64* %nchars, align 8
  %443 = load i64, i64* %thrice_byte8_count, align 8
  %add2564 = add nsw i64 %442, %443
  %444 = load i64, i64* %thrice_byte8_count, align 8
  %cmp2565 = icmp slt i64 %add2564, %444
  br i1 %cmp2565, label %cond.true.2581, label %lor.lhs.false.2567

lor.lhs.false.2567:                               ; preds = %cond.false.2563, %cond.true.2559, %cond.true.2552, %cond.end.2544, %cond.end.2518
  %445 = load i64, i64* %nchars, align 8
  %446 = load i64, i64* %thrice_byte8_count, align 8
  %add2568 = add nsw i64 %445, %446
  %mul2569 = mul nsw i64 0, %add2568
  %sub2570 = sub nsw i64 %mul2569, 1
  %cmp2571 = icmp slt i64 %sub2570, 0
  br i1 %cmp2571, label %land.lhs.true.2573, label %lor.lhs.false.2577

land.lhs.true.2573:                               ; preds = %lor.lhs.false.2567
  %447 = load i64, i64* %nchars, align 8
  %448 = load i64, i64* %thrice_byte8_count, align 8
  %add2574 = add nsw i64 %447, %448
  %cmp2575 = icmp slt i64 %add2574, -128
  br i1 %cmp2575, label %cond.true.2581, label %lor.lhs.false.2577

lor.lhs.false.2577:                               ; preds = %land.lhs.true.2573, %lor.lhs.false.2567
  %449 = load i64, i64* %nchars, align 8
  %450 = load i64, i64* %thrice_byte8_count, align 8
  %add2578 = add nsw i64 %449, %450
  %cmp2579 = icmp slt i64 127, %add2578
  br i1 %cmp2579, label %cond.true.2581, label %cond.false.2610

cond.true.2581:                                   ; preds = %lor.lhs.false.2577, %land.lhs.true.2573, %cond.false.2563, %cond.true.2559, %cond.true.2552, %cond.end.2544, %cond.end.2518
  %451 = load i64, i64* %nchars, align 8
  %conv2582 = trunc i64 %451 to i8
  %conv2583 = zext i8 %conv2582 to i32
  %452 = load i64, i64* %thrice_byte8_count, align 8
  %conv2584 = trunc i64 %452 to i8
  %conv2585 = zext i8 %conv2584 to i32
  %add2586 = add nsw i32 %conv2583, %conv2585
  %cmp2587 = icmp sle i32 %add2586, 127
  br i1 %cmp2587, label %cond.true.2589, label %cond.false.2597

cond.true.2589:                                   ; preds = %cond.true.2581
  %453 = load i64, i64* %nchars, align 8
  %conv2590 = trunc i64 %453 to i8
  %conv2591 = zext i8 %conv2590 to i32
  %454 = load i64, i64* %thrice_byte8_count, align 8
  %conv2592 = trunc i64 %454 to i8
  %conv2593 = zext i8 %conv2592 to i32
  %add2594 = add nsw i32 %conv2591, %conv2593
  %conv2595 = trunc i32 %add2594 to i8
  %conv2596 = sext i8 %conv2595 to i32
  br label %cond.end.2607

cond.false.2597:                                  ; preds = %cond.true.2581
  %455 = load i64, i64* %nchars, align 8
  %conv2598 = trunc i64 %455 to i8
  %conv2599 = zext i8 %conv2598 to i32
  %456 = load i64, i64* %thrice_byte8_count, align 8
  %conv2600 = trunc i64 %456 to i8
  %conv2601 = zext i8 %conv2600 to i32
  %add2602 = add nsw i32 %conv2599, %conv2601
  %sub2603 = sub nsw i32 %add2602, -128
  %conv2604 = trunc i32 %sub2603 to i8
  %conv2605 = sext i8 %conv2604 to i32
  %add2606 = add nsw i32 %conv2605, -128
  br label %cond.end.2607

cond.end.2607:                                    ; preds = %cond.false.2597, %cond.true.2589
  %cond2608 = phi i32 [ %conv2596, %cond.true.2589 ], [ %add2606, %cond.false.2597 ]
  %conv2609 = sext i32 %cond2608 to i64
  store i64 %conv2609, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.2610:                                  ; preds = %lor.lhs.false.2577
  %457 = load i64, i64* %nchars, align 8
  %conv2611 = trunc i64 %457 to i8
  %conv2612 = zext i8 %conv2611 to i32
  %458 = load i64, i64* %thrice_byte8_count, align 8
  %conv2613 = trunc i64 %458 to i8
  %conv2614 = zext i8 %conv2613 to i32
  %add2615 = add nsw i32 %conv2612, %conv2614
  %cmp2616 = icmp sle i32 %add2615, 127
  br i1 %cmp2616, label %cond.true.2618, label %cond.false.2626

cond.true.2618:                                   ; preds = %cond.false.2610
  %459 = load i64, i64* %nchars, align 8
  %conv2619 = trunc i64 %459 to i8
  %conv2620 = zext i8 %conv2619 to i32
  %460 = load i64, i64* %thrice_byte8_count, align 8
  %conv2621 = trunc i64 %460 to i8
  %conv2622 = zext i8 %conv2621 to i32
  %add2623 = add nsw i32 %conv2620, %conv2622
  %conv2624 = trunc i32 %add2623 to i8
  %conv2625 = sext i8 %conv2624 to i32
  br label %cond.end.2636

cond.false.2626:                                  ; preds = %cond.false.2610
  %461 = load i64, i64* %nchars, align 8
  %conv2627 = trunc i64 %461 to i8
  %conv2628 = zext i8 %conv2627 to i32
  %462 = load i64, i64* %thrice_byte8_count, align 8
  %conv2629 = trunc i64 %462 to i8
  %conv2630 = zext i8 %conv2629 to i32
  %add2631 = add nsw i32 %conv2628, %conv2630
  %sub2632 = sub nsw i32 %add2631, -128
  %conv2633 = trunc i32 %sub2632 to i8
  %conv2634 = sext i8 %conv2633 to i32
  %add2635 = add nsw i32 %conv2634, -128
  br label %cond.end.2636

cond.end.2636:                                    ; preds = %cond.false.2626, %cond.true.2618
  %cond2637 = phi i32 [ %conv2625, %cond.true.2618 ], [ %add2635, %cond.false.2626 ]
  %conv2638 = sext i32 %cond2637 to i64
  store i64 %conv2638, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.2639:                                  ; preds = %if.then.2171
  br i1 false, label %cond.true.2640, label %cond.false.3107

cond.true.2640:                                   ; preds = %cond.false.2639
  br i1 false, label %cond.true.2641, label %cond.false.2917

cond.true.2641:                                   ; preds = %cond.true.2640
  %463 = load i64, i64* %thrice_byte8_count, align 8
  %conv2642 = trunc i64 %463 to i16
  %conv2643 = sext i16 %conv2642 to i32
  %mul2644 = mul nsw i32 0, %conv2643
  %464 = load i64, i64* %nchars, align 8
  %conv2645 = trunc i64 %464 to i16
  %conv2646 = sext i16 %conv2645 to i32
  %add2647 = add nsw i32 %mul2644, %conv2646
  %mul2648 = mul nsw i32 0, %add2647
  %sub2649 = sub nsw i32 %mul2648, 1
  %cmp2650 = icmp slt i32 %sub2649, 0
  br i1 %cmp2650, label %cond.true.2652, label %cond.false.2678

cond.true.2652:                                   ; preds = %cond.true.2641
  %465 = load i64, i64* %thrice_byte8_count, align 8
  %conv2653 = trunc i64 %465 to i16
  %conv2654 = sext i16 %conv2653 to i32
  %mul2655 = mul nsw i32 0, %conv2654
  %466 = load i64, i64* %nchars, align 8
  %conv2656 = trunc i64 %466 to i16
  %conv2657 = sext i16 %conv2656 to i32
  %add2658 = add nsw i32 %mul2655, %conv2657
  %mul2659 = mul nsw i32 0, %add2658
  %add2660 = add nsw i32 %mul2659, 0
  %neg2661 = xor i32 %add2660, -1
  %cmp2662 = icmp eq i32 %neg2661, -1
  %conv2663 = zext i1 %cmp2662 to i32
  %sub2664 = sub nsw i32 0, %conv2663
  %467 = load i64, i64* %thrice_byte8_count, align 8
  %conv2665 = trunc i64 %467 to i16
  %conv2666 = sext i16 %conv2665 to i32
  %mul2667 = mul nsw i32 0, %conv2666
  %468 = load i64, i64* %nchars, align 8
  %conv2668 = trunc i64 %468 to i16
  %conv2669 = sext i16 %conv2668 to i32
  %add2670 = add nsw i32 %mul2667, %conv2669
  %mul2671 = mul nsw i32 0, %add2670
  %add2672 = add nsw i32 %mul2671, 1
  %shl2673 = shl i32 %add2672, 30
  %sub2674 = sub nsw i32 %shl2673, 1
  %mul2675 = mul nsw i32 %sub2674, 2
  %add2676 = add nsw i32 %mul2675, 1
  %sub2677 = sub nsw i32 %sub2664, %add2676
  br label %cond.end.2687

cond.false.2678:                                  ; preds = %cond.true.2641
  %469 = load i64, i64* %thrice_byte8_count, align 8
  %conv2679 = trunc i64 %469 to i16
  %conv2680 = sext i16 %conv2679 to i32
  %mul2681 = mul nsw i32 0, %conv2680
  %470 = load i64, i64* %nchars, align 8
  %conv2682 = trunc i64 %470 to i16
  %conv2683 = sext i16 %conv2682 to i32
  %add2684 = add nsw i32 %mul2681, %conv2683
  %mul2685 = mul nsw i32 0, %add2684
  %add2686 = add nsw i32 %mul2685, 0
  br label %cond.end.2687

cond.end.2687:                                    ; preds = %cond.false.2678, %cond.true.2652
  %cond2688 = phi i32 [ %sub2677, %cond.true.2652 ], [ %add2686, %cond.false.2678 ]
  %cmp2689 = icmp slt i32 %cond2688, 0
  br i1 %cmp2689, label %cond.true.2691, label %cond.false.2793

cond.true.2691:                                   ; preds = %cond.end.2687
  %471 = load i64, i64* %thrice_byte8_count, align 8
  %conv2692 = trunc i64 %471 to i16
  %conv2693 = sext i16 %conv2692 to i32
  %cmp2694 = icmp slt i32 %conv2693, 0
  br i1 %cmp2694, label %cond.true.2696, label %cond.false.2751

cond.true.2696:                                   ; preds = %cond.true.2691
  %472 = load i64, i64* %nchars, align 8
  %conv2697 = trunc i64 %472 to i16
  %conv2698 = sext i16 %conv2697 to i32
  %473 = load i64, i64* %thrice_byte8_count, align 8
  %conv2699 = trunc i64 %473 to i16
  %conv2700 = sext i16 %conv2699 to i32
  %mul2701 = mul nsw i32 0, %conv2700
  %474 = load i64, i64* %nchars, align 8
  %conv2702 = trunc i64 %474 to i16
  %conv2703 = sext i16 %conv2702 to i32
  %add2704 = add nsw i32 %mul2701, %conv2703
  %mul2705 = mul nsw i32 0, %add2704
  %sub2706 = sub nsw i32 %mul2705, 1
  %cmp2707 = icmp slt i32 %sub2706, 0
  br i1 %cmp2707, label %cond.true.2709, label %cond.false.2735

cond.true.2709:                                   ; preds = %cond.true.2696
  %475 = load i64, i64* %thrice_byte8_count, align 8
  %conv2710 = trunc i64 %475 to i16
  %conv2711 = sext i16 %conv2710 to i32
  %mul2712 = mul nsw i32 0, %conv2711
  %476 = load i64, i64* %nchars, align 8
  %conv2713 = trunc i64 %476 to i16
  %conv2714 = sext i16 %conv2713 to i32
  %add2715 = add nsw i32 %mul2712, %conv2714
  %mul2716 = mul nsw i32 0, %add2715
  %add2717 = add nsw i32 %mul2716, 0
  %neg2718 = xor i32 %add2717, -1
  %cmp2719 = icmp eq i32 %neg2718, -1
  %conv2720 = zext i1 %cmp2719 to i32
  %sub2721 = sub nsw i32 0, %conv2720
  %477 = load i64, i64* %thrice_byte8_count, align 8
  %conv2722 = trunc i64 %477 to i16
  %conv2723 = sext i16 %conv2722 to i32
  %mul2724 = mul nsw i32 0, %conv2723
  %478 = load i64, i64* %nchars, align 8
  %conv2725 = trunc i64 %478 to i16
  %conv2726 = sext i16 %conv2725 to i32
  %add2727 = add nsw i32 %mul2724, %conv2726
  %mul2728 = mul nsw i32 0, %add2727
  %add2729 = add nsw i32 %mul2728, 1
  %shl2730 = shl i32 %add2729, 30
  %sub2731 = sub nsw i32 %shl2730, 1
  %mul2732 = mul nsw i32 %sub2731, 2
  %add2733 = add nsw i32 %mul2732, 1
  %sub2734 = sub nsw i32 %sub2721, %add2733
  br label %cond.end.2744

cond.false.2735:                                  ; preds = %cond.true.2696
  %479 = load i64, i64* %thrice_byte8_count, align 8
  %conv2736 = trunc i64 %479 to i16
  %conv2737 = sext i16 %conv2736 to i32
  %mul2738 = mul nsw i32 0, %conv2737
  %480 = load i64, i64* %nchars, align 8
  %conv2739 = trunc i64 %480 to i16
  %conv2740 = sext i16 %conv2739 to i32
  %add2741 = add nsw i32 %mul2738, %conv2740
  %mul2742 = mul nsw i32 0, %add2741
  %add2743 = add nsw i32 %mul2742, 0
  br label %cond.end.2744

cond.end.2744:                                    ; preds = %cond.false.2735, %cond.true.2709
  %cond2745 = phi i32 [ %sub2734, %cond.true.2709 ], [ %add2743, %cond.false.2735 ]
  %481 = load i64, i64* %thrice_byte8_count, align 8
  %conv2746 = trunc i64 %481 to i16
  %conv2747 = sext i16 %conv2746 to i32
  %sub2748 = sub nsw i32 %cond2745, %conv2747
  %cmp2749 = icmp slt i32 %conv2698, %sub2748
  br i1 %cmp2749, label %cond.true.2859, label %lor.lhs.false.2833

cond.false.2751:                                  ; preds = %cond.true.2691
  %482 = load i64, i64* %thrice_byte8_count, align 8
  %conv2752 = trunc i64 %482 to i16
  %conv2753 = sext i16 %conv2752 to i32
  %mul2754 = mul nsw i32 0, %conv2753
  %483 = load i64, i64* %nchars, align 8
  %conv2755 = trunc i64 %483 to i16
  %conv2756 = sext i16 %conv2755 to i32
  %add2757 = add nsw i32 %mul2754, %conv2756
  %mul2758 = mul nsw i32 0, %add2757
  %sub2759 = sub nsw i32 %mul2758, 1
  %cmp2760 = icmp slt i32 %sub2759, 0
  br i1 %cmp2760, label %cond.true.2762, label %cond.false.2775

cond.true.2762:                                   ; preds = %cond.false.2751
  %484 = load i64, i64* %thrice_byte8_count, align 8
  %conv2763 = trunc i64 %484 to i16
  %conv2764 = sext i16 %conv2763 to i32
  %mul2765 = mul nsw i32 0, %conv2764
  %485 = load i64, i64* %nchars, align 8
  %conv2766 = trunc i64 %485 to i16
  %conv2767 = sext i16 %conv2766 to i32
  %add2768 = add nsw i32 %mul2765, %conv2767
  %mul2769 = mul nsw i32 0, %add2768
  %add2770 = add nsw i32 %mul2769, 1
  %shl2771 = shl i32 %add2770, 30
  %sub2772 = sub nsw i32 %shl2771, 1
  %mul2773 = mul nsw i32 %sub2772, 2
  %add2774 = add nsw i32 %mul2773, 1
  br label %cond.end.2784

cond.false.2775:                                  ; preds = %cond.false.2751
  %486 = load i64, i64* %thrice_byte8_count, align 8
  %conv2776 = trunc i64 %486 to i16
  %conv2777 = sext i16 %conv2776 to i32
  %mul2778 = mul nsw i32 0, %conv2777
  %487 = load i64, i64* %nchars, align 8
  %conv2779 = trunc i64 %487 to i16
  %conv2780 = sext i16 %conv2779 to i32
  %add2781 = add nsw i32 %mul2778, %conv2780
  %mul2782 = mul nsw i32 0, %add2781
  %sub2783 = sub nsw i32 %mul2782, 1
  br label %cond.end.2784

cond.end.2784:                                    ; preds = %cond.false.2775, %cond.true.2762
  %cond2785 = phi i32 [ %add2774, %cond.true.2762 ], [ %sub2783, %cond.false.2775 ]
  %488 = load i64, i64* %thrice_byte8_count, align 8
  %conv2786 = trunc i64 %488 to i16
  %conv2787 = sext i16 %conv2786 to i32
  %sub2788 = sub nsw i32 %cond2785, %conv2787
  %489 = load i64, i64* %nchars, align 8
  %conv2789 = trunc i64 %489 to i16
  %conv2790 = sext i16 %conv2789 to i32
  %cmp2791 = icmp slt i32 %sub2788, %conv2790
  br i1 %cmp2791, label %cond.true.2859, label %lor.lhs.false.2833

cond.false.2793:                                  ; preds = %cond.end.2687
  %490 = load i64, i64* %nchars, align 8
  %conv2794 = trunc i64 %490 to i16
  %conv2795 = sext i16 %conv2794 to i32
  %cmp2796 = icmp slt i32 %conv2795, 0
  br i1 %cmp2796, label %cond.true.2798, label %cond.false.2808

cond.true.2798:                                   ; preds = %cond.false.2793
  %491 = load i64, i64* %thrice_byte8_count, align 8
  %conv2799 = trunc i64 %491 to i16
  %conv2800 = sext i16 %conv2799 to i32
  %492 = load i64, i64* %nchars, align 8
  %conv2801 = trunc i64 %492 to i16
  %conv2802 = sext i16 %conv2801 to i32
  %493 = load i64, i64* %thrice_byte8_count, align 8
  %conv2803 = trunc i64 %493 to i16
  %conv2804 = sext i16 %conv2803 to i32
  %add2805 = add nsw i32 %conv2802, %conv2804
  %cmp2806 = icmp sle i32 %conv2800, %add2805
  br i1 %cmp2806, label %cond.true.2859, label %lor.lhs.false.2833

cond.false.2808:                                  ; preds = %cond.false.2793
  %494 = load i64, i64* %thrice_byte8_count, align 8
  %conv2809 = trunc i64 %494 to i16
  %conv2810 = sext i16 %conv2809 to i32
  %cmp2811 = icmp slt i32 %conv2810, 0
  br i1 %cmp2811, label %cond.true.2813, label %cond.false.2823

cond.true.2813:                                   ; preds = %cond.false.2808
  %495 = load i64, i64* %nchars, align 8
  %conv2814 = trunc i64 %495 to i16
  %conv2815 = sext i16 %conv2814 to i32
  %496 = load i64, i64* %nchars, align 8
  %conv2816 = trunc i64 %496 to i16
  %conv2817 = sext i16 %conv2816 to i32
  %497 = load i64, i64* %thrice_byte8_count, align 8
  %conv2818 = trunc i64 %497 to i16
  %conv2819 = sext i16 %conv2818 to i32
  %add2820 = add nsw i32 %conv2817, %conv2819
  %cmp2821 = icmp sle i32 %conv2815, %add2820
  br i1 %cmp2821, label %cond.true.2859, label %lor.lhs.false.2833

cond.false.2823:                                  ; preds = %cond.false.2808
  %498 = load i64, i64* %nchars, align 8
  %conv2824 = trunc i64 %498 to i16
  %conv2825 = sext i16 %conv2824 to i32
  %499 = load i64, i64* %thrice_byte8_count, align 8
  %conv2826 = trunc i64 %499 to i16
  %conv2827 = sext i16 %conv2826 to i32
  %add2828 = add nsw i32 %conv2825, %conv2827
  %500 = load i64, i64* %thrice_byte8_count, align 8
  %conv2829 = trunc i64 %500 to i16
  %conv2830 = sext i16 %conv2829 to i32
  %cmp2831 = icmp slt i32 %add2828, %conv2830
  br i1 %cmp2831, label %cond.true.2859, label %lor.lhs.false.2833

lor.lhs.false.2833:                               ; preds = %cond.false.2823, %cond.true.2813, %cond.true.2798, %cond.end.2784, %cond.end.2744
  %501 = load i64, i64* %nchars, align 8
  %conv2834 = trunc i64 %501 to i16
  %conv2835 = sext i16 %conv2834 to i32
  %502 = load i64, i64* %thrice_byte8_count, align 8
  %conv2836 = trunc i64 %502 to i16
  %conv2837 = sext i16 %conv2836 to i32
  %add2838 = add nsw i32 %conv2835, %conv2837
  %mul2839 = mul nsw i32 0, %add2838
  %sub2840 = sub nsw i32 %mul2839, 1
  %cmp2841 = icmp slt i32 %sub2840, 0
  br i1 %cmp2841, label %land.lhs.true.2843, label %lor.lhs.false.2851

land.lhs.true.2843:                               ; preds = %lor.lhs.false.2833
  %503 = load i64, i64* %nchars, align 8
  %conv2844 = trunc i64 %503 to i16
  %conv2845 = sext i16 %conv2844 to i32
  %504 = load i64, i64* %thrice_byte8_count, align 8
  %conv2846 = trunc i64 %504 to i16
  %conv2847 = sext i16 %conv2846 to i32
  %add2848 = add nsw i32 %conv2845, %conv2847
  %cmp2849 = icmp slt i32 %add2848, -32768
  br i1 %cmp2849, label %cond.true.2859, label %lor.lhs.false.2851

lor.lhs.false.2851:                               ; preds = %land.lhs.true.2843, %lor.lhs.false.2833
  %505 = load i64, i64* %nchars, align 8
  %conv2852 = trunc i64 %505 to i16
  %conv2853 = sext i16 %conv2852 to i32
  %506 = load i64, i64* %thrice_byte8_count, align 8
  %conv2854 = trunc i64 %506 to i16
  %conv2855 = sext i16 %conv2854 to i32
  %add2856 = add nsw i32 %conv2853, %conv2855
  %cmp2857 = icmp slt i32 32767, %add2856
  br i1 %cmp2857, label %cond.true.2859, label %cond.false.2888

cond.true.2859:                                   ; preds = %lor.lhs.false.2851, %land.lhs.true.2843, %cond.false.2823, %cond.true.2813, %cond.true.2798, %cond.end.2784, %cond.end.2744
  %507 = load i64, i64* %nchars, align 8
  %conv2860 = trunc i64 %507 to i16
  %conv2861 = zext i16 %conv2860 to i32
  %508 = load i64, i64* %thrice_byte8_count, align 8
  %conv2862 = trunc i64 %508 to i16
  %conv2863 = zext i16 %conv2862 to i32
  %add2864 = add nsw i32 %conv2861, %conv2863
  %cmp2865 = icmp sle i32 %add2864, 32767
  br i1 %cmp2865, label %cond.true.2867, label %cond.false.2875

cond.true.2867:                                   ; preds = %cond.true.2859
  %509 = load i64, i64* %nchars, align 8
  %conv2868 = trunc i64 %509 to i16
  %conv2869 = zext i16 %conv2868 to i32
  %510 = load i64, i64* %thrice_byte8_count, align 8
  %conv2870 = trunc i64 %510 to i16
  %conv2871 = zext i16 %conv2870 to i32
  %add2872 = add nsw i32 %conv2869, %conv2871
  %conv2873 = trunc i32 %add2872 to i16
  %conv2874 = sext i16 %conv2873 to i32
  br label %cond.end.2885

cond.false.2875:                                  ; preds = %cond.true.2859
  %511 = load i64, i64* %nchars, align 8
  %conv2876 = trunc i64 %511 to i16
  %conv2877 = zext i16 %conv2876 to i32
  %512 = load i64, i64* %thrice_byte8_count, align 8
  %conv2878 = trunc i64 %512 to i16
  %conv2879 = zext i16 %conv2878 to i32
  %add2880 = add nsw i32 %conv2877, %conv2879
  %sub2881 = sub nsw i32 %add2880, -32768
  %conv2882 = trunc i32 %sub2881 to i16
  %conv2883 = sext i16 %conv2882 to i32
  %add2884 = add nsw i32 %conv2883, -32768
  br label %cond.end.2885

cond.end.2885:                                    ; preds = %cond.false.2875, %cond.true.2867
  %cond2886 = phi i32 [ %conv2874, %cond.true.2867 ], [ %add2884, %cond.false.2875 ]
  %conv2887 = sext i32 %cond2886 to i64
  store i64 %conv2887, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.2888:                                  ; preds = %lor.lhs.false.2851
  %513 = load i64, i64* %nchars, align 8
  %conv2889 = trunc i64 %513 to i16
  %conv2890 = zext i16 %conv2889 to i32
  %514 = load i64, i64* %thrice_byte8_count, align 8
  %conv2891 = trunc i64 %514 to i16
  %conv2892 = zext i16 %conv2891 to i32
  %add2893 = add nsw i32 %conv2890, %conv2892
  %cmp2894 = icmp sle i32 %add2893, 32767
  br i1 %cmp2894, label %cond.true.2896, label %cond.false.2904

cond.true.2896:                                   ; preds = %cond.false.2888
  %515 = load i64, i64* %nchars, align 8
  %conv2897 = trunc i64 %515 to i16
  %conv2898 = zext i16 %conv2897 to i32
  %516 = load i64, i64* %thrice_byte8_count, align 8
  %conv2899 = trunc i64 %516 to i16
  %conv2900 = zext i16 %conv2899 to i32
  %add2901 = add nsw i32 %conv2898, %conv2900
  %conv2902 = trunc i32 %add2901 to i16
  %conv2903 = sext i16 %conv2902 to i32
  br label %cond.end.2914

cond.false.2904:                                  ; preds = %cond.false.2888
  %517 = load i64, i64* %nchars, align 8
  %conv2905 = trunc i64 %517 to i16
  %conv2906 = zext i16 %conv2905 to i32
  %518 = load i64, i64* %thrice_byte8_count, align 8
  %conv2907 = trunc i64 %518 to i16
  %conv2908 = zext i16 %conv2907 to i32
  %add2909 = add nsw i32 %conv2906, %conv2908
  %sub2910 = sub nsw i32 %add2909, -32768
  %conv2911 = trunc i32 %sub2910 to i16
  %conv2912 = sext i16 %conv2911 to i32
  %add2913 = add nsw i32 %conv2912, -32768
  br label %cond.end.2914

cond.end.2914:                                    ; preds = %cond.false.2904, %cond.true.2896
  %cond2915 = phi i32 [ %conv2903, %cond.true.2896 ], [ %add2913, %cond.false.2904 ]
  %conv2916 = sext i32 %cond2915 to i64
  store i64 %conv2916, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.2917:                                  ; preds = %cond.true.2640
  %519 = load i64, i64* %thrice_byte8_count, align 8
  %mul2918 = mul nsw i64 0, %519
  %520 = load i64, i64* %nchars, align 8
  %add2919 = add nsw i64 %mul2918, %520
  %mul2920 = mul nsw i64 0, %add2919
  %sub2921 = sub nsw i64 %mul2920, 1
  %cmp2922 = icmp slt i64 %sub2921, 0
  br i1 %cmp2922, label %cond.true.2924, label %cond.false.2943

cond.true.2924:                                   ; preds = %cond.false.2917
  %521 = load i64, i64* %thrice_byte8_count, align 8
  %mul2925 = mul nsw i64 0, %521
  %522 = load i64, i64* %nchars, align 8
  %add2926 = add nsw i64 %mul2925, %522
  %mul2927 = mul nsw i64 0, %add2926
  %add2928 = add nsw i64 %mul2927, 0
  %neg2929 = xor i64 %add2928, -1
  %cmp2930 = icmp eq i64 %neg2929, -1
  %conv2931 = zext i1 %cmp2930 to i32
  %sub2932 = sub nsw i32 0, %conv2931
  %conv2933 = sext i32 %sub2932 to i64
  %523 = load i64, i64* %thrice_byte8_count, align 8
  %mul2934 = mul nsw i64 0, %523
  %524 = load i64, i64* %nchars, align 8
  %add2935 = add nsw i64 %mul2934, %524
  %mul2936 = mul nsw i64 0, %add2935
  %add2937 = add nsw i64 %mul2936, 1
  %shl2938 = shl i64 %add2937, 62
  %sub2939 = sub nsw i64 %shl2938, 1
  %mul2940 = mul nsw i64 %sub2939, 2
  %add2941 = add nsw i64 %mul2940, 1
  %sub2942 = sub nsw i64 %conv2933, %add2941
  br label %cond.end.2948

cond.false.2943:                                  ; preds = %cond.false.2917
  %525 = load i64, i64* %thrice_byte8_count, align 8
  %mul2944 = mul nsw i64 0, %525
  %526 = load i64, i64* %nchars, align 8
  %add2945 = add nsw i64 %mul2944, %526
  %mul2946 = mul nsw i64 0, %add2945
  %add2947 = add nsw i64 %mul2946, 0
  br label %cond.end.2948

cond.end.2948:                                    ; preds = %cond.false.2943, %cond.true.2924
  %cond2949 = phi i64 [ %sub2942, %cond.true.2924 ], [ %add2947, %cond.false.2943 ]
  %cmp2950 = icmp slt i64 %cond2949, 0
  br i1 %cmp2950, label %cond.true.2952, label %cond.false.3017

cond.true.2952:                                   ; preds = %cond.end.2948
  %527 = load i64, i64* %thrice_byte8_count, align 8
  %cmp2953 = icmp slt i64 %527, 0
  br i1 %cmp2953, label %cond.true.2955, label %cond.false.2991

cond.true.2955:                                   ; preds = %cond.true.2952
  %528 = load i64, i64* %nchars, align 8
  %529 = load i64, i64* %thrice_byte8_count, align 8
  %mul2956 = mul nsw i64 0, %529
  %530 = load i64, i64* %nchars, align 8
  %add2957 = add nsw i64 %mul2956, %530
  %mul2958 = mul nsw i64 0, %add2957
  %sub2959 = sub nsw i64 %mul2958, 1
  %cmp2960 = icmp slt i64 %sub2959, 0
  br i1 %cmp2960, label %cond.true.2962, label %cond.false.2981

cond.true.2962:                                   ; preds = %cond.true.2955
  %531 = load i64, i64* %thrice_byte8_count, align 8
  %mul2963 = mul nsw i64 0, %531
  %532 = load i64, i64* %nchars, align 8
  %add2964 = add nsw i64 %mul2963, %532
  %mul2965 = mul nsw i64 0, %add2964
  %add2966 = add nsw i64 %mul2965, 0
  %neg2967 = xor i64 %add2966, -1
  %cmp2968 = icmp eq i64 %neg2967, -1
  %conv2969 = zext i1 %cmp2968 to i32
  %sub2970 = sub nsw i32 0, %conv2969
  %conv2971 = sext i32 %sub2970 to i64
  %533 = load i64, i64* %thrice_byte8_count, align 8
  %mul2972 = mul nsw i64 0, %533
  %534 = load i64, i64* %nchars, align 8
  %add2973 = add nsw i64 %mul2972, %534
  %mul2974 = mul nsw i64 0, %add2973
  %add2975 = add nsw i64 %mul2974, 1
  %shl2976 = shl i64 %add2975, 62
  %sub2977 = sub nsw i64 %shl2976, 1
  %mul2978 = mul nsw i64 %sub2977, 2
  %add2979 = add nsw i64 %mul2978, 1
  %sub2980 = sub nsw i64 %conv2971, %add2979
  br label %cond.end.2986

cond.false.2981:                                  ; preds = %cond.true.2955
  %535 = load i64, i64* %thrice_byte8_count, align 8
  %mul2982 = mul nsw i64 0, %535
  %536 = load i64, i64* %nchars, align 8
  %add2983 = add nsw i64 %mul2982, %536
  %mul2984 = mul nsw i64 0, %add2983
  %add2985 = add nsw i64 %mul2984, 0
  br label %cond.end.2986

cond.end.2986:                                    ; preds = %cond.false.2981, %cond.true.2962
  %cond2987 = phi i64 [ %sub2980, %cond.true.2962 ], [ %add2985, %cond.false.2981 ]
  %537 = load i64, i64* %thrice_byte8_count, align 8
  %sub2988 = sub nsw i64 %cond2987, %537
  %cmp2989 = icmp slt i64 %528, %sub2988
  br i1 %cmp2989, label %cond.true.3049, label %lor.lhs.false.3035

cond.false.2991:                                  ; preds = %cond.true.2952
  %538 = load i64, i64* %thrice_byte8_count, align 8
  %mul2992 = mul nsw i64 0, %538
  %539 = load i64, i64* %nchars, align 8
  %add2993 = add nsw i64 %mul2992, %539
  %mul2994 = mul nsw i64 0, %add2993
  %sub2995 = sub nsw i64 %mul2994, 1
  %cmp2996 = icmp slt i64 %sub2995, 0
  br i1 %cmp2996, label %cond.true.2998, label %cond.false.3007

cond.true.2998:                                   ; preds = %cond.false.2991
  %540 = load i64, i64* %thrice_byte8_count, align 8
  %mul2999 = mul nsw i64 0, %540
  %541 = load i64, i64* %nchars, align 8
  %add3000 = add nsw i64 %mul2999, %541
  %mul3001 = mul nsw i64 0, %add3000
  %add3002 = add nsw i64 %mul3001, 1
  %shl3003 = shl i64 %add3002, 62
  %sub3004 = sub nsw i64 %shl3003, 1
  %mul3005 = mul nsw i64 %sub3004, 2
  %add3006 = add nsw i64 %mul3005, 1
  br label %cond.end.3012

cond.false.3007:                                  ; preds = %cond.false.2991
  %542 = load i64, i64* %thrice_byte8_count, align 8
  %mul3008 = mul nsw i64 0, %542
  %543 = load i64, i64* %nchars, align 8
  %add3009 = add nsw i64 %mul3008, %543
  %mul3010 = mul nsw i64 0, %add3009
  %sub3011 = sub nsw i64 %mul3010, 1
  br label %cond.end.3012

cond.end.3012:                                    ; preds = %cond.false.3007, %cond.true.2998
  %cond3013 = phi i64 [ %add3006, %cond.true.2998 ], [ %sub3011, %cond.false.3007 ]
  %544 = load i64, i64* %thrice_byte8_count, align 8
  %sub3014 = sub nsw i64 %cond3013, %544
  %545 = load i64, i64* %nchars, align 8
  %cmp3015 = icmp slt i64 %sub3014, %545
  br i1 %cmp3015, label %cond.true.3049, label %lor.lhs.false.3035

cond.false.3017:                                  ; preds = %cond.end.2948
  %546 = load i64, i64* %nchars, align 8
  %cmp3018 = icmp slt i64 %546, 0
  br i1 %cmp3018, label %cond.true.3020, label %cond.false.3024

cond.true.3020:                                   ; preds = %cond.false.3017
  %547 = load i64, i64* %thrice_byte8_count, align 8
  %548 = load i64, i64* %nchars, align 8
  %549 = load i64, i64* %thrice_byte8_count, align 8
  %add3021 = add nsw i64 %548, %549
  %cmp3022 = icmp sle i64 %547, %add3021
  br i1 %cmp3022, label %cond.true.3049, label %lor.lhs.false.3035

cond.false.3024:                                  ; preds = %cond.false.3017
  %550 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3025 = icmp slt i64 %550, 0
  br i1 %cmp3025, label %cond.true.3027, label %cond.false.3031

cond.true.3027:                                   ; preds = %cond.false.3024
  %551 = load i64, i64* %nchars, align 8
  %552 = load i64, i64* %nchars, align 8
  %553 = load i64, i64* %thrice_byte8_count, align 8
  %add3028 = add nsw i64 %552, %553
  %cmp3029 = icmp sle i64 %551, %add3028
  br i1 %cmp3029, label %cond.true.3049, label %lor.lhs.false.3035

cond.false.3031:                                  ; preds = %cond.false.3024
  %554 = load i64, i64* %nchars, align 8
  %555 = load i64, i64* %thrice_byte8_count, align 8
  %add3032 = add nsw i64 %554, %555
  %556 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3033 = icmp slt i64 %add3032, %556
  br i1 %cmp3033, label %cond.true.3049, label %lor.lhs.false.3035

lor.lhs.false.3035:                               ; preds = %cond.false.3031, %cond.true.3027, %cond.true.3020, %cond.end.3012, %cond.end.2986
  %557 = load i64, i64* %nchars, align 8
  %558 = load i64, i64* %thrice_byte8_count, align 8
  %add3036 = add nsw i64 %557, %558
  %mul3037 = mul nsw i64 0, %add3036
  %sub3038 = sub nsw i64 %mul3037, 1
  %cmp3039 = icmp slt i64 %sub3038, 0
  br i1 %cmp3039, label %land.lhs.true.3041, label %lor.lhs.false.3045

land.lhs.true.3041:                               ; preds = %lor.lhs.false.3035
  %559 = load i64, i64* %nchars, align 8
  %560 = load i64, i64* %thrice_byte8_count, align 8
  %add3042 = add nsw i64 %559, %560
  %cmp3043 = icmp slt i64 %add3042, -32768
  br i1 %cmp3043, label %cond.true.3049, label %lor.lhs.false.3045

lor.lhs.false.3045:                               ; preds = %land.lhs.true.3041, %lor.lhs.false.3035
  %561 = load i64, i64* %nchars, align 8
  %562 = load i64, i64* %thrice_byte8_count, align 8
  %add3046 = add nsw i64 %561, %562
  %cmp3047 = icmp slt i64 32767, %add3046
  br i1 %cmp3047, label %cond.true.3049, label %cond.false.3078

cond.true.3049:                                   ; preds = %lor.lhs.false.3045, %land.lhs.true.3041, %cond.false.3031, %cond.true.3027, %cond.true.3020, %cond.end.3012, %cond.end.2986
  %563 = load i64, i64* %nchars, align 8
  %conv3050 = trunc i64 %563 to i16
  %conv3051 = zext i16 %conv3050 to i32
  %564 = load i64, i64* %thrice_byte8_count, align 8
  %conv3052 = trunc i64 %564 to i16
  %conv3053 = zext i16 %conv3052 to i32
  %add3054 = add nsw i32 %conv3051, %conv3053
  %cmp3055 = icmp sle i32 %add3054, 32767
  br i1 %cmp3055, label %cond.true.3057, label %cond.false.3065

cond.true.3057:                                   ; preds = %cond.true.3049
  %565 = load i64, i64* %nchars, align 8
  %conv3058 = trunc i64 %565 to i16
  %conv3059 = zext i16 %conv3058 to i32
  %566 = load i64, i64* %thrice_byte8_count, align 8
  %conv3060 = trunc i64 %566 to i16
  %conv3061 = zext i16 %conv3060 to i32
  %add3062 = add nsw i32 %conv3059, %conv3061
  %conv3063 = trunc i32 %add3062 to i16
  %conv3064 = sext i16 %conv3063 to i32
  br label %cond.end.3075

cond.false.3065:                                  ; preds = %cond.true.3049
  %567 = load i64, i64* %nchars, align 8
  %conv3066 = trunc i64 %567 to i16
  %conv3067 = zext i16 %conv3066 to i32
  %568 = load i64, i64* %thrice_byte8_count, align 8
  %conv3068 = trunc i64 %568 to i16
  %conv3069 = zext i16 %conv3068 to i32
  %add3070 = add nsw i32 %conv3067, %conv3069
  %sub3071 = sub nsw i32 %add3070, -32768
  %conv3072 = trunc i32 %sub3071 to i16
  %conv3073 = sext i16 %conv3072 to i32
  %add3074 = add nsw i32 %conv3073, -32768
  br label %cond.end.3075

cond.end.3075:                                    ; preds = %cond.false.3065, %cond.true.3057
  %cond3076 = phi i32 [ %conv3064, %cond.true.3057 ], [ %add3074, %cond.false.3065 ]
  %conv3077 = sext i32 %cond3076 to i64
  store i64 %conv3077, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3078:                                  ; preds = %lor.lhs.false.3045
  %569 = load i64, i64* %nchars, align 8
  %conv3079 = trunc i64 %569 to i16
  %conv3080 = zext i16 %conv3079 to i32
  %570 = load i64, i64* %thrice_byte8_count, align 8
  %conv3081 = trunc i64 %570 to i16
  %conv3082 = zext i16 %conv3081 to i32
  %add3083 = add nsw i32 %conv3080, %conv3082
  %cmp3084 = icmp sle i32 %add3083, 32767
  br i1 %cmp3084, label %cond.true.3086, label %cond.false.3094

cond.true.3086:                                   ; preds = %cond.false.3078
  %571 = load i64, i64* %nchars, align 8
  %conv3087 = trunc i64 %571 to i16
  %conv3088 = zext i16 %conv3087 to i32
  %572 = load i64, i64* %thrice_byte8_count, align 8
  %conv3089 = trunc i64 %572 to i16
  %conv3090 = zext i16 %conv3089 to i32
  %add3091 = add nsw i32 %conv3088, %conv3090
  %conv3092 = trunc i32 %add3091 to i16
  %conv3093 = sext i16 %conv3092 to i32
  br label %cond.end.3104

cond.false.3094:                                  ; preds = %cond.false.3078
  %573 = load i64, i64* %nchars, align 8
  %conv3095 = trunc i64 %573 to i16
  %conv3096 = zext i16 %conv3095 to i32
  %574 = load i64, i64* %thrice_byte8_count, align 8
  %conv3097 = trunc i64 %574 to i16
  %conv3098 = zext i16 %conv3097 to i32
  %add3099 = add nsw i32 %conv3096, %conv3098
  %sub3100 = sub nsw i32 %add3099, -32768
  %conv3101 = trunc i32 %sub3100 to i16
  %conv3102 = sext i16 %conv3101 to i32
  %add3103 = add nsw i32 %conv3102, -32768
  br label %cond.end.3104

cond.end.3104:                                    ; preds = %cond.false.3094, %cond.true.3086
  %cond3105 = phi i32 [ %conv3093, %cond.true.3086 ], [ %add3103, %cond.false.3094 ]
  %conv3106 = sext i32 %cond3105 to i64
  store i64 %conv3106, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3107:                                  ; preds = %cond.false.2639
  br i1 false, label %cond.true.3108, label %cond.false.3491

cond.true.3108:                                   ; preds = %cond.false.3107
  br i1 false, label %cond.true.3109, label %cond.false.3321

cond.true.3109:                                   ; preds = %cond.true.3108
  %575 = load i64, i64* %thrice_byte8_count, align 8
  %conv3110 = trunc i64 %575 to i32
  %mul3111 = mul nsw i32 0, %conv3110
  %576 = load i64, i64* %nchars, align 8
  %conv3112 = trunc i64 %576 to i32
  %add3113 = add nsw i32 %mul3111, %conv3112
  %mul3114 = mul nsw i32 0, %add3113
  %sub3115 = sub nsw i32 %mul3114, 1
  %cmp3116 = icmp slt i32 %sub3115, 0
  br i1 %cmp3116, label %cond.true.3118, label %cond.false.3140

cond.true.3118:                                   ; preds = %cond.true.3109
  %577 = load i64, i64* %thrice_byte8_count, align 8
  %conv3119 = trunc i64 %577 to i32
  %mul3120 = mul nsw i32 0, %conv3119
  %578 = load i64, i64* %nchars, align 8
  %conv3121 = trunc i64 %578 to i32
  %add3122 = add nsw i32 %mul3120, %conv3121
  %mul3123 = mul nsw i32 0, %add3122
  %add3124 = add nsw i32 %mul3123, 0
  %neg3125 = xor i32 %add3124, -1
  %cmp3126 = icmp eq i32 %neg3125, -1
  %conv3127 = zext i1 %cmp3126 to i32
  %sub3128 = sub nsw i32 0, %conv3127
  %579 = load i64, i64* %thrice_byte8_count, align 8
  %conv3129 = trunc i64 %579 to i32
  %mul3130 = mul nsw i32 0, %conv3129
  %580 = load i64, i64* %nchars, align 8
  %conv3131 = trunc i64 %580 to i32
  %add3132 = add nsw i32 %mul3130, %conv3131
  %mul3133 = mul nsw i32 0, %add3132
  %add3134 = add nsw i32 %mul3133, 1
  %shl3135 = shl i32 %add3134, 30
  %sub3136 = sub nsw i32 %shl3135, 1
  %mul3137 = mul nsw i32 %sub3136, 2
  %add3138 = add nsw i32 %mul3137, 1
  %sub3139 = sub nsw i32 %sub3128, %add3138
  br label %cond.end.3147

cond.false.3140:                                  ; preds = %cond.true.3109
  %581 = load i64, i64* %thrice_byte8_count, align 8
  %conv3141 = trunc i64 %581 to i32
  %mul3142 = mul nsw i32 0, %conv3141
  %582 = load i64, i64* %nchars, align 8
  %conv3143 = trunc i64 %582 to i32
  %add3144 = add nsw i32 %mul3142, %conv3143
  %mul3145 = mul nsw i32 0, %add3144
  %add3146 = add nsw i32 %mul3145, 0
  br label %cond.end.3147

cond.end.3147:                                    ; preds = %cond.false.3140, %cond.true.3118
  %cond3148 = phi i32 [ %sub3139, %cond.true.3118 ], [ %add3146, %cond.false.3140 ]
  %cmp3149 = icmp slt i32 %cond3148, 0
  br i1 %cmp3149, label %cond.true.3151, label %cond.false.3234

cond.true.3151:                                   ; preds = %cond.end.3147
  %583 = load i64, i64* %thrice_byte8_count, align 8
  %conv3152 = trunc i64 %583 to i32
  %cmp3153 = icmp slt i32 %conv3152, 0
  br i1 %cmp3153, label %cond.true.3155, label %cond.false.3200

cond.true.3155:                                   ; preds = %cond.true.3151
  %584 = load i64, i64* %nchars, align 8
  %conv3156 = trunc i64 %584 to i32
  %585 = load i64, i64* %thrice_byte8_count, align 8
  %conv3157 = trunc i64 %585 to i32
  %mul3158 = mul nsw i32 0, %conv3157
  %586 = load i64, i64* %nchars, align 8
  %conv3159 = trunc i64 %586 to i32
  %add3160 = add nsw i32 %mul3158, %conv3159
  %mul3161 = mul nsw i32 0, %add3160
  %sub3162 = sub nsw i32 %mul3161, 1
  %cmp3163 = icmp slt i32 %sub3162, 0
  br i1 %cmp3163, label %cond.true.3165, label %cond.false.3187

cond.true.3165:                                   ; preds = %cond.true.3155
  %587 = load i64, i64* %thrice_byte8_count, align 8
  %conv3166 = trunc i64 %587 to i32
  %mul3167 = mul nsw i32 0, %conv3166
  %588 = load i64, i64* %nchars, align 8
  %conv3168 = trunc i64 %588 to i32
  %add3169 = add nsw i32 %mul3167, %conv3168
  %mul3170 = mul nsw i32 0, %add3169
  %add3171 = add nsw i32 %mul3170, 0
  %neg3172 = xor i32 %add3171, -1
  %cmp3173 = icmp eq i32 %neg3172, -1
  %conv3174 = zext i1 %cmp3173 to i32
  %sub3175 = sub nsw i32 0, %conv3174
  %589 = load i64, i64* %thrice_byte8_count, align 8
  %conv3176 = trunc i64 %589 to i32
  %mul3177 = mul nsw i32 0, %conv3176
  %590 = load i64, i64* %nchars, align 8
  %conv3178 = trunc i64 %590 to i32
  %add3179 = add nsw i32 %mul3177, %conv3178
  %mul3180 = mul nsw i32 0, %add3179
  %add3181 = add nsw i32 %mul3180, 1
  %shl3182 = shl i32 %add3181, 30
  %sub3183 = sub nsw i32 %shl3182, 1
  %mul3184 = mul nsw i32 %sub3183, 2
  %add3185 = add nsw i32 %mul3184, 1
  %sub3186 = sub nsw i32 %sub3175, %add3185
  br label %cond.end.3194

cond.false.3187:                                  ; preds = %cond.true.3155
  %591 = load i64, i64* %thrice_byte8_count, align 8
  %conv3188 = trunc i64 %591 to i32
  %mul3189 = mul nsw i32 0, %conv3188
  %592 = load i64, i64* %nchars, align 8
  %conv3190 = trunc i64 %592 to i32
  %add3191 = add nsw i32 %mul3189, %conv3190
  %mul3192 = mul nsw i32 0, %add3191
  %add3193 = add nsw i32 %mul3192, 0
  br label %cond.end.3194

cond.end.3194:                                    ; preds = %cond.false.3187, %cond.true.3165
  %cond3195 = phi i32 [ %sub3186, %cond.true.3165 ], [ %add3193, %cond.false.3187 ]
  %593 = load i64, i64* %thrice_byte8_count, align 8
  %conv3196 = trunc i64 %593 to i32
  %sub3197 = sub nsw i32 %cond3195, %conv3196
  %cmp3198 = icmp slt i32 %conv3156, %sub3197
  br i1 %cmp3198, label %cond.true.3283, label %lor.lhs.false.3263

cond.false.3200:                                  ; preds = %cond.true.3151
  %594 = load i64, i64* %thrice_byte8_count, align 8
  %conv3201 = trunc i64 %594 to i32
  %mul3202 = mul nsw i32 0, %conv3201
  %595 = load i64, i64* %nchars, align 8
  %conv3203 = trunc i64 %595 to i32
  %add3204 = add nsw i32 %mul3202, %conv3203
  %mul3205 = mul nsw i32 0, %add3204
  %sub3206 = sub nsw i32 %mul3205, 1
  %cmp3207 = icmp slt i32 %sub3206, 0
  br i1 %cmp3207, label %cond.true.3209, label %cond.false.3220

cond.true.3209:                                   ; preds = %cond.false.3200
  %596 = load i64, i64* %thrice_byte8_count, align 8
  %conv3210 = trunc i64 %596 to i32
  %mul3211 = mul nsw i32 0, %conv3210
  %597 = load i64, i64* %nchars, align 8
  %conv3212 = trunc i64 %597 to i32
  %add3213 = add nsw i32 %mul3211, %conv3212
  %mul3214 = mul nsw i32 0, %add3213
  %add3215 = add nsw i32 %mul3214, 1
  %shl3216 = shl i32 %add3215, 30
  %sub3217 = sub nsw i32 %shl3216, 1
  %mul3218 = mul nsw i32 %sub3217, 2
  %add3219 = add nsw i32 %mul3218, 1
  br label %cond.end.3227

cond.false.3220:                                  ; preds = %cond.false.3200
  %598 = load i64, i64* %thrice_byte8_count, align 8
  %conv3221 = trunc i64 %598 to i32
  %mul3222 = mul nsw i32 0, %conv3221
  %599 = load i64, i64* %nchars, align 8
  %conv3223 = trunc i64 %599 to i32
  %add3224 = add nsw i32 %mul3222, %conv3223
  %mul3225 = mul nsw i32 0, %add3224
  %sub3226 = sub nsw i32 %mul3225, 1
  br label %cond.end.3227

cond.end.3227:                                    ; preds = %cond.false.3220, %cond.true.3209
  %cond3228 = phi i32 [ %add3219, %cond.true.3209 ], [ %sub3226, %cond.false.3220 ]
  %600 = load i64, i64* %thrice_byte8_count, align 8
  %conv3229 = trunc i64 %600 to i32
  %sub3230 = sub nsw i32 %cond3228, %conv3229
  %601 = load i64, i64* %nchars, align 8
  %conv3231 = trunc i64 %601 to i32
  %cmp3232 = icmp slt i32 %sub3230, %conv3231
  br i1 %cmp3232, label %cond.true.3283, label %lor.lhs.false.3263

cond.false.3234:                                  ; preds = %cond.end.3147
  %602 = load i64, i64* %nchars, align 8
  %conv3235 = trunc i64 %602 to i32
  %cmp3236 = icmp slt i32 %conv3235, 0
  br i1 %cmp3236, label %cond.true.3238, label %cond.false.3245

cond.true.3238:                                   ; preds = %cond.false.3234
  %603 = load i64, i64* %thrice_byte8_count, align 8
  %conv3239 = trunc i64 %603 to i32
  %604 = load i64, i64* %nchars, align 8
  %conv3240 = trunc i64 %604 to i32
  %605 = load i64, i64* %thrice_byte8_count, align 8
  %conv3241 = trunc i64 %605 to i32
  %add3242 = add nsw i32 %conv3240, %conv3241
  %cmp3243 = icmp sle i32 %conv3239, %add3242
  br i1 %cmp3243, label %cond.true.3283, label %lor.lhs.false.3263

cond.false.3245:                                  ; preds = %cond.false.3234
  %606 = load i64, i64* %thrice_byte8_count, align 8
  %conv3246 = trunc i64 %606 to i32
  %cmp3247 = icmp slt i32 %conv3246, 0
  br i1 %cmp3247, label %cond.true.3249, label %cond.false.3256

cond.true.3249:                                   ; preds = %cond.false.3245
  %607 = load i64, i64* %nchars, align 8
  %conv3250 = trunc i64 %607 to i32
  %608 = load i64, i64* %nchars, align 8
  %conv3251 = trunc i64 %608 to i32
  %609 = load i64, i64* %thrice_byte8_count, align 8
  %conv3252 = trunc i64 %609 to i32
  %add3253 = add nsw i32 %conv3251, %conv3252
  %cmp3254 = icmp sle i32 %conv3250, %add3253
  br i1 %cmp3254, label %cond.true.3283, label %lor.lhs.false.3263

cond.false.3256:                                  ; preds = %cond.false.3245
  %610 = load i64, i64* %nchars, align 8
  %conv3257 = trunc i64 %610 to i32
  %611 = load i64, i64* %thrice_byte8_count, align 8
  %conv3258 = trunc i64 %611 to i32
  %add3259 = add nsw i32 %conv3257, %conv3258
  %612 = load i64, i64* %thrice_byte8_count, align 8
  %conv3260 = trunc i64 %612 to i32
  %cmp3261 = icmp slt i32 %add3259, %conv3260
  br i1 %cmp3261, label %cond.true.3283, label %lor.lhs.false.3263

lor.lhs.false.3263:                               ; preds = %cond.false.3256, %cond.true.3249, %cond.true.3238, %cond.end.3227, %cond.end.3194
  %613 = load i64, i64* %nchars, align 8
  %conv3264 = trunc i64 %613 to i32
  %614 = load i64, i64* %thrice_byte8_count, align 8
  %conv3265 = trunc i64 %614 to i32
  %add3266 = add nsw i32 %conv3264, %conv3265
  %mul3267 = mul nsw i32 0, %add3266
  %sub3268 = sub nsw i32 %mul3267, 1
  %cmp3269 = icmp slt i32 %sub3268, 0
  br i1 %cmp3269, label %land.lhs.true.3271, label %lor.lhs.false.3277

land.lhs.true.3271:                               ; preds = %lor.lhs.false.3263
  %615 = load i64, i64* %nchars, align 8
  %conv3272 = trunc i64 %615 to i32
  %616 = load i64, i64* %thrice_byte8_count, align 8
  %conv3273 = trunc i64 %616 to i32
  %add3274 = add nsw i32 %conv3272, %conv3273
  %cmp3275 = icmp slt i32 %add3274, -2147483648
  br i1 %cmp3275, label %cond.true.3283, label %lor.lhs.false.3277

lor.lhs.false.3277:                               ; preds = %land.lhs.true.3271, %lor.lhs.false.3263
  %617 = load i64, i64* %nchars, align 8
  %conv3278 = trunc i64 %617 to i32
  %618 = load i64, i64* %thrice_byte8_count, align 8
  %conv3279 = trunc i64 %618 to i32
  %add3280 = add nsw i32 %conv3278, %conv3279
  %cmp3281 = icmp slt i32 2147483647, %add3280
  br i1 %cmp3281, label %cond.true.3283, label %cond.false.3302

cond.true.3283:                                   ; preds = %lor.lhs.false.3277, %land.lhs.true.3271, %cond.false.3256, %cond.true.3249, %cond.true.3238, %cond.end.3227, %cond.end.3194
  %619 = load i64, i64* %nchars, align 8
  %conv3284 = trunc i64 %619 to i32
  %620 = load i64, i64* %thrice_byte8_count, align 8
  %conv3285 = trunc i64 %620 to i32
  %add3286 = add i32 %conv3284, %conv3285
  %cmp3287 = icmp ule i32 %add3286, 2147483647
  br i1 %cmp3287, label %cond.true.3289, label %cond.false.3293

cond.true.3289:                                   ; preds = %cond.true.3283
  %621 = load i64, i64* %nchars, align 8
  %conv3290 = trunc i64 %621 to i32
  %622 = load i64, i64* %thrice_byte8_count, align 8
  %conv3291 = trunc i64 %622 to i32
  %add3292 = add i32 %conv3290, %conv3291
  br label %cond.end.3299

cond.false.3293:                                  ; preds = %cond.true.3283
  %623 = load i64, i64* %nchars, align 8
  %conv3294 = trunc i64 %623 to i32
  %624 = load i64, i64* %thrice_byte8_count, align 8
  %conv3295 = trunc i64 %624 to i32
  %add3296 = add i32 %conv3294, %conv3295
  %sub3297 = sub i32 %add3296, -2147483648
  %add3298 = add nsw i32 %sub3297, -2147483648
  br label %cond.end.3299

cond.end.3299:                                    ; preds = %cond.false.3293, %cond.true.3289
  %cond3300 = phi i32 [ %add3292, %cond.true.3289 ], [ %add3298, %cond.false.3293 ]
  %conv3301 = sext i32 %cond3300 to i64
  store i64 %conv3301, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3302:                                  ; preds = %lor.lhs.false.3277
  %625 = load i64, i64* %nchars, align 8
  %conv3303 = trunc i64 %625 to i32
  %626 = load i64, i64* %thrice_byte8_count, align 8
  %conv3304 = trunc i64 %626 to i32
  %add3305 = add i32 %conv3303, %conv3304
  %cmp3306 = icmp ule i32 %add3305, 2147483647
  br i1 %cmp3306, label %cond.true.3308, label %cond.false.3312

cond.true.3308:                                   ; preds = %cond.false.3302
  %627 = load i64, i64* %nchars, align 8
  %conv3309 = trunc i64 %627 to i32
  %628 = load i64, i64* %thrice_byte8_count, align 8
  %conv3310 = trunc i64 %628 to i32
  %add3311 = add i32 %conv3309, %conv3310
  br label %cond.end.3318

cond.false.3312:                                  ; preds = %cond.false.3302
  %629 = load i64, i64* %nchars, align 8
  %conv3313 = trunc i64 %629 to i32
  %630 = load i64, i64* %thrice_byte8_count, align 8
  %conv3314 = trunc i64 %630 to i32
  %add3315 = add i32 %conv3313, %conv3314
  %sub3316 = sub i32 %add3315, -2147483648
  %add3317 = add nsw i32 %sub3316, -2147483648
  br label %cond.end.3318

cond.end.3318:                                    ; preds = %cond.false.3312, %cond.true.3308
  %cond3319 = phi i32 [ %add3311, %cond.true.3308 ], [ %add3317, %cond.false.3312 ]
  %conv3320 = sext i32 %cond3319 to i64
  store i64 %conv3320, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3321:                                  ; preds = %cond.true.3108
  %631 = load i64, i64* %thrice_byte8_count, align 8
  %mul3322 = mul nsw i64 0, %631
  %632 = load i64, i64* %nchars, align 8
  %add3323 = add nsw i64 %mul3322, %632
  %mul3324 = mul nsw i64 0, %add3323
  %sub3325 = sub nsw i64 %mul3324, 1
  %cmp3326 = icmp slt i64 %sub3325, 0
  br i1 %cmp3326, label %cond.true.3328, label %cond.false.3347

cond.true.3328:                                   ; preds = %cond.false.3321
  %633 = load i64, i64* %thrice_byte8_count, align 8
  %mul3329 = mul nsw i64 0, %633
  %634 = load i64, i64* %nchars, align 8
  %add3330 = add nsw i64 %mul3329, %634
  %mul3331 = mul nsw i64 0, %add3330
  %add3332 = add nsw i64 %mul3331, 0
  %neg3333 = xor i64 %add3332, -1
  %cmp3334 = icmp eq i64 %neg3333, -1
  %conv3335 = zext i1 %cmp3334 to i32
  %sub3336 = sub nsw i32 0, %conv3335
  %conv3337 = sext i32 %sub3336 to i64
  %635 = load i64, i64* %thrice_byte8_count, align 8
  %mul3338 = mul nsw i64 0, %635
  %636 = load i64, i64* %nchars, align 8
  %add3339 = add nsw i64 %mul3338, %636
  %mul3340 = mul nsw i64 0, %add3339
  %add3341 = add nsw i64 %mul3340, 1
  %shl3342 = shl i64 %add3341, 62
  %sub3343 = sub nsw i64 %shl3342, 1
  %mul3344 = mul nsw i64 %sub3343, 2
  %add3345 = add nsw i64 %mul3344, 1
  %sub3346 = sub nsw i64 %conv3337, %add3345
  br label %cond.end.3352

cond.false.3347:                                  ; preds = %cond.false.3321
  %637 = load i64, i64* %thrice_byte8_count, align 8
  %mul3348 = mul nsw i64 0, %637
  %638 = load i64, i64* %nchars, align 8
  %add3349 = add nsw i64 %mul3348, %638
  %mul3350 = mul nsw i64 0, %add3349
  %add3351 = add nsw i64 %mul3350, 0
  br label %cond.end.3352

cond.end.3352:                                    ; preds = %cond.false.3347, %cond.true.3328
  %cond3353 = phi i64 [ %sub3346, %cond.true.3328 ], [ %add3351, %cond.false.3347 ]
  %cmp3354 = icmp slt i64 %cond3353, 0
  br i1 %cmp3354, label %cond.true.3356, label %cond.false.3421

cond.true.3356:                                   ; preds = %cond.end.3352
  %639 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3357 = icmp slt i64 %639, 0
  br i1 %cmp3357, label %cond.true.3359, label %cond.false.3395

cond.true.3359:                                   ; preds = %cond.true.3356
  %640 = load i64, i64* %nchars, align 8
  %641 = load i64, i64* %thrice_byte8_count, align 8
  %mul3360 = mul nsw i64 0, %641
  %642 = load i64, i64* %nchars, align 8
  %add3361 = add nsw i64 %mul3360, %642
  %mul3362 = mul nsw i64 0, %add3361
  %sub3363 = sub nsw i64 %mul3362, 1
  %cmp3364 = icmp slt i64 %sub3363, 0
  br i1 %cmp3364, label %cond.true.3366, label %cond.false.3385

cond.true.3366:                                   ; preds = %cond.true.3359
  %643 = load i64, i64* %thrice_byte8_count, align 8
  %mul3367 = mul nsw i64 0, %643
  %644 = load i64, i64* %nchars, align 8
  %add3368 = add nsw i64 %mul3367, %644
  %mul3369 = mul nsw i64 0, %add3368
  %add3370 = add nsw i64 %mul3369, 0
  %neg3371 = xor i64 %add3370, -1
  %cmp3372 = icmp eq i64 %neg3371, -1
  %conv3373 = zext i1 %cmp3372 to i32
  %sub3374 = sub nsw i32 0, %conv3373
  %conv3375 = sext i32 %sub3374 to i64
  %645 = load i64, i64* %thrice_byte8_count, align 8
  %mul3376 = mul nsw i64 0, %645
  %646 = load i64, i64* %nchars, align 8
  %add3377 = add nsw i64 %mul3376, %646
  %mul3378 = mul nsw i64 0, %add3377
  %add3379 = add nsw i64 %mul3378, 1
  %shl3380 = shl i64 %add3379, 62
  %sub3381 = sub nsw i64 %shl3380, 1
  %mul3382 = mul nsw i64 %sub3381, 2
  %add3383 = add nsw i64 %mul3382, 1
  %sub3384 = sub nsw i64 %conv3375, %add3383
  br label %cond.end.3390

cond.false.3385:                                  ; preds = %cond.true.3359
  %647 = load i64, i64* %thrice_byte8_count, align 8
  %mul3386 = mul nsw i64 0, %647
  %648 = load i64, i64* %nchars, align 8
  %add3387 = add nsw i64 %mul3386, %648
  %mul3388 = mul nsw i64 0, %add3387
  %add3389 = add nsw i64 %mul3388, 0
  br label %cond.end.3390

cond.end.3390:                                    ; preds = %cond.false.3385, %cond.true.3366
  %cond3391 = phi i64 [ %sub3384, %cond.true.3366 ], [ %add3389, %cond.false.3385 ]
  %649 = load i64, i64* %thrice_byte8_count, align 8
  %sub3392 = sub nsw i64 %cond3391, %649
  %cmp3393 = icmp slt i64 %640, %sub3392
  br i1 %cmp3393, label %cond.true.3453, label %lor.lhs.false.3439

cond.false.3395:                                  ; preds = %cond.true.3356
  %650 = load i64, i64* %thrice_byte8_count, align 8
  %mul3396 = mul nsw i64 0, %650
  %651 = load i64, i64* %nchars, align 8
  %add3397 = add nsw i64 %mul3396, %651
  %mul3398 = mul nsw i64 0, %add3397
  %sub3399 = sub nsw i64 %mul3398, 1
  %cmp3400 = icmp slt i64 %sub3399, 0
  br i1 %cmp3400, label %cond.true.3402, label %cond.false.3411

cond.true.3402:                                   ; preds = %cond.false.3395
  %652 = load i64, i64* %thrice_byte8_count, align 8
  %mul3403 = mul nsw i64 0, %652
  %653 = load i64, i64* %nchars, align 8
  %add3404 = add nsw i64 %mul3403, %653
  %mul3405 = mul nsw i64 0, %add3404
  %add3406 = add nsw i64 %mul3405, 1
  %shl3407 = shl i64 %add3406, 62
  %sub3408 = sub nsw i64 %shl3407, 1
  %mul3409 = mul nsw i64 %sub3408, 2
  %add3410 = add nsw i64 %mul3409, 1
  br label %cond.end.3416

cond.false.3411:                                  ; preds = %cond.false.3395
  %654 = load i64, i64* %thrice_byte8_count, align 8
  %mul3412 = mul nsw i64 0, %654
  %655 = load i64, i64* %nchars, align 8
  %add3413 = add nsw i64 %mul3412, %655
  %mul3414 = mul nsw i64 0, %add3413
  %sub3415 = sub nsw i64 %mul3414, 1
  br label %cond.end.3416

cond.end.3416:                                    ; preds = %cond.false.3411, %cond.true.3402
  %cond3417 = phi i64 [ %add3410, %cond.true.3402 ], [ %sub3415, %cond.false.3411 ]
  %656 = load i64, i64* %thrice_byte8_count, align 8
  %sub3418 = sub nsw i64 %cond3417, %656
  %657 = load i64, i64* %nchars, align 8
  %cmp3419 = icmp slt i64 %sub3418, %657
  br i1 %cmp3419, label %cond.true.3453, label %lor.lhs.false.3439

cond.false.3421:                                  ; preds = %cond.end.3352
  %658 = load i64, i64* %nchars, align 8
  %cmp3422 = icmp slt i64 %658, 0
  br i1 %cmp3422, label %cond.true.3424, label %cond.false.3428

cond.true.3424:                                   ; preds = %cond.false.3421
  %659 = load i64, i64* %thrice_byte8_count, align 8
  %660 = load i64, i64* %nchars, align 8
  %661 = load i64, i64* %thrice_byte8_count, align 8
  %add3425 = add nsw i64 %660, %661
  %cmp3426 = icmp sle i64 %659, %add3425
  br i1 %cmp3426, label %cond.true.3453, label %lor.lhs.false.3439

cond.false.3428:                                  ; preds = %cond.false.3421
  %662 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3429 = icmp slt i64 %662, 0
  br i1 %cmp3429, label %cond.true.3431, label %cond.false.3435

cond.true.3431:                                   ; preds = %cond.false.3428
  %663 = load i64, i64* %nchars, align 8
  %664 = load i64, i64* %nchars, align 8
  %665 = load i64, i64* %thrice_byte8_count, align 8
  %add3432 = add nsw i64 %664, %665
  %cmp3433 = icmp sle i64 %663, %add3432
  br i1 %cmp3433, label %cond.true.3453, label %lor.lhs.false.3439

cond.false.3435:                                  ; preds = %cond.false.3428
  %666 = load i64, i64* %nchars, align 8
  %667 = load i64, i64* %thrice_byte8_count, align 8
  %add3436 = add nsw i64 %666, %667
  %668 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3437 = icmp slt i64 %add3436, %668
  br i1 %cmp3437, label %cond.true.3453, label %lor.lhs.false.3439

lor.lhs.false.3439:                               ; preds = %cond.false.3435, %cond.true.3431, %cond.true.3424, %cond.end.3416, %cond.end.3390
  %669 = load i64, i64* %nchars, align 8
  %670 = load i64, i64* %thrice_byte8_count, align 8
  %add3440 = add nsw i64 %669, %670
  %mul3441 = mul nsw i64 0, %add3440
  %sub3442 = sub nsw i64 %mul3441, 1
  %cmp3443 = icmp slt i64 %sub3442, 0
  br i1 %cmp3443, label %land.lhs.true.3445, label %lor.lhs.false.3449

land.lhs.true.3445:                               ; preds = %lor.lhs.false.3439
  %671 = load i64, i64* %nchars, align 8
  %672 = load i64, i64* %thrice_byte8_count, align 8
  %add3446 = add nsw i64 %671, %672
  %cmp3447 = icmp slt i64 %add3446, -2147483648
  br i1 %cmp3447, label %cond.true.3453, label %lor.lhs.false.3449

lor.lhs.false.3449:                               ; preds = %land.lhs.true.3445, %lor.lhs.false.3439
  %673 = load i64, i64* %nchars, align 8
  %674 = load i64, i64* %thrice_byte8_count, align 8
  %add3450 = add nsw i64 %673, %674
  %cmp3451 = icmp slt i64 2147483647, %add3450
  br i1 %cmp3451, label %cond.true.3453, label %cond.false.3472

cond.true.3453:                                   ; preds = %lor.lhs.false.3449, %land.lhs.true.3445, %cond.false.3435, %cond.true.3431, %cond.true.3424, %cond.end.3416, %cond.end.3390
  %675 = load i64, i64* %nchars, align 8
  %conv3454 = trunc i64 %675 to i32
  %676 = load i64, i64* %thrice_byte8_count, align 8
  %conv3455 = trunc i64 %676 to i32
  %add3456 = add i32 %conv3454, %conv3455
  %cmp3457 = icmp ule i32 %add3456, 2147483647
  br i1 %cmp3457, label %cond.true.3459, label %cond.false.3463

cond.true.3459:                                   ; preds = %cond.true.3453
  %677 = load i64, i64* %nchars, align 8
  %conv3460 = trunc i64 %677 to i32
  %678 = load i64, i64* %thrice_byte8_count, align 8
  %conv3461 = trunc i64 %678 to i32
  %add3462 = add i32 %conv3460, %conv3461
  br label %cond.end.3469

cond.false.3463:                                  ; preds = %cond.true.3453
  %679 = load i64, i64* %nchars, align 8
  %conv3464 = trunc i64 %679 to i32
  %680 = load i64, i64* %thrice_byte8_count, align 8
  %conv3465 = trunc i64 %680 to i32
  %add3466 = add i32 %conv3464, %conv3465
  %sub3467 = sub i32 %add3466, -2147483648
  %add3468 = add nsw i32 %sub3467, -2147483648
  br label %cond.end.3469

cond.end.3469:                                    ; preds = %cond.false.3463, %cond.true.3459
  %cond3470 = phi i32 [ %add3462, %cond.true.3459 ], [ %add3468, %cond.false.3463 ]
  %conv3471 = sext i32 %cond3470 to i64
  store i64 %conv3471, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3472:                                  ; preds = %lor.lhs.false.3449
  %681 = load i64, i64* %nchars, align 8
  %conv3473 = trunc i64 %681 to i32
  %682 = load i64, i64* %thrice_byte8_count, align 8
  %conv3474 = trunc i64 %682 to i32
  %add3475 = add i32 %conv3473, %conv3474
  %cmp3476 = icmp ule i32 %add3475, 2147483647
  br i1 %cmp3476, label %cond.true.3478, label %cond.false.3482

cond.true.3478:                                   ; preds = %cond.false.3472
  %683 = load i64, i64* %nchars, align 8
  %conv3479 = trunc i64 %683 to i32
  %684 = load i64, i64* %thrice_byte8_count, align 8
  %conv3480 = trunc i64 %684 to i32
  %add3481 = add i32 %conv3479, %conv3480
  br label %cond.end.3488

cond.false.3482:                                  ; preds = %cond.false.3472
  %685 = load i64, i64* %nchars, align 8
  %conv3483 = trunc i64 %685 to i32
  %686 = load i64, i64* %thrice_byte8_count, align 8
  %conv3484 = trunc i64 %686 to i32
  %add3485 = add i32 %conv3483, %conv3484
  %sub3486 = sub i32 %add3485, -2147483648
  %add3487 = add nsw i32 %sub3486, -2147483648
  br label %cond.end.3488

cond.end.3488:                                    ; preds = %cond.false.3482, %cond.true.3478
  %cond3489 = phi i32 [ %add3481, %cond.true.3478 ], [ %add3487, %cond.false.3482 ]
  %conv3490 = sext i32 %cond3489 to i64
  store i64 %conv3490, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3491:                                  ; preds = %cond.false.3107
  br i1 true, label %cond.true.3492, label %cond.false.3805

cond.true.3492:                                   ; preds = %cond.false.3491
  br i1 false, label %cond.true.3493, label %cond.false.3649

cond.true.3493:                                   ; preds = %cond.true.3492
  %687 = load i64, i64* %thrice_byte8_count, align 8
  %mul3494 = mul nsw i64 0, %687
  %688 = load i64, i64* %nchars, align 8
  %add3495 = add nsw i64 %mul3494, %688
  %mul3496 = mul nsw i64 0, %add3495
  %sub3497 = sub nsw i64 %mul3496, 1
  %cmp3498 = icmp slt i64 %sub3497, 0
  br i1 %cmp3498, label %cond.true.3500, label %cond.false.3519

cond.true.3500:                                   ; preds = %cond.true.3493
  %689 = load i64, i64* %thrice_byte8_count, align 8
  %mul3501 = mul nsw i64 0, %689
  %690 = load i64, i64* %nchars, align 8
  %add3502 = add nsw i64 %mul3501, %690
  %mul3503 = mul nsw i64 0, %add3502
  %add3504 = add nsw i64 %mul3503, 0
  %neg3505 = xor i64 %add3504, -1
  %cmp3506 = icmp eq i64 %neg3505, -1
  %conv3507 = zext i1 %cmp3506 to i32
  %sub3508 = sub nsw i32 0, %conv3507
  %conv3509 = sext i32 %sub3508 to i64
  %691 = load i64, i64* %thrice_byte8_count, align 8
  %mul3510 = mul nsw i64 0, %691
  %692 = load i64, i64* %nchars, align 8
  %add3511 = add nsw i64 %mul3510, %692
  %mul3512 = mul nsw i64 0, %add3511
  %add3513 = add nsw i64 %mul3512, 1
  %shl3514 = shl i64 %add3513, 62
  %sub3515 = sub nsw i64 %shl3514, 1
  %mul3516 = mul nsw i64 %sub3515, 2
  %add3517 = add nsw i64 %mul3516, 1
  %sub3518 = sub nsw i64 %conv3509, %add3517
  br label %cond.end.3524

cond.false.3519:                                  ; preds = %cond.true.3493
  %693 = load i64, i64* %thrice_byte8_count, align 8
  %mul3520 = mul nsw i64 0, %693
  %694 = load i64, i64* %nchars, align 8
  %add3521 = add nsw i64 %mul3520, %694
  %mul3522 = mul nsw i64 0, %add3521
  %add3523 = add nsw i64 %mul3522, 0
  br label %cond.end.3524

cond.end.3524:                                    ; preds = %cond.false.3519, %cond.true.3500
  %cond3525 = phi i64 [ %sub3518, %cond.true.3500 ], [ %add3523, %cond.false.3519 ]
  %cmp3526 = icmp slt i64 %cond3525, 0
  br i1 %cmp3526, label %cond.true.3528, label %cond.false.3593

cond.true.3528:                                   ; preds = %cond.end.3524
  %695 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3529 = icmp slt i64 %695, 0
  br i1 %cmp3529, label %cond.true.3531, label %cond.false.3567

cond.true.3531:                                   ; preds = %cond.true.3528
  %696 = load i64, i64* %nchars, align 8
  %697 = load i64, i64* %thrice_byte8_count, align 8
  %mul3532 = mul nsw i64 0, %697
  %698 = load i64, i64* %nchars, align 8
  %add3533 = add nsw i64 %mul3532, %698
  %mul3534 = mul nsw i64 0, %add3533
  %sub3535 = sub nsw i64 %mul3534, 1
  %cmp3536 = icmp slt i64 %sub3535, 0
  br i1 %cmp3536, label %cond.true.3538, label %cond.false.3557

cond.true.3538:                                   ; preds = %cond.true.3531
  %699 = load i64, i64* %thrice_byte8_count, align 8
  %mul3539 = mul nsw i64 0, %699
  %700 = load i64, i64* %nchars, align 8
  %add3540 = add nsw i64 %mul3539, %700
  %mul3541 = mul nsw i64 0, %add3540
  %add3542 = add nsw i64 %mul3541, 0
  %neg3543 = xor i64 %add3542, -1
  %cmp3544 = icmp eq i64 %neg3543, -1
  %conv3545 = zext i1 %cmp3544 to i32
  %sub3546 = sub nsw i32 0, %conv3545
  %conv3547 = sext i32 %sub3546 to i64
  %701 = load i64, i64* %thrice_byte8_count, align 8
  %mul3548 = mul nsw i64 0, %701
  %702 = load i64, i64* %nchars, align 8
  %add3549 = add nsw i64 %mul3548, %702
  %mul3550 = mul nsw i64 0, %add3549
  %add3551 = add nsw i64 %mul3550, 1
  %shl3552 = shl i64 %add3551, 62
  %sub3553 = sub nsw i64 %shl3552, 1
  %mul3554 = mul nsw i64 %sub3553, 2
  %add3555 = add nsw i64 %mul3554, 1
  %sub3556 = sub nsw i64 %conv3547, %add3555
  br label %cond.end.3562

cond.false.3557:                                  ; preds = %cond.true.3531
  %703 = load i64, i64* %thrice_byte8_count, align 8
  %mul3558 = mul nsw i64 0, %703
  %704 = load i64, i64* %nchars, align 8
  %add3559 = add nsw i64 %mul3558, %704
  %mul3560 = mul nsw i64 0, %add3559
  %add3561 = add nsw i64 %mul3560, 0
  br label %cond.end.3562

cond.end.3562:                                    ; preds = %cond.false.3557, %cond.true.3538
  %cond3563 = phi i64 [ %sub3556, %cond.true.3538 ], [ %add3561, %cond.false.3557 ]
  %705 = load i64, i64* %thrice_byte8_count, align 8
  %sub3564 = sub nsw i64 %cond3563, %705
  %cmp3565 = icmp slt i64 %696, %sub3564
  br i1 %cmp3565, label %cond.true.3625, label %lor.lhs.false.3611

cond.false.3567:                                  ; preds = %cond.true.3528
  %706 = load i64, i64* %thrice_byte8_count, align 8
  %mul3568 = mul nsw i64 0, %706
  %707 = load i64, i64* %nchars, align 8
  %add3569 = add nsw i64 %mul3568, %707
  %mul3570 = mul nsw i64 0, %add3569
  %sub3571 = sub nsw i64 %mul3570, 1
  %cmp3572 = icmp slt i64 %sub3571, 0
  br i1 %cmp3572, label %cond.true.3574, label %cond.false.3583

cond.true.3574:                                   ; preds = %cond.false.3567
  %708 = load i64, i64* %thrice_byte8_count, align 8
  %mul3575 = mul nsw i64 0, %708
  %709 = load i64, i64* %nchars, align 8
  %add3576 = add nsw i64 %mul3575, %709
  %mul3577 = mul nsw i64 0, %add3576
  %add3578 = add nsw i64 %mul3577, 1
  %shl3579 = shl i64 %add3578, 62
  %sub3580 = sub nsw i64 %shl3579, 1
  %mul3581 = mul nsw i64 %sub3580, 2
  %add3582 = add nsw i64 %mul3581, 1
  br label %cond.end.3588

cond.false.3583:                                  ; preds = %cond.false.3567
  %710 = load i64, i64* %thrice_byte8_count, align 8
  %mul3584 = mul nsw i64 0, %710
  %711 = load i64, i64* %nchars, align 8
  %add3585 = add nsw i64 %mul3584, %711
  %mul3586 = mul nsw i64 0, %add3585
  %sub3587 = sub nsw i64 %mul3586, 1
  br label %cond.end.3588

cond.end.3588:                                    ; preds = %cond.false.3583, %cond.true.3574
  %cond3589 = phi i64 [ %add3582, %cond.true.3574 ], [ %sub3587, %cond.false.3583 ]
  %712 = load i64, i64* %thrice_byte8_count, align 8
  %sub3590 = sub nsw i64 %cond3589, %712
  %713 = load i64, i64* %nchars, align 8
  %cmp3591 = icmp slt i64 %sub3590, %713
  br i1 %cmp3591, label %cond.true.3625, label %lor.lhs.false.3611

cond.false.3593:                                  ; preds = %cond.end.3524
  %714 = load i64, i64* %nchars, align 8
  %cmp3594 = icmp slt i64 %714, 0
  br i1 %cmp3594, label %cond.true.3596, label %cond.false.3600

cond.true.3596:                                   ; preds = %cond.false.3593
  %715 = load i64, i64* %thrice_byte8_count, align 8
  %716 = load i64, i64* %nchars, align 8
  %717 = load i64, i64* %thrice_byte8_count, align 8
  %add3597 = add nsw i64 %716, %717
  %cmp3598 = icmp sle i64 %715, %add3597
  br i1 %cmp3598, label %cond.true.3625, label %lor.lhs.false.3611

cond.false.3600:                                  ; preds = %cond.false.3593
  %718 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3601 = icmp slt i64 %718, 0
  br i1 %cmp3601, label %cond.true.3603, label %cond.false.3607

cond.true.3603:                                   ; preds = %cond.false.3600
  %719 = load i64, i64* %nchars, align 8
  %720 = load i64, i64* %nchars, align 8
  %721 = load i64, i64* %thrice_byte8_count, align 8
  %add3604 = add nsw i64 %720, %721
  %cmp3605 = icmp sle i64 %719, %add3604
  br i1 %cmp3605, label %cond.true.3625, label %lor.lhs.false.3611

cond.false.3607:                                  ; preds = %cond.false.3600
  %722 = load i64, i64* %nchars, align 8
  %723 = load i64, i64* %thrice_byte8_count, align 8
  %add3608 = add nsw i64 %722, %723
  %724 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3609 = icmp slt i64 %add3608, %724
  br i1 %cmp3609, label %cond.true.3625, label %lor.lhs.false.3611

lor.lhs.false.3611:                               ; preds = %cond.false.3607, %cond.true.3603, %cond.true.3596, %cond.end.3588, %cond.end.3562
  %725 = load i64, i64* %nchars, align 8
  %726 = load i64, i64* %thrice_byte8_count, align 8
  %add3612 = add nsw i64 %725, %726
  %mul3613 = mul nsw i64 0, %add3612
  %sub3614 = sub nsw i64 %mul3613, 1
  %cmp3615 = icmp slt i64 %sub3614, 0
  br i1 %cmp3615, label %land.lhs.true.3617, label %lor.lhs.false.3621

land.lhs.true.3617:                               ; preds = %lor.lhs.false.3611
  %727 = load i64, i64* %nchars, align 8
  %728 = load i64, i64* %thrice_byte8_count, align 8
  %add3618 = add nsw i64 %727, %728
  %cmp3619 = icmp slt i64 %add3618, -9223372036854775808
  br i1 %cmp3619, label %cond.true.3625, label %lor.lhs.false.3621

lor.lhs.false.3621:                               ; preds = %land.lhs.true.3617, %lor.lhs.false.3611
  %729 = load i64, i64* %nchars, align 8
  %730 = load i64, i64* %thrice_byte8_count, align 8
  %add3622 = add nsw i64 %729, %730
  %cmp3623 = icmp slt i64 9223372036854775807, %add3622
  br i1 %cmp3623, label %cond.true.3625, label %cond.false.3637

cond.true.3625:                                   ; preds = %lor.lhs.false.3621, %land.lhs.true.3617, %cond.false.3607, %cond.true.3603, %cond.true.3596, %cond.end.3588, %cond.end.3562
  %731 = load i64, i64* %nchars, align 8
  %732 = load i64, i64* %thrice_byte8_count, align 8
  %add3626 = add i64 %731, %732
  %cmp3627 = icmp ule i64 %add3626, 9223372036854775807
  br i1 %cmp3627, label %cond.true.3629, label %cond.false.3631

cond.true.3629:                                   ; preds = %cond.true.3625
  %733 = load i64, i64* %nchars, align 8
  %734 = load i64, i64* %thrice_byte8_count, align 8
  %add3630 = add i64 %733, %734
  br label %cond.end.3635

cond.false.3631:                                  ; preds = %cond.true.3625
  %735 = load i64, i64* %nchars, align 8
  %736 = load i64, i64* %thrice_byte8_count, align 8
  %add3632 = add i64 %735, %736
  %sub3633 = sub i64 %add3632, -9223372036854775808
  %add3634 = add nsw i64 %sub3633, -9223372036854775808
  br label %cond.end.3635

cond.end.3635:                                    ; preds = %cond.false.3631, %cond.true.3629
  %cond3636 = phi i64 [ %add3630, %cond.true.3629 ], [ %add3634, %cond.false.3631 ]
  store i64 %cond3636, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3637:                                  ; preds = %lor.lhs.false.3621
  %737 = load i64, i64* %nchars, align 8
  %738 = load i64, i64* %thrice_byte8_count, align 8
  %add3638 = add i64 %737, %738
  %cmp3639 = icmp ule i64 %add3638, 9223372036854775807
  br i1 %cmp3639, label %cond.true.3641, label %cond.false.3643

cond.true.3641:                                   ; preds = %cond.false.3637
  %739 = load i64, i64* %nchars, align 8
  %740 = load i64, i64* %thrice_byte8_count, align 8
  %add3642 = add i64 %739, %740
  br label %cond.end.3647

cond.false.3643:                                  ; preds = %cond.false.3637
  %741 = load i64, i64* %nchars, align 8
  %742 = load i64, i64* %thrice_byte8_count, align 8
  %add3644 = add i64 %741, %742
  %sub3645 = sub i64 %add3644, -9223372036854775808
  %add3646 = add nsw i64 %sub3645, -9223372036854775808
  br label %cond.end.3647

cond.end.3647:                                    ; preds = %cond.false.3643, %cond.true.3641
  %cond3648 = phi i64 [ %add3642, %cond.true.3641 ], [ %add3646, %cond.false.3643 ]
  store i64 %cond3648, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3649:                                  ; preds = %cond.true.3492
  %743 = load i64, i64* %thrice_byte8_count, align 8
  %mul3650 = mul nsw i64 0, %743
  %744 = load i64, i64* %nchars, align 8
  %add3651 = add nsw i64 %mul3650, %744
  %mul3652 = mul nsw i64 0, %add3651
  %sub3653 = sub nsw i64 %mul3652, 1
  %cmp3654 = icmp slt i64 %sub3653, 0
  br i1 %cmp3654, label %cond.true.3656, label %cond.false.3675

cond.true.3656:                                   ; preds = %cond.false.3649
  %745 = load i64, i64* %thrice_byte8_count, align 8
  %mul3657 = mul nsw i64 0, %745
  %746 = load i64, i64* %nchars, align 8
  %add3658 = add nsw i64 %mul3657, %746
  %mul3659 = mul nsw i64 0, %add3658
  %add3660 = add nsw i64 %mul3659, 0
  %neg3661 = xor i64 %add3660, -1
  %cmp3662 = icmp eq i64 %neg3661, -1
  %conv3663 = zext i1 %cmp3662 to i32
  %sub3664 = sub nsw i32 0, %conv3663
  %conv3665 = sext i32 %sub3664 to i64
  %747 = load i64, i64* %thrice_byte8_count, align 8
  %mul3666 = mul nsw i64 0, %747
  %748 = load i64, i64* %nchars, align 8
  %add3667 = add nsw i64 %mul3666, %748
  %mul3668 = mul nsw i64 0, %add3667
  %add3669 = add nsw i64 %mul3668, 1
  %shl3670 = shl i64 %add3669, 62
  %sub3671 = sub nsw i64 %shl3670, 1
  %mul3672 = mul nsw i64 %sub3671, 2
  %add3673 = add nsw i64 %mul3672, 1
  %sub3674 = sub nsw i64 %conv3665, %add3673
  br label %cond.end.3680

cond.false.3675:                                  ; preds = %cond.false.3649
  %749 = load i64, i64* %thrice_byte8_count, align 8
  %mul3676 = mul nsw i64 0, %749
  %750 = load i64, i64* %nchars, align 8
  %add3677 = add nsw i64 %mul3676, %750
  %mul3678 = mul nsw i64 0, %add3677
  %add3679 = add nsw i64 %mul3678, 0
  br label %cond.end.3680

cond.end.3680:                                    ; preds = %cond.false.3675, %cond.true.3656
  %cond3681 = phi i64 [ %sub3674, %cond.true.3656 ], [ %add3679, %cond.false.3675 ]
  %cmp3682 = icmp slt i64 %cond3681, 0
  br i1 %cmp3682, label %cond.true.3684, label %cond.false.3749

cond.true.3684:                                   ; preds = %cond.end.3680
  %751 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3685 = icmp slt i64 %751, 0
  br i1 %cmp3685, label %cond.true.3687, label %cond.false.3723

cond.true.3687:                                   ; preds = %cond.true.3684
  %752 = load i64, i64* %nchars, align 8
  %753 = load i64, i64* %thrice_byte8_count, align 8
  %mul3688 = mul nsw i64 0, %753
  %754 = load i64, i64* %nchars, align 8
  %add3689 = add nsw i64 %mul3688, %754
  %mul3690 = mul nsw i64 0, %add3689
  %sub3691 = sub nsw i64 %mul3690, 1
  %cmp3692 = icmp slt i64 %sub3691, 0
  br i1 %cmp3692, label %cond.true.3694, label %cond.false.3713

cond.true.3694:                                   ; preds = %cond.true.3687
  %755 = load i64, i64* %thrice_byte8_count, align 8
  %mul3695 = mul nsw i64 0, %755
  %756 = load i64, i64* %nchars, align 8
  %add3696 = add nsw i64 %mul3695, %756
  %mul3697 = mul nsw i64 0, %add3696
  %add3698 = add nsw i64 %mul3697, 0
  %neg3699 = xor i64 %add3698, -1
  %cmp3700 = icmp eq i64 %neg3699, -1
  %conv3701 = zext i1 %cmp3700 to i32
  %sub3702 = sub nsw i32 0, %conv3701
  %conv3703 = sext i32 %sub3702 to i64
  %757 = load i64, i64* %thrice_byte8_count, align 8
  %mul3704 = mul nsw i64 0, %757
  %758 = load i64, i64* %nchars, align 8
  %add3705 = add nsw i64 %mul3704, %758
  %mul3706 = mul nsw i64 0, %add3705
  %add3707 = add nsw i64 %mul3706, 1
  %shl3708 = shl i64 %add3707, 62
  %sub3709 = sub nsw i64 %shl3708, 1
  %mul3710 = mul nsw i64 %sub3709, 2
  %add3711 = add nsw i64 %mul3710, 1
  %sub3712 = sub nsw i64 %conv3703, %add3711
  br label %cond.end.3718

cond.false.3713:                                  ; preds = %cond.true.3687
  %759 = load i64, i64* %thrice_byte8_count, align 8
  %mul3714 = mul nsw i64 0, %759
  %760 = load i64, i64* %nchars, align 8
  %add3715 = add nsw i64 %mul3714, %760
  %mul3716 = mul nsw i64 0, %add3715
  %add3717 = add nsw i64 %mul3716, 0
  br label %cond.end.3718

cond.end.3718:                                    ; preds = %cond.false.3713, %cond.true.3694
  %cond3719 = phi i64 [ %sub3712, %cond.true.3694 ], [ %add3717, %cond.false.3713 ]
  %761 = load i64, i64* %thrice_byte8_count, align 8
  %sub3720 = sub nsw i64 %cond3719, %761
  %cmp3721 = icmp slt i64 %752, %sub3720
  br i1 %cmp3721, label %cond.true.3781, label %lor.lhs.false.3767

cond.false.3723:                                  ; preds = %cond.true.3684
  %762 = load i64, i64* %thrice_byte8_count, align 8
  %mul3724 = mul nsw i64 0, %762
  %763 = load i64, i64* %nchars, align 8
  %add3725 = add nsw i64 %mul3724, %763
  %mul3726 = mul nsw i64 0, %add3725
  %sub3727 = sub nsw i64 %mul3726, 1
  %cmp3728 = icmp slt i64 %sub3727, 0
  br i1 %cmp3728, label %cond.true.3730, label %cond.false.3739

cond.true.3730:                                   ; preds = %cond.false.3723
  %764 = load i64, i64* %thrice_byte8_count, align 8
  %mul3731 = mul nsw i64 0, %764
  %765 = load i64, i64* %nchars, align 8
  %add3732 = add nsw i64 %mul3731, %765
  %mul3733 = mul nsw i64 0, %add3732
  %add3734 = add nsw i64 %mul3733, 1
  %shl3735 = shl i64 %add3734, 62
  %sub3736 = sub nsw i64 %shl3735, 1
  %mul3737 = mul nsw i64 %sub3736, 2
  %add3738 = add nsw i64 %mul3737, 1
  br label %cond.end.3744

cond.false.3739:                                  ; preds = %cond.false.3723
  %766 = load i64, i64* %thrice_byte8_count, align 8
  %mul3740 = mul nsw i64 0, %766
  %767 = load i64, i64* %nchars, align 8
  %add3741 = add nsw i64 %mul3740, %767
  %mul3742 = mul nsw i64 0, %add3741
  %sub3743 = sub nsw i64 %mul3742, 1
  br label %cond.end.3744

cond.end.3744:                                    ; preds = %cond.false.3739, %cond.true.3730
  %cond3745 = phi i64 [ %add3738, %cond.true.3730 ], [ %sub3743, %cond.false.3739 ]
  %768 = load i64, i64* %thrice_byte8_count, align 8
  %sub3746 = sub nsw i64 %cond3745, %768
  %769 = load i64, i64* %nchars, align 8
  %cmp3747 = icmp slt i64 %sub3746, %769
  br i1 %cmp3747, label %cond.true.3781, label %lor.lhs.false.3767

cond.false.3749:                                  ; preds = %cond.end.3680
  %770 = load i64, i64* %nchars, align 8
  %cmp3750 = icmp slt i64 %770, 0
  br i1 %cmp3750, label %cond.true.3752, label %cond.false.3756

cond.true.3752:                                   ; preds = %cond.false.3749
  %771 = load i64, i64* %thrice_byte8_count, align 8
  %772 = load i64, i64* %nchars, align 8
  %773 = load i64, i64* %thrice_byte8_count, align 8
  %add3753 = add nsw i64 %772, %773
  %cmp3754 = icmp sle i64 %771, %add3753
  br i1 %cmp3754, label %cond.true.3781, label %lor.lhs.false.3767

cond.false.3756:                                  ; preds = %cond.false.3749
  %774 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3757 = icmp slt i64 %774, 0
  br i1 %cmp3757, label %cond.true.3759, label %cond.false.3763

cond.true.3759:                                   ; preds = %cond.false.3756
  %775 = load i64, i64* %nchars, align 8
  %776 = load i64, i64* %nchars, align 8
  %777 = load i64, i64* %thrice_byte8_count, align 8
  %add3760 = add nsw i64 %776, %777
  %cmp3761 = icmp sle i64 %775, %add3760
  br i1 %cmp3761, label %cond.true.3781, label %lor.lhs.false.3767

cond.false.3763:                                  ; preds = %cond.false.3756
  %778 = load i64, i64* %nchars, align 8
  %779 = load i64, i64* %thrice_byte8_count, align 8
  %add3764 = add nsw i64 %778, %779
  %780 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3765 = icmp slt i64 %add3764, %780
  br i1 %cmp3765, label %cond.true.3781, label %lor.lhs.false.3767

lor.lhs.false.3767:                               ; preds = %cond.false.3763, %cond.true.3759, %cond.true.3752, %cond.end.3744, %cond.end.3718
  %781 = load i64, i64* %nchars, align 8
  %782 = load i64, i64* %thrice_byte8_count, align 8
  %add3768 = add nsw i64 %781, %782
  %mul3769 = mul nsw i64 0, %add3768
  %sub3770 = sub nsw i64 %mul3769, 1
  %cmp3771 = icmp slt i64 %sub3770, 0
  br i1 %cmp3771, label %land.lhs.true.3773, label %lor.lhs.false.3777

land.lhs.true.3773:                               ; preds = %lor.lhs.false.3767
  %783 = load i64, i64* %nchars, align 8
  %784 = load i64, i64* %thrice_byte8_count, align 8
  %add3774 = add nsw i64 %783, %784
  %cmp3775 = icmp slt i64 %add3774, -9223372036854775808
  br i1 %cmp3775, label %cond.true.3781, label %lor.lhs.false.3777

lor.lhs.false.3777:                               ; preds = %land.lhs.true.3773, %lor.lhs.false.3767
  %785 = load i64, i64* %nchars, align 8
  %786 = load i64, i64* %thrice_byte8_count, align 8
  %add3778 = add nsw i64 %785, %786
  %cmp3779 = icmp slt i64 9223372036854775807, %add3778
  br i1 %cmp3779, label %cond.true.3781, label %cond.false.3793

cond.true.3781:                                   ; preds = %lor.lhs.false.3777, %land.lhs.true.3773, %cond.false.3763, %cond.true.3759, %cond.true.3752, %cond.end.3744, %cond.end.3718
  %787 = load i64, i64* %nchars, align 8
  %788 = load i64, i64* %thrice_byte8_count, align 8
  %add3782 = add i64 %787, %788
  %cmp3783 = icmp ule i64 %add3782, 9223372036854775807
  br i1 %cmp3783, label %cond.true.3785, label %cond.false.3787

cond.true.3785:                                   ; preds = %cond.true.3781
  %789 = load i64, i64* %nchars, align 8
  %790 = load i64, i64* %thrice_byte8_count, align 8
  %add3786 = add i64 %789, %790
  br label %cond.end.3791

cond.false.3787:                                  ; preds = %cond.true.3781
  %791 = load i64, i64* %nchars, align 8
  %792 = load i64, i64* %thrice_byte8_count, align 8
  %add3788 = add i64 %791, %792
  %sub3789 = sub i64 %add3788, -9223372036854775808
  %add3790 = add nsw i64 %sub3789, -9223372036854775808
  br label %cond.end.3791

cond.end.3791:                                    ; preds = %cond.false.3787, %cond.true.3785
  %cond3792 = phi i64 [ %add3786, %cond.true.3785 ], [ %add3790, %cond.false.3787 ]
  store i64 %cond3792, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3793:                                  ; preds = %lor.lhs.false.3777
  %793 = load i64, i64* %nchars, align 8
  %794 = load i64, i64* %thrice_byte8_count, align 8
  %add3794 = add i64 %793, %794
  %cmp3795 = icmp ule i64 %add3794, 9223372036854775807
  br i1 %cmp3795, label %cond.true.3797, label %cond.false.3799

cond.true.3797:                                   ; preds = %cond.false.3793
  %795 = load i64, i64* %nchars, align 8
  %796 = load i64, i64* %thrice_byte8_count, align 8
  %add3798 = add i64 %795, %796
  br label %cond.end.3803

cond.false.3799:                                  ; preds = %cond.false.3793
  %797 = load i64, i64* %nchars, align 8
  %798 = load i64, i64* %thrice_byte8_count, align 8
  %add3800 = add i64 %797, %798
  %sub3801 = sub i64 %add3800, -9223372036854775808
  %add3802 = add nsw i64 %sub3801, -9223372036854775808
  br label %cond.end.3803

cond.end.3803:                                    ; preds = %cond.false.3799, %cond.true.3797
  %cond3804 = phi i64 [ %add3798, %cond.true.3797 ], [ %add3802, %cond.false.3799 ]
  store i64 %cond3804, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3805:                                  ; preds = %cond.false.3491
  br i1 false, label %cond.true.3806, label %cond.false.3962

cond.true.3806:                                   ; preds = %cond.false.3805
  %799 = load i64, i64* %thrice_byte8_count, align 8
  %mul3807 = mul nsw i64 0, %799
  %800 = load i64, i64* %nchars, align 8
  %add3808 = add nsw i64 %mul3807, %800
  %mul3809 = mul nsw i64 0, %add3808
  %sub3810 = sub nsw i64 %mul3809, 1
  %cmp3811 = icmp slt i64 %sub3810, 0
  br i1 %cmp3811, label %cond.true.3813, label %cond.false.3832

cond.true.3813:                                   ; preds = %cond.true.3806
  %801 = load i64, i64* %thrice_byte8_count, align 8
  %mul3814 = mul nsw i64 0, %801
  %802 = load i64, i64* %nchars, align 8
  %add3815 = add nsw i64 %mul3814, %802
  %mul3816 = mul nsw i64 0, %add3815
  %add3817 = add nsw i64 %mul3816, 0
  %neg3818 = xor i64 %add3817, -1
  %cmp3819 = icmp eq i64 %neg3818, -1
  %conv3820 = zext i1 %cmp3819 to i32
  %sub3821 = sub nsw i32 0, %conv3820
  %conv3822 = sext i32 %sub3821 to i64
  %803 = load i64, i64* %thrice_byte8_count, align 8
  %mul3823 = mul nsw i64 0, %803
  %804 = load i64, i64* %nchars, align 8
  %add3824 = add nsw i64 %mul3823, %804
  %mul3825 = mul nsw i64 0, %add3824
  %add3826 = add nsw i64 %mul3825, 1
  %shl3827 = shl i64 %add3826, 62
  %sub3828 = sub nsw i64 %shl3827, 1
  %mul3829 = mul nsw i64 %sub3828, 2
  %add3830 = add nsw i64 %mul3829, 1
  %sub3831 = sub nsw i64 %conv3822, %add3830
  br label %cond.end.3837

cond.false.3832:                                  ; preds = %cond.true.3806
  %805 = load i64, i64* %thrice_byte8_count, align 8
  %mul3833 = mul nsw i64 0, %805
  %806 = load i64, i64* %nchars, align 8
  %add3834 = add nsw i64 %mul3833, %806
  %mul3835 = mul nsw i64 0, %add3834
  %add3836 = add nsw i64 %mul3835, 0
  br label %cond.end.3837

cond.end.3837:                                    ; preds = %cond.false.3832, %cond.true.3813
  %cond3838 = phi i64 [ %sub3831, %cond.true.3813 ], [ %add3836, %cond.false.3832 ]
  %cmp3839 = icmp slt i64 %cond3838, 0
  br i1 %cmp3839, label %cond.true.3841, label %cond.false.3906

cond.true.3841:                                   ; preds = %cond.end.3837
  %807 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3842 = icmp slt i64 %807, 0
  br i1 %cmp3842, label %cond.true.3844, label %cond.false.3880

cond.true.3844:                                   ; preds = %cond.true.3841
  %808 = load i64, i64* %nchars, align 8
  %809 = load i64, i64* %thrice_byte8_count, align 8
  %mul3845 = mul nsw i64 0, %809
  %810 = load i64, i64* %nchars, align 8
  %add3846 = add nsw i64 %mul3845, %810
  %mul3847 = mul nsw i64 0, %add3846
  %sub3848 = sub nsw i64 %mul3847, 1
  %cmp3849 = icmp slt i64 %sub3848, 0
  br i1 %cmp3849, label %cond.true.3851, label %cond.false.3870

cond.true.3851:                                   ; preds = %cond.true.3844
  %811 = load i64, i64* %thrice_byte8_count, align 8
  %mul3852 = mul nsw i64 0, %811
  %812 = load i64, i64* %nchars, align 8
  %add3853 = add nsw i64 %mul3852, %812
  %mul3854 = mul nsw i64 0, %add3853
  %add3855 = add nsw i64 %mul3854, 0
  %neg3856 = xor i64 %add3855, -1
  %cmp3857 = icmp eq i64 %neg3856, -1
  %conv3858 = zext i1 %cmp3857 to i32
  %sub3859 = sub nsw i32 0, %conv3858
  %conv3860 = sext i32 %sub3859 to i64
  %813 = load i64, i64* %thrice_byte8_count, align 8
  %mul3861 = mul nsw i64 0, %813
  %814 = load i64, i64* %nchars, align 8
  %add3862 = add nsw i64 %mul3861, %814
  %mul3863 = mul nsw i64 0, %add3862
  %add3864 = add nsw i64 %mul3863, 1
  %shl3865 = shl i64 %add3864, 62
  %sub3866 = sub nsw i64 %shl3865, 1
  %mul3867 = mul nsw i64 %sub3866, 2
  %add3868 = add nsw i64 %mul3867, 1
  %sub3869 = sub nsw i64 %conv3860, %add3868
  br label %cond.end.3875

cond.false.3870:                                  ; preds = %cond.true.3844
  %815 = load i64, i64* %thrice_byte8_count, align 8
  %mul3871 = mul nsw i64 0, %815
  %816 = load i64, i64* %nchars, align 8
  %add3872 = add nsw i64 %mul3871, %816
  %mul3873 = mul nsw i64 0, %add3872
  %add3874 = add nsw i64 %mul3873, 0
  br label %cond.end.3875

cond.end.3875:                                    ; preds = %cond.false.3870, %cond.true.3851
  %cond3876 = phi i64 [ %sub3869, %cond.true.3851 ], [ %add3874, %cond.false.3870 ]
  %817 = load i64, i64* %thrice_byte8_count, align 8
  %sub3877 = sub nsw i64 %cond3876, %817
  %cmp3878 = icmp slt i64 %808, %sub3877
  br i1 %cmp3878, label %cond.true.3938, label %lor.lhs.false.3924

cond.false.3880:                                  ; preds = %cond.true.3841
  %818 = load i64, i64* %thrice_byte8_count, align 8
  %mul3881 = mul nsw i64 0, %818
  %819 = load i64, i64* %nchars, align 8
  %add3882 = add nsw i64 %mul3881, %819
  %mul3883 = mul nsw i64 0, %add3882
  %sub3884 = sub nsw i64 %mul3883, 1
  %cmp3885 = icmp slt i64 %sub3884, 0
  br i1 %cmp3885, label %cond.true.3887, label %cond.false.3896

cond.true.3887:                                   ; preds = %cond.false.3880
  %820 = load i64, i64* %thrice_byte8_count, align 8
  %mul3888 = mul nsw i64 0, %820
  %821 = load i64, i64* %nchars, align 8
  %add3889 = add nsw i64 %mul3888, %821
  %mul3890 = mul nsw i64 0, %add3889
  %add3891 = add nsw i64 %mul3890, 1
  %shl3892 = shl i64 %add3891, 62
  %sub3893 = sub nsw i64 %shl3892, 1
  %mul3894 = mul nsw i64 %sub3893, 2
  %add3895 = add nsw i64 %mul3894, 1
  br label %cond.end.3901

cond.false.3896:                                  ; preds = %cond.false.3880
  %822 = load i64, i64* %thrice_byte8_count, align 8
  %mul3897 = mul nsw i64 0, %822
  %823 = load i64, i64* %nchars, align 8
  %add3898 = add nsw i64 %mul3897, %823
  %mul3899 = mul nsw i64 0, %add3898
  %sub3900 = sub nsw i64 %mul3899, 1
  br label %cond.end.3901

cond.end.3901:                                    ; preds = %cond.false.3896, %cond.true.3887
  %cond3902 = phi i64 [ %add3895, %cond.true.3887 ], [ %sub3900, %cond.false.3896 ]
  %824 = load i64, i64* %thrice_byte8_count, align 8
  %sub3903 = sub nsw i64 %cond3902, %824
  %825 = load i64, i64* %nchars, align 8
  %cmp3904 = icmp slt i64 %sub3903, %825
  br i1 %cmp3904, label %cond.true.3938, label %lor.lhs.false.3924

cond.false.3906:                                  ; preds = %cond.end.3837
  %826 = load i64, i64* %nchars, align 8
  %cmp3907 = icmp slt i64 %826, 0
  br i1 %cmp3907, label %cond.true.3909, label %cond.false.3913

cond.true.3909:                                   ; preds = %cond.false.3906
  %827 = load i64, i64* %thrice_byte8_count, align 8
  %828 = load i64, i64* %nchars, align 8
  %829 = load i64, i64* %thrice_byte8_count, align 8
  %add3910 = add nsw i64 %828, %829
  %cmp3911 = icmp sle i64 %827, %add3910
  br i1 %cmp3911, label %cond.true.3938, label %lor.lhs.false.3924

cond.false.3913:                                  ; preds = %cond.false.3906
  %830 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3914 = icmp slt i64 %830, 0
  br i1 %cmp3914, label %cond.true.3916, label %cond.false.3920

cond.true.3916:                                   ; preds = %cond.false.3913
  %831 = load i64, i64* %nchars, align 8
  %832 = load i64, i64* %nchars, align 8
  %833 = load i64, i64* %thrice_byte8_count, align 8
  %add3917 = add nsw i64 %832, %833
  %cmp3918 = icmp sle i64 %831, %add3917
  br i1 %cmp3918, label %cond.true.3938, label %lor.lhs.false.3924

cond.false.3920:                                  ; preds = %cond.false.3913
  %834 = load i64, i64* %nchars, align 8
  %835 = load i64, i64* %thrice_byte8_count, align 8
  %add3921 = add nsw i64 %834, %835
  %836 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3922 = icmp slt i64 %add3921, %836
  br i1 %cmp3922, label %cond.true.3938, label %lor.lhs.false.3924

lor.lhs.false.3924:                               ; preds = %cond.false.3920, %cond.true.3916, %cond.true.3909, %cond.end.3901, %cond.end.3875
  %837 = load i64, i64* %nchars, align 8
  %838 = load i64, i64* %thrice_byte8_count, align 8
  %add3925 = add nsw i64 %837, %838
  %mul3926 = mul nsw i64 0, %add3925
  %sub3927 = sub nsw i64 %mul3926, 1
  %cmp3928 = icmp slt i64 %sub3927, 0
  br i1 %cmp3928, label %land.lhs.true.3930, label %lor.lhs.false.3934

land.lhs.true.3930:                               ; preds = %lor.lhs.false.3924
  %839 = load i64, i64* %nchars, align 8
  %840 = load i64, i64* %thrice_byte8_count, align 8
  %add3931 = add nsw i64 %839, %840
  %cmp3932 = icmp slt i64 %add3931, -9223372036854775808
  br i1 %cmp3932, label %cond.true.3938, label %lor.lhs.false.3934

lor.lhs.false.3934:                               ; preds = %land.lhs.true.3930, %lor.lhs.false.3924
  %841 = load i64, i64* %nchars, align 8
  %842 = load i64, i64* %thrice_byte8_count, align 8
  %add3935 = add nsw i64 %841, %842
  %cmp3936 = icmp slt i64 9223372036854775807, %add3935
  br i1 %cmp3936, label %cond.true.3938, label %cond.false.3950

cond.true.3938:                                   ; preds = %lor.lhs.false.3934, %land.lhs.true.3930, %cond.false.3920, %cond.true.3916, %cond.true.3909, %cond.end.3901, %cond.end.3875
  %843 = load i64, i64* %nchars, align 8
  %844 = load i64, i64* %thrice_byte8_count, align 8
  %add3939 = add i64 %843, %844
  %cmp3940 = icmp ule i64 %add3939, 9223372036854775807
  br i1 %cmp3940, label %cond.true.3942, label %cond.false.3944

cond.true.3942:                                   ; preds = %cond.true.3938
  %845 = load i64, i64* %nchars, align 8
  %846 = load i64, i64* %thrice_byte8_count, align 8
  %add3943 = add i64 %845, %846
  br label %cond.end.3948

cond.false.3944:                                  ; preds = %cond.true.3938
  %847 = load i64, i64* %nchars, align 8
  %848 = load i64, i64* %thrice_byte8_count, align 8
  %add3945 = add i64 %847, %848
  %sub3946 = sub i64 %add3945, -9223372036854775808
  %add3947 = add nsw i64 %sub3946, -9223372036854775808
  br label %cond.end.3948

cond.end.3948:                                    ; preds = %cond.false.3944, %cond.true.3942
  %cond3949 = phi i64 [ %add3943, %cond.true.3942 ], [ %add3947, %cond.false.3944 ]
  store i64 %cond3949, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3950:                                  ; preds = %lor.lhs.false.3934
  %849 = load i64, i64* %nchars, align 8
  %850 = load i64, i64* %thrice_byte8_count, align 8
  %add3951 = add i64 %849, %850
  %cmp3952 = icmp ule i64 %add3951, 9223372036854775807
  br i1 %cmp3952, label %cond.true.3954, label %cond.false.3956

cond.true.3954:                                   ; preds = %cond.false.3950
  %851 = load i64, i64* %nchars, align 8
  %852 = load i64, i64* %thrice_byte8_count, align 8
  %add3955 = add i64 %851, %852
  br label %cond.end.3960

cond.false.3956:                                  ; preds = %cond.false.3950
  %853 = load i64, i64* %nchars, align 8
  %854 = load i64, i64* %thrice_byte8_count, align 8
  %add3957 = add i64 %853, %854
  %sub3958 = sub i64 %add3957, -9223372036854775808
  %add3959 = add nsw i64 %sub3958, -9223372036854775808
  br label %cond.end.3960

cond.end.3960:                                    ; preds = %cond.false.3956, %cond.true.3954
  %cond3961 = phi i64 [ %add3955, %cond.true.3954 ], [ %add3959, %cond.false.3956 ]
  store i64 %cond3961, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

cond.false.3962:                                  ; preds = %cond.false.3805
  %855 = load i64, i64* %thrice_byte8_count, align 8
  %mul3963 = mul nsw i64 0, %855
  %856 = load i64, i64* %nchars, align 8
  %add3964 = add nsw i64 %mul3963, %856
  %mul3965 = mul nsw i64 0, %add3964
  %sub3966 = sub nsw i64 %mul3965, 1
  %cmp3967 = icmp slt i64 %sub3966, 0
  br i1 %cmp3967, label %cond.true.3969, label %cond.false.3988

cond.true.3969:                                   ; preds = %cond.false.3962
  %857 = load i64, i64* %thrice_byte8_count, align 8
  %mul3970 = mul nsw i64 0, %857
  %858 = load i64, i64* %nchars, align 8
  %add3971 = add nsw i64 %mul3970, %858
  %mul3972 = mul nsw i64 0, %add3971
  %add3973 = add nsw i64 %mul3972, 0
  %neg3974 = xor i64 %add3973, -1
  %cmp3975 = icmp eq i64 %neg3974, -1
  %conv3976 = zext i1 %cmp3975 to i32
  %sub3977 = sub nsw i32 0, %conv3976
  %conv3978 = sext i32 %sub3977 to i64
  %859 = load i64, i64* %thrice_byte8_count, align 8
  %mul3979 = mul nsw i64 0, %859
  %860 = load i64, i64* %nchars, align 8
  %add3980 = add nsw i64 %mul3979, %860
  %mul3981 = mul nsw i64 0, %add3980
  %add3982 = add nsw i64 %mul3981, 1
  %shl3983 = shl i64 %add3982, 62
  %sub3984 = sub nsw i64 %shl3983, 1
  %mul3985 = mul nsw i64 %sub3984, 2
  %add3986 = add nsw i64 %mul3985, 1
  %sub3987 = sub nsw i64 %conv3978, %add3986
  br label %cond.end.3993

cond.false.3988:                                  ; preds = %cond.false.3962
  %861 = load i64, i64* %thrice_byte8_count, align 8
  %mul3989 = mul nsw i64 0, %861
  %862 = load i64, i64* %nchars, align 8
  %add3990 = add nsw i64 %mul3989, %862
  %mul3991 = mul nsw i64 0, %add3990
  %add3992 = add nsw i64 %mul3991, 0
  br label %cond.end.3993

cond.end.3993:                                    ; preds = %cond.false.3988, %cond.true.3969
  %cond3994 = phi i64 [ %sub3987, %cond.true.3969 ], [ %add3992, %cond.false.3988 ]
  %cmp3995 = icmp slt i64 %cond3994, 0
  br i1 %cmp3995, label %cond.true.3997, label %cond.false.4062

cond.true.3997:                                   ; preds = %cond.end.3993
  %863 = load i64, i64* %thrice_byte8_count, align 8
  %cmp3998 = icmp slt i64 %863, 0
  br i1 %cmp3998, label %cond.true.4000, label %cond.false.4036

cond.true.4000:                                   ; preds = %cond.true.3997
  %864 = load i64, i64* %nchars, align 8
  %865 = load i64, i64* %thrice_byte8_count, align 8
  %mul4001 = mul nsw i64 0, %865
  %866 = load i64, i64* %nchars, align 8
  %add4002 = add nsw i64 %mul4001, %866
  %mul4003 = mul nsw i64 0, %add4002
  %sub4004 = sub nsw i64 %mul4003, 1
  %cmp4005 = icmp slt i64 %sub4004, 0
  br i1 %cmp4005, label %cond.true.4007, label %cond.false.4026

cond.true.4007:                                   ; preds = %cond.true.4000
  %867 = load i64, i64* %thrice_byte8_count, align 8
  %mul4008 = mul nsw i64 0, %867
  %868 = load i64, i64* %nchars, align 8
  %add4009 = add nsw i64 %mul4008, %868
  %mul4010 = mul nsw i64 0, %add4009
  %add4011 = add nsw i64 %mul4010, 0
  %neg4012 = xor i64 %add4011, -1
  %cmp4013 = icmp eq i64 %neg4012, -1
  %conv4014 = zext i1 %cmp4013 to i32
  %sub4015 = sub nsw i32 0, %conv4014
  %conv4016 = sext i32 %sub4015 to i64
  %869 = load i64, i64* %thrice_byte8_count, align 8
  %mul4017 = mul nsw i64 0, %869
  %870 = load i64, i64* %nchars, align 8
  %add4018 = add nsw i64 %mul4017, %870
  %mul4019 = mul nsw i64 0, %add4018
  %add4020 = add nsw i64 %mul4019, 1
  %shl4021 = shl i64 %add4020, 62
  %sub4022 = sub nsw i64 %shl4021, 1
  %mul4023 = mul nsw i64 %sub4022, 2
  %add4024 = add nsw i64 %mul4023, 1
  %sub4025 = sub nsw i64 %conv4016, %add4024
  br label %cond.end.4031

cond.false.4026:                                  ; preds = %cond.true.4000
  %871 = load i64, i64* %thrice_byte8_count, align 8
  %mul4027 = mul nsw i64 0, %871
  %872 = load i64, i64* %nchars, align 8
  %add4028 = add nsw i64 %mul4027, %872
  %mul4029 = mul nsw i64 0, %add4028
  %add4030 = add nsw i64 %mul4029, 0
  br label %cond.end.4031

cond.end.4031:                                    ; preds = %cond.false.4026, %cond.true.4007
  %cond4032 = phi i64 [ %sub4025, %cond.true.4007 ], [ %add4030, %cond.false.4026 ]
  %873 = load i64, i64* %thrice_byte8_count, align 8
  %sub4033 = sub nsw i64 %cond4032, %873
  %cmp4034 = icmp slt i64 %864, %sub4033
  br i1 %cmp4034, label %cond.true.4094, label %lor.lhs.false.4080

cond.false.4036:                                  ; preds = %cond.true.3997
  %874 = load i64, i64* %thrice_byte8_count, align 8
  %mul4037 = mul nsw i64 0, %874
  %875 = load i64, i64* %nchars, align 8
  %add4038 = add nsw i64 %mul4037, %875
  %mul4039 = mul nsw i64 0, %add4038
  %sub4040 = sub nsw i64 %mul4039, 1
  %cmp4041 = icmp slt i64 %sub4040, 0
  br i1 %cmp4041, label %cond.true.4043, label %cond.false.4052

cond.true.4043:                                   ; preds = %cond.false.4036
  %876 = load i64, i64* %thrice_byte8_count, align 8
  %mul4044 = mul nsw i64 0, %876
  %877 = load i64, i64* %nchars, align 8
  %add4045 = add nsw i64 %mul4044, %877
  %mul4046 = mul nsw i64 0, %add4045
  %add4047 = add nsw i64 %mul4046, 1
  %shl4048 = shl i64 %add4047, 62
  %sub4049 = sub nsw i64 %shl4048, 1
  %mul4050 = mul nsw i64 %sub4049, 2
  %add4051 = add nsw i64 %mul4050, 1
  br label %cond.end.4057

cond.false.4052:                                  ; preds = %cond.false.4036
  %878 = load i64, i64* %thrice_byte8_count, align 8
  %mul4053 = mul nsw i64 0, %878
  %879 = load i64, i64* %nchars, align 8
  %add4054 = add nsw i64 %mul4053, %879
  %mul4055 = mul nsw i64 0, %add4054
  %sub4056 = sub nsw i64 %mul4055, 1
  br label %cond.end.4057

cond.end.4057:                                    ; preds = %cond.false.4052, %cond.true.4043
  %cond4058 = phi i64 [ %add4051, %cond.true.4043 ], [ %sub4056, %cond.false.4052 ]
  %880 = load i64, i64* %thrice_byte8_count, align 8
  %sub4059 = sub nsw i64 %cond4058, %880
  %881 = load i64, i64* %nchars, align 8
  %cmp4060 = icmp slt i64 %sub4059, %881
  br i1 %cmp4060, label %cond.true.4094, label %lor.lhs.false.4080

cond.false.4062:                                  ; preds = %cond.end.3993
  %882 = load i64, i64* %nchars, align 8
  %cmp4063 = icmp slt i64 %882, 0
  br i1 %cmp4063, label %cond.true.4065, label %cond.false.4069

cond.true.4065:                                   ; preds = %cond.false.4062
  %883 = load i64, i64* %thrice_byte8_count, align 8
  %884 = load i64, i64* %nchars, align 8
  %885 = load i64, i64* %thrice_byte8_count, align 8
  %add4066 = add nsw i64 %884, %885
  %cmp4067 = icmp sle i64 %883, %add4066
  br i1 %cmp4067, label %cond.true.4094, label %lor.lhs.false.4080

cond.false.4069:                                  ; preds = %cond.false.4062
  %886 = load i64, i64* %thrice_byte8_count, align 8
  %cmp4070 = icmp slt i64 %886, 0
  br i1 %cmp4070, label %cond.true.4072, label %cond.false.4076

cond.true.4072:                                   ; preds = %cond.false.4069
  %887 = load i64, i64* %nchars, align 8
  %888 = load i64, i64* %nchars, align 8
  %889 = load i64, i64* %thrice_byte8_count, align 8
  %add4073 = add nsw i64 %888, %889
  %cmp4074 = icmp sle i64 %887, %add4073
  br i1 %cmp4074, label %cond.true.4094, label %lor.lhs.false.4080

cond.false.4076:                                  ; preds = %cond.false.4069
  %890 = load i64, i64* %nchars, align 8
  %891 = load i64, i64* %thrice_byte8_count, align 8
  %add4077 = add nsw i64 %890, %891
  %892 = load i64, i64* %thrice_byte8_count, align 8
  %cmp4078 = icmp slt i64 %add4077, %892
  br i1 %cmp4078, label %cond.true.4094, label %lor.lhs.false.4080

lor.lhs.false.4080:                               ; preds = %cond.false.4076, %cond.true.4072, %cond.true.4065, %cond.end.4057, %cond.end.4031
  %893 = load i64, i64* %nchars, align 8
  %894 = load i64, i64* %thrice_byte8_count, align 8
  %add4081 = add nsw i64 %893, %894
  %mul4082 = mul nsw i64 0, %add4081
  %sub4083 = sub nsw i64 %mul4082, 1
  %cmp4084 = icmp slt i64 %sub4083, 0
  br i1 %cmp4084, label %land.lhs.true.4086, label %lor.lhs.false.4090

land.lhs.true.4086:                               ; preds = %lor.lhs.false.4080
  %895 = load i64, i64* %nchars, align 8
  %896 = load i64, i64* %thrice_byte8_count, align 8
  %add4087 = add nsw i64 %895, %896
  %cmp4088 = icmp slt i64 %add4087, -9223372036854775808
  br i1 %cmp4088, label %cond.true.4094, label %lor.lhs.false.4090

lor.lhs.false.4090:                               ; preds = %land.lhs.true.4086, %lor.lhs.false.4080
  %897 = load i64, i64* %nchars, align 8
  %898 = load i64, i64* %thrice_byte8_count, align 8
  %add4091 = add nsw i64 %897, %898
  %cmp4092 = icmp slt i64 9223372036854775807, %add4091
  br i1 %cmp4092, label %cond.true.4094, label %cond.false.4106

cond.true.4094:                                   ; preds = %lor.lhs.false.4090, %land.lhs.true.4086, %cond.false.4076, %cond.true.4072, %cond.true.4065, %cond.end.4057, %cond.end.4031
  %899 = load i64, i64* %nchars, align 8
  %900 = load i64, i64* %thrice_byte8_count, align 8
  %add4095 = add i64 %899, %900
  %cmp4096 = icmp ule i64 %add4095, 9223372036854775807
  br i1 %cmp4096, label %cond.true.4098, label %cond.false.4100

cond.true.4098:                                   ; preds = %cond.true.4094
  %901 = load i64, i64* %nchars, align 8
  %902 = load i64, i64* %thrice_byte8_count, align 8
  %add4099 = add i64 %901, %902
  br label %cond.end.4104

cond.false.4100:                                  ; preds = %cond.true.4094
  %903 = load i64, i64* %nchars, align 8
  %904 = load i64, i64* %thrice_byte8_count, align 8
  %add4101 = add i64 %903, %904
  %sub4102 = sub i64 %add4101, -9223372036854775808
  %add4103 = add nsw i64 %sub4102, -9223372036854775808
  br label %cond.end.4104

cond.end.4104:                                    ; preds = %cond.false.4100, %cond.true.4098
  %cond4105 = phi i64 [ %add4099, %cond.true.4098 ], [ %add4103, %cond.false.4100 ]
  store i64 %cond4105, i64* %uninit_nchars, align 8
  br i1 true, label %if.then.6355, label %lor.lhs.false.4118

cond.false.4106:                                  ; preds = %lor.lhs.false.4090
  %905 = load i64, i64* %nchars, align 8
  %906 = load i64, i64* %thrice_byte8_count, align 8
  %add4107 = add i64 %905, %906
  %cmp4108 = icmp ule i64 %add4107, 9223372036854775807
  br i1 %cmp4108, label %cond.true.4110, label %cond.false.4112

cond.true.4110:                                   ; preds = %cond.false.4106
  %907 = load i64, i64* %nchars, align 8
  %908 = load i64, i64* %thrice_byte8_count, align 8
  %add4111 = add i64 %907, %908
  br label %cond.end.4116

cond.false.4112:                                  ; preds = %cond.false.4106
  %909 = load i64, i64* %nchars, align 8
  %910 = load i64, i64* %thrice_byte8_count, align 8
  %add4113 = add i64 %909, %910
  %sub4114 = sub i64 %add4113, -9223372036854775808
  %add4115 = add nsw i64 %sub4114, -9223372036854775808
  br label %cond.end.4116

cond.end.4116:                                    ; preds = %cond.false.4112, %cond.true.4110
  %cond4117 = phi i64 [ %add4111, %cond.true.4110 ], [ %add4115, %cond.false.4112 ]
  store i64 %cond4117, i64* %uninit_nchars, align 8
  br i1 false, label %if.then.6355, label %lor.lhs.false.4118

lor.lhs.false.4118:                               ; preds = %cond.end.4116, %cond.end.4104, %cond.end.3960, %cond.end.3948, %cond.end.3803, %cond.end.3791, %cond.end.3647, %cond.end.3635, %cond.end.3488, %cond.end.3469, %cond.end.3318, %cond.end.3299, %cond.end.3104, %cond.end.3075, %cond.end.2914, %cond.end.2885, %cond.end.2636, %cond.end.2607, %cond.end.2446, %cond.end.2417
  br i1 false, label %cond.true.4119, label %cond.false.4644

cond.true.4119:                                   ; preds = %lor.lhs.false.4118
  br i1 false, label %cond.true.4120, label %cond.false.4425

cond.true.4120:                                   ; preds = %cond.true.4119
  %911 = load i64, i64* %byte8_count, align 8
  %mul4121 = mul nsw i64 2, %911
  %conv4122 = trunc i64 %mul4121 to i8
  %conv4123 = sext i8 %conv4122 to i32
  %mul4124 = mul nsw i32 0, %conv4123
  %912 = load i64, i64* %nbytes, align 8
  %conv4125 = trunc i64 %912 to i8
  %conv4126 = sext i8 %conv4125 to i32
  %add4127 = add nsw i32 %mul4124, %conv4126
  %mul4128 = mul nsw i32 0, %add4127
  %sub4129 = sub nsw i32 %mul4128, 1
  %cmp4130 = icmp slt i32 %sub4129, 0
  br i1 %cmp4130, label %cond.true.4132, label %cond.false.4160

cond.true.4132:                                   ; preds = %cond.true.4120
  %913 = load i64, i64* %byte8_count, align 8
  %mul4133 = mul nsw i64 2, %913
  %conv4134 = trunc i64 %mul4133 to i8
  %conv4135 = sext i8 %conv4134 to i32
  %mul4136 = mul nsw i32 0, %conv4135
  %914 = load i64, i64* %nbytes, align 8
  %conv4137 = trunc i64 %914 to i8
  %conv4138 = sext i8 %conv4137 to i32
  %add4139 = add nsw i32 %mul4136, %conv4138
  %mul4140 = mul nsw i32 0, %add4139
  %add4141 = add nsw i32 %mul4140, 0
  %neg4142 = xor i32 %add4141, -1
  %cmp4143 = icmp eq i32 %neg4142, -1
  %conv4144 = zext i1 %cmp4143 to i32
  %sub4145 = sub nsw i32 0, %conv4144
  %915 = load i64, i64* %byte8_count, align 8
  %mul4146 = mul nsw i64 2, %915
  %conv4147 = trunc i64 %mul4146 to i8
  %conv4148 = sext i8 %conv4147 to i32
  %mul4149 = mul nsw i32 0, %conv4148
  %916 = load i64, i64* %nbytes, align 8
  %conv4150 = trunc i64 %916 to i8
  %conv4151 = sext i8 %conv4150 to i32
  %add4152 = add nsw i32 %mul4149, %conv4151
  %mul4153 = mul nsw i32 0, %add4152
  %add4154 = add nsw i32 %mul4153, 1
  %shl4155 = shl i32 %add4154, 30
  %sub4156 = sub nsw i32 %shl4155, 1
  %mul4157 = mul nsw i32 %sub4156, 2
  %add4158 = add nsw i32 %mul4157, 1
  %sub4159 = sub nsw i32 %sub4145, %add4158
  br label %cond.end.4170

cond.false.4160:                                  ; preds = %cond.true.4120
  %917 = load i64, i64* %byte8_count, align 8
  %mul4161 = mul nsw i64 2, %917
  %conv4162 = trunc i64 %mul4161 to i8
  %conv4163 = sext i8 %conv4162 to i32
  %mul4164 = mul nsw i32 0, %conv4163
  %918 = load i64, i64* %nbytes, align 8
  %conv4165 = trunc i64 %918 to i8
  %conv4166 = sext i8 %conv4165 to i32
  %add4167 = add nsw i32 %mul4164, %conv4166
  %mul4168 = mul nsw i32 0, %add4167
  %add4169 = add nsw i32 %mul4168, 0
  br label %cond.end.4170

cond.end.4170:                                    ; preds = %cond.false.4160, %cond.true.4132
  %cond4171 = phi i32 [ %sub4159, %cond.true.4132 ], [ %add4169, %cond.false.4160 ]
  %cmp4172 = icmp slt i32 %cond4171, 0
  br i1 %cmp4172, label %cond.true.4174, label %cond.false.4286

cond.true.4174:                                   ; preds = %cond.end.4170
  %919 = load i64, i64* %byte8_count, align 8
  %mul4175 = mul nsw i64 2, %919
  %conv4176 = trunc i64 %mul4175 to i8
  %conv4177 = sext i8 %conv4176 to i32
  %cmp4178 = icmp slt i32 %conv4177, 0
  br i1 %cmp4178, label %cond.true.4180, label %cond.false.4240

cond.true.4180:                                   ; preds = %cond.true.4174
  %920 = load i64, i64* %nbytes, align 8
  %conv4181 = trunc i64 %920 to i8
  %conv4182 = sext i8 %conv4181 to i32
  %921 = load i64, i64* %byte8_count, align 8
  %mul4183 = mul nsw i64 2, %921
  %conv4184 = trunc i64 %mul4183 to i8
  %conv4185 = sext i8 %conv4184 to i32
  %mul4186 = mul nsw i32 0, %conv4185
  %922 = load i64, i64* %nbytes, align 8
  %conv4187 = trunc i64 %922 to i8
  %conv4188 = sext i8 %conv4187 to i32
  %add4189 = add nsw i32 %mul4186, %conv4188
  %mul4190 = mul nsw i32 0, %add4189
  %sub4191 = sub nsw i32 %mul4190, 1
  %cmp4192 = icmp slt i32 %sub4191, 0
  br i1 %cmp4192, label %cond.true.4194, label %cond.false.4222

cond.true.4194:                                   ; preds = %cond.true.4180
  %923 = load i64, i64* %byte8_count, align 8
  %mul4195 = mul nsw i64 2, %923
  %conv4196 = trunc i64 %mul4195 to i8
  %conv4197 = sext i8 %conv4196 to i32
  %mul4198 = mul nsw i32 0, %conv4197
  %924 = load i64, i64* %nbytes, align 8
  %conv4199 = trunc i64 %924 to i8
  %conv4200 = sext i8 %conv4199 to i32
  %add4201 = add nsw i32 %mul4198, %conv4200
  %mul4202 = mul nsw i32 0, %add4201
  %add4203 = add nsw i32 %mul4202, 0
  %neg4204 = xor i32 %add4203, -1
  %cmp4205 = icmp eq i32 %neg4204, -1
  %conv4206 = zext i1 %cmp4205 to i32
  %sub4207 = sub nsw i32 0, %conv4206
  %925 = load i64, i64* %byte8_count, align 8
  %mul4208 = mul nsw i64 2, %925
  %conv4209 = trunc i64 %mul4208 to i8
  %conv4210 = sext i8 %conv4209 to i32
  %mul4211 = mul nsw i32 0, %conv4210
  %926 = load i64, i64* %nbytes, align 8
  %conv4212 = trunc i64 %926 to i8
  %conv4213 = sext i8 %conv4212 to i32
  %add4214 = add nsw i32 %mul4211, %conv4213
  %mul4215 = mul nsw i32 0, %add4214
  %add4216 = add nsw i32 %mul4215, 1
  %shl4217 = shl i32 %add4216, 30
  %sub4218 = sub nsw i32 %shl4217, 1
  %mul4219 = mul nsw i32 %sub4218, 2
  %add4220 = add nsw i32 %mul4219, 1
  %sub4221 = sub nsw i32 %sub4207, %add4220
  br label %cond.end.4232

cond.false.4222:                                  ; preds = %cond.true.4180
  %927 = load i64, i64* %byte8_count, align 8
  %mul4223 = mul nsw i64 2, %927
  %conv4224 = trunc i64 %mul4223 to i8
  %conv4225 = sext i8 %conv4224 to i32
  %mul4226 = mul nsw i32 0, %conv4225
  %928 = load i64, i64* %nbytes, align 8
  %conv4227 = trunc i64 %928 to i8
  %conv4228 = sext i8 %conv4227 to i32
  %add4229 = add nsw i32 %mul4226, %conv4228
  %mul4230 = mul nsw i32 0, %add4229
  %add4231 = add nsw i32 %mul4230, 0
  br label %cond.end.4232

cond.end.4232:                                    ; preds = %cond.false.4222, %cond.true.4194
  %cond4233 = phi i32 [ %sub4221, %cond.true.4194 ], [ %add4231, %cond.false.4222 ]
  %929 = load i64, i64* %byte8_count, align 8
  %mul4234 = mul nsw i64 2, %929
  %conv4235 = trunc i64 %mul4234 to i8
  %conv4236 = sext i8 %conv4235 to i32
  %sub4237 = sub nsw i32 %cond4233, %conv4236
  %cmp4238 = icmp slt i32 %conv4182, %sub4237
  br i1 %cmp4238, label %cond.true.4361, label %lor.lhs.false.4332

cond.false.4240:                                  ; preds = %cond.true.4174
  %930 = load i64, i64* %byte8_count, align 8
  %mul4241 = mul nsw i64 2, %930
  %conv4242 = trunc i64 %mul4241 to i8
  %conv4243 = sext i8 %conv4242 to i32
  %mul4244 = mul nsw i32 0, %conv4243
  %931 = load i64, i64* %nbytes, align 8
  %conv4245 = trunc i64 %931 to i8
  %conv4246 = sext i8 %conv4245 to i32
  %add4247 = add nsw i32 %mul4244, %conv4246
  %mul4248 = mul nsw i32 0, %add4247
  %sub4249 = sub nsw i32 %mul4248, 1
  %cmp4250 = icmp slt i32 %sub4249, 0
  br i1 %cmp4250, label %cond.true.4252, label %cond.false.4266

cond.true.4252:                                   ; preds = %cond.false.4240
  %932 = load i64, i64* %byte8_count, align 8
  %mul4253 = mul nsw i64 2, %932
  %conv4254 = trunc i64 %mul4253 to i8
  %conv4255 = sext i8 %conv4254 to i32
  %mul4256 = mul nsw i32 0, %conv4255
  %933 = load i64, i64* %nbytes, align 8
  %conv4257 = trunc i64 %933 to i8
  %conv4258 = sext i8 %conv4257 to i32
  %add4259 = add nsw i32 %mul4256, %conv4258
  %mul4260 = mul nsw i32 0, %add4259
  %add4261 = add nsw i32 %mul4260, 1
  %shl4262 = shl i32 %add4261, 30
  %sub4263 = sub nsw i32 %shl4262, 1
  %mul4264 = mul nsw i32 %sub4263, 2
  %add4265 = add nsw i32 %mul4264, 1
  br label %cond.end.4276

cond.false.4266:                                  ; preds = %cond.false.4240
  %934 = load i64, i64* %byte8_count, align 8
  %mul4267 = mul nsw i64 2, %934
  %conv4268 = trunc i64 %mul4267 to i8
  %conv4269 = sext i8 %conv4268 to i32
  %mul4270 = mul nsw i32 0, %conv4269
  %935 = load i64, i64* %nbytes, align 8
  %conv4271 = trunc i64 %935 to i8
  %conv4272 = sext i8 %conv4271 to i32
  %add4273 = add nsw i32 %mul4270, %conv4272
  %mul4274 = mul nsw i32 0, %add4273
  %sub4275 = sub nsw i32 %mul4274, 1
  br label %cond.end.4276

cond.end.4276:                                    ; preds = %cond.false.4266, %cond.true.4252
  %cond4277 = phi i32 [ %add4265, %cond.true.4252 ], [ %sub4275, %cond.false.4266 ]
  %936 = load i64, i64* %byte8_count, align 8
  %mul4278 = mul nsw i64 2, %936
  %conv4279 = trunc i64 %mul4278 to i8
  %conv4280 = sext i8 %conv4279 to i32
  %sub4281 = sub nsw i32 %cond4277, %conv4280
  %937 = load i64, i64* %nbytes, align 8
  %conv4282 = trunc i64 %937 to i8
  %conv4283 = sext i8 %conv4282 to i32
  %cmp4284 = icmp slt i32 %sub4281, %conv4283
  br i1 %cmp4284, label %cond.true.4361, label %lor.lhs.false.4332

cond.false.4286:                                  ; preds = %cond.end.4170
  %938 = load i64, i64* %nbytes, align 8
  %conv4287 = trunc i64 %938 to i8
  %conv4288 = sext i8 %conv4287 to i32
  %cmp4289 = icmp slt i32 %conv4288, 0
  br i1 %cmp4289, label %cond.true.4291, label %cond.false.4303

cond.true.4291:                                   ; preds = %cond.false.4286
  %939 = load i64, i64* %byte8_count, align 8
  %mul4292 = mul nsw i64 2, %939
  %conv4293 = trunc i64 %mul4292 to i8
  %conv4294 = sext i8 %conv4293 to i32
  %940 = load i64, i64* %nbytes, align 8
  %conv4295 = trunc i64 %940 to i8
  %conv4296 = sext i8 %conv4295 to i32
  %941 = load i64, i64* %byte8_count, align 8
  %mul4297 = mul nsw i64 2, %941
  %conv4298 = trunc i64 %mul4297 to i8
  %conv4299 = sext i8 %conv4298 to i32
  %add4300 = add nsw i32 %conv4296, %conv4299
  %cmp4301 = icmp sle i32 %conv4294, %add4300
  br i1 %cmp4301, label %cond.true.4361, label %lor.lhs.false.4332

cond.false.4303:                                  ; preds = %cond.false.4286
  %942 = load i64, i64* %byte8_count, align 8
  %mul4304 = mul nsw i64 2, %942
  %conv4305 = trunc i64 %mul4304 to i8
  %conv4306 = sext i8 %conv4305 to i32
  %cmp4307 = icmp slt i32 %conv4306, 0
  br i1 %cmp4307, label %cond.true.4309, label %cond.false.4320

cond.true.4309:                                   ; preds = %cond.false.4303
  %943 = load i64, i64* %nbytes, align 8
  %conv4310 = trunc i64 %943 to i8
  %conv4311 = sext i8 %conv4310 to i32
  %944 = load i64, i64* %nbytes, align 8
  %conv4312 = trunc i64 %944 to i8
  %conv4313 = sext i8 %conv4312 to i32
  %945 = load i64, i64* %byte8_count, align 8
  %mul4314 = mul nsw i64 2, %945
  %conv4315 = trunc i64 %mul4314 to i8
  %conv4316 = sext i8 %conv4315 to i32
  %add4317 = add nsw i32 %conv4313, %conv4316
  %cmp4318 = icmp sle i32 %conv4311, %add4317
  br i1 %cmp4318, label %cond.true.4361, label %lor.lhs.false.4332

cond.false.4320:                                  ; preds = %cond.false.4303
  %946 = load i64, i64* %nbytes, align 8
  %conv4321 = trunc i64 %946 to i8
  %conv4322 = sext i8 %conv4321 to i32
  %947 = load i64, i64* %byte8_count, align 8
  %mul4323 = mul nsw i64 2, %947
  %conv4324 = trunc i64 %mul4323 to i8
  %conv4325 = sext i8 %conv4324 to i32
  %add4326 = add nsw i32 %conv4322, %conv4325
  %948 = load i64, i64* %byte8_count, align 8
  %mul4327 = mul nsw i64 2, %948
  %conv4328 = trunc i64 %mul4327 to i8
  %conv4329 = sext i8 %conv4328 to i32
  %cmp4330 = icmp slt i32 %add4326, %conv4329
  br i1 %cmp4330, label %cond.true.4361, label %lor.lhs.false.4332

lor.lhs.false.4332:                               ; preds = %cond.false.4320, %cond.true.4309, %cond.true.4291, %cond.end.4276, %cond.end.4232
  %949 = load i64, i64* %nbytes, align 8
  %conv4333 = trunc i64 %949 to i8
  %conv4334 = sext i8 %conv4333 to i32
  %950 = load i64, i64* %byte8_count, align 8
  %mul4335 = mul nsw i64 2, %950
  %conv4336 = trunc i64 %mul4335 to i8
  %conv4337 = sext i8 %conv4336 to i32
  %add4338 = add nsw i32 %conv4334, %conv4337
  %mul4339 = mul nsw i32 0, %add4338
  %sub4340 = sub nsw i32 %mul4339, 1
  %cmp4341 = icmp slt i32 %sub4340, 0
  br i1 %cmp4341, label %land.lhs.true.4343, label %lor.lhs.false.4352

land.lhs.true.4343:                               ; preds = %lor.lhs.false.4332
  %951 = load i64, i64* %nbytes, align 8
  %conv4344 = trunc i64 %951 to i8
  %conv4345 = sext i8 %conv4344 to i32
  %952 = load i64, i64* %byte8_count, align 8
  %mul4346 = mul nsw i64 2, %952
  %conv4347 = trunc i64 %mul4346 to i8
  %conv4348 = sext i8 %conv4347 to i32
  %add4349 = add nsw i32 %conv4345, %conv4348
  %cmp4350 = icmp slt i32 %add4349, -128
  br i1 %cmp4350, label %cond.true.4361, label %lor.lhs.false.4352

lor.lhs.false.4352:                               ; preds = %land.lhs.true.4343, %lor.lhs.false.4332
  %953 = load i64, i64* %nbytes, align 8
  %conv4353 = trunc i64 %953 to i8
  %conv4354 = sext i8 %conv4353 to i32
  %954 = load i64, i64* %byte8_count, align 8
  %mul4355 = mul nsw i64 2, %954
  %conv4356 = trunc i64 %mul4355 to i8
  %conv4357 = sext i8 %conv4356 to i32
  %add4358 = add nsw i32 %conv4354, %conv4357
  %cmp4359 = icmp slt i32 127, %add4358
  br i1 %cmp4359, label %cond.true.4361, label %cond.false.4393

cond.true.4361:                                   ; preds = %lor.lhs.false.4352, %land.lhs.true.4343, %cond.false.4320, %cond.true.4309, %cond.true.4291, %cond.end.4276, %cond.end.4232
  %955 = load i64, i64* %nbytes, align 8
  %conv4362 = trunc i64 %955 to i8
  %conv4363 = zext i8 %conv4362 to i32
  %956 = load i64, i64* %byte8_count, align 8
  %mul4364 = mul nsw i64 2, %956
  %conv4365 = trunc i64 %mul4364 to i8
  %conv4366 = zext i8 %conv4365 to i32
  %add4367 = add nsw i32 %conv4363, %conv4366
  %cmp4368 = icmp sle i32 %add4367, 127
  br i1 %cmp4368, label %cond.true.4370, label %cond.false.4379

cond.true.4370:                                   ; preds = %cond.true.4361
  %957 = load i64, i64* %nbytes, align 8
  %conv4371 = trunc i64 %957 to i8
  %conv4372 = zext i8 %conv4371 to i32
  %958 = load i64, i64* %byte8_count, align 8
  %mul4373 = mul nsw i64 2, %958
  %conv4374 = trunc i64 %mul4373 to i8
  %conv4375 = zext i8 %conv4374 to i32
  %add4376 = add nsw i32 %conv4372, %conv4375
  %conv4377 = trunc i32 %add4376 to i8
  %conv4378 = sext i8 %conv4377 to i32
  br label %cond.end.4390

cond.false.4379:                                  ; preds = %cond.true.4361
  %959 = load i64, i64* %nbytes, align 8
  %conv4380 = trunc i64 %959 to i8
  %conv4381 = zext i8 %conv4380 to i32
  %960 = load i64, i64* %byte8_count, align 8
  %mul4382 = mul nsw i64 2, %960
  %conv4383 = trunc i64 %mul4382 to i8
  %conv4384 = zext i8 %conv4383 to i32
  %add4385 = add nsw i32 %conv4381, %conv4384
  %sub4386 = sub nsw i32 %add4385, -128
  %conv4387 = trunc i32 %sub4386 to i8
  %conv4388 = sext i8 %conv4387 to i32
  %add4389 = add nsw i32 %conv4388, -128
  br label %cond.end.4390

cond.end.4390:                                    ; preds = %cond.false.4379, %cond.true.4370
  %cond4391 = phi i32 [ %conv4378, %cond.true.4370 ], [ %add4389, %cond.false.4379 ]
  %conv4392 = sext i32 %cond4391 to i64
  store i64 %conv4392, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.4393:                                  ; preds = %lor.lhs.false.4352
  %961 = load i64, i64* %nbytes, align 8
  %conv4394 = trunc i64 %961 to i8
  %conv4395 = zext i8 %conv4394 to i32
  %962 = load i64, i64* %byte8_count, align 8
  %mul4396 = mul nsw i64 2, %962
  %conv4397 = trunc i64 %mul4396 to i8
  %conv4398 = zext i8 %conv4397 to i32
  %add4399 = add nsw i32 %conv4395, %conv4398
  %cmp4400 = icmp sle i32 %add4399, 127
  br i1 %cmp4400, label %cond.true.4402, label %cond.false.4411

cond.true.4402:                                   ; preds = %cond.false.4393
  %963 = load i64, i64* %nbytes, align 8
  %conv4403 = trunc i64 %963 to i8
  %conv4404 = zext i8 %conv4403 to i32
  %964 = load i64, i64* %byte8_count, align 8
  %mul4405 = mul nsw i64 2, %964
  %conv4406 = trunc i64 %mul4405 to i8
  %conv4407 = zext i8 %conv4406 to i32
  %add4408 = add nsw i32 %conv4404, %conv4407
  %conv4409 = trunc i32 %add4408 to i8
  %conv4410 = sext i8 %conv4409 to i32
  br label %cond.end.4422

cond.false.4411:                                  ; preds = %cond.false.4393
  %965 = load i64, i64* %nbytes, align 8
  %conv4412 = trunc i64 %965 to i8
  %conv4413 = zext i8 %conv4412 to i32
  %966 = load i64, i64* %byte8_count, align 8
  %mul4414 = mul nsw i64 2, %966
  %conv4415 = trunc i64 %mul4414 to i8
  %conv4416 = zext i8 %conv4415 to i32
  %add4417 = add nsw i32 %conv4413, %conv4416
  %sub4418 = sub nsw i32 %add4417, -128
  %conv4419 = trunc i32 %sub4418 to i8
  %conv4420 = sext i8 %conv4419 to i32
  %add4421 = add nsw i32 %conv4420, -128
  br label %cond.end.4422

cond.end.4422:                                    ; preds = %cond.false.4411, %cond.true.4402
  %cond4423 = phi i32 [ %conv4410, %cond.true.4402 ], [ %add4421, %cond.false.4411 ]
  %conv4424 = sext i32 %cond4423 to i64
  store i64 %conv4424, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.4425:                                  ; preds = %cond.true.4119
  %967 = load i64, i64* %byte8_count, align 8
  %mul4426 = mul nsw i64 2, %967
  %mul4427 = mul nsw i64 0, %mul4426
  %968 = load i64, i64* %nbytes, align 8
  %add4428 = add nsw i64 %mul4427, %968
  %mul4429 = mul nsw i64 0, %add4428
  %sub4430 = sub nsw i64 %mul4429, 1
  %cmp4431 = icmp slt i64 %sub4430, 0
  br i1 %cmp4431, label %cond.true.4433, label %cond.false.4454

cond.true.4433:                                   ; preds = %cond.false.4425
  %969 = load i64, i64* %byte8_count, align 8
  %mul4434 = mul nsw i64 2, %969
  %mul4435 = mul nsw i64 0, %mul4434
  %970 = load i64, i64* %nbytes, align 8
  %add4436 = add nsw i64 %mul4435, %970
  %mul4437 = mul nsw i64 0, %add4436
  %add4438 = add nsw i64 %mul4437, 0
  %neg4439 = xor i64 %add4438, -1
  %cmp4440 = icmp eq i64 %neg4439, -1
  %conv4441 = zext i1 %cmp4440 to i32
  %sub4442 = sub nsw i32 0, %conv4441
  %conv4443 = sext i32 %sub4442 to i64
  %971 = load i64, i64* %byte8_count, align 8
  %mul4444 = mul nsw i64 2, %971
  %mul4445 = mul nsw i64 0, %mul4444
  %972 = load i64, i64* %nbytes, align 8
  %add4446 = add nsw i64 %mul4445, %972
  %mul4447 = mul nsw i64 0, %add4446
  %add4448 = add nsw i64 %mul4447, 1
  %shl4449 = shl i64 %add4448, 62
  %sub4450 = sub nsw i64 %shl4449, 1
  %mul4451 = mul nsw i64 %sub4450, 2
  %add4452 = add nsw i64 %mul4451, 1
  %sub4453 = sub nsw i64 %conv4443, %add4452
  br label %cond.end.4460

cond.false.4454:                                  ; preds = %cond.false.4425
  %973 = load i64, i64* %byte8_count, align 8
  %mul4455 = mul nsw i64 2, %973
  %mul4456 = mul nsw i64 0, %mul4455
  %974 = load i64, i64* %nbytes, align 8
  %add4457 = add nsw i64 %mul4456, %974
  %mul4458 = mul nsw i64 0, %add4457
  %add4459 = add nsw i64 %mul4458, 0
  br label %cond.end.4460

cond.end.4460:                                    ; preds = %cond.false.4454, %cond.true.4433
  %cond4461 = phi i64 [ %sub4453, %cond.true.4433 ], [ %add4459, %cond.false.4454 ]
  %cmp4462 = icmp slt i64 %cond4461, 0
  br i1 %cmp4462, label %cond.true.4464, label %cond.false.4539

cond.true.4464:                                   ; preds = %cond.end.4460
  %975 = load i64, i64* %byte8_count, align 8
  %mul4465 = mul nsw i64 2, %975
  %cmp4466 = icmp slt i64 %mul4465, 0
  br i1 %cmp4466, label %cond.true.4468, label %cond.false.4509

cond.true.4468:                                   ; preds = %cond.true.4464
  %976 = load i64, i64* %nbytes, align 8
  %977 = load i64, i64* %byte8_count, align 8
  %mul4469 = mul nsw i64 2, %977
  %mul4470 = mul nsw i64 0, %mul4469
  %978 = load i64, i64* %nbytes, align 8
  %add4471 = add nsw i64 %mul4470, %978
  %mul4472 = mul nsw i64 0, %add4471
  %sub4473 = sub nsw i64 %mul4472, 1
  %cmp4474 = icmp slt i64 %sub4473, 0
  br i1 %cmp4474, label %cond.true.4476, label %cond.false.4497

cond.true.4476:                                   ; preds = %cond.true.4468
  %979 = load i64, i64* %byte8_count, align 8
  %mul4477 = mul nsw i64 2, %979
  %mul4478 = mul nsw i64 0, %mul4477
  %980 = load i64, i64* %nbytes, align 8
  %add4479 = add nsw i64 %mul4478, %980
  %mul4480 = mul nsw i64 0, %add4479
  %add4481 = add nsw i64 %mul4480, 0
  %neg4482 = xor i64 %add4481, -1
  %cmp4483 = icmp eq i64 %neg4482, -1
  %conv4484 = zext i1 %cmp4483 to i32
  %sub4485 = sub nsw i32 0, %conv4484
  %conv4486 = sext i32 %sub4485 to i64
  %981 = load i64, i64* %byte8_count, align 8
  %mul4487 = mul nsw i64 2, %981
  %mul4488 = mul nsw i64 0, %mul4487
  %982 = load i64, i64* %nbytes, align 8
  %add4489 = add nsw i64 %mul4488, %982
  %mul4490 = mul nsw i64 0, %add4489
  %add4491 = add nsw i64 %mul4490, 1
  %shl4492 = shl i64 %add4491, 62
  %sub4493 = sub nsw i64 %shl4492, 1
  %mul4494 = mul nsw i64 %sub4493, 2
  %add4495 = add nsw i64 %mul4494, 1
  %sub4496 = sub nsw i64 %conv4486, %add4495
  br label %cond.end.4503

cond.false.4497:                                  ; preds = %cond.true.4468
  %983 = load i64, i64* %byte8_count, align 8
  %mul4498 = mul nsw i64 2, %983
  %mul4499 = mul nsw i64 0, %mul4498
  %984 = load i64, i64* %nbytes, align 8
  %add4500 = add nsw i64 %mul4499, %984
  %mul4501 = mul nsw i64 0, %add4500
  %add4502 = add nsw i64 %mul4501, 0
  br label %cond.end.4503

cond.end.4503:                                    ; preds = %cond.false.4497, %cond.true.4476
  %cond4504 = phi i64 [ %sub4496, %cond.true.4476 ], [ %add4502, %cond.false.4497 ]
  %985 = load i64, i64* %byte8_count, align 8
  %mul4505 = mul nsw i64 2, %985
  %sub4506 = sub nsw i64 %cond4504, %mul4505
  %cmp4507 = icmp slt i64 %976, %sub4506
  br i1 %cmp4507, label %cond.true.4580, label %lor.lhs.false.4563

cond.false.4509:                                  ; preds = %cond.true.4464
  %986 = load i64, i64* %byte8_count, align 8
  %mul4510 = mul nsw i64 2, %986
  %mul4511 = mul nsw i64 0, %mul4510
  %987 = load i64, i64* %nbytes, align 8
  %add4512 = add nsw i64 %mul4511, %987
  %mul4513 = mul nsw i64 0, %add4512
  %sub4514 = sub nsw i64 %mul4513, 1
  %cmp4515 = icmp slt i64 %sub4514, 0
  br i1 %cmp4515, label %cond.true.4517, label %cond.false.4527

cond.true.4517:                                   ; preds = %cond.false.4509
  %988 = load i64, i64* %byte8_count, align 8
  %mul4518 = mul nsw i64 2, %988
  %mul4519 = mul nsw i64 0, %mul4518
  %989 = load i64, i64* %nbytes, align 8
  %add4520 = add nsw i64 %mul4519, %989
  %mul4521 = mul nsw i64 0, %add4520
  %add4522 = add nsw i64 %mul4521, 1
  %shl4523 = shl i64 %add4522, 62
  %sub4524 = sub nsw i64 %shl4523, 1
  %mul4525 = mul nsw i64 %sub4524, 2
  %add4526 = add nsw i64 %mul4525, 1
  br label %cond.end.4533

cond.false.4527:                                  ; preds = %cond.false.4509
  %990 = load i64, i64* %byte8_count, align 8
  %mul4528 = mul nsw i64 2, %990
  %mul4529 = mul nsw i64 0, %mul4528
  %991 = load i64, i64* %nbytes, align 8
  %add4530 = add nsw i64 %mul4529, %991
  %mul4531 = mul nsw i64 0, %add4530
  %sub4532 = sub nsw i64 %mul4531, 1
  br label %cond.end.4533

cond.end.4533:                                    ; preds = %cond.false.4527, %cond.true.4517
  %cond4534 = phi i64 [ %add4526, %cond.true.4517 ], [ %sub4532, %cond.false.4527 ]
  %992 = load i64, i64* %byte8_count, align 8
  %mul4535 = mul nsw i64 2, %992
  %sub4536 = sub nsw i64 %cond4534, %mul4535
  %993 = load i64, i64* %nbytes, align 8
  %cmp4537 = icmp slt i64 %sub4536, %993
  br i1 %cmp4537, label %cond.true.4580, label %lor.lhs.false.4563

cond.false.4539:                                  ; preds = %cond.end.4460
  %994 = load i64, i64* %nbytes, align 8
  %cmp4540 = icmp slt i64 %994, 0
  br i1 %cmp4540, label %cond.true.4542, label %cond.false.4548

cond.true.4542:                                   ; preds = %cond.false.4539
  %995 = load i64, i64* %byte8_count, align 8
  %mul4543 = mul nsw i64 2, %995
  %996 = load i64, i64* %nbytes, align 8
  %997 = load i64, i64* %byte8_count, align 8
  %mul4544 = mul nsw i64 2, %997
  %add4545 = add nsw i64 %996, %mul4544
  %cmp4546 = icmp sle i64 %mul4543, %add4545
  br i1 %cmp4546, label %cond.true.4580, label %lor.lhs.false.4563

cond.false.4548:                                  ; preds = %cond.false.4539
  %998 = load i64, i64* %byte8_count, align 8
  %mul4549 = mul nsw i64 2, %998
  %cmp4550 = icmp slt i64 %mul4549, 0
  br i1 %cmp4550, label %cond.true.4552, label %cond.false.4557

cond.true.4552:                                   ; preds = %cond.false.4548
  %999 = load i64, i64* %nbytes, align 8
  %1000 = load i64, i64* %nbytes, align 8
  %1001 = load i64, i64* %byte8_count, align 8
  %mul4553 = mul nsw i64 2, %1001
  %add4554 = add nsw i64 %1000, %mul4553
  %cmp4555 = icmp sle i64 %999, %add4554
  br i1 %cmp4555, label %cond.true.4580, label %lor.lhs.false.4563

cond.false.4557:                                  ; preds = %cond.false.4548
  %1002 = load i64, i64* %nbytes, align 8
  %1003 = load i64, i64* %byte8_count, align 8
  %mul4558 = mul nsw i64 2, %1003
  %add4559 = add nsw i64 %1002, %mul4558
  %1004 = load i64, i64* %byte8_count, align 8
  %mul4560 = mul nsw i64 2, %1004
  %cmp4561 = icmp slt i64 %add4559, %mul4560
  br i1 %cmp4561, label %cond.true.4580, label %lor.lhs.false.4563

lor.lhs.false.4563:                               ; preds = %cond.false.4557, %cond.true.4552, %cond.true.4542, %cond.end.4533, %cond.end.4503
  %1005 = load i64, i64* %nbytes, align 8
  %1006 = load i64, i64* %byte8_count, align 8
  %mul4564 = mul nsw i64 2, %1006
  %add4565 = add nsw i64 %1005, %mul4564
  %mul4566 = mul nsw i64 0, %add4565
  %sub4567 = sub nsw i64 %mul4566, 1
  %cmp4568 = icmp slt i64 %sub4567, 0
  br i1 %cmp4568, label %land.lhs.true.4570, label %lor.lhs.false.4575

land.lhs.true.4570:                               ; preds = %lor.lhs.false.4563
  %1007 = load i64, i64* %nbytes, align 8
  %1008 = load i64, i64* %byte8_count, align 8
  %mul4571 = mul nsw i64 2, %1008
  %add4572 = add nsw i64 %1007, %mul4571
  %cmp4573 = icmp slt i64 %add4572, -128
  br i1 %cmp4573, label %cond.true.4580, label %lor.lhs.false.4575

lor.lhs.false.4575:                               ; preds = %land.lhs.true.4570, %lor.lhs.false.4563
  %1009 = load i64, i64* %nbytes, align 8
  %1010 = load i64, i64* %byte8_count, align 8
  %mul4576 = mul nsw i64 2, %1010
  %add4577 = add nsw i64 %1009, %mul4576
  %cmp4578 = icmp slt i64 127, %add4577
  br i1 %cmp4578, label %cond.true.4580, label %cond.false.4612

cond.true.4580:                                   ; preds = %lor.lhs.false.4575, %land.lhs.true.4570, %cond.false.4557, %cond.true.4552, %cond.true.4542, %cond.end.4533, %cond.end.4503
  %1011 = load i64, i64* %nbytes, align 8
  %conv4581 = trunc i64 %1011 to i8
  %conv4582 = zext i8 %conv4581 to i32
  %1012 = load i64, i64* %byte8_count, align 8
  %mul4583 = mul nsw i64 2, %1012
  %conv4584 = trunc i64 %mul4583 to i8
  %conv4585 = zext i8 %conv4584 to i32
  %add4586 = add nsw i32 %conv4582, %conv4585
  %cmp4587 = icmp sle i32 %add4586, 127
  br i1 %cmp4587, label %cond.true.4589, label %cond.false.4598

cond.true.4589:                                   ; preds = %cond.true.4580
  %1013 = load i64, i64* %nbytes, align 8
  %conv4590 = trunc i64 %1013 to i8
  %conv4591 = zext i8 %conv4590 to i32
  %1014 = load i64, i64* %byte8_count, align 8
  %mul4592 = mul nsw i64 2, %1014
  %conv4593 = trunc i64 %mul4592 to i8
  %conv4594 = zext i8 %conv4593 to i32
  %add4595 = add nsw i32 %conv4591, %conv4594
  %conv4596 = trunc i32 %add4595 to i8
  %conv4597 = sext i8 %conv4596 to i32
  br label %cond.end.4609

cond.false.4598:                                  ; preds = %cond.true.4580
  %1015 = load i64, i64* %nbytes, align 8
  %conv4599 = trunc i64 %1015 to i8
  %conv4600 = zext i8 %conv4599 to i32
  %1016 = load i64, i64* %byte8_count, align 8
  %mul4601 = mul nsw i64 2, %1016
  %conv4602 = trunc i64 %mul4601 to i8
  %conv4603 = zext i8 %conv4602 to i32
  %add4604 = add nsw i32 %conv4600, %conv4603
  %sub4605 = sub nsw i32 %add4604, -128
  %conv4606 = trunc i32 %sub4605 to i8
  %conv4607 = sext i8 %conv4606 to i32
  %add4608 = add nsw i32 %conv4607, -128
  br label %cond.end.4609

cond.end.4609:                                    ; preds = %cond.false.4598, %cond.true.4589
  %cond4610 = phi i32 [ %conv4597, %cond.true.4589 ], [ %add4608, %cond.false.4598 ]
  %conv4611 = sext i32 %cond4610 to i64
  store i64 %conv4611, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.4612:                                  ; preds = %lor.lhs.false.4575
  %1017 = load i64, i64* %nbytes, align 8
  %conv4613 = trunc i64 %1017 to i8
  %conv4614 = zext i8 %conv4613 to i32
  %1018 = load i64, i64* %byte8_count, align 8
  %mul4615 = mul nsw i64 2, %1018
  %conv4616 = trunc i64 %mul4615 to i8
  %conv4617 = zext i8 %conv4616 to i32
  %add4618 = add nsw i32 %conv4614, %conv4617
  %cmp4619 = icmp sle i32 %add4618, 127
  br i1 %cmp4619, label %cond.true.4621, label %cond.false.4630

cond.true.4621:                                   ; preds = %cond.false.4612
  %1019 = load i64, i64* %nbytes, align 8
  %conv4622 = trunc i64 %1019 to i8
  %conv4623 = zext i8 %conv4622 to i32
  %1020 = load i64, i64* %byte8_count, align 8
  %mul4624 = mul nsw i64 2, %1020
  %conv4625 = trunc i64 %mul4624 to i8
  %conv4626 = zext i8 %conv4625 to i32
  %add4627 = add nsw i32 %conv4623, %conv4626
  %conv4628 = trunc i32 %add4627 to i8
  %conv4629 = sext i8 %conv4628 to i32
  br label %cond.end.4641

cond.false.4630:                                  ; preds = %cond.false.4612
  %1021 = load i64, i64* %nbytes, align 8
  %conv4631 = trunc i64 %1021 to i8
  %conv4632 = zext i8 %conv4631 to i32
  %1022 = load i64, i64* %byte8_count, align 8
  %mul4633 = mul nsw i64 2, %1022
  %conv4634 = trunc i64 %mul4633 to i8
  %conv4635 = zext i8 %conv4634 to i32
  %add4636 = add nsw i32 %conv4632, %conv4635
  %sub4637 = sub nsw i32 %add4636, -128
  %conv4638 = trunc i32 %sub4637 to i8
  %conv4639 = sext i8 %conv4638 to i32
  %add4640 = add nsw i32 %conv4639, -128
  br label %cond.end.4641

cond.end.4641:                                    ; preds = %cond.false.4630, %cond.true.4621
  %cond4642 = phi i32 [ %conv4629, %cond.true.4621 ], [ %add4640, %cond.false.4630 ]
  %conv4643 = sext i32 %cond4642 to i64
  store i64 %conv4643, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.4644:                                  ; preds = %lor.lhs.false.4118
  br i1 false, label %cond.true.4645, label %cond.false.5170

cond.true.4645:                                   ; preds = %cond.false.4644
  br i1 false, label %cond.true.4646, label %cond.false.4951

cond.true.4646:                                   ; preds = %cond.true.4645
  %1023 = load i64, i64* %byte8_count, align 8
  %mul4647 = mul nsw i64 2, %1023
  %conv4648 = trunc i64 %mul4647 to i16
  %conv4649 = sext i16 %conv4648 to i32
  %mul4650 = mul nsw i32 0, %conv4649
  %1024 = load i64, i64* %nbytes, align 8
  %conv4651 = trunc i64 %1024 to i16
  %conv4652 = sext i16 %conv4651 to i32
  %add4653 = add nsw i32 %mul4650, %conv4652
  %mul4654 = mul nsw i32 0, %add4653
  %sub4655 = sub nsw i32 %mul4654, 1
  %cmp4656 = icmp slt i32 %sub4655, 0
  br i1 %cmp4656, label %cond.true.4658, label %cond.false.4686

cond.true.4658:                                   ; preds = %cond.true.4646
  %1025 = load i64, i64* %byte8_count, align 8
  %mul4659 = mul nsw i64 2, %1025
  %conv4660 = trunc i64 %mul4659 to i16
  %conv4661 = sext i16 %conv4660 to i32
  %mul4662 = mul nsw i32 0, %conv4661
  %1026 = load i64, i64* %nbytes, align 8
  %conv4663 = trunc i64 %1026 to i16
  %conv4664 = sext i16 %conv4663 to i32
  %add4665 = add nsw i32 %mul4662, %conv4664
  %mul4666 = mul nsw i32 0, %add4665
  %add4667 = add nsw i32 %mul4666, 0
  %neg4668 = xor i32 %add4667, -1
  %cmp4669 = icmp eq i32 %neg4668, -1
  %conv4670 = zext i1 %cmp4669 to i32
  %sub4671 = sub nsw i32 0, %conv4670
  %1027 = load i64, i64* %byte8_count, align 8
  %mul4672 = mul nsw i64 2, %1027
  %conv4673 = trunc i64 %mul4672 to i16
  %conv4674 = sext i16 %conv4673 to i32
  %mul4675 = mul nsw i32 0, %conv4674
  %1028 = load i64, i64* %nbytes, align 8
  %conv4676 = trunc i64 %1028 to i16
  %conv4677 = sext i16 %conv4676 to i32
  %add4678 = add nsw i32 %mul4675, %conv4677
  %mul4679 = mul nsw i32 0, %add4678
  %add4680 = add nsw i32 %mul4679, 1
  %shl4681 = shl i32 %add4680, 30
  %sub4682 = sub nsw i32 %shl4681, 1
  %mul4683 = mul nsw i32 %sub4682, 2
  %add4684 = add nsw i32 %mul4683, 1
  %sub4685 = sub nsw i32 %sub4671, %add4684
  br label %cond.end.4696

cond.false.4686:                                  ; preds = %cond.true.4646
  %1029 = load i64, i64* %byte8_count, align 8
  %mul4687 = mul nsw i64 2, %1029
  %conv4688 = trunc i64 %mul4687 to i16
  %conv4689 = sext i16 %conv4688 to i32
  %mul4690 = mul nsw i32 0, %conv4689
  %1030 = load i64, i64* %nbytes, align 8
  %conv4691 = trunc i64 %1030 to i16
  %conv4692 = sext i16 %conv4691 to i32
  %add4693 = add nsw i32 %mul4690, %conv4692
  %mul4694 = mul nsw i32 0, %add4693
  %add4695 = add nsw i32 %mul4694, 0
  br label %cond.end.4696

cond.end.4696:                                    ; preds = %cond.false.4686, %cond.true.4658
  %cond4697 = phi i32 [ %sub4685, %cond.true.4658 ], [ %add4695, %cond.false.4686 ]
  %cmp4698 = icmp slt i32 %cond4697, 0
  br i1 %cmp4698, label %cond.true.4700, label %cond.false.4812

cond.true.4700:                                   ; preds = %cond.end.4696
  %1031 = load i64, i64* %byte8_count, align 8
  %mul4701 = mul nsw i64 2, %1031
  %conv4702 = trunc i64 %mul4701 to i16
  %conv4703 = sext i16 %conv4702 to i32
  %cmp4704 = icmp slt i32 %conv4703, 0
  br i1 %cmp4704, label %cond.true.4706, label %cond.false.4766

cond.true.4706:                                   ; preds = %cond.true.4700
  %1032 = load i64, i64* %nbytes, align 8
  %conv4707 = trunc i64 %1032 to i16
  %conv4708 = sext i16 %conv4707 to i32
  %1033 = load i64, i64* %byte8_count, align 8
  %mul4709 = mul nsw i64 2, %1033
  %conv4710 = trunc i64 %mul4709 to i16
  %conv4711 = sext i16 %conv4710 to i32
  %mul4712 = mul nsw i32 0, %conv4711
  %1034 = load i64, i64* %nbytes, align 8
  %conv4713 = trunc i64 %1034 to i16
  %conv4714 = sext i16 %conv4713 to i32
  %add4715 = add nsw i32 %mul4712, %conv4714
  %mul4716 = mul nsw i32 0, %add4715
  %sub4717 = sub nsw i32 %mul4716, 1
  %cmp4718 = icmp slt i32 %sub4717, 0
  br i1 %cmp4718, label %cond.true.4720, label %cond.false.4748

cond.true.4720:                                   ; preds = %cond.true.4706
  %1035 = load i64, i64* %byte8_count, align 8
  %mul4721 = mul nsw i64 2, %1035
  %conv4722 = trunc i64 %mul4721 to i16
  %conv4723 = sext i16 %conv4722 to i32
  %mul4724 = mul nsw i32 0, %conv4723
  %1036 = load i64, i64* %nbytes, align 8
  %conv4725 = trunc i64 %1036 to i16
  %conv4726 = sext i16 %conv4725 to i32
  %add4727 = add nsw i32 %mul4724, %conv4726
  %mul4728 = mul nsw i32 0, %add4727
  %add4729 = add nsw i32 %mul4728, 0
  %neg4730 = xor i32 %add4729, -1
  %cmp4731 = icmp eq i32 %neg4730, -1
  %conv4732 = zext i1 %cmp4731 to i32
  %sub4733 = sub nsw i32 0, %conv4732
  %1037 = load i64, i64* %byte8_count, align 8
  %mul4734 = mul nsw i64 2, %1037
  %conv4735 = trunc i64 %mul4734 to i16
  %conv4736 = sext i16 %conv4735 to i32
  %mul4737 = mul nsw i32 0, %conv4736
  %1038 = load i64, i64* %nbytes, align 8
  %conv4738 = trunc i64 %1038 to i16
  %conv4739 = sext i16 %conv4738 to i32
  %add4740 = add nsw i32 %mul4737, %conv4739
  %mul4741 = mul nsw i32 0, %add4740
  %add4742 = add nsw i32 %mul4741, 1
  %shl4743 = shl i32 %add4742, 30
  %sub4744 = sub nsw i32 %shl4743, 1
  %mul4745 = mul nsw i32 %sub4744, 2
  %add4746 = add nsw i32 %mul4745, 1
  %sub4747 = sub nsw i32 %sub4733, %add4746
  br label %cond.end.4758

cond.false.4748:                                  ; preds = %cond.true.4706
  %1039 = load i64, i64* %byte8_count, align 8
  %mul4749 = mul nsw i64 2, %1039
  %conv4750 = trunc i64 %mul4749 to i16
  %conv4751 = sext i16 %conv4750 to i32
  %mul4752 = mul nsw i32 0, %conv4751
  %1040 = load i64, i64* %nbytes, align 8
  %conv4753 = trunc i64 %1040 to i16
  %conv4754 = sext i16 %conv4753 to i32
  %add4755 = add nsw i32 %mul4752, %conv4754
  %mul4756 = mul nsw i32 0, %add4755
  %add4757 = add nsw i32 %mul4756, 0
  br label %cond.end.4758

cond.end.4758:                                    ; preds = %cond.false.4748, %cond.true.4720
  %cond4759 = phi i32 [ %sub4747, %cond.true.4720 ], [ %add4757, %cond.false.4748 ]
  %1041 = load i64, i64* %byte8_count, align 8
  %mul4760 = mul nsw i64 2, %1041
  %conv4761 = trunc i64 %mul4760 to i16
  %conv4762 = sext i16 %conv4761 to i32
  %sub4763 = sub nsw i32 %cond4759, %conv4762
  %cmp4764 = icmp slt i32 %conv4708, %sub4763
  br i1 %cmp4764, label %cond.true.4887, label %lor.lhs.false.4858

cond.false.4766:                                  ; preds = %cond.true.4700
  %1042 = load i64, i64* %byte8_count, align 8
  %mul4767 = mul nsw i64 2, %1042
  %conv4768 = trunc i64 %mul4767 to i16
  %conv4769 = sext i16 %conv4768 to i32
  %mul4770 = mul nsw i32 0, %conv4769
  %1043 = load i64, i64* %nbytes, align 8
  %conv4771 = trunc i64 %1043 to i16
  %conv4772 = sext i16 %conv4771 to i32
  %add4773 = add nsw i32 %mul4770, %conv4772
  %mul4774 = mul nsw i32 0, %add4773
  %sub4775 = sub nsw i32 %mul4774, 1
  %cmp4776 = icmp slt i32 %sub4775, 0
  br i1 %cmp4776, label %cond.true.4778, label %cond.false.4792

cond.true.4778:                                   ; preds = %cond.false.4766
  %1044 = load i64, i64* %byte8_count, align 8
  %mul4779 = mul nsw i64 2, %1044
  %conv4780 = trunc i64 %mul4779 to i16
  %conv4781 = sext i16 %conv4780 to i32
  %mul4782 = mul nsw i32 0, %conv4781
  %1045 = load i64, i64* %nbytes, align 8
  %conv4783 = trunc i64 %1045 to i16
  %conv4784 = sext i16 %conv4783 to i32
  %add4785 = add nsw i32 %mul4782, %conv4784
  %mul4786 = mul nsw i32 0, %add4785
  %add4787 = add nsw i32 %mul4786, 1
  %shl4788 = shl i32 %add4787, 30
  %sub4789 = sub nsw i32 %shl4788, 1
  %mul4790 = mul nsw i32 %sub4789, 2
  %add4791 = add nsw i32 %mul4790, 1
  br label %cond.end.4802

cond.false.4792:                                  ; preds = %cond.false.4766
  %1046 = load i64, i64* %byte8_count, align 8
  %mul4793 = mul nsw i64 2, %1046
  %conv4794 = trunc i64 %mul4793 to i16
  %conv4795 = sext i16 %conv4794 to i32
  %mul4796 = mul nsw i32 0, %conv4795
  %1047 = load i64, i64* %nbytes, align 8
  %conv4797 = trunc i64 %1047 to i16
  %conv4798 = sext i16 %conv4797 to i32
  %add4799 = add nsw i32 %mul4796, %conv4798
  %mul4800 = mul nsw i32 0, %add4799
  %sub4801 = sub nsw i32 %mul4800, 1
  br label %cond.end.4802

cond.end.4802:                                    ; preds = %cond.false.4792, %cond.true.4778
  %cond4803 = phi i32 [ %add4791, %cond.true.4778 ], [ %sub4801, %cond.false.4792 ]
  %1048 = load i64, i64* %byte8_count, align 8
  %mul4804 = mul nsw i64 2, %1048
  %conv4805 = trunc i64 %mul4804 to i16
  %conv4806 = sext i16 %conv4805 to i32
  %sub4807 = sub nsw i32 %cond4803, %conv4806
  %1049 = load i64, i64* %nbytes, align 8
  %conv4808 = trunc i64 %1049 to i16
  %conv4809 = sext i16 %conv4808 to i32
  %cmp4810 = icmp slt i32 %sub4807, %conv4809
  br i1 %cmp4810, label %cond.true.4887, label %lor.lhs.false.4858

cond.false.4812:                                  ; preds = %cond.end.4696
  %1050 = load i64, i64* %nbytes, align 8
  %conv4813 = trunc i64 %1050 to i16
  %conv4814 = sext i16 %conv4813 to i32
  %cmp4815 = icmp slt i32 %conv4814, 0
  br i1 %cmp4815, label %cond.true.4817, label %cond.false.4829

cond.true.4817:                                   ; preds = %cond.false.4812
  %1051 = load i64, i64* %byte8_count, align 8
  %mul4818 = mul nsw i64 2, %1051
  %conv4819 = trunc i64 %mul4818 to i16
  %conv4820 = sext i16 %conv4819 to i32
  %1052 = load i64, i64* %nbytes, align 8
  %conv4821 = trunc i64 %1052 to i16
  %conv4822 = sext i16 %conv4821 to i32
  %1053 = load i64, i64* %byte8_count, align 8
  %mul4823 = mul nsw i64 2, %1053
  %conv4824 = trunc i64 %mul4823 to i16
  %conv4825 = sext i16 %conv4824 to i32
  %add4826 = add nsw i32 %conv4822, %conv4825
  %cmp4827 = icmp sle i32 %conv4820, %add4826
  br i1 %cmp4827, label %cond.true.4887, label %lor.lhs.false.4858

cond.false.4829:                                  ; preds = %cond.false.4812
  %1054 = load i64, i64* %byte8_count, align 8
  %mul4830 = mul nsw i64 2, %1054
  %conv4831 = trunc i64 %mul4830 to i16
  %conv4832 = sext i16 %conv4831 to i32
  %cmp4833 = icmp slt i32 %conv4832, 0
  br i1 %cmp4833, label %cond.true.4835, label %cond.false.4846

cond.true.4835:                                   ; preds = %cond.false.4829
  %1055 = load i64, i64* %nbytes, align 8
  %conv4836 = trunc i64 %1055 to i16
  %conv4837 = sext i16 %conv4836 to i32
  %1056 = load i64, i64* %nbytes, align 8
  %conv4838 = trunc i64 %1056 to i16
  %conv4839 = sext i16 %conv4838 to i32
  %1057 = load i64, i64* %byte8_count, align 8
  %mul4840 = mul nsw i64 2, %1057
  %conv4841 = trunc i64 %mul4840 to i16
  %conv4842 = sext i16 %conv4841 to i32
  %add4843 = add nsw i32 %conv4839, %conv4842
  %cmp4844 = icmp sle i32 %conv4837, %add4843
  br i1 %cmp4844, label %cond.true.4887, label %lor.lhs.false.4858

cond.false.4846:                                  ; preds = %cond.false.4829
  %1058 = load i64, i64* %nbytes, align 8
  %conv4847 = trunc i64 %1058 to i16
  %conv4848 = sext i16 %conv4847 to i32
  %1059 = load i64, i64* %byte8_count, align 8
  %mul4849 = mul nsw i64 2, %1059
  %conv4850 = trunc i64 %mul4849 to i16
  %conv4851 = sext i16 %conv4850 to i32
  %add4852 = add nsw i32 %conv4848, %conv4851
  %1060 = load i64, i64* %byte8_count, align 8
  %mul4853 = mul nsw i64 2, %1060
  %conv4854 = trunc i64 %mul4853 to i16
  %conv4855 = sext i16 %conv4854 to i32
  %cmp4856 = icmp slt i32 %add4852, %conv4855
  br i1 %cmp4856, label %cond.true.4887, label %lor.lhs.false.4858

lor.lhs.false.4858:                               ; preds = %cond.false.4846, %cond.true.4835, %cond.true.4817, %cond.end.4802, %cond.end.4758
  %1061 = load i64, i64* %nbytes, align 8
  %conv4859 = trunc i64 %1061 to i16
  %conv4860 = sext i16 %conv4859 to i32
  %1062 = load i64, i64* %byte8_count, align 8
  %mul4861 = mul nsw i64 2, %1062
  %conv4862 = trunc i64 %mul4861 to i16
  %conv4863 = sext i16 %conv4862 to i32
  %add4864 = add nsw i32 %conv4860, %conv4863
  %mul4865 = mul nsw i32 0, %add4864
  %sub4866 = sub nsw i32 %mul4865, 1
  %cmp4867 = icmp slt i32 %sub4866, 0
  br i1 %cmp4867, label %land.lhs.true.4869, label %lor.lhs.false.4878

land.lhs.true.4869:                               ; preds = %lor.lhs.false.4858
  %1063 = load i64, i64* %nbytes, align 8
  %conv4870 = trunc i64 %1063 to i16
  %conv4871 = sext i16 %conv4870 to i32
  %1064 = load i64, i64* %byte8_count, align 8
  %mul4872 = mul nsw i64 2, %1064
  %conv4873 = trunc i64 %mul4872 to i16
  %conv4874 = sext i16 %conv4873 to i32
  %add4875 = add nsw i32 %conv4871, %conv4874
  %cmp4876 = icmp slt i32 %add4875, -32768
  br i1 %cmp4876, label %cond.true.4887, label %lor.lhs.false.4878

lor.lhs.false.4878:                               ; preds = %land.lhs.true.4869, %lor.lhs.false.4858
  %1065 = load i64, i64* %nbytes, align 8
  %conv4879 = trunc i64 %1065 to i16
  %conv4880 = sext i16 %conv4879 to i32
  %1066 = load i64, i64* %byte8_count, align 8
  %mul4881 = mul nsw i64 2, %1066
  %conv4882 = trunc i64 %mul4881 to i16
  %conv4883 = sext i16 %conv4882 to i32
  %add4884 = add nsw i32 %conv4880, %conv4883
  %cmp4885 = icmp slt i32 32767, %add4884
  br i1 %cmp4885, label %cond.true.4887, label %cond.false.4919

cond.true.4887:                                   ; preds = %lor.lhs.false.4878, %land.lhs.true.4869, %cond.false.4846, %cond.true.4835, %cond.true.4817, %cond.end.4802, %cond.end.4758
  %1067 = load i64, i64* %nbytes, align 8
  %conv4888 = trunc i64 %1067 to i16
  %conv4889 = zext i16 %conv4888 to i32
  %1068 = load i64, i64* %byte8_count, align 8
  %mul4890 = mul nsw i64 2, %1068
  %conv4891 = trunc i64 %mul4890 to i16
  %conv4892 = zext i16 %conv4891 to i32
  %add4893 = add nsw i32 %conv4889, %conv4892
  %cmp4894 = icmp sle i32 %add4893, 32767
  br i1 %cmp4894, label %cond.true.4896, label %cond.false.4905

cond.true.4896:                                   ; preds = %cond.true.4887
  %1069 = load i64, i64* %nbytes, align 8
  %conv4897 = trunc i64 %1069 to i16
  %conv4898 = zext i16 %conv4897 to i32
  %1070 = load i64, i64* %byte8_count, align 8
  %mul4899 = mul nsw i64 2, %1070
  %conv4900 = trunc i64 %mul4899 to i16
  %conv4901 = zext i16 %conv4900 to i32
  %add4902 = add nsw i32 %conv4898, %conv4901
  %conv4903 = trunc i32 %add4902 to i16
  %conv4904 = sext i16 %conv4903 to i32
  br label %cond.end.4916

cond.false.4905:                                  ; preds = %cond.true.4887
  %1071 = load i64, i64* %nbytes, align 8
  %conv4906 = trunc i64 %1071 to i16
  %conv4907 = zext i16 %conv4906 to i32
  %1072 = load i64, i64* %byte8_count, align 8
  %mul4908 = mul nsw i64 2, %1072
  %conv4909 = trunc i64 %mul4908 to i16
  %conv4910 = zext i16 %conv4909 to i32
  %add4911 = add nsw i32 %conv4907, %conv4910
  %sub4912 = sub nsw i32 %add4911, -32768
  %conv4913 = trunc i32 %sub4912 to i16
  %conv4914 = sext i16 %conv4913 to i32
  %add4915 = add nsw i32 %conv4914, -32768
  br label %cond.end.4916

cond.end.4916:                                    ; preds = %cond.false.4905, %cond.true.4896
  %cond4917 = phi i32 [ %conv4904, %cond.true.4896 ], [ %add4915, %cond.false.4905 ]
  %conv4918 = sext i32 %cond4917 to i64
  store i64 %conv4918, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.4919:                                  ; preds = %lor.lhs.false.4878
  %1073 = load i64, i64* %nbytes, align 8
  %conv4920 = trunc i64 %1073 to i16
  %conv4921 = zext i16 %conv4920 to i32
  %1074 = load i64, i64* %byte8_count, align 8
  %mul4922 = mul nsw i64 2, %1074
  %conv4923 = trunc i64 %mul4922 to i16
  %conv4924 = zext i16 %conv4923 to i32
  %add4925 = add nsw i32 %conv4921, %conv4924
  %cmp4926 = icmp sle i32 %add4925, 32767
  br i1 %cmp4926, label %cond.true.4928, label %cond.false.4937

cond.true.4928:                                   ; preds = %cond.false.4919
  %1075 = load i64, i64* %nbytes, align 8
  %conv4929 = trunc i64 %1075 to i16
  %conv4930 = zext i16 %conv4929 to i32
  %1076 = load i64, i64* %byte8_count, align 8
  %mul4931 = mul nsw i64 2, %1076
  %conv4932 = trunc i64 %mul4931 to i16
  %conv4933 = zext i16 %conv4932 to i32
  %add4934 = add nsw i32 %conv4930, %conv4933
  %conv4935 = trunc i32 %add4934 to i16
  %conv4936 = sext i16 %conv4935 to i32
  br label %cond.end.4948

cond.false.4937:                                  ; preds = %cond.false.4919
  %1077 = load i64, i64* %nbytes, align 8
  %conv4938 = trunc i64 %1077 to i16
  %conv4939 = zext i16 %conv4938 to i32
  %1078 = load i64, i64* %byte8_count, align 8
  %mul4940 = mul nsw i64 2, %1078
  %conv4941 = trunc i64 %mul4940 to i16
  %conv4942 = zext i16 %conv4941 to i32
  %add4943 = add nsw i32 %conv4939, %conv4942
  %sub4944 = sub nsw i32 %add4943, -32768
  %conv4945 = trunc i32 %sub4944 to i16
  %conv4946 = sext i16 %conv4945 to i32
  %add4947 = add nsw i32 %conv4946, -32768
  br label %cond.end.4948

cond.end.4948:                                    ; preds = %cond.false.4937, %cond.true.4928
  %cond4949 = phi i32 [ %conv4936, %cond.true.4928 ], [ %add4947, %cond.false.4937 ]
  %conv4950 = sext i32 %cond4949 to i64
  store i64 %conv4950, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.4951:                                  ; preds = %cond.true.4645
  %1079 = load i64, i64* %byte8_count, align 8
  %mul4952 = mul nsw i64 2, %1079
  %mul4953 = mul nsw i64 0, %mul4952
  %1080 = load i64, i64* %nbytes, align 8
  %add4954 = add nsw i64 %mul4953, %1080
  %mul4955 = mul nsw i64 0, %add4954
  %sub4956 = sub nsw i64 %mul4955, 1
  %cmp4957 = icmp slt i64 %sub4956, 0
  br i1 %cmp4957, label %cond.true.4959, label %cond.false.4980

cond.true.4959:                                   ; preds = %cond.false.4951
  %1081 = load i64, i64* %byte8_count, align 8
  %mul4960 = mul nsw i64 2, %1081
  %mul4961 = mul nsw i64 0, %mul4960
  %1082 = load i64, i64* %nbytes, align 8
  %add4962 = add nsw i64 %mul4961, %1082
  %mul4963 = mul nsw i64 0, %add4962
  %add4964 = add nsw i64 %mul4963, 0
  %neg4965 = xor i64 %add4964, -1
  %cmp4966 = icmp eq i64 %neg4965, -1
  %conv4967 = zext i1 %cmp4966 to i32
  %sub4968 = sub nsw i32 0, %conv4967
  %conv4969 = sext i32 %sub4968 to i64
  %1083 = load i64, i64* %byte8_count, align 8
  %mul4970 = mul nsw i64 2, %1083
  %mul4971 = mul nsw i64 0, %mul4970
  %1084 = load i64, i64* %nbytes, align 8
  %add4972 = add nsw i64 %mul4971, %1084
  %mul4973 = mul nsw i64 0, %add4972
  %add4974 = add nsw i64 %mul4973, 1
  %shl4975 = shl i64 %add4974, 62
  %sub4976 = sub nsw i64 %shl4975, 1
  %mul4977 = mul nsw i64 %sub4976, 2
  %add4978 = add nsw i64 %mul4977, 1
  %sub4979 = sub nsw i64 %conv4969, %add4978
  br label %cond.end.4986

cond.false.4980:                                  ; preds = %cond.false.4951
  %1085 = load i64, i64* %byte8_count, align 8
  %mul4981 = mul nsw i64 2, %1085
  %mul4982 = mul nsw i64 0, %mul4981
  %1086 = load i64, i64* %nbytes, align 8
  %add4983 = add nsw i64 %mul4982, %1086
  %mul4984 = mul nsw i64 0, %add4983
  %add4985 = add nsw i64 %mul4984, 0
  br label %cond.end.4986

cond.end.4986:                                    ; preds = %cond.false.4980, %cond.true.4959
  %cond4987 = phi i64 [ %sub4979, %cond.true.4959 ], [ %add4985, %cond.false.4980 ]
  %cmp4988 = icmp slt i64 %cond4987, 0
  br i1 %cmp4988, label %cond.true.4990, label %cond.false.5065

cond.true.4990:                                   ; preds = %cond.end.4986
  %1087 = load i64, i64* %byte8_count, align 8
  %mul4991 = mul nsw i64 2, %1087
  %cmp4992 = icmp slt i64 %mul4991, 0
  br i1 %cmp4992, label %cond.true.4994, label %cond.false.5035

cond.true.4994:                                   ; preds = %cond.true.4990
  %1088 = load i64, i64* %nbytes, align 8
  %1089 = load i64, i64* %byte8_count, align 8
  %mul4995 = mul nsw i64 2, %1089
  %mul4996 = mul nsw i64 0, %mul4995
  %1090 = load i64, i64* %nbytes, align 8
  %add4997 = add nsw i64 %mul4996, %1090
  %mul4998 = mul nsw i64 0, %add4997
  %sub4999 = sub nsw i64 %mul4998, 1
  %cmp5000 = icmp slt i64 %sub4999, 0
  br i1 %cmp5000, label %cond.true.5002, label %cond.false.5023

cond.true.5002:                                   ; preds = %cond.true.4994
  %1091 = load i64, i64* %byte8_count, align 8
  %mul5003 = mul nsw i64 2, %1091
  %mul5004 = mul nsw i64 0, %mul5003
  %1092 = load i64, i64* %nbytes, align 8
  %add5005 = add nsw i64 %mul5004, %1092
  %mul5006 = mul nsw i64 0, %add5005
  %add5007 = add nsw i64 %mul5006, 0
  %neg5008 = xor i64 %add5007, -1
  %cmp5009 = icmp eq i64 %neg5008, -1
  %conv5010 = zext i1 %cmp5009 to i32
  %sub5011 = sub nsw i32 0, %conv5010
  %conv5012 = sext i32 %sub5011 to i64
  %1093 = load i64, i64* %byte8_count, align 8
  %mul5013 = mul nsw i64 2, %1093
  %mul5014 = mul nsw i64 0, %mul5013
  %1094 = load i64, i64* %nbytes, align 8
  %add5015 = add nsw i64 %mul5014, %1094
  %mul5016 = mul nsw i64 0, %add5015
  %add5017 = add nsw i64 %mul5016, 1
  %shl5018 = shl i64 %add5017, 62
  %sub5019 = sub nsw i64 %shl5018, 1
  %mul5020 = mul nsw i64 %sub5019, 2
  %add5021 = add nsw i64 %mul5020, 1
  %sub5022 = sub nsw i64 %conv5012, %add5021
  br label %cond.end.5029

cond.false.5023:                                  ; preds = %cond.true.4994
  %1095 = load i64, i64* %byte8_count, align 8
  %mul5024 = mul nsw i64 2, %1095
  %mul5025 = mul nsw i64 0, %mul5024
  %1096 = load i64, i64* %nbytes, align 8
  %add5026 = add nsw i64 %mul5025, %1096
  %mul5027 = mul nsw i64 0, %add5026
  %add5028 = add nsw i64 %mul5027, 0
  br label %cond.end.5029

cond.end.5029:                                    ; preds = %cond.false.5023, %cond.true.5002
  %cond5030 = phi i64 [ %sub5022, %cond.true.5002 ], [ %add5028, %cond.false.5023 ]
  %1097 = load i64, i64* %byte8_count, align 8
  %mul5031 = mul nsw i64 2, %1097
  %sub5032 = sub nsw i64 %cond5030, %mul5031
  %cmp5033 = icmp slt i64 %1088, %sub5032
  br i1 %cmp5033, label %cond.true.5106, label %lor.lhs.false.5089

cond.false.5035:                                  ; preds = %cond.true.4990
  %1098 = load i64, i64* %byte8_count, align 8
  %mul5036 = mul nsw i64 2, %1098
  %mul5037 = mul nsw i64 0, %mul5036
  %1099 = load i64, i64* %nbytes, align 8
  %add5038 = add nsw i64 %mul5037, %1099
  %mul5039 = mul nsw i64 0, %add5038
  %sub5040 = sub nsw i64 %mul5039, 1
  %cmp5041 = icmp slt i64 %sub5040, 0
  br i1 %cmp5041, label %cond.true.5043, label %cond.false.5053

cond.true.5043:                                   ; preds = %cond.false.5035
  %1100 = load i64, i64* %byte8_count, align 8
  %mul5044 = mul nsw i64 2, %1100
  %mul5045 = mul nsw i64 0, %mul5044
  %1101 = load i64, i64* %nbytes, align 8
  %add5046 = add nsw i64 %mul5045, %1101
  %mul5047 = mul nsw i64 0, %add5046
  %add5048 = add nsw i64 %mul5047, 1
  %shl5049 = shl i64 %add5048, 62
  %sub5050 = sub nsw i64 %shl5049, 1
  %mul5051 = mul nsw i64 %sub5050, 2
  %add5052 = add nsw i64 %mul5051, 1
  br label %cond.end.5059

cond.false.5053:                                  ; preds = %cond.false.5035
  %1102 = load i64, i64* %byte8_count, align 8
  %mul5054 = mul nsw i64 2, %1102
  %mul5055 = mul nsw i64 0, %mul5054
  %1103 = load i64, i64* %nbytes, align 8
  %add5056 = add nsw i64 %mul5055, %1103
  %mul5057 = mul nsw i64 0, %add5056
  %sub5058 = sub nsw i64 %mul5057, 1
  br label %cond.end.5059

cond.end.5059:                                    ; preds = %cond.false.5053, %cond.true.5043
  %cond5060 = phi i64 [ %add5052, %cond.true.5043 ], [ %sub5058, %cond.false.5053 ]
  %1104 = load i64, i64* %byte8_count, align 8
  %mul5061 = mul nsw i64 2, %1104
  %sub5062 = sub nsw i64 %cond5060, %mul5061
  %1105 = load i64, i64* %nbytes, align 8
  %cmp5063 = icmp slt i64 %sub5062, %1105
  br i1 %cmp5063, label %cond.true.5106, label %lor.lhs.false.5089

cond.false.5065:                                  ; preds = %cond.end.4986
  %1106 = load i64, i64* %nbytes, align 8
  %cmp5066 = icmp slt i64 %1106, 0
  br i1 %cmp5066, label %cond.true.5068, label %cond.false.5074

cond.true.5068:                                   ; preds = %cond.false.5065
  %1107 = load i64, i64* %byte8_count, align 8
  %mul5069 = mul nsw i64 2, %1107
  %1108 = load i64, i64* %nbytes, align 8
  %1109 = load i64, i64* %byte8_count, align 8
  %mul5070 = mul nsw i64 2, %1109
  %add5071 = add nsw i64 %1108, %mul5070
  %cmp5072 = icmp sle i64 %mul5069, %add5071
  br i1 %cmp5072, label %cond.true.5106, label %lor.lhs.false.5089

cond.false.5074:                                  ; preds = %cond.false.5065
  %1110 = load i64, i64* %byte8_count, align 8
  %mul5075 = mul nsw i64 2, %1110
  %cmp5076 = icmp slt i64 %mul5075, 0
  br i1 %cmp5076, label %cond.true.5078, label %cond.false.5083

cond.true.5078:                                   ; preds = %cond.false.5074
  %1111 = load i64, i64* %nbytes, align 8
  %1112 = load i64, i64* %nbytes, align 8
  %1113 = load i64, i64* %byte8_count, align 8
  %mul5079 = mul nsw i64 2, %1113
  %add5080 = add nsw i64 %1112, %mul5079
  %cmp5081 = icmp sle i64 %1111, %add5080
  br i1 %cmp5081, label %cond.true.5106, label %lor.lhs.false.5089

cond.false.5083:                                  ; preds = %cond.false.5074
  %1114 = load i64, i64* %nbytes, align 8
  %1115 = load i64, i64* %byte8_count, align 8
  %mul5084 = mul nsw i64 2, %1115
  %add5085 = add nsw i64 %1114, %mul5084
  %1116 = load i64, i64* %byte8_count, align 8
  %mul5086 = mul nsw i64 2, %1116
  %cmp5087 = icmp slt i64 %add5085, %mul5086
  br i1 %cmp5087, label %cond.true.5106, label %lor.lhs.false.5089

lor.lhs.false.5089:                               ; preds = %cond.false.5083, %cond.true.5078, %cond.true.5068, %cond.end.5059, %cond.end.5029
  %1117 = load i64, i64* %nbytes, align 8
  %1118 = load i64, i64* %byte8_count, align 8
  %mul5090 = mul nsw i64 2, %1118
  %add5091 = add nsw i64 %1117, %mul5090
  %mul5092 = mul nsw i64 0, %add5091
  %sub5093 = sub nsw i64 %mul5092, 1
  %cmp5094 = icmp slt i64 %sub5093, 0
  br i1 %cmp5094, label %land.lhs.true.5096, label %lor.lhs.false.5101

land.lhs.true.5096:                               ; preds = %lor.lhs.false.5089
  %1119 = load i64, i64* %nbytes, align 8
  %1120 = load i64, i64* %byte8_count, align 8
  %mul5097 = mul nsw i64 2, %1120
  %add5098 = add nsw i64 %1119, %mul5097
  %cmp5099 = icmp slt i64 %add5098, -32768
  br i1 %cmp5099, label %cond.true.5106, label %lor.lhs.false.5101

lor.lhs.false.5101:                               ; preds = %land.lhs.true.5096, %lor.lhs.false.5089
  %1121 = load i64, i64* %nbytes, align 8
  %1122 = load i64, i64* %byte8_count, align 8
  %mul5102 = mul nsw i64 2, %1122
  %add5103 = add nsw i64 %1121, %mul5102
  %cmp5104 = icmp slt i64 32767, %add5103
  br i1 %cmp5104, label %cond.true.5106, label %cond.false.5138

cond.true.5106:                                   ; preds = %lor.lhs.false.5101, %land.lhs.true.5096, %cond.false.5083, %cond.true.5078, %cond.true.5068, %cond.end.5059, %cond.end.5029
  %1123 = load i64, i64* %nbytes, align 8
  %conv5107 = trunc i64 %1123 to i16
  %conv5108 = zext i16 %conv5107 to i32
  %1124 = load i64, i64* %byte8_count, align 8
  %mul5109 = mul nsw i64 2, %1124
  %conv5110 = trunc i64 %mul5109 to i16
  %conv5111 = zext i16 %conv5110 to i32
  %add5112 = add nsw i32 %conv5108, %conv5111
  %cmp5113 = icmp sle i32 %add5112, 32767
  br i1 %cmp5113, label %cond.true.5115, label %cond.false.5124

cond.true.5115:                                   ; preds = %cond.true.5106
  %1125 = load i64, i64* %nbytes, align 8
  %conv5116 = trunc i64 %1125 to i16
  %conv5117 = zext i16 %conv5116 to i32
  %1126 = load i64, i64* %byte8_count, align 8
  %mul5118 = mul nsw i64 2, %1126
  %conv5119 = trunc i64 %mul5118 to i16
  %conv5120 = zext i16 %conv5119 to i32
  %add5121 = add nsw i32 %conv5117, %conv5120
  %conv5122 = trunc i32 %add5121 to i16
  %conv5123 = sext i16 %conv5122 to i32
  br label %cond.end.5135

cond.false.5124:                                  ; preds = %cond.true.5106
  %1127 = load i64, i64* %nbytes, align 8
  %conv5125 = trunc i64 %1127 to i16
  %conv5126 = zext i16 %conv5125 to i32
  %1128 = load i64, i64* %byte8_count, align 8
  %mul5127 = mul nsw i64 2, %1128
  %conv5128 = trunc i64 %mul5127 to i16
  %conv5129 = zext i16 %conv5128 to i32
  %add5130 = add nsw i32 %conv5126, %conv5129
  %sub5131 = sub nsw i32 %add5130, -32768
  %conv5132 = trunc i32 %sub5131 to i16
  %conv5133 = sext i16 %conv5132 to i32
  %add5134 = add nsw i32 %conv5133, -32768
  br label %cond.end.5135

cond.end.5135:                                    ; preds = %cond.false.5124, %cond.true.5115
  %cond5136 = phi i32 [ %conv5123, %cond.true.5115 ], [ %add5134, %cond.false.5124 ]
  %conv5137 = sext i32 %cond5136 to i64
  store i64 %conv5137, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.5138:                                  ; preds = %lor.lhs.false.5101
  %1129 = load i64, i64* %nbytes, align 8
  %conv5139 = trunc i64 %1129 to i16
  %conv5140 = zext i16 %conv5139 to i32
  %1130 = load i64, i64* %byte8_count, align 8
  %mul5141 = mul nsw i64 2, %1130
  %conv5142 = trunc i64 %mul5141 to i16
  %conv5143 = zext i16 %conv5142 to i32
  %add5144 = add nsw i32 %conv5140, %conv5143
  %cmp5145 = icmp sle i32 %add5144, 32767
  br i1 %cmp5145, label %cond.true.5147, label %cond.false.5156

cond.true.5147:                                   ; preds = %cond.false.5138
  %1131 = load i64, i64* %nbytes, align 8
  %conv5148 = trunc i64 %1131 to i16
  %conv5149 = zext i16 %conv5148 to i32
  %1132 = load i64, i64* %byte8_count, align 8
  %mul5150 = mul nsw i64 2, %1132
  %conv5151 = trunc i64 %mul5150 to i16
  %conv5152 = zext i16 %conv5151 to i32
  %add5153 = add nsw i32 %conv5149, %conv5152
  %conv5154 = trunc i32 %add5153 to i16
  %conv5155 = sext i16 %conv5154 to i32
  br label %cond.end.5167

cond.false.5156:                                  ; preds = %cond.false.5138
  %1133 = load i64, i64* %nbytes, align 8
  %conv5157 = trunc i64 %1133 to i16
  %conv5158 = zext i16 %conv5157 to i32
  %1134 = load i64, i64* %byte8_count, align 8
  %mul5159 = mul nsw i64 2, %1134
  %conv5160 = trunc i64 %mul5159 to i16
  %conv5161 = zext i16 %conv5160 to i32
  %add5162 = add nsw i32 %conv5158, %conv5161
  %sub5163 = sub nsw i32 %add5162, -32768
  %conv5164 = trunc i32 %sub5163 to i16
  %conv5165 = sext i16 %conv5164 to i32
  %add5166 = add nsw i32 %conv5165, -32768
  br label %cond.end.5167

cond.end.5167:                                    ; preds = %cond.false.5156, %cond.true.5147
  %cond5168 = phi i32 [ %conv5155, %cond.true.5147 ], [ %add5166, %cond.false.5156 ]
  %conv5169 = sext i32 %cond5168 to i64
  store i64 %conv5169, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.5170:                                  ; preds = %cond.false.4644
  br i1 false, label %cond.true.5171, label %cond.false.5612

cond.true.5171:                                   ; preds = %cond.false.5170
  br i1 false, label %cond.true.5172, label %cond.false.5413

cond.true.5172:                                   ; preds = %cond.true.5171
  %1135 = load i64, i64* %byte8_count, align 8
  %mul5173 = mul nsw i64 2, %1135
  %conv5174 = trunc i64 %mul5173 to i32
  %mul5175 = mul nsw i32 0, %conv5174
  %1136 = load i64, i64* %nbytes, align 8
  %conv5176 = trunc i64 %1136 to i32
  %add5177 = add nsw i32 %mul5175, %conv5176
  %mul5178 = mul nsw i32 0, %add5177
  %sub5179 = sub nsw i32 %mul5178, 1
  %cmp5180 = icmp slt i32 %sub5179, 0
  br i1 %cmp5180, label %cond.true.5182, label %cond.false.5206

cond.true.5182:                                   ; preds = %cond.true.5172
  %1137 = load i64, i64* %byte8_count, align 8
  %mul5183 = mul nsw i64 2, %1137
  %conv5184 = trunc i64 %mul5183 to i32
  %mul5185 = mul nsw i32 0, %conv5184
  %1138 = load i64, i64* %nbytes, align 8
  %conv5186 = trunc i64 %1138 to i32
  %add5187 = add nsw i32 %mul5185, %conv5186
  %mul5188 = mul nsw i32 0, %add5187
  %add5189 = add nsw i32 %mul5188, 0
  %neg5190 = xor i32 %add5189, -1
  %cmp5191 = icmp eq i32 %neg5190, -1
  %conv5192 = zext i1 %cmp5191 to i32
  %sub5193 = sub nsw i32 0, %conv5192
  %1139 = load i64, i64* %byte8_count, align 8
  %mul5194 = mul nsw i64 2, %1139
  %conv5195 = trunc i64 %mul5194 to i32
  %mul5196 = mul nsw i32 0, %conv5195
  %1140 = load i64, i64* %nbytes, align 8
  %conv5197 = trunc i64 %1140 to i32
  %add5198 = add nsw i32 %mul5196, %conv5197
  %mul5199 = mul nsw i32 0, %add5198
  %add5200 = add nsw i32 %mul5199, 1
  %shl5201 = shl i32 %add5200, 30
  %sub5202 = sub nsw i32 %shl5201, 1
  %mul5203 = mul nsw i32 %sub5202, 2
  %add5204 = add nsw i32 %mul5203, 1
  %sub5205 = sub nsw i32 %sub5193, %add5204
  br label %cond.end.5214

cond.false.5206:                                  ; preds = %cond.true.5172
  %1141 = load i64, i64* %byte8_count, align 8
  %mul5207 = mul nsw i64 2, %1141
  %conv5208 = trunc i64 %mul5207 to i32
  %mul5209 = mul nsw i32 0, %conv5208
  %1142 = load i64, i64* %nbytes, align 8
  %conv5210 = trunc i64 %1142 to i32
  %add5211 = add nsw i32 %mul5209, %conv5210
  %mul5212 = mul nsw i32 0, %add5211
  %add5213 = add nsw i32 %mul5212, 0
  br label %cond.end.5214

cond.end.5214:                                    ; preds = %cond.false.5206, %cond.true.5182
  %cond5215 = phi i32 [ %sub5205, %cond.true.5182 ], [ %add5213, %cond.false.5206 ]
  %cmp5216 = icmp slt i32 %cond5215, 0
  br i1 %cmp5216, label %cond.true.5218, label %cond.false.5311

cond.true.5218:                                   ; preds = %cond.end.5214
  %1143 = load i64, i64* %byte8_count, align 8
  %mul5219 = mul nsw i64 2, %1143
  %conv5220 = trunc i64 %mul5219 to i32
  %cmp5221 = icmp slt i32 %conv5220, 0
  br i1 %cmp5221, label %cond.true.5223, label %cond.false.5273

cond.true.5223:                                   ; preds = %cond.true.5218
  %1144 = load i64, i64* %nbytes, align 8
  %conv5224 = trunc i64 %1144 to i32
  %1145 = load i64, i64* %byte8_count, align 8
  %mul5225 = mul nsw i64 2, %1145
  %conv5226 = trunc i64 %mul5225 to i32
  %mul5227 = mul nsw i32 0, %conv5226
  %1146 = load i64, i64* %nbytes, align 8
  %conv5228 = trunc i64 %1146 to i32
  %add5229 = add nsw i32 %mul5227, %conv5228
  %mul5230 = mul nsw i32 0, %add5229
  %sub5231 = sub nsw i32 %mul5230, 1
  %cmp5232 = icmp slt i32 %sub5231, 0
  br i1 %cmp5232, label %cond.true.5234, label %cond.false.5258

cond.true.5234:                                   ; preds = %cond.true.5223
  %1147 = load i64, i64* %byte8_count, align 8
  %mul5235 = mul nsw i64 2, %1147
  %conv5236 = trunc i64 %mul5235 to i32
  %mul5237 = mul nsw i32 0, %conv5236
  %1148 = load i64, i64* %nbytes, align 8
  %conv5238 = trunc i64 %1148 to i32
  %add5239 = add nsw i32 %mul5237, %conv5238
  %mul5240 = mul nsw i32 0, %add5239
  %add5241 = add nsw i32 %mul5240, 0
  %neg5242 = xor i32 %add5241, -1
  %cmp5243 = icmp eq i32 %neg5242, -1
  %conv5244 = zext i1 %cmp5243 to i32
  %sub5245 = sub nsw i32 0, %conv5244
  %1149 = load i64, i64* %byte8_count, align 8
  %mul5246 = mul nsw i64 2, %1149
  %conv5247 = trunc i64 %mul5246 to i32
  %mul5248 = mul nsw i32 0, %conv5247
  %1150 = load i64, i64* %nbytes, align 8
  %conv5249 = trunc i64 %1150 to i32
  %add5250 = add nsw i32 %mul5248, %conv5249
  %mul5251 = mul nsw i32 0, %add5250
  %add5252 = add nsw i32 %mul5251, 1
  %shl5253 = shl i32 %add5252, 30
  %sub5254 = sub nsw i32 %shl5253, 1
  %mul5255 = mul nsw i32 %sub5254, 2
  %add5256 = add nsw i32 %mul5255, 1
  %sub5257 = sub nsw i32 %sub5245, %add5256
  br label %cond.end.5266

cond.false.5258:                                  ; preds = %cond.true.5223
  %1151 = load i64, i64* %byte8_count, align 8
  %mul5259 = mul nsw i64 2, %1151
  %conv5260 = trunc i64 %mul5259 to i32
  %mul5261 = mul nsw i32 0, %conv5260
  %1152 = load i64, i64* %nbytes, align 8
  %conv5262 = trunc i64 %1152 to i32
  %add5263 = add nsw i32 %mul5261, %conv5262
  %mul5264 = mul nsw i32 0, %add5263
  %add5265 = add nsw i32 %mul5264, 0
  br label %cond.end.5266

cond.end.5266:                                    ; preds = %cond.false.5258, %cond.true.5234
  %cond5267 = phi i32 [ %sub5257, %cond.true.5234 ], [ %add5265, %cond.false.5258 ]
  %1153 = load i64, i64* %byte8_count, align 8
  %mul5268 = mul nsw i64 2, %1153
  %conv5269 = trunc i64 %mul5268 to i32
  %sub5270 = sub nsw i32 %cond5267, %conv5269
  %cmp5271 = icmp slt i32 %conv5224, %sub5270
  br i1 %cmp5271, label %cond.true.5369, label %lor.lhs.false.5346

cond.false.5273:                                  ; preds = %cond.true.5218
  %1154 = load i64, i64* %byte8_count, align 8
  %mul5274 = mul nsw i64 2, %1154
  %conv5275 = trunc i64 %mul5274 to i32
  %mul5276 = mul nsw i32 0, %conv5275
  %1155 = load i64, i64* %nbytes, align 8
  %conv5277 = trunc i64 %1155 to i32
  %add5278 = add nsw i32 %mul5276, %conv5277
  %mul5279 = mul nsw i32 0, %add5278
  %sub5280 = sub nsw i32 %mul5279, 1
  %cmp5281 = icmp slt i32 %sub5280, 0
  br i1 %cmp5281, label %cond.true.5283, label %cond.false.5295

cond.true.5283:                                   ; preds = %cond.false.5273
  %1156 = load i64, i64* %byte8_count, align 8
  %mul5284 = mul nsw i64 2, %1156
  %conv5285 = trunc i64 %mul5284 to i32
  %mul5286 = mul nsw i32 0, %conv5285
  %1157 = load i64, i64* %nbytes, align 8
  %conv5287 = trunc i64 %1157 to i32
  %add5288 = add nsw i32 %mul5286, %conv5287
  %mul5289 = mul nsw i32 0, %add5288
  %add5290 = add nsw i32 %mul5289, 1
  %shl5291 = shl i32 %add5290, 30
  %sub5292 = sub nsw i32 %shl5291, 1
  %mul5293 = mul nsw i32 %sub5292, 2
  %add5294 = add nsw i32 %mul5293, 1
  br label %cond.end.5303

cond.false.5295:                                  ; preds = %cond.false.5273
  %1158 = load i64, i64* %byte8_count, align 8
  %mul5296 = mul nsw i64 2, %1158
  %conv5297 = trunc i64 %mul5296 to i32
  %mul5298 = mul nsw i32 0, %conv5297
  %1159 = load i64, i64* %nbytes, align 8
  %conv5299 = trunc i64 %1159 to i32
  %add5300 = add nsw i32 %mul5298, %conv5299
  %mul5301 = mul nsw i32 0, %add5300
  %sub5302 = sub nsw i32 %mul5301, 1
  br label %cond.end.5303

cond.end.5303:                                    ; preds = %cond.false.5295, %cond.true.5283
  %cond5304 = phi i32 [ %add5294, %cond.true.5283 ], [ %sub5302, %cond.false.5295 ]
  %1160 = load i64, i64* %byte8_count, align 8
  %mul5305 = mul nsw i64 2, %1160
  %conv5306 = trunc i64 %mul5305 to i32
  %sub5307 = sub nsw i32 %cond5304, %conv5306
  %1161 = load i64, i64* %nbytes, align 8
  %conv5308 = trunc i64 %1161 to i32
  %cmp5309 = icmp slt i32 %sub5307, %conv5308
  br i1 %cmp5309, label %cond.true.5369, label %lor.lhs.false.5346

cond.false.5311:                                  ; preds = %cond.end.5214
  %1162 = load i64, i64* %nbytes, align 8
  %conv5312 = trunc i64 %1162 to i32
  %cmp5313 = icmp slt i32 %conv5312, 0
  br i1 %cmp5313, label %cond.true.5315, label %cond.false.5324

cond.true.5315:                                   ; preds = %cond.false.5311
  %1163 = load i64, i64* %byte8_count, align 8
  %mul5316 = mul nsw i64 2, %1163
  %conv5317 = trunc i64 %mul5316 to i32
  %1164 = load i64, i64* %nbytes, align 8
  %conv5318 = trunc i64 %1164 to i32
  %1165 = load i64, i64* %byte8_count, align 8
  %mul5319 = mul nsw i64 2, %1165
  %conv5320 = trunc i64 %mul5319 to i32
  %add5321 = add nsw i32 %conv5318, %conv5320
  %cmp5322 = icmp sle i32 %conv5317, %add5321
  br i1 %cmp5322, label %cond.true.5369, label %lor.lhs.false.5346

cond.false.5324:                                  ; preds = %cond.false.5311
  %1166 = load i64, i64* %byte8_count, align 8
  %mul5325 = mul nsw i64 2, %1166
  %conv5326 = trunc i64 %mul5325 to i32
  %cmp5327 = icmp slt i32 %conv5326, 0
  br i1 %cmp5327, label %cond.true.5329, label %cond.false.5337

cond.true.5329:                                   ; preds = %cond.false.5324
  %1167 = load i64, i64* %nbytes, align 8
  %conv5330 = trunc i64 %1167 to i32
  %1168 = load i64, i64* %nbytes, align 8
  %conv5331 = trunc i64 %1168 to i32
  %1169 = load i64, i64* %byte8_count, align 8
  %mul5332 = mul nsw i64 2, %1169
  %conv5333 = trunc i64 %mul5332 to i32
  %add5334 = add nsw i32 %conv5331, %conv5333
  %cmp5335 = icmp sle i32 %conv5330, %add5334
  br i1 %cmp5335, label %cond.true.5369, label %lor.lhs.false.5346

cond.false.5337:                                  ; preds = %cond.false.5324
  %1170 = load i64, i64* %nbytes, align 8
  %conv5338 = trunc i64 %1170 to i32
  %1171 = load i64, i64* %byte8_count, align 8
  %mul5339 = mul nsw i64 2, %1171
  %conv5340 = trunc i64 %mul5339 to i32
  %add5341 = add nsw i32 %conv5338, %conv5340
  %1172 = load i64, i64* %byte8_count, align 8
  %mul5342 = mul nsw i64 2, %1172
  %conv5343 = trunc i64 %mul5342 to i32
  %cmp5344 = icmp slt i32 %add5341, %conv5343
  br i1 %cmp5344, label %cond.true.5369, label %lor.lhs.false.5346

lor.lhs.false.5346:                               ; preds = %cond.false.5337, %cond.true.5329, %cond.true.5315, %cond.end.5303, %cond.end.5266
  %1173 = load i64, i64* %nbytes, align 8
  %conv5347 = trunc i64 %1173 to i32
  %1174 = load i64, i64* %byte8_count, align 8
  %mul5348 = mul nsw i64 2, %1174
  %conv5349 = trunc i64 %mul5348 to i32
  %add5350 = add nsw i32 %conv5347, %conv5349
  %mul5351 = mul nsw i32 0, %add5350
  %sub5352 = sub nsw i32 %mul5351, 1
  %cmp5353 = icmp slt i32 %sub5352, 0
  br i1 %cmp5353, label %land.lhs.true.5355, label %lor.lhs.false.5362

land.lhs.true.5355:                               ; preds = %lor.lhs.false.5346
  %1175 = load i64, i64* %nbytes, align 8
  %conv5356 = trunc i64 %1175 to i32
  %1176 = load i64, i64* %byte8_count, align 8
  %mul5357 = mul nsw i64 2, %1176
  %conv5358 = trunc i64 %mul5357 to i32
  %add5359 = add nsw i32 %conv5356, %conv5358
  %cmp5360 = icmp slt i32 %add5359, -2147483648
  br i1 %cmp5360, label %cond.true.5369, label %lor.lhs.false.5362

lor.lhs.false.5362:                               ; preds = %land.lhs.true.5355, %lor.lhs.false.5346
  %1177 = load i64, i64* %nbytes, align 8
  %conv5363 = trunc i64 %1177 to i32
  %1178 = load i64, i64* %byte8_count, align 8
  %mul5364 = mul nsw i64 2, %1178
  %conv5365 = trunc i64 %mul5364 to i32
  %add5366 = add nsw i32 %conv5363, %conv5365
  %cmp5367 = icmp slt i32 2147483647, %add5366
  br i1 %cmp5367, label %cond.true.5369, label %cond.false.5391

cond.true.5369:                                   ; preds = %lor.lhs.false.5362, %land.lhs.true.5355, %cond.false.5337, %cond.true.5329, %cond.true.5315, %cond.end.5303, %cond.end.5266
  %1179 = load i64, i64* %nbytes, align 8
  %conv5370 = trunc i64 %1179 to i32
  %1180 = load i64, i64* %byte8_count, align 8
  %mul5371 = mul nsw i64 2, %1180
  %conv5372 = trunc i64 %mul5371 to i32
  %add5373 = add i32 %conv5370, %conv5372
  %cmp5374 = icmp ule i32 %add5373, 2147483647
  br i1 %cmp5374, label %cond.true.5376, label %cond.false.5381

cond.true.5376:                                   ; preds = %cond.true.5369
  %1181 = load i64, i64* %nbytes, align 8
  %conv5377 = trunc i64 %1181 to i32
  %1182 = load i64, i64* %byte8_count, align 8
  %mul5378 = mul nsw i64 2, %1182
  %conv5379 = trunc i64 %mul5378 to i32
  %add5380 = add i32 %conv5377, %conv5379
  br label %cond.end.5388

cond.false.5381:                                  ; preds = %cond.true.5369
  %1183 = load i64, i64* %nbytes, align 8
  %conv5382 = trunc i64 %1183 to i32
  %1184 = load i64, i64* %byte8_count, align 8
  %mul5383 = mul nsw i64 2, %1184
  %conv5384 = trunc i64 %mul5383 to i32
  %add5385 = add i32 %conv5382, %conv5384
  %sub5386 = sub i32 %add5385, -2147483648
  %add5387 = add nsw i32 %sub5386, -2147483648
  br label %cond.end.5388

cond.end.5388:                                    ; preds = %cond.false.5381, %cond.true.5376
  %cond5389 = phi i32 [ %add5380, %cond.true.5376 ], [ %add5387, %cond.false.5381 ]
  %conv5390 = sext i32 %cond5389 to i64
  store i64 %conv5390, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.5391:                                  ; preds = %lor.lhs.false.5362
  %1185 = load i64, i64* %nbytes, align 8
  %conv5392 = trunc i64 %1185 to i32
  %1186 = load i64, i64* %byte8_count, align 8
  %mul5393 = mul nsw i64 2, %1186
  %conv5394 = trunc i64 %mul5393 to i32
  %add5395 = add i32 %conv5392, %conv5394
  %cmp5396 = icmp ule i32 %add5395, 2147483647
  br i1 %cmp5396, label %cond.true.5398, label %cond.false.5403

cond.true.5398:                                   ; preds = %cond.false.5391
  %1187 = load i64, i64* %nbytes, align 8
  %conv5399 = trunc i64 %1187 to i32
  %1188 = load i64, i64* %byte8_count, align 8
  %mul5400 = mul nsw i64 2, %1188
  %conv5401 = trunc i64 %mul5400 to i32
  %add5402 = add i32 %conv5399, %conv5401
  br label %cond.end.5410

cond.false.5403:                                  ; preds = %cond.false.5391
  %1189 = load i64, i64* %nbytes, align 8
  %conv5404 = trunc i64 %1189 to i32
  %1190 = load i64, i64* %byte8_count, align 8
  %mul5405 = mul nsw i64 2, %1190
  %conv5406 = trunc i64 %mul5405 to i32
  %add5407 = add i32 %conv5404, %conv5406
  %sub5408 = sub i32 %add5407, -2147483648
  %add5409 = add nsw i32 %sub5408, -2147483648
  br label %cond.end.5410

cond.end.5410:                                    ; preds = %cond.false.5403, %cond.true.5398
  %cond5411 = phi i32 [ %add5402, %cond.true.5398 ], [ %add5409, %cond.false.5403 ]
  %conv5412 = sext i32 %cond5411 to i64
  store i64 %conv5412, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.5413:                                  ; preds = %cond.true.5171
  %1191 = load i64, i64* %byte8_count, align 8
  %mul5414 = mul nsw i64 2, %1191
  %mul5415 = mul nsw i64 0, %mul5414
  %1192 = load i64, i64* %nbytes, align 8
  %add5416 = add nsw i64 %mul5415, %1192
  %mul5417 = mul nsw i64 0, %add5416
  %sub5418 = sub nsw i64 %mul5417, 1
  %cmp5419 = icmp slt i64 %sub5418, 0
  br i1 %cmp5419, label %cond.true.5421, label %cond.false.5442

cond.true.5421:                                   ; preds = %cond.false.5413
  %1193 = load i64, i64* %byte8_count, align 8
  %mul5422 = mul nsw i64 2, %1193
  %mul5423 = mul nsw i64 0, %mul5422
  %1194 = load i64, i64* %nbytes, align 8
  %add5424 = add nsw i64 %mul5423, %1194
  %mul5425 = mul nsw i64 0, %add5424
  %add5426 = add nsw i64 %mul5425, 0
  %neg5427 = xor i64 %add5426, -1
  %cmp5428 = icmp eq i64 %neg5427, -1
  %conv5429 = zext i1 %cmp5428 to i32
  %sub5430 = sub nsw i32 0, %conv5429
  %conv5431 = sext i32 %sub5430 to i64
  %1195 = load i64, i64* %byte8_count, align 8
  %mul5432 = mul nsw i64 2, %1195
  %mul5433 = mul nsw i64 0, %mul5432
  %1196 = load i64, i64* %nbytes, align 8
  %add5434 = add nsw i64 %mul5433, %1196
  %mul5435 = mul nsw i64 0, %add5434
  %add5436 = add nsw i64 %mul5435, 1
  %shl5437 = shl i64 %add5436, 62
  %sub5438 = sub nsw i64 %shl5437, 1
  %mul5439 = mul nsw i64 %sub5438, 2
  %add5440 = add nsw i64 %mul5439, 1
  %sub5441 = sub nsw i64 %conv5431, %add5440
  br label %cond.end.5448

cond.false.5442:                                  ; preds = %cond.false.5413
  %1197 = load i64, i64* %byte8_count, align 8
  %mul5443 = mul nsw i64 2, %1197
  %mul5444 = mul nsw i64 0, %mul5443
  %1198 = load i64, i64* %nbytes, align 8
  %add5445 = add nsw i64 %mul5444, %1198
  %mul5446 = mul nsw i64 0, %add5445
  %add5447 = add nsw i64 %mul5446, 0
  br label %cond.end.5448

cond.end.5448:                                    ; preds = %cond.false.5442, %cond.true.5421
  %cond5449 = phi i64 [ %sub5441, %cond.true.5421 ], [ %add5447, %cond.false.5442 ]
  %cmp5450 = icmp slt i64 %cond5449, 0
  br i1 %cmp5450, label %cond.true.5452, label %cond.false.5527

cond.true.5452:                                   ; preds = %cond.end.5448
  %1199 = load i64, i64* %byte8_count, align 8
  %mul5453 = mul nsw i64 2, %1199
  %cmp5454 = icmp slt i64 %mul5453, 0
  br i1 %cmp5454, label %cond.true.5456, label %cond.false.5497

cond.true.5456:                                   ; preds = %cond.true.5452
  %1200 = load i64, i64* %nbytes, align 8
  %1201 = load i64, i64* %byte8_count, align 8
  %mul5457 = mul nsw i64 2, %1201
  %mul5458 = mul nsw i64 0, %mul5457
  %1202 = load i64, i64* %nbytes, align 8
  %add5459 = add nsw i64 %mul5458, %1202
  %mul5460 = mul nsw i64 0, %add5459
  %sub5461 = sub nsw i64 %mul5460, 1
  %cmp5462 = icmp slt i64 %sub5461, 0
  br i1 %cmp5462, label %cond.true.5464, label %cond.false.5485

cond.true.5464:                                   ; preds = %cond.true.5456
  %1203 = load i64, i64* %byte8_count, align 8
  %mul5465 = mul nsw i64 2, %1203
  %mul5466 = mul nsw i64 0, %mul5465
  %1204 = load i64, i64* %nbytes, align 8
  %add5467 = add nsw i64 %mul5466, %1204
  %mul5468 = mul nsw i64 0, %add5467
  %add5469 = add nsw i64 %mul5468, 0
  %neg5470 = xor i64 %add5469, -1
  %cmp5471 = icmp eq i64 %neg5470, -1
  %conv5472 = zext i1 %cmp5471 to i32
  %sub5473 = sub nsw i32 0, %conv5472
  %conv5474 = sext i32 %sub5473 to i64
  %1205 = load i64, i64* %byte8_count, align 8
  %mul5475 = mul nsw i64 2, %1205
  %mul5476 = mul nsw i64 0, %mul5475
  %1206 = load i64, i64* %nbytes, align 8
  %add5477 = add nsw i64 %mul5476, %1206
  %mul5478 = mul nsw i64 0, %add5477
  %add5479 = add nsw i64 %mul5478, 1
  %shl5480 = shl i64 %add5479, 62
  %sub5481 = sub nsw i64 %shl5480, 1
  %mul5482 = mul nsw i64 %sub5481, 2
  %add5483 = add nsw i64 %mul5482, 1
  %sub5484 = sub nsw i64 %conv5474, %add5483
  br label %cond.end.5491

cond.false.5485:                                  ; preds = %cond.true.5456
  %1207 = load i64, i64* %byte8_count, align 8
  %mul5486 = mul nsw i64 2, %1207
  %mul5487 = mul nsw i64 0, %mul5486
  %1208 = load i64, i64* %nbytes, align 8
  %add5488 = add nsw i64 %mul5487, %1208
  %mul5489 = mul nsw i64 0, %add5488
  %add5490 = add nsw i64 %mul5489, 0
  br label %cond.end.5491

cond.end.5491:                                    ; preds = %cond.false.5485, %cond.true.5464
  %cond5492 = phi i64 [ %sub5484, %cond.true.5464 ], [ %add5490, %cond.false.5485 ]
  %1209 = load i64, i64* %byte8_count, align 8
  %mul5493 = mul nsw i64 2, %1209
  %sub5494 = sub nsw i64 %cond5492, %mul5493
  %cmp5495 = icmp slt i64 %1200, %sub5494
  br i1 %cmp5495, label %cond.true.5568, label %lor.lhs.false.5551

cond.false.5497:                                  ; preds = %cond.true.5452
  %1210 = load i64, i64* %byte8_count, align 8
  %mul5498 = mul nsw i64 2, %1210
  %mul5499 = mul nsw i64 0, %mul5498
  %1211 = load i64, i64* %nbytes, align 8
  %add5500 = add nsw i64 %mul5499, %1211
  %mul5501 = mul nsw i64 0, %add5500
  %sub5502 = sub nsw i64 %mul5501, 1
  %cmp5503 = icmp slt i64 %sub5502, 0
  br i1 %cmp5503, label %cond.true.5505, label %cond.false.5515

cond.true.5505:                                   ; preds = %cond.false.5497
  %1212 = load i64, i64* %byte8_count, align 8
  %mul5506 = mul nsw i64 2, %1212
  %mul5507 = mul nsw i64 0, %mul5506
  %1213 = load i64, i64* %nbytes, align 8
  %add5508 = add nsw i64 %mul5507, %1213
  %mul5509 = mul nsw i64 0, %add5508
  %add5510 = add nsw i64 %mul5509, 1
  %shl5511 = shl i64 %add5510, 62
  %sub5512 = sub nsw i64 %shl5511, 1
  %mul5513 = mul nsw i64 %sub5512, 2
  %add5514 = add nsw i64 %mul5513, 1
  br label %cond.end.5521

cond.false.5515:                                  ; preds = %cond.false.5497
  %1214 = load i64, i64* %byte8_count, align 8
  %mul5516 = mul nsw i64 2, %1214
  %mul5517 = mul nsw i64 0, %mul5516
  %1215 = load i64, i64* %nbytes, align 8
  %add5518 = add nsw i64 %mul5517, %1215
  %mul5519 = mul nsw i64 0, %add5518
  %sub5520 = sub nsw i64 %mul5519, 1
  br label %cond.end.5521

cond.end.5521:                                    ; preds = %cond.false.5515, %cond.true.5505
  %cond5522 = phi i64 [ %add5514, %cond.true.5505 ], [ %sub5520, %cond.false.5515 ]
  %1216 = load i64, i64* %byte8_count, align 8
  %mul5523 = mul nsw i64 2, %1216
  %sub5524 = sub nsw i64 %cond5522, %mul5523
  %1217 = load i64, i64* %nbytes, align 8
  %cmp5525 = icmp slt i64 %sub5524, %1217
  br i1 %cmp5525, label %cond.true.5568, label %lor.lhs.false.5551

cond.false.5527:                                  ; preds = %cond.end.5448
  %1218 = load i64, i64* %nbytes, align 8
  %cmp5528 = icmp slt i64 %1218, 0
  br i1 %cmp5528, label %cond.true.5530, label %cond.false.5536

cond.true.5530:                                   ; preds = %cond.false.5527
  %1219 = load i64, i64* %byte8_count, align 8
  %mul5531 = mul nsw i64 2, %1219
  %1220 = load i64, i64* %nbytes, align 8
  %1221 = load i64, i64* %byte8_count, align 8
  %mul5532 = mul nsw i64 2, %1221
  %add5533 = add nsw i64 %1220, %mul5532
  %cmp5534 = icmp sle i64 %mul5531, %add5533
  br i1 %cmp5534, label %cond.true.5568, label %lor.lhs.false.5551

cond.false.5536:                                  ; preds = %cond.false.5527
  %1222 = load i64, i64* %byte8_count, align 8
  %mul5537 = mul nsw i64 2, %1222
  %cmp5538 = icmp slt i64 %mul5537, 0
  br i1 %cmp5538, label %cond.true.5540, label %cond.false.5545

cond.true.5540:                                   ; preds = %cond.false.5536
  %1223 = load i64, i64* %nbytes, align 8
  %1224 = load i64, i64* %nbytes, align 8
  %1225 = load i64, i64* %byte8_count, align 8
  %mul5541 = mul nsw i64 2, %1225
  %add5542 = add nsw i64 %1224, %mul5541
  %cmp5543 = icmp sle i64 %1223, %add5542
  br i1 %cmp5543, label %cond.true.5568, label %lor.lhs.false.5551

cond.false.5545:                                  ; preds = %cond.false.5536
  %1226 = load i64, i64* %nbytes, align 8
  %1227 = load i64, i64* %byte8_count, align 8
  %mul5546 = mul nsw i64 2, %1227
  %add5547 = add nsw i64 %1226, %mul5546
  %1228 = load i64, i64* %byte8_count, align 8
  %mul5548 = mul nsw i64 2, %1228
  %cmp5549 = icmp slt i64 %add5547, %mul5548
  br i1 %cmp5549, label %cond.true.5568, label %lor.lhs.false.5551

lor.lhs.false.5551:                               ; preds = %cond.false.5545, %cond.true.5540, %cond.true.5530, %cond.end.5521, %cond.end.5491
  %1229 = load i64, i64* %nbytes, align 8
  %1230 = load i64, i64* %byte8_count, align 8
  %mul5552 = mul nsw i64 2, %1230
  %add5553 = add nsw i64 %1229, %mul5552
  %mul5554 = mul nsw i64 0, %add5553
  %sub5555 = sub nsw i64 %mul5554, 1
  %cmp5556 = icmp slt i64 %sub5555, 0
  br i1 %cmp5556, label %land.lhs.true.5558, label %lor.lhs.false.5563

land.lhs.true.5558:                               ; preds = %lor.lhs.false.5551
  %1231 = load i64, i64* %nbytes, align 8
  %1232 = load i64, i64* %byte8_count, align 8
  %mul5559 = mul nsw i64 2, %1232
  %add5560 = add nsw i64 %1231, %mul5559
  %cmp5561 = icmp slt i64 %add5560, -2147483648
  br i1 %cmp5561, label %cond.true.5568, label %lor.lhs.false.5563

lor.lhs.false.5563:                               ; preds = %land.lhs.true.5558, %lor.lhs.false.5551
  %1233 = load i64, i64* %nbytes, align 8
  %1234 = load i64, i64* %byte8_count, align 8
  %mul5564 = mul nsw i64 2, %1234
  %add5565 = add nsw i64 %1233, %mul5564
  %cmp5566 = icmp slt i64 2147483647, %add5565
  br i1 %cmp5566, label %cond.true.5568, label %cond.false.5590

cond.true.5568:                                   ; preds = %lor.lhs.false.5563, %land.lhs.true.5558, %cond.false.5545, %cond.true.5540, %cond.true.5530, %cond.end.5521, %cond.end.5491
  %1235 = load i64, i64* %nbytes, align 8
  %conv5569 = trunc i64 %1235 to i32
  %1236 = load i64, i64* %byte8_count, align 8
  %mul5570 = mul nsw i64 2, %1236
  %conv5571 = trunc i64 %mul5570 to i32
  %add5572 = add i32 %conv5569, %conv5571
  %cmp5573 = icmp ule i32 %add5572, 2147483647
  br i1 %cmp5573, label %cond.true.5575, label %cond.false.5580

cond.true.5575:                                   ; preds = %cond.true.5568
  %1237 = load i64, i64* %nbytes, align 8
  %conv5576 = trunc i64 %1237 to i32
  %1238 = load i64, i64* %byte8_count, align 8
  %mul5577 = mul nsw i64 2, %1238
  %conv5578 = trunc i64 %mul5577 to i32
  %add5579 = add i32 %conv5576, %conv5578
  br label %cond.end.5587

cond.false.5580:                                  ; preds = %cond.true.5568
  %1239 = load i64, i64* %nbytes, align 8
  %conv5581 = trunc i64 %1239 to i32
  %1240 = load i64, i64* %byte8_count, align 8
  %mul5582 = mul nsw i64 2, %1240
  %conv5583 = trunc i64 %mul5582 to i32
  %add5584 = add i32 %conv5581, %conv5583
  %sub5585 = sub i32 %add5584, -2147483648
  %add5586 = add nsw i32 %sub5585, -2147483648
  br label %cond.end.5587

cond.end.5587:                                    ; preds = %cond.false.5580, %cond.true.5575
  %cond5588 = phi i32 [ %add5579, %cond.true.5575 ], [ %add5586, %cond.false.5580 ]
  %conv5589 = sext i32 %cond5588 to i64
  store i64 %conv5589, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.5590:                                  ; preds = %lor.lhs.false.5563
  %1241 = load i64, i64* %nbytes, align 8
  %conv5591 = trunc i64 %1241 to i32
  %1242 = load i64, i64* %byte8_count, align 8
  %mul5592 = mul nsw i64 2, %1242
  %conv5593 = trunc i64 %mul5592 to i32
  %add5594 = add i32 %conv5591, %conv5593
  %cmp5595 = icmp ule i32 %add5594, 2147483647
  br i1 %cmp5595, label %cond.true.5597, label %cond.false.5602

cond.true.5597:                                   ; preds = %cond.false.5590
  %1243 = load i64, i64* %nbytes, align 8
  %conv5598 = trunc i64 %1243 to i32
  %1244 = load i64, i64* %byte8_count, align 8
  %mul5599 = mul nsw i64 2, %1244
  %conv5600 = trunc i64 %mul5599 to i32
  %add5601 = add i32 %conv5598, %conv5600
  br label %cond.end.5609

cond.false.5602:                                  ; preds = %cond.false.5590
  %1245 = load i64, i64* %nbytes, align 8
  %conv5603 = trunc i64 %1245 to i32
  %1246 = load i64, i64* %byte8_count, align 8
  %mul5604 = mul nsw i64 2, %1246
  %conv5605 = trunc i64 %mul5604 to i32
  %add5606 = add i32 %conv5603, %conv5605
  %sub5607 = sub i32 %add5606, -2147483648
  %add5608 = add nsw i32 %sub5607, -2147483648
  br label %cond.end.5609

cond.end.5609:                                    ; preds = %cond.false.5602, %cond.true.5597
  %cond5610 = phi i32 [ %add5601, %cond.true.5597 ], [ %add5608, %cond.false.5602 ]
  %conv5611 = sext i32 %cond5610 to i64
  store i64 %conv5611, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.5612:                                  ; preds = %cond.false.5170
  br i1 true, label %cond.true.5613, label %cond.false.5984

cond.true.5613:                                   ; preds = %cond.false.5612
  br i1 false, label %cond.true.5614, label %cond.false.5799

cond.true.5614:                                   ; preds = %cond.true.5613
  %1247 = load i64, i64* %byte8_count, align 8
  %mul5615 = mul nsw i64 2, %1247
  %mul5616 = mul nsw i64 0, %mul5615
  %1248 = load i64, i64* %nbytes, align 8
  %add5617 = add nsw i64 %mul5616, %1248
  %mul5618 = mul nsw i64 0, %add5617
  %sub5619 = sub nsw i64 %mul5618, 1
  %cmp5620 = icmp slt i64 %sub5619, 0
  br i1 %cmp5620, label %cond.true.5622, label %cond.false.5643

cond.true.5622:                                   ; preds = %cond.true.5614
  %1249 = load i64, i64* %byte8_count, align 8
  %mul5623 = mul nsw i64 2, %1249
  %mul5624 = mul nsw i64 0, %mul5623
  %1250 = load i64, i64* %nbytes, align 8
  %add5625 = add nsw i64 %mul5624, %1250
  %mul5626 = mul nsw i64 0, %add5625
  %add5627 = add nsw i64 %mul5626, 0
  %neg5628 = xor i64 %add5627, -1
  %cmp5629 = icmp eq i64 %neg5628, -1
  %conv5630 = zext i1 %cmp5629 to i32
  %sub5631 = sub nsw i32 0, %conv5630
  %conv5632 = sext i32 %sub5631 to i64
  %1251 = load i64, i64* %byte8_count, align 8
  %mul5633 = mul nsw i64 2, %1251
  %mul5634 = mul nsw i64 0, %mul5633
  %1252 = load i64, i64* %nbytes, align 8
  %add5635 = add nsw i64 %mul5634, %1252
  %mul5636 = mul nsw i64 0, %add5635
  %add5637 = add nsw i64 %mul5636, 1
  %shl5638 = shl i64 %add5637, 62
  %sub5639 = sub nsw i64 %shl5638, 1
  %mul5640 = mul nsw i64 %sub5639, 2
  %add5641 = add nsw i64 %mul5640, 1
  %sub5642 = sub nsw i64 %conv5632, %add5641
  br label %cond.end.5649

cond.false.5643:                                  ; preds = %cond.true.5614
  %1253 = load i64, i64* %byte8_count, align 8
  %mul5644 = mul nsw i64 2, %1253
  %mul5645 = mul nsw i64 0, %mul5644
  %1254 = load i64, i64* %nbytes, align 8
  %add5646 = add nsw i64 %mul5645, %1254
  %mul5647 = mul nsw i64 0, %add5646
  %add5648 = add nsw i64 %mul5647, 0
  br label %cond.end.5649

cond.end.5649:                                    ; preds = %cond.false.5643, %cond.true.5622
  %cond5650 = phi i64 [ %sub5642, %cond.true.5622 ], [ %add5648, %cond.false.5643 ]
  %cmp5651 = icmp slt i64 %cond5650, 0
  br i1 %cmp5651, label %cond.true.5653, label %cond.false.5728

cond.true.5653:                                   ; preds = %cond.end.5649
  %1255 = load i64, i64* %byte8_count, align 8
  %mul5654 = mul nsw i64 2, %1255
  %cmp5655 = icmp slt i64 %mul5654, 0
  br i1 %cmp5655, label %cond.true.5657, label %cond.false.5698

cond.true.5657:                                   ; preds = %cond.true.5653
  %1256 = load i64, i64* %nbytes, align 8
  %1257 = load i64, i64* %byte8_count, align 8
  %mul5658 = mul nsw i64 2, %1257
  %mul5659 = mul nsw i64 0, %mul5658
  %1258 = load i64, i64* %nbytes, align 8
  %add5660 = add nsw i64 %mul5659, %1258
  %mul5661 = mul nsw i64 0, %add5660
  %sub5662 = sub nsw i64 %mul5661, 1
  %cmp5663 = icmp slt i64 %sub5662, 0
  br i1 %cmp5663, label %cond.true.5665, label %cond.false.5686

cond.true.5665:                                   ; preds = %cond.true.5657
  %1259 = load i64, i64* %byte8_count, align 8
  %mul5666 = mul nsw i64 2, %1259
  %mul5667 = mul nsw i64 0, %mul5666
  %1260 = load i64, i64* %nbytes, align 8
  %add5668 = add nsw i64 %mul5667, %1260
  %mul5669 = mul nsw i64 0, %add5668
  %add5670 = add nsw i64 %mul5669, 0
  %neg5671 = xor i64 %add5670, -1
  %cmp5672 = icmp eq i64 %neg5671, -1
  %conv5673 = zext i1 %cmp5672 to i32
  %sub5674 = sub nsw i32 0, %conv5673
  %conv5675 = sext i32 %sub5674 to i64
  %1261 = load i64, i64* %byte8_count, align 8
  %mul5676 = mul nsw i64 2, %1261
  %mul5677 = mul nsw i64 0, %mul5676
  %1262 = load i64, i64* %nbytes, align 8
  %add5678 = add nsw i64 %mul5677, %1262
  %mul5679 = mul nsw i64 0, %add5678
  %add5680 = add nsw i64 %mul5679, 1
  %shl5681 = shl i64 %add5680, 62
  %sub5682 = sub nsw i64 %shl5681, 1
  %mul5683 = mul nsw i64 %sub5682, 2
  %add5684 = add nsw i64 %mul5683, 1
  %sub5685 = sub nsw i64 %conv5675, %add5684
  br label %cond.end.5692

cond.false.5686:                                  ; preds = %cond.true.5657
  %1263 = load i64, i64* %byte8_count, align 8
  %mul5687 = mul nsw i64 2, %1263
  %mul5688 = mul nsw i64 0, %mul5687
  %1264 = load i64, i64* %nbytes, align 8
  %add5689 = add nsw i64 %mul5688, %1264
  %mul5690 = mul nsw i64 0, %add5689
  %add5691 = add nsw i64 %mul5690, 0
  br label %cond.end.5692

cond.end.5692:                                    ; preds = %cond.false.5686, %cond.true.5665
  %cond5693 = phi i64 [ %sub5685, %cond.true.5665 ], [ %add5691, %cond.false.5686 ]
  %1265 = load i64, i64* %byte8_count, align 8
  %mul5694 = mul nsw i64 2, %1265
  %sub5695 = sub nsw i64 %cond5693, %mul5694
  %cmp5696 = icmp slt i64 %1256, %sub5695
  br i1 %cmp5696, label %cond.true.5769, label %lor.lhs.false.5752

cond.false.5698:                                  ; preds = %cond.true.5653
  %1266 = load i64, i64* %byte8_count, align 8
  %mul5699 = mul nsw i64 2, %1266
  %mul5700 = mul nsw i64 0, %mul5699
  %1267 = load i64, i64* %nbytes, align 8
  %add5701 = add nsw i64 %mul5700, %1267
  %mul5702 = mul nsw i64 0, %add5701
  %sub5703 = sub nsw i64 %mul5702, 1
  %cmp5704 = icmp slt i64 %sub5703, 0
  br i1 %cmp5704, label %cond.true.5706, label %cond.false.5716

cond.true.5706:                                   ; preds = %cond.false.5698
  %1268 = load i64, i64* %byte8_count, align 8
  %mul5707 = mul nsw i64 2, %1268
  %mul5708 = mul nsw i64 0, %mul5707
  %1269 = load i64, i64* %nbytes, align 8
  %add5709 = add nsw i64 %mul5708, %1269
  %mul5710 = mul nsw i64 0, %add5709
  %add5711 = add nsw i64 %mul5710, 1
  %shl5712 = shl i64 %add5711, 62
  %sub5713 = sub nsw i64 %shl5712, 1
  %mul5714 = mul nsw i64 %sub5713, 2
  %add5715 = add nsw i64 %mul5714, 1
  br label %cond.end.5722

cond.false.5716:                                  ; preds = %cond.false.5698
  %1270 = load i64, i64* %byte8_count, align 8
  %mul5717 = mul nsw i64 2, %1270
  %mul5718 = mul nsw i64 0, %mul5717
  %1271 = load i64, i64* %nbytes, align 8
  %add5719 = add nsw i64 %mul5718, %1271
  %mul5720 = mul nsw i64 0, %add5719
  %sub5721 = sub nsw i64 %mul5720, 1
  br label %cond.end.5722

cond.end.5722:                                    ; preds = %cond.false.5716, %cond.true.5706
  %cond5723 = phi i64 [ %add5715, %cond.true.5706 ], [ %sub5721, %cond.false.5716 ]
  %1272 = load i64, i64* %byte8_count, align 8
  %mul5724 = mul nsw i64 2, %1272
  %sub5725 = sub nsw i64 %cond5723, %mul5724
  %1273 = load i64, i64* %nbytes, align 8
  %cmp5726 = icmp slt i64 %sub5725, %1273
  br i1 %cmp5726, label %cond.true.5769, label %lor.lhs.false.5752

cond.false.5728:                                  ; preds = %cond.end.5649
  %1274 = load i64, i64* %nbytes, align 8
  %cmp5729 = icmp slt i64 %1274, 0
  br i1 %cmp5729, label %cond.true.5731, label %cond.false.5737

cond.true.5731:                                   ; preds = %cond.false.5728
  %1275 = load i64, i64* %byte8_count, align 8
  %mul5732 = mul nsw i64 2, %1275
  %1276 = load i64, i64* %nbytes, align 8
  %1277 = load i64, i64* %byte8_count, align 8
  %mul5733 = mul nsw i64 2, %1277
  %add5734 = add nsw i64 %1276, %mul5733
  %cmp5735 = icmp sle i64 %mul5732, %add5734
  br i1 %cmp5735, label %cond.true.5769, label %lor.lhs.false.5752

cond.false.5737:                                  ; preds = %cond.false.5728
  %1278 = load i64, i64* %byte8_count, align 8
  %mul5738 = mul nsw i64 2, %1278
  %cmp5739 = icmp slt i64 %mul5738, 0
  br i1 %cmp5739, label %cond.true.5741, label %cond.false.5746

cond.true.5741:                                   ; preds = %cond.false.5737
  %1279 = load i64, i64* %nbytes, align 8
  %1280 = load i64, i64* %nbytes, align 8
  %1281 = load i64, i64* %byte8_count, align 8
  %mul5742 = mul nsw i64 2, %1281
  %add5743 = add nsw i64 %1280, %mul5742
  %cmp5744 = icmp sle i64 %1279, %add5743
  br i1 %cmp5744, label %cond.true.5769, label %lor.lhs.false.5752

cond.false.5746:                                  ; preds = %cond.false.5737
  %1282 = load i64, i64* %nbytes, align 8
  %1283 = load i64, i64* %byte8_count, align 8
  %mul5747 = mul nsw i64 2, %1283
  %add5748 = add nsw i64 %1282, %mul5747
  %1284 = load i64, i64* %byte8_count, align 8
  %mul5749 = mul nsw i64 2, %1284
  %cmp5750 = icmp slt i64 %add5748, %mul5749
  br i1 %cmp5750, label %cond.true.5769, label %lor.lhs.false.5752

lor.lhs.false.5752:                               ; preds = %cond.false.5746, %cond.true.5741, %cond.true.5731, %cond.end.5722, %cond.end.5692
  %1285 = load i64, i64* %nbytes, align 8
  %1286 = load i64, i64* %byte8_count, align 8
  %mul5753 = mul nsw i64 2, %1286
  %add5754 = add nsw i64 %1285, %mul5753
  %mul5755 = mul nsw i64 0, %add5754
  %sub5756 = sub nsw i64 %mul5755, 1
  %cmp5757 = icmp slt i64 %sub5756, 0
  br i1 %cmp5757, label %land.lhs.true.5759, label %lor.lhs.false.5764

land.lhs.true.5759:                               ; preds = %lor.lhs.false.5752
  %1287 = load i64, i64* %nbytes, align 8
  %1288 = load i64, i64* %byte8_count, align 8
  %mul5760 = mul nsw i64 2, %1288
  %add5761 = add nsw i64 %1287, %mul5760
  %cmp5762 = icmp slt i64 %add5761, -9223372036854775808
  br i1 %cmp5762, label %cond.true.5769, label %lor.lhs.false.5764

lor.lhs.false.5764:                               ; preds = %land.lhs.true.5759, %lor.lhs.false.5752
  %1289 = load i64, i64* %nbytes, align 8
  %1290 = load i64, i64* %byte8_count, align 8
  %mul5765 = mul nsw i64 2, %1290
  %add5766 = add nsw i64 %1289, %mul5765
  %cmp5767 = icmp slt i64 9223372036854775807, %add5766
  br i1 %cmp5767, label %cond.true.5769, label %cond.false.5784

cond.true.5769:                                   ; preds = %lor.lhs.false.5764, %land.lhs.true.5759, %cond.false.5746, %cond.true.5741, %cond.true.5731, %cond.end.5722, %cond.end.5692
  %1291 = load i64, i64* %nbytes, align 8
  %1292 = load i64, i64* %byte8_count, align 8
  %mul5770 = mul nsw i64 2, %1292
  %add5771 = add i64 %1291, %mul5770
  %cmp5772 = icmp ule i64 %add5771, 9223372036854775807
  br i1 %cmp5772, label %cond.true.5774, label %cond.false.5777

cond.true.5774:                                   ; preds = %cond.true.5769
  %1293 = load i64, i64* %nbytes, align 8
  %1294 = load i64, i64* %byte8_count, align 8
  %mul5775 = mul nsw i64 2, %1294
  %add5776 = add i64 %1293, %mul5775
  br label %cond.end.5782

cond.false.5777:                                  ; preds = %cond.true.5769
  %1295 = load i64, i64* %nbytes, align 8
  %1296 = load i64, i64* %byte8_count, align 8
  %mul5778 = mul nsw i64 2, %1296
  %add5779 = add i64 %1295, %mul5778
  %sub5780 = sub i64 %add5779, -9223372036854775808
  %add5781 = add nsw i64 %sub5780, -9223372036854775808
  br label %cond.end.5782

cond.end.5782:                                    ; preds = %cond.false.5777, %cond.true.5774
  %cond5783 = phi i64 [ %add5776, %cond.true.5774 ], [ %add5781, %cond.false.5777 ]
  store i64 %cond5783, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.5784:                                  ; preds = %lor.lhs.false.5764
  %1297 = load i64, i64* %nbytes, align 8
  %1298 = load i64, i64* %byte8_count, align 8
  %mul5785 = mul nsw i64 2, %1298
  %add5786 = add i64 %1297, %mul5785
  %cmp5787 = icmp ule i64 %add5786, 9223372036854775807
  br i1 %cmp5787, label %cond.true.5789, label %cond.false.5792

cond.true.5789:                                   ; preds = %cond.false.5784
  %1299 = load i64, i64* %nbytes, align 8
  %1300 = load i64, i64* %byte8_count, align 8
  %mul5790 = mul nsw i64 2, %1300
  %add5791 = add i64 %1299, %mul5790
  br label %cond.end.5797

cond.false.5792:                                  ; preds = %cond.false.5784
  %1301 = load i64, i64* %nbytes, align 8
  %1302 = load i64, i64* %byte8_count, align 8
  %mul5793 = mul nsw i64 2, %1302
  %add5794 = add i64 %1301, %mul5793
  %sub5795 = sub i64 %add5794, -9223372036854775808
  %add5796 = add nsw i64 %sub5795, -9223372036854775808
  br label %cond.end.5797

cond.end.5797:                                    ; preds = %cond.false.5792, %cond.true.5789
  %cond5798 = phi i64 [ %add5791, %cond.true.5789 ], [ %add5796, %cond.false.5792 ]
  store i64 %cond5798, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.5799:                                  ; preds = %cond.true.5613
  %1303 = load i64, i64* %byte8_count, align 8
  %mul5800 = mul nsw i64 2, %1303
  %mul5801 = mul nsw i64 0, %mul5800
  %1304 = load i64, i64* %nbytes, align 8
  %add5802 = add nsw i64 %mul5801, %1304
  %mul5803 = mul nsw i64 0, %add5802
  %sub5804 = sub nsw i64 %mul5803, 1
  %cmp5805 = icmp slt i64 %sub5804, 0
  br i1 %cmp5805, label %cond.true.5807, label %cond.false.5828

cond.true.5807:                                   ; preds = %cond.false.5799
  %1305 = load i64, i64* %byte8_count, align 8
  %mul5808 = mul nsw i64 2, %1305
  %mul5809 = mul nsw i64 0, %mul5808
  %1306 = load i64, i64* %nbytes, align 8
  %add5810 = add nsw i64 %mul5809, %1306
  %mul5811 = mul nsw i64 0, %add5810
  %add5812 = add nsw i64 %mul5811, 0
  %neg5813 = xor i64 %add5812, -1
  %cmp5814 = icmp eq i64 %neg5813, -1
  %conv5815 = zext i1 %cmp5814 to i32
  %sub5816 = sub nsw i32 0, %conv5815
  %conv5817 = sext i32 %sub5816 to i64
  %1307 = load i64, i64* %byte8_count, align 8
  %mul5818 = mul nsw i64 2, %1307
  %mul5819 = mul nsw i64 0, %mul5818
  %1308 = load i64, i64* %nbytes, align 8
  %add5820 = add nsw i64 %mul5819, %1308
  %mul5821 = mul nsw i64 0, %add5820
  %add5822 = add nsw i64 %mul5821, 1
  %shl5823 = shl i64 %add5822, 62
  %sub5824 = sub nsw i64 %shl5823, 1
  %mul5825 = mul nsw i64 %sub5824, 2
  %add5826 = add nsw i64 %mul5825, 1
  %sub5827 = sub nsw i64 %conv5817, %add5826
  br label %cond.end.5834

cond.false.5828:                                  ; preds = %cond.false.5799
  %1309 = load i64, i64* %byte8_count, align 8
  %mul5829 = mul nsw i64 2, %1309
  %mul5830 = mul nsw i64 0, %mul5829
  %1310 = load i64, i64* %nbytes, align 8
  %add5831 = add nsw i64 %mul5830, %1310
  %mul5832 = mul nsw i64 0, %add5831
  %add5833 = add nsw i64 %mul5832, 0
  br label %cond.end.5834

cond.end.5834:                                    ; preds = %cond.false.5828, %cond.true.5807
  %cond5835 = phi i64 [ %sub5827, %cond.true.5807 ], [ %add5833, %cond.false.5828 ]
  %cmp5836 = icmp slt i64 %cond5835, 0
  br i1 %cmp5836, label %cond.true.5838, label %cond.false.5913

cond.true.5838:                                   ; preds = %cond.end.5834
  %1311 = load i64, i64* %byte8_count, align 8
  %mul5839 = mul nsw i64 2, %1311
  %cmp5840 = icmp slt i64 %mul5839, 0
  br i1 %cmp5840, label %cond.true.5842, label %cond.false.5883

cond.true.5842:                                   ; preds = %cond.true.5838
  %1312 = load i64, i64* %nbytes, align 8
  %1313 = load i64, i64* %byte8_count, align 8
  %mul5843 = mul nsw i64 2, %1313
  %mul5844 = mul nsw i64 0, %mul5843
  %1314 = load i64, i64* %nbytes, align 8
  %add5845 = add nsw i64 %mul5844, %1314
  %mul5846 = mul nsw i64 0, %add5845
  %sub5847 = sub nsw i64 %mul5846, 1
  %cmp5848 = icmp slt i64 %sub5847, 0
  br i1 %cmp5848, label %cond.true.5850, label %cond.false.5871

cond.true.5850:                                   ; preds = %cond.true.5842
  %1315 = load i64, i64* %byte8_count, align 8
  %mul5851 = mul nsw i64 2, %1315
  %mul5852 = mul nsw i64 0, %mul5851
  %1316 = load i64, i64* %nbytes, align 8
  %add5853 = add nsw i64 %mul5852, %1316
  %mul5854 = mul nsw i64 0, %add5853
  %add5855 = add nsw i64 %mul5854, 0
  %neg5856 = xor i64 %add5855, -1
  %cmp5857 = icmp eq i64 %neg5856, -1
  %conv5858 = zext i1 %cmp5857 to i32
  %sub5859 = sub nsw i32 0, %conv5858
  %conv5860 = sext i32 %sub5859 to i64
  %1317 = load i64, i64* %byte8_count, align 8
  %mul5861 = mul nsw i64 2, %1317
  %mul5862 = mul nsw i64 0, %mul5861
  %1318 = load i64, i64* %nbytes, align 8
  %add5863 = add nsw i64 %mul5862, %1318
  %mul5864 = mul nsw i64 0, %add5863
  %add5865 = add nsw i64 %mul5864, 1
  %shl5866 = shl i64 %add5865, 62
  %sub5867 = sub nsw i64 %shl5866, 1
  %mul5868 = mul nsw i64 %sub5867, 2
  %add5869 = add nsw i64 %mul5868, 1
  %sub5870 = sub nsw i64 %conv5860, %add5869
  br label %cond.end.5877

cond.false.5871:                                  ; preds = %cond.true.5842
  %1319 = load i64, i64* %byte8_count, align 8
  %mul5872 = mul nsw i64 2, %1319
  %mul5873 = mul nsw i64 0, %mul5872
  %1320 = load i64, i64* %nbytes, align 8
  %add5874 = add nsw i64 %mul5873, %1320
  %mul5875 = mul nsw i64 0, %add5874
  %add5876 = add nsw i64 %mul5875, 0
  br label %cond.end.5877

cond.end.5877:                                    ; preds = %cond.false.5871, %cond.true.5850
  %cond5878 = phi i64 [ %sub5870, %cond.true.5850 ], [ %add5876, %cond.false.5871 ]
  %1321 = load i64, i64* %byte8_count, align 8
  %mul5879 = mul nsw i64 2, %1321
  %sub5880 = sub nsw i64 %cond5878, %mul5879
  %cmp5881 = icmp slt i64 %1312, %sub5880
  br i1 %cmp5881, label %cond.true.5954, label %lor.lhs.false.5937

cond.false.5883:                                  ; preds = %cond.true.5838
  %1322 = load i64, i64* %byte8_count, align 8
  %mul5884 = mul nsw i64 2, %1322
  %mul5885 = mul nsw i64 0, %mul5884
  %1323 = load i64, i64* %nbytes, align 8
  %add5886 = add nsw i64 %mul5885, %1323
  %mul5887 = mul nsw i64 0, %add5886
  %sub5888 = sub nsw i64 %mul5887, 1
  %cmp5889 = icmp slt i64 %sub5888, 0
  br i1 %cmp5889, label %cond.true.5891, label %cond.false.5901

cond.true.5891:                                   ; preds = %cond.false.5883
  %1324 = load i64, i64* %byte8_count, align 8
  %mul5892 = mul nsw i64 2, %1324
  %mul5893 = mul nsw i64 0, %mul5892
  %1325 = load i64, i64* %nbytes, align 8
  %add5894 = add nsw i64 %mul5893, %1325
  %mul5895 = mul nsw i64 0, %add5894
  %add5896 = add nsw i64 %mul5895, 1
  %shl5897 = shl i64 %add5896, 62
  %sub5898 = sub nsw i64 %shl5897, 1
  %mul5899 = mul nsw i64 %sub5898, 2
  %add5900 = add nsw i64 %mul5899, 1
  br label %cond.end.5907

cond.false.5901:                                  ; preds = %cond.false.5883
  %1326 = load i64, i64* %byte8_count, align 8
  %mul5902 = mul nsw i64 2, %1326
  %mul5903 = mul nsw i64 0, %mul5902
  %1327 = load i64, i64* %nbytes, align 8
  %add5904 = add nsw i64 %mul5903, %1327
  %mul5905 = mul nsw i64 0, %add5904
  %sub5906 = sub nsw i64 %mul5905, 1
  br label %cond.end.5907

cond.end.5907:                                    ; preds = %cond.false.5901, %cond.true.5891
  %cond5908 = phi i64 [ %add5900, %cond.true.5891 ], [ %sub5906, %cond.false.5901 ]
  %1328 = load i64, i64* %byte8_count, align 8
  %mul5909 = mul nsw i64 2, %1328
  %sub5910 = sub nsw i64 %cond5908, %mul5909
  %1329 = load i64, i64* %nbytes, align 8
  %cmp5911 = icmp slt i64 %sub5910, %1329
  br i1 %cmp5911, label %cond.true.5954, label %lor.lhs.false.5937

cond.false.5913:                                  ; preds = %cond.end.5834
  %1330 = load i64, i64* %nbytes, align 8
  %cmp5914 = icmp slt i64 %1330, 0
  br i1 %cmp5914, label %cond.true.5916, label %cond.false.5922

cond.true.5916:                                   ; preds = %cond.false.5913
  %1331 = load i64, i64* %byte8_count, align 8
  %mul5917 = mul nsw i64 2, %1331
  %1332 = load i64, i64* %nbytes, align 8
  %1333 = load i64, i64* %byte8_count, align 8
  %mul5918 = mul nsw i64 2, %1333
  %add5919 = add nsw i64 %1332, %mul5918
  %cmp5920 = icmp sle i64 %mul5917, %add5919
  br i1 %cmp5920, label %cond.true.5954, label %lor.lhs.false.5937

cond.false.5922:                                  ; preds = %cond.false.5913
  %1334 = load i64, i64* %byte8_count, align 8
  %mul5923 = mul nsw i64 2, %1334
  %cmp5924 = icmp slt i64 %mul5923, 0
  br i1 %cmp5924, label %cond.true.5926, label %cond.false.5931

cond.true.5926:                                   ; preds = %cond.false.5922
  %1335 = load i64, i64* %nbytes, align 8
  %1336 = load i64, i64* %nbytes, align 8
  %1337 = load i64, i64* %byte8_count, align 8
  %mul5927 = mul nsw i64 2, %1337
  %add5928 = add nsw i64 %1336, %mul5927
  %cmp5929 = icmp sle i64 %1335, %add5928
  br i1 %cmp5929, label %cond.true.5954, label %lor.lhs.false.5937

cond.false.5931:                                  ; preds = %cond.false.5922
  %1338 = load i64, i64* %nbytes, align 8
  %1339 = load i64, i64* %byte8_count, align 8
  %mul5932 = mul nsw i64 2, %1339
  %add5933 = add nsw i64 %1338, %mul5932
  %1340 = load i64, i64* %byte8_count, align 8
  %mul5934 = mul nsw i64 2, %1340
  %cmp5935 = icmp slt i64 %add5933, %mul5934
  br i1 %cmp5935, label %cond.true.5954, label %lor.lhs.false.5937

lor.lhs.false.5937:                               ; preds = %cond.false.5931, %cond.true.5926, %cond.true.5916, %cond.end.5907, %cond.end.5877
  %1341 = load i64, i64* %nbytes, align 8
  %1342 = load i64, i64* %byte8_count, align 8
  %mul5938 = mul nsw i64 2, %1342
  %add5939 = add nsw i64 %1341, %mul5938
  %mul5940 = mul nsw i64 0, %add5939
  %sub5941 = sub nsw i64 %mul5940, 1
  %cmp5942 = icmp slt i64 %sub5941, 0
  br i1 %cmp5942, label %land.lhs.true.5944, label %lor.lhs.false.5949

land.lhs.true.5944:                               ; preds = %lor.lhs.false.5937
  %1343 = load i64, i64* %nbytes, align 8
  %1344 = load i64, i64* %byte8_count, align 8
  %mul5945 = mul nsw i64 2, %1344
  %add5946 = add nsw i64 %1343, %mul5945
  %cmp5947 = icmp slt i64 %add5946, -9223372036854775808
  br i1 %cmp5947, label %cond.true.5954, label %lor.lhs.false.5949

lor.lhs.false.5949:                               ; preds = %land.lhs.true.5944, %lor.lhs.false.5937
  %1345 = load i64, i64* %nbytes, align 8
  %1346 = load i64, i64* %byte8_count, align 8
  %mul5950 = mul nsw i64 2, %1346
  %add5951 = add nsw i64 %1345, %mul5950
  %cmp5952 = icmp slt i64 9223372036854775807, %add5951
  br i1 %cmp5952, label %cond.true.5954, label %cond.false.5969

cond.true.5954:                                   ; preds = %lor.lhs.false.5949, %land.lhs.true.5944, %cond.false.5931, %cond.true.5926, %cond.true.5916, %cond.end.5907, %cond.end.5877
  %1347 = load i64, i64* %nbytes, align 8
  %1348 = load i64, i64* %byte8_count, align 8
  %mul5955 = mul nsw i64 2, %1348
  %add5956 = add i64 %1347, %mul5955
  %cmp5957 = icmp ule i64 %add5956, 9223372036854775807
  br i1 %cmp5957, label %cond.true.5959, label %cond.false.5962

cond.true.5959:                                   ; preds = %cond.true.5954
  %1349 = load i64, i64* %nbytes, align 8
  %1350 = load i64, i64* %byte8_count, align 8
  %mul5960 = mul nsw i64 2, %1350
  %add5961 = add i64 %1349, %mul5960
  br label %cond.end.5967

cond.false.5962:                                  ; preds = %cond.true.5954
  %1351 = load i64, i64* %nbytes, align 8
  %1352 = load i64, i64* %byte8_count, align 8
  %mul5963 = mul nsw i64 2, %1352
  %add5964 = add i64 %1351, %mul5963
  %sub5965 = sub i64 %add5964, -9223372036854775808
  %add5966 = add nsw i64 %sub5965, -9223372036854775808
  br label %cond.end.5967

cond.end.5967:                                    ; preds = %cond.false.5962, %cond.true.5959
  %cond5968 = phi i64 [ %add5961, %cond.true.5959 ], [ %add5966, %cond.false.5962 ]
  store i64 %cond5968, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.5969:                                  ; preds = %lor.lhs.false.5949
  %1353 = load i64, i64* %nbytes, align 8
  %1354 = load i64, i64* %byte8_count, align 8
  %mul5970 = mul nsw i64 2, %1354
  %add5971 = add i64 %1353, %mul5970
  %cmp5972 = icmp ule i64 %add5971, 9223372036854775807
  br i1 %cmp5972, label %cond.true.5974, label %cond.false.5977

cond.true.5974:                                   ; preds = %cond.false.5969
  %1355 = load i64, i64* %nbytes, align 8
  %1356 = load i64, i64* %byte8_count, align 8
  %mul5975 = mul nsw i64 2, %1356
  %add5976 = add i64 %1355, %mul5975
  br label %cond.end.5982

cond.false.5977:                                  ; preds = %cond.false.5969
  %1357 = load i64, i64* %nbytes, align 8
  %1358 = load i64, i64* %byte8_count, align 8
  %mul5978 = mul nsw i64 2, %1358
  %add5979 = add i64 %1357, %mul5978
  %sub5980 = sub i64 %add5979, -9223372036854775808
  %add5981 = add nsw i64 %sub5980, -9223372036854775808
  br label %cond.end.5982

cond.end.5982:                                    ; preds = %cond.false.5977, %cond.true.5974
  %cond5983 = phi i64 [ %add5976, %cond.true.5974 ], [ %add5981, %cond.false.5977 ]
  store i64 %cond5983, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.5984:                                  ; preds = %cond.false.5612
  br i1 false, label %cond.true.5985, label %cond.false.6170

cond.true.5985:                                   ; preds = %cond.false.5984
  %1359 = load i64, i64* %byte8_count, align 8
  %mul5986 = mul nsw i64 2, %1359
  %mul5987 = mul nsw i64 0, %mul5986
  %1360 = load i64, i64* %nbytes, align 8
  %add5988 = add nsw i64 %mul5987, %1360
  %mul5989 = mul nsw i64 0, %add5988
  %sub5990 = sub nsw i64 %mul5989, 1
  %cmp5991 = icmp slt i64 %sub5990, 0
  br i1 %cmp5991, label %cond.true.5993, label %cond.false.6014

cond.true.5993:                                   ; preds = %cond.true.5985
  %1361 = load i64, i64* %byte8_count, align 8
  %mul5994 = mul nsw i64 2, %1361
  %mul5995 = mul nsw i64 0, %mul5994
  %1362 = load i64, i64* %nbytes, align 8
  %add5996 = add nsw i64 %mul5995, %1362
  %mul5997 = mul nsw i64 0, %add5996
  %add5998 = add nsw i64 %mul5997, 0
  %neg5999 = xor i64 %add5998, -1
  %cmp6000 = icmp eq i64 %neg5999, -1
  %conv6001 = zext i1 %cmp6000 to i32
  %sub6002 = sub nsw i32 0, %conv6001
  %conv6003 = sext i32 %sub6002 to i64
  %1363 = load i64, i64* %byte8_count, align 8
  %mul6004 = mul nsw i64 2, %1363
  %mul6005 = mul nsw i64 0, %mul6004
  %1364 = load i64, i64* %nbytes, align 8
  %add6006 = add nsw i64 %mul6005, %1364
  %mul6007 = mul nsw i64 0, %add6006
  %add6008 = add nsw i64 %mul6007, 1
  %shl6009 = shl i64 %add6008, 62
  %sub6010 = sub nsw i64 %shl6009, 1
  %mul6011 = mul nsw i64 %sub6010, 2
  %add6012 = add nsw i64 %mul6011, 1
  %sub6013 = sub nsw i64 %conv6003, %add6012
  br label %cond.end.6020

cond.false.6014:                                  ; preds = %cond.true.5985
  %1365 = load i64, i64* %byte8_count, align 8
  %mul6015 = mul nsw i64 2, %1365
  %mul6016 = mul nsw i64 0, %mul6015
  %1366 = load i64, i64* %nbytes, align 8
  %add6017 = add nsw i64 %mul6016, %1366
  %mul6018 = mul nsw i64 0, %add6017
  %add6019 = add nsw i64 %mul6018, 0
  br label %cond.end.6020

cond.end.6020:                                    ; preds = %cond.false.6014, %cond.true.5993
  %cond6021 = phi i64 [ %sub6013, %cond.true.5993 ], [ %add6019, %cond.false.6014 ]
  %cmp6022 = icmp slt i64 %cond6021, 0
  br i1 %cmp6022, label %cond.true.6024, label %cond.false.6099

cond.true.6024:                                   ; preds = %cond.end.6020
  %1367 = load i64, i64* %byte8_count, align 8
  %mul6025 = mul nsw i64 2, %1367
  %cmp6026 = icmp slt i64 %mul6025, 0
  br i1 %cmp6026, label %cond.true.6028, label %cond.false.6069

cond.true.6028:                                   ; preds = %cond.true.6024
  %1368 = load i64, i64* %nbytes, align 8
  %1369 = load i64, i64* %byte8_count, align 8
  %mul6029 = mul nsw i64 2, %1369
  %mul6030 = mul nsw i64 0, %mul6029
  %1370 = load i64, i64* %nbytes, align 8
  %add6031 = add nsw i64 %mul6030, %1370
  %mul6032 = mul nsw i64 0, %add6031
  %sub6033 = sub nsw i64 %mul6032, 1
  %cmp6034 = icmp slt i64 %sub6033, 0
  br i1 %cmp6034, label %cond.true.6036, label %cond.false.6057

cond.true.6036:                                   ; preds = %cond.true.6028
  %1371 = load i64, i64* %byte8_count, align 8
  %mul6037 = mul nsw i64 2, %1371
  %mul6038 = mul nsw i64 0, %mul6037
  %1372 = load i64, i64* %nbytes, align 8
  %add6039 = add nsw i64 %mul6038, %1372
  %mul6040 = mul nsw i64 0, %add6039
  %add6041 = add nsw i64 %mul6040, 0
  %neg6042 = xor i64 %add6041, -1
  %cmp6043 = icmp eq i64 %neg6042, -1
  %conv6044 = zext i1 %cmp6043 to i32
  %sub6045 = sub nsw i32 0, %conv6044
  %conv6046 = sext i32 %sub6045 to i64
  %1373 = load i64, i64* %byte8_count, align 8
  %mul6047 = mul nsw i64 2, %1373
  %mul6048 = mul nsw i64 0, %mul6047
  %1374 = load i64, i64* %nbytes, align 8
  %add6049 = add nsw i64 %mul6048, %1374
  %mul6050 = mul nsw i64 0, %add6049
  %add6051 = add nsw i64 %mul6050, 1
  %shl6052 = shl i64 %add6051, 62
  %sub6053 = sub nsw i64 %shl6052, 1
  %mul6054 = mul nsw i64 %sub6053, 2
  %add6055 = add nsw i64 %mul6054, 1
  %sub6056 = sub nsw i64 %conv6046, %add6055
  br label %cond.end.6063

cond.false.6057:                                  ; preds = %cond.true.6028
  %1375 = load i64, i64* %byte8_count, align 8
  %mul6058 = mul nsw i64 2, %1375
  %mul6059 = mul nsw i64 0, %mul6058
  %1376 = load i64, i64* %nbytes, align 8
  %add6060 = add nsw i64 %mul6059, %1376
  %mul6061 = mul nsw i64 0, %add6060
  %add6062 = add nsw i64 %mul6061, 0
  br label %cond.end.6063

cond.end.6063:                                    ; preds = %cond.false.6057, %cond.true.6036
  %cond6064 = phi i64 [ %sub6056, %cond.true.6036 ], [ %add6062, %cond.false.6057 ]
  %1377 = load i64, i64* %byte8_count, align 8
  %mul6065 = mul nsw i64 2, %1377
  %sub6066 = sub nsw i64 %cond6064, %mul6065
  %cmp6067 = icmp slt i64 %1368, %sub6066
  br i1 %cmp6067, label %cond.true.6140, label %lor.lhs.false.6123

cond.false.6069:                                  ; preds = %cond.true.6024
  %1378 = load i64, i64* %byte8_count, align 8
  %mul6070 = mul nsw i64 2, %1378
  %mul6071 = mul nsw i64 0, %mul6070
  %1379 = load i64, i64* %nbytes, align 8
  %add6072 = add nsw i64 %mul6071, %1379
  %mul6073 = mul nsw i64 0, %add6072
  %sub6074 = sub nsw i64 %mul6073, 1
  %cmp6075 = icmp slt i64 %sub6074, 0
  br i1 %cmp6075, label %cond.true.6077, label %cond.false.6087

cond.true.6077:                                   ; preds = %cond.false.6069
  %1380 = load i64, i64* %byte8_count, align 8
  %mul6078 = mul nsw i64 2, %1380
  %mul6079 = mul nsw i64 0, %mul6078
  %1381 = load i64, i64* %nbytes, align 8
  %add6080 = add nsw i64 %mul6079, %1381
  %mul6081 = mul nsw i64 0, %add6080
  %add6082 = add nsw i64 %mul6081, 1
  %shl6083 = shl i64 %add6082, 62
  %sub6084 = sub nsw i64 %shl6083, 1
  %mul6085 = mul nsw i64 %sub6084, 2
  %add6086 = add nsw i64 %mul6085, 1
  br label %cond.end.6093

cond.false.6087:                                  ; preds = %cond.false.6069
  %1382 = load i64, i64* %byte8_count, align 8
  %mul6088 = mul nsw i64 2, %1382
  %mul6089 = mul nsw i64 0, %mul6088
  %1383 = load i64, i64* %nbytes, align 8
  %add6090 = add nsw i64 %mul6089, %1383
  %mul6091 = mul nsw i64 0, %add6090
  %sub6092 = sub nsw i64 %mul6091, 1
  br label %cond.end.6093

cond.end.6093:                                    ; preds = %cond.false.6087, %cond.true.6077
  %cond6094 = phi i64 [ %add6086, %cond.true.6077 ], [ %sub6092, %cond.false.6087 ]
  %1384 = load i64, i64* %byte8_count, align 8
  %mul6095 = mul nsw i64 2, %1384
  %sub6096 = sub nsw i64 %cond6094, %mul6095
  %1385 = load i64, i64* %nbytes, align 8
  %cmp6097 = icmp slt i64 %sub6096, %1385
  br i1 %cmp6097, label %cond.true.6140, label %lor.lhs.false.6123

cond.false.6099:                                  ; preds = %cond.end.6020
  %1386 = load i64, i64* %nbytes, align 8
  %cmp6100 = icmp slt i64 %1386, 0
  br i1 %cmp6100, label %cond.true.6102, label %cond.false.6108

cond.true.6102:                                   ; preds = %cond.false.6099
  %1387 = load i64, i64* %byte8_count, align 8
  %mul6103 = mul nsw i64 2, %1387
  %1388 = load i64, i64* %nbytes, align 8
  %1389 = load i64, i64* %byte8_count, align 8
  %mul6104 = mul nsw i64 2, %1389
  %add6105 = add nsw i64 %1388, %mul6104
  %cmp6106 = icmp sle i64 %mul6103, %add6105
  br i1 %cmp6106, label %cond.true.6140, label %lor.lhs.false.6123

cond.false.6108:                                  ; preds = %cond.false.6099
  %1390 = load i64, i64* %byte8_count, align 8
  %mul6109 = mul nsw i64 2, %1390
  %cmp6110 = icmp slt i64 %mul6109, 0
  br i1 %cmp6110, label %cond.true.6112, label %cond.false.6117

cond.true.6112:                                   ; preds = %cond.false.6108
  %1391 = load i64, i64* %nbytes, align 8
  %1392 = load i64, i64* %nbytes, align 8
  %1393 = load i64, i64* %byte8_count, align 8
  %mul6113 = mul nsw i64 2, %1393
  %add6114 = add nsw i64 %1392, %mul6113
  %cmp6115 = icmp sle i64 %1391, %add6114
  br i1 %cmp6115, label %cond.true.6140, label %lor.lhs.false.6123

cond.false.6117:                                  ; preds = %cond.false.6108
  %1394 = load i64, i64* %nbytes, align 8
  %1395 = load i64, i64* %byte8_count, align 8
  %mul6118 = mul nsw i64 2, %1395
  %add6119 = add nsw i64 %1394, %mul6118
  %1396 = load i64, i64* %byte8_count, align 8
  %mul6120 = mul nsw i64 2, %1396
  %cmp6121 = icmp slt i64 %add6119, %mul6120
  br i1 %cmp6121, label %cond.true.6140, label %lor.lhs.false.6123

lor.lhs.false.6123:                               ; preds = %cond.false.6117, %cond.true.6112, %cond.true.6102, %cond.end.6093, %cond.end.6063
  %1397 = load i64, i64* %nbytes, align 8
  %1398 = load i64, i64* %byte8_count, align 8
  %mul6124 = mul nsw i64 2, %1398
  %add6125 = add nsw i64 %1397, %mul6124
  %mul6126 = mul nsw i64 0, %add6125
  %sub6127 = sub nsw i64 %mul6126, 1
  %cmp6128 = icmp slt i64 %sub6127, 0
  br i1 %cmp6128, label %land.lhs.true.6130, label %lor.lhs.false.6135

land.lhs.true.6130:                               ; preds = %lor.lhs.false.6123
  %1399 = load i64, i64* %nbytes, align 8
  %1400 = load i64, i64* %byte8_count, align 8
  %mul6131 = mul nsw i64 2, %1400
  %add6132 = add nsw i64 %1399, %mul6131
  %cmp6133 = icmp slt i64 %add6132, -9223372036854775808
  br i1 %cmp6133, label %cond.true.6140, label %lor.lhs.false.6135

lor.lhs.false.6135:                               ; preds = %land.lhs.true.6130, %lor.lhs.false.6123
  %1401 = load i64, i64* %nbytes, align 8
  %1402 = load i64, i64* %byte8_count, align 8
  %mul6136 = mul nsw i64 2, %1402
  %add6137 = add nsw i64 %1401, %mul6136
  %cmp6138 = icmp slt i64 9223372036854775807, %add6137
  br i1 %cmp6138, label %cond.true.6140, label %cond.false.6155

cond.true.6140:                                   ; preds = %lor.lhs.false.6135, %land.lhs.true.6130, %cond.false.6117, %cond.true.6112, %cond.true.6102, %cond.end.6093, %cond.end.6063
  %1403 = load i64, i64* %nbytes, align 8
  %1404 = load i64, i64* %byte8_count, align 8
  %mul6141 = mul nsw i64 2, %1404
  %add6142 = add i64 %1403, %mul6141
  %cmp6143 = icmp ule i64 %add6142, 9223372036854775807
  br i1 %cmp6143, label %cond.true.6145, label %cond.false.6148

cond.true.6145:                                   ; preds = %cond.true.6140
  %1405 = load i64, i64* %nbytes, align 8
  %1406 = load i64, i64* %byte8_count, align 8
  %mul6146 = mul nsw i64 2, %1406
  %add6147 = add i64 %1405, %mul6146
  br label %cond.end.6153

cond.false.6148:                                  ; preds = %cond.true.6140
  %1407 = load i64, i64* %nbytes, align 8
  %1408 = load i64, i64* %byte8_count, align 8
  %mul6149 = mul nsw i64 2, %1408
  %add6150 = add i64 %1407, %mul6149
  %sub6151 = sub i64 %add6150, -9223372036854775808
  %add6152 = add nsw i64 %sub6151, -9223372036854775808
  br label %cond.end.6153

cond.end.6153:                                    ; preds = %cond.false.6148, %cond.true.6145
  %cond6154 = phi i64 [ %add6147, %cond.true.6145 ], [ %add6152, %cond.false.6148 ]
  store i64 %cond6154, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.6155:                                  ; preds = %lor.lhs.false.6135
  %1409 = load i64, i64* %nbytes, align 8
  %1410 = load i64, i64* %byte8_count, align 8
  %mul6156 = mul nsw i64 2, %1410
  %add6157 = add i64 %1409, %mul6156
  %cmp6158 = icmp ule i64 %add6157, 9223372036854775807
  br i1 %cmp6158, label %cond.true.6160, label %cond.false.6163

cond.true.6160:                                   ; preds = %cond.false.6155
  %1411 = load i64, i64* %nbytes, align 8
  %1412 = load i64, i64* %byte8_count, align 8
  %mul6161 = mul nsw i64 2, %1412
  %add6162 = add i64 %1411, %mul6161
  br label %cond.end.6168

cond.false.6163:                                  ; preds = %cond.false.6155
  %1413 = load i64, i64* %nbytes, align 8
  %1414 = load i64, i64* %byte8_count, align 8
  %mul6164 = mul nsw i64 2, %1414
  %add6165 = add i64 %1413, %mul6164
  %sub6166 = sub i64 %add6165, -9223372036854775808
  %add6167 = add nsw i64 %sub6166, -9223372036854775808
  br label %cond.end.6168

cond.end.6168:                                    ; preds = %cond.false.6163, %cond.true.6160
  %cond6169 = phi i64 [ %add6162, %cond.true.6160 ], [ %add6167, %cond.false.6163 ]
  store i64 %cond6169, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

cond.false.6170:                                  ; preds = %cond.false.5984
  %1415 = load i64, i64* %byte8_count, align 8
  %mul6171 = mul nsw i64 2, %1415
  %mul6172 = mul nsw i64 0, %mul6171
  %1416 = load i64, i64* %nbytes, align 8
  %add6173 = add nsw i64 %mul6172, %1416
  %mul6174 = mul nsw i64 0, %add6173
  %sub6175 = sub nsw i64 %mul6174, 1
  %cmp6176 = icmp slt i64 %sub6175, 0
  br i1 %cmp6176, label %cond.true.6178, label %cond.false.6199

cond.true.6178:                                   ; preds = %cond.false.6170
  %1417 = load i64, i64* %byte8_count, align 8
  %mul6179 = mul nsw i64 2, %1417
  %mul6180 = mul nsw i64 0, %mul6179
  %1418 = load i64, i64* %nbytes, align 8
  %add6181 = add nsw i64 %mul6180, %1418
  %mul6182 = mul nsw i64 0, %add6181
  %add6183 = add nsw i64 %mul6182, 0
  %neg6184 = xor i64 %add6183, -1
  %cmp6185 = icmp eq i64 %neg6184, -1
  %conv6186 = zext i1 %cmp6185 to i32
  %sub6187 = sub nsw i32 0, %conv6186
  %conv6188 = sext i32 %sub6187 to i64
  %1419 = load i64, i64* %byte8_count, align 8
  %mul6189 = mul nsw i64 2, %1419
  %mul6190 = mul nsw i64 0, %mul6189
  %1420 = load i64, i64* %nbytes, align 8
  %add6191 = add nsw i64 %mul6190, %1420
  %mul6192 = mul nsw i64 0, %add6191
  %add6193 = add nsw i64 %mul6192, 1
  %shl6194 = shl i64 %add6193, 62
  %sub6195 = sub nsw i64 %shl6194, 1
  %mul6196 = mul nsw i64 %sub6195, 2
  %add6197 = add nsw i64 %mul6196, 1
  %sub6198 = sub nsw i64 %conv6188, %add6197
  br label %cond.end.6205

cond.false.6199:                                  ; preds = %cond.false.6170
  %1421 = load i64, i64* %byte8_count, align 8
  %mul6200 = mul nsw i64 2, %1421
  %mul6201 = mul nsw i64 0, %mul6200
  %1422 = load i64, i64* %nbytes, align 8
  %add6202 = add nsw i64 %mul6201, %1422
  %mul6203 = mul nsw i64 0, %add6202
  %add6204 = add nsw i64 %mul6203, 0
  br label %cond.end.6205

cond.end.6205:                                    ; preds = %cond.false.6199, %cond.true.6178
  %cond6206 = phi i64 [ %sub6198, %cond.true.6178 ], [ %add6204, %cond.false.6199 ]
  %cmp6207 = icmp slt i64 %cond6206, 0
  br i1 %cmp6207, label %cond.true.6209, label %cond.false.6284

cond.true.6209:                                   ; preds = %cond.end.6205
  %1423 = load i64, i64* %byte8_count, align 8
  %mul6210 = mul nsw i64 2, %1423
  %cmp6211 = icmp slt i64 %mul6210, 0
  br i1 %cmp6211, label %cond.true.6213, label %cond.false.6254

cond.true.6213:                                   ; preds = %cond.true.6209
  %1424 = load i64, i64* %nbytes, align 8
  %1425 = load i64, i64* %byte8_count, align 8
  %mul6214 = mul nsw i64 2, %1425
  %mul6215 = mul nsw i64 0, %mul6214
  %1426 = load i64, i64* %nbytes, align 8
  %add6216 = add nsw i64 %mul6215, %1426
  %mul6217 = mul nsw i64 0, %add6216
  %sub6218 = sub nsw i64 %mul6217, 1
  %cmp6219 = icmp slt i64 %sub6218, 0
  br i1 %cmp6219, label %cond.true.6221, label %cond.false.6242

cond.true.6221:                                   ; preds = %cond.true.6213
  %1427 = load i64, i64* %byte8_count, align 8
  %mul6222 = mul nsw i64 2, %1427
  %mul6223 = mul nsw i64 0, %mul6222
  %1428 = load i64, i64* %nbytes, align 8
  %add6224 = add nsw i64 %mul6223, %1428
  %mul6225 = mul nsw i64 0, %add6224
  %add6226 = add nsw i64 %mul6225, 0
  %neg6227 = xor i64 %add6226, -1
  %cmp6228 = icmp eq i64 %neg6227, -1
  %conv6229 = zext i1 %cmp6228 to i32
  %sub6230 = sub nsw i32 0, %conv6229
  %conv6231 = sext i32 %sub6230 to i64
  %1429 = load i64, i64* %byte8_count, align 8
  %mul6232 = mul nsw i64 2, %1429
  %mul6233 = mul nsw i64 0, %mul6232
  %1430 = load i64, i64* %nbytes, align 8
  %add6234 = add nsw i64 %mul6233, %1430
  %mul6235 = mul nsw i64 0, %add6234
  %add6236 = add nsw i64 %mul6235, 1
  %shl6237 = shl i64 %add6236, 62
  %sub6238 = sub nsw i64 %shl6237, 1
  %mul6239 = mul nsw i64 %sub6238, 2
  %add6240 = add nsw i64 %mul6239, 1
  %sub6241 = sub nsw i64 %conv6231, %add6240
  br label %cond.end.6248

cond.false.6242:                                  ; preds = %cond.true.6213
  %1431 = load i64, i64* %byte8_count, align 8
  %mul6243 = mul nsw i64 2, %1431
  %mul6244 = mul nsw i64 0, %mul6243
  %1432 = load i64, i64* %nbytes, align 8
  %add6245 = add nsw i64 %mul6244, %1432
  %mul6246 = mul nsw i64 0, %add6245
  %add6247 = add nsw i64 %mul6246, 0
  br label %cond.end.6248

cond.end.6248:                                    ; preds = %cond.false.6242, %cond.true.6221
  %cond6249 = phi i64 [ %sub6241, %cond.true.6221 ], [ %add6247, %cond.false.6242 ]
  %1433 = load i64, i64* %byte8_count, align 8
  %mul6250 = mul nsw i64 2, %1433
  %sub6251 = sub nsw i64 %cond6249, %mul6250
  %cmp6252 = icmp slt i64 %1424, %sub6251
  br i1 %cmp6252, label %cond.true.6325, label %lor.lhs.false.6308

cond.false.6254:                                  ; preds = %cond.true.6209
  %1434 = load i64, i64* %byte8_count, align 8
  %mul6255 = mul nsw i64 2, %1434
  %mul6256 = mul nsw i64 0, %mul6255
  %1435 = load i64, i64* %nbytes, align 8
  %add6257 = add nsw i64 %mul6256, %1435
  %mul6258 = mul nsw i64 0, %add6257
  %sub6259 = sub nsw i64 %mul6258, 1
  %cmp6260 = icmp slt i64 %sub6259, 0
  br i1 %cmp6260, label %cond.true.6262, label %cond.false.6272

cond.true.6262:                                   ; preds = %cond.false.6254
  %1436 = load i64, i64* %byte8_count, align 8
  %mul6263 = mul nsw i64 2, %1436
  %mul6264 = mul nsw i64 0, %mul6263
  %1437 = load i64, i64* %nbytes, align 8
  %add6265 = add nsw i64 %mul6264, %1437
  %mul6266 = mul nsw i64 0, %add6265
  %add6267 = add nsw i64 %mul6266, 1
  %shl6268 = shl i64 %add6267, 62
  %sub6269 = sub nsw i64 %shl6268, 1
  %mul6270 = mul nsw i64 %sub6269, 2
  %add6271 = add nsw i64 %mul6270, 1
  br label %cond.end.6278

cond.false.6272:                                  ; preds = %cond.false.6254
  %1438 = load i64, i64* %byte8_count, align 8
  %mul6273 = mul nsw i64 2, %1438
  %mul6274 = mul nsw i64 0, %mul6273
  %1439 = load i64, i64* %nbytes, align 8
  %add6275 = add nsw i64 %mul6274, %1439
  %mul6276 = mul nsw i64 0, %add6275
  %sub6277 = sub nsw i64 %mul6276, 1
  br label %cond.end.6278

cond.end.6278:                                    ; preds = %cond.false.6272, %cond.true.6262
  %cond6279 = phi i64 [ %add6271, %cond.true.6262 ], [ %sub6277, %cond.false.6272 ]
  %1440 = load i64, i64* %byte8_count, align 8
  %mul6280 = mul nsw i64 2, %1440
  %sub6281 = sub nsw i64 %cond6279, %mul6280
  %1441 = load i64, i64* %nbytes, align 8
  %cmp6282 = icmp slt i64 %sub6281, %1441
  br i1 %cmp6282, label %cond.true.6325, label %lor.lhs.false.6308

cond.false.6284:                                  ; preds = %cond.end.6205
  %1442 = load i64, i64* %nbytes, align 8
  %cmp6285 = icmp slt i64 %1442, 0
  br i1 %cmp6285, label %cond.true.6287, label %cond.false.6293

cond.true.6287:                                   ; preds = %cond.false.6284
  %1443 = load i64, i64* %byte8_count, align 8
  %mul6288 = mul nsw i64 2, %1443
  %1444 = load i64, i64* %nbytes, align 8
  %1445 = load i64, i64* %byte8_count, align 8
  %mul6289 = mul nsw i64 2, %1445
  %add6290 = add nsw i64 %1444, %mul6289
  %cmp6291 = icmp sle i64 %mul6288, %add6290
  br i1 %cmp6291, label %cond.true.6325, label %lor.lhs.false.6308

cond.false.6293:                                  ; preds = %cond.false.6284
  %1446 = load i64, i64* %byte8_count, align 8
  %mul6294 = mul nsw i64 2, %1446
  %cmp6295 = icmp slt i64 %mul6294, 0
  br i1 %cmp6295, label %cond.true.6297, label %cond.false.6302

cond.true.6297:                                   ; preds = %cond.false.6293
  %1447 = load i64, i64* %nbytes, align 8
  %1448 = load i64, i64* %nbytes, align 8
  %1449 = load i64, i64* %byte8_count, align 8
  %mul6298 = mul nsw i64 2, %1449
  %add6299 = add nsw i64 %1448, %mul6298
  %cmp6300 = icmp sle i64 %1447, %add6299
  br i1 %cmp6300, label %cond.true.6325, label %lor.lhs.false.6308

cond.false.6302:                                  ; preds = %cond.false.6293
  %1450 = load i64, i64* %nbytes, align 8
  %1451 = load i64, i64* %byte8_count, align 8
  %mul6303 = mul nsw i64 2, %1451
  %add6304 = add nsw i64 %1450, %mul6303
  %1452 = load i64, i64* %byte8_count, align 8
  %mul6305 = mul nsw i64 2, %1452
  %cmp6306 = icmp slt i64 %add6304, %mul6305
  br i1 %cmp6306, label %cond.true.6325, label %lor.lhs.false.6308

lor.lhs.false.6308:                               ; preds = %cond.false.6302, %cond.true.6297, %cond.true.6287, %cond.end.6278, %cond.end.6248
  %1453 = load i64, i64* %nbytes, align 8
  %1454 = load i64, i64* %byte8_count, align 8
  %mul6309 = mul nsw i64 2, %1454
  %add6310 = add nsw i64 %1453, %mul6309
  %mul6311 = mul nsw i64 0, %add6310
  %sub6312 = sub nsw i64 %mul6311, 1
  %cmp6313 = icmp slt i64 %sub6312, 0
  br i1 %cmp6313, label %land.lhs.true.6315, label %lor.lhs.false.6320

land.lhs.true.6315:                               ; preds = %lor.lhs.false.6308
  %1455 = load i64, i64* %nbytes, align 8
  %1456 = load i64, i64* %byte8_count, align 8
  %mul6316 = mul nsw i64 2, %1456
  %add6317 = add nsw i64 %1455, %mul6316
  %cmp6318 = icmp slt i64 %add6317, -9223372036854775808
  br i1 %cmp6318, label %cond.true.6325, label %lor.lhs.false.6320

lor.lhs.false.6320:                               ; preds = %land.lhs.true.6315, %lor.lhs.false.6308
  %1457 = load i64, i64* %nbytes, align 8
  %1458 = load i64, i64* %byte8_count, align 8
  %mul6321 = mul nsw i64 2, %1458
  %add6322 = add nsw i64 %1457, %mul6321
  %cmp6323 = icmp slt i64 9223372036854775807, %add6322
  br i1 %cmp6323, label %cond.true.6325, label %cond.false.6340

cond.true.6325:                                   ; preds = %lor.lhs.false.6320, %land.lhs.true.6315, %cond.false.6302, %cond.true.6297, %cond.true.6287, %cond.end.6278, %cond.end.6248
  %1459 = load i64, i64* %nbytes, align 8
  %1460 = load i64, i64* %byte8_count, align 8
  %mul6326 = mul nsw i64 2, %1460
  %add6327 = add i64 %1459, %mul6326
  %cmp6328 = icmp ule i64 %add6327, 9223372036854775807
  br i1 %cmp6328, label %cond.true.6330, label %cond.false.6333

cond.true.6330:                                   ; preds = %cond.true.6325
  %1461 = load i64, i64* %nbytes, align 8
  %1462 = load i64, i64* %byte8_count, align 8
  %mul6331 = mul nsw i64 2, %1462
  %add6332 = add i64 %1461, %mul6331
  br label %cond.end.6338

cond.false.6333:                                  ; preds = %cond.true.6325
  %1463 = load i64, i64* %nbytes, align 8
  %1464 = load i64, i64* %byte8_count, align 8
  %mul6334 = mul nsw i64 2, %1464
  %add6335 = add i64 %1463, %mul6334
  %sub6336 = sub i64 %add6335, -9223372036854775808
  %add6337 = add nsw i64 %sub6336, -9223372036854775808
  br label %cond.end.6338

cond.end.6338:                                    ; preds = %cond.false.6333, %cond.true.6330
  %cond6339 = phi i64 [ %add6332, %cond.true.6330 ], [ %add6337, %cond.false.6333 ]
  store i64 %cond6339, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.6355, label %if.end.6356

cond.false.6340:                                  ; preds = %lor.lhs.false.6320
  %1465 = load i64, i64* %nbytes, align 8
  %1466 = load i64, i64* %byte8_count, align 8
  %mul6341 = mul nsw i64 2, %1466
  %add6342 = add i64 %1465, %mul6341
  %cmp6343 = icmp ule i64 %add6342, 9223372036854775807
  br i1 %cmp6343, label %cond.true.6345, label %cond.false.6348

cond.true.6345:                                   ; preds = %cond.false.6340
  %1467 = load i64, i64* %nbytes, align 8
  %1468 = load i64, i64* %byte8_count, align 8
  %mul6346 = mul nsw i64 2, %1468
  %add6347 = add i64 %1467, %mul6346
  br label %cond.end.6353

cond.false.6348:                                  ; preds = %cond.false.6340
  %1469 = load i64, i64* %nbytes, align 8
  %1470 = load i64, i64* %byte8_count, align 8
  %mul6349 = mul nsw i64 2, %1470
  %add6350 = add i64 %1469, %mul6349
  %sub6351 = sub i64 %add6350, -9223372036854775808
  %add6352 = add nsw i64 %sub6351, -9223372036854775808
  br label %cond.end.6353

cond.end.6353:                                    ; preds = %cond.false.6348, %cond.true.6345
  %cond6354 = phi i64 [ %add6347, %cond.true.6345 ], [ %add6352, %cond.false.6348 ]
  store i64 %cond6354, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.6355, label %if.end.6356

if.then.6355:                                     ; preds = %cond.end.6353, %cond.end.6338, %cond.end.6168, %cond.end.6153, %cond.end.5982, %cond.end.5967, %cond.end.5797, %cond.end.5782, %cond.end.5609, %cond.end.5587, %cond.end.5410, %cond.end.5388, %cond.end.5167, %cond.end.5135, %cond.end.4948, %cond.end.4916, %cond.end.4641, %cond.end.4609, %cond.end.4422, %cond.end.4390, %cond.end.4116, %cond.end.4104, %cond.end.3960, %cond.end.3948, %cond.end.3803, %cond.end.3791, %cond.end.3647, %cond.end.3635, %cond.end.3488, %cond.end.3469, %cond.end.3318, %cond.end.3299, %cond.end.3104, %cond.end.3075, %cond.end.2914, %cond.end.2885, %cond.end.2636, %cond.end.2607, %cond.end.2446, %cond.end.2417
  call void @string_overflow() #7
  unreachable

if.end.6356:                                      ; preds = %cond.end.6353, %cond.end.6338, %cond.end.6168, %cond.end.6153, %cond.end.5982, %cond.end.5967, %cond.end.5797, %cond.end.5782, %cond.end.5609, %cond.end.5587, %cond.end.5410, %cond.end.5388, %cond.end.5167, %cond.end.5135, %cond.end.4948, %cond.end.4916, %cond.end.4641, %cond.end.4609, %cond.end.4422, %cond.end.4390
  %1471 = load i64, i64* %uninit_nchars, align 8
  %1472 = load i64, i64* %uninit_nbytes, align 8
  %call6357 = call i64 @make_uninit_multibyte_string(i64 %1471, i64 %1472)
  store i64 %call6357, i64* %val, align 8
  br label %if.end.8307

if.else:                                          ; preds = %if.end.2169
  br i1 false, label %cond.true.6358, label %cond.false.6825

cond.true.6358:                                   ; preds = %if.else
  br i1 false, label %cond.true.6359, label %cond.false.6635

cond.true.6359:                                   ; preds = %cond.true.6358
  %1473 = load i64, i64* %nbytes, align 8
  %conv6360 = trunc i64 %1473 to i8
  %conv6361 = sext i8 %conv6360 to i32
  %mul6362 = mul nsw i32 0, %conv6361
  %1474 = load i64, i64* %thrice_byte8_count, align 8
  %conv6363 = trunc i64 %1474 to i8
  %conv6364 = sext i8 %conv6363 to i32
  %add6365 = add nsw i32 %mul6362, %conv6364
  %mul6366 = mul nsw i32 0, %add6365
  %sub6367 = sub nsw i32 %mul6366, 1
  %cmp6368 = icmp slt i32 %sub6367, 0
  br i1 %cmp6368, label %cond.true.6370, label %cond.false.6396

cond.true.6370:                                   ; preds = %cond.true.6359
  %1475 = load i64, i64* %nbytes, align 8
  %conv6371 = trunc i64 %1475 to i8
  %conv6372 = sext i8 %conv6371 to i32
  %mul6373 = mul nsw i32 0, %conv6372
  %1476 = load i64, i64* %thrice_byte8_count, align 8
  %conv6374 = trunc i64 %1476 to i8
  %conv6375 = sext i8 %conv6374 to i32
  %add6376 = add nsw i32 %mul6373, %conv6375
  %mul6377 = mul nsw i32 0, %add6376
  %add6378 = add nsw i32 %mul6377, 0
  %neg6379 = xor i32 %add6378, -1
  %cmp6380 = icmp eq i32 %neg6379, -1
  %conv6381 = zext i1 %cmp6380 to i32
  %sub6382 = sub nsw i32 0, %conv6381
  %1477 = load i64, i64* %nbytes, align 8
  %conv6383 = trunc i64 %1477 to i8
  %conv6384 = sext i8 %conv6383 to i32
  %mul6385 = mul nsw i32 0, %conv6384
  %1478 = load i64, i64* %thrice_byte8_count, align 8
  %conv6386 = trunc i64 %1478 to i8
  %conv6387 = sext i8 %conv6386 to i32
  %add6388 = add nsw i32 %mul6385, %conv6387
  %mul6389 = mul nsw i32 0, %add6388
  %add6390 = add nsw i32 %mul6389, 1
  %shl6391 = shl i32 %add6390, 30
  %sub6392 = sub nsw i32 %shl6391, 1
  %mul6393 = mul nsw i32 %sub6392, 2
  %add6394 = add nsw i32 %mul6393, 1
  %sub6395 = sub nsw i32 %sub6382, %add6394
  br label %cond.end.6405

cond.false.6396:                                  ; preds = %cond.true.6359
  %1479 = load i64, i64* %nbytes, align 8
  %conv6397 = trunc i64 %1479 to i8
  %conv6398 = sext i8 %conv6397 to i32
  %mul6399 = mul nsw i32 0, %conv6398
  %1480 = load i64, i64* %thrice_byte8_count, align 8
  %conv6400 = trunc i64 %1480 to i8
  %conv6401 = sext i8 %conv6400 to i32
  %add6402 = add nsw i32 %mul6399, %conv6401
  %mul6403 = mul nsw i32 0, %add6402
  %add6404 = add nsw i32 %mul6403, 0
  br label %cond.end.6405

cond.end.6405:                                    ; preds = %cond.false.6396, %cond.true.6370
  %cond6406 = phi i32 [ %sub6395, %cond.true.6370 ], [ %add6404, %cond.false.6396 ]
  %cmp6407 = icmp slt i32 %cond6406, 0
  br i1 %cmp6407, label %cond.true.6409, label %cond.false.6511

cond.true.6409:                                   ; preds = %cond.end.6405
  %1481 = load i64, i64* %nbytes, align 8
  %conv6410 = trunc i64 %1481 to i8
  %conv6411 = sext i8 %conv6410 to i32
  %cmp6412 = icmp slt i32 %conv6411, 0
  br i1 %cmp6412, label %cond.true.6414, label %cond.false.6469

cond.true.6414:                                   ; preds = %cond.true.6409
  %1482 = load i64, i64* %thrice_byte8_count, align 8
  %conv6415 = trunc i64 %1482 to i8
  %conv6416 = sext i8 %conv6415 to i32
  %1483 = load i64, i64* %nbytes, align 8
  %conv6417 = trunc i64 %1483 to i8
  %conv6418 = sext i8 %conv6417 to i32
  %mul6419 = mul nsw i32 0, %conv6418
  %1484 = load i64, i64* %thrice_byte8_count, align 8
  %conv6420 = trunc i64 %1484 to i8
  %conv6421 = sext i8 %conv6420 to i32
  %add6422 = add nsw i32 %mul6419, %conv6421
  %mul6423 = mul nsw i32 0, %add6422
  %sub6424 = sub nsw i32 %mul6423, 1
  %cmp6425 = icmp slt i32 %sub6424, 0
  br i1 %cmp6425, label %cond.true.6427, label %cond.false.6453

cond.true.6427:                                   ; preds = %cond.true.6414
  %1485 = load i64, i64* %nbytes, align 8
  %conv6428 = trunc i64 %1485 to i8
  %conv6429 = sext i8 %conv6428 to i32
  %mul6430 = mul nsw i32 0, %conv6429
  %1486 = load i64, i64* %thrice_byte8_count, align 8
  %conv6431 = trunc i64 %1486 to i8
  %conv6432 = sext i8 %conv6431 to i32
  %add6433 = add nsw i32 %mul6430, %conv6432
  %mul6434 = mul nsw i32 0, %add6433
  %add6435 = add nsw i32 %mul6434, 0
  %neg6436 = xor i32 %add6435, -1
  %cmp6437 = icmp eq i32 %neg6436, -1
  %conv6438 = zext i1 %cmp6437 to i32
  %sub6439 = sub nsw i32 0, %conv6438
  %1487 = load i64, i64* %nbytes, align 8
  %conv6440 = trunc i64 %1487 to i8
  %conv6441 = sext i8 %conv6440 to i32
  %mul6442 = mul nsw i32 0, %conv6441
  %1488 = load i64, i64* %thrice_byte8_count, align 8
  %conv6443 = trunc i64 %1488 to i8
  %conv6444 = sext i8 %conv6443 to i32
  %add6445 = add nsw i32 %mul6442, %conv6444
  %mul6446 = mul nsw i32 0, %add6445
  %add6447 = add nsw i32 %mul6446, 1
  %shl6448 = shl i32 %add6447, 30
  %sub6449 = sub nsw i32 %shl6448, 1
  %mul6450 = mul nsw i32 %sub6449, 2
  %add6451 = add nsw i32 %mul6450, 1
  %sub6452 = sub nsw i32 %sub6439, %add6451
  br label %cond.end.6462

cond.false.6453:                                  ; preds = %cond.true.6414
  %1489 = load i64, i64* %nbytes, align 8
  %conv6454 = trunc i64 %1489 to i8
  %conv6455 = sext i8 %conv6454 to i32
  %mul6456 = mul nsw i32 0, %conv6455
  %1490 = load i64, i64* %thrice_byte8_count, align 8
  %conv6457 = trunc i64 %1490 to i8
  %conv6458 = sext i8 %conv6457 to i32
  %add6459 = add nsw i32 %mul6456, %conv6458
  %mul6460 = mul nsw i32 0, %add6459
  %add6461 = add nsw i32 %mul6460, 0
  br label %cond.end.6462

cond.end.6462:                                    ; preds = %cond.false.6453, %cond.true.6427
  %cond6463 = phi i32 [ %sub6452, %cond.true.6427 ], [ %add6461, %cond.false.6453 ]
  %1491 = load i64, i64* %nbytes, align 8
  %conv6464 = trunc i64 %1491 to i8
  %conv6465 = sext i8 %conv6464 to i32
  %sub6466 = sub nsw i32 %cond6463, %conv6465
  %cmp6467 = icmp slt i32 %conv6416, %sub6466
  br i1 %cmp6467, label %cond.true.6577, label %lor.lhs.false.6551

cond.false.6469:                                  ; preds = %cond.true.6409
  %1492 = load i64, i64* %nbytes, align 8
  %conv6470 = trunc i64 %1492 to i8
  %conv6471 = sext i8 %conv6470 to i32
  %mul6472 = mul nsw i32 0, %conv6471
  %1493 = load i64, i64* %thrice_byte8_count, align 8
  %conv6473 = trunc i64 %1493 to i8
  %conv6474 = sext i8 %conv6473 to i32
  %add6475 = add nsw i32 %mul6472, %conv6474
  %mul6476 = mul nsw i32 0, %add6475
  %sub6477 = sub nsw i32 %mul6476, 1
  %cmp6478 = icmp slt i32 %sub6477, 0
  br i1 %cmp6478, label %cond.true.6480, label %cond.false.6493

cond.true.6480:                                   ; preds = %cond.false.6469
  %1494 = load i64, i64* %nbytes, align 8
  %conv6481 = trunc i64 %1494 to i8
  %conv6482 = sext i8 %conv6481 to i32
  %mul6483 = mul nsw i32 0, %conv6482
  %1495 = load i64, i64* %thrice_byte8_count, align 8
  %conv6484 = trunc i64 %1495 to i8
  %conv6485 = sext i8 %conv6484 to i32
  %add6486 = add nsw i32 %mul6483, %conv6485
  %mul6487 = mul nsw i32 0, %add6486
  %add6488 = add nsw i32 %mul6487, 1
  %shl6489 = shl i32 %add6488, 30
  %sub6490 = sub nsw i32 %shl6489, 1
  %mul6491 = mul nsw i32 %sub6490, 2
  %add6492 = add nsw i32 %mul6491, 1
  br label %cond.end.6502

cond.false.6493:                                  ; preds = %cond.false.6469
  %1496 = load i64, i64* %nbytes, align 8
  %conv6494 = trunc i64 %1496 to i8
  %conv6495 = sext i8 %conv6494 to i32
  %mul6496 = mul nsw i32 0, %conv6495
  %1497 = load i64, i64* %thrice_byte8_count, align 8
  %conv6497 = trunc i64 %1497 to i8
  %conv6498 = sext i8 %conv6497 to i32
  %add6499 = add nsw i32 %mul6496, %conv6498
  %mul6500 = mul nsw i32 0, %add6499
  %sub6501 = sub nsw i32 %mul6500, 1
  br label %cond.end.6502

cond.end.6502:                                    ; preds = %cond.false.6493, %cond.true.6480
  %cond6503 = phi i32 [ %add6492, %cond.true.6480 ], [ %sub6501, %cond.false.6493 ]
  %1498 = load i64, i64* %nbytes, align 8
  %conv6504 = trunc i64 %1498 to i8
  %conv6505 = sext i8 %conv6504 to i32
  %sub6506 = sub nsw i32 %cond6503, %conv6505
  %1499 = load i64, i64* %thrice_byte8_count, align 8
  %conv6507 = trunc i64 %1499 to i8
  %conv6508 = sext i8 %conv6507 to i32
  %cmp6509 = icmp slt i32 %sub6506, %conv6508
  br i1 %cmp6509, label %cond.true.6577, label %lor.lhs.false.6551

cond.false.6511:                                  ; preds = %cond.end.6405
  %1500 = load i64, i64* %thrice_byte8_count, align 8
  %conv6512 = trunc i64 %1500 to i8
  %conv6513 = sext i8 %conv6512 to i32
  %cmp6514 = icmp slt i32 %conv6513, 0
  br i1 %cmp6514, label %cond.true.6516, label %cond.false.6526

cond.true.6516:                                   ; preds = %cond.false.6511
  %1501 = load i64, i64* %nbytes, align 8
  %conv6517 = trunc i64 %1501 to i8
  %conv6518 = sext i8 %conv6517 to i32
  %1502 = load i64, i64* %thrice_byte8_count, align 8
  %conv6519 = trunc i64 %1502 to i8
  %conv6520 = sext i8 %conv6519 to i32
  %1503 = load i64, i64* %nbytes, align 8
  %conv6521 = trunc i64 %1503 to i8
  %conv6522 = sext i8 %conv6521 to i32
  %add6523 = add nsw i32 %conv6520, %conv6522
  %cmp6524 = icmp sle i32 %conv6518, %add6523
  br i1 %cmp6524, label %cond.true.6577, label %lor.lhs.false.6551

cond.false.6526:                                  ; preds = %cond.false.6511
  %1504 = load i64, i64* %nbytes, align 8
  %conv6527 = trunc i64 %1504 to i8
  %conv6528 = sext i8 %conv6527 to i32
  %cmp6529 = icmp slt i32 %conv6528, 0
  br i1 %cmp6529, label %cond.true.6531, label %cond.false.6541

cond.true.6531:                                   ; preds = %cond.false.6526
  %1505 = load i64, i64* %thrice_byte8_count, align 8
  %conv6532 = trunc i64 %1505 to i8
  %conv6533 = sext i8 %conv6532 to i32
  %1506 = load i64, i64* %thrice_byte8_count, align 8
  %conv6534 = trunc i64 %1506 to i8
  %conv6535 = sext i8 %conv6534 to i32
  %1507 = load i64, i64* %nbytes, align 8
  %conv6536 = trunc i64 %1507 to i8
  %conv6537 = sext i8 %conv6536 to i32
  %add6538 = add nsw i32 %conv6535, %conv6537
  %cmp6539 = icmp sle i32 %conv6533, %add6538
  br i1 %cmp6539, label %cond.true.6577, label %lor.lhs.false.6551

cond.false.6541:                                  ; preds = %cond.false.6526
  %1508 = load i64, i64* %thrice_byte8_count, align 8
  %conv6542 = trunc i64 %1508 to i8
  %conv6543 = sext i8 %conv6542 to i32
  %1509 = load i64, i64* %nbytes, align 8
  %conv6544 = trunc i64 %1509 to i8
  %conv6545 = sext i8 %conv6544 to i32
  %add6546 = add nsw i32 %conv6543, %conv6545
  %1510 = load i64, i64* %nbytes, align 8
  %conv6547 = trunc i64 %1510 to i8
  %conv6548 = sext i8 %conv6547 to i32
  %cmp6549 = icmp slt i32 %add6546, %conv6548
  br i1 %cmp6549, label %cond.true.6577, label %lor.lhs.false.6551

lor.lhs.false.6551:                               ; preds = %cond.false.6541, %cond.true.6531, %cond.true.6516, %cond.end.6502, %cond.end.6462
  %1511 = load i64, i64* %thrice_byte8_count, align 8
  %conv6552 = trunc i64 %1511 to i8
  %conv6553 = sext i8 %conv6552 to i32
  %1512 = load i64, i64* %nbytes, align 8
  %conv6554 = trunc i64 %1512 to i8
  %conv6555 = sext i8 %conv6554 to i32
  %add6556 = add nsw i32 %conv6553, %conv6555
  %mul6557 = mul nsw i32 0, %add6556
  %sub6558 = sub nsw i32 %mul6557, 1
  %cmp6559 = icmp slt i32 %sub6558, 0
  br i1 %cmp6559, label %land.lhs.true.6561, label %lor.lhs.false.6569

land.lhs.true.6561:                               ; preds = %lor.lhs.false.6551
  %1513 = load i64, i64* %thrice_byte8_count, align 8
  %conv6562 = trunc i64 %1513 to i8
  %conv6563 = sext i8 %conv6562 to i32
  %1514 = load i64, i64* %nbytes, align 8
  %conv6564 = trunc i64 %1514 to i8
  %conv6565 = sext i8 %conv6564 to i32
  %add6566 = add nsw i32 %conv6563, %conv6565
  %cmp6567 = icmp slt i32 %add6566, -128
  br i1 %cmp6567, label %cond.true.6577, label %lor.lhs.false.6569

lor.lhs.false.6569:                               ; preds = %land.lhs.true.6561, %lor.lhs.false.6551
  %1515 = load i64, i64* %thrice_byte8_count, align 8
  %conv6570 = trunc i64 %1515 to i8
  %conv6571 = sext i8 %conv6570 to i32
  %1516 = load i64, i64* %nbytes, align 8
  %conv6572 = trunc i64 %1516 to i8
  %conv6573 = sext i8 %conv6572 to i32
  %add6574 = add nsw i32 %conv6571, %conv6573
  %cmp6575 = icmp slt i32 127, %add6574
  br i1 %cmp6575, label %cond.true.6577, label %cond.false.6606

cond.true.6577:                                   ; preds = %lor.lhs.false.6569, %land.lhs.true.6561, %cond.false.6541, %cond.true.6531, %cond.true.6516, %cond.end.6502, %cond.end.6462
  %1517 = load i64, i64* %thrice_byte8_count, align 8
  %conv6578 = trunc i64 %1517 to i8
  %conv6579 = zext i8 %conv6578 to i32
  %1518 = load i64, i64* %nbytes, align 8
  %conv6580 = trunc i64 %1518 to i8
  %conv6581 = zext i8 %conv6580 to i32
  %add6582 = add nsw i32 %conv6579, %conv6581
  %cmp6583 = icmp sle i32 %add6582, 127
  br i1 %cmp6583, label %cond.true.6585, label %cond.false.6593

cond.true.6585:                                   ; preds = %cond.true.6577
  %1519 = load i64, i64* %thrice_byte8_count, align 8
  %conv6586 = trunc i64 %1519 to i8
  %conv6587 = zext i8 %conv6586 to i32
  %1520 = load i64, i64* %nbytes, align 8
  %conv6588 = trunc i64 %1520 to i8
  %conv6589 = zext i8 %conv6588 to i32
  %add6590 = add nsw i32 %conv6587, %conv6589
  %conv6591 = trunc i32 %add6590 to i8
  %conv6592 = sext i8 %conv6591 to i32
  br label %cond.end.6603

cond.false.6593:                                  ; preds = %cond.true.6577
  %1521 = load i64, i64* %thrice_byte8_count, align 8
  %conv6594 = trunc i64 %1521 to i8
  %conv6595 = zext i8 %conv6594 to i32
  %1522 = load i64, i64* %nbytes, align 8
  %conv6596 = trunc i64 %1522 to i8
  %conv6597 = zext i8 %conv6596 to i32
  %add6598 = add nsw i32 %conv6595, %conv6597
  %sub6599 = sub nsw i32 %add6598, -128
  %conv6600 = trunc i32 %sub6599 to i8
  %conv6601 = sext i8 %conv6600 to i32
  %add6602 = add nsw i32 %conv6601, -128
  br label %cond.end.6603

cond.end.6603:                                    ; preds = %cond.false.6593, %cond.true.6585
  %cond6604 = phi i32 [ %conv6592, %cond.true.6585 ], [ %add6602, %cond.false.6593 ]
  %conv6605 = sext i32 %cond6604 to i64
  store i64 %conv6605, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.6606:                                  ; preds = %lor.lhs.false.6569
  %1523 = load i64, i64* %thrice_byte8_count, align 8
  %conv6607 = trunc i64 %1523 to i8
  %conv6608 = zext i8 %conv6607 to i32
  %1524 = load i64, i64* %nbytes, align 8
  %conv6609 = trunc i64 %1524 to i8
  %conv6610 = zext i8 %conv6609 to i32
  %add6611 = add nsw i32 %conv6608, %conv6610
  %cmp6612 = icmp sle i32 %add6611, 127
  br i1 %cmp6612, label %cond.true.6614, label %cond.false.6622

cond.true.6614:                                   ; preds = %cond.false.6606
  %1525 = load i64, i64* %thrice_byte8_count, align 8
  %conv6615 = trunc i64 %1525 to i8
  %conv6616 = zext i8 %conv6615 to i32
  %1526 = load i64, i64* %nbytes, align 8
  %conv6617 = trunc i64 %1526 to i8
  %conv6618 = zext i8 %conv6617 to i32
  %add6619 = add nsw i32 %conv6616, %conv6618
  %conv6620 = trunc i32 %add6619 to i8
  %conv6621 = sext i8 %conv6620 to i32
  br label %cond.end.6632

cond.false.6622:                                  ; preds = %cond.false.6606
  %1527 = load i64, i64* %thrice_byte8_count, align 8
  %conv6623 = trunc i64 %1527 to i8
  %conv6624 = zext i8 %conv6623 to i32
  %1528 = load i64, i64* %nbytes, align 8
  %conv6625 = trunc i64 %1528 to i8
  %conv6626 = zext i8 %conv6625 to i32
  %add6627 = add nsw i32 %conv6624, %conv6626
  %sub6628 = sub nsw i32 %add6627, -128
  %conv6629 = trunc i32 %sub6628 to i8
  %conv6630 = sext i8 %conv6629 to i32
  %add6631 = add nsw i32 %conv6630, -128
  br label %cond.end.6632

cond.end.6632:                                    ; preds = %cond.false.6622, %cond.true.6614
  %cond6633 = phi i32 [ %conv6621, %cond.true.6614 ], [ %add6631, %cond.false.6622 ]
  %conv6634 = sext i32 %cond6633 to i64
  store i64 %conv6634, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.6635:                                  ; preds = %cond.true.6358
  %1529 = load i64, i64* %nbytes, align 8
  %mul6636 = mul nsw i64 0, %1529
  %1530 = load i64, i64* %thrice_byte8_count, align 8
  %add6637 = add nsw i64 %mul6636, %1530
  %mul6638 = mul nsw i64 0, %add6637
  %sub6639 = sub nsw i64 %mul6638, 1
  %cmp6640 = icmp slt i64 %sub6639, 0
  br i1 %cmp6640, label %cond.true.6642, label %cond.false.6661

cond.true.6642:                                   ; preds = %cond.false.6635
  %1531 = load i64, i64* %nbytes, align 8
  %mul6643 = mul nsw i64 0, %1531
  %1532 = load i64, i64* %thrice_byte8_count, align 8
  %add6644 = add nsw i64 %mul6643, %1532
  %mul6645 = mul nsw i64 0, %add6644
  %add6646 = add nsw i64 %mul6645, 0
  %neg6647 = xor i64 %add6646, -1
  %cmp6648 = icmp eq i64 %neg6647, -1
  %conv6649 = zext i1 %cmp6648 to i32
  %sub6650 = sub nsw i32 0, %conv6649
  %conv6651 = sext i32 %sub6650 to i64
  %1533 = load i64, i64* %nbytes, align 8
  %mul6652 = mul nsw i64 0, %1533
  %1534 = load i64, i64* %thrice_byte8_count, align 8
  %add6653 = add nsw i64 %mul6652, %1534
  %mul6654 = mul nsw i64 0, %add6653
  %add6655 = add nsw i64 %mul6654, 1
  %shl6656 = shl i64 %add6655, 62
  %sub6657 = sub nsw i64 %shl6656, 1
  %mul6658 = mul nsw i64 %sub6657, 2
  %add6659 = add nsw i64 %mul6658, 1
  %sub6660 = sub nsw i64 %conv6651, %add6659
  br label %cond.end.6666

cond.false.6661:                                  ; preds = %cond.false.6635
  %1535 = load i64, i64* %nbytes, align 8
  %mul6662 = mul nsw i64 0, %1535
  %1536 = load i64, i64* %thrice_byte8_count, align 8
  %add6663 = add nsw i64 %mul6662, %1536
  %mul6664 = mul nsw i64 0, %add6663
  %add6665 = add nsw i64 %mul6664, 0
  br label %cond.end.6666

cond.end.6666:                                    ; preds = %cond.false.6661, %cond.true.6642
  %cond6667 = phi i64 [ %sub6660, %cond.true.6642 ], [ %add6665, %cond.false.6661 ]
  %cmp6668 = icmp slt i64 %cond6667, 0
  br i1 %cmp6668, label %cond.true.6670, label %cond.false.6735

cond.true.6670:                                   ; preds = %cond.end.6666
  %1537 = load i64, i64* %nbytes, align 8
  %cmp6671 = icmp slt i64 %1537, 0
  br i1 %cmp6671, label %cond.true.6673, label %cond.false.6709

cond.true.6673:                                   ; preds = %cond.true.6670
  %1538 = load i64, i64* %thrice_byte8_count, align 8
  %1539 = load i64, i64* %nbytes, align 8
  %mul6674 = mul nsw i64 0, %1539
  %1540 = load i64, i64* %thrice_byte8_count, align 8
  %add6675 = add nsw i64 %mul6674, %1540
  %mul6676 = mul nsw i64 0, %add6675
  %sub6677 = sub nsw i64 %mul6676, 1
  %cmp6678 = icmp slt i64 %sub6677, 0
  br i1 %cmp6678, label %cond.true.6680, label %cond.false.6699

cond.true.6680:                                   ; preds = %cond.true.6673
  %1541 = load i64, i64* %nbytes, align 8
  %mul6681 = mul nsw i64 0, %1541
  %1542 = load i64, i64* %thrice_byte8_count, align 8
  %add6682 = add nsw i64 %mul6681, %1542
  %mul6683 = mul nsw i64 0, %add6682
  %add6684 = add nsw i64 %mul6683, 0
  %neg6685 = xor i64 %add6684, -1
  %cmp6686 = icmp eq i64 %neg6685, -1
  %conv6687 = zext i1 %cmp6686 to i32
  %sub6688 = sub nsw i32 0, %conv6687
  %conv6689 = sext i32 %sub6688 to i64
  %1543 = load i64, i64* %nbytes, align 8
  %mul6690 = mul nsw i64 0, %1543
  %1544 = load i64, i64* %thrice_byte8_count, align 8
  %add6691 = add nsw i64 %mul6690, %1544
  %mul6692 = mul nsw i64 0, %add6691
  %add6693 = add nsw i64 %mul6692, 1
  %shl6694 = shl i64 %add6693, 62
  %sub6695 = sub nsw i64 %shl6694, 1
  %mul6696 = mul nsw i64 %sub6695, 2
  %add6697 = add nsw i64 %mul6696, 1
  %sub6698 = sub nsw i64 %conv6689, %add6697
  br label %cond.end.6704

cond.false.6699:                                  ; preds = %cond.true.6673
  %1545 = load i64, i64* %nbytes, align 8
  %mul6700 = mul nsw i64 0, %1545
  %1546 = load i64, i64* %thrice_byte8_count, align 8
  %add6701 = add nsw i64 %mul6700, %1546
  %mul6702 = mul nsw i64 0, %add6701
  %add6703 = add nsw i64 %mul6702, 0
  br label %cond.end.6704

cond.end.6704:                                    ; preds = %cond.false.6699, %cond.true.6680
  %cond6705 = phi i64 [ %sub6698, %cond.true.6680 ], [ %add6703, %cond.false.6699 ]
  %1547 = load i64, i64* %nbytes, align 8
  %sub6706 = sub nsw i64 %cond6705, %1547
  %cmp6707 = icmp slt i64 %1538, %sub6706
  br i1 %cmp6707, label %cond.true.6767, label %lor.lhs.false.6753

cond.false.6709:                                  ; preds = %cond.true.6670
  %1548 = load i64, i64* %nbytes, align 8
  %mul6710 = mul nsw i64 0, %1548
  %1549 = load i64, i64* %thrice_byte8_count, align 8
  %add6711 = add nsw i64 %mul6710, %1549
  %mul6712 = mul nsw i64 0, %add6711
  %sub6713 = sub nsw i64 %mul6712, 1
  %cmp6714 = icmp slt i64 %sub6713, 0
  br i1 %cmp6714, label %cond.true.6716, label %cond.false.6725

cond.true.6716:                                   ; preds = %cond.false.6709
  %1550 = load i64, i64* %nbytes, align 8
  %mul6717 = mul nsw i64 0, %1550
  %1551 = load i64, i64* %thrice_byte8_count, align 8
  %add6718 = add nsw i64 %mul6717, %1551
  %mul6719 = mul nsw i64 0, %add6718
  %add6720 = add nsw i64 %mul6719, 1
  %shl6721 = shl i64 %add6720, 62
  %sub6722 = sub nsw i64 %shl6721, 1
  %mul6723 = mul nsw i64 %sub6722, 2
  %add6724 = add nsw i64 %mul6723, 1
  br label %cond.end.6730

cond.false.6725:                                  ; preds = %cond.false.6709
  %1552 = load i64, i64* %nbytes, align 8
  %mul6726 = mul nsw i64 0, %1552
  %1553 = load i64, i64* %thrice_byte8_count, align 8
  %add6727 = add nsw i64 %mul6726, %1553
  %mul6728 = mul nsw i64 0, %add6727
  %sub6729 = sub nsw i64 %mul6728, 1
  br label %cond.end.6730

cond.end.6730:                                    ; preds = %cond.false.6725, %cond.true.6716
  %cond6731 = phi i64 [ %add6724, %cond.true.6716 ], [ %sub6729, %cond.false.6725 ]
  %1554 = load i64, i64* %nbytes, align 8
  %sub6732 = sub nsw i64 %cond6731, %1554
  %1555 = load i64, i64* %thrice_byte8_count, align 8
  %cmp6733 = icmp slt i64 %sub6732, %1555
  br i1 %cmp6733, label %cond.true.6767, label %lor.lhs.false.6753

cond.false.6735:                                  ; preds = %cond.end.6666
  %1556 = load i64, i64* %thrice_byte8_count, align 8
  %cmp6736 = icmp slt i64 %1556, 0
  br i1 %cmp6736, label %cond.true.6738, label %cond.false.6742

cond.true.6738:                                   ; preds = %cond.false.6735
  %1557 = load i64, i64* %nbytes, align 8
  %1558 = load i64, i64* %thrice_byte8_count, align 8
  %1559 = load i64, i64* %nbytes, align 8
  %add6739 = add nsw i64 %1558, %1559
  %cmp6740 = icmp sle i64 %1557, %add6739
  br i1 %cmp6740, label %cond.true.6767, label %lor.lhs.false.6753

cond.false.6742:                                  ; preds = %cond.false.6735
  %1560 = load i64, i64* %nbytes, align 8
  %cmp6743 = icmp slt i64 %1560, 0
  br i1 %cmp6743, label %cond.true.6745, label %cond.false.6749

cond.true.6745:                                   ; preds = %cond.false.6742
  %1561 = load i64, i64* %thrice_byte8_count, align 8
  %1562 = load i64, i64* %thrice_byte8_count, align 8
  %1563 = load i64, i64* %nbytes, align 8
  %add6746 = add nsw i64 %1562, %1563
  %cmp6747 = icmp sle i64 %1561, %add6746
  br i1 %cmp6747, label %cond.true.6767, label %lor.lhs.false.6753

cond.false.6749:                                  ; preds = %cond.false.6742
  %1564 = load i64, i64* %thrice_byte8_count, align 8
  %1565 = load i64, i64* %nbytes, align 8
  %add6750 = add nsw i64 %1564, %1565
  %1566 = load i64, i64* %nbytes, align 8
  %cmp6751 = icmp slt i64 %add6750, %1566
  br i1 %cmp6751, label %cond.true.6767, label %lor.lhs.false.6753

lor.lhs.false.6753:                               ; preds = %cond.false.6749, %cond.true.6745, %cond.true.6738, %cond.end.6730, %cond.end.6704
  %1567 = load i64, i64* %thrice_byte8_count, align 8
  %1568 = load i64, i64* %nbytes, align 8
  %add6754 = add nsw i64 %1567, %1568
  %mul6755 = mul nsw i64 0, %add6754
  %sub6756 = sub nsw i64 %mul6755, 1
  %cmp6757 = icmp slt i64 %sub6756, 0
  br i1 %cmp6757, label %land.lhs.true.6759, label %lor.lhs.false.6763

land.lhs.true.6759:                               ; preds = %lor.lhs.false.6753
  %1569 = load i64, i64* %thrice_byte8_count, align 8
  %1570 = load i64, i64* %nbytes, align 8
  %add6760 = add nsw i64 %1569, %1570
  %cmp6761 = icmp slt i64 %add6760, -128
  br i1 %cmp6761, label %cond.true.6767, label %lor.lhs.false.6763

lor.lhs.false.6763:                               ; preds = %land.lhs.true.6759, %lor.lhs.false.6753
  %1571 = load i64, i64* %thrice_byte8_count, align 8
  %1572 = load i64, i64* %nbytes, align 8
  %add6764 = add nsw i64 %1571, %1572
  %cmp6765 = icmp slt i64 127, %add6764
  br i1 %cmp6765, label %cond.true.6767, label %cond.false.6796

cond.true.6767:                                   ; preds = %lor.lhs.false.6763, %land.lhs.true.6759, %cond.false.6749, %cond.true.6745, %cond.true.6738, %cond.end.6730, %cond.end.6704
  %1573 = load i64, i64* %thrice_byte8_count, align 8
  %conv6768 = trunc i64 %1573 to i8
  %conv6769 = zext i8 %conv6768 to i32
  %1574 = load i64, i64* %nbytes, align 8
  %conv6770 = trunc i64 %1574 to i8
  %conv6771 = zext i8 %conv6770 to i32
  %add6772 = add nsw i32 %conv6769, %conv6771
  %cmp6773 = icmp sle i32 %add6772, 127
  br i1 %cmp6773, label %cond.true.6775, label %cond.false.6783

cond.true.6775:                                   ; preds = %cond.true.6767
  %1575 = load i64, i64* %thrice_byte8_count, align 8
  %conv6776 = trunc i64 %1575 to i8
  %conv6777 = zext i8 %conv6776 to i32
  %1576 = load i64, i64* %nbytes, align 8
  %conv6778 = trunc i64 %1576 to i8
  %conv6779 = zext i8 %conv6778 to i32
  %add6780 = add nsw i32 %conv6777, %conv6779
  %conv6781 = trunc i32 %add6780 to i8
  %conv6782 = sext i8 %conv6781 to i32
  br label %cond.end.6793

cond.false.6783:                                  ; preds = %cond.true.6767
  %1577 = load i64, i64* %thrice_byte8_count, align 8
  %conv6784 = trunc i64 %1577 to i8
  %conv6785 = zext i8 %conv6784 to i32
  %1578 = load i64, i64* %nbytes, align 8
  %conv6786 = trunc i64 %1578 to i8
  %conv6787 = zext i8 %conv6786 to i32
  %add6788 = add nsw i32 %conv6785, %conv6787
  %sub6789 = sub nsw i32 %add6788, -128
  %conv6790 = trunc i32 %sub6789 to i8
  %conv6791 = sext i8 %conv6790 to i32
  %add6792 = add nsw i32 %conv6791, -128
  br label %cond.end.6793

cond.end.6793:                                    ; preds = %cond.false.6783, %cond.true.6775
  %cond6794 = phi i32 [ %conv6782, %cond.true.6775 ], [ %add6792, %cond.false.6783 ]
  %conv6795 = sext i32 %cond6794 to i64
  store i64 %conv6795, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.6796:                                  ; preds = %lor.lhs.false.6763
  %1579 = load i64, i64* %thrice_byte8_count, align 8
  %conv6797 = trunc i64 %1579 to i8
  %conv6798 = zext i8 %conv6797 to i32
  %1580 = load i64, i64* %nbytes, align 8
  %conv6799 = trunc i64 %1580 to i8
  %conv6800 = zext i8 %conv6799 to i32
  %add6801 = add nsw i32 %conv6798, %conv6800
  %cmp6802 = icmp sle i32 %add6801, 127
  br i1 %cmp6802, label %cond.true.6804, label %cond.false.6812

cond.true.6804:                                   ; preds = %cond.false.6796
  %1581 = load i64, i64* %thrice_byte8_count, align 8
  %conv6805 = trunc i64 %1581 to i8
  %conv6806 = zext i8 %conv6805 to i32
  %1582 = load i64, i64* %nbytes, align 8
  %conv6807 = trunc i64 %1582 to i8
  %conv6808 = zext i8 %conv6807 to i32
  %add6809 = add nsw i32 %conv6806, %conv6808
  %conv6810 = trunc i32 %add6809 to i8
  %conv6811 = sext i8 %conv6810 to i32
  br label %cond.end.6822

cond.false.6812:                                  ; preds = %cond.false.6796
  %1583 = load i64, i64* %thrice_byte8_count, align 8
  %conv6813 = trunc i64 %1583 to i8
  %conv6814 = zext i8 %conv6813 to i32
  %1584 = load i64, i64* %nbytes, align 8
  %conv6815 = trunc i64 %1584 to i8
  %conv6816 = zext i8 %conv6815 to i32
  %add6817 = add nsw i32 %conv6814, %conv6816
  %sub6818 = sub nsw i32 %add6817, -128
  %conv6819 = trunc i32 %sub6818 to i8
  %conv6820 = sext i8 %conv6819 to i32
  %add6821 = add nsw i32 %conv6820, -128
  br label %cond.end.6822

cond.end.6822:                                    ; preds = %cond.false.6812, %cond.true.6804
  %cond6823 = phi i32 [ %conv6811, %cond.true.6804 ], [ %add6821, %cond.false.6812 ]
  %conv6824 = sext i32 %cond6823 to i64
  store i64 %conv6824, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.6825:                                  ; preds = %if.else
  br i1 false, label %cond.true.6826, label %cond.false.7293

cond.true.6826:                                   ; preds = %cond.false.6825
  br i1 false, label %cond.true.6827, label %cond.false.7103

cond.true.6827:                                   ; preds = %cond.true.6826
  %1585 = load i64, i64* %nbytes, align 8
  %conv6828 = trunc i64 %1585 to i16
  %conv6829 = sext i16 %conv6828 to i32
  %mul6830 = mul nsw i32 0, %conv6829
  %1586 = load i64, i64* %thrice_byte8_count, align 8
  %conv6831 = trunc i64 %1586 to i16
  %conv6832 = sext i16 %conv6831 to i32
  %add6833 = add nsw i32 %mul6830, %conv6832
  %mul6834 = mul nsw i32 0, %add6833
  %sub6835 = sub nsw i32 %mul6834, 1
  %cmp6836 = icmp slt i32 %sub6835, 0
  br i1 %cmp6836, label %cond.true.6838, label %cond.false.6864

cond.true.6838:                                   ; preds = %cond.true.6827
  %1587 = load i64, i64* %nbytes, align 8
  %conv6839 = trunc i64 %1587 to i16
  %conv6840 = sext i16 %conv6839 to i32
  %mul6841 = mul nsw i32 0, %conv6840
  %1588 = load i64, i64* %thrice_byte8_count, align 8
  %conv6842 = trunc i64 %1588 to i16
  %conv6843 = sext i16 %conv6842 to i32
  %add6844 = add nsw i32 %mul6841, %conv6843
  %mul6845 = mul nsw i32 0, %add6844
  %add6846 = add nsw i32 %mul6845, 0
  %neg6847 = xor i32 %add6846, -1
  %cmp6848 = icmp eq i32 %neg6847, -1
  %conv6849 = zext i1 %cmp6848 to i32
  %sub6850 = sub nsw i32 0, %conv6849
  %1589 = load i64, i64* %nbytes, align 8
  %conv6851 = trunc i64 %1589 to i16
  %conv6852 = sext i16 %conv6851 to i32
  %mul6853 = mul nsw i32 0, %conv6852
  %1590 = load i64, i64* %thrice_byte8_count, align 8
  %conv6854 = trunc i64 %1590 to i16
  %conv6855 = sext i16 %conv6854 to i32
  %add6856 = add nsw i32 %mul6853, %conv6855
  %mul6857 = mul nsw i32 0, %add6856
  %add6858 = add nsw i32 %mul6857, 1
  %shl6859 = shl i32 %add6858, 30
  %sub6860 = sub nsw i32 %shl6859, 1
  %mul6861 = mul nsw i32 %sub6860, 2
  %add6862 = add nsw i32 %mul6861, 1
  %sub6863 = sub nsw i32 %sub6850, %add6862
  br label %cond.end.6873

cond.false.6864:                                  ; preds = %cond.true.6827
  %1591 = load i64, i64* %nbytes, align 8
  %conv6865 = trunc i64 %1591 to i16
  %conv6866 = sext i16 %conv6865 to i32
  %mul6867 = mul nsw i32 0, %conv6866
  %1592 = load i64, i64* %thrice_byte8_count, align 8
  %conv6868 = trunc i64 %1592 to i16
  %conv6869 = sext i16 %conv6868 to i32
  %add6870 = add nsw i32 %mul6867, %conv6869
  %mul6871 = mul nsw i32 0, %add6870
  %add6872 = add nsw i32 %mul6871, 0
  br label %cond.end.6873

cond.end.6873:                                    ; preds = %cond.false.6864, %cond.true.6838
  %cond6874 = phi i32 [ %sub6863, %cond.true.6838 ], [ %add6872, %cond.false.6864 ]
  %cmp6875 = icmp slt i32 %cond6874, 0
  br i1 %cmp6875, label %cond.true.6877, label %cond.false.6979

cond.true.6877:                                   ; preds = %cond.end.6873
  %1593 = load i64, i64* %nbytes, align 8
  %conv6878 = trunc i64 %1593 to i16
  %conv6879 = sext i16 %conv6878 to i32
  %cmp6880 = icmp slt i32 %conv6879, 0
  br i1 %cmp6880, label %cond.true.6882, label %cond.false.6937

cond.true.6882:                                   ; preds = %cond.true.6877
  %1594 = load i64, i64* %thrice_byte8_count, align 8
  %conv6883 = trunc i64 %1594 to i16
  %conv6884 = sext i16 %conv6883 to i32
  %1595 = load i64, i64* %nbytes, align 8
  %conv6885 = trunc i64 %1595 to i16
  %conv6886 = sext i16 %conv6885 to i32
  %mul6887 = mul nsw i32 0, %conv6886
  %1596 = load i64, i64* %thrice_byte8_count, align 8
  %conv6888 = trunc i64 %1596 to i16
  %conv6889 = sext i16 %conv6888 to i32
  %add6890 = add nsw i32 %mul6887, %conv6889
  %mul6891 = mul nsw i32 0, %add6890
  %sub6892 = sub nsw i32 %mul6891, 1
  %cmp6893 = icmp slt i32 %sub6892, 0
  br i1 %cmp6893, label %cond.true.6895, label %cond.false.6921

cond.true.6895:                                   ; preds = %cond.true.6882
  %1597 = load i64, i64* %nbytes, align 8
  %conv6896 = trunc i64 %1597 to i16
  %conv6897 = sext i16 %conv6896 to i32
  %mul6898 = mul nsw i32 0, %conv6897
  %1598 = load i64, i64* %thrice_byte8_count, align 8
  %conv6899 = trunc i64 %1598 to i16
  %conv6900 = sext i16 %conv6899 to i32
  %add6901 = add nsw i32 %mul6898, %conv6900
  %mul6902 = mul nsw i32 0, %add6901
  %add6903 = add nsw i32 %mul6902, 0
  %neg6904 = xor i32 %add6903, -1
  %cmp6905 = icmp eq i32 %neg6904, -1
  %conv6906 = zext i1 %cmp6905 to i32
  %sub6907 = sub nsw i32 0, %conv6906
  %1599 = load i64, i64* %nbytes, align 8
  %conv6908 = trunc i64 %1599 to i16
  %conv6909 = sext i16 %conv6908 to i32
  %mul6910 = mul nsw i32 0, %conv6909
  %1600 = load i64, i64* %thrice_byte8_count, align 8
  %conv6911 = trunc i64 %1600 to i16
  %conv6912 = sext i16 %conv6911 to i32
  %add6913 = add nsw i32 %mul6910, %conv6912
  %mul6914 = mul nsw i32 0, %add6913
  %add6915 = add nsw i32 %mul6914, 1
  %shl6916 = shl i32 %add6915, 30
  %sub6917 = sub nsw i32 %shl6916, 1
  %mul6918 = mul nsw i32 %sub6917, 2
  %add6919 = add nsw i32 %mul6918, 1
  %sub6920 = sub nsw i32 %sub6907, %add6919
  br label %cond.end.6930

cond.false.6921:                                  ; preds = %cond.true.6882
  %1601 = load i64, i64* %nbytes, align 8
  %conv6922 = trunc i64 %1601 to i16
  %conv6923 = sext i16 %conv6922 to i32
  %mul6924 = mul nsw i32 0, %conv6923
  %1602 = load i64, i64* %thrice_byte8_count, align 8
  %conv6925 = trunc i64 %1602 to i16
  %conv6926 = sext i16 %conv6925 to i32
  %add6927 = add nsw i32 %mul6924, %conv6926
  %mul6928 = mul nsw i32 0, %add6927
  %add6929 = add nsw i32 %mul6928, 0
  br label %cond.end.6930

cond.end.6930:                                    ; preds = %cond.false.6921, %cond.true.6895
  %cond6931 = phi i32 [ %sub6920, %cond.true.6895 ], [ %add6929, %cond.false.6921 ]
  %1603 = load i64, i64* %nbytes, align 8
  %conv6932 = trunc i64 %1603 to i16
  %conv6933 = sext i16 %conv6932 to i32
  %sub6934 = sub nsw i32 %cond6931, %conv6933
  %cmp6935 = icmp slt i32 %conv6884, %sub6934
  br i1 %cmp6935, label %cond.true.7045, label %lor.lhs.false.7019

cond.false.6937:                                  ; preds = %cond.true.6877
  %1604 = load i64, i64* %nbytes, align 8
  %conv6938 = trunc i64 %1604 to i16
  %conv6939 = sext i16 %conv6938 to i32
  %mul6940 = mul nsw i32 0, %conv6939
  %1605 = load i64, i64* %thrice_byte8_count, align 8
  %conv6941 = trunc i64 %1605 to i16
  %conv6942 = sext i16 %conv6941 to i32
  %add6943 = add nsw i32 %mul6940, %conv6942
  %mul6944 = mul nsw i32 0, %add6943
  %sub6945 = sub nsw i32 %mul6944, 1
  %cmp6946 = icmp slt i32 %sub6945, 0
  br i1 %cmp6946, label %cond.true.6948, label %cond.false.6961

cond.true.6948:                                   ; preds = %cond.false.6937
  %1606 = load i64, i64* %nbytes, align 8
  %conv6949 = trunc i64 %1606 to i16
  %conv6950 = sext i16 %conv6949 to i32
  %mul6951 = mul nsw i32 0, %conv6950
  %1607 = load i64, i64* %thrice_byte8_count, align 8
  %conv6952 = trunc i64 %1607 to i16
  %conv6953 = sext i16 %conv6952 to i32
  %add6954 = add nsw i32 %mul6951, %conv6953
  %mul6955 = mul nsw i32 0, %add6954
  %add6956 = add nsw i32 %mul6955, 1
  %shl6957 = shl i32 %add6956, 30
  %sub6958 = sub nsw i32 %shl6957, 1
  %mul6959 = mul nsw i32 %sub6958, 2
  %add6960 = add nsw i32 %mul6959, 1
  br label %cond.end.6970

cond.false.6961:                                  ; preds = %cond.false.6937
  %1608 = load i64, i64* %nbytes, align 8
  %conv6962 = trunc i64 %1608 to i16
  %conv6963 = sext i16 %conv6962 to i32
  %mul6964 = mul nsw i32 0, %conv6963
  %1609 = load i64, i64* %thrice_byte8_count, align 8
  %conv6965 = trunc i64 %1609 to i16
  %conv6966 = sext i16 %conv6965 to i32
  %add6967 = add nsw i32 %mul6964, %conv6966
  %mul6968 = mul nsw i32 0, %add6967
  %sub6969 = sub nsw i32 %mul6968, 1
  br label %cond.end.6970

cond.end.6970:                                    ; preds = %cond.false.6961, %cond.true.6948
  %cond6971 = phi i32 [ %add6960, %cond.true.6948 ], [ %sub6969, %cond.false.6961 ]
  %1610 = load i64, i64* %nbytes, align 8
  %conv6972 = trunc i64 %1610 to i16
  %conv6973 = sext i16 %conv6972 to i32
  %sub6974 = sub nsw i32 %cond6971, %conv6973
  %1611 = load i64, i64* %thrice_byte8_count, align 8
  %conv6975 = trunc i64 %1611 to i16
  %conv6976 = sext i16 %conv6975 to i32
  %cmp6977 = icmp slt i32 %sub6974, %conv6976
  br i1 %cmp6977, label %cond.true.7045, label %lor.lhs.false.7019

cond.false.6979:                                  ; preds = %cond.end.6873
  %1612 = load i64, i64* %thrice_byte8_count, align 8
  %conv6980 = trunc i64 %1612 to i16
  %conv6981 = sext i16 %conv6980 to i32
  %cmp6982 = icmp slt i32 %conv6981, 0
  br i1 %cmp6982, label %cond.true.6984, label %cond.false.6994

cond.true.6984:                                   ; preds = %cond.false.6979
  %1613 = load i64, i64* %nbytes, align 8
  %conv6985 = trunc i64 %1613 to i16
  %conv6986 = sext i16 %conv6985 to i32
  %1614 = load i64, i64* %thrice_byte8_count, align 8
  %conv6987 = trunc i64 %1614 to i16
  %conv6988 = sext i16 %conv6987 to i32
  %1615 = load i64, i64* %nbytes, align 8
  %conv6989 = trunc i64 %1615 to i16
  %conv6990 = sext i16 %conv6989 to i32
  %add6991 = add nsw i32 %conv6988, %conv6990
  %cmp6992 = icmp sle i32 %conv6986, %add6991
  br i1 %cmp6992, label %cond.true.7045, label %lor.lhs.false.7019

cond.false.6994:                                  ; preds = %cond.false.6979
  %1616 = load i64, i64* %nbytes, align 8
  %conv6995 = trunc i64 %1616 to i16
  %conv6996 = sext i16 %conv6995 to i32
  %cmp6997 = icmp slt i32 %conv6996, 0
  br i1 %cmp6997, label %cond.true.6999, label %cond.false.7009

cond.true.6999:                                   ; preds = %cond.false.6994
  %1617 = load i64, i64* %thrice_byte8_count, align 8
  %conv7000 = trunc i64 %1617 to i16
  %conv7001 = sext i16 %conv7000 to i32
  %1618 = load i64, i64* %thrice_byte8_count, align 8
  %conv7002 = trunc i64 %1618 to i16
  %conv7003 = sext i16 %conv7002 to i32
  %1619 = load i64, i64* %nbytes, align 8
  %conv7004 = trunc i64 %1619 to i16
  %conv7005 = sext i16 %conv7004 to i32
  %add7006 = add nsw i32 %conv7003, %conv7005
  %cmp7007 = icmp sle i32 %conv7001, %add7006
  br i1 %cmp7007, label %cond.true.7045, label %lor.lhs.false.7019

cond.false.7009:                                  ; preds = %cond.false.6994
  %1620 = load i64, i64* %thrice_byte8_count, align 8
  %conv7010 = trunc i64 %1620 to i16
  %conv7011 = sext i16 %conv7010 to i32
  %1621 = load i64, i64* %nbytes, align 8
  %conv7012 = trunc i64 %1621 to i16
  %conv7013 = sext i16 %conv7012 to i32
  %add7014 = add nsw i32 %conv7011, %conv7013
  %1622 = load i64, i64* %nbytes, align 8
  %conv7015 = trunc i64 %1622 to i16
  %conv7016 = sext i16 %conv7015 to i32
  %cmp7017 = icmp slt i32 %add7014, %conv7016
  br i1 %cmp7017, label %cond.true.7045, label %lor.lhs.false.7019

lor.lhs.false.7019:                               ; preds = %cond.false.7009, %cond.true.6999, %cond.true.6984, %cond.end.6970, %cond.end.6930
  %1623 = load i64, i64* %thrice_byte8_count, align 8
  %conv7020 = trunc i64 %1623 to i16
  %conv7021 = sext i16 %conv7020 to i32
  %1624 = load i64, i64* %nbytes, align 8
  %conv7022 = trunc i64 %1624 to i16
  %conv7023 = sext i16 %conv7022 to i32
  %add7024 = add nsw i32 %conv7021, %conv7023
  %mul7025 = mul nsw i32 0, %add7024
  %sub7026 = sub nsw i32 %mul7025, 1
  %cmp7027 = icmp slt i32 %sub7026, 0
  br i1 %cmp7027, label %land.lhs.true.7029, label %lor.lhs.false.7037

land.lhs.true.7029:                               ; preds = %lor.lhs.false.7019
  %1625 = load i64, i64* %thrice_byte8_count, align 8
  %conv7030 = trunc i64 %1625 to i16
  %conv7031 = sext i16 %conv7030 to i32
  %1626 = load i64, i64* %nbytes, align 8
  %conv7032 = trunc i64 %1626 to i16
  %conv7033 = sext i16 %conv7032 to i32
  %add7034 = add nsw i32 %conv7031, %conv7033
  %cmp7035 = icmp slt i32 %add7034, -32768
  br i1 %cmp7035, label %cond.true.7045, label %lor.lhs.false.7037

lor.lhs.false.7037:                               ; preds = %land.lhs.true.7029, %lor.lhs.false.7019
  %1627 = load i64, i64* %thrice_byte8_count, align 8
  %conv7038 = trunc i64 %1627 to i16
  %conv7039 = sext i16 %conv7038 to i32
  %1628 = load i64, i64* %nbytes, align 8
  %conv7040 = trunc i64 %1628 to i16
  %conv7041 = sext i16 %conv7040 to i32
  %add7042 = add nsw i32 %conv7039, %conv7041
  %cmp7043 = icmp slt i32 32767, %add7042
  br i1 %cmp7043, label %cond.true.7045, label %cond.false.7074

cond.true.7045:                                   ; preds = %lor.lhs.false.7037, %land.lhs.true.7029, %cond.false.7009, %cond.true.6999, %cond.true.6984, %cond.end.6970, %cond.end.6930
  %1629 = load i64, i64* %thrice_byte8_count, align 8
  %conv7046 = trunc i64 %1629 to i16
  %conv7047 = zext i16 %conv7046 to i32
  %1630 = load i64, i64* %nbytes, align 8
  %conv7048 = trunc i64 %1630 to i16
  %conv7049 = zext i16 %conv7048 to i32
  %add7050 = add nsw i32 %conv7047, %conv7049
  %cmp7051 = icmp sle i32 %add7050, 32767
  br i1 %cmp7051, label %cond.true.7053, label %cond.false.7061

cond.true.7053:                                   ; preds = %cond.true.7045
  %1631 = load i64, i64* %thrice_byte8_count, align 8
  %conv7054 = trunc i64 %1631 to i16
  %conv7055 = zext i16 %conv7054 to i32
  %1632 = load i64, i64* %nbytes, align 8
  %conv7056 = trunc i64 %1632 to i16
  %conv7057 = zext i16 %conv7056 to i32
  %add7058 = add nsw i32 %conv7055, %conv7057
  %conv7059 = trunc i32 %add7058 to i16
  %conv7060 = sext i16 %conv7059 to i32
  br label %cond.end.7071

cond.false.7061:                                  ; preds = %cond.true.7045
  %1633 = load i64, i64* %thrice_byte8_count, align 8
  %conv7062 = trunc i64 %1633 to i16
  %conv7063 = zext i16 %conv7062 to i32
  %1634 = load i64, i64* %nbytes, align 8
  %conv7064 = trunc i64 %1634 to i16
  %conv7065 = zext i16 %conv7064 to i32
  %add7066 = add nsw i32 %conv7063, %conv7065
  %sub7067 = sub nsw i32 %add7066, -32768
  %conv7068 = trunc i32 %sub7067 to i16
  %conv7069 = sext i16 %conv7068 to i32
  %add7070 = add nsw i32 %conv7069, -32768
  br label %cond.end.7071

cond.end.7071:                                    ; preds = %cond.false.7061, %cond.true.7053
  %cond7072 = phi i32 [ %conv7060, %cond.true.7053 ], [ %add7070, %cond.false.7061 ]
  %conv7073 = sext i32 %cond7072 to i64
  store i64 %conv7073, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.7074:                                  ; preds = %lor.lhs.false.7037
  %1635 = load i64, i64* %thrice_byte8_count, align 8
  %conv7075 = trunc i64 %1635 to i16
  %conv7076 = zext i16 %conv7075 to i32
  %1636 = load i64, i64* %nbytes, align 8
  %conv7077 = trunc i64 %1636 to i16
  %conv7078 = zext i16 %conv7077 to i32
  %add7079 = add nsw i32 %conv7076, %conv7078
  %cmp7080 = icmp sle i32 %add7079, 32767
  br i1 %cmp7080, label %cond.true.7082, label %cond.false.7090

cond.true.7082:                                   ; preds = %cond.false.7074
  %1637 = load i64, i64* %thrice_byte8_count, align 8
  %conv7083 = trunc i64 %1637 to i16
  %conv7084 = zext i16 %conv7083 to i32
  %1638 = load i64, i64* %nbytes, align 8
  %conv7085 = trunc i64 %1638 to i16
  %conv7086 = zext i16 %conv7085 to i32
  %add7087 = add nsw i32 %conv7084, %conv7086
  %conv7088 = trunc i32 %add7087 to i16
  %conv7089 = sext i16 %conv7088 to i32
  br label %cond.end.7100

cond.false.7090:                                  ; preds = %cond.false.7074
  %1639 = load i64, i64* %thrice_byte8_count, align 8
  %conv7091 = trunc i64 %1639 to i16
  %conv7092 = zext i16 %conv7091 to i32
  %1640 = load i64, i64* %nbytes, align 8
  %conv7093 = trunc i64 %1640 to i16
  %conv7094 = zext i16 %conv7093 to i32
  %add7095 = add nsw i32 %conv7092, %conv7094
  %sub7096 = sub nsw i32 %add7095, -32768
  %conv7097 = trunc i32 %sub7096 to i16
  %conv7098 = sext i16 %conv7097 to i32
  %add7099 = add nsw i32 %conv7098, -32768
  br label %cond.end.7100

cond.end.7100:                                    ; preds = %cond.false.7090, %cond.true.7082
  %cond7101 = phi i32 [ %conv7089, %cond.true.7082 ], [ %add7099, %cond.false.7090 ]
  %conv7102 = sext i32 %cond7101 to i64
  store i64 %conv7102, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.7103:                                  ; preds = %cond.true.6826
  %1641 = load i64, i64* %nbytes, align 8
  %mul7104 = mul nsw i64 0, %1641
  %1642 = load i64, i64* %thrice_byte8_count, align 8
  %add7105 = add nsw i64 %mul7104, %1642
  %mul7106 = mul nsw i64 0, %add7105
  %sub7107 = sub nsw i64 %mul7106, 1
  %cmp7108 = icmp slt i64 %sub7107, 0
  br i1 %cmp7108, label %cond.true.7110, label %cond.false.7129

cond.true.7110:                                   ; preds = %cond.false.7103
  %1643 = load i64, i64* %nbytes, align 8
  %mul7111 = mul nsw i64 0, %1643
  %1644 = load i64, i64* %thrice_byte8_count, align 8
  %add7112 = add nsw i64 %mul7111, %1644
  %mul7113 = mul nsw i64 0, %add7112
  %add7114 = add nsw i64 %mul7113, 0
  %neg7115 = xor i64 %add7114, -1
  %cmp7116 = icmp eq i64 %neg7115, -1
  %conv7117 = zext i1 %cmp7116 to i32
  %sub7118 = sub nsw i32 0, %conv7117
  %conv7119 = sext i32 %sub7118 to i64
  %1645 = load i64, i64* %nbytes, align 8
  %mul7120 = mul nsw i64 0, %1645
  %1646 = load i64, i64* %thrice_byte8_count, align 8
  %add7121 = add nsw i64 %mul7120, %1646
  %mul7122 = mul nsw i64 0, %add7121
  %add7123 = add nsw i64 %mul7122, 1
  %shl7124 = shl i64 %add7123, 62
  %sub7125 = sub nsw i64 %shl7124, 1
  %mul7126 = mul nsw i64 %sub7125, 2
  %add7127 = add nsw i64 %mul7126, 1
  %sub7128 = sub nsw i64 %conv7119, %add7127
  br label %cond.end.7134

cond.false.7129:                                  ; preds = %cond.false.7103
  %1647 = load i64, i64* %nbytes, align 8
  %mul7130 = mul nsw i64 0, %1647
  %1648 = load i64, i64* %thrice_byte8_count, align 8
  %add7131 = add nsw i64 %mul7130, %1648
  %mul7132 = mul nsw i64 0, %add7131
  %add7133 = add nsw i64 %mul7132, 0
  br label %cond.end.7134

cond.end.7134:                                    ; preds = %cond.false.7129, %cond.true.7110
  %cond7135 = phi i64 [ %sub7128, %cond.true.7110 ], [ %add7133, %cond.false.7129 ]
  %cmp7136 = icmp slt i64 %cond7135, 0
  br i1 %cmp7136, label %cond.true.7138, label %cond.false.7203

cond.true.7138:                                   ; preds = %cond.end.7134
  %1649 = load i64, i64* %nbytes, align 8
  %cmp7139 = icmp slt i64 %1649, 0
  br i1 %cmp7139, label %cond.true.7141, label %cond.false.7177

cond.true.7141:                                   ; preds = %cond.true.7138
  %1650 = load i64, i64* %thrice_byte8_count, align 8
  %1651 = load i64, i64* %nbytes, align 8
  %mul7142 = mul nsw i64 0, %1651
  %1652 = load i64, i64* %thrice_byte8_count, align 8
  %add7143 = add nsw i64 %mul7142, %1652
  %mul7144 = mul nsw i64 0, %add7143
  %sub7145 = sub nsw i64 %mul7144, 1
  %cmp7146 = icmp slt i64 %sub7145, 0
  br i1 %cmp7146, label %cond.true.7148, label %cond.false.7167

cond.true.7148:                                   ; preds = %cond.true.7141
  %1653 = load i64, i64* %nbytes, align 8
  %mul7149 = mul nsw i64 0, %1653
  %1654 = load i64, i64* %thrice_byte8_count, align 8
  %add7150 = add nsw i64 %mul7149, %1654
  %mul7151 = mul nsw i64 0, %add7150
  %add7152 = add nsw i64 %mul7151, 0
  %neg7153 = xor i64 %add7152, -1
  %cmp7154 = icmp eq i64 %neg7153, -1
  %conv7155 = zext i1 %cmp7154 to i32
  %sub7156 = sub nsw i32 0, %conv7155
  %conv7157 = sext i32 %sub7156 to i64
  %1655 = load i64, i64* %nbytes, align 8
  %mul7158 = mul nsw i64 0, %1655
  %1656 = load i64, i64* %thrice_byte8_count, align 8
  %add7159 = add nsw i64 %mul7158, %1656
  %mul7160 = mul nsw i64 0, %add7159
  %add7161 = add nsw i64 %mul7160, 1
  %shl7162 = shl i64 %add7161, 62
  %sub7163 = sub nsw i64 %shl7162, 1
  %mul7164 = mul nsw i64 %sub7163, 2
  %add7165 = add nsw i64 %mul7164, 1
  %sub7166 = sub nsw i64 %conv7157, %add7165
  br label %cond.end.7172

cond.false.7167:                                  ; preds = %cond.true.7141
  %1657 = load i64, i64* %nbytes, align 8
  %mul7168 = mul nsw i64 0, %1657
  %1658 = load i64, i64* %thrice_byte8_count, align 8
  %add7169 = add nsw i64 %mul7168, %1658
  %mul7170 = mul nsw i64 0, %add7169
  %add7171 = add nsw i64 %mul7170, 0
  br label %cond.end.7172

cond.end.7172:                                    ; preds = %cond.false.7167, %cond.true.7148
  %cond7173 = phi i64 [ %sub7166, %cond.true.7148 ], [ %add7171, %cond.false.7167 ]
  %1659 = load i64, i64* %nbytes, align 8
  %sub7174 = sub nsw i64 %cond7173, %1659
  %cmp7175 = icmp slt i64 %1650, %sub7174
  br i1 %cmp7175, label %cond.true.7235, label %lor.lhs.false.7221

cond.false.7177:                                  ; preds = %cond.true.7138
  %1660 = load i64, i64* %nbytes, align 8
  %mul7178 = mul nsw i64 0, %1660
  %1661 = load i64, i64* %thrice_byte8_count, align 8
  %add7179 = add nsw i64 %mul7178, %1661
  %mul7180 = mul nsw i64 0, %add7179
  %sub7181 = sub nsw i64 %mul7180, 1
  %cmp7182 = icmp slt i64 %sub7181, 0
  br i1 %cmp7182, label %cond.true.7184, label %cond.false.7193

cond.true.7184:                                   ; preds = %cond.false.7177
  %1662 = load i64, i64* %nbytes, align 8
  %mul7185 = mul nsw i64 0, %1662
  %1663 = load i64, i64* %thrice_byte8_count, align 8
  %add7186 = add nsw i64 %mul7185, %1663
  %mul7187 = mul nsw i64 0, %add7186
  %add7188 = add nsw i64 %mul7187, 1
  %shl7189 = shl i64 %add7188, 62
  %sub7190 = sub nsw i64 %shl7189, 1
  %mul7191 = mul nsw i64 %sub7190, 2
  %add7192 = add nsw i64 %mul7191, 1
  br label %cond.end.7198

cond.false.7193:                                  ; preds = %cond.false.7177
  %1664 = load i64, i64* %nbytes, align 8
  %mul7194 = mul nsw i64 0, %1664
  %1665 = load i64, i64* %thrice_byte8_count, align 8
  %add7195 = add nsw i64 %mul7194, %1665
  %mul7196 = mul nsw i64 0, %add7195
  %sub7197 = sub nsw i64 %mul7196, 1
  br label %cond.end.7198

cond.end.7198:                                    ; preds = %cond.false.7193, %cond.true.7184
  %cond7199 = phi i64 [ %add7192, %cond.true.7184 ], [ %sub7197, %cond.false.7193 ]
  %1666 = load i64, i64* %nbytes, align 8
  %sub7200 = sub nsw i64 %cond7199, %1666
  %1667 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7201 = icmp slt i64 %sub7200, %1667
  br i1 %cmp7201, label %cond.true.7235, label %lor.lhs.false.7221

cond.false.7203:                                  ; preds = %cond.end.7134
  %1668 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7204 = icmp slt i64 %1668, 0
  br i1 %cmp7204, label %cond.true.7206, label %cond.false.7210

cond.true.7206:                                   ; preds = %cond.false.7203
  %1669 = load i64, i64* %nbytes, align 8
  %1670 = load i64, i64* %thrice_byte8_count, align 8
  %1671 = load i64, i64* %nbytes, align 8
  %add7207 = add nsw i64 %1670, %1671
  %cmp7208 = icmp sle i64 %1669, %add7207
  br i1 %cmp7208, label %cond.true.7235, label %lor.lhs.false.7221

cond.false.7210:                                  ; preds = %cond.false.7203
  %1672 = load i64, i64* %nbytes, align 8
  %cmp7211 = icmp slt i64 %1672, 0
  br i1 %cmp7211, label %cond.true.7213, label %cond.false.7217

cond.true.7213:                                   ; preds = %cond.false.7210
  %1673 = load i64, i64* %thrice_byte8_count, align 8
  %1674 = load i64, i64* %thrice_byte8_count, align 8
  %1675 = load i64, i64* %nbytes, align 8
  %add7214 = add nsw i64 %1674, %1675
  %cmp7215 = icmp sle i64 %1673, %add7214
  br i1 %cmp7215, label %cond.true.7235, label %lor.lhs.false.7221

cond.false.7217:                                  ; preds = %cond.false.7210
  %1676 = load i64, i64* %thrice_byte8_count, align 8
  %1677 = load i64, i64* %nbytes, align 8
  %add7218 = add nsw i64 %1676, %1677
  %1678 = load i64, i64* %nbytes, align 8
  %cmp7219 = icmp slt i64 %add7218, %1678
  br i1 %cmp7219, label %cond.true.7235, label %lor.lhs.false.7221

lor.lhs.false.7221:                               ; preds = %cond.false.7217, %cond.true.7213, %cond.true.7206, %cond.end.7198, %cond.end.7172
  %1679 = load i64, i64* %thrice_byte8_count, align 8
  %1680 = load i64, i64* %nbytes, align 8
  %add7222 = add nsw i64 %1679, %1680
  %mul7223 = mul nsw i64 0, %add7222
  %sub7224 = sub nsw i64 %mul7223, 1
  %cmp7225 = icmp slt i64 %sub7224, 0
  br i1 %cmp7225, label %land.lhs.true.7227, label %lor.lhs.false.7231

land.lhs.true.7227:                               ; preds = %lor.lhs.false.7221
  %1681 = load i64, i64* %thrice_byte8_count, align 8
  %1682 = load i64, i64* %nbytes, align 8
  %add7228 = add nsw i64 %1681, %1682
  %cmp7229 = icmp slt i64 %add7228, -32768
  br i1 %cmp7229, label %cond.true.7235, label %lor.lhs.false.7231

lor.lhs.false.7231:                               ; preds = %land.lhs.true.7227, %lor.lhs.false.7221
  %1683 = load i64, i64* %thrice_byte8_count, align 8
  %1684 = load i64, i64* %nbytes, align 8
  %add7232 = add nsw i64 %1683, %1684
  %cmp7233 = icmp slt i64 32767, %add7232
  br i1 %cmp7233, label %cond.true.7235, label %cond.false.7264

cond.true.7235:                                   ; preds = %lor.lhs.false.7231, %land.lhs.true.7227, %cond.false.7217, %cond.true.7213, %cond.true.7206, %cond.end.7198, %cond.end.7172
  %1685 = load i64, i64* %thrice_byte8_count, align 8
  %conv7236 = trunc i64 %1685 to i16
  %conv7237 = zext i16 %conv7236 to i32
  %1686 = load i64, i64* %nbytes, align 8
  %conv7238 = trunc i64 %1686 to i16
  %conv7239 = zext i16 %conv7238 to i32
  %add7240 = add nsw i32 %conv7237, %conv7239
  %cmp7241 = icmp sle i32 %add7240, 32767
  br i1 %cmp7241, label %cond.true.7243, label %cond.false.7251

cond.true.7243:                                   ; preds = %cond.true.7235
  %1687 = load i64, i64* %thrice_byte8_count, align 8
  %conv7244 = trunc i64 %1687 to i16
  %conv7245 = zext i16 %conv7244 to i32
  %1688 = load i64, i64* %nbytes, align 8
  %conv7246 = trunc i64 %1688 to i16
  %conv7247 = zext i16 %conv7246 to i32
  %add7248 = add nsw i32 %conv7245, %conv7247
  %conv7249 = trunc i32 %add7248 to i16
  %conv7250 = sext i16 %conv7249 to i32
  br label %cond.end.7261

cond.false.7251:                                  ; preds = %cond.true.7235
  %1689 = load i64, i64* %thrice_byte8_count, align 8
  %conv7252 = trunc i64 %1689 to i16
  %conv7253 = zext i16 %conv7252 to i32
  %1690 = load i64, i64* %nbytes, align 8
  %conv7254 = trunc i64 %1690 to i16
  %conv7255 = zext i16 %conv7254 to i32
  %add7256 = add nsw i32 %conv7253, %conv7255
  %sub7257 = sub nsw i32 %add7256, -32768
  %conv7258 = trunc i32 %sub7257 to i16
  %conv7259 = sext i16 %conv7258 to i32
  %add7260 = add nsw i32 %conv7259, -32768
  br label %cond.end.7261

cond.end.7261:                                    ; preds = %cond.false.7251, %cond.true.7243
  %cond7262 = phi i32 [ %conv7250, %cond.true.7243 ], [ %add7260, %cond.false.7251 ]
  %conv7263 = sext i32 %cond7262 to i64
  store i64 %conv7263, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.7264:                                  ; preds = %lor.lhs.false.7231
  %1691 = load i64, i64* %thrice_byte8_count, align 8
  %conv7265 = trunc i64 %1691 to i16
  %conv7266 = zext i16 %conv7265 to i32
  %1692 = load i64, i64* %nbytes, align 8
  %conv7267 = trunc i64 %1692 to i16
  %conv7268 = zext i16 %conv7267 to i32
  %add7269 = add nsw i32 %conv7266, %conv7268
  %cmp7270 = icmp sle i32 %add7269, 32767
  br i1 %cmp7270, label %cond.true.7272, label %cond.false.7280

cond.true.7272:                                   ; preds = %cond.false.7264
  %1693 = load i64, i64* %thrice_byte8_count, align 8
  %conv7273 = trunc i64 %1693 to i16
  %conv7274 = zext i16 %conv7273 to i32
  %1694 = load i64, i64* %nbytes, align 8
  %conv7275 = trunc i64 %1694 to i16
  %conv7276 = zext i16 %conv7275 to i32
  %add7277 = add nsw i32 %conv7274, %conv7276
  %conv7278 = trunc i32 %add7277 to i16
  %conv7279 = sext i16 %conv7278 to i32
  br label %cond.end.7290

cond.false.7280:                                  ; preds = %cond.false.7264
  %1695 = load i64, i64* %thrice_byte8_count, align 8
  %conv7281 = trunc i64 %1695 to i16
  %conv7282 = zext i16 %conv7281 to i32
  %1696 = load i64, i64* %nbytes, align 8
  %conv7283 = trunc i64 %1696 to i16
  %conv7284 = zext i16 %conv7283 to i32
  %add7285 = add nsw i32 %conv7282, %conv7284
  %sub7286 = sub nsw i32 %add7285, -32768
  %conv7287 = trunc i32 %sub7286 to i16
  %conv7288 = sext i16 %conv7287 to i32
  %add7289 = add nsw i32 %conv7288, -32768
  br label %cond.end.7290

cond.end.7290:                                    ; preds = %cond.false.7280, %cond.true.7272
  %cond7291 = phi i32 [ %conv7279, %cond.true.7272 ], [ %add7289, %cond.false.7280 ]
  %conv7292 = sext i32 %cond7291 to i64
  store i64 %conv7292, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.7293:                                  ; preds = %cond.false.6825
  br i1 false, label %cond.true.7294, label %cond.false.7677

cond.true.7294:                                   ; preds = %cond.false.7293
  br i1 false, label %cond.true.7295, label %cond.false.7507

cond.true.7295:                                   ; preds = %cond.true.7294
  %1697 = load i64, i64* %nbytes, align 8
  %conv7296 = trunc i64 %1697 to i32
  %mul7297 = mul nsw i32 0, %conv7296
  %1698 = load i64, i64* %thrice_byte8_count, align 8
  %conv7298 = trunc i64 %1698 to i32
  %add7299 = add nsw i32 %mul7297, %conv7298
  %mul7300 = mul nsw i32 0, %add7299
  %sub7301 = sub nsw i32 %mul7300, 1
  %cmp7302 = icmp slt i32 %sub7301, 0
  br i1 %cmp7302, label %cond.true.7304, label %cond.false.7326

cond.true.7304:                                   ; preds = %cond.true.7295
  %1699 = load i64, i64* %nbytes, align 8
  %conv7305 = trunc i64 %1699 to i32
  %mul7306 = mul nsw i32 0, %conv7305
  %1700 = load i64, i64* %thrice_byte8_count, align 8
  %conv7307 = trunc i64 %1700 to i32
  %add7308 = add nsw i32 %mul7306, %conv7307
  %mul7309 = mul nsw i32 0, %add7308
  %add7310 = add nsw i32 %mul7309, 0
  %neg7311 = xor i32 %add7310, -1
  %cmp7312 = icmp eq i32 %neg7311, -1
  %conv7313 = zext i1 %cmp7312 to i32
  %sub7314 = sub nsw i32 0, %conv7313
  %1701 = load i64, i64* %nbytes, align 8
  %conv7315 = trunc i64 %1701 to i32
  %mul7316 = mul nsw i32 0, %conv7315
  %1702 = load i64, i64* %thrice_byte8_count, align 8
  %conv7317 = trunc i64 %1702 to i32
  %add7318 = add nsw i32 %mul7316, %conv7317
  %mul7319 = mul nsw i32 0, %add7318
  %add7320 = add nsw i32 %mul7319, 1
  %shl7321 = shl i32 %add7320, 30
  %sub7322 = sub nsw i32 %shl7321, 1
  %mul7323 = mul nsw i32 %sub7322, 2
  %add7324 = add nsw i32 %mul7323, 1
  %sub7325 = sub nsw i32 %sub7314, %add7324
  br label %cond.end.7333

cond.false.7326:                                  ; preds = %cond.true.7295
  %1703 = load i64, i64* %nbytes, align 8
  %conv7327 = trunc i64 %1703 to i32
  %mul7328 = mul nsw i32 0, %conv7327
  %1704 = load i64, i64* %thrice_byte8_count, align 8
  %conv7329 = trunc i64 %1704 to i32
  %add7330 = add nsw i32 %mul7328, %conv7329
  %mul7331 = mul nsw i32 0, %add7330
  %add7332 = add nsw i32 %mul7331, 0
  br label %cond.end.7333

cond.end.7333:                                    ; preds = %cond.false.7326, %cond.true.7304
  %cond7334 = phi i32 [ %sub7325, %cond.true.7304 ], [ %add7332, %cond.false.7326 ]
  %cmp7335 = icmp slt i32 %cond7334, 0
  br i1 %cmp7335, label %cond.true.7337, label %cond.false.7420

cond.true.7337:                                   ; preds = %cond.end.7333
  %1705 = load i64, i64* %nbytes, align 8
  %conv7338 = trunc i64 %1705 to i32
  %cmp7339 = icmp slt i32 %conv7338, 0
  br i1 %cmp7339, label %cond.true.7341, label %cond.false.7386

cond.true.7341:                                   ; preds = %cond.true.7337
  %1706 = load i64, i64* %thrice_byte8_count, align 8
  %conv7342 = trunc i64 %1706 to i32
  %1707 = load i64, i64* %nbytes, align 8
  %conv7343 = trunc i64 %1707 to i32
  %mul7344 = mul nsw i32 0, %conv7343
  %1708 = load i64, i64* %thrice_byte8_count, align 8
  %conv7345 = trunc i64 %1708 to i32
  %add7346 = add nsw i32 %mul7344, %conv7345
  %mul7347 = mul nsw i32 0, %add7346
  %sub7348 = sub nsw i32 %mul7347, 1
  %cmp7349 = icmp slt i32 %sub7348, 0
  br i1 %cmp7349, label %cond.true.7351, label %cond.false.7373

cond.true.7351:                                   ; preds = %cond.true.7341
  %1709 = load i64, i64* %nbytes, align 8
  %conv7352 = trunc i64 %1709 to i32
  %mul7353 = mul nsw i32 0, %conv7352
  %1710 = load i64, i64* %thrice_byte8_count, align 8
  %conv7354 = trunc i64 %1710 to i32
  %add7355 = add nsw i32 %mul7353, %conv7354
  %mul7356 = mul nsw i32 0, %add7355
  %add7357 = add nsw i32 %mul7356, 0
  %neg7358 = xor i32 %add7357, -1
  %cmp7359 = icmp eq i32 %neg7358, -1
  %conv7360 = zext i1 %cmp7359 to i32
  %sub7361 = sub nsw i32 0, %conv7360
  %1711 = load i64, i64* %nbytes, align 8
  %conv7362 = trunc i64 %1711 to i32
  %mul7363 = mul nsw i32 0, %conv7362
  %1712 = load i64, i64* %thrice_byte8_count, align 8
  %conv7364 = trunc i64 %1712 to i32
  %add7365 = add nsw i32 %mul7363, %conv7364
  %mul7366 = mul nsw i32 0, %add7365
  %add7367 = add nsw i32 %mul7366, 1
  %shl7368 = shl i32 %add7367, 30
  %sub7369 = sub nsw i32 %shl7368, 1
  %mul7370 = mul nsw i32 %sub7369, 2
  %add7371 = add nsw i32 %mul7370, 1
  %sub7372 = sub nsw i32 %sub7361, %add7371
  br label %cond.end.7380

cond.false.7373:                                  ; preds = %cond.true.7341
  %1713 = load i64, i64* %nbytes, align 8
  %conv7374 = trunc i64 %1713 to i32
  %mul7375 = mul nsw i32 0, %conv7374
  %1714 = load i64, i64* %thrice_byte8_count, align 8
  %conv7376 = trunc i64 %1714 to i32
  %add7377 = add nsw i32 %mul7375, %conv7376
  %mul7378 = mul nsw i32 0, %add7377
  %add7379 = add nsw i32 %mul7378, 0
  br label %cond.end.7380

cond.end.7380:                                    ; preds = %cond.false.7373, %cond.true.7351
  %cond7381 = phi i32 [ %sub7372, %cond.true.7351 ], [ %add7379, %cond.false.7373 ]
  %1715 = load i64, i64* %nbytes, align 8
  %conv7382 = trunc i64 %1715 to i32
  %sub7383 = sub nsw i32 %cond7381, %conv7382
  %cmp7384 = icmp slt i32 %conv7342, %sub7383
  br i1 %cmp7384, label %cond.true.7469, label %lor.lhs.false.7449

cond.false.7386:                                  ; preds = %cond.true.7337
  %1716 = load i64, i64* %nbytes, align 8
  %conv7387 = trunc i64 %1716 to i32
  %mul7388 = mul nsw i32 0, %conv7387
  %1717 = load i64, i64* %thrice_byte8_count, align 8
  %conv7389 = trunc i64 %1717 to i32
  %add7390 = add nsw i32 %mul7388, %conv7389
  %mul7391 = mul nsw i32 0, %add7390
  %sub7392 = sub nsw i32 %mul7391, 1
  %cmp7393 = icmp slt i32 %sub7392, 0
  br i1 %cmp7393, label %cond.true.7395, label %cond.false.7406

cond.true.7395:                                   ; preds = %cond.false.7386
  %1718 = load i64, i64* %nbytes, align 8
  %conv7396 = trunc i64 %1718 to i32
  %mul7397 = mul nsw i32 0, %conv7396
  %1719 = load i64, i64* %thrice_byte8_count, align 8
  %conv7398 = trunc i64 %1719 to i32
  %add7399 = add nsw i32 %mul7397, %conv7398
  %mul7400 = mul nsw i32 0, %add7399
  %add7401 = add nsw i32 %mul7400, 1
  %shl7402 = shl i32 %add7401, 30
  %sub7403 = sub nsw i32 %shl7402, 1
  %mul7404 = mul nsw i32 %sub7403, 2
  %add7405 = add nsw i32 %mul7404, 1
  br label %cond.end.7413

cond.false.7406:                                  ; preds = %cond.false.7386
  %1720 = load i64, i64* %nbytes, align 8
  %conv7407 = trunc i64 %1720 to i32
  %mul7408 = mul nsw i32 0, %conv7407
  %1721 = load i64, i64* %thrice_byte8_count, align 8
  %conv7409 = trunc i64 %1721 to i32
  %add7410 = add nsw i32 %mul7408, %conv7409
  %mul7411 = mul nsw i32 0, %add7410
  %sub7412 = sub nsw i32 %mul7411, 1
  br label %cond.end.7413

cond.end.7413:                                    ; preds = %cond.false.7406, %cond.true.7395
  %cond7414 = phi i32 [ %add7405, %cond.true.7395 ], [ %sub7412, %cond.false.7406 ]
  %1722 = load i64, i64* %nbytes, align 8
  %conv7415 = trunc i64 %1722 to i32
  %sub7416 = sub nsw i32 %cond7414, %conv7415
  %1723 = load i64, i64* %thrice_byte8_count, align 8
  %conv7417 = trunc i64 %1723 to i32
  %cmp7418 = icmp slt i32 %sub7416, %conv7417
  br i1 %cmp7418, label %cond.true.7469, label %lor.lhs.false.7449

cond.false.7420:                                  ; preds = %cond.end.7333
  %1724 = load i64, i64* %thrice_byte8_count, align 8
  %conv7421 = trunc i64 %1724 to i32
  %cmp7422 = icmp slt i32 %conv7421, 0
  br i1 %cmp7422, label %cond.true.7424, label %cond.false.7431

cond.true.7424:                                   ; preds = %cond.false.7420
  %1725 = load i64, i64* %nbytes, align 8
  %conv7425 = trunc i64 %1725 to i32
  %1726 = load i64, i64* %thrice_byte8_count, align 8
  %conv7426 = trunc i64 %1726 to i32
  %1727 = load i64, i64* %nbytes, align 8
  %conv7427 = trunc i64 %1727 to i32
  %add7428 = add nsw i32 %conv7426, %conv7427
  %cmp7429 = icmp sle i32 %conv7425, %add7428
  br i1 %cmp7429, label %cond.true.7469, label %lor.lhs.false.7449

cond.false.7431:                                  ; preds = %cond.false.7420
  %1728 = load i64, i64* %nbytes, align 8
  %conv7432 = trunc i64 %1728 to i32
  %cmp7433 = icmp slt i32 %conv7432, 0
  br i1 %cmp7433, label %cond.true.7435, label %cond.false.7442

cond.true.7435:                                   ; preds = %cond.false.7431
  %1729 = load i64, i64* %thrice_byte8_count, align 8
  %conv7436 = trunc i64 %1729 to i32
  %1730 = load i64, i64* %thrice_byte8_count, align 8
  %conv7437 = trunc i64 %1730 to i32
  %1731 = load i64, i64* %nbytes, align 8
  %conv7438 = trunc i64 %1731 to i32
  %add7439 = add nsw i32 %conv7437, %conv7438
  %cmp7440 = icmp sle i32 %conv7436, %add7439
  br i1 %cmp7440, label %cond.true.7469, label %lor.lhs.false.7449

cond.false.7442:                                  ; preds = %cond.false.7431
  %1732 = load i64, i64* %thrice_byte8_count, align 8
  %conv7443 = trunc i64 %1732 to i32
  %1733 = load i64, i64* %nbytes, align 8
  %conv7444 = trunc i64 %1733 to i32
  %add7445 = add nsw i32 %conv7443, %conv7444
  %1734 = load i64, i64* %nbytes, align 8
  %conv7446 = trunc i64 %1734 to i32
  %cmp7447 = icmp slt i32 %add7445, %conv7446
  br i1 %cmp7447, label %cond.true.7469, label %lor.lhs.false.7449

lor.lhs.false.7449:                               ; preds = %cond.false.7442, %cond.true.7435, %cond.true.7424, %cond.end.7413, %cond.end.7380
  %1735 = load i64, i64* %thrice_byte8_count, align 8
  %conv7450 = trunc i64 %1735 to i32
  %1736 = load i64, i64* %nbytes, align 8
  %conv7451 = trunc i64 %1736 to i32
  %add7452 = add nsw i32 %conv7450, %conv7451
  %mul7453 = mul nsw i32 0, %add7452
  %sub7454 = sub nsw i32 %mul7453, 1
  %cmp7455 = icmp slt i32 %sub7454, 0
  br i1 %cmp7455, label %land.lhs.true.7457, label %lor.lhs.false.7463

land.lhs.true.7457:                               ; preds = %lor.lhs.false.7449
  %1737 = load i64, i64* %thrice_byte8_count, align 8
  %conv7458 = trunc i64 %1737 to i32
  %1738 = load i64, i64* %nbytes, align 8
  %conv7459 = trunc i64 %1738 to i32
  %add7460 = add nsw i32 %conv7458, %conv7459
  %cmp7461 = icmp slt i32 %add7460, -2147483648
  br i1 %cmp7461, label %cond.true.7469, label %lor.lhs.false.7463

lor.lhs.false.7463:                               ; preds = %land.lhs.true.7457, %lor.lhs.false.7449
  %1739 = load i64, i64* %thrice_byte8_count, align 8
  %conv7464 = trunc i64 %1739 to i32
  %1740 = load i64, i64* %nbytes, align 8
  %conv7465 = trunc i64 %1740 to i32
  %add7466 = add nsw i32 %conv7464, %conv7465
  %cmp7467 = icmp slt i32 2147483647, %add7466
  br i1 %cmp7467, label %cond.true.7469, label %cond.false.7488

cond.true.7469:                                   ; preds = %lor.lhs.false.7463, %land.lhs.true.7457, %cond.false.7442, %cond.true.7435, %cond.true.7424, %cond.end.7413, %cond.end.7380
  %1741 = load i64, i64* %thrice_byte8_count, align 8
  %conv7470 = trunc i64 %1741 to i32
  %1742 = load i64, i64* %nbytes, align 8
  %conv7471 = trunc i64 %1742 to i32
  %add7472 = add i32 %conv7470, %conv7471
  %cmp7473 = icmp ule i32 %add7472, 2147483647
  br i1 %cmp7473, label %cond.true.7475, label %cond.false.7479

cond.true.7475:                                   ; preds = %cond.true.7469
  %1743 = load i64, i64* %thrice_byte8_count, align 8
  %conv7476 = trunc i64 %1743 to i32
  %1744 = load i64, i64* %nbytes, align 8
  %conv7477 = trunc i64 %1744 to i32
  %add7478 = add i32 %conv7476, %conv7477
  br label %cond.end.7485

cond.false.7479:                                  ; preds = %cond.true.7469
  %1745 = load i64, i64* %thrice_byte8_count, align 8
  %conv7480 = trunc i64 %1745 to i32
  %1746 = load i64, i64* %nbytes, align 8
  %conv7481 = trunc i64 %1746 to i32
  %add7482 = add i32 %conv7480, %conv7481
  %sub7483 = sub i32 %add7482, -2147483648
  %add7484 = add nsw i32 %sub7483, -2147483648
  br label %cond.end.7485

cond.end.7485:                                    ; preds = %cond.false.7479, %cond.true.7475
  %cond7486 = phi i32 [ %add7478, %cond.true.7475 ], [ %add7484, %cond.false.7479 ]
  %conv7487 = sext i32 %cond7486 to i64
  store i64 %conv7487, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.7488:                                  ; preds = %lor.lhs.false.7463
  %1747 = load i64, i64* %thrice_byte8_count, align 8
  %conv7489 = trunc i64 %1747 to i32
  %1748 = load i64, i64* %nbytes, align 8
  %conv7490 = trunc i64 %1748 to i32
  %add7491 = add i32 %conv7489, %conv7490
  %cmp7492 = icmp ule i32 %add7491, 2147483647
  br i1 %cmp7492, label %cond.true.7494, label %cond.false.7498

cond.true.7494:                                   ; preds = %cond.false.7488
  %1749 = load i64, i64* %thrice_byte8_count, align 8
  %conv7495 = trunc i64 %1749 to i32
  %1750 = load i64, i64* %nbytes, align 8
  %conv7496 = trunc i64 %1750 to i32
  %add7497 = add i32 %conv7495, %conv7496
  br label %cond.end.7504

cond.false.7498:                                  ; preds = %cond.false.7488
  %1751 = load i64, i64* %thrice_byte8_count, align 8
  %conv7499 = trunc i64 %1751 to i32
  %1752 = load i64, i64* %nbytes, align 8
  %conv7500 = trunc i64 %1752 to i32
  %add7501 = add i32 %conv7499, %conv7500
  %sub7502 = sub i32 %add7501, -2147483648
  %add7503 = add nsw i32 %sub7502, -2147483648
  br label %cond.end.7504

cond.end.7504:                                    ; preds = %cond.false.7498, %cond.true.7494
  %cond7505 = phi i32 [ %add7497, %cond.true.7494 ], [ %add7503, %cond.false.7498 ]
  %conv7506 = sext i32 %cond7505 to i64
  store i64 %conv7506, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.7507:                                  ; preds = %cond.true.7294
  %1753 = load i64, i64* %nbytes, align 8
  %mul7508 = mul nsw i64 0, %1753
  %1754 = load i64, i64* %thrice_byte8_count, align 8
  %add7509 = add nsw i64 %mul7508, %1754
  %mul7510 = mul nsw i64 0, %add7509
  %sub7511 = sub nsw i64 %mul7510, 1
  %cmp7512 = icmp slt i64 %sub7511, 0
  br i1 %cmp7512, label %cond.true.7514, label %cond.false.7533

cond.true.7514:                                   ; preds = %cond.false.7507
  %1755 = load i64, i64* %nbytes, align 8
  %mul7515 = mul nsw i64 0, %1755
  %1756 = load i64, i64* %thrice_byte8_count, align 8
  %add7516 = add nsw i64 %mul7515, %1756
  %mul7517 = mul nsw i64 0, %add7516
  %add7518 = add nsw i64 %mul7517, 0
  %neg7519 = xor i64 %add7518, -1
  %cmp7520 = icmp eq i64 %neg7519, -1
  %conv7521 = zext i1 %cmp7520 to i32
  %sub7522 = sub nsw i32 0, %conv7521
  %conv7523 = sext i32 %sub7522 to i64
  %1757 = load i64, i64* %nbytes, align 8
  %mul7524 = mul nsw i64 0, %1757
  %1758 = load i64, i64* %thrice_byte8_count, align 8
  %add7525 = add nsw i64 %mul7524, %1758
  %mul7526 = mul nsw i64 0, %add7525
  %add7527 = add nsw i64 %mul7526, 1
  %shl7528 = shl i64 %add7527, 62
  %sub7529 = sub nsw i64 %shl7528, 1
  %mul7530 = mul nsw i64 %sub7529, 2
  %add7531 = add nsw i64 %mul7530, 1
  %sub7532 = sub nsw i64 %conv7523, %add7531
  br label %cond.end.7538

cond.false.7533:                                  ; preds = %cond.false.7507
  %1759 = load i64, i64* %nbytes, align 8
  %mul7534 = mul nsw i64 0, %1759
  %1760 = load i64, i64* %thrice_byte8_count, align 8
  %add7535 = add nsw i64 %mul7534, %1760
  %mul7536 = mul nsw i64 0, %add7535
  %add7537 = add nsw i64 %mul7536, 0
  br label %cond.end.7538

cond.end.7538:                                    ; preds = %cond.false.7533, %cond.true.7514
  %cond7539 = phi i64 [ %sub7532, %cond.true.7514 ], [ %add7537, %cond.false.7533 ]
  %cmp7540 = icmp slt i64 %cond7539, 0
  br i1 %cmp7540, label %cond.true.7542, label %cond.false.7607

cond.true.7542:                                   ; preds = %cond.end.7538
  %1761 = load i64, i64* %nbytes, align 8
  %cmp7543 = icmp slt i64 %1761, 0
  br i1 %cmp7543, label %cond.true.7545, label %cond.false.7581

cond.true.7545:                                   ; preds = %cond.true.7542
  %1762 = load i64, i64* %thrice_byte8_count, align 8
  %1763 = load i64, i64* %nbytes, align 8
  %mul7546 = mul nsw i64 0, %1763
  %1764 = load i64, i64* %thrice_byte8_count, align 8
  %add7547 = add nsw i64 %mul7546, %1764
  %mul7548 = mul nsw i64 0, %add7547
  %sub7549 = sub nsw i64 %mul7548, 1
  %cmp7550 = icmp slt i64 %sub7549, 0
  br i1 %cmp7550, label %cond.true.7552, label %cond.false.7571

cond.true.7552:                                   ; preds = %cond.true.7545
  %1765 = load i64, i64* %nbytes, align 8
  %mul7553 = mul nsw i64 0, %1765
  %1766 = load i64, i64* %thrice_byte8_count, align 8
  %add7554 = add nsw i64 %mul7553, %1766
  %mul7555 = mul nsw i64 0, %add7554
  %add7556 = add nsw i64 %mul7555, 0
  %neg7557 = xor i64 %add7556, -1
  %cmp7558 = icmp eq i64 %neg7557, -1
  %conv7559 = zext i1 %cmp7558 to i32
  %sub7560 = sub nsw i32 0, %conv7559
  %conv7561 = sext i32 %sub7560 to i64
  %1767 = load i64, i64* %nbytes, align 8
  %mul7562 = mul nsw i64 0, %1767
  %1768 = load i64, i64* %thrice_byte8_count, align 8
  %add7563 = add nsw i64 %mul7562, %1768
  %mul7564 = mul nsw i64 0, %add7563
  %add7565 = add nsw i64 %mul7564, 1
  %shl7566 = shl i64 %add7565, 62
  %sub7567 = sub nsw i64 %shl7566, 1
  %mul7568 = mul nsw i64 %sub7567, 2
  %add7569 = add nsw i64 %mul7568, 1
  %sub7570 = sub nsw i64 %conv7561, %add7569
  br label %cond.end.7576

cond.false.7571:                                  ; preds = %cond.true.7545
  %1769 = load i64, i64* %nbytes, align 8
  %mul7572 = mul nsw i64 0, %1769
  %1770 = load i64, i64* %thrice_byte8_count, align 8
  %add7573 = add nsw i64 %mul7572, %1770
  %mul7574 = mul nsw i64 0, %add7573
  %add7575 = add nsw i64 %mul7574, 0
  br label %cond.end.7576

cond.end.7576:                                    ; preds = %cond.false.7571, %cond.true.7552
  %cond7577 = phi i64 [ %sub7570, %cond.true.7552 ], [ %add7575, %cond.false.7571 ]
  %1771 = load i64, i64* %nbytes, align 8
  %sub7578 = sub nsw i64 %cond7577, %1771
  %cmp7579 = icmp slt i64 %1762, %sub7578
  br i1 %cmp7579, label %cond.true.7639, label %lor.lhs.false.7625

cond.false.7581:                                  ; preds = %cond.true.7542
  %1772 = load i64, i64* %nbytes, align 8
  %mul7582 = mul nsw i64 0, %1772
  %1773 = load i64, i64* %thrice_byte8_count, align 8
  %add7583 = add nsw i64 %mul7582, %1773
  %mul7584 = mul nsw i64 0, %add7583
  %sub7585 = sub nsw i64 %mul7584, 1
  %cmp7586 = icmp slt i64 %sub7585, 0
  br i1 %cmp7586, label %cond.true.7588, label %cond.false.7597

cond.true.7588:                                   ; preds = %cond.false.7581
  %1774 = load i64, i64* %nbytes, align 8
  %mul7589 = mul nsw i64 0, %1774
  %1775 = load i64, i64* %thrice_byte8_count, align 8
  %add7590 = add nsw i64 %mul7589, %1775
  %mul7591 = mul nsw i64 0, %add7590
  %add7592 = add nsw i64 %mul7591, 1
  %shl7593 = shl i64 %add7592, 62
  %sub7594 = sub nsw i64 %shl7593, 1
  %mul7595 = mul nsw i64 %sub7594, 2
  %add7596 = add nsw i64 %mul7595, 1
  br label %cond.end.7602

cond.false.7597:                                  ; preds = %cond.false.7581
  %1776 = load i64, i64* %nbytes, align 8
  %mul7598 = mul nsw i64 0, %1776
  %1777 = load i64, i64* %thrice_byte8_count, align 8
  %add7599 = add nsw i64 %mul7598, %1777
  %mul7600 = mul nsw i64 0, %add7599
  %sub7601 = sub nsw i64 %mul7600, 1
  br label %cond.end.7602

cond.end.7602:                                    ; preds = %cond.false.7597, %cond.true.7588
  %cond7603 = phi i64 [ %add7596, %cond.true.7588 ], [ %sub7601, %cond.false.7597 ]
  %1778 = load i64, i64* %nbytes, align 8
  %sub7604 = sub nsw i64 %cond7603, %1778
  %1779 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7605 = icmp slt i64 %sub7604, %1779
  br i1 %cmp7605, label %cond.true.7639, label %lor.lhs.false.7625

cond.false.7607:                                  ; preds = %cond.end.7538
  %1780 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7608 = icmp slt i64 %1780, 0
  br i1 %cmp7608, label %cond.true.7610, label %cond.false.7614

cond.true.7610:                                   ; preds = %cond.false.7607
  %1781 = load i64, i64* %nbytes, align 8
  %1782 = load i64, i64* %thrice_byte8_count, align 8
  %1783 = load i64, i64* %nbytes, align 8
  %add7611 = add nsw i64 %1782, %1783
  %cmp7612 = icmp sle i64 %1781, %add7611
  br i1 %cmp7612, label %cond.true.7639, label %lor.lhs.false.7625

cond.false.7614:                                  ; preds = %cond.false.7607
  %1784 = load i64, i64* %nbytes, align 8
  %cmp7615 = icmp slt i64 %1784, 0
  br i1 %cmp7615, label %cond.true.7617, label %cond.false.7621

cond.true.7617:                                   ; preds = %cond.false.7614
  %1785 = load i64, i64* %thrice_byte8_count, align 8
  %1786 = load i64, i64* %thrice_byte8_count, align 8
  %1787 = load i64, i64* %nbytes, align 8
  %add7618 = add nsw i64 %1786, %1787
  %cmp7619 = icmp sle i64 %1785, %add7618
  br i1 %cmp7619, label %cond.true.7639, label %lor.lhs.false.7625

cond.false.7621:                                  ; preds = %cond.false.7614
  %1788 = load i64, i64* %thrice_byte8_count, align 8
  %1789 = load i64, i64* %nbytes, align 8
  %add7622 = add nsw i64 %1788, %1789
  %1790 = load i64, i64* %nbytes, align 8
  %cmp7623 = icmp slt i64 %add7622, %1790
  br i1 %cmp7623, label %cond.true.7639, label %lor.lhs.false.7625

lor.lhs.false.7625:                               ; preds = %cond.false.7621, %cond.true.7617, %cond.true.7610, %cond.end.7602, %cond.end.7576
  %1791 = load i64, i64* %thrice_byte8_count, align 8
  %1792 = load i64, i64* %nbytes, align 8
  %add7626 = add nsw i64 %1791, %1792
  %mul7627 = mul nsw i64 0, %add7626
  %sub7628 = sub nsw i64 %mul7627, 1
  %cmp7629 = icmp slt i64 %sub7628, 0
  br i1 %cmp7629, label %land.lhs.true.7631, label %lor.lhs.false.7635

land.lhs.true.7631:                               ; preds = %lor.lhs.false.7625
  %1793 = load i64, i64* %thrice_byte8_count, align 8
  %1794 = load i64, i64* %nbytes, align 8
  %add7632 = add nsw i64 %1793, %1794
  %cmp7633 = icmp slt i64 %add7632, -2147483648
  br i1 %cmp7633, label %cond.true.7639, label %lor.lhs.false.7635

lor.lhs.false.7635:                               ; preds = %land.lhs.true.7631, %lor.lhs.false.7625
  %1795 = load i64, i64* %thrice_byte8_count, align 8
  %1796 = load i64, i64* %nbytes, align 8
  %add7636 = add nsw i64 %1795, %1796
  %cmp7637 = icmp slt i64 2147483647, %add7636
  br i1 %cmp7637, label %cond.true.7639, label %cond.false.7658

cond.true.7639:                                   ; preds = %lor.lhs.false.7635, %land.lhs.true.7631, %cond.false.7621, %cond.true.7617, %cond.true.7610, %cond.end.7602, %cond.end.7576
  %1797 = load i64, i64* %thrice_byte8_count, align 8
  %conv7640 = trunc i64 %1797 to i32
  %1798 = load i64, i64* %nbytes, align 8
  %conv7641 = trunc i64 %1798 to i32
  %add7642 = add i32 %conv7640, %conv7641
  %cmp7643 = icmp ule i32 %add7642, 2147483647
  br i1 %cmp7643, label %cond.true.7645, label %cond.false.7649

cond.true.7645:                                   ; preds = %cond.true.7639
  %1799 = load i64, i64* %thrice_byte8_count, align 8
  %conv7646 = trunc i64 %1799 to i32
  %1800 = load i64, i64* %nbytes, align 8
  %conv7647 = trunc i64 %1800 to i32
  %add7648 = add i32 %conv7646, %conv7647
  br label %cond.end.7655

cond.false.7649:                                  ; preds = %cond.true.7639
  %1801 = load i64, i64* %thrice_byte8_count, align 8
  %conv7650 = trunc i64 %1801 to i32
  %1802 = load i64, i64* %nbytes, align 8
  %conv7651 = trunc i64 %1802 to i32
  %add7652 = add i32 %conv7650, %conv7651
  %sub7653 = sub i32 %add7652, -2147483648
  %add7654 = add nsw i32 %sub7653, -2147483648
  br label %cond.end.7655

cond.end.7655:                                    ; preds = %cond.false.7649, %cond.true.7645
  %cond7656 = phi i32 [ %add7648, %cond.true.7645 ], [ %add7654, %cond.false.7649 ]
  %conv7657 = sext i32 %cond7656 to i64
  store i64 %conv7657, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.7658:                                  ; preds = %lor.lhs.false.7635
  %1803 = load i64, i64* %thrice_byte8_count, align 8
  %conv7659 = trunc i64 %1803 to i32
  %1804 = load i64, i64* %nbytes, align 8
  %conv7660 = trunc i64 %1804 to i32
  %add7661 = add i32 %conv7659, %conv7660
  %cmp7662 = icmp ule i32 %add7661, 2147483647
  br i1 %cmp7662, label %cond.true.7664, label %cond.false.7668

cond.true.7664:                                   ; preds = %cond.false.7658
  %1805 = load i64, i64* %thrice_byte8_count, align 8
  %conv7665 = trunc i64 %1805 to i32
  %1806 = load i64, i64* %nbytes, align 8
  %conv7666 = trunc i64 %1806 to i32
  %add7667 = add i32 %conv7665, %conv7666
  br label %cond.end.7674

cond.false.7668:                                  ; preds = %cond.false.7658
  %1807 = load i64, i64* %thrice_byte8_count, align 8
  %conv7669 = trunc i64 %1807 to i32
  %1808 = load i64, i64* %nbytes, align 8
  %conv7670 = trunc i64 %1808 to i32
  %add7671 = add i32 %conv7669, %conv7670
  %sub7672 = sub i32 %add7671, -2147483648
  %add7673 = add nsw i32 %sub7672, -2147483648
  br label %cond.end.7674

cond.end.7674:                                    ; preds = %cond.false.7668, %cond.true.7664
  %cond7675 = phi i32 [ %add7667, %cond.true.7664 ], [ %add7673, %cond.false.7668 ]
  %conv7676 = sext i32 %cond7675 to i64
  store i64 %conv7676, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.7677:                                  ; preds = %cond.false.7293
  br i1 true, label %cond.true.7678, label %cond.false.7991

cond.true.7678:                                   ; preds = %cond.false.7677
  br i1 false, label %cond.true.7679, label %cond.false.7835

cond.true.7679:                                   ; preds = %cond.true.7678
  %1809 = load i64, i64* %nbytes, align 8
  %mul7680 = mul nsw i64 0, %1809
  %1810 = load i64, i64* %thrice_byte8_count, align 8
  %add7681 = add nsw i64 %mul7680, %1810
  %mul7682 = mul nsw i64 0, %add7681
  %sub7683 = sub nsw i64 %mul7682, 1
  %cmp7684 = icmp slt i64 %sub7683, 0
  br i1 %cmp7684, label %cond.true.7686, label %cond.false.7705

cond.true.7686:                                   ; preds = %cond.true.7679
  %1811 = load i64, i64* %nbytes, align 8
  %mul7687 = mul nsw i64 0, %1811
  %1812 = load i64, i64* %thrice_byte8_count, align 8
  %add7688 = add nsw i64 %mul7687, %1812
  %mul7689 = mul nsw i64 0, %add7688
  %add7690 = add nsw i64 %mul7689, 0
  %neg7691 = xor i64 %add7690, -1
  %cmp7692 = icmp eq i64 %neg7691, -1
  %conv7693 = zext i1 %cmp7692 to i32
  %sub7694 = sub nsw i32 0, %conv7693
  %conv7695 = sext i32 %sub7694 to i64
  %1813 = load i64, i64* %nbytes, align 8
  %mul7696 = mul nsw i64 0, %1813
  %1814 = load i64, i64* %thrice_byte8_count, align 8
  %add7697 = add nsw i64 %mul7696, %1814
  %mul7698 = mul nsw i64 0, %add7697
  %add7699 = add nsw i64 %mul7698, 1
  %shl7700 = shl i64 %add7699, 62
  %sub7701 = sub nsw i64 %shl7700, 1
  %mul7702 = mul nsw i64 %sub7701, 2
  %add7703 = add nsw i64 %mul7702, 1
  %sub7704 = sub nsw i64 %conv7695, %add7703
  br label %cond.end.7710

cond.false.7705:                                  ; preds = %cond.true.7679
  %1815 = load i64, i64* %nbytes, align 8
  %mul7706 = mul nsw i64 0, %1815
  %1816 = load i64, i64* %thrice_byte8_count, align 8
  %add7707 = add nsw i64 %mul7706, %1816
  %mul7708 = mul nsw i64 0, %add7707
  %add7709 = add nsw i64 %mul7708, 0
  br label %cond.end.7710

cond.end.7710:                                    ; preds = %cond.false.7705, %cond.true.7686
  %cond7711 = phi i64 [ %sub7704, %cond.true.7686 ], [ %add7709, %cond.false.7705 ]
  %cmp7712 = icmp slt i64 %cond7711, 0
  br i1 %cmp7712, label %cond.true.7714, label %cond.false.7779

cond.true.7714:                                   ; preds = %cond.end.7710
  %1817 = load i64, i64* %nbytes, align 8
  %cmp7715 = icmp slt i64 %1817, 0
  br i1 %cmp7715, label %cond.true.7717, label %cond.false.7753

cond.true.7717:                                   ; preds = %cond.true.7714
  %1818 = load i64, i64* %thrice_byte8_count, align 8
  %1819 = load i64, i64* %nbytes, align 8
  %mul7718 = mul nsw i64 0, %1819
  %1820 = load i64, i64* %thrice_byte8_count, align 8
  %add7719 = add nsw i64 %mul7718, %1820
  %mul7720 = mul nsw i64 0, %add7719
  %sub7721 = sub nsw i64 %mul7720, 1
  %cmp7722 = icmp slt i64 %sub7721, 0
  br i1 %cmp7722, label %cond.true.7724, label %cond.false.7743

cond.true.7724:                                   ; preds = %cond.true.7717
  %1821 = load i64, i64* %nbytes, align 8
  %mul7725 = mul nsw i64 0, %1821
  %1822 = load i64, i64* %thrice_byte8_count, align 8
  %add7726 = add nsw i64 %mul7725, %1822
  %mul7727 = mul nsw i64 0, %add7726
  %add7728 = add nsw i64 %mul7727, 0
  %neg7729 = xor i64 %add7728, -1
  %cmp7730 = icmp eq i64 %neg7729, -1
  %conv7731 = zext i1 %cmp7730 to i32
  %sub7732 = sub nsw i32 0, %conv7731
  %conv7733 = sext i32 %sub7732 to i64
  %1823 = load i64, i64* %nbytes, align 8
  %mul7734 = mul nsw i64 0, %1823
  %1824 = load i64, i64* %thrice_byte8_count, align 8
  %add7735 = add nsw i64 %mul7734, %1824
  %mul7736 = mul nsw i64 0, %add7735
  %add7737 = add nsw i64 %mul7736, 1
  %shl7738 = shl i64 %add7737, 62
  %sub7739 = sub nsw i64 %shl7738, 1
  %mul7740 = mul nsw i64 %sub7739, 2
  %add7741 = add nsw i64 %mul7740, 1
  %sub7742 = sub nsw i64 %conv7733, %add7741
  br label %cond.end.7748

cond.false.7743:                                  ; preds = %cond.true.7717
  %1825 = load i64, i64* %nbytes, align 8
  %mul7744 = mul nsw i64 0, %1825
  %1826 = load i64, i64* %thrice_byte8_count, align 8
  %add7745 = add nsw i64 %mul7744, %1826
  %mul7746 = mul nsw i64 0, %add7745
  %add7747 = add nsw i64 %mul7746, 0
  br label %cond.end.7748

cond.end.7748:                                    ; preds = %cond.false.7743, %cond.true.7724
  %cond7749 = phi i64 [ %sub7742, %cond.true.7724 ], [ %add7747, %cond.false.7743 ]
  %1827 = load i64, i64* %nbytes, align 8
  %sub7750 = sub nsw i64 %cond7749, %1827
  %cmp7751 = icmp slt i64 %1818, %sub7750
  br i1 %cmp7751, label %cond.true.7811, label %lor.lhs.false.7797

cond.false.7753:                                  ; preds = %cond.true.7714
  %1828 = load i64, i64* %nbytes, align 8
  %mul7754 = mul nsw i64 0, %1828
  %1829 = load i64, i64* %thrice_byte8_count, align 8
  %add7755 = add nsw i64 %mul7754, %1829
  %mul7756 = mul nsw i64 0, %add7755
  %sub7757 = sub nsw i64 %mul7756, 1
  %cmp7758 = icmp slt i64 %sub7757, 0
  br i1 %cmp7758, label %cond.true.7760, label %cond.false.7769

cond.true.7760:                                   ; preds = %cond.false.7753
  %1830 = load i64, i64* %nbytes, align 8
  %mul7761 = mul nsw i64 0, %1830
  %1831 = load i64, i64* %thrice_byte8_count, align 8
  %add7762 = add nsw i64 %mul7761, %1831
  %mul7763 = mul nsw i64 0, %add7762
  %add7764 = add nsw i64 %mul7763, 1
  %shl7765 = shl i64 %add7764, 62
  %sub7766 = sub nsw i64 %shl7765, 1
  %mul7767 = mul nsw i64 %sub7766, 2
  %add7768 = add nsw i64 %mul7767, 1
  br label %cond.end.7774

cond.false.7769:                                  ; preds = %cond.false.7753
  %1832 = load i64, i64* %nbytes, align 8
  %mul7770 = mul nsw i64 0, %1832
  %1833 = load i64, i64* %thrice_byte8_count, align 8
  %add7771 = add nsw i64 %mul7770, %1833
  %mul7772 = mul nsw i64 0, %add7771
  %sub7773 = sub nsw i64 %mul7772, 1
  br label %cond.end.7774

cond.end.7774:                                    ; preds = %cond.false.7769, %cond.true.7760
  %cond7775 = phi i64 [ %add7768, %cond.true.7760 ], [ %sub7773, %cond.false.7769 ]
  %1834 = load i64, i64* %nbytes, align 8
  %sub7776 = sub nsw i64 %cond7775, %1834
  %1835 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7777 = icmp slt i64 %sub7776, %1835
  br i1 %cmp7777, label %cond.true.7811, label %lor.lhs.false.7797

cond.false.7779:                                  ; preds = %cond.end.7710
  %1836 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7780 = icmp slt i64 %1836, 0
  br i1 %cmp7780, label %cond.true.7782, label %cond.false.7786

cond.true.7782:                                   ; preds = %cond.false.7779
  %1837 = load i64, i64* %nbytes, align 8
  %1838 = load i64, i64* %thrice_byte8_count, align 8
  %1839 = load i64, i64* %nbytes, align 8
  %add7783 = add nsw i64 %1838, %1839
  %cmp7784 = icmp sle i64 %1837, %add7783
  br i1 %cmp7784, label %cond.true.7811, label %lor.lhs.false.7797

cond.false.7786:                                  ; preds = %cond.false.7779
  %1840 = load i64, i64* %nbytes, align 8
  %cmp7787 = icmp slt i64 %1840, 0
  br i1 %cmp7787, label %cond.true.7789, label %cond.false.7793

cond.true.7789:                                   ; preds = %cond.false.7786
  %1841 = load i64, i64* %thrice_byte8_count, align 8
  %1842 = load i64, i64* %thrice_byte8_count, align 8
  %1843 = load i64, i64* %nbytes, align 8
  %add7790 = add nsw i64 %1842, %1843
  %cmp7791 = icmp sle i64 %1841, %add7790
  br i1 %cmp7791, label %cond.true.7811, label %lor.lhs.false.7797

cond.false.7793:                                  ; preds = %cond.false.7786
  %1844 = load i64, i64* %thrice_byte8_count, align 8
  %1845 = load i64, i64* %nbytes, align 8
  %add7794 = add nsw i64 %1844, %1845
  %1846 = load i64, i64* %nbytes, align 8
  %cmp7795 = icmp slt i64 %add7794, %1846
  br i1 %cmp7795, label %cond.true.7811, label %lor.lhs.false.7797

lor.lhs.false.7797:                               ; preds = %cond.false.7793, %cond.true.7789, %cond.true.7782, %cond.end.7774, %cond.end.7748
  %1847 = load i64, i64* %thrice_byte8_count, align 8
  %1848 = load i64, i64* %nbytes, align 8
  %add7798 = add nsw i64 %1847, %1848
  %mul7799 = mul nsw i64 0, %add7798
  %sub7800 = sub nsw i64 %mul7799, 1
  %cmp7801 = icmp slt i64 %sub7800, 0
  br i1 %cmp7801, label %land.lhs.true.7803, label %lor.lhs.false.7807

land.lhs.true.7803:                               ; preds = %lor.lhs.false.7797
  %1849 = load i64, i64* %thrice_byte8_count, align 8
  %1850 = load i64, i64* %nbytes, align 8
  %add7804 = add nsw i64 %1849, %1850
  %cmp7805 = icmp slt i64 %add7804, -9223372036854775808
  br i1 %cmp7805, label %cond.true.7811, label %lor.lhs.false.7807

lor.lhs.false.7807:                               ; preds = %land.lhs.true.7803, %lor.lhs.false.7797
  %1851 = load i64, i64* %thrice_byte8_count, align 8
  %1852 = load i64, i64* %nbytes, align 8
  %add7808 = add nsw i64 %1851, %1852
  %cmp7809 = icmp slt i64 9223372036854775807, %add7808
  br i1 %cmp7809, label %cond.true.7811, label %cond.false.7823

cond.true.7811:                                   ; preds = %lor.lhs.false.7807, %land.lhs.true.7803, %cond.false.7793, %cond.true.7789, %cond.true.7782, %cond.end.7774, %cond.end.7748
  %1853 = load i64, i64* %thrice_byte8_count, align 8
  %1854 = load i64, i64* %nbytes, align 8
  %add7812 = add i64 %1853, %1854
  %cmp7813 = icmp ule i64 %add7812, 9223372036854775807
  br i1 %cmp7813, label %cond.true.7815, label %cond.false.7817

cond.true.7815:                                   ; preds = %cond.true.7811
  %1855 = load i64, i64* %thrice_byte8_count, align 8
  %1856 = load i64, i64* %nbytes, align 8
  %add7816 = add i64 %1855, %1856
  br label %cond.end.7821

cond.false.7817:                                  ; preds = %cond.true.7811
  %1857 = load i64, i64* %thrice_byte8_count, align 8
  %1858 = load i64, i64* %nbytes, align 8
  %add7818 = add i64 %1857, %1858
  %sub7819 = sub i64 %add7818, -9223372036854775808
  %add7820 = add nsw i64 %sub7819, -9223372036854775808
  br label %cond.end.7821

cond.end.7821:                                    ; preds = %cond.false.7817, %cond.true.7815
  %cond7822 = phi i64 [ %add7816, %cond.true.7815 ], [ %add7820, %cond.false.7817 ]
  store i64 %cond7822, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.7823:                                  ; preds = %lor.lhs.false.7807
  %1859 = load i64, i64* %thrice_byte8_count, align 8
  %1860 = load i64, i64* %nbytes, align 8
  %add7824 = add i64 %1859, %1860
  %cmp7825 = icmp ule i64 %add7824, 9223372036854775807
  br i1 %cmp7825, label %cond.true.7827, label %cond.false.7829

cond.true.7827:                                   ; preds = %cond.false.7823
  %1861 = load i64, i64* %thrice_byte8_count, align 8
  %1862 = load i64, i64* %nbytes, align 8
  %add7828 = add i64 %1861, %1862
  br label %cond.end.7833

cond.false.7829:                                  ; preds = %cond.false.7823
  %1863 = load i64, i64* %thrice_byte8_count, align 8
  %1864 = load i64, i64* %nbytes, align 8
  %add7830 = add i64 %1863, %1864
  %sub7831 = sub i64 %add7830, -9223372036854775808
  %add7832 = add nsw i64 %sub7831, -9223372036854775808
  br label %cond.end.7833

cond.end.7833:                                    ; preds = %cond.false.7829, %cond.true.7827
  %cond7834 = phi i64 [ %add7828, %cond.true.7827 ], [ %add7832, %cond.false.7829 ]
  store i64 %cond7834, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.7835:                                  ; preds = %cond.true.7678
  %1865 = load i64, i64* %nbytes, align 8
  %mul7836 = mul nsw i64 0, %1865
  %1866 = load i64, i64* %thrice_byte8_count, align 8
  %add7837 = add nsw i64 %mul7836, %1866
  %mul7838 = mul nsw i64 0, %add7837
  %sub7839 = sub nsw i64 %mul7838, 1
  %cmp7840 = icmp slt i64 %sub7839, 0
  br i1 %cmp7840, label %cond.true.7842, label %cond.false.7861

cond.true.7842:                                   ; preds = %cond.false.7835
  %1867 = load i64, i64* %nbytes, align 8
  %mul7843 = mul nsw i64 0, %1867
  %1868 = load i64, i64* %thrice_byte8_count, align 8
  %add7844 = add nsw i64 %mul7843, %1868
  %mul7845 = mul nsw i64 0, %add7844
  %add7846 = add nsw i64 %mul7845, 0
  %neg7847 = xor i64 %add7846, -1
  %cmp7848 = icmp eq i64 %neg7847, -1
  %conv7849 = zext i1 %cmp7848 to i32
  %sub7850 = sub nsw i32 0, %conv7849
  %conv7851 = sext i32 %sub7850 to i64
  %1869 = load i64, i64* %nbytes, align 8
  %mul7852 = mul nsw i64 0, %1869
  %1870 = load i64, i64* %thrice_byte8_count, align 8
  %add7853 = add nsw i64 %mul7852, %1870
  %mul7854 = mul nsw i64 0, %add7853
  %add7855 = add nsw i64 %mul7854, 1
  %shl7856 = shl i64 %add7855, 62
  %sub7857 = sub nsw i64 %shl7856, 1
  %mul7858 = mul nsw i64 %sub7857, 2
  %add7859 = add nsw i64 %mul7858, 1
  %sub7860 = sub nsw i64 %conv7851, %add7859
  br label %cond.end.7866

cond.false.7861:                                  ; preds = %cond.false.7835
  %1871 = load i64, i64* %nbytes, align 8
  %mul7862 = mul nsw i64 0, %1871
  %1872 = load i64, i64* %thrice_byte8_count, align 8
  %add7863 = add nsw i64 %mul7862, %1872
  %mul7864 = mul nsw i64 0, %add7863
  %add7865 = add nsw i64 %mul7864, 0
  br label %cond.end.7866

cond.end.7866:                                    ; preds = %cond.false.7861, %cond.true.7842
  %cond7867 = phi i64 [ %sub7860, %cond.true.7842 ], [ %add7865, %cond.false.7861 ]
  %cmp7868 = icmp slt i64 %cond7867, 0
  br i1 %cmp7868, label %cond.true.7870, label %cond.false.7935

cond.true.7870:                                   ; preds = %cond.end.7866
  %1873 = load i64, i64* %nbytes, align 8
  %cmp7871 = icmp slt i64 %1873, 0
  br i1 %cmp7871, label %cond.true.7873, label %cond.false.7909

cond.true.7873:                                   ; preds = %cond.true.7870
  %1874 = load i64, i64* %thrice_byte8_count, align 8
  %1875 = load i64, i64* %nbytes, align 8
  %mul7874 = mul nsw i64 0, %1875
  %1876 = load i64, i64* %thrice_byte8_count, align 8
  %add7875 = add nsw i64 %mul7874, %1876
  %mul7876 = mul nsw i64 0, %add7875
  %sub7877 = sub nsw i64 %mul7876, 1
  %cmp7878 = icmp slt i64 %sub7877, 0
  br i1 %cmp7878, label %cond.true.7880, label %cond.false.7899

cond.true.7880:                                   ; preds = %cond.true.7873
  %1877 = load i64, i64* %nbytes, align 8
  %mul7881 = mul nsw i64 0, %1877
  %1878 = load i64, i64* %thrice_byte8_count, align 8
  %add7882 = add nsw i64 %mul7881, %1878
  %mul7883 = mul nsw i64 0, %add7882
  %add7884 = add nsw i64 %mul7883, 0
  %neg7885 = xor i64 %add7884, -1
  %cmp7886 = icmp eq i64 %neg7885, -1
  %conv7887 = zext i1 %cmp7886 to i32
  %sub7888 = sub nsw i32 0, %conv7887
  %conv7889 = sext i32 %sub7888 to i64
  %1879 = load i64, i64* %nbytes, align 8
  %mul7890 = mul nsw i64 0, %1879
  %1880 = load i64, i64* %thrice_byte8_count, align 8
  %add7891 = add nsw i64 %mul7890, %1880
  %mul7892 = mul nsw i64 0, %add7891
  %add7893 = add nsw i64 %mul7892, 1
  %shl7894 = shl i64 %add7893, 62
  %sub7895 = sub nsw i64 %shl7894, 1
  %mul7896 = mul nsw i64 %sub7895, 2
  %add7897 = add nsw i64 %mul7896, 1
  %sub7898 = sub nsw i64 %conv7889, %add7897
  br label %cond.end.7904

cond.false.7899:                                  ; preds = %cond.true.7873
  %1881 = load i64, i64* %nbytes, align 8
  %mul7900 = mul nsw i64 0, %1881
  %1882 = load i64, i64* %thrice_byte8_count, align 8
  %add7901 = add nsw i64 %mul7900, %1882
  %mul7902 = mul nsw i64 0, %add7901
  %add7903 = add nsw i64 %mul7902, 0
  br label %cond.end.7904

cond.end.7904:                                    ; preds = %cond.false.7899, %cond.true.7880
  %cond7905 = phi i64 [ %sub7898, %cond.true.7880 ], [ %add7903, %cond.false.7899 ]
  %1883 = load i64, i64* %nbytes, align 8
  %sub7906 = sub nsw i64 %cond7905, %1883
  %cmp7907 = icmp slt i64 %1874, %sub7906
  br i1 %cmp7907, label %cond.true.7967, label %lor.lhs.false.7953

cond.false.7909:                                  ; preds = %cond.true.7870
  %1884 = load i64, i64* %nbytes, align 8
  %mul7910 = mul nsw i64 0, %1884
  %1885 = load i64, i64* %thrice_byte8_count, align 8
  %add7911 = add nsw i64 %mul7910, %1885
  %mul7912 = mul nsw i64 0, %add7911
  %sub7913 = sub nsw i64 %mul7912, 1
  %cmp7914 = icmp slt i64 %sub7913, 0
  br i1 %cmp7914, label %cond.true.7916, label %cond.false.7925

cond.true.7916:                                   ; preds = %cond.false.7909
  %1886 = load i64, i64* %nbytes, align 8
  %mul7917 = mul nsw i64 0, %1886
  %1887 = load i64, i64* %thrice_byte8_count, align 8
  %add7918 = add nsw i64 %mul7917, %1887
  %mul7919 = mul nsw i64 0, %add7918
  %add7920 = add nsw i64 %mul7919, 1
  %shl7921 = shl i64 %add7920, 62
  %sub7922 = sub nsw i64 %shl7921, 1
  %mul7923 = mul nsw i64 %sub7922, 2
  %add7924 = add nsw i64 %mul7923, 1
  br label %cond.end.7930

cond.false.7925:                                  ; preds = %cond.false.7909
  %1888 = load i64, i64* %nbytes, align 8
  %mul7926 = mul nsw i64 0, %1888
  %1889 = load i64, i64* %thrice_byte8_count, align 8
  %add7927 = add nsw i64 %mul7926, %1889
  %mul7928 = mul nsw i64 0, %add7927
  %sub7929 = sub nsw i64 %mul7928, 1
  br label %cond.end.7930

cond.end.7930:                                    ; preds = %cond.false.7925, %cond.true.7916
  %cond7931 = phi i64 [ %add7924, %cond.true.7916 ], [ %sub7929, %cond.false.7925 ]
  %1890 = load i64, i64* %nbytes, align 8
  %sub7932 = sub nsw i64 %cond7931, %1890
  %1891 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7933 = icmp slt i64 %sub7932, %1891
  br i1 %cmp7933, label %cond.true.7967, label %lor.lhs.false.7953

cond.false.7935:                                  ; preds = %cond.end.7866
  %1892 = load i64, i64* %thrice_byte8_count, align 8
  %cmp7936 = icmp slt i64 %1892, 0
  br i1 %cmp7936, label %cond.true.7938, label %cond.false.7942

cond.true.7938:                                   ; preds = %cond.false.7935
  %1893 = load i64, i64* %nbytes, align 8
  %1894 = load i64, i64* %thrice_byte8_count, align 8
  %1895 = load i64, i64* %nbytes, align 8
  %add7939 = add nsw i64 %1894, %1895
  %cmp7940 = icmp sle i64 %1893, %add7939
  br i1 %cmp7940, label %cond.true.7967, label %lor.lhs.false.7953

cond.false.7942:                                  ; preds = %cond.false.7935
  %1896 = load i64, i64* %nbytes, align 8
  %cmp7943 = icmp slt i64 %1896, 0
  br i1 %cmp7943, label %cond.true.7945, label %cond.false.7949

cond.true.7945:                                   ; preds = %cond.false.7942
  %1897 = load i64, i64* %thrice_byte8_count, align 8
  %1898 = load i64, i64* %thrice_byte8_count, align 8
  %1899 = load i64, i64* %nbytes, align 8
  %add7946 = add nsw i64 %1898, %1899
  %cmp7947 = icmp sle i64 %1897, %add7946
  br i1 %cmp7947, label %cond.true.7967, label %lor.lhs.false.7953

cond.false.7949:                                  ; preds = %cond.false.7942
  %1900 = load i64, i64* %thrice_byte8_count, align 8
  %1901 = load i64, i64* %nbytes, align 8
  %add7950 = add nsw i64 %1900, %1901
  %1902 = load i64, i64* %nbytes, align 8
  %cmp7951 = icmp slt i64 %add7950, %1902
  br i1 %cmp7951, label %cond.true.7967, label %lor.lhs.false.7953

lor.lhs.false.7953:                               ; preds = %cond.false.7949, %cond.true.7945, %cond.true.7938, %cond.end.7930, %cond.end.7904
  %1903 = load i64, i64* %thrice_byte8_count, align 8
  %1904 = load i64, i64* %nbytes, align 8
  %add7954 = add nsw i64 %1903, %1904
  %mul7955 = mul nsw i64 0, %add7954
  %sub7956 = sub nsw i64 %mul7955, 1
  %cmp7957 = icmp slt i64 %sub7956, 0
  br i1 %cmp7957, label %land.lhs.true.7959, label %lor.lhs.false.7963

land.lhs.true.7959:                               ; preds = %lor.lhs.false.7953
  %1905 = load i64, i64* %thrice_byte8_count, align 8
  %1906 = load i64, i64* %nbytes, align 8
  %add7960 = add nsw i64 %1905, %1906
  %cmp7961 = icmp slt i64 %add7960, -9223372036854775808
  br i1 %cmp7961, label %cond.true.7967, label %lor.lhs.false.7963

lor.lhs.false.7963:                               ; preds = %land.lhs.true.7959, %lor.lhs.false.7953
  %1907 = load i64, i64* %thrice_byte8_count, align 8
  %1908 = load i64, i64* %nbytes, align 8
  %add7964 = add nsw i64 %1907, %1908
  %cmp7965 = icmp slt i64 9223372036854775807, %add7964
  br i1 %cmp7965, label %cond.true.7967, label %cond.false.7979

cond.true.7967:                                   ; preds = %lor.lhs.false.7963, %land.lhs.true.7959, %cond.false.7949, %cond.true.7945, %cond.true.7938, %cond.end.7930, %cond.end.7904
  %1909 = load i64, i64* %thrice_byte8_count, align 8
  %1910 = load i64, i64* %nbytes, align 8
  %add7968 = add i64 %1909, %1910
  %cmp7969 = icmp ule i64 %add7968, 9223372036854775807
  br i1 %cmp7969, label %cond.true.7971, label %cond.false.7973

cond.true.7971:                                   ; preds = %cond.true.7967
  %1911 = load i64, i64* %thrice_byte8_count, align 8
  %1912 = load i64, i64* %nbytes, align 8
  %add7972 = add i64 %1911, %1912
  br label %cond.end.7977

cond.false.7973:                                  ; preds = %cond.true.7967
  %1913 = load i64, i64* %thrice_byte8_count, align 8
  %1914 = load i64, i64* %nbytes, align 8
  %add7974 = add i64 %1913, %1914
  %sub7975 = sub i64 %add7974, -9223372036854775808
  %add7976 = add nsw i64 %sub7975, -9223372036854775808
  br label %cond.end.7977

cond.end.7977:                                    ; preds = %cond.false.7973, %cond.true.7971
  %cond7978 = phi i64 [ %add7972, %cond.true.7971 ], [ %add7976, %cond.false.7973 ]
  store i64 %cond7978, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.7979:                                  ; preds = %lor.lhs.false.7963
  %1915 = load i64, i64* %thrice_byte8_count, align 8
  %1916 = load i64, i64* %nbytes, align 8
  %add7980 = add i64 %1915, %1916
  %cmp7981 = icmp ule i64 %add7980, 9223372036854775807
  br i1 %cmp7981, label %cond.true.7983, label %cond.false.7985

cond.true.7983:                                   ; preds = %cond.false.7979
  %1917 = load i64, i64* %thrice_byte8_count, align 8
  %1918 = load i64, i64* %nbytes, align 8
  %add7984 = add i64 %1917, %1918
  br label %cond.end.7989

cond.false.7985:                                  ; preds = %cond.false.7979
  %1919 = load i64, i64* %thrice_byte8_count, align 8
  %1920 = load i64, i64* %nbytes, align 8
  %add7986 = add i64 %1919, %1920
  %sub7987 = sub i64 %add7986, -9223372036854775808
  %add7988 = add nsw i64 %sub7987, -9223372036854775808
  br label %cond.end.7989

cond.end.7989:                                    ; preds = %cond.false.7985, %cond.true.7983
  %cond7990 = phi i64 [ %add7984, %cond.true.7983 ], [ %add7988, %cond.false.7985 ]
  store i64 %cond7990, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.7991:                                  ; preds = %cond.false.7677
  br i1 false, label %cond.true.7992, label %cond.false.8148

cond.true.7992:                                   ; preds = %cond.false.7991
  %1921 = load i64, i64* %nbytes, align 8
  %mul7993 = mul nsw i64 0, %1921
  %1922 = load i64, i64* %thrice_byte8_count, align 8
  %add7994 = add nsw i64 %mul7993, %1922
  %mul7995 = mul nsw i64 0, %add7994
  %sub7996 = sub nsw i64 %mul7995, 1
  %cmp7997 = icmp slt i64 %sub7996, 0
  br i1 %cmp7997, label %cond.true.7999, label %cond.false.8018

cond.true.7999:                                   ; preds = %cond.true.7992
  %1923 = load i64, i64* %nbytes, align 8
  %mul8000 = mul nsw i64 0, %1923
  %1924 = load i64, i64* %thrice_byte8_count, align 8
  %add8001 = add nsw i64 %mul8000, %1924
  %mul8002 = mul nsw i64 0, %add8001
  %add8003 = add nsw i64 %mul8002, 0
  %neg8004 = xor i64 %add8003, -1
  %cmp8005 = icmp eq i64 %neg8004, -1
  %conv8006 = zext i1 %cmp8005 to i32
  %sub8007 = sub nsw i32 0, %conv8006
  %conv8008 = sext i32 %sub8007 to i64
  %1925 = load i64, i64* %nbytes, align 8
  %mul8009 = mul nsw i64 0, %1925
  %1926 = load i64, i64* %thrice_byte8_count, align 8
  %add8010 = add nsw i64 %mul8009, %1926
  %mul8011 = mul nsw i64 0, %add8010
  %add8012 = add nsw i64 %mul8011, 1
  %shl8013 = shl i64 %add8012, 62
  %sub8014 = sub nsw i64 %shl8013, 1
  %mul8015 = mul nsw i64 %sub8014, 2
  %add8016 = add nsw i64 %mul8015, 1
  %sub8017 = sub nsw i64 %conv8008, %add8016
  br label %cond.end.8023

cond.false.8018:                                  ; preds = %cond.true.7992
  %1927 = load i64, i64* %nbytes, align 8
  %mul8019 = mul nsw i64 0, %1927
  %1928 = load i64, i64* %thrice_byte8_count, align 8
  %add8020 = add nsw i64 %mul8019, %1928
  %mul8021 = mul nsw i64 0, %add8020
  %add8022 = add nsw i64 %mul8021, 0
  br label %cond.end.8023

cond.end.8023:                                    ; preds = %cond.false.8018, %cond.true.7999
  %cond8024 = phi i64 [ %sub8017, %cond.true.7999 ], [ %add8022, %cond.false.8018 ]
  %cmp8025 = icmp slt i64 %cond8024, 0
  br i1 %cmp8025, label %cond.true.8027, label %cond.false.8092

cond.true.8027:                                   ; preds = %cond.end.8023
  %1929 = load i64, i64* %nbytes, align 8
  %cmp8028 = icmp slt i64 %1929, 0
  br i1 %cmp8028, label %cond.true.8030, label %cond.false.8066

cond.true.8030:                                   ; preds = %cond.true.8027
  %1930 = load i64, i64* %thrice_byte8_count, align 8
  %1931 = load i64, i64* %nbytes, align 8
  %mul8031 = mul nsw i64 0, %1931
  %1932 = load i64, i64* %thrice_byte8_count, align 8
  %add8032 = add nsw i64 %mul8031, %1932
  %mul8033 = mul nsw i64 0, %add8032
  %sub8034 = sub nsw i64 %mul8033, 1
  %cmp8035 = icmp slt i64 %sub8034, 0
  br i1 %cmp8035, label %cond.true.8037, label %cond.false.8056

cond.true.8037:                                   ; preds = %cond.true.8030
  %1933 = load i64, i64* %nbytes, align 8
  %mul8038 = mul nsw i64 0, %1933
  %1934 = load i64, i64* %thrice_byte8_count, align 8
  %add8039 = add nsw i64 %mul8038, %1934
  %mul8040 = mul nsw i64 0, %add8039
  %add8041 = add nsw i64 %mul8040, 0
  %neg8042 = xor i64 %add8041, -1
  %cmp8043 = icmp eq i64 %neg8042, -1
  %conv8044 = zext i1 %cmp8043 to i32
  %sub8045 = sub nsw i32 0, %conv8044
  %conv8046 = sext i32 %sub8045 to i64
  %1935 = load i64, i64* %nbytes, align 8
  %mul8047 = mul nsw i64 0, %1935
  %1936 = load i64, i64* %thrice_byte8_count, align 8
  %add8048 = add nsw i64 %mul8047, %1936
  %mul8049 = mul nsw i64 0, %add8048
  %add8050 = add nsw i64 %mul8049, 1
  %shl8051 = shl i64 %add8050, 62
  %sub8052 = sub nsw i64 %shl8051, 1
  %mul8053 = mul nsw i64 %sub8052, 2
  %add8054 = add nsw i64 %mul8053, 1
  %sub8055 = sub nsw i64 %conv8046, %add8054
  br label %cond.end.8061

cond.false.8056:                                  ; preds = %cond.true.8030
  %1937 = load i64, i64* %nbytes, align 8
  %mul8057 = mul nsw i64 0, %1937
  %1938 = load i64, i64* %thrice_byte8_count, align 8
  %add8058 = add nsw i64 %mul8057, %1938
  %mul8059 = mul nsw i64 0, %add8058
  %add8060 = add nsw i64 %mul8059, 0
  br label %cond.end.8061

cond.end.8061:                                    ; preds = %cond.false.8056, %cond.true.8037
  %cond8062 = phi i64 [ %sub8055, %cond.true.8037 ], [ %add8060, %cond.false.8056 ]
  %1939 = load i64, i64* %nbytes, align 8
  %sub8063 = sub nsw i64 %cond8062, %1939
  %cmp8064 = icmp slt i64 %1930, %sub8063
  br i1 %cmp8064, label %cond.true.8124, label %lor.lhs.false.8110

cond.false.8066:                                  ; preds = %cond.true.8027
  %1940 = load i64, i64* %nbytes, align 8
  %mul8067 = mul nsw i64 0, %1940
  %1941 = load i64, i64* %thrice_byte8_count, align 8
  %add8068 = add nsw i64 %mul8067, %1941
  %mul8069 = mul nsw i64 0, %add8068
  %sub8070 = sub nsw i64 %mul8069, 1
  %cmp8071 = icmp slt i64 %sub8070, 0
  br i1 %cmp8071, label %cond.true.8073, label %cond.false.8082

cond.true.8073:                                   ; preds = %cond.false.8066
  %1942 = load i64, i64* %nbytes, align 8
  %mul8074 = mul nsw i64 0, %1942
  %1943 = load i64, i64* %thrice_byte8_count, align 8
  %add8075 = add nsw i64 %mul8074, %1943
  %mul8076 = mul nsw i64 0, %add8075
  %add8077 = add nsw i64 %mul8076, 1
  %shl8078 = shl i64 %add8077, 62
  %sub8079 = sub nsw i64 %shl8078, 1
  %mul8080 = mul nsw i64 %sub8079, 2
  %add8081 = add nsw i64 %mul8080, 1
  br label %cond.end.8087

cond.false.8082:                                  ; preds = %cond.false.8066
  %1944 = load i64, i64* %nbytes, align 8
  %mul8083 = mul nsw i64 0, %1944
  %1945 = load i64, i64* %thrice_byte8_count, align 8
  %add8084 = add nsw i64 %mul8083, %1945
  %mul8085 = mul nsw i64 0, %add8084
  %sub8086 = sub nsw i64 %mul8085, 1
  br label %cond.end.8087

cond.end.8087:                                    ; preds = %cond.false.8082, %cond.true.8073
  %cond8088 = phi i64 [ %add8081, %cond.true.8073 ], [ %sub8086, %cond.false.8082 ]
  %1946 = load i64, i64* %nbytes, align 8
  %sub8089 = sub nsw i64 %cond8088, %1946
  %1947 = load i64, i64* %thrice_byte8_count, align 8
  %cmp8090 = icmp slt i64 %sub8089, %1947
  br i1 %cmp8090, label %cond.true.8124, label %lor.lhs.false.8110

cond.false.8092:                                  ; preds = %cond.end.8023
  %1948 = load i64, i64* %thrice_byte8_count, align 8
  %cmp8093 = icmp slt i64 %1948, 0
  br i1 %cmp8093, label %cond.true.8095, label %cond.false.8099

cond.true.8095:                                   ; preds = %cond.false.8092
  %1949 = load i64, i64* %nbytes, align 8
  %1950 = load i64, i64* %thrice_byte8_count, align 8
  %1951 = load i64, i64* %nbytes, align 8
  %add8096 = add nsw i64 %1950, %1951
  %cmp8097 = icmp sle i64 %1949, %add8096
  br i1 %cmp8097, label %cond.true.8124, label %lor.lhs.false.8110

cond.false.8099:                                  ; preds = %cond.false.8092
  %1952 = load i64, i64* %nbytes, align 8
  %cmp8100 = icmp slt i64 %1952, 0
  br i1 %cmp8100, label %cond.true.8102, label %cond.false.8106

cond.true.8102:                                   ; preds = %cond.false.8099
  %1953 = load i64, i64* %thrice_byte8_count, align 8
  %1954 = load i64, i64* %thrice_byte8_count, align 8
  %1955 = load i64, i64* %nbytes, align 8
  %add8103 = add nsw i64 %1954, %1955
  %cmp8104 = icmp sle i64 %1953, %add8103
  br i1 %cmp8104, label %cond.true.8124, label %lor.lhs.false.8110

cond.false.8106:                                  ; preds = %cond.false.8099
  %1956 = load i64, i64* %thrice_byte8_count, align 8
  %1957 = load i64, i64* %nbytes, align 8
  %add8107 = add nsw i64 %1956, %1957
  %1958 = load i64, i64* %nbytes, align 8
  %cmp8108 = icmp slt i64 %add8107, %1958
  br i1 %cmp8108, label %cond.true.8124, label %lor.lhs.false.8110

lor.lhs.false.8110:                               ; preds = %cond.false.8106, %cond.true.8102, %cond.true.8095, %cond.end.8087, %cond.end.8061
  %1959 = load i64, i64* %thrice_byte8_count, align 8
  %1960 = load i64, i64* %nbytes, align 8
  %add8111 = add nsw i64 %1959, %1960
  %mul8112 = mul nsw i64 0, %add8111
  %sub8113 = sub nsw i64 %mul8112, 1
  %cmp8114 = icmp slt i64 %sub8113, 0
  br i1 %cmp8114, label %land.lhs.true.8116, label %lor.lhs.false.8120

land.lhs.true.8116:                               ; preds = %lor.lhs.false.8110
  %1961 = load i64, i64* %thrice_byte8_count, align 8
  %1962 = load i64, i64* %nbytes, align 8
  %add8117 = add nsw i64 %1961, %1962
  %cmp8118 = icmp slt i64 %add8117, -9223372036854775808
  br i1 %cmp8118, label %cond.true.8124, label %lor.lhs.false.8120

lor.lhs.false.8120:                               ; preds = %land.lhs.true.8116, %lor.lhs.false.8110
  %1963 = load i64, i64* %thrice_byte8_count, align 8
  %1964 = load i64, i64* %nbytes, align 8
  %add8121 = add nsw i64 %1963, %1964
  %cmp8122 = icmp slt i64 9223372036854775807, %add8121
  br i1 %cmp8122, label %cond.true.8124, label %cond.false.8136

cond.true.8124:                                   ; preds = %lor.lhs.false.8120, %land.lhs.true.8116, %cond.false.8106, %cond.true.8102, %cond.true.8095, %cond.end.8087, %cond.end.8061
  %1965 = load i64, i64* %thrice_byte8_count, align 8
  %1966 = load i64, i64* %nbytes, align 8
  %add8125 = add i64 %1965, %1966
  %cmp8126 = icmp ule i64 %add8125, 9223372036854775807
  br i1 %cmp8126, label %cond.true.8128, label %cond.false.8130

cond.true.8128:                                   ; preds = %cond.true.8124
  %1967 = load i64, i64* %thrice_byte8_count, align 8
  %1968 = load i64, i64* %nbytes, align 8
  %add8129 = add i64 %1967, %1968
  br label %cond.end.8134

cond.false.8130:                                  ; preds = %cond.true.8124
  %1969 = load i64, i64* %thrice_byte8_count, align 8
  %1970 = load i64, i64* %nbytes, align 8
  %add8131 = add i64 %1969, %1970
  %sub8132 = sub i64 %add8131, -9223372036854775808
  %add8133 = add nsw i64 %sub8132, -9223372036854775808
  br label %cond.end.8134

cond.end.8134:                                    ; preds = %cond.false.8130, %cond.true.8128
  %cond8135 = phi i64 [ %add8129, %cond.true.8128 ], [ %add8133, %cond.false.8130 ]
  store i64 %cond8135, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.8136:                                  ; preds = %lor.lhs.false.8120
  %1971 = load i64, i64* %thrice_byte8_count, align 8
  %1972 = load i64, i64* %nbytes, align 8
  %add8137 = add i64 %1971, %1972
  %cmp8138 = icmp ule i64 %add8137, 9223372036854775807
  br i1 %cmp8138, label %cond.true.8140, label %cond.false.8142

cond.true.8140:                                   ; preds = %cond.false.8136
  %1973 = load i64, i64* %thrice_byte8_count, align 8
  %1974 = load i64, i64* %nbytes, align 8
  %add8141 = add i64 %1973, %1974
  br label %cond.end.8146

cond.false.8142:                                  ; preds = %cond.false.8136
  %1975 = load i64, i64* %thrice_byte8_count, align 8
  %1976 = load i64, i64* %nbytes, align 8
  %add8143 = add i64 %1975, %1976
  %sub8144 = sub i64 %add8143, -9223372036854775808
  %add8145 = add nsw i64 %sub8144, -9223372036854775808
  br label %cond.end.8146

cond.end.8146:                                    ; preds = %cond.false.8142, %cond.true.8140
  %cond8147 = phi i64 [ %add8141, %cond.true.8140 ], [ %add8145, %cond.false.8142 ]
  store i64 %cond8147, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

cond.false.8148:                                  ; preds = %cond.false.7991
  %1977 = load i64, i64* %nbytes, align 8
  %mul8149 = mul nsw i64 0, %1977
  %1978 = load i64, i64* %thrice_byte8_count, align 8
  %add8150 = add nsw i64 %mul8149, %1978
  %mul8151 = mul nsw i64 0, %add8150
  %sub8152 = sub nsw i64 %mul8151, 1
  %cmp8153 = icmp slt i64 %sub8152, 0
  br i1 %cmp8153, label %cond.true.8155, label %cond.false.8174

cond.true.8155:                                   ; preds = %cond.false.8148
  %1979 = load i64, i64* %nbytes, align 8
  %mul8156 = mul nsw i64 0, %1979
  %1980 = load i64, i64* %thrice_byte8_count, align 8
  %add8157 = add nsw i64 %mul8156, %1980
  %mul8158 = mul nsw i64 0, %add8157
  %add8159 = add nsw i64 %mul8158, 0
  %neg8160 = xor i64 %add8159, -1
  %cmp8161 = icmp eq i64 %neg8160, -1
  %conv8162 = zext i1 %cmp8161 to i32
  %sub8163 = sub nsw i32 0, %conv8162
  %conv8164 = sext i32 %sub8163 to i64
  %1981 = load i64, i64* %nbytes, align 8
  %mul8165 = mul nsw i64 0, %1981
  %1982 = load i64, i64* %thrice_byte8_count, align 8
  %add8166 = add nsw i64 %mul8165, %1982
  %mul8167 = mul nsw i64 0, %add8166
  %add8168 = add nsw i64 %mul8167, 1
  %shl8169 = shl i64 %add8168, 62
  %sub8170 = sub nsw i64 %shl8169, 1
  %mul8171 = mul nsw i64 %sub8170, 2
  %add8172 = add nsw i64 %mul8171, 1
  %sub8173 = sub nsw i64 %conv8164, %add8172
  br label %cond.end.8179

cond.false.8174:                                  ; preds = %cond.false.8148
  %1983 = load i64, i64* %nbytes, align 8
  %mul8175 = mul nsw i64 0, %1983
  %1984 = load i64, i64* %thrice_byte8_count, align 8
  %add8176 = add nsw i64 %mul8175, %1984
  %mul8177 = mul nsw i64 0, %add8176
  %add8178 = add nsw i64 %mul8177, 0
  br label %cond.end.8179

cond.end.8179:                                    ; preds = %cond.false.8174, %cond.true.8155
  %cond8180 = phi i64 [ %sub8173, %cond.true.8155 ], [ %add8178, %cond.false.8174 ]
  %cmp8181 = icmp slt i64 %cond8180, 0
  br i1 %cmp8181, label %cond.true.8183, label %cond.false.8248

cond.true.8183:                                   ; preds = %cond.end.8179
  %1985 = load i64, i64* %nbytes, align 8
  %cmp8184 = icmp slt i64 %1985, 0
  br i1 %cmp8184, label %cond.true.8186, label %cond.false.8222

cond.true.8186:                                   ; preds = %cond.true.8183
  %1986 = load i64, i64* %thrice_byte8_count, align 8
  %1987 = load i64, i64* %nbytes, align 8
  %mul8187 = mul nsw i64 0, %1987
  %1988 = load i64, i64* %thrice_byte8_count, align 8
  %add8188 = add nsw i64 %mul8187, %1988
  %mul8189 = mul nsw i64 0, %add8188
  %sub8190 = sub nsw i64 %mul8189, 1
  %cmp8191 = icmp slt i64 %sub8190, 0
  br i1 %cmp8191, label %cond.true.8193, label %cond.false.8212

cond.true.8193:                                   ; preds = %cond.true.8186
  %1989 = load i64, i64* %nbytes, align 8
  %mul8194 = mul nsw i64 0, %1989
  %1990 = load i64, i64* %thrice_byte8_count, align 8
  %add8195 = add nsw i64 %mul8194, %1990
  %mul8196 = mul nsw i64 0, %add8195
  %add8197 = add nsw i64 %mul8196, 0
  %neg8198 = xor i64 %add8197, -1
  %cmp8199 = icmp eq i64 %neg8198, -1
  %conv8200 = zext i1 %cmp8199 to i32
  %sub8201 = sub nsw i32 0, %conv8200
  %conv8202 = sext i32 %sub8201 to i64
  %1991 = load i64, i64* %nbytes, align 8
  %mul8203 = mul nsw i64 0, %1991
  %1992 = load i64, i64* %thrice_byte8_count, align 8
  %add8204 = add nsw i64 %mul8203, %1992
  %mul8205 = mul nsw i64 0, %add8204
  %add8206 = add nsw i64 %mul8205, 1
  %shl8207 = shl i64 %add8206, 62
  %sub8208 = sub nsw i64 %shl8207, 1
  %mul8209 = mul nsw i64 %sub8208, 2
  %add8210 = add nsw i64 %mul8209, 1
  %sub8211 = sub nsw i64 %conv8202, %add8210
  br label %cond.end.8217

cond.false.8212:                                  ; preds = %cond.true.8186
  %1993 = load i64, i64* %nbytes, align 8
  %mul8213 = mul nsw i64 0, %1993
  %1994 = load i64, i64* %thrice_byte8_count, align 8
  %add8214 = add nsw i64 %mul8213, %1994
  %mul8215 = mul nsw i64 0, %add8214
  %add8216 = add nsw i64 %mul8215, 0
  br label %cond.end.8217

cond.end.8217:                                    ; preds = %cond.false.8212, %cond.true.8193
  %cond8218 = phi i64 [ %sub8211, %cond.true.8193 ], [ %add8216, %cond.false.8212 ]
  %1995 = load i64, i64* %nbytes, align 8
  %sub8219 = sub nsw i64 %cond8218, %1995
  %cmp8220 = icmp slt i64 %1986, %sub8219
  br i1 %cmp8220, label %cond.true.8280, label %lor.lhs.false.8266

cond.false.8222:                                  ; preds = %cond.true.8183
  %1996 = load i64, i64* %nbytes, align 8
  %mul8223 = mul nsw i64 0, %1996
  %1997 = load i64, i64* %thrice_byte8_count, align 8
  %add8224 = add nsw i64 %mul8223, %1997
  %mul8225 = mul nsw i64 0, %add8224
  %sub8226 = sub nsw i64 %mul8225, 1
  %cmp8227 = icmp slt i64 %sub8226, 0
  br i1 %cmp8227, label %cond.true.8229, label %cond.false.8238

cond.true.8229:                                   ; preds = %cond.false.8222
  %1998 = load i64, i64* %nbytes, align 8
  %mul8230 = mul nsw i64 0, %1998
  %1999 = load i64, i64* %thrice_byte8_count, align 8
  %add8231 = add nsw i64 %mul8230, %1999
  %mul8232 = mul nsw i64 0, %add8231
  %add8233 = add nsw i64 %mul8232, 1
  %shl8234 = shl i64 %add8233, 62
  %sub8235 = sub nsw i64 %shl8234, 1
  %mul8236 = mul nsw i64 %sub8235, 2
  %add8237 = add nsw i64 %mul8236, 1
  br label %cond.end.8243

cond.false.8238:                                  ; preds = %cond.false.8222
  %2000 = load i64, i64* %nbytes, align 8
  %mul8239 = mul nsw i64 0, %2000
  %2001 = load i64, i64* %thrice_byte8_count, align 8
  %add8240 = add nsw i64 %mul8239, %2001
  %mul8241 = mul nsw i64 0, %add8240
  %sub8242 = sub nsw i64 %mul8241, 1
  br label %cond.end.8243

cond.end.8243:                                    ; preds = %cond.false.8238, %cond.true.8229
  %cond8244 = phi i64 [ %add8237, %cond.true.8229 ], [ %sub8242, %cond.false.8238 ]
  %2002 = load i64, i64* %nbytes, align 8
  %sub8245 = sub nsw i64 %cond8244, %2002
  %2003 = load i64, i64* %thrice_byte8_count, align 8
  %cmp8246 = icmp slt i64 %sub8245, %2003
  br i1 %cmp8246, label %cond.true.8280, label %lor.lhs.false.8266

cond.false.8248:                                  ; preds = %cond.end.8179
  %2004 = load i64, i64* %thrice_byte8_count, align 8
  %cmp8249 = icmp slt i64 %2004, 0
  br i1 %cmp8249, label %cond.true.8251, label %cond.false.8255

cond.true.8251:                                   ; preds = %cond.false.8248
  %2005 = load i64, i64* %nbytes, align 8
  %2006 = load i64, i64* %thrice_byte8_count, align 8
  %2007 = load i64, i64* %nbytes, align 8
  %add8252 = add nsw i64 %2006, %2007
  %cmp8253 = icmp sle i64 %2005, %add8252
  br i1 %cmp8253, label %cond.true.8280, label %lor.lhs.false.8266

cond.false.8255:                                  ; preds = %cond.false.8248
  %2008 = load i64, i64* %nbytes, align 8
  %cmp8256 = icmp slt i64 %2008, 0
  br i1 %cmp8256, label %cond.true.8258, label %cond.false.8262

cond.true.8258:                                   ; preds = %cond.false.8255
  %2009 = load i64, i64* %thrice_byte8_count, align 8
  %2010 = load i64, i64* %thrice_byte8_count, align 8
  %2011 = load i64, i64* %nbytes, align 8
  %add8259 = add nsw i64 %2010, %2011
  %cmp8260 = icmp sle i64 %2009, %add8259
  br i1 %cmp8260, label %cond.true.8280, label %lor.lhs.false.8266

cond.false.8262:                                  ; preds = %cond.false.8255
  %2012 = load i64, i64* %thrice_byte8_count, align 8
  %2013 = load i64, i64* %nbytes, align 8
  %add8263 = add nsw i64 %2012, %2013
  %2014 = load i64, i64* %nbytes, align 8
  %cmp8264 = icmp slt i64 %add8263, %2014
  br i1 %cmp8264, label %cond.true.8280, label %lor.lhs.false.8266

lor.lhs.false.8266:                               ; preds = %cond.false.8262, %cond.true.8258, %cond.true.8251, %cond.end.8243, %cond.end.8217
  %2015 = load i64, i64* %thrice_byte8_count, align 8
  %2016 = load i64, i64* %nbytes, align 8
  %add8267 = add nsw i64 %2015, %2016
  %mul8268 = mul nsw i64 0, %add8267
  %sub8269 = sub nsw i64 %mul8268, 1
  %cmp8270 = icmp slt i64 %sub8269, 0
  br i1 %cmp8270, label %land.lhs.true.8272, label %lor.lhs.false.8276

land.lhs.true.8272:                               ; preds = %lor.lhs.false.8266
  %2017 = load i64, i64* %thrice_byte8_count, align 8
  %2018 = load i64, i64* %nbytes, align 8
  %add8273 = add nsw i64 %2017, %2018
  %cmp8274 = icmp slt i64 %add8273, -9223372036854775808
  br i1 %cmp8274, label %cond.true.8280, label %lor.lhs.false.8276

lor.lhs.false.8276:                               ; preds = %land.lhs.true.8272, %lor.lhs.false.8266
  %2019 = load i64, i64* %thrice_byte8_count, align 8
  %2020 = load i64, i64* %nbytes, align 8
  %add8277 = add nsw i64 %2019, %2020
  %cmp8278 = icmp slt i64 9223372036854775807, %add8277
  br i1 %cmp8278, label %cond.true.8280, label %cond.false.8292

cond.true.8280:                                   ; preds = %lor.lhs.false.8276, %land.lhs.true.8272, %cond.false.8262, %cond.true.8258, %cond.true.8251, %cond.end.8243, %cond.end.8217
  %2021 = load i64, i64* %thrice_byte8_count, align 8
  %2022 = load i64, i64* %nbytes, align 8
  %add8281 = add i64 %2021, %2022
  %cmp8282 = icmp ule i64 %add8281, 9223372036854775807
  br i1 %cmp8282, label %cond.true.8284, label %cond.false.8286

cond.true.8284:                                   ; preds = %cond.true.8280
  %2023 = load i64, i64* %thrice_byte8_count, align 8
  %2024 = load i64, i64* %nbytes, align 8
  %add8285 = add i64 %2023, %2024
  br label %cond.end.8290

cond.false.8286:                                  ; preds = %cond.true.8280
  %2025 = load i64, i64* %thrice_byte8_count, align 8
  %2026 = load i64, i64* %nbytes, align 8
  %add8287 = add i64 %2025, %2026
  %sub8288 = sub i64 %add8287, -9223372036854775808
  %add8289 = add nsw i64 %sub8288, -9223372036854775808
  br label %cond.end.8290

cond.end.8290:                                    ; preds = %cond.false.8286, %cond.true.8284
  %cond8291 = phi i64 [ %add8285, %cond.true.8284 ], [ %add8289, %cond.false.8286 ]
  store i64 %cond8291, i64* %uninit_nbytes, align 8
  br i1 true, label %if.then.8304, label %if.end.8305

cond.false.8292:                                  ; preds = %lor.lhs.false.8276
  %2027 = load i64, i64* %thrice_byte8_count, align 8
  %2028 = load i64, i64* %nbytes, align 8
  %add8293 = add i64 %2027, %2028
  %cmp8294 = icmp ule i64 %add8293, 9223372036854775807
  br i1 %cmp8294, label %cond.true.8296, label %cond.false.8298

cond.true.8296:                                   ; preds = %cond.false.8292
  %2029 = load i64, i64* %thrice_byte8_count, align 8
  %2030 = load i64, i64* %nbytes, align 8
  %add8297 = add i64 %2029, %2030
  br label %cond.end.8302

cond.false.8298:                                  ; preds = %cond.false.8292
  %2031 = load i64, i64* %thrice_byte8_count, align 8
  %2032 = load i64, i64* %nbytes, align 8
  %add8299 = add i64 %2031, %2032
  %sub8300 = sub i64 %add8299, -9223372036854775808
  %add8301 = add nsw i64 %sub8300, -9223372036854775808
  br label %cond.end.8302

cond.end.8302:                                    ; preds = %cond.false.8298, %cond.true.8296
  %cond8303 = phi i64 [ %add8297, %cond.true.8296 ], [ %add8301, %cond.false.8298 ]
  store i64 %cond8303, i64* %uninit_nbytes, align 8
  br i1 false, label %if.then.8304, label %if.end.8305

if.then.8304:                                     ; preds = %cond.end.8302, %cond.end.8290, %cond.end.8146, %cond.end.8134, %cond.end.7989, %cond.end.7977, %cond.end.7833, %cond.end.7821, %cond.end.7674, %cond.end.7655, %cond.end.7504, %cond.end.7485, %cond.end.7290, %cond.end.7261, %cond.end.7100, %cond.end.7071, %cond.end.6822, %cond.end.6793, %cond.end.6632, %cond.end.6603
  call void @string_overflow() #7
  unreachable

if.end.8305:                                      ; preds = %cond.end.8302, %cond.end.8290, %cond.end.8146, %cond.end.8134, %cond.end.7989, %cond.end.7977, %cond.end.7833, %cond.end.7821, %cond.end.7674, %cond.end.7655, %cond.end.7504, %cond.end.7485, %cond.end.7290, %cond.end.7261, %cond.end.7100, %cond.end.7071, %cond.end.6822, %cond.end.6793, %cond.end.6632, %cond.end.6603
  %2033 = load i64, i64* %uninit_nbytes, align 8
  %call8306 = call i64 @make_uninit_string(i64 %2033)
  store i64 %call8306, i64* %val, align 8
  br label %if.end.8307

if.end.8307:                                      ; preds = %if.end.8305, %if.end.6356
  %2034 = load i64, i64* %string.addr, align 8
  %call8308 = call i8* @SDATA(i64 %2034)
  store i8* %call8308, i8** %src, align 8
  %2035 = load i8*, i8** %src, align 8
  %2036 = load i64, i64* %nbytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2035, i64 %2036
  store i8* %add.ptr, i8** %src_end, align 8
  %2037 = load i64, i64* %val, align 8
  %call8309 = call i8* @SDATA(i64 %2037)
  store i8* %call8309, i8** %dst, align 8
  %2038 = load i8, i8* %multibyte, align 1
  %tobool8310 = trunc i8 %2038 to i1
  br i1 %tobool8310, label %if.then.8311, label %if.else.8413

if.then.8311:                                     ; preds = %if.end.8307
  br label %while.cond

while.cond:                                       ; preds = %if.end.8411, %if.then.8311
  %2039 = load i8*, i8** %src, align 8
  %2040 = load i8*, i8** %src_end, align 8
  %cmp8312 = icmp ult i8* %2039, %2040
  br i1 %cmp8312, label %while.body, label %while.end.8412

while.body:                                       ; preds = %while.cond
  %2041 = load i8*, i8** %src, align 8
  %2042 = load i8, i8* %2041, align 1
  %conv8314 = zext i8 %2042 to i32
  store i32 %conv8314, i32* %c, align 4
  %2043 = load i32, i32* %c, align 4
  %and = and i32 %2043, 128
  %tobool8315 = icmp ne i32 %and, 0
  br i1 %tobool8315, label %cond.false.8317, label %cond.true.8316

cond.true.8316:                                   ; preds = %while.body
  br label %cond.end.8333

cond.false.8317:                                  ; preds = %while.body
  %2044 = load i32, i32* %c, align 4
  %and8318 = and i32 %2044, 32
  %tobool8319 = icmp ne i32 %and8318, 0
  br i1 %tobool8319, label %cond.false.8321, label %cond.true.8320

cond.true.8320:                                   ; preds = %cond.false.8317
  br label %cond.end.8331

cond.false.8321:                                  ; preds = %cond.false.8317
  %2045 = load i32, i32* %c, align 4
  %and8322 = and i32 %2045, 16
  %tobool8323 = icmp ne i32 %and8322, 0
  br i1 %tobool8323, label %cond.false.8325, label %cond.true.8324

cond.true.8324:                                   ; preds = %cond.false.8321
  br label %cond.end.8329

cond.false.8325:                                  ; preds = %cond.false.8321
  %2046 = load i32, i32* %c, align 4
  %and8326 = and i32 %2046, 8
  %tobool8327 = icmp ne i32 %and8326, 0
  %lnot = xor i1 %tobool8327, true
  %cond8328 = select i1 %lnot, i32 4, i32 5
  br label %cond.end.8329

cond.end.8329:                                    ; preds = %cond.false.8325, %cond.true.8324
  %cond8330 = phi i32 [ 3, %cond.true.8324 ], [ %cond8328, %cond.false.8325 ]
  br label %cond.end.8331

cond.end.8331:                                    ; preds = %cond.end.8329, %cond.true.8320
  %cond8332 = phi i32 [ 2, %cond.true.8320 ], [ %cond8330, %cond.end.8329 ]
  br label %cond.end.8333

cond.end.8333:                                    ; preds = %cond.end.8331, %cond.true.8316
  %cond8334 = phi i32 [ 1, %cond.true.8316 ], [ %cond8332, %cond.end.8331 ]
  store i32 %cond8334, i32* %len, align 4
  %2047 = load i32, i32* %c, align 4
  %cmp8335 = icmp eq i32 %2047, 192
  br i1 %cmp8335, label %if.then.8340, label %lor.lhs.false.8337

lor.lhs.false.8337:                               ; preds = %cond.end.8333
  %2048 = load i32, i32* %c, align 4
  %cmp8338 = icmp eq i32 %2048, 193
  br i1 %cmp8338, label %if.then.8340, label %if.else.8405

if.then.8340:                                     ; preds = %lor.lhs.false.8337, %cond.end.8333
  %2049 = load i8*, i8** %src, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2049, i64 0
  %2050 = load i8, i8* %arrayidx, align 1
  %conv8341 = zext i8 %2050 to i32
  %and8342 = and i32 %conv8341, 128
  %tobool8343 = icmp ne i32 %and8342, 0
  br i1 %tobool8343, label %cond.false.8346, label %cond.true.8344

cond.true.8344:                                   ; preds = %if.then.8340
  %2051 = load i8*, i8** %src, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2051, i32 1
  store i8* %incdec.ptr, i8** %src, align 8
  %2052 = load i8, i8* %2051, align 1
  %conv8345 = zext i8 %2052 to i32
  br label %cond.end.8392

cond.false.8346:                                  ; preds = %if.then.8340
  %2053 = load i8*, i8** %src, align 8
  %arrayidx8347 = getelementptr inbounds i8, i8* %2053, i64 0
  %2054 = load i8, i8* %arrayidx8347, align 1
  %conv8348 = zext i8 %2054 to i32
  %and8349 = and i32 %conv8348, 32
  %tobool8350 = icmp ne i32 %and8349, 0
  br i1 %tobool8350, label %cond.false.8366, label %cond.true.8351

cond.true.8351:                                   ; preds = %cond.false.8346
  %2055 = load i8*, i8** %src, align 8
  %add.ptr8352 = getelementptr inbounds i8, i8* %2055, i64 2
  store i8* %add.ptr8352, i8** %src, align 8
  %2056 = load i8*, i8** %src, align 8
  %arrayidx8353 = getelementptr inbounds i8, i8* %2056, i64 -2
  %2057 = load i8, i8* %arrayidx8353, align 1
  %conv8354 = zext i8 %2057 to i32
  %and8355 = and i32 %conv8354, 31
  %shl8356 = shl i32 %and8355, 6
  %2058 = load i8*, i8** %src, align 8
  %arrayidx8357 = getelementptr inbounds i8, i8* %2058, i64 -1
  %2059 = load i8, i8* %arrayidx8357, align 1
  %conv8358 = zext i8 %2059 to i32
  %and8359 = and i32 %conv8358, 63
  %or = or i32 %shl8356, %and8359
  %2060 = load i8*, i8** %src, align 8
  %arrayidx8360 = getelementptr inbounds i8, i8* %2060, i64 -2
  %2061 = load i8, i8* %arrayidx8360, align 1
  %conv8361 = zext i8 %2061 to i32
  %cmp8362 = icmp slt i32 %conv8361, 194
  %cond8364 = select i1 %cmp8362, i32 4194176, i32 0
  %or8365 = or i32 %or, %cond8364
  br label %cond.end.8390

cond.false.8366:                                  ; preds = %cond.false.8346
  %2062 = load i8*, i8** %src, align 8
  %arrayidx8367 = getelementptr inbounds i8, i8* %2062, i64 0
  %2063 = load i8, i8* %arrayidx8367, align 1
  %conv8368 = zext i8 %2063 to i32
  %and8369 = and i32 %conv8368, 16
  %tobool8370 = icmp ne i32 %and8369, 0
  br i1 %tobool8370, label %cond.false.8386, label %cond.true.8371

cond.true.8371:                                   ; preds = %cond.false.8366
  %2064 = load i8*, i8** %src, align 8
  %add.ptr8372 = getelementptr inbounds i8, i8* %2064, i64 3
  store i8* %add.ptr8372, i8** %src, align 8
  %2065 = load i8*, i8** %src, align 8
  %arrayidx8373 = getelementptr inbounds i8, i8* %2065, i64 -3
  %2066 = load i8, i8* %arrayidx8373, align 1
  %conv8374 = zext i8 %2066 to i32
  %and8375 = and i32 %conv8374, 15
  %shl8376 = shl i32 %and8375, 12
  %2067 = load i8*, i8** %src, align 8
  %arrayidx8377 = getelementptr inbounds i8, i8* %2067, i64 -2
  %2068 = load i8, i8* %arrayidx8377, align 1
  %conv8378 = zext i8 %2068 to i32
  %and8379 = and i32 %conv8378, 63
  %shl8380 = shl i32 %and8379, 6
  %or8381 = or i32 %shl8376, %shl8380
  %2069 = load i8*, i8** %src, align 8
  %arrayidx8382 = getelementptr inbounds i8, i8* %2069, i64 -1
  %2070 = load i8, i8* %arrayidx8382, align 1
  %conv8383 = zext i8 %2070 to i32
  %and8384 = and i32 %conv8383, 63
  %or8385 = or i32 %or8381, %and8384
  br label %cond.end.8388

cond.false.8386:                                  ; preds = %cond.false.8366
  %2071 = load i8*, i8** %src, align 8
  %call8387 = call i32 @string_char(i8* %2071, i8** %src, i32* null)
  br label %cond.end.8388

cond.end.8388:                                    ; preds = %cond.false.8386, %cond.true.8371
  %cond8389 = phi i32 [ %or8385, %cond.true.8371 ], [ %call8387, %cond.false.8386 ]
  br label %cond.end.8390

cond.end.8390:                                    ; preds = %cond.end.8388, %cond.true.8351
  %cond8391 = phi i32 [ %or8365, %cond.true.8351 ], [ %cond8389, %cond.end.8388 ]
  br label %cond.end.8392

cond.end.8392:                                    ; preds = %cond.end.8390, %cond.true.8344
  %cond8393 = phi i32 [ %conv8345, %cond.true.8344 ], [ %cond8391, %cond.end.8390 ]
  store i32 %cond8393, i32* %c, align 4
  %2072 = load i32, i32* %c, align 4
  %cmp8394 = icmp sgt i32 %2072, 4194175
  br i1 %cmp8394, label %cond.true.8396, label %cond.false.8398

cond.true.8396:                                   ; preds = %cond.end.8392
  %2073 = load i32, i32* %c, align 4
  %sub8397 = sub nsw i32 %2073, 4194048
  br label %cond.end.8400

cond.false.8398:                                  ; preds = %cond.end.8392
  %2074 = load i32, i32* %c, align 4
  %and8399 = and i32 %2074, 255
  br label %cond.end.8400

cond.end.8400:                                    ; preds = %cond.false.8398, %cond.true.8396
  %cond8401 = phi i32 [ %sub8397, %cond.true.8396 ], [ %and8399, %cond.false.8398 ]
  store i32 %cond8401, i32* %c, align 4
  %2075 = load i8*, i8** %dst, align 8
  %2076 = load i32, i32* %c, align 4
  %add8402 = add i32 %2076, 0
  %call8403 = call i32 (i8*, i8*, ...) @sprintf(i8* %2075, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 %add8402) #4
  %2077 = load i8*, i8** %dst, align 8
  %idx.ext = sext i32 %call8403 to i64
  %add.ptr8404 = getelementptr inbounds i8, i8* %2077, i64 %idx.ext
  store i8* %add.ptr8404, i8** %dst, align 8
  br label %if.end.8411

if.else.8405:                                     ; preds = %lor.lhs.false.8337
  br label %while.cond.8406

while.cond.8406:                                  ; preds = %while.body.8408, %if.else.8405
  %2078 = load i32, i32* %len, align 4
  %dec = add nsw i32 %2078, -1
  store i32 %dec, i32* %len, align 4
  %tobool8407 = icmp ne i32 %2078, 0
  br i1 %tobool8407, label %while.body.8408, label %while.end

while.body.8408:                                  ; preds = %while.cond.8406
  %2079 = load i8*, i8** %src, align 8
  %incdec.ptr8409 = getelementptr inbounds i8, i8* %2079, i32 1
  store i8* %incdec.ptr8409, i8** %src, align 8
  %2080 = load i8, i8* %2079, align 1
  %2081 = load i8*, i8** %dst, align 8
  %incdec.ptr8410 = getelementptr inbounds i8, i8* %2081, i32 1
  store i8* %incdec.ptr8410, i8** %dst, align 8
  store i8 %2080, i8* %2081, align 1
  br label %while.cond.8406

while.end:                                        ; preds = %while.cond.8406
  br label %if.end.8411

if.end.8411:                                      ; preds = %while.end, %cond.end.8400
  br label %while.cond

while.end.8412:                                   ; preds = %while.cond
  br label %if.end.8432

if.else.8413:                                     ; preds = %if.end.8307
  br label %while.cond.8414

while.cond.8414:                                  ; preds = %if.end.8430, %if.else.8413
  %2082 = load i8*, i8** %src, align 8
  %2083 = load i8*, i8** %src_end, align 8
  %cmp8415 = icmp ult i8* %2082, %2083
  br i1 %cmp8415, label %while.body.8417, label %while.end.8431

while.body.8417:                                  ; preds = %while.cond.8414
  %2084 = load i8*, i8** %src, align 8
  %incdec.ptr8418 = getelementptr inbounds i8, i8* %2084, i32 1
  store i8* %incdec.ptr8418, i8** %src, align 8
  %2085 = load i8, i8* %2084, align 1
  %conv8419 = zext i8 %2085 to i32
  store i32 %conv8419, i32* %c, align 4
  %2086 = load i32, i32* %c, align 4
  %cmp8420 = icmp sge i32 %2086, 128
  br i1 %cmp8420, label %if.then.8422, label %if.else.8427

if.then.8422:                                     ; preds = %while.body.8417
  %2087 = load i8*, i8** %dst, align 8
  %2088 = load i32, i32* %c, align 4
  %add8423 = add i32 %2088, 0
  %call8424 = call i32 (i8*, i8*, ...) @sprintf(i8* %2087, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 %add8423) #4
  %2089 = load i8*, i8** %dst, align 8
  %idx.ext8425 = sext i32 %call8424 to i64
  %add.ptr8426 = getelementptr inbounds i8, i8* %2089, i64 %idx.ext8425
  store i8* %add.ptr8426, i8** %dst, align 8
  br label %if.end.8430

if.else.8427:                                     ; preds = %while.body.8417
  %2090 = load i32, i32* %c, align 4
  %conv8428 = trunc i32 %2090 to i8
  %2091 = load i8*, i8** %dst, align 8
  %incdec.ptr8429 = getelementptr inbounds i8, i8* %2091, i32 1
  store i8* %incdec.ptr8429, i8** %dst, align 8
  store i8 %conv8428, i8* %2091, align 1
  br label %if.end.8430

if.end.8430:                                      ; preds = %if.else.8427, %if.then.8422
  br label %while.cond.8414

while.end.8431:                                   ; preds = %while.cond.8414
  br label %if.end.8432

if.end.8432:                                      ; preds = %while.end.8431, %while.end.8412
  %2092 = load i64, i64* %val, align 8
  store i64 %2092, i64* %retval
  br label %return

return:                                           ; preds = %if.end.8432, %if.then.5, %if.then
  %2093 = load i64, i64* %retval
  ret i64 %2093
}

declare zeroext i1 @STRING_MULTIBYTE(i64) #3

; Function Attrs: nounwind uwtable
define internal i64 @string_count_byte8(i64 %string) #1 {
entry:
  %string.addr = alloca i64, align 8
  %multibyte = alloca i8, align 1
  %nbytes = alloca i64, align 8
  %p = alloca i8*, align 8
  %pend = alloca i8*, align 8
  %count = alloca i64, align 8
  %c = alloca i32, align 4
  %len = alloca i32, align 4
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %call = call zeroext i1 @STRING_MULTIBYTE(i64 %0)
  %frombool = zext i1 %call to i8
  store i8 %frombool, i8* %multibyte, align 1
  %1 = load i64, i64* %string.addr, align 8
  %call1 = call i64 @SBYTES(i64 %1)
  store i64 %call1, i64* %nbytes, align 8
  %2 = load i64, i64* %string.addr, align 8
  %call2 = call i8* @SDATA(i64 %2)
  store i8* %call2, i8** %p, align 8
  %3 = load i8*, i8** %p, align 8
  %4 = load i64, i64* %nbytes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %4
  store i8* %add.ptr, i8** %pend, align 8
  store i64 0, i64* %count, align 8
  %5 = load i8, i8* %multibyte, align 1
  %tobool = trunc i8 %5 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %6 = load i8*, i8** %p, align 8
  %7 = load i8*, i8** %pend, align 8
  %cmp = icmp ult i8* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %p, align 8
  %9 = load i8, i8* %8, align 1
  %conv = zext i8 %9 to i32
  store i32 %conv, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %and = and i32 %10, 128
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.body
  br label %cond.end.17

cond.false:                                       ; preds = %while.body
  %11 = load i32, i32* %c, align 4
  %and4 = and i32 %11, 32
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.false.7, label %cond.true.6

cond.true.6:                                      ; preds = %cond.false
  br label %cond.end.15

cond.false.7:                                     ; preds = %cond.false
  %12 = load i32, i32* %c, align 4
  %and8 = and i32 %12, 16
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.false.11, label %cond.true.10

cond.true.10:                                     ; preds = %cond.false.7
  br label %cond.end

cond.false.11:                                    ; preds = %cond.false.7
  %13 = load i32, i32* %c, align 4
  %and12 = and i32 %13, 8
  %tobool13 = icmp ne i32 %and12, 0
  %lnot = xor i1 %tobool13, true
  %cond = select i1 %lnot, i32 4, i32 5
  br label %cond.end

cond.end:                                         ; preds = %cond.false.11, %cond.true.10
  %cond14 = phi i32 [ 3, %cond.true.10 ], [ %cond, %cond.false.11 ]
  br label %cond.end.15

cond.end.15:                                      ; preds = %cond.end, %cond.true.6
  %cond16 = phi i32 [ 2, %cond.true.6 ], [ %cond14, %cond.end ]
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.end.15, %cond.true
  %cond18 = phi i32 [ 1, %cond.true ], [ %cond16, %cond.end.15 ]
  store i32 %cond18, i32* %len, align 4
  %14 = load i32, i32* %c, align 4
  %cmp19 = icmp eq i32 %14, 192
  br i1 %cmp19, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.17
  %15 = load i32, i32* %c, align 4
  %cmp21 = icmp eq i32 %15, 193
  br i1 %cmp21, label %if.then.23, label %if.end

if.then.23:                                       ; preds = %lor.lhs.false, %cond.end.17
  %16 = load i64, i64* %count, align 8
  %inc = add nsw i64 %16, 1
  store i64 %inc, i64* %count, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.23, %lor.lhs.false
  %17 = load i32, i32* %len, align 4
  %18 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %17 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %18, i64 %idx.ext
  store i8* %add.ptr24, i8** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.36

if.else:                                          ; preds = %entry
  br label %while.cond.25

while.cond.25:                                    ; preds = %if.end.34, %if.else
  %19 = load i8*, i8** %p, align 8
  %20 = load i8*, i8** %pend, align 8
  %cmp26 = icmp ult i8* %19, %20
  br i1 %cmp26, label %while.body.28, label %while.end.35

while.body.28:                                    ; preds = %while.cond.25
  %21 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %22 = load i8, i8* %21, align 1
  %conv29 = zext i8 %22 to i32
  %cmp30 = icmp sge i32 %conv29, 128
  br i1 %cmp30, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %while.body.28
  %23 = load i64, i64* %count, align 8
  %inc33 = add nsw i64 %23, 1
  store i64 %inc33, i64* %count, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %while.body.28
  br label %while.cond.25

while.end.35:                                     ; preds = %while.cond.25
  br label %if.end.36

if.end.36:                                        ; preds = %while.end.35, %while.end
  %24 = load i64, i64* %count, align 8
  ret i64 %24
}

declare i64 @make_uninit_multibyte_string(i64, i64) #3

declare i64 @make_uninit_string(i64) #3

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #5

; Function Attrs: nounwind uwtable
define i64 @Fstring(i64 %n, i64* %args) #1 {
entry:
  %n.addr = alloca i64, align 8
  %args.addr = alloca i64*, align 8
  %i = alloca i64, align 8
  %c = alloca i32, align 4
  %buf = alloca i8*, align 8
  %p = alloca i8*, align 8
  %str = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  store i64 %n, i64* %n.addr, align 8
  store i64* %args, i64** %args.addr, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %n.addr, align 8
  %1 = load i64, i64* %sa_avail, align 8
  %div = udiv i64 %1, 1
  %div1 = udiv i64 %div, 5
  %cmp = icmp ule i64 %0, %div1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %2 = load i64, i64* %n.addr, align 8
  %mul = mul i64 5, %2
  %3 = load i64, i64* %sa_avail, align 8
  %sub = sub i64 %3, %mul
  store i64 %sub, i64* %sa_avail, align 8
  %4 = load i64, i64* %n.addr, align 8
  %mul2 = mul i64 5, %4
  %5 = alloca i8, i64 %mul2
  store i8* %5, i8** %buf, align 8
  br label %if.end

if.else:                                          ; preds = %do.body
  %6 = load i64, i64* %n.addr, align 8
  %call3 = call noalias i8* @xnmalloc(i64 %6, i64 5)
  store i8* %call3, i8** %buf, align 8
  store i8 1, i8* %sa_must_free, align 1
  %7 = load i8*, i8** %buf, align 8
  call void @record_unwind_protect_ptr(void (i8*)* @xfree, i8* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  %8 = load i8*, i8** %buf, align 8
  store i8* %8, i8** %p, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %n.addr, align 8
  %cmp4 = icmp slt i64 %9, %10
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i64, i64* %i, align 8
  %12 = load i64*, i64** %args.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %12, i64 %11
  %13 = load i64, i64* %arrayidx, align 8
  %call5 = call zeroext i1 @NATNUMP(i64 %13)
  br i1 %call5, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %14 = load i64, i64* %i, align 8
  %15 = load i64*, i64** %args.addr, align 8
  %arrayidx6 = getelementptr inbounds i64, i64* %15, i64 %14
  %16 = load i64, i64* %arrayidx6, align 8
  %shr = ashr i64 %16, 2
  %cmp7 = icmp sle i64 %shr, 4194303
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %call8 = call i64 @builtin_lisp_symbol(i32 260)
  %17 = load i64, i64* %i, align 8
  %18 = load i64*, i64** %args.addr, align 8
  %arrayidx9 = getelementptr inbounds i64, i64* %18, i64 %17
  %19 = load i64, i64* %arrayidx9, align 8
  %20 = call i64 @wrong_type_argument(i64 %call8, i64 %19) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %21, %cond.true
  %22 = load i64, i64* %i, align 8
  %23 = load i64*, i64** %args.addr, align 8
  %arrayidx10 = getelementptr inbounds i64, i64* %23, i64 %22
  %24 = load i64, i64* %arrayidx10, align 8
  %shr11 = ashr i64 %24, 2
  %conv = trunc i64 %shr11 to i32
  store i32 %conv, i32* %c, align 4
  br i1 true, label %cond.true.12, label %cond.false.15

cond.true.12:                                     ; preds = %cond.end
  %25 = load i32, i32* %c, align 4
  %add = add i32 %25, 0
  %cmp13 = icmp ule i32 %add, 127
  br i1 %cmp13, label %cond.true.20, label %cond.false.23

cond.false.15:                                    ; preds = %cond.end
  %26 = load i32, i32* %c, align 4
  %conv16 = sext i32 %26 to i64
  %add17 = add i64 %conv16, 0
  %cmp18 = icmp ule i64 %add17, 127
  br i1 %cmp18, label %cond.true.20, label %cond.false.23

cond.true.20:                                     ; preds = %cond.false.15, %cond.true.12
  %27 = load i32, i32* %c, align 4
  %conv21 = trunc i32 %27 to i8
  %28 = load i8*, i8** %p, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %28, i64 0
  store i8 %conv21, i8* %arrayidx22, align 1
  br label %cond.end.69

cond.false.23:                                    ; preds = %cond.false.15, %cond.true.12
  br i1 true, label %cond.true.24, label %cond.false.28

cond.true.24:                                     ; preds = %cond.false.23
  %29 = load i32, i32* %c, align 4
  %add25 = add i32 %29, 0
  %cmp26 = icmp ule i32 %add25, 2047
  br i1 %cmp26, label %cond.true.33, label %cond.false.40

cond.false.28:                                    ; preds = %cond.false.23
  %30 = load i32, i32* %c, align 4
  %conv29 = sext i32 %30 to i64
  %add30 = add i64 %conv29, 0
  %cmp31 = icmp ule i64 %add30, 2047
  br i1 %cmp31, label %cond.true.33, label %cond.false.40

cond.true.33:                                     ; preds = %cond.false.28, %cond.true.24
  %31 = load i32, i32* %c, align 4
  %shr34 = ashr i32 %31, 6
  %or = or i32 192, %shr34
  %conv35 = trunc i32 %or to i8
  %32 = load i8*, i8** %p, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %32, i64 0
  store i8 %conv35, i8* %arrayidx36, align 1
  %33 = load i32, i32* %c, align 4
  %and = and i32 %33, 63
  %or37 = or i32 128, %and
  %conv38 = trunc i32 %or37 to i8
  %34 = load i8*, i8** %p, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %34, i64 1
  store i8 %conv38, i8* %arrayidx39, align 1
  br label %cond.end.67

cond.false.40:                                    ; preds = %cond.false.28, %cond.true.24
  br i1 true, label %cond.true.41, label %cond.false.45

cond.true.41:                                     ; preds = %cond.false.40
  %35 = load i32, i32* %c, align 4
  %add42 = add i32 %35, 0
  %cmp43 = icmp ule i32 %add42, 65535
  br i1 %cmp43, label %cond.true.50, label %cond.false.64

cond.false.45:                                    ; preds = %cond.false.40
  %36 = load i32, i32* %c, align 4
  %conv46 = sext i32 %36 to i64
  %add47 = add i64 %conv46, 0
  %cmp48 = icmp ule i64 %add47, 65535
  br i1 %cmp48, label %cond.true.50, label %cond.false.64

cond.true.50:                                     ; preds = %cond.false.45, %cond.true.41
  %37 = load i32, i32* %c, align 4
  %shr51 = ashr i32 %37, 12
  %or52 = or i32 224, %shr51
  %conv53 = trunc i32 %or52 to i8
  %38 = load i8*, i8** %p, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %38, i64 0
  store i8 %conv53, i8* %arrayidx54, align 1
  %39 = load i32, i32* %c, align 4
  %shr55 = ashr i32 %39, 6
  %and56 = and i32 %shr55, 63
  %or57 = or i32 128, %and56
  %conv58 = trunc i32 %or57 to i8
  %40 = load i8*, i8** %p, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %conv58, i8* %arrayidx59, align 1
  %41 = load i32, i32* %c, align 4
  %and60 = and i32 %41, 63
  %or61 = or i32 128, %and60
  %conv62 = trunc i32 %or61 to i8
  %42 = load i8*, i8** %p, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %conv62, i8* %arrayidx63, align 1
  br label %cond.end.66

cond.false.64:                                    ; preds = %cond.false.45, %cond.true.41
  %43 = load i32, i32* %c, align 4
  %44 = load i8*, i8** %p, align 8
  %call65 = call i32 @char_string(i32 %43, i8* %44)
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.64, %cond.true.50
  %cond = phi i32 [ 3, %cond.true.50 ], [ %call65, %cond.false.64 ]
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.end.66, %cond.true.33
  %cond68 = phi i32 [ 2, %cond.true.33 ], [ %cond, %cond.end.66 ]
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.end.67, %cond.true.20
  %cond70 = phi i32 [ 1, %cond.true.20 ], [ %cond68, %cond.end.67 ]
  %45 = load i8*, i8** %p, align 8
  %idx.ext = sext i32 %cond70 to i64
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end.69
  %46 = load i64, i64* %i, align 8
  %inc = add nsw i64 %46, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load i8*, i8** %buf, align 8
  %48 = load i64, i64* %n.addr, align 8
  %49 = load i8*, i8** %p, align 8
  %50 = load i8*, i8** %buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %49 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %50 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call71 = call i64 @make_string_from_bytes(i8* %47, i64 %48, i64 %sub.ptr.sub)
  store i64 %call71, i64* %str, align 8
  br label %do.body.72

do.body.72:                                       ; preds = %for.end
  %51 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %51 to i1
  br i1 %tobool, label %if.then.73, label %if.end.76

if.then.73:                                       ; preds = %do.body.72
  store i8 0, i8* %sa_must_free, align 1
  %52 = load i64, i64* %sa_count, align 8
  %call74 = call i64 @builtin_lisp_symbol(i32 0)
  %call75 = call i64 @unbind_to(i64 %52, i64 %call74)
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.73, %do.body.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %53 = load i64, i64* %str, align 8
  ret i64 %53
}

declare i64 @SPECPDL_INDEX() #3

declare noalias i8* @xnmalloc(i64, i64) #3

declare void @record_unwind_protect_ptr(void (i8*)*, i8*) #3

declare void @xfree(i8*) #3

declare i64 @make_string_from_bytes(i8*, i64, i64) #3

declare i64 @unbind_to(i64, i64) #3

; Function Attrs: nounwind uwtable
define i64 @Funibyte_string(i64 %n, i64* %args) #1 {
entry:
  %n.addr = alloca i64, align 8
  %args.addr = alloca i64*, align 8
  %i = alloca i64, align 8
  %str = alloca i64, align 8
  %sa_avail = alloca i64, align 8
  %sa_count = alloca i64, align 8
  %sa_must_free = alloca i8, align 1
  %buf = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64* %args, i64** %args.addr, align 8
  store i64 16384, i64* %sa_avail, align 8
  %call = call i64 @SPECPDL_INDEX()
  store i64 %call, i64* %sa_count, align 8
  store i8 0, i8* %sa_must_free, align 1
  %0 = load i64, i64* %n.addr, align 8
  %1 = load i64, i64* %sa_avail, align 8
  %cmp = icmp sle i64 %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64, i64* %n.addr, align 8
  %3 = load i64, i64* %sa_avail, align 8
  %sub = sub nsw i64 %3, %2
  store i64 %sub, i64* %sa_avail, align 8
  %4 = load i64, i64* %n.addr, align 8
  %5 = alloca i8, i64 %4
  br label %cond.end

cond.false:                                       ; preds = %entry
  store i8 1, i8* %sa_must_free, align 1
  %6 = load i64, i64* %n.addr, align 8
  %call1 = call i8* @record_xmalloc(i64 %6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ %call1, %cond.false ]
  store i8* %cond, i8** %buf, align 8
  %7 = load i8*, i8** %buf, align 8
  store i8* %7, i8** %p, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load i64, i64* %i, align 8
  %9 = load i64, i64* %n.addr, align 8
  %cmp2 = icmp slt i64 %8, %9
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8
  %11 = load i64*, i64** %args.addr, align 8
  %arrayidx = getelementptr inbounds i64, i64* %11, i64 %10
  %12 = load i64, i64* %arrayidx, align 8
  %and = and i64 %12, 7
  %conv = trunc i64 %and to i32
  %and3 = and i32 %conv, -5
  %cmp4 = icmp eq i32 %and3, 2
  br i1 %cmp4, label %cond.true.6, label %cond.false.7

cond.true.6:                                      ; preds = %do.body
  br label %cond.end.10

cond.false.7:                                     ; preds = %do.body
  %call8 = call i64 @builtin_lisp_symbol(i32 559)
  %13 = load i64, i64* %i, align 8
  %14 = load i64*, i64** %args.addr, align 8
  %arrayidx9 = getelementptr inbounds i64, i64* %14, i64 %13
  %15 = load i64, i64* %arrayidx9, align 8
  %16 = call i64 @wrong_type_argument(i64 %call8, i64 %15) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.10

cond.end.10:                                      ; preds = %17, %cond.true.6
  %18 = load i64, i64* %i, align 8
  %19 = load i64*, i64** %args.addr, align 8
  %arrayidx11 = getelementptr inbounds i64, i64* %19, i64 %18
  %20 = load i64, i64* %arrayidx11, align 8
  %shr = ashr i64 %20, 2
  %cmp12 = icmp sle i64 0, %shr
  br i1 %cmp12, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %cond.end.10
  %21 = load i64, i64* %i, align 8
  %22 = load i64*, i64** %args.addr, align 8
  %arrayidx14 = getelementptr inbounds i64, i64* %22, i64 %21
  %23 = load i64, i64* %arrayidx14, align 8
  %shr15 = ashr i64 %23, 2
  %cmp16 = icmp sle i64 %shr15, 255
  br i1 %cmp16, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %cond.end.10
  %24 = load i64, i64* %i, align 8
  %25 = load i64*, i64** %args.addr, align 8
  %arrayidx18 = getelementptr inbounds i64, i64* %25, i64 %24
  %26 = load i64, i64* %arrayidx18, align 8
  call void @args_out_of_range_3(i64 %26, i64 2, i64 1022) #7
  unreachable

if.end:                                           ; preds = %land.lhs.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %27 = load i64, i64* %i, align 8
  %28 = load i64*, i64** %args.addr, align 8
  %arrayidx19 = getelementptr inbounds i64, i64* %28, i64 %27
  %29 = load i64, i64* %arrayidx19, align 8
  %shr20 = ashr i64 %29, 2
  %conv21 = trunc i64 %shr20 to i8
  %30 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 %conv21, i8* %30, align 1
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %31 = load i64, i64* %i, align 8
  %inc = add nsw i64 %31, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i8*, i8** %buf, align 8
  %33 = load i64, i64* %n.addr, align 8
  %34 = load i8*, i8** %p, align 8
  %35 = load i8*, i8** %buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %34 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %35 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call22 = call i64 @make_string_from_bytes(i8* %32, i64 %33, i64 %sub.ptr.sub)
  store i64 %call22, i64* %str, align 8
  br label %do.body.23

do.body.23:                                       ; preds = %for.end
  %36 = load i8, i8* %sa_must_free, align 1
  %tobool = trunc i8 %36 to i1
  br i1 %tobool, label %if.then.24, label %if.end.27

if.then.24:                                       ; preds = %do.body.23
  store i8 0, i8* %sa_must_free, align 1
  %37 = load i64, i64* %sa_count, align 8
  %call25 = call i64 @builtin_lisp_symbol(i32 0)
  %call26 = call i64 @unbind_to(i64 %37, i64 %call25)
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.24, %do.body.23
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  %38 = load i64, i64* %str, align 8
  ret i64 %38
}

declare i8* @record_xmalloc(i64) #3

; Function Attrs: noreturn
declare void @args_out_of_range_3(i64, i64, i64) #2

; Function Attrs: nounwind uwtable
define i64 @Fchar_resolve_modifiers(i64 %character) #1 {
entry:
  %character.addr = alloca i64, align 8
  %c = alloca i64, align 8
  store i64 %character, i64* %character.addr, align 8
  %0 = load i64, i64* %character.addr, align 8
  %and = and i64 %0, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i64 @builtin_lisp_symbol(i32 559)
  %1 = load i64, i64* %character.addr, align 8
  %2 = call i64 @wrong_type_argument(i64 %call, i64 %1) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %3, %cond.true
  %4 = load i64, i64* %character.addr, align 8
  %shr = ashr i64 %4, 2
  store i64 %shr, i64* %c, align 8
  %5 = load i64, i64* %c, align 8
  %call3 = call i64 @char_resolve_modifier_mask(i64 %5) #6
  %shl = shl i64 %call3, 2
  %add = add i64 %shl, 2
  ret i64 %add
}

; Function Attrs: nounwind uwtable
define i64 @Fget_byte(i64 %position, i64 %string) #1 {
entry:
  %retval = alloca i64, align 8
  %position.addr = alloca i64, align 8
  %string.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %pos = alloca i64, align 8
  %p = alloca i8*, align 8
  store i64 %position, i64* %position.addr, align 8
  store i64 %string, i64* %string.addr, align 8
  %0 = load i64, i64* %string.addr, align 8
  %call = call i64 @builtin_lisp_symbol(i32 0)
  %cmp = icmp eq i64 %0, %call
  br i1 %cmp, label %if.then, label %if.else.64

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %position.addr, align 8
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp2 = icmp eq i64 %1, %call1
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %2 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte = getelementptr inbounds %struct.buffer, %struct.buffer* %2, i32 0, i32 76
  %3 = load i64, i64* %pt_byte, align 8
  %4 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text = getelementptr inbounds %struct.buffer, %struct.buffer* %4, i32 0, i32 73
  %5 = load %struct.buffer_text*, %struct.buffer_text** %text, align 8
  %gpt_byte = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %5, i32 0, i32 3
  %6 = load i64, i64* %gpt_byte, align 8
  %cmp4 = icmp sge i64 %3, %6
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.3
  %7 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text5 = getelementptr inbounds %struct.buffer, %struct.buffer* %7, i32 0, i32 73
  %8 = load %struct.buffer_text*, %struct.buffer_text** %text5, align 8
  %gap_size = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %8, i32 0, i32 5
  %9 = load i64, i64* %gap_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %9, %cond.true ], [ 0, %cond.false ]
  %10 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %pt_byte6 = getelementptr inbounds %struct.buffer, %struct.buffer* %10, i32 0, i32 76
  %11 = load i64, i64* %pt_byte6, align 8
  %add = add nsw i64 %cond, %11
  %12 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text7 = getelementptr inbounds %struct.buffer, %struct.buffer* %12, i32 0, i32 73
  %13 = load %struct.buffer_text*, %struct.buffer_text** %text7, align 8
  %beg = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %13, i32 0, i32 0
  %14 = load i8*, i8** %beg, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %add
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  store i8* %add.ptr8, i8** %p, align 8
  br label %if.end.55

if.else:                                          ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.else
  %15 = load i64, i64* %position.addr, align 8
  %and = and i64 %15, 7
  %conv = trunc i64 %and to i32
  %cmp9 = icmp eq i32 %conv, 1
  br i1 %cmp9, label %land.lhs.true, label %if.else.17

land.lhs.true:                                    ; preds = %do.body
  %16 = load i64, i64* %position.addr, align 8
  %call11 = call i32 @XMISCTYPE(i64 %16)
  %cmp12 = icmp eq i32 %call11, 24236
  br i1 %cmp12, label %if.then.14, label %if.else.17

if.then.14:                                       ; preds = %land.lhs.true
  %17 = load i64, i64* %position.addr, align 8
  %call15 = call i64 @marker_position(i64 %17)
  %call16 = call i64 @make_natnum(i64 %call15)
  store i64 %call16, i64* %position.addr, align 8
  br label %if.end

if.else.17:                                       ; preds = %land.lhs.true, %do.body
  %18 = load i64, i64* %position.addr, align 8
  %and18 = and i64 %18, 7
  %conv19 = trunc i64 %and18 to i32
  %and20 = and i32 %conv19, -5
  %cmp21 = icmp eq i32 %and20, 2
  br i1 %cmp21, label %cond.true.23, label %cond.false.24

cond.true.23:                                     ; preds = %if.else.17
  br label %cond.end.26

cond.false.24:                                    ; preds = %if.else.17
  %call25 = call i64 @builtin_lisp_symbol(i32 558)
  %19 = load i64, i64* %position.addr, align 8
  %20 = call i64 @wrong_type_argument(i64 %call25, i64 %19) #7
  unreachable
                                                  ; No predecessors!
  br label %cond.end.26

cond.end.26:                                      ; preds = %21, %cond.true.23
  br label %if.end

if.end:                                           ; preds = %cond.end.26, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end
  %22 = load i64, i64* %position.addr, align 8
  %shr = ashr i64 %22, 2
  %23 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv = getelementptr inbounds %struct.buffer, %struct.buffer* %23, i32 0, i32 77
  %24 = load i64, i64* %begv, align 8
  %cmp27 = icmp slt i64 %shr, %24
  br i1 %cmp27, label %if.then.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %25 = load i64, i64* %position.addr, align 8
  %shr29 = ashr i64 %25, 2
  %26 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv = getelementptr inbounds %struct.buffer, %struct.buffer* %26, i32 0, i32 79
  %27 = load i64, i64* %zv, align 8
  %cmp30 = icmp sge i64 %shr29, %27
  br i1 %cmp30, label %if.then.32, label %if.end.38

if.then.32:                                       ; preds = %lor.lhs.false, %do.end
  %28 = load i64, i64* %position.addr, align 8
  %29 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %begv33 = getelementptr inbounds %struct.buffer, %struct.buffer* %29, i32 0, i32 77
  %30 = load i64, i64* %begv33, align 8
  %shl = shl i64 %30, 2
  %add34 = add i64 %shl, 2
  %31 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %zv35 = getelementptr inbounds %struct.buffer, %struct.buffer* %31, i32 0, i32 79
  %32 = load i64, i64* %zv35, align 8
  %shl36 = shl i64 %32, 2
  %add37 = add i64 %shl36, 2
  call void @args_out_of_range_3(i64 %28, i64 %add34, i64 %add37) #7
  unreachable

if.end.38:                                        ; preds = %lor.lhs.false
  %33 = load i64, i64* %position.addr, align 8
  %shr39 = ashr i64 %33, 2
  store i64 %shr39, i64* %pos, align 8
  %34 = load i64, i64* %pos, align 8
  %35 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text40 = getelementptr inbounds %struct.buffer, %struct.buffer* %35, i32 0, i32 73
  %36 = load %struct.buffer_text*, %struct.buffer_text** %text40, align 8
  %gpt = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %36, i32 0, i32 1
  %37 = load i64, i64* %gpt, align 8
  %cmp41 = icmp sge i64 %34, %37
  br i1 %cmp41, label %cond.true.43, label %cond.false.46

cond.true.43:                                     ; preds = %if.end.38
  %38 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text44 = getelementptr inbounds %struct.buffer, %struct.buffer* %38, i32 0, i32 73
  %39 = load %struct.buffer_text*, %struct.buffer_text** %text44, align 8
  %gap_size45 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %39, i32 0, i32 5
  %40 = load i64, i64* %gap_size45, align 8
  br label %cond.end.47

cond.false.46:                                    ; preds = %if.end.38
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.46, %cond.true.43
  %cond48 = phi i64 [ %40, %cond.true.43 ], [ 0, %cond.false.46 ]
  %41 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %42 = load i64, i64* %pos, align 8
  %call49 = call i64 @buf_charpos_to_bytepos(%struct.buffer* %41, i64 %42)
  %add50 = add nsw i64 %cond48, %call49
  %43 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %text51 = getelementptr inbounds %struct.buffer, %struct.buffer* %43, i32 0, i32 73
  %44 = load %struct.buffer_text*, %struct.buffer_text** %text51, align 8
  %beg52 = getelementptr inbounds %struct.buffer_text, %struct.buffer_text* %44, i32 0, i32 0
  %45 = load i8*, i8** %beg52, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %45, i64 %add50
  %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr53, i64 -1
  store i8* %add.ptr54, i8** %p, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %cond.end.47, %cond.end
  %46 = load %struct.buffer*, %struct.buffer** @current_buffer, align 8
  %enable_multibyte_characters_ = getelementptr inbounds %struct.buffer, %struct.buffer* %46, i32 0, i32 39
  %47 = load i64, i64* %enable_multibyte_characters_, align 8
  %call56 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp57 = icmp eq i64 %47, %call56
  br i1 %cmp57, label %if.then.59, label %if.end.63

if.then.59:                                       ; preds = %if.end.55
  %48 = load i8*, i8** %p, align 8
  %49 = load i8, i8* %48, align 1
  %conv60 = zext i8 %49 to i64
  %shl61 = shl i64 %conv60, 2
  %add62 = add i64 %shl61, 2
  store i64 %add62, i64* %retval
  br label %return

if.end.63:                                        ; preds = %if.end.55
  br label %if.end.88

if.else.64:                                       ; preds = %entry
  %50 = load i64, i64* %string.addr, align 8
  call void @CHECK_STRING(i64 %50)
  %51 = load i64, i64* %position.addr, align 8
  %call65 = call i64 @builtin_lisp_symbol(i32 0)
  %cmp66 = icmp eq i64 %51, %call65
  br i1 %cmp66, label %if.then.68, label %if.else.70

if.then.68:                                       ; preds = %if.else.64
  %52 = load i64, i64* %string.addr, align 8
  %call69 = call i8* @SDATA(i64 %52)
  store i8* %call69, i8** %p, align 8
  br label %if.end.81

if.else.70:                                       ; preds = %if.else.64
  %53 = load i64, i64* %position.addr, align 8
  call void @CHECK_NATNUM(i64 %53)
  %54 = load i64, i64* %position.addr, align 8
  %shr71 = ashr i64 %54, 2
  %55 = load i64, i64* %string.addr, align 8
  %call72 = call i64 @SCHARS(i64 %55)
  %cmp73 = icmp sge i64 %shr71, %call72
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.else.70
  %56 = load i64, i64* %string.addr, align 8
  %57 = load i64, i64* %position.addr, align 8
  call void @args_out_of_range(i64 %56, i64 %57) #7
  unreachable

if.end.76:                                        ; preds = %if.else.70
  %58 = load i64, i64* %position.addr, align 8
  %shr77 = ashr i64 %58, 2
  store i64 %shr77, i64* %pos, align 8
  %59 = load i64, i64* %string.addr, align 8
  %call78 = call i8* @SDATA(i64 %59)
  %60 = load i64, i64* %string.addr, align 8
  %61 = load i64, i64* %pos, align 8
  %call79 = call i64 @string_char_to_byte(i64 %60, i64 %61)
  %add.ptr80 = getelementptr inbounds i8, i8* %call78, i64 %call79
  store i8* %add.ptr80, i8** %p, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.76, %if.then.68
  %62 = load i64, i64* %string.addr, align 8
  %call82 = call zeroext i1 @STRING_MULTIBYTE(i64 %62)
  br i1 %call82, label %if.end.87, label %if.then.83

if.then.83:                                       ; preds = %if.end.81
  %63 = load i8*, i8** %p, align 8
  %64 = load i8, i8* %63, align 1
  %conv84 = zext i8 %64 to i64
  %shl85 = shl i64 %conv84, 2
  %add86 = add i64 %shl85, 2
  store i64 %add86, i64* %retval
  br label %return

if.end.87:                                        ; preds = %if.end.81
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %if.end.63
  %65 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %65, i64 0
  %66 = load i8, i8* %arrayidx, align 1
  %conv89 = zext i8 %66 to i32
  %and90 = and i32 %conv89, 128
  %tobool = icmp ne i32 %and90, 0
  br i1 %tobool, label %cond.false.94, label %cond.true.91

cond.true.91:                                     ; preds = %if.end.88
  %67 = load i8*, i8** %p, align 8
  %arrayidx92 = getelementptr inbounds i8, i8* %67, i64 0
  %68 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %68 to i32
  br label %cond.end.138

cond.false.94:                                    ; preds = %if.end.88
  %69 = load i8*, i8** %p, align 8
  %arrayidx95 = getelementptr inbounds i8, i8* %69, i64 0
  %70 = load i8, i8* %arrayidx95, align 1
  %conv96 = zext i8 %70 to i32
  %and97 = and i32 %conv96, 32
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %cond.false.113, label %cond.true.99

cond.true.99:                                     ; preds = %cond.false.94
  %71 = load i8*, i8** %p, align 8
  %arrayidx100 = getelementptr inbounds i8, i8* %71, i64 0
  %72 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %72 to i32
  %and102 = and i32 %conv101, 31
  %shl103 = shl i32 %and102, 6
  %73 = load i8*, i8** %p, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %73, i64 1
  %74 = load i8, i8* %arrayidx104, align 1
  %conv105 = zext i8 %74 to i32
  %and106 = and i32 %conv105, 63
  %or = or i32 %shl103, %and106
  %75 = load i8*, i8** %p, align 8
  %arrayidx107 = getelementptr inbounds i8, i8* %75, i64 0
  %76 = load i8, i8* %arrayidx107, align 1
  %conv108 = zext i8 %76 to i32
  %cmp109 = icmp slt i32 %conv108, 194
  %cond111 = select i1 %cmp109, i32 4194176, i32 0
  %add112 = add nsw i32 %or, %cond111
  br label %cond.end.136

cond.false.113:                                   ; preds = %cond.false.94
  %77 = load i8*, i8** %p, align 8
  %arrayidx114 = getelementptr inbounds i8, i8* %77, i64 0
  %78 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %78 to i32
  %and116 = and i32 %conv115, 16
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.false.132, label %cond.true.118

cond.true.118:                                    ; preds = %cond.false.113
  %79 = load i8*, i8** %p, align 8
  %arrayidx119 = getelementptr inbounds i8, i8* %79, i64 0
  %80 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %80 to i32
  %and121 = and i32 %conv120, 15
  %shl122 = shl i32 %and121, 12
  %81 = load i8*, i8** %p, align 8
  %arrayidx123 = getelementptr inbounds i8, i8* %81, i64 1
  %82 = load i8, i8* %arrayidx123, align 1
  %conv124 = zext i8 %82 to i32
  %and125 = and i32 %conv124, 63
  %shl126 = shl i32 %and125, 6
  %or127 = or i32 %shl122, %shl126
  %83 = load i8*, i8** %p, align 8
  %arrayidx128 = getelementptr inbounds i8, i8* %83, i64 2
  %84 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %84 to i32
  %and130 = and i32 %conv129, 63
  %or131 = or i32 %or127, %and130
  br label %cond.end.134

cond.false.132:                                   ; preds = %cond.false.113
  %85 = load i8*, i8** %p, align 8
  %call133 = call i32 @string_char(i8* %85, i8** null, i32* null)
  br label %cond.end.134

cond.end.134:                                     ; preds = %cond.false.132, %cond.true.118
  %cond135 = phi i32 [ %or131, %cond.true.118 ], [ %call133, %cond.false.132 ]
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.end.134, %cond.true.99
  %cond137 = phi i32 [ %add112, %cond.true.99 ], [ %cond135, %cond.end.134 ]
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.end.136, %cond.true.91
  %cond139 = phi i32 [ %conv93, %cond.true.91 ], [ %cond137, %cond.end.136 ]
  store i32 %cond139, i32* %c, align 4
  %86 = load i32, i32* %c, align 4
  %cmp140 = icmp sgt i32 %86, 4194175
  br i1 %cmp140, label %if.then.142, label %if.else.150

if.then.142:                                      ; preds = %cond.end.138
  %87 = load i32, i32* %c, align 4
  %cmp143 = icmp sgt i32 %87, 4194175
  br i1 %cmp143, label %cond.true.145, label %cond.false.146

cond.true.145:                                    ; preds = %if.then.142
  %88 = load i32, i32* %c, align 4
  %sub = sub nsw i32 %88, 4194048
  br label %cond.end.148

cond.false.146:                                   ; preds = %if.then.142
  %89 = load i32, i32* %c, align 4
  %and147 = and i32 %89, 255
  br label %cond.end.148

cond.end.148:                                     ; preds = %cond.false.146, %cond.true.145
  %cond149 = phi i32 [ %sub, %cond.true.145 ], [ %and147, %cond.false.146 ]
  store i32 %cond149, i32* %c, align 4
  br label %if.end.162

if.else.150:                                      ; preds = %cond.end.138
  br i1 true, label %cond.true.151, label %cond.false.155

cond.true.151:                                    ; preds = %if.else.150
  %90 = load i32, i32* %c, align 4
  %add152 = add i32 %90, 0
  %cmp153 = icmp ult i32 %add152, 128
  br i1 %cmp153, label %if.end.161, label %if.then.160

cond.false.155:                                   ; preds = %if.else.150
  %91 = load i32, i32* %c, align 4
  %conv156 = sext i32 %91 to i64
  %add157 = add i64 %conv156, 0
  %cmp158 = icmp ult i64 %add157, 128
  br i1 %cmp158, label %if.end.161, label %if.then.160

if.then.160:                                      ; preds = %cond.false.155, %cond.true.151
  %92 = load i32, i32* %c, align 4
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i32 0, i32 0), i32 %92) #7
  unreachable

if.end.161:                                       ; preds = %cond.false.155, %cond.true.151
  br label %if.end.162

if.end.162:                                       ; preds = %if.end.161, %cond.end.148
  %93 = load i32, i32* %c, align 4
  %conv163 = sext i32 %93 to i64
  %shl164 = shl i64 %conv163, 2
  %add165 = add i64 %shl164, 2
  store i64 %add165, i64* %retval
  br label %return

return:                                           ; preds = %if.end.162, %if.then.83, %if.then.59
  %94 = load i64, i64* %retval
  ret i64 %94
}

declare i32 @XMISCTYPE(i64) #3

declare i64 @marker_position(i64) #3

declare i64 @buf_charpos_to_bytepos(%struct.buffer*, i64) #3

declare void @CHECK_NATNUM(i64) #3

; Function Attrs: noreturn
declare void @args_out_of_range(i64, i64) #2

; Function Attrs: nounwind uwtable
define zeroext i1 @alphabeticp(i32 %c) #1 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  %category = alloca i64, align 8
  %gen_cat = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314), align 8
  %1 = load i32, i32* %c.addr, align 4
  %call = call i64 @CHAR_TABLE_REF(i64 %0, i32 %1)
  store i64 %call, i64* %category, align 8
  %2 = load i64, i64* %category, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %category, align 8
  %shr = ashr i64 %3, 2
  store i64 %shr, i64* %gen_cat, align 8
  %4 = load i64, i64* %gen_cat, align 8
  %cmp3 = icmp eq i64 %4, 1
  br i1 %cmp3, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i64, i64* %gen_cat, align 8
  %cmp5 = icmp eq i64 %5, 2
  br i1 %cmp5, label %lor.end, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %6 = load i64, i64* %gen_cat, align 8
  %cmp8 = icmp eq i64 %6, 3
  br i1 %cmp8, label %lor.end, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.7
  %7 = load i64, i64* %gen_cat, align 8
  %cmp11 = icmp eq i64 %7, 4
  br i1 %cmp11, label %lor.end, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.10
  %8 = load i64, i64* %gen_cat, align 8
  %cmp14 = icmp eq i64 %8, 5
  br i1 %cmp14, label %lor.end, label %lor.lhs.false.16

lor.lhs.false.16:                                 ; preds = %lor.lhs.false.13
  %9 = load i64, i64* %gen_cat, align 8
  %cmp17 = icmp eq i64 %9, 6
  br i1 %cmp17, label %lor.end, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %lor.lhs.false.16
  %10 = load i64, i64* %gen_cat, align 8
  %cmp20 = icmp eq i64 %10, 7
  br i1 %cmp20, label %lor.end, label %lor.lhs.false.22

lor.lhs.false.22:                                 ; preds = %lor.lhs.false.19
  %11 = load i64, i64* %gen_cat, align 8
  %cmp23 = icmp eq i64 %11, 8
  br i1 %cmp23, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.22
  %12 = load i64, i64* %gen_cat, align 8
  %cmp25 = icmp eq i64 %12, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.22, %lor.lhs.false.19, %lor.lhs.false.16, %lor.lhs.false.13, %lor.lhs.false.10, %lor.lhs.false.7, %lor.lhs.false, %if.end
  %13 = phi i1 [ true, %lor.lhs.false.22 ], [ true, %lor.lhs.false.19 ], [ true, %lor.lhs.false.16 ], [ true, %lor.lhs.false.13 ], [ true, %lor.lhs.false.10 ], [ true, %lor.lhs.false.7 ], [ true, %lor.lhs.false ], [ true, %if.end ], [ %cmp25, %lor.rhs ]
  store i1 %13, i1* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %14 = load i1, i1* %retval
  ret i1 %14
}

; Function Attrs: nounwind uwtable
define zeroext i1 @decimalnump(i32 %c) #1 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  %category = alloca i64, align 8
  %gen_cat = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314), align 8
  %1 = load i32, i32* %c.addr, align 4
  %call = call i64 @CHAR_TABLE_REF(i64 %0, i32 %1)
  store i64 %call, i64* %category, align 8
  %2 = load i64, i64* %category, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %category, align 8
  %shr = ashr i64 %3, 2
  store i64 %shr, i64* %gen_cat, align 8
  %4 = load i64, i64* %gen_cat, align 8
  %cmp3 = icmp eq i64 %4, 9
  store i1 %cmp3, i1* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i1, i1* %retval
  ret i1 %5
}

; Function Attrs: nounwind uwtable
define zeroext i1 @graphicp(i32 %c) #1 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  %category = alloca i64, align 8
  %gen_cat = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314), align 8
  %1 = load i32, i32* %c.addr, align 4
  %call = call i64 @CHAR_TABLE_REF(i64 %0, i32 %1)
  store i64 %call, i64* %category, align 8
  %2 = load i64, i64* %category, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %category, align 8
  %shr = ashr i64 %3, 2
  store i64 %shr, i64* %gen_cat, align 8
  %4 = load i64, i64* %gen_cat, align 8
  %cmp3 = icmp eq i64 %4, 23
  br i1 %cmp3, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i64, i64* %gen_cat, align 8
  %cmp5 = icmp eq i64 %5, 24
  br i1 %cmp5, label %lor.end, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %6 = load i64, i64* %gen_cat, align 8
  %cmp8 = icmp eq i64 %6, 25
  br i1 %cmp8, label %lor.end, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %lor.lhs.false.7
  %7 = load i64, i64* %gen_cat, align 8
  %cmp11 = icmp eq i64 %7, 26
  br i1 %cmp11, label %lor.end, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.10
  %8 = load i64, i64* %gen_cat, align 8
  %cmp14 = icmp eq i64 %8, 28
  br i1 %cmp14, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.13
  %9 = load i64, i64* %gen_cat, align 8
  %cmp16 = icmp eq i64 %9, 30
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false.13, %lor.lhs.false.10, %lor.lhs.false.7, %lor.lhs.false, %if.end
  %10 = phi i1 [ true, %lor.lhs.false.13 ], [ true, %lor.lhs.false.10 ], [ true, %lor.lhs.false.7 ], [ true, %lor.lhs.false ], [ true, %if.end ], [ %cmp16, %lor.rhs ]
  %lnot = xor i1 %10, true
  store i1 %lnot, i1* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %11 = load i1, i1* %retval
  ret i1 %11
}

; Function Attrs: nounwind uwtable
define zeroext i1 @printablep(i32 %c) #1 {
entry:
  %retval = alloca i1, align 1
  %c.addr = alloca i32, align 4
  %category = alloca i64, align 8
  %gen_cat = alloca i64, align 8
  store i32 %c, i32* %c.addr, align 4
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314), align 8
  %1 = load i32, i32* %c.addr, align 4
  %call = call i64 @CHAR_TABLE_REF(i64 %0, i32 %1)
  store i64 %call, i64* %category, align 8
  %2 = load i64, i64* %category, align 8
  %and = and i64 %2, 7
  %conv = trunc i64 %and to i32
  %and1 = and i32 %conv, -5
  %cmp = icmp eq i32 %and1, 2
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %category, align 8
  %shr = ashr i64 %3, 2
  store i64 %shr, i64* %gen_cat, align 8
  %4 = load i64, i64* %gen_cat, align 8
  %cmp3 = icmp eq i64 %4, 26
  br i1 %cmp3, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i64, i64* %gen_cat, align 8
  %cmp5 = icmp eq i64 %5, 28
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load i64, i64* %gen_cat, align 8
  %cmp7 = icmp eq i64 %6, 30
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %if.end
  %7 = phi i1 [ true, %lor.lhs.false ], [ true, %if.end ], [ %cmp7, %lor.rhs ]
  %lnot = xor i1 %7, true
  store i1 %lnot, i1* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %8 = load i1, i1* %retval
  ret i1 %8
}

; Function Attrs: nounwind uwtable
define void @syms_of_character() #1 {
entry:
  call void @staticpro(i64* @Vchar_unify_table)
  %call = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call, i64* @Vchar_unify_table, align 8
  call void @defsubr(%struct.Lisp_Subr* @Smax_char)
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Scharacterp to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sunibyte_char_to_multibyte to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Smultibyte_char_to_unibyte to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Schar_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Sstring_width to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* }* @Sstring to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64*)* }, i16, i16, i8*, i8*, i8* }* @Sunibyte_string to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64)* }, i16, i16, i8*, i8*, i8* }* @Schar_resolve_modifiers to %struct.Lisp_Subr*))
  call void @defsubr(%struct.Lisp_Subr* bitcast ({ %struct.vectorlike_header, { i64 (i64, i64)* }, i16, i16, i8*, i8*, i8* }* @Sget_byte to %struct.Lisp_Subr*))
  br label %do.body

do.body:                                          ; preds = %entry
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 308))
  br label %do.end

do.end:                                           ; preds = %do.body
  %call1 = call i64 @builtin_lisp_symbol(i32 0)
  %call2 = call i64 @Fmake_vector(i64 66, i64 %call1)
  store i64 %call2, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 308), align 8
  br label %do.body.3

do.body.3:                                        ; preds = %do.end
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd.5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 7))
  br label %do.end.4

do.end.4:                                         ; preds = %do.body.3
  %call5 = call i64 @builtin_lisp_symbol(i32 186)
  %call6 = call i64 @builtin_lisp_symbol(i32 0)
  %call7 = call i64 @Fmake_char_table(i64 %call5, i64 %call6)
  store i64 %call7, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 7), align 8
  %0 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 7), align 8
  %call8 = call i64 @builtin_lisp_symbol(i32 901)
  call void @CHAR_TABLE_SET(i64 %0, i32 32, i64 %call8)
  %1 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 7), align 8
  %call9 = call i64 @builtin_lisp_symbol(i32 901)
  call void @CHAR_TABLE_SET(i64 %1, i32 10, i64 %call9)
  br label %do.body.10

do.body.10:                                       ; preds = %do.end.4
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd.7, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28))
  br label %do.end.11

do.end.11:                                        ; preds = %do.body.10
  %call12 = call i64 @builtin_lisp_symbol(i32 0)
  %call13 = call i64 @Fmake_char_table(i64 %call12, i64 6)
  store i64 %call13, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  %2 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  call void @char_table_set_range(i64 %2, i32 128, i32 159, i64 18)
  %3 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 28), align 8
  call void @char_table_set_range(i64 %3, i32 4194176, i32 4194303, i64 18)
  br label %do.body.14

do.body.14:                                       ; preds = %do.end.11
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd.9, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 235))
  br label %do.end.15

do.end.15:                                        ; preds = %do.body.14
  %call16 = call i64 @builtin_lisp_symbol(i32 0)
  %call17 = call i64 @builtin_lisp_symbol(i32 0)
  %call18 = call i64 @Fmake_char_table(i64 %call16, i64 %call17)
  store i64 %call18, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 235), align 8
  %4 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 235), align 8
  %call19 = call i64 @Fcons(i64 130, i64 506)
  %call20 = call i64 @builtin_lisp_symbol(i32 901)
  %call21 = call i64 @Fset_char_table_range(i64 %4, i64 %call19, i64 %call20)
  %5 = load i64, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 235), align 8
  %call22 = call i64 @Fcons(i64 642, i64 16776702)
  %call23 = call i64 @builtin_lisp_symbol(i32 901)
  %call24 = call i64 @Fset_char_table_range(i64 %5, i64 %call22, i64 %call23)
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.15
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd.11, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 27))
  br label %do.end.26

do.end.26:                                        ; preds = %do.body.25
  %call27 = call i64 @builtin_lisp_symbol(i32 256)
  %call28 = call i64 @builtin_lisp_symbol(i32 258)
  %call29 = call i64 @Fput(i64 %call27, i64 %call28, i64 6)
  %call30 = call i64 @builtin_lisp_symbol(i32 256)
  %call31 = call i64 @builtin_lisp_symbol(i32 0)
  %call32 = call i64 @Fmake_char_table(i64 %call30, i64 %call31)
  store i64 %call32, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 27), align 8
  br label %do.body.33

do.body.33:                                       ; preds = %do.end.26
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd.13, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 260))
  br label %do.end.34

do.end.34:                                        ; preds = %do.body.33
  %call35 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call35, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 260), align 8
  br label %do.body.36

do.body.36:                                       ; preds = %do.end.34
  call void @defvar_lisp(%struct.Lisp_Objfwd* @syms_of_character.o_fwd.15, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i32 0, i32 0), i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314))
  br label %do.end.37

do.end.37:                                        ; preds = %do.body.36
  %call38 = call i64 @builtin_lisp_symbol(i32 0)
  store i64 %call38, i64* getelementptr inbounds (%struct.emacs_globals, %struct.emacs_globals* @globals, i32 0, i32 314), align 8
  ret void
}

declare void @staticpro(i64*) #3

declare void @defsubr(%struct.Lisp_Subr*) #3

declare void @defvar_lisp(%struct.Lisp_Objfwd*, i8*, i64*) #3

declare i64 @Fmake_vector(i64, i64) #3

declare i64 @Fmake_char_table(i64, i64) #3

declare void @CHAR_TABLE_SET(i64, i32, i64) #3

declare void @char_table_set_range(i64, i32, i32, i64) #3

declare i64 @Fset_char_table_range(i64, i64, i64) #3

declare i64 @Fcons(i64, i64) #3

declare i64 @Fput(i64, i64, i64) #3

declare i32 @sanitize_tab_width(i64) #3

declare i32 @sanitize_char_width(i64) #3

declare zeroext i1 @SUB_CHAR_TABLE_P(i64) #3

declare %struct.Lisp_Sub_Char_Table* @XSUB_CHAR_TABLE(i64) #3

declare i64 @disp_char_vector(%struct.Lisp_Char_Table*, i32) #3

declare zeroext i1 @VECTORP(i64) #3

declare i64 @ASIZE(i64) #3

declare i64 @AREF(i64, i64) #3

attributes #0 = { nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
