; ModuleID = './MultiSource.Applications.SPASS/17.dfgscanner.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.yy_buffer_state = type { %struct._IO_FILE*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32 }
%union.yystype = type { i8* }

@dfg_in = global %struct._IO_FILE* null, align 8
@dfg_out = global %struct._IO_FILE* null, align 8
@yy_init = internal global i32 1, align 4
@yy_start = internal global i32 0, align 4
@stdin = external global %struct._IO_FILE*, align 8
@stdout = external global %struct._IO_FILE*, align 8
@yy_current_buffer = internal global %struct.yy_buffer_state* null, align 8
@yy_more_len = internal global i32 0, align 4
@yy_more_flag = internal global i32 0, align 4
@yy_c_buf_p = internal global i8* null, align 8
@dfg_text = common global i8* null, align 8
@yy_hold_char = internal global i8 0, align 1
@yy_ec = internal constant [256 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 3, i32 1, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 4, i32 1, i32 1, i32 5, i32 5, i32 6, i32 1, i32 5, i32 7, i32 5, i32 1, i32 8, i32 9, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 5, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 10, i32 10, i32 10, i32 11, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 12, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 5, i32 1, i32 5, i32 1, i32 13, i32 1, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 10, i32 39, i32 1, i32 40, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], align 16
@yy_nxt = internal constant [380 x [41 x i16]] [[41 x i16] zeroinitializer, [41 x i16] [i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 13, i16 14, i16 14, i16 14, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 14, i16 14, i16 24, i16 14, i16 25, i16 26, i16 27, i16 28, i16 14, i16 29, i16 30, i16 31, i16 32, i16 14, i16 14, i16 14, i16 33, i16 6], [41 x i16] [i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 13, i16 14, i16 14, i16 14, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 14, i16 14, i16 24, i16 14, i16 25, i16 26, i16 27, i16 28, i16 14, i16 29, i16 30, i16 31, i16 32, i16 14, i16 14, i16 14, i16 33, i16 6], [41 x i16] [i16 5, i16 34, i16 34, i16 34, i16 34, i16 34, i16 35, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34], [41 x i16] [i16 5, i16 34, i16 34, i16 34, i16 34, i16 34, i16 35, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34, i16 34], [41 x i16] [i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5, i16 -5], [41 x i16] [i16 5, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6, i16 -6], [41 x i16] [i16 5, i16 -7, i16 36, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7, i16 -7], [41 x i16] [i16 5, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8], [41 x i16] [i16 5, i16 37, i16 37, i16 -9, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37], [41 x i16] [i16 5, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10, i16 -10], [41 x i16] [i16 5, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 -11, i16 38], [41 x i16] [i16 5, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 39, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12, i16 -12], [41 x i16] [i16 5, i16 -13, i16 -13, i16 -13, i16 -13, i16 -13, i16 -13, i16 -13, i16 40, i16 40, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -13, i16 -13], [41 x i16] [i16 5, i16 -14, i16 -14, i16 -14, i16 -14, i16 -14, i16 -14, i16 -14, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -14, i16 -14], [41 x i16] [i16 5, i16 -15, i16 -15, i16 -15, i16 -15, i16 -15, i16 -15, i16 -15, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 42, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 43, i16 41, i16 41, i16 44, i16 41, i16 -15, i16 -15], [41 x i16] [i16 5, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 45, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 46, i16 -16, i16 -16], [41 x i16] [i16 5, i16 -17, i16 -17, i16 -17, i16 -17, i16 -17, i16 -17, i16 -17, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 47, i16 41, i16 48, i16 49, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -17, i16 -17], [41 x i16] [i16 5, i16 -18, i16 -18, i16 -18, i16 -18, i16 -18, i16 -18, i16 -18, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 50, i16 41, i16 41, i16 41, i16 51, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 52, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -18, i16 -18], [41 x i16] [i16 5, i16 -19, i16 -19, i16 -19, i16 -19, i16 -19, i16 -19, i16 -19, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 53, i16 41, i16 41, i16 54, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 55, i16 41, i16 -19, i16 -19], [41 x i16] [i16 5, i16 -20, i16 -20, i16 -20, i16 -20, i16 -20, i16 -20, i16 -20, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 56, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 57, i16 41, i16 41, i16 58, i16 41, i16 41, i16 59, i16 41, i16 41, i16 41, i16 41, i16 -20, i16 -20], [41 x i16] [i16 5, i16 -21, i16 -21, i16 -21, i16 -21, i16 -21, i16 -21, i16 -21, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 60, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -21, i16 -21], [41 x i16] [i16 5, i16 -22, i16 -22, i16 -22, i16 -22, i16 -22, i16 -22, i16 -22, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 61, i16 -22, i16 -22], [41 x i16] [i16 5, i16 -23, i16 -23, i16 -23, i16 -23, i16 -23, i16 -23, i16 -23, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 62, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -23, i16 -23], [41 x i16] [i16 5, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 63, i16 41, i16 41, i16 41, i16 41, i16 41, i16 64, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -24, i16 -24], [41 x i16] [i16 5, i16 -25, i16 -25, i16 -25, i16 -25, i16 -25, i16 -25, i16 -25, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 65, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 66, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -25, i16 -25], [41 x i16] [i16 5, i16 -26, i16 -26, i16 -26, i16 -26, i16 -26, i16 -26, i16 -26, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 67, i16 41, i16 68, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -26, i16 -26], [41 x i16] [i16 5, i16 -27, i16 -27, i16 -27, i16 -27, i16 -27, i16 -27, i16 -27, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 69, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -27, i16 -27], [41 x i16] [i16 5, i16 -28, i16 -28, i16 -28, i16 -28, i16 -28, i16 -28, i16 -28, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 70, i16 41, i16 41, i16 41, i16 41, i16 -28, i16 -28], [41 x i16] [i16 5, i16 -29, i16 -29, i16 -29, i16 -29, i16 -29, i16 -29, i16 -29, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 71, i16 41, i16 41, i16 41, i16 72, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 73, i16 41, i16 41, i16 41, i16 41, i16 74, i16 75, i16 41, i16 41, i16 41, i16 41, i16 -29, i16 -29], [41 x i16] [i16 5, i16 -30, i16 -30, i16 -30, i16 -30, i16 -30, i16 -30, i16 -30, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 76, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -30, i16 -30], [41 x i16] [i16 5, i16 -31, i16 -31, i16 -31, i16 -31, i16 -31, i16 -31, i16 -31, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 77, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -31, i16 -31], [41 x i16] [i16 5, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 78, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -32, i16 -32], [41 x i16] [i16 5, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 79, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33, i16 -33], [41 x i16] [i16 5, i16 80, i16 80, i16 80, i16 80, i16 80, i16 -34, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80], [41 x i16] [i16 5, i16 81, i16 81, i16 81, i16 81, i16 81, i16 82, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 83], [41 x i16] [i16 5, i16 -36, i16 36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36, i16 -36], [41 x i16] [i16 5, i16 37, i16 37, i16 -37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37, i16 37], [41 x i16] [i16 5, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38, i16 -38], [41 x i16] [i16 5, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39, i16 -39], [41 x i16] [i16 5, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 40, i16 40, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -40, i16 -40], [41 x i16] [i16 5, i16 -41, i16 -41, i16 -41, i16 -41, i16 -41, i16 -41, i16 -41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -41, i16 -41], [41 x i16] [i16 5, i16 -42, i16 -42, i16 -42, i16 -42, i16 -42, i16 -42, i16 -42, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 84, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -42, i16 -42], [41 x i16] [i16 5, i16 -43, i16 -43, i16 -43, i16 -43, i16 -43, i16 -43, i16 -43, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 85, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -43, i16 -43], [41 x i16] [i16 5, i16 -44, i16 -44, i16 -44, i16 -44, i16 -44, i16 -44, i16 -44, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 86, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -44, i16 -44], [41 x i16] [i16 5, i16 -45, i16 -45, i16 -45, i16 -45, i16 -45, i16 -45, i16 -45, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 87, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -45, i16 -45], [41 x i16] [i16 5, i16 -46, i16 -46, i16 -46, i16 -46, i16 -46, i16 -46, i16 -46, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -46, i16 -46], [41 x i16] [i16 5, i16 -47, i16 -47, i16 -47, i16 -47, i16 -47, i16 -47, i16 -47, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 88, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -47, i16 -47], [41 x i16] [i16 5, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 89, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -48, i16 -48], [41 x i16] [i16 5, i16 -49, i16 -49, i16 -49, i16 -49, i16 -49, i16 -49, i16 -49, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 90, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -49, i16 -49], [41 x i16] [i16 5, i16 -50, i16 -50, i16 -50, i16 -50, i16 -50, i16 -50, i16 -50, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 91, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -50, i16 -50], [41 x i16] [i16 5, i16 -51, i16 -51, i16 -51, i16 -51, i16 -51, i16 -51, i16 -51, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 92, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -51, i16 -51], [41 x i16] [i16 5, i16 -52, i16 -52, i16 -52, i16 -52, i16 -52, i16 -52, i16 -52, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 93, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -52, i16 -52], [41 x i16] [i16 5, i16 -53, i16 -53, i16 -53, i16 -53, i16 -53, i16 -53, i16 -53, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 94, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -53, i16 -53], [41 x i16] [i16 5, i16 -54, i16 -54, i16 -54, i16 -54, i16 -54, i16 -54, i16 -54, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 95, i16 41, i16 41, i16 41, i16 41, i16 -54, i16 -54], [41 x i16] [i16 5, i16 -55, i16 -55, i16 -55, i16 -55, i16 -55, i16 -55, i16 -55, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 96, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -55, i16 -55], [41 x i16] [i16 5, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 97, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -56, i16 -56], [41 x i16] [i16 5, i16 -57, i16 -57, i16 -57, i16 -57, i16 -57, i16 -57, i16 -57, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 98, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -57, i16 -57], [41 x i16] [i16 5, i16 -58, i16 -58, i16 -58, i16 -58, i16 -58, i16 -58, i16 -58, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 99, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -58, i16 -58], [41 x i16] [i16 5, i16 -59, i16 -59, i16 -59, i16 -59, i16 -59, i16 -59, i16 -59, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 100, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -59, i16 -59], [41 x i16] [i16 5, i16 -60, i16 -60, i16 -60, i16 -60, i16 -60, i16 -60, i16 -60, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 101, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -60, i16 -60], [41 x i16] [i16 5, i16 -61, i16 -61, i16 -61, i16 -61, i16 -61, i16 -61, i16 -61, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 102, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -61, i16 -61], [41 x i16] [i16 5, i16 -62, i16 -62, i16 -62, i16 -62, i16 -62, i16 -62, i16 -62, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 103, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -62, i16 -62], [41 x i16] [i16 5, i16 -63, i16 -63, i16 -63, i16 -63, i16 -63, i16 -63, i16 -63, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 104, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -63, i16 -63], [41 x i16] [i16 5, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 105, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -64, i16 -64], [41 x i16] [i16 5, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 -65, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 106, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -65, i16 -65], [41 x i16] [i16 5, i16 -66, i16 -66, i16 -66, i16 -66, i16 -66, i16 -66, i16 -66, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 107, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -66, i16 -66], [41 x i16] [i16 5, i16 -67, i16 -67, i16 -67, i16 -67, i16 -67, i16 -67, i16 -67, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 108, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -67, i16 -67], [41 x i16] [i16 5, i16 -68, i16 -68, i16 -68, i16 -68, i16 -68, i16 -68, i16 -68, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -68, i16 -68], [41 x i16] [i16 5, i16 -69, i16 -69, i16 -69, i16 -69, i16 -69, i16 -69, i16 -69, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 109, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -69, i16 -69], [41 x i16] [i16 5, i16 -70, i16 -70, i16 -70, i16 -70, i16 -70, i16 -70, i16 -70, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 110, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -70, i16 -70], [41 x i16] [i16 5, i16 -71, i16 -71, i16 -71, i16 -71, i16 -71, i16 -71, i16 -71, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 111, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -71, i16 -71], [41 x i16] [i16 5, i16 -72, i16 -72, i16 -72, i16 -72, i16 -72, i16 -72, i16 -72, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 112, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -72, i16 -72], [41 x i16] [i16 5, i16 -73, i16 -73, i16 -73, i16 -73, i16 -73, i16 -73, i16 -73, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 113, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -73, i16 -73], [41 x i16] [i16 5, i16 -74, i16 -74, i16 -74, i16 -74, i16 -74, i16 -74, i16 -74, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 114, i16 41, i16 41, i16 41, i16 115, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -74, i16 -74], [41 x i16] [i16 5, i16 -75, i16 -75, i16 -75, i16 -75, i16 -75, i16 -75, i16 -75, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 116, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -75, i16 -75], [41 x i16] [i16 5, i16 -76, i16 -76, i16 -76, i16 -76, i16 -76, i16 -76, i16 -76, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 117, i16 41, i16 41, i16 41, i16 41, i16 -76, i16 -76], [41 x i16] [i16 5, i16 -77, i16 -77, i16 -77, i16 -77, i16 -77, i16 -77, i16 -77, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 118, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 119, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -77, i16 -77], [41 x i16] [i16 5, i16 -78, i16 -78, i16 -78, i16 -78, i16 -78, i16 -78, i16 -78, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 120, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -78, i16 -78], [41 x i16] [i16 5, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79, i16 -79], [41 x i16] [i16 5, i16 80, i16 80, i16 80, i16 80, i16 80, i16 -80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80, i16 80], [41 x i16] [i16 5, i16 81, i16 81, i16 81, i16 81, i16 81, i16 -81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 -81], [41 x i16] [i16 5, i16 81, i16 81, i16 81, i16 81, i16 81, i16 82, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 81, i16 83], [41 x i16] [i16 5, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83, i16 -83], [41 x i16] [i16 5, i16 -84, i16 -84, i16 -84, i16 -84, i16 -84, i16 -84, i16 -84, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -84, i16 -84], [41 x i16] [i16 5, i16 -85, i16 -85, i16 -85, i16 -85, i16 -85, i16 -85, i16 -85, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 121, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -85, i16 -85], [41 x i16] [i16 5, i16 -86, i16 -86, i16 -86, i16 -86, i16 -86, i16 -86, i16 -86, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 122, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -86, i16 -86], [41 x i16] [i16 5, i16 -87, i16 -87, i16 -87, i16 -87, i16 -87, i16 -87, i16 -87, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 123, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -87, i16 -87], [41 x i16] [i16 5, i16 -88, i16 -88, i16 -88, i16 -88, i16 -88, i16 -88, i16 -88, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 124, i16 41, i16 41, i16 41, i16 41, i16 -88, i16 -88], [41 x i16] [i16 5, i16 -89, i16 -89, i16 -89, i16 -89, i16 -89, i16 -89, i16 -89, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -89, i16 -89], [41 x i16] [i16 5, i16 -90, i16 -90, i16 -90, i16 -90, i16 -90, i16 -90, i16 -90, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 125, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -90, i16 -90], [41 x i16] [i16 5, i16 -91, i16 -91, i16 -91, i16 -91, i16 -91, i16 -91, i16 -91, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 126, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -91, i16 -91], [41 x i16] [i16 5, i16 -92, i16 -92, i16 -92, i16 -92, i16 -92, i16 -92, i16 -92, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 127, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -92, i16 -92], [41 x i16] [i16 5, i16 -93, i16 -93, i16 -93, i16 -93, i16 -93, i16 -93, i16 -93, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -93, i16 -93], [41 x i16] [i16 5, i16 -94, i16 -94, i16 -94, i16 -94, i16 -94, i16 -94, i16 -94, i16 41, i16 41, i16 41, i16 41, i16 41, i16 128, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -94, i16 -94], [41 x i16] [i16 5, i16 -95, i16 -95, i16 -95, i16 -95, i16 -95, i16 -95, i16 -95, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 129, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 130, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -95, i16 -95], [41 x i16] [i16 5, i16 -96, i16 -96, i16 -96, i16 -96, i16 -96, i16 -96, i16 -96, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 131, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -96, i16 -96], [41 x i16] [i16 5, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 -97, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 132, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -97, i16 -97], [41 x i16] [i16 5, i16 -98, i16 -98, i16 -98, i16 -98, i16 -98, i16 -98, i16 -98, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 133, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 134, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -98, i16 -98], [41 x i16] [i16 5, i16 -99, i16 -99, i16 -99, i16 -99, i16 -99, i16 -99, i16 -99, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 135, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -99, i16 -99], [41 x i16] [i16 5, i16 -100, i16 -100, i16 -100, i16 -100, i16 -100, i16 -100, i16 -100, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 136, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -100, i16 -100], [41 x i16] [i16 5, i16 -101, i16 -101, i16 -101, i16 -101, i16 -101, i16 -101, i16 -101, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 137, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -101, i16 -101], [41 x i16] [i16 5, i16 -102, i16 -102, i16 -102, i16 -102, i16 -102, i16 -102, i16 -102, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 138, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -102, i16 -102], [41 x i16] [i16 5, i16 -103, i16 -103, i16 -103, i16 -103, i16 -103, i16 -103, i16 -103, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 139, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -103, i16 -103], [41 x i16] [i16 5, i16 -104, i16 -104, i16 -104, i16 -104, i16 -104, i16 -104, i16 -104, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 140, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -104, i16 -104], [41 x i16] [i16 5, i16 -105, i16 -105, i16 -105, i16 -105, i16 -105, i16 -105, i16 -105, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 141, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -105, i16 -105], [41 x i16] [i16 5, i16 -106, i16 -106, i16 -106, i16 -106, i16 -106, i16 -106, i16 -106, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 142, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -106, i16 -106], [41 x i16] [i16 5, i16 -107, i16 -107, i16 -107, i16 -107, i16 -107, i16 -107, i16 -107, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -107, i16 -107], [41 x i16] [i16 5, i16 -108, i16 -108, i16 -108, i16 -108, i16 -108, i16 -108, i16 -108, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 143, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -108, i16 -108], [41 x i16] [i16 5, i16 -109, i16 -109, i16 -109, i16 -109, i16 -109, i16 -109, i16 -109, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 144, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -109, i16 -109], [41 x i16] [i16 5, i16 -110, i16 -110, i16 -110, i16 -110, i16 -110, i16 -110, i16 -110, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 145, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -110, i16 -110], [41 x i16] [i16 5, i16 -111, i16 -111, i16 -111, i16 -111, i16 -111, i16 -111, i16 -111, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 146, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -111, i16 -111], [41 x i16] [i16 5, i16 -112, i16 -112, i16 -112, i16 -112, i16 -112, i16 -112, i16 -112, i16 41, i16 41, i16 41, i16 41, i16 41, i16 147, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -112, i16 -112], [41 x i16] [i16 5, i16 -113, i16 -113, i16 -113, i16 -113, i16 -113, i16 -113, i16 -113, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 148, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -113, i16 -113], [41 x i16] [i16 5, i16 -114, i16 -114, i16 -114, i16 -114, i16 -114, i16 -114, i16 -114, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 149, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -114, i16 -114], [41 x i16] [i16 5, i16 -115, i16 -115, i16 -115, i16 -115, i16 -115, i16 -115, i16 -115, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 150, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -115, i16 -115], [41 x i16] [i16 5, i16 -116, i16 -116, i16 -116, i16 -116, i16 -116, i16 -116, i16 -116, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 151, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -116, i16 -116], [41 x i16] [i16 5, i16 -117, i16 -117, i16 -117, i16 -117, i16 -117, i16 -117, i16 -117, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 152, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -117, i16 -117], [41 x i16] [i16 5, i16 -118, i16 -118, i16 -118, i16 -118, i16 -118, i16 -118, i16 -118, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 153, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -118, i16 -118], [41 x i16] [i16 5, i16 -119, i16 -119, i16 -119, i16 -119, i16 -119, i16 -119, i16 -119, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 154, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -119, i16 -119], [41 x i16] [i16 5, i16 -120, i16 -120, i16 -120, i16 -120, i16 -120, i16 -120, i16 -120, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 155, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -120, i16 -120], [41 x i16] [i16 5, i16 -121, i16 -121, i16 -121, i16 -121, i16 -121, i16 -121, i16 -121, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 156, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -121, i16 -121], [41 x i16] [i16 5, i16 -122, i16 -122, i16 -122, i16 -122, i16 -122, i16 -122, i16 -122, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 157, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -122, i16 -122], [41 x i16] [i16 5, i16 -123, i16 -123, i16 -123, i16 -123, i16 -123, i16 -123, i16 -123, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 158, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -123, i16 -123], [41 x i16] [i16 5, i16 -124, i16 -124, i16 -124, i16 -124, i16 -124, i16 -124, i16 -124, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 159, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -124, i16 -124], [41 x i16] [i16 5, i16 -125, i16 -125, i16 -125, i16 -125, i16 -125, i16 -125, i16 -125, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 160, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -125, i16 -125], [41 x i16] [i16 5, i16 -126, i16 -126, i16 -126, i16 -126, i16 -126, i16 -126, i16 -126, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -126, i16 -126], [41 x i16] [i16 5, i16 -127, i16 -127, i16 -127, i16 -127, i16 -127, i16 -127, i16 -127, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 161, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -127, i16 -127], [41 x i16] [i16 5, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 162, i16 163, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -128, i16 -128], [41 x i16] [i16 5, i16 -129, i16 -129, i16 -129, i16 -129, i16 -129, i16 -129, i16 -129, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 164, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -129, i16 -129], [41 x i16] [i16 5, i16 -130, i16 -130, i16 -130, i16 -130, i16 -130, i16 -130, i16 -130, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 165, i16 41, i16 41, i16 41, i16 -130, i16 -130], [41 x i16] [i16 5, i16 -131, i16 -131, i16 -131, i16 -131, i16 -131, i16 -131, i16 -131, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 166, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -131, i16 -131], [41 x i16] [i16 5, i16 -132, i16 -132, i16 -132, i16 -132, i16 -132, i16 -132, i16 -132, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 167, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -132, i16 -132], [41 x i16] [i16 5, i16 -133, i16 -133, i16 -133, i16 -133, i16 -133, i16 -133, i16 -133, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 168, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -133, i16 -133], [41 x i16] [i16 5, i16 -134, i16 -134, i16 -134, i16 -134, i16 -134, i16 -134, i16 -134, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 169, i16 41, i16 41, i16 41, i16 41, i16 -134, i16 -134], [41 x i16] [i16 5, i16 -135, i16 -135, i16 -135, i16 -135, i16 -135, i16 -135, i16 -135, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 170, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -135, i16 -135], [41 x i16] [i16 5, i16 -136, i16 -136, i16 -136, i16 -136, i16 -136, i16 -136, i16 -136, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 171, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -136, i16 -136], [41 x i16] [i16 5, i16 -137, i16 -137, i16 -137, i16 -137, i16 -137, i16 -137, i16 -137, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 172, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -137, i16 -137], [41 x i16] [i16 5, i16 -138, i16 -138, i16 -138, i16 -138, i16 -138, i16 -138, i16 -138, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 173, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -138, i16 -138], [41 x i16] [i16 5, i16 -139, i16 -139, i16 -139, i16 -139, i16 -139, i16 -139, i16 -139, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 174, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -139, i16 -139], [41 x i16] [i16 5, i16 -140, i16 -140, i16 -140, i16 -140, i16 -140, i16 -140, i16 -140, i16 41, i16 41, i16 41, i16 41, i16 41, i16 175, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -140, i16 -140], [41 x i16] [i16 5, i16 -141, i16 -141, i16 -141, i16 -141, i16 -141, i16 -141, i16 -141, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 176, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -141, i16 -141], [41 x i16] [i16 5, i16 -142, i16 -142, i16 -142, i16 -142, i16 -142, i16 -142, i16 -142, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -142, i16 -142], [41 x i16] [i16 5, i16 -143, i16 -143, i16 -143, i16 -143, i16 -143, i16 -143, i16 -143, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 177, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -143, i16 -143], [41 x i16] [i16 5, i16 -144, i16 -144, i16 -144, i16 -144, i16 -144, i16 -144, i16 -144, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 178, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -144, i16 -144], [41 x i16] [i16 5, i16 -145, i16 -145, i16 -145, i16 -145, i16 -145, i16 -145, i16 -145, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 179, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -145, i16 -145], [41 x i16] [i16 5, i16 -146, i16 -146, i16 -146, i16 -146, i16 -146, i16 -146, i16 -146, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 180, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -146, i16 -146], [41 x i16] [i16 5, i16 -147, i16 -147, i16 -147, i16 -147, i16 -147, i16 -147, i16 -147, i16 41, i16 41, i16 41, i16 181, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 182, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 183, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -147, i16 -147], [41 x i16] [i16 5, i16 -148, i16 -148, i16 -148, i16 -148, i16 -148, i16 -148, i16 -148, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 184, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -148, i16 -148], [41 x i16] [i16 5, i16 -149, i16 -149, i16 -149, i16 -149, i16 -149, i16 -149, i16 -149, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 185, i16 41, i16 41, i16 41, i16 41, i16 -149, i16 -149], [41 x i16] [i16 5, i16 -150, i16 -150, i16 -150, i16 -150, i16 -150, i16 -150, i16 -150, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -150, i16 -150], [41 x i16] [i16 5, i16 -151, i16 -151, i16 -151, i16 -151, i16 -151, i16 -151, i16 -151, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 186, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -151, i16 -151], [41 x i16] [i16 5, i16 -152, i16 -152, i16 -152, i16 -152, i16 -152, i16 -152, i16 -152, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -152, i16 -152], [41 x i16] [i16 5, i16 -153, i16 -153, i16 -153, i16 -153, i16 -153, i16 -153, i16 -153, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 187, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -153, i16 -153], [41 x i16] [i16 5, i16 -154, i16 -154, i16 -154, i16 -154, i16 -154, i16 -154, i16 -154, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 188, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -154, i16 -154], [41 x i16] [i16 5, i16 -155, i16 -155, i16 -155, i16 -155, i16 -155, i16 -155, i16 -155, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 189, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -155, i16 -155], [41 x i16] [i16 5, i16 -156, i16 -156, i16 -156, i16 -156, i16 -156, i16 -156, i16 -156, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 190, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -156, i16 -156], [41 x i16] [i16 5, i16 -157, i16 -157, i16 -157, i16 -157, i16 -157, i16 -157, i16 -157, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 191, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -157, i16 -157], [41 x i16] [i16 5, i16 -158, i16 -158, i16 -158, i16 -158, i16 -158, i16 -158, i16 -158, i16 41, i16 41, i16 41, i16 41, i16 41, i16 192, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -158, i16 -158], [41 x i16] [i16 5, i16 -159, i16 -159, i16 -159, i16 -159, i16 -159, i16 -159, i16 -159, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 193, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -159, i16 -159], [41 x i16] [i16 5, i16 -160, i16 -160, i16 -160, i16 -160, i16 -160, i16 -160, i16 -160, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 194, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -160, i16 -160], [41 x i16] [i16 5, i16 -161, i16 -161, i16 -161, i16 -161, i16 -161, i16 -161, i16 -161, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 195, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -161, i16 -161], [41 x i16] [i16 5, i16 -162, i16 -162, i16 -162, i16 -162, i16 -162, i16 -162, i16 -162, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 196, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -162, i16 -162], [41 x i16] [i16 5, i16 -163, i16 -163, i16 -163, i16 -163, i16 -163, i16 -163, i16 -163, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 197, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -163, i16 -163], [41 x i16] [i16 5, i16 -164, i16 -164, i16 -164, i16 -164, i16 -164, i16 -164, i16 -164, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -164, i16 -164], [41 x i16] [i16 5, i16 -165, i16 -165, i16 -165, i16 -165, i16 -165, i16 -165, i16 -165, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -165, i16 -165], [41 x i16] [i16 5, i16 -166, i16 -166, i16 -166, i16 -166, i16 -166, i16 -166, i16 -166, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 198, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -166, i16 -166], [41 x i16] [i16 5, i16 -167, i16 -167, i16 -167, i16 -167, i16 -167, i16 -167, i16 -167, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -167, i16 -167], [41 x i16] [i16 5, i16 -168, i16 -168, i16 -168, i16 -168, i16 -168, i16 -168, i16 -168, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 199, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -168, i16 -168], [41 x i16] [i16 5, i16 -169, i16 -169, i16 -169, i16 -169, i16 -169, i16 -169, i16 -169, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 200, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -169, i16 -169], [41 x i16] [i16 5, i16 -170, i16 -170, i16 -170, i16 -170, i16 -170, i16 -170, i16 -170, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 201, i16 -170, i16 -170], [41 x i16] [i16 5, i16 -171, i16 -171, i16 -171, i16 -171, i16 -171, i16 -171, i16 -171, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 202, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -171, i16 -171], [41 x i16] [i16 5, i16 -172, i16 -172, i16 -172, i16 -172, i16 -172, i16 -172, i16 -172, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 203, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -172, i16 -172], [41 x i16] [i16 5, i16 -173, i16 -173, i16 -173, i16 -173, i16 -173, i16 -173, i16 -173, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 204, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -173, i16 -173], [41 x i16] [i16 5, i16 -174, i16 -174, i16 -174, i16 -174, i16 -174, i16 -174, i16 -174, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 205, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -174, i16 -174], [41 x i16] [i16 5, i16 -175, i16 -175, i16 -175, i16 -175, i16 -175, i16 -175, i16 -175, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 206, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -175, i16 -175], [41 x i16] [i16 5, i16 -176, i16 -176, i16 -176, i16 -176, i16 -176, i16 -176, i16 -176, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -176, i16 -176], [41 x i16] [i16 5, i16 -177, i16 -177, i16 -177, i16 -177, i16 -177, i16 -177, i16 -177, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 207, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -177, i16 -177], [41 x i16] [i16 5, i16 -178, i16 -178, i16 -178, i16 -178, i16 -178, i16 -178, i16 -178, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 208, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -178, i16 -178], [41 x i16] [i16 5, i16 -179, i16 -179, i16 -179, i16 -179, i16 -179, i16 -179, i16 -179, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 209, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -179, i16 -179], [41 x i16] [i16 5, i16 -180, i16 -180, i16 -180, i16 -180, i16 -180, i16 -180, i16 -180, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 210, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -180, i16 -180], [41 x i16] [i16 5, i16 -181, i16 -181, i16 -181, i16 -181, i16 -181, i16 -181, i16 -181, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 211, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -181, i16 -181], [41 x i16] [i16 5, i16 -182, i16 -182, i16 -182, i16 -182, i16 -182, i16 -182, i16 -182, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 212, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -182, i16 -182], [41 x i16] [i16 5, i16 -183, i16 -183, i16 -183, i16 -183, i16 -183, i16 -183, i16 -183, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 213, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -183, i16 -183], [41 x i16] [i16 5, i16 -184, i16 -184, i16 -184, i16 -184, i16 -184, i16 -184, i16 -184, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -184, i16 -184], [41 x i16] [i16 5, i16 -185, i16 -185, i16 -185, i16 -185, i16 -185, i16 -185, i16 -185, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 214, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -185, i16 -185], [41 x i16] [i16 5, i16 -186, i16 -186, i16 -186, i16 -186, i16 -186, i16 -186, i16 -186, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 215, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -186, i16 -186], [41 x i16] [i16 5, i16 -187, i16 -187, i16 -187, i16 -187, i16 -187, i16 -187, i16 -187, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 216, i16 41, i16 41, i16 -187, i16 -187], [41 x i16] [i16 5, i16 -188, i16 -188, i16 -188, i16 -188, i16 -188, i16 -188, i16 -188, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 217, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -188, i16 -188], [41 x i16] [i16 5, i16 -189, i16 -189, i16 -189, i16 -189, i16 -189, i16 -189, i16 -189, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 218, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -189, i16 -189], [41 x i16] [i16 5, i16 -190, i16 -190, i16 -190, i16 -190, i16 -190, i16 -190, i16 -190, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -190, i16 -190], [41 x i16] [i16 5, i16 -191, i16 -191, i16 -191, i16 -191, i16 -191, i16 -191, i16 -191, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -191, i16 -191], [41 x i16] [i16 5, i16 -192, i16 -192, i16 -192, i16 -192, i16 -192, i16 -192, i16 -192, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 219, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -192, i16 -192], [41 x i16] [i16 5, i16 -193, i16 -193, i16 -193, i16 -193, i16 -193, i16 -193, i16 -193, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -193, i16 -193], [41 x i16] [i16 5, i16 -194, i16 -194, i16 -194, i16 -194, i16 -194, i16 -194, i16 -194, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 220, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -194, i16 -194], [41 x i16] [i16 5, i16 -195, i16 -195, i16 -195, i16 -195, i16 -195, i16 -195, i16 -195, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 221, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -195, i16 -195], [41 x i16] [i16 5, i16 -196, i16 -196, i16 -196, i16 -196, i16 -196, i16 -196, i16 -196, i16 41, i16 41, i16 41, i16 41, i16 41, i16 222, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -196, i16 -196], [41 x i16] [i16 5, i16 -197, i16 -197, i16 -197, i16 -197, i16 -197, i16 -197, i16 -197, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 223, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -197, i16 -197], [41 x i16] [i16 5, i16 -198, i16 -198, i16 -198, i16 -198, i16 -198, i16 -198, i16 -198, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -198, i16 -198], [41 x i16] [i16 5, i16 -199, i16 -199, i16 -199, i16 -199, i16 -199, i16 -199, i16 -199, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -199, i16 -199], [41 x i16] [i16 5, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 224, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -200, i16 -200], [41 x i16] [i16 5, i16 -201, i16 -201, i16 -201, i16 -201, i16 -201, i16 -201, i16 -201, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -201, i16 -201], [41 x i16] [i16 5, i16 -202, i16 -202, i16 -202, i16 -202, i16 -202, i16 -202, i16 -202, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 225, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -202, i16 -202], [41 x i16] [i16 5, i16 -203, i16 -203, i16 -203, i16 -203, i16 -203, i16 -203, i16 -203, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 226, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -203, i16 -203], [41 x i16] [i16 5, i16 -204, i16 -204, i16 -204, i16 -204, i16 -204, i16 -204, i16 -204, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 227, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -204, i16 -204], [41 x i16] [i16 5, i16 -205, i16 -205, i16 -205, i16 -205, i16 -205, i16 -205, i16 -205, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 228, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 229, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -205, i16 -205], [41 x i16] [i16 5, i16 -206, i16 -206, i16 -206, i16 -206, i16 -206, i16 -206, i16 -206, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 230, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -206, i16 -206], [41 x i16] [i16 5, i16 -207, i16 -207, i16 -207, i16 -207, i16 -207, i16 -207, i16 -207, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 231, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -207, i16 -207], [41 x i16] [i16 5, i16 -208, i16 -208, i16 -208, i16 -208, i16 -208, i16 -208, i16 -208, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 232, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -208, i16 -208], [41 x i16] [i16 5, i16 -209, i16 -209, i16 -209, i16 -209, i16 -209, i16 -209, i16 -209, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 233, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -209, i16 -209], [41 x i16] [i16 5, i16 -210, i16 -210, i16 -210, i16 -210, i16 -210, i16 -210, i16 -210, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 234, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -210, i16 -210], [41 x i16] [i16 5, i16 -211, i16 -211, i16 -211, i16 -211, i16 -211, i16 -211, i16 -211, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 235, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -211, i16 -211], [41 x i16] [i16 5, i16 -212, i16 -212, i16 -212, i16 -212, i16 -212, i16 -212, i16 -212, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 236, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -212, i16 -212], [41 x i16] [i16 5, i16 -213, i16 -213, i16 -213, i16 -213, i16 -213, i16 -213, i16 -213, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 237, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -213, i16 -213], [41 x i16] [i16 5, i16 -214, i16 -214, i16 -214, i16 -214, i16 -214, i16 -214, i16 -214, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -214, i16 -214], [41 x i16] [i16 5, i16 -215, i16 -215, i16 -215, i16 -215, i16 -215, i16 -215, i16 -215, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 238, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -215, i16 -215], [41 x i16] [i16 5, i16 -216, i16 -216, i16 -216, i16 -216, i16 -216, i16 -216, i16 -216, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 239, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -216, i16 -216], [41 x i16] [i16 5, i16 -217, i16 -217, i16 -217, i16 -217, i16 -217, i16 -217, i16 -217, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 240, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -217, i16 -217], [41 x i16] [i16 5, i16 -218, i16 -218, i16 -218, i16 -218, i16 -218, i16 -218, i16 -218, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 241, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -218, i16 -218], [41 x i16] [i16 5, i16 -219, i16 -219, i16 -219, i16 -219, i16 -219, i16 -219, i16 -219, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 242, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -219, i16 -219], [41 x i16] [i16 5, i16 -220, i16 -220, i16 -220, i16 -220, i16 -220, i16 -220, i16 -220, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 243, i16 41, i16 41, i16 41, i16 41, i16 -220, i16 -220], [41 x i16] [i16 5, i16 -221, i16 -221, i16 -221, i16 -221, i16 -221, i16 -221, i16 -221, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 244, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -221, i16 -221], [41 x i16] [i16 5, i16 -222, i16 -222, i16 -222, i16 -222, i16 -222, i16 -222, i16 -222, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 245, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -222, i16 -222], [41 x i16] [i16 5, i16 -223, i16 -223, i16 -223, i16 -223, i16 -223, i16 -223, i16 -223, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 246, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -223, i16 -223], [41 x i16] [i16 5, i16 -224, i16 -224, i16 -224, i16 -224, i16 -224, i16 -224, i16 -224, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -224, i16 -224], [41 x i16] [i16 5, i16 -225, i16 -225, i16 -225, i16 -225, i16 -225, i16 -225, i16 -225, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 247, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -225, i16 -225], [41 x i16] [i16 5, i16 -226, i16 -226, i16 -226, i16 -226, i16 -226, i16 -226, i16 -226, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 248, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -226, i16 -226], [41 x i16] [i16 5, i16 -227, i16 -227, i16 -227, i16 -227, i16 -227, i16 -227, i16 -227, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 249, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -227, i16 -227], [41 x i16] [i16 5, i16 -228, i16 -228, i16 -228, i16 -228, i16 -228, i16 -228, i16 -228, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -228, i16 -228], [41 x i16] [i16 5, i16 -229, i16 -229, i16 -229, i16 -229, i16 -229, i16 -229, i16 -229, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -229, i16 -229], [41 x i16] [i16 5, i16 -230, i16 -230, i16 -230, i16 -230, i16 -230, i16 -230, i16 -230, i16 41, i16 41, i16 41, i16 41, i16 41, i16 250, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -230, i16 -230], [41 x i16] [i16 5, i16 -231, i16 -231, i16 -231, i16 -231, i16 -231, i16 -231, i16 -231, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 251, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -231, i16 -231], [41 x i16] [i16 5, i16 -232, i16 -232, i16 -232, i16 -232, i16 -232, i16 -232, i16 -232, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 252, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -232, i16 -232], [41 x i16] [i16 5, i16 -233, i16 -233, i16 -233, i16 -233, i16 -233, i16 -233, i16 -233, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 253, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -233, i16 -233], [41 x i16] [i16 5, i16 -234, i16 -234, i16 -234, i16 -234, i16 -234, i16 -234, i16 -234, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 254, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -234, i16 -234], [41 x i16] [i16 5, i16 -235, i16 -235, i16 -235, i16 -235, i16 -235, i16 -235, i16 -235, i16 41, i16 41, i16 41, i16 41, i16 255, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -235, i16 -235], [41 x i16] [i16 5, i16 -236, i16 -236, i16 -236, i16 -236, i16 -236, i16 -236, i16 -236, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 256, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -236, i16 -236], [41 x i16] [i16 5, i16 -237, i16 -237, i16 -237, i16 -237, i16 -237, i16 -237, i16 -237, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 257, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -237, i16 -237], [41 x i16] [i16 5, i16 -238, i16 -238, i16 -238, i16 -238, i16 -238, i16 -238, i16 -238, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -238, i16 -238], [41 x i16] [i16 5, i16 -239, i16 -239, i16 -239, i16 -239, i16 -239, i16 -239, i16 -239, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -239, i16 -239], [41 x i16] [i16 5, i16 -240, i16 -240, i16 -240, i16 -240, i16 -240, i16 -240, i16 -240, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 258, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -240, i16 -240], [41 x i16] [i16 5, i16 -241, i16 -241, i16 -241, i16 -241, i16 -241, i16 -241, i16 -241, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -241, i16 -241], [41 x i16] [i16 5, i16 -242, i16 -242, i16 -242, i16 -242, i16 -242, i16 -242, i16 -242, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 259, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -242, i16 -242], [41 x i16] [i16 5, i16 -243, i16 -243, i16 -243, i16 -243, i16 -243, i16 -243, i16 -243, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 260, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -243, i16 -243], [41 x i16] [i16 5, i16 -244, i16 -244, i16 -244, i16 -244, i16 -244, i16 -244, i16 -244, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 261, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -244, i16 -244], [41 x i16] [i16 5, i16 -245, i16 -245, i16 -245, i16 -245, i16 -245, i16 -245, i16 -245, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 262, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -245, i16 -245], [41 x i16] [i16 5, i16 -246, i16 -246, i16 -246, i16 -246, i16 -246, i16 -246, i16 -246, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 263, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -246, i16 -246], [41 x i16] [i16 5, i16 -247, i16 -247, i16 -247, i16 -247, i16 -247, i16 -247, i16 -247, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 264, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -247, i16 -247], [41 x i16] [i16 5, i16 -248, i16 -248, i16 -248, i16 -248, i16 -248, i16 -248, i16 -248, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 265, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -248, i16 -248], [41 x i16] [i16 5, i16 -249, i16 -249, i16 -249, i16 -249, i16 -249, i16 -249, i16 -249, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 266, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -249, i16 -249], [41 x i16] [i16 5, i16 -250, i16 -250, i16 -250, i16 -250, i16 -250, i16 -250, i16 -250, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 267, i16 268, i16 41, i16 269, i16 270, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 271, i16 41, i16 41, i16 272, i16 273, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -250, i16 -250], [41 x i16] [i16 5, i16 -251, i16 -251, i16 -251, i16 -251, i16 -251, i16 -251, i16 -251, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 274, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -251, i16 -251], [41 x i16] [i16 5, i16 -252, i16 -252, i16 -252, i16 -252, i16 -252, i16 -252, i16 -252, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 275, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -252, i16 -252], [41 x i16] [i16 5, i16 -253, i16 -253, i16 -253, i16 -253, i16 -253, i16 -253, i16 -253, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 276, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -253, i16 -253], [41 x i16] [i16 5, i16 -254, i16 -254, i16 -254, i16 -254, i16 -254, i16 -254, i16 -254, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 277, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -254, i16 -254], [41 x i16] [i16 5, i16 -255, i16 -255, i16 -255, i16 -255, i16 -255, i16 -255, i16 -255, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 278, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -255, i16 -255], [41 x i16] [i16 5, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -256, i16 -256], [41 x i16] [i16 5, i16 -257, i16 -257, i16 -257, i16 -257, i16 -257, i16 -257, i16 -257, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 279, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -257, i16 -257], [41 x i16] [i16 5, i16 -258, i16 -258, i16 -258, i16 -258, i16 -258, i16 -258, i16 -258, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 280, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -258, i16 -258], [41 x i16] [i16 5, i16 -259, i16 -259, i16 -259, i16 -259, i16 -259, i16 -259, i16 -259, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 281, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -259, i16 -259], [41 x i16] [i16 5, i16 -260, i16 -260, i16 -260, i16 -260, i16 -260, i16 -260, i16 -260, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 282, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -260, i16 -260], [41 x i16] [i16 5, i16 -261, i16 -261, i16 -261, i16 -261, i16 -261, i16 -261, i16 -261, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 283, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -261, i16 -261], [41 x i16] [i16 5, i16 -262, i16 -262, i16 -262, i16 -262, i16 -262, i16 -262, i16 -262, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 284, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -262, i16 -262], [41 x i16] [i16 5, i16 -263, i16 -263, i16 -263, i16 -263, i16 -263, i16 -263, i16 -263, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 285, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -263, i16 -263], [41 x i16] [i16 5, i16 -264, i16 -264, i16 -264, i16 -264, i16 -264, i16 -264, i16 -264, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -264, i16 -264], [41 x i16] [i16 5, i16 -265, i16 -265, i16 -265, i16 -265, i16 -265, i16 -265, i16 -265, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -265, i16 -265], [41 x i16] [i16 5, i16 -266, i16 -266, i16 -266, i16 -266, i16 -266, i16 -266, i16 -266, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 286, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -266, i16 -266], [41 x i16] [i16 5, i16 -267, i16 -267, i16 -267, i16 -267, i16 -267, i16 -267, i16 -267, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 287, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -267, i16 -267], [41 x i16] [i16 5, i16 -268, i16 -268, i16 -268, i16 -268, i16 -268, i16 -268, i16 -268, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 288, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -268, i16 -268], [41 x i16] [i16 5, i16 -269, i16 -269, i16 -269, i16 -269, i16 -269, i16 -269, i16 -269, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 289, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -269, i16 -269], [41 x i16] [i16 5, i16 -270, i16 -270, i16 -270, i16 -270, i16 -270, i16 -270, i16 -270, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 290, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -270, i16 -270], [41 x i16] [i16 5, i16 -271, i16 -271, i16 -271, i16 -271, i16 -271, i16 -271, i16 -271, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 291, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -271, i16 -271], [41 x i16] [i16 5, i16 -272, i16 -272, i16 -272, i16 -272, i16 -272, i16 -272, i16 -272, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 292, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 293, i16 -272, i16 -272], [41 x i16] [i16 5, i16 -273, i16 -273, i16 -273, i16 -273, i16 -273, i16 -273, i16 -273, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 294, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -273, i16 -273], [41 x i16] [i16 5, i16 -274, i16 -274, i16 -274, i16 -274, i16 -274, i16 -274, i16 -274, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -274, i16 -274], [41 x i16] [i16 5, i16 -275, i16 -275, i16 -275, i16 -275, i16 -275, i16 -275, i16 -275, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 295, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -275, i16 -275], [41 x i16] [i16 5, i16 -276, i16 -276, i16 -276, i16 -276, i16 -276, i16 -276, i16 -276, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 296, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -276, i16 -276], [41 x i16] [i16 5, i16 -277, i16 -277, i16 -277, i16 -277, i16 -277, i16 -277, i16 -277, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 297, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -277, i16 -277], [41 x i16] [i16 5, i16 -278, i16 -278, i16 -278, i16 -278, i16 -278, i16 -278, i16 -278, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 298, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -278, i16 -278], [41 x i16] [i16 5, i16 -279, i16 -279, i16 -279, i16 -279, i16 -279, i16 -279, i16 -279, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 299, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -279, i16 -279], [41 x i16] [i16 5, i16 -280, i16 -280, i16 -280, i16 -280, i16 -280, i16 -280, i16 -280, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 300, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -280, i16 -280], [41 x i16] [i16 5, i16 -281, i16 -281, i16 -281, i16 -281, i16 -281, i16 -281, i16 -281, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 301, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -281, i16 -281], [41 x i16] [i16 5, i16 -282, i16 -282, i16 -282, i16 -282, i16 -282, i16 -282, i16 -282, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 302, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -282, i16 -282], [41 x i16] [i16 5, i16 -283, i16 -283, i16 -283, i16 -283, i16 -283, i16 -283, i16 -283, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 303, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -283, i16 -283], [41 x i16] [i16 5, i16 -284, i16 -284, i16 -284, i16 -284, i16 -284, i16 -284, i16 -284, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 304, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -284, i16 -284], [41 x i16] [i16 5, i16 -285, i16 -285, i16 -285, i16 -285, i16 -285, i16 -285, i16 -285, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 305, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -285, i16 -285], [41 x i16] [i16 5, i16 -286, i16 -286, i16 -286, i16 -286, i16 -286, i16 -286, i16 -286, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -286, i16 -286], [41 x i16] [i16 5, i16 -287, i16 -287, i16 -287, i16 -287, i16 -287, i16 -287, i16 -287, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 306, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -287, i16 -287], [41 x i16] [i16 5, i16 -288, i16 -288, i16 -288, i16 -288, i16 -288, i16 -288, i16 -288, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 307, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 308, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -288, i16 -288], [41 x i16] [i16 5, i16 -289, i16 -289, i16 -289, i16 -289, i16 -289, i16 -289, i16 -289, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 309, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -289, i16 -289], [41 x i16] [i16 5, i16 -290, i16 -290, i16 -290, i16 -290, i16 -290, i16 -290, i16 -290, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 310, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -290, i16 -290], [41 x i16] [i16 5, i16 -291, i16 -291, i16 -291, i16 -291, i16 -291, i16 -291, i16 -291, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 311, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -291, i16 -291], [41 x i16] [i16 5, i16 -292, i16 -292, i16 -292, i16 -292, i16 -292, i16 -292, i16 -292, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 312, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -292, i16 -292], [41 x i16] [i16 5, i16 -293, i16 -293, i16 -293, i16 -293, i16 -293, i16 -293, i16 -293, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 313, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -293, i16 -293], [41 x i16] [i16 5, i16 -294, i16 -294, i16 -294, i16 -294, i16 -294, i16 -294, i16 -294, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 314, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -294, i16 -294], [41 x i16] [i16 5, i16 -295, i16 -295, i16 -295, i16 -295, i16 -295, i16 -295, i16 -295, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -295, i16 -295], [41 x i16] [i16 5, i16 -296, i16 -296, i16 -296, i16 -296, i16 -296, i16 -296, i16 -296, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 315, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -296, i16 -296], [41 x i16] [i16 5, i16 -297, i16 -297, i16 -297, i16 -297, i16 -297, i16 -297, i16 -297, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 316, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -297, i16 -297], [41 x i16] [i16 5, i16 -298, i16 -298, i16 -298, i16 -298, i16 -298, i16 -298, i16 -298, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 317, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -298, i16 -298], [41 x i16] [i16 5, i16 -299, i16 -299, i16 -299, i16 -299, i16 -299, i16 -299, i16 -299, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 318, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -299, i16 -299], [41 x i16] [i16 5, i16 -300, i16 -300, i16 -300, i16 -300, i16 -300, i16 -300, i16 -300, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 319, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -300, i16 -300], [41 x i16] [i16 5, i16 -301, i16 -301, i16 -301, i16 -301, i16 -301, i16 -301, i16 -301, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 320, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -301, i16 -301], [41 x i16] [i16 5, i16 -302, i16 -302, i16 -302, i16 -302, i16 -302, i16 -302, i16 -302, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -302, i16 -302], [41 x i16] [i16 5, i16 -303, i16 -303, i16 -303, i16 -303, i16 -303, i16 -303, i16 -303, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -303, i16 -303], [41 x i16] [i16 5, i16 -304, i16 -304, i16 -304, i16 -304, i16 -304, i16 -304, i16 -304, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -304, i16 -304], [41 x i16] [i16 5, i16 -305, i16 -305, i16 -305, i16 -305, i16 -305, i16 -305, i16 -305, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -305, i16 -305], [41 x i16] [i16 5, i16 -306, i16 -306, i16 -306, i16 -306, i16 -306, i16 -306, i16 -306, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 321, i16 41, i16 41, i16 41, i16 41, i16 -306, i16 -306], [41 x i16] [i16 5, i16 -307, i16 -307, i16 -307, i16 -307, i16 -307, i16 -307, i16 -307, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 322, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -307, i16 -307], [41 x i16] [i16 5, i16 -308, i16 -308, i16 -308, i16 -308, i16 -308, i16 -308, i16 -308, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 323, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -308, i16 -308], [41 x i16] [i16 5, i16 -309, i16 -309, i16 -309, i16 -309, i16 -309, i16 -309, i16 -309, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 324, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -309, i16 -309], [41 x i16] [i16 5, i16 -310, i16 -310, i16 -310, i16 -310, i16 -310, i16 -310, i16 -310, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 325, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -310, i16 -310], [41 x i16] [i16 5, i16 -311, i16 -311, i16 -311, i16 -311, i16 -311, i16 -311, i16 -311, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 326, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -311, i16 -311], [41 x i16] [i16 5, i16 -312, i16 -312, i16 -312, i16 -312, i16 -312, i16 -312, i16 -312, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 327, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -312, i16 -312], [41 x i16] [i16 5, i16 -313, i16 -313, i16 -313, i16 -313, i16 -313, i16 -313, i16 -313, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 328, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -313, i16 -313], [41 x i16] [i16 5, i16 -314, i16 -314, i16 -314, i16 -314, i16 -314, i16 -314, i16 -314, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 329, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -314, i16 -314], [41 x i16] [i16 5, i16 -315, i16 -315, i16 -315, i16 -315, i16 -315, i16 -315, i16 -315, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -315, i16 -315], [41 x i16] [i16 5, i16 -316, i16 -316, i16 -316, i16 -316, i16 -316, i16 -316, i16 -316, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -316, i16 -316], [41 x i16] [i16 5, i16 -317, i16 -317, i16 -317, i16 -317, i16 -317, i16 -317, i16 -317, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -317, i16 -317], [41 x i16] [i16 5, i16 -318, i16 -318, i16 -318, i16 -318, i16 -318, i16 -318, i16 -318, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 330, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -318, i16 -318], [41 x i16] [i16 5, i16 -319, i16 -319, i16 -319, i16 -319, i16 -319, i16 -319, i16 -319, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 331, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -319, i16 -319], [41 x i16] [i16 5, i16 -320, i16 -320, i16 -320, i16 -320, i16 -320, i16 -320, i16 -320, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 332, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -320, i16 -320], [41 x i16] [i16 5, i16 -321, i16 -321, i16 -321, i16 -321, i16 -321, i16 -321, i16 -321, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 333, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -321, i16 -321], [41 x i16] [i16 5, i16 -322, i16 -322, i16 -322, i16 -322, i16 -322, i16 -322, i16 -322, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 334, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -322, i16 -322], [41 x i16] [i16 5, i16 -323, i16 -323, i16 -323, i16 -323, i16 -323, i16 -323, i16 -323, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 335, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -323, i16 -323], [41 x i16] [i16 5, i16 -324, i16 -324, i16 -324, i16 -324, i16 -324, i16 -324, i16 -324, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 336, i16 41, i16 41, i16 41, i16 41, i16 -324, i16 -324], [41 x i16] [i16 5, i16 -325, i16 -325, i16 -325, i16 -325, i16 -325, i16 -325, i16 -325, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 337, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -325, i16 -325], [41 x i16] [i16 5, i16 -326, i16 -326, i16 -326, i16 -326, i16 -326, i16 -326, i16 -326, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 338, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -326, i16 -326], [41 x i16] [i16 5, i16 -327, i16 -327, i16 -327, i16 -327, i16 -327, i16 -327, i16 -327, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 339, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -327, i16 -327], [41 x i16] [i16 5, i16 -328, i16 -328, i16 -328, i16 -328, i16 -328, i16 -328, i16 -328, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 340, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -328, i16 -328], [41 x i16] [i16 5, i16 -329, i16 -329, i16 -329, i16 -329, i16 -329, i16 -329, i16 -329, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 341, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -329, i16 -329], [41 x i16] [i16 5, i16 -330, i16 -330, i16 -330, i16 -330, i16 -330, i16 -330, i16 -330, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 342, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -330, i16 -330], [41 x i16] [i16 5, i16 -331, i16 -331, i16 -331, i16 -331, i16 -331, i16 -331, i16 -331, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 343, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -331, i16 -331], [41 x i16] [i16 5, i16 -332, i16 -332, i16 -332, i16 -332, i16 -332, i16 -332, i16 -332, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -332, i16 -332], [41 x i16] [i16 5, i16 -333, i16 -333, i16 -333, i16 -333, i16 -333, i16 -333, i16 -333, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 344, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -333, i16 -333], [41 x i16] [i16 5, i16 -334, i16 -334, i16 -334, i16 -334, i16 -334, i16 -334, i16 -334, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 345, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -334, i16 -334], [41 x i16] [i16 5, i16 -335, i16 -335, i16 -335, i16 -335, i16 -335, i16 -335, i16 -335, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 346, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -335, i16 -335], [41 x i16] [i16 5, i16 -336, i16 -336, i16 -336, i16 -336, i16 -336, i16 -336, i16 -336, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 347, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -336, i16 -336], [41 x i16] [i16 5, i16 -337, i16 -337, i16 -337, i16 -337, i16 -337, i16 -337, i16 -337, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 348, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -337, i16 -337], [41 x i16] [i16 5, i16 -338, i16 -338, i16 -338, i16 -338, i16 -338, i16 -338, i16 -338, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -338, i16 -338], [41 x i16] [i16 5, i16 -339, i16 -339, i16 -339, i16 -339, i16 -339, i16 -339, i16 -339, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 349, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -339, i16 -339], [41 x i16] [i16 5, i16 -340, i16 -340, i16 -340, i16 -340, i16 -340, i16 -340, i16 -340, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 350, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -340, i16 -340], [41 x i16] [i16 5, i16 -341, i16 -341, i16 -341, i16 -341, i16 -341, i16 -341, i16 -341, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -341, i16 -341], [41 x i16] [i16 5, i16 -342, i16 -342, i16 -342, i16 -342, i16 -342, i16 -342, i16 -342, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 351, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -342, i16 -342], [41 x i16] [i16 5, i16 -343, i16 -343, i16 -343, i16 -343, i16 -343, i16 -343, i16 -343, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -343, i16 -343], [41 x i16] [i16 5, i16 -344, i16 -344, i16 -344, i16 -344, i16 -344, i16 -344, i16 -344, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 352, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -344, i16 -344], [41 x i16] [i16 5, i16 -345, i16 -345, i16 -345, i16 -345, i16 -345, i16 -345, i16 -345, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 353, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -345, i16 -345], [41 x i16] [i16 5, i16 -346, i16 -346, i16 -346, i16 -346, i16 -346, i16 -346, i16 -346, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 354, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -346, i16 -346], [41 x i16] [i16 5, i16 -347, i16 -347, i16 -347, i16 -347, i16 -347, i16 -347, i16 -347, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 355, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -347, i16 -347], [41 x i16] [i16 5, i16 -348, i16 -348, i16 -348, i16 -348, i16 -348, i16 -348, i16 -348, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 356, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -348, i16 -348], [41 x i16] [i16 5, i16 -349, i16 -349, i16 -349, i16 -349, i16 -349, i16 -349, i16 -349, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 357, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -349, i16 -349], [41 x i16] [i16 5, i16 -350, i16 -350, i16 -350, i16 -350, i16 -350, i16 -350, i16 -350, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 358, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -350, i16 -350], [41 x i16] [i16 5, i16 -351, i16 -351, i16 -351, i16 -351, i16 -351, i16 -351, i16 -351, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -351, i16 -351], [41 x i16] [i16 5, i16 -352, i16 -352, i16 -352, i16 -352, i16 -352, i16 -352, i16 -352, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -352, i16 -352], [41 x i16] [i16 5, i16 -353, i16 -353, i16 -353, i16 -353, i16 -353, i16 -353, i16 -353, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 359, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -353, i16 -353], [41 x i16] [i16 5, i16 -354, i16 -354, i16 -354, i16 -354, i16 -354, i16 -354, i16 -354, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 360, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -354, i16 -354], [41 x i16] [i16 5, i16 -355, i16 -355, i16 -355, i16 -355, i16 -355, i16 -355, i16 -355, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 361, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -355, i16 -355], [41 x i16] [i16 5, i16 -356, i16 -356, i16 -356, i16 -356, i16 -356, i16 -356, i16 -356, i16 41, i16 41, i16 41, i16 41, i16 41, i16 362, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -356, i16 -356], [41 x i16] [i16 5, i16 -357, i16 -357, i16 -357, i16 -357, i16 -357, i16 -357, i16 -357, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 363, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -357, i16 -357], [41 x i16] [i16 5, i16 -358, i16 -358, i16 -358, i16 -358, i16 -358, i16 -358, i16 -358, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -358, i16 -358], [41 x i16] [i16 5, i16 -359, i16 -359, i16 -359, i16 -359, i16 -359, i16 -359, i16 -359, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 364, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -359, i16 -359], [41 x i16] [i16 5, i16 -360, i16 -360, i16 -360, i16 -360, i16 -360, i16 -360, i16 -360, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 365, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -360, i16 -360], [41 x i16] [i16 5, i16 -361, i16 -361, i16 -361, i16 -361, i16 -361, i16 -361, i16 -361, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -361, i16 -361], [41 x i16] [i16 5, i16 -362, i16 -362, i16 -362, i16 -362, i16 -362, i16 -362, i16 -362, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 366, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -362, i16 -362], [41 x i16] [i16 5, i16 -363, i16 -363, i16 -363, i16 -363, i16 -363, i16 -363, i16 -363, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -363, i16 -363], [41 x i16] [i16 5, i16 -364, i16 -364, i16 -364, i16 -364, i16 -364, i16 -364, i16 -364, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 367, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -364, i16 -364], [41 x i16] [i16 5, i16 -365, i16 -365, i16 -365, i16 -365, i16 -365, i16 -365, i16 -365, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 368, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -365, i16 -365], [41 x i16] [i16 5, i16 -366, i16 -366, i16 -366, i16 -366, i16 -366, i16 -366, i16 -366, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 369, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -366, i16 -366], [41 x i16] [i16 5, i16 -367, i16 -367, i16 -367, i16 -367, i16 -367, i16 -367, i16 -367, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 370, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -367, i16 -367], [41 x i16] [i16 5, i16 -368, i16 -368, i16 -368, i16 -368, i16 -368, i16 -368, i16 -368, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 371, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -368, i16 -368], [41 x i16] [i16 5, i16 -369, i16 -369, i16 -369, i16 -369, i16 -369, i16 -369, i16 -369, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 372, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -369, i16 -369], [41 x i16] [i16 5, i16 -370, i16 -370, i16 -370, i16 -370, i16 -370, i16 -370, i16 -370, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 373, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -370, i16 -370], [41 x i16] [i16 5, i16 -371, i16 -371, i16 -371, i16 -371, i16 -371, i16 -371, i16 -371, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 374, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -371, i16 -371], [41 x i16] [i16 5, i16 -372, i16 -372, i16 -372, i16 -372, i16 -372, i16 -372, i16 -372, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 375, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -372, i16 -372], [41 x i16] [i16 5, i16 -373, i16 -373, i16 -373, i16 -373, i16 -373, i16 -373, i16 -373, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -373, i16 -373], [41 x i16] [i16 5, i16 -374, i16 -374, i16 -374, i16 -374, i16 -374, i16 -374, i16 -374, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -374, i16 -374], [41 x i16] [i16 5, i16 -375, i16 -375, i16 -375, i16 -375, i16 -375, i16 -375, i16 -375, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 376, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -375, i16 -375], [41 x i16] [i16 5, i16 -376, i16 -376, i16 -376, i16 -376, i16 -376, i16 -376, i16 -376, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 377, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -376, i16 -376], [41 x i16] [i16 5, i16 -377, i16 -377, i16 -377, i16 -377, i16 -377, i16 -377, i16 -377, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 378, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -377, i16 -377], [41 x i16] [i16 5, i16 -378, i16 -378, i16 -378, i16 -378, i16 -378, i16 -378, i16 -378, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 379, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -378, i16 -378], [41 x i16] [i16 5, i16 -379, i16 -379, i16 -379, i16 -379, i16 -379, i16 -379, i16 -379, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 41, i16 -379, i16 -379]], align 16
@yy_accept = internal constant [380 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 70, i16 68, i16 65, i16 66, i16 57, i16 67, i16 68, i16 67, i16 63, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 68, i16 60, i16 61, i16 65, i16 57, i16 59, i16 56, i16 63, i16 64, i16 64, i16 64, i16 64, i16 64, i16 5, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 39, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 58, i16 60, i16 61, i16 61, i16 62, i16 1, i16 64, i16 64, i16 64, i16 64, i16 7, i16 64, i16 64, i16 64, i16 11, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 37, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 9, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 36, i16 64, i16 64, i16 64, i16 64, i16 64, i16 47, i16 64, i16 50, i16 64, i16 52, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 14, i16 15, i16 64, i16 17, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 35, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 48, i16 64, i16 64, i16 64, i16 64, i16 64, i16 2, i16 3, i16 64, i16 6, i16 64, i16 64, i16 64, i16 64, i16 16, i16 18, i16 64, i16 20, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 49, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 19, i16 64, i16 64, i16 64, i16 24, i16 25, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 51, i16 53, i16 64, i16 55, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 45, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 21, i16 22, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 38, i16 40, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 23, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 41, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 8, i16 10, i16 12, i16 13, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 42, i16 43, i16 44, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 4, i16 64, i16 64, i16 64, i16 64, i16 64, i16 31, i16 64, i16 64, i16 34, i16 64, i16 54, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 46, i16 26, i16 64, i16 64, i16 64, i16 64, i16 64, i16 33, i16 64, i16 64, i16 29, i16 64, i16 32, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 27, i16 28, i16 64, i16 64, i16 64, i16 64, i16 30], align 16
@dfg_leng = common global i32 0, align 4
@dfg_IGNORETEXT = external global i32, align 4
@dfg_lval = external global %union.yystype, align 8
@dfg_LINENUMBER = external global i32, align 4
@.str = private unnamed_addr constant [30 x i8] c"\0A Number too big in line %d.\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"\0A Illegal character '\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"\5Cx%x\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"' in line %d.\0A\00", align 1
@yy_n_chars = internal global i32 0, align 4
@yy_did_buffer_switch_on_eof = internal global i32 0, align 4
@.str.5 = private unnamed_addr constant [51 x i8] c"fatal flex scanner internal error--no action found\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"out of dynamic memory in yy_create_buffer()\00", align 1
@.str.7 = private unnamed_addr constant [42 x i8] c"out of dynamic memory in yy_scan_buffer()\00", align 1
@.str.8 = private unnamed_addr constant [41 x i8] c"out of dynamic memory in yy_scan_bytes()\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"bad buffer in yy_scan_bytes()\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.10 = private unnamed_addr constant [56 x i8] c"fatal flex scanner internal error--end of buffer missed\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"fatal error - scanner input buffer overflow\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"input in flex scanner failed\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @dfg_lex() #0 {
entry:
  %retval = alloca i32, align 4
  %yy_current_state = alloca i32, align 4
  %yy_cp = alloca i8*, align 8
  %yy_bp = alloca i8*, align 8
  %yy_act = alloca i32, align 4
  %n = alloca i64, align 8
  %yy_amount_of_matched_text = alloca i32, align 4
  %yy_next_state = alloca i32, align 4
  %0 = load i32, i32* @yy_init, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end.12

if.then:                                          ; preds = %entry
  store i32 0, i32* @yy_init, align 4
  %1 = load i32, i32* @yy_start, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 1, i32* @yy_start, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %tobool3 = icmp ne %struct._IO_FILE* %2, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  store %struct._IO_FILE* %3, %struct._IO_FILE** @dfg_in, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_out, align 8
  %tobool6 = icmp ne %struct._IO_FILE* %4, null
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.5
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  store %struct._IO_FILE* %5, %struct._IO_FILE** @dfg_out, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.7, %if.end.5
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %tobool9 = icmp ne %struct.yy_buffer_state* %6, null
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end.8
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %call = call %struct.yy_buffer_state* @dfg__create_buffer(%struct._IO_FILE* %7, i32 16384)
  store %struct.yy_buffer_state* %call, %struct.yy_buffer_state** @yy_current_buffer, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end.8
  call void @dfg__load_buffer_state()
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %entry
  br label %while.body

while.body:                                       ; preds = %if.end.12, %sw.epilog.185
  store i32 0, i32* @yy_more_len, align 4
  %8 = load i32, i32* @yy_more_flag, align 4
  %tobool13 = icmp ne i32 %8, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %while.body
  %9 = load i8*, i8** @yy_c_buf_p, align 8
  %10 = load i8*, i8** @dfg_text, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  store i32 %conv, i32* @yy_more_len, align 4
  store i32 0, i32* @yy_more_flag, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %while.body
  %11 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %11, i8** %yy_cp, align 8
  %12 = load i8, i8* @yy_hold_char, align 1
  %13 = load i8*, i8** %yy_cp, align 8
  store i8 %12, i8* %13, align 1
  %14 = load i8*, i8** %yy_cp, align 8
  store i8* %14, i8** %yy_bp, align 8
  %15 = load i32, i32* @yy_start, align 4
  store i32 %15, i32* %yy_current_state, align 4
  br label %yy_match

yy_match:                                         ; preds = %sw.bb.171, %if.then.160, %if.end.15
  br label %while.cond.16

while.cond.16:                                    ; preds = %while.body.24, %yy_match
  %16 = load i8*, i8** %yy_cp, align 8
  %17 = load i8, i8* %16, align 1
  %conv17 = zext i8 %17 to i32
  %idxprom = zext i32 %conv17 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @yy_ec, i32 0, i64 %idxprom
  %18 = load i32, i32* %arrayidx, align 4
  %idxprom18 = sext i32 %18 to i64
  %19 = load i32, i32* %yy_current_state, align 4
  %idxprom19 = sext i32 %19 to i64
  %arrayidx20 = getelementptr inbounds [380 x [41 x i16]], [380 x [41 x i16]]* @yy_nxt, i32 0, i64 %idxprom19
  %arrayidx21 = getelementptr inbounds [41 x i16], [41 x i16]* %arrayidx20, i32 0, i64 %idxprom18
  %20 = load i16, i16* %arrayidx21, align 2
  %conv22 = sext i16 %20 to i32
  store i32 %conv22, i32* %yy_current_state, align 4
  %cmp = icmp sgt i32 %conv22, 0
  br i1 %cmp, label %while.body.24, label %while.end

while.body.24:                                    ; preds = %while.cond.16
  %21 = load i8*, i8** %yy_cp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %incdec.ptr, i8** %yy_cp, align 8
  br label %while.cond.16

while.end:                                        ; preds = %while.cond.16
  %22 = load i32, i32* %yy_current_state, align 4
  %sub = sub nsw i32 0, %22
  store i32 %sub, i32* %yy_current_state, align 4
  br label %yy_find_action

yy_find_action:                                   ; preds = %sw.bb.177, %if.else.162, %while.end
  %23 = load i32, i32* %yy_current_state, align 4
  %idxprom25 = sext i32 %23 to i64
  %arrayidx26 = getelementptr inbounds [380 x i16], [380 x i16]* @yy_accept, i32 0, i64 %idxprom25
  %24 = load i16, i16* %arrayidx26, align 2
  %conv27 = sext i16 %24 to i32
  store i32 %conv27, i32* %yy_act, align 4
  %25 = load i8*, i8** %yy_bp, align 8
  store i8* %25, i8** @dfg_text, align 8
  %26 = load i32, i32* @yy_more_len, align 4
  %27 = load i8*, i8** @dfg_text, align 8
  %idx.ext = sext i32 %26 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %idx.neg
  store i8* %add.ptr, i8** @dfg_text, align 8
  %28 = load i8*, i8** %yy_cp, align 8
  %29 = load i8*, i8** @dfg_text, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %conv31 = trunc i64 %sub.ptr.sub30 to i32
  store i32 %conv31, i32* @dfg_leng, align 4
  %30 = load i8*, i8** %yy_cp, align 8
  %31 = load i8, i8* %30, align 1
  store i8 %31, i8* @yy_hold_char, align 1
  %32 = load i8*, i8** %yy_cp, align 8
  store i8 0, i8* %32, align 1
  %33 = load i8*, i8** %yy_cp, align 8
  store i8* %33, i8** @yy_c_buf_p, align 8
  br label %do_action

do_action:                                        ; preds = %sw.bb.165, %yy_find_action
  %34 = load i32, i32* %yy_act, align 4
  switch i32 %34, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.32
    i32 3, label %sw.bb.33
    i32 4, label %sw.bb.34
    i32 5, label %sw.bb.35
    i32 6, label %sw.bb.36
    i32 7, label %sw.bb.37
    i32 8, label %sw.bb.38
    i32 9, label %sw.bb.39
    i32 10, label %sw.bb.40
    i32 11, label %sw.bb.41
    i32 12, label %sw.bb.42
    i32 13, label %sw.bb.43
    i32 14, label %sw.bb.44
    i32 15, label %sw.bb.45
    i32 16, label %sw.bb.46
    i32 17, label %sw.bb.47
    i32 18, label %sw.bb.48
    i32 19, label %sw.bb.49
    i32 20, label %sw.bb.50
    i32 21, label %sw.bb.51
    i32 22, label %sw.bb.52
    i32 23, label %sw.bb.53
    i32 24, label %sw.bb.54
    i32 25, label %sw.bb.55
    i32 26, label %sw.bb.56
    i32 27, label %sw.bb.57
    i32 28, label %sw.bb.58
    i32 29, label %sw.bb.59
    i32 30, label %sw.bb.60
    i32 31, label %sw.bb.61
    i32 32, label %sw.bb.62
    i32 33, label %sw.bb.63
    i32 34, label %sw.bb.64
    i32 35, label %sw.bb.65
    i32 36, label %sw.bb.66
    i32 37, label %sw.bb.67
    i32 38, label %sw.bb.68
    i32 39, label %sw.bb.69
    i32 40, label %sw.bb.70
    i32 41, label %sw.bb.71
    i32 42, label %sw.bb.72
    i32 43, label %sw.bb.73
    i32 44, label %sw.bb.74
    i32 45, label %sw.bb.75
    i32 46, label %sw.bb.76
    i32 47, label %sw.bb.77
    i32 48, label %sw.bb.78
    i32 49, label %sw.bb.79
    i32 50, label %sw.bb.80
    i32 51, label %sw.bb.81
    i32 52, label %sw.bb.82
    i32 53, label %sw.bb.83
    i32 54, label %sw.bb.84
    i32 55, label %sw.bb.85
    i32 56, label %sw.bb.86
    i32 57, label %sw.bb.87
    i32 58, label %sw.bb.88
    i32 59, label %sw.bb.92
    i32 60, label %sw.bb.93
    i32 61, label %sw.bb.94
    i32 62, label %sw.bb.95
    i32 63, label %sw.bb.98
    i32 64, label %sw.bb.110
    i32 65, label %sw.bb.112
    i32 66, label %sw.bb.113
    i32 67, label %sw.bb.114
    i32 68, label %sw.bb.117
    i32 69, label %sw.bb.133
    i32 71, label %sw.bb.136
    i32 72, label %sw.bb.136
    i32 70, label %sw.bb.137
  ]

sw.bb:                                            ; preds = %do_action
  store i32 258, i32* %retval
  br label %return

sw.bb.32:                                         ; preds = %do_action
  store i32 259, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %do_action
  store i32 260, i32* %retval
  br label %return

sw.bb.34:                                         ; preds = %do_action
  store i32 261, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %do_action
  store i32 262, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %do_action
  store i32 263, i32* %retval
  br label %return

sw.bb.37:                                         ; preds = %do_action
  store i32 266, i32* %retval
  br label %return

sw.bb.38:                                         ; preds = %do_action
  store i32 267, i32* %retval
  br label %return

sw.bb.39:                                         ; preds = %do_action
  store i32 268, i32* %retval
  br label %return

sw.bb.40:                                         ; preds = %do_action
  store i32 270, i32* %retval
  br label %return

sw.bb.41:                                         ; preds = %do_action
  store i32 272, i32* %retval
  br label %return

sw.bb.42:                                         ; preds = %do_action
  store i32 274, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %do_action
  store i32 275, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %do_action
  store i32 276, i32* %retval
  br label %return

sw.bb.45:                                         ; preds = %do_action
  store i32 277, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %do_action
  store i32 278, i32* %retval
  br label %return

sw.bb.47:                                         ; preds = %do_action
  store i32 279, i32* %retval
  br label %return

sw.bb.48:                                         ; preds = %do_action
  store i32 282, i32* %retval
  br label %return

sw.bb.49:                                         ; preds = %do_action
  store i32 281, i32* %retval
  br label %return

sw.bb.50:                                         ; preds = %do_action
  store i32 283, i32* %retval
  br label %return

sw.bb.51:                                         ; preds = %do_action
  store i32 284, i32* %retval
  br label %return

sw.bb.52:                                         ; preds = %do_action
  store i32 285, i32* %retval
  br label %return

sw.bb.53:                                         ; preds = %do_action
  store i32 287, i32* %retval
  br label %return

sw.bb.54:                                         ; preds = %do_action
  store i32 288, i32* %retval
  br label %return

sw.bb.55:                                         ; preds = %do_action
  store i32 289, i32* %retval
  br label %return

sw.bb.56:                                         ; preds = %do_action
  store i32 265, i32* %retval
  br label %return

sw.bb.57:                                         ; preds = %do_action
  store i32 269, i32* %retval
  br label %return

sw.bb.58:                                         ; preds = %do_action
  store i32 271, i32* %retval
  br label %return

sw.bb.59:                                         ; preds = %do_action
  store i32 280, i32* %retval
  br label %return

sw.bb.60:                                         ; preds = %do_action
  store i32 286, i32* %retval
  br label %return

sw.bb.61:                                         ; preds = %do_action
  store i32 299, i32* %retval
  br label %return

sw.bb.62:                                         ; preds = %do_action
  store i32 303, i32* %retval
  br label %return

sw.bb.63:                                         ; preds = %do_action
  store i32 304, i32* %retval
  br label %return

sw.bb.64:                                         ; preds = %do_action
  store i32 310, i32* %retval
  br label %return

sw.bb.65:                                         ; preds = %do_action
  store i32 290, i32* %retval
  br label %return

sw.bb.66:                                         ; preds = %do_action
  store i32 291, i32* %retval
  br label %return

sw.bb.67:                                         ; preds = %do_action
  store i32 292, i32* %retval
  br label %return

sw.bb.68:                                         ; preds = %do_action
  store i32 294, i32* %retval
  br label %return

sw.bb.69:                                         ; preds = %do_action
  store i32 295, i32* %retval
  br label %return

sw.bb.70:                                         ; preds = %do_action
  store i32 297, i32* %retval
  br label %return

sw.bb.71:                                         ; preds = %do_action
  store i32 298, i32* %retval
  br label %return

sw.bb.72:                                         ; preds = %do_action
  store i32 300, i32* %retval
  br label %return

sw.bb.73:                                         ; preds = %do_action
  store i32 301, i32* %retval
  br label %return

sw.bb.74:                                         ; preds = %do_action
  store i32 273, i32* %retval
  br label %return

sw.bb.75:                                         ; preds = %do_action
  store i32 302, i32* %retval
  br label %return

sw.bb.76:                                         ; preds = %do_action
  store i32 296, i32* %retval
  br label %return

sw.bb.77:                                         ; preds = %do_action
  store i32 305, i32* %retval
  br label %return

sw.bb.78:                                         ; preds = %do_action
  store i32 306, i32* %retval
  br label %return

sw.bb.79:                                         ; preds = %do_action
  store i32 307, i32* %retval
  br label %return

sw.bb.80:                                         ; preds = %do_action
  store i32 308, i32* %retval
  br label %return

sw.bb.81:                                         ; preds = %do_action
  store i32 309, i32* %retval
  br label %return

sw.bb.82:                                         ; preds = %do_action
  store i32 311, i32* %retval
  br label %return

sw.bb.83:                                         ; preds = %do_action
  store i32 312, i32* %retval
  br label %return

sw.bb.84:                                         ; preds = %do_action
  store i32 313, i32* %retval
  br label %return

sw.bb.85:                                         ; preds = %do_action
  store i32 314, i32* %retval
  br label %return

sw.bb.86:                                         ; preds = %do_action
  store i32 316, i32* %retval
  br label %return

sw.bb.87:                                         ; preds = %do_action
  br label %sw.epilog.185

sw.bb.88:                                         ; preds = %do_action
  %35 = load i32, i32* @dfg_IGNORETEXT, align 4
  %tobool89 = icmp ne i32 %35, 0
  br i1 %tobool89, label %if.then.90, label %if.else

if.then.90:                                       ; preds = %sw.bb.88
  store i32 3, i32* @yy_start, align 4
  store i32 1, i32* @yy_more_flag, align 4
  br label %if.end.91

if.else:                                          ; preds = %sw.bb.88
  store i32 293, i32* %retval
  br label %return

if.end.91:                                        ; preds = %if.then.90
  br label %sw.epilog.185

sw.bb.92:                                         ; preds = %do_action
  store i32 264, i32* %retval
  br label %return

sw.bb.93:                                         ; preds = %do_action
  store i32 1, i32* @yy_more_flag, align 4
  br label %sw.epilog.185

sw.bb.94:                                         ; preds = %do_action
  store i32 1, i32* @yy_more_flag, align 4
  br label %sw.epilog.185

sw.bb.95:                                         ; preds = %do_action
  store i32 1, i32* @yy_start, align 4
  %call96 = call i8* @dfg_StringCopy()
  store i8* %call96, i8** getelementptr inbounds (%union.yystype, %union.yystype* @dfg_lval, i32 0, i32 0), align 8
  %36 = load i8*, i8** @dfg_text, align 8
  %call97 = call i32 @dfg_CountNewlines(i8* %36)
  %37 = load i32, i32* @dfg_LINENUMBER, align 4
  %add = add i32 %37, %call97
  store i32 %add, i32* @dfg_LINENUMBER, align 4
  store i32 318, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %do_action
  %call99 = call i32* @__errno_location() #6
  store i32 0, i32* %call99, align 4
  %38 = load i8*, i8** @dfg_text, align 8
  %call100 = call i64 @strtoul(i8* %38, i8** null, i32 10) #7
  store i64 %call100, i64* %n, align 8
  %call101 = call i32* @__errno_location() #6
  %39 = load i32, i32* %call101, align 4
  %cmp102 = icmp ne i32 %39, 0
  br i1 %cmp102, label %if.then.106, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.98
  %40 = load i64, i64* %n, align 8
  %cmp104 = icmp ugt i64 %40, 2147483647
  br i1 %cmp104, label %if.then.106, label %if.end.108

if.then.106:                                      ; preds = %lor.lhs.false, %sw.bb.98
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call107 = call i32 @fflush(%struct._IO_FILE* %41)
  %42 = load i32, i32* @dfg_LINENUMBER, align 4
  call void (i8*, ...) @misc_UserErrorReport(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i32 0, i32 0), i32 %42)
  call void @misc_Error()
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.106, %lor.lhs.false
  %43 = load i64, i64* %n, align 8
  %conv109 = trunc i64 %43 to i32
  store i32 %conv109, i32* bitcast (%union.yystype* @dfg_lval to i32*), align 4
  store i32 315, i32* %retval
  br label %return

sw.bb.110:                                        ; preds = %do_action
  %call111 = call i8* @dfg_StringCopy()
  store i8* %call111, i8** getelementptr inbounds (%union.yystype, %union.yystype* @dfg_lval, i32 0, i32 0), align 8
  store i32 317, i32* %retval
  br label %return

sw.bb.112:                                        ; preds = %do_action
  br label %sw.epilog.185

sw.bb.113:                                        ; preds = %do_action
  %44 = load i32, i32* @dfg_LINENUMBER, align 4
  %inc = add i32 %44, 1
  store i32 %inc, i32* @dfg_LINENUMBER, align 4
  br label %sw.epilog.185

sw.bb.114:                                        ; preds = %do_action
  %45 = load i8*, i8** @dfg_text, align 8
  %arrayidx115 = getelementptr inbounds i8, i8* %45, i64 0
  %46 = load i8, i8* %arrayidx115, align 1
  %conv116 = sext i8 %46 to i32
  store i32 %conv116, i32* %retval
  br label %return

sw.bb.117:                                        ; preds = %do_action
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call118 = call i32 @fflush(%struct._IO_FILE* %47)
  call void (i8*, ...) @misc_UserErrorReport(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i32 0, i32 0))
  %48 = load i8*, i8** @dfg_text, align 8
  %arrayidx119 = getelementptr inbounds i8, i8* %48, i64 0
  %49 = load i8, i8* %arrayidx119, align 1
  %conv120 = sext i8 %49 to i32
  %idxprom121 = sext i32 %conv120 to i64
  %call122 = call i16** @__ctype_b_loc() #6
  %50 = load i16*, i16** %call122, align 8
  %arrayidx123 = getelementptr inbounds i16, i16* %50, i64 %idxprom121
  %51 = load i16, i16* %arrayidx123, align 2
  %conv124 = zext i16 %51 to i32
  %and = and i32 %conv124, 16384
  %tobool125 = icmp ne i32 %and, 0
  br i1 %tobool125, label %if.then.126, label %if.else.129

if.then.126:                                      ; preds = %sw.bb.117
  %52 = load i8*, i8** @dfg_text, align 8
  %arrayidx127 = getelementptr inbounds i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx127, align 1
  %conv128 = sext i8 %53 to i32
  call void (i8*, ...) @misc_UserErrorReport(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i32 %conv128)
  br label %if.end.132

if.else.129:                                      ; preds = %sw.bb.117
  %54 = load i8*, i8** @dfg_text, align 8
  %arrayidx130 = getelementptr inbounds i8, i8* %54, i64 0
  %55 = load i8, i8* %arrayidx130, align 1
  %conv131 = sext i8 %55 to i32
  call void (i8*, ...) @misc_UserErrorReport(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %conv131)
  br label %if.end.132

if.end.132:                                       ; preds = %if.else.129, %if.then.126
  %56 = load i32, i32* @dfg_LINENUMBER, align 4
  call void (i8*, ...) @misc_UserErrorReport(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i32 %56)
  call void @misc_Error()
  br label %sw.epilog.185

sw.bb.133:                                        ; preds = %do_action
  %57 = load i8*, i8** @dfg_text, align 8
  %58 = load i32, i32* @dfg_leng, align 4
  %conv134 = sext i32 %58 to i64
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_out, align 8
  %call135 = call i64 @fwrite(i8* %57, i64 %conv134, i64 1, %struct._IO_FILE* %59)
  br label %sw.epilog.185

sw.bb.136:                                        ; preds = %do_action, %do_action
  store i32 0, i32* %retval
  br label %return

sw.bb.137:                                        ; preds = %do_action
  %60 = load i8*, i8** %yy_cp, align 8
  %61 = load i8*, i8** @dfg_text, align 8
  %sub.ptr.lhs.cast138 = ptrtoint i8* %60 to i64
  %sub.ptr.rhs.cast139 = ptrtoint i8* %61 to i64
  %sub.ptr.sub140 = sub i64 %sub.ptr.lhs.cast138, %sub.ptr.rhs.cast139
  %conv141 = trunc i64 %sub.ptr.sub140 to i32
  %sub142 = sub nsw i32 %conv141, 1
  store i32 %sub142, i32* %yy_amount_of_matched_text, align 4
  %62 = load i8, i8* @yy_hold_char, align 1
  %63 = load i8*, i8** %yy_cp, align 8
  store i8 %62, i8* %63, align 1
  %64 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %64, i32 0, i32 9
  %65 = load i32, i32* %yy_buffer_status, align 4
  %cmp143 = icmp eq i32 %65, 0
  br i1 %cmp143, label %if.then.145, label %if.end.147

if.then.145:                                      ; preds = %sw.bb.137
  %66 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %66, i32 0, i32 4
  %67 = load i32, i32* %yy_n_chars, align 4
  store i32 %67, i32* @yy_n_chars, align 4
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %69 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %69, i32 0, i32 0
  store %struct._IO_FILE* %68, %struct._IO_FILE** %yy_input_file, align 8
  %70 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buffer_status146 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %70, i32 0, i32 9
  store i32 1, i32* %yy_buffer_status146, align 4
  br label %if.end.147

if.end.147:                                       ; preds = %if.then.145, %sw.bb.137
  %71 = load i8*, i8** @yy_c_buf_p, align 8
  %72 = load i32, i32* @yy_n_chars, align 4
  %idxprom148 = sext i32 %72 to i64
  %73 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %73, i32 0, i32 1
  %74 = load i8*, i8** %yy_ch_buf, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %74, i64 %idxprom148
  %cmp150 = icmp ule i8* %71, %arrayidx149
  br i1 %cmp150, label %if.then.152, label %if.else.163

if.then.152:                                      ; preds = %if.end.147
  %75 = load i8*, i8** @dfg_text, align 8
  %76 = load i32, i32* %yy_amount_of_matched_text, align 4
  %idx.ext153 = sext i32 %76 to i64
  %add.ptr154 = getelementptr inbounds i8, i8* %75, i64 %idx.ext153
  store i8* %add.ptr154, i8** @yy_c_buf_p, align 8
  %call155 = call i32 @yy_get_previous_state()
  store i32 %call155, i32* %yy_current_state, align 4
  %77 = load i32, i32* %yy_current_state, align 4
  %call156 = call i32 @yy_try_NUL_trans(i32 %77)
  store i32 %call156, i32* %yy_next_state, align 4
  %78 = load i8*, i8** @dfg_text, align 8
  %79 = load i32, i32* @yy_more_len, align 4
  %idx.ext157 = sext i32 %79 to i64
  %add.ptr158 = getelementptr inbounds i8, i8* %78, i64 %idx.ext157
  store i8* %add.ptr158, i8** %yy_bp, align 8
  %80 = load i32, i32* %yy_next_state, align 4
  %tobool159 = icmp ne i32 %80, 0
  br i1 %tobool159, label %if.then.160, label %if.else.162

if.then.160:                                      ; preds = %if.then.152
  %81 = load i8*, i8** @yy_c_buf_p, align 8
  %incdec.ptr161 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %incdec.ptr161, i8** @yy_c_buf_p, align 8
  store i8* %incdec.ptr161, i8** %yy_cp, align 8
  %82 = load i32, i32* %yy_next_state, align 4
  store i32 %82, i32* %yy_current_state, align 4
  br label %yy_match

if.else.162:                                      ; preds = %if.then.152
  %83 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %83, i8** %yy_cp, align 8
  br label %yy_find_action

if.else.163:                                      ; preds = %if.end.147
  %call164 = call i32 @yy_get_next_buffer()
  switch i32 %call164, label %sw.epilog [
    i32 1, label %sw.bb.165
    i32 0, label %sw.bb.171
    i32 2, label %sw.bb.177
  ]

sw.bb.165:                                        ; preds = %if.else.163
  store i32 0, i32* @yy_did_buffer_switch_on_eof, align 4
  %84 = load i8*, i8** @dfg_text, align 8
  %85 = load i32, i32* @yy_more_len, align 4
  %idx.ext166 = sext i32 %85 to i64
  %add.ptr167 = getelementptr inbounds i8, i8* %84, i64 %idx.ext166
  store i8* %add.ptr167, i8** @yy_c_buf_p, align 8
  %86 = load i32, i32* @yy_start, align 4
  %sub168 = sub nsw i32 %86, 1
  %div = sdiv i32 %sub168, 2
  %add169 = add nsw i32 70, %div
  %add170 = add nsw i32 %add169, 1
  store i32 %add170, i32* %yy_act, align 4
  br label %do_action

sw.bb.171:                                        ; preds = %if.else.163
  %87 = load i8*, i8** @dfg_text, align 8
  %88 = load i32, i32* %yy_amount_of_matched_text, align 4
  %idx.ext172 = sext i32 %88 to i64
  %add.ptr173 = getelementptr inbounds i8, i8* %87, i64 %idx.ext172
  store i8* %add.ptr173, i8** @yy_c_buf_p, align 8
  %call174 = call i32 @yy_get_previous_state()
  store i32 %call174, i32* %yy_current_state, align 4
  %89 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %89, i8** %yy_cp, align 8
  %90 = load i8*, i8** @dfg_text, align 8
  %91 = load i32, i32* @yy_more_len, align 4
  %idx.ext175 = sext i32 %91 to i64
  %add.ptr176 = getelementptr inbounds i8, i8* %90, i64 %idx.ext175
  store i8* %add.ptr176, i8** %yy_bp, align 8
  br label %yy_match

sw.bb.177:                                        ; preds = %if.else.163
  %92 = load i32, i32* @yy_n_chars, align 4
  %idxprom178 = sext i32 %92 to i64
  %93 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf179 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %93, i32 0, i32 1
  %94 = load i8*, i8** %yy_ch_buf179, align 8
  %arrayidx180 = getelementptr inbounds i8, i8* %94, i64 %idxprom178
  store i8* %arrayidx180, i8** @yy_c_buf_p, align 8
  %call181 = call i32 @yy_get_previous_state()
  store i32 %call181, i32* %yy_current_state, align 4
  %95 = load i8*, i8** @yy_c_buf_p, align 8
  store i8* %95, i8** %yy_cp, align 8
  %96 = load i8*, i8** @dfg_text, align 8
  %97 = load i32, i32* @yy_more_len, align 4
  %idx.ext182 = sext i32 %97 to i64
  %add.ptr183 = getelementptr inbounds i8, i8* %96, i64 %idx.ext182
  store i8* %add.ptr183, i8** %yy_bp, align 8
  br label %yy_find_action

sw.epilog:                                        ; preds = %if.else.163
  br label %if.end.184

if.end.184:                                       ; preds = %sw.epilog
  br label %sw.epilog.185

sw.default:                                       ; preds = %do_action
  call void @yy_fatal_error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5, i32 0, i32 0))
  br label %sw.epilog.185

sw.epilog.185:                                    ; preds = %sw.default, %if.end.184, %sw.bb.133, %if.end.132, %sw.bb.113, %sw.bb.112, %sw.bb.94, %sw.bb.93, %if.end.91, %sw.bb.87
  br label %while.body

return:                                           ; preds = %sw.bb.136, %sw.bb.114, %sw.bb.110, %if.end.108, %sw.bb.95, %sw.bb.92, %if.else, %sw.bb.86, %sw.bb.85, %sw.bb.84, %sw.bb.83, %sw.bb.82, %sw.bb.81, %sw.bb.80, %sw.bb.79, %sw.bb.78, %sw.bb.77, %sw.bb.76, %sw.bb.75, %sw.bb.74, %sw.bb.73, %sw.bb.72, %sw.bb.71, %sw.bb.70, %sw.bb.69, %sw.bb.68, %sw.bb.67, %sw.bb.66, %sw.bb.65, %sw.bb.64, %sw.bb.63, %sw.bb.62, %sw.bb.61, %sw.bb.60, %sw.bb.59, %sw.bb.58, %sw.bb.57, %sw.bb.56, %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %sw.bb.48, %sw.bb.47, %sw.bb.46, %sw.bb.45, %sw.bb.44, %sw.bb.43, %sw.bb.42, %sw.bb.41, %sw.bb.40, %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.33, %sw.bb.32, %sw.bb
  %98 = load i32, i32* %retval
  ret i32 %98
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @dfg__create_buffer(%struct._IO_FILE* %file, i32 %size) #0 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %size.addr = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %call = call i8* @yy_flex_alloc(i32 56)
  %0 = bitcast i8* %call to %struct.yy_buffer_state*
  store %struct.yy_buffer_state* %0, %struct.yy_buffer_state** %b, align 8
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @yy_fatal_error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %size.addr, align 4
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %3, i32 0, i32 3
  store i32 %2, i32* %yy_buf_size, align 4
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size1 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 3
  %5 = load i32, i32* %yy_buf_size1, align 4
  %add = add i32 %5, 2
  %call2 = call i8* @yy_flex_alloc(i32 %add)
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %6, i32 0, i32 1
  store i8* %call2, i8** %yy_ch_buf, align 8
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf3 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %7, i32 0, i32 1
  %8 = load i8*, i8** %yy_ch_buf3, align 8
  %tobool4 = icmp ne i8* %8, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  call void @yy_fatal_error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i32 0, i32 0))
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %if.end
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %9, i32 0, i32 5
  store i32 1, i32* %yy_is_our_buffer, align 4
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  call void @dfg__init_buffer(%struct.yy_buffer_state* %10, %struct._IO_FILE* %11)
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  ret %struct.yy_buffer_state* %12
}

; Function Attrs: nounwind uwtable
define void @dfg__load_buffer_state() #0 {
entry:
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 4
  %1 = load i32, i32* %yy_n_chars, align 4
  store i32 %1, i32* @yy_n_chars, align 4
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %2, i32 0, i32 2
  %3 = load i8*, i8** %yy_buf_pos, align 8
  store i8* %3, i8** @yy_c_buf_p, align 8
  store i8* %3, i8** @dfg_text, align 8
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 0
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %yy_input_file, align 8
  store %struct._IO_FILE* %5, %struct._IO_FILE** @dfg_in, align 8
  %6 = load i8*, i8** @yy_c_buf_p, align 8
  %7 = load i8, i8* %6, align 1
  store i8 %7, i8* @yy_hold_char, align 1
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @dfg_StringCopy() #1 {
entry:
  %copy = alloca i8*, align 8
  %0 = load i32, i32* @dfg_leng, align 4
  %add = add nsw i32 %0, 1
  %call = call i8* @memory_Malloc(i32 %add)
  store i8* %call, i8** %copy, align 8
  %1 = load i8*, i8** %copy, align 8
  %2 = load i8*, i8** @dfg_text, align 8
  %call1 = call i8* @strcpy(i8* %1, i8* %2) #7
  %3 = load i8*, i8** %copy, align 8
  ret i8* %3
}

; Function Attrs: nounwind uwtable
define internal i32 @dfg_CountNewlines(i8* %Text) #0 {
entry:
  %Text.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  store i8* %Text, i8** %Text.addr, align 8
  store i32 0, i32* %result, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %Text.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %Text.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %Text.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 10
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %result, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %result, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %result, align 4
  ret i32 %5
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #2

; Function Attrs: nounwind
declare i64 @strtoul(i8*, i8**, i32) #3

declare i32 @fflush(%struct._IO_FILE*) #4

declare void @misc_UserErrorReport(i8*, ...) #4

; Function Attrs: inlinehint nounwind uwtable
define internal void @misc_Error() #1 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 @fflush(%struct._IO_FILE* %0)
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call1 = call i32 @fflush(%struct._IO_FILE* %1)
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call2 = call i32 @fflush(%struct._IO_FILE* %2)
  call void @exit(i32 1) #8
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #2

declare i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #4

; Function Attrs: nounwind uwtable
define internal i32 @yy_get_previous_state() #0 {
entry:
  %yy_current_state = alloca i32, align 4
  %yy_cp = alloca i8*, align 8
  %0 = load i32, i32* @yy_start, align 4
  store i32 %0, i32* %yy_current_state, align 4
  %1 = load i8*, i8** @dfg_text, align 8
  %2 = load i32, i32* @yy_more_len, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %yy_cp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i8*, i8** %yy_cp, align 8
  %4 = load i8*, i8** @yy_c_buf_p, align 8
  %cmp = icmp ult i8* %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %yy_cp, align 8
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %7 = load i8*, i8** %yy_cp, align 8
  %8 = load i8, i8* %7, align 1
  %conv1 = zext i8 %8 to i32
  %idxprom = zext i32 %conv1 to i64
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @yy_ec, i32 0, i64 %idxprom
  %9 = load i32, i32* %arrayidx, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %9, %cond.true ], [ 1, %cond.false ]
  %idxprom2 = sext i32 %cond to i64
  %10 = load i32, i32* %yy_current_state, align 4
  %idxprom3 = sext i32 %10 to i64
  %arrayidx4 = getelementptr inbounds [380 x [41 x i16]], [380 x [41 x i16]]* @yy_nxt, i32 0, i64 %idxprom3
  %arrayidx5 = getelementptr inbounds [41 x i16], [41 x i16]* %arrayidx4, i32 0, i64 %idxprom2
  %11 = load i16, i16* %arrayidx5, align 2
  %conv6 = sext i16 %11 to i32
  store i32 %conv6, i32* %yy_current_state, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %12 = load i8*, i8** %yy_cp, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %yy_cp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %yy_current_state, align 4
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @yy_try_NUL_trans(i32 %yy_current_state) #0 {
entry:
  %yy_current_state.addr = alloca i32, align 4
  %yy_is_jam = alloca i32, align 4
  store i32 %yy_current_state, i32* %yy_current_state.addr, align 4
  %0 = load i32, i32* %yy_current_state.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [380 x [41 x i16]], [380 x [41 x i16]]* @yy_nxt, i32 0, i64 %idxprom
  %arrayidx1 = getelementptr inbounds [41 x i16], [41 x i16]* %arrayidx, i32 0, i64 1
  %1 = load i16, i16* %arrayidx1, align 2
  %conv = sext i16 %1 to i32
  store i32 %conv, i32* %yy_current_state.addr, align 4
  %2 = load i32, i32* %yy_current_state.addr, align 4
  %cmp = icmp sle i32 %2, 0
  %conv2 = zext i1 %cmp to i32
  store i32 %conv2, i32* %yy_is_jam, align 4
  %3 = load i32, i32* %yy_is_jam, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %yy_current_state.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind uwtable
define internal i32 @yy_get_next_buffer() #0 {
entry:
  %retval = alloca i32, align 4
  %dest = alloca i8*, align 8
  %source = alloca i8*, align 8
  %number_to_move = alloca i32, align 4
  %i = alloca i32, align 4
  %ret_val = alloca i32, align 4
  %num_to_read = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  %yy_c_buf_p_offset = alloca i32, align 4
  %new_size = alloca i32, align 4
  %c = alloca i32, align 4
  %n = alloca i32, align 4
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %0, i32 0, i32 1
  %1 = load i8*, i8** %yy_ch_buf, align 8
  store i8* %1, i8** %dest, align 8
  %2 = load i8*, i8** @dfg_text, align 8
  store i8* %2, i8** %source, align 8
  %3 = load i8*, i8** @yy_c_buf_p, align 8
  %4 = load i32, i32* @yy_n_chars, align 4
  %add = add nsw i32 %4, 1
  %idxprom = sext i32 %add to i64
  %5 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf1 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %5, i32 0, i32 1
  %6 = load i8*, i8** %yy_ch_buf1, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %cmp = icmp ugt i8* %3, %arrayidx
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @yy_fatal_error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_fill_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %7, i32 0, i32 8
  %8 = load i32, i32* %yy_fill_buffer, align 4
  %cmp2 = icmp eq i32 %8, 0
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  %9 = load i8*, i8** @yy_c_buf_p, align 8
  %10 = load i8*, i8** @dfg_text, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %11 = load i32, i32* @yy_more_len, align 4
  %conv = sext i32 %11 to i64
  %sub = sub nsw i64 %sub.ptr.sub, %conv
  %cmp4 = icmp eq i64 %sub, 1
  br i1 %cmp4, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.then.3
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then.3
  store i32 2, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %12 = load i8*, i8** @yy_c_buf_p, align 8
  %13 = load i8*, i8** @dfg_text, align 8
  %sub.ptr.lhs.cast8 = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast9 = ptrtoint i8* %13 to i64
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast8, %sub.ptr.rhs.cast9
  %conv11 = trunc i64 %sub.ptr.sub10 to i32
  %sub12 = sub nsw i32 %conv11, 1
  store i32 %sub12, i32* %number_to_move, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %number_to_move, align 4
  %cmp13 = icmp slt i32 %14, %15
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i8*, i8** %source, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %source, align 8
  %17 = load i8, i8* %16, align 1
  %18 = load i8*, i8** %dest, align 8
  %incdec.ptr15 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr15, i8** %dest, align 8
  store i8 %17, i8* %18, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %20, i32 0, i32 9
  %21 = load i32, i32* %yy_buffer_status, align 4
  %cmp16 = icmp eq i32 %21, 2
  br i1 %cmp16, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %for.end
  store i32 0, i32* @yy_n_chars, align 4
  %22 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %22, i32 0, i32 4
  store i32 0, i32* %yy_n_chars, align 4
  br label %if.end.116

if.else.19:                                       ; preds = %for.end
  %23 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buf_size = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %23, i32 0, i32 3
  %24 = load i32, i32* %yy_buf_size, align 4
  %25 = load i32, i32* %number_to_move, align 4
  %sub20 = sub i32 %24, %25
  %sub21 = sub i32 %sub20, 1
  store i32 %sub21, i32* %num_to_read, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.51, %if.else.19
  %26 = load i32, i32* %num_to_read, align 4
  %cmp22 = icmp sle i32 %26, 0
  br i1 %cmp22, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %27 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  store %struct.yy_buffer_state* %27, %struct.yy_buffer_state** %b, align 8
  %28 = load i8*, i8** @yy_c_buf_p, align 8
  %29 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf24 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %29, i32 0, i32 1
  %30 = load i8*, i8** %yy_ch_buf24, align 8
  %sub.ptr.lhs.cast25 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast26 = ptrtoint i8* %30 to i64
  %sub.ptr.sub27 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast26
  %conv28 = trunc i64 %sub.ptr.sub27 to i32
  store i32 %conv28, i32* %yy_c_buf_p_offset, align 4
  %31 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %31, i32 0, i32 5
  %32 = load i32, i32* %yy_is_our_buffer, align 4
  %tobool = icmp ne i32 %32, 0
  br i1 %tobool, label %if.then.29, label %if.else.45

if.then.29:                                       ; preds = %while.body
  %33 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size30 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %33, i32 0, i32 3
  %34 = load i32, i32* %yy_buf_size30, align 4
  %mul = mul i32 %34, 2
  store i32 %mul, i32* %new_size, align 4
  %35 = load i32, i32* %new_size, align 4
  %cmp31 = icmp sle i32 %35, 0
  br i1 %cmp31, label %if.then.33, label %if.else.37

if.then.33:                                       ; preds = %if.then.29
  %36 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size34 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %36, i32 0, i32 3
  %37 = load i32, i32* %yy_buf_size34, align 4
  %div = udiv i32 %37, 8
  %38 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size35 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %38, i32 0, i32 3
  %39 = load i32, i32* %yy_buf_size35, align 4
  %add36 = add i32 %39, %div
  store i32 %add36, i32* %yy_buf_size35, align 4
  br label %if.end.40

if.else.37:                                       ; preds = %if.then.29
  %40 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size38 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %40, i32 0, i32 3
  %41 = load i32, i32* %yy_buf_size38, align 4
  %mul39 = mul i32 %41, 2
  store i32 %mul39, i32* %yy_buf_size38, align 4
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.33
  %42 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf41 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %42, i32 0, i32 1
  %43 = load i8*, i8** %yy_ch_buf41, align 8
  %44 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size42 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %44, i32 0, i32 3
  %45 = load i32, i32* %yy_buf_size42, align 4
  %add43 = add i32 %45, 2
  %call = call i8* @yy_flex_realloc(i8* %43, i32 %add43)
  %46 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf44 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %46, i32 0, i32 1
  store i8* %call, i8** %yy_ch_buf44, align 8
  br label %if.end.47

if.else.45:                                       ; preds = %while.body
  %47 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf46 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %47, i32 0, i32 1
  store i8* null, i8** %yy_ch_buf46, align 8
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.45, %if.end.40
  %48 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf48 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %48, i32 0, i32 1
  %49 = load i8*, i8** %yy_ch_buf48, align 8
  %tobool49 = icmp ne i8* %49, null
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %if.end.47
  call void @yy_fatal_error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i32 0, i32 0))
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.50, %if.end.47
  %50 = load i32, i32* %yy_c_buf_p_offset, align 4
  %idxprom52 = sext i32 %50 to i64
  %51 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf53 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %51, i32 0, i32 1
  %52 = load i8*, i8** %yy_ch_buf53, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %52, i64 %idxprom52
  store i8* %arrayidx54, i8** @yy_c_buf_p, align 8
  %53 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buf_size55 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %53, i32 0, i32 3
  %54 = load i32, i32* %yy_buf_size55, align 4
  %55 = load i32, i32* %number_to_move, align 4
  %sub56 = sub i32 %54, %55
  %sub57 = sub i32 %sub56, 1
  store i32 %sub57, i32* %num_to_read, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %56 = load i32, i32* %num_to_read, align 4
  %cmp58 = icmp sgt i32 %56, 8192
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %while.end
  store i32 8192, i32* %num_to_read, align 4
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.60, %while.end
  %57 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_is_interactive = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %57, i32 0, i32 6
  %58 = load i32, i32* %yy_is_interactive, align 4
  %tobool62 = icmp ne i32 %58, 0
  br i1 %tobool62, label %if.then.63, label %if.else.100

if.then.63:                                       ; preds = %if.end.61
  store i32 42, i32* %c, align 4
  store i32 0, i32* %n, align 4
  br label %for.cond.64

for.cond.64:                                      ; preds = %for.inc.79, %if.then.63
  %59 = load i32, i32* %n, align 4
  %60 = load i32, i32* %num_to_read, align 4
  %cmp65 = icmp slt i32 %59, %60
  br i1 %cmp65, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %for.cond.64
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %call67 = call i32 @_IO_getc(%struct._IO_FILE* %61)
  store i32 %call67, i32* %c, align 4
  %cmp68 = icmp ne i32 %call67, -1
  br i1 %cmp68, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %62 = load i32, i32* %c, align 4
  %cmp70 = icmp ne i32 %62, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond.64
  %63 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond.64 ], [ %cmp70, %land.rhs ]
  br i1 %63, label %for.body.72, label %for.end.81

for.body.72:                                      ; preds = %land.end
  %64 = load i32, i32* %c, align 4
  %conv73 = trunc i32 %64 to i8
  %65 = load i32, i32* %n, align 4
  %idxprom74 = sext i32 %65 to i64
  %66 = load i32, i32* %number_to_move, align 4
  %idxprom75 = sext i32 %66 to i64
  %67 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf76 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %67, i32 0, i32 1
  %68 = load i8*, i8** %yy_ch_buf76, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %68, i64 %idxprom75
  %arrayidx78 = getelementptr inbounds i8, i8* %arrayidx77, i64 %idxprom74
  store i8 %conv73, i8* %arrayidx78, align 1
  br label %for.inc.79

for.inc.79:                                       ; preds = %for.body.72
  %69 = load i32, i32* %n, align 4
  %inc80 = add nsw i32 %69, 1
  store i32 %inc80, i32* %n, align 4
  br label %for.cond.64

for.end.81:                                       ; preds = %land.end
  %70 = load i32, i32* %c, align 4
  %cmp82 = icmp eq i32 %70, 10
  br i1 %cmp82, label %if.then.84, label %if.end.92

if.then.84:                                       ; preds = %for.end.81
  %71 = load i32, i32* %c, align 4
  %conv85 = trunc i32 %71 to i8
  %72 = load i32, i32* %n, align 4
  %inc86 = add nsw i32 %72, 1
  store i32 %inc86, i32* %n, align 4
  %idxprom87 = sext i32 %72 to i64
  %73 = load i32, i32* %number_to_move, align 4
  %idxprom88 = sext i32 %73 to i64
  %74 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf89 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %74, i32 0, i32 1
  %75 = load i8*, i8** %yy_ch_buf89, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %75, i64 %idxprom88
  %arrayidx91 = getelementptr inbounds i8, i8* %arrayidx90, i64 %idxprom87
  store i8 %conv85, i8* %arrayidx91, align 1
  br label %if.end.92

if.end.92:                                        ; preds = %if.then.84, %for.end.81
  %76 = load i32, i32* %c, align 4
  %cmp93 = icmp eq i32 %76, -1
  br i1 %cmp93, label %land.lhs.true.95, label %if.end.99

land.lhs.true.95:                                 ; preds = %if.end.92
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %call96 = call i32 @ferror(%struct._IO_FILE* %77) #7
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %land.lhs.true.95
  call void @yy_fatal_error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i32 0, i32 0))
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %land.lhs.true.95, %if.end.92
  %78 = load i32, i32* %n, align 4
  store i32 %78, i32* @yy_n_chars, align 4
  br label %if.end.114

if.else.100:                                      ; preds = %if.end.61
  %79 = load i32, i32* %number_to_move, align 4
  %idxprom101 = sext i32 %79 to i64
  %80 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf102 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %80, i32 0, i32 1
  %81 = load i8*, i8** %yy_ch_buf102, align 8
  %arrayidx103 = getelementptr inbounds i8, i8* %81, i64 %idxprom101
  %82 = load i32, i32* %num_to_read, align 4
  %conv104 = sext i32 %82 to i64
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %call105 = call i64 @fread(i8* %arrayidx103, i64 1, i64 %conv104, %struct._IO_FILE* %83)
  %conv106 = trunc i64 %call105 to i32
  store i32 %conv106, i32* @yy_n_chars, align 4
  %cmp107 = icmp eq i32 %conv106, 0
  br i1 %cmp107, label %land.lhs.true.109, label %if.end.113

land.lhs.true.109:                                ; preds = %if.else.100
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %call110 = call i32 @ferror(%struct._IO_FILE* %84) #7
  %tobool111 = icmp ne i32 %call110, 0
  br i1 %tobool111, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %land.lhs.true.109
  call void @yy_fatal_error(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i32 0, i32 0))
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.112, %land.lhs.true.109, %if.else.100
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %if.end.99
  %85 = load i32, i32* @yy_n_chars, align 4
  %86 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_n_chars115 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %86, i32 0, i32 4
  store i32 %85, i32* %yy_n_chars115, align 4
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.114, %if.then.18
  %87 = load i32, i32* @yy_n_chars, align 4
  %cmp117 = icmp eq i32 %87, 0
  br i1 %cmp117, label %if.then.119, label %if.else.126

if.then.119:                                      ; preds = %if.end.116
  %88 = load i32, i32* %number_to_move, align 4
  %89 = load i32, i32* @yy_more_len, align 4
  %cmp120 = icmp eq i32 %88, %89
  br i1 %cmp120, label %if.then.122, label %if.else.123

if.then.122:                                      ; preds = %if.then.119
  store i32 1, i32* %ret_val, align 4
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  call void @dfg_restart(%struct._IO_FILE* %90)
  br label %if.end.125

if.else.123:                                      ; preds = %if.then.119
  store i32 2, i32* %ret_val, align 4
  %91 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buffer_status124 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %91, i32 0, i32 9
  store i32 2, i32* %yy_buffer_status124, align 4
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.123, %if.then.122
  br label %if.end.127

if.else.126:                                      ; preds = %if.end.116
  store i32 0, i32* %ret_val, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %if.else.126, %if.end.125
  %92 = load i32, i32* %number_to_move, align 4
  %93 = load i32, i32* @yy_n_chars, align 4
  %add128 = add nsw i32 %93, %92
  store i32 %add128, i32* @yy_n_chars, align 4
  %94 = load i32, i32* @yy_n_chars, align 4
  %idxprom129 = sext i32 %94 to i64
  %95 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf130 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %95, i32 0, i32 1
  %96 = load i8*, i8** %yy_ch_buf130, align 8
  %arrayidx131 = getelementptr inbounds i8, i8* %96, i64 %idxprom129
  store i8 0, i8* %arrayidx131, align 1
  %97 = load i32, i32* @yy_n_chars, align 4
  %add132 = add nsw i32 %97, 1
  %idxprom133 = sext i32 %add132 to i64
  %98 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf134 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %98, i32 0, i32 1
  %99 = load i8*, i8** %yy_ch_buf134, align 8
  %arrayidx135 = getelementptr inbounds i8, i8* %99, i64 %idxprom133
  store i8 0, i8* %arrayidx135, align 1
  %100 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_ch_buf136 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %100, i32 0, i32 1
  %101 = load i8*, i8** %yy_ch_buf136, align 8
  %arrayidx137 = getelementptr inbounds i8, i8* %101, i64 0
  store i8* %arrayidx137, i8** @dfg_text, align 8
  %102 = load i32, i32* %ret_val, align 4
  store i32 %102, i32* %retval
  br label %return

return:                                           ; preds = %if.end.127, %if.else, %if.then.6
  %103 = load i32, i32* %retval
  ret i32 %103
}

; Function Attrs: nounwind uwtable
define internal void @yy_fatal_error(i8* %msg) #0 {
entry:
  %msg.addr = alloca i8*, align 8
  store i8* %msg, i8** %msg.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1 = load i8*, i8** %msg.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* %1)
  call void @exit(i32 2) #8
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: nounwind uwtable
define void @dfg_restart(%struct._IO_FILE* %input_file) #0 {
entry:
  %input_file.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %input_file, %struct._IO_FILE** %input_file.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dfg_in, align 8
  %call = call %struct.yy_buffer_state* @dfg__create_buffer(%struct._IO_FILE* %1, i32 16384)
  store %struct.yy_buffer_state* %call, %struct.yy_buffer_state** @yy_current_buffer, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %input_file.addr, align 8
  call void @dfg__init_buffer(%struct.yy_buffer_state* %2, %struct._IO_FILE* %3)
  call void @dfg__load_buffer_state()
  ret void
}

; Function Attrs: nounwind uwtable
define void @dfg__init_buffer(%struct.yy_buffer_state* %b, %struct._IO_FILE* %file) #0 {
entry:
  %b.addr = alloca %struct.yy_buffer_state*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  store %struct.yy_buffer_state* %b, %struct.yy_buffer_state** %b.addr, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  call void @dfg__flush_buffer(%struct.yy_buffer_state* %0)
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %2, i32 0, i32 0
  store %struct._IO_FILE* %1, %struct._IO_FILE** %yy_input_file, align 8
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_fill_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %3, i32 0, i32 8
  store i32 1, i32* %yy_fill_buffer, align 4
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_is_interactive = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 6
  store i32 1, i32* %yy_is_interactive, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @dfg__switch_to_buffer(%struct.yy_buffer_state* %new_buffer) #0 {
entry:
  %new_buffer.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %new_buffer, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %new_buffer.addr, align 8
  %cmp = icmp eq %struct.yy_buffer_state* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %2, null
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %3 = load i8, i8* @yy_hold_char, align 1
  %4 = load i8*, i8** @yy_c_buf_p, align 8
  store i8 %3, i8* %4, align 1
  %5 = load i8*, i8** @yy_c_buf_p, align 8
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %6, i32 0, i32 2
  store i8* %5, i8** %yy_buf_pos, align 8
  %7 = load i32, i32* @yy_n_chars, align 4
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %8, i32 0, i32 4
  store i32 %7, i32* %yy_n_chars, align 4
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %new_buffer.addr, align 8
  store %struct.yy_buffer_state* %9, %struct.yy_buffer_state** @yy_current_buffer, align 8
  call void @dfg__load_buffer_state()
  store i32 1, i32* @yy_did_buffer_switch_on_eof, align 4
  br label %return

return:                                           ; preds = %if.end.2, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i8* @yy_flex_alloc(i32 %size) #0 {
entry:
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %conv = zext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #7
  ret i8* %call
}

; Function Attrs: nounwind uwtable
define void @dfg__delete_buffer(%struct.yy_buffer_state* %b) #0 {
entry:
  %b.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %b, %struct.yy_buffer_state** %b.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %cmp = icmp eq %struct.yy_buffer_state* %1, %2
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** @yy_current_buffer, align 8
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %3 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %3, i32 0, i32 5
  %4 = load i32, i32* %yy_is_our_buffer, align 4
  %tobool3 = icmp ne i32 %4, 0
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end.2
  %5 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %5, i32 0, i32 1
  %6 = load i8*, i8** %yy_ch_buf, align 8
  call void @yy_flex_free(i8* %6)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end.2
  %7 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %8 = bitcast %struct.yy_buffer_state* %7 to i8*
  call void @yy_flex_free(i8* %8)
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @yy_flex_free(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  call void @free(i8* %0) #7
  ret void
}

; Function Attrs: nounwind uwtable
define void @dfg__flush_buffer(%struct.yy_buffer_state* %b) #0 {
entry:
  %b.addr = alloca %struct.yy_buffer_state*, align 8
  store %struct.yy_buffer_state* %b, %struct.yy_buffer_state** %b.addr, align 8
  %0 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.6

if.end:                                           ; preds = %entry
  %1 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %1, i32 0, i32 4
  store i32 0, i32* %yy_n_chars, align 4
  %2 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %2, i32 0, i32 1
  %3 = load i8*, i8** %yy_ch_buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  store i8 0, i8* %arrayidx, align 1
  %4 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf1 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %4, i32 0, i32 1
  %5 = load i8*, i8** %yy_ch_buf1, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 0, i8* %arrayidx2, align 1
  %6 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_ch_buf3 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %6, i32 0, i32 1
  %7 = load i8*, i8** %yy_ch_buf3, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %8, i32 0, i32 2
  store i8* %arrayidx4, i8** %yy_buf_pos, align 8
  %9 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_at_bol = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %9, i32 0, i32 7
  store i32 1, i32* %yy_at_bol, align 4
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 9
  store i32 0, i32* %yy_buffer_status, align 4
  %11 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b.addr, align 8
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** @yy_current_buffer, align 8
  %cmp = icmp eq %struct.yy_buffer_state* %11, %12
  br i1 %cmp, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  call void @dfg__load_buffer_state()
  br label %if.end.6

if.end.6:                                         ; preds = %if.then, %if.then.5, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @dfg__scan_buffer(i8* %base, i32 %size) #0 {
entry:
  %retval = alloca %struct.yy_buffer_state*, align 8
  %base.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  store i8* %base, i8** %base.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp ult i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %sub = sub i32 %1, 2
  %idxprom = zext i32 %sub to i64
  %2 = load i8*, i8** %base.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %4 = load i32, i32* %size.addr, align 4
  %sub4 = sub i32 %4, 1
  %idxprom5 = zext i32 %sub4 to i64
  %5 = load i8*, i8** %base.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 %idxprom5
  %6 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %6 to i32
  %cmp8 = icmp ne i32 %conv7, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  store %struct.yy_buffer_state* null, %struct.yy_buffer_state** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.3
  %call = call i8* @yy_flex_alloc(i32 56)
  %7 = bitcast i8* %call to %struct.yy_buffer_state*
  store %struct.yy_buffer_state* %7, %struct.yy_buffer_state** %b, align 8
  %8 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %tobool = icmp ne %struct.yy_buffer_state* %8, null
  br i1 %tobool, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  call void @yy_fatal_error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.7, i32 0, i32 0))
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %if.end
  %9 = load i32, i32* %size.addr, align 4
  %sub12 = sub i32 %9, 2
  %10 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %10, i32 0, i32 3
  store i32 %sub12, i32* %yy_buf_size, align 4
  %11 = load i8*, i8** %base.addr, align 8
  %12 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_ch_buf = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %12, i32 0, i32 1
  store i8* %11, i8** %yy_ch_buf, align 8
  %13 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_pos = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %13, i32 0, i32 2
  store i8* %11, i8** %yy_buf_pos, align 8
  %14 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %14, i32 0, i32 5
  store i32 0, i32* %yy_is_our_buffer, align 4
  %15 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_input_file = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %15, i32 0, i32 0
  store %struct._IO_FILE* null, %struct._IO_FILE** %yy_input_file, align 8
  %16 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buf_size13 = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %16, i32 0, i32 3
  %17 = load i32, i32* %yy_buf_size13, align 4
  %18 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_n_chars = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 4
  store i32 %17, i32* %yy_n_chars, align 4
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_interactive = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %19, i32 0, i32 6
  store i32 0, i32* %yy_is_interactive, align 4
  %20 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_at_bol = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %20, i32 0, i32 7
  store i32 1, i32* %yy_at_bol, align 4
  %21 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_fill_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %21, i32 0, i32 8
  store i32 0, i32* %yy_fill_buffer, align 4
  %22 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_buffer_status = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %22, i32 0, i32 9
  store i32 0, i32* %yy_buffer_status, align 4
  %23 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  call void @dfg__switch_to_buffer(%struct.yy_buffer_state* %23)
  %24 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  store %struct.yy_buffer_state* %24, %struct.yy_buffer_state** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then
  %25 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %retval
  ret %struct.yy_buffer_state* %25
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @dfg__scan_string(i8* %yy_str) #0 {
entry:
  %yy_str.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  store i8* %yy_str, i8** %yy_str.addr, align 8
  store i32 0, i32* %len, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %len, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load i8*, i8** %yy_str.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %len, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %len, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %4 = load i8*, i8** %yy_str.addr, align 8
  %5 = load i32, i32* %len, align 4
  %call = call %struct.yy_buffer_state* @dfg__scan_bytes(i8* %4, i32 %5)
  ret %struct.yy_buffer_state* %call
}

; Function Attrs: nounwind uwtable
define %struct.yy_buffer_state* @dfg__scan_bytes(i8* %bytes, i32 %len) #0 {
entry:
  %bytes.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %b = alloca %struct.yy_buffer_state*, align 8
  %buf = alloca i8*, align 8
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %bytes, i8** %bytes.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %0, 2
  store i32 %add, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %call = call i8* @yy_flex_alloc(i32 %1)
  store i8* %call, i8** %buf, align 8
  %2 = load i8*, i8** %buf, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @yy_fatal_error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8*, i8** %bytes.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %8 to i64
  %9 = load i8*, i8** %buf, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %9, i64 %idxprom1
  store i8 %7, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %len.addr, align 4
  %add3 = add nsw i32 %11, 1
  %idxprom4 = sext i32 %add3 to i64
  %12 = load i8*, i8** %buf, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 %idxprom4
  store i8 0, i8* %arrayidx5, align 1
  %13 = load i32, i32* %len.addr, align 4
  %idxprom6 = sext i32 %13 to i64
  %14 = load i8*, i8** %buf, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 %idxprom6
  store i8 0, i8* %arrayidx7, align 1
  %15 = load i8*, i8** %buf, align 8
  %16 = load i32, i32* %n, align 4
  %call8 = call %struct.yy_buffer_state* @dfg__scan_buffer(i8* %15, i32 %16)
  store %struct.yy_buffer_state* %call8, %struct.yy_buffer_state** %b, align 8
  %17 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %tobool9 = icmp ne %struct.yy_buffer_state* %17, null
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %for.end
  call void @yy_fatal_error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i32 0, i32 0))
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %for.end
  %18 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  %yy_is_our_buffer = getelementptr inbounds %struct.yy_buffer_state, %struct.yy_buffer_state* %18, i32 0, i32 5
  store i32 1, i32* %yy_is_our_buffer, align 4
  %19 = load %struct.yy_buffer_state*, %struct.yy_buffer_state** %b, align 8
  ret %struct.yy_buffer_state* %19
}

declare i8* @memory_Malloc(i32) #4

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #5

; Function Attrs: nounwind uwtable
define internal i8* @yy_flex_realloc(i8* %ptr, i32 %size) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i32, i32* %size.addr, align 4
  %conv = zext i32 %1 to i64
  %call = call i8* @realloc(i8* %0, i64 %conv) #7
  ret i8* %call
}

declare i32 @_IO_getc(%struct._IO_FILE*) #4

; Function Attrs: nounwind
declare i32 @ferror(%struct._IO_FILE*) #3

declare i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #4

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #3

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #3

; Function Attrs: nounwind
declare void @free(i8*) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
