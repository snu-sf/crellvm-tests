; ModuleID = './MultiSource.Applications.SPASS/41.doc-proof.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.MEMORY_BIGBLOCKHEADERHELP = type { %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP* }
%struct.MEMORY_RESOURCEHELP = type { i8*, i8*, i8*, i8*, i32, i32, i32 }
%struct.PROOFSEARCH_HELP = type { %struct.LIST_HELP*, %struct.LIST_HELP*, %struct.LIST_HELP*, %struct.LIST_HELP*, %struct.SHARED_INDEX_NODE*, %struct.LIST_HELP*, %struct.SHARED_INDEX_NODE*, %struct.LIST_HELP*, %struct.SORTTHEORY_HELP*, %struct.SORTTHEORY_HELP*, %struct.SORTTHEORY_HELP*, %struct.SHARED_INDEX_NODE*, %struct.LIST_HELP*, i32*, i32*, %struct.LIST_HELP*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SORTTHEORY_HELP = type { %struct.st*, [4000 x %struct.NODE_HELP*], %struct.LIST_HELP*, %struct.LIST_HELP*, i32 }
%struct.st = type { %struct.subst*, %struct.LIST_HELP*, %struct.LIST_HELP*, i16, i16 }
%struct.subst = type { %struct.subst*, i32, %struct.term* }
%struct.term = type { i32, %union.anon, %struct.LIST_HELP*, i32, i32 }
%union.anon = type { %struct.LIST_HELP* }
%struct.NODE_HELP = type { %struct.LIST_HELP*, i32, i32, i32, %struct.LIST_HELP*, i32 }
%struct.SHARED_INDEX_NODE = type { %struct.st*, [3001 x %struct.term*], [4000 x %struct.term*], i32 }
%struct.LIST_HELP = type { %struct.LIST_HELP*, i8* }
%struct.CLAUSE_HELP = type { i32, i32, i32, i32, i64*, i32, %struct.LIST_HELP*, %struct.LIST_HELP*, i32, i32, %struct.LITERAL_HELP**, i32, i32, i32, i32 }
%struct.LITERAL_HELP = type { i32, i32, i32, %struct.CLAUSE_HELP*, %struct.term* }

@dp_DEPTH = common global i32 0, align 4
@.str = private unnamed_addr constant [59 x i8] c"\0ANOTE: clauses with following numbers have not been found:\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.2 = private unnamed_addr constant [70 x i8] c"NOTE: Following clauses in reduced proof have incomplete parent sets:\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"\0A\0AHere is a proof with depth %d, length %d :\0A\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@memory_OFFSET = external global i32, align 4
@memory_BIGBLOCKS = external global %struct.MEMORY_BIGBLOCKHEADERHELP*, align 8
@memory_MARKSIZE = external global i32, align 4
@memory_FREEDBYTES = external global i64, align 8
@memory_MAXMEM = external global i64, align 8
@memory_ARRAY = external global [0 x %struct.MEMORY_RESOURCEHELP*], align 8
@memory_ALIGN = external constant i32, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"%s.prf\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"begin_problem(Unknown).\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"list_of_descriptions.\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"name({*\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"*}).\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"author({*SPASS \00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"V 2.1\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"status(unsatisfiable).\0A\00", align 1
@.str.13 = private unnamed_addr constant [63 x i8] c"description({*File generated by SPASS containing a proof.*}).\0A\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"end_of_list.\0A\0A\00", align 1
@.str.15 = private unnamed_addr constant [18 x i8] c"list_of_symbols.\0A\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"\0Alist_of_proof(SPASS).\0A\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"end_problem.\0A\0A\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"\0ADFG Proof printed to: \00", align 1

; Function Attrs: nounwind uwtable
define void @dp_Init() #0 {
entry:
  store i32 0, i32* @dp_DEPTH, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.LIST_HELP* @dp_PrintProof(%struct.PROOFSEARCH_HELP* %Search, %struct.LIST_HELP* %Clauses, i8* %FilePrefix) #0 {
entry:
  %Search.addr = alloca %struct.PROOFSEARCH_HELP*, align 8
  %Clauses.addr = alloca %struct.LIST_HELP*, align 8
  %FilePrefix.addr = alloca i8*, align 8
  %ProofClauses = alloca %struct.LIST_HELP*, align 8
  %Scan = alloca %struct.LIST_HELP*, align 8
  %EmptyClauses = alloca %struct.LIST_HELP*, align 8
  %AllClauses = alloca %struct.LIST_HELP*, align 8
  %ReducedProof = alloca %struct.LIST_HELP*, align 8
  %Missing = alloca %struct.LIST_HELP*, align 8
  %Incomplete = alloca %struct.LIST_HELP*, align 8
  %SplitClauses = alloca %struct.LIST_HELP*, align 8
  %Flags = alloca i32*, align 8
  store %struct.PROOFSEARCH_HELP* %Search, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  store %struct.LIST_HELP* %Clauses, %struct.LIST_HELP** %Clauses.addr, align 8
  store i8* %FilePrefix, i8** %FilePrefix.addr, align 8
  %0 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  %call = call i32* @prfs_Store(%struct.PROOFSEARCH_HELP* %0)
  store i32* %call, i32** %Flags, align 8
  %1 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  %2 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Clauses.addr, align 8
  %call1 = call %struct.LIST_HELP* @pcheck_ConvertParentsInSPASSProof(%struct.PROOFSEARCH_HELP* %1, %struct.LIST_HELP* %2)
  store %struct.LIST_HELP* %call1, %struct.LIST_HELP** %Missing, align 8
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Missing, align 8
  %call2 = call i32 @list_Empty(%struct.LIST_HELP* %3)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call3 = call i32 @puts(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i32 0, i32 0))
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Missing, align 8
  %call4 = call i32 @list_Empty(%struct.LIST_HELP* %4)
  %tobool5 = icmp ne i32 %call4, 0
  %lnot = xor i1 %tobool5, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Missing, align 8
  %call6 = call i8* @list_Car(%struct.LIST_HELP* %5)
  %6 = ptrtoint i8* %call6 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Missing, align 8
  %call8 = call %struct.LIST_HELP* @list_Pop(%struct.LIST_HELP* %7)
  store %struct.LIST_HELP* %call8, %struct.LIST_HELP** %Missing, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 @putchar(i32 10)
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %8 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Clauses.addr, align 8
  %call10 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* %8)
  store %struct.LIST_HELP* %call10, %struct.LIST_HELP** %EmptyClauses, align 8
  %call11 = call %struct.LIST_HELP* @list_Nil()
  store %struct.LIST_HELP* %call11, %struct.LIST_HELP** %ProofClauses, align 8
  %9 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  %call12 = call %struct.LIST_HELP* @prfs_DocProofClauses(%struct.PROOFSEARCH_HELP* %9)
  %call13 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* %call12)
  %10 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  %call14 = call %struct.LIST_HELP* @prfs_UsableClauses(%struct.PROOFSEARCH_HELP* %10)
  %call15 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* %call14)
  %11 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  %call16 = call %struct.LIST_HELP* @prfs_WorkedOffClauses(%struct.PROOFSEARCH_HELP* %11)
  %call17 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* %call16)
  %call18 = call %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* %call15, %struct.LIST_HELP* %call17)
  %call19 = call %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* %call13, %struct.LIST_HELP* %call18)
  store %struct.LIST_HELP* %call19, %struct.LIST_HELP** %AllClauses, align 8
  %call20 = call %struct.LIST_HELP* @list_Nil()
  store %struct.LIST_HELP* %call20, %struct.LIST_HELP** %SplitClauses, align 8
  %12 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AllClauses, align 8
  store %struct.LIST_HELP* %12, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.33, %if.end
  %13 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call22 = call i32 @list_Empty(%struct.LIST_HELP* %13)
  %tobool23 = icmp ne i32 %call22, 0
  %lnot24 = xor i1 %tobool23, true
  br i1 %lnot24, label %for.body.25, label %for.end.35

for.body.25:                                      ; preds = %for.cond.21
  %14 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call26 = call i8* @list_Car(%struct.LIST_HELP* %14)
  %15 = bitcast i8* %call26 to %struct.CLAUSE_HELP*
  %call27 = call i32 @clause_IsFromSplitting(%struct.CLAUSE_HELP* %15)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.32

if.then.29:                                       ; preds = %for.body.25
  %16 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call30 = call i8* @list_Car(%struct.LIST_HELP* %16)
  %17 = load %struct.LIST_HELP*, %struct.LIST_HELP** %SplitClauses, align 8
  %call31 = call %struct.LIST_HELP* @list_Cons(i8* %call30, %struct.LIST_HELP* %17)
  store %struct.LIST_HELP* %call31, %struct.LIST_HELP** %SplitClauses, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.29, %for.body.25
  br label %for.inc.33

for.inc.33:                                       ; preds = %if.end.32
  %18 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call34 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %18)
  store %struct.LIST_HELP* %call34, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.21

for.end.35:                                       ; preds = %for.cond.21
  %19 = load %struct.LIST_HELP*, %struct.LIST_HELP** %EmptyClauses, align 8
  call void @pcheck_ClauseListRemoveFlag(%struct.LIST_HELP* %19, i32 64)
  %20 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AllClauses, align 8
  call void @pcheck_ClauseListRemoveFlag(%struct.LIST_HELP* %20, i32 64)
  %21 = load %struct.LIST_HELP*, %struct.LIST_HELP** %EmptyClauses, align 8
  call void @pcheck_MarkRecursive(%struct.LIST_HELP* %21)
  %22 = load %struct.LIST_HELP*, %struct.LIST_HELP** %SplitClauses, align 8
  call void @pcheck_MarkRecursive(%struct.LIST_HELP* %22)
  %call36 = call %struct.LIST_HELP* @list_Nil()
  store %struct.LIST_HELP* %call36, %struct.LIST_HELP** %ProofClauses, align 8
  %23 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AllClauses, align 8
  store %struct.LIST_HELP* %23, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.49, %for.end.35
  %24 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call38 = call i32 @list_Empty(%struct.LIST_HELP* %24)
  %tobool39 = icmp ne i32 %call38, 0
  %lnot40 = xor i1 %tobool39, true
  br i1 %lnot40, label %for.body.41, label %for.end.51

for.body.41:                                      ; preds = %for.cond.37
  %25 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call42 = call i8* @list_Car(%struct.LIST_HELP* %25)
  %26 = bitcast i8* %call42 to %struct.CLAUSE_HELP*
  %call43 = call i32 @clause_GetFlag(%struct.CLAUSE_HELP* %26, i32 64)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.then.45, label %if.end.48

if.then.45:                                       ; preds = %for.body.41
  %27 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call46 = call i8* @list_Car(%struct.LIST_HELP* %27)
  %28 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  %call47 = call %struct.LIST_HELP* @list_Cons(i8* %call46, %struct.LIST_HELP* %28)
  store %struct.LIST_HELP* %call47, %struct.LIST_HELP** %ProofClauses, align 8
  br label %if.end.48

if.end.48:                                        ; preds = %if.then.45, %for.body.41
  br label %for.inc.49

for.inc.49:                                       ; preds = %if.end.48
  %29 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call50 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %29)
  store %struct.LIST_HELP* %call50, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.37

for.end.51:                                       ; preds = %for.cond.37
  %30 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  %31 = load %struct.LIST_HELP*, %struct.LIST_HELP** %EmptyClauses, align 8
  %call52 = call %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP* %31)
  %call53 = call %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* %30, %struct.LIST_HELP* %call52)
  store %struct.LIST_HELP* %call53, %struct.LIST_HELP** %ProofClauses, align 8
  %32 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  %call54 = call %struct.LIST_HELP* @pcheck_ClauseNumberMergeSort(%struct.LIST_HELP* %32)
  store %struct.LIST_HELP* %call54, %struct.LIST_HELP** %ProofClauses, align 8
  %33 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  %call55 = call %struct.LIST_HELP* @pcheck_ReduceSPASSProof(%struct.LIST_HELP* %33)
  store %struct.LIST_HELP* %call55, %struct.LIST_HELP** %ReducedProof, align 8
  %34 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ReducedProof, align 8
  %call56 = call i32 @pcheck_SeqProofDepth(%struct.LIST_HELP* %34)
  call void @dp_SetProofDepth(i32 %call56)
  %35 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AllClauses, align 8
  %call57 = call %struct.LIST_HELP* @pcheck_ParentPointersToParentNumbers(%struct.LIST_HELP* %35)
  %36 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Clauses.addr, align 8
  %call58 = call %struct.LIST_HELP* @pcheck_ParentPointersToParentNumbers(%struct.LIST_HELP* %36)
  %call59 = call %struct.LIST_HELP* @list_Nil()
  store %struct.LIST_HELP* %call59, %struct.LIST_HELP** %Incomplete, align 8
  %37 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ReducedProof, align 8
  store %struct.LIST_HELP* %37, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.60

for.cond.60:                                      ; preds = %for.inc.72, %for.end.51
  %38 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call61 = call i32 @list_Empty(%struct.LIST_HELP* %38)
  %tobool62 = icmp ne i32 %call61, 0
  %lnot63 = xor i1 %tobool62, true
  br i1 %lnot63, label %for.body.64, label %for.end.74

for.body.64:                                      ; preds = %for.cond.60
  %39 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call65 = call i8* @list_Car(%struct.LIST_HELP* %39)
  %40 = bitcast i8* %call65 to %struct.CLAUSE_HELP*
  %call66 = call i32 @clause_GetFlag(%struct.CLAUSE_HELP* %40, i32 128)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.then.68, label %if.end.71

if.then.68:                                       ; preds = %for.body.64
  %41 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call69 = call i8* @list_Car(%struct.LIST_HELP* %41)
  %42 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Incomplete, align 8
  %call70 = call %struct.LIST_HELP* @list_Cons(i8* %call69, %struct.LIST_HELP* %42)
  store %struct.LIST_HELP* %call70, %struct.LIST_HELP** %Incomplete, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.68, %for.body.64
  br label %for.inc.72

for.inc.72:                                       ; preds = %if.end.71
  %43 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call73 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %43)
  store %struct.LIST_HELP* %call73, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.60

for.end.74:                                       ; preds = %for.cond.60
  %44 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Incomplete, align 8
  %call75 = call i32 @list_Empty(%struct.LIST_HELP* %44)
  %tobool76 = icmp ne i32 %call75, 0
  br i1 %tobool76, label %if.end.91, label %if.then.77

if.then.77:                                       ; preds = %for.end.74
  %call78 = call i32 @puts(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.2, i32 0, i32 0))
  %45 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Incomplete, align 8
  store %struct.LIST_HELP* %45, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc.87, %if.then.77
  %46 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call80 = call i32 @list_Empty(%struct.LIST_HELP* %46)
  %tobool81 = icmp ne i32 %call80, 0
  %lnot82 = xor i1 %tobool81, true
  br i1 %lnot82, label %for.body.83, label %for.end.89

for.body.83:                                      ; preds = %for.cond.79
  %47 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call84 = call i8* @list_Car(%struct.LIST_HELP* %47)
  %48 = bitcast i8* %call84 to %struct.CLAUSE_HELP*
  %call85 = call i32 @clause_Number(%struct.CLAUSE_HELP* %48)
  %call86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 %call85)
  br label %for.inc.87

for.inc.87:                                       ; preds = %for.body.83
  %49 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call88 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %49)
  store %struct.LIST_HELP* %call88, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.79

for.end.89:                                       ; preds = %for.cond.79
  %call90 = call i32 @putchar(i32 10)
  br label %if.end.91

if.end.91:                                        ; preds = %for.end.89, %for.end.74
  %call92 = call i32 @dp_ProofDepth()
  %50 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ReducedProof, align 8
  %call93 = call i32 @list_Length(%struct.LIST_HELP* %50)
  %call94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i32 0, i32 0), i32 %call92, i32 %call93)
  %51 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ReducedProof, align 8
  call void @clause_ListPrint(%struct.LIST_HELP* %51)
  %52 = load i32*, i32** %Flags, align 8
  %call95 = call i32 @flag_GetFlagValue(i32* %52, i32 31)
  %tobool96 = icmp ne i32 %call95, 0
  br i1 %tobool96, label %if.then.97, label %if.end.99

if.then.97:                                       ; preds = %if.end.91
  %53 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ReducedProof, align 8
  %54 = load i8*, i8** %FilePrefix.addr, align 8
  %55 = load i32*, i32** %Flags, align 8
  %56 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Search.addr, align 8
  %call98 = call i32* @prfs_Precedence(%struct.PROOFSEARCH_HELP* %56)
  call void @dp_FPrintDFGProof(%struct.LIST_HELP* %53, i8* %54, i32* %55, i32* %call98)
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.97, %if.end.91
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call100 = call i32 @fflush(%struct._IO_FILE* %57)
  %58 = load %struct.LIST_HELP*, %struct.LIST_HELP** %EmptyClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %58)
  %59 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AllClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %59)
  %60 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %60)
  %61 = load %struct.LIST_HELP*, %struct.LIST_HELP** %SplitClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %61)
  %62 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Incomplete, align 8
  call void @list_Delete(%struct.LIST_HELP* %62)
  %63 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ReducedProof, align 8
  ret %struct.LIST_HELP* %63
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32* @prfs_Store(%struct.PROOFSEARCH_HELP* %Prf) #1 {
entry:
  %Prf.addr = alloca %struct.PROOFSEARCH_HELP*, align 8
  store %struct.PROOFSEARCH_HELP* %Prf, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %0 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %store = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i32 0, i32 14
  %1 = load i32*, i32** %store, align 8
  ret i32* %1
}

declare %struct.LIST_HELP* @pcheck_ConvertParentsInSPASSProof(%struct.PROOFSEARCH_HELP*, %struct.LIST_HELP*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @list_Empty(%struct.LIST_HELP* %L) #1 {
entry:
  %L.addr = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %L, %struct.LIST_HELP** %L.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  %cmp = icmp eq %struct.LIST_HELP* %0, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i32 @puts(i8*) #2

declare i32 @printf(i8*, ...) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @list_Car(%struct.LIST_HELP* %L) #1 {
entry:
  %L.addr = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %L, %struct.LIST_HELP** %L.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  %car = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %0, i32 0, i32 1
  %1 = load i8*, i8** %car, align 8
  ret i8* %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @list_Pop(%struct.LIST_HELP* %L) #1 {
entry:
  %L.addr = alloca %struct.LIST_HELP*, align 8
  %Aux = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %L, %struct.LIST_HELP** %L.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  store %struct.LIST_HELP* %0, %struct.LIST_HELP** %Aux, align 8
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  %call = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %1)
  store %struct.LIST_HELP* %call, %struct.LIST_HELP** %L.addr, align 8
  %2 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Aux, align 8
  call void @list_Free(%struct.LIST_HELP* %2)
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  ret %struct.LIST_HELP* %3
}

declare i32 @putchar(i32) #2

declare %struct.LIST_HELP* @list_Copy(%struct.LIST_HELP*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @list_Nil() #1 {
entry:
  ret %struct.LIST_HELP* null
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @list_Nconc(%struct.LIST_HELP* %List1, %struct.LIST_HELP* %List2) #1 {
entry:
  %retval = alloca %struct.LIST_HELP*, align 8
  %List1.addr = alloca %struct.LIST_HELP*, align 8
  %List2.addr = alloca %struct.LIST_HELP*, align 8
  %Result = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %List1, %struct.LIST_HELP** %List1.addr, align 8
  store %struct.LIST_HELP* %List2, %struct.LIST_HELP** %List2.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List1.addr, align 8
  %call = call i32 @list_Empty(%struct.LIST_HELP* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List2.addr, align 8
  store %struct.LIST_HELP* %1, %struct.LIST_HELP** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List2.addr, align 8
  %call1 = call i32 @list_Empty(%struct.LIST_HELP* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List1.addr, align 8
  store %struct.LIST_HELP* %3, %struct.LIST_HELP** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List1.addr, align 8
  store %struct.LIST_HELP* %4, %struct.LIST_HELP** %Result, align 8
  %5 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Result, align 8
  store %struct.LIST_HELP* %5, %struct.LIST_HELP** %List1.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %6 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List1.addr, align 8
  %call5 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %6)
  %call6 = call i32 @list_Empty(%struct.LIST_HELP* %call5)
  %tobool7 = icmp ne i32 %call6, 0
  %lnot = xor i1 %tobool7, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List1.addr, align 8
  %call8 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %7)
  store %struct.LIST_HELP* %call8, %struct.LIST_HELP** %List1.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List2.addr, align 8
  %9 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List1.addr, align 8
  %cdr = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %9, i32 0, i32 0
  store %struct.LIST_HELP* %8, %struct.LIST_HELP** %cdr, align 8
  %10 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Result, align 8
  store %struct.LIST_HELP* %10, %struct.LIST_HELP** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.3, %if.then
  %11 = load %struct.LIST_HELP*, %struct.LIST_HELP** %retval
  ret %struct.LIST_HELP* %11
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @prfs_DocProofClauses(%struct.PROOFSEARCH_HELP* %Prf) #1 {
entry:
  %Prf.addr = alloca %struct.PROOFSEARCH_HELP*, align 8
  store %struct.PROOFSEARCH_HELP* %Prf, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %0 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %dplist = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i32 0, i32 12
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %dplist, align 8
  ret %struct.LIST_HELP* %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @prfs_UsableClauses(%struct.PROOFSEARCH_HELP* %Prf) #1 {
entry:
  %Prf.addr = alloca %struct.PROOFSEARCH_HELP*, align 8
  store %struct.PROOFSEARCH_HELP* %Prf, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %0 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %uslist = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i32 0, i32 7
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %uslist, align 8
  ret %struct.LIST_HELP* %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @prfs_WorkedOffClauses(%struct.PROOFSEARCH_HELP* %Prf) #1 {
entry:
  %Prf.addr = alloca %struct.PROOFSEARCH_HELP*, align 8
  store %struct.PROOFSEARCH_HELP* %Prf, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %0 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %wolist = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i32 0, i32 5
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %wolist, align 8
  ret %struct.LIST_HELP* %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @clause_IsFromSplitting(%struct.CLAUSE_HELP* %Clause) #1 {
entry:
  %Clause.addr = alloca %struct.CLAUSE_HELP*, align 8
  store %struct.CLAUSE_HELP* %Clause, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %0 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %origin = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i32 0, i32 14
  %1 = load i32, i32* %origin, align 4
  %cmp = icmp eq i32 %1, 15
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @list_Cons(i8* %Ptr, %struct.LIST_HELP* %List) #1 {
entry:
  %Ptr.addr = alloca i8*, align 8
  %List.addr = alloca %struct.LIST_HELP*, align 8
  %Cell = alloca %struct.LIST_HELP*, align 8
  store i8* %Ptr, i8** %Ptr.addr, align 8
  store %struct.LIST_HELP* %List, %struct.LIST_HELP** %List.addr, align 8
  %call = call i8* @memory_Malloc(i32 16)
  %0 = bitcast i8* %call to %struct.LIST_HELP*
  store %struct.LIST_HELP* %0, %struct.LIST_HELP** %Cell, align 8
  %1 = load i8*, i8** %Ptr.addr, align 8
  %2 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Cell, align 8
  %car = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %2, i32 0, i32 1
  store i8* %1, i8** %car, align 8
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %List.addr, align 8
  %4 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Cell, align 8
  %cdr = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %4, i32 0, i32 0
  store %struct.LIST_HELP* %3, %struct.LIST_HELP** %cdr, align 8
  %5 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Cell, align 8
  ret %struct.LIST_HELP* %5
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %L) #1 {
entry:
  %L.addr = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %L, %struct.LIST_HELP** %L.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  %cdr = getelementptr inbounds %struct.LIST_HELP, %struct.LIST_HELP* %0, i32 0, i32 0
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %cdr, align 8
  ret %struct.LIST_HELP* %1
}

declare void @pcheck_ClauseListRemoveFlag(%struct.LIST_HELP*, i32) #2

declare void @pcheck_MarkRecursive(%struct.LIST_HELP*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @clause_GetFlag(%struct.CLAUSE_HELP* %Clause, i32 %Flag) #1 {
entry:
  %Clause.addr = alloca %struct.CLAUSE_HELP*, align 8
  %Flag.addr = alloca i32, align 4
  store %struct.CLAUSE_HELP* %Clause, %struct.CLAUSE_HELP** %Clause.addr, align 8
  store i32 %Flag, i32* %Flag.addr, align 4
  %0 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %flags = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i32 0, i32 8
  %1 = load i32, i32* %flags, align 4
  %2 = load i32, i32* %Flag.addr, align 4
  %and = and i32 %1, %2
  %cmp = icmp ne i32 %and, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare %struct.LIST_HELP* @pcheck_ClauseNumberMergeSort(%struct.LIST_HELP*) #2

declare %struct.LIST_HELP* @pcheck_ReduceSPASSProof(%struct.LIST_HELP*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @dp_SetProofDepth(i32 %Depth) #1 {
entry:
  %Depth.addr = alloca i32, align 4
  store i32 %Depth, i32* %Depth.addr, align 4
  %0 = load i32, i32* %Depth.addr, align 4
  store i32 %0, i32* @dp_DEPTH, align 4
  ret void
}

declare i32 @pcheck_SeqProofDepth(%struct.LIST_HELP*) #2

declare %struct.LIST_HELP* @pcheck_ParentPointersToParentNumbers(%struct.LIST_HELP*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @clause_Number(%struct.CLAUSE_HELP* %Clause) #1 {
entry:
  %Clause.addr = alloca %struct.CLAUSE_HELP*, align 8
  store %struct.CLAUSE_HELP* %Clause, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %0 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %clausenumber = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i32 0, i32 0
  %1 = load i32, i32* %clausenumber, align 4
  ret i32 %1
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @dp_ProofDepth() #1 {
entry:
  %0 = load i32, i32* @dp_DEPTH, align 4
  ret i32 %0
}

declare i32 @list_Length(%struct.LIST_HELP*) #2

declare void @clause_ListPrint(%struct.LIST_HELP*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @flag_GetFlagValue(i32* %Store, i32 %FlagId) #1 {
entry:
  %Store.addr = alloca i32*, align 8
  %FlagId.addr = alloca i32, align 4
  %Value = alloca i32, align 4
  store i32* %Store, i32** %Store.addr, align 8
  store i32 %FlagId, i32* %FlagId.addr, align 4
  %0 = load i32, i32* %FlagId.addr, align 4
  call void @flag_CheckFlagIdInRange(i32 %0)
  %1 = load i32, i32* %FlagId.addr, align 4
  %idxprom = zext i32 %1 to i64
  %2 = load i32*, i32** %Store.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %Value, align 4
  %4 = load i32, i32* %Value, align 4
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal void @dp_FPrintDFGProof(%struct.LIST_HELP* %Clauses, i8* %FilePrefix, i32* %Flags, i32* %Precedence) #0 {
entry:
  %Clauses.addr = alloca %struct.LIST_HELP*, align 8
  %FilePrefix.addr = alloca i8*, align 8
  %Flags.addr = alloca i32*, align 8
  %Precedence.addr = alloca i32*, align 8
  %Output = alloca %struct._IO_FILE*, align 8
  %Clause = alloca %struct.CLAUSE_HELP*, align 8
  %AxClauses = alloca %struct.LIST_HELP*, align 8
  %ConClauses = alloca %struct.LIST_HELP*, align 8
  %ProofClauses = alloca %struct.LIST_HELP*, align 8
  %Scan = alloca %struct.LIST_HELP*, align 8
  %name = alloca i8*, align 8
  store %struct.LIST_HELP* %Clauses, %struct.LIST_HELP** %Clauses.addr, align 8
  store i8* %FilePrefix, i8** %FilePrefix.addr, align 8
  store i32* %Flags, i32** %Flags.addr, align 8
  store i32* %Precedence, i32** %Precedence.addr, align 8
  %call = call %struct.LIST_HELP* @list_Nil()
  store %struct.LIST_HELP* %call, %struct.LIST_HELP** %ProofClauses, align 8
  store %struct.LIST_HELP* %call, %struct.LIST_HELP** %ConClauses, align 8
  store %struct.LIST_HELP* %call, %struct.LIST_HELP** %AxClauses, align 8
  %0 = load i8*, i8** %FilePrefix.addr, align 8
  %call1 = call i64 @strlen(i8* %0) #5
  %add = add i64 %call1, 5
  %mul = mul i64 1, %add
  %conv = trunc i64 %mul to i32
  %call2 = call i8* @memory_Malloc(i32 %conv)
  store i8* %call2, i8** %name, align 8
  %1 = load i8*, i8** %name, align 8
  %2 = load i8*, i8** %FilePrefix.addr, align 8
  %call3 = call i32 (i8*, i8*, ...) @sprintf(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0), i8* %2) #6
  %3 = load i8*, i8** %name, align 8
  %call4 = call %struct._IO_FILE* @misc_OpenFile(i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i32 0, i32 0))
  store %struct._IO_FILE* %call4, %struct._IO_FILE** %Output, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call5 = call i32 @fputs(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i32 0, i32 0), %struct._IO_FILE* %4)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call6 = call i32 @fputs(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0), %struct._IO_FILE* %5)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call7 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), %struct._IO_FILE* %6)
  %7 = load i8*, i8** %FilePrefix.addr, align 8
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call8 = call i32 @fputs(i8* %7, %struct._IO_FILE* %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call9 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), %struct._IO_FILE* %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call10 = call i32 @fputs(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0), %struct._IO_FILE* %10)
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call11 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0), %struct._IO_FILE* %11)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call12 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), %struct._IO_FILE* %12)
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call13 = call i32 @fputs(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i32 0, i32 0), %struct._IO_FILE* %13)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call14 = call i32 @fputs(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.13, i32 0, i32 0), %struct._IO_FILE* %14)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call15 = call i32 @fputs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), %struct._IO_FILE* %15)
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call16 = call i32 @fputs(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.15, i32 0, i32 0), %struct._IO_FILE* %16)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  call void @fol_FPrintDFGSignature(%struct._IO_FILE* %17)
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call17 = call i32 @fputs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), %struct._IO_FILE* %18)
  %19 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Clauses.addr, align 8
  store %struct.LIST_HELP* %19, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %20 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call18 = call i32 @list_Empty(%struct.LIST_HELP* %20)
  %tobool = icmp ne i32 %call18, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call19 = call i8* @list_Car(%struct.LIST_HELP* %21)
  %22 = bitcast i8* %call19 to %struct.CLAUSE_HELP*
  store %struct.CLAUSE_HELP* %22, %struct.CLAUSE_HELP** %Clause, align 8
  %23 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause, align 8
  %call20 = call i32 @clause_IsFromInput(%struct.CLAUSE_HELP* %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then, label %if.else.27

if.then:                                          ; preds = %for.body
  %24 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause, align 8
  %call22 = call i32 @clause_GetFlag(%struct.CLAUSE_HELP* %24, i32 8)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %if.then
  %25 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause, align 8
  %26 = bitcast %struct.CLAUSE_HELP* %25 to i8*
  %27 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ConClauses, align 8
  %call25 = call %struct.LIST_HELP* @list_Cons(i8* %26, %struct.LIST_HELP* %27)
  store %struct.LIST_HELP* %call25, %struct.LIST_HELP** %ConClauses, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %28 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause, align 8
  %29 = bitcast %struct.CLAUSE_HELP* %28 to i8*
  %30 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AxClauses, align 8
  %call26 = call %struct.LIST_HELP* @list_Cons(i8* %29, %struct.LIST_HELP* %30)
  store %struct.LIST_HELP* %call26, %struct.LIST_HELP** %AxClauses, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.24
  br label %if.end.29

if.else.27:                                       ; preds = %for.body
  %31 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause, align 8
  %32 = bitcast %struct.CLAUSE_HELP* %31 to i8*
  %33 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  %call28 = call %struct.LIST_HELP* @list_Cons(i8* %32, %struct.LIST_HELP* %33)
  store %struct.LIST_HELP* %call28, %struct.LIST_HELP** %ProofClauses, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.27, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.29
  %34 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call30 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %34)
  store %struct.LIST_HELP* %call30, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ConClauses, align 8
  %call31 = call %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* %35)
  store %struct.LIST_HELP* %call31, %struct.LIST_HELP** %ConClauses, align 8
  %36 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AxClauses, align 8
  %call32 = call %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* %36)
  store %struct.LIST_HELP* %call32, %struct.LIST_HELP** %AxClauses, align 8
  %37 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  %call33 = call %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP* %37)
  store %struct.LIST_HELP* %call33, %struct.LIST_HELP** %ProofClauses, align 8
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %39 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AxClauses, align 8
  %40 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ConClauses, align 8
  %41 = load i32*, i32** %Flags.addr, align 8
  %42 = load i32*, i32** %Precedence.addr, align 8
  call void @clause_FPrintCnfDFG(%struct._IO_FILE* %38, i32 0, %struct.LIST_HELP* %39, %struct.LIST_HELP* %40, i32* %41, i32* %42)
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call34 = call i32 @fputs(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i32 0, i32 0), %struct._IO_FILE* %43)
  %44 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  store %struct.LIST_HELP* %44, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.41, %for.end
  %45 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call36 = call i32 @list_Empty(%struct.LIST_HELP* %45)
  %tobool37 = icmp ne i32 %call36, 0
  %lnot38 = xor i1 %tobool37, true
  br i1 %lnot38, label %for.body.39, label %for.end.43

for.body.39:                                      ; preds = %for.cond.35
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %47 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call40 = call i8* @list_Car(%struct.LIST_HELP* %47)
  %48 = bitcast i8* %call40 to %struct.CLAUSE_HELP*
  call void @clause_FPrintDFGStep(%struct._IO_FILE* %46, %struct.CLAUSE_HELP* %48, i32 1)
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.body.39
  %49 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Scan, align 8
  %call42 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %49)
  store %struct.LIST_HELP* %call42, %struct.LIST_HELP** %Scan, align 8
  br label %for.cond.35

for.end.43:                                       ; preds = %for.cond.35
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call44 = call i32 @fputs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), %struct._IO_FILE* %50)
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %call45 = call i32 @fputs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), %struct._IO_FILE* %51)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %Output, align 8
  %53 = load i8*, i8** %name, align 8
  call void @misc_CloseFile(%struct._IO_FILE* %52, i8* %53)
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %call46 = call i32 @fputs(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i32 0, i32 0), %struct._IO_FILE* %54)
  %55 = load i8*, i8** %name, align 8
  %call47 = call i32 @puts(i8* %55)
  %56 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ConClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %56)
  %57 = load %struct.LIST_HELP*, %struct.LIST_HELP** %AxClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %57)
  %58 = load %struct.LIST_HELP*, %struct.LIST_HELP** %ProofClauses, align 8
  call void @list_Delete(%struct.LIST_HELP* %58)
  %59 = load i8*, i8** %name, align 8
  %60 = load i8*, i8** %FilePrefix.addr, align 8
  %call48 = call i64 @strlen(i8* %60) #5
  %add49 = add i64 %call48, 5
  %mul50 = mul i64 1, %add49
  %conv51 = trunc i64 %mul50 to i32
  call void @memory_Free(i8* %59, i32 %conv51)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32* @prfs_Precedence(%struct.PROOFSEARCH_HELP* %Prf) #1 {
entry:
  %Prf.addr = alloca %struct.PROOFSEARCH_HELP*, align 8
  store %struct.PROOFSEARCH_HELP* %Prf, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %0 = load %struct.PROOFSEARCH_HELP*, %struct.PROOFSEARCH_HELP** %Prf.addr, align 8
  %precedence = getelementptr inbounds %struct.PROOFSEARCH_HELP, %struct.PROOFSEARCH_HELP* %0, i32 0, i32 13
  %1 = load i32*, i32** %precedence, align 8
  ret i32* %1
}

declare i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_Delete(%struct.LIST_HELP* %L) #1 {
entry:
  %L.addr = alloca %struct.LIST_HELP*, align 8
  %Current = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %L, %struct.LIST_HELP** %L.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  store %struct.LIST_HELP* %0, %struct.LIST_HELP** %Current, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Current, align 8
  %call = call i32 @list_Empty(%struct.LIST_HELP* %1)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  %call1 = call %struct.LIST_HELP* @list_Cdr(%struct.LIST_HELP* %2)
  store %struct.LIST_HELP* %call1, %struct.LIST_HELP** %L.addr, align 8
  %3 = load %struct.LIST_HELP*, %struct.LIST_HELP** %Current, align 8
  call void @list_Free(%struct.LIST_HELP* %3)
  %4 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  store %struct.LIST_HELP* %4, %struct.LIST_HELP** %Current, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @list_Free(%struct.LIST_HELP* %L) #1 {
entry:
  %L.addr = alloca %struct.LIST_HELP*, align 8
  store %struct.LIST_HELP* %L, %struct.LIST_HELP** %L.addr, align 8
  %0 = load %struct.LIST_HELP*, %struct.LIST_HELP** %L.addr, align 8
  %1 = bitcast %struct.LIST_HELP* %0 to i8*
  call void @memory_Free(i8* %1, i32 16)
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @memory_Free(i8* %Freepointer, i32 %Size) #1 {
entry:
  %Freepointer.addr = alloca i8*, align 8
  %Size.addr = alloca i32, align 4
  %RealBlockSize = alloca i32, align 4
  %BigBlockHeader = alloca %struct.MEMORY_BIGBLOCKHEADERHELP*, align 8
  store i8* %Freepointer, i8** %Freepointer.addr, align 8
  store i32 %Size, i32* %Size.addr, align 4
  %0 = load i32, i32* %Size.addr, align 4
  %call = call i32 @memory_LookupRealBlockSize(i32 %0)
  store i32 %call, i32* %RealBlockSize, align 4
  %1 = load i32, i32* %Size.addr, align 4
  %cmp = icmp uge i32 %1, 1024
  br i1 %cmp, label %if.then, label %if.else.25

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %Freepointer.addr, align 8
  %3 = load i32, i32* @memory_OFFSET, align 4
  %idx.ext = zext i32 %3 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.neg
  %add.ptr1 = getelementptr inbounds i8, i8* %add.ptr, i64 -16
  %4 = bitcast i8* %add.ptr1 to %struct.MEMORY_BIGBLOCKHEADERHELP*
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %4, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %5 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %previous = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %5, i32 0, i32 0
  %6 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %previous, align 8
  %cmp2 = icmp ne %struct.MEMORY_BIGBLOCKHEADERHELP* %6, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %7 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %next = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %7, i32 0, i32 1
  %8 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %next, align 8
  %9 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %previous4 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %9, i32 0, i32 0
  %10 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %previous4, align 8
  %next5 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %10, i32 0, i32 1
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %8, %struct.MEMORY_BIGBLOCKHEADERHELP** %next5, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %11 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %next6 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %11, i32 0, i32 1
  %12 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %next6, align 8
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %12, %struct.MEMORY_BIGBLOCKHEADERHELP** @memory_BIGBLOCKS, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  %13 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %next7 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %13, i32 0, i32 1
  %14 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %next7, align 8
  %cmp8 = icmp ne %struct.MEMORY_BIGBLOCKHEADERHELP* %14, null
  br i1 %cmp8, label %if.then.9, label %if.end.13

if.then.9:                                        ; preds = %if.end
  %15 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %previous10 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %15, i32 0, i32 0
  %16 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %previous10, align 8
  %17 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %BigBlockHeader, align 8
  %next11 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %17, i32 0, i32 1
  %18 = load %struct.MEMORY_BIGBLOCKHEADERHELP*, %struct.MEMORY_BIGBLOCKHEADERHELP** %next11, align 8
  %previous12 = getelementptr inbounds %struct.MEMORY_BIGBLOCKHEADERHELP, %struct.MEMORY_BIGBLOCKHEADERHELP* %18, i32 0, i32 0
  store %struct.MEMORY_BIGBLOCKHEADERHELP* %16, %struct.MEMORY_BIGBLOCKHEADERHELP** %previous12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.9, %if.end
  %19 = load i32, i32* %RealBlockSize, align 4
  %20 = load i32, i32* @memory_MARKSIZE, align 4
  %add = add i32 %19, %20
  %conv = zext i32 %add to i64
  %add14 = add i64 %conv, 16
  %21 = load i64, i64* @memory_FREEDBYTES, align 8
  %add15 = add i64 %21, %add14
  store i64 %add15, i64* @memory_FREEDBYTES, align 8
  %22 = load i64, i64* @memory_MAXMEM, align 8
  %cmp16 = icmp sge i64 %22, 0
  br i1 %cmp16, label %if.then.18, label %if.end.23

if.then.18:                                       ; preds = %if.end.13
  %23 = load i32, i32* %RealBlockSize, align 4
  %24 = load i32, i32* @memory_MARKSIZE, align 4
  %add19 = add i32 %23, %24
  %conv20 = zext i32 %add19 to i64
  %add21 = add i64 %conv20, 16
  %25 = load i64, i64* @memory_MAXMEM, align 8
  %add22 = add i64 %25, %add21
  store i64 %add22, i64* @memory_MAXMEM, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.18, %if.end.13
  %26 = load i8*, i8** %Freepointer.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %26, i64 -16
  call void @free(i8* %add.ptr24) #6
  br label %if.end.33

if.else.25:                                       ; preds = %entry
  %27 = load i32, i32* %Size.addr, align 4
  %idxprom = zext i32 %27 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i32 0, i64 %idxprom
  %28 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %arrayidx, align 8
  %total_size = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %28, i32 0, i32 4
  %29 = load i32, i32* %total_size, align 4
  %conv26 = sext i32 %29 to i64
  %30 = load i64, i64* @memory_FREEDBYTES, align 8
  %add27 = add i64 %30, %conv26
  store i64 %add27, i64* @memory_FREEDBYTES, align 8
  %31 = load i32, i32* %Size.addr, align 4
  %idxprom28 = zext i32 %31 to i64
  %arrayidx29 = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i32 0, i64 %idxprom28
  %32 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %arrayidx29, align 8
  %free = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %32, i32 0, i32 0
  %33 = load i8*, i8** %free, align 8
  %34 = load i8*, i8** %Freepointer.addr, align 8
  %35 = bitcast i8* %34 to i8**
  store i8* %33, i8** %35, align 8
  %36 = load i8*, i8** %Freepointer.addr, align 8
  %37 = load i32, i32* %Size.addr, align 4
  %idxprom30 = zext i32 %37 to i64
  %arrayidx31 = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i32 0, i64 %idxprom30
  %38 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %arrayidx31, align 8
  %free32 = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %38, i32 0, i32 0
  store i8* %36, i8** %free32, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.25, %if.end.23
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @memory_LookupRealBlockSize(i32 %BlockSize) #1 {
entry:
  %BlockSize.addr = alloca i32, align 4
  %RealSize = alloca i32, align 4
  store i32 %BlockSize, i32* %BlockSize.addr, align 4
  %0 = load i32, i32* %BlockSize.addr, align 4
  %cmp = icmp ult i32 %0, 1024
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %BlockSize.addr, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [0 x %struct.MEMORY_RESOURCEHELP*], [0 x %struct.MEMORY_RESOURCEHELP*]* @memory_ARRAY, i32 0, i64 %idxprom
  %2 = load %struct.MEMORY_RESOURCEHELP*, %struct.MEMORY_RESOURCEHELP** %arrayidx, align 8
  %aligned_size = getelementptr inbounds %struct.MEMORY_RESOURCEHELP, %struct.MEMORY_RESOURCEHELP* %2, i32 0, i32 5
  %3 = load i32, i32* %aligned_size, align 4
  store i32 %3, i32* %RealSize, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %BlockSize.addr, align 4
  %call = call i32 @memory_CalculateRealBlockSize(i32 %4)
  store i32 %call, i32* %RealSize, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %RealSize, align 4
  ret i32 %5
}

; Function Attrs: nounwind
declare void @free(i8*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @memory_CalculateRealBlockSize(i32 %BlockSize) #1 {
entry:
  %BlockSize.addr = alloca i32, align 4
  %RealSize = alloca i32, align 4
  store i32 %BlockSize, i32* %BlockSize.addr, align 4
  %0 = load i32, i32* %BlockSize.addr, align 4
  store i32 %0, i32* %RealSize, align 4
  %1 = load i32, i32* %RealSize, align 4
  %rem = urem i32 %1, 1
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %RealSize, align 4
  %rem1 = urem i32 %2, 1
  %sub = sub i32 1, %rem1
  %3 = load i32, i32* %RealSize, align 4
  %add = add i32 %3, %sub
  store i32 %add, i32* %RealSize, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %RealSize, align 4
  %5 = load i32, i32* @memory_ALIGN, align 4
  %rem2 = urem i32 %4, %5
  %tobool3 = icmp ne i32 %rem2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.end
  %6 = load i32, i32* @memory_ALIGN, align 4
  %7 = load i32, i32* %RealSize, align 4
  %8 = load i32, i32* @memory_ALIGN, align 4
  %rem5 = urem i32 %7, %8
  %sub6 = sub i32 %6, %rem5
  %9 = load i32, i32* %RealSize, align 4
  %add7 = add i32 %9, %sub6
  store i32 %add7, i32* %RealSize, align 4
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.4, %if.end
  %10 = load i32, i32* %RealSize, align 4
  ret i32 %10
}

declare i8* @memory_Malloc(i32) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @flag_CheckFlagIdInRange(i32 %FlagId) #1 {
entry:
  %FlagId.addr = alloca i32, align 4
  store i32 %FlagId, i32* %FlagId.addr, align 4
  ret void
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

declare %struct._IO_FILE* @misc_OpenFile(i8*, i8*) #2

declare i32 @fputs(i8*, %struct._IO_FILE*) #2

declare void @fol_FPrintDFGSignature(%struct._IO_FILE*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @clause_IsFromInput(%struct.CLAUSE_HELP* %Clause) #1 {
entry:
  %Clause.addr = alloca %struct.CLAUSE_HELP*, align 8
  store %struct.CLAUSE_HELP* %Clause, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %0 = load %struct.CLAUSE_HELP*, %struct.CLAUSE_HELP** %Clause.addr, align 8
  %origin = getelementptr inbounds %struct.CLAUSE_HELP, %struct.CLAUSE_HELP* %0, i32 0, i32 14
  %1 = load i32, i32* %origin, align 4
  %cmp = icmp eq i32 %1, 16
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare %struct.LIST_HELP* @list_NReverse(%struct.LIST_HELP*) #2

declare void @clause_FPrintCnfDFG(%struct._IO_FILE*, i32, %struct.LIST_HELP*, %struct.LIST_HELP*, i32*, i32*) #2

declare void @clause_FPrintDFGStep(%struct._IO_FILE*, %struct.CLAUSE_HELP*, i32) #2

declare void @misc_CloseFile(%struct._IO_FILE*, i8*) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
