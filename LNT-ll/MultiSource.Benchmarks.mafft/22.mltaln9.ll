; ModuleID = './MultiSource.Benchmarks.mafft/22.mltaln9.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct._Bchain = type { %struct._Bchain*, %struct._Bchain*, i32 }
%struct._Achain = type { i32, i32 }
%struct._Segment = type { i32, i32, i32, double, i32, i32, %struct._Segment*, i32 }
%struct._LocalHom = type { i32, %struct._LocalHom*, %struct._LocalHom*, i32, i32, i32, i32, double, i32, i32, double, float, double }
%struct._Gappattern = type { i32, float }

@amino_n = external global [128 x i32], align 16
@stderr = external global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [76 x i8] c"========================================================================= \0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"=== \0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"=== Alphabet '%c' is unknown.\0A\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"=== Please check site %d in sequence %d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@disp = external global i32, align 4
@.str.5 = private unnamed_addr constant [126 x i8] c"    ....,....+....,....+....,....+....,....+....,....+....,....+....,....+....,....+....,....+....,....+....,....+....,....+\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"%3d %s\0A\00", align 1
@amino_dis_consweight_multi = external global [128 x [128 x double]], align 16
@penalty = external global i32, align 4
@intergroup_score_new.efficient = internal global [1 x double] zeroinitializer, align 8
@amino_dis = external global [128 x [128 x i32]], align 16
@score_calc3.mseq1 = internal global [10000000 x i8] zeroinitializer, align 16
@score_calc3.mseq2 = internal global [10000000 x i8] zeroinitializer, align 16
@weight = external global i32, align 4
@.str.7 = private unnamed_addr constant [7 x i8] c"error\0A\00", align 1
@scoremtx = external global i32, align 4
@n_dis = external global [26 x [26 x i32]], align 16
@mix = external global i32, align 4
@upg2.pair = internal global i8** null, align 8
@njob = external global i32, align 4
@loadtree.hist = internal global i32* null, align 8
@loadtree.ac = internal global %struct._Bchain* null, align 8
@loadtree.nmemar = internal global i32* null, align 8
@loadtree.tree = internal global i8** null, align 8
@loadtree.treetmp = internal global i8* null, align 8
@loadtree.nametmp = internal global i8* null, align 8
@.str.8 = private unnamed_addr constant [11 x i8] c"_guidetree\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"cannot open _guidetree\0A\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"%d_%.20s\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [11 x i8] c"\0D% 5d / %d\00", align 1
@.str.14 = private unnamed_addr constant [38 x i8] c"\0A\0AERROR: Branch length is not given.\0A\00", align 1
@.str.15 = private unnamed_addr constant [25 x i8] c"Cannot reallocate topol\0A\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"(%s:%7.5f,%s:%7.5f)\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"infile.tree\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"#by loadtree\0A\00", align 1
@loadtop.ac = internal global %struct._Bchain* null, align 8
@loadtop.tmptmplen = internal global float* null, align 8
@loadtop.hist = internal global i32* null, align 8
@loadtop.nmemar = internal global i32* null, align 8
@loadtop.tree = internal global i8** null, align 8
@loadtop.treetmp = internal global i8* null, align 8
@sueff1 = internal global float 0.000000e+00, align 4
@sueff05 = internal global float 0.000000e+00, align 4
@treemethod = external global i32, align 4
@.str.20 = private unnamed_addr constant [24 x i8] c"Unknown treemethod, %c\0A\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.22 = private unnamed_addr constant [45 x i8] c"\0A\0AERROR: Branch length should not be given.\0A\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"by loadtop\0A\00", align 1
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen = internal global float* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist = internal global i32* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac = internal global %struct._Bchain* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar = internal global i32* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree = internal global i8** null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.treetmp = internal global i8* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp = internal global i8* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen = internal global float* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx.hist = internal global i32* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx.ac = internal global %struct._Bchain* null, align 8
@fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar = internal global i32* null, align 8
@veryfastsupg_double_loadtop.tmptmplen = internal global double* null, align 8
@veryfastsupg_double_loadtop.hist = internal global i32* null, align 8
@veryfastsupg_double_loadtop.ac = internal global %struct._Achain* null, align 8
@veryfastsupg_double_loadtop.tree = internal global i8** null, align 8
@veryfastsupg_double_loadtop.treetmp = internal global i8* null, align 8
@.str.24 = private unnamed_addr constant [9 x i8] c"%d / %d\0D\00", align 1
@.str.25 = private unnamed_addr constant [35 x i8] c"\0A\0ABranch length should not given.\0A\00", align 1
@veryfastsupg_double_loadtree.tmptmplen = internal global double* null, align 8
@veryfastsupg_double_loadtree.hist = internal global i32* null, align 8
@veryfastsupg_double_loadtree.ac = internal global %struct._Achain* null, align 8
@veryfastsupg_double_loadtree.tree = internal global i8** null, align 8
@veryfastsupg_double_loadtree.treetmp = internal global i8* null, align 8
@.str.26 = private unnamed_addr constant [40 x i8] c"\0A\0AWARNING: Branch length is not given.\0A\00", align 1
@veryfastsupg_double_outtree.tmptmplen = internal global double* null, align 8
@veryfastsupg_double_outtree.hist = internal global i32* null, align 8
@veryfastsupg_double_outtree.ac = internal global %struct._Achain* null, align 8
@veryfastsupg_double_outtree.tree = internal global i8** null, align 8
@veryfastsupg_double_outtree.treetmp = internal global i8* null, align 8
@veryfastsupg_double_outtree.nametmp = internal global i8* null, align 8
@sueff1_double = internal global double 0.000000e+00, align 8
@sueff05_double = internal global double 0.000000e+00, align 8
@veryfastsupg.tmptmplen = internal global double* null, align 8
@veryfastsupg.eff = internal global i32** null, align 8
@veryfastsupg.hist = internal global i32* null, align 8
@veryfastsupg.ac = internal global %struct._Achain* null, align 8
@veryfastsupg_int.tmptmplen = internal global i32* null, align 8
@veryfastsupg_int.eff = internal global i32** null, align 8
@veryfastsupg_int.hist = internal global i32* null, align 8
@veryfastsupg_int.ac = internal global %struct._Achain* null, align 8
@fastsupg.tmplen = internal global float* null, align 8
@fastsupg.eff = internal global float** null, align 8
@fastsupg.pair = internal global i8** null, align 8
@fastsupg.ac = internal global %struct._Achain* null, align 8
@supg.tmplen = internal global float* null, align 8
@supg.eff = internal global float** null, align 8
@supg.pair = internal global i8** null, align 8
@countnode.rootnode = internal global [50000 x double] zeroinitializer, align 16
@.str.27 = private unnamed_addr constant [43 x i8] c"Too few sequence for countnode: nseq = %d\0A\00", align 1
@counteff_simple_float.rootnode = internal global [50000 x double] zeroinitializer, align 16
@counteff_simple_float.eff = internal global [50000 x double] zeroinitializer, align 16
@counteff_simple.rootnode = internal global [50000 x double] zeroinitializer, align 16
@counteff_simple.eff = internal global [50000 x double] zeroinitializer, align 16
@.str.28 = private unnamed_addr constant [10 x i8] c"mix error\00", align 1
@geta2 = external global float, align 4
@utree = external global i32, align 4
@scmtd = external global i32, align 4
@.str.29 = private unnamed_addr constant [16 x i8] c"raw score = %f\0A\00", align 1
@searchAnchors.stra = internal global double* null, align 8
@searchAnchors.alloclen = internal global i32 0, align 4
@searchAnchors.threshold = internal global double 0.000000e+00, align 8
@divThreshold = external global i32, align 4
@divWinSize = external global i32, align 4
@.str.30 = private unnamed_addr constant [19 x i8] c"TOO MANY SEGMENTS!\00", align 1
@dontcalcimportance.nogaplen = internal global i32* null, align 8
@calcimportance.importance = internal global double* null, align 8
@calcimportance.nogaplen = internal global i32* null, align 8
@nlenmax = external global i32, align 4
@.str.31 = private unnamed_addr constant [19 x i8] c"ERROR: i=%d, j=%d\0A\00", align 1
@extendlocalhom2.ini = internal global i32* null, align 8
@extendlocalhom2.inj = internal global i32* null, align 8
@thrinter = external global double, align 8
@.str.32 = private unnamed_addr constant [28 x i8] c"opt kainaide tbfast.c = %f\0A\00", align 1
@.str.33 = private unnamed_addr constant [8 x i8] c"%d, %f\0A\00", align 1
@.str.34 = private unnamed_addr constant [30 x i8] c"Cannot allocate gappattern!'n\00", align 1
@.str.35 = private unnamed_addr constant [54 x i8] c"Use an approximate method, with the --mafft5 option.\0A\00", align 1
@.str.36 = private unnamed_addr constant [10 x i8] c"val = %f\0A\00", align 1
@.str.37 = private unnamed_addr constant [36 x i8] c"Penal!, %f, %d-%d, pos1,pos2=%d,%d\0A\00", align 1
@loadtreeoneline.gett = internal global [1000 x i8] zeroinitializer, align 16
@.str.38 = private unnamed_addr constant [12 x i8] c"%d %d %a %a\00", align 1
@.str.39 = private unnamed_addr constant [22 x i8] c"Incorrect guide tree\0A\00", align 1

; Function Attrs: nounwind uwtable
define i32 @seqlen(i8* %seq) #0 {
entry:
  %seq.addr = alloca i8*, align 8
  %val = alloca i32, align 4
  store i8* %seq, i8** %seq.addr, align 8
  store i32 0, i32* %val, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %seq.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %seq.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %seq.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp ne i32 %conv, 45
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i32, i32* %val, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %val, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i32, i32* %val, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define i32 @intlen(i32* %num) #0 {
entry:
  %num.addr = alloca i32*, align 8
  %value = alloca i32, align 4
  store i32* %num, i32** %num.addr, align 8
  store i32 0, i32* %value, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32*, i32** %num.addr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %0, i32 1
  store i32* %incdec.ptr, i32** %num.addr, align 8
  %1 = load i32, i32* %0, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %value, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %value, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %3 = load i32, i32* %value, align 4
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define signext i8 @seqcheck(i8** %seq) #0 {
entry:
  %retval = alloca i8, align 1
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %seqbk = alloca i8**, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  store i8** %0, i8*** %seqbk, align 8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %1 = load i8**, i8*** %seq.addr, align 8
  %2 = load i8*, i8** %1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8**, i8*** %seq.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %call = call i64 @strlen(i8* %4) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8**, i8*** %seq.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %10 to i32
  %idxprom3 = sext i32 %conv2 to i64
  %arrayidx4 = getelementptr inbounds [128 x i32], [128 x i32]* @amino_n, i32 0, i64 %idxprom3
  %11 = load i32, i32* %arrayidx4, align 4
  %cmp5 = icmp eq i32 %11, -1
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i32 0, i32 0))
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i32 0, i32 0))
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i32 0, i32 0))
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0))
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %19 = load i8*, i8** %18, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %19, i64 %idxprom11
  %20 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %20 to i32
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i32 0, i32 0), i32 %conv13)
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %22 = load i32, i32* %i, align 4
  %add = add nsw i32 %22, 1
  %23 = load i8**, i8*** %seq.addr, align 8
  %24 = load i8**, i8*** %seqbk, align 8
  %sub.ptr.lhs.cast = ptrtoint i8** %23 to i64
  %sub.ptr.rhs.cast = ptrtoint i8** %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %add15 = add nsw i64 %sub.ptr.div, 1
  %conv16 = trunc i64 %add15 to i32
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i32 0, i32 0), i32 %add, i32 %conv16)
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0))
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i32 0, i32 0))
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i32 0, i32 0))
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str, i32 0, i32 0))
  %29 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %29 to i64
  %30 = load i8**, i8*** %seq.addr, align 8
  %31 = load i8*, i8** %30, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %31, i64 %idxprom22
  %32 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %32 to i32
  %conv25 = trunc i32 %conv24 to i8
  store i8 %conv25, i8* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %33 = load i32, i32* %i, align 4
  %inc = add nsw i32 %33, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %34 = load i8**, i8*** %seq.addr, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %34, i32 1
  store i8** %incdec.ptr, i8*** %seq.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8 0, i8* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %35 = load i8, i8* %retval
  ret i8 %35
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define void @scmx_calc(i32 %icyc, i8** %aseq, double* %effarr, float** %scmx) #0 {
entry:
  %icyc.addr = alloca i32, align 4
  %aseq.addr = alloca i8**, align 8
  %effarr.addr = alloca double*, align 8
  %scmx.addr = alloca float**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lgth = alloca i32, align 4
  %id = alloca i32, align 4
  %id41 = alloca i32, align 4
  %id68 = alloca i32, align 4
  store i32 %icyc, i32* %icyc.addr, align 4
  store i8** %aseq, i8*** %aseq.addr, align 8
  store double* %effarr, double** %effarr.addr, align 8
  store float** %scmx, float*** %scmx.addr, align 8
  %0 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %lgth, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.9, %entry
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %lgth, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %4, 26
  br i1 %cmp3, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.2
  %5 = load i32, i32* %j, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %6 to i64
  %7 = load float**, float*** %scmx.addr, align 8
  %arrayidx7 = getelementptr inbounds float*, float** %7, i64 %idxprom6
  %8 = load float*, float** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds float, float* %8, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.5
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.9

for.inc.9:                                        ; preds = %for.end
  %10 = load i32, i32* %j, align 4
  %inc10 = add nsw i32 %10, 1
  store i32 %inc10, i32* %j, align 4
  br label %for.cond

for.end.11:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc.29, %for.end.11
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %icyc.addr, align 4
  %add = add nsw i32 %12, 1
  %cmp13 = icmp slt i32 %11, %add
  br i1 %cmp13, label %for.body.15, label %for.end.31

for.body.15:                                      ; preds = %for.cond.12
  %13 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %13 to i64
  %14 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx17 = getelementptr inbounds i8*, i8** %14, i64 %idxprom16
  %15 = load i8*, i8** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx18, align 1
  %conv19 = sext i8 %16 to i32
  %idxprom20 = sext i32 %conv19 to i64
  %arrayidx21 = getelementptr inbounds [128 x i32], [128 x i32]* @amino_n, i32 0, i64 %idxprom20
  %17 = load i32, i32* %arrayidx21, align 4
  store i32 %17, i32* %id, align 4
  %18 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %18 to i64
  %19 = load double*, double** %effarr.addr, align 8
  %arrayidx23 = getelementptr inbounds double, double* %19, i64 %idxprom22
  %20 = load double, double* %arrayidx23, align 8
  %conv24 = fptrunc double %20 to float
  %21 = load i32, i32* %id, align 4
  %idxprom25 = sext i32 %21 to i64
  %22 = load float**, float*** %scmx.addr, align 8
  %arrayidx26 = getelementptr inbounds float*, float** %22, i64 %idxprom25
  %23 = load float*, float** %arrayidx26, align 8
  %arrayidx27 = getelementptr inbounds float, float* %23, i64 0
  %24 = load float, float* %arrayidx27, align 4
  %add28 = fadd float %24, %conv24
  store float %add28, float* %arrayidx27, align 4
  br label %for.inc.29

for.inc.29:                                       ; preds = %for.body.15
  %25 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %25, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond.12

for.end.31:                                       ; preds = %for.cond.12
  store i32 1, i32* %j, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.60, %for.end.31
  %26 = load i32, i32* %j, align 4
  %27 = load i32, i32* %lgth, align 4
  %sub = sub nsw i32 %27, 1
  %cmp33 = icmp slt i32 %26, %sub
  br i1 %cmp33, label %for.body.35, label %for.end.62

for.body.35:                                      ; preds = %for.cond.32
  store i32 0, i32* %i, align 4
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.57, %for.body.35
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %icyc.addr, align 4
  %add37 = add nsw i32 %29, 1
  %cmp38 = icmp slt i32 %28, %add37
  br i1 %cmp38, label %for.body.40, label %for.end.59

for.body.40:                                      ; preds = %for.cond.36
  %30 = load i32, i32* %j, align 4
  %idxprom42 = sext i32 %30 to i64
  %31 = load i32, i32* %i, align 4
  %idxprom43 = sext i32 %31 to i64
  %32 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx44 = getelementptr inbounds i8*, i8** %32, i64 %idxprom43
  %33 = load i8*, i8** %arrayidx44, align 8
  %arrayidx45 = getelementptr inbounds i8, i8* %33, i64 %idxprom42
  %34 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %34 to i32
  %idxprom47 = sext i32 %conv46 to i64
  %arrayidx48 = getelementptr inbounds [128 x i32], [128 x i32]* @amino_n, i32 0, i64 %idxprom47
  %35 = load i32, i32* %arrayidx48, align 4
  store i32 %35, i32* %id41, align 4
  %36 = load i32, i32* %i, align 4
  %idxprom49 = sext i32 %36 to i64
  %37 = load double*, double** %effarr.addr, align 8
  %arrayidx50 = getelementptr inbounds double, double* %37, i64 %idxprom49
  %38 = load double, double* %arrayidx50, align 8
  %conv51 = fptrunc double %38 to float
  %39 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %39 to i64
  %40 = load i32, i32* %id41, align 4
  %idxprom53 = sext i32 %40 to i64
  %41 = load float**, float*** %scmx.addr, align 8
  %arrayidx54 = getelementptr inbounds float*, float** %41, i64 %idxprom53
  %42 = load float*, float** %arrayidx54, align 8
  %arrayidx55 = getelementptr inbounds float, float* %42, i64 %idxprom52
  %43 = load float, float* %arrayidx55, align 4
  %add56 = fadd float %43, %conv51
  store float %add56, float* %arrayidx55, align 4
  br label %for.inc.57

for.inc.57:                                       ; preds = %for.body.40
  %44 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %44, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond.36

for.end.59:                                       ; preds = %for.cond.36
  br label %for.inc.60

for.inc.60:                                       ; preds = %for.end.59
  %45 = load i32, i32* %j, align 4
  %inc61 = add nsw i32 %45, 1
  store i32 %inc61, i32* %j, align 4
  br label %for.cond.32

for.end.62:                                       ; preds = %for.cond.32
  store i32 0, i32* %i, align 4
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.86, %for.end.62
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %icyc.addr, align 4
  %add64 = add nsw i32 %47, 1
  %cmp65 = icmp slt i32 %46, %add64
  br i1 %cmp65, label %for.body.67, label %for.end.88

for.body.67:                                      ; preds = %for.cond.63
  %48 = load i32, i32* %lgth, align 4
  %sub69 = sub nsw i32 %48, 1
  %idxprom70 = sext i32 %sub69 to i64
  %49 = load i32, i32* %i, align 4
  %idxprom71 = sext i32 %49 to i64
  %50 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx72 = getelementptr inbounds i8*, i8** %50, i64 %idxprom71
  %51 = load i8*, i8** %arrayidx72, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %51, i64 %idxprom70
  %52 = load i8, i8* %arrayidx73, align 1
  %conv74 = sext i8 %52 to i32
  %idxprom75 = sext i32 %conv74 to i64
  %arrayidx76 = getelementptr inbounds [128 x i32], [128 x i32]* @amino_n, i32 0, i64 %idxprom75
  %53 = load i32, i32* %arrayidx76, align 4
  store i32 %53, i32* %id68, align 4
  %54 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %54 to i64
  %55 = load double*, double** %effarr.addr, align 8
  %arrayidx78 = getelementptr inbounds double, double* %55, i64 %idxprom77
  %56 = load double, double* %arrayidx78, align 8
  %conv79 = fptrunc double %56 to float
  %57 = load i32, i32* %lgth, align 4
  %sub80 = sub nsw i32 %57, 1
  %idxprom81 = sext i32 %sub80 to i64
  %58 = load i32, i32* %id68, align 4
  %idxprom82 = sext i32 %58 to i64
  %59 = load float**, float*** %scmx.addr, align 8
  %arrayidx83 = getelementptr inbounds float*, float** %59, i64 %idxprom82
  %60 = load float*, float** %arrayidx83, align 8
  %arrayidx84 = getelementptr inbounds float, float* %60, i64 %idxprom81
  %61 = load float, float* %arrayidx84, align 4
  %add85 = fadd float %61, %conv79
  store float %add85, float* %arrayidx84, align 4
  br label %for.inc.86

for.inc.86:                                       ; preds = %for.body.67
  %62 = load i32, i32* %i, align 4
  %inc87 = add nsw i32 %62, 1
  store i32 %inc87, i32* %i, align 4
  br label %for.cond.63

for.end.88:                                       ; preds = %for.cond.63
  ret void
}

; Function Attrs: nounwind uwtable
define void @exitall(i8* %arr) #0 {
entry:
  %arr.addr = alloca i8*, align 8
  store i8* %arr, i8** %arr.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %1 = load i8*, i8** %arr.addr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %1)
  call void @exit(i32 1) #7
  unreachable

return:                                           ; No predecessors!
  ret void
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind uwtable
define void @display(i8** %seq, i32 %nseq) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %nseq.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %imax = alloca i32, align 4
  %b = alloca [121 x i8], align 16
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  %0 = load i32, i32* @disp, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp sgt i32 %1, 60
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  store i32 60, i32* %imax, align 4
  br label %if.end.2

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %nseq.addr, align 4
  store i32 %2, i32* %imax, align 4
  br label %if.end.2

if.end.2:                                         ; preds = %if.else, %if.then.1
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.5, i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.2
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %imax, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [121 x i8], [121 x i8]* %b, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %7, i64 %idxprom
  %8 = load i8*, i8** %arrayidx, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 0
  %call4 = call i8* @strncpy(i8* %arraydecay, i8* %add.ptr, i64 120) #8
  %arrayidx5 = getelementptr inbounds [121 x i8], [121 x i8]* %b, i32 0, i64 120
  store i8 0, i8* %arrayidx5, align 1
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %10 = load i32, i32* %i, align 4
  %add = add nsw i32 %10, 1
  %arraydecay6 = getelementptr inbounds [121 x i8], [121 x i8]* %b, i32 0, i32 0
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i32 %add, i8* %arraydecay6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #4

; Function Attrs: nounwind uwtable
define void @intergroup_score_consweight(i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %clus1, i32 %clus2, i32 %len, double* %value) #0 {
entry:
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %clus1.addr = alloca i32, align 4
  %clus2.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %value.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len2 = alloca i32, align 4
  %ms1 = alloca i32, align 4
  %ms2 = alloca i32, align 4
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  %efficient = alloca double, align 8
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %clus1, i32* %clus1.addr, align 4
  store i32 %clus2, i32* %clus2.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store double* %value, double** %value.addr, align 8
  %0 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %len2, align 4
  %1 = load double*, double** %value.addr, align 8
  store double 0.000000e+00, double* %1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.77, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %clus1.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.79

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.74, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus2.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body.3, label %for.end.76

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff1.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %9 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load double*, double** %eff2.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %10, i64 %idxprom4
  %11 = load double, double* %arrayidx5, align 8
  %mul = fmul double %8, %11
  store double %mul, double* %efficient, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %13, i64 %idxprom6
  %14 = load i8*, i8** %arrayidx7, align 8
  store i8* %14, i8** %mseq1, align 8
  %15 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %16, i64 %idxprom8
  %17 = load i8*, i8** %arrayidx9, align 8
  store i8* %17, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc, %for.body.3
  %18 = load i32, i32* %k, align 4
  %19 = load i32, i32* %len.addr, align 4
  %cmp11 = icmp slt i32 %18, %19
  br i1 %cmp11, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.10
  %20 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load i8*, i8** %mseq1, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %idxprom13
  %22 = load i8, i8* %arrayidx14, align 1
  %conv = sext i8 %22 to i32
  store i32 %conv, i32* %ms1, align 4
  %23 = load i32, i32* %k, align 4
  %idxprom15 = sext i32 %23 to i64
  %24 = load i8*, i8** %mseq2, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %idxprom15
  %25 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %25 to i32
  store i32 %conv17, i32* %ms2, align 4
  %26 = load i32, i32* %ms1, align 4
  %cmp18 = icmp eq i32 %26, 45
  br i1 %cmp18, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.12
  %27 = load i32, i32* %ms2, align 4
  %cmp20 = icmp eq i32 %27, 45
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body.12
  %28 = load i32, i32* %ms2, align 4
  %idxprom22 = sext i32 %28 to i64
  %29 = load i32, i32* %ms1, align 4
  %idxprom23 = sext i32 %29 to i64
  %arrayidx24 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx24, i32 0, i64 %idxprom22
  %30 = load double, double* %arrayidx25, align 8
  %31 = load double, double* %tmpscore, align 8
  %add = fadd double %31, %30
  store double %add, double* %tmpscore, align 8
  %32 = load i32, i32* %ms1, align 4
  %cmp26 = icmp eq i32 %32, 45
  br i1 %cmp26, label %if.then.28, label %if.end.45

if.then.28:                                       ; preds = %if.end
  %33 = load i32, i32* @penalty, align 4
  %conv29 = sitofp i32 %33 to double
  %34 = load double, double* %tmpscore, align 8
  %add30 = fadd double %34, %conv29
  store double %add30, double* %tmpscore, align 8
  %35 = load i32, i32* %ms2, align 4
  %idxprom31 = sext i32 %35 to i64
  %36 = load i32, i32* %ms1, align 4
  %idxprom32 = sext i32 %36 to i64
  %arrayidx33 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom32
  %arrayidx34 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx33, i32 0, i64 %idxprom31
  %37 = load double, double* %arrayidx34, align 8
  %38 = load double, double* %tmpscore, align 8
  %add35 = fadd double %38, %37
  store double %add35, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.28
  %39 = load i32, i32* %k, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %k, align 4
  %idxprom36 = sext i32 %inc to i64
  %40 = load i8*, i8** %mseq1, align 8
  %arrayidx37 = getelementptr inbounds i8, i8* %40, i64 %idxprom36
  %41 = load i8, i8* %arrayidx37, align 1
  %conv38 = sext i8 %41 to i32
  store i32 %conv38, i32* %ms1, align 4
  %cmp39 = icmp eq i32 %conv38, 45
  br i1 %cmp39, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i32, i32* %k, align 4
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %k, align 4
  %43 = load i32, i32* %k, align 4
  %44 = load i32, i32* %len2, align 4
  %cmp41 = icmp sgt i32 %43, %44
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %while.end
  br label %for.end

if.end.44:                                        ; preds = %while.end
  br label %for.inc

if.end.45:                                        ; preds = %if.end
  %45 = load i32, i32* %ms2, align 4
  %cmp46 = icmp eq i32 %45, 45
  br i1 %cmp46, label %if.then.48, label %if.end.70

if.then.48:                                       ; preds = %if.end.45
  %46 = load i32, i32* @penalty, align 4
  %conv49 = sitofp i32 %46 to double
  %47 = load double, double* %tmpscore, align 8
  %add50 = fadd double %47, %conv49
  store double %add50, double* %tmpscore, align 8
  %48 = load i32, i32* %ms2, align 4
  %idxprom51 = sext i32 %48 to i64
  %49 = load i32, i32* %ms1, align 4
  %idxprom52 = sext i32 %49 to i64
  %arrayidx53 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom52
  %arrayidx54 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx53, i32 0, i64 %idxprom51
  %50 = load double, double* %arrayidx54, align 8
  %51 = load double, double* %tmpscore, align 8
  %add55 = fadd double %51, %50
  store double %add55, double* %tmpscore, align 8
  br label %while.cond.56

while.cond.56:                                    ; preds = %while.body.63, %if.then.48
  %52 = load i32, i32* %k, align 4
  %inc57 = add nsw i32 %52, 1
  store i32 %inc57, i32* %k, align 4
  %idxprom58 = sext i32 %inc57 to i64
  %53 = load i8*, i8** %mseq2, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %53, i64 %idxprom58
  %54 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %54 to i32
  store i32 %conv60, i32* %ms2, align 4
  %cmp61 = icmp eq i32 %conv60, 45
  br i1 %cmp61, label %while.body.63, label %while.end.64

while.body.63:                                    ; preds = %while.cond.56
  br label %while.cond.56

while.end.64:                                     ; preds = %while.cond.56
  %55 = load i32, i32* %k, align 4
  %dec65 = add nsw i32 %55, -1
  store i32 %dec65, i32* %k, align 4
  %56 = load i32, i32* %k, align 4
  %57 = load i32, i32* %len2, align 4
  %cmp66 = icmp sgt i32 %56, %57
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %while.end.64
  br label %for.end

if.end.69:                                        ; preds = %while.end.64
  br label %for.inc

if.end.70:                                        ; preds = %if.end.45
  br label %for.inc

for.inc:                                          ; preds = %if.end.70, %if.end.69, %if.end.44, %if.then
  %58 = load i32, i32* %k, align 4
  %inc71 = add nsw i32 %58, 1
  store i32 %inc71, i32* %k, align 4
  br label %for.cond.10

for.end:                                          ; preds = %if.then.68, %if.then.43, %for.cond.10
  %59 = load double, double* %tmpscore, align 8
  %60 = load double, double* %efficient, align 8
  %mul72 = fmul double %59, %60
  %61 = load double*, double** %value.addr, align 8
  %62 = load double, double* %61, align 8
  %add73 = fadd double %62, %mul72
  store double %add73, double* %61, align 8
  br label %for.inc.74

for.inc.74:                                       ; preds = %for.end
  %63 = load i32, i32* %j, align 4
  %inc75 = add nsw i32 %63, 1
  store i32 %inc75, i32* %j, align 4
  br label %for.cond.1

for.end.76:                                       ; preds = %for.cond.1
  br label %for.inc.77

for.inc.77:                                       ; preds = %for.end.76
  %64 = load i32, i32* %i, align 4
  %inc78 = add nsw i32 %64, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond

for.end.79:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @intergroup_score_gapnomi(i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %clus1, i32 %clus2, i32 %len, double* %value) #0 {
entry:
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %clus1.addr = alloca i32, align 4
  %clus2.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %value.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len2 = alloca i32, align 4
  %ms1 = alloca i32, align 4
  %ms2 = alloca i32, align 4
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  %efficient = alloca double, align 8
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %clus1, i32* %clus1.addr, align 4
  store i32 %clus2, i32* %clus2.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store double* %value, double** %value.addr, align 8
  %0 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %len2, align 4
  %1 = load double*, double** %value.addr, align 8
  store double 0.000000e+00, double* %1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.62, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %clus1.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.64

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.59, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus2.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body.3, label %for.end.61

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff1.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %9 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load double*, double** %eff2.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %10, i64 %idxprom4
  %11 = load double, double* %arrayidx5, align 8
  %mul = fmul double %8, %11
  store double %mul, double* %efficient, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %13, i64 %idxprom6
  %14 = load i8*, i8** %arrayidx7, align 8
  store i8* %14, i8** %mseq1, align 8
  %15 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %16, i64 %idxprom8
  %17 = load i8*, i8** %arrayidx9, align 8
  store i8* %17, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc, %for.body.3
  %18 = load i32, i32* %k, align 4
  %19 = load i32, i32* %len.addr, align 4
  %cmp11 = icmp slt i32 %18, %19
  br i1 %cmp11, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.10
  %20 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load i8*, i8** %mseq1, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %idxprom13
  %22 = load i8, i8* %arrayidx14, align 1
  %conv = sext i8 %22 to i32
  store i32 %conv, i32* %ms1, align 4
  %23 = load i32, i32* %k, align 4
  %idxprom15 = sext i32 %23 to i64
  %24 = load i8*, i8** %mseq2, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %idxprom15
  %25 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %25 to i32
  store i32 %conv17, i32* %ms2, align 4
  %26 = load i32, i32* %ms1, align 4
  %cmp18 = icmp eq i32 %26, 45
  br i1 %cmp18, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.12
  %27 = load i32, i32* %ms2, align 4
  %cmp20 = icmp eq i32 %27, 45
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body.12
  %28 = load i32, i32* %ms1, align 4
  %cmp22 = icmp eq i32 %28, 45
  br i1 %cmp22, label %if.then.24, label %if.end.35

if.then.24:                                       ; preds = %if.end
  %29 = load i32, i32* @penalty, align 4
  %conv25 = sitofp i32 %29 to double
  %30 = load double, double* %tmpscore, align 8
  %add = fadd double %30, %conv25
  store double %add, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.24
  %31 = load i32, i32* %k, align 4
  %inc = add nsw i32 %31, 1
  store i32 %inc, i32* %k, align 4
  %idxprom26 = sext i32 %inc to i64
  %32 = load i8*, i8** %mseq1, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %32, i64 %idxprom26
  %33 = load i8, i8* %arrayidx27, align 1
  %conv28 = sext i8 %33 to i32
  store i32 %conv28, i32* %ms1, align 4
  %cmp29 = icmp eq i32 %conv28, 45
  br i1 %cmp29, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %34 = load i32, i32* %k, align 4
  %dec = add nsw i32 %34, -1
  store i32 %dec, i32* %k, align 4
  %35 = load i32, i32* %k, align 4
  %36 = load i32, i32* %len2, align 4
  %cmp31 = icmp sgt i32 %35, %36
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %while.end
  br label %for.end

if.end.34:                                        ; preds = %while.end
  br label %for.inc

if.end.35:                                        ; preds = %if.end
  %37 = load i32, i32* %ms2, align 4
  %cmp36 = icmp eq i32 %37, 45
  br i1 %cmp36, label %if.then.38, label %if.end.55

if.then.38:                                       ; preds = %if.end.35
  %38 = load i32, i32* @penalty, align 4
  %conv39 = sitofp i32 %38 to double
  %39 = load double, double* %tmpscore, align 8
  %add40 = fadd double %39, %conv39
  store double %add40, double* %tmpscore, align 8
  br label %while.cond.41

while.cond.41:                                    ; preds = %while.body.48, %if.then.38
  %40 = load i32, i32* %k, align 4
  %inc42 = add nsw i32 %40, 1
  store i32 %inc42, i32* %k, align 4
  %idxprom43 = sext i32 %inc42 to i64
  %41 = load i8*, i8** %mseq2, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %41, i64 %idxprom43
  %42 = load i8, i8* %arrayidx44, align 1
  %conv45 = sext i8 %42 to i32
  store i32 %conv45, i32* %ms2, align 4
  %cmp46 = icmp eq i32 %conv45, 45
  br i1 %cmp46, label %while.body.48, label %while.end.49

while.body.48:                                    ; preds = %while.cond.41
  br label %while.cond.41

while.end.49:                                     ; preds = %while.cond.41
  %43 = load i32, i32* %k, align 4
  %dec50 = add nsw i32 %43, -1
  store i32 %dec50, i32* %k, align 4
  %44 = load i32, i32* %k, align 4
  %45 = load i32, i32* %len2, align 4
  %cmp51 = icmp sgt i32 %44, %45
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %while.end.49
  br label %for.end

if.end.54:                                        ; preds = %while.end.49
  br label %for.inc

if.end.55:                                        ; preds = %if.end.35
  br label %for.inc

for.inc:                                          ; preds = %if.end.55, %if.end.54, %if.end.34, %if.then
  %46 = load i32, i32* %k, align 4
  %inc56 = add nsw i32 %46, 1
  store i32 %inc56, i32* %k, align 4
  br label %for.cond.10

for.end:                                          ; preds = %if.then.53, %if.then.33, %for.cond.10
  %47 = load double, double* %tmpscore, align 8
  %48 = load double, double* %efficient, align 8
  %mul57 = fmul double %47, %48
  %49 = load double*, double** %value.addr, align 8
  %50 = load double, double* %49, align 8
  %add58 = fadd double %50, %mul57
  store double %add58, double* %49, align 8
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.end
  %51 = load i32, i32* %j, align 4
  %inc60 = add nsw i32 %51, 1
  store i32 %inc60, i32* %j, align 4
  br label %for.cond.1

for.end.61:                                       ; preds = %for.cond.1
  br label %for.inc.62

for.inc.62:                                       ; preds = %for.end.61
  %52 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %52, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond

for.end.64:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @intergroup_score(i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %clus1, i32 %clus2, i32 %len, double* %value) #0 {
entry:
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %clus1.addr = alloca i32, align 4
  %clus2.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %value.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len2 = alloca i32, align 4
  %ms1 = alloca i32, align 4
  %ms2 = alloca i32, align 4
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  %efficient = alloca double, align 8
  %gaptmpscore = alloca double, align 8
  %gapscore = alloca double, align 8
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %clus1, i32* %clus1.addr, align 4
  store i32 %clus2, i32* %clus2.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store double* %value, double** %value.addr, align 8
  %0 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %len2, align 4
  store double 0.000000e+00, double* %gapscore, align 8
  %1 = load double*, double** %value.addr, align 8
  store double 0.000000e+00, double* %1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.93, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %clus1.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.95

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.90, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus2.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body.3, label %for.end.92

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff1.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %9 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load double*, double** %eff2.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %10, i64 %idxprom4
  %11 = load double, double* %arrayidx5, align 8
  %mul = fmul double %8, %11
  store double %mul, double* %efficient, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %13, i64 %idxprom6
  %14 = load i8*, i8** %arrayidx7, align 8
  store i8* %14, i8** %mseq1, align 8
  %15 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %16, i64 %idxprom8
  %17 = load i8*, i8** %arrayidx9, align 8
  store i8* %17, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store double 0.000000e+00, double* %gaptmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc, %for.body.3
  %18 = load i32, i32* %k, align 4
  %19 = load i32, i32* %len.addr, align 4
  %cmp11 = icmp slt i32 %18, %19
  br i1 %cmp11, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.10
  %20 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load i8*, i8** %mseq1, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %idxprom13
  %22 = load i8, i8* %arrayidx14, align 1
  %conv = sext i8 %22 to i32
  store i32 %conv, i32* %ms1, align 4
  %23 = load i32, i32* %k, align 4
  %idxprom15 = sext i32 %23 to i64
  %24 = load i8*, i8** %mseq2, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %idxprom15
  %25 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %25 to i32
  store i32 %conv17, i32* %ms2, align 4
  %26 = load i32, i32* %ms1, align 4
  %cmp18 = icmp eq i32 %26, 45
  br i1 %cmp18, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.12
  %27 = load i32, i32* %ms2, align 4
  %cmp20 = icmp eq i32 %27, 45
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body.12
  %28 = load i32, i32* %ms2, align 4
  %idxprom22 = sext i32 %28 to i64
  %29 = load i32, i32* %ms1, align 4
  %idxprom23 = sext i32 %29 to i64
  %arrayidx24 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx24, i32 0, i64 %idxprom22
  %30 = load double, double* %arrayidx25, align 8
  %31 = load double, double* %tmpscore, align 8
  %add = fadd double %31, %30
  store double %add, double* %tmpscore, align 8
  %32 = load i32, i32* %ms1, align 4
  %cmp26 = icmp eq i32 %32, 45
  br i1 %cmp26, label %if.then.28, label %if.end.52

if.then.28:                                       ; preds = %if.end
  %33 = load i32, i32* @penalty, align 4
  %conv29 = sitofp i32 %33 to double
  %34 = load double, double* %tmpscore, align 8
  %add30 = fadd double %34, %conv29
  store double %add30, double* %tmpscore, align 8
  %35 = load i32, i32* @penalty, align 4
  %conv31 = sitofp i32 %35 to double
  %36 = load double, double* %gaptmpscore, align 8
  %add32 = fadd double %36, %conv31
  store double %add32, double* %gaptmpscore, align 8
  %37 = load i32, i32* %ms2, align 4
  %idxprom33 = sext i32 %37 to i64
  %38 = load i32, i32* %ms1, align 4
  %idxprom34 = sext i32 %38 to i64
  %arrayidx35 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom34
  %arrayidx36 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx35, i32 0, i64 %idxprom33
  %39 = load double, double* %arrayidx36, align 8
  %40 = load double, double* %tmpscore, align 8
  %add37 = fadd double %40, %39
  store double %add37, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.28
  %41 = load i32, i32* %k, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %k, align 4
  %idxprom38 = sext i32 %inc to i64
  %42 = load i8*, i8** %mseq1, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %42, i64 %idxprom38
  %43 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %43 to i32
  store i32 %conv40, i32* %ms1, align 4
  %cmp41 = icmp eq i32 %conv40, 45
  br i1 %cmp41, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load i32, i32* %ms2, align 4
  %idxprom43 = sext i32 %44 to i64
  %45 = load i32, i32* %ms1, align 4
  %idxprom44 = sext i32 %45 to i64
  %arrayidx45 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom44
  %arrayidx46 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx45, i32 0, i64 %idxprom43
  %46 = load double, double* %arrayidx46, align 8
  %47 = load double, double* %tmpscore, align 8
  %add47 = fadd double %47, %46
  store double %add47, double* %tmpscore, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %48 = load i32, i32* %k, align 4
  %dec = add nsw i32 %48, -1
  store i32 %dec, i32* %k, align 4
  %49 = load i32, i32* %k, align 4
  %50 = load i32, i32* %len2, align 4
  %cmp48 = icmp sgt i32 %49, %50
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %while.end
  br label %for.end

if.end.51:                                        ; preds = %while.end
  br label %for.inc

if.end.52:                                        ; preds = %if.end
  %51 = load i32, i32* %ms2, align 4
  %cmp53 = icmp eq i32 %51, 45
  br i1 %cmp53, label %if.then.55, label %if.end.84

if.then.55:                                       ; preds = %if.end.52
  %52 = load i32, i32* @penalty, align 4
  %conv56 = sitofp i32 %52 to double
  %53 = load double, double* %tmpscore, align 8
  %add57 = fadd double %53, %conv56
  store double %add57, double* %tmpscore, align 8
  %54 = load i32, i32* @penalty, align 4
  %conv58 = sitofp i32 %54 to double
  %55 = load double, double* %gaptmpscore, align 8
  %add59 = fadd double %55, %conv58
  store double %add59, double* %gaptmpscore, align 8
  %56 = load i32, i32* %ms2, align 4
  %idxprom60 = sext i32 %56 to i64
  %57 = load i32, i32* %ms1, align 4
  %idxprom61 = sext i32 %57 to i64
  %arrayidx62 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom61
  %arrayidx63 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx62, i32 0, i64 %idxprom60
  %58 = load double, double* %arrayidx63, align 8
  %59 = load double, double* %tmpscore, align 8
  %add64 = fadd double %59, %58
  store double %add64, double* %tmpscore, align 8
  br label %while.cond.65

while.cond.65:                                    ; preds = %while.body.72, %if.then.55
  %60 = load i32, i32* %k, align 4
  %inc66 = add nsw i32 %60, 1
  store i32 %inc66, i32* %k, align 4
  %idxprom67 = sext i32 %inc66 to i64
  %61 = load i8*, i8** %mseq2, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %61, i64 %idxprom67
  %62 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %62 to i32
  store i32 %conv69, i32* %ms2, align 4
  %cmp70 = icmp eq i32 %conv69, 45
  br i1 %cmp70, label %while.body.72, label %while.end.78

while.body.72:                                    ; preds = %while.cond.65
  %63 = load i32, i32* %ms2, align 4
  %idxprom73 = sext i32 %63 to i64
  %64 = load i32, i32* %ms1, align 4
  %idxprom74 = sext i32 %64 to i64
  %arrayidx75 = getelementptr inbounds [128 x [128 x double]], [128 x [128 x double]]* @amino_dis_consweight_multi, i32 0, i64 %idxprom74
  %arrayidx76 = getelementptr inbounds [128 x double], [128 x double]* %arrayidx75, i32 0, i64 %idxprom73
  %65 = load double, double* %arrayidx76, align 8
  %66 = load double, double* %tmpscore, align 8
  %add77 = fadd double %66, %65
  store double %add77, double* %tmpscore, align 8
  br label %while.cond.65

while.end.78:                                     ; preds = %while.cond.65
  %67 = load i32, i32* %k, align 4
  %dec79 = add nsw i32 %67, -1
  store i32 %dec79, i32* %k, align 4
  %68 = load i32, i32* %k, align 4
  %69 = load i32, i32* %len2, align 4
  %cmp80 = icmp sgt i32 %68, %69
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %while.end.78
  br label %for.end

if.end.83:                                        ; preds = %while.end.78
  br label %for.inc

if.end.84:                                        ; preds = %if.end.52
  br label %for.inc

for.inc:                                          ; preds = %if.end.84, %if.end.83, %if.end.51, %if.then
  %70 = load i32, i32* %k, align 4
  %inc85 = add nsw i32 %70, 1
  store i32 %inc85, i32* %k, align 4
  br label %for.cond.10

for.end:                                          ; preds = %if.then.82, %if.then.50, %for.cond.10
  %71 = load double, double* %tmpscore, align 8
  %72 = load double, double* %efficient, align 8
  %mul86 = fmul double %71, %72
  %73 = load double*, double** %value.addr, align 8
  %74 = load double, double* %73, align 8
  %add87 = fadd double %74, %mul86
  store double %add87, double* %73, align 8
  %75 = load double, double* %gaptmpscore, align 8
  %76 = load double, double* %efficient, align 8
  %mul88 = fmul double %75, %76
  %77 = load double, double* %gapscore, align 8
  %add89 = fadd double %77, %mul88
  store double %add89, double* %gapscore, align 8
  br label %for.inc.90

for.inc.90:                                       ; preds = %for.end
  %78 = load i32, i32* %j, align 4
  %inc91 = add nsw i32 %78, 1
  store i32 %inc91, i32* %j, align 4
  br label %for.cond.1

for.end.92:                                       ; preds = %for.cond.1
  br label %for.inc.93

for.inc.93:                                       ; preds = %for.end.92
  %79 = load i32, i32* %i, align 4
  %inc94 = add nsw i32 %79, 1
  store i32 %inc94, i32* %i, align 4
  br label %for.cond

for.end.95:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @intergroup_score_new(i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %clus1, i32 %clus2, i32 %len, double* %value) #0 {
entry:
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %clus1.addr = alloca i32, align 4
  %clus2.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %value.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %len2 = alloca i32, align 4
  %ms1 = alloca i32, align 4
  %ms2 = alloca i32, align 4
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %clus1, i32* %clus1.addr, align 4
  store i32 %clus2, i32* %clus2.addr, align 4
  store i32 %len, i32* %len.addr, align 4
  store double* %value, double** %value.addr, align 8
  %0 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %len2, align 4
  %1 = load double*, double** %value.addr, align 8
  store double 0.000000e+00, double* %1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.92, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %clus1.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.94

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.89, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus2.addr, align 4
  %cmp2 = icmp slt i32 %4, %5
  br i1 %cmp2, label %for.body.3, label %for.end.91

for.body.3:                                       ; preds = %for.cond.1
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff1.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %9 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %9 to i64
  %10 = load double*, double** %eff2.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %10, i64 %idxprom4
  %11 = load double, double* %arrayidx5, align 8
  %mul = fmul double %8, %11
  store double %mul, double* getelementptr inbounds ([1 x double], [1 x double]* @intergroup_score_new.efficient, i32 0, i32 0), align 8
  %12 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %13, i64 %idxprom6
  %14 = load i8*, i8** %arrayidx7, align 8
  store i8* %14, i8** %mseq1, align 8
  %15 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %16, i64 %idxprom8
  %17 = load i8*, i8** %arrayidx9, align 8
  store i8* %17, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.10

for.cond.10:                                      ; preds = %for.inc, %for.body.3
  %18 = load i32, i32* %k, align 4
  %19 = load i32, i32* %len.addr, align 4
  %cmp11 = icmp slt i32 %18, %19
  br i1 %cmp11, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.10
  %20 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %20 to i64
  %21 = load i8*, i8** %mseq1, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %idxprom13
  %22 = load i8, i8* %arrayidx14, align 1
  %conv = sext i8 %22 to i32
  store i32 %conv, i32* %ms1, align 4
  %23 = load i32, i32* %k, align 4
  %idxprom15 = sext i32 %23 to i64
  %24 = load i8*, i8** %mseq2, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %idxprom15
  %25 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %25 to i32
  store i32 %conv17, i32* %ms2, align 4
  %26 = load i32, i32* %ms1, align 4
  %cmp18 = icmp eq i32 %26, 45
  br i1 %cmp18, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.12
  %27 = load i32, i32* %ms2, align 4
  %cmp20 = icmp eq i32 %27, 45
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body.12
  %28 = load i32, i32* %ms2, align 4
  %idxprom22 = sext i32 %28 to i64
  %29 = load i32, i32* %ms1, align 4
  %idxprom23 = sext i32 %29 to i64
  %arrayidx24 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom23
  %arrayidx25 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx24, i32 0, i64 %idxprom22
  %30 = load i32, i32* %arrayidx25, align 4
  %conv26 = sitofp i32 %30 to double
  %31 = load double, double* %tmpscore, align 8
  %add = fadd double %31, %conv26
  store double %add, double* %tmpscore, align 8
  %32 = load i32, i32* %ms1, align 4
  %cmp27 = icmp eq i32 %32, 45
  br i1 %cmp27, label %if.then.29, label %if.end.53

if.then.29:                                       ; preds = %if.end
  %33 = load i32, i32* @penalty, align 4
  %conv30 = sitofp i32 %33 to double
  %34 = load double, double* %tmpscore, align 8
  %add31 = fadd double %34, %conv30
  store double %add31, double* %tmpscore, align 8
  %35 = load i32, i32* %ms2, align 4
  %idxprom32 = sext i32 %35 to i64
  %36 = load i32, i32* %ms1, align 4
  %idxprom33 = sext i32 %36 to i64
  %arrayidx34 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom33
  %arrayidx35 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx34, i32 0, i64 %idxprom32
  %37 = load i32, i32* %arrayidx35, align 4
  %conv36 = sitofp i32 %37 to double
  %38 = load double, double* %tmpscore, align 8
  %add37 = fadd double %38, %conv36
  store double %add37, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.29
  %39 = load i32, i32* %k, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %k, align 4
  %idxprom38 = sext i32 %inc to i64
  %40 = load i8*, i8** %mseq1, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %40, i64 %idxprom38
  %41 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %41 to i32
  store i32 %conv40, i32* %ms1, align 4
  %cmp41 = icmp eq i32 %conv40, 45
  br i1 %cmp41, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %42 = load i32, i32* %ms2, align 4
  %idxprom43 = sext i32 %42 to i64
  %43 = load i32, i32* %ms1, align 4
  %idxprom44 = sext i32 %43 to i64
  %arrayidx45 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom44
  %arrayidx46 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx45, i32 0, i64 %idxprom43
  %44 = load i32, i32* %arrayidx46, align 4
  %conv47 = sitofp i32 %44 to double
  %45 = load double, double* %tmpscore, align 8
  %add48 = fadd double %45, %conv47
  store double %add48, double* %tmpscore, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %46 = load i32, i32* %k, align 4
  %dec = add nsw i32 %46, -1
  store i32 %dec, i32* %k, align 4
  %47 = load i32, i32* %k, align 4
  %48 = load i32, i32* %len2, align 4
  %cmp49 = icmp sgt i32 %47, %48
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %while.end
  br label %for.end

if.end.52:                                        ; preds = %while.end
  br label %for.inc

if.end.53:                                        ; preds = %if.end
  %49 = load i32, i32* %ms2, align 4
  %cmp54 = icmp eq i32 %49, 45
  br i1 %cmp54, label %if.then.56, label %if.end.85

if.then.56:                                       ; preds = %if.end.53
  %50 = load i32, i32* @penalty, align 4
  %conv57 = sitofp i32 %50 to double
  %51 = load double, double* %tmpscore, align 8
  %add58 = fadd double %51, %conv57
  store double %add58, double* %tmpscore, align 8
  %52 = load i32, i32* %ms2, align 4
  %idxprom59 = sext i32 %52 to i64
  %53 = load i32, i32* %ms1, align 4
  %idxprom60 = sext i32 %53 to i64
  %arrayidx61 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom60
  %arrayidx62 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx61, i32 0, i64 %idxprom59
  %54 = load i32, i32* %arrayidx62, align 4
  %conv63 = sitofp i32 %54 to double
  %55 = load double, double* %tmpscore, align 8
  %add64 = fadd double %55, %conv63
  store double %add64, double* %tmpscore, align 8
  br label %while.cond.65

while.cond.65:                                    ; preds = %while.body.72, %if.then.56
  %56 = load i32, i32* %k, align 4
  %inc66 = add nsw i32 %56, 1
  store i32 %inc66, i32* %k, align 4
  %idxprom67 = sext i32 %inc66 to i64
  %57 = load i8*, i8** %mseq2, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %57, i64 %idxprom67
  %58 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %58 to i32
  store i32 %conv69, i32* %ms2, align 4
  %cmp70 = icmp eq i32 %conv69, 45
  br i1 %cmp70, label %while.body.72, label %while.end.79

while.body.72:                                    ; preds = %while.cond.65
  %59 = load i32, i32* %ms2, align 4
  %idxprom73 = sext i32 %59 to i64
  %60 = load i32, i32* %ms1, align 4
  %idxprom74 = sext i32 %60 to i64
  %arrayidx75 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom74
  %arrayidx76 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx75, i32 0, i64 %idxprom73
  %61 = load i32, i32* %arrayidx76, align 4
  %conv77 = sitofp i32 %61 to double
  %62 = load double, double* %tmpscore, align 8
  %add78 = fadd double %62, %conv77
  store double %add78, double* %tmpscore, align 8
  br label %while.cond.65

while.end.79:                                     ; preds = %while.cond.65
  %63 = load i32, i32* %k, align 4
  %dec80 = add nsw i32 %63, -1
  store i32 %dec80, i32* %k, align 4
  %64 = load i32, i32* %k, align 4
  %65 = load i32, i32* %len2, align 4
  %cmp81 = icmp sgt i32 %64, %65
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %while.end.79
  br label %for.end

if.end.84:                                        ; preds = %while.end.79
  br label %for.inc

if.end.85:                                        ; preds = %if.end.53
  br label %for.inc

for.inc:                                          ; preds = %if.end.85, %if.end.84, %if.end.52, %if.then
  %66 = load i32, i32* %k, align 4
  %inc86 = add nsw i32 %66, 1
  store i32 %inc86, i32* %k, align 4
  br label %for.cond.10

for.end:                                          ; preds = %if.then.83, %if.then.51, %for.cond.10
  %67 = load double, double* %tmpscore, align 8
  %68 = load double, double* getelementptr inbounds ([1 x double], [1 x double]* @intergroup_score_new.efficient, i32 0, i32 0), align 8
  %mul87 = fmul double %67, %68
  %69 = load double*, double** %value.addr, align 8
  %70 = load double, double* %69, align 8
  %add88 = fadd double %70, %mul87
  store double %add88, double* %69, align 8
  br label %for.inc.89

for.inc.89:                                       ; preds = %for.end
  %71 = load i32, i32* %j, align 4
  %inc90 = add nsw i32 %71, 1
  store i32 %inc90, i32* %j, align 4
  br label %for.cond.1

for.end.91:                                       ; preds = %for.cond.1
  br label %for.inc.92

for.inc.92:                                       ; preds = %for.end.91
  %72 = load i32, i32* %i, align 4
  %inc93 = add nsw i32 %72, 1
  store i32 %inc93, i32* %i, align 4
  br label %for.cond

for.end.94:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define double @score_calc3(i8** %seq, i32 %s, double** %eff, i32 %ex) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %ex.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca double, align 8
  %tmpscore = alloca i64, align 8
  %totaleff = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32 %ex, i32* %ex.addr, align 4
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %2 = load i32, i32* @weight, align 4
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb.3
    i32 3, label %sw.bb.6
  ]

sw.bb:                                            ; preds = %entry
  %3 = load i32, i32* %s.addr, align 4
  %conv1 = sitofp i32 %3 to double
  %4 = load i32, i32* %s.addr, align 4
  %conv2 = sitofp i32 %4 to double
  %sub = fsub double %conv2, 1.000000e+00
  %mul = fmul double %conv1, %sub
  %div = fdiv double %mul, 2.000000e+00
  store double %div, double* %totaleff, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %5 = load i32, i32* %s.addr, align 4
  %div4 = sdiv i32 %5, 2
  %conv5 = sitofp i32 %div4 to double
  store double %conv5, double* %totaleff, align 8
  br label %sw.epilog

sw.bb.6:                                          ; preds = %entry
  store double 0.000000e+00, double* %totaleff, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.17, %sw.bb.6
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %s.addr, align 4
  %sub7 = sub nsw i32 %7, 1
  %cmp = icmp slt i32 %6, %sub7
  br i1 %cmp, label %for.body, label %for.end.19

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %add = add nsw i32 %8, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %10 = load i32, i32* %s.addr, align 4
  %cmp10 = icmp slt i32 %9, %10
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %11 = load i32, i32* %j, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %12 to i64
  %13 = load double**, double*** %eff.addr, align 8
  %arrayidx14 = getelementptr inbounds double*, double** %13, i64 %idxprom13
  %14 = load double*, double** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds double, double* %14, i64 %idxprom
  %15 = load double, double* %arrayidx15, align 8
  %16 = load double, double* %totaleff, align 8
  %add16 = fadd double %16, %15
  store double %add16, double* %totaleff, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.12
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  br label %for.inc.17

for.inc.17:                                       ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %18, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end.19:                                       ; preds = %for.cond
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

sw.epilog:                                        ; preds = %for.end.19, %sw.bb.3, %sw.bb
  store double 0.000000e+00, double* %score, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.21

for.cond.21:                                      ; preds = %for.inc.127, %sw.epilog
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %s.addr, align 4
  %sub22 = sub nsw i32 %21, 1
  %cmp23 = icmp slt i32 %20, %sub22
  br i1 %cmp23, label %for.body.25, label %for.end.129

for.body.25:                                      ; preds = %for.cond.21
  %22 = load i32, i32* %i, align 4
  %add26 = add nsw i32 %22, 1
  store i32 %add26, i32* %j, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.124, %for.body.25
  %23 = load i32, i32* %j, align 4
  %24 = load i32, i32* %s.addr, align 4
  %cmp28 = icmp slt i32 %23, %24
  br i1 %cmp28, label %for.body.30, label %for.end.126

for.body.30:                                      ; preds = %for.cond.27
  %25 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %25 to i64
  %26 = load i8**, i8*** %seq.addr, align 8
  %arrayidx32 = getelementptr inbounds i8*, i8** %26, i64 %idxprom31
  %27 = load i8*, i8** %arrayidx32, align 8
  %call33 = call i8* @strcpy(i8* getelementptr inbounds ([10000000 x i8], [10000000 x i8]* @score_calc3.mseq1, i32 0, i32 0), i8* %27) #8
  %28 = load i32, i32* %j, align 4
  %idxprom34 = sext i32 %28 to i64
  %29 = load i8**, i8*** %seq.addr, align 8
  %arrayidx35 = getelementptr inbounds i8*, i8** %29, i64 %idxprom34
  %30 = load i8*, i8** %arrayidx35, align 8
  %call36 = call i8* @strcpy(i8* getelementptr inbounds ([10000000 x i8], [10000000 x i8]* @score_calc3.mseq2, i32 0, i32 0), i8* %30) #8
  store i64 0, i64* %tmpscore, align 8
  store i32 0, i32* %c, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.37

for.cond.37:                                      ; preds = %for.inc.112, %for.body.30
  %31 = load i32, i32* %k, align 4
  %32 = load i32, i32* %len, align 4
  %cmp38 = icmp slt i32 %31, %32
  br i1 %cmp38, label %for.body.40, label %for.end.114

for.body.40:                                      ; preds = %for.cond.37
  %33 = load i32, i32* %k, align 4
  %idxprom41 = sext i32 %33 to i64
  %arrayidx42 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq1, i32 0, i64 %idxprom41
  %34 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %34 to i32
  %cmp44 = icmp eq i32 %conv43, 45
  br i1 %cmp44, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.40
  %35 = load i32, i32* %k, align 4
  %idxprom46 = sext i32 %35 to i64
  %arrayidx47 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq2, i32 0, i64 %idxprom46
  %36 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %36 to i32
  %cmp49 = icmp eq i32 %conv48, 45
  br i1 %cmp49, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc.112

if.end:                                           ; preds = %land.lhs.true, %for.body.40
  %37 = load i32, i32* %k, align 4
  %idxprom51 = sext i32 %37 to i64
  %arrayidx52 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq2, i32 0, i64 %idxprom51
  %38 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %38 to i32
  %idxprom54 = sext i32 %conv53 to i64
  %39 = load i32, i32* %k, align 4
  %idxprom55 = sext i32 %39 to i64
  %arrayidx56 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq1, i32 0, i64 %idxprom55
  %40 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %40 to i32
  %idxprom58 = sext i32 %conv57 to i64
  %arrayidx59 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom58
  %arrayidx60 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx59, i32 0, i64 %idxprom54
  %41 = load i32, i32* %arrayidx60, align 4
  %42 = load i32, i32* @scoremtx, align 4
  %tobool = icmp ne i32 %42, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %mul61 = mul nsw i32 400, %lnot.ext
  %add62 = add nsw i32 %41, %mul61
  %conv63 = sext i32 %add62 to i64
  %43 = load i64, i64* %tmpscore, align 8
  %add64 = add nsw i64 %43, %conv63
  store i64 %add64, i64* %tmpscore, align 8
  %44 = load i32, i32* %c, align 4
  %inc65 = add nsw i32 %44, 1
  store i32 %inc65, i32* %c, align 4
  %45 = load i32, i32* %k, align 4
  %idxprom66 = sext i32 %45 to i64
  %arrayidx67 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq1, i32 0, i64 %idxprom66
  %46 = load i8, i8* %arrayidx67, align 1
  %conv68 = sext i8 %46 to i32
  %cmp69 = icmp eq i32 %conv68, 45
  br i1 %cmp69, label %if.then.71, label %if.end.86

if.then.71:                                       ; preds = %if.end
  %47 = load i32, i32* @penalty, align 4
  %48 = load i32, i32* getelementptr inbounds ([26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 0, i64 24), align 4
  %sub72 = sub nsw i32 %47, %48
  %conv73 = sext i32 %sub72 to i64
  %49 = load i64, i64* %tmpscore, align 8
  %add74 = add nsw i64 %49, %conv73
  store i64 %add74, i64* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.71
  %50 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %50, 1
  store i32 %inc75, i32* %k, align 4
  %idxprom76 = sext i32 %inc75 to i64
  %arrayidx77 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq1, i32 0, i64 %idxprom76
  %51 = load i8, i8* %arrayidx77, align 1
  %conv78 = sext i8 %51 to i32
  %cmp79 = icmp eq i32 %conv78, 45
  br i1 %cmp79, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %52 = load i32, i32* %k, align 4
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* %k, align 4
  %53 = load i32, i32* %k, align 4
  %54 = load i32, i32* %len, align 4
  %sub81 = sub nsw i32 %54, 2
  %cmp82 = icmp sgt i32 %53, %sub81
  br i1 %cmp82, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %while.end
  br label %for.end.114

if.end.85:                                        ; preds = %while.end
  br label %for.inc.112

if.end.86:                                        ; preds = %if.end
  %55 = load i32, i32* %k, align 4
  %idxprom87 = sext i32 %55 to i64
  %arrayidx88 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq2, i32 0, i64 %idxprom87
  %56 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %56 to i32
  %cmp90 = icmp eq i32 %conv89, 45
  br i1 %cmp90, label %if.then.92, label %if.end.111

if.then.92:                                       ; preds = %if.end.86
  %57 = load i32, i32* @penalty, align 4
  %58 = load i32, i32* getelementptr inbounds ([26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 0, i64 24), align 4
  %sub93 = sub nsw i32 %57, %58
  %conv94 = sext i32 %sub93 to i64
  %59 = load i64, i64* %tmpscore, align 8
  %add95 = add nsw i64 %59, %conv94
  store i64 %add95, i64* %tmpscore, align 8
  br label %while.cond.96

while.cond.96:                                    ; preds = %while.body.103, %if.then.92
  %60 = load i32, i32* %k, align 4
  %inc97 = add nsw i32 %60, 1
  store i32 %inc97, i32* %k, align 4
  %idxprom98 = sext i32 %inc97 to i64
  %arrayidx99 = getelementptr inbounds [10000000 x i8], [10000000 x i8]* @score_calc3.mseq2, i32 0, i64 %idxprom98
  %61 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %61 to i32
  %cmp101 = icmp eq i32 %conv100, 45
  br i1 %cmp101, label %while.body.103, label %while.end.104

while.body.103:                                   ; preds = %while.cond.96
  br label %while.cond.96

while.end.104:                                    ; preds = %while.cond.96
  %62 = load i32, i32* %k, align 4
  %dec105 = add nsw i32 %62, -1
  store i32 %dec105, i32* %k, align 4
  %63 = load i32, i32* %k, align 4
  %64 = load i32, i32* %len, align 4
  %sub106 = sub nsw i32 %64, 2
  %cmp107 = icmp sgt i32 %63, %sub106
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %while.end.104
  br label %for.end.114

if.end.110:                                       ; preds = %while.end.104
  br label %for.inc.112

if.end.111:                                       ; preds = %if.end.86
  br label %for.inc.112

for.inc.112:                                      ; preds = %if.end.111, %if.end.110, %if.end.85, %if.then
  %65 = load i32, i32* %k, align 4
  %inc113 = add nsw i32 %65, 1
  store i32 %inc113, i32* %k, align 4
  br label %for.cond.37

for.end.114:                                      ; preds = %if.then.109, %if.then.84, %for.cond.37
  %66 = load i64, i64* %tmpscore, align 8
  %conv115 = sitofp i64 %66 to double
  %67 = load i32, i32* %c, align 4
  %conv116 = sitofp i32 %67 to double
  %div117 = fdiv double %conv115, %conv116
  %68 = load i32, i32* %j, align 4
  %idxprom118 = sext i32 %68 to i64
  %69 = load i32, i32* %i, align 4
  %idxprom119 = sext i32 %69 to i64
  %70 = load double**, double*** %eff.addr, align 8
  %arrayidx120 = getelementptr inbounds double*, double** %70, i64 %idxprom119
  %71 = load double*, double** %arrayidx120, align 8
  %arrayidx121 = getelementptr inbounds double, double* %71, i64 %idxprom118
  %72 = load double, double* %arrayidx121, align 8
  %mul122 = fmul double %div117, %72
  %73 = load double, double* %score, align 8
  %add123 = fadd double %73, %mul122
  store double %add123, double* %score, align 8
  br label %for.inc.124

for.inc.124:                                      ; preds = %for.end.114
  %74 = load i32, i32* %j, align 4
  %inc125 = add nsw i32 %74, 1
  store i32 %inc125, i32* %j, align 4
  br label %for.cond.27

for.end.126:                                      ; preds = %for.cond.27
  br label %for.inc.127

for.inc.127:                                      ; preds = %for.end.126
  %75 = load i32, i32* %i, align 4
  %inc128 = add nsw i32 %75, 1
  store i32 %inc128, i32* %i, align 4
  br label %for.cond.21

for.end.129:                                      ; preds = %for.cond.21
  %76 = load i32, i32* @weight, align 4
  %cmp130 = icmp eq i32 %76, 0
  br i1 %cmp130, label %if.then.132, label %if.end.134

if.then.132:                                      ; preds = %for.end.129
  %77 = load double, double* %totaleff, align 8
  %78 = load double, double* %score, align 8
  %div133 = fdiv double %78, %77
  store double %div133, double* %score, align 8
  br label %if.end.134

if.end.134:                                       ; preds = %if.then.132, %for.end.129
  %79 = load double, double* %score, align 8
  ret double %79
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define double @score_calc5(i8** %seq, i32 %s, double** %eff, i32 %ex) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %ex.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca double, align 8
  %len = alloca i32, align 4
  %score = alloca double, align 8
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  %efficient = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32 %ex, i32* %ex.addr, align 4
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store double 0.000000e+00, double* %score, align 8
  store double 0.000000e+00, double* %c, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.106, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.108

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %ex.addr, align 4
  %cmp2 = icmp eq i32 %4, %5
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc.106

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %ex.addr, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double**, double*** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double*, double** %8, i64 %idxprom4
  %9 = load double*, double** %arrayidx5, align 8
  %arrayidx6 = getelementptr inbounds double, double* %9, i64 %idxprom
  %10 = load double, double* %arrayidx6, align 8
  store double %10, double* %efficient, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i8**, i8*** %seq.addr, align 8
  %arrayidx8 = getelementptr inbounds i8*, i8** %12, i64 %idxprom7
  %13 = load i8*, i8** %arrayidx8, align 8
  store i8* %13, i8** %mseq1, align 8
  %14 = load i32, i32* %ex.addr, align 4
  %idxprom9 = sext i32 %14 to i64
  %15 = load i8**, i8*** %seq.addr, align 8
  %arrayidx10 = getelementptr inbounds i8*, i8** %15, i64 %idxprom9
  %16 = load i8*, i8** %arrayidx10, align 8
  store i8* %16, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc, %if.end
  %17 = load i32, i32* %k, align 4
  %18 = load i32, i32* %len, align 4
  %cmp12 = icmp slt i32 %17, %18
  br i1 %cmp12, label %for.body.14, label %for.end

for.body.14:                                      ; preds = %for.cond.11
  %19 = load i32, i32* %k, align 4
  %idxprom15 = sext i32 %19 to i64
  %20 = load i8*, i8** %mseq1, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %20, i64 %idxprom15
  %21 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %21 to i32
  %cmp18 = icmp eq i32 %conv17, 45
  br i1 %cmp18, label %land.lhs.true, label %if.end.26

land.lhs.true:                                    ; preds = %for.body.14
  %22 = load i32, i32* %k, align 4
  %idxprom20 = sext i32 %22 to i64
  %23 = load i8*, i8** %mseq2, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %23, i64 %idxprom20
  %24 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %24 to i32
  %cmp23 = icmp eq i32 %conv22, 45
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %land.lhs.true
  br label %for.inc

if.end.26:                                        ; preds = %land.lhs.true, %for.body.14
  %25 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %25 to i64
  %26 = load i8*, i8** %mseq2, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %26, i64 %idxprom27
  %27 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %27 to i32
  %idxprom30 = sext i32 %conv29 to i64
  %28 = load i32, i32* %k, align 4
  %idxprom31 = sext i32 %28 to i64
  %29 = load i8*, i8** %mseq1, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %29, i64 %idxprom31
  %30 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %30 to i32
  %idxprom34 = sext i32 %conv33 to i64
  %arrayidx35 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom34
  %arrayidx36 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx35, i32 0, i64 %idxprom30
  %31 = load i32, i32* %arrayidx36, align 4
  %conv37 = sitofp i32 %31 to double
  %32 = load double, double* %tmpscore, align 8
  %add = fadd double %32, %conv37
  store double %add, double* %tmpscore, align 8
  %33 = load i32, i32* %k, align 4
  %idxprom38 = sext i32 %33 to i64
  %34 = load i8*, i8** %mseq1, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %34, i64 %idxprom38
  %35 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %35 to i32
  %cmp41 = icmp eq i32 %conv40, 45
  br i1 %cmp41, label %if.then.43, label %if.end.67

if.then.43:                                       ; preds = %if.end.26
  %36 = load i32, i32* @penalty, align 4
  %conv44 = sitofp i32 %36 to double
  %37 = load double, double* %tmpscore, align 8
  %add45 = fadd double %37, %conv44
  store double %add45, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.43
  %38 = load i32, i32* %k, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %k, align 4
  %idxprom46 = sext i32 %inc to i64
  %39 = load i8*, i8** %mseq1, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %39, i64 %idxprom46
  %40 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %40 to i32
  %cmp49 = icmp eq i32 %conv48, 45
  br i1 %cmp49, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %41 = load i32, i32* %k, align 4
  %idxprom51 = sext i32 %41 to i64
  %42 = load i8*, i8** %mseq2, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %42, i64 %idxprom51
  %43 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %43 to i32
  %idxprom54 = sext i32 %conv53 to i64
  %44 = load i32, i32* %k, align 4
  %idxprom55 = sext i32 %44 to i64
  %45 = load i8*, i8** %mseq1, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %45, i64 %idxprom55
  %46 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %46 to i32
  %idxprom58 = sext i32 %conv57 to i64
  %arrayidx59 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom58
  %arrayidx60 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx59, i32 0, i64 %idxprom54
  %47 = load i32, i32* %arrayidx60, align 4
  %conv61 = sitofp i32 %47 to double
  %48 = load double, double* %tmpscore, align 8
  %add62 = fadd double %48, %conv61
  store double %add62, double* %tmpscore, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %49 = load i32, i32* %k, align 4
  %dec = add nsw i32 %49, -1
  store i32 %dec, i32* %k, align 4
  %50 = load i32, i32* %k, align 4
  %51 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %51, 2
  %cmp63 = icmp sgt i32 %50, %sub
  br i1 %cmp63, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %while.end
  br label %for.end

if.end.66:                                        ; preds = %while.end
  br label %for.inc

if.end.67:                                        ; preds = %if.end.26
  %52 = load i32, i32* %k, align 4
  %idxprom68 = sext i32 %52 to i64
  %53 = load i8*, i8** %mseq2, align 8
  %arrayidx69 = getelementptr inbounds i8, i8* %53, i64 %idxprom68
  %54 = load i8, i8* %arrayidx69, align 1
  %conv70 = sext i8 %54 to i32
  %cmp71 = icmp eq i32 %conv70, 45
  br i1 %cmp71, label %if.then.73, label %if.end.103

if.then.73:                                       ; preds = %if.end.67
  %55 = load i32, i32* @penalty, align 4
  %conv74 = sitofp i32 %55 to double
  %56 = load double, double* %tmpscore, align 8
  %add75 = fadd double %56, %conv74
  store double %add75, double* %tmpscore, align 8
  br label %while.cond.76

while.cond.76:                                    ; preds = %while.body.83, %if.then.73
  %57 = load i32, i32* %k, align 4
  %inc77 = add nsw i32 %57, 1
  store i32 %inc77, i32* %k, align 4
  %idxprom78 = sext i32 %inc77 to i64
  %58 = load i8*, i8** %mseq2, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %58, i64 %idxprom78
  %59 = load i8, i8* %arrayidx79, align 1
  %conv80 = sext i8 %59 to i32
  %cmp81 = icmp eq i32 %conv80, 45
  br i1 %cmp81, label %while.body.83, label %while.end.96

while.body.83:                                    ; preds = %while.cond.76
  %60 = load i32, i32* %k, align 4
  %idxprom84 = sext i32 %60 to i64
  %61 = load i8*, i8** %mseq2, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %61, i64 %idxprom84
  %62 = load i8, i8* %arrayidx85, align 1
  %conv86 = sext i8 %62 to i32
  %idxprom87 = sext i32 %conv86 to i64
  %63 = load i32, i32* %k, align 4
  %idxprom88 = sext i32 %63 to i64
  %64 = load i8*, i8** %mseq1, align 8
  %arrayidx89 = getelementptr inbounds i8, i8* %64, i64 %idxprom88
  %65 = load i8, i8* %arrayidx89, align 1
  %conv90 = sext i8 %65 to i32
  %idxprom91 = sext i32 %conv90 to i64
  %arrayidx92 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom91
  %arrayidx93 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx92, i32 0, i64 %idxprom87
  %66 = load i32, i32* %arrayidx93, align 4
  %conv94 = sitofp i32 %66 to double
  %67 = load double, double* %tmpscore, align 8
  %add95 = fadd double %67, %conv94
  store double %add95, double* %tmpscore, align 8
  br label %while.cond.76

while.end.96:                                     ; preds = %while.cond.76
  %68 = load i32, i32* %k, align 4
  %dec97 = add nsw i32 %68, -1
  store i32 %dec97, i32* %k, align 4
  %69 = load i32, i32* %k, align 4
  %70 = load i32, i32* %len, align 4
  %sub98 = sub nsw i32 %70, 2
  %cmp99 = icmp sgt i32 %69, %sub98
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %while.end.96
  br label %for.end

if.end.102:                                       ; preds = %while.end.96
  br label %for.inc

if.end.103:                                       ; preds = %if.end.67
  br label %for.inc

for.inc:                                          ; preds = %if.end.103, %if.end.102, %if.end.66, %if.then.25
  %71 = load i32, i32* %k, align 4
  %inc104 = add nsw i32 %71, 1
  store i32 %inc104, i32* %k, align 4
  br label %for.cond.11

for.end:                                          ; preds = %if.then.101, %if.then.65, %for.cond.11
  %72 = load double, double* %tmpscore, align 8
  %73 = load double, double* %efficient, align 8
  %mul = fmul double %72, %73
  %74 = load double, double* %score, align 8
  %add105 = fadd double %74, %mul
  store double %add105, double* %score, align 8
  br label %for.inc.106

for.inc.106:                                      ; preds = %for.end, %if.then
  %75 = load i32, i32* %i, align 4
  %inc107 = add nsw i32 %75, 1
  store i32 %inc107, i32* %i, align 4
  br label %for.cond

for.end.108:                                      ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.109

for.cond.109:                                     ; preds = %for.inc.242, %for.end.108
  %76 = load i32, i32* %i, align 4
  %77 = load i32, i32* %s.addr, align 4
  %sub110 = sub nsw i32 %77, 1
  %cmp111 = icmp slt i32 %76, %sub110
  br i1 %cmp111, label %for.body.113, label %for.end.244

for.body.113:                                     ; preds = %for.cond.109
  %78 = load i32, i32* %i, align 4
  %add114 = add nsw i32 %78, 1
  store i32 %add114, i32* %j, align 4
  br label %for.cond.115

for.cond.115:                                     ; preds = %for.inc.239, %for.body.113
  %79 = load i32, i32* %j, align 4
  %80 = load i32, i32* %s.addr, align 4
  %cmp116 = icmp slt i32 %79, %80
  br i1 %cmp116, label %for.body.118, label %for.end.241

for.body.118:                                     ; preds = %for.cond.115
  %81 = load i32, i32* %i, align 4
  %82 = load i32, i32* %ex.addr, align 4
  %cmp119 = icmp eq i32 %81, %82
  br i1 %cmp119, label %if.then.123, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.118
  %83 = load i32, i32* %j, align 4
  %84 = load i32, i32* %ex.addr, align 4
  %cmp121 = icmp eq i32 %83, %84
  br i1 %cmp121, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %lor.lhs.false, %for.body.118
  br label %for.inc.239

if.end.124:                                       ; preds = %lor.lhs.false
  %85 = load i32, i32* %j, align 4
  %idxprom125 = sext i32 %85 to i64
  %86 = load i32, i32* %i, align 4
  %idxprom126 = sext i32 %86 to i64
  %87 = load double**, double*** %eff.addr, align 8
  %arrayidx127 = getelementptr inbounds double*, double** %87, i64 %idxprom126
  %88 = load double*, double** %arrayidx127, align 8
  %arrayidx128 = getelementptr inbounds double, double* %88, i64 %idxprom125
  %89 = load double, double* %arrayidx128, align 8
  store double %89, double* %efficient, align 8
  %90 = load i32, i32* %i, align 4
  %idxprom129 = sext i32 %90 to i64
  %91 = load i8**, i8*** %seq.addr, align 8
  %arrayidx130 = getelementptr inbounds i8*, i8** %91, i64 %idxprom129
  %92 = load i8*, i8** %arrayidx130, align 8
  store i8* %92, i8** %mseq1, align 8
  %93 = load i32, i32* %j, align 4
  %idxprom131 = sext i32 %93 to i64
  %94 = load i8**, i8*** %seq.addr, align 8
  %arrayidx132 = getelementptr inbounds i8*, i8** %94, i64 %idxprom131
  %95 = load i8*, i8** %arrayidx132, align 8
  store i8* %95, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.133

for.cond.133:                                     ; preds = %for.inc.234, %if.end.124
  %96 = load i32, i32* %k, align 4
  %97 = load i32, i32* %len, align 4
  %cmp134 = icmp slt i32 %96, %97
  br i1 %cmp134, label %for.body.136, label %for.end.236

for.body.136:                                     ; preds = %for.cond.133
  %98 = load i32, i32* %k, align 4
  %idxprom137 = sext i32 %98 to i64
  %99 = load i8*, i8** %mseq1, align 8
  %arrayidx138 = getelementptr inbounds i8, i8* %99, i64 %idxprom137
  %100 = load i8, i8* %arrayidx138, align 1
  %conv139 = sext i8 %100 to i32
  %cmp140 = icmp eq i32 %conv139, 45
  br i1 %cmp140, label %land.lhs.true.142, label %if.end.149

land.lhs.true.142:                                ; preds = %for.body.136
  %101 = load i32, i32* %k, align 4
  %idxprom143 = sext i32 %101 to i64
  %102 = load i8*, i8** %mseq2, align 8
  %arrayidx144 = getelementptr inbounds i8, i8* %102, i64 %idxprom143
  %103 = load i8, i8* %arrayidx144, align 1
  %conv145 = sext i8 %103 to i32
  %cmp146 = icmp eq i32 %conv145, 45
  br i1 %cmp146, label %if.then.148, label %if.end.149

if.then.148:                                      ; preds = %land.lhs.true.142
  br label %for.inc.234

if.end.149:                                       ; preds = %land.lhs.true.142, %for.body.136
  %104 = load i32, i32* %k, align 4
  %idxprom150 = sext i32 %104 to i64
  %105 = load i8*, i8** %mseq2, align 8
  %arrayidx151 = getelementptr inbounds i8, i8* %105, i64 %idxprom150
  %106 = load i8, i8* %arrayidx151, align 1
  %conv152 = sext i8 %106 to i32
  %idxprom153 = sext i32 %conv152 to i64
  %107 = load i32, i32* %k, align 4
  %idxprom154 = sext i32 %107 to i64
  %108 = load i8*, i8** %mseq1, align 8
  %arrayidx155 = getelementptr inbounds i8, i8* %108, i64 %idxprom154
  %109 = load i8, i8* %arrayidx155, align 1
  %conv156 = sext i8 %109 to i32
  %idxprom157 = sext i32 %conv156 to i64
  %arrayidx158 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom157
  %arrayidx159 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx158, i32 0, i64 %idxprom153
  %110 = load i32, i32* %arrayidx159, align 4
  %conv160 = sitofp i32 %110 to double
  %111 = load double, double* %tmpscore, align 8
  %add161 = fadd double %111, %conv160
  store double %add161, double* %tmpscore, align 8
  %112 = load i32, i32* %k, align 4
  %idxprom162 = sext i32 %112 to i64
  %113 = load i8*, i8** %mseq1, align 8
  %arrayidx163 = getelementptr inbounds i8, i8* %113, i64 %idxprom162
  %114 = load i8, i8* %arrayidx163, align 1
  %conv164 = sext i8 %114 to i32
  %cmp165 = icmp eq i32 %conv164, 45
  br i1 %cmp165, label %if.then.167, label %if.end.197

if.then.167:                                      ; preds = %if.end.149
  %115 = load i32, i32* @penalty, align 4
  %conv168 = sitofp i32 %115 to double
  %116 = load double, double* %tmpscore, align 8
  %add169 = fadd double %116, %conv168
  store double %add169, double* %tmpscore, align 8
  br label %while.cond.170

while.cond.170:                                   ; preds = %while.body.177, %if.then.167
  %117 = load i32, i32* %k, align 4
  %inc171 = add nsw i32 %117, 1
  store i32 %inc171, i32* %k, align 4
  %idxprom172 = sext i32 %inc171 to i64
  %118 = load i8*, i8** %mseq1, align 8
  %arrayidx173 = getelementptr inbounds i8, i8* %118, i64 %idxprom172
  %119 = load i8, i8* %arrayidx173, align 1
  %conv174 = sext i8 %119 to i32
  %cmp175 = icmp eq i32 %conv174, 45
  br i1 %cmp175, label %while.body.177, label %while.end.190

while.body.177:                                   ; preds = %while.cond.170
  %120 = load i32, i32* %k, align 4
  %idxprom178 = sext i32 %120 to i64
  %121 = load i8*, i8** %mseq2, align 8
  %arrayidx179 = getelementptr inbounds i8, i8* %121, i64 %idxprom178
  %122 = load i8, i8* %arrayidx179, align 1
  %conv180 = sext i8 %122 to i32
  %idxprom181 = sext i32 %conv180 to i64
  %123 = load i32, i32* %k, align 4
  %idxprom182 = sext i32 %123 to i64
  %124 = load i8*, i8** %mseq1, align 8
  %arrayidx183 = getelementptr inbounds i8, i8* %124, i64 %idxprom182
  %125 = load i8, i8* %arrayidx183, align 1
  %conv184 = sext i8 %125 to i32
  %idxprom185 = sext i32 %conv184 to i64
  %arrayidx186 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom185
  %arrayidx187 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx186, i32 0, i64 %idxprom181
  %126 = load i32, i32* %arrayidx187, align 4
  %conv188 = sitofp i32 %126 to double
  %127 = load double, double* %tmpscore, align 8
  %add189 = fadd double %127, %conv188
  store double %add189, double* %tmpscore, align 8
  br label %while.cond.170

while.end.190:                                    ; preds = %while.cond.170
  %128 = load i32, i32* %k, align 4
  %dec191 = add nsw i32 %128, -1
  store i32 %dec191, i32* %k, align 4
  %129 = load i32, i32* %k, align 4
  %130 = load i32, i32* %len, align 4
  %sub192 = sub nsw i32 %130, 2
  %cmp193 = icmp sgt i32 %129, %sub192
  br i1 %cmp193, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %while.end.190
  br label %for.end.236

if.end.196:                                       ; preds = %while.end.190
  br label %for.inc.234

if.end.197:                                       ; preds = %if.end.149
  %131 = load i32, i32* %k, align 4
  %idxprom198 = sext i32 %131 to i64
  %132 = load i8*, i8** %mseq2, align 8
  %arrayidx199 = getelementptr inbounds i8, i8* %132, i64 %idxprom198
  %133 = load i8, i8* %arrayidx199, align 1
  %conv200 = sext i8 %133 to i32
  %cmp201 = icmp eq i32 %conv200, 45
  br i1 %cmp201, label %if.then.203, label %if.end.233

if.then.203:                                      ; preds = %if.end.197
  %134 = load i32, i32* @penalty, align 4
  %conv204 = sitofp i32 %134 to double
  %135 = load double, double* %tmpscore, align 8
  %add205 = fadd double %135, %conv204
  store double %add205, double* %tmpscore, align 8
  br label %while.cond.206

while.cond.206:                                   ; preds = %while.body.213, %if.then.203
  %136 = load i32, i32* %k, align 4
  %inc207 = add nsw i32 %136, 1
  store i32 %inc207, i32* %k, align 4
  %idxprom208 = sext i32 %inc207 to i64
  %137 = load i8*, i8** %mseq2, align 8
  %arrayidx209 = getelementptr inbounds i8, i8* %137, i64 %idxprom208
  %138 = load i8, i8* %arrayidx209, align 1
  %conv210 = sext i8 %138 to i32
  %cmp211 = icmp eq i32 %conv210, 45
  br i1 %cmp211, label %while.body.213, label %while.end.226

while.body.213:                                   ; preds = %while.cond.206
  %139 = load i32, i32* %k, align 4
  %idxprom214 = sext i32 %139 to i64
  %140 = load i8*, i8** %mseq2, align 8
  %arrayidx215 = getelementptr inbounds i8, i8* %140, i64 %idxprom214
  %141 = load i8, i8* %arrayidx215, align 1
  %conv216 = sext i8 %141 to i32
  %idxprom217 = sext i32 %conv216 to i64
  %142 = load i32, i32* %k, align 4
  %idxprom218 = sext i32 %142 to i64
  %143 = load i8*, i8** %mseq1, align 8
  %arrayidx219 = getelementptr inbounds i8, i8* %143, i64 %idxprom218
  %144 = load i8, i8* %arrayidx219, align 1
  %conv220 = sext i8 %144 to i32
  %idxprom221 = sext i32 %conv220 to i64
  %arrayidx222 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom221
  %arrayidx223 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx222, i32 0, i64 %idxprom217
  %145 = load i32, i32* %arrayidx223, align 4
  %conv224 = sitofp i32 %145 to double
  %146 = load double, double* %tmpscore, align 8
  %add225 = fadd double %146, %conv224
  store double %add225, double* %tmpscore, align 8
  br label %while.cond.206

while.end.226:                                    ; preds = %while.cond.206
  %147 = load i32, i32* %k, align 4
  %dec227 = add nsw i32 %147, -1
  store i32 %dec227, i32* %k, align 4
  %148 = load i32, i32* %k, align 4
  %149 = load i32, i32* %len, align 4
  %sub228 = sub nsw i32 %149, 2
  %cmp229 = icmp sgt i32 %148, %sub228
  br i1 %cmp229, label %if.then.231, label %if.end.232

if.then.231:                                      ; preds = %while.end.226
  br label %for.end.236

if.end.232:                                       ; preds = %while.end.226
  br label %for.inc.234

if.end.233:                                       ; preds = %if.end.197
  br label %for.inc.234

for.inc.234:                                      ; preds = %if.end.233, %if.end.232, %if.end.196, %if.then.148
  %150 = load i32, i32* %k, align 4
  %inc235 = add nsw i32 %150, 1
  store i32 %inc235, i32* %k, align 4
  br label %for.cond.133

for.end.236:                                      ; preds = %if.then.231, %if.then.195, %for.cond.133
  %151 = load double, double* %tmpscore, align 8
  %152 = load double, double* %efficient, align 8
  %mul237 = fmul double %151, %152
  %153 = load double, double* %score, align 8
  %add238 = fadd double %153, %mul237
  store double %add238, double* %score, align 8
  br label %for.inc.239

for.inc.239:                                      ; preds = %for.end.236, %if.then.123
  %154 = load i32, i32* %j, align 4
  %inc240 = add nsw i32 %154, 1
  store i32 %inc240, i32* %j, align 4
  br label %for.cond.115

for.end.241:                                      ; preds = %for.cond.115
  br label %for.inc.242

for.inc.242:                                      ; preds = %for.end.241
  %155 = load i32, i32* %i, align 4
  %inc243 = add nsw i32 %155, 1
  store i32 %inc243, i32* %i, align 4
  br label %for.cond.109

for.end.244:                                      ; preds = %for.cond.109
  %156 = load double, double* %score, align 8
  ret double %156
}

; Function Attrs: nounwind uwtable
define double @score_calc4(i8** %seq, i32 %s, double** %eff, i32 %ex) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %ex.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca double, align 8
  %len = alloca i32, align 4
  %score = alloca double, align 8
  %tmpscore = alloca i64, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  %efficient = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32 %ex, i32* %ex.addr, align 4
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store double 0.000000e+00, double* %score, align 8
  store double 0.000000e+00, double* %c, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.97, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.99

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.94, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.96

for.body.5:                                       ; preds = %for.cond.2
  %7 = load i32, i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load double**, double*** %eff.addr, align 8
  %arrayidx7 = getelementptr inbounds double*, double** %9, i64 %idxprom6
  %10 = load double*, double** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds double, double* %10, i64 %idxprom
  %11 = load double, double* %arrayidx8, align 8
  store double %11, double* %efficient, align 8
  %12 = load i32, i32* @mix, align 4
  %cmp9 = icmp eq i32 %12, 1
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.5
  store double 1.000000e+00, double* %efficient, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.5
  %13 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %13 to i64
  %14 = load i8**, i8*** %seq.addr, align 8
  %arrayidx12 = getelementptr inbounds i8*, i8** %14, i64 %idxprom11
  %15 = load i8*, i8** %arrayidx12, align 8
  store i8* %15, i8** %mseq1, align 8
  %16 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %16 to i64
  %17 = load i8**, i8*** %seq.addr, align 8
  %arrayidx14 = getelementptr inbounds i8*, i8** %17, i64 %idxprom13
  %18 = load i8*, i8** %arrayidx14, align 8
  store i8* %18, i8** %mseq2, align 8
  store i64 0, i64* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc, %if.end
  %19 = load i32, i32* %k, align 4
  %20 = load i32, i32* %len, align 4
  %cmp16 = icmp slt i32 %19, %20
  br i1 %cmp16, label %for.body.18, label %for.end

for.body.18:                                      ; preds = %for.cond.15
  %21 = load i32, i32* %k, align 4
  %idxprom19 = sext i32 %21 to i64
  %22 = load i8*, i8** %mseq1, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %22, i64 %idxprom19
  %23 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %23 to i32
  %cmp22 = icmp eq i32 %conv21, 45
  br i1 %cmp22, label %land.lhs.true, label %if.end.30

land.lhs.true:                                    ; preds = %for.body.18
  %24 = load i32, i32* %k, align 4
  %idxprom24 = sext i32 %24 to i64
  %25 = load i8*, i8** %mseq2, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %25, i64 %idxprom24
  %26 = load i8, i8* %arrayidx25, align 1
  %conv26 = sext i8 %26 to i32
  %cmp27 = icmp eq i32 %conv26, 45
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %land.lhs.true
  br label %for.inc

if.end.30:                                        ; preds = %land.lhs.true, %for.body.18
  %27 = load i32, i32* %k, align 4
  %idxprom31 = sext i32 %27 to i64
  %28 = load i8*, i8** %mseq2, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %28, i64 %idxprom31
  %29 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %29 to i32
  %idxprom34 = sext i32 %conv33 to i64
  %30 = load i32, i32* %k, align 4
  %idxprom35 = sext i32 %30 to i64
  %31 = load i8*, i8** %mseq1, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %31, i64 %idxprom35
  %32 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %32 to i32
  %idxprom38 = sext i32 %conv37 to i64
  %arrayidx39 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom38
  %arrayidx40 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx39, i32 0, i64 %idxprom34
  %33 = load i32, i32* %arrayidx40, align 4
  %34 = load i32, i32* @scoremtx, align 4
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %mul = mul nsw i32 400, %lnot.ext
  %add41 = add nsw i32 %33, %mul
  %conv42 = sext i32 %add41 to i64
  %35 = load i64, i64* %tmpscore, align 8
  %add43 = add nsw i64 %35, %conv42
  store i64 %add43, i64* %tmpscore, align 8
  %36 = load double, double* %efficient, align 8
  %37 = load double, double* %c, align 8
  %add44 = fadd double %37, %36
  store double %add44, double* %c, align 8
  %38 = load i32, i32* %k, align 4
  %idxprom45 = sext i32 %38 to i64
  %39 = load i8*, i8** %mseq1, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %39, i64 %idxprom45
  %40 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %40 to i32
  %cmp48 = icmp eq i32 %conv47, 45
  br i1 %cmp48, label %if.then.50, label %if.end.64

if.then.50:                                       ; preds = %if.end.30
  %41 = load i32, i32* @penalty, align 4
  %42 = load i32, i32* getelementptr inbounds ([26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 24, i64 0), align 4
  %sub51 = sub nsw i32 %41, %42
  %conv52 = sext i32 %sub51 to i64
  %43 = load i64, i64* %tmpscore, align 8
  %add53 = add nsw i64 %43, %conv52
  store i64 %add53, i64* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.50
  %44 = load i32, i32* %k, align 4
  %inc = add nsw i32 %44, 1
  store i32 %inc, i32* %k, align 4
  %idxprom54 = sext i32 %inc to i64
  %45 = load i8*, i8** %mseq1, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %45, i64 %idxprom54
  %46 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %46 to i32
  %cmp57 = icmp eq i32 %conv56, 45
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %47 = load i32, i32* %k, align 4
  %dec = add nsw i32 %47, -1
  store i32 %dec, i32* %k, align 4
  %48 = load i32, i32* %k, align 4
  %49 = load i32, i32* %len, align 4
  %sub59 = sub nsw i32 %49, 2
  %cmp60 = icmp sgt i32 %48, %sub59
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %while.end
  br label %for.end

if.end.63:                                        ; preds = %while.end
  br label %for.inc

if.end.64:                                        ; preds = %if.end.30
  %50 = load i32, i32* %k, align 4
  %idxprom65 = sext i32 %50 to i64
  %51 = load i8*, i8** %mseq2, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %51, i64 %idxprom65
  %52 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %52 to i32
  %cmp68 = icmp eq i32 %conv67, 45
  br i1 %cmp68, label %if.then.70, label %if.end.89

if.then.70:                                       ; preds = %if.end.64
  %53 = load i32, i32* @penalty, align 4
  %54 = load i32, i32* getelementptr inbounds ([26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 24, i64 0), align 4
  %sub71 = sub nsw i32 %53, %54
  %conv72 = sext i32 %sub71 to i64
  %55 = load i64, i64* %tmpscore, align 8
  %add73 = add nsw i64 %55, %conv72
  store i64 %add73, i64* %tmpscore, align 8
  br label %while.cond.74

while.cond.74:                                    ; preds = %while.body.81, %if.then.70
  %56 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %56, 1
  store i32 %inc75, i32* %k, align 4
  %idxprom76 = sext i32 %inc75 to i64
  %57 = load i8*, i8** %mseq2, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %57, i64 %idxprom76
  %58 = load i8, i8* %arrayidx77, align 1
  %conv78 = sext i8 %58 to i32
  %cmp79 = icmp eq i32 %conv78, 45
  br i1 %cmp79, label %while.body.81, label %while.end.82

while.body.81:                                    ; preds = %while.cond.74
  br label %while.cond.74

while.end.82:                                     ; preds = %while.cond.74
  %59 = load i32, i32* %k, align 4
  %dec83 = add nsw i32 %59, -1
  store i32 %dec83, i32* %k, align 4
  %60 = load i32, i32* %k, align 4
  %61 = load i32, i32* %len, align 4
  %sub84 = sub nsw i32 %61, 2
  %cmp85 = icmp sgt i32 %60, %sub84
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %while.end.82
  br label %for.end

if.end.88:                                        ; preds = %while.end.82
  br label %for.inc

if.end.89:                                        ; preds = %if.end.64
  br label %for.inc

for.inc:                                          ; preds = %if.end.89, %if.end.88, %if.end.63, %if.then.29
  %62 = load i32, i32* %k, align 4
  %inc90 = add nsw i32 %62, 1
  store i32 %inc90, i32* %k, align 4
  br label %for.cond.15

for.end:                                          ; preds = %if.then.87, %if.then.62, %for.cond.15
  %63 = load i64, i64* %tmpscore, align 8
  %conv91 = sitofp i64 %63 to double
  %64 = load double, double* %efficient, align 8
  %mul92 = fmul double %conv91, %64
  %65 = load double, double* %score, align 8
  %add93 = fadd double %65, %mul92
  store double %add93, double* %score, align 8
  br label %for.inc.94

for.inc.94:                                       ; preds = %for.end
  %66 = load i32, i32* %j, align 4
  %inc95 = add nsw i32 %66, 1
  store i32 %inc95, i32* %j, align 4
  br label %for.cond.2

for.end.96:                                       ; preds = %for.cond.2
  br label %for.inc.97

for.inc.97:                                       ; preds = %for.end.96
  %67 = load i32, i32* %i, align 4
  %inc98 = add nsw i32 %67, 1
  store i32 %inc98, i32* %i, align 4
  br label %for.cond

for.end.99:                                       ; preds = %for.cond
  %68 = load double, double* %c, align 8
  %69 = load double, double* %score, align 8
  %div = fdiv double %69, %68
  store double %div, double* %score, align 8
  %70 = load double, double* %score, align 8
  ret double %70
}

; Function Attrs: nounwind uwtable
define void @upg2(i32 %nseq, double** %eff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmplen = alloca [50000 x double], align 16
  %minscore = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  %0 = load i8**, i8*** @upg2.pair, align 8
  %tobool = icmp ne i8** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @njob, align 4
  %2 = load i32, i32* @njob, align 4
  %call = call i8** @AllocateCharMtx(i32 %1, i32 %2)
  store i8** %call, i8*** @upg2.pair, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.14, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %nseq.addr, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %for.body.3, label %for.end.16

for.body.3:                                       ; preds = %for.cond.1
  store i32 0, i32* %j, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.11, %for.body.3
  %9 = load i32, i32* %j, align 4
  %10 = load i32, i32* %nseq.addr, align 4
  %cmp5 = icmp slt i32 %9, %10
  br i1 %cmp5, label %for.body.6, label %for.end.13

for.body.6:                                       ; preds = %for.cond.4
  %11 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %11 to i64
  %12 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i64 %idxprom8
  %14 = load i8*, i8** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %14, i64 %idxprom7
  store i8 0, i8* %arrayidx10, align 1
  br label %for.inc.11

for.inc.11:                                       ; preds = %for.body.6
  %15 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %15, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond.4

for.end.13:                                       ; preds = %for.cond.4
  br label %for.inc.14

for.inc.14:                                       ; preds = %for.end.13
  %16 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %16, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond.1

for.end.16:                                       ; preds = %for.cond.1
  store i32 0, i32* %i, align 4
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.24, %for.end.16
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* %nseq.addr, align 4
  %cmp18 = icmp slt i32 %17, %18
  br i1 %cmp18, label %for.body.19, label %for.end.26

for.body.19:                                      ; preds = %for.cond.17
  %19 = load i32, i32* %i, align 4
  %idxprom20 = sext i32 %19 to i64
  %20 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %20 to i64
  %21 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx22 = getelementptr inbounds i8*, i8** %21, i64 %idxprom21
  %22 = load i8*, i8** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %22, i64 %idxprom20
  store i8 1, i8* %arrayidx23, align 1
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.body.19
  %23 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %23, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond.17

for.end.26:                                       ; preds = %for.cond.17
  store i32 0, i32* %k, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.240, %for.end.26
  %24 = load i32, i32* %k, align 4
  %25 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %25, 1
  %cmp28 = icmp slt i32 %24, %sub
  br i1 %cmp28, label %for.body.29, label %for.end.242

for.body.29:                                      ; preds = %for.cond.27
  store float 9.999000e+03, float* %minscore, align 4
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.53, %for.body.29
  %26 = load i32, i32* %i, align 4
  %27 = load i32, i32* %nseq.addr, align 4
  %sub31 = sub nsw i32 %27, 1
  %cmp32 = icmp slt i32 %26, %sub31
  br i1 %cmp32, label %for.body.33, label %for.end.55

for.body.33:                                      ; preds = %for.cond.30
  %28 = load i32, i32* %i, align 4
  %add = add nsw i32 %28, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.34

for.cond.34:                                      ; preds = %for.inc.50, %for.body.33
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %nseq.addr, align 4
  %cmp35 = icmp slt i32 %29, %30
  br i1 %cmp35, label %for.body.36, label %for.end.52

for.body.36:                                      ; preds = %for.cond.34
  %31 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %31 to i64
  %32 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %32 to i64
  %33 = load double**, double*** %eff.addr, align 8
  %arrayidx39 = getelementptr inbounds double*, double** %33, i64 %idxprom38
  %34 = load double*, double** %arrayidx39, align 8
  %arrayidx40 = getelementptr inbounds double, double* %34, i64 %idxprom37
  %35 = load double, double* %arrayidx40, align 8
  %36 = load float, float* %minscore, align 4
  %conv = fpext float %36 to double
  %cmp41 = fcmp olt double %35, %conv
  br i1 %cmp41, label %if.then.43, label %if.end.49

if.then.43:                                       ; preds = %for.body.36
  %37 = load i32, i32* %j, align 4
  %idxprom44 = sext i32 %37 to i64
  %38 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %38 to i64
  %39 = load double**, double*** %eff.addr, align 8
  %arrayidx46 = getelementptr inbounds double*, double** %39, i64 %idxprom45
  %40 = load double*, double** %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds double, double* %40, i64 %idxprom44
  %41 = load double, double* %arrayidx47, align 8
  %conv48 = fptrunc double %41 to float
  store float %conv48, float* %minscore, align 4
  %42 = load i32, i32* %i, align 4
  store i32 %42, i32* %im, align 4
  %43 = load i32, i32* %j, align 4
  store i32 %43, i32* %jm, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.43, %for.body.36
  br label %for.inc.50

for.inc.50:                                       ; preds = %if.end.49
  %44 = load i32, i32* %j, align 4
  %inc51 = add nsw i32 %44, 1
  store i32 %inc51, i32* %j, align 4
  br label %for.cond.34

for.end.52:                                       ; preds = %for.cond.34
  br label %for.inc.53

for.inc.53:                                       ; preds = %for.end.52
  %45 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %45, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond.30

for.end.55:                                       ; preds = %for.cond.30
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.75, %for.end.55
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %nseq.addr, align 4
  %cmp57 = icmp slt i32 %46, %47
  br i1 %cmp57, label %for.body.59, label %for.end.77

for.body.59:                                      ; preds = %for.cond.56
  %48 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %48 to i64
  %49 = load i32, i32* %im, align 4
  %idxprom61 = sext i32 %49 to i64
  %50 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx62 = getelementptr inbounds i8*, i8** %50, i64 %idxprom61
  %51 = load i8*, i8** %arrayidx62, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %51, i64 %idxprom60
  %52 = load i8, i8* %arrayidx63, align 1
  %conv64 = sext i8 %52 to i32
  %cmp65 = icmp sgt i32 %conv64, 0
  br i1 %cmp65, label %if.then.67, label %if.end.74

if.then.67:                                       ; preds = %for.body.59
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %count, align 4
  %idxprom68 = sext i32 %54 to i64
  %55 = load i32, i32* %k, align 4
  %idxprom69 = sext i32 %55 to i64
  %56 = load i32***, i32**** %topol.addr, align 8
  %arrayidx70 = getelementptr inbounds i32**, i32*** %56, i64 %idxprom69
  %57 = load i32**, i32*** %arrayidx70, align 8
  %arrayidx71 = getelementptr inbounds i32*, i32** %57, i64 0
  %58 = load i32*, i32** %arrayidx71, align 8
  %arrayidx72 = getelementptr inbounds i32, i32* %58, i64 %idxprom68
  store i32 %53, i32* %arrayidx72, align 4
  %59 = load i32, i32* %count, align 4
  %inc73 = add nsw i32 %59, 1
  store i32 %inc73, i32* %count, align 4
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.67, %for.body.59
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %60 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %60, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond.56

for.end.77:                                       ; preds = %for.cond.56
  %61 = load i32, i32* %count, align 4
  %idxprom78 = sext i32 %61 to i64
  %62 = load i32, i32* %k, align 4
  %idxprom79 = sext i32 %62 to i64
  %63 = load i32***, i32**** %topol.addr, align 8
  %arrayidx80 = getelementptr inbounds i32**, i32*** %63, i64 %idxprom79
  %64 = load i32**, i32*** %arrayidx80, align 8
  %arrayidx81 = getelementptr inbounds i32*, i32** %64, i64 0
  %65 = load i32*, i32** %arrayidx81, align 8
  %arrayidx82 = getelementptr inbounds i32, i32* %65, i64 %idxprom78
  store i32 -1, i32* %arrayidx82, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond.83

for.cond.83:                                      ; preds = %for.inc.102, %for.end.77
  %66 = load i32, i32* %i, align 4
  %67 = load i32, i32* %nseq.addr, align 4
  %cmp84 = icmp slt i32 %66, %67
  br i1 %cmp84, label %for.body.86, label %for.end.104

for.body.86:                                      ; preds = %for.cond.83
  %68 = load i32, i32* %i, align 4
  %idxprom87 = sext i32 %68 to i64
  %69 = load i32, i32* %jm, align 4
  %idxprom88 = sext i32 %69 to i64
  %70 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx89 = getelementptr inbounds i8*, i8** %70, i64 %idxprom88
  %71 = load i8*, i8** %arrayidx89, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %71, i64 %idxprom87
  %72 = load i8, i8* %arrayidx90, align 1
  %conv91 = sext i8 %72 to i32
  %cmp92 = icmp sgt i32 %conv91, 0
  br i1 %cmp92, label %if.then.94, label %if.end.101

if.then.94:                                       ; preds = %for.body.86
  %73 = load i32, i32* %i, align 4
  %74 = load i32, i32* %count, align 4
  %idxprom95 = sext i32 %74 to i64
  %75 = load i32, i32* %k, align 4
  %idxprom96 = sext i32 %75 to i64
  %76 = load i32***, i32**** %topol.addr, align 8
  %arrayidx97 = getelementptr inbounds i32**, i32*** %76, i64 %idxprom96
  %77 = load i32**, i32*** %arrayidx97, align 8
  %arrayidx98 = getelementptr inbounds i32*, i32** %77, i64 1
  %78 = load i32*, i32** %arrayidx98, align 8
  %arrayidx99 = getelementptr inbounds i32, i32* %78, i64 %idxprom95
  store i32 %73, i32* %arrayidx99, align 4
  %79 = load i32, i32* %count, align 4
  %inc100 = add nsw i32 %79, 1
  store i32 %inc100, i32* %count, align 4
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.94, %for.body.86
  br label %for.inc.102

for.inc.102:                                      ; preds = %if.end.101
  %80 = load i32, i32* %i, align 4
  %inc103 = add nsw i32 %80, 1
  store i32 %inc103, i32* %i, align 4
  br label %for.cond.83

for.end.104:                                      ; preds = %for.cond.83
  %81 = load i32, i32* %count, align 4
  %idxprom105 = sext i32 %81 to i64
  %82 = load i32, i32* %k, align 4
  %idxprom106 = sext i32 %82 to i64
  %83 = load i32***, i32**** %topol.addr, align 8
  %arrayidx107 = getelementptr inbounds i32**, i32*** %83, i64 %idxprom106
  %84 = load i32**, i32*** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds i32*, i32** %84, i64 1
  %85 = load i32*, i32** %arrayidx108, align 8
  %arrayidx109 = getelementptr inbounds i32, i32* %85, i64 %idxprom105
  store i32 -1, i32* %arrayidx109, align 4
  %86 = load float, float* %minscore, align 4
  %conv110 = fpext float %86 to double
  %div = fdiv double %conv110, 2.000000e+00
  %87 = load i32, i32* %im, align 4
  %idxprom111 = sext i32 %87 to i64
  %arrayidx112 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom111
  %88 = load double, double* %arrayidx112, align 8
  %sub113 = fsub double %div, %88
  %89 = load i32, i32* %k, align 4
  %idxprom114 = sext i32 %89 to i64
  %90 = load double**, double*** %len.addr, align 8
  %arrayidx115 = getelementptr inbounds double*, double** %90, i64 %idxprom114
  %91 = load double*, double** %arrayidx115, align 8
  %arrayidx116 = getelementptr inbounds double, double* %91, i64 0
  store double %sub113, double* %arrayidx116, align 8
  %92 = load float, float* %minscore, align 4
  %conv117 = fpext float %92 to double
  %div118 = fdiv double %conv117, 2.000000e+00
  %93 = load i32, i32* %jm, align 4
  %idxprom119 = sext i32 %93 to i64
  %arrayidx120 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom119
  %94 = load double, double* %arrayidx120, align 8
  %sub121 = fsub double %div118, %94
  %95 = load i32, i32* %k, align 4
  %idxprom122 = sext i32 %95 to i64
  %96 = load double**, double*** %len.addr, align 8
  %arrayidx123 = getelementptr inbounds double*, double** %96, i64 %idxprom122
  %97 = load double*, double** %arrayidx123, align 8
  %arrayidx124 = getelementptr inbounds double, double* %97, i64 1
  store double %sub121, double* %arrayidx124, align 8
  %98 = load float, float* %minscore, align 4
  %conv125 = fpext float %98 to double
  %div126 = fdiv double %conv125, 2.000000e+00
  %99 = load i32, i32* %im, align 4
  %idxprom127 = sext i32 %99 to i64
  %arrayidx128 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom127
  store double %div126, double* %arrayidx128, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.129

for.cond.129:                                     ; preds = %for.inc.147, %for.end.104
  %100 = load i32, i32* %i, align 4
  %101 = load i32, i32* %nseq.addr, align 4
  %cmp130 = icmp slt i32 %100, %101
  br i1 %cmp130, label %for.body.132, label %for.end.149

for.body.132:                                     ; preds = %for.cond.129
  %102 = load i32, i32* %i, align 4
  %idxprom133 = sext i32 %102 to i64
  %103 = load i32, i32* %jm, align 4
  %idxprom134 = sext i32 %103 to i64
  %104 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx135 = getelementptr inbounds i8*, i8** %104, i64 %idxprom134
  %105 = load i8*, i8** %arrayidx135, align 8
  %arrayidx136 = getelementptr inbounds i8, i8* %105, i64 %idxprom133
  %106 = load i8, i8* %arrayidx136, align 1
  %conv137 = sext i8 %106 to i32
  %cmp138 = icmp sgt i32 %conv137, 0
  %conv139 = zext i1 %cmp138 to i32
  %107 = load i32, i32* %i, align 4
  %idxprom140 = sext i32 %107 to i64
  %108 = load i32, i32* %im, align 4
  %idxprom141 = sext i32 %108 to i64
  %109 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx142 = getelementptr inbounds i8*, i8** %109, i64 %idxprom141
  %110 = load i8*, i8** %arrayidx142, align 8
  %arrayidx143 = getelementptr inbounds i8, i8* %110, i64 %idxprom140
  %111 = load i8, i8* %arrayidx143, align 1
  %conv144 = sext i8 %111 to i32
  %add145 = add nsw i32 %conv144, %conv139
  %conv146 = trunc i32 %add145 to i8
  store i8 %conv146, i8* %arrayidx143, align 1
  br label %for.inc.147

for.inc.147:                                      ; preds = %for.body.132
  %112 = load i32, i32* %i, align 4
  %inc148 = add nsw i32 %112, 1
  store i32 %inc148, i32* %i, align 4
  br label %for.cond.129

for.end.149:                                      ; preds = %for.cond.129
  store i32 0, i32* %i, align 4
  br label %for.cond.150

for.cond.150:                                     ; preds = %for.inc.158, %for.end.149
  %113 = load i32, i32* %i, align 4
  %114 = load i32, i32* %nseq.addr, align 4
  %cmp151 = icmp slt i32 %113, %114
  br i1 %cmp151, label %for.body.153, label %for.end.160

for.body.153:                                     ; preds = %for.cond.150
  %115 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %115 to i64
  %116 = load i32, i32* %jm, align 4
  %idxprom155 = sext i32 %116 to i64
  %117 = load i8**, i8*** @upg2.pair, align 8
  %arrayidx156 = getelementptr inbounds i8*, i8** %117, i64 %idxprom155
  %118 = load i8*, i8** %arrayidx156, align 8
  %arrayidx157 = getelementptr inbounds i8, i8* %118, i64 %idxprom154
  store i8 0, i8* %arrayidx157, align 1
  br label %for.inc.158

for.inc.158:                                      ; preds = %for.body.153
  %119 = load i32, i32* %i, align 4
  %inc159 = add nsw i32 %119, 1
  store i32 %inc159, i32* %i, align 4
  br label %for.cond.150

for.end.160:                                      ; preds = %for.cond.150
  store i32 0, i32* %i, align 4
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc.237, %for.end.160
  %120 = load i32, i32* %i, align 4
  %121 = load i32, i32* %nseq.addr, align 4
  %cmp162 = icmp slt i32 %120, %121
  br i1 %cmp162, label %for.body.164, label %for.end.239

for.body.164:                                     ; preds = %for.cond.161
  %122 = load i32, i32* %i, align 4
  %123 = load i32, i32* %im, align 4
  %cmp165 = icmp ne i32 %122, %123
  br i1 %cmp165, label %land.lhs.true, label %if.end.232

land.lhs.true:                                    ; preds = %for.body.164
  %124 = load i32, i32* %i, align 4
  %125 = load i32, i32* %jm, align 4
  %cmp167 = icmp ne i32 %124, %125
  br i1 %cmp167, label %if.then.169, label %if.end.232

if.then.169:                                      ; preds = %land.lhs.true
  %126 = load i32, i32* %i, align 4
  %127 = load i32, i32* %im, align 4
  %cmp170 = icmp sgt i32 %126, %127
  br i1 %cmp170, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.169
  %128 = load i32, i32* %i, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.169
  %129 = load i32, i32* %im, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %128, %cond.true ], [ %129, %cond.false ]
  %idxprom172 = sext i32 %cond to i64
  %130 = load i32, i32* %i, align 4
  %131 = load i32, i32* %im, align 4
  %cmp173 = icmp slt i32 %130, %131
  br i1 %cmp173, label %cond.true.175, label %cond.false.176

cond.true.175:                                    ; preds = %cond.end
  %132 = load i32, i32* %i, align 4
  br label %cond.end.177

cond.false.176:                                   ; preds = %cond.end
  %133 = load i32, i32* %im, align 4
  br label %cond.end.177

cond.end.177:                                     ; preds = %cond.false.176, %cond.true.175
  %cond178 = phi i32 [ %132, %cond.true.175 ], [ %133, %cond.false.176 ]
  %idxprom179 = sext i32 %cond178 to i64
  %134 = load double**, double*** %eff.addr, align 8
  %arrayidx180 = getelementptr inbounds double*, double** %134, i64 %idxprom179
  %135 = load double*, double** %arrayidx180, align 8
  %arrayidx181 = getelementptr inbounds double, double* %135, i64 %idxprom172
  %136 = load double, double* %arrayidx181, align 8
  %137 = load i32, i32* %i, align 4
  %138 = load i32, i32* %jm, align 4
  %cmp182 = icmp sgt i32 %137, %138
  br i1 %cmp182, label %cond.true.184, label %cond.false.185

cond.true.184:                                    ; preds = %cond.end.177
  %139 = load i32, i32* %i, align 4
  br label %cond.end.186

cond.false.185:                                   ; preds = %cond.end.177
  %140 = load i32, i32* %jm, align 4
  br label %cond.end.186

cond.end.186:                                     ; preds = %cond.false.185, %cond.true.184
  %cond187 = phi i32 [ %139, %cond.true.184 ], [ %140, %cond.false.185 ]
  %idxprom188 = sext i32 %cond187 to i64
  %141 = load i32, i32* %i, align 4
  %142 = load i32, i32* %jm, align 4
  %cmp189 = icmp slt i32 %141, %142
  br i1 %cmp189, label %cond.true.191, label %cond.false.192

cond.true.191:                                    ; preds = %cond.end.186
  %143 = load i32, i32* %i, align 4
  br label %cond.end.193

cond.false.192:                                   ; preds = %cond.end.186
  %144 = load i32, i32* %jm, align 4
  br label %cond.end.193

cond.end.193:                                     ; preds = %cond.false.192, %cond.true.191
  %cond194 = phi i32 [ %143, %cond.true.191 ], [ %144, %cond.false.192 ]
  %idxprom195 = sext i32 %cond194 to i64
  %145 = load double**, double*** %eff.addr, align 8
  %arrayidx196 = getelementptr inbounds double*, double** %145, i64 %idxprom195
  %146 = load double*, double** %arrayidx196, align 8
  %arrayidx197 = getelementptr inbounds double, double* %146, i64 %idxprom188
  %147 = load double, double* %arrayidx197, align 8
  %add198 = fadd double %136, %147
  %div199 = fdiv double %add198, 2.000000e+00
  %148 = load i32, i32* %i, align 4
  %149 = load i32, i32* %im, align 4
  %cmp200 = icmp sgt i32 %148, %149
  br i1 %cmp200, label %cond.true.202, label %cond.false.203

cond.true.202:                                    ; preds = %cond.end.193
  %150 = load i32, i32* %i, align 4
  br label %cond.end.204

cond.false.203:                                   ; preds = %cond.end.193
  %151 = load i32, i32* %im, align 4
  br label %cond.end.204

cond.end.204:                                     ; preds = %cond.false.203, %cond.true.202
  %cond205 = phi i32 [ %150, %cond.true.202 ], [ %151, %cond.false.203 ]
  %idxprom206 = sext i32 %cond205 to i64
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %im, align 4
  %cmp207 = icmp slt i32 %152, %153
  br i1 %cmp207, label %cond.true.209, label %cond.false.210

cond.true.209:                                    ; preds = %cond.end.204
  %154 = load i32, i32* %i, align 4
  br label %cond.end.211

cond.false.210:                                   ; preds = %cond.end.204
  %155 = load i32, i32* %im, align 4
  br label %cond.end.211

cond.end.211:                                     ; preds = %cond.false.210, %cond.true.209
  %cond212 = phi i32 [ %154, %cond.true.209 ], [ %155, %cond.false.210 ]
  %idxprom213 = sext i32 %cond212 to i64
  %156 = load double**, double*** %eff.addr, align 8
  %arrayidx214 = getelementptr inbounds double*, double** %156, i64 %idxprom213
  %157 = load double*, double** %arrayidx214, align 8
  %arrayidx215 = getelementptr inbounds double, double* %157, i64 %idxprom206
  store double %div199, double* %arrayidx215, align 8
  %158 = load i32, i32* %i, align 4
  %159 = load i32, i32* %jm, align 4
  %cmp216 = icmp sgt i32 %158, %159
  br i1 %cmp216, label %cond.true.218, label %cond.false.219

cond.true.218:                                    ; preds = %cond.end.211
  %160 = load i32, i32* %i, align 4
  br label %cond.end.220

cond.false.219:                                   ; preds = %cond.end.211
  %161 = load i32, i32* %jm, align 4
  br label %cond.end.220

cond.end.220:                                     ; preds = %cond.false.219, %cond.true.218
  %cond221 = phi i32 [ %160, %cond.true.218 ], [ %161, %cond.false.219 ]
  %idxprom222 = sext i32 %cond221 to i64
  %162 = load i32, i32* %i, align 4
  %163 = load i32, i32* %jm, align 4
  %cmp223 = icmp slt i32 %162, %163
  br i1 %cmp223, label %cond.true.225, label %cond.false.226

cond.true.225:                                    ; preds = %cond.end.220
  %164 = load i32, i32* %i, align 4
  br label %cond.end.227

cond.false.226:                                   ; preds = %cond.end.220
  %165 = load i32, i32* %jm, align 4
  br label %cond.end.227

cond.end.227:                                     ; preds = %cond.false.226, %cond.true.225
  %cond228 = phi i32 [ %164, %cond.true.225 ], [ %165, %cond.false.226 ]
  %idxprom229 = sext i32 %cond228 to i64
  %166 = load double**, double*** %eff.addr, align 8
  %arrayidx230 = getelementptr inbounds double*, double** %166, i64 %idxprom229
  %167 = load double*, double** %arrayidx230, align 8
  %arrayidx231 = getelementptr inbounds double, double* %167, i64 %idxprom222
  store double 9.999000e+03, double* %arrayidx231, align 8
  br label %if.end.232

if.end.232:                                       ; preds = %cond.end.227, %land.lhs.true, %for.body.164
  %168 = load i32, i32* %jm, align 4
  %idxprom233 = sext i32 %168 to i64
  %169 = load i32, i32* %im, align 4
  %idxprom234 = sext i32 %169 to i64
  %170 = load double**, double*** %eff.addr, align 8
  %arrayidx235 = getelementptr inbounds double*, double** %170, i64 %idxprom234
  %171 = load double*, double** %arrayidx235, align 8
  %arrayidx236 = getelementptr inbounds double, double* %171, i64 %idxprom233
  store double 9.999000e+03, double* %arrayidx236, align 8
  br label %for.inc.237

for.inc.237:                                      ; preds = %if.end.232
  %172 = load i32, i32* %i, align 4
  %inc238 = add nsw i32 %172, 1
  store i32 %inc238, i32* %i, align 4
  br label %for.cond.161

for.end.239:                                      ; preds = %for.cond.161
  br label %for.inc.240

for.inc.240:                                      ; preds = %for.end.239
  %173 = load i32, i32* %k, align 4
  %inc241 = add nsw i32 %173, 1
  store i32 %inc241, i32* %k, align 4
  br label %for.cond.27

for.end.242:                                      ; preds = %for.cond.27
  ret void
}

declare i8** @AllocateCharMtx(i32, i32) #2

; Function Attrs: nounwind uwtable
define void @loadtree(i32 %nseq, i32*** %topol, float** %len, i8** %name, i32* %nlen) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca float**, align 8
  %name.addr = alloca i8**, align 8
  %nlen.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %acjmnext = alloca %struct._Bchain*, align 8
  %acjmprev = alloca %struct._Bchain*, align 8
  %prevnode = alloca i32, align 4
  %acpti = alloca %struct._Bchain*, align 8
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %nmemim = alloca i32, align 4
  %nmemjm = alloca i32, align 4
  %minscore = alloca float, align 4
  %nearest = alloca i32*, align 8
  %mindisfrom = alloca float*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %node = alloca [2 x i32], align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store float** %len, float*** %len.addr, align 8
  store i8** %name, i8*** %name.addr, align 8
  store i32* %nlen, i32** %nlen.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store i32* null, i32** %nearest, align 8
  store float* null, float** %mindisfrom, align 8
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** @loadtree.hist, align 8
  %tobool2 = icmp ne i32* %2, null
  br i1 %tobool2, label %if.end.14, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %3 = load i32, i32* @njob, align 4
  %call4 = call i32* @AllocateIntVec(i32 %3)
  store i32* %call4, i32** @loadtree.hist, align 8
  %4 = load i32, i32* @njob, align 4
  %conv = sext i32 %4 to i64
  %mul = mul i64 %conv, 24
  %call5 = call noalias i8* @malloc(i64 %mul) #8
  %5 = bitcast i8* %call5 to %struct._Bchain*
  store %struct._Bchain* %5, %struct._Bchain** @loadtree.ac, align 8
  %6 = load i32, i32* @njob, align 4
  %call6 = call i32* @AllocateIntVec(i32 %6)
  store i32* %call6, i32** @loadtree.nmemar, align 8
  %7 = load i32, i32* @njob, align 4
  %call7 = call float* @AllocateFloatVec(i32 %7)
  store float* %call7, float** %mindisfrom, align 8
  %8 = load i32, i32* @njob, align 4
  %call8 = call i32* @AllocateIntVec(i32 %8)
  store i32* %call8, i32** %nearest, align 8
  %9 = load i32, i32* @njob, align 4
  %mul9 = mul nsw i32 %9, 50
  %call10 = call i8* @AllocateCharVec(i32 %mul9)
  store i8* %call10, i8** @loadtree.treetmp, align 8
  %call11 = call i8* @AllocateCharVec(i32 30)
  store i8* %call11, i8** @loadtree.nametmp, align 8
  %10 = load i32, i32* @njob, align 4
  %11 = load i32, i32* @njob, align 4
  %mul12 = mul nsw i32 %11, 50
  %call13 = call i8** @AllocateCharMtx(i32 %10, i32 %mul12)
  store i8** %call13, i8*** @loadtree.tree, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.3, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.51, %if.end.14
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %12, %13
  br i1 %cmp, label %for.body, label %for.end.53

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4
  %cmp17 = icmp slt i32 %14, 30
  br i1 %cmp17, label %for.body.19, label %for.end

for.body.19:                                      ; preds = %for.cond.16
  %15 = load i32, i32* %j, align 4
  %idxprom = sext i32 %15 to i64
  %16 = load i8*, i8** @loadtree.nametmp, align 8
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body.19
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.16

for.end:                                          ; preds = %for.cond.16
  store i32 0, i32* %j, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.44, %for.end
  %18 = load i32, i32* %j, align 4
  %cmp21 = icmp slt i32 %18, 30
  br i1 %cmp21, label %for.body.23, label %for.end.46

for.body.23:                                      ; preds = %for.cond.20
  %19 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %19 to i64
  %20 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %20 to i64
  %21 = load i8**, i8*** %name.addr, align 8
  %arrayidx26 = getelementptr inbounds i8*, i8** %21, i64 %idxprom25
  %22 = load i8*, i8** %arrayidx26, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %22, i64 %idxprom24
  %23 = load i8, i8* %arrayidx27, align 1
  %conv28 = sext i8 %23 to i32
  %idxprom29 = sext i32 %conv28 to i64
  %call30 = call i16** @__ctype_b_loc() #9
  %24 = load i16*, i16** %call30, align 8
  %arrayidx31 = getelementptr inbounds i16, i16* %24, i64 %idxprom29
  %25 = load i16, i16* %arrayidx31, align 2
  %conv32 = zext i16 %25 to i32
  %and = and i32 %conv32, 8
  %tobool33 = icmp ne i32 %and, 0
  br i1 %tobool33, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %for.body.23
  %26 = load i32, i32* %j, align 4
  %idxprom35 = sext i32 %26 to i64
  %27 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %27 to i64
  %28 = load i8**, i8*** %name.addr, align 8
  %arrayidx37 = getelementptr inbounds i8*, i8** %28, i64 %idxprom36
  %29 = load i8*, i8** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %29, i64 %idxprom35
  %30 = load i8, i8* %arrayidx38, align 1
  %31 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %31 to i64
  %32 = load i8*, i8** @loadtree.nametmp, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %32, i64 %idxprom39
  store i8 %30, i8* %arrayidx40, align 1
  br label %if.end.43

if.else:                                          ; preds = %for.body.23
  %33 = load i32, i32* %j, align 4
  %idxprom41 = sext i32 %33 to i64
  %34 = load i8*, i8** @loadtree.nametmp, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %34, i64 %idxprom41
  store i8 95, i8* %arrayidx42, align 1
  br label %if.end.43

if.end.43:                                        ; preds = %if.else, %if.then.34
  br label %for.inc.44

for.inc.44:                                       ; preds = %if.end.43
  %35 = load i32, i32* %j, align 4
  %inc45 = add nsw i32 %35, 1
  store i32 %inc45, i32* %j, align 4
  br label %for.cond.20

for.end.46:                                       ; preds = %for.cond.20
  %36 = load i8*, i8** @loadtree.nametmp, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %36, i64 30
  store i8 0, i8* %arrayidx47, align 1
  %37 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %37 to i64
  %38 = load i8**, i8*** @loadtree.tree, align 8
  %arrayidx49 = getelementptr inbounds i8*, i8** %38, i64 %idxprom48
  %39 = load i8*, i8** %arrayidx49, align 8
  %40 = load i32, i32* %i, align 4
  %add = add nsw i32 %40, 1
  %41 = load i8*, i8** @loadtree.nametmp, align 8
  %add.ptr = getelementptr inbounds i8, i8* %41, i64 1
  %call50 = call i32 (i8*, i8*, ...) @sprintf(i8* %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i32 %add, i8* %add.ptr) #8
  br label %for.inc.51

for.inc.51:                                       ; preds = %for.end.46
  %42 = load i32, i32* %i, align 4
  %inc52 = add nsw i32 %42, 1
  store i32 %inc52, i32* %i, align 4
  br label %for.cond

for.end.53:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.54

for.cond.54:                                      ; preds = %for.inc.69, %for.end.53
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %nseq.addr, align 4
  %cmp55 = icmp slt i32 %43, %44
  br i1 %cmp55, label %for.body.57, label %for.end.71

for.body.57:                                      ; preds = %for.cond.54
  %45 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %46 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %46 to i64
  %add.ptr58 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %45, i64 %idx.ext
  %add.ptr59 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr58, i64 1
  %47 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %47 to i64
  %48 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %arrayidx61 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %48, i64 %idxprom60
  %next = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx61, i32 0, i32 0
  store %struct._Bchain* %add.ptr59, %struct._Bchain** %next, align 8
  %49 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %50 = load i32, i32* %i, align 4
  %idx.ext62 = sext i32 %50 to i64
  %add.ptr63 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %49, i64 %idx.ext62
  %add.ptr64 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr63, i64 -1
  %51 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %51 to i64
  %52 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %arrayidx66 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %52, i64 %idxprom65
  %prev = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx66, i32 0, i32 1
  store %struct._Bchain* %add.ptr64, %struct._Bchain** %prev, align 8
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %54 to i64
  %55 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %arrayidx68 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %55, i64 %idxprom67
  %pos = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx68, i32 0, i32 2
  store i32 %53, i32* %pos, align 4
  br label %for.inc.69

for.inc.69:                                       ; preds = %for.body.57
  %56 = load i32, i32* %i, align 4
  %inc70 = add nsw i32 %56, 1
  store i32 %inc70, i32* %i, align 4
  br label %for.cond.54

for.end.71:                                       ; preds = %for.cond.54
  %57 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %57, 1
  %idxprom72 = sext i32 %sub to i64
  %58 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %arrayidx73 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %58, i64 %idxprom72
  %next74 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx73, i32 0, i32 0
  store %struct._Bchain* null, %struct._Bchain** %next74, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.75

for.cond.75:                                      ; preds = %for.inc.83, %for.end.71
  %59 = load i32, i32* %i, align 4
  %60 = load i32, i32* %nseq.addr, align 4
  %cmp76 = icmp slt i32 %59, %60
  br i1 %cmp76, label %for.body.78, label %for.end.85

for.body.78:                                      ; preds = %for.cond.75
  %61 = load i32, i32* %i, align 4
  %idxprom79 = sext i32 %61 to i64
  %62 = load i32*, i32** @loadtree.hist, align 8
  %arrayidx80 = getelementptr inbounds i32, i32* %62, i64 %idxprom79
  store i32 -1, i32* %arrayidx80, align 4
  %63 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %63 to i64
  %64 = load i32*, i32** @loadtree.nmemar, align 8
  %arrayidx82 = getelementptr inbounds i32, i32* %64, i64 %idxprom81
  store i32 1, i32* %arrayidx82, align 4
  br label %for.inc.83

for.inc.83:                                       ; preds = %for.body.78
  %65 = load i32, i32* %i, align 4
  %inc84 = add nsw i32 %65, 1
  store i32 %inc84, i32* %i, align 4
  br label %for.cond.75

for.end.85:                                       ; preds = %for.cond.75
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.87

for.cond.87:                                      ; preds = %for.inc.299, %for.end.85
  %67 = load i32, i32* %k, align 4
  %68 = load i32, i32* %nseq.addr, align 4
  %sub88 = sub nsw i32 %68, 1
  %cmp89 = icmp slt i32 %67, %sub88
  br i1 %cmp89, label %for.body.91, label %for.end.301

for.body.91:                                      ; preds = %for.cond.87
  %69 = load i32, i32* %k, align 4
  %rem = srem i32 %69, 10
  %cmp92 = icmp eq i32 %rem, 0
  br i1 %cmp92, label %if.then.94, label %if.end.96

if.then.94:                                       ; preds = %for.body.91
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %71 = load i32, i32* %k, align 4
  %72 = load i32, i32* %nseq.addr, align 4
  %call95 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i32 0, i32 0), i32 %71, i32 %72)
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.94, %for.body.91
  store float 0.000000e+00, float* %minscore, align 4
  %73 = load i32, i32* %k, align 4
  %idxprom97 = sext i32 %73 to i64
  %74 = load float**, float*** %len.addr, align 8
  %arrayidx98 = getelementptr inbounds float*, float** %74, i64 %idxprom97
  %75 = load float*, float** %arrayidx98, align 8
  %arrayidx99 = getelementptr inbounds float, float* %75, i64 1
  store float -1.000000e+00, float* %arrayidx99, align 4
  %76 = load i32, i32* %k, align 4
  %idxprom100 = sext i32 %76 to i64
  %77 = load float**, float*** %len.addr, align 8
  %arrayidx101 = getelementptr inbounds float*, float** %77, i64 %idxprom100
  %78 = load float*, float** %arrayidx101, align 8
  %arrayidx102 = getelementptr inbounds float, float* %78, i64 0
  store float -1.000000e+00, float* %arrayidx102, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i32 0
  %79 = load i32, i32* %k, align 4
  %idxprom103 = sext i32 %79 to i64
  %80 = load float**, float*** %len.addr, align 8
  %arrayidx104 = getelementptr inbounds float*, float** %80, i64 %idxprom103
  %81 = load float*, float** %arrayidx104, align 8
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  call void @loadtreeoneline(i32* %arraydecay, float* %81, %struct._IO_FILE* %82)
  %arrayidx105 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 0
  %83 = load i32, i32* %arrayidx105, align 4
  store i32 %83, i32* %im, align 4
  %arrayidx106 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 1
  %84 = load i32, i32* %arrayidx106, align 4
  store i32 %84, i32* %jm, align 4
  %85 = load i32, i32* %k, align 4
  %idxprom107 = sext i32 %85 to i64
  %86 = load float**, float*** %len.addr, align 8
  %arrayidx108 = getelementptr inbounds float*, float** %86, i64 %idxprom107
  %87 = load float*, float** %arrayidx108, align 8
  %arrayidx109 = getelementptr inbounds float, float* %87, i64 0
  %88 = load float, float* %arrayidx109, align 4
  %conv110 = fpext float %88 to double
  %cmp111 = fcmp oeq double %conv110, -1.000000e+00
  br i1 %cmp111, label %if.then.119, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.96
  %89 = load i32, i32* %k, align 4
  %idxprom113 = sext i32 %89 to i64
  %90 = load float**, float*** %len.addr, align 8
  %arrayidx114 = getelementptr inbounds float*, float** %90, i64 %idxprom113
  %91 = load float*, float** %arrayidx114, align 8
  %arrayidx115 = getelementptr inbounds float, float* %91, i64 1
  %92 = load float, float* %arrayidx115, align 4
  %conv116 = fpext float %92 to double
  %cmp117 = fcmp oeq double %conv116, -1.000000e+00
  br i1 %cmp117, label %if.then.119, label %if.end.121

if.then.119:                                      ; preds = %lor.lhs.false, %if.end.96
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.14, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.121:                                       ; preds = %lor.lhs.false
  %94 = load i32, i32* %k, align 4
  %idxprom122 = sext i32 %94 to i64
  %95 = load float**, float*** %len.addr, align 8
  %arrayidx123 = getelementptr inbounds float*, float** %95, i64 %idxprom122
  %96 = load float*, float** %arrayidx123, align 8
  %arrayidx124 = getelementptr inbounds float, float* %96, i64 0
  %97 = load float, float* %arrayidx124, align 4
  %conv125 = fpext float %97 to double
  %cmp126 = fcmp olt double %conv125, 0.000000e+00
  br i1 %cmp126, label %if.then.128, label %if.end.132

if.then.128:                                      ; preds = %if.end.121
  %98 = load i32, i32* %k, align 4
  %idxprom129 = sext i32 %98 to i64
  %99 = load float**, float*** %len.addr, align 8
  %arrayidx130 = getelementptr inbounds float*, float** %99, i64 %idxprom129
  %100 = load float*, float** %arrayidx130, align 8
  %arrayidx131 = getelementptr inbounds float, float* %100, i64 0
  store float 0.000000e+00, float* %arrayidx131, align 4
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.128, %if.end.121
  %101 = load i32, i32* %k, align 4
  %idxprom133 = sext i32 %101 to i64
  %102 = load float**, float*** %len.addr, align 8
  %arrayidx134 = getelementptr inbounds float*, float** %102, i64 %idxprom133
  %103 = load float*, float** %arrayidx134, align 8
  %arrayidx135 = getelementptr inbounds float, float* %103, i64 1
  %104 = load float, float* %arrayidx135, align 4
  %conv136 = fpext float %104 to double
  %cmp137 = fcmp olt double %conv136, 0.000000e+00
  br i1 %cmp137, label %if.then.139, label %if.end.143

if.then.139:                                      ; preds = %if.end.132
  %105 = load i32, i32* %k, align 4
  %idxprom140 = sext i32 %105 to i64
  %106 = load float**, float*** %len.addr, align 8
  %arrayidx141 = getelementptr inbounds float*, float** %106, i64 %idxprom140
  %107 = load float*, float** %arrayidx141, align 8
  %arrayidx142 = getelementptr inbounds float, float* %107, i64 1
  store float 0.000000e+00, float* %arrayidx142, align 4
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.139, %if.end.132
  %108 = load i32, i32* %im, align 4
  %idxprom144 = sext i32 %108 to i64
  %109 = load i32*, i32** @loadtree.hist, align 8
  %arrayidx145 = getelementptr inbounds i32, i32* %109, i64 %idxprom144
  %110 = load i32, i32* %arrayidx145, align 4
  store i32 %110, i32* %prevnode, align 4
  %111 = load i32, i32* %im, align 4
  %idxprom146 = sext i32 %111 to i64
  %112 = load i32*, i32** @loadtree.nmemar, align 8
  %arrayidx147 = getelementptr inbounds i32, i32* %112, i64 %idxprom146
  %113 = load i32, i32* %arrayidx147, align 4
  store i32 %113, i32* %nmemim, align 4
  %114 = load i32, i32* %k, align 4
  %idxprom148 = sext i32 %114 to i64
  %115 = load i32***, i32**** %topol.addr, align 8
  %arrayidx149 = getelementptr inbounds i32**, i32*** %115, i64 %idxprom148
  %116 = load i32**, i32*** %arrayidx149, align 8
  %arrayidx150 = getelementptr inbounds i32*, i32** %116, i64 0
  %117 = load i32*, i32** %arrayidx150, align 8
  %118 = bitcast i32* %117 to i8*
  %119 = load i32, i32* %nmemim, align 4
  %add151 = add nsw i32 %119, 1
  %conv152 = sext i32 %add151 to i64
  %mul153 = mul i64 %conv152, 4
  %call154 = call i8* @realloc(i8* %118, i64 %mul153) #8
  %120 = bitcast i8* %call154 to i32*
  %121 = load i32, i32* %k, align 4
  %idxprom155 = sext i32 %121 to i64
  %122 = load i32***, i32**** %topol.addr, align 8
  %arrayidx156 = getelementptr inbounds i32**, i32*** %122, i64 %idxprom155
  %123 = load i32**, i32*** %arrayidx156, align 8
  %arrayidx157 = getelementptr inbounds i32*, i32** %123, i64 0
  store i32* %120, i32** %arrayidx157, align 8
  store i32* %120, i32** %intpt, align 8
  %124 = load i32, i32* %prevnode, align 4
  %cmp158 = icmp eq i32 %124, -1
  br i1 %cmp158, label %if.then.160, label %if.else.161

if.then.160:                                      ; preds = %if.end.143
  %125 = load i32, i32* %im, align 4
  %126 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %126, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %125, i32* %126, align 4
  %127 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %127, align 4
  br label %if.end.187

if.else.161:                                      ; preds = %if.end.143
  %128 = load i32, i32* %prevnode, align 4
  %idxprom162 = sext i32 %128 to i64
  %129 = load i32***, i32**** %topol.addr, align 8
  %arrayidx163 = getelementptr inbounds i32**, i32*** %129, i64 %idxprom162
  %130 = load i32**, i32*** %arrayidx163, align 8
  %arrayidx164 = getelementptr inbounds i32*, i32** %130, i64 0
  %131 = load i32*, i32** %arrayidx164, align 8
  store i32* %131, i32** %pt1, align 8
  %132 = load i32, i32* %prevnode, align 4
  %idxprom165 = sext i32 %132 to i64
  %133 = load i32***, i32**** %topol.addr, align 8
  %arrayidx166 = getelementptr inbounds i32**, i32*** %133, i64 %idxprom165
  %134 = load i32**, i32*** %arrayidx166, align 8
  %arrayidx167 = getelementptr inbounds i32*, i32** %134, i64 1
  %135 = load i32*, i32** %arrayidx167, align 8
  store i32* %135, i32** %pt2, align 8
  %136 = load i32*, i32** %pt1, align 8
  %137 = load i32, i32* %136, align 4
  %138 = load i32*, i32** %pt2, align 8
  %139 = load i32, i32* %138, align 4
  %cmp168 = icmp sgt i32 %137, %139
  br i1 %cmp168, label %if.then.170, label %if.else.171

if.then.170:                                      ; preds = %if.else.161
  %140 = load i32*, i32** %pt2, align 8
  store i32* %140, i32** %pt11, align 8
  %141 = load i32*, i32** %pt1, align 8
  store i32* %141, i32** %pt22, align 8
  br label %if.end.172

if.else.171:                                      ; preds = %if.else.161
  %142 = load i32*, i32** %pt1, align 8
  store i32* %142, i32** %pt11, align 8
  %143 = load i32*, i32** %pt2, align 8
  store i32* %143, i32** %pt22, align 8
  br label %if.end.172

if.end.172:                                       ; preds = %if.else.171, %if.then.170
  %144 = load i32*, i32** %pt11, align 8
  store i32* %144, i32** %intpt2, align 8
  br label %for.cond.173

for.cond.173:                                     ; preds = %for.body.176, %if.end.172
  %145 = load i32*, i32** %intpt2, align 8
  %146 = load i32, i32* %145, align 4
  %cmp174 = icmp ne i32 %146, -1
  br i1 %cmp174, label %for.body.176, label %for.end.179

for.body.176:                                     ; preds = %for.cond.173
  %147 = load i32*, i32** %intpt2, align 8
  %incdec.ptr177 = getelementptr inbounds i32, i32* %147, i32 1
  store i32* %incdec.ptr177, i32** %intpt2, align 8
  %148 = load i32, i32* %147, align 4
  %149 = load i32*, i32** %intpt, align 8
  %incdec.ptr178 = getelementptr inbounds i32, i32* %149, i32 1
  store i32* %incdec.ptr178, i32** %intpt, align 8
  store i32 %148, i32* %149, align 4
  br label %for.cond.173

for.end.179:                                      ; preds = %for.cond.173
  %150 = load i32*, i32** %pt22, align 8
  store i32* %150, i32** %intpt2, align 8
  br label %for.cond.180

for.cond.180:                                     ; preds = %for.body.183, %for.end.179
  %151 = load i32*, i32** %intpt2, align 8
  %152 = load i32, i32* %151, align 4
  %cmp181 = icmp ne i32 %152, -1
  br i1 %cmp181, label %for.body.183, label %for.end.186

for.body.183:                                     ; preds = %for.cond.180
  %153 = load i32*, i32** %intpt2, align 8
  %incdec.ptr184 = getelementptr inbounds i32, i32* %153, i32 1
  store i32* %incdec.ptr184, i32** %intpt2, align 8
  %154 = load i32, i32* %153, align 4
  %155 = load i32*, i32** %intpt, align 8
  %incdec.ptr185 = getelementptr inbounds i32, i32* %155, i32 1
  store i32* %incdec.ptr185, i32** %intpt, align 8
  store i32 %154, i32* %155, align 4
  br label %for.cond.180

for.end.186:                                      ; preds = %for.cond.180
  %156 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %156, align 4
  br label %if.end.187

if.end.187:                                       ; preds = %for.end.186, %if.then.160
  %157 = load i32, i32* %jm, align 4
  %idxprom188 = sext i32 %157 to i64
  %158 = load i32*, i32** @loadtree.nmemar, align 8
  %arrayidx189 = getelementptr inbounds i32, i32* %158, i64 %idxprom188
  %159 = load i32, i32* %arrayidx189, align 4
  store i32 %159, i32* %nmemjm, align 4
  %160 = load i32, i32* %jm, align 4
  %idxprom190 = sext i32 %160 to i64
  %161 = load i32*, i32** @loadtree.hist, align 8
  %arrayidx191 = getelementptr inbounds i32, i32* %161, i64 %idxprom190
  %162 = load i32, i32* %arrayidx191, align 4
  store i32 %162, i32* %prevnode, align 4
  %163 = load i32, i32* %k, align 4
  %idxprom192 = sext i32 %163 to i64
  %164 = load i32***, i32**** %topol.addr, align 8
  %arrayidx193 = getelementptr inbounds i32**, i32*** %164, i64 %idxprom192
  %165 = load i32**, i32*** %arrayidx193, align 8
  %arrayidx194 = getelementptr inbounds i32*, i32** %165, i64 1
  %166 = load i32*, i32** %arrayidx194, align 8
  %167 = bitcast i32* %166 to i8*
  %168 = load i32, i32* %nmemjm, align 4
  %add195 = add nsw i32 %168, 1
  %conv196 = sext i32 %add195 to i64
  %mul197 = mul i64 %conv196, 4
  %call198 = call i8* @realloc(i8* %167, i64 %mul197) #8
  %169 = bitcast i8* %call198 to i32*
  %170 = load i32, i32* %k, align 4
  %idxprom199 = sext i32 %170 to i64
  %171 = load i32***, i32**** %topol.addr, align 8
  %arrayidx200 = getelementptr inbounds i32**, i32*** %171, i64 %idxprom199
  %172 = load i32**, i32*** %arrayidx200, align 8
  %arrayidx201 = getelementptr inbounds i32*, i32** %172, i64 1
  store i32* %169, i32** %arrayidx201, align 8
  store i32* %169, i32** %intpt, align 8
  %173 = load i32*, i32** %intpt, align 8
  %tobool202 = icmp ne i32* %173, null
  br i1 %tobool202, label %if.end.205, label %if.then.203

if.then.203:                                      ; preds = %if.end.187
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call204 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.205:                                       ; preds = %if.end.187
  %175 = load i32, i32* %prevnode, align 4
  %cmp206 = icmp eq i32 %175, -1
  br i1 %cmp206, label %if.then.208, label %if.else.210

if.then.208:                                      ; preds = %if.end.205
  %176 = load i32, i32* %jm, align 4
  %177 = load i32*, i32** %intpt, align 8
  %incdec.ptr209 = getelementptr inbounds i32, i32* %177, i32 1
  store i32* %incdec.ptr209, i32** %intpt, align 8
  store i32 %176, i32* %177, align 4
  %178 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %178, align 4
  br label %if.end.236

if.else.210:                                      ; preds = %if.end.205
  %179 = load i32, i32* %prevnode, align 4
  %idxprom211 = sext i32 %179 to i64
  %180 = load i32***, i32**** %topol.addr, align 8
  %arrayidx212 = getelementptr inbounds i32**, i32*** %180, i64 %idxprom211
  %181 = load i32**, i32*** %arrayidx212, align 8
  %arrayidx213 = getelementptr inbounds i32*, i32** %181, i64 0
  %182 = load i32*, i32** %arrayidx213, align 8
  store i32* %182, i32** %pt1, align 8
  %183 = load i32, i32* %prevnode, align 4
  %idxprom214 = sext i32 %183 to i64
  %184 = load i32***, i32**** %topol.addr, align 8
  %arrayidx215 = getelementptr inbounds i32**, i32*** %184, i64 %idxprom214
  %185 = load i32**, i32*** %arrayidx215, align 8
  %arrayidx216 = getelementptr inbounds i32*, i32** %185, i64 1
  %186 = load i32*, i32** %arrayidx216, align 8
  store i32* %186, i32** %pt2, align 8
  %187 = load i32*, i32** %pt1, align 8
  %188 = load i32, i32* %187, align 4
  %189 = load i32*, i32** %pt2, align 8
  %190 = load i32, i32* %189, align 4
  %cmp217 = icmp sgt i32 %188, %190
  br i1 %cmp217, label %if.then.219, label %if.else.220

if.then.219:                                      ; preds = %if.else.210
  %191 = load i32*, i32** %pt2, align 8
  store i32* %191, i32** %pt11, align 8
  %192 = load i32*, i32** %pt1, align 8
  store i32* %192, i32** %pt22, align 8
  br label %if.end.221

if.else.220:                                      ; preds = %if.else.210
  %193 = load i32*, i32** %pt1, align 8
  store i32* %193, i32** %pt11, align 8
  %194 = load i32*, i32** %pt2, align 8
  store i32* %194, i32** %pt22, align 8
  br label %if.end.221

if.end.221:                                       ; preds = %if.else.220, %if.then.219
  %195 = load i32*, i32** %pt11, align 8
  store i32* %195, i32** %intpt2, align 8
  br label %for.cond.222

for.cond.222:                                     ; preds = %for.body.225, %if.end.221
  %196 = load i32*, i32** %intpt2, align 8
  %197 = load i32, i32* %196, align 4
  %cmp223 = icmp ne i32 %197, -1
  br i1 %cmp223, label %for.body.225, label %for.end.228

for.body.225:                                     ; preds = %for.cond.222
  %198 = load i32*, i32** %intpt2, align 8
  %incdec.ptr226 = getelementptr inbounds i32, i32* %198, i32 1
  store i32* %incdec.ptr226, i32** %intpt2, align 8
  %199 = load i32, i32* %198, align 4
  %200 = load i32*, i32** %intpt, align 8
  %incdec.ptr227 = getelementptr inbounds i32, i32* %200, i32 1
  store i32* %incdec.ptr227, i32** %intpt, align 8
  store i32 %199, i32* %200, align 4
  br label %for.cond.222

for.end.228:                                      ; preds = %for.cond.222
  %201 = load i32*, i32** %pt22, align 8
  store i32* %201, i32** %intpt2, align 8
  br label %for.cond.229

for.cond.229:                                     ; preds = %for.body.232, %for.end.228
  %202 = load i32*, i32** %intpt2, align 8
  %203 = load i32, i32* %202, align 4
  %cmp230 = icmp ne i32 %203, -1
  br i1 %cmp230, label %for.body.232, label %for.end.235

for.body.232:                                     ; preds = %for.cond.229
  %204 = load i32*, i32** %intpt2, align 8
  %incdec.ptr233 = getelementptr inbounds i32, i32* %204, i32 1
  store i32* %incdec.ptr233, i32** %intpt2, align 8
  %205 = load i32, i32* %204, align 4
  %206 = load i32*, i32** %intpt, align 8
  %incdec.ptr234 = getelementptr inbounds i32, i32* %206, i32 1
  store i32* %incdec.ptr234, i32** %intpt, align 8
  store i32 %205, i32* %206, align 4
  br label %for.cond.229

for.end.235:                                      ; preds = %for.cond.229
  %207 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %207, align 4
  br label %if.end.236

if.end.236:                                       ; preds = %for.end.235, %if.then.208
  %208 = load float, float* %minscore, align 4
  %conv237 = fpext float %208 to double
  %mul238 = fmul double %conv237, 5.000000e-01
  %conv239 = fptrunc double %mul238 to float
  store float %conv239, float* %minscore, align 4
  %209 = load i32, i32* %k, align 4
  %210 = load i32, i32* %im, align 4
  %idxprom240 = sext i32 %210 to i64
  %211 = load i32*, i32** @loadtree.hist, align 8
  %arrayidx241 = getelementptr inbounds i32, i32* %211, i64 %idxprom240
  store i32 %209, i32* %arrayidx241, align 4
  %212 = load i32, i32* %nmemim, align 4
  %213 = load i32, i32* %nmemjm, align 4
  %add242 = add nsw i32 %212, %213
  %214 = load i32, i32* %im, align 4
  %idxprom243 = sext i32 %214 to i64
  %215 = load i32*, i32** @loadtree.nmemar, align 8
  %arrayidx244 = getelementptr inbounds i32, i32* %215, i64 %idxprom243
  store i32 %add242, i32* %arrayidx244, align 4
  %216 = load i32, i32* %im, align 4
  %idxprom245 = sext i32 %216 to i64
  %217 = load float*, float** %mindisfrom, align 8
  %arrayidx246 = getelementptr inbounds float, float* %217, i64 %idxprom245
  store float 0x408F3F3340000000, float* %arrayidx246, align 4
  %218 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  store %struct._Bchain* %218, %struct._Bchain** %acpti, align 8
  br label %for.cond.247

for.cond.247:                                     ; preds = %for.inc.268, %if.end.236
  %219 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %cmp248 = icmp ne %struct._Bchain* %219, null
  br i1 %cmp248, label %for.body.250, label %for.end.270

for.body.250:                                     ; preds = %for.cond.247
  %220 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos251 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %220, i32 0, i32 2
  %221 = load i32, i32* %pos251, align 4
  store i32 %221, i32* %i, align 4
  %222 = load i32, i32* %i, align 4
  %223 = load i32, i32* %im, align 4
  %cmp252 = icmp ne i32 %222, %223
  br i1 %cmp252, label %land.lhs.true, label %if.end.267

land.lhs.true:                                    ; preds = %for.body.250
  %224 = load i32, i32* %i, align 4
  %225 = load i32, i32* %jm, align 4
  %cmp254 = icmp ne i32 %224, %225
  br i1 %cmp254, label %if.then.256, label %if.end.267

if.then.256:                                      ; preds = %land.lhs.true
  %226 = load i32, i32* %i, align 4
  %227 = load i32, i32* %im, align 4
  %cmp257 = icmp slt i32 %226, %227
  br i1 %cmp257, label %if.then.259, label %if.else.260

if.then.259:                                      ; preds = %if.then.256
  %228 = load i32, i32* %i, align 4
  store i32 %228, i32* %miniim, align 4
  %229 = load i32, i32* %im, align 4
  store i32 %229, i32* %maxiim, align 4
  %230 = load i32, i32* %i, align 4
  store i32 %230, i32* %minijm, align 4
  %231 = load i32, i32* %jm, align 4
  store i32 %231, i32* %maxijm, align 4
  br label %if.end.266

if.else.260:                                      ; preds = %if.then.256
  %232 = load i32, i32* %i, align 4
  %233 = load i32, i32* %jm, align 4
  %cmp261 = icmp slt i32 %232, %233
  br i1 %cmp261, label %if.then.263, label %if.else.264

if.then.263:                                      ; preds = %if.else.260
  %234 = load i32, i32* %im, align 4
  store i32 %234, i32* %miniim, align 4
  %235 = load i32, i32* %i, align 4
  store i32 %235, i32* %maxiim, align 4
  %236 = load i32, i32* %i, align 4
  store i32 %236, i32* %minijm, align 4
  %237 = load i32, i32* %jm, align 4
  store i32 %237, i32* %maxijm, align 4
  br label %if.end.265

if.else.264:                                      ; preds = %if.else.260
  %238 = load i32, i32* %im, align 4
  store i32 %238, i32* %miniim, align 4
  %239 = load i32, i32* %i, align 4
  store i32 %239, i32* %maxiim, align 4
  %240 = load i32, i32* %jm, align 4
  store i32 %240, i32* %minijm, align 4
  %241 = load i32, i32* %i, align 4
  store i32 %241, i32* %maxijm, align 4
  br label %if.end.265

if.end.265:                                       ; preds = %if.else.264, %if.then.263
  br label %if.end.266

if.end.266:                                       ; preds = %if.end.265, %if.then.259
  br label %if.end.267

if.end.267:                                       ; preds = %if.end.266, %land.lhs.true, %for.body.250
  br label %for.inc.268

for.inc.268:                                      ; preds = %if.end.267
  %242 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next269 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %242, i32 0, i32 0
  %243 = load %struct._Bchain*, %struct._Bchain** %next269, align 8
  store %struct._Bchain* %243, %struct._Bchain** %acpti, align 8
  br label %for.cond.247

for.end.270:                                      ; preds = %for.cond.247
  %244 = load i8*, i8** @loadtree.treetmp, align 8
  %245 = load i32, i32* %im, align 4
  %idxprom271 = sext i32 %245 to i64
  %246 = load i8**, i8*** @loadtree.tree, align 8
  %arrayidx272 = getelementptr inbounds i8*, i8** %246, i64 %idxprom271
  %247 = load i8*, i8** %arrayidx272, align 8
  %248 = load i32, i32* %k, align 4
  %idxprom273 = sext i32 %248 to i64
  %249 = load float**, float*** %len.addr, align 8
  %arrayidx274 = getelementptr inbounds float*, float** %249, i64 %idxprom273
  %250 = load float*, float** %arrayidx274, align 8
  %arrayidx275 = getelementptr inbounds float, float* %250, i64 0
  %251 = load float, float* %arrayidx275, align 4
  %conv276 = fpext float %251 to double
  %252 = load i32, i32* %jm, align 4
  %idxprom277 = sext i32 %252 to i64
  %253 = load i8**, i8*** @loadtree.tree, align 8
  %arrayidx278 = getelementptr inbounds i8*, i8** %253, i64 %idxprom277
  %254 = load i8*, i8** %arrayidx278, align 8
  %255 = load i32, i32* %k, align 4
  %idxprom279 = sext i32 %255 to i64
  %256 = load float**, float*** %len.addr, align 8
  %arrayidx280 = getelementptr inbounds float*, float** %256, i64 %idxprom279
  %257 = load float*, float** %arrayidx280, align 8
  %arrayidx281 = getelementptr inbounds float, float* %257, i64 1
  %258 = load float, float* %arrayidx281, align 4
  %conv282 = fpext float %258 to double
  %call283 = call i32 (i8*, i8*, ...) @sprintf(i8* %244, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* %247, double %conv276, i8* %254, double %conv282) #8
  %259 = load i32, i32* %im, align 4
  %idxprom284 = sext i32 %259 to i64
  %260 = load i8**, i8*** @loadtree.tree, align 8
  %arrayidx285 = getelementptr inbounds i8*, i8** %260, i64 %idxprom284
  %261 = load i8*, i8** %arrayidx285, align 8
  %262 = load i8*, i8** @loadtree.treetmp, align 8
  %call286 = call i8* @strcpy(i8* %261, i8* %262) #8
  %263 = load i32, i32* %jm, align 4
  %idxprom287 = sext i32 %263 to i64
  %264 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %arrayidx288 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %264, i64 %idxprom287
  %prev289 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx288, i32 0, i32 1
  %265 = load %struct._Bchain*, %struct._Bchain** %prev289, align 8
  store %struct._Bchain* %265, %struct._Bchain** %acjmprev, align 8
  %266 = load i32, i32* %jm, align 4
  %idxprom290 = sext i32 %266 to i64
  %267 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %arrayidx291 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %267, i64 %idxprom290
  %next292 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx291, i32 0, i32 0
  %268 = load %struct._Bchain*, %struct._Bchain** %next292, align 8
  store %struct._Bchain* %268, %struct._Bchain** %acjmnext, align 8
  %269 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %270 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %next293 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %270, i32 0, i32 0
  store %struct._Bchain* %269, %struct._Bchain** %next293, align 8
  %271 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %cmp294 = icmp ne %struct._Bchain* %271, null
  br i1 %cmp294, label %if.then.296, label %if.end.298

if.then.296:                                      ; preds = %for.end.270
  %272 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %273 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %prev297 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %273, i32 0, i32 1
  store %struct._Bchain* %272, %struct._Bchain** %prev297, align 8
  br label %if.end.298

if.end.298:                                       ; preds = %if.then.296, %for.end.270
  br label %for.inc.299

for.inc.299:                                      ; preds = %if.end.298
  %274 = load i32, i32* %k, align 4
  %inc300 = add nsw i32 %274, 1
  store i32 %inc300, i32* %k, align 4
  br label %for.cond.87

for.end.301:                                      ; preds = %for.cond.87
  %275 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call302 = call i32 @fclose(%struct._IO_FILE* %275)
  %call303 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store %struct._IO_FILE* %call303, %struct._IO_FILE** %fp, align 8
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %277 = load i8*, i8** @loadtree.treetmp, align 8
  %call304 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %276, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %277)
  %278 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call305 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %278, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i32 0, i32 0))
  %279 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call306 = call i32 @fclose(%struct._IO_FILE* %279)
  %280 = load i8**, i8*** @loadtree.tree, align 8
  call void @FreeCharMtx(i8** %280)
  %281 = load i8*, i8** @loadtree.treetmp, align 8
  call void @free(i8* %281) #8
  %282 = load i8*, i8** @loadtree.nametmp, align 8
  call void @free(i8* %282) #8
  %283 = load i32*, i32** @loadtree.hist, align 8
  %284 = bitcast i32* %283 to i8*
  call void @free(i8* %284) #8
  store i32* null, i32** @loadtree.hist, align 8
  %285 = load %struct._Bchain*, %struct._Bchain** @loadtree.ac, align 8
  %286 = bitcast %struct._Bchain* %285 to i8*
  call void @free(i8* %286) #8
  store %struct._Bchain* null, %struct._Bchain** @loadtree.ac, align 8
  %287 = load i32*, i32** @loadtree.nmemar, align 8
  %288 = bitcast i32* %287 to i8*
  call void @free(i8* %288) #8
  store i32* null, i32** @loadtree.nmemar, align 8
  %289 = load float*, float** %mindisfrom, align 8
  %290 = bitcast float* %289 to i8*
  call void @free(i8* %290) #8
  %291 = load i32*, i32** %nearest, align 8
  %292 = bitcast i32* %291 to i8*
  call void @free(i8* %292) #8
  ret void
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #2

declare i32* @AllocateIntVec(i32) #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #4

declare float* @AllocateFloatVec(i32) #2

declare i8* @AllocateCharVec(i32) #2

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #5

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #4

; Function Attrs: nounwind uwtable
define internal void @loadtreeoneline(i32* %ar, float* %len, %struct._IO_FILE* %fp) #0 {
entry:
  %ar.addr = alloca i32*, align 8
  %len.addr = alloca float*, align 8
  %fp.addr = alloca %struct._IO_FILE*, align 8
  store i32* %ar, i32** %ar.addr, align 8
  store float* %len, float** %len.addr, align 8
  store %struct._IO_FILE* %fp, %struct._IO_FILE** %fp.addr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp.addr, align 8
  %call = call i8* @fgets(i8* getelementptr inbounds ([1000 x i8], [1000 x i8]* @loadtreeoneline.gett, i32 0, i32 0), i32 999, %struct._IO_FILE* %0)
  %1 = load i32*, i32** %ar.addr, align 8
  %2 = load i32*, i32** %ar.addr, align 8
  %add.ptr = getelementptr inbounds i32, i32* %2, i64 1
  %3 = load float*, float** %len.addr, align 8
  %4 = load float*, float** %len.addr, align 8
  %add.ptr1 = getelementptr inbounds float, float* %4, i64 1
  %call2 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* getelementptr inbounds ([1000 x i8], [1000 x i8]* @loadtreeoneline.gett, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i32 0, i32 0), i32* %1, i32* %add.ptr, float* %3, float* %add.ptr1) #8
  %5 = load i32*, i32** %ar.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 0
  %6 = load i32, i32* %arrayidx, align 4
  %dec = add nsw i32 %6, -1
  store i32 %dec, i32* %arrayidx, align 4
  %7 = load i32*, i32** %ar.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %7, i64 1
  %8 = load i32, i32* %arrayidx3, align 4
  %dec4 = add nsw i32 %8, -1
  store i32 %dec4, i32* %arrayidx3, align 4
  %9 = load i32*, i32** %ar.addr, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 0
  %10 = load i32, i32* %arrayidx5, align 4
  %11 = load i32*, i32** %ar.addr, align 8
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 1
  %12 = load i32, i32* %arrayidx6, align 4
  %cmp = icmp sge i32 %10, %12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.39, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: nounwind
declare i8* @realloc(i8*, i64) #4

declare i32 @fclose(%struct._IO_FILE*) #2

declare void @FreeCharMtx(i8**) #2

; Function Attrs: nounwind
declare void @free(i8*) #4

; Function Attrs: nounwind uwtable
define void @loadtop(i32 %nseq, float** %eff, i32*** %topol, float** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca float**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca float**, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %eff1 = alloca float, align 4
  %eff0 = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %acjmnext = alloca %struct._Bchain*, align 8
  %acjmprev = alloca %struct._Bchain*, align 8
  %prevnode = alloca i32, align 4
  %acpti = alloca %struct._Bchain*, align 8
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %nmemim = alloca i32, align 4
  %nmemjm = alloca i32, align 4
  %minscore = alloca float, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %node = alloca [2 x i32], align 4
  %dumfl = alloca [2 x float], align 4
  %clusterfuncpt = alloca [1 x float (float, float)*], align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store float** %eff, float*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store float** %len, float*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store float 0x3FECCCCCC0000000, float* @sueff1, align 4
  store float 0x3FA99999A0000000, float* @sueff05, align 4
  %0 = load i32, i32* @treemethod, align 4
  %cmp = icmp eq i32 %0, 88
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_mix_float, float (float, float)** %arrayidx, align 8
  br label %if.end.10

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @treemethod, align 4
  %cmp1 = icmp eq i32 %1, 69
  br i1 %cmp1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %arrayidx3 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_average_float, float (float, float)** %arrayidx3, align 8
  br label %if.end.9

if.else.4:                                        ; preds = %if.else
  %2 = load i32, i32* @treemethod, align 4
  %cmp5 = icmp eq i32 %2, 113
  br i1 %cmp5, label %if.then.6, label %if.else.8

if.then.6:                                        ; preds = %if.else.4
  %arrayidx7 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_minimum_float, float (float, float)** %arrayidx7, align 8
  br label %if.end

if.else.8:                                        ; preds = %if.else.4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load i32, i32* @treemethod, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i32 %4)
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %if.then.6
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then.2
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.then
  %call11 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  store %struct._IO_FILE* %call11, %struct._IO_FILE** %fp, align 8
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool = icmp ne %struct._IO_FILE* %5, null
  br i1 %tobool, label %if.end.14, label %if.then.12

if.then.12:                                       ; preds = %if.end.10
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.14:                                        ; preds = %if.end.10
  %7 = load i32*, i32** @loadtop.hist, align 8
  %tobool15 = icmp ne i32* %7, null
  br i1 %tobool15, label %if.end.25, label %if.then.16

if.then.16:                                       ; preds = %if.end.14
  %8 = load i32, i32* @njob, align 4
  %mul = mul nsw i32 %8, 50
  %call17 = call i8* @AllocateCharVec(i32 %mul)
  store i8* %call17, i8** @loadtop.treetmp, align 8
  %9 = load i32, i32* @njob, align 4
  %10 = load i32, i32* @njob, align 4
  %mul18 = mul nsw i32 %10, 50
  %call19 = call i8** @AllocateCharMtx(i32 %9, i32 %mul18)
  store i8** %call19, i8*** @loadtop.tree, align 8
  %11 = load i32, i32* @njob, align 4
  %call20 = call i32* @AllocateIntVec(i32 %11)
  store i32* %call20, i32** @loadtop.hist, align 8
  %12 = load i32, i32* @njob, align 4
  %call21 = call float* @AllocateFloatVec(i32 %12)
  store float* %call21, float** @loadtop.tmptmplen, align 8
  %13 = load i32, i32* @njob, align 4
  %conv = sext i32 %13 to i64
  %mul22 = mul i64 %conv, 24
  %call23 = call noalias i8* @malloc(i64 %mul22) #8
  %14 = bitcast i8* %call23 to %struct._Bchain*
  store %struct._Bchain* %14, %struct._Bchain** @loadtop.ac, align 8
  %15 = load i32, i32* @njob, align 4
  %call24 = call i32* @AllocateIntVec(i32 %15)
  store i32* %call24, i32** @loadtop.nmemar, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.16, %if.end.14
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.25
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %nseq.addr, align 4
  %cmp26 = icmp slt i32 %16, %17
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %i, align 4
  %idxprom = sext i32 %18 to i64
  %19 = load i8**, i8*** @loadtop.tree, align 8
  %arrayidx28 = getelementptr inbounds i8*, i8** %19, i64 %idxprom
  %20 = load i8*, i8** %arrayidx28, align 8
  %21 = load i32, i32* %i, align 4
  %add = add nsw i32 %21, 1
  %call29 = call i32 (i8*, i8*, ...) @sprintf(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 %add) #8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.44, %for.end
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %nseq.addr, align 4
  %cmp31 = icmp slt i32 %23, %24
  br i1 %cmp31, label %for.body.33, label %for.end.46

for.body.33:                                      ; preds = %for.cond.30
  %25 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %26 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %26 to i64
  %add.ptr = getelementptr inbounds %struct._Bchain, %struct._Bchain* %25, i64 %idx.ext
  %add.ptr34 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr, i64 1
  %27 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %27 to i64
  %28 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %arrayidx36 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %28, i64 %idxprom35
  %next = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx36, i32 0, i32 0
  store %struct._Bchain* %add.ptr34, %struct._Bchain** %next, align 8
  %29 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %30 = load i32, i32* %i, align 4
  %idx.ext37 = sext i32 %30 to i64
  %add.ptr38 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %29, i64 %idx.ext37
  %add.ptr39 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr38, i64 -1
  %31 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %31 to i64
  %32 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %arrayidx41 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %32, i64 %idxprom40
  %prev = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx41, i32 0, i32 1
  store %struct._Bchain* %add.ptr39, %struct._Bchain** %prev, align 8
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %34 to i64
  %35 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %arrayidx43 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %35, i64 %idxprom42
  %pos = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx43, i32 0, i32 2
  store i32 %33, i32* %pos, align 4
  br label %for.inc.44

for.inc.44:                                       ; preds = %for.body.33
  %36 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %36, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond.30

for.end.46:                                       ; preds = %for.cond.30
  %37 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %37, 1
  %idxprom47 = sext i32 %sub to i64
  %38 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %arrayidx48 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %38, i64 %idxprom47
  %next49 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx48, i32 0, i32 0
  store %struct._Bchain* null, %struct._Bchain** %next49, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.50

for.cond.50:                                      ; preds = %for.inc.56, %for.end.46
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %nseq.addr, align 4
  %cmp51 = icmp slt i32 %39, %40
  br i1 %cmp51, label %for.body.53, label %for.end.58

for.body.53:                                      ; preds = %for.cond.50
  %41 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %41 to i64
  %42 = load float*, float** @loadtop.tmptmplen, align 8
  %arrayidx55 = getelementptr inbounds float, float* %42, i64 %idxprom54
  store float 0.000000e+00, float* %arrayidx55, align 4
  br label %for.inc.56

for.inc.56:                                       ; preds = %for.body.53
  %43 = load i32, i32* %i, align 4
  %inc57 = add nsw i32 %43, 1
  store i32 %inc57, i32* %i, align 4
  br label %for.cond.50

for.end.58:                                       ; preds = %for.cond.50
  store i32 0, i32* %i, align 4
  br label %for.cond.59

for.cond.59:                                      ; preds = %for.inc.67, %for.end.58
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %nseq.addr, align 4
  %cmp60 = icmp slt i32 %44, %45
  br i1 %cmp60, label %for.body.62, label %for.end.69

for.body.62:                                      ; preds = %for.cond.59
  %46 = load i32, i32* %i, align 4
  %idxprom63 = sext i32 %46 to i64
  %47 = load i32*, i32** @loadtop.hist, align 8
  %arrayidx64 = getelementptr inbounds i32, i32* %47, i64 %idxprom63
  store i32 -1, i32* %arrayidx64, align 4
  %48 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %48 to i64
  %49 = load i32*, i32** @loadtop.nmemar, align 8
  %arrayidx66 = getelementptr inbounds i32, i32* %49, i64 %idxprom65
  store i32 1, i32* %arrayidx66, align 4
  br label %for.inc.67

for.inc.67:                                       ; preds = %for.body.62
  %50 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %50, 1
  store i32 %inc68, i32* %i, align 4
  br label %for.cond.59

for.end.69:                                       ; preds = %for.cond.59
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.312, %for.end.69
  %52 = load i32, i32* %k, align 4
  %53 = load i32, i32* %nseq.addr, align 4
  %sub72 = sub nsw i32 %53, 1
  %cmp73 = icmp slt i32 %52, %sub72
  br i1 %cmp73, label %for.body.75, label %for.end.314

for.body.75:                                      ; preds = %for.cond.71
  %54 = load i32, i32* %k, align 4
  %rem = srem i32 %54, 10
  %cmp76 = icmp eq i32 %rem, 0
  br i1 %cmp76, label %if.then.78, label %if.end.80

if.then.78:                                       ; preds = %for.body.75
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %56 = load i32, i32* %k, align 4
  %57 = load i32, i32* %nseq.addr, align 4
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i32 0, i32 0), i32 %56, i32 %57)
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.78, %for.body.75
  %arrayidx81 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 1
  store float -1.000000e+00, float* %arrayidx81, align 4
  %arrayidx82 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 0
  store float -1.000000e+00, float* %arrayidx82, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i32 0
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  call void @loadtreeoneline(i32* %arraydecay, float* %arraydecay83, %struct._IO_FILE* %58)
  %arrayidx84 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 0
  %59 = load i32, i32* %arrayidx84, align 4
  store i32 %59, i32* %im, align 4
  %arrayidx85 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 1
  %60 = load i32, i32* %arrayidx85, align 4
  store i32 %60, i32* %jm, align 4
  %61 = load i32, i32* %jm, align 4
  %62 = load i32, i32* %im, align 4
  %sub86 = sub nsw i32 %61, %62
  %idxprom87 = sext i32 %sub86 to i64
  %63 = load i32, i32* %im, align 4
  %idxprom88 = sext i32 %63 to i64
  %64 = load float**, float*** %eff.addr, align 8
  %arrayidx89 = getelementptr inbounds float*, float** %64, i64 %idxprom88
  %65 = load float*, float** %arrayidx89, align 8
  %arrayidx90 = getelementptr inbounds float, float* %65, i64 %idxprom87
  %66 = load float, float* %arrayidx90, align 4
  store float %66, float* %minscore, align 4
  %arrayidx91 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 0
  %67 = load float, float* %arrayidx91, align 4
  %conv92 = fpext float %67 to double
  %cmp93 = fcmp une double %conv92, -1.000000e+00
  br i1 %cmp93, label %if.then.99, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.80
  %arrayidx95 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 1
  %68 = load float, float* %arrayidx95, align 4
  %conv96 = fpext float %68 to double
  %cmp97 = fcmp une double %conv96, -1.000000e+00
  br i1 %cmp97, label %if.then.99, label %if.end.101

if.then.99:                                       ; preds = %lor.lhs.false, %if.end.80
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.22, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.101:                                       ; preds = %lor.lhs.false
  %70 = load i32, i32* %im, align 4
  %idxprom102 = sext i32 %70 to i64
  %71 = load i32*, i32** @loadtop.hist, align 8
  %arrayidx103 = getelementptr inbounds i32, i32* %71, i64 %idxprom102
  %72 = load i32, i32* %arrayidx103, align 4
  store i32 %72, i32* %prevnode, align 4
  %73 = load i32, i32* %im, align 4
  %idxprom104 = sext i32 %73 to i64
  %74 = load i32*, i32** @loadtop.nmemar, align 8
  %arrayidx105 = getelementptr inbounds i32, i32* %74, i64 %idxprom104
  %75 = load i32, i32* %arrayidx105, align 4
  store i32 %75, i32* %nmemim, align 4
  %76 = load i32, i32* %k, align 4
  %idxprom106 = sext i32 %76 to i64
  %77 = load i32***, i32**** %topol.addr, align 8
  %arrayidx107 = getelementptr inbounds i32**, i32*** %77, i64 %idxprom106
  %78 = load i32**, i32*** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds i32*, i32** %78, i64 0
  %79 = load i32*, i32** %arrayidx108, align 8
  %80 = bitcast i32* %79 to i8*
  %81 = load i32, i32* %nmemim, align 4
  %add109 = add nsw i32 %81, 1
  %conv110 = sext i32 %add109 to i64
  %mul111 = mul i64 %conv110, 4
  %call112 = call i8* @realloc(i8* %80, i64 %mul111) #8
  %82 = bitcast i8* %call112 to i32*
  %83 = load i32, i32* %k, align 4
  %idxprom113 = sext i32 %83 to i64
  %84 = load i32***, i32**** %topol.addr, align 8
  %arrayidx114 = getelementptr inbounds i32**, i32*** %84, i64 %idxprom113
  %85 = load i32**, i32*** %arrayidx114, align 8
  %arrayidx115 = getelementptr inbounds i32*, i32** %85, i64 0
  store i32* %82, i32** %arrayidx115, align 8
  store i32* %82, i32** %intpt, align 8
  %86 = load i32, i32* %prevnode, align 4
  %cmp116 = icmp eq i32 %86, -1
  br i1 %cmp116, label %if.then.118, label %if.else.119

if.then.118:                                      ; preds = %if.end.101
  %87 = load i32, i32* %im, align 4
  %88 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %88, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %87, i32* %88, align 4
  %89 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %89, align 4
  br label %if.end.145

if.else.119:                                      ; preds = %if.end.101
  %90 = load i32, i32* %prevnode, align 4
  %idxprom120 = sext i32 %90 to i64
  %91 = load i32***, i32**** %topol.addr, align 8
  %arrayidx121 = getelementptr inbounds i32**, i32*** %91, i64 %idxprom120
  %92 = load i32**, i32*** %arrayidx121, align 8
  %arrayidx122 = getelementptr inbounds i32*, i32** %92, i64 0
  %93 = load i32*, i32** %arrayidx122, align 8
  store i32* %93, i32** %pt1, align 8
  %94 = load i32, i32* %prevnode, align 4
  %idxprom123 = sext i32 %94 to i64
  %95 = load i32***, i32**** %topol.addr, align 8
  %arrayidx124 = getelementptr inbounds i32**, i32*** %95, i64 %idxprom123
  %96 = load i32**, i32*** %arrayidx124, align 8
  %arrayidx125 = getelementptr inbounds i32*, i32** %96, i64 1
  %97 = load i32*, i32** %arrayidx125, align 8
  store i32* %97, i32** %pt2, align 8
  %98 = load i32*, i32** %pt1, align 8
  %99 = load i32, i32* %98, align 4
  %100 = load i32*, i32** %pt2, align 8
  %101 = load i32, i32* %100, align 4
  %cmp126 = icmp sgt i32 %99, %101
  br i1 %cmp126, label %if.then.128, label %if.else.129

if.then.128:                                      ; preds = %if.else.119
  %102 = load i32*, i32** %pt2, align 8
  store i32* %102, i32** %pt11, align 8
  %103 = load i32*, i32** %pt1, align 8
  store i32* %103, i32** %pt22, align 8
  br label %if.end.130

if.else.129:                                      ; preds = %if.else.119
  %104 = load i32*, i32** %pt1, align 8
  store i32* %104, i32** %pt11, align 8
  %105 = load i32*, i32** %pt2, align 8
  store i32* %105, i32** %pt22, align 8
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.129, %if.then.128
  %106 = load i32*, i32** %pt11, align 8
  store i32* %106, i32** %intpt2, align 8
  br label %for.cond.131

for.cond.131:                                     ; preds = %for.body.134, %if.end.130
  %107 = load i32*, i32** %intpt2, align 8
  %108 = load i32, i32* %107, align 4
  %cmp132 = icmp ne i32 %108, -1
  br i1 %cmp132, label %for.body.134, label %for.end.137

for.body.134:                                     ; preds = %for.cond.131
  %109 = load i32*, i32** %intpt2, align 8
  %incdec.ptr135 = getelementptr inbounds i32, i32* %109, i32 1
  store i32* %incdec.ptr135, i32** %intpt2, align 8
  %110 = load i32, i32* %109, align 4
  %111 = load i32*, i32** %intpt, align 8
  %incdec.ptr136 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %incdec.ptr136, i32** %intpt, align 8
  store i32 %110, i32* %111, align 4
  br label %for.cond.131

for.end.137:                                      ; preds = %for.cond.131
  %112 = load i32*, i32** %pt22, align 8
  store i32* %112, i32** %intpt2, align 8
  br label %for.cond.138

for.cond.138:                                     ; preds = %for.body.141, %for.end.137
  %113 = load i32*, i32** %intpt2, align 8
  %114 = load i32, i32* %113, align 4
  %cmp139 = icmp ne i32 %114, -1
  br i1 %cmp139, label %for.body.141, label %for.end.144

for.body.141:                                     ; preds = %for.cond.138
  %115 = load i32*, i32** %intpt2, align 8
  %incdec.ptr142 = getelementptr inbounds i32, i32* %115, i32 1
  store i32* %incdec.ptr142, i32** %intpt2, align 8
  %116 = load i32, i32* %115, align 4
  %117 = load i32*, i32** %intpt, align 8
  %incdec.ptr143 = getelementptr inbounds i32, i32* %117, i32 1
  store i32* %incdec.ptr143, i32** %intpt, align 8
  store i32 %116, i32* %117, align 4
  br label %for.cond.138

for.end.144:                                      ; preds = %for.cond.138
  %118 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %118, align 4
  br label %if.end.145

if.end.145:                                       ; preds = %for.end.144, %if.then.118
  %119 = load i32, i32* %jm, align 4
  %idxprom146 = sext i32 %119 to i64
  %120 = load i32*, i32** @loadtop.hist, align 8
  %arrayidx147 = getelementptr inbounds i32, i32* %120, i64 %idxprom146
  %121 = load i32, i32* %arrayidx147, align 4
  store i32 %121, i32* %prevnode, align 4
  %122 = load i32, i32* %jm, align 4
  %idxprom148 = sext i32 %122 to i64
  %123 = load i32*, i32** @loadtop.nmemar, align 8
  %arrayidx149 = getelementptr inbounds i32, i32* %123, i64 %idxprom148
  %124 = load i32, i32* %arrayidx149, align 4
  store i32 %124, i32* %nmemjm, align 4
  %125 = load i32, i32* %k, align 4
  %idxprom150 = sext i32 %125 to i64
  %126 = load i32***, i32**** %topol.addr, align 8
  %arrayidx151 = getelementptr inbounds i32**, i32*** %126, i64 %idxprom150
  %127 = load i32**, i32*** %arrayidx151, align 8
  %arrayidx152 = getelementptr inbounds i32*, i32** %127, i64 1
  %128 = load i32*, i32** %arrayidx152, align 8
  %129 = bitcast i32* %128 to i8*
  %130 = load i32, i32* %nmemjm, align 4
  %add153 = add nsw i32 %130, 1
  %conv154 = sext i32 %add153 to i64
  %mul155 = mul i64 %conv154, 4
  %call156 = call i8* @realloc(i8* %129, i64 %mul155) #8
  %131 = bitcast i8* %call156 to i32*
  %132 = load i32, i32* %k, align 4
  %idxprom157 = sext i32 %132 to i64
  %133 = load i32***, i32**** %topol.addr, align 8
  %arrayidx158 = getelementptr inbounds i32**, i32*** %133, i64 %idxprom157
  %134 = load i32**, i32*** %arrayidx158, align 8
  %arrayidx159 = getelementptr inbounds i32*, i32** %134, i64 1
  store i32* %131, i32** %arrayidx159, align 8
  store i32* %131, i32** %intpt, align 8
  %135 = load i32*, i32** %intpt, align 8
  %tobool160 = icmp ne i32* %135, null
  br i1 %tobool160, label %if.end.163, label %if.then.161

if.then.161:                                      ; preds = %if.end.145
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call162 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %136, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.163:                                       ; preds = %if.end.145
  %137 = load i32, i32* %prevnode, align 4
  %cmp164 = icmp eq i32 %137, -1
  br i1 %cmp164, label %if.then.166, label %if.else.168

if.then.166:                                      ; preds = %if.end.163
  %138 = load i32, i32* %jm, align 4
  %139 = load i32*, i32** %intpt, align 8
  %incdec.ptr167 = getelementptr inbounds i32, i32* %139, i32 1
  store i32* %incdec.ptr167, i32** %intpt, align 8
  store i32 %138, i32* %139, align 4
  %140 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %140, align 4
  br label %if.end.194

if.else.168:                                      ; preds = %if.end.163
  %141 = load i32, i32* %prevnode, align 4
  %idxprom169 = sext i32 %141 to i64
  %142 = load i32***, i32**** %topol.addr, align 8
  %arrayidx170 = getelementptr inbounds i32**, i32*** %142, i64 %idxprom169
  %143 = load i32**, i32*** %arrayidx170, align 8
  %arrayidx171 = getelementptr inbounds i32*, i32** %143, i64 0
  %144 = load i32*, i32** %arrayidx171, align 8
  store i32* %144, i32** %pt1, align 8
  %145 = load i32, i32* %prevnode, align 4
  %idxprom172 = sext i32 %145 to i64
  %146 = load i32***, i32**** %topol.addr, align 8
  %arrayidx173 = getelementptr inbounds i32**, i32*** %146, i64 %idxprom172
  %147 = load i32**, i32*** %arrayidx173, align 8
  %arrayidx174 = getelementptr inbounds i32*, i32** %147, i64 1
  %148 = load i32*, i32** %arrayidx174, align 8
  store i32* %148, i32** %pt2, align 8
  %149 = load i32*, i32** %pt1, align 8
  %150 = load i32, i32* %149, align 4
  %151 = load i32*, i32** %pt2, align 8
  %152 = load i32, i32* %151, align 4
  %cmp175 = icmp sgt i32 %150, %152
  br i1 %cmp175, label %if.then.177, label %if.else.178

if.then.177:                                      ; preds = %if.else.168
  %153 = load i32*, i32** %pt2, align 8
  store i32* %153, i32** %pt11, align 8
  %154 = load i32*, i32** %pt1, align 8
  store i32* %154, i32** %pt22, align 8
  br label %if.end.179

if.else.178:                                      ; preds = %if.else.168
  %155 = load i32*, i32** %pt1, align 8
  store i32* %155, i32** %pt11, align 8
  %156 = load i32*, i32** %pt2, align 8
  store i32* %156, i32** %pt22, align 8
  br label %if.end.179

if.end.179:                                       ; preds = %if.else.178, %if.then.177
  %157 = load i32*, i32** %pt11, align 8
  store i32* %157, i32** %intpt2, align 8
  br label %for.cond.180

for.cond.180:                                     ; preds = %for.body.183, %if.end.179
  %158 = load i32*, i32** %intpt2, align 8
  %159 = load i32, i32* %158, align 4
  %cmp181 = icmp ne i32 %159, -1
  br i1 %cmp181, label %for.body.183, label %for.end.186

for.body.183:                                     ; preds = %for.cond.180
  %160 = load i32*, i32** %intpt2, align 8
  %incdec.ptr184 = getelementptr inbounds i32, i32* %160, i32 1
  store i32* %incdec.ptr184, i32** %intpt2, align 8
  %161 = load i32, i32* %160, align 4
  %162 = load i32*, i32** %intpt, align 8
  %incdec.ptr185 = getelementptr inbounds i32, i32* %162, i32 1
  store i32* %incdec.ptr185, i32** %intpt, align 8
  store i32 %161, i32* %162, align 4
  br label %for.cond.180

for.end.186:                                      ; preds = %for.cond.180
  %163 = load i32*, i32** %pt22, align 8
  store i32* %163, i32** %intpt2, align 8
  br label %for.cond.187

for.cond.187:                                     ; preds = %for.body.190, %for.end.186
  %164 = load i32*, i32** %intpt2, align 8
  %165 = load i32, i32* %164, align 4
  %cmp188 = icmp ne i32 %165, -1
  br i1 %cmp188, label %for.body.190, label %for.end.193

for.body.190:                                     ; preds = %for.cond.187
  %166 = load i32*, i32** %intpt2, align 8
  %incdec.ptr191 = getelementptr inbounds i32, i32* %166, i32 1
  store i32* %incdec.ptr191, i32** %intpt2, align 8
  %167 = load i32, i32* %166, align 4
  %168 = load i32*, i32** %intpt, align 8
  %incdec.ptr192 = getelementptr inbounds i32, i32* %168, i32 1
  store i32* %incdec.ptr192, i32** %intpt, align 8
  store i32 %167, i32* %168, align 4
  br label %for.cond.187

for.end.193:                                      ; preds = %for.cond.187
  %169 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %169, align 4
  br label %if.end.194

if.end.194:                                       ; preds = %for.end.193, %if.then.166
  %170 = load float, float* %minscore, align 4
  %conv195 = fpext float %170 to double
  %mul196 = fmul double %conv195, 5.000000e-01
  %conv197 = fptrunc double %mul196 to float
  store float %conv197, float* %minscore, align 4
  %171 = load float, float* %minscore, align 4
  %172 = load i32, i32* %im, align 4
  %idxprom198 = sext i32 %172 to i64
  %173 = load float*, float** @loadtop.tmptmplen, align 8
  %arrayidx199 = getelementptr inbounds float, float* %173, i64 %idxprom198
  %174 = load float, float* %arrayidx199, align 4
  %sub200 = fsub float %171, %174
  %175 = load i32, i32* %k, align 4
  %idxprom201 = sext i32 %175 to i64
  %176 = load float**, float*** %len.addr, align 8
  %arrayidx202 = getelementptr inbounds float*, float** %176, i64 %idxprom201
  %177 = load float*, float** %arrayidx202, align 8
  %arrayidx203 = getelementptr inbounds float, float* %177, i64 0
  store float %sub200, float* %arrayidx203, align 4
  %178 = load float, float* %minscore, align 4
  %179 = load i32, i32* %jm, align 4
  %idxprom204 = sext i32 %179 to i64
  %180 = load float*, float** @loadtop.tmptmplen, align 8
  %arrayidx205 = getelementptr inbounds float, float* %180, i64 %idxprom204
  %181 = load float, float* %arrayidx205, align 4
  %sub206 = fsub float %178, %181
  %182 = load i32, i32* %k, align 4
  %idxprom207 = sext i32 %182 to i64
  %183 = load float**, float*** %len.addr, align 8
  %arrayidx208 = getelementptr inbounds float*, float** %183, i64 %idxprom207
  %184 = load float*, float** %arrayidx208, align 8
  %arrayidx209 = getelementptr inbounds float, float* %184, i64 1
  store float %sub206, float* %arrayidx209, align 4
  %185 = load i32, i32* %k, align 4
  %idxprom210 = sext i32 %185 to i64
  %186 = load float**, float*** %len.addr, align 8
  %arrayidx211 = getelementptr inbounds float*, float** %186, i64 %idxprom210
  %187 = load float*, float** %arrayidx211, align 8
  %arrayidx212 = getelementptr inbounds float, float* %187, i64 0
  %188 = load float, float* %arrayidx212, align 4
  %conv213 = fpext float %188 to double
  %cmp214 = fcmp olt double %conv213, 0.000000e+00
  br i1 %cmp214, label %if.then.216, label %if.end.220

if.then.216:                                      ; preds = %if.end.194
  %189 = load i32, i32* %k, align 4
  %idxprom217 = sext i32 %189 to i64
  %190 = load float**, float*** %len.addr, align 8
  %arrayidx218 = getelementptr inbounds float*, float** %190, i64 %idxprom217
  %191 = load float*, float** %arrayidx218, align 8
  %arrayidx219 = getelementptr inbounds float, float* %191, i64 0
  store float 0.000000e+00, float* %arrayidx219, align 4
  br label %if.end.220

if.end.220:                                       ; preds = %if.then.216, %if.end.194
  %192 = load i32, i32* %k, align 4
  %idxprom221 = sext i32 %192 to i64
  %193 = load float**, float*** %len.addr, align 8
  %arrayidx222 = getelementptr inbounds float*, float** %193, i64 %idxprom221
  %194 = load float*, float** %arrayidx222, align 8
  %arrayidx223 = getelementptr inbounds float, float* %194, i64 1
  %195 = load float, float* %arrayidx223, align 4
  %conv224 = fpext float %195 to double
  %cmp225 = fcmp olt double %conv224, 0.000000e+00
  br i1 %cmp225, label %if.then.227, label %if.end.231

if.then.227:                                      ; preds = %if.end.220
  %196 = load i32, i32* %k, align 4
  %idxprom228 = sext i32 %196 to i64
  %197 = load float**, float*** %len.addr, align 8
  %arrayidx229 = getelementptr inbounds float*, float** %197, i64 %idxprom228
  %198 = load float*, float** %arrayidx229, align 8
  %arrayidx230 = getelementptr inbounds float, float* %198, i64 1
  store float 0.000000e+00, float* %arrayidx230, align 4
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.227, %if.end.220
  %199 = load float, float* %minscore, align 4
  %200 = load i32, i32* %im, align 4
  %idxprom232 = sext i32 %200 to i64
  %201 = load float*, float** @loadtop.tmptmplen, align 8
  %arrayidx233 = getelementptr inbounds float, float* %201, i64 %idxprom232
  store float %199, float* %arrayidx233, align 4
  %202 = load i32, i32* %k, align 4
  %203 = load i32, i32* %im, align 4
  %idxprom234 = sext i32 %203 to i64
  %204 = load i32*, i32** @loadtop.hist, align 8
  %arrayidx235 = getelementptr inbounds i32, i32* %204, i64 %idxprom234
  store i32 %202, i32* %arrayidx235, align 4
  %205 = load i32, i32* %nmemim, align 4
  %206 = load i32, i32* %nmemjm, align 4
  %add236 = add nsw i32 %205, %206
  %207 = load i32, i32* %im, align 4
  %idxprom237 = sext i32 %207 to i64
  %208 = load i32*, i32** @loadtop.nmemar, align 8
  %arrayidx238 = getelementptr inbounds i32, i32* %208, i64 %idxprom237
  store i32 %add236, i32* %arrayidx238, align 4
  %209 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  store %struct._Bchain* %209, %struct._Bchain** %acpti, align 8
  br label %for.cond.239

for.cond.239:                                     ; preds = %for.inc.277, %if.end.231
  %210 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %cmp240 = icmp ne %struct._Bchain* %210, null
  br i1 %cmp240, label %for.body.242, label %for.end.279

for.body.242:                                     ; preds = %for.cond.239
  %211 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos243 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %211, i32 0, i32 2
  %212 = load i32, i32* %pos243, align 4
  store i32 %212, i32* %i, align 4
  %213 = load i32, i32* %i, align 4
  %214 = load i32, i32* %im, align 4
  %cmp244 = icmp ne i32 %213, %214
  br i1 %cmp244, label %land.lhs.true, label %if.end.276

land.lhs.true:                                    ; preds = %for.body.242
  %215 = load i32, i32* %i, align 4
  %216 = load i32, i32* %jm, align 4
  %cmp246 = icmp ne i32 %215, %216
  br i1 %cmp246, label %if.then.248, label %if.end.276

if.then.248:                                      ; preds = %land.lhs.true
  %217 = load i32, i32* %i, align 4
  %218 = load i32, i32* %im, align 4
  %cmp249 = icmp slt i32 %217, %218
  br i1 %cmp249, label %if.then.251, label %if.else.252

if.then.251:                                      ; preds = %if.then.248
  %219 = load i32, i32* %i, align 4
  store i32 %219, i32* %miniim, align 4
  %220 = load i32, i32* %im, align 4
  store i32 %220, i32* %maxiim, align 4
  %221 = load i32, i32* %i, align 4
  store i32 %221, i32* %minijm, align 4
  %222 = load i32, i32* %jm, align 4
  store i32 %222, i32* %maxijm, align 4
  br label %if.end.258

if.else.252:                                      ; preds = %if.then.248
  %223 = load i32, i32* %i, align 4
  %224 = load i32, i32* %jm, align 4
  %cmp253 = icmp slt i32 %223, %224
  br i1 %cmp253, label %if.then.255, label %if.else.256

if.then.255:                                      ; preds = %if.else.252
  %225 = load i32, i32* %im, align 4
  store i32 %225, i32* %miniim, align 4
  %226 = load i32, i32* %i, align 4
  store i32 %226, i32* %maxiim, align 4
  %227 = load i32, i32* %i, align 4
  store i32 %227, i32* %minijm, align 4
  %228 = load i32, i32* %jm, align 4
  store i32 %228, i32* %maxijm, align 4
  br label %if.end.257

if.else.256:                                      ; preds = %if.else.252
  %229 = load i32, i32* %im, align 4
  store i32 %229, i32* %miniim, align 4
  %230 = load i32, i32* %i, align 4
  store i32 %230, i32* %maxiim, align 4
  %231 = load i32, i32* %jm, align 4
  store i32 %231, i32* %minijm, align 4
  %232 = load i32, i32* %i, align 4
  store i32 %232, i32* %maxijm, align 4
  br label %if.end.257

if.end.257:                                       ; preds = %if.else.256, %if.then.255
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.257, %if.then.251
  %233 = load i32, i32* %maxiim, align 4
  %234 = load i32, i32* %miniim, align 4
  %sub259 = sub nsw i32 %233, %234
  %idxprom260 = sext i32 %sub259 to i64
  %235 = load i32, i32* %miniim, align 4
  %idxprom261 = sext i32 %235 to i64
  %236 = load float**, float*** %eff.addr, align 8
  %arrayidx262 = getelementptr inbounds float*, float** %236, i64 %idxprom261
  %237 = load float*, float** %arrayidx262, align 8
  %arrayidx263 = getelementptr inbounds float, float* %237, i64 %idxprom260
  %238 = load float, float* %arrayidx263, align 4
  store float %238, float* %eff0, align 4
  %239 = load i32, i32* %maxijm, align 4
  %240 = load i32, i32* %minijm, align 4
  %sub264 = sub nsw i32 %239, %240
  %idxprom265 = sext i32 %sub264 to i64
  %241 = load i32, i32* %minijm, align 4
  %idxprom266 = sext i32 %241 to i64
  %242 = load float**, float*** %eff.addr, align 8
  %arrayidx267 = getelementptr inbounds float*, float** %242, i64 %idxprom266
  %243 = load float*, float** %arrayidx267, align 8
  %arrayidx268 = getelementptr inbounds float, float* %243, i64 %idxprom265
  %244 = load float, float* %arrayidx268, align 4
  store float %244, float* %eff1, align 4
  %arrayidx269 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  %245 = load float (float, float)*, float (float, float)** %arrayidx269, align 8
  %246 = load float, float* %eff0, align 4
  %247 = load float, float* %eff1, align 4
  %call270 = call float %245(float %246, float %247)
  %248 = load i32, i32* %maxiim, align 4
  %249 = load i32, i32* %miniim, align 4
  %sub271 = sub nsw i32 %248, %249
  %idxprom272 = sext i32 %sub271 to i64
  %250 = load i32, i32* %miniim, align 4
  %idxprom273 = sext i32 %250 to i64
  %251 = load float**, float*** %eff.addr, align 8
  %arrayidx274 = getelementptr inbounds float*, float** %251, i64 %idxprom273
  %252 = load float*, float** %arrayidx274, align 8
  %arrayidx275 = getelementptr inbounds float, float* %252, i64 %idxprom272
  store float %call270, float* %arrayidx275, align 4
  br label %if.end.276

if.end.276:                                       ; preds = %if.end.258, %land.lhs.true, %for.body.242
  br label %for.inc.277

for.inc.277:                                      ; preds = %if.end.276
  %253 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next278 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %253, i32 0, i32 0
  %254 = load %struct._Bchain*, %struct._Bchain** %next278, align 8
  store %struct._Bchain* %254, %struct._Bchain** %acpti, align 8
  br label %for.cond.239

for.end.279:                                      ; preds = %for.cond.239
  %255 = load i8*, i8** @loadtop.treetmp, align 8
  %256 = load i32, i32* %im, align 4
  %idxprom280 = sext i32 %256 to i64
  %257 = load i8**, i8*** @loadtop.tree, align 8
  %arrayidx281 = getelementptr inbounds i8*, i8** %257, i64 %idxprom280
  %258 = load i8*, i8** %arrayidx281, align 8
  %259 = load i32, i32* %k, align 4
  %idxprom282 = sext i32 %259 to i64
  %260 = load float**, float*** %len.addr, align 8
  %arrayidx283 = getelementptr inbounds float*, float** %260, i64 %idxprom282
  %261 = load float*, float** %arrayidx283, align 8
  %arrayidx284 = getelementptr inbounds float, float* %261, i64 0
  %262 = load float, float* %arrayidx284, align 4
  %conv285 = fpext float %262 to double
  %263 = load i32, i32* %jm, align 4
  %idxprom286 = sext i32 %263 to i64
  %264 = load i8**, i8*** @loadtop.tree, align 8
  %arrayidx287 = getelementptr inbounds i8*, i8** %264, i64 %idxprom286
  %265 = load i8*, i8** %arrayidx287, align 8
  %266 = load i32, i32* %k, align 4
  %idxprom288 = sext i32 %266 to i64
  %267 = load float**, float*** %len.addr, align 8
  %arrayidx289 = getelementptr inbounds float*, float** %267, i64 %idxprom288
  %268 = load float*, float** %arrayidx289, align 8
  %arrayidx290 = getelementptr inbounds float, float* %268, i64 1
  %269 = load float, float* %arrayidx290, align 4
  %conv291 = fpext float %269 to double
  %call292 = call i32 (i8*, i8*, ...) @sprintf(i8* %255, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* %258, double %conv285, i8* %265, double %conv291) #8
  %270 = load i32, i32* %im, align 4
  %idxprom293 = sext i32 %270 to i64
  %271 = load i8**, i8*** @loadtop.tree, align 8
  %arrayidx294 = getelementptr inbounds i8*, i8** %271, i64 %idxprom293
  %272 = load i8*, i8** %arrayidx294, align 8
  %273 = load i8*, i8** @loadtop.treetmp, align 8
  %call295 = call i8* @strcpy(i8* %272, i8* %273) #8
  %274 = load i32, i32* %jm, align 4
  %idxprom296 = sext i32 %274 to i64
  %275 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %arrayidx297 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %275, i64 %idxprom296
  %prev298 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx297, i32 0, i32 1
  %276 = load %struct._Bchain*, %struct._Bchain** %prev298, align 8
  store %struct._Bchain* %276, %struct._Bchain** %acjmprev, align 8
  %277 = load i32, i32* %jm, align 4
  %idxprom299 = sext i32 %277 to i64
  %278 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %arrayidx300 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %278, i64 %idxprom299
  %next301 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx300, i32 0, i32 0
  %279 = load %struct._Bchain*, %struct._Bchain** %next301, align 8
  store %struct._Bchain* %279, %struct._Bchain** %acjmnext, align 8
  %280 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %281 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %next302 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %281, i32 0, i32 0
  store %struct._Bchain* %280, %struct._Bchain** %next302, align 8
  %282 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %cmp303 = icmp ne %struct._Bchain* %282, null
  br i1 %cmp303, label %if.then.305, label %if.end.307

if.then.305:                                      ; preds = %for.end.279
  %283 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %284 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %prev306 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %284, i32 0, i32 1
  store %struct._Bchain* %283, %struct._Bchain** %prev306, align 8
  br label %if.end.307

if.end.307:                                       ; preds = %if.then.305, %for.end.279
  %285 = load i32, i32* %jm, align 4
  %idxprom308 = sext i32 %285 to i64
  %286 = load float**, float*** %eff.addr, align 8
  %arrayidx309 = getelementptr inbounds float*, float** %286, i64 %idxprom308
  %287 = load float*, float** %arrayidx309, align 8
  %288 = bitcast float* %287 to i8*
  call void @free(i8* %288) #8
  %289 = load i32, i32* %jm, align 4
  %idxprom310 = sext i32 %289 to i64
  %290 = load float**, float*** %eff.addr, align 8
  %arrayidx311 = getelementptr inbounds float*, float** %290, i64 %idxprom310
  store float* null, float** %arrayidx311, align 8
  br label %for.inc.312

for.inc.312:                                      ; preds = %if.end.307
  %291 = load i32, i32* %k, align 4
  %inc313 = add nsw i32 %291, 1
  store i32 %inc313, i32* %k, align 4
  br label %for.cond.71

for.end.314:                                      ; preds = %for.cond.71
  %292 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call315 = call i32 @fclose(%struct._IO_FILE* %292)
  %call316 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store %struct._IO_FILE* %call316, %struct._IO_FILE** %fp, align 8
  %293 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %294 = load i8*, i8** @loadtop.treetmp, align 8
  %call317 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %293, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %294)
  %295 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call318 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %295, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0))
  %296 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call319 = call i32 @fclose(%struct._IO_FILE* %296)
  %297 = load float*, float** @loadtop.tmptmplen, align 8
  %298 = bitcast float* %297 to i8*
  call void @free(i8* %298) #8
  store float* null, float** @loadtop.tmptmplen, align 8
  %299 = load i32*, i32** @loadtop.hist, align 8
  %300 = bitcast i32* %299 to i8*
  call void @free(i8* %300) #8
  store i32* null, i32** @loadtop.hist, align 8
  %301 = load %struct._Bchain*, %struct._Bchain** @loadtop.ac, align 8
  %302 = bitcast %struct._Bchain* %301 to i8*
  call void @free(i8* %302) #8
  store %struct._Bchain* null, %struct._Bchain** @loadtop.ac, align 8
  %303 = load i32*, i32** @loadtop.nmemar, align 8
  %304 = bitcast i32* %303 to i8*
  call void @free(i8* %304) #8
  store i32* null, i32** @loadtop.nmemar, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal float @cluster_mix_float(float %d1, float %d2) #0 {
entry:
  %d1.addr = alloca float, align 4
  %d2.addr = alloca float, align 4
  store float %d1, float* %d1.addr, align 4
  store float %d2, float* %d2.addr, align 4
  %0 = load float, float* %d1.addr, align 4
  %1 = load float, float* %d2.addr, align 4
  %cmp = fcmp olt float %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load float, float* %d1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load float, float* %d2.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ]
  %4 = load float, float* @sueff1, align 4
  %mul = fmul float %cond, %4
  %5 = load float, float* %d1.addr, align 4
  %6 = load float, float* %d2.addr, align 4
  %add = fadd float %5, %6
  %7 = load float, float* @sueff05, align 4
  %mul1 = fmul float %add, %7
  %add2 = fadd float %mul, %mul1
  ret float %add2
}

; Function Attrs: nounwind uwtable
define internal float @cluster_average_float(float %d1, float %d2) #0 {
entry:
  %d1.addr = alloca float, align 4
  %d2.addr = alloca float, align 4
  store float %d1, float* %d1.addr, align 4
  store float %d2, float* %d2.addr, align 4
  %0 = load float, float* %d1.addr, align 4
  %1 = load float, float* %d2.addr, align 4
  %add = fadd float %0, %1
  %conv = fpext float %add to double
  %mul = fmul double %conv, 5.000000e-01
  %conv1 = fptrunc double %mul to float
  ret float %conv1
}

; Function Attrs: nounwind uwtable
define internal float @cluster_minimum_float(float %d1, float %d2) #0 {
entry:
  %d1.addr = alloca float, align 4
  %d2.addr = alloca float, align 4
  store float %d1, float* %d1.addr, align 4
  store float %d2, float* %d2.addr, align 4
  %0 = load float, float* %d1.addr, align 4
  %1 = load float, float* %d2.addr, align 4
  %cmp = fcmp olt float %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load float, float* %d1.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load float, float* %d2.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %2, %cond.true ], [ %3, %cond.false ]
  ret float %cond
}

; Function Attrs: nounwind uwtable
define void @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout(i32 %nseq, float** %eff, i32*** %topol, float** %len, i8** %name, i32* %nlen) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca float**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca float**, align 8
  %name.addr = alloca i8**, align 8
  %nlen.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %tmpfloat = alloca float, align 4
  %eff1 = alloca float, align 4
  %eff0 = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %acjmnext = alloca %struct._Bchain*, align 8
  %acjmprev = alloca %struct._Bchain*, align 8
  %prevnode = alloca i32, align 4
  %acpti = alloca %struct._Bchain*, align 8
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %nmemim = alloca i32, align 4
  %nmemjm = alloca i32, align 4
  %minscore = alloca float, align 4
  %nearest = alloca i32*, align 8
  %mindisfrom = alloca float*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %clusterfuncpt = alloca [1 x float (float, float)*], align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store float** %eff, float*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store float** %len, float*** %len.addr, align 8
  store i8** %name, i8*** %name.addr, align 8
  store i32* %nlen, i32** %nlen.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store i32* null, i32** %nearest, align 8
  store float* null, float** %mindisfrom, align 8
  store float 0x3FECCCCCC0000000, float* @sueff1, align 4
  store float 0x3FA99999A0000000, float* @sueff05, align 4
  %0 = load i32, i32* @treemethod, align 4
  %cmp = icmp eq i32 %0, 88
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_mix_float, float (float, float)** %arrayidx, align 8
  br label %if.end.10

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @treemethod, align 4
  %cmp1 = icmp eq i32 %1, 69
  br i1 %cmp1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %arrayidx3 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_average_float, float (float, float)** %arrayidx3, align 8
  br label %if.end.9

if.else.4:                                        ; preds = %if.else
  %2 = load i32, i32* @treemethod, align 4
  %cmp5 = icmp eq i32 %2, 113
  br i1 %cmp5, label %if.then.6, label %if.else.8

if.then.6:                                        ; preds = %if.else.4
  %arrayidx7 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_minimum_float, float (float, float)** %arrayidx7, align 8
  br label %if.end

if.else.8:                                        ; preds = %if.else.4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load i32, i32* @treemethod, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i32 %4)
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %if.then.6
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then.2
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.then
  %5 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %tobool = icmp ne i32* %5, null
  br i1 %tobool, label %if.end.23, label %if.then.11

if.then.11:                                       ; preds = %if.end.10
  %6 = load i32, i32* @njob, align 4
  %call12 = call i32* @AllocateIntVec(i32 %6)
  store i32* %call12, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %7 = load i32, i32* @njob, align 4
  %call13 = call float* @AllocateFloatVec(i32 %7)
  store float* %call13, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %8 = load i32, i32* @njob, align 4
  %conv = sext i32 %8 to i64
  %mul = mul i64 %conv, 24
  %call14 = call noalias i8* @malloc(i64 %mul) #8
  %9 = bitcast i8* %call14 to %struct._Bchain*
  store %struct._Bchain* %9, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %10 = load i32, i32* @njob, align 4
  %call15 = call i32* @AllocateIntVec(i32 %10)
  store i32* %call15, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %11 = load i32, i32* @njob, align 4
  %call16 = call float* @AllocateFloatVec(i32 %11)
  store float* %call16, float** %mindisfrom, align 8
  %12 = load i32, i32* @njob, align 4
  %call17 = call i32* @AllocateIntVec(i32 %12)
  store i32* %call17, i32** %nearest, align 8
  %13 = load i32, i32* @njob, align 4
  %mul18 = mul nsw i32 %13, 50
  %call19 = call i8* @AllocateCharVec(i32 %mul18)
  store i8* %call19, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.treetmp, align 8
  %call20 = call i8* @AllocateCharVec(i32 30)
  store i8* %call20, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  %14 = load i32, i32* @njob, align 4
  %15 = load i32, i32* @njob, align 4
  %mul21 = mul nsw i32 %15, 50
  %call22 = call i8** @AllocateCharMtx(i32 %14, i32 %mul21)
  store i8** %call22, i8*** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.11, %if.end.10
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.63, %if.end.23
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %nseq.addr, align 4
  %cmp24 = icmp slt i32 %16, %17
  br i1 %cmp24, label %for.body, label %for.end.65

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc, %for.body
  %18 = load i32, i32* %j, align 4
  %cmp27 = icmp slt i32 %18, 30
  br i1 %cmp27, label %for.body.29, label %for.end

for.body.29:                                      ; preds = %for.cond.26
  %19 = load i32, i32* %j, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %20, i64 %idxprom
  store i8 0, i8* %arrayidx30, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body.29
  %21 = load i32, i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.26

for.end:                                          ; preds = %for.cond.26
  store i32 0, i32* %j, align 4
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.56, %for.end
  %22 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %22, 30
  br i1 %cmp32, label %for.body.34, label %for.end.58

for.body.34:                                      ; preds = %for.cond.31
  %23 = load i32, i32* %j, align 4
  %idxprom35 = sext i32 %23 to i64
  %24 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %24 to i64
  %25 = load i8**, i8*** %name.addr, align 8
  %arrayidx37 = getelementptr inbounds i8*, i8** %25, i64 %idxprom36
  %26 = load i8*, i8** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds i8, i8* %26, i64 %idxprom35
  %27 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %27 to i32
  %idxprom40 = sext i32 %conv39 to i64
  %call41 = call i16** @__ctype_b_loc() #9
  %28 = load i16*, i16** %call41, align 8
  %arrayidx42 = getelementptr inbounds i16, i16* %28, i64 %idxprom40
  %29 = load i16, i16* %arrayidx42, align 2
  %conv43 = zext i16 %29 to i32
  %and = and i32 %conv43, 8
  %tobool44 = icmp ne i32 %and, 0
  br i1 %tobool44, label %if.then.45, label %if.else.52

if.then.45:                                       ; preds = %for.body.34
  %30 = load i32, i32* %j, align 4
  %idxprom46 = sext i32 %30 to i64
  %31 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %31 to i64
  %32 = load i8**, i8*** %name.addr, align 8
  %arrayidx48 = getelementptr inbounds i8*, i8** %32, i64 %idxprom47
  %33 = load i8*, i8** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %33, i64 %idxprom46
  %34 = load i8, i8* %arrayidx49, align 1
  %35 = load i32, i32* %j, align 4
  %idxprom50 = sext i32 %35 to i64
  %36 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  %arrayidx51 = getelementptr inbounds i8, i8* %36, i64 %idxprom50
  store i8 %34, i8* %arrayidx51, align 1
  br label %if.end.55

if.else.52:                                       ; preds = %for.body.34
  %37 = load i32, i32* %j, align 4
  %idxprom53 = sext i32 %37 to i64
  %38 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %38, i64 %idxprom53
  store i8 95, i8* %arrayidx54, align 1
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.45
  br label %for.inc.56

for.inc.56:                                       ; preds = %if.end.55
  %39 = load i32, i32* %j, align 4
  %inc57 = add nsw i32 %39, 1
  store i32 %inc57, i32* %j, align 4
  br label %for.cond.31

for.end.58:                                       ; preds = %for.cond.31
  %40 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  %arrayidx59 = getelementptr inbounds i8, i8* %40, i64 30
  store i8 0, i8* %arrayidx59, align 1
  %41 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %41 to i64
  %42 = load i8**, i8*** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree, align 8
  %arrayidx61 = getelementptr inbounds i8*, i8** %42, i64 %idxprom60
  %43 = load i8*, i8** %arrayidx61, align 8
  %44 = load i32, i32* %i, align 4
  %add = add nsw i32 %44, 1
  %45 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 1
  %call62 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i32 %add, i8* %add.ptr) #8
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.end.58
  %46 = load i32, i32* %i, align 4
  %inc64 = add nsw i32 %46, 1
  store i32 %inc64, i32* %i, align 4
  br label %for.cond

for.end.65:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.81, %for.end.65
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %nseq.addr, align 4
  %cmp67 = icmp slt i32 %47, %48
  br i1 %cmp67, label %for.body.69, label %for.end.83

for.body.69:                                      ; preds = %for.cond.66
  %49 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %50 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %50 to i64
  %add.ptr70 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %49, i64 %idx.ext
  %add.ptr71 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr70, i64 1
  %51 = load i32, i32* %i, align 4
  %idxprom72 = sext i32 %51 to i64
  %52 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %arrayidx73 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %52, i64 %idxprom72
  %next = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx73, i32 0, i32 0
  store %struct._Bchain* %add.ptr71, %struct._Bchain** %next, align 8
  %53 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %54 = load i32, i32* %i, align 4
  %idx.ext74 = sext i32 %54 to i64
  %add.ptr75 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %53, i64 %idx.ext74
  %add.ptr76 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr75, i64 -1
  %55 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %55 to i64
  %56 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %arrayidx78 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %56, i64 %idxprom77
  %prev = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx78, i32 0, i32 1
  store %struct._Bchain* %add.ptr76, %struct._Bchain** %prev, align 8
  %57 = load i32, i32* %i, align 4
  %58 = load i32, i32* %i, align 4
  %idxprom79 = sext i32 %58 to i64
  %59 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %arrayidx80 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %59, i64 %idxprom79
  %pos = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx80, i32 0, i32 2
  store i32 %57, i32* %pos, align 4
  br label %for.inc.81

for.inc.81:                                       ; preds = %for.body.69
  %60 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %60, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond.66

for.end.83:                                       ; preds = %for.cond.66
  %61 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %61, 1
  %idxprom84 = sext i32 %sub to i64
  %62 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %arrayidx85 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %62, i64 %idxprom84
  %next86 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx85, i32 0, i32 0
  store %struct._Bchain* null, %struct._Bchain** %next86, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.87

for.cond.87:                                      ; preds = %for.inc.95, %for.end.83
  %63 = load i32, i32* %i, align 4
  %64 = load i32, i32* %nseq.addr, align 4
  %cmp88 = icmp slt i32 %63, %64
  br i1 %cmp88, label %for.body.90, label %for.end.97

for.body.90:                                      ; preds = %for.cond.87
  %65 = load i32, i32* %nseq.addr, align 4
  %66 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %67 = load float**, float*** %eff.addr, align 8
  %68 = load float*, float** %mindisfrom, align 8
  %69 = load i32, i32* %i, align 4
  %idx.ext91 = sext i32 %69 to i64
  %add.ptr92 = getelementptr inbounds float, float* %68, i64 %idx.ext91
  %70 = load i32*, i32** %nearest, align 8
  %71 = load i32, i32* %i, align 4
  %idx.ext93 = sext i32 %71 to i64
  %add.ptr94 = getelementptr inbounds i32, i32* %70, i64 %idx.ext93
  %72 = load i32, i32* %i, align 4
  call void @setnearest(i32 %65, %struct._Bchain* %66, float** %67, float* %add.ptr92, i32* %add.ptr94, i32 %72)
  br label %for.inc.95

for.inc.95:                                       ; preds = %for.body.90
  %73 = load i32, i32* %i, align 4
  %inc96 = add nsw i32 %73, 1
  store i32 %inc96, i32* %i, align 4
  br label %for.cond.87

for.end.97:                                       ; preds = %for.cond.87
  store i32 0, i32* %i, align 4
  br label %for.cond.98

for.cond.98:                                      ; preds = %for.inc.104, %for.end.97
  %74 = load i32, i32* %i, align 4
  %75 = load i32, i32* %nseq.addr, align 4
  %cmp99 = icmp slt i32 %74, %75
  br i1 %cmp99, label %for.body.101, label %for.end.106

for.body.101:                                     ; preds = %for.cond.98
  %76 = load i32, i32* %i, align 4
  %idxprom102 = sext i32 %76 to i64
  %77 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %arrayidx103 = getelementptr inbounds float, float* %77, i64 %idxprom102
  store float 0.000000e+00, float* %arrayidx103, align 4
  br label %for.inc.104

for.inc.104:                                      ; preds = %for.body.101
  %78 = load i32, i32* %i, align 4
  %inc105 = add nsw i32 %78, 1
  store i32 %inc105, i32* %i, align 4
  br label %for.cond.98

for.end.106:                                      ; preds = %for.cond.98
  store i32 0, i32* %i, align 4
  br label %for.cond.107

for.cond.107:                                     ; preds = %for.inc.115, %for.end.106
  %79 = load i32, i32* %i, align 4
  %80 = load i32, i32* %nseq.addr, align 4
  %cmp108 = icmp slt i32 %79, %80
  br i1 %cmp108, label %for.body.110, label %for.end.117

for.body.110:                                     ; preds = %for.cond.107
  %81 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %81 to i64
  %82 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %arrayidx112 = getelementptr inbounds i32, i32* %82, i64 %idxprom111
  store i32 -1, i32* %arrayidx112, align 4
  %83 = load i32, i32* %i, align 4
  %idxprom113 = sext i32 %83 to i64
  %84 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %arrayidx114 = getelementptr inbounds i32, i32* %84, i64 %idxprom113
  store i32 1, i32* %arrayidx114, align 4
  br label %for.inc.115

for.inc.115:                                      ; preds = %for.body.110
  %85 = load i32, i32* %i, align 4
  %inc116 = add nsw i32 %85, 1
  store i32 %inc116, i32* %i, align 4
  br label %for.cond.107

for.end.117:                                      ; preds = %for.cond.107
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.119

for.cond.119:                                     ; preds = %for.inc.388, %for.end.117
  %87 = load i32, i32* %k, align 4
  %88 = load i32, i32* %nseq.addr, align 4
  %sub120 = sub nsw i32 %88, 1
  %cmp121 = icmp slt i32 %87, %sub120
  br i1 %cmp121, label %for.body.123, label %for.end.390

for.body.123:                                     ; preds = %for.cond.119
  %89 = load i32, i32* %k, align 4
  %rem = srem i32 %89, 10
  %cmp124 = icmp eq i32 %rem, 0
  br i1 %cmp124, label %if.then.126, label %if.end.128

if.then.126:                                      ; preds = %for.body.123
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %91 = load i32, i32* %k, align 4
  %92 = load i32, i32* %nseq.addr, align 4
  %call127 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i32 0, i32 0), i32 %91, i32 %92)
  br label %if.end.128

if.end.128:                                       ; preds = %if.then.126, %for.body.123
  store float 0x408F3F3340000000, float* %minscore, align 4
  %93 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  store %struct._Bchain* %93, %struct._Bchain** %acpti, align 8
  br label %for.cond.129

for.cond.129:                                     ; preds = %for.inc.143, %if.end.128
  %94 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next130 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %94, i32 0, i32 0
  %95 = load %struct._Bchain*, %struct._Bchain** %next130, align 8
  %cmp131 = icmp ne %struct._Bchain* %95, null
  br i1 %cmp131, label %for.body.133, label %for.end.145

for.body.133:                                     ; preds = %for.cond.129
  %96 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos134 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %96, i32 0, i32 2
  %97 = load i32, i32* %pos134, align 4
  store i32 %97, i32* %i, align 4
  %98 = load i32, i32* %i, align 4
  %idxprom135 = sext i32 %98 to i64
  %99 = load float*, float** %mindisfrom, align 8
  %arrayidx136 = getelementptr inbounds float, float* %99, i64 %idxprom135
  %100 = load float, float* %arrayidx136, align 4
  %101 = load float, float* %minscore, align 4
  %cmp137 = fcmp olt float %100, %101
  br i1 %cmp137, label %if.then.139, label %if.end.142

if.then.139:                                      ; preds = %for.body.133
  %102 = load i32, i32* %i, align 4
  store i32 %102, i32* %im, align 4
  %103 = load i32, i32* %i, align 4
  %idxprom140 = sext i32 %103 to i64
  %104 = load float*, float** %mindisfrom, align 8
  %arrayidx141 = getelementptr inbounds float, float* %104, i64 %idxprom140
  %105 = load float, float* %arrayidx141, align 4
  store float %105, float* %minscore, align 4
  br label %if.end.142

if.end.142:                                       ; preds = %if.then.139, %for.body.133
  br label %for.inc.143

for.inc.143:                                      ; preds = %if.end.142
  %106 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next144 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %106, i32 0, i32 0
  %107 = load %struct._Bchain*, %struct._Bchain** %next144, align 8
  store %struct._Bchain* %107, %struct._Bchain** %acpti, align 8
  br label %for.cond.129

for.end.145:                                      ; preds = %for.cond.129
  %108 = load i32, i32* %im, align 4
  %idxprom146 = sext i32 %108 to i64
  %109 = load i32*, i32** %nearest, align 8
  %arrayidx147 = getelementptr inbounds i32, i32* %109, i64 %idxprom146
  %110 = load i32, i32* %arrayidx147, align 4
  store i32 %110, i32* %jm, align 4
  %111 = load i32, i32* %jm, align 4
  %112 = load i32, i32* %im, align 4
  %cmp148 = icmp slt i32 %111, %112
  br i1 %cmp148, label %if.then.150, label %if.end.151

if.then.150:                                      ; preds = %for.end.145
  %113 = load i32, i32* %jm, align 4
  store i32 %113, i32* %j, align 4
  %114 = load i32, i32* %im, align 4
  store i32 %114, i32* %jm, align 4
  %115 = load i32, i32* %j, align 4
  store i32 %115, i32* %im, align 4
  br label %if.end.151

if.end.151:                                       ; preds = %if.then.150, %for.end.145
  %116 = load i32, i32* %im, align 4
  %idxprom152 = sext i32 %116 to i64
  %117 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %arrayidx153 = getelementptr inbounds i32, i32* %117, i64 %idxprom152
  %118 = load i32, i32* %arrayidx153, align 4
  store i32 %118, i32* %prevnode, align 4
  %119 = load i32, i32* %im, align 4
  %idxprom154 = sext i32 %119 to i64
  %120 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %arrayidx155 = getelementptr inbounds i32, i32* %120, i64 %idxprom154
  %121 = load i32, i32* %arrayidx155, align 4
  store i32 %121, i32* %nmemim, align 4
  %122 = load i32, i32* %k, align 4
  %idxprom156 = sext i32 %122 to i64
  %123 = load i32***, i32**** %topol.addr, align 8
  %arrayidx157 = getelementptr inbounds i32**, i32*** %123, i64 %idxprom156
  %124 = load i32**, i32*** %arrayidx157, align 8
  %arrayidx158 = getelementptr inbounds i32*, i32** %124, i64 0
  %125 = load i32*, i32** %arrayidx158, align 8
  %126 = bitcast i32* %125 to i8*
  %127 = load i32, i32* %nmemim, align 4
  %add159 = add nsw i32 %127, 1
  %conv160 = sext i32 %add159 to i64
  %mul161 = mul i64 %conv160, 4
  %call162 = call i8* @realloc(i8* %126, i64 %mul161) #8
  %128 = bitcast i8* %call162 to i32*
  %129 = load i32, i32* %k, align 4
  %idxprom163 = sext i32 %129 to i64
  %130 = load i32***, i32**** %topol.addr, align 8
  %arrayidx164 = getelementptr inbounds i32**, i32*** %130, i64 %idxprom163
  %131 = load i32**, i32*** %arrayidx164, align 8
  %arrayidx165 = getelementptr inbounds i32*, i32** %131, i64 0
  store i32* %128, i32** %arrayidx165, align 8
  store i32* %128, i32** %intpt, align 8
  %132 = load i32, i32* %prevnode, align 4
  %cmp166 = icmp eq i32 %132, -1
  br i1 %cmp166, label %if.then.168, label %if.else.169

if.then.168:                                      ; preds = %if.end.151
  %133 = load i32, i32* %im, align 4
  %134 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %134, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %133, i32* %134, align 4
  %135 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %135, align 4
  br label %if.end.195

if.else.169:                                      ; preds = %if.end.151
  %136 = load i32, i32* %prevnode, align 4
  %idxprom170 = sext i32 %136 to i64
  %137 = load i32***, i32**** %topol.addr, align 8
  %arrayidx171 = getelementptr inbounds i32**, i32*** %137, i64 %idxprom170
  %138 = load i32**, i32*** %arrayidx171, align 8
  %arrayidx172 = getelementptr inbounds i32*, i32** %138, i64 0
  %139 = load i32*, i32** %arrayidx172, align 8
  store i32* %139, i32** %pt1, align 8
  %140 = load i32, i32* %prevnode, align 4
  %idxprom173 = sext i32 %140 to i64
  %141 = load i32***, i32**** %topol.addr, align 8
  %arrayidx174 = getelementptr inbounds i32**, i32*** %141, i64 %idxprom173
  %142 = load i32**, i32*** %arrayidx174, align 8
  %arrayidx175 = getelementptr inbounds i32*, i32** %142, i64 1
  %143 = load i32*, i32** %arrayidx175, align 8
  store i32* %143, i32** %pt2, align 8
  %144 = load i32*, i32** %pt1, align 8
  %145 = load i32, i32* %144, align 4
  %146 = load i32*, i32** %pt2, align 8
  %147 = load i32, i32* %146, align 4
  %cmp176 = icmp sgt i32 %145, %147
  br i1 %cmp176, label %if.then.178, label %if.else.179

if.then.178:                                      ; preds = %if.else.169
  %148 = load i32*, i32** %pt2, align 8
  store i32* %148, i32** %pt11, align 8
  %149 = load i32*, i32** %pt1, align 8
  store i32* %149, i32** %pt22, align 8
  br label %if.end.180

if.else.179:                                      ; preds = %if.else.169
  %150 = load i32*, i32** %pt1, align 8
  store i32* %150, i32** %pt11, align 8
  %151 = load i32*, i32** %pt2, align 8
  store i32* %151, i32** %pt22, align 8
  br label %if.end.180

if.end.180:                                       ; preds = %if.else.179, %if.then.178
  %152 = load i32*, i32** %pt11, align 8
  store i32* %152, i32** %intpt2, align 8
  br label %for.cond.181

for.cond.181:                                     ; preds = %for.body.184, %if.end.180
  %153 = load i32*, i32** %intpt2, align 8
  %154 = load i32, i32* %153, align 4
  %cmp182 = icmp ne i32 %154, -1
  br i1 %cmp182, label %for.body.184, label %for.end.187

for.body.184:                                     ; preds = %for.cond.181
  %155 = load i32*, i32** %intpt2, align 8
  %incdec.ptr185 = getelementptr inbounds i32, i32* %155, i32 1
  store i32* %incdec.ptr185, i32** %intpt2, align 8
  %156 = load i32, i32* %155, align 4
  %157 = load i32*, i32** %intpt, align 8
  %incdec.ptr186 = getelementptr inbounds i32, i32* %157, i32 1
  store i32* %incdec.ptr186, i32** %intpt, align 8
  store i32 %156, i32* %157, align 4
  br label %for.cond.181

for.end.187:                                      ; preds = %for.cond.181
  %158 = load i32*, i32** %pt22, align 8
  store i32* %158, i32** %intpt2, align 8
  br label %for.cond.188

for.cond.188:                                     ; preds = %for.body.191, %for.end.187
  %159 = load i32*, i32** %intpt2, align 8
  %160 = load i32, i32* %159, align 4
  %cmp189 = icmp ne i32 %160, -1
  br i1 %cmp189, label %for.body.191, label %for.end.194

for.body.191:                                     ; preds = %for.cond.188
  %161 = load i32*, i32** %intpt2, align 8
  %incdec.ptr192 = getelementptr inbounds i32, i32* %161, i32 1
  store i32* %incdec.ptr192, i32** %intpt2, align 8
  %162 = load i32, i32* %161, align 4
  %163 = load i32*, i32** %intpt, align 8
  %incdec.ptr193 = getelementptr inbounds i32, i32* %163, i32 1
  store i32* %incdec.ptr193, i32** %intpt, align 8
  store i32 %162, i32* %163, align 4
  br label %for.cond.188

for.end.194:                                      ; preds = %for.cond.188
  %164 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %164, align 4
  br label %if.end.195

if.end.195:                                       ; preds = %for.end.194, %if.then.168
  %165 = load i32, i32* %jm, align 4
  %idxprom196 = sext i32 %165 to i64
  %166 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %arrayidx197 = getelementptr inbounds i32, i32* %166, i64 %idxprom196
  %167 = load i32, i32* %arrayidx197, align 4
  store i32 %167, i32* %prevnode, align 4
  %168 = load i32, i32* %jm, align 4
  %idxprom198 = sext i32 %168 to i64
  %169 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %arrayidx199 = getelementptr inbounds i32, i32* %169, i64 %idxprom198
  %170 = load i32, i32* %arrayidx199, align 4
  store i32 %170, i32* %nmemjm, align 4
  %171 = load i32, i32* %k, align 4
  %idxprom200 = sext i32 %171 to i64
  %172 = load i32***, i32**** %topol.addr, align 8
  %arrayidx201 = getelementptr inbounds i32**, i32*** %172, i64 %idxprom200
  %173 = load i32**, i32*** %arrayidx201, align 8
  %arrayidx202 = getelementptr inbounds i32*, i32** %173, i64 1
  %174 = load i32*, i32** %arrayidx202, align 8
  %175 = bitcast i32* %174 to i8*
  %176 = load i32, i32* %nmemjm, align 4
  %add203 = add nsw i32 %176, 1
  %conv204 = sext i32 %add203 to i64
  %mul205 = mul i64 %conv204, 4
  %call206 = call i8* @realloc(i8* %175, i64 %mul205) #8
  %177 = bitcast i8* %call206 to i32*
  %178 = load i32, i32* %k, align 4
  %idxprom207 = sext i32 %178 to i64
  %179 = load i32***, i32**** %topol.addr, align 8
  %arrayidx208 = getelementptr inbounds i32**, i32*** %179, i64 %idxprom207
  %180 = load i32**, i32*** %arrayidx208, align 8
  %arrayidx209 = getelementptr inbounds i32*, i32** %180, i64 1
  store i32* %177, i32** %arrayidx209, align 8
  store i32* %177, i32** %intpt, align 8
  %181 = load i32*, i32** %intpt, align 8
  %tobool210 = icmp ne i32* %181, null
  br i1 %tobool210, label %if.end.213, label %if.then.211

if.then.211:                                      ; preds = %if.end.195
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.213:                                       ; preds = %if.end.195
  %183 = load i32, i32* %prevnode, align 4
  %cmp214 = icmp eq i32 %183, -1
  br i1 %cmp214, label %if.then.216, label %if.else.218

if.then.216:                                      ; preds = %if.end.213
  %184 = load i32, i32* %jm, align 4
  %185 = load i32*, i32** %intpt, align 8
  %incdec.ptr217 = getelementptr inbounds i32, i32* %185, i32 1
  store i32* %incdec.ptr217, i32** %intpt, align 8
  store i32 %184, i32* %185, align 4
  %186 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %186, align 4
  br label %if.end.244

if.else.218:                                      ; preds = %if.end.213
  %187 = load i32, i32* %prevnode, align 4
  %idxprom219 = sext i32 %187 to i64
  %188 = load i32***, i32**** %topol.addr, align 8
  %arrayidx220 = getelementptr inbounds i32**, i32*** %188, i64 %idxprom219
  %189 = load i32**, i32*** %arrayidx220, align 8
  %arrayidx221 = getelementptr inbounds i32*, i32** %189, i64 0
  %190 = load i32*, i32** %arrayidx221, align 8
  store i32* %190, i32** %pt1, align 8
  %191 = load i32, i32* %prevnode, align 4
  %idxprom222 = sext i32 %191 to i64
  %192 = load i32***, i32**** %topol.addr, align 8
  %arrayidx223 = getelementptr inbounds i32**, i32*** %192, i64 %idxprom222
  %193 = load i32**, i32*** %arrayidx223, align 8
  %arrayidx224 = getelementptr inbounds i32*, i32** %193, i64 1
  %194 = load i32*, i32** %arrayidx224, align 8
  store i32* %194, i32** %pt2, align 8
  %195 = load i32*, i32** %pt1, align 8
  %196 = load i32, i32* %195, align 4
  %197 = load i32*, i32** %pt2, align 8
  %198 = load i32, i32* %197, align 4
  %cmp225 = icmp sgt i32 %196, %198
  br i1 %cmp225, label %if.then.227, label %if.else.228

if.then.227:                                      ; preds = %if.else.218
  %199 = load i32*, i32** %pt2, align 8
  store i32* %199, i32** %pt11, align 8
  %200 = load i32*, i32** %pt1, align 8
  store i32* %200, i32** %pt22, align 8
  br label %if.end.229

if.else.228:                                      ; preds = %if.else.218
  %201 = load i32*, i32** %pt1, align 8
  store i32* %201, i32** %pt11, align 8
  %202 = load i32*, i32** %pt2, align 8
  store i32* %202, i32** %pt22, align 8
  br label %if.end.229

if.end.229:                                       ; preds = %if.else.228, %if.then.227
  %203 = load i32*, i32** %pt11, align 8
  store i32* %203, i32** %intpt2, align 8
  br label %for.cond.230

for.cond.230:                                     ; preds = %for.body.233, %if.end.229
  %204 = load i32*, i32** %intpt2, align 8
  %205 = load i32, i32* %204, align 4
  %cmp231 = icmp ne i32 %205, -1
  br i1 %cmp231, label %for.body.233, label %for.end.236

for.body.233:                                     ; preds = %for.cond.230
  %206 = load i32*, i32** %intpt2, align 8
  %incdec.ptr234 = getelementptr inbounds i32, i32* %206, i32 1
  store i32* %incdec.ptr234, i32** %intpt2, align 8
  %207 = load i32, i32* %206, align 4
  %208 = load i32*, i32** %intpt, align 8
  %incdec.ptr235 = getelementptr inbounds i32, i32* %208, i32 1
  store i32* %incdec.ptr235, i32** %intpt, align 8
  store i32 %207, i32* %208, align 4
  br label %for.cond.230

for.end.236:                                      ; preds = %for.cond.230
  %209 = load i32*, i32** %pt22, align 8
  store i32* %209, i32** %intpt2, align 8
  br label %for.cond.237

for.cond.237:                                     ; preds = %for.body.240, %for.end.236
  %210 = load i32*, i32** %intpt2, align 8
  %211 = load i32, i32* %210, align 4
  %cmp238 = icmp ne i32 %211, -1
  br i1 %cmp238, label %for.body.240, label %for.end.243

for.body.240:                                     ; preds = %for.cond.237
  %212 = load i32*, i32** %intpt2, align 8
  %incdec.ptr241 = getelementptr inbounds i32, i32* %212, i32 1
  store i32* %incdec.ptr241, i32** %intpt2, align 8
  %213 = load i32, i32* %212, align 4
  %214 = load i32*, i32** %intpt, align 8
  %incdec.ptr242 = getelementptr inbounds i32, i32* %214, i32 1
  store i32* %incdec.ptr242, i32** %intpt, align 8
  store i32 %213, i32* %214, align 4
  br label %for.cond.237

for.end.243:                                      ; preds = %for.cond.237
  %215 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %215, align 4
  br label %if.end.244

if.end.244:                                       ; preds = %for.end.243, %if.then.216
  %216 = load float, float* %minscore, align 4
  %conv245 = fpext float %216 to double
  %mul246 = fmul double %conv245, 5.000000e-01
  %conv247 = fptrunc double %mul246 to float
  store float %conv247, float* %minscore, align 4
  %217 = load float, float* %minscore, align 4
  %218 = load i32, i32* %im, align 4
  %idxprom248 = sext i32 %218 to i64
  %219 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %arrayidx249 = getelementptr inbounds float, float* %219, i64 %idxprom248
  %220 = load float, float* %arrayidx249, align 4
  %sub250 = fsub float %217, %220
  %221 = load i32, i32* %k, align 4
  %idxprom251 = sext i32 %221 to i64
  %222 = load float**, float*** %len.addr, align 8
  %arrayidx252 = getelementptr inbounds float*, float** %222, i64 %idxprom251
  %223 = load float*, float** %arrayidx252, align 8
  %arrayidx253 = getelementptr inbounds float, float* %223, i64 0
  store float %sub250, float* %arrayidx253, align 4
  %224 = load float, float* %minscore, align 4
  %225 = load i32, i32* %jm, align 4
  %idxprom254 = sext i32 %225 to i64
  %226 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %arrayidx255 = getelementptr inbounds float, float* %226, i64 %idxprom254
  %227 = load float, float* %arrayidx255, align 4
  %sub256 = fsub float %224, %227
  %228 = load i32, i32* %k, align 4
  %idxprom257 = sext i32 %228 to i64
  %229 = load float**, float*** %len.addr, align 8
  %arrayidx258 = getelementptr inbounds float*, float** %229, i64 %idxprom257
  %230 = load float*, float** %arrayidx258, align 8
  %arrayidx259 = getelementptr inbounds float, float* %230, i64 1
  store float %sub256, float* %arrayidx259, align 4
  %231 = load float, float* %minscore, align 4
  %232 = load i32, i32* %im, align 4
  %idxprom260 = sext i32 %232 to i64
  %233 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %arrayidx261 = getelementptr inbounds float, float* %233, i64 %idxprom260
  store float %231, float* %arrayidx261, align 4
  %234 = load i32, i32* %k, align 4
  %235 = load i32, i32* %im, align 4
  %idxprom262 = sext i32 %235 to i64
  %236 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %arrayidx263 = getelementptr inbounds i32, i32* %236, i64 %idxprom262
  store i32 %234, i32* %arrayidx263, align 4
  %237 = load i32, i32* %nmemim, align 4
  %238 = load i32, i32* %nmemjm, align 4
  %add264 = add nsw i32 %237, %238
  %239 = load i32, i32* %im, align 4
  %idxprom265 = sext i32 %239 to i64
  %240 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %arrayidx266 = getelementptr inbounds i32, i32* %240, i64 %idxprom265
  store i32 %add264, i32* %arrayidx266, align 4
  %241 = load i32, i32* %im, align 4
  %idxprom267 = sext i32 %241 to i64
  %242 = load float*, float** %mindisfrom, align 8
  %arrayidx268 = getelementptr inbounds float, float* %242, i64 %idxprom267
  store float 0x408F3F3340000000, float* %arrayidx268, align 4
  %243 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  store %struct._Bchain* %243, %struct._Bchain** %acpti, align 8
  br label %for.cond.269

for.cond.269:                                     ; preds = %for.inc.335, %if.end.244
  %244 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %cmp270 = icmp ne %struct._Bchain* %244, null
  br i1 %cmp270, label %for.body.272, label %for.end.337

for.body.272:                                     ; preds = %for.cond.269
  %245 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos273 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %245, i32 0, i32 2
  %246 = load i32, i32* %pos273, align 4
  store i32 %246, i32* %i, align 4
  %247 = load i32, i32* %i, align 4
  %248 = load i32, i32* %im, align 4
  %cmp274 = icmp ne i32 %247, %248
  br i1 %cmp274, label %land.lhs.true, label %if.end.334

land.lhs.true:                                    ; preds = %for.body.272
  %249 = load i32, i32* %i, align 4
  %250 = load i32, i32* %jm, align 4
  %cmp276 = icmp ne i32 %249, %250
  br i1 %cmp276, label %if.then.278, label %if.end.334

if.then.278:                                      ; preds = %land.lhs.true
  %251 = load i32, i32* %i, align 4
  %252 = load i32, i32* %im, align 4
  %cmp279 = icmp slt i32 %251, %252
  br i1 %cmp279, label %if.then.281, label %if.else.282

if.then.281:                                      ; preds = %if.then.278
  %253 = load i32, i32* %i, align 4
  store i32 %253, i32* %miniim, align 4
  %254 = load i32, i32* %im, align 4
  store i32 %254, i32* %maxiim, align 4
  %255 = load i32, i32* %i, align 4
  store i32 %255, i32* %minijm, align 4
  %256 = load i32, i32* %jm, align 4
  store i32 %256, i32* %maxijm, align 4
  br label %if.end.288

if.else.282:                                      ; preds = %if.then.278
  %257 = load i32, i32* %i, align 4
  %258 = load i32, i32* %jm, align 4
  %cmp283 = icmp slt i32 %257, %258
  br i1 %cmp283, label %if.then.285, label %if.else.286

if.then.285:                                      ; preds = %if.else.282
  %259 = load i32, i32* %im, align 4
  store i32 %259, i32* %miniim, align 4
  %260 = load i32, i32* %i, align 4
  store i32 %260, i32* %maxiim, align 4
  %261 = load i32, i32* %i, align 4
  store i32 %261, i32* %minijm, align 4
  %262 = load i32, i32* %jm, align 4
  store i32 %262, i32* %maxijm, align 4
  br label %if.end.287

if.else.286:                                      ; preds = %if.else.282
  %263 = load i32, i32* %im, align 4
  store i32 %263, i32* %miniim, align 4
  %264 = load i32, i32* %i, align 4
  store i32 %264, i32* %maxiim, align 4
  %265 = load i32, i32* %jm, align 4
  store i32 %265, i32* %minijm, align 4
  %266 = load i32, i32* %i, align 4
  store i32 %266, i32* %maxijm, align 4
  br label %if.end.287

if.end.287:                                       ; preds = %if.else.286, %if.then.285
  br label %if.end.288

if.end.288:                                       ; preds = %if.end.287, %if.then.281
  %267 = load i32, i32* %maxiim, align 4
  %268 = load i32, i32* %miniim, align 4
  %sub289 = sub nsw i32 %267, %268
  %idxprom290 = sext i32 %sub289 to i64
  %269 = load i32, i32* %miniim, align 4
  %idxprom291 = sext i32 %269 to i64
  %270 = load float**, float*** %eff.addr, align 8
  %arrayidx292 = getelementptr inbounds float*, float** %270, i64 %idxprom291
  %271 = load float*, float** %arrayidx292, align 8
  %arrayidx293 = getelementptr inbounds float, float* %271, i64 %idxprom290
  %272 = load float, float* %arrayidx293, align 4
  store float %272, float* %eff0, align 4
  %273 = load i32, i32* %maxijm, align 4
  %274 = load i32, i32* %minijm, align 4
  %sub294 = sub nsw i32 %273, %274
  %idxprom295 = sext i32 %sub294 to i64
  %275 = load i32, i32* %minijm, align 4
  %idxprom296 = sext i32 %275 to i64
  %276 = load float**, float*** %eff.addr, align 8
  %arrayidx297 = getelementptr inbounds float*, float** %276, i64 %idxprom296
  %277 = load float*, float** %arrayidx297, align 8
  %arrayidx298 = getelementptr inbounds float, float* %277, i64 %idxprom295
  %278 = load float, float* %arrayidx298, align 4
  store float %278, float* %eff1, align 4
  %arrayidx299 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  %279 = load float (float, float)*, float (float, float)** %arrayidx299, align 8
  %280 = load float, float* %eff0, align 4
  %281 = load float, float* %eff1, align 4
  %call300 = call float %279(float %280, float %281)
  %282 = load i32, i32* %maxiim, align 4
  %283 = load i32, i32* %miniim, align 4
  %sub301 = sub nsw i32 %282, %283
  %idxprom302 = sext i32 %sub301 to i64
  %284 = load i32, i32* %miniim, align 4
  %idxprom303 = sext i32 %284 to i64
  %285 = load float**, float*** %eff.addr, align 8
  %arrayidx304 = getelementptr inbounds float*, float** %285, i64 %idxprom303
  %286 = load float*, float** %arrayidx304, align 8
  %arrayidx305 = getelementptr inbounds float, float* %286, i64 %idxprom302
  store float %call300, float* %arrayidx305, align 4
  store float %call300, float* %tmpfloat, align 4
  %287 = load float, float* %tmpfloat, align 4
  %288 = load i32, i32* %i, align 4
  %idxprom306 = sext i32 %288 to i64
  %289 = load float*, float** %mindisfrom, align 8
  %arrayidx307 = getelementptr inbounds float, float* %289, i64 %idxprom306
  %290 = load float, float* %arrayidx307, align 4
  %cmp308 = fcmp olt float %287, %290
  br i1 %cmp308, label %if.then.310, label %if.end.315

if.then.310:                                      ; preds = %if.end.288
  %291 = load float, float* %tmpfloat, align 4
  %292 = load i32, i32* %i, align 4
  %idxprom311 = sext i32 %292 to i64
  %293 = load float*, float** %mindisfrom, align 8
  %arrayidx312 = getelementptr inbounds float, float* %293, i64 %idxprom311
  store float %291, float* %arrayidx312, align 4
  %294 = load i32, i32* %im, align 4
  %295 = load i32, i32* %i, align 4
  %idxprom313 = sext i32 %295 to i64
  %296 = load i32*, i32** %nearest, align 8
  %arrayidx314 = getelementptr inbounds i32, i32* %296, i64 %idxprom313
  store i32 %294, i32* %arrayidx314, align 4
  br label %if.end.315

if.end.315:                                       ; preds = %if.then.310, %if.end.288
  %297 = load float, float* %tmpfloat, align 4
  %298 = load i32, i32* %im, align 4
  %idxprom316 = sext i32 %298 to i64
  %299 = load float*, float** %mindisfrom, align 8
  %arrayidx317 = getelementptr inbounds float, float* %299, i64 %idxprom316
  %300 = load float, float* %arrayidx317, align 4
  %cmp318 = fcmp olt float %297, %300
  br i1 %cmp318, label %if.then.320, label %if.end.325

if.then.320:                                      ; preds = %if.end.315
  %301 = load float, float* %tmpfloat, align 4
  %302 = load i32, i32* %im, align 4
  %idxprom321 = sext i32 %302 to i64
  %303 = load float*, float** %mindisfrom, align 8
  %arrayidx322 = getelementptr inbounds float, float* %303, i64 %idxprom321
  store float %301, float* %arrayidx322, align 4
  %304 = load i32, i32* %i, align 4
  %305 = load i32, i32* %im, align 4
  %idxprom323 = sext i32 %305 to i64
  %306 = load i32*, i32** %nearest, align 8
  %arrayidx324 = getelementptr inbounds i32, i32* %306, i64 %idxprom323
  store i32 %304, i32* %arrayidx324, align 4
  br label %if.end.325

if.end.325:                                       ; preds = %if.then.320, %if.end.315
  %307 = load i32, i32* %i, align 4
  %idxprom326 = sext i32 %307 to i64
  %308 = load i32*, i32** %nearest, align 8
  %arrayidx327 = getelementptr inbounds i32, i32* %308, i64 %idxprom326
  %309 = load i32, i32* %arrayidx327, align 4
  %310 = load i32, i32* %jm, align 4
  %cmp328 = icmp eq i32 %309, %310
  br i1 %cmp328, label %if.then.330, label %if.end.333

if.then.330:                                      ; preds = %if.end.325
  %311 = load i32, i32* %im, align 4
  %312 = load i32, i32* %i, align 4
  %idxprom331 = sext i32 %312 to i64
  %313 = load i32*, i32** %nearest, align 8
  %arrayidx332 = getelementptr inbounds i32, i32* %313, i64 %idxprom331
  store i32 %311, i32* %arrayidx332, align 4
  br label %if.end.333

if.end.333:                                       ; preds = %if.then.330, %if.end.325
  br label %if.end.334

if.end.334:                                       ; preds = %if.end.333, %land.lhs.true, %for.body.272
  br label %for.inc.335

for.inc.335:                                      ; preds = %if.end.334
  %314 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next336 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %314, i32 0, i32 0
  %315 = load %struct._Bchain*, %struct._Bchain** %next336, align 8
  store %struct._Bchain* %315, %struct._Bchain** %acpti, align 8
  br label %for.cond.269

for.end.337:                                      ; preds = %for.cond.269
  %316 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.treetmp, align 8
  %317 = load i32, i32* %im, align 4
  %idxprom338 = sext i32 %317 to i64
  %318 = load i8**, i8*** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree, align 8
  %arrayidx339 = getelementptr inbounds i8*, i8** %318, i64 %idxprom338
  %319 = load i8*, i8** %arrayidx339, align 8
  %320 = load i32, i32* %k, align 4
  %idxprom340 = sext i32 %320 to i64
  %321 = load float**, float*** %len.addr, align 8
  %arrayidx341 = getelementptr inbounds float*, float** %321, i64 %idxprom340
  %322 = load float*, float** %arrayidx341, align 8
  %arrayidx342 = getelementptr inbounds float, float* %322, i64 0
  %323 = load float, float* %arrayidx342, align 4
  %conv343 = fpext float %323 to double
  %324 = load i32, i32* %jm, align 4
  %idxprom344 = sext i32 %324 to i64
  %325 = load i8**, i8*** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree, align 8
  %arrayidx345 = getelementptr inbounds i8*, i8** %325, i64 %idxprom344
  %326 = load i8*, i8** %arrayidx345, align 8
  %327 = load i32, i32* %k, align 4
  %idxprom346 = sext i32 %327 to i64
  %328 = load float**, float*** %len.addr, align 8
  %arrayidx347 = getelementptr inbounds float*, float** %328, i64 %idxprom346
  %329 = load float*, float** %arrayidx347, align 8
  %arrayidx348 = getelementptr inbounds float, float* %329, i64 1
  %330 = load float, float* %arrayidx348, align 4
  %conv349 = fpext float %330 to double
  %call350 = call i32 (i8*, i8*, ...) @sprintf(i8* %316, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* %319, double %conv343, i8* %326, double %conv349) #8
  %331 = load i32, i32* %im, align 4
  %idxprom351 = sext i32 %331 to i64
  %332 = load i8**, i8*** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree, align 8
  %arrayidx352 = getelementptr inbounds i8*, i8** %332, i64 %idxprom351
  %333 = load i8*, i8** %arrayidx352, align 8
  %334 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.treetmp, align 8
  %call353 = call i8* @strcpy(i8* %333, i8* %334) #8
  %335 = load i32, i32* %jm, align 4
  %idxprom354 = sext i32 %335 to i64
  %336 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %arrayidx355 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %336, i64 %idxprom354
  %prev356 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx355, i32 0, i32 1
  %337 = load %struct._Bchain*, %struct._Bchain** %prev356, align 8
  store %struct._Bchain* %337, %struct._Bchain** %acjmprev, align 8
  %338 = load i32, i32* %jm, align 4
  %idxprom357 = sext i32 %338 to i64
  %339 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %arrayidx358 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %339, i64 %idxprom357
  %next359 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx358, i32 0, i32 0
  %340 = load %struct._Bchain*, %struct._Bchain** %next359, align 8
  store %struct._Bchain* %340, %struct._Bchain** %acjmnext, align 8
  %341 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %342 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %next360 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %342, i32 0, i32 0
  store %struct._Bchain* %341, %struct._Bchain** %next360, align 8
  %343 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %cmp361 = icmp ne %struct._Bchain* %343, null
  br i1 %cmp361, label %if.then.363, label %if.end.365

if.then.363:                                      ; preds = %for.end.337
  %344 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %345 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %prev364 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %345, i32 0, i32 1
  store %struct._Bchain* %344, %struct._Bchain** %prev364, align 8
  br label %if.end.365

if.end.365:                                       ; preds = %if.then.363, %for.end.337
  %346 = load i32, i32* %jm, align 4
  %idxprom366 = sext i32 %346 to i64
  %347 = load float**, float*** %eff.addr, align 8
  %arrayidx367 = getelementptr inbounds float*, float** %347, i64 %idxprom366
  %348 = load float*, float** %arrayidx367, align 8
  %349 = bitcast float* %348 to i8*
  call void @free(i8* %349) #8
  %350 = load i32, i32* %jm, align 4
  %idxprom368 = sext i32 %350 to i64
  %351 = load float**, float*** %eff.addr, align 8
  %arrayidx369 = getelementptr inbounds float*, float** %351, i64 %idxprom368
  store float* null, float** %arrayidx369, align 8
  %352 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  store %struct._Bchain* %352, %struct._Bchain** %acpti, align 8
  br label %for.cond.370

for.cond.370:                                     ; preds = %for.inc.385, %if.end.365
  %353 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %cmp371 = icmp ne %struct._Bchain* %353, null
  br i1 %cmp371, label %for.body.373, label %for.end.387

for.body.373:                                     ; preds = %for.cond.370
  %354 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos374 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %354, i32 0, i32 2
  %355 = load i32, i32* %pos374, align 4
  store i32 %355, i32* %i, align 4
  %356 = load i32, i32* %i, align 4
  %idxprom375 = sext i32 %356 to i64
  %357 = load i32*, i32** %nearest, align 8
  %arrayidx376 = getelementptr inbounds i32, i32* %357, i64 %idxprom375
  %358 = load i32, i32* %arrayidx376, align 4
  %359 = load i32, i32* %im, align 4
  %cmp377 = icmp eq i32 %358, %359
  br i1 %cmp377, label %if.then.379, label %if.end.384

if.then.379:                                      ; preds = %for.body.373
  %360 = load i32, i32* %nseq.addr, align 4
  %361 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %362 = load float**, float*** %eff.addr, align 8
  %363 = load float*, float** %mindisfrom, align 8
  %364 = load i32, i32* %i, align 4
  %idx.ext380 = sext i32 %364 to i64
  %add.ptr381 = getelementptr inbounds float, float* %363, i64 %idx.ext380
  %365 = load i32*, i32** %nearest, align 8
  %366 = load i32, i32* %i, align 4
  %idx.ext382 = sext i32 %366 to i64
  %add.ptr383 = getelementptr inbounds i32, i32* %365, i64 %idx.ext382
  %367 = load i32, i32* %i, align 4
  call void @setnearest(i32 %360, %struct._Bchain* %361, float** %362, float* %add.ptr381, i32* %add.ptr383, i32 %367)
  br label %if.end.384

if.end.384:                                       ; preds = %if.then.379, %for.body.373
  br label %for.inc.385

for.inc.385:                                      ; preds = %if.end.384
  %368 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next386 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %368, i32 0, i32 0
  %369 = load %struct._Bchain*, %struct._Bchain** %next386, align 8
  store %struct._Bchain* %369, %struct._Bchain** %acpti, align 8
  br label %for.cond.370

for.end.387:                                      ; preds = %for.cond.370
  br label %for.inc.388

for.inc.388:                                      ; preds = %for.end.387
  %370 = load i32, i32* %k, align 4
  %inc389 = add nsw i32 %370, 1
  store i32 %inc389, i32* %k, align 4
  br label %for.cond.119

for.end.390:                                      ; preds = %for.cond.119
  %call391 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store %struct._IO_FILE* %call391, %struct._IO_FILE** %fp, align 8
  %371 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %372 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.treetmp, align 8
  %call392 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %371, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %372)
  %373 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call393 = call i32 @fclose(%struct._IO_FILE* %373)
  %374 = load i8**, i8*** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tree, align 8
  call void @FreeCharMtx(i8** %374)
  %375 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.treetmp, align 8
  call void @free(i8* %375) #8
  %376 = load i8*, i8** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nametmp, align 8
  call void @free(i8* %376) #8
  %377 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %378 = bitcast float* %377 to i8*
  call void @free(i8* %378) #8
  store float* null, float** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.tmptmplen, align 8
  %379 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %380 = bitcast i32* %379 to i8*
  call void @free(i8* %380) #8
  store i32* null, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.hist, align 8
  %381 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %382 = bitcast %struct._Bchain* %381 to i8*
  call void @free(i8* %382) #8
  store %struct._Bchain* null, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.ac, align 8
  %383 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %384 = bitcast i32* %383 to i8*
  call void @free(i8* %384) #8
  store i32* null, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx_treeout.nmemar, align 8
  %385 = load float*, float** %mindisfrom, align 8
  %386 = bitcast float* %385 to i8*
  call void @free(i8* %386) #8
  %387 = load i32*, i32** %nearest, align 8
  %388 = bitcast i32* %387 to i8*
  call void @free(i8* %388) #8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @setnearest(i32 %nseq, %struct._Bchain* %acpt, float** %eff, float* %mindisfrompt, i32* %nearestpt, i32 %pos) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %acpt.addr = alloca %struct._Bchain*, align 8
  %eff.addr = alloca float**, align 8
  %mindisfrompt.addr = alloca float*, align 8
  %nearestpt.addr = alloca i32*, align 8
  %pos.addr = alloca i32, align 4
  %j = alloca i32, align 4
  %tmpfloat = alloca float, align 4
  %effptpt = alloca float**, align 8
  %acptj = alloca %struct._Bchain*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store %struct._Bchain* %acpt, %struct._Bchain** %acpt.addr, align 8
  store float** %eff, float*** %eff.addr, align 8
  store float* %mindisfrompt, float** %mindisfrompt.addr, align 8
  store i32* %nearestpt, i32** %nearestpt.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load float*, float** %mindisfrompt.addr, align 8
  store float 0x408F3F3340000000, float* %0, align 4
  %1 = load i32*, i32** %nearestpt.addr, align 8
  store i32 -1, i32* %1, align 4
  %2 = load %struct._Bchain*, %struct._Bchain** %acpt.addr, align 8
  %3 = load i32, i32* %pos.addr, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct._Bchain, %struct._Bchain* %2, i64 %idx.ext
  %next = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr, i32 0, i32 0
  %4 = load %struct._Bchain*, %struct._Bchain** %next, align 8
  store %struct._Bchain* %4, %struct._Bchain** %acptj, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %cmp = icmp ne %struct._Bchain* %5, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %pos1 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %6, i32 0, i32 2
  %7 = load i32, i32* %pos1, align 4
  store i32 %7, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %pos.addr, align 4
  %sub = sub nsw i32 %8, %9
  %idxprom = sext i32 %sub to i64
  %10 = load i32, i32* %pos.addr, align 4
  %idxprom2 = sext i32 %10 to i64
  %11 = load float**, float*** %eff.addr, align 8
  %arrayidx = getelementptr inbounds float*, float** %11, i64 %idxprom2
  %12 = load float*, float** %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds float, float* %12, i64 %idxprom
  %13 = load float, float* %arrayidx3, align 4
  store float %13, float* %tmpfloat, align 4
  %14 = load float*, float** %mindisfrompt.addr, align 8
  %15 = load float, float* %14, align 4
  %cmp4 = fcmp olt float %13, %15
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %16 = load float, float* %tmpfloat, align 4
  %17 = load float*, float** %mindisfrompt.addr, align 8
  store float %16, float* %17, align 4
  %18 = load i32, i32* %j, align 4
  %19 = load i32*, i32** %nearestpt.addr, align 8
  store i32 %18, i32* %19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %next5 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %20, i32 0, i32 0
  %21 = load %struct._Bchain*, %struct._Bchain** %next5, align 8
  store %struct._Bchain* %21, %struct._Bchain** %acptj, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %22 = load float**, float*** %eff.addr, align 8
  store float** %22, float*** %effptpt, align 8
  %23 = load %struct._Bchain*, %struct._Bchain** %acpt.addr, align 8
  store %struct._Bchain* %23, %struct._Bchain** %acptj, align 8
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.19, %for.end
  %24 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %tobool = icmp ne %struct._Bchain* %24, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.6
  %25 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %pos7 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %25, i32 0, i32 2
  %26 = load i32, i32* %pos7, align 4
  %27 = load i32, i32* %pos.addr, align 4
  %cmp8 = icmp ne i32 %26, %27
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.6
  %28 = phi i1 [ false, %for.cond.6 ], [ %cmp8, %land.rhs ]
  br i1 %28, label %for.body.9, label %for.end.21

for.body.9:                                       ; preds = %land.end
  %29 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %pos10 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %29, i32 0, i32 2
  %30 = load i32, i32* %pos10, align 4
  store i32 %30, i32* %j, align 4
  %31 = load i32, i32* %pos.addr, align 4
  %32 = load i32, i32* %j, align 4
  %sub11 = sub nsw i32 %31, %32
  %idxprom12 = sext i32 %sub11 to i64
  %33 = load i32, i32* %j, align 4
  %idxprom13 = sext i32 %33 to i64
  %34 = load float**, float*** %eff.addr, align 8
  %arrayidx14 = getelementptr inbounds float*, float** %34, i64 %idxprom13
  %35 = load float*, float** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds float, float* %35, i64 %idxprom12
  %36 = load float, float* %arrayidx15, align 4
  store float %36, float* %tmpfloat, align 4
  %37 = load float*, float** %mindisfrompt.addr, align 8
  %38 = load float, float* %37, align 4
  %cmp16 = fcmp olt float %36, %38
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %for.body.9
  %39 = load float, float* %tmpfloat, align 4
  %40 = load float*, float** %mindisfrompt.addr, align 8
  store float %39, float* %40, align 4
  %41 = load i32, i32* %j, align 4
  %42 = load i32*, i32** %nearestpt.addr, align 8
  store i32 %41, i32* %42, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %for.body.9
  br label %for.inc.19

for.inc.19:                                       ; preds = %if.end.18
  %43 = load %struct._Bchain*, %struct._Bchain** %acptj, align 8
  %next20 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %43, i32 0, i32 0
  %44 = load %struct._Bchain*, %struct._Bchain** %next20, align 8
  store %struct._Bchain* %44, %struct._Bchain** %acptj, align 8
  br label %for.cond.6

for.end.21:                                       ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @fixed_musclesupg_float_realloc_nobk_halfmtx(i32 %nseq, float** %eff, i32*** %topol, float** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca float**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca float**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %tmpfloat = alloca float, align 4
  %eff1 = alloca float, align 4
  %eff0 = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %acjmnext = alloca %struct._Bchain*, align 8
  %acjmprev = alloca %struct._Bchain*, align 8
  %prevnode = alloca i32, align 4
  %acpti = alloca %struct._Bchain*, align 8
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %nmemim = alloca i32, align 4
  %nmemjm = alloca i32, align 4
  %minscore = alloca float, align 4
  %nearest = alloca i32*, align 8
  %mindisfrom = alloca float*, align 8
  %clusterfuncpt = alloca [1 x float (float, float)*], align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store float** %eff, float*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store float** %len, float*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store i32* null, i32** %nearest, align 8
  store float* null, float** %mindisfrom, align 8
  store float 0x3FECCCCCC0000000, float* @sueff1, align 4
  store float 0x3FA99999A0000000, float* @sueff05, align 4
  %0 = load i32, i32* @treemethod, align 4
  %cmp = icmp eq i32 %0, 88
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_mix_float, float (float, float)** %arrayidx, align 8
  br label %if.end.10

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @treemethod, align 4
  %cmp1 = icmp eq i32 %1, 69
  br i1 %cmp1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %arrayidx3 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_average_float, float (float, float)** %arrayidx3, align 8
  br label %if.end.9

if.else.4:                                        ; preds = %if.else
  %2 = load i32, i32* @treemethod, align 4
  %cmp5 = icmp eq i32 %2, 113
  br i1 %cmp5, label %if.then.6, label %if.else.8

if.then.6:                                        ; preds = %if.else.4
  %arrayidx7 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  store float (float, float)* @cluster_minimum_float, float (float, float)** %arrayidx7, align 8
  br label %if.end

if.else.8:                                        ; preds = %if.else.4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load i32, i32* @treemethod, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i32 %4)
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %if.then.6
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then.2
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.then
  %5 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %tobool = icmp ne i32* %5, null
  br i1 %tobool, label %if.end.18, label %if.then.11

if.then.11:                                       ; preds = %if.end.10
  %6 = load i32, i32* @njob, align 4
  %call12 = call i32* @AllocateIntVec(i32 %6)
  store i32* %call12, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %7 = load i32, i32* @njob, align 4
  %call13 = call float* @AllocateFloatVec(i32 %7)
  store float* %call13, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %8 = load i32, i32* @njob, align 4
  %conv = sext i32 %8 to i64
  %mul = mul i64 %conv, 24
  %call14 = call noalias i8* @malloc(i64 %mul) #8
  %9 = bitcast i8* %call14 to %struct._Bchain*
  store %struct._Bchain* %9, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %10 = load i32, i32* @njob, align 4
  %call15 = call i32* @AllocateIntVec(i32 %10)
  store i32* %call15, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %11 = load i32, i32* @njob, align 4
  %call16 = call float* @AllocateFloatVec(i32 %11)
  store float* %call16, float** %mindisfrom, align 8
  %12 = load i32, i32* @njob, align 4
  %call17 = call i32* @AllocateIntVec(i32 %12)
  store i32* %call17, i32** %nearest, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.11, %if.end.10
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.18
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %nseq.addr, align 4
  %cmp19 = icmp slt i32 %13, %14
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %16 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %16 to i64
  %add.ptr = getelementptr inbounds %struct._Bchain, %struct._Bchain* %15, i64 %idx.ext
  %add.ptr21 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr, i64 1
  %17 = load i32, i32* %i, align 4
  %idxprom = sext i32 %17 to i64
  %18 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %arrayidx22 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %18, i64 %idxprom
  %next = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx22, i32 0, i32 0
  store %struct._Bchain* %add.ptr21, %struct._Bchain** %next, align 8
  %19 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %20 = load i32, i32* %i, align 4
  %idx.ext23 = sext i32 %20 to i64
  %add.ptr24 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %19, i64 %idx.ext23
  %add.ptr25 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %add.ptr24, i64 -1
  %21 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %21 to i64
  %22 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %arrayidx27 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %22, i64 %idxprom26
  %prev = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx27, i32 0, i32 1
  store %struct._Bchain* %add.ptr25, %struct._Bchain** %prev, align 8
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %24 to i64
  %25 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %arrayidx29 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %25, i64 %idxprom28
  %pos = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx29, i32 0, i32 2
  store i32 %23, i32* %pos, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %i, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %27, 1
  %idxprom30 = sext i32 %sub to i64
  %28 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %arrayidx31 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %28, i64 %idxprom30
  %next32 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx31, i32 0, i32 0
  store %struct._Bchain* null, %struct._Bchain** %next32, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.33

for.cond.33:                                      ; preds = %for.inc.41, %for.end
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %nseq.addr, align 4
  %cmp34 = icmp slt i32 %29, %30
  br i1 %cmp34, label %for.body.36, label %for.end.43

for.body.36:                                      ; preds = %for.cond.33
  %31 = load i32, i32* %nseq.addr, align 4
  %32 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %33 = load float**, float*** %eff.addr, align 8
  %34 = load float*, float** %mindisfrom, align 8
  %35 = load i32, i32* %i, align 4
  %idx.ext37 = sext i32 %35 to i64
  %add.ptr38 = getelementptr inbounds float, float* %34, i64 %idx.ext37
  %36 = load i32*, i32** %nearest, align 8
  %37 = load i32, i32* %i, align 4
  %idx.ext39 = sext i32 %37 to i64
  %add.ptr40 = getelementptr inbounds i32, i32* %36, i64 %idx.ext39
  %38 = load i32, i32* %i, align 4
  call void @setnearest(i32 %31, %struct._Bchain* %32, float** %33, float* %add.ptr38, i32* %add.ptr40, i32 %38)
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.body.36
  %39 = load i32, i32* %i, align 4
  %inc42 = add nsw i32 %39, 1
  store i32 %inc42, i32* %i, align 4
  br label %for.cond.33

for.end.43:                                       ; preds = %for.cond.33
  store i32 0, i32* %i, align 4
  br label %for.cond.44

for.cond.44:                                      ; preds = %for.inc.50, %for.end.43
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %nseq.addr, align 4
  %cmp45 = icmp slt i32 %40, %41
  br i1 %cmp45, label %for.body.47, label %for.end.52

for.body.47:                                      ; preds = %for.cond.44
  %42 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %42 to i64
  %43 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %arrayidx49 = getelementptr inbounds float, float* %43, i64 %idxprom48
  store float 0.000000e+00, float* %arrayidx49, align 4
  br label %for.inc.50

for.inc.50:                                       ; preds = %for.body.47
  %44 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %44, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond.44

for.end.52:                                       ; preds = %for.cond.44
  store i32 0, i32* %i, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.61, %for.end.52
  %45 = load i32, i32* %i, align 4
  %46 = load i32, i32* %nseq.addr, align 4
  %cmp54 = icmp slt i32 %45, %46
  br i1 %cmp54, label %for.body.56, label %for.end.63

for.body.56:                                      ; preds = %for.cond.53
  %47 = load i32, i32* %i, align 4
  %idxprom57 = sext i32 %47 to i64
  %48 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %arrayidx58 = getelementptr inbounds i32, i32* %48, i64 %idxprom57
  store i32 -1, i32* %arrayidx58, align 4
  %49 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %49 to i64
  %50 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %arrayidx60 = getelementptr inbounds i32, i32* %50, i64 %idxprom59
  store i32 1, i32* %arrayidx60, align 4
  br label %for.inc.61

for.inc.61:                                       ; preds = %for.body.56
  %51 = load i32, i32* %i, align 4
  %inc62 = add nsw i32 %51, 1
  store i32 %inc62, i32* %i, align 4
  br label %for.cond.53

for.end.63:                                       ; preds = %for.cond.53
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.65

for.cond.65:                                      ; preds = %for.inc.317, %for.end.63
  %53 = load i32, i32* %k, align 4
  %54 = load i32, i32* %nseq.addr, align 4
  %sub66 = sub nsw i32 %54, 1
  %cmp67 = icmp slt i32 %53, %sub66
  br i1 %cmp67, label %for.body.69, label %for.end.319

for.body.69:                                      ; preds = %for.cond.65
  %55 = load i32, i32* %k, align 4
  %rem = srem i32 %55, 10
  %cmp70 = icmp eq i32 %rem, 0
  br i1 %cmp70, label %if.then.72, label %if.end.74

if.then.72:                                       ; preds = %for.body.69
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %57 = load i32, i32* %k, align 4
  %58 = load i32, i32* %nseq.addr, align 4
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i32 0, i32 0), i32 %57, i32 %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.72, %for.body.69
  store float 0x408F3F3340000000, float* %minscore, align 4
  %59 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  store %struct._Bchain* %59, %struct._Bchain** %acpti, align 8
  br label %for.cond.75

for.cond.75:                                      ; preds = %for.inc.89, %if.end.74
  %60 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next76 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %60, i32 0, i32 0
  %61 = load %struct._Bchain*, %struct._Bchain** %next76, align 8
  %cmp77 = icmp ne %struct._Bchain* %61, null
  br i1 %cmp77, label %for.body.79, label %for.end.91

for.body.79:                                      ; preds = %for.cond.75
  %62 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos80 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %62, i32 0, i32 2
  %63 = load i32, i32* %pos80, align 4
  store i32 %63, i32* %i, align 4
  %64 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %64 to i64
  %65 = load float*, float** %mindisfrom, align 8
  %arrayidx82 = getelementptr inbounds float, float* %65, i64 %idxprom81
  %66 = load float, float* %arrayidx82, align 4
  %67 = load float, float* %minscore, align 4
  %cmp83 = fcmp olt float %66, %67
  br i1 %cmp83, label %if.then.85, label %if.end.88

if.then.85:                                       ; preds = %for.body.79
  %68 = load i32, i32* %i, align 4
  store i32 %68, i32* %im, align 4
  %69 = load i32, i32* %i, align 4
  %idxprom86 = sext i32 %69 to i64
  %70 = load float*, float** %mindisfrom, align 8
  %arrayidx87 = getelementptr inbounds float, float* %70, i64 %idxprom86
  %71 = load float, float* %arrayidx87, align 4
  store float %71, float* %minscore, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.85, %for.body.79
  br label %for.inc.89

for.inc.89:                                       ; preds = %if.end.88
  %72 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next90 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %72, i32 0, i32 0
  %73 = load %struct._Bchain*, %struct._Bchain** %next90, align 8
  store %struct._Bchain* %73, %struct._Bchain** %acpti, align 8
  br label %for.cond.75

for.end.91:                                       ; preds = %for.cond.75
  %74 = load i32, i32* %im, align 4
  %idxprom92 = sext i32 %74 to i64
  %75 = load i32*, i32** %nearest, align 8
  %arrayidx93 = getelementptr inbounds i32, i32* %75, i64 %idxprom92
  %76 = load i32, i32* %arrayidx93, align 4
  store i32 %76, i32* %jm, align 4
  %77 = load i32, i32* %jm, align 4
  %78 = load i32, i32* %im, align 4
  %cmp94 = icmp slt i32 %77, %78
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %for.end.91
  %79 = load i32, i32* %jm, align 4
  store i32 %79, i32* %j, align 4
  %80 = load i32, i32* %im, align 4
  store i32 %80, i32* %jm, align 4
  %81 = load i32, i32* %j, align 4
  store i32 %81, i32* %im, align 4
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.96, %for.end.91
  %82 = load i32, i32* %im, align 4
  %idxprom98 = sext i32 %82 to i64
  %83 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %arrayidx99 = getelementptr inbounds i32, i32* %83, i64 %idxprom98
  %84 = load i32, i32* %arrayidx99, align 4
  store i32 %84, i32* %prevnode, align 4
  %85 = load i32, i32* %im, align 4
  %idxprom100 = sext i32 %85 to i64
  %86 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %arrayidx101 = getelementptr inbounds i32, i32* %86, i64 %idxprom100
  %87 = load i32, i32* %arrayidx101, align 4
  store i32 %87, i32* %nmemim, align 4
  %88 = load i32, i32* %k, align 4
  %idxprom102 = sext i32 %88 to i64
  %89 = load i32***, i32**** %topol.addr, align 8
  %arrayidx103 = getelementptr inbounds i32**, i32*** %89, i64 %idxprom102
  %90 = load i32**, i32*** %arrayidx103, align 8
  %arrayidx104 = getelementptr inbounds i32*, i32** %90, i64 0
  %91 = load i32*, i32** %arrayidx104, align 8
  %92 = bitcast i32* %91 to i8*
  %93 = load i32, i32* %nmemim, align 4
  %add = add nsw i32 %93, 1
  %conv105 = sext i32 %add to i64
  %mul106 = mul i64 %conv105, 4
  %call107 = call i8* @realloc(i8* %92, i64 %mul106) #8
  %94 = bitcast i8* %call107 to i32*
  %95 = load i32, i32* %k, align 4
  %idxprom108 = sext i32 %95 to i64
  %96 = load i32***, i32**** %topol.addr, align 8
  %arrayidx109 = getelementptr inbounds i32**, i32*** %96, i64 %idxprom108
  %97 = load i32**, i32*** %arrayidx109, align 8
  %arrayidx110 = getelementptr inbounds i32*, i32** %97, i64 0
  store i32* %94, i32** %arrayidx110, align 8
  store i32* %94, i32** %intpt, align 8
  %98 = load i32, i32* %prevnode, align 4
  %cmp111 = icmp eq i32 %98, -1
  br i1 %cmp111, label %if.then.113, label %if.else.114

if.then.113:                                      ; preds = %if.end.97
  %99 = load i32, i32* %im, align 4
  %100 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %100, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %99, i32* %100, align 4
  %101 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %101, align 4
  br label %if.end.140

if.else.114:                                      ; preds = %if.end.97
  %102 = load i32, i32* %prevnode, align 4
  %idxprom115 = sext i32 %102 to i64
  %103 = load i32***, i32**** %topol.addr, align 8
  %arrayidx116 = getelementptr inbounds i32**, i32*** %103, i64 %idxprom115
  %104 = load i32**, i32*** %arrayidx116, align 8
  %arrayidx117 = getelementptr inbounds i32*, i32** %104, i64 0
  %105 = load i32*, i32** %arrayidx117, align 8
  store i32* %105, i32** %pt1, align 8
  %106 = load i32, i32* %prevnode, align 4
  %idxprom118 = sext i32 %106 to i64
  %107 = load i32***, i32**** %topol.addr, align 8
  %arrayidx119 = getelementptr inbounds i32**, i32*** %107, i64 %idxprom118
  %108 = load i32**, i32*** %arrayidx119, align 8
  %arrayidx120 = getelementptr inbounds i32*, i32** %108, i64 1
  %109 = load i32*, i32** %arrayidx120, align 8
  store i32* %109, i32** %pt2, align 8
  %110 = load i32*, i32** %pt1, align 8
  %111 = load i32, i32* %110, align 4
  %112 = load i32*, i32** %pt2, align 8
  %113 = load i32, i32* %112, align 4
  %cmp121 = icmp sgt i32 %111, %113
  br i1 %cmp121, label %if.then.123, label %if.else.124

if.then.123:                                      ; preds = %if.else.114
  %114 = load i32*, i32** %pt2, align 8
  store i32* %114, i32** %pt11, align 8
  %115 = load i32*, i32** %pt1, align 8
  store i32* %115, i32** %pt22, align 8
  br label %if.end.125

if.else.124:                                      ; preds = %if.else.114
  %116 = load i32*, i32** %pt1, align 8
  store i32* %116, i32** %pt11, align 8
  %117 = load i32*, i32** %pt2, align 8
  store i32* %117, i32** %pt22, align 8
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.124, %if.then.123
  %118 = load i32*, i32** %pt11, align 8
  store i32* %118, i32** %intpt2, align 8
  br label %for.cond.126

for.cond.126:                                     ; preds = %for.body.129, %if.end.125
  %119 = load i32*, i32** %intpt2, align 8
  %120 = load i32, i32* %119, align 4
  %cmp127 = icmp ne i32 %120, -1
  br i1 %cmp127, label %for.body.129, label %for.end.132

for.body.129:                                     ; preds = %for.cond.126
  %121 = load i32*, i32** %intpt2, align 8
  %incdec.ptr130 = getelementptr inbounds i32, i32* %121, i32 1
  store i32* %incdec.ptr130, i32** %intpt2, align 8
  %122 = load i32, i32* %121, align 4
  %123 = load i32*, i32** %intpt, align 8
  %incdec.ptr131 = getelementptr inbounds i32, i32* %123, i32 1
  store i32* %incdec.ptr131, i32** %intpt, align 8
  store i32 %122, i32* %123, align 4
  br label %for.cond.126

for.end.132:                                      ; preds = %for.cond.126
  %124 = load i32*, i32** %pt22, align 8
  store i32* %124, i32** %intpt2, align 8
  br label %for.cond.133

for.cond.133:                                     ; preds = %for.body.136, %for.end.132
  %125 = load i32*, i32** %intpt2, align 8
  %126 = load i32, i32* %125, align 4
  %cmp134 = icmp ne i32 %126, -1
  br i1 %cmp134, label %for.body.136, label %for.end.139

for.body.136:                                     ; preds = %for.cond.133
  %127 = load i32*, i32** %intpt2, align 8
  %incdec.ptr137 = getelementptr inbounds i32, i32* %127, i32 1
  store i32* %incdec.ptr137, i32** %intpt2, align 8
  %128 = load i32, i32* %127, align 4
  %129 = load i32*, i32** %intpt, align 8
  %incdec.ptr138 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %incdec.ptr138, i32** %intpt, align 8
  store i32 %128, i32* %129, align 4
  br label %for.cond.133

for.end.139:                                      ; preds = %for.cond.133
  %130 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %130, align 4
  br label %if.end.140

if.end.140:                                       ; preds = %for.end.139, %if.then.113
  %131 = load i32, i32* %jm, align 4
  %idxprom141 = sext i32 %131 to i64
  %132 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %arrayidx142 = getelementptr inbounds i32, i32* %132, i64 %idxprom141
  %133 = load i32, i32* %arrayidx142, align 4
  store i32 %133, i32* %prevnode, align 4
  %134 = load i32, i32* %jm, align 4
  %idxprom143 = sext i32 %134 to i64
  %135 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %arrayidx144 = getelementptr inbounds i32, i32* %135, i64 %idxprom143
  %136 = load i32, i32* %arrayidx144, align 4
  store i32 %136, i32* %nmemjm, align 4
  %137 = load i32, i32* %k, align 4
  %idxprom145 = sext i32 %137 to i64
  %138 = load i32***, i32**** %topol.addr, align 8
  %arrayidx146 = getelementptr inbounds i32**, i32*** %138, i64 %idxprom145
  %139 = load i32**, i32*** %arrayidx146, align 8
  %arrayidx147 = getelementptr inbounds i32*, i32** %139, i64 1
  %140 = load i32*, i32** %arrayidx147, align 8
  %141 = bitcast i32* %140 to i8*
  %142 = load i32, i32* %nmemjm, align 4
  %add148 = add nsw i32 %142, 1
  %conv149 = sext i32 %add148 to i64
  %mul150 = mul i64 %conv149, 4
  %call151 = call i8* @realloc(i8* %141, i64 %mul150) #8
  %143 = bitcast i8* %call151 to i32*
  %144 = load i32, i32* %k, align 4
  %idxprom152 = sext i32 %144 to i64
  %145 = load i32***, i32**** %topol.addr, align 8
  %arrayidx153 = getelementptr inbounds i32**, i32*** %145, i64 %idxprom152
  %146 = load i32**, i32*** %arrayidx153, align 8
  %arrayidx154 = getelementptr inbounds i32*, i32** %146, i64 1
  store i32* %143, i32** %arrayidx154, align 8
  store i32* %143, i32** %intpt, align 8
  %147 = load i32*, i32** %intpt, align 8
  %tobool155 = icmp ne i32* %147, null
  br i1 %tobool155, label %if.end.158, label %if.then.156

if.then.156:                                      ; preds = %if.end.140
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call157 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %148, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.15, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.158:                                       ; preds = %if.end.140
  %149 = load i32, i32* %prevnode, align 4
  %cmp159 = icmp eq i32 %149, -1
  br i1 %cmp159, label %if.then.161, label %if.else.163

if.then.161:                                      ; preds = %if.end.158
  %150 = load i32, i32* %jm, align 4
  %151 = load i32*, i32** %intpt, align 8
  %incdec.ptr162 = getelementptr inbounds i32, i32* %151, i32 1
  store i32* %incdec.ptr162, i32** %intpt, align 8
  store i32 %150, i32* %151, align 4
  %152 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %152, align 4
  br label %if.end.189

if.else.163:                                      ; preds = %if.end.158
  %153 = load i32, i32* %prevnode, align 4
  %idxprom164 = sext i32 %153 to i64
  %154 = load i32***, i32**** %topol.addr, align 8
  %arrayidx165 = getelementptr inbounds i32**, i32*** %154, i64 %idxprom164
  %155 = load i32**, i32*** %arrayidx165, align 8
  %arrayidx166 = getelementptr inbounds i32*, i32** %155, i64 0
  %156 = load i32*, i32** %arrayidx166, align 8
  store i32* %156, i32** %pt1, align 8
  %157 = load i32, i32* %prevnode, align 4
  %idxprom167 = sext i32 %157 to i64
  %158 = load i32***, i32**** %topol.addr, align 8
  %arrayidx168 = getelementptr inbounds i32**, i32*** %158, i64 %idxprom167
  %159 = load i32**, i32*** %arrayidx168, align 8
  %arrayidx169 = getelementptr inbounds i32*, i32** %159, i64 1
  %160 = load i32*, i32** %arrayidx169, align 8
  store i32* %160, i32** %pt2, align 8
  %161 = load i32*, i32** %pt1, align 8
  %162 = load i32, i32* %161, align 4
  %163 = load i32*, i32** %pt2, align 8
  %164 = load i32, i32* %163, align 4
  %cmp170 = icmp sgt i32 %162, %164
  br i1 %cmp170, label %if.then.172, label %if.else.173

if.then.172:                                      ; preds = %if.else.163
  %165 = load i32*, i32** %pt2, align 8
  store i32* %165, i32** %pt11, align 8
  %166 = load i32*, i32** %pt1, align 8
  store i32* %166, i32** %pt22, align 8
  br label %if.end.174

if.else.173:                                      ; preds = %if.else.163
  %167 = load i32*, i32** %pt1, align 8
  store i32* %167, i32** %pt11, align 8
  %168 = load i32*, i32** %pt2, align 8
  store i32* %168, i32** %pt22, align 8
  br label %if.end.174

if.end.174:                                       ; preds = %if.else.173, %if.then.172
  %169 = load i32*, i32** %pt11, align 8
  store i32* %169, i32** %intpt2, align 8
  br label %for.cond.175

for.cond.175:                                     ; preds = %for.body.178, %if.end.174
  %170 = load i32*, i32** %intpt2, align 8
  %171 = load i32, i32* %170, align 4
  %cmp176 = icmp ne i32 %171, -1
  br i1 %cmp176, label %for.body.178, label %for.end.181

for.body.178:                                     ; preds = %for.cond.175
  %172 = load i32*, i32** %intpt2, align 8
  %incdec.ptr179 = getelementptr inbounds i32, i32* %172, i32 1
  store i32* %incdec.ptr179, i32** %intpt2, align 8
  %173 = load i32, i32* %172, align 4
  %174 = load i32*, i32** %intpt, align 8
  %incdec.ptr180 = getelementptr inbounds i32, i32* %174, i32 1
  store i32* %incdec.ptr180, i32** %intpt, align 8
  store i32 %173, i32* %174, align 4
  br label %for.cond.175

for.end.181:                                      ; preds = %for.cond.175
  %175 = load i32*, i32** %pt22, align 8
  store i32* %175, i32** %intpt2, align 8
  br label %for.cond.182

for.cond.182:                                     ; preds = %for.body.185, %for.end.181
  %176 = load i32*, i32** %intpt2, align 8
  %177 = load i32, i32* %176, align 4
  %cmp183 = icmp ne i32 %177, -1
  br i1 %cmp183, label %for.body.185, label %for.end.188

for.body.185:                                     ; preds = %for.cond.182
  %178 = load i32*, i32** %intpt2, align 8
  %incdec.ptr186 = getelementptr inbounds i32, i32* %178, i32 1
  store i32* %incdec.ptr186, i32** %intpt2, align 8
  %179 = load i32, i32* %178, align 4
  %180 = load i32*, i32** %intpt, align 8
  %incdec.ptr187 = getelementptr inbounds i32, i32* %180, i32 1
  store i32* %incdec.ptr187, i32** %intpt, align 8
  store i32 %179, i32* %180, align 4
  br label %for.cond.182

for.end.188:                                      ; preds = %for.cond.182
  %181 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %181, align 4
  br label %if.end.189

if.end.189:                                       ; preds = %for.end.188, %if.then.161
  %182 = load float, float* %minscore, align 4
  %conv190 = fpext float %182 to double
  %mul191 = fmul double %conv190, 5.000000e-01
  %conv192 = fptrunc double %mul191 to float
  store float %conv192, float* %minscore, align 4
  %183 = load float, float* %minscore, align 4
  %184 = load i32, i32* %im, align 4
  %idxprom193 = sext i32 %184 to i64
  %185 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %arrayidx194 = getelementptr inbounds float, float* %185, i64 %idxprom193
  %186 = load float, float* %arrayidx194, align 4
  %sub195 = fsub float %183, %186
  %187 = load i32, i32* %k, align 4
  %idxprom196 = sext i32 %187 to i64
  %188 = load float**, float*** %len.addr, align 8
  %arrayidx197 = getelementptr inbounds float*, float** %188, i64 %idxprom196
  %189 = load float*, float** %arrayidx197, align 8
  %arrayidx198 = getelementptr inbounds float, float* %189, i64 0
  store float %sub195, float* %arrayidx198, align 4
  %190 = load float, float* %minscore, align 4
  %191 = load i32, i32* %jm, align 4
  %idxprom199 = sext i32 %191 to i64
  %192 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %arrayidx200 = getelementptr inbounds float, float* %192, i64 %idxprom199
  %193 = load float, float* %arrayidx200, align 4
  %sub201 = fsub float %190, %193
  %194 = load i32, i32* %k, align 4
  %idxprom202 = sext i32 %194 to i64
  %195 = load float**, float*** %len.addr, align 8
  %arrayidx203 = getelementptr inbounds float*, float** %195, i64 %idxprom202
  %196 = load float*, float** %arrayidx203, align 8
  %arrayidx204 = getelementptr inbounds float, float* %196, i64 1
  store float %sub201, float* %arrayidx204, align 4
  %197 = load float, float* %minscore, align 4
  %198 = load i32, i32* %im, align 4
  %idxprom205 = sext i32 %198 to i64
  %199 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %arrayidx206 = getelementptr inbounds float, float* %199, i64 %idxprom205
  store float %197, float* %arrayidx206, align 4
  %200 = load i32, i32* %k, align 4
  %201 = load i32, i32* %im, align 4
  %idxprom207 = sext i32 %201 to i64
  %202 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %arrayidx208 = getelementptr inbounds i32, i32* %202, i64 %idxprom207
  store i32 %200, i32* %arrayidx208, align 4
  %203 = load i32, i32* %nmemim, align 4
  %204 = load i32, i32* %nmemjm, align 4
  %add209 = add nsw i32 %203, %204
  %205 = load i32, i32* %im, align 4
  %idxprom210 = sext i32 %205 to i64
  %206 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %arrayidx211 = getelementptr inbounds i32, i32* %206, i64 %idxprom210
  store i32 %add209, i32* %arrayidx211, align 4
  %207 = load i32, i32* %im, align 4
  %idxprom212 = sext i32 %207 to i64
  %208 = load float*, float** %mindisfrom, align 8
  %arrayidx213 = getelementptr inbounds float, float* %208, i64 %idxprom212
  store float 0x408F3F3340000000, float* %arrayidx213, align 4
  %209 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  store %struct._Bchain* %209, %struct._Bchain** %acpti, align 8
  br label %for.cond.214

for.cond.214:                                     ; preds = %for.inc.280, %if.end.189
  %210 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %cmp215 = icmp ne %struct._Bchain* %210, null
  br i1 %cmp215, label %for.body.217, label %for.end.282

for.body.217:                                     ; preds = %for.cond.214
  %211 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos218 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %211, i32 0, i32 2
  %212 = load i32, i32* %pos218, align 4
  store i32 %212, i32* %i, align 4
  %213 = load i32, i32* %i, align 4
  %214 = load i32, i32* %im, align 4
  %cmp219 = icmp ne i32 %213, %214
  br i1 %cmp219, label %land.lhs.true, label %if.end.279

land.lhs.true:                                    ; preds = %for.body.217
  %215 = load i32, i32* %i, align 4
  %216 = load i32, i32* %jm, align 4
  %cmp221 = icmp ne i32 %215, %216
  br i1 %cmp221, label %if.then.223, label %if.end.279

if.then.223:                                      ; preds = %land.lhs.true
  %217 = load i32, i32* %i, align 4
  %218 = load i32, i32* %im, align 4
  %cmp224 = icmp slt i32 %217, %218
  br i1 %cmp224, label %if.then.226, label %if.else.227

if.then.226:                                      ; preds = %if.then.223
  %219 = load i32, i32* %i, align 4
  store i32 %219, i32* %miniim, align 4
  %220 = load i32, i32* %im, align 4
  store i32 %220, i32* %maxiim, align 4
  %221 = load i32, i32* %i, align 4
  store i32 %221, i32* %minijm, align 4
  %222 = load i32, i32* %jm, align 4
  store i32 %222, i32* %maxijm, align 4
  br label %if.end.233

if.else.227:                                      ; preds = %if.then.223
  %223 = load i32, i32* %i, align 4
  %224 = load i32, i32* %jm, align 4
  %cmp228 = icmp slt i32 %223, %224
  br i1 %cmp228, label %if.then.230, label %if.else.231

if.then.230:                                      ; preds = %if.else.227
  %225 = load i32, i32* %im, align 4
  store i32 %225, i32* %miniim, align 4
  %226 = load i32, i32* %i, align 4
  store i32 %226, i32* %maxiim, align 4
  %227 = load i32, i32* %i, align 4
  store i32 %227, i32* %minijm, align 4
  %228 = load i32, i32* %jm, align 4
  store i32 %228, i32* %maxijm, align 4
  br label %if.end.232

if.else.231:                                      ; preds = %if.else.227
  %229 = load i32, i32* %im, align 4
  store i32 %229, i32* %miniim, align 4
  %230 = load i32, i32* %i, align 4
  store i32 %230, i32* %maxiim, align 4
  %231 = load i32, i32* %jm, align 4
  store i32 %231, i32* %minijm, align 4
  %232 = load i32, i32* %i, align 4
  store i32 %232, i32* %maxijm, align 4
  br label %if.end.232

if.end.232:                                       ; preds = %if.else.231, %if.then.230
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %if.then.226
  %233 = load i32, i32* %maxiim, align 4
  %234 = load i32, i32* %miniim, align 4
  %sub234 = sub nsw i32 %233, %234
  %idxprom235 = sext i32 %sub234 to i64
  %235 = load i32, i32* %miniim, align 4
  %idxprom236 = sext i32 %235 to i64
  %236 = load float**, float*** %eff.addr, align 8
  %arrayidx237 = getelementptr inbounds float*, float** %236, i64 %idxprom236
  %237 = load float*, float** %arrayidx237, align 8
  %arrayidx238 = getelementptr inbounds float, float* %237, i64 %idxprom235
  %238 = load float, float* %arrayidx238, align 4
  store float %238, float* %eff0, align 4
  %239 = load i32, i32* %maxijm, align 4
  %240 = load i32, i32* %minijm, align 4
  %sub239 = sub nsw i32 %239, %240
  %idxprom240 = sext i32 %sub239 to i64
  %241 = load i32, i32* %minijm, align 4
  %idxprom241 = sext i32 %241 to i64
  %242 = load float**, float*** %eff.addr, align 8
  %arrayidx242 = getelementptr inbounds float*, float** %242, i64 %idxprom241
  %243 = load float*, float** %arrayidx242, align 8
  %arrayidx243 = getelementptr inbounds float, float* %243, i64 %idxprom240
  %244 = load float, float* %arrayidx243, align 4
  store float %244, float* %eff1, align 4
  %arrayidx244 = getelementptr inbounds [1 x float (float, float)*], [1 x float (float, float)*]* %clusterfuncpt, i32 0, i64 0
  %245 = load float (float, float)*, float (float, float)** %arrayidx244, align 8
  %246 = load float, float* %eff0, align 4
  %247 = load float, float* %eff1, align 4
  %call245 = call float %245(float %246, float %247)
  %248 = load i32, i32* %maxiim, align 4
  %249 = load i32, i32* %miniim, align 4
  %sub246 = sub nsw i32 %248, %249
  %idxprom247 = sext i32 %sub246 to i64
  %250 = load i32, i32* %miniim, align 4
  %idxprom248 = sext i32 %250 to i64
  %251 = load float**, float*** %eff.addr, align 8
  %arrayidx249 = getelementptr inbounds float*, float** %251, i64 %idxprom248
  %252 = load float*, float** %arrayidx249, align 8
  %arrayidx250 = getelementptr inbounds float, float* %252, i64 %idxprom247
  store float %call245, float* %arrayidx250, align 4
  store float %call245, float* %tmpfloat, align 4
  %253 = load float, float* %tmpfloat, align 4
  %254 = load i32, i32* %i, align 4
  %idxprom251 = sext i32 %254 to i64
  %255 = load float*, float** %mindisfrom, align 8
  %arrayidx252 = getelementptr inbounds float, float* %255, i64 %idxprom251
  %256 = load float, float* %arrayidx252, align 4
  %cmp253 = fcmp olt float %253, %256
  br i1 %cmp253, label %if.then.255, label %if.end.260

if.then.255:                                      ; preds = %if.end.233
  %257 = load float, float* %tmpfloat, align 4
  %258 = load i32, i32* %i, align 4
  %idxprom256 = sext i32 %258 to i64
  %259 = load float*, float** %mindisfrom, align 8
  %arrayidx257 = getelementptr inbounds float, float* %259, i64 %idxprom256
  store float %257, float* %arrayidx257, align 4
  %260 = load i32, i32* %im, align 4
  %261 = load i32, i32* %i, align 4
  %idxprom258 = sext i32 %261 to i64
  %262 = load i32*, i32** %nearest, align 8
  %arrayidx259 = getelementptr inbounds i32, i32* %262, i64 %idxprom258
  store i32 %260, i32* %arrayidx259, align 4
  br label %if.end.260

if.end.260:                                       ; preds = %if.then.255, %if.end.233
  %263 = load float, float* %tmpfloat, align 4
  %264 = load i32, i32* %im, align 4
  %idxprom261 = sext i32 %264 to i64
  %265 = load float*, float** %mindisfrom, align 8
  %arrayidx262 = getelementptr inbounds float, float* %265, i64 %idxprom261
  %266 = load float, float* %arrayidx262, align 4
  %cmp263 = fcmp olt float %263, %266
  br i1 %cmp263, label %if.then.265, label %if.end.270

if.then.265:                                      ; preds = %if.end.260
  %267 = load float, float* %tmpfloat, align 4
  %268 = load i32, i32* %im, align 4
  %idxprom266 = sext i32 %268 to i64
  %269 = load float*, float** %mindisfrom, align 8
  %arrayidx267 = getelementptr inbounds float, float* %269, i64 %idxprom266
  store float %267, float* %arrayidx267, align 4
  %270 = load i32, i32* %i, align 4
  %271 = load i32, i32* %im, align 4
  %idxprom268 = sext i32 %271 to i64
  %272 = load i32*, i32** %nearest, align 8
  %arrayidx269 = getelementptr inbounds i32, i32* %272, i64 %idxprom268
  store i32 %270, i32* %arrayidx269, align 4
  br label %if.end.270

if.end.270:                                       ; preds = %if.then.265, %if.end.260
  %273 = load i32, i32* %i, align 4
  %idxprom271 = sext i32 %273 to i64
  %274 = load i32*, i32** %nearest, align 8
  %arrayidx272 = getelementptr inbounds i32, i32* %274, i64 %idxprom271
  %275 = load i32, i32* %arrayidx272, align 4
  %276 = load i32, i32* %jm, align 4
  %cmp273 = icmp eq i32 %275, %276
  br i1 %cmp273, label %if.then.275, label %if.end.278

if.then.275:                                      ; preds = %if.end.270
  %277 = load i32, i32* %im, align 4
  %278 = load i32, i32* %i, align 4
  %idxprom276 = sext i32 %278 to i64
  %279 = load i32*, i32** %nearest, align 8
  %arrayidx277 = getelementptr inbounds i32, i32* %279, i64 %idxprom276
  store i32 %277, i32* %arrayidx277, align 4
  br label %if.end.278

if.end.278:                                       ; preds = %if.then.275, %if.end.270
  br label %if.end.279

if.end.279:                                       ; preds = %if.end.278, %land.lhs.true, %for.body.217
  br label %for.inc.280

for.inc.280:                                      ; preds = %if.end.279
  %280 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next281 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %280, i32 0, i32 0
  %281 = load %struct._Bchain*, %struct._Bchain** %next281, align 8
  store %struct._Bchain* %281, %struct._Bchain** %acpti, align 8
  br label %for.cond.214

for.end.282:                                      ; preds = %for.cond.214
  %282 = load i32, i32* %jm, align 4
  %idxprom283 = sext i32 %282 to i64
  %283 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %arrayidx284 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %283, i64 %idxprom283
  %prev285 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx284, i32 0, i32 1
  %284 = load %struct._Bchain*, %struct._Bchain** %prev285, align 8
  store %struct._Bchain* %284, %struct._Bchain** %acjmprev, align 8
  %285 = load i32, i32* %jm, align 4
  %idxprom286 = sext i32 %285 to i64
  %286 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %arrayidx287 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %286, i64 %idxprom286
  %next288 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %arrayidx287, i32 0, i32 0
  %287 = load %struct._Bchain*, %struct._Bchain** %next288, align 8
  store %struct._Bchain* %287, %struct._Bchain** %acjmnext, align 8
  %288 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %289 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %next289 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %289, i32 0, i32 0
  store %struct._Bchain* %288, %struct._Bchain** %next289, align 8
  %290 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %cmp290 = icmp ne %struct._Bchain* %290, null
  br i1 %cmp290, label %if.then.292, label %if.end.294

if.then.292:                                      ; preds = %for.end.282
  %291 = load %struct._Bchain*, %struct._Bchain** %acjmprev, align 8
  %292 = load %struct._Bchain*, %struct._Bchain** %acjmnext, align 8
  %prev293 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %292, i32 0, i32 1
  store %struct._Bchain* %291, %struct._Bchain** %prev293, align 8
  br label %if.end.294

if.end.294:                                       ; preds = %if.then.292, %for.end.282
  %293 = load i32, i32* %jm, align 4
  %idxprom295 = sext i32 %293 to i64
  %294 = load float**, float*** %eff.addr, align 8
  %arrayidx296 = getelementptr inbounds float*, float** %294, i64 %idxprom295
  %295 = load float*, float** %arrayidx296, align 8
  %296 = bitcast float* %295 to i8*
  call void @free(i8* %296) #8
  %297 = load i32, i32* %jm, align 4
  %idxprom297 = sext i32 %297 to i64
  %298 = load float**, float*** %eff.addr, align 8
  %arrayidx298 = getelementptr inbounds float*, float** %298, i64 %idxprom297
  store float* null, float** %arrayidx298, align 8
  %299 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  store %struct._Bchain* %299, %struct._Bchain** %acpti, align 8
  br label %for.cond.299

for.cond.299:                                     ; preds = %for.inc.314, %if.end.294
  %300 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %cmp300 = icmp ne %struct._Bchain* %300, null
  br i1 %cmp300, label %for.body.302, label %for.end.316

for.body.302:                                     ; preds = %for.cond.299
  %301 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %pos303 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %301, i32 0, i32 2
  %302 = load i32, i32* %pos303, align 4
  store i32 %302, i32* %i, align 4
  %303 = load i32, i32* %i, align 4
  %idxprom304 = sext i32 %303 to i64
  %304 = load i32*, i32** %nearest, align 8
  %arrayidx305 = getelementptr inbounds i32, i32* %304, i64 %idxprom304
  %305 = load i32, i32* %arrayidx305, align 4
  %306 = load i32, i32* %im, align 4
  %cmp306 = icmp eq i32 %305, %306
  br i1 %cmp306, label %if.then.308, label %if.end.313

if.then.308:                                      ; preds = %for.body.302
  %307 = load i32, i32* %nseq.addr, align 4
  %308 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %309 = load float**, float*** %eff.addr, align 8
  %310 = load float*, float** %mindisfrom, align 8
  %311 = load i32, i32* %i, align 4
  %idx.ext309 = sext i32 %311 to i64
  %add.ptr310 = getelementptr inbounds float, float* %310, i64 %idx.ext309
  %312 = load i32*, i32** %nearest, align 8
  %313 = load i32, i32* %i, align 4
  %idx.ext311 = sext i32 %313 to i64
  %add.ptr312 = getelementptr inbounds i32, i32* %312, i64 %idx.ext311
  %314 = load i32, i32* %i, align 4
  call void @setnearest(i32 %307, %struct._Bchain* %308, float** %309, float* %add.ptr310, i32* %add.ptr312, i32 %314)
  br label %if.end.313

if.end.313:                                       ; preds = %if.then.308, %for.body.302
  br label %for.inc.314

for.inc.314:                                      ; preds = %if.end.313
  %315 = load %struct._Bchain*, %struct._Bchain** %acpti, align 8
  %next315 = getelementptr inbounds %struct._Bchain, %struct._Bchain* %315, i32 0, i32 0
  %316 = load %struct._Bchain*, %struct._Bchain** %next315, align 8
  store %struct._Bchain* %316, %struct._Bchain** %acpti, align 8
  br label %for.cond.299

for.end.316:                                      ; preds = %for.cond.299
  br label %for.inc.317

for.inc.317:                                      ; preds = %for.end.316
  %317 = load i32, i32* %k, align 4
  %inc318 = add nsw i32 %317, 1
  store i32 %inc318, i32* %k, align 4
  br label %for.cond.65

for.end.319:                                      ; preds = %for.cond.65
  %318 = load float*, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %319 = bitcast float* %318 to i8*
  call void @free(i8* %319) #8
  store float* null, float** @fixed_musclesupg_float_realloc_nobk_halfmtx.tmptmplen, align 8
  %320 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %321 = bitcast i32* %320 to i8*
  call void @free(i8* %321) #8
  store i32* null, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.hist, align 8
  %322 = load %struct._Bchain*, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %323 = bitcast %struct._Bchain* %322 to i8*
  call void @free(i8* %323) #8
  store %struct._Bchain* null, %struct._Bchain** @fixed_musclesupg_float_realloc_nobk_halfmtx.ac, align 8
  %324 = load i32*, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %325 = bitcast i32* %324 to i8*
  call void @free(i8* %325) #8
  store i32* null, i32** @fixed_musclesupg_float_realloc_nobk_halfmtx.nmemar, align 8
  %326 = load float*, float** %mindisfrom, align 8
  %327 = bitcast float* %326 to i8*
  call void @free(i8* %327) #8
  %328 = load i32*, i32** %nearest, align 8
  %329 = bitcast i32* %328 to i8*
  call void @free(i8* %329) #8
  ret void
}

; Function Attrs: nounwind uwtable
define void @veryfastsupg_double_loadtop(i32 %nseq, double** %eff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %eff1 = alloca double, align 8
  %eff0 = alloca double, align 8
  %minscore = alloca double, align 8
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %prevnode = alloca i32, align 4
  %acjmnext = alloca i32, align 4
  %acjmprev = alloca i32, align 4
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %node = alloca [2 x i32], align 4
  %dumfl = alloca [2 x float], align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** @veryfastsupg_double_loadtop.hist, align 8
  %tobool2 = icmp ne i32* %2, null
  br i1 %tobool2, label %if.end.13, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %3 = load i32, i32* @njob, align 4
  %mul = mul nsw i32 %3, 50
  %call4 = call i8* @AllocateCharVec(i32 %mul)
  store i8* %call4, i8** @veryfastsupg_double_loadtop.treetmp, align 8
  %4 = load i32, i32* @njob, align 4
  %5 = load i32, i32* @njob, align 4
  %mul5 = mul nsw i32 %5, 50
  %call6 = call i8** @AllocateCharMtx(i32 %4, i32 %mul5)
  store i8** %call6, i8*** @veryfastsupg_double_loadtop.tree, align 8
  %6 = load i32, i32* @njob, align 4
  %call7 = call i32* @AllocateIntVec(i32 %6)
  store i32* %call7, i32** @veryfastsupg_double_loadtop.hist, align 8
  %7 = load i32, i32* @njob, align 4
  %conv = sext i32 %7 to i64
  %mul8 = mul i64 %conv, 8
  %call9 = call noalias i8* @malloc(i64 %mul8) #8
  %8 = bitcast i8* %call9 to double*
  store double* %8, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %9 = load i32, i32* @njob, align 4
  %conv10 = sext i32 %9 to i64
  %mul11 = mul i64 %conv10, 8
  %call12 = call noalias i8* @malloc(i64 %mul11) #8
  %10 = bitcast i8* %call12 to %struct._Achain*
  store %struct._Achain* %10, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.3, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.13
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load i8**, i8*** @veryfastsupg_double_loadtop.tree, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %idxprom
  %15 = load i8*, i8** %arrayidx, align 8
  %16 = load i32, i32* %i, align 4
  %add = add nsw i32 %16, 1
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 %add) #8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.25, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %nseq.addr, align 4
  %cmp17 = icmp slt i32 %18, %19
  br i1 %cmp17, label %for.body.19, label %for.end.27

for.body.19:                                      ; preds = %for.cond.16
  %20 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %20, 1
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %22 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx22 = getelementptr inbounds %struct._Achain, %struct._Achain* %22, i64 %idxprom21
  %next = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx22, i32 0, i32 0
  store i32 %add20, i32* %next, align 4
  %23 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %23, 1
  %24 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %24 to i64
  %25 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx24 = getelementptr inbounds %struct._Achain, %struct._Achain* %25, i64 %idxprom23
  %prev = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx24, i32 0, i32 1
  store i32 %sub, i32* %prev, align 4
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.body.19
  %26 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %26, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond.16

for.end.27:                                       ; preds = %for.cond.16
  %27 = load i32, i32* %nseq.addr, align 4
  %sub28 = sub nsw i32 %27, 1
  %idxprom29 = sext i32 %sub28 to i64
  %28 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx30 = getelementptr inbounds %struct._Achain, %struct._Achain* %28, i64 %idxprom29
  %next31 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx30, i32 0, i32 0
  store i32 -1, i32* %next31, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.38, %for.end.27
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %nseq.addr, align 4
  %cmp33 = icmp slt i32 %29, %30
  br i1 %cmp33, label %for.body.35, label %for.end.40

for.body.35:                                      ; preds = %for.cond.32
  %31 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %31 to i64
  %32 = load double*, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %arrayidx37 = getelementptr inbounds double, double* %32, i64 %idxprom36
  store double 0.000000e+00, double* %arrayidx37, align 8
  br label %for.inc.38

for.inc.38:                                       ; preds = %for.body.35
  %33 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %33, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond.32

for.end.40:                                       ; preds = %for.cond.32
  store i32 0, i32* %i, align 4
  br label %for.cond.41

for.cond.41:                                      ; preds = %for.inc.47, %for.end.40
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %nseq.addr, align 4
  %cmp42 = icmp slt i32 %34, %35
  br i1 %cmp42, label %for.body.44, label %for.end.49

for.body.44:                                      ; preds = %for.cond.41
  %36 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %36 to i64
  %37 = load i32*, i32** @veryfastsupg_double_loadtop.hist, align 8
  %arrayidx46 = getelementptr inbounds i32, i32* %37, i64 %idxprom45
  store i32 -1, i32* %arrayidx46, align 4
  br label %for.inc.47

for.inc.47:                                       ; preds = %for.body.44
  %38 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %38, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond.41

for.end.49:                                       ; preds = %for.cond.41
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.51

for.cond.51:                                      ; preds = %for.inc.262, %for.end.49
  %40 = load i32, i32* %k, align 4
  %41 = load i32, i32* %nseq.addr, align 4
  %sub52 = sub nsw i32 %41, 1
  %cmp53 = icmp slt i32 %40, %sub52
  br i1 %cmp53, label %for.body.55, label %for.end.264

for.body.55:                                      ; preds = %for.cond.51
  %42 = load i32, i32* %k, align 4
  %rem = srem i32 %42, 10
  %cmp56 = icmp eq i32 %rem, 0
  br i1 %cmp56, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %for.body.55
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %44 = load i32, i32* %k, align 4
  %45 = load i32, i32* %nseq.addr, align 4
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %44, i32 %45)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %for.body.55
  %arrayidx61 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 1
  store float -1.000000e+00, float* %arrayidx61, align 4
  %arrayidx62 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 0
  store float -1.000000e+00, float* %arrayidx62, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i32 0
  %arraydecay63 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i32 0
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  call void @loadtreeoneline(i32* %arraydecay, float* %arraydecay63, %struct._IO_FILE* %46)
  %arrayidx64 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 0
  %47 = load i32, i32* %arrayidx64, align 4
  store i32 %47, i32* %im, align 4
  %arrayidx65 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 1
  %48 = load i32, i32* %arrayidx65, align 4
  store i32 %48, i32* %jm, align 4
  %49 = load i32, i32* %jm, align 4
  %idxprom66 = sext i32 %49 to i64
  %50 = load i32, i32* %im, align 4
  %idxprom67 = sext i32 %50 to i64
  %51 = load double**, double*** %eff.addr, align 8
  %arrayidx68 = getelementptr inbounds double*, double** %51, i64 %idxprom67
  %52 = load double*, double** %arrayidx68, align 8
  %arrayidx69 = getelementptr inbounds double, double* %52, i64 %idxprom66
  %53 = load double, double* %arrayidx69, align 8
  store double %53, double* %minscore, align 8
  %arrayidx70 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 0
  %54 = load float, float* %arrayidx70, align 4
  %conv71 = fpext float %54 to double
  %cmp72 = fcmp une double %conv71, -1.000000e+00
  br i1 %cmp72, label %if.then.78, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.60
  %arrayidx74 = getelementptr inbounds [2 x float], [2 x float]* %dumfl, i32 0, i64 1
  %55 = load float, float* %arrayidx74, align 4
  %conv75 = fpext float %55 to double
  %cmp76 = fcmp une double %conv75, -1.000000e+00
  br i1 %cmp76, label %if.then.78, label %if.end.80

if.then.78:                                       ; preds = %lor.lhs.false, %if.end.60
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.80:                                        ; preds = %lor.lhs.false
  %57 = load i32, i32* %k, align 4
  %idxprom81 = sext i32 %57 to i64
  %58 = load i32***, i32**** %topol.addr, align 8
  %arrayidx82 = getelementptr inbounds i32**, i32*** %58, i64 %idxprom81
  %59 = load i32**, i32*** %arrayidx82, align 8
  %arrayidx83 = getelementptr inbounds i32*, i32** %59, i64 0
  %60 = load i32*, i32** %arrayidx83, align 8
  store i32* %60, i32** %intpt, align 8
  %61 = load i32, i32* %im, align 4
  %idxprom84 = sext i32 %61 to i64
  %62 = load i32*, i32** @veryfastsupg_double_loadtop.hist, align 8
  %arrayidx85 = getelementptr inbounds i32, i32* %62, i64 %idxprom84
  %63 = load i32, i32* %arrayidx85, align 4
  store i32 %63, i32* %prevnode, align 4
  %64 = load i32, i32* %prevnode, align 4
  %cmp86 = icmp eq i32 %64, -1
  br i1 %cmp86, label %if.then.88, label %if.else

if.then.88:                                       ; preds = %if.end.80
  %65 = load i32, i32* %im, align 4
  %66 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %66, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %65, i32* %66, align 4
  %67 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %67, align 4
  br label %if.end.114

if.else:                                          ; preds = %if.end.80
  %68 = load i32, i32* %prevnode, align 4
  %idxprom89 = sext i32 %68 to i64
  %69 = load i32***, i32**** %topol.addr, align 8
  %arrayidx90 = getelementptr inbounds i32**, i32*** %69, i64 %idxprom89
  %70 = load i32**, i32*** %arrayidx90, align 8
  %arrayidx91 = getelementptr inbounds i32*, i32** %70, i64 0
  %71 = load i32*, i32** %arrayidx91, align 8
  store i32* %71, i32** %pt1, align 8
  %72 = load i32, i32* %prevnode, align 4
  %idxprom92 = sext i32 %72 to i64
  %73 = load i32***, i32**** %topol.addr, align 8
  %arrayidx93 = getelementptr inbounds i32**, i32*** %73, i64 %idxprom92
  %74 = load i32**, i32*** %arrayidx93, align 8
  %arrayidx94 = getelementptr inbounds i32*, i32** %74, i64 1
  %75 = load i32*, i32** %arrayidx94, align 8
  store i32* %75, i32** %pt2, align 8
  %76 = load i32*, i32** %pt1, align 8
  %77 = load i32, i32* %76, align 4
  %78 = load i32*, i32** %pt2, align 8
  %79 = load i32, i32* %78, align 4
  %cmp95 = icmp sgt i32 %77, %79
  br i1 %cmp95, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %if.else
  %80 = load i32*, i32** %pt2, align 8
  store i32* %80, i32** %pt11, align 8
  %81 = load i32*, i32** %pt1, align 8
  store i32* %81, i32** %pt22, align 8
  br label %if.end.99

if.else.98:                                       ; preds = %if.else
  %82 = load i32*, i32** %pt1, align 8
  store i32* %82, i32** %pt11, align 8
  %83 = load i32*, i32** %pt2, align 8
  store i32* %83, i32** %pt22, align 8
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.98, %if.then.97
  %84 = load i32*, i32** %pt11, align 8
  store i32* %84, i32** %intpt2, align 8
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.body.103, %if.end.99
  %85 = load i32*, i32** %intpt2, align 8
  %86 = load i32, i32* %85, align 4
  %cmp101 = icmp ne i32 %86, -1
  br i1 %cmp101, label %for.body.103, label %for.end.106

for.body.103:                                     ; preds = %for.cond.100
  %87 = load i32*, i32** %intpt2, align 8
  %incdec.ptr104 = getelementptr inbounds i32, i32* %87, i32 1
  store i32* %incdec.ptr104, i32** %intpt2, align 8
  %88 = load i32, i32* %87, align 4
  %89 = load i32*, i32** %intpt, align 8
  %incdec.ptr105 = getelementptr inbounds i32, i32* %89, i32 1
  store i32* %incdec.ptr105, i32** %intpt, align 8
  store i32 %88, i32* %89, align 4
  br label %for.cond.100

for.end.106:                                      ; preds = %for.cond.100
  %90 = load i32*, i32** %pt22, align 8
  store i32* %90, i32** %intpt2, align 8
  br label %for.cond.107

for.cond.107:                                     ; preds = %for.body.110, %for.end.106
  %91 = load i32*, i32** %intpt2, align 8
  %92 = load i32, i32* %91, align 4
  %cmp108 = icmp ne i32 %92, -1
  br i1 %cmp108, label %for.body.110, label %for.end.113

for.body.110:                                     ; preds = %for.cond.107
  %93 = load i32*, i32** %intpt2, align 8
  %incdec.ptr111 = getelementptr inbounds i32, i32* %93, i32 1
  store i32* %incdec.ptr111, i32** %intpt2, align 8
  %94 = load i32, i32* %93, align 4
  %95 = load i32*, i32** %intpt, align 8
  %incdec.ptr112 = getelementptr inbounds i32, i32* %95, i32 1
  store i32* %incdec.ptr112, i32** %intpt, align 8
  store i32 %94, i32* %95, align 4
  br label %for.cond.107

for.end.113:                                      ; preds = %for.cond.107
  %96 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %96, align 4
  br label %if.end.114

if.end.114:                                       ; preds = %for.end.113, %if.then.88
  %97 = load i32, i32* %k, align 4
  %idxprom115 = sext i32 %97 to i64
  %98 = load i32***, i32**** %topol.addr, align 8
  %arrayidx116 = getelementptr inbounds i32**, i32*** %98, i64 %idxprom115
  %99 = load i32**, i32*** %arrayidx116, align 8
  %arrayidx117 = getelementptr inbounds i32*, i32** %99, i64 1
  %100 = load i32*, i32** %arrayidx117, align 8
  store i32* %100, i32** %intpt, align 8
  %101 = load i32, i32* %jm, align 4
  %idxprom118 = sext i32 %101 to i64
  %102 = load i32*, i32** @veryfastsupg_double_loadtop.hist, align 8
  %arrayidx119 = getelementptr inbounds i32, i32* %102, i64 %idxprom118
  %103 = load i32, i32* %arrayidx119, align 4
  store i32 %103, i32* %prevnode, align 4
  %104 = load i32, i32* %prevnode, align 4
  %cmp120 = icmp eq i32 %104, -1
  br i1 %cmp120, label %if.then.122, label %if.else.124

if.then.122:                                      ; preds = %if.end.114
  %105 = load i32, i32* %jm, align 4
  %106 = load i32*, i32** %intpt, align 8
  %incdec.ptr123 = getelementptr inbounds i32, i32* %106, i32 1
  store i32* %incdec.ptr123, i32** %intpt, align 8
  store i32 %105, i32* %106, align 4
  %107 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %107, align 4
  br label %if.end.150

if.else.124:                                      ; preds = %if.end.114
  %108 = load i32, i32* %prevnode, align 4
  %idxprom125 = sext i32 %108 to i64
  %109 = load i32***, i32**** %topol.addr, align 8
  %arrayidx126 = getelementptr inbounds i32**, i32*** %109, i64 %idxprom125
  %110 = load i32**, i32*** %arrayidx126, align 8
  %arrayidx127 = getelementptr inbounds i32*, i32** %110, i64 0
  %111 = load i32*, i32** %arrayidx127, align 8
  store i32* %111, i32** %pt1, align 8
  %112 = load i32, i32* %prevnode, align 4
  %idxprom128 = sext i32 %112 to i64
  %113 = load i32***, i32**** %topol.addr, align 8
  %arrayidx129 = getelementptr inbounds i32**, i32*** %113, i64 %idxprom128
  %114 = load i32**, i32*** %arrayidx129, align 8
  %arrayidx130 = getelementptr inbounds i32*, i32** %114, i64 1
  %115 = load i32*, i32** %arrayidx130, align 8
  store i32* %115, i32** %pt2, align 8
  %116 = load i32*, i32** %pt1, align 8
  %117 = load i32, i32* %116, align 4
  %118 = load i32*, i32** %pt2, align 8
  %119 = load i32, i32* %118, align 4
  %cmp131 = icmp sgt i32 %117, %119
  br i1 %cmp131, label %if.then.133, label %if.else.134

if.then.133:                                      ; preds = %if.else.124
  %120 = load i32*, i32** %pt2, align 8
  store i32* %120, i32** %pt11, align 8
  %121 = load i32*, i32** %pt1, align 8
  store i32* %121, i32** %pt22, align 8
  br label %if.end.135

if.else.134:                                      ; preds = %if.else.124
  %122 = load i32*, i32** %pt1, align 8
  store i32* %122, i32** %pt11, align 8
  %123 = load i32*, i32** %pt2, align 8
  store i32* %123, i32** %pt22, align 8
  br label %if.end.135

if.end.135:                                       ; preds = %if.else.134, %if.then.133
  %124 = load i32*, i32** %pt11, align 8
  store i32* %124, i32** %intpt2, align 8
  br label %for.cond.136

for.cond.136:                                     ; preds = %for.body.139, %if.end.135
  %125 = load i32*, i32** %intpt2, align 8
  %126 = load i32, i32* %125, align 4
  %cmp137 = icmp ne i32 %126, -1
  br i1 %cmp137, label %for.body.139, label %for.end.142

for.body.139:                                     ; preds = %for.cond.136
  %127 = load i32*, i32** %intpt2, align 8
  %incdec.ptr140 = getelementptr inbounds i32, i32* %127, i32 1
  store i32* %incdec.ptr140, i32** %intpt2, align 8
  %128 = load i32, i32* %127, align 4
  %129 = load i32*, i32** %intpt, align 8
  %incdec.ptr141 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %incdec.ptr141, i32** %intpt, align 8
  store i32 %128, i32* %129, align 4
  br label %for.cond.136

for.end.142:                                      ; preds = %for.cond.136
  %130 = load i32*, i32** %pt22, align 8
  store i32* %130, i32** %intpt2, align 8
  br label %for.cond.143

for.cond.143:                                     ; preds = %for.body.146, %for.end.142
  %131 = load i32*, i32** %intpt2, align 8
  %132 = load i32, i32* %131, align 4
  %cmp144 = icmp ne i32 %132, -1
  br i1 %cmp144, label %for.body.146, label %for.end.149

for.body.146:                                     ; preds = %for.cond.143
  %133 = load i32*, i32** %intpt2, align 8
  %incdec.ptr147 = getelementptr inbounds i32, i32* %133, i32 1
  store i32* %incdec.ptr147, i32** %intpt2, align 8
  %134 = load i32, i32* %133, align 4
  %135 = load i32*, i32** %intpt, align 8
  %incdec.ptr148 = getelementptr inbounds i32, i32* %135, i32 1
  store i32* %incdec.ptr148, i32** %intpt, align 8
  store i32 %134, i32* %135, align 4
  br label %for.cond.143

for.end.149:                                      ; preds = %for.cond.143
  %136 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %136, align 4
  br label %if.end.150

if.end.150:                                       ; preds = %for.end.149, %if.then.122
  %137 = load double, double* %minscore, align 8
  %mul151 = fmul double %137, 5.000000e-01
  store double %mul151, double* %minscore, align 8
  %138 = load double, double* %minscore, align 8
  %139 = load i32, i32* %im, align 4
  %idxprom152 = sext i32 %139 to i64
  %140 = load double*, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %arrayidx153 = getelementptr inbounds double, double* %140, i64 %idxprom152
  %141 = load double, double* %arrayidx153, align 8
  %sub154 = fsub double %138, %141
  %142 = load i32, i32* %k, align 4
  %idxprom155 = sext i32 %142 to i64
  %143 = load double**, double*** %len.addr, align 8
  %arrayidx156 = getelementptr inbounds double*, double** %143, i64 %idxprom155
  %144 = load double*, double** %arrayidx156, align 8
  %arrayidx157 = getelementptr inbounds double, double* %144, i64 0
  store double %sub154, double* %arrayidx157, align 8
  %145 = load double, double* %minscore, align 8
  %146 = load i32, i32* %jm, align 4
  %idxprom158 = sext i32 %146 to i64
  %147 = load double*, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %arrayidx159 = getelementptr inbounds double, double* %147, i64 %idxprom158
  %148 = load double, double* %arrayidx159, align 8
  %sub160 = fsub double %145, %148
  %149 = load i32, i32* %k, align 4
  %idxprom161 = sext i32 %149 to i64
  %150 = load double**, double*** %len.addr, align 8
  %arrayidx162 = getelementptr inbounds double*, double** %150, i64 %idxprom161
  %151 = load double*, double** %arrayidx162, align 8
  %arrayidx163 = getelementptr inbounds double, double* %151, i64 1
  store double %sub160, double* %arrayidx163, align 8
  %152 = load i32, i32* %k, align 4
  %idxprom164 = sext i32 %152 to i64
  %153 = load double**, double*** %len.addr, align 8
  %arrayidx165 = getelementptr inbounds double*, double** %153, i64 %idxprom164
  %154 = load double*, double** %arrayidx165, align 8
  %arrayidx166 = getelementptr inbounds double, double* %154, i64 0
  %155 = load double, double* %arrayidx166, align 8
  %cmp167 = fcmp olt double %155, 0.000000e+00
  br i1 %cmp167, label %if.then.169, label %if.end.173

if.then.169:                                      ; preds = %if.end.150
  %156 = load i32, i32* %k, align 4
  %idxprom170 = sext i32 %156 to i64
  %157 = load double**, double*** %len.addr, align 8
  %arrayidx171 = getelementptr inbounds double*, double** %157, i64 %idxprom170
  %158 = load double*, double** %arrayidx171, align 8
  %arrayidx172 = getelementptr inbounds double, double* %158, i64 0
  store double 0.000000e+00, double* %arrayidx172, align 8
  br label %if.end.173

if.end.173:                                       ; preds = %if.then.169, %if.end.150
  %159 = load i32, i32* %k, align 4
  %idxprom174 = sext i32 %159 to i64
  %160 = load double**, double*** %len.addr, align 8
  %arrayidx175 = getelementptr inbounds double*, double** %160, i64 %idxprom174
  %161 = load double*, double** %arrayidx175, align 8
  %arrayidx176 = getelementptr inbounds double, double* %161, i64 1
  %162 = load double, double* %arrayidx176, align 8
  %cmp177 = fcmp olt double %162, 0.000000e+00
  br i1 %cmp177, label %if.then.179, label %if.end.183

if.then.179:                                      ; preds = %if.end.173
  %163 = load i32, i32* %k, align 4
  %idxprom180 = sext i32 %163 to i64
  %164 = load double**, double*** %len.addr, align 8
  %arrayidx181 = getelementptr inbounds double*, double** %164, i64 %idxprom180
  %165 = load double*, double** %arrayidx181, align 8
  %arrayidx182 = getelementptr inbounds double, double* %165, i64 1
  store double 0.000000e+00, double* %arrayidx182, align 8
  br label %if.end.183

if.end.183:                                       ; preds = %if.then.179, %if.end.173
  %166 = load double, double* %minscore, align 8
  %167 = load i32, i32* %im, align 4
  %idxprom184 = sext i32 %167 to i64
  %168 = load double*, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %arrayidx185 = getelementptr inbounds double, double* %168, i64 %idxprom184
  store double %166, double* %arrayidx185, align 8
  %169 = load i32, i32* %k, align 4
  %170 = load i32, i32* %im, align 4
  %idxprom186 = sext i32 %170 to i64
  %171 = load i32*, i32** @veryfastsupg_double_loadtop.hist, align 8
  %arrayidx187 = getelementptr inbounds i32, i32* %171, i64 %idxprom186
  store i32 %169, i32* %arrayidx187, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.188

for.cond.188:                                     ; preds = %for.inc.227, %if.end.183
  %172 = load i32, i32* %i, align 4
  %cmp189 = icmp ne i32 %172, -1
  br i1 %cmp189, label %for.body.191, label %for.end.231

for.body.191:                                     ; preds = %for.cond.188
  %173 = load i32, i32* %i, align 4
  %174 = load i32, i32* %im, align 4
  %cmp192 = icmp ne i32 %173, %174
  br i1 %cmp192, label %land.lhs.true, label %if.end.226

land.lhs.true:                                    ; preds = %for.body.191
  %175 = load i32, i32* %i, align 4
  %176 = load i32, i32* %jm, align 4
  %cmp194 = icmp ne i32 %175, %176
  br i1 %cmp194, label %if.then.196, label %if.end.226

if.then.196:                                      ; preds = %land.lhs.true
  %177 = load i32, i32* %i, align 4
  %178 = load i32, i32* %im, align 4
  %cmp197 = icmp slt i32 %177, %178
  br i1 %cmp197, label %if.then.199, label %if.else.200

if.then.199:                                      ; preds = %if.then.196
  %179 = load i32, i32* %i, align 4
  store i32 %179, i32* %miniim, align 4
  %180 = load i32, i32* %im, align 4
  store i32 %180, i32* %maxiim, align 4
  %181 = load i32, i32* %i, align 4
  store i32 %181, i32* %minijm, align 4
  %182 = load i32, i32* %jm, align 4
  store i32 %182, i32* %maxijm, align 4
  br label %if.end.206

if.else.200:                                      ; preds = %if.then.196
  %183 = load i32, i32* %i, align 4
  %184 = load i32, i32* %jm, align 4
  %cmp201 = icmp slt i32 %183, %184
  br i1 %cmp201, label %if.then.203, label %if.else.204

if.then.203:                                      ; preds = %if.else.200
  %185 = load i32, i32* %im, align 4
  store i32 %185, i32* %miniim, align 4
  %186 = load i32, i32* %i, align 4
  store i32 %186, i32* %maxiim, align 4
  %187 = load i32, i32* %i, align 4
  store i32 %187, i32* %minijm, align 4
  %188 = load i32, i32* %jm, align 4
  store i32 %188, i32* %maxijm, align 4
  br label %if.end.205

if.else.204:                                      ; preds = %if.else.200
  %189 = load i32, i32* %im, align 4
  store i32 %189, i32* %miniim, align 4
  %190 = load i32, i32* %i, align 4
  store i32 %190, i32* %maxiim, align 4
  %191 = load i32, i32* %jm, align 4
  store i32 %191, i32* %minijm, align 4
  %192 = load i32, i32* %i, align 4
  store i32 %192, i32* %maxijm, align 4
  br label %if.end.205

if.end.205:                                       ; preds = %if.else.204, %if.then.203
  br label %if.end.206

if.end.206:                                       ; preds = %if.end.205, %if.then.199
  %193 = load i32, i32* %maxiim, align 4
  %idxprom207 = sext i32 %193 to i64
  %194 = load i32, i32* %miniim, align 4
  %idxprom208 = sext i32 %194 to i64
  %195 = load double**, double*** %eff.addr, align 8
  %arrayidx209 = getelementptr inbounds double*, double** %195, i64 %idxprom208
  %196 = load double*, double** %arrayidx209, align 8
  %arrayidx210 = getelementptr inbounds double, double* %196, i64 %idxprom207
  %197 = load double, double* %arrayidx210, align 8
  store double %197, double* %eff0, align 8
  %198 = load i32, i32* %maxijm, align 4
  %idxprom211 = sext i32 %198 to i64
  %199 = load i32, i32* %minijm, align 4
  %idxprom212 = sext i32 %199 to i64
  %200 = load double**, double*** %eff.addr, align 8
  %arrayidx213 = getelementptr inbounds double*, double** %200, i64 %idxprom212
  %201 = load double*, double** %arrayidx213, align 8
  %arrayidx214 = getelementptr inbounds double, double* %201, i64 %idxprom211
  %202 = load double, double* %arrayidx214, align 8
  store double %202, double* %eff1, align 8
  %203 = load double, double* %eff0, align 8
  %204 = load double, double* %eff1, align 8
  %cmp215 = fcmp olt double %203, %204
  br i1 %cmp215, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.206
  %205 = load double, double* %eff0, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.206
  %206 = load double, double* %eff1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %205, %cond.true ], [ %206, %cond.false ]
  %mul217 = fmul double %cond, 9.000000e-01
  %207 = load double, double* %eff0, align 8
  %208 = load double, double* %eff1, align 8
  %add218 = fadd double %207, %208
  %mul219 = fmul double %add218, 5.000000e-01
  %mul220 = fmul double %mul219, 1.000000e-01
  %add221 = fadd double %mul217, %mul220
  %209 = load i32, i32* %maxiim, align 4
  %idxprom222 = sext i32 %209 to i64
  %210 = load i32, i32* %miniim, align 4
  %idxprom223 = sext i32 %210 to i64
  %211 = load double**, double*** %eff.addr, align 8
  %arrayidx224 = getelementptr inbounds double*, double** %211, i64 %idxprom223
  %212 = load double*, double** %arrayidx224, align 8
  %arrayidx225 = getelementptr inbounds double, double* %212, i64 %idxprom222
  store double %add221, double* %arrayidx225, align 8
  br label %if.end.226

if.end.226:                                       ; preds = %cond.end, %land.lhs.true, %for.body.191
  br label %for.inc.227

for.inc.227:                                      ; preds = %if.end.226
  %213 = load i32, i32* %i, align 4
  %idxprom228 = sext i32 %213 to i64
  %214 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx229 = getelementptr inbounds %struct._Achain, %struct._Achain* %214, i64 %idxprom228
  %next230 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx229, i32 0, i32 0
  %215 = load i32, i32* %next230, align 4
  store i32 %215, i32* %i, align 4
  br label %for.cond.188

for.end.231:                                      ; preds = %for.cond.188
  %216 = load i32, i32* %jm, align 4
  %idxprom232 = sext i32 %216 to i64
  %217 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx233 = getelementptr inbounds %struct._Achain, %struct._Achain* %217, i64 %idxprom232
  %prev234 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx233, i32 0, i32 1
  %218 = load i32, i32* %prev234, align 4
  store i32 %218, i32* %acjmprev, align 4
  %219 = load i32, i32* %jm, align 4
  %idxprom235 = sext i32 %219 to i64
  %220 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx236 = getelementptr inbounds %struct._Achain, %struct._Achain* %220, i64 %idxprom235
  %next237 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx236, i32 0, i32 0
  %221 = load i32, i32* %next237, align 4
  store i32 %221, i32* %acjmnext, align 4
  %222 = load i32, i32* %acjmnext, align 4
  %223 = load i32, i32* %acjmprev, align 4
  %idxprom238 = sext i32 %223 to i64
  %224 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx239 = getelementptr inbounds %struct._Achain, %struct._Achain* %224, i64 %idxprom238
  %next240 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx239, i32 0, i32 0
  store i32 %222, i32* %next240, align 4
  %225 = load i32, i32* %acjmnext, align 4
  %cmp241 = icmp ne i32 %225, -1
  br i1 %cmp241, label %if.then.243, label %if.end.247

if.then.243:                                      ; preds = %for.end.231
  %226 = load i32, i32* %acjmprev, align 4
  %227 = load i32, i32* %acjmnext, align 4
  %idxprom244 = sext i32 %227 to i64
  %228 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %arrayidx245 = getelementptr inbounds %struct._Achain, %struct._Achain* %228, i64 %idxprom244
  %prev246 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx245, i32 0, i32 1
  store i32 %226, i32* %prev246, align 4
  br label %if.end.247

if.end.247:                                       ; preds = %if.then.243, %for.end.231
  %229 = load i8*, i8** @veryfastsupg_double_loadtop.treetmp, align 8
  %230 = load i32, i32* %im, align 4
  %idxprom248 = sext i32 %230 to i64
  %231 = load i8**, i8*** @veryfastsupg_double_loadtop.tree, align 8
  %arrayidx249 = getelementptr inbounds i8*, i8** %231, i64 %idxprom248
  %232 = load i8*, i8** %arrayidx249, align 8
  %233 = load i32, i32* %k, align 4
  %idxprom250 = sext i32 %233 to i64
  %234 = load double**, double*** %len.addr, align 8
  %arrayidx251 = getelementptr inbounds double*, double** %234, i64 %idxprom250
  %235 = load double*, double** %arrayidx251, align 8
  %arrayidx252 = getelementptr inbounds double, double* %235, i64 0
  %236 = load double, double* %arrayidx252, align 8
  %237 = load i32, i32* %jm, align 4
  %idxprom253 = sext i32 %237 to i64
  %238 = load i8**, i8*** @veryfastsupg_double_loadtop.tree, align 8
  %arrayidx254 = getelementptr inbounds i8*, i8** %238, i64 %idxprom253
  %239 = load i8*, i8** %arrayidx254, align 8
  %240 = load i32, i32* %k, align 4
  %idxprom255 = sext i32 %240 to i64
  %241 = load double**, double*** %len.addr, align 8
  %arrayidx256 = getelementptr inbounds double*, double** %241, i64 %idxprom255
  %242 = load double*, double** %arrayidx256, align 8
  %arrayidx257 = getelementptr inbounds double, double* %242, i64 1
  %243 = load double, double* %arrayidx257, align 8
  %call258 = call i32 (i8*, i8*, ...) @sprintf(i8* %229, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* %232, double %236, i8* %239, double %243) #8
  %244 = load i32, i32* %im, align 4
  %idxprom259 = sext i32 %244 to i64
  %245 = load i8**, i8*** @veryfastsupg_double_loadtop.tree, align 8
  %arrayidx260 = getelementptr inbounds i8*, i8** %245, i64 %idxprom259
  %246 = load i8*, i8** %arrayidx260, align 8
  %247 = load i8*, i8** @veryfastsupg_double_loadtop.treetmp, align 8
  %call261 = call i8* @strcpy(i8* %246, i8* %247) #8
  br label %for.inc.262

for.inc.262:                                      ; preds = %if.end.247
  %248 = load i32, i32* %k, align 4
  %inc263 = add nsw i32 %248, 1
  store i32 %inc263, i32* %k, align 4
  br label %for.cond.51

for.end.264:                                      ; preds = %for.cond.51
  %249 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call265 = call i32 @fclose(%struct._IO_FILE* %249)
  %call266 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store %struct._IO_FILE* %call266, %struct._IO_FILE** %fp, align 8
  %250 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %251 = load i8*, i8** @veryfastsupg_double_loadtop.treetmp, align 8
  %call267 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %250, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %251)
  %252 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call268 = call i32 @fclose(%struct._IO_FILE* %252)
  %253 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call269 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %253, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %254 = load double*, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %255 = bitcast double* %254 to i8*
  call void @free(i8* %255) #8
  store double* null, double** @veryfastsupg_double_loadtop.tmptmplen, align 8
  %256 = load i32*, i32** @veryfastsupg_double_loadtop.hist, align 8
  %257 = bitcast i32* %256 to i8*
  call void @free(i8* %257) #8
  store i32* null, i32** @veryfastsupg_double_loadtop.hist, align 8
  %258 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %259 = bitcast %struct._Achain* %258 to i8*
  call void @free(i8* %259) #8
  store %struct._Achain* null, %struct._Achain** @veryfastsupg_double_loadtop.ac, align 8
  %260 = load i8**, i8*** @veryfastsupg_double_loadtop.tree, align 8
  call void @FreeCharMtx(i8** %260)
  %261 = load i8*, i8** @veryfastsupg_double_loadtop.treetmp, align 8
  call void @free(i8* %261) #8
  ret void
}

; Function Attrs: nounwind uwtable
define void @veryfastsupg_double_loadtree(i32 %nseq, double** %eff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %eff1 = alloca double, align 8
  %eff0 = alloca double, align 8
  %minscore = alloca double, align 8
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %prevnode = alloca i32, align 4
  %acjmnext = alloca i32, align 4
  %acjmprev = alloca i32, align 4
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %fp = alloca %struct._IO_FILE*, align 8
  %node = alloca [2 x i32], align 4
  %lenfl = alloca [2 x float], align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fp, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** @veryfastsupg_double_loadtree.hist, align 8
  %tobool2 = icmp ne i32* %2, null
  br i1 %tobool2, label %if.end.13, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %3 = load i32, i32* @njob, align 4
  %mul = mul nsw i32 %3, 50
  %call4 = call i8* @AllocateCharVec(i32 %mul)
  store i8* %call4, i8** @veryfastsupg_double_loadtree.treetmp, align 8
  %4 = load i32, i32* @njob, align 4
  %5 = load i32, i32* @njob, align 4
  %mul5 = mul nsw i32 %5, 50
  %call6 = call i8** @AllocateCharMtx(i32 %4, i32 %mul5)
  store i8** %call6, i8*** @veryfastsupg_double_loadtree.tree, align 8
  %6 = load i32, i32* @njob, align 4
  %call7 = call i32* @AllocateIntVec(i32 %6)
  store i32* %call7, i32** @veryfastsupg_double_loadtree.hist, align 8
  %7 = load i32, i32* @njob, align 4
  %conv = sext i32 %7 to i64
  %mul8 = mul i64 %conv, 8
  %call9 = call noalias i8* @malloc(i64 %mul8) #8
  %8 = bitcast i8* %call9 to double*
  store double* %8, double** @veryfastsupg_double_loadtree.tmptmplen, align 8
  %9 = load i32, i32* @njob, align 4
  %conv10 = sext i32 %9 to i64
  %mul11 = mul i64 %conv10, 8
  %call12 = call noalias i8* @malloc(i64 %mul11) #8
  %10 = bitcast i8* %call12 to %struct._Achain*
  store %struct._Achain* %10, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.3, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.13
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %11, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4
  %idxprom = sext i32 %13 to i64
  %14 = load i8**, i8*** @veryfastsupg_double_loadtree.tree, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %idxprom
  %15 = load i8*, i8** %arrayidx, align 8
  %16 = load i32, i32* %i, align 4
  %add = add nsw i32 %16, 1
  %call15 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i32 %add) #8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.25, %for.end
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %nseq.addr, align 4
  %cmp17 = icmp slt i32 %18, %19
  br i1 %cmp17, label %for.body.19, label %for.end.27

for.body.19:                                      ; preds = %for.cond.16
  %20 = load i32, i32* %i, align 4
  %add20 = add nsw i32 %20, 1
  %21 = load i32, i32* %i, align 4
  %idxprom21 = sext i32 %21 to i64
  %22 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx22 = getelementptr inbounds %struct._Achain, %struct._Achain* %22, i64 %idxprom21
  %next = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx22, i32 0, i32 0
  store i32 %add20, i32* %next, align 4
  %23 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %23, 1
  %24 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %24 to i64
  %25 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx24 = getelementptr inbounds %struct._Achain, %struct._Achain* %25, i64 %idxprom23
  %prev = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx24, i32 0, i32 1
  store i32 %sub, i32* %prev, align 4
  br label %for.inc.25

for.inc.25:                                       ; preds = %for.body.19
  %26 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %26, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond.16

for.end.27:                                       ; preds = %for.cond.16
  %27 = load i32, i32* %nseq.addr, align 4
  %sub28 = sub nsw i32 %27, 1
  %idxprom29 = sext i32 %sub28 to i64
  %28 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx30 = getelementptr inbounds %struct._Achain, %struct._Achain* %28, i64 %idxprom29
  %next31 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx30, i32 0, i32 0
  store i32 -1, i32* %next31, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.32

for.cond.32:                                      ; preds = %for.inc.38, %for.end.27
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %nseq.addr, align 4
  %cmp33 = icmp slt i32 %29, %30
  br i1 %cmp33, label %for.body.35, label %for.end.40

for.body.35:                                      ; preds = %for.cond.32
  %31 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %31 to i64
  %32 = load double*, double** @veryfastsupg_double_loadtree.tmptmplen, align 8
  %arrayidx37 = getelementptr inbounds double, double* %32, i64 %idxprom36
  store double 0.000000e+00, double* %arrayidx37, align 8
  br label %for.inc.38

for.inc.38:                                       ; preds = %for.body.35
  %33 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %33, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond.32

for.end.40:                                       ; preds = %for.cond.32
  store i32 0, i32* %i, align 4
  br label %for.cond.41

for.cond.41:                                      ; preds = %for.inc.47, %for.end.40
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %nseq.addr, align 4
  %cmp42 = icmp slt i32 %34, %35
  br i1 %cmp42, label %for.body.44, label %for.end.49

for.body.44:                                      ; preds = %for.cond.41
  %36 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %36 to i64
  %37 = load i32*, i32** @veryfastsupg_double_loadtree.hist, align 8
  %arrayidx46 = getelementptr inbounds i32, i32* %37, i64 %idxprom45
  store i32 -1, i32* %arrayidx46, align 4
  br label %for.inc.47

for.inc.47:                                       ; preds = %for.body.44
  %38 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %38, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond.41

for.end.49:                                       ; preds = %for.cond.41
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.51

for.cond.51:                                      ; preds = %for.inc.254, %for.end.49
  %40 = load i32, i32* %k, align 4
  %41 = load i32, i32* %nseq.addr, align 4
  %sub52 = sub nsw i32 %41, 1
  %cmp53 = icmp slt i32 %40, %sub52
  br i1 %cmp53, label %for.body.55, label %for.end.256

for.body.55:                                      ; preds = %for.cond.51
  %42 = load i32, i32* %k, align 4
  %rem = srem i32 %42, 10
  %cmp56 = icmp eq i32 %rem, 0
  br i1 %cmp56, label %if.then.58, label %if.end.60

if.then.58:                                       ; preds = %for.body.55
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %44 = load i32, i32* %k, align 4
  %45 = load i32, i32* %nseq.addr, align 4
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %44, i32 %45)
  br label %if.end.60

if.end.60:                                        ; preds = %if.then.58, %for.body.55
  %arrayidx61 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 1
  store float -1.000000e+00, float* %arrayidx61, align 4
  %arrayidx62 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 0
  store float -1.000000e+00, float* %arrayidx62, align 4
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i32 0
  %arraydecay63 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i32 0
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  call void @loadtreeoneline(i32* %arraydecay, float* %arraydecay63, %struct._IO_FILE* %46)
  %arrayidx64 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 0
  %47 = load i32, i32* %arrayidx64, align 4
  store i32 %47, i32* %im, align 4
  %arrayidx65 = getelementptr inbounds [2 x i32], [2 x i32]* %node, i32 0, i64 1
  %48 = load i32, i32* %arrayidx65, align 4
  store i32 %48, i32* %jm, align 4
  %49 = load i32, i32* %jm, align 4
  %idxprom66 = sext i32 %49 to i64
  %50 = load i32, i32* %im, align 4
  %idxprom67 = sext i32 %50 to i64
  %51 = load double**, double*** %eff.addr, align 8
  %arrayidx68 = getelementptr inbounds double*, double** %51, i64 %idxprom67
  %52 = load double*, double** %arrayidx68, align 8
  %arrayidx69 = getelementptr inbounds double, double* %52, i64 %idxprom66
  %53 = load double, double* %arrayidx69, align 8
  store double %53, double* %minscore, align 8
  %arrayidx70 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 0
  %54 = load float, float* %arrayidx70, align 4
  %conv71 = fpext float %54 to double
  %cmp72 = fcmp oeq double %conv71, -1.000000e+00
  br i1 %cmp72, label %if.then.78, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.60
  %arrayidx74 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 1
  %55 = load float, float* %arrayidx74, align 4
  %conv75 = fpext float %55 to double
  %cmp76 = fcmp oeq double %conv75, -1.000000e+00
  br i1 %cmp76, label %if.then.78, label %if.end.80

if.then.78:                                       ; preds = %lor.lhs.false, %if.end.60
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.80:                                        ; preds = %lor.lhs.false
  %arrayidx81 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 0
  %57 = load float, float* %arrayidx81, align 4
  %conv82 = fpext float %57 to double
  %cmp83 = fcmp olt double %conv82, 0.000000e+00
  br i1 %cmp83, label %if.then.85, label %if.end.87

if.then.85:                                       ; preds = %if.end.80
  %arrayidx86 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 0
  store float 0.000000e+00, float* %arrayidx86, align 4
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.85, %if.end.80
  %arrayidx88 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 1
  %58 = load float, float* %arrayidx88, align 4
  %conv89 = fpext float %58 to double
  %cmp90 = fcmp olt double %conv89, 0.000000e+00
  br i1 %cmp90, label %if.then.92, label %if.end.94

if.then.92:                                       ; preds = %if.end.87
  %arrayidx93 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 1
  store float 0.000000e+00, float* %arrayidx93, align 4
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.92, %if.end.87
  %59 = load i32, i32* %k, align 4
  %idxprom95 = sext i32 %59 to i64
  %60 = load i32***, i32**** %topol.addr, align 8
  %arrayidx96 = getelementptr inbounds i32**, i32*** %60, i64 %idxprom95
  %61 = load i32**, i32*** %arrayidx96, align 8
  %arrayidx97 = getelementptr inbounds i32*, i32** %61, i64 0
  %62 = load i32*, i32** %arrayidx97, align 8
  store i32* %62, i32** %intpt, align 8
  %63 = load i32, i32* %im, align 4
  %idxprom98 = sext i32 %63 to i64
  %64 = load i32*, i32** @veryfastsupg_double_loadtree.hist, align 8
  %arrayidx99 = getelementptr inbounds i32, i32* %64, i64 %idxprom98
  %65 = load i32, i32* %arrayidx99, align 4
  store i32 %65, i32* %prevnode, align 4
  %66 = load i32, i32* %prevnode, align 4
  %cmp100 = icmp eq i32 %66, -1
  br i1 %cmp100, label %if.then.102, label %if.else

if.then.102:                                      ; preds = %if.end.94
  %67 = load i32, i32* %im, align 4
  %68 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %68, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %67, i32* %68, align 4
  %69 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %69, align 4
  br label %if.end.128

if.else:                                          ; preds = %if.end.94
  %70 = load i32, i32* %prevnode, align 4
  %idxprom103 = sext i32 %70 to i64
  %71 = load i32***, i32**** %topol.addr, align 8
  %arrayidx104 = getelementptr inbounds i32**, i32*** %71, i64 %idxprom103
  %72 = load i32**, i32*** %arrayidx104, align 8
  %arrayidx105 = getelementptr inbounds i32*, i32** %72, i64 0
  %73 = load i32*, i32** %arrayidx105, align 8
  store i32* %73, i32** %pt1, align 8
  %74 = load i32, i32* %prevnode, align 4
  %idxprom106 = sext i32 %74 to i64
  %75 = load i32***, i32**** %topol.addr, align 8
  %arrayidx107 = getelementptr inbounds i32**, i32*** %75, i64 %idxprom106
  %76 = load i32**, i32*** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds i32*, i32** %76, i64 1
  %77 = load i32*, i32** %arrayidx108, align 8
  store i32* %77, i32** %pt2, align 8
  %78 = load i32*, i32** %pt1, align 8
  %79 = load i32, i32* %78, align 4
  %80 = load i32*, i32** %pt2, align 8
  %81 = load i32, i32* %80, align 4
  %cmp109 = icmp sgt i32 %79, %81
  br i1 %cmp109, label %if.then.111, label %if.else.112

if.then.111:                                      ; preds = %if.else
  %82 = load i32*, i32** %pt2, align 8
  store i32* %82, i32** %pt11, align 8
  %83 = load i32*, i32** %pt1, align 8
  store i32* %83, i32** %pt22, align 8
  br label %if.end.113

if.else.112:                                      ; preds = %if.else
  %84 = load i32*, i32** %pt1, align 8
  store i32* %84, i32** %pt11, align 8
  %85 = load i32*, i32** %pt2, align 8
  store i32* %85, i32** %pt22, align 8
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.112, %if.then.111
  %86 = load i32*, i32** %pt11, align 8
  store i32* %86, i32** %intpt2, align 8
  br label %for.cond.114

for.cond.114:                                     ; preds = %for.body.117, %if.end.113
  %87 = load i32*, i32** %intpt2, align 8
  %88 = load i32, i32* %87, align 4
  %cmp115 = icmp ne i32 %88, -1
  br i1 %cmp115, label %for.body.117, label %for.end.120

for.body.117:                                     ; preds = %for.cond.114
  %89 = load i32*, i32** %intpt2, align 8
  %incdec.ptr118 = getelementptr inbounds i32, i32* %89, i32 1
  store i32* %incdec.ptr118, i32** %intpt2, align 8
  %90 = load i32, i32* %89, align 4
  %91 = load i32*, i32** %intpt, align 8
  %incdec.ptr119 = getelementptr inbounds i32, i32* %91, i32 1
  store i32* %incdec.ptr119, i32** %intpt, align 8
  store i32 %90, i32* %91, align 4
  br label %for.cond.114

for.end.120:                                      ; preds = %for.cond.114
  %92 = load i32*, i32** %pt22, align 8
  store i32* %92, i32** %intpt2, align 8
  br label %for.cond.121

for.cond.121:                                     ; preds = %for.body.124, %for.end.120
  %93 = load i32*, i32** %intpt2, align 8
  %94 = load i32, i32* %93, align 4
  %cmp122 = icmp ne i32 %94, -1
  br i1 %cmp122, label %for.body.124, label %for.end.127

for.body.124:                                     ; preds = %for.cond.121
  %95 = load i32*, i32** %intpt2, align 8
  %incdec.ptr125 = getelementptr inbounds i32, i32* %95, i32 1
  store i32* %incdec.ptr125, i32** %intpt2, align 8
  %96 = load i32, i32* %95, align 4
  %97 = load i32*, i32** %intpt, align 8
  %incdec.ptr126 = getelementptr inbounds i32, i32* %97, i32 1
  store i32* %incdec.ptr126, i32** %intpt, align 8
  store i32 %96, i32* %97, align 4
  br label %for.cond.121

for.end.127:                                      ; preds = %for.cond.121
  %98 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %98, align 4
  br label %if.end.128

if.end.128:                                       ; preds = %for.end.127, %if.then.102
  %99 = load i32, i32* %k, align 4
  %idxprom129 = sext i32 %99 to i64
  %100 = load i32***, i32**** %topol.addr, align 8
  %arrayidx130 = getelementptr inbounds i32**, i32*** %100, i64 %idxprom129
  %101 = load i32**, i32*** %arrayidx130, align 8
  %arrayidx131 = getelementptr inbounds i32*, i32** %101, i64 1
  %102 = load i32*, i32** %arrayidx131, align 8
  store i32* %102, i32** %intpt, align 8
  %103 = load i32, i32* %jm, align 4
  %idxprom132 = sext i32 %103 to i64
  %104 = load i32*, i32** @veryfastsupg_double_loadtree.hist, align 8
  %arrayidx133 = getelementptr inbounds i32, i32* %104, i64 %idxprom132
  %105 = load i32, i32* %arrayidx133, align 4
  store i32 %105, i32* %prevnode, align 4
  %106 = load i32, i32* %prevnode, align 4
  %cmp134 = icmp eq i32 %106, -1
  br i1 %cmp134, label %if.then.136, label %if.else.138

if.then.136:                                      ; preds = %if.end.128
  %107 = load i32, i32* %jm, align 4
  %108 = load i32*, i32** %intpt, align 8
  %incdec.ptr137 = getelementptr inbounds i32, i32* %108, i32 1
  store i32* %incdec.ptr137, i32** %intpt, align 8
  store i32 %107, i32* %108, align 4
  %109 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %109, align 4
  br label %if.end.164

if.else.138:                                      ; preds = %if.end.128
  %110 = load i32, i32* %prevnode, align 4
  %idxprom139 = sext i32 %110 to i64
  %111 = load i32***, i32**** %topol.addr, align 8
  %arrayidx140 = getelementptr inbounds i32**, i32*** %111, i64 %idxprom139
  %112 = load i32**, i32*** %arrayidx140, align 8
  %arrayidx141 = getelementptr inbounds i32*, i32** %112, i64 0
  %113 = load i32*, i32** %arrayidx141, align 8
  store i32* %113, i32** %pt1, align 8
  %114 = load i32, i32* %prevnode, align 4
  %idxprom142 = sext i32 %114 to i64
  %115 = load i32***, i32**** %topol.addr, align 8
  %arrayidx143 = getelementptr inbounds i32**, i32*** %115, i64 %idxprom142
  %116 = load i32**, i32*** %arrayidx143, align 8
  %arrayidx144 = getelementptr inbounds i32*, i32** %116, i64 1
  %117 = load i32*, i32** %arrayidx144, align 8
  store i32* %117, i32** %pt2, align 8
  %118 = load i32*, i32** %pt1, align 8
  %119 = load i32, i32* %118, align 4
  %120 = load i32*, i32** %pt2, align 8
  %121 = load i32, i32* %120, align 4
  %cmp145 = icmp sgt i32 %119, %121
  br i1 %cmp145, label %if.then.147, label %if.else.148

if.then.147:                                      ; preds = %if.else.138
  %122 = load i32*, i32** %pt2, align 8
  store i32* %122, i32** %pt11, align 8
  %123 = load i32*, i32** %pt1, align 8
  store i32* %123, i32** %pt22, align 8
  br label %if.end.149

if.else.148:                                      ; preds = %if.else.138
  %124 = load i32*, i32** %pt1, align 8
  store i32* %124, i32** %pt11, align 8
  %125 = load i32*, i32** %pt2, align 8
  store i32* %125, i32** %pt22, align 8
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.148, %if.then.147
  %126 = load i32*, i32** %pt11, align 8
  store i32* %126, i32** %intpt2, align 8
  br label %for.cond.150

for.cond.150:                                     ; preds = %for.body.153, %if.end.149
  %127 = load i32*, i32** %intpt2, align 8
  %128 = load i32, i32* %127, align 4
  %cmp151 = icmp ne i32 %128, -1
  br i1 %cmp151, label %for.body.153, label %for.end.156

for.body.153:                                     ; preds = %for.cond.150
  %129 = load i32*, i32** %intpt2, align 8
  %incdec.ptr154 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %incdec.ptr154, i32** %intpt2, align 8
  %130 = load i32, i32* %129, align 4
  %131 = load i32*, i32** %intpt, align 8
  %incdec.ptr155 = getelementptr inbounds i32, i32* %131, i32 1
  store i32* %incdec.ptr155, i32** %intpt, align 8
  store i32 %130, i32* %131, align 4
  br label %for.cond.150

for.end.156:                                      ; preds = %for.cond.150
  %132 = load i32*, i32** %pt22, align 8
  store i32* %132, i32** %intpt2, align 8
  br label %for.cond.157

for.cond.157:                                     ; preds = %for.body.160, %for.end.156
  %133 = load i32*, i32** %intpt2, align 8
  %134 = load i32, i32* %133, align 4
  %cmp158 = icmp ne i32 %134, -1
  br i1 %cmp158, label %for.body.160, label %for.end.163

for.body.160:                                     ; preds = %for.cond.157
  %135 = load i32*, i32** %intpt2, align 8
  %incdec.ptr161 = getelementptr inbounds i32, i32* %135, i32 1
  store i32* %incdec.ptr161, i32** %intpt2, align 8
  %136 = load i32, i32* %135, align 4
  %137 = load i32*, i32** %intpt, align 8
  %incdec.ptr162 = getelementptr inbounds i32, i32* %137, i32 1
  store i32* %incdec.ptr162, i32** %intpt, align 8
  store i32 %136, i32* %137, align 4
  br label %for.cond.157

for.end.163:                                      ; preds = %for.cond.157
  %138 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %138, align 4
  br label %if.end.164

if.end.164:                                       ; preds = %for.end.163, %if.then.136
  %139 = load double, double* %minscore, align 8
  %mul165 = fmul double %139, 5.000000e-01
  store double %mul165, double* %minscore, align 8
  %arrayidx166 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 0
  %140 = load float, float* %arrayidx166, align 4
  %conv167 = fpext float %140 to double
  %141 = load i32, i32* %k, align 4
  %idxprom168 = sext i32 %141 to i64
  %142 = load double**, double*** %len.addr, align 8
  %arrayidx169 = getelementptr inbounds double*, double** %142, i64 %idxprom168
  %143 = load double*, double** %arrayidx169, align 8
  %arrayidx170 = getelementptr inbounds double, double* %143, i64 0
  store double %conv167, double* %arrayidx170, align 8
  %arrayidx171 = getelementptr inbounds [2 x float], [2 x float]* %lenfl, i32 0, i64 1
  %144 = load float, float* %arrayidx171, align 4
  %conv172 = fpext float %144 to double
  %145 = load i32, i32* %k, align 4
  %idxprom173 = sext i32 %145 to i64
  %146 = load double**, double*** %len.addr, align 8
  %arrayidx174 = getelementptr inbounds double*, double** %146, i64 %idxprom173
  %147 = load double*, double** %arrayidx174, align 8
  %arrayidx175 = getelementptr inbounds double, double* %147, i64 1
  store double %conv172, double* %arrayidx175, align 8
  %148 = load double, double* %minscore, align 8
  %149 = load i32, i32* %im, align 4
  %idxprom176 = sext i32 %149 to i64
  %150 = load double*, double** @veryfastsupg_double_loadtree.tmptmplen, align 8
  %arrayidx177 = getelementptr inbounds double, double* %150, i64 %idxprom176
  store double %148, double* %arrayidx177, align 8
  %151 = load i32, i32* %k, align 4
  %152 = load i32, i32* %im, align 4
  %idxprom178 = sext i32 %152 to i64
  %153 = load i32*, i32** @veryfastsupg_double_loadtree.hist, align 8
  %arrayidx179 = getelementptr inbounds i32, i32* %153, i64 %idxprom178
  store i32 %151, i32* %arrayidx179, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.180

for.cond.180:                                     ; preds = %for.inc.219, %if.end.164
  %154 = load i32, i32* %i, align 4
  %cmp181 = icmp ne i32 %154, -1
  br i1 %cmp181, label %for.body.183, label %for.end.223

for.body.183:                                     ; preds = %for.cond.180
  %155 = load i32, i32* %i, align 4
  %156 = load i32, i32* %im, align 4
  %cmp184 = icmp ne i32 %155, %156
  br i1 %cmp184, label %land.lhs.true, label %if.end.218

land.lhs.true:                                    ; preds = %for.body.183
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %jm, align 4
  %cmp186 = icmp ne i32 %157, %158
  br i1 %cmp186, label %if.then.188, label %if.end.218

if.then.188:                                      ; preds = %land.lhs.true
  %159 = load i32, i32* %i, align 4
  %160 = load i32, i32* %im, align 4
  %cmp189 = icmp slt i32 %159, %160
  br i1 %cmp189, label %if.then.191, label %if.else.192

if.then.191:                                      ; preds = %if.then.188
  %161 = load i32, i32* %i, align 4
  store i32 %161, i32* %miniim, align 4
  %162 = load i32, i32* %im, align 4
  store i32 %162, i32* %maxiim, align 4
  %163 = load i32, i32* %i, align 4
  store i32 %163, i32* %minijm, align 4
  %164 = load i32, i32* %jm, align 4
  store i32 %164, i32* %maxijm, align 4
  br label %if.end.198

if.else.192:                                      ; preds = %if.then.188
  %165 = load i32, i32* %i, align 4
  %166 = load i32, i32* %jm, align 4
  %cmp193 = icmp slt i32 %165, %166
  br i1 %cmp193, label %if.then.195, label %if.else.196

if.then.195:                                      ; preds = %if.else.192
  %167 = load i32, i32* %im, align 4
  store i32 %167, i32* %miniim, align 4
  %168 = load i32, i32* %i, align 4
  store i32 %168, i32* %maxiim, align 4
  %169 = load i32, i32* %i, align 4
  store i32 %169, i32* %minijm, align 4
  %170 = load i32, i32* %jm, align 4
  store i32 %170, i32* %maxijm, align 4
  br label %if.end.197

if.else.196:                                      ; preds = %if.else.192
  %171 = load i32, i32* %im, align 4
  store i32 %171, i32* %miniim, align 4
  %172 = load i32, i32* %i, align 4
  store i32 %172, i32* %maxiim, align 4
  %173 = load i32, i32* %jm, align 4
  store i32 %173, i32* %minijm, align 4
  %174 = load i32, i32* %i, align 4
  store i32 %174, i32* %maxijm, align 4
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.196, %if.then.195
  br label %if.end.198

if.end.198:                                       ; preds = %if.end.197, %if.then.191
  %175 = load i32, i32* %maxiim, align 4
  %idxprom199 = sext i32 %175 to i64
  %176 = load i32, i32* %miniim, align 4
  %idxprom200 = sext i32 %176 to i64
  %177 = load double**, double*** %eff.addr, align 8
  %arrayidx201 = getelementptr inbounds double*, double** %177, i64 %idxprom200
  %178 = load double*, double** %arrayidx201, align 8
  %arrayidx202 = getelementptr inbounds double, double* %178, i64 %idxprom199
  %179 = load double, double* %arrayidx202, align 8
  store double %179, double* %eff0, align 8
  %180 = load i32, i32* %maxijm, align 4
  %idxprom203 = sext i32 %180 to i64
  %181 = load i32, i32* %minijm, align 4
  %idxprom204 = sext i32 %181 to i64
  %182 = load double**, double*** %eff.addr, align 8
  %arrayidx205 = getelementptr inbounds double*, double** %182, i64 %idxprom204
  %183 = load double*, double** %arrayidx205, align 8
  %arrayidx206 = getelementptr inbounds double, double* %183, i64 %idxprom203
  %184 = load double, double* %arrayidx206, align 8
  store double %184, double* %eff1, align 8
  %185 = load double, double* %eff0, align 8
  %186 = load double, double* %eff1, align 8
  %cmp207 = fcmp olt double %185, %186
  br i1 %cmp207, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.198
  %187 = load double, double* %eff0, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.198
  %188 = load double, double* %eff1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %187, %cond.true ], [ %188, %cond.false ]
  %mul209 = fmul double %cond, 9.000000e-01
  %189 = load double, double* %eff0, align 8
  %190 = load double, double* %eff1, align 8
  %add210 = fadd double %189, %190
  %mul211 = fmul double %add210, 5.000000e-01
  %mul212 = fmul double %mul211, 1.000000e-01
  %add213 = fadd double %mul209, %mul212
  %191 = load i32, i32* %maxiim, align 4
  %idxprom214 = sext i32 %191 to i64
  %192 = load i32, i32* %miniim, align 4
  %idxprom215 = sext i32 %192 to i64
  %193 = load double**, double*** %eff.addr, align 8
  %arrayidx216 = getelementptr inbounds double*, double** %193, i64 %idxprom215
  %194 = load double*, double** %arrayidx216, align 8
  %arrayidx217 = getelementptr inbounds double, double* %194, i64 %idxprom214
  store double %add213, double* %arrayidx217, align 8
  br label %if.end.218

if.end.218:                                       ; preds = %cond.end, %land.lhs.true, %for.body.183
  br label %for.inc.219

for.inc.219:                                      ; preds = %if.end.218
  %195 = load i32, i32* %i, align 4
  %idxprom220 = sext i32 %195 to i64
  %196 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx221 = getelementptr inbounds %struct._Achain, %struct._Achain* %196, i64 %idxprom220
  %next222 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx221, i32 0, i32 0
  %197 = load i32, i32* %next222, align 4
  store i32 %197, i32* %i, align 4
  br label %for.cond.180

for.end.223:                                      ; preds = %for.cond.180
  %198 = load i32, i32* %jm, align 4
  %idxprom224 = sext i32 %198 to i64
  %199 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx225 = getelementptr inbounds %struct._Achain, %struct._Achain* %199, i64 %idxprom224
  %prev226 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx225, i32 0, i32 1
  %200 = load i32, i32* %prev226, align 4
  store i32 %200, i32* %acjmprev, align 4
  %201 = load i32, i32* %jm, align 4
  %idxprom227 = sext i32 %201 to i64
  %202 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx228 = getelementptr inbounds %struct._Achain, %struct._Achain* %202, i64 %idxprom227
  %next229 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx228, i32 0, i32 0
  %203 = load i32, i32* %next229, align 4
  store i32 %203, i32* %acjmnext, align 4
  %204 = load i32, i32* %acjmnext, align 4
  %205 = load i32, i32* %acjmprev, align 4
  %idxprom230 = sext i32 %205 to i64
  %206 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx231 = getelementptr inbounds %struct._Achain, %struct._Achain* %206, i64 %idxprom230
  %next232 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx231, i32 0, i32 0
  store i32 %204, i32* %next232, align 4
  %207 = load i32, i32* %acjmnext, align 4
  %cmp233 = icmp ne i32 %207, -1
  br i1 %cmp233, label %if.then.235, label %if.end.239

if.then.235:                                      ; preds = %for.end.223
  %208 = load i32, i32* %acjmprev, align 4
  %209 = load i32, i32* %acjmnext, align 4
  %idxprom236 = sext i32 %209 to i64
  %210 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %arrayidx237 = getelementptr inbounds %struct._Achain, %struct._Achain* %210, i64 %idxprom236
  %prev238 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx237, i32 0, i32 1
  store i32 %208, i32* %prev238, align 4
  br label %if.end.239

if.end.239:                                       ; preds = %if.then.235, %for.end.223
  %211 = load i8*, i8** @veryfastsupg_double_loadtree.treetmp, align 8
  %212 = load i32, i32* %im, align 4
  %idxprom240 = sext i32 %212 to i64
  %213 = load i8**, i8*** @veryfastsupg_double_loadtree.tree, align 8
  %arrayidx241 = getelementptr inbounds i8*, i8** %213, i64 %idxprom240
  %214 = load i8*, i8** %arrayidx241, align 8
  %215 = load i32, i32* %k, align 4
  %idxprom242 = sext i32 %215 to i64
  %216 = load double**, double*** %len.addr, align 8
  %arrayidx243 = getelementptr inbounds double*, double** %216, i64 %idxprom242
  %217 = load double*, double** %arrayidx243, align 8
  %arrayidx244 = getelementptr inbounds double, double* %217, i64 0
  %218 = load double, double* %arrayidx244, align 8
  %219 = load i32, i32* %jm, align 4
  %idxprom245 = sext i32 %219 to i64
  %220 = load i8**, i8*** @veryfastsupg_double_loadtree.tree, align 8
  %arrayidx246 = getelementptr inbounds i8*, i8** %220, i64 %idxprom245
  %221 = load i8*, i8** %arrayidx246, align 8
  %222 = load i32, i32* %k, align 4
  %idxprom247 = sext i32 %222 to i64
  %223 = load double**, double*** %len.addr, align 8
  %arrayidx248 = getelementptr inbounds double*, double** %223, i64 %idxprom247
  %224 = load double*, double** %arrayidx248, align 8
  %arrayidx249 = getelementptr inbounds double, double* %224, i64 1
  %225 = load double, double* %arrayidx249, align 8
  %call250 = call i32 (i8*, i8*, ...) @sprintf(i8* %211, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* %214, double %218, i8* %221, double %225) #8
  %226 = load i32, i32* %im, align 4
  %idxprom251 = sext i32 %226 to i64
  %227 = load i8**, i8*** @veryfastsupg_double_loadtree.tree, align 8
  %arrayidx252 = getelementptr inbounds i8*, i8** %227, i64 %idxprom251
  %228 = load i8*, i8** %arrayidx252, align 8
  %229 = load i8*, i8** @veryfastsupg_double_loadtree.treetmp, align 8
  %call253 = call i8* @strcpy(i8* %228, i8* %229) #8
  br label %for.inc.254

for.inc.254:                                      ; preds = %if.end.239
  %230 = load i32, i32* %k, align 4
  %inc255 = add nsw i32 %230, 1
  store i32 %inc255, i32* %k, align 4
  br label %for.cond.51

for.end.256:                                      ; preds = %for.cond.51
  %231 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call257 = call i32 @fclose(%struct._IO_FILE* %231)
  %call258 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store %struct._IO_FILE* %call258, %struct._IO_FILE** %fp, align 8
  %232 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %233 = load i8*, i8** @veryfastsupg_double_loadtree.treetmp, align 8
  %call259 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %232, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %233)
  %234 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %call260 = call i32 @fclose(%struct._IO_FILE* %234)
  %235 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call261 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %236 = load double*, double** @veryfastsupg_double_loadtree.tmptmplen, align 8
  %237 = bitcast double* %236 to i8*
  call void @free(i8* %237) #8
  store double* null, double** @veryfastsupg_double_loadtree.tmptmplen, align 8
  %238 = load i32*, i32** @veryfastsupg_double_loadtree.hist, align 8
  %239 = bitcast i32* %238 to i8*
  call void @free(i8* %239) #8
  store i32* null, i32** @veryfastsupg_double_loadtree.hist, align 8
  %240 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %241 = bitcast %struct._Achain* %240 to i8*
  call void @free(i8* %241) #8
  store %struct._Achain* null, %struct._Achain** @veryfastsupg_double_loadtree.ac, align 8
  %242 = load i8**, i8*** @veryfastsupg_double_loadtree.tree, align 8
  call void @FreeCharMtx(i8** %242)
  %243 = load i8*, i8** @veryfastsupg_double_loadtree.treetmp, align 8
  call void @free(i8* %243) #8
  ret void
}

; Function Attrs: nounwind uwtable
define void @veryfastsupg_double_outtree(i32 %nseq, double** %eff, i32*** %topol, double** %len, [256 x i8]* %name) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %name.addr = alloca [256 x i8]*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %tmpdouble = alloca double, align 8
  %eff1 = alloca double, align 8
  %eff0 = alloca double, align 8
  %minscore = alloca double, align 8
  %fpout = alloca %struct._IO_FILE*, align 8
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %prevnode = alloca i32, align 4
  %acjmnext = alloca i32, align 4
  %acjmprev = alloca i32, align 4
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  %clusterfuncpt = alloca [1 x double (double, double)*], align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store [256 x i8]* %name, [256 x i8]** %name.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store double 9.000000e-01, double* @sueff1_double, align 8
  store double 5.000000e-02, double* @sueff05_double, align 8
  %0 = load i32, i32* @treemethod, align 4
  %cmp = icmp eq i32 %0, 88
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [1 x double (double, double)*], [1 x double (double, double)*]* %clusterfuncpt, i32 0, i64 0
  store double (double, double)* @cluster_mix_double, double (double, double)** %arrayidx, align 8
  br label %if.end.10

if.else:                                          ; preds = %entry
  %1 = load i32, i32* @treemethod, align 4
  %cmp1 = icmp eq i32 %1, 69
  br i1 %cmp1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %arrayidx3 = getelementptr inbounds [1 x double (double, double)*], [1 x double (double, double)*]* %clusterfuncpt, i32 0, i64 0
  store double (double, double)* @cluster_average_double, double (double, double)** %arrayidx3, align 8
  br label %if.end.9

if.else.4:                                        ; preds = %if.else
  %2 = load i32, i32* @treemethod, align 4
  %cmp5 = icmp eq i32 %2, 113
  br i1 %cmp5, label %if.then.6, label %if.else.8

if.then.6:                                        ; preds = %if.else.4
  %arrayidx7 = getelementptr inbounds [1 x double (double, double)*], [1 x double (double, double)*]* %clusterfuncpt, i32 0, i64 0
  store double (double, double)* @cluster_minimum_double, double (double, double)** %arrayidx7, align 8
  br label %if.end

if.else.8:                                        ; preds = %if.else.4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = load i32, i32* @treemethod, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i32 %4)
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %if.then.6
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then.2
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.then
  %5 = load i32*, i32** @veryfastsupg_double_outtree.hist, align 8
  %tobool = icmp ne i32* %5, null
  br i1 %tobool, label %if.end.22, label %if.then.11

if.then.11:                                       ; preds = %if.end.10
  %6 = load i32, i32* @njob, align 4
  %mul = mul nsw i32 %6, 50
  %call12 = call i8* @AllocateCharVec(i32 %mul)
  store i8* %call12, i8** @veryfastsupg_double_outtree.treetmp, align 8
  %7 = load i32, i32* @njob, align 4
  %8 = load i32, i32* @njob, align 4
  %mul13 = mul nsw i32 %8, 50
  %call14 = call i8** @AllocateCharMtx(i32 %7, i32 %mul13)
  store i8** %call14, i8*** @veryfastsupg_double_outtree.tree, align 8
  %9 = load i32, i32* @njob, align 4
  %call15 = call i32* @AllocateIntVec(i32 %9)
  store i32* %call15, i32** @veryfastsupg_double_outtree.hist, align 8
  %10 = load i32, i32* @njob, align 4
  %conv = sext i32 %10 to i64
  %mul16 = mul i64 %conv, 8
  %call17 = call noalias i8* @malloc(i64 %mul16) #8
  %11 = bitcast i8* %call17 to double*
  store double* %11, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %12 = load i32, i32* @njob, align 4
  %conv18 = sext i32 %12 to i64
  %mul19 = mul i64 %conv18, 8
  %call20 = call noalias i8* @malloc(i64 %mul19) #8
  %13 = bitcast i8* %call20 to %struct._Achain*
  store %struct._Achain* %13, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %call21 = call i8* @AllocateCharVec(i32 30)
  store i8* %call21, i8** @veryfastsupg_double_outtree.nametmp, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.11, %if.end.10
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.62, %if.end.22
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %nseq.addr, align 4
  %cmp23 = icmp slt i32 %14, %15
  br i1 %cmp23, label %for.body, label %for.end.64

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc, %for.body
  %16 = load i32, i32* %j, align 4
  %cmp26 = icmp slt i32 %16, 30
  br i1 %cmp26, label %for.body.28, label %for.end

for.body.28:                                      ; preds = %for.cond.25
  %17 = load i32, i32* %j, align 4
  %idxprom = sext i32 %17 to i64
  %18 = load i8*, i8** @veryfastsupg_double_outtree.nametmp, align 8
  %arrayidx29 = getelementptr inbounds i8, i8* %18, i64 %idxprom
  store i8 0, i8* %arrayidx29, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body.28
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.25

for.end:                                          ; preds = %for.cond.25
  store i32 0, i32* %j, align 4
  br label %for.cond.30

for.cond.30:                                      ; preds = %for.inc.55, %for.end
  %20 = load i32, i32* %j, align 4
  %cmp31 = icmp slt i32 %20, 30
  br i1 %cmp31, label %for.body.33, label %for.end.57

for.body.33:                                      ; preds = %for.cond.30
  %21 = load i32, i32* %j, align 4
  %idxprom34 = sext i32 %21 to i64
  %22 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %22 to i64
  %23 = load [256 x i8]*, [256 x i8]** %name.addr, align 8
  %arrayidx36 = getelementptr inbounds [256 x i8], [256 x i8]* %23, i64 %idxprom35
  %arrayidx37 = getelementptr inbounds [256 x i8], [256 x i8]* %arrayidx36, i32 0, i64 %idxprom34
  %24 = load i8, i8* %arrayidx37, align 1
  %conv38 = sext i8 %24 to i32
  %idxprom39 = sext i32 %conv38 to i64
  %call40 = call i16** @__ctype_b_loc() #9
  %25 = load i16*, i16** %call40, align 8
  %arrayidx41 = getelementptr inbounds i16, i16* %25, i64 %idxprom39
  %26 = load i16, i16* %arrayidx41, align 2
  %conv42 = zext i16 %26 to i32
  %and = and i32 %conv42, 8
  %tobool43 = icmp ne i32 %and, 0
  br i1 %tobool43, label %if.then.44, label %if.else.51

if.then.44:                                       ; preds = %for.body.33
  %27 = load i32, i32* %j, align 4
  %idxprom45 = sext i32 %27 to i64
  %28 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %28 to i64
  %29 = load [256 x i8]*, [256 x i8]** %name.addr, align 8
  %arrayidx47 = getelementptr inbounds [256 x i8], [256 x i8]* %29, i64 %idxprom46
  %arrayidx48 = getelementptr inbounds [256 x i8], [256 x i8]* %arrayidx47, i32 0, i64 %idxprom45
  %30 = load i8, i8* %arrayidx48, align 1
  %31 = load i32, i32* %j, align 4
  %idxprom49 = sext i32 %31 to i64
  %32 = load i8*, i8** @veryfastsupg_double_outtree.nametmp, align 8
  %arrayidx50 = getelementptr inbounds i8, i8* %32, i64 %idxprom49
  store i8 %30, i8* %arrayidx50, align 1
  br label %if.end.54

if.else.51:                                       ; preds = %for.body.33
  %33 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %33 to i64
  %34 = load i8*, i8** @veryfastsupg_double_outtree.nametmp, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %34, i64 %idxprom52
  store i8 95, i8* %arrayidx53, align 1
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.44
  br label %for.inc.55

for.inc.55:                                       ; preds = %if.end.54
  %35 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %35, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond.30

for.end.57:                                       ; preds = %for.cond.30
  %36 = load i8*, i8** @veryfastsupg_double_outtree.nametmp, align 8
  %arrayidx58 = getelementptr inbounds i8, i8* %36, i64 30
  store i8 0, i8* %arrayidx58, align 1
  %37 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %37 to i64
  %38 = load i8**, i8*** @veryfastsupg_double_outtree.tree, align 8
  %arrayidx60 = getelementptr inbounds i8*, i8** %38, i64 %idxprom59
  %39 = load i8*, i8** %arrayidx60, align 8
  %40 = load i32, i32* %i, align 4
  %add = add nsw i32 %40, 1
  %41 = load i8*, i8** @veryfastsupg_double_outtree.nametmp, align 8
  %add.ptr = getelementptr inbounds i8, i8* %41, i64 1
  %call61 = call i32 (i8*, i8*, ...) @sprintf(i8* %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), i32 %add, i8* %add.ptr) #8
  br label %for.inc.62

for.inc.62:                                       ; preds = %for.end.57
  %42 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %42, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond

for.end.64:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.65

for.cond.65:                                      ; preds = %for.inc.74, %for.end.64
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %nseq.addr, align 4
  %cmp66 = icmp slt i32 %43, %44
  br i1 %cmp66, label %for.body.68, label %for.end.76

for.body.68:                                      ; preds = %for.cond.65
  %45 = load i32, i32* %i, align 4
  %add69 = add nsw i32 %45, 1
  %46 = load i32, i32* %i, align 4
  %idxprom70 = sext i32 %46 to i64
  %47 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx71 = getelementptr inbounds %struct._Achain, %struct._Achain* %47, i64 %idxprom70
  %next = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx71, i32 0, i32 0
  store i32 %add69, i32* %next, align 4
  %48 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %48, 1
  %49 = load i32, i32* %i, align 4
  %idxprom72 = sext i32 %49 to i64
  %50 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx73 = getelementptr inbounds %struct._Achain, %struct._Achain* %50, i64 %idxprom72
  %prev = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx73, i32 0, i32 1
  store i32 %sub, i32* %prev, align 4
  br label %for.inc.74

for.inc.74:                                       ; preds = %for.body.68
  %51 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %51, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond.65

for.end.76:                                       ; preds = %for.cond.65
  %52 = load i32, i32* %nseq.addr, align 4
  %sub77 = sub nsw i32 %52, 1
  %idxprom78 = sext i32 %sub77 to i64
  %53 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx79 = getelementptr inbounds %struct._Achain, %struct._Achain* %53, i64 %idxprom78
  %next80 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx79, i32 0, i32 0
  store i32 -1, i32* %next80, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.81

for.cond.81:                                      ; preds = %for.inc.87, %for.end.76
  %54 = load i32, i32* %i, align 4
  %55 = load i32, i32* %nseq.addr, align 4
  %cmp82 = icmp slt i32 %54, %55
  br i1 %cmp82, label %for.body.84, label %for.end.89

for.body.84:                                      ; preds = %for.cond.81
  %56 = load i32, i32* %i, align 4
  %idxprom85 = sext i32 %56 to i64
  %57 = load double*, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %arrayidx86 = getelementptr inbounds double, double* %57, i64 %idxprom85
  store double 0.000000e+00, double* %arrayidx86, align 8
  br label %for.inc.87

for.inc.87:                                       ; preds = %for.body.84
  %58 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %58, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond.81

for.end.89:                                       ; preds = %for.cond.81
  store i32 0, i32* %i, align 4
  br label %for.cond.90

for.cond.90:                                      ; preds = %for.inc.96, %for.end.89
  %59 = load i32, i32* %i, align 4
  %60 = load i32, i32* %nseq.addr, align 4
  %cmp91 = icmp slt i32 %59, %60
  br i1 %cmp91, label %for.body.93, label %for.end.98

for.body.93:                                      ; preds = %for.cond.90
  %61 = load i32, i32* %i, align 4
  %idxprom94 = sext i32 %61 to i64
  %62 = load i32*, i32** @veryfastsupg_double_outtree.hist, align 8
  %arrayidx95 = getelementptr inbounds i32, i32* %62, i64 %idxprom94
  store i32 -1, i32* %arrayidx95, align 4
  br label %for.inc.96

for.inc.96:                                       ; preds = %for.body.93
  %63 = load i32, i32* %i, align 4
  %inc97 = add nsw i32 %63, 1
  store i32 %inc97, i32* %i, align 4
  br label %for.cond.90

for.end.98:                                       ; preds = %for.cond.90
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.100

for.cond.100:                                     ; preds = %for.inc.299, %for.end.98
  %65 = load i32, i32* %k, align 4
  %66 = load i32, i32* %nseq.addr, align 4
  %sub101 = sub nsw i32 %66, 1
  %cmp102 = icmp slt i32 %65, %sub101
  br i1 %cmp102, label %for.body.104, label %for.end.301

for.body.104:                                     ; preds = %for.cond.100
  %67 = load i32, i32* %k, align 4
  %rem = srem i32 %67, 10
  %cmp105 = icmp eq i32 %rem, 0
  br i1 %cmp105, label %if.then.107, label %if.end.109

if.then.107:                                      ; preds = %for.body.104
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %69 = load i32, i32* %k, align 4
  %70 = load i32, i32* %nseq.addr, align 4
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %69, i32 %70)
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.107, %for.body.104
  store double 9.999990e+04, double* %minscore, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.110

for.cond.110:                                     ; preds = %for.inc.137, %if.end.109
  %71 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %71 to i64
  %72 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx112 = getelementptr inbounds %struct._Achain, %struct._Achain* %72, i64 %idxprom111
  %next113 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx112, i32 0, i32 0
  %73 = load i32, i32* %next113, align 4
  %cmp114 = icmp ne i32 %73, -1
  br i1 %cmp114, label %for.body.116, label %for.end.141

for.body.116:                                     ; preds = %for.cond.110
  %74 = load i32, i32* %i, align 4
  %idxprom117 = sext i32 %74 to i64
  %75 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx118 = getelementptr inbounds %struct._Achain, %struct._Achain* %75, i64 %idxprom117
  %next119 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx118, i32 0, i32 0
  %76 = load i32, i32* %next119, align 4
  store i32 %76, i32* %j, align 4
  br label %for.cond.120

for.cond.120:                                     ; preds = %for.inc.132, %for.body.116
  %77 = load i32, i32* %j, align 4
  %cmp121 = icmp ne i32 %77, -1
  br i1 %cmp121, label %for.body.123, label %for.end.136

for.body.123:                                     ; preds = %for.cond.120
  %78 = load i32, i32* %j, align 4
  %idxprom124 = sext i32 %78 to i64
  %79 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %79 to i64
  %80 = load double**, double*** %eff.addr, align 8
  %arrayidx126 = getelementptr inbounds double*, double** %80, i64 %idxprom125
  %81 = load double*, double** %arrayidx126, align 8
  %arrayidx127 = getelementptr inbounds double, double* %81, i64 %idxprom124
  %82 = load double, double* %arrayidx127, align 8
  store double %82, double* %tmpdouble, align 8
  %83 = load double, double* %tmpdouble, align 8
  %84 = load double, double* %minscore, align 8
  %cmp128 = fcmp olt double %83, %84
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %for.body.123
  %85 = load double, double* %tmpdouble, align 8
  store double %85, double* %minscore, align 8
  %86 = load i32, i32* %i, align 4
  store i32 %86, i32* %im, align 4
  %87 = load i32, i32* %j, align 4
  store i32 %87, i32* %jm, align 4
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.130, %for.body.123
  br label %for.inc.132

for.inc.132:                                      ; preds = %if.end.131
  %88 = load i32, i32* %j, align 4
  %idxprom133 = sext i32 %88 to i64
  %89 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx134 = getelementptr inbounds %struct._Achain, %struct._Achain* %89, i64 %idxprom133
  %next135 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx134, i32 0, i32 0
  %90 = load i32, i32* %next135, align 4
  store i32 %90, i32* %j, align 4
  br label %for.cond.120

for.end.136:                                      ; preds = %for.cond.120
  br label %for.inc.137

for.inc.137:                                      ; preds = %for.end.136
  %91 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %91 to i64
  %92 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx139 = getelementptr inbounds %struct._Achain, %struct._Achain* %92, i64 %idxprom138
  %next140 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx139, i32 0, i32 0
  %93 = load i32, i32* %next140, align 4
  store i32 %93, i32* %i, align 4
  br label %for.cond.110

for.end.141:                                      ; preds = %for.cond.110
  %94 = load i32, i32* %k, align 4
  %idxprom142 = sext i32 %94 to i64
  %95 = load i32***, i32**** %topol.addr, align 8
  %arrayidx143 = getelementptr inbounds i32**, i32*** %95, i64 %idxprom142
  %96 = load i32**, i32*** %arrayidx143, align 8
  %arrayidx144 = getelementptr inbounds i32*, i32** %96, i64 0
  %97 = load i32*, i32** %arrayidx144, align 8
  store i32* %97, i32** %intpt, align 8
  %98 = load i32, i32* %im, align 4
  %idxprom145 = sext i32 %98 to i64
  %99 = load i32*, i32** @veryfastsupg_double_outtree.hist, align 8
  %arrayidx146 = getelementptr inbounds i32, i32* %99, i64 %idxprom145
  %100 = load i32, i32* %arrayidx146, align 4
  store i32 %100, i32* %prevnode, align 4
  %101 = load i32, i32* %prevnode, align 4
  %cmp147 = icmp eq i32 %101, -1
  br i1 %cmp147, label %if.then.149, label %if.else.150

if.then.149:                                      ; preds = %for.end.141
  %102 = load i32, i32* %im, align 4
  %103 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %103, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %102, i32* %103, align 4
  %104 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %104, align 4
  br label %if.end.176

if.else.150:                                      ; preds = %for.end.141
  %105 = load i32, i32* %prevnode, align 4
  %idxprom151 = sext i32 %105 to i64
  %106 = load i32***, i32**** %topol.addr, align 8
  %arrayidx152 = getelementptr inbounds i32**, i32*** %106, i64 %idxprom151
  %107 = load i32**, i32*** %arrayidx152, align 8
  %arrayidx153 = getelementptr inbounds i32*, i32** %107, i64 0
  %108 = load i32*, i32** %arrayidx153, align 8
  store i32* %108, i32** %pt1, align 8
  %109 = load i32, i32* %prevnode, align 4
  %idxprom154 = sext i32 %109 to i64
  %110 = load i32***, i32**** %topol.addr, align 8
  %arrayidx155 = getelementptr inbounds i32**, i32*** %110, i64 %idxprom154
  %111 = load i32**, i32*** %arrayidx155, align 8
  %arrayidx156 = getelementptr inbounds i32*, i32** %111, i64 1
  %112 = load i32*, i32** %arrayidx156, align 8
  store i32* %112, i32** %pt2, align 8
  %113 = load i32*, i32** %pt1, align 8
  %114 = load i32, i32* %113, align 4
  %115 = load i32*, i32** %pt2, align 8
  %116 = load i32, i32* %115, align 4
  %cmp157 = icmp sgt i32 %114, %116
  br i1 %cmp157, label %if.then.159, label %if.else.160

if.then.159:                                      ; preds = %if.else.150
  %117 = load i32*, i32** %pt2, align 8
  store i32* %117, i32** %pt11, align 8
  %118 = load i32*, i32** %pt1, align 8
  store i32* %118, i32** %pt22, align 8
  br label %if.end.161

if.else.160:                                      ; preds = %if.else.150
  %119 = load i32*, i32** %pt1, align 8
  store i32* %119, i32** %pt11, align 8
  %120 = load i32*, i32** %pt2, align 8
  store i32* %120, i32** %pt22, align 8
  br label %if.end.161

if.end.161:                                       ; preds = %if.else.160, %if.then.159
  %121 = load i32*, i32** %pt11, align 8
  store i32* %121, i32** %intpt2, align 8
  br label %for.cond.162

for.cond.162:                                     ; preds = %for.body.165, %if.end.161
  %122 = load i32*, i32** %intpt2, align 8
  %123 = load i32, i32* %122, align 4
  %cmp163 = icmp ne i32 %123, -1
  br i1 %cmp163, label %for.body.165, label %for.end.168

for.body.165:                                     ; preds = %for.cond.162
  %124 = load i32*, i32** %intpt2, align 8
  %incdec.ptr166 = getelementptr inbounds i32, i32* %124, i32 1
  store i32* %incdec.ptr166, i32** %intpt2, align 8
  %125 = load i32, i32* %124, align 4
  %126 = load i32*, i32** %intpt, align 8
  %incdec.ptr167 = getelementptr inbounds i32, i32* %126, i32 1
  store i32* %incdec.ptr167, i32** %intpt, align 8
  store i32 %125, i32* %126, align 4
  br label %for.cond.162

for.end.168:                                      ; preds = %for.cond.162
  %127 = load i32*, i32** %pt22, align 8
  store i32* %127, i32** %intpt2, align 8
  br label %for.cond.169

for.cond.169:                                     ; preds = %for.body.172, %for.end.168
  %128 = load i32*, i32** %intpt2, align 8
  %129 = load i32, i32* %128, align 4
  %cmp170 = icmp ne i32 %129, -1
  br i1 %cmp170, label %for.body.172, label %for.end.175

for.body.172:                                     ; preds = %for.cond.169
  %130 = load i32*, i32** %intpt2, align 8
  %incdec.ptr173 = getelementptr inbounds i32, i32* %130, i32 1
  store i32* %incdec.ptr173, i32** %intpt2, align 8
  %131 = load i32, i32* %130, align 4
  %132 = load i32*, i32** %intpt, align 8
  %incdec.ptr174 = getelementptr inbounds i32, i32* %132, i32 1
  store i32* %incdec.ptr174, i32** %intpt, align 8
  store i32 %131, i32* %132, align 4
  br label %for.cond.169

for.end.175:                                      ; preds = %for.cond.169
  %133 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %133, align 4
  br label %if.end.176

if.end.176:                                       ; preds = %for.end.175, %if.then.149
  %134 = load i32, i32* %k, align 4
  %idxprom177 = sext i32 %134 to i64
  %135 = load i32***, i32**** %topol.addr, align 8
  %arrayidx178 = getelementptr inbounds i32**, i32*** %135, i64 %idxprom177
  %136 = load i32**, i32*** %arrayidx178, align 8
  %arrayidx179 = getelementptr inbounds i32*, i32** %136, i64 1
  %137 = load i32*, i32** %arrayidx179, align 8
  store i32* %137, i32** %intpt, align 8
  %138 = load i32, i32* %jm, align 4
  %idxprom180 = sext i32 %138 to i64
  %139 = load i32*, i32** @veryfastsupg_double_outtree.hist, align 8
  %arrayidx181 = getelementptr inbounds i32, i32* %139, i64 %idxprom180
  %140 = load i32, i32* %arrayidx181, align 4
  store i32 %140, i32* %prevnode, align 4
  %141 = load i32, i32* %prevnode, align 4
  %cmp182 = icmp eq i32 %141, -1
  br i1 %cmp182, label %if.then.184, label %if.else.186

if.then.184:                                      ; preds = %if.end.176
  %142 = load i32, i32* %jm, align 4
  %143 = load i32*, i32** %intpt, align 8
  %incdec.ptr185 = getelementptr inbounds i32, i32* %143, i32 1
  store i32* %incdec.ptr185, i32** %intpt, align 8
  store i32 %142, i32* %143, align 4
  %144 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %144, align 4
  br label %if.end.212

if.else.186:                                      ; preds = %if.end.176
  %145 = load i32, i32* %prevnode, align 4
  %idxprom187 = sext i32 %145 to i64
  %146 = load i32***, i32**** %topol.addr, align 8
  %arrayidx188 = getelementptr inbounds i32**, i32*** %146, i64 %idxprom187
  %147 = load i32**, i32*** %arrayidx188, align 8
  %arrayidx189 = getelementptr inbounds i32*, i32** %147, i64 0
  %148 = load i32*, i32** %arrayidx189, align 8
  store i32* %148, i32** %pt1, align 8
  %149 = load i32, i32* %prevnode, align 4
  %idxprom190 = sext i32 %149 to i64
  %150 = load i32***, i32**** %topol.addr, align 8
  %arrayidx191 = getelementptr inbounds i32**, i32*** %150, i64 %idxprom190
  %151 = load i32**, i32*** %arrayidx191, align 8
  %arrayidx192 = getelementptr inbounds i32*, i32** %151, i64 1
  %152 = load i32*, i32** %arrayidx192, align 8
  store i32* %152, i32** %pt2, align 8
  %153 = load i32*, i32** %pt1, align 8
  %154 = load i32, i32* %153, align 4
  %155 = load i32*, i32** %pt2, align 8
  %156 = load i32, i32* %155, align 4
  %cmp193 = icmp sgt i32 %154, %156
  br i1 %cmp193, label %if.then.195, label %if.else.196

if.then.195:                                      ; preds = %if.else.186
  %157 = load i32*, i32** %pt2, align 8
  store i32* %157, i32** %pt11, align 8
  %158 = load i32*, i32** %pt1, align 8
  store i32* %158, i32** %pt22, align 8
  br label %if.end.197

if.else.196:                                      ; preds = %if.else.186
  %159 = load i32*, i32** %pt1, align 8
  store i32* %159, i32** %pt11, align 8
  %160 = load i32*, i32** %pt2, align 8
  store i32* %160, i32** %pt22, align 8
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.196, %if.then.195
  %161 = load i32*, i32** %pt11, align 8
  store i32* %161, i32** %intpt2, align 8
  br label %for.cond.198

for.cond.198:                                     ; preds = %for.body.201, %if.end.197
  %162 = load i32*, i32** %intpt2, align 8
  %163 = load i32, i32* %162, align 4
  %cmp199 = icmp ne i32 %163, -1
  br i1 %cmp199, label %for.body.201, label %for.end.204

for.body.201:                                     ; preds = %for.cond.198
  %164 = load i32*, i32** %intpt2, align 8
  %incdec.ptr202 = getelementptr inbounds i32, i32* %164, i32 1
  store i32* %incdec.ptr202, i32** %intpt2, align 8
  %165 = load i32, i32* %164, align 4
  %166 = load i32*, i32** %intpt, align 8
  %incdec.ptr203 = getelementptr inbounds i32, i32* %166, i32 1
  store i32* %incdec.ptr203, i32** %intpt, align 8
  store i32 %165, i32* %166, align 4
  br label %for.cond.198

for.end.204:                                      ; preds = %for.cond.198
  %167 = load i32*, i32** %pt22, align 8
  store i32* %167, i32** %intpt2, align 8
  br label %for.cond.205

for.cond.205:                                     ; preds = %for.body.208, %for.end.204
  %168 = load i32*, i32** %intpt2, align 8
  %169 = load i32, i32* %168, align 4
  %cmp206 = icmp ne i32 %169, -1
  br i1 %cmp206, label %for.body.208, label %for.end.211

for.body.208:                                     ; preds = %for.cond.205
  %170 = load i32*, i32** %intpt2, align 8
  %incdec.ptr209 = getelementptr inbounds i32, i32* %170, i32 1
  store i32* %incdec.ptr209, i32** %intpt2, align 8
  %171 = load i32, i32* %170, align 4
  %172 = load i32*, i32** %intpt, align 8
  %incdec.ptr210 = getelementptr inbounds i32, i32* %172, i32 1
  store i32* %incdec.ptr210, i32** %intpt, align 8
  store i32 %171, i32* %172, align 4
  br label %for.cond.205

for.end.211:                                      ; preds = %for.cond.205
  %173 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %173, align 4
  br label %if.end.212

if.end.212:                                       ; preds = %for.end.211, %if.then.184
  %174 = load double, double* %minscore, align 8
  %mul213 = fmul double %174, 5.000000e-01
  store double %mul213, double* %minscore, align 8
  %175 = load double, double* %minscore, align 8
  %176 = load i32, i32* %im, align 4
  %idxprom214 = sext i32 %176 to i64
  %177 = load double*, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %arrayidx215 = getelementptr inbounds double, double* %177, i64 %idxprom214
  %178 = load double, double* %arrayidx215, align 8
  %sub216 = fsub double %175, %178
  %179 = load i32, i32* %k, align 4
  %idxprom217 = sext i32 %179 to i64
  %180 = load double**, double*** %len.addr, align 8
  %arrayidx218 = getelementptr inbounds double*, double** %180, i64 %idxprom217
  %181 = load double*, double** %arrayidx218, align 8
  %arrayidx219 = getelementptr inbounds double, double* %181, i64 0
  store double %sub216, double* %arrayidx219, align 8
  %182 = load double, double* %minscore, align 8
  %183 = load i32, i32* %jm, align 4
  %idxprom220 = sext i32 %183 to i64
  %184 = load double*, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %arrayidx221 = getelementptr inbounds double, double* %184, i64 %idxprom220
  %185 = load double, double* %arrayidx221, align 8
  %sub222 = fsub double %182, %185
  %186 = load i32, i32* %k, align 4
  %idxprom223 = sext i32 %186 to i64
  %187 = load double**, double*** %len.addr, align 8
  %arrayidx224 = getelementptr inbounds double*, double** %187, i64 %idxprom223
  %188 = load double*, double** %arrayidx224, align 8
  %arrayidx225 = getelementptr inbounds double, double* %188, i64 1
  store double %sub222, double* %arrayidx225, align 8
  %189 = load double, double* %minscore, align 8
  %190 = load i32, i32* %im, align 4
  %idxprom226 = sext i32 %190 to i64
  %191 = load double*, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %arrayidx227 = getelementptr inbounds double, double* %191, i64 %idxprom226
  store double %189, double* %arrayidx227, align 8
  %192 = load i32, i32* %k, align 4
  %193 = load i32, i32* %im, align 4
  %idxprom228 = sext i32 %193 to i64
  %194 = load i32*, i32** @veryfastsupg_double_outtree.hist, align 8
  %arrayidx229 = getelementptr inbounds i32, i32* %194, i64 %idxprom228
  store i32 %192, i32* %arrayidx229, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.230

for.cond.230:                                     ; preds = %for.inc.264, %if.end.212
  %195 = load i32, i32* %i, align 4
  %cmp231 = icmp ne i32 %195, -1
  br i1 %cmp231, label %for.body.233, label %for.end.268

for.body.233:                                     ; preds = %for.cond.230
  %196 = load i32, i32* %i, align 4
  %197 = load i32, i32* %im, align 4
  %cmp234 = icmp ne i32 %196, %197
  br i1 %cmp234, label %land.lhs.true, label %if.end.263

land.lhs.true:                                    ; preds = %for.body.233
  %198 = load i32, i32* %i, align 4
  %199 = load i32, i32* %jm, align 4
  %cmp236 = icmp ne i32 %198, %199
  br i1 %cmp236, label %if.then.238, label %if.end.263

if.then.238:                                      ; preds = %land.lhs.true
  %200 = load i32, i32* %i, align 4
  %201 = load i32, i32* %im, align 4
  %cmp239 = icmp slt i32 %200, %201
  br i1 %cmp239, label %if.then.241, label %if.else.242

if.then.241:                                      ; preds = %if.then.238
  %202 = load i32, i32* %i, align 4
  store i32 %202, i32* %miniim, align 4
  %203 = load i32, i32* %im, align 4
  store i32 %203, i32* %maxiim, align 4
  %204 = load i32, i32* %i, align 4
  store i32 %204, i32* %minijm, align 4
  %205 = load i32, i32* %jm, align 4
  store i32 %205, i32* %maxijm, align 4
  br label %if.end.248

if.else.242:                                      ; preds = %if.then.238
  %206 = load i32, i32* %i, align 4
  %207 = load i32, i32* %jm, align 4
  %cmp243 = icmp slt i32 %206, %207
  br i1 %cmp243, label %if.then.245, label %if.else.246

if.then.245:                                      ; preds = %if.else.242
  %208 = load i32, i32* %im, align 4
  store i32 %208, i32* %miniim, align 4
  %209 = load i32, i32* %i, align 4
  store i32 %209, i32* %maxiim, align 4
  %210 = load i32, i32* %i, align 4
  store i32 %210, i32* %minijm, align 4
  %211 = load i32, i32* %jm, align 4
  store i32 %211, i32* %maxijm, align 4
  br label %if.end.247

if.else.246:                                      ; preds = %if.else.242
  %212 = load i32, i32* %im, align 4
  store i32 %212, i32* %miniim, align 4
  %213 = load i32, i32* %i, align 4
  store i32 %213, i32* %maxiim, align 4
  %214 = load i32, i32* %jm, align 4
  store i32 %214, i32* %minijm, align 4
  %215 = load i32, i32* %i, align 4
  store i32 %215, i32* %maxijm, align 4
  br label %if.end.247

if.end.247:                                       ; preds = %if.else.246, %if.then.245
  br label %if.end.248

if.end.248:                                       ; preds = %if.end.247, %if.then.241
  %216 = load i32, i32* %maxiim, align 4
  %idxprom249 = sext i32 %216 to i64
  %217 = load i32, i32* %miniim, align 4
  %idxprom250 = sext i32 %217 to i64
  %218 = load double**, double*** %eff.addr, align 8
  %arrayidx251 = getelementptr inbounds double*, double** %218, i64 %idxprom250
  %219 = load double*, double** %arrayidx251, align 8
  %arrayidx252 = getelementptr inbounds double, double* %219, i64 %idxprom249
  %220 = load double, double* %arrayidx252, align 8
  store double %220, double* %eff0, align 8
  %221 = load i32, i32* %maxijm, align 4
  %idxprom253 = sext i32 %221 to i64
  %222 = load i32, i32* %minijm, align 4
  %idxprom254 = sext i32 %222 to i64
  %223 = load double**, double*** %eff.addr, align 8
  %arrayidx255 = getelementptr inbounds double*, double** %223, i64 %idxprom254
  %224 = load double*, double** %arrayidx255, align 8
  %arrayidx256 = getelementptr inbounds double, double* %224, i64 %idxprom253
  %225 = load double, double* %arrayidx256, align 8
  store double %225, double* %eff1, align 8
  %arrayidx257 = getelementptr inbounds [1 x double (double, double)*], [1 x double (double, double)*]* %clusterfuncpt, i32 0, i64 0
  %226 = load double (double, double)*, double (double, double)** %arrayidx257, align 8
  %227 = load double, double* %eff0, align 8
  %228 = load double, double* %eff1, align 8
  %call258 = call double %226(double %227, double %228)
  %229 = load i32, i32* %maxiim, align 4
  %idxprom259 = sext i32 %229 to i64
  %230 = load i32, i32* %miniim, align 4
  %idxprom260 = sext i32 %230 to i64
  %231 = load double**, double*** %eff.addr, align 8
  %arrayidx261 = getelementptr inbounds double*, double** %231, i64 %idxprom260
  %232 = load double*, double** %arrayidx261, align 8
  %arrayidx262 = getelementptr inbounds double, double* %232, i64 %idxprom259
  store double %call258, double* %arrayidx262, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.end.248, %land.lhs.true, %for.body.233
  br label %for.inc.264

for.inc.264:                                      ; preds = %if.end.263
  %233 = load i32, i32* %i, align 4
  %idxprom265 = sext i32 %233 to i64
  %234 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx266 = getelementptr inbounds %struct._Achain, %struct._Achain* %234, i64 %idxprom265
  %next267 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx266, i32 0, i32 0
  %235 = load i32, i32* %next267, align 4
  store i32 %235, i32* %i, align 4
  br label %for.cond.230

for.end.268:                                      ; preds = %for.cond.230
  %236 = load i32, i32* %jm, align 4
  %idxprom269 = sext i32 %236 to i64
  %237 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx270 = getelementptr inbounds %struct._Achain, %struct._Achain* %237, i64 %idxprom269
  %prev271 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx270, i32 0, i32 1
  %238 = load i32, i32* %prev271, align 4
  store i32 %238, i32* %acjmprev, align 4
  %239 = load i32, i32* %jm, align 4
  %idxprom272 = sext i32 %239 to i64
  %240 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx273 = getelementptr inbounds %struct._Achain, %struct._Achain* %240, i64 %idxprom272
  %next274 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx273, i32 0, i32 0
  %241 = load i32, i32* %next274, align 4
  store i32 %241, i32* %acjmnext, align 4
  %242 = load i32, i32* %acjmnext, align 4
  %243 = load i32, i32* %acjmprev, align 4
  %idxprom275 = sext i32 %243 to i64
  %244 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx276 = getelementptr inbounds %struct._Achain, %struct._Achain* %244, i64 %idxprom275
  %next277 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx276, i32 0, i32 0
  store i32 %242, i32* %next277, align 4
  %245 = load i32, i32* %acjmnext, align 4
  %cmp278 = icmp ne i32 %245, -1
  br i1 %cmp278, label %if.then.280, label %if.end.284

if.then.280:                                      ; preds = %for.end.268
  %246 = load i32, i32* %acjmprev, align 4
  %247 = load i32, i32* %acjmnext, align 4
  %idxprom281 = sext i32 %247 to i64
  %248 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %arrayidx282 = getelementptr inbounds %struct._Achain, %struct._Achain* %248, i64 %idxprom281
  %prev283 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx282, i32 0, i32 1
  store i32 %246, i32* %prev283, align 4
  br label %if.end.284

if.end.284:                                       ; preds = %if.then.280, %for.end.268
  %249 = load i8*, i8** @veryfastsupg_double_outtree.treetmp, align 8
  %250 = load i32, i32* %im, align 4
  %idxprom285 = sext i32 %250 to i64
  %251 = load i8**, i8*** @veryfastsupg_double_outtree.tree, align 8
  %arrayidx286 = getelementptr inbounds i8*, i8** %251, i64 %idxprom285
  %252 = load i8*, i8** %arrayidx286, align 8
  %253 = load i32, i32* %k, align 4
  %idxprom287 = sext i32 %253 to i64
  %254 = load double**, double*** %len.addr, align 8
  %arrayidx288 = getelementptr inbounds double*, double** %254, i64 %idxprom287
  %255 = load double*, double** %arrayidx288, align 8
  %arrayidx289 = getelementptr inbounds double, double* %255, i64 0
  %256 = load double, double* %arrayidx289, align 8
  %257 = load i32, i32* %jm, align 4
  %idxprom290 = sext i32 %257 to i64
  %258 = load i8**, i8*** @veryfastsupg_double_outtree.tree, align 8
  %arrayidx291 = getelementptr inbounds i8*, i8** %258, i64 %idxprom290
  %259 = load i8*, i8** %arrayidx291, align 8
  %260 = load i32, i32* %k, align 4
  %idxprom292 = sext i32 %260 to i64
  %261 = load double**, double*** %len.addr, align 8
  %arrayidx293 = getelementptr inbounds double*, double** %261, i64 %idxprom292
  %262 = load double*, double** %arrayidx293, align 8
  %arrayidx294 = getelementptr inbounds double, double* %262, i64 1
  %263 = load double, double* %arrayidx294, align 8
  %call295 = call i32 (i8*, i8*, ...) @sprintf(i8* %249, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i32 0, i32 0), i8* %252, double %256, i8* %259, double %263) #8
  %264 = load i32, i32* %im, align 4
  %idxprom296 = sext i32 %264 to i64
  %265 = load i8**, i8*** @veryfastsupg_double_outtree.tree, align 8
  %arrayidx297 = getelementptr inbounds i8*, i8** %265, i64 %idxprom296
  %266 = load i8*, i8** %arrayidx297, align 8
  %267 = load i8*, i8** @veryfastsupg_double_outtree.treetmp, align 8
  %call298 = call i8* @strcpy(i8* %266, i8* %267) #8
  br label %for.inc.299

for.inc.299:                                      ; preds = %if.end.284
  %268 = load i32, i32* %k, align 4
  %inc300 = add nsw i32 %268, 1
  store i32 %inc300, i32* %k, align 4
  br label %for.cond.100

for.end.301:                                      ; preds = %for.cond.100
  %call302 = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0))
  store %struct._IO_FILE* %call302, %struct._IO_FILE** %fpout, align 8
  %269 = load %struct._IO_FILE*, %struct._IO_FILE** %fpout, align 8
  %270 = load i8*, i8** @veryfastsupg_double_outtree.treetmp, align 8
  %call303 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %269, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* %270)
  %271 = load %struct._IO_FILE*, %struct._IO_FILE** %fpout, align 8
  %call304 = call i32 @fclose(%struct._IO_FILE* %271)
  %272 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call305 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %272, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  %273 = load double*, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %274 = bitcast double* %273 to i8*
  call void @free(i8* %274) #8
  store double* null, double** @veryfastsupg_double_outtree.tmptmplen, align 8
  %275 = load i32*, i32** @veryfastsupg_double_outtree.hist, align 8
  %276 = bitcast i32* %275 to i8*
  call void @free(i8* %276) #8
  store i32* null, i32** @veryfastsupg_double_outtree.hist, align 8
  %277 = load %struct._Achain*, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %278 = bitcast %struct._Achain* %277 to i8*
  call void @free(i8* %278) #8
  store %struct._Achain* null, %struct._Achain** @veryfastsupg_double_outtree.ac, align 8
  %279 = load i8**, i8*** @veryfastsupg_double_outtree.tree, align 8
  call void @FreeCharMtx(i8** %279)
  %280 = load i8*, i8** @veryfastsupg_double_outtree.treetmp, align 8
  call void @free(i8* %280) #8
  %281 = load i8*, i8** @veryfastsupg_double_outtree.nametmp, align 8
  call void @free(i8* %281) #8
  ret void
}

; Function Attrs: nounwind uwtable
define internal double @cluster_mix_double(double %d1, double %d2) #0 {
entry:
  %d1.addr = alloca double, align 8
  %d2.addr = alloca double, align 8
  store double %d1, double* %d1.addr, align 8
  store double %d2, double* %d2.addr, align 8
  %0 = load double, double* %d1.addr, align 8
  %1 = load double, double* %d2.addr, align 8
  %cmp = fcmp olt double %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load double, double* %d1.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load double, double* %d2.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %2, %cond.true ], [ %3, %cond.false ]
  %4 = load double, double* @sueff1_double, align 8
  %mul = fmul double %cond, %4
  %5 = load double, double* %d1.addr, align 8
  %6 = load double, double* %d2.addr, align 8
  %add = fadd double %5, %6
  %7 = load double, double* @sueff05_double, align 8
  %mul1 = fmul double %add, %7
  %add2 = fadd double %mul, %mul1
  ret double %add2
}

; Function Attrs: nounwind uwtable
define internal double @cluster_average_double(double %d1, double %d2) #0 {
entry:
  %d1.addr = alloca double, align 8
  %d2.addr = alloca double, align 8
  store double %d1, double* %d1.addr, align 8
  store double %d2, double* %d2.addr, align 8
  %0 = load double, double* %d1.addr, align 8
  %1 = load double, double* %d2.addr, align 8
  %add = fadd double %0, %1
  %mul = fmul double %add, 5.000000e-01
  ret double %mul
}

; Function Attrs: nounwind uwtable
define internal double @cluster_minimum_double(double %d1, double %d2) #0 {
entry:
  %d1.addr = alloca double, align 8
  %d2.addr = alloca double, align 8
  store double %d1, double* %d1.addr, align 8
  store double %d2, double* %d2.addr, align 8
  %0 = load double, double* %d1.addr, align 8
  %1 = load double, double* %d2.addr, align 8
  %cmp = fcmp olt double %0, %1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load double, double* %d1.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load double, double* %d2.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %2, %cond.true ], [ %3, %cond.false ]
  ret double %cond
}

; Function Attrs: nounwind uwtable
define void @veryfastsupg(i32 %nseq, double** %oeff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %oeff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %tmpint = alloca i32, align 4
  %eff1 = alloca i32, align 4
  %eff0 = alloca i32, align 4
  %minscore = alloca i32, align 4
  %minscoref = alloca double, align 8
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %prevnode = alloca i32, align 4
  %acjmnext = alloca i32, align 4
  %acjmprev = alloca i32, align 4
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %oeff, double*** %oeff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  %0 = load i32**, i32*** @veryfastsupg.eff, align 8
  %tobool = icmp ne i32** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @njob, align 4
  %2 = load i32, i32* @njob, align 4
  %call = call i32** @AllocateIntMtx(i32 %1, i32 %2)
  store i32** %call, i32*** @veryfastsupg.eff, align 8
  %3 = load i32, i32* @njob, align 4
  %call1 = call i32* @AllocateIntVec(i32 %3)
  store i32* %call1, i32** @veryfastsupg.hist, align 8
  %4 = load i32, i32* @njob, align 4
  %conv = sext i32 %4 to i64
  %mul = mul i64 %conv, 8
  %call2 = call noalias i8* @malloc(i64 %mul) #8
  %5 = bitcast i8* %call2 to double*
  store double* %5, double** @veryfastsupg.tmptmplen, align 8
  %6 = load i32, i32* @njob, align 4
  %conv3 = sext i32 %6 to i64
  %mul4 = mul i64 %conv3, 8
  %call5 = call noalias i8* @malloc(i64 %mul4) #8
  %7 = bitcast i8* %call5 to %struct._Achain*
  store %struct._Achain* %7, %struct._Achain** @veryfastsupg.ac, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.19, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end.21

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %nseq.addr, align 4
  %cmp8 = icmp slt i32 %10, %11
  br i1 %cmp8, label %for.body.10, label %for.end

for.body.10:                                      ; preds = %for.cond.7
  %12 = load i32, i32* %j, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %13 to i64
  %14 = load double**, double*** %oeff.addr, align 8
  %arrayidx = getelementptr inbounds double*, double** %14, i64 %idxprom11
  %15 = load double*, double** %arrayidx, align 8
  %arrayidx12 = getelementptr inbounds double, double* %15, i64 %idxprom
  %16 = load double, double* %arrayidx12, align 8
  %mul13 = fmul double %16, 1.000000e+06
  %add = fadd double %mul13, 5.000000e-01
  %conv14 = fptosi double %add to i32
  %17 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %17 to i64
  %18 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %18 to i64
  %19 = load i32**, i32*** @veryfastsupg.eff, align 8
  %arrayidx17 = getelementptr inbounds i32*, i32** %19, i64 %idxprom16
  %20 = load i32*, i32** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds i32, i32* %20, i64 %idxprom15
  store i32 %conv14, i32* %arrayidx18, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.10
  %21 = load i32, i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.7

for.end:                                          ; preds = %for.cond.7
  br label %for.inc.19

for.inc.19:                                       ; preds = %for.end
  %22 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end.21:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc.31, %for.end.21
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %nseq.addr, align 4
  %cmp23 = icmp slt i32 %23, %24
  br i1 %cmp23, label %for.body.25, label %for.end.33

for.body.25:                                      ; preds = %for.cond.22
  %25 = load i32, i32* %i, align 4
  %add26 = add nsw i32 %25, 1
  %26 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %26 to i64
  %27 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx28 = getelementptr inbounds %struct._Achain, %struct._Achain* %27, i64 %idxprom27
  %next = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx28, i32 0, i32 0
  store i32 %add26, i32* %next, align 4
  %28 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %28, 1
  %29 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %29 to i64
  %30 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx30 = getelementptr inbounds %struct._Achain, %struct._Achain* %30, i64 %idxprom29
  %prev = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx30, i32 0, i32 1
  store i32 %sub, i32* %prev, align 4
  br label %for.inc.31

for.inc.31:                                       ; preds = %for.body.25
  %31 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %31, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond.22

for.end.33:                                       ; preds = %for.cond.22
  %32 = load i32, i32* %nseq.addr, align 4
  %sub34 = sub nsw i32 %32, 1
  %idxprom35 = sext i32 %sub34 to i64
  %33 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx36 = getelementptr inbounds %struct._Achain, %struct._Achain* %33, i64 %idxprom35
  %next37 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx36, i32 0, i32 0
  store i32 -1, i32* %next37, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.44, %for.end.33
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %nseq.addr, align 4
  %cmp39 = icmp slt i32 %34, %35
  br i1 %cmp39, label %for.body.41, label %for.end.46

for.body.41:                                      ; preds = %for.cond.38
  %36 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %36 to i64
  %37 = load double*, double** @veryfastsupg.tmptmplen, align 8
  %arrayidx43 = getelementptr inbounds double, double* %37, i64 %idxprom42
  store double 0.000000e+00, double* %arrayidx43, align 8
  br label %for.inc.44

for.inc.44:                                       ; preds = %for.body.41
  %38 = load i32, i32* %i, align 4
  %inc45 = add nsw i32 %38, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond.38

for.end.46:                                       ; preds = %for.cond.38
  store i32 0, i32* %i, align 4
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.53, %for.end.46
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %nseq.addr, align 4
  %cmp48 = icmp slt i32 %39, %40
  br i1 %cmp48, label %for.body.50, label %for.end.55

for.body.50:                                      ; preds = %for.cond.47
  %41 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %41 to i64
  %42 = load i32*, i32** @veryfastsupg.hist, align 8
  %arrayidx52 = getelementptr inbounds i32, i32* %42, i64 %idxprom51
  store i32 -1, i32* %arrayidx52, align 4
  br label %for.inc.53

for.inc.53:                                       ; preds = %for.body.50
  %43 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %43, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond.47

for.end.55:                                       ; preds = %for.cond.47
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.57

for.cond.57:                                      ; preds = %for.inc.250, %for.end.55
  %45 = load i32, i32* %k, align 4
  %46 = load i32, i32* %nseq.addr, align 4
  %sub58 = sub nsw i32 %46, 1
  %cmp59 = icmp slt i32 %45, %sub58
  br i1 %cmp59, label %for.body.61, label %for.end.252

for.body.61:                                      ; preds = %for.cond.57
  %47 = load i32, i32* %k, align 4
  %rem = srem i32 %47, 10
  %cmp62 = icmp eq i32 %rem, 0
  br i1 %cmp62, label %if.then.64, label %if.end.66

if.then.64:                                       ; preds = %for.body.61
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %49 = load i32, i32* %k, align 4
  %50 = load i32, i32* %nseq.addr, align 4
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %49, i32 %50)
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.64, %for.body.61
  store i32 4000000, i32* %minscore, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.94, %if.end.66
  %51 = load i32, i32* %i, align 4
  %idxprom68 = sext i32 %51 to i64
  %52 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx69 = getelementptr inbounds %struct._Achain, %struct._Achain* %52, i64 %idxprom68
  %next70 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx69, i32 0, i32 0
  %53 = load i32, i32* %next70, align 4
  %cmp71 = icmp ne i32 %53, -1
  br i1 %cmp71, label %for.body.73, label %for.end.98

for.body.73:                                      ; preds = %for.cond.67
  %54 = load i32, i32* %i, align 4
  %idxprom74 = sext i32 %54 to i64
  %55 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx75 = getelementptr inbounds %struct._Achain, %struct._Achain* %55, i64 %idxprom74
  %next76 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx75, i32 0, i32 0
  %56 = load i32, i32* %next76, align 4
  store i32 %56, i32* %j, align 4
  br label %for.cond.77

for.cond.77:                                      ; preds = %for.inc.89, %for.body.73
  %57 = load i32, i32* %j, align 4
  %cmp78 = icmp ne i32 %57, -1
  br i1 %cmp78, label %for.body.80, label %for.end.93

for.body.80:                                      ; preds = %for.cond.77
  %58 = load i32, i32* %j, align 4
  %idxprom81 = sext i32 %58 to i64
  %59 = load i32, i32* %i, align 4
  %idxprom82 = sext i32 %59 to i64
  %60 = load i32**, i32*** @veryfastsupg.eff, align 8
  %arrayidx83 = getelementptr inbounds i32*, i32** %60, i64 %idxprom82
  %61 = load i32*, i32** %arrayidx83, align 8
  %arrayidx84 = getelementptr inbounds i32, i32* %61, i64 %idxprom81
  %62 = load i32, i32* %arrayidx84, align 4
  store i32 %62, i32* %tmpint, align 4
  %63 = load i32, i32* %tmpint, align 4
  %64 = load i32, i32* %minscore, align 4
  %cmp85 = icmp slt i32 %63, %64
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %for.body.80
  %65 = load i32, i32* %tmpint, align 4
  store i32 %65, i32* %minscore, align 4
  %66 = load i32, i32* %i, align 4
  store i32 %66, i32* %im, align 4
  %67 = load i32, i32* %j, align 4
  store i32 %67, i32* %jm, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %for.body.80
  br label %for.inc.89

for.inc.89:                                       ; preds = %if.end.88
  %68 = load i32, i32* %j, align 4
  %idxprom90 = sext i32 %68 to i64
  %69 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx91 = getelementptr inbounds %struct._Achain, %struct._Achain* %69, i64 %idxprom90
  %next92 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx91, i32 0, i32 0
  %70 = load i32, i32* %next92, align 4
  store i32 %70, i32* %j, align 4
  br label %for.cond.77

for.end.93:                                       ; preds = %for.cond.77
  br label %for.inc.94

for.inc.94:                                       ; preds = %for.end.93
  %71 = load i32, i32* %i, align 4
  %idxprom95 = sext i32 %71 to i64
  %72 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx96 = getelementptr inbounds %struct._Achain, %struct._Achain* %72, i64 %idxprom95
  %next97 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx96, i32 0, i32 0
  %73 = load i32, i32* %next97, align 4
  store i32 %73, i32* %i, align 4
  br label %for.cond.67

for.end.98:                                       ; preds = %for.cond.67
  %74 = load i32, i32* %minscore, align 4
  %conv99 = sitofp i32 %74 to double
  %mul100 = fmul double %conv99, 5.000000e-01
  %div = fdiv double %mul100, 1.000000e+06
  store double %div, double* %minscoref, align 8
  %75 = load i32, i32* %k, align 4
  %idxprom101 = sext i32 %75 to i64
  %76 = load i32***, i32**** %topol.addr, align 8
  %arrayidx102 = getelementptr inbounds i32**, i32*** %76, i64 %idxprom101
  %77 = load i32**, i32*** %arrayidx102, align 8
  %arrayidx103 = getelementptr inbounds i32*, i32** %77, i64 0
  %78 = load i32*, i32** %arrayidx103, align 8
  store i32* %78, i32** %intpt, align 8
  %79 = load i32, i32* %im, align 4
  %idxprom104 = sext i32 %79 to i64
  %80 = load i32*, i32** @veryfastsupg.hist, align 8
  %arrayidx105 = getelementptr inbounds i32, i32* %80, i64 %idxprom104
  %81 = load i32, i32* %arrayidx105, align 4
  store i32 %81, i32* %prevnode, align 4
  %82 = load i32, i32* %prevnode, align 4
  %cmp106 = icmp eq i32 %82, -1
  br i1 %cmp106, label %if.then.108, label %if.else

if.then.108:                                      ; preds = %for.end.98
  %83 = load i32, i32* %im, align 4
  %84 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %84, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %83, i32* %84, align 4
  %85 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %85, align 4
  br label %if.end.134

if.else:                                          ; preds = %for.end.98
  %86 = load i32, i32* %prevnode, align 4
  %idxprom109 = sext i32 %86 to i64
  %87 = load i32***, i32**** %topol.addr, align 8
  %arrayidx110 = getelementptr inbounds i32**, i32*** %87, i64 %idxprom109
  %88 = load i32**, i32*** %arrayidx110, align 8
  %arrayidx111 = getelementptr inbounds i32*, i32** %88, i64 0
  %89 = load i32*, i32** %arrayidx111, align 8
  store i32* %89, i32** %pt1, align 8
  %90 = load i32, i32* %prevnode, align 4
  %idxprom112 = sext i32 %90 to i64
  %91 = load i32***, i32**** %topol.addr, align 8
  %arrayidx113 = getelementptr inbounds i32**, i32*** %91, i64 %idxprom112
  %92 = load i32**, i32*** %arrayidx113, align 8
  %arrayidx114 = getelementptr inbounds i32*, i32** %92, i64 1
  %93 = load i32*, i32** %arrayidx114, align 8
  store i32* %93, i32** %pt2, align 8
  %94 = load i32*, i32** %pt1, align 8
  %95 = load i32, i32* %94, align 4
  %96 = load i32*, i32** %pt2, align 8
  %97 = load i32, i32* %96, align 4
  %cmp115 = icmp sgt i32 %95, %97
  br i1 %cmp115, label %if.then.117, label %if.else.118

if.then.117:                                      ; preds = %if.else
  %98 = load i32*, i32** %pt2, align 8
  store i32* %98, i32** %pt11, align 8
  %99 = load i32*, i32** %pt1, align 8
  store i32* %99, i32** %pt22, align 8
  br label %if.end.119

if.else.118:                                      ; preds = %if.else
  %100 = load i32*, i32** %pt1, align 8
  store i32* %100, i32** %pt11, align 8
  %101 = load i32*, i32** %pt2, align 8
  store i32* %101, i32** %pt22, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.118, %if.then.117
  %102 = load i32*, i32** %pt11, align 8
  store i32* %102, i32** %intpt2, align 8
  br label %for.cond.120

for.cond.120:                                     ; preds = %for.body.123, %if.end.119
  %103 = load i32*, i32** %intpt2, align 8
  %104 = load i32, i32* %103, align 4
  %cmp121 = icmp ne i32 %104, -1
  br i1 %cmp121, label %for.body.123, label %for.end.126

for.body.123:                                     ; preds = %for.cond.120
  %105 = load i32*, i32** %intpt2, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %105, i32 1
  store i32* %incdec.ptr124, i32** %intpt2, align 8
  %106 = load i32, i32* %105, align 4
  %107 = load i32*, i32** %intpt, align 8
  %incdec.ptr125 = getelementptr inbounds i32, i32* %107, i32 1
  store i32* %incdec.ptr125, i32** %intpt, align 8
  store i32 %106, i32* %107, align 4
  br label %for.cond.120

for.end.126:                                      ; preds = %for.cond.120
  %108 = load i32*, i32** %pt22, align 8
  store i32* %108, i32** %intpt2, align 8
  br label %for.cond.127

for.cond.127:                                     ; preds = %for.body.130, %for.end.126
  %109 = load i32*, i32** %intpt2, align 8
  %110 = load i32, i32* %109, align 4
  %cmp128 = icmp ne i32 %110, -1
  br i1 %cmp128, label %for.body.130, label %for.end.133

for.body.130:                                     ; preds = %for.cond.127
  %111 = load i32*, i32** %intpt2, align 8
  %incdec.ptr131 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %incdec.ptr131, i32** %intpt2, align 8
  %112 = load i32, i32* %111, align 4
  %113 = load i32*, i32** %intpt, align 8
  %incdec.ptr132 = getelementptr inbounds i32, i32* %113, i32 1
  store i32* %incdec.ptr132, i32** %intpt, align 8
  store i32 %112, i32* %113, align 4
  br label %for.cond.127

for.end.133:                                      ; preds = %for.cond.127
  %114 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %114, align 4
  br label %if.end.134

if.end.134:                                       ; preds = %for.end.133, %if.then.108
  %115 = load i32, i32* %k, align 4
  %idxprom135 = sext i32 %115 to i64
  %116 = load i32***, i32**** %topol.addr, align 8
  %arrayidx136 = getelementptr inbounds i32**, i32*** %116, i64 %idxprom135
  %117 = load i32**, i32*** %arrayidx136, align 8
  %arrayidx137 = getelementptr inbounds i32*, i32** %117, i64 1
  %118 = load i32*, i32** %arrayidx137, align 8
  store i32* %118, i32** %intpt, align 8
  %119 = load i32, i32* %jm, align 4
  %idxprom138 = sext i32 %119 to i64
  %120 = load i32*, i32** @veryfastsupg.hist, align 8
  %arrayidx139 = getelementptr inbounds i32, i32* %120, i64 %idxprom138
  %121 = load i32, i32* %arrayidx139, align 4
  store i32 %121, i32* %prevnode, align 4
  %122 = load i32, i32* %prevnode, align 4
  %cmp140 = icmp eq i32 %122, -1
  br i1 %cmp140, label %if.then.142, label %if.else.144

if.then.142:                                      ; preds = %if.end.134
  %123 = load i32, i32* %jm, align 4
  %124 = load i32*, i32** %intpt, align 8
  %incdec.ptr143 = getelementptr inbounds i32, i32* %124, i32 1
  store i32* %incdec.ptr143, i32** %intpt, align 8
  store i32 %123, i32* %124, align 4
  %125 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %125, align 4
  br label %if.end.170

if.else.144:                                      ; preds = %if.end.134
  %126 = load i32, i32* %prevnode, align 4
  %idxprom145 = sext i32 %126 to i64
  %127 = load i32***, i32**** %topol.addr, align 8
  %arrayidx146 = getelementptr inbounds i32**, i32*** %127, i64 %idxprom145
  %128 = load i32**, i32*** %arrayidx146, align 8
  %arrayidx147 = getelementptr inbounds i32*, i32** %128, i64 0
  %129 = load i32*, i32** %arrayidx147, align 8
  store i32* %129, i32** %pt1, align 8
  %130 = load i32, i32* %prevnode, align 4
  %idxprom148 = sext i32 %130 to i64
  %131 = load i32***, i32**** %topol.addr, align 8
  %arrayidx149 = getelementptr inbounds i32**, i32*** %131, i64 %idxprom148
  %132 = load i32**, i32*** %arrayidx149, align 8
  %arrayidx150 = getelementptr inbounds i32*, i32** %132, i64 1
  %133 = load i32*, i32** %arrayidx150, align 8
  store i32* %133, i32** %pt2, align 8
  %134 = load i32*, i32** %pt1, align 8
  %135 = load i32, i32* %134, align 4
  %136 = load i32*, i32** %pt2, align 8
  %137 = load i32, i32* %136, align 4
  %cmp151 = icmp sgt i32 %135, %137
  br i1 %cmp151, label %if.then.153, label %if.else.154

if.then.153:                                      ; preds = %if.else.144
  %138 = load i32*, i32** %pt2, align 8
  store i32* %138, i32** %pt11, align 8
  %139 = load i32*, i32** %pt1, align 8
  store i32* %139, i32** %pt22, align 8
  br label %if.end.155

if.else.154:                                      ; preds = %if.else.144
  %140 = load i32*, i32** %pt1, align 8
  store i32* %140, i32** %pt11, align 8
  %141 = load i32*, i32** %pt2, align 8
  store i32* %141, i32** %pt22, align 8
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.154, %if.then.153
  %142 = load i32*, i32** %pt11, align 8
  store i32* %142, i32** %intpt2, align 8
  br label %for.cond.156

for.cond.156:                                     ; preds = %for.body.159, %if.end.155
  %143 = load i32*, i32** %intpt2, align 8
  %144 = load i32, i32* %143, align 4
  %cmp157 = icmp ne i32 %144, -1
  br i1 %cmp157, label %for.body.159, label %for.end.162

for.body.159:                                     ; preds = %for.cond.156
  %145 = load i32*, i32** %intpt2, align 8
  %incdec.ptr160 = getelementptr inbounds i32, i32* %145, i32 1
  store i32* %incdec.ptr160, i32** %intpt2, align 8
  %146 = load i32, i32* %145, align 4
  %147 = load i32*, i32** %intpt, align 8
  %incdec.ptr161 = getelementptr inbounds i32, i32* %147, i32 1
  store i32* %incdec.ptr161, i32** %intpt, align 8
  store i32 %146, i32* %147, align 4
  br label %for.cond.156

for.end.162:                                      ; preds = %for.cond.156
  %148 = load i32*, i32** %pt22, align 8
  store i32* %148, i32** %intpt2, align 8
  br label %for.cond.163

for.cond.163:                                     ; preds = %for.body.166, %for.end.162
  %149 = load i32*, i32** %intpt2, align 8
  %150 = load i32, i32* %149, align 4
  %cmp164 = icmp ne i32 %150, -1
  br i1 %cmp164, label %for.body.166, label %for.end.169

for.body.166:                                     ; preds = %for.cond.163
  %151 = load i32*, i32** %intpt2, align 8
  %incdec.ptr167 = getelementptr inbounds i32, i32* %151, i32 1
  store i32* %incdec.ptr167, i32** %intpt2, align 8
  %152 = load i32, i32* %151, align 4
  %153 = load i32*, i32** %intpt, align 8
  %incdec.ptr168 = getelementptr inbounds i32, i32* %153, i32 1
  store i32* %incdec.ptr168, i32** %intpt, align 8
  store i32 %152, i32* %153, align 4
  br label %for.cond.163

for.end.169:                                      ; preds = %for.cond.163
  %154 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %154, align 4
  br label %if.end.170

if.end.170:                                       ; preds = %for.end.169, %if.then.142
  %155 = load double, double* %minscoref, align 8
  %156 = load i32, i32* %im, align 4
  %idxprom171 = sext i32 %156 to i64
  %157 = load double*, double** @veryfastsupg.tmptmplen, align 8
  %arrayidx172 = getelementptr inbounds double, double* %157, i64 %idxprom171
  %158 = load double, double* %arrayidx172, align 8
  %sub173 = fsub double %155, %158
  %159 = load i32, i32* %k, align 4
  %idxprom174 = sext i32 %159 to i64
  %160 = load double**, double*** %len.addr, align 8
  %arrayidx175 = getelementptr inbounds double*, double** %160, i64 %idxprom174
  %161 = load double*, double** %arrayidx175, align 8
  %arrayidx176 = getelementptr inbounds double, double* %161, i64 0
  store double %sub173, double* %arrayidx176, align 8
  %162 = load double, double* %minscoref, align 8
  %163 = load i32, i32* %jm, align 4
  %idxprom177 = sext i32 %163 to i64
  %164 = load double*, double** @veryfastsupg.tmptmplen, align 8
  %arrayidx178 = getelementptr inbounds double, double* %164, i64 %idxprom177
  %165 = load double, double* %arrayidx178, align 8
  %sub179 = fsub double %162, %165
  %166 = load i32, i32* %k, align 4
  %idxprom180 = sext i32 %166 to i64
  %167 = load double**, double*** %len.addr, align 8
  %arrayidx181 = getelementptr inbounds double*, double** %167, i64 %idxprom180
  %168 = load double*, double** %arrayidx181, align 8
  %arrayidx182 = getelementptr inbounds double, double* %168, i64 1
  store double %sub179, double* %arrayidx182, align 8
  %169 = load double, double* %minscoref, align 8
  %170 = load i32, i32* %im, align 4
  %idxprom183 = sext i32 %170 to i64
  %171 = load double*, double** @veryfastsupg.tmptmplen, align 8
  %arrayidx184 = getelementptr inbounds double, double* %171, i64 %idxprom183
  store double %169, double* %arrayidx184, align 8
  %172 = load i32, i32* %k, align 4
  %173 = load i32, i32* %im, align 4
  %idxprom185 = sext i32 %173 to i64
  %174 = load i32*, i32** @veryfastsupg.hist, align 8
  %arrayidx186 = getelementptr inbounds i32, i32* %174, i64 %idxprom185
  store i32 %172, i32* %arrayidx186, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.187

for.cond.187:                                     ; preds = %for.inc.229, %if.end.170
  %175 = load i32, i32* %i, align 4
  %cmp188 = icmp ne i32 %175, -1
  br i1 %cmp188, label %for.body.190, label %for.end.233

for.body.190:                                     ; preds = %for.cond.187
  %176 = load i32, i32* %i, align 4
  %177 = load i32, i32* %im, align 4
  %cmp191 = icmp ne i32 %176, %177
  br i1 %cmp191, label %land.lhs.true, label %if.end.228

land.lhs.true:                                    ; preds = %for.body.190
  %178 = load i32, i32* %i, align 4
  %179 = load i32, i32* %jm, align 4
  %cmp193 = icmp ne i32 %178, %179
  br i1 %cmp193, label %if.then.195, label %if.end.228

if.then.195:                                      ; preds = %land.lhs.true
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %im, align 4
  %cmp196 = icmp slt i32 %180, %181
  br i1 %cmp196, label %if.then.198, label %if.else.199

if.then.198:                                      ; preds = %if.then.195
  %182 = load i32, i32* %i, align 4
  store i32 %182, i32* %miniim, align 4
  %183 = load i32, i32* %im, align 4
  store i32 %183, i32* %maxiim, align 4
  %184 = load i32, i32* %i, align 4
  store i32 %184, i32* %minijm, align 4
  %185 = load i32, i32* %jm, align 4
  store i32 %185, i32* %maxijm, align 4
  br label %if.end.205

if.else.199:                                      ; preds = %if.then.195
  %186 = load i32, i32* %i, align 4
  %187 = load i32, i32* %jm, align 4
  %cmp200 = icmp slt i32 %186, %187
  br i1 %cmp200, label %if.then.202, label %if.else.203

if.then.202:                                      ; preds = %if.else.199
  %188 = load i32, i32* %im, align 4
  store i32 %188, i32* %miniim, align 4
  %189 = load i32, i32* %i, align 4
  store i32 %189, i32* %maxiim, align 4
  %190 = load i32, i32* %i, align 4
  store i32 %190, i32* %minijm, align 4
  %191 = load i32, i32* %jm, align 4
  store i32 %191, i32* %maxijm, align 4
  br label %if.end.204

if.else.203:                                      ; preds = %if.else.199
  %192 = load i32, i32* %im, align 4
  store i32 %192, i32* %miniim, align 4
  %193 = load i32, i32* %i, align 4
  store i32 %193, i32* %maxiim, align 4
  %194 = load i32, i32* %jm, align 4
  store i32 %194, i32* %minijm, align 4
  %195 = load i32, i32* %i, align 4
  store i32 %195, i32* %maxijm, align 4
  br label %if.end.204

if.end.204:                                       ; preds = %if.else.203, %if.then.202
  br label %if.end.205

if.end.205:                                       ; preds = %if.end.204, %if.then.198
  %196 = load i32, i32* %maxiim, align 4
  %idxprom206 = sext i32 %196 to i64
  %197 = load i32, i32* %miniim, align 4
  %idxprom207 = sext i32 %197 to i64
  %198 = load i32**, i32*** @veryfastsupg.eff, align 8
  %arrayidx208 = getelementptr inbounds i32*, i32** %198, i64 %idxprom207
  %199 = load i32*, i32** %arrayidx208, align 8
  %arrayidx209 = getelementptr inbounds i32, i32* %199, i64 %idxprom206
  %200 = load i32, i32* %arrayidx209, align 4
  store i32 %200, i32* %eff0, align 4
  %201 = load i32, i32* %maxijm, align 4
  %idxprom210 = sext i32 %201 to i64
  %202 = load i32, i32* %minijm, align 4
  %idxprom211 = sext i32 %202 to i64
  %203 = load i32**, i32*** @veryfastsupg.eff, align 8
  %arrayidx212 = getelementptr inbounds i32*, i32** %203, i64 %idxprom211
  %204 = load i32*, i32** %arrayidx212, align 8
  %arrayidx213 = getelementptr inbounds i32, i32* %204, i64 %idxprom210
  %205 = load i32, i32* %arrayidx213, align 4
  store i32 %205, i32* %eff1, align 4
  %206 = load i32, i32* %eff0, align 4
  %207 = load i32, i32* %eff1, align 4
  %cmp214 = icmp slt i32 %206, %207
  br i1 %cmp214, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.205
  %208 = load i32, i32* %eff0, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.205
  %209 = load i32, i32* %eff1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %208, %cond.true ], [ %209, %cond.false ]
  %conv216 = sitofp i32 %cond to double
  %mul217 = fmul double %conv216, 9.000000e-01
  %210 = load i32, i32* %eff0, align 4
  %211 = load i32, i32* %eff1, align 4
  %add218 = add nsw i32 %210, %211
  %conv219 = sitofp i32 %add218 to double
  %mul220 = fmul double %conv219, 5.000000e-01
  %mul221 = fmul double %mul220, 1.000000e-01
  %add222 = fadd double %mul217, %mul221
  %conv223 = fptosi double %add222 to i32
  %212 = load i32, i32* %maxiim, align 4
  %idxprom224 = sext i32 %212 to i64
  %213 = load i32, i32* %miniim, align 4
  %idxprom225 = sext i32 %213 to i64
  %214 = load i32**, i32*** @veryfastsupg.eff, align 8
  %arrayidx226 = getelementptr inbounds i32*, i32** %214, i64 %idxprom225
  %215 = load i32*, i32** %arrayidx226, align 8
  %arrayidx227 = getelementptr inbounds i32, i32* %215, i64 %idxprom224
  store i32 %conv223, i32* %arrayidx227, align 4
  br label %if.end.228

if.end.228:                                       ; preds = %cond.end, %land.lhs.true, %for.body.190
  br label %for.inc.229

for.inc.229:                                      ; preds = %if.end.228
  %216 = load i32, i32* %i, align 4
  %idxprom230 = sext i32 %216 to i64
  %217 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx231 = getelementptr inbounds %struct._Achain, %struct._Achain* %217, i64 %idxprom230
  %next232 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx231, i32 0, i32 0
  %218 = load i32, i32* %next232, align 4
  store i32 %218, i32* %i, align 4
  br label %for.cond.187

for.end.233:                                      ; preds = %for.cond.187
  %219 = load i32, i32* %jm, align 4
  %idxprom234 = sext i32 %219 to i64
  %220 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx235 = getelementptr inbounds %struct._Achain, %struct._Achain* %220, i64 %idxprom234
  %prev236 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx235, i32 0, i32 1
  %221 = load i32, i32* %prev236, align 4
  store i32 %221, i32* %acjmprev, align 4
  %222 = load i32, i32* %jm, align 4
  %idxprom237 = sext i32 %222 to i64
  %223 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx238 = getelementptr inbounds %struct._Achain, %struct._Achain* %223, i64 %idxprom237
  %next239 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx238, i32 0, i32 0
  %224 = load i32, i32* %next239, align 4
  store i32 %224, i32* %acjmnext, align 4
  %225 = load i32, i32* %acjmnext, align 4
  %226 = load i32, i32* %acjmprev, align 4
  %idxprom240 = sext i32 %226 to i64
  %227 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx241 = getelementptr inbounds %struct._Achain, %struct._Achain* %227, i64 %idxprom240
  %next242 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx241, i32 0, i32 0
  store i32 %225, i32* %next242, align 4
  %228 = load i32, i32* %acjmnext, align 4
  %cmp243 = icmp ne i32 %228, -1
  br i1 %cmp243, label %if.then.245, label %if.end.249

if.then.245:                                      ; preds = %for.end.233
  %229 = load i32, i32* %acjmprev, align 4
  %230 = load i32, i32* %acjmnext, align 4
  %idxprom246 = sext i32 %230 to i64
  %231 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %arrayidx247 = getelementptr inbounds %struct._Achain, %struct._Achain* %231, i64 %idxprom246
  %prev248 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx247, i32 0, i32 1
  store i32 %229, i32* %prev248, align 4
  br label %if.end.249

if.end.249:                                       ; preds = %if.then.245, %for.end.233
  br label %for.inc.250

for.inc.250:                                      ; preds = %if.end.249
  %232 = load i32, i32* %k, align 4
  %inc251 = add nsw i32 %232, 1
  store i32 %inc251, i32* %k, align 4
  br label %for.cond.57

for.end.252:                                      ; preds = %for.cond.57
  %233 = load i32**, i32*** @veryfastsupg.eff, align 8
  call void @FreeIntMtx(i32** %233)
  store i32** null, i32*** @veryfastsupg.eff, align 8
  %234 = load double*, double** @veryfastsupg.tmptmplen, align 8
  %235 = bitcast double* %234 to i8*
  call void @free(i8* %235) #8
  store double* null, double** @veryfastsupg.tmptmplen, align 8
  %236 = load i32*, i32** @veryfastsupg.hist, align 8
  %237 = bitcast i32* %236 to i8*
  call void @free(i8* %237) #8
  store i32* null, i32** @veryfastsupg.hist, align 8
  %238 = load %struct._Achain*, %struct._Achain** @veryfastsupg.ac, align 8
  %239 = bitcast %struct._Achain* %238 to i8*
  call void @free(i8* %239) #8
  store %struct._Achain* null, %struct._Achain** @veryfastsupg.ac, align 8
  ret void
}

declare i32** @AllocateIntMtx(i32, i32) #2

declare void @FreeIntMtx(i32**) #2

; Function Attrs: nounwind uwtable
define void @veryfastsupg_int(i32 %nseq, i32** %oeff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %oeff.addr = alloca i32**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %intpt2 = alloca i32*, align 8
  %tmpint = alloca i32, align 4
  %eff1 = alloca i32, align 4
  %eff0 = alloca i32, align 4
  %minscore = alloca i32, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %prevnode = alloca i32, align 4
  %acjmnext = alloca i32, align 4
  %acjmprev = alloca i32, align 4
  %pt1 = alloca i32*, align 8
  %pt2 = alloca i32*, align 8
  %pt11 = alloca i32*, align 8
  %pt22 = alloca i32*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32** %oeff, i32*** %oeff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  %0 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  %tobool = icmp ne i32** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @njob, align 4
  %2 = load i32, i32* @njob, align 4
  %call = call i32** @AllocateIntMtx(i32 %1, i32 %2)
  store i32** %call, i32*** @veryfastsupg_int.eff, align 8
  %3 = load i32, i32* @njob, align 4
  %call1 = call i32* @AllocateIntVec(i32 %3)
  store i32* %call1, i32** @veryfastsupg_int.hist, align 8
  %4 = load i32, i32* @njob, align 4
  %call2 = call i32* @AllocateIntVec(i32 %4)
  store i32* %call2, i32** @veryfastsupg_int.tmptmplen, align 8
  %5 = load i32, i32* @njob, align 4
  %conv = sext i32 %5 to i64
  %mul = mul i64 %conv, 8
  %call3 = call noalias i8* @malloc(i64 %mul) #8
  %6 = bitcast i8* %call3 to %struct._Achain*
  store %struct._Achain* %6, %struct._Achain** @veryfastsupg_int.ac, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.15, %if.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end.17

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %for.body
  %9 = load i32, i32* %j, align 4
  %10 = load i32, i32* %nseq.addr, align 4
  %cmp6 = icmp slt i32 %9, %10
  br i1 %cmp6, label %for.body.8, label %for.end

for.body.8:                                       ; preds = %for.cond.5
  %11 = load i32, i32* %j, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %12 to i64
  %13 = load i32**, i32*** %oeff.addr, align 8
  %arrayidx = getelementptr inbounds i32*, i32** %13, i64 %idxprom9
  %14 = load i32*, i32** %arrayidx, align 8
  %arrayidx10 = getelementptr inbounds i32, i32* %14, i64 %idxprom
  %15 = load i32, i32* %arrayidx10, align 4
  %16 = load i32, i32* %j, align 4
  %idxprom11 = sext i32 %16 to i64
  %17 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  %arrayidx13 = getelementptr inbounds i32*, i32** %18, i64 %idxprom12
  %19 = load i32*, i32** %arrayidx13, align 8
  %arrayidx14 = getelementptr inbounds i32, i32* %19, i64 %idxprom11
  store i32 %15, i32* %arrayidx14, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.8
  %20 = load i32, i32* %j, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.15

for.inc.15:                                       ; preds = %for.end
  %21 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %21, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond

for.end.17:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.18

for.cond.18:                                      ; preds = %for.inc.26, %for.end.17
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %nseq.addr, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %for.body.21, label %for.end.28

for.body.21:                                      ; preds = %for.cond.18
  %24 = load i32, i32* %i, align 4
  %add = add nsw i32 %24, 1
  %25 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %25 to i64
  %26 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx23 = getelementptr inbounds %struct._Achain, %struct._Achain* %26, i64 %idxprom22
  %next = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx23, i32 0, i32 0
  store i32 %add, i32* %next, align 4
  %27 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %27, 1
  %28 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %28 to i64
  %29 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx25 = getelementptr inbounds %struct._Achain, %struct._Achain* %29, i64 %idxprom24
  %prev = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx25, i32 0, i32 1
  store i32 %sub, i32* %prev, align 4
  br label %for.inc.26

for.inc.26:                                       ; preds = %for.body.21
  %30 = load i32, i32* %i, align 4
  %inc27 = add nsw i32 %30, 1
  store i32 %inc27, i32* %i, align 4
  br label %for.cond.18

for.end.28:                                       ; preds = %for.cond.18
  %31 = load i32, i32* %nseq.addr, align 4
  %sub29 = sub nsw i32 %31, 1
  %idxprom30 = sext i32 %sub29 to i64
  %32 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx31 = getelementptr inbounds %struct._Achain, %struct._Achain* %32, i64 %idxprom30
  %next32 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx31, i32 0, i32 0
  store i32 -1, i32* %next32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.33

for.cond.33:                                      ; preds = %for.inc.39, %for.end.28
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %nseq.addr, align 4
  %cmp34 = icmp slt i32 %33, %34
  br i1 %cmp34, label %for.body.36, label %for.end.41

for.body.36:                                      ; preds = %for.cond.33
  %35 = load i32, i32* %i, align 4
  %idxprom37 = sext i32 %35 to i64
  %36 = load i32*, i32** @veryfastsupg_int.tmptmplen, align 8
  %arrayidx38 = getelementptr inbounds i32, i32* %36, i64 %idxprom37
  store i32 0, i32* %arrayidx38, align 4
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.body.36
  %37 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %37, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond.33

for.end.41:                                       ; preds = %for.cond.33
  store i32 0, i32* %i, align 4
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc.48, %for.end.41
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %nseq.addr, align 4
  %cmp43 = icmp slt i32 %38, %39
  br i1 %cmp43, label %for.body.45, label %for.end.50

for.body.45:                                      ; preds = %for.cond.42
  %40 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %40 to i64
  %41 = load i32*, i32** @veryfastsupg_int.hist, align 8
  %arrayidx47 = getelementptr inbounds i32, i32* %41, i64 %idxprom46
  store i32 -1, i32* %arrayidx47, align 4
  br label %for.inc.48

for.inc.48:                                       ; preds = %for.body.45
  %42 = load i32, i32* %i, align 4
  %inc49 = add nsw i32 %42, 1
  store i32 %inc49, i32* %i, align 4
  br label %for.cond.42

for.end.50:                                       ; preds = %for.cond.42
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.250, %for.end.50
  %44 = load i32, i32* %k, align 4
  %45 = load i32, i32* %nseq.addr, align 4
  %sub53 = sub nsw i32 %45, 1
  %cmp54 = icmp slt i32 %44, %sub53
  br i1 %cmp54, label %for.body.56, label %for.end.252

for.body.56:                                      ; preds = %for.cond.52
  %46 = load i32, i32* %k, align 4
  %rem = srem i32 %46, 10
  %cmp57 = icmp eq i32 %rem, 0
  br i1 %cmp57, label %if.then.59, label %if.end.61

if.then.59:                                       ; preds = %for.body.56
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %48 = load i32, i32* %k, align 4
  %49 = load i32, i32* %nseq.addr, align 4
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %48, i32 %49)
  br label %if.end.61

if.end.61:                                        ; preds = %if.then.59, %for.body.56
  store i32 4000000, i32* %minscore, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.89, %if.end.61
  %50 = load i32, i32* %i, align 4
  %idxprom63 = sext i32 %50 to i64
  %51 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx64 = getelementptr inbounds %struct._Achain, %struct._Achain* %51, i64 %idxprom63
  %next65 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx64, i32 0, i32 0
  %52 = load i32, i32* %next65, align 4
  %cmp66 = icmp ne i32 %52, -1
  br i1 %cmp66, label %for.body.68, label %for.end.93

for.body.68:                                      ; preds = %for.cond.62
  %53 = load i32, i32* %i, align 4
  %idxprom69 = sext i32 %53 to i64
  %54 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx70 = getelementptr inbounds %struct._Achain, %struct._Achain* %54, i64 %idxprom69
  %next71 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx70, i32 0, i32 0
  %55 = load i32, i32* %next71, align 4
  store i32 %55, i32* %j, align 4
  br label %for.cond.72

for.cond.72:                                      ; preds = %for.inc.84, %for.body.68
  %56 = load i32, i32* %j, align 4
  %cmp73 = icmp ne i32 %56, -1
  br i1 %cmp73, label %for.body.75, label %for.end.88

for.body.75:                                      ; preds = %for.cond.72
  %57 = load i32, i32* %j, align 4
  %idxprom76 = sext i32 %57 to i64
  %58 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %58 to i64
  %59 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  %arrayidx78 = getelementptr inbounds i32*, i32** %59, i64 %idxprom77
  %60 = load i32*, i32** %arrayidx78, align 8
  %arrayidx79 = getelementptr inbounds i32, i32* %60, i64 %idxprom76
  %61 = load i32, i32* %arrayidx79, align 4
  store i32 %61, i32* %tmpint, align 4
  %62 = load i32, i32* %tmpint, align 4
  %63 = load i32, i32* %minscore, align 4
  %cmp80 = icmp slt i32 %62, %63
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %for.body.75
  %64 = load i32, i32* %tmpint, align 4
  store i32 %64, i32* %minscore, align 4
  %65 = load i32, i32* %i, align 4
  store i32 %65, i32* %im, align 4
  %66 = load i32, i32* %j, align 4
  store i32 %66, i32* %jm, align 4
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.82, %for.body.75
  br label %for.inc.84

for.inc.84:                                       ; preds = %if.end.83
  %67 = load i32, i32* %j, align 4
  %idxprom85 = sext i32 %67 to i64
  %68 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx86 = getelementptr inbounds %struct._Achain, %struct._Achain* %68, i64 %idxprom85
  %next87 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx86, i32 0, i32 0
  %69 = load i32, i32* %next87, align 4
  store i32 %69, i32* %j, align 4
  br label %for.cond.72

for.end.88:                                       ; preds = %for.cond.72
  br label %for.inc.89

for.inc.89:                                       ; preds = %for.end.88
  %70 = load i32, i32* %i, align 4
  %idxprom90 = sext i32 %70 to i64
  %71 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx91 = getelementptr inbounds %struct._Achain, %struct._Achain* %71, i64 %idxprom90
  %next92 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx91, i32 0, i32 0
  %72 = load i32, i32* %next92, align 4
  store i32 %72, i32* %i, align 4
  br label %for.cond.62

for.end.93:                                       ; preds = %for.cond.62
  %73 = load i32, i32* %k, align 4
  %idxprom94 = sext i32 %73 to i64
  %74 = load i32***, i32**** %topol.addr, align 8
  %arrayidx95 = getelementptr inbounds i32**, i32*** %74, i64 %idxprom94
  %75 = load i32**, i32*** %arrayidx95, align 8
  %arrayidx96 = getelementptr inbounds i32*, i32** %75, i64 0
  %76 = load i32*, i32** %arrayidx96, align 8
  store i32* %76, i32** %intpt, align 8
  %77 = load i32, i32* %im, align 4
  %idxprom97 = sext i32 %77 to i64
  %78 = load i32*, i32** @veryfastsupg_int.hist, align 8
  %arrayidx98 = getelementptr inbounds i32, i32* %78, i64 %idxprom97
  %79 = load i32, i32* %arrayidx98, align 4
  store i32 %79, i32* %prevnode, align 4
  %80 = load i32, i32* %prevnode, align 4
  %cmp99 = icmp eq i32 %80, -1
  br i1 %cmp99, label %if.then.101, label %if.else

if.then.101:                                      ; preds = %for.end.93
  %81 = load i32, i32* %im, align 4
  %82 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %82, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %81, i32* %82, align 4
  %83 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %83, align 4
  br label %if.end.127

if.else:                                          ; preds = %for.end.93
  %84 = load i32, i32* %prevnode, align 4
  %idxprom102 = sext i32 %84 to i64
  %85 = load i32***, i32**** %topol.addr, align 8
  %arrayidx103 = getelementptr inbounds i32**, i32*** %85, i64 %idxprom102
  %86 = load i32**, i32*** %arrayidx103, align 8
  %arrayidx104 = getelementptr inbounds i32*, i32** %86, i64 0
  %87 = load i32*, i32** %arrayidx104, align 8
  store i32* %87, i32** %pt1, align 8
  %88 = load i32, i32* %prevnode, align 4
  %idxprom105 = sext i32 %88 to i64
  %89 = load i32***, i32**** %topol.addr, align 8
  %arrayidx106 = getelementptr inbounds i32**, i32*** %89, i64 %idxprom105
  %90 = load i32**, i32*** %arrayidx106, align 8
  %arrayidx107 = getelementptr inbounds i32*, i32** %90, i64 1
  %91 = load i32*, i32** %arrayidx107, align 8
  store i32* %91, i32** %pt2, align 8
  %92 = load i32*, i32** %pt1, align 8
  %93 = load i32, i32* %92, align 4
  %94 = load i32*, i32** %pt2, align 8
  %95 = load i32, i32* %94, align 4
  %cmp108 = icmp sgt i32 %93, %95
  br i1 %cmp108, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %if.else
  %96 = load i32*, i32** %pt2, align 8
  store i32* %96, i32** %pt11, align 8
  %97 = load i32*, i32** %pt1, align 8
  store i32* %97, i32** %pt22, align 8
  br label %if.end.112

if.else.111:                                      ; preds = %if.else
  %98 = load i32*, i32** %pt1, align 8
  store i32* %98, i32** %pt11, align 8
  %99 = load i32*, i32** %pt2, align 8
  store i32* %99, i32** %pt22, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.111, %if.then.110
  %100 = load i32*, i32** %pt11, align 8
  store i32* %100, i32** %intpt2, align 8
  br label %for.cond.113

for.cond.113:                                     ; preds = %for.body.116, %if.end.112
  %101 = load i32*, i32** %intpt2, align 8
  %102 = load i32, i32* %101, align 4
  %cmp114 = icmp ne i32 %102, -1
  br i1 %cmp114, label %for.body.116, label %for.end.119

for.body.116:                                     ; preds = %for.cond.113
  %103 = load i32*, i32** %intpt2, align 8
  %incdec.ptr117 = getelementptr inbounds i32, i32* %103, i32 1
  store i32* %incdec.ptr117, i32** %intpt2, align 8
  %104 = load i32, i32* %103, align 4
  %105 = load i32*, i32** %intpt, align 8
  %incdec.ptr118 = getelementptr inbounds i32, i32* %105, i32 1
  store i32* %incdec.ptr118, i32** %intpt, align 8
  store i32 %104, i32* %105, align 4
  br label %for.cond.113

for.end.119:                                      ; preds = %for.cond.113
  %106 = load i32*, i32** %pt22, align 8
  store i32* %106, i32** %intpt2, align 8
  br label %for.cond.120

for.cond.120:                                     ; preds = %for.body.123, %for.end.119
  %107 = load i32*, i32** %intpt2, align 8
  %108 = load i32, i32* %107, align 4
  %cmp121 = icmp ne i32 %108, -1
  br i1 %cmp121, label %for.body.123, label %for.end.126

for.body.123:                                     ; preds = %for.cond.120
  %109 = load i32*, i32** %intpt2, align 8
  %incdec.ptr124 = getelementptr inbounds i32, i32* %109, i32 1
  store i32* %incdec.ptr124, i32** %intpt2, align 8
  %110 = load i32, i32* %109, align 4
  %111 = load i32*, i32** %intpt, align 8
  %incdec.ptr125 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %incdec.ptr125, i32** %intpt, align 8
  store i32 %110, i32* %111, align 4
  br label %for.cond.120

for.end.126:                                      ; preds = %for.cond.120
  %112 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %112, align 4
  br label %if.end.127

if.end.127:                                       ; preds = %for.end.126, %if.then.101
  %113 = load i32, i32* %k, align 4
  %idxprom128 = sext i32 %113 to i64
  %114 = load i32***, i32**** %topol.addr, align 8
  %arrayidx129 = getelementptr inbounds i32**, i32*** %114, i64 %idxprom128
  %115 = load i32**, i32*** %arrayidx129, align 8
  %arrayidx130 = getelementptr inbounds i32*, i32** %115, i64 1
  %116 = load i32*, i32** %arrayidx130, align 8
  store i32* %116, i32** %intpt, align 8
  %117 = load i32, i32* %jm, align 4
  %idxprom131 = sext i32 %117 to i64
  %118 = load i32*, i32** @veryfastsupg_int.hist, align 8
  %arrayidx132 = getelementptr inbounds i32, i32* %118, i64 %idxprom131
  %119 = load i32, i32* %arrayidx132, align 4
  store i32 %119, i32* %prevnode, align 4
  %120 = load i32, i32* %prevnode, align 4
  %cmp133 = icmp eq i32 %120, -1
  br i1 %cmp133, label %if.then.135, label %if.else.137

if.then.135:                                      ; preds = %if.end.127
  %121 = load i32, i32* %jm, align 4
  %122 = load i32*, i32** %intpt, align 8
  %incdec.ptr136 = getelementptr inbounds i32, i32* %122, i32 1
  store i32* %incdec.ptr136, i32** %intpt, align 8
  store i32 %121, i32* %122, align 4
  %123 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %123, align 4
  br label %if.end.163

if.else.137:                                      ; preds = %if.end.127
  %124 = load i32, i32* %prevnode, align 4
  %idxprom138 = sext i32 %124 to i64
  %125 = load i32***, i32**** %topol.addr, align 8
  %arrayidx139 = getelementptr inbounds i32**, i32*** %125, i64 %idxprom138
  %126 = load i32**, i32*** %arrayidx139, align 8
  %arrayidx140 = getelementptr inbounds i32*, i32** %126, i64 0
  %127 = load i32*, i32** %arrayidx140, align 8
  store i32* %127, i32** %pt1, align 8
  %128 = load i32, i32* %prevnode, align 4
  %idxprom141 = sext i32 %128 to i64
  %129 = load i32***, i32**** %topol.addr, align 8
  %arrayidx142 = getelementptr inbounds i32**, i32*** %129, i64 %idxprom141
  %130 = load i32**, i32*** %arrayidx142, align 8
  %arrayidx143 = getelementptr inbounds i32*, i32** %130, i64 1
  %131 = load i32*, i32** %arrayidx143, align 8
  store i32* %131, i32** %pt2, align 8
  %132 = load i32*, i32** %pt1, align 8
  %133 = load i32, i32* %132, align 4
  %134 = load i32*, i32** %pt2, align 8
  %135 = load i32, i32* %134, align 4
  %cmp144 = icmp sgt i32 %133, %135
  br i1 %cmp144, label %if.then.146, label %if.else.147

if.then.146:                                      ; preds = %if.else.137
  %136 = load i32*, i32** %pt2, align 8
  store i32* %136, i32** %pt11, align 8
  %137 = load i32*, i32** %pt1, align 8
  store i32* %137, i32** %pt22, align 8
  br label %if.end.148

if.else.147:                                      ; preds = %if.else.137
  %138 = load i32*, i32** %pt1, align 8
  store i32* %138, i32** %pt11, align 8
  %139 = load i32*, i32** %pt2, align 8
  store i32* %139, i32** %pt22, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.else.147, %if.then.146
  %140 = load i32*, i32** %pt11, align 8
  store i32* %140, i32** %intpt2, align 8
  br label %for.cond.149

for.cond.149:                                     ; preds = %for.body.152, %if.end.148
  %141 = load i32*, i32** %intpt2, align 8
  %142 = load i32, i32* %141, align 4
  %cmp150 = icmp ne i32 %142, -1
  br i1 %cmp150, label %for.body.152, label %for.end.155

for.body.152:                                     ; preds = %for.cond.149
  %143 = load i32*, i32** %intpt2, align 8
  %incdec.ptr153 = getelementptr inbounds i32, i32* %143, i32 1
  store i32* %incdec.ptr153, i32** %intpt2, align 8
  %144 = load i32, i32* %143, align 4
  %145 = load i32*, i32** %intpt, align 8
  %incdec.ptr154 = getelementptr inbounds i32, i32* %145, i32 1
  store i32* %incdec.ptr154, i32** %intpt, align 8
  store i32 %144, i32* %145, align 4
  br label %for.cond.149

for.end.155:                                      ; preds = %for.cond.149
  %146 = load i32*, i32** %pt22, align 8
  store i32* %146, i32** %intpt2, align 8
  br label %for.cond.156

for.cond.156:                                     ; preds = %for.body.159, %for.end.155
  %147 = load i32*, i32** %intpt2, align 8
  %148 = load i32, i32* %147, align 4
  %cmp157 = icmp ne i32 %148, -1
  br i1 %cmp157, label %for.body.159, label %for.end.162

for.body.159:                                     ; preds = %for.cond.156
  %149 = load i32*, i32** %intpt2, align 8
  %incdec.ptr160 = getelementptr inbounds i32, i32* %149, i32 1
  store i32* %incdec.ptr160, i32** %intpt2, align 8
  %150 = load i32, i32* %149, align 4
  %151 = load i32*, i32** %intpt, align 8
  %incdec.ptr161 = getelementptr inbounds i32, i32* %151, i32 1
  store i32* %incdec.ptr161, i32** %intpt, align 8
  store i32 %150, i32* %151, align 4
  br label %for.cond.156

for.end.162:                                      ; preds = %for.cond.156
  %152 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %152, align 4
  br label %if.end.163

if.end.163:                                       ; preds = %for.end.162, %if.then.135
  %153 = load i32, i32* %minscore, align 4
  %conv164 = sitofp i32 %153 to double
  %mul165 = fmul double %conv164, 5.000000e-01
  %conv166 = fptosi double %mul165 to i32
  store i32 %conv166, i32* %minscore, align 4
  %154 = load i32, i32* %minscore, align 4
  %155 = load i32, i32* %im, align 4
  %idxprom167 = sext i32 %155 to i64
  %156 = load i32*, i32** @veryfastsupg_int.tmptmplen, align 8
  %arrayidx168 = getelementptr inbounds i32, i32* %156, i64 %idxprom167
  %157 = load i32, i32* %arrayidx168, align 4
  %sub169 = sub nsw i32 %154, %157
  %conv170 = sitofp i32 %sub169 to double
  %158 = load i32, i32* %k, align 4
  %idxprom171 = sext i32 %158 to i64
  %159 = load double**, double*** %len.addr, align 8
  %arrayidx172 = getelementptr inbounds double*, double** %159, i64 %idxprom171
  %160 = load double*, double** %arrayidx172, align 8
  %arrayidx173 = getelementptr inbounds double, double* %160, i64 0
  store double %conv170, double* %arrayidx173, align 8
  %161 = load i32, i32* %minscore, align 4
  %162 = load i32, i32* %jm, align 4
  %idxprom174 = sext i32 %162 to i64
  %163 = load i32*, i32** @veryfastsupg_int.tmptmplen, align 8
  %arrayidx175 = getelementptr inbounds i32, i32* %163, i64 %idxprom174
  %164 = load i32, i32* %arrayidx175, align 4
  %sub176 = sub nsw i32 %161, %164
  %conv177 = sitofp i32 %sub176 to double
  %165 = load i32, i32* %k, align 4
  %idxprom178 = sext i32 %165 to i64
  %166 = load double**, double*** %len.addr, align 8
  %arrayidx179 = getelementptr inbounds double*, double** %166, i64 %idxprom178
  %167 = load double*, double** %arrayidx179, align 8
  %arrayidx180 = getelementptr inbounds double, double* %167, i64 1
  store double %conv177, double* %arrayidx180, align 8
  %168 = load i32, i32* %minscore, align 4
  %169 = load i32, i32* %im, align 4
  %idxprom181 = sext i32 %169 to i64
  %170 = load i32*, i32** @veryfastsupg_int.tmptmplen, align 8
  %arrayidx182 = getelementptr inbounds i32, i32* %170, i64 %idxprom181
  store i32 %168, i32* %arrayidx182, align 4
  %171 = load i32, i32* %k, align 4
  %172 = load i32, i32* %im, align 4
  %idxprom183 = sext i32 %172 to i64
  %173 = load i32*, i32** @veryfastsupg_int.hist, align 8
  %arrayidx184 = getelementptr inbounds i32, i32* %173, i64 %idxprom183
  store i32 %171, i32* %arrayidx184, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.185

for.cond.185:                                     ; preds = %for.inc.229, %if.end.163
  %174 = load i32, i32* %i, align 4
  %cmp186 = icmp ne i32 %174, -1
  br i1 %cmp186, label %for.body.188, label %for.end.233

for.body.188:                                     ; preds = %for.cond.185
  %175 = load i32, i32* %i, align 4
  %176 = load i32, i32* %im, align 4
  %cmp189 = icmp ne i32 %175, %176
  br i1 %cmp189, label %land.lhs.true, label %if.end.228

land.lhs.true:                                    ; preds = %for.body.188
  %177 = load i32, i32* %i, align 4
  %178 = load i32, i32* %jm, align 4
  %cmp191 = icmp ne i32 %177, %178
  br i1 %cmp191, label %if.then.193, label %if.end.228

if.then.193:                                      ; preds = %land.lhs.true
  %179 = load i32, i32* %i, align 4
  %180 = load i32, i32* %im, align 4
  %cmp194 = icmp slt i32 %179, %180
  br i1 %cmp194, label %if.then.196, label %if.else.197

if.then.196:                                      ; preds = %if.then.193
  %181 = load i32, i32* %i, align 4
  store i32 %181, i32* %miniim, align 4
  %182 = load i32, i32* %im, align 4
  store i32 %182, i32* %maxiim, align 4
  %183 = load i32, i32* %i, align 4
  store i32 %183, i32* %minijm, align 4
  %184 = load i32, i32* %jm, align 4
  store i32 %184, i32* %maxijm, align 4
  br label %if.end.203

if.else.197:                                      ; preds = %if.then.193
  %185 = load i32, i32* %i, align 4
  %186 = load i32, i32* %jm, align 4
  %cmp198 = icmp slt i32 %185, %186
  br i1 %cmp198, label %if.then.200, label %if.else.201

if.then.200:                                      ; preds = %if.else.197
  %187 = load i32, i32* %im, align 4
  store i32 %187, i32* %miniim, align 4
  %188 = load i32, i32* %i, align 4
  store i32 %188, i32* %maxiim, align 4
  %189 = load i32, i32* %i, align 4
  store i32 %189, i32* %minijm, align 4
  %190 = load i32, i32* %jm, align 4
  store i32 %190, i32* %maxijm, align 4
  br label %if.end.202

if.else.201:                                      ; preds = %if.else.197
  %191 = load i32, i32* %im, align 4
  store i32 %191, i32* %miniim, align 4
  %192 = load i32, i32* %i, align 4
  store i32 %192, i32* %maxiim, align 4
  %193 = load i32, i32* %jm, align 4
  store i32 %193, i32* %minijm, align 4
  %194 = load i32, i32* %i, align 4
  store i32 %194, i32* %maxijm, align 4
  br label %if.end.202

if.end.202:                                       ; preds = %if.else.201, %if.then.200
  br label %if.end.203

if.end.203:                                       ; preds = %if.end.202, %if.then.196
  %195 = load i32, i32* %maxiim, align 4
  %idxprom204 = sext i32 %195 to i64
  %196 = load i32, i32* %miniim, align 4
  %idxprom205 = sext i32 %196 to i64
  %197 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  %arrayidx206 = getelementptr inbounds i32*, i32** %197, i64 %idxprom205
  %198 = load i32*, i32** %arrayidx206, align 8
  %arrayidx207 = getelementptr inbounds i32, i32* %198, i64 %idxprom204
  %199 = load i32, i32* %arrayidx207, align 4
  store i32 %199, i32* %eff0, align 4
  %200 = load i32, i32* %maxijm, align 4
  %idxprom208 = sext i32 %200 to i64
  %201 = load i32, i32* %minijm, align 4
  %idxprom209 = sext i32 %201 to i64
  %202 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  %arrayidx210 = getelementptr inbounds i32*, i32** %202, i64 %idxprom209
  %203 = load i32*, i32** %arrayidx210, align 8
  %arrayidx211 = getelementptr inbounds i32, i32* %203, i64 %idxprom208
  %204 = load i32, i32* %arrayidx211, align 4
  store i32 %204, i32* %eff1, align 4
  %205 = load i32, i32* %eff0, align 4
  %206 = load i32, i32* %eff1, align 4
  %cmp212 = icmp slt i32 %205, %206
  br i1 %cmp212, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.203
  %207 = load i32, i32* %eff0, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.203
  %208 = load i32, i32* %eff1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %207, %cond.true ], [ %208, %cond.false ]
  %conv214 = sitofp i32 %cond to float
  %conv215 = fpext float %conv214 to double
  %mul216 = fmul double %conv215, 9.000000e-01
  %209 = load i32, i32* %eff0, align 4
  %210 = load i32, i32* %eff1, align 4
  %add217 = add nsw i32 %209, %210
  %conv218 = sitofp i32 %add217 to float
  %conv219 = fpext float %conv218 to double
  %mul220 = fmul double %conv219, 5.000000e-01
  %mul221 = fmul double %mul220, 1.000000e-01
  %add222 = fadd double %mul216, %mul221
  %conv223 = fptosi double %add222 to i32
  %211 = load i32, i32* %maxiim, align 4
  %idxprom224 = sext i32 %211 to i64
  %212 = load i32, i32* %miniim, align 4
  %idxprom225 = sext i32 %212 to i64
  %213 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  %arrayidx226 = getelementptr inbounds i32*, i32** %213, i64 %idxprom225
  %214 = load i32*, i32** %arrayidx226, align 8
  %arrayidx227 = getelementptr inbounds i32, i32* %214, i64 %idxprom224
  store i32 %conv223, i32* %arrayidx227, align 4
  br label %if.end.228

if.end.228:                                       ; preds = %cond.end, %land.lhs.true, %for.body.188
  br label %for.inc.229

for.inc.229:                                      ; preds = %if.end.228
  %215 = load i32, i32* %i, align 4
  %idxprom230 = sext i32 %215 to i64
  %216 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx231 = getelementptr inbounds %struct._Achain, %struct._Achain* %216, i64 %idxprom230
  %next232 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx231, i32 0, i32 0
  %217 = load i32, i32* %next232, align 4
  store i32 %217, i32* %i, align 4
  br label %for.cond.185

for.end.233:                                      ; preds = %for.cond.185
  %218 = load i32, i32* %jm, align 4
  %idxprom234 = sext i32 %218 to i64
  %219 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx235 = getelementptr inbounds %struct._Achain, %struct._Achain* %219, i64 %idxprom234
  %prev236 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx235, i32 0, i32 1
  %220 = load i32, i32* %prev236, align 4
  store i32 %220, i32* %acjmprev, align 4
  %221 = load i32, i32* %jm, align 4
  %idxprom237 = sext i32 %221 to i64
  %222 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx238 = getelementptr inbounds %struct._Achain, %struct._Achain* %222, i64 %idxprom237
  %next239 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx238, i32 0, i32 0
  %223 = load i32, i32* %next239, align 4
  store i32 %223, i32* %acjmnext, align 4
  %224 = load i32, i32* %acjmnext, align 4
  %225 = load i32, i32* %acjmprev, align 4
  %idxprom240 = sext i32 %225 to i64
  %226 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx241 = getelementptr inbounds %struct._Achain, %struct._Achain* %226, i64 %idxprom240
  %next242 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx241, i32 0, i32 0
  store i32 %224, i32* %next242, align 4
  %227 = load i32, i32* %acjmnext, align 4
  %cmp243 = icmp ne i32 %227, -1
  br i1 %cmp243, label %if.then.245, label %if.end.249

if.then.245:                                      ; preds = %for.end.233
  %228 = load i32, i32* %acjmprev, align 4
  %229 = load i32, i32* %acjmnext, align 4
  %idxprom246 = sext i32 %229 to i64
  %230 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %arrayidx247 = getelementptr inbounds %struct._Achain, %struct._Achain* %230, i64 %idxprom246
  %prev248 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx247, i32 0, i32 1
  store i32 %228, i32* %prev248, align 4
  br label %if.end.249

if.end.249:                                       ; preds = %if.then.245, %for.end.233
  br label %for.inc.250

for.inc.250:                                      ; preds = %if.end.249
  %231 = load i32, i32* %k, align 4
  %inc251 = add nsw i32 %231, 1
  store i32 %inc251, i32* %k, align 4
  br label %for.cond.52

for.end.252:                                      ; preds = %for.cond.52
  %232 = load i32**, i32*** @veryfastsupg_int.eff, align 8
  call void @FreeIntMtx(i32** %232)
  store i32** null, i32*** @veryfastsupg_int.eff, align 8
  %233 = load i32*, i32** @veryfastsupg_int.tmptmplen, align 8
  %234 = bitcast i32* %233 to i8*
  call void @free(i8* %234) #8
  store i32* null, i32** @veryfastsupg_int.tmptmplen, align 8
  %235 = load i32*, i32** @veryfastsupg_int.hist, align 8
  %236 = bitcast i32* %235 to i8*
  call void @free(i8* %236) #8
  store i32* null, i32** @veryfastsupg_int.hist, align 8
  %237 = load %struct._Achain*, %struct._Achain** @veryfastsupg_int.ac, align 8
  %238 = bitcast %struct._Achain* %237 to i8*
  call void @free(i8* %238) #8
  store %struct._Achain* null, %struct._Achain** @veryfastsupg_int.ac, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @fastsupg(i32 %nseq, double** %oeff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %oeff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %tmpfloat = alloca float, align 4
  %eff1 = alloca float, align 4
  %eff0 = alloca float, align 4
  %minscore = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %oeff, double*** %oeff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  %0 = load float**, float*** @fastsupg.eff, align 8
  %tobool = icmp ne float** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @njob, align 4
  %2 = load i32, i32* @njob, align 4
  %call = call float** @AllocateFloatMtx(i32 %1, i32 %2)
  store float** %call, float*** @fastsupg.eff, align 8
  %3 = load i32, i32* @njob, align 4
  %4 = load i32, i32* @njob, align 4
  %call1 = call i8** @AllocateCharMtx(i32 %3, i32 %4)
  store i8** %call1, i8*** @fastsupg.pair, align 8
  %5 = load i32, i32* @njob, align 4
  %call2 = call float* @AllocateFloatVec(i32 %5)
  store float* %call2, float** @fastsupg.tmplen, align 8
  %6 = load i32, i32* @njob, align 4
  %conv = sext i32 %6 to i64
  %call3 = call noalias i8* @calloc(i64 %conv, i64 8) #8
  %7 = bitcast i8* %call3 to %struct._Achain*
  store %struct._Achain* %7, %struct._Achain** @fastsupg.ac, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.16, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %8, %9
  br i1 %cmp, label %for.body, label %for.end.18

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %nseq.addr, align 4
  %cmp6 = icmp slt i32 %10, %11
  br i1 %cmp6, label %for.body.8, label %for.end

for.body.8:                                       ; preds = %for.cond.5
  %12 = load i32, i32* %j, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %13 to i64
  %14 = load double**, double*** %oeff.addr, align 8
  %arrayidx = getelementptr inbounds double*, double** %14, i64 %idxprom9
  %15 = load double*, double** %arrayidx, align 8
  %arrayidx10 = getelementptr inbounds double, double* %15, i64 %idxprom
  %16 = load double, double* %arrayidx10, align 8
  %conv11 = fptrunc double %16 to float
  %17 = load i32, i32* %j, align 4
  %idxprom12 = sext i32 %17 to i64
  %18 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load float**, float*** @fastsupg.eff, align 8
  %arrayidx14 = getelementptr inbounds float*, float** %19, i64 %idxprom13
  %20 = load float*, float** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds float, float* %20, i64 %idxprom12
  store float %conv11, float* %arrayidx15, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.8
  %21 = load i32, i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.5

for.end:                                          ; preds = %for.cond.5
  br label %for.inc.16

for.inc.16:                                       ; preds = %for.end
  %22 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %22, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond

for.end.18:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.27, %for.end.18
  %23 = load i32, i32* %i, align 4
  %24 = load i32, i32* %nseq.addr, align 4
  %cmp20 = icmp slt i32 %23, %24
  br i1 %cmp20, label %for.body.22, label %for.end.29

for.body.22:                                      ; preds = %for.cond.19
  %25 = load i32, i32* %i, align 4
  %add = add nsw i32 %25, 1
  %26 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %26 to i64
  %27 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx24 = getelementptr inbounds %struct._Achain, %struct._Achain* %27, i64 %idxprom23
  %next = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx24, i32 0, i32 0
  store i32 %add, i32* %next, align 4
  %28 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %28, 1
  %29 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %29 to i64
  %30 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx26 = getelementptr inbounds %struct._Achain, %struct._Achain* %30, i64 %idxprom25
  %prev = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx26, i32 0, i32 1
  store i32 %sub, i32* %prev, align 4
  br label %for.inc.27

for.inc.27:                                       ; preds = %for.body.22
  %31 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %31, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond.19

for.end.29:                                       ; preds = %for.cond.19
  %32 = load i32, i32* %nseq.addr, align 4
  %sub30 = sub nsw i32 %32, 1
  %idxprom31 = sext i32 %sub30 to i64
  %33 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx32 = getelementptr inbounds %struct._Achain, %struct._Achain* %33, i64 %idxprom31
  %next33 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx32, i32 0, i32 0
  store i32 -1, i32* %next33, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.34

for.cond.34:                                      ; preds = %for.inc.40, %for.end.29
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %nseq.addr, align 4
  %cmp35 = icmp slt i32 %34, %35
  br i1 %cmp35, label %for.body.37, label %for.end.42

for.body.37:                                      ; preds = %for.cond.34
  %36 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %36 to i64
  %37 = load float*, float** @fastsupg.tmplen, align 8
  %arrayidx39 = getelementptr inbounds float, float* %37, i64 %idxprom38
  store float 0.000000e+00, float* %arrayidx39, align 4
  br label %for.inc.40

for.inc.40:                                       ; preds = %for.body.37
  %38 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %38, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond.34

for.end.42:                                       ; preds = %for.cond.34
  store i32 0, i32* %i, align 4
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc.58, %for.end.42
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* %nseq.addr, align 4
  %cmp44 = icmp slt i32 %39, %40
  br i1 %cmp44, label %for.body.46, label %for.end.60

for.body.46:                                      ; preds = %for.cond.43
  store i32 0, i32* %j, align 4
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.55, %for.body.46
  %41 = load i32, i32* %j, align 4
  %42 = load i32, i32* %nseq.addr, align 4
  %cmp48 = icmp slt i32 %41, %42
  br i1 %cmp48, label %for.body.50, label %for.end.57

for.body.50:                                      ; preds = %for.cond.47
  %43 = load i32, i32* %j, align 4
  %idxprom51 = sext i32 %43 to i64
  %44 = load i32, i32* %i, align 4
  %idxprom52 = sext i32 %44 to i64
  %45 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx53 = getelementptr inbounds i8*, i8** %45, i64 %idxprom52
  %46 = load i8*, i8** %arrayidx53, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %46, i64 %idxprom51
  store i8 0, i8* %arrayidx54, align 1
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.body.50
  %47 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %47, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond.47

for.end.57:                                       ; preds = %for.cond.47
  br label %for.inc.58

for.inc.58:                                       ; preds = %for.end.57
  %48 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %48, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond.43

for.end.60:                                       ; preds = %for.cond.43
  store i32 0, i32* %i, align 4
  br label %for.cond.61

for.cond.61:                                      ; preds = %for.inc.69, %for.end.60
  %49 = load i32, i32* %i, align 4
  %50 = load i32, i32* %nseq.addr, align 4
  %cmp62 = icmp slt i32 %49, %50
  br i1 %cmp62, label %for.body.64, label %for.end.71

for.body.64:                                      ; preds = %for.cond.61
  %51 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %51 to i64
  %52 = load i32, i32* %i, align 4
  %idxprom66 = sext i32 %52 to i64
  %53 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx67 = getelementptr inbounds i8*, i8** %53, i64 %idxprom66
  %54 = load i8*, i8** %arrayidx67, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %54, i64 %idxprom65
  store i8 1, i8* %arrayidx68, align 1
  br label %for.inc.69

for.inc.69:                                       ; preds = %for.body.64
  %55 = load i32, i32* %i, align 4
  %inc70 = add nsw i32 %55, 1
  store i32 %inc70, i32* %i, align 4
  br label %for.cond.61

for.end.71:                                       ; preds = %for.cond.61
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %k, align 4
  br label %for.cond.73

for.cond.73:                                      ; preds = %for.inc.271, %for.end.71
  %57 = load i32, i32* %k, align 4
  %58 = load i32, i32* %nseq.addr, align 4
  %sub74 = sub nsw i32 %58, 1
  %cmp75 = icmp slt i32 %57, %sub74
  br i1 %cmp75, label %for.body.77, label %for.end.273

for.body.77:                                      ; preds = %for.cond.73
  %59 = load i32, i32* %k, align 4
  %rem = srem i32 %59, 10
  %cmp78 = icmp eq i32 %rem, 0
  br i1 %cmp78, label %if.then.80, label %if.end.82

if.then.80:                                       ; preds = %for.body.77
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %61 = load i32, i32* %k, align 4
  %62 = load i32, i32* %nseq.addr, align 4
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0), i32 %61, i32 %62)
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.80, %for.body.77
  store float 9.999000e+03, float* %minscore, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.83

for.cond.83:                                      ; preds = %for.inc.110, %if.end.82
  %63 = load i32, i32* %i, align 4
  %idxprom84 = sext i32 %63 to i64
  %64 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx85 = getelementptr inbounds %struct._Achain, %struct._Achain* %64, i64 %idxprom84
  %next86 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx85, i32 0, i32 0
  %65 = load i32, i32* %next86, align 4
  %cmp87 = icmp ne i32 %65, -1
  br i1 %cmp87, label %for.body.89, label %for.end.114

for.body.89:                                      ; preds = %for.cond.83
  %66 = load i32, i32* %i, align 4
  %idxprom90 = sext i32 %66 to i64
  %67 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx91 = getelementptr inbounds %struct._Achain, %struct._Achain* %67, i64 %idxprom90
  %next92 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx91, i32 0, i32 0
  %68 = load i32, i32* %next92, align 4
  store i32 %68, i32* %j, align 4
  br label %for.cond.93

for.cond.93:                                      ; preds = %for.inc.105, %for.body.89
  %69 = load i32, i32* %j, align 4
  %cmp94 = icmp ne i32 %69, -1
  br i1 %cmp94, label %for.body.96, label %for.end.109

for.body.96:                                      ; preds = %for.cond.93
  %70 = load i32, i32* %j, align 4
  %idxprom97 = sext i32 %70 to i64
  %71 = load i32, i32* %i, align 4
  %idxprom98 = sext i32 %71 to i64
  %72 = load float**, float*** @fastsupg.eff, align 8
  %arrayidx99 = getelementptr inbounds float*, float** %72, i64 %idxprom98
  %73 = load float*, float** %arrayidx99, align 8
  %arrayidx100 = getelementptr inbounds float, float* %73, i64 %idxprom97
  %74 = load float, float* %arrayidx100, align 4
  store float %74, float* %tmpfloat, align 4
  %75 = load float, float* %tmpfloat, align 4
  %76 = load float, float* %minscore, align 4
  %cmp101 = fcmp olt float %75, %76
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %for.body.96
  %77 = load float, float* %tmpfloat, align 4
  store float %77, float* %minscore, align 4
  %78 = load i32, i32* %i, align 4
  store i32 %78, i32* %im, align 4
  %79 = load i32, i32* %j, align 4
  store i32 %79, i32* %jm, align 4
  br label %if.end.104

if.end.104:                                       ; preds = %if.then.103, %for.body.96
  br label %for.inc.105

for.inc.105:                                      ; preds = %if.end.104
  %80 = load i32, i32* %j, align 4
  %idxprom106 = sext i32 %80 to i64
  %81 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx107 = getelementptr inbounds %struct._Achain, %struct._Achain* %81, i64 %idxprom106
  %next108 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx107, i32 0, i32 0
  %82 = load i32, i32* %next108, align 4
  store i32 %82, i32* %j, align 4
  br label %for.cond.93

for.end.109:                                      ; preds = %for.cond.93
  br label %for.inc.110

for.inc.110:                                      ; preds = %for.end.109
  %83 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %83 to i64
  %84 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx112 = getelementptr inbounds %struct._Achain, %struct._Achain* %84, i64 %idxprom111
  %next113 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx112, i32 0, i32 0
  %85 = load i32, i32* %next113, align 4
  store i32 %85, i32* %i, align 4
  br label %for.cond.83

for.end.114:                                      ; preds = %for.cond.83
  %86 = load i32, i32* %k, align 4
  %idxprom115 = sext i32 %86 to i64
  %87 = load i32***, i32**** %topol.addr, align 8
  %arrayidx116 = getelementptr inbounds i32**, i32*** %87, i64 %idxprom115
  %88 = load i32**, i32*** %arrayidx116, align 8
  %arrayidx117 = getelementptr inbounds i32*, i32** %88, i64 0
  %89 = load i32*, i32** %arrayidx117, align 8
  store i32* %89, i32** %intpt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.118

for.cond.118:                                     ; preds = %for.inc.131, %for.end.114
  %90 = load i32, i32* %i, align 4
  %91 = load i32, i32* %nseq.addr, align 4
  %cmp119 = icmp slt i32 %90, %91
  br i1 %cmp119, label %for.body.121, label %for.end.133

for.body.121:                                     ; preds = %for.cond.118
  %92 = load i32, i32* %i, align 4
  %idxprom122 = sext i32 %92 to i64
  %93 = load i32, i32* %im, align 4
  %idxprom123 = sext i32 %93 to i64
  %94 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx124 = getelementptr inbounds i8*, i8** %94, i64 %idxprom123
  %95 = load i8*, i8** %arrayidx124, align 8
  %arrayidx125 = getelementptr inbounds i8, i8* %95, i64 %idxprom122
  %96 = load i8, i8* %arrayidx125, align 1
  %conv126 = sext i8 %96 to i32
  %cmp127 = icmp sgt i32 %conv126, 0
  br i1 %cmp127, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %for.body.121
  %97 = load i32, i32* %i, align 4
  %98 = load i32*, i32** %intpt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %98, i32 1
  store i32* %incdec.ptr, i32** %intpt, align 8
  store i32 %97, i32* %98, align 4
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.129, %for.body.121
  br label %for.inc.131

for.inc.131:                                      ; preds = %if.end.130
  %99 = load i32, i32* %i, align 4
  %inc132 = add nsw i32 %99, 1
  store i32 %inc132, i32* %i, align 4
  br label %for.cond.118

for.end.133:                                      ; preds = %for.cond.118
  %100 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %100, align 4
  %101 = load i32, i32* %k, align 4
  %idxprom134 = sext i32 %101 to i64
  %102 = load i32***, i32**** %topol.addr, align 8
  %arrayidx135 = getelementptr inbounds i32**, i32*** %102, i64 %idxprom134
  %103 = load i32**, i32*** %arrayidx135, align 8
  %arrayidx136 = getelementptr inbounds i32*, i32** %103, i64 1
  %104 = load i32*, i32** %arrayidx136, align 8
  store i32* %104, i32** %intpt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.137

for.cond.137:                                     ; preds = %for.inc.151, %for.end.133
  %105 = load i32, i32* %i, align 4
  %106 = load i32, i32* %nseq.addr, align 4
  %cmp138 = icmp slt i32 %105, %106
  br i1 %cmp138, label %for.body.140, label %for.end.153

for.body.140:                                     ; preds = %for.cond.137
  %107 = load i32, i32* %i, align 4
  %idxprom141 = sext i32 %107 to i64
  %108 = load i32, i32* %jm, align 4
  %idxprom142 = sext i32 %108 to i64
  %109 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx143 = getelementptr inbounds i8*, i8** %109, i64 %idxprom142
  %110 = load i8*, i8** %arrayidx143, align 8
  %arrayidx144 = getelementptr inbounds i8, i8* %110, i64 %idxprom141
  %111 = load i8, i8* %arrayidx144, align 1
  %conv145 = sext i8 %111 to i32
  %cmp146 = icmp sgt i32 %conv145, 0
  br i1 %cmp146, label %if.then.148, label %if.end.150

if.then.148:                                      ; preds = %for.body.140
  %112 = load i32, i32* %i, align 4
  %113 = load i32*, i32** %intpt, align 8
  %incdec.ptr149 = getelementptr inbounds i32, i32* %113, i32 1
  store i32* %incdec.ptr149, i32** %intpt, align 8
  store i32 %112, i32* %113, align 4
  br label %if.end.150

if.end.150:                                       ; preds = %if.then.148, %for.body.140
  br label %for.inc.151

for.inc.151:                                      ; preds = %if.end.150
  %114 = load i32, i32* %i, align 4
  %inc152 = add nsw i32 %114, 1
  store i32 %inc152, i32* %i, align 4
  br label %for.cond.137

for.end.153:                                      ; preds = %for.cond.137
  %115 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %115, align 4
  %116 = load float, float* %minscore, align 4
  %conv154 = fpext float %116 to double
  %div = fdiv double %conv154, 2.000000e+00
  %conv155 = fptrunc double %div to float
  store float %conv155, float* %minscore, align 4
  %117 = load float, float* %minscore, align 4
  %conv156 = fpext float %117 to double
  %118 = load i32, i32* %im, align 4
  %idxprom157 = sext i32 %118 to i64
  %119 = load float*, float** @fastsupg.tmplen, align 8
  %arrayidx158 = getelementptr inbounds float, float* %119, i64 %idxprom157
  %120 = load float, float* %arrayidx158, align 4
  %conv159 = fpext float %120 to double
  %sub160 = fsub double %conv156, %conv159
  %121 = load i32, i32* %k, align 4
  %idxprom161 = sext i32 %121 to i64
  %122 = load double**, double*** %len.addr, align 8
  %arrayidx162 = getelementptr inbounds double*, double** %122, i64 %idxprom161
  %123 = load double*, double** %arrayidx162, align 8
  %arrayidx163 = getelementptr inbounds double, double* %123, i64 0
  store double %sub160, double* %arrayidx163, align 8
  %124 = load float, float* %minscore, align 4
  %conv164 = fpext float %124 to double
  %125 = load i32, i32* %jm, align 4
  %idxprom165 = sext i32 %125 to i64
  %126 = load float*, float** @fastsupg.tmplen, align 8
  %arrayidx166 = getelementptr inbounds float, float* %126, i64 %idxprom165
  %127 = load float, float* %arrayidx166, align 4
  %conv167 = fpext float %127 to double
  %sub168 = fsub double %conv164, %conv167
  %128 = load i32, i32* %k, align 4
  %idxprom169 = sext i32 %128 to i64
  %129 = load double**, double*** %len.addr, align 8
  %arrayidx170 = getelementptr inbounds double*, double** %129, i64 %idxprom169
  %130 = load double*, double** %arrayidx170, align 8
  %arrayidx171 = getelementptr inbounds double, double* %130, i64 1
  store double %sub168, double* %arrayidx171, align 8
  %131 = load float, float* %minscore, align 4
  %conv172 = fpext float %131 to double
  %conv173 = fptrunc double %conv172 to float
  %132 = load i32, i32* %im, align 4
  %idxprom174 = sext i32 %132 to i64
  %133 = load float*, float** @fastsupg.tmplen, align 8
  %arrayidx175 = getelementptr inbounds float, float* %133, i64 %idxprom174
  store float %conv173, float* %arrayidx175, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.176

for.cond.176:                                     ; preds = %for.inc.194, %for.end.153
  %134 = load i32, i32* %i, align 4
  %135 = load i32, i32* %nseq.addr, align 4
  %cmp177 = icmp slt i32 %134, %135
  br i1 %cmp177, label %for.body.179, label %for.end.196

for.body.179:                                     ; preds = %for.cond.176
  %136 = load i32, i32* %i, align 4
  %idxprom180 = sext i32 %136 to i64
  %137 = load i32, i32* %jm, align 4
  %idxprom181 = sext i32 %137 to i64
  %138 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx182 = getelementptr inbounds i8*, i8** %138, i64 %idxprom181
  %139 = load i8*, i8** %arrayidx182, align 8
  %arrayidx183 = getelementptr inbounds i8, i8* %139, i64 %idxprom180
  %140 = load i8, i8* %arrayidx183, align 1
  %conv184 = sext i8 %140 to i32
  %cmp185 = icmp sgt i32 %conv184, 0
  %conv186 = zext i1 %cmp185 to i32
  %141 = load i32, i32* %i, align 4
  %idxprom187 = sext i32 %141 to i64
  %142 = load i32, i32* %im, align 4
  %idxprom188 = sext i32 %142 to i64
  %143 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx189 = getelementptr inbounds i8*, i8** %143, i64 %idxprom188
  %144 = load i8*, i8** %arrayidx189, align 8
  %arrayidx190 = getelementptr inbounds i8, i8* %144, i64 %idxprom187
  %145 = load i8, i8* %arrayidx190, align 1
  %conv191 = sext i8 %145 to i32
  %add192 = add nsw i32 %conv191, %conv186
  %conv193 = trunc i32 %add192 to i8
  store i8 %conv193, i8* %arrayidx190, align 1
  br label %for.inc.194

for.inc.194:                                      ; preds = %for.body.179
  %146 = load i32, i32* %i, align 4
  %inc195 = add nsw i32 %146, 1
  store i32 %inc195, i32* %i, align 4
  br label %for.cond.176

for.end.196:                                      ; preds = %for.cond.176
  store i32 0, i32* %i, align 4
  br label %for.cond.197

for.cond.197:                                     ; preds = %for.inc.205, %for.end.196
  %147 = load i32, i32* %i, align 4
  %148 = load i32, i32* %nseq.addr, align 4
  %cmp198 = icmp slt i32 %147, %148
  br i1 %cmp198, label %for.body.200, label %for.end.207

for.body.200:                                     ; preds = %for.cond.197
  %149 = load i32, i32* %i, align 4
  %idxprom201 = sext i32 %149 to i64
  %150 = load i32, i32* %jm, align 4
  %idxprom202 = sext i32 %150 to i64
  %151 = load i8**, i8*** @fastsupg.pair, align 8
  %arrayidx203 = getelementptr inbounds i8*, i8** %151, i64 %idxprom202
  %152 = load i8*, i8** %arrayidx203, align 8
  %arrayidx204 = getelementptr inbounds i8, i8* %152, i64 %idxprom201
  store i8 0, i8* %arrayidx204, align 1
  br label %for.inc.205

for.inc.205:                                      ; preds = %for.body.200
  %153 = load i32, i32* %i, align 4
  %inc206 = add nsw i32 %153, 1
  store i32 %inc206, i32* %i, align 4
  br label %for.cond.197

for.end.207:                                      ; preds = %for.cond.197
  store i32 0, i32* %i, align 4
  br label %for.cond.208

for.cond.208:                                     ; preds = %for.inc.248, %for.end.207
  %154 = load i32, i32* %i, align 4
  %cmp209 = icmp ne i32 %154, -1
  br i1 %cmp209, label %for.body.211, label %for.end.252

for.body.211:                                     ; preds = %for.cond.208
  %155 = load i32, i32* %i, align 4
  %156 = load i32, i32* %im, align 4
  %cmp212 = icmp ne i32 %155, %156
  br i1 %cmp212, label %land.lhs.true, label %if.end.247

land.lhs.true:                                    ; preds = %for.body.211
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %jm, align 4
  %cmp214 = icmp ne i32 %157, %158
  br i1 %cmp214, label %if.then.216, label %if.end.247

if.then.216:                                      ; preds = %land.lhs.true
  %159 = load i32, i32* %i, align 4
  %160 = load i32, i32* %im, align 4
  %cmp217 = icmp slt i32 %159, %160
  br i1 %cmp217, label %if.then.219, label %if.else

if.then.219:                                      ; preds = %if.then.216
  %161 = load i32, i32* %i, align 4
  store i32 %161, i32* %miniim, align 4
  %162 = load i32, i32* %im, align 4
  store i32 %162, i32* %maxiim, align 4
  %163 = load i32, i32* %i, align 4
  store i32 %163, i32* %minijm, align 4
  %164 = load i32, i32* %jm, align 4
  store i32 %164, i32* %maxijm, align 4
  br label %if.end.225

if.else:                                          ; preds = %if.then.216
  %165 = load i32, i32* %i, align 4
  %166 = load i32, i32* %jm, align 4
  %cmp220 = icmp slt i32 %165, %166
  br i1 %cmp220, label %if.then.222, label %if.else.223

if.then.222:                                      ; preds = %if.else
  %167 = load i32, i32* %im, align 4
  store i32 %167, i32* %miniim, align 4
  %168 = load i32, i32* %i, align 4
  store i32 %168, i32* %maxiim, align 4
  %169 = load i32, i32* %i, align 4
  store i32 %169, i32* %minijm, align 4
  %170 = load i32, i32* %jm, align 4
  store i32 %170, i32* %maxijm, align 4
  br label %if.end.224

if.else.223:                                      ; preds = %if.else
  %171 = load i32, i32* %im, align 4
  store i32 %171, i32* %miniim, align 4
  %172 = load i32, i32* %i, align 4
  store i32 %172, i32* %maxiim, align 4
  %173 = load i32, i32* %jm, align 4
  store i32 %173, i32* %minijm, align 4
  %174 = load i32, i32* %i, align 4
  store i32 %174, i32* %maxijm, align 4
  br label %if.end.224

if.end.224:                                       ; preds = %if.else.223, %if.then.222
  br label %if.end.225

if.end.225:                                       ; preds = %if.end.224, %if.then.219
  %175 = load i32, i32* %maxiim, align 4
  %idxprom226 = sext i32 %175 to i64
  %176 = load i32, i32* %miniim, align 4
  %idxprom227 = sext i32 %176 to i64
  %177 = load float**, float*** @fastsupg.eff, align 8
  %arrayidx228 = getelementptr inbounds float*, float** %177, i64 %idxprom227
  %178 = load float*, float** %arrayidx228, align 8
  %arrayidx229 = getelementptr inbounds float, float* %178, i64 %idxprom226
  %179 = load float, float* %arrayidx229, align 4
  store float %179, float* %eff0, align 4
  %180 = load i32, i32* %maxijm, align 4
  %idxprom230 = sext i32 %180 to i64
  %181 = load i32, i32* %minijm, align 4
  %idxprom231 = sext i32 %181 to i64
  %182 = load float**, float*** @fastsupg.eff, align 8
  %arrayidx232 = getelementptr inbounds float*, float** %182, i64 %idxprom231
  %183 = load float*, float** %arrayidx232, align 8
  %arrayidx233 = getelementptr inbounds float, float* %183, i64 %idxprom230
  %184 = load float, float* %arrayidx233, align 4
  store float %184, float* %eff1, align 4
  %185 = load float, float* %eff0, align 4
  %186 = load float, float* %eff1, align 4
  %cmp234 = fcmp olt float %185, %186
  br i1 %cmp234, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.225
  %187 = load float, float* %eff0, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.225
  %188 = load float, float* %eff1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %187, %cond.true ], [ %188, %cond.false ]
  %conv236 = fpext float %cond to double
  %mul = fmul double %conv236, 9.000000e-01
  %189 = load float, float* %eff0, align 4
  %190 = load float, float* %eff1, align 4
  %add237 = fadd float %189, %190
  %conv238 = fpext float %add237 to double
  %mul239 = fmul double %conv238, 5.000000e-01
  %mul240 = fmul double %mul239, 1.000000e-01
  %add241 = fadd double %mul, %mul240
  %conv242 = fptrunc double %add241 to float
  %191 = load i32, i32* %maxiim, align 4
  %idxprom243 = sext i32 %191 to i64
  %192 = load i32, i32* %miniim, align 4
  %idxprom244 = sext i32 %192 to i64
  %193 = load float**, float*** @fastsupg.eff, align 8
  %arrayidx245 = getelementptr inbounds float*, float** %193, i64 %idxprom244
  %194 = load float*, float** %arrayidx245, align 8
  %arrayidx246 = getelementptr inbounds float, float* %194, i64 %idxprom243
  store float %conv242, float* %arrayidx246, align 4
  br label %if.end.247

if.end.247:                                       ; preds = %cond.end, %land.lhs.true, %for.body.211
  br label %for.inc.248

for.inc.248:                                      ; preds = %if.end.247
  %195 = load i32, i32* %i, align 4
  %idxprom249 = sext i32 %195 to i64
  %196 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx250 = getelementptr inbounds %struct._Achain, %struct._Achain* %196, i64 %idxprom249
  %next251 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx250, i32 0, i32 0
  %197 = load i32, i32* %next251, align 4
  store i32 %197, i32* %i, align 4
  br label %for.cond.208

for.end.252:                                      ; preds = %for.cond.208
  %198 = load i32, i32* %jm, align 4
  %idxprom253 = sext i32 %198 to i64
  %199 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx254 = getelementptr inbounds %struct._Achain, %struct._Achain* %199, i64 %idxprom253
  %next255 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx254, i32 0, i32 0
  %200 = load i32, i32* %next255, align 4
  %201 = load i32, i32* %jm, align 4
  %idxprom256 = sext i32 %201 to i64
  %202 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx257 = getelementptr inbounds %struct._Achain, %struct._Achain* %202, i64 %idxprom256
  %prev258 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx257, i32 0, i32 1
  %203 = load i32, i32* %prev258, align 4
  %idxprom259 = sext i32 %203 to i64
  %204 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx260 = getelementptr inbounds %struct._Achain, %struct._Achain* %204, i64 %idxprom259
  %next261 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx260, i32 0, i32 0
  store i32 %200, i32* %next261, align 4
  %205 = load i32, i32* %jm, align 4
  %idxprom262 = sext i32 %205 to i64
  %206 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx263 = getelementptr inbounds %struct._Achain, %struct._Achain* %206, i64 %idxprom262
  %prev264 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx263, i32 0, i32 1
  %207 = load i32, i32* %prev264, align 4
  %208 = load i32, i32* %jm, align 4
  %idxprom265 = sext i32 %208 to i64
  %209 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx266 = getelementptr inbounds %struct._Achain, %struct._Achain* %209, i64 %idxprom265
  %next267 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx266, i32 0, i32 0
  %210 = load i32, i32* %next267, align 4
  %idxprom268 = sext i32 %210 to i64
  %211 = load %struct._Achain*, %struct._Achain** @fastsupg.ac, align 8
  %arrayidx269 = getelementptr inbounds %struct._Achain, %struct._Achain* %211, i64 %idxprom268
  %prev270 = getelementptr inbounds %struct._Achain, %struct._Achain* %arrayidx269, i32 0, i32 1
  store i32 %207, i32* %prev270, align 4
  br label %for.inc.271

for.inc.271:                                      ; preds = %for.end.252
  %212 = load i32, i32* %k, align 4
  %inc272 = add nsw i32 %212, 1
  store i32 %inc272, i32* %k, align 4
  br label %for.cond.73

for.end.273:                                      ; preds = %for.cond.73
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call274 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %213, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0))
  ret void
}

declare float** @AllocateFloatMtx(i32, i32) #2

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #4

; Function Attrs: nounwind uwtable
define void @supg(i32 %nseq, double** %oeff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %oeff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %miniim = alloca i32, align 4
  %maxiim = alloca i32, align 4
  %minijm = alloca i32, align 4
  %maxijm = alloca i32, align 4
  %intpt = alloca i32*, align 8
  %floatptpt = alloca float**, align 8
  %floatpt = alloca float*, align 8
  %tmpfloat = alloca float, align 4
  %eff1 = alloca float, align 4
  %eff0 = alloca float, align 4
  %minscore = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %oeff, double*** %oeff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  %0 = load float**, float*** @supg.eff, align 8
  %tobool = icmp ne float** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @njob, align 4
  %2 = load i32, i32* @njob, align 4
  %call = call float** @AllocateFloatMtx(i32 %1, i32 %2)
  store float** %call, float*** @supg.eff, align 8
  %3 = load i32, i32* @njob, align 4
  %4 = load i32, i32* @njob, align 4
  %call1 = call i8** @AllocateCharMtx(i32 %3, i32 %4)
  store i8** %call1, i8*** @supg.pair, align 8
  %5 = load i32, i32* @njob, align 4
  %call2 = call float* @AllocateFloatVec(i32 %5)
  store float* %call2, float** @supg.tmplen, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.12, %if.end
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end.14

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc, %for.body
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* %nseq.addr, align 4
  %cmp4 = icmp slt i32 %8, %9
  br i1 %cmp4, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.3
  %10 = load i32, i32* %j, align 4
  %idxprom = sext i32 %10 to i64
  %11 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %11 to i64
  %12 = load double**, double*** %oeff.addr, align 8
  %arrayidx = getelementptr inbounds double*, double** %12, i64 %idxprom6
  %13 = load double*, double** %arrayidx, align 8
  %arrayidx7 = getelementptr inbounds double, double* %13, i64 %idxprom
  %14 = load double, double* %arrayidx7, align 8
  %conv = fptrunc double %14 to float
  %15 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %16 to i64
  %17 = load float**, float*** @supg.eff, align 8
  %arrayidx10 = getelementptr inbounds float*, float** %17, i64 %idxprom9
  %18 = load float*, float** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds float, float* %18, i64 %idxprom8
  store float %conv, float* %arrayidx11, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.5
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.3

for.end:                                          ; preds = %for.cond.3
  br label %for.inc.12

for.inc.12:                                       ; preds = %for.end
  %20 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %20, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end.14:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.21, %for.end.14
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %nseq.addr, align 4
  %cmp16 = icmp slt i32 %21, %22
  br i1 %cmp16, label %for.body.18, label %for.end.23

for.body.18:                                      ; preds = %for.cond.15
  %23 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %23 to i64
  %24 = load float*, float** @supg.tmplen, align 8
  %arrayidx20 = getelementptr inbounds float, float* %24, i64 %idxprom19
  store float 0.000000e+00, float* %arrayidx20, align 4
  br label %for.inc.21

for.inc.21:                                       ; preds = %for.body.18
  %25 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %25, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond.15

for.end.23:                                       ; preds = %for.cond.15
  store i32 0, i32* %i, align 4
  br label %for.cond.24

for.cond.24:                                      ; preds = %for.inc.39, %for.end.23
  %26 = load i32, i32* %i, align 4
  %27 = load i32, i32* %nseq.addr, align 4
  %cmp25 = icmp slt i32 %26, %27
  br i1 %cmp25, label %for.body.27, label %for.end.41

for.body.27:                                      ; preds = %for.cond.24
  store i32 0, i32* %j, align 4
  br label %for.cond.28

for.cond.28:                                      ; preds = %for.inc.36, %for.body.27
  %28 = load i32, i32* %j, align 4
  %29 = load i32, i32* %nseq.addr, align 4
  %cmp29 = icmp slt i32 %28, %29
  br i1 %cmp29, label %for.body.31, label %for.end.38

for.body.31:                                      ; preds = %for.cond.28
  %30 = load i32, i32* %j, align 4
  %idxprom32 = sext i32 %30 to i64
  %31 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %31 to i64
  %32 = load i8**, i8*** @supg.pair, align 8
  %arrayidx34 = getelementptr inbounds i8*, i8** %32, i64 %idxprom33
  %33 = load i8*, i8** %arrayidx34, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %33, i64 %idxprom32
  store i8 0, i8* %arrayidx35, align 1
  br label %for.inc.36

for.inc.36:                                       ; preds = %for.body.31
  %34 = load i32, i32* %j, align 4
  %inc37 = add nsw i32 %34, 1
  store i32 %inc37, i32* %j, align 4
  br label %for.cond.28

for.end.38:                                       ; preds = %for.cond.28
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.end.38
  %35 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %35, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond.24

for.end.41:                                       ; preds = %for.cond.24
  store i32 0, i32* %i, align 4
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc.50, %for.end.41
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %nseq.addr, align 4
  %cmp43 = icmp slt i32 %36, %37
  br i1 %cmp43, label %for.body.45, label %for.end.52

for.body.45:                                      ; preds = %for.cond.42
  %38 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %38 to i64
  %39 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %39 to i64
  %40 = load i8**, i8*** @supg.pair, align 8
  %arrayidx48 = getelementptr inbounds i8*, i8** %40, i64 %idxprom47
  %41 = load i8*, i8** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %41, i64 %idxprom46
  store i8 1, i8* %arrayidx49, align 1
  br label %for.inc.50

for.inc.50:                                       ; preds = %for.body.45
  %42 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %42, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond.42

for.end.52:                                       ; preds = %for.cond.42
  store i32 0, i32* %k, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.223, %for.end.52
  %43 = load i32, i32* %k, align 4
  %44 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %44, 1
  %cmp54 = icmp slt i32 %43, %sub
  br i1 %cmp54, label %for.body.56, label %for.end.225

for.body.56:                                      ; preds = %for.cond.53
  store float 9.999000e+03, float* %minscore, align 4
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  %45 = load float**, float*** @supg.eff, align 8
  store float** %45, float*** %floatptpt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.57

for.cond.57:                                      ; preds = %for.inc.75, %for.body.56
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %nseq.addr, align 4
  %sub58 = sub nsw i32 %47, 1
  %cmp59 = icmp slt i32 %46, %sub58
  br i1 %cmp59, label %for.body.61, label %for.end.77

for.body.61:                                      ; preds = %for.cond.57
  %48 = load float**, float*** %floatptpt, align 8
  %incdec.ptr = getelementptr inbounds float*, float** %48, i32 1
  store float** %incdec.ptr, float*** %floatptpt, align 8
  %49 = load float*, float** %48, align 8
  %50 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %50 to i64
  %add.ptr = getelementptr inbounds float, float* %49, i64 %idx.ext
  %add.ptr62 = getelementptr inbounds float, float* %add.ptr, i64 1
  store float* %add.ptr62, float** %floatpt, align 8
  %51 = load i32, i32* %i, align 4
  %add = add nsw i32 %51, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.63

for.cond.63:                                      ; preds = %for.inc.72, %for.body.61
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %nseq.addr, align 4
  %cmp64 = icmp slt i32 %52, %53
  br i1 %cmp64, label %for.body.66, label %for.end.74

for.body.66:                                      ; preds = %for.cond.63
  %54 = load float*, float** %floatpt, align 8
  %incdec.ptr67 = getelementptr inbounds float, float* %54, i32 1
  store float* %incdec.ptr67, float** %floatpt, align 8
  %55 = load float, float* %54, align 4
  store float %55, float* %tmpfloat, align 4
  %56 = load float, float* %tmpfloat, align 4
  %57 = load float, float* %minscore, align 4
  %cmp68 = fcmp olt float %56, %57
  br i1 %cmp68, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %for.body.66
  %58 = load float, float* %tmpfloat, align 4
  store float %58, float* %minscore, align 4
  %59 = load i32, i32* %i, align 4
  store i32 %59, i32* %im, align 4
  %60 = load i32, i32* %j, align 4
  store i32 %60, i32* %jm, align 4
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.70, %for.body.66
  br label %for.inc.72

for.inc.72:                                       ; preds = %if.end.71
  %61 = load i32, i32* %j, align 4
  %inc73 = add nsw i32 %61, 1
  store i32 %inc73, i32* %j, align 4
  br label %for.cond.63

for.end.74:                                       ; preds = %for.cond.63
  br label %for.inc.75

for.inc.75:                                       ; preds = %for.end.74
  %62 = load i32, i32* %i, align 4
  %inc76 = add nsw i32 %62, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond.57

for.end.77:                                       ; preds = %for.cond.57
  %63 = load i32, i32* %k, align 4
  %idxprom78 = sext i32 %63 to i64
  %64 = load i32***, i32**** %topol.addr, align 8
  %arrayidx79 = getelementptr inbounds i32**, i32*** %64, i64 %idxprom78
  %65 = load i32**, i32*** %arrayidx79, align 8
  %arrayidx80 = getelementptr inbounds i32*, i32** %65, i64 0
  %66 = load i32*, i32** %arrayidx80, align 8
  store i32* %66, i32** %intpt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.81

for.cond.81:                                      ; preds = %for.inc.95, %for.end.77
  %67 = load i32, i32* %i, align 4
  %68 = load i32, i32* %nseq.addr, align 4
  %cmp82 = icmp slt i32 %67, %68
  br i1 %cmp82, label %for.body.84, label %for.end.97

for.body.84:                                      ; preds = %for.cond.81
  %69 = load i32, i32* %i, align 4
  %idxprom85 = sext i32 %69 to i64
  %70 = load i32, i32* %im, align 4
  %idxprom86 = sext i32 %70 to i64
  %71 = load i8**, i8*** @supg.pair, align 8
  %arrayidx87 = getelementptr inbounds i8*, i8** %71, i64 %idxprom86
  %72 = load i8*, i8** %arrayidx87, align 8
  %arrayidx88 = getelementptr inbounds i8, i8* %72, i64 %idxprom85
  %73 = load i8, i8* %arrayidx88, align 1
  %conv89 = sext i8 %73 to i32
  %cmp90 = icmp sgt i32 %conv89, 0
  br i1 %cmp90, label %if.then.92, label %if.end.94

if.then.92:                                       ; preds = %for.body.84
  %74 = load i32, i32* %i, align 4
  %75 = load i32*, i32** %intpt, align 8
  %incdec.ptr93 = getelementptr inbounds i32, i32* %75, i32 1
  store i32* %incdec.ptr93, i32** %intpt, align 8
  store i32 %74, i32* %75, align 4
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.92, %for.body.84
  br label %for.inc.95

for.inc.95:                                       ; preds = %if.end.94
  %76 = load i32, i32* %i, align 4
  %inc96 = add nsw i32 %76, 1
  store i32 %inc96, i32* %i, align 4
  br label %for.cond.81

for.end.97:                                       ; preds = %for.cond.81
  %77 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %77, align 4
  %78 = load i32, i32* %k, align 4
  %idxprom98 = sext i32 %78 to i64
  %79 = load i32***, i32**** %topol.addr, align 8
  %arrayidx99 = getelementptr inbounds i32**, i32*** %79, i64 %idxprom98
  %80 = load i32**, i32*** %arrayidx99, align 8
  %arrayidx100 = getelementptr inbounds i32*, i32** %80, i64 1
  %81 = load i32*, i32** %arrayidx100, align 8
  store i32* %81, i32** %intpt, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.101

for.cond.101:                                     ; preds = %for.inc.115, %for.end.97
  %82 = load i32, i32* %i, align 4
  %83 = load i32, i32* %nseq.addr, align 4
  %cmp102 = icmp slt i32 %82, %83
  br i1 %cmp102, label %for.body.104, label %for.end.117

for.body.104:                                     ; preds = %for.cond.101
  %84 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %84 to i64
  %85 = load i32, i32* %jm, align 4
  %idxprom106 = sext i32 %85 to i64
  %86 = load i8**, i8*** @supg.pair, align 8
  %arrayidx107 = getelementptr inbounds i8*, i8** %86, i64 %idxprom106
  %87 = load i8*, i8** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds i8, i8* %87, i64 %idxprom105
  %88 = load i8, i8* %arrayidx108, align 1
  %conv109 = sext i8 %88 to i32
  %cmp110 = icmp sgt i32 %conv109, 0
  br i1 %cmp110, label %if.then.112, label %if.end.114

if.then.112:                                      ; preds = %for.body.104
  %89 = load i32, i32* %i, align 4
  %90 = load i32*, i32** %intpt, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %90, i32 1
  store i32* %incdec.ptr113, i32** %intpt, align 8
  store i32 %89, i32* %90, align 4
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.112, %for.body.104
  br label %for.inc.115

for.inc.115:                                      ; preds = %if.end.114
  %91 = load i32, i32* %i, align 4
  %inc116 = add nsw i32 %91, 1
  store i32 %inc116, i32* %i, align 4
  br label %for.cond.101

for.end.117:                                      ; preds = %for.cond.101
  %92 = load i32*, i32** %intpt, align 8
  store i32 -1, i32* %92, align 4
  %93 = load float, float* %minscore, align 4
  %conv118 = fpext float %93 to double
  %div = fdiv double %conv118, 2.000000e+00
  %94 = load i32, i32* %im, align 4
  %idxprom119 = sext i32 %94 to i64
  %95 = load float*, float** @supg.tmplen, align 8
  %arrayidx120 = getelementptr inbounds float, float* %95, i64 %idxprom119
  %96 = load float, float* %arrayidx120, align 4
  %conv121 = fpext float %96 to double
  %sub122 = fsub double %div, %conv121
  %97 = load i32, i32* %k, align 4
  %idxprom123 = sext i32 %97 to i64
  %98 = load double**, double*** %len.addr, align 8
  %arrayidx124 = getelementptr inbounds double*, double** %98, i64 %idxprom123
  %99 = load double*, double** %arrayidx124, align 8
  %arrayidx125 = getelementptr inbounds double, double* %99, i64 0
  store double %sub122, double* %arrayidx125, align 8
  %100 = load float, float* %minscore, align 4
  %conv126 = fpext float %100 to double
  %div127 = fdiv double %conv126, 2.000000e+00
  %101 = load i32, i32* %jm, align 4
  %idxprom128 = sext i32 %101 to i64
  %102 = load float*, float** @supg.tmplen, align 8
  %arrayidx129 = getelementptr inbounds float, float* %102, i64 %idxprom128
  %103 = load float, float* %arrayidx129, align 4
  %conv130 = fpext float %103 to double
  %sub131 = fsub double %div127, %conv130
  %104 = load i32, i32* %k, align 4
  %idxprom132 = sext i32 %104 to i64
  %105 = load double**, double*** %len.addr, align 8
  %arrayidx133 = getelementptr inbounds double*, double** %105, i64 %idxprom132
  %106 = load double*, double** %arrayidx133, align 8
  %arrayidx134 = getelementptr inbounds double, double* %106, i64 1
  store double %sub131, double* %arrayidx134, align 8
  %107 = load float, float* %minscore, align 4
  %conv135 = fpext float %107 to double
  %div136 = fdiv double %conv135, 2.000000e+00
  %conv137 = fptrunc double %div136 to float
  %108 = load i32, i32* %im, align 4
  %idxprom138 = sext i32 %108 to i64
  %109 = load float*, float** @supg.tmplen, align 8
  %arrayidx139 = getelementptr inbounds float, float* %109, i64 %idxprom138
  store float %conv137, float* %arrayidx139, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.140

for.cond.140:                                     ; preds = %for.inc.158, %for.end.117
  %110 = load i32, i32* %i, align 4
  %111 = load i32, i32* %nseq.addr, align 4
  %cmp141 = icmp slt i32 %110, %111
  br i1 %cmp141, label %for.body.143, label %for.end.160

for.body.143:                                     ; preds = %for.cond.140
  %112 = load i32, i32* %i, align 4
  %idxprom144 = sext i32 %112 to i64
  %113 = load i32, i32* %jm, align 4
  %idxprom145 = sext i32 %113 to i64
  %114 = load i8**, i8*** @supg.pair, align 8
  %arrayidx146 = getelementptr inbounds i8*, i8** %114, i64 %idxprom145
  %115 = load i8*, i8** %arrayidx146, align 8
  %arrayidx147 = getelementptr inbounds i8, i8* %115, i64 %idxprom144
  %116 = load i8, i8* %arrayidx147, align 1
  %conv148 = sext i8 %116 to i32
  %cmp149 = icmp sgt i32 %conv148, 0
  %conv150 = zext i1 %cmp149 to i32
  %117 = load i32, i32* %i, align 4
  %idxprom151 = sext i32 %117 to i64
  %118 = load i32, i32* %im, align 4
  %idxprom152 = sext i32 %118 to i64
  %119 = load i8**, i8*** @supg.pair, align 8
  %arrayidx153 = getelementptr inbounds i8*, i8** %119, i64 %idxprom152
  %120 = load i8*, i8** %arrayidx153, align 8
  %arrayidx154 = getelementptr inbounds i8, i8* %120, i64 %idxprom151
  %121 = load i8, i8* %arrayidx154, align 1
  %conv155 = sext i8 %121 to i32
  %add156 = add nsw i32 %conv155, %conv150
  %conv157 = trunc i32 %add156 to i8
  store i8 %conv157, i8* %arrayidx154, align 1
  br label %for.inc.158

for.inc.158:                                      ; preds = %for.body.143
  %122 = load i32, i32* %i, align 4
  %inc159 = add nsw i32 %122, 1
  store i32 %inc159, i32* %i, align 4
  br label %for.cond.140

for.end.160:                                      ; preds = %for.cond.140
  store i32 0, i32* %i, align 4
  br label %for.cond.161

for.cond.161:                                     ; preds = %for.inc.169, %for.end.160
  %123 = load i32, i32* %i, align 4
  %124 = load i32, i32* %nseq.addr, align 4
  %cmp162 = icmp slt i32 %123, %124
  br i1 %cmp162, label %for.body.164, label %for.end.171

for.body.164:                                     ; preds = %for.cond.161
  %125 = load i32, i32* %i, align 4
  %idxprom165 = sext i32 %125 to i64
  %126 = load i32, i32* %jm, align 4
  %idxprom166 = sext i32 %126 to i64
  %127 = load i8**, i8*** @supg.pair, align 8
  %arrayidx167 = getelementptr inbounds i8*, i8** %127, i64 %idxprom166
  %128 = load i8*, i8** %arrayidx167, align 8
  %arrayidx168 = getelementptr inbounds i8, i8* %128, i64 %idxprom165
  store i8 0, i8* %arrayidx168, align 1
  br label %for.inc.169

for.inc.169:                                      ; preds = %for.body.164
  %129 = load i32, i32* %i, align 4
  %inc170 = add nsw i32 %129, 1
  store i32 %inc170, i32* %i, align 4
  br label %for.cond.161

for.end.171:                                      ; preds = %for.cond.161
  store i32 0, i32* %i, align 4
  br label %for.cond.172

for.cond.172:                                     ; preds = %for.inc.220, %for.end.171
  %130 = load i32, i32* %i, align 4
  %131 = load i32, i32* %nseq.addr, align 4
  %cmp173 = icmp slt i32 %130, %131
  br i1 %cmp173, label %for.body.175, label %for.end.222

for.body.175:                                     ; preds = %for.cond.172
  %132 = load i32, i32* %i, align 4
  %133 = load i32, i32* %im, align 4
  %cmp176 = icmp ne i32 %132, %133
  br i1 %cmp176, label %land.lhs.true, label %if.end.219

land.lhs.true:                                    ; preds = %for.body.175
  %134 = load i32, i32* %i, align 4
  %135 = load i32, i32* %jm, align 4
  %cmp178 = icmp ne i32 %134, %135
  br i1 %cmp178, label %if.then.180, label %if.end.219

if.then.180:                                      ; preds = %land.lhs.true
  %136 = load i32, i32* %i, align 4
  %137 = load i32, i32* %im, align 4
  %cmp181 = icmp slt i32 %136, %137
  br i1 %cmp181, label %if.then.183, label %if.else

if.then.183:                                      ; preds = %if.then.180
  %138 = load i32, i32* %i, align 4
  store i32 %138, i32* %miniim, align 4
  %139 = load i32, i32* %im, align 4
  store i32 %139, i32* %maxiim, align 4
  %140 = load i32, i32* %i, align 4
  store i32 %140, i32* %minijm, align 4
  %141 = load i32, i32* %jm, align 4
  store i32 %141, i32* %maxijm, align 4
  br label %if.end.189

if.else:                                          ; preds = %if.then.180
  %142 = load i32, i32* %i, align 4
  %143 = load i32, i32* %jm, align 4
  %cmp184 = icmp slt i32 %142, %143
  br i1 %cmp184, label %if.then.186, label %if.else.187

if.then.186:                                      ; preds = %if.else
  %144 = load i32, i32* %im, align 4
  store i32 %144, i32* %miniim, align 4
  %145 = load i32, i32* %i, align 4
  store i32 %145, i32* %maxiim, align 4
  %146 = load i32, i32* %i, align 4
  store i32 %146, i32* %minijm, align 4
  %147 = load i32, i32* %jm, align 4
  store i32 %147, i32* %maxijm, align 4
  br label %if.end.188

if.else.187:                                      ; preds = %if.else
  %148 = load i32, i32* %im, align 4
  store i32 %148, i32* %miniim, align 4
  %149 = load i32, i32* %i, align 4
  store i32 %149, i32* %maxiim, align 4
  %150 = load i32, i32* %jm, align 4
  store i32 %150, i32* %minijm, align 4
  %151 = load i32, i32* %i, align 4
  store i32 %151, i32* %maxijm, align 4
  br label %if.end.188

if.end.188:                                       ; preds = %if.else.187, %if.then.186
  br label %if.end.189

if.end.189:                                       ; preds = %if.end.188, %if.then.183
  %152 = load i32, i32* %maxiim, align 4
  %idxprom190 = sext i32 %152 to i64
  %153 = load i32, i32* %miniim, align 4
  %idxprom191 = sext i32 %153 to i64
  %154 = load float**, float*** @supg.eff, align 8
  %arrayidx192 = getelementptr inbounds float*, float** %154, i64 %idxprom191
  %155 = load float*, float** %arrayidx192, align 8
  %arrayidx193 = getelementptr inbounds float, float* %155, i64 %idxprom190
  %156 = load float, float* %arrayidx193, align 4
  store float %156, float* %eff0, align 4
  %157 = load i32, i32* %maxijm, align 4
  %idxprom194 = sext i32 %157 to i64
  %158 = load i32, i32* %minijm, align 4
  %idxprom195 = sext i32 %158 to i64
  %159 = load float**, float*** @supg.eff, align 8
  %arrayidx196 = getelementptr inbounds float*, float** %159, i64 %idxprom195
  %160 = load float*, float** %arrayidx196, align 8
  %arrayidx197 = getelementptr inbounds float, float* %160, i64 %idxprom194
  %161 = load float, float* %arrayidx197, align 4
  store float %161, float* %eff1, align 4
  %162 = load float, float* %eff0, align 4
  %163 = load float, float* %eff1, align 4
  %cmp198 = fcmp olt float %162, %163
  br i1 %cmp198, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.189
  %164 = load float, float* %eff0, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.189
  %165 = load float, float* %eff1, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %164, %cond.true ], [ %165, %cond.false ]
  %conv200 = fpext float %cond to double
  %mul = fmul double %conv200, 9.000000e-01
  %166 = load float, float* %eff0, align 4
  %167 = load float, float* %eff1, align 4
  %add201 = fadd float %166, %167
  %conv202 = fpext float %add201 to double
  %mul203 = fmul double %conv202, 5.000000e-01
  %mul204 = fmul double %mul203, 1.000000e-01
  %add205 = fadd double %mul, %mul204
  %conv206 = fptrunc double %add205 to float
  %168 = load i32, i32* %maxiim, align 4
  %idxprom207 = sext i32 %168 to i64
  %169 = load i32, i32* %miniim, align 4
  %idxprom208 = sext i32 %169 to i64
  %170 = load float**, float*** @supg.eff, align 8
  %arrayidx209 = getelementptr inbounds float*, float** %170, i64 %idxprom208
  %171 = load float*, float** %arrayidx209, align 8
  %arrayidx210 = getelementptr inbounds float, float* %171, i64 %idxprom207
  store float %conv206, float* %arrayidx210, align 4
  %172 = load i32, i32* %maxijm, align 4
  %idxprom211 = sext i32 %172 to i64
  %173 = load i32, i32* %minijm, align 4
  %idxprom212 = sext i32 %173 to i64
  %174 = load float**, float*** @supg.eff, align 8
  %arrayidx213 = getelementptr inbounds float*, float** %174, i64 %idxprom212
  %175 = load float*, float** %arrayidx213, align 8
  %arrayidx214 = getelementptr inbounds float, float* %175, i64 %idxprom211
  store float 9.999000e+03, float* %arrayidx214, align 4
  %176 = load i32, i32* %jm, align 4
  %idxprom215 = sext i32 %176 to i64
  %177 = load i32, i32* %im, align 4
  %idxprom216 = sext i32 %177 to i64
  %178 = load float**, float*** @supg.eff, align 8
  %arrayidx217 = getelementptr inbounds float*, float** %178, i64 %idxprom216
  %179 = load float*, float** %arrayidx217, align 8
  %arrayidx218 = getelementptr inbounds float, float* %179, i64 %idxprom215
  store float 9.999000e+03, float* %arrayidx218, align 4
  br label %if.end.219

if.end.219:                                       ; preds = %cond.end, %land.lhs.true, %for.body.175
  br label %for.inc.220

for.inc.220:                                      ; preds = %if.end.219
  %180 = load i32, i32* %i, align 4
  %inc221 = add nsw i32 %180, 1
  store i32 %inc221, i32* %i, align 4
  br label %for.cond.172

for.end.222:                                      ; preds = %for.cond.172
  br label %for.inc.223

for.inc.223:                                      ; preds = %for.end.222
  %181 = load i32, i32* %k, align 4
  %inc224 = add nsw i32 %181, 1
  store i32 %inc224, i32* %k, align 4
  br label %for.cond.53

for.end.225:                                      ; preds = %for.cond.53
  ret void
}

; Function Attrs: nounwind uwtable
define void @spg(i32 %nseq, double** %oeff, i32*** %topol, double** %len) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %oeff.addr = alloca double**, align 8
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tmplen = alloca [50000 x double], align 16
  %eff = alloca double**, align 8
  %pair = alloca i8**, align 8
  %minscore = alloca float, align 4
  %im = alloca i32, align 4
  %jm = alloca i32, align 4
  %count = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store double** %oeff, double*** %oeff.addr, align 8
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store double** null, double*** %eff, align 8
  store i8** null, i8*** %pair, align 8
  %0 = load double**, double*** %eff, align 8
  %tobool = icmp ne double** %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @njob, align 4
  %2 = load i32, i32* @njob, align 4
  %call = call double** @AllocateDoubleMtx(i32 %1, i32 %2)
  store double** %call, double*** %eff, align 8
  %3 = load i32, i32* @njob, align 4
  %4 = load i32, i32* @njob, align 4
  %call1 = call i8** @AllocateCharMtx(i32 %3, i32 %4)
  store i8** %call1, i8*** %pair, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.11, %if.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %5, %6
  br i1 %cmp, label %for.body, label %for.end.13

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %7 = load i32, i32* %j, align 4
  %8 = load i32, i32* %nseq.addr, align 4
  %cmp3 = icmp slt i32 %7, %8
  br i1 %cmp3, label %for.body.4, label %for.end

for.body.4:                                       ; preds = %for.cond.2
  %9 = load i32, i32* %j, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %10 to i64
  %11 = load double**, double*** %oeff.addr, align 8
  %arrayidx = getelementptr inbounds double*, double** %11, i64 %idxprom5
  %12 = load double*, double** %arrayidx, align 8
  %arrayidx6 = getelementptr inbounds double, double* %12, i64 %idxprom
  %13 = load double, double* %arrayidx6, align 8
  %14 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %14 to i64
  %15 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %15 to i64
  %16 = load double**, double*** %eff, align 8
  %arrayidx9 = getelementptr inbounds double*, double** %16, i64 %idxprom8
  %17 = load double*, double** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds double, double* %17, i64 %idxprom7
  store double %13, double* %arrayidx10, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.4
  %18 = load i32, i32* %j, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  br label %for.inc.11

for.inc.11:                                       ; preds = %for.end
  %19 = load i32, i32* %i, align 4
  %inc12 = add nsw i32 %19, 1
  store i32 %inc12, i32* %i, align 4
  br label %for.cond

for.end.13:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.19, %for.end.13
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %nseq.addr, align 4
  %cmp15 = icmp slt i32 %20, %21
  br i1 %cmp15, label %for.body.16, label %for.end.21

for.body.16:                                      ; preds = %for.cond.14
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom17
  store double 0.000000e+00, double* %arrayidx18, align 8
  br label %for.inc.19

for.inc.19:                                       ; preds = %for.body.16
  %23 = load i32, i32* %i, align 4
  %inc20 = add nsw i32 %23, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond.14

for.end.21:                                       ; preds = %for.cond.14
  store i32 0, i32* %i, align 4
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc.35, %for.end.21
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %nseq.addr, align 4
  %cmp23 = icmp slt i32 %24, %25
  br i1 %cmp23, label %for.body.24, label %for.end.37

for.body.24:                                      ; preds = %for.cond.22
  store i32 0, i32* %j, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc.32, %for.body.24
  %26 = load i32, i32* %j, align 4
  %27 = load i32, i32* %nseq.addr, align 4
  %cmp26 = icmp slt i32 %26, %27
  br i1 %cmp26, label %for.body.27, label %for.end.34

for.body.27:                                      ; preds = %for.cond.25
  %28 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %28 to i64
  %29 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %29 to i64
  %30 = load i8**, i8*** %pair, align 8
  %arrayidx30 = getelementptr inbounds i8*, i8** %30, i64 %idxprom29
  %31 = load i8*, i8** %arrayidx30, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %31, i64 %idxprom28
  store i8 0, i8* %arrayidx31, align 1
  br label %for.inc.32

for.inc.32:                                       ; preds = %for.body.27
  %32 = load i32, i32* %j, align 4
  %inc33 = add nsw i32 %32, 1
  store i32 %inc33, i32* %j, align 4
  br label %for.cond.25

for.end.34:                                       ; preds = %for.cond.25
  br label %for.inc.35

for.inc.35:                                       ; preds = %for.end.34
  %33 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %33, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond.22

for.end.37:                                       ; preds = %for.cond.22
  store i32 0, i32* %i, align 4
  br label %for.cond.38

for.cond.38:                                      ; preds = %for.inc.45, %for.end.37
  %34 = load i32, i32* %i, align 4
  %35 = load i32, i32* %nseq.addr, align 4
  %cmp39 = icmp slt i32 %34, %35
  br i1 %cmp39, label %for.body.40, label %for.end.47

for.body.40:                                      ; preds = %for.cond.38
  %36 = load i32, i32* %i, align 4
  %idxprom41 = sext i32 %36 to i64
  %37 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %37 to i64
  %38 = load i8**, i8*** %pair, align 8
  %arrayidx43 = getelementptr inbounds i8*, i8** %38, i64 %idxprom42
  %39 = load i8*, i8** %arrayidx43, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %39, i64 %idxprom41
  store i8 1, i8* %arrayidx44, align 1
  br label %for.inc.45

for.inc.45:                                       ; preds = %for.body.40
  %40 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %40, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond.38

for.end.47:                                       ; preds = %for.cond.38
  store i32 0, i32* %k, align 4
  br label %for.cond.48

for.cond.48:                                      ; preds = %for.inc.297, %for.end.47
  %41 = load i32, i32* %k, align 4
  %42 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %42, 1
  %cmp49 = icmp slt i32 %41, %sub
  br i1 %cmp49, label %for.body.50, label %for.end.299

for.body.50:                                      ; preds = %for.cond.48
  store float 9.999000e+03, float* %minscore, align 4
  store i32 -1, i32* %im, align 4
  store i32 -1, i32* %jm, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.51

for.cond.51:                                      ; preds = %for.inc.74, %for.body.50
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %nseq.addr, align 4
  %sub52 = sub nsw i32 %44, 1
  %cmp53 = icmp slt i32 %43, %sub52
  br i1 %cmp53, label %for.body.54, label %for.end.76

for.body.54:                                      ; preds = %for.cond.51
  %45 = load i32, i32* %i, align 4
  %add = add nsw i32 %45, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc.71, %for.body.54
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %nseq.addr, align 4
  %cmp56 = icmp slt i32 %46, %47
  br i1 %cmp56, label %for.body.57, label %for.end.73

for.body.57:                                      ; preds = %for.cond.55
  %48 = load i32, i32* %j, align 4
  %idxprom58 = sext i32 %48 to i64
  %49 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %49 to i64
  %50 = load double**, double*** %eff, align 8
  %arrayidx60 = getelementptr inbounds double*, double** %50, i64 %idxprom59
  %51 = load double*, double** %arrayidx60, align 8
  %arrayidx61 = getelementptr inbounds double, double* %51, i64 %idxprom58
  %52 = load double, double* %arrayidx61, align 8
  %53 = load float, float* %minscore, align 4
  %conv = fpext float %53 to double
  %cmp62 = fcmp olt double %52, %conv
  br i1 %cmp62, label %if.then.64, label %if.end.70

if.then.64:                                       ; preds = %for.body.57
  %54 = load i32, i32* %j, align 4
  %idxprom65 = sext i32 %54 to i64
  %55 = load i32, i32* %i, align 4
  %idxprom66 = sext i32 %55 to i64
  %56 = load double**, double*** %eff, align 8
  %arrayidx67 = getelementptr inbounds double*, double** %56, i64 %idxprom66
  %57 = load double*, double** %arrayidx67, align 8
  %arrayidx68 = getelementptr inbounds double, double* %57, i64 %idxprom65
  %58 = load double, double* %arrayidx68, align 8
  %conv69 = fptrunc double %58 to float
  store float %conv69, float* %minscore, align 4
  %59 = load i32, i32* %i, align 4
  store i32 %59, i32* %im, align 4
  %60 = load i32, i32* %j, align 4
  store i32 %60, i32* %jm, align 4
  br label %if.end.70

if.end.70:                                        ; preds = %if.then.64, %for.body.57
  br label %for.inc.71

for.inc.71:                                       ; preds = %if.end.70
  %61 = load i32, i32* %j, align 4
  %inc72 = add nsw i32 %61, 1
  store i32 %inc72, i32* %j, align 4
  br label %for.cond.55

for.end.73:                                       ; preds = %for.cond.55
  br label %for.inc.74

for.inc.74:                                       ; preds = %for.end.73
  %62 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %62, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond.51

for.end.76:                                       ; preds = %for.cond.51
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond.77

for.cond.77:                                      ; preds = %for.inc.96, %for.end.76
  %63 = load i32, i32* %i, align 4
  %64 = load i32, i32* %nseq.addr, align 4
  %cmp78 = icmp slt i32 %63, %64
  br i1 %cmp78, label %for.body.80, label %for.end.98

for.body.80:                                      ; preds = %for.cond.77
  %65 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %65 to i64
  %66 = load i32, i32* %im, align 4
  %idxprom82 = sext i32 %66 to i64
  %67 = load i8**, i8*** %pair, align 8
  %arrayidx83 = getelementptr inbounds i8*, i8** %67, i64 %idxprom82
  %68 = load i8*, i8** %arrayidx83, align 8
  %arrayidx84 = getelementptr inbounds i8, i8* %68, i64 %idxprom81
  %69 = load i8, i8* %arrayidx84, align 1
  %conv85 = sext i8 %69 to i32
  %cmp86 = icmp sgt i32 %conv85, 0
  br i1 %cmp86, label %if.then.88, label %if.end.95

if.then.88:                                       ; preds = %for.body.80
  %70 = load i32, i32* %i, align 4
  %71 = load i32, i32* %count, align 4
  %idxprom89 = sext i32 %71 to i64
  %72 = load i32, i32* %k, align 4
  %idxprom90 = sext i32 %72 to i64
  %73 = load i32***, i32**** %topol.addr, align 8
  %arrayidx91 = getelementptr inbounds i32**, i32*** %73, i64 %idxprom90
  %74 = load i32**, i32*** %arrayidx91, align 8
  %arrayidx92 = getelementptr inbounds i32*, i32** %74, i64 0
  %75 = load i32*, i32** %arrayidx92, align 8
  %arrayidx93 = getelementptr inbounds i32, i32* %75, i64 %idxprom89
  store i32 %70, i32* %arrayidx93, align 4
  %76 = load i32, i32* %count, align 4
  %inc94 = add nsw i32 %76, 1
  store i32 %inc94, i32* %count, align 4
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.88, %for.body.80
  br label %for.inc.96

for.inc.96:                                       ; preds = %if.end.95
  %77 = load i32, i32* %i, align 4
  %inc97 = add nsw i32 %77, 1
  store i32 %inc97, i32* %i, align 4
  br label %for.cond.77

for.end.98:                                       ; preds = %for.cond.77
  %78 = load i32, i32* %count, align 4
  %idxprom99 = sext i32 %78 to i64
  %79 = load i32, i32* %k, align 4
  %idxprom100 = sext i32 %79 to i64
  %80 = load i32***, i32**** %topol.addr, align 8
  %arrayidx101 = getelementptr inbounds i32**, i32*** %80, i64 %idxprom100
  %81 = load i32**, i32*** %arrayidx101, align 8
  %arrayidx102 = getelementptr inbounds i32*, i32** %81, i64 0
  %82 = load i32*, i32** %arrayidx102, align 8
  %arrayidx103 = getelementptr inbounds i32, i32* %82, i64 %idxprom99
  store i32 -1, i32* %arrayidx103, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond.104

for.cond.104:                                     ; preds = %for.inc.123, %for.end.98
  %83 = load i32, i32* %i, align 4
  %84 = load i32, i32* %nseq.addr, align 4
  %cmp105 = icmp slt i32 %83, %84
  br i1 %cmp105, label %for.body.107, label %for.end.125

for.body.107:                                     ; preds = %for.cond.104
  %85 = load i32, i32* %i, align 4
  %idxprom108 = sext i32 %85 to i64
  %86 = load i32, i32* %jm, align 4
  %idxprom109 = sext i32 %86 to i64
  %87 = load i8**, i8*** %pair, align 8
  %arrayidx110 = getelementptr inbounds i8*, i8** %87, i64 %idxprom109
  %88 = load i8*, i8** %arrayidx110, align 8
  %arrayidx111 = getelementptr inbounds i8, i8* %88, i64 %idxprom108
  %89 = load i8, i8* %arrayidx111, align 1
  %conv112 = sext i8 %89 to i32
  %cmp113 = icmp sgt i32 %conv112, 0
  br i1 %cmp113, label %if.then.115, label %if.end.122

if.then.115:                                      ; preds = %for.body.107
  %90 = load i32, i32* %i, align 4
  %91 = load i32, i32* %count, align 4
  %idxprom116 = sext i32 %91 to i64
  %92 = load i32, i32* %k, align 4
  %idxprom117 = sext i32 %92 to i64
  %93 = load i32***, i32**** %topol.addr, align 8
  %arrayidx118 = getelementptr inbounds i32**, i32*** %93, i64 %idxprom117
  %94 = load i32**, i32*** %arrayidx118, align 8
  %arrayidx119 = getelementptr inbounds i32*, i32** %94, i64 1
  %95 = load i32*, i32** %arrayidx119, align 8
  %arrayidx120 = getelementptr inbounds i32, i32* %95, i64 %idxprom116
  store i32 %90, i32* %arrayidx120, align 4
  %96 = load i32, i32* %count, align 4
  %inc121 = add nsw i32 %96, 1
  store i32 %inc121, i32* %count, align 4
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.115, %for.body.107
  br label %for.inc.123

for.inc.123:                                      ; preds = %if.end.122
  %97 = load i32, i32* %i, align 4
  %inc124 = add nsw i32 %97, 1
  store i32 %inc124, i32* %i, align 4
  br label %for.cond.104

for.end.125:                                      ; preds = %for.cond.104
  %98 = load i32, i32* %count, align 4
  %idxprom126 = sext i32 %98 to i64
  %99 = load i32, i32* %k, align 4
  %idxprom127 = sext i32 %99 to i64
  %100 = load i32***, i32**** %topol.addr, align 8
  %arrayidx128 = getelementptr inbounds i32**, i32*** %100, i64 %idxprom127
  %101 = load i32**, i32*** %arrayidx128, align 8
  %arrayidx129 = getelementptr inbounds i32*, i32** %101, i64 1
  %102 = load i32*, i32** %arrayidx129, align 8
  %arrayidx130 = getelementptr inbounds i32, i32* %102, i64 %idxprom126
  store i32 -1, i32* %arrayidx130, align 4
  %103 = load float, float* %minscore, align 4
  %conv131 = fpext float %103 to double
  %div = fdiv double %conv131, 2.000000e+00
  %104 = load i32, i32* %im, align 4
  %idxprom132 = sext i32 %104 to i64
  %arrayidx133 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom132
  %105 = load double, double* %arrayidx133, align 8
  %sub134 = fsub double %div, %105
  %106 = load i32, i32* %k, align 4
  %idxprom135 = sext i32 %106 to i64
  %107 = load double**, double*** %len.addr, align 8
  %arrayidx136 = getelementptr inbounds double*, double** %107, i64 %idxprom135
  %108 = load double*, double** %arrayidx136, align 8
  %arrayidx137 = getelementptr inbounds double, double* %108, i64 0
  store double %sub134, double* %arrayidx137, align 8
  %109 = load float, float* %minscore, align 4
  %conv138 = fpext float %109 to double
  %div139 = fdiv double %conv138, 2.000000e+00
  %110 = load i32, i32* %jm, align 4
  %idxprom140 = sext i32 %110 to i64
  %arrayidx141 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom140
  %111 = load double, double* %arrayidx141, align 8
  %sub142 = fsub double %div139, %111
  %112 = load i32, i32* %k, align 4
  %idxprom143 = sext i32 %112 to i64
  %113 = load double**, double*** %len.addr, align 8
  %arrayidx144 = getelementptr inbounds double*, double** %113, i64 %idxprom143
  %114 = load double*, double** %arrayidx144, align 8
  %arrayidx145 = getelementptr inbounds double, double* %114, i64 1
  store double %sub142, double* %arrayidx145, align 8
  %115 = load float, float* %minscore, align 4
  %conv146 = fpext float %115 to double
  %div147 = fdiv double %conv146, 2.000000e+00
  %116 = load i32, i32* %im, align 4
  %idxprom148 = sext i32 %116 to i64
  %arrayidx149 = getelementptr inbounds [50000 x double], [50000 x double]* %tmplen, i32 0, i64 %idxprom148
  store double %div147, double* %arrayidx149, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.150

for.cond.150:                                     ; preds = %for.inc.168, %for.end.125
  %117 = load i32, i32* %i, align 4
  %118 = load i32, i32* %nseq.addr, align 4
  %cmp151 = icmp slt i32 %117, %118
  br i1 %cmp151, label %for.body.153, label %for.end.170

for.body.153:                                     ; preds = %for.cond.150
  %119 = load i32, i32* %i, align 4
  %idxprom154 = sext i32 %119 to i64
  %120 = load i32, i32* %jm, align 4
  %idxprom155 = sext i32 %120 to i64
  %121 = load i8**, i8*** %pair, align 8
  %arrayidx156 = getelementptr inbounds i8*, i8** %121, i64 %idxprom155
  %122 = load i8*, i8** %arrayidx156, align 8
  %arrayidx157 = getelementptr inbounds i8, i8* %122, i64 %idxprom154
  %123 = load i8, i8* %arrayidx157, align 1
  %conv158 = sext i8 %123 to i32
  %cmp159 = icmp sgt i32 %conv158, 0
  %conv160 = zext i1 %cmp159 to i32
  %124 = load i32, i32* %i, align 4
  %idxprom161 = sext i32 %124 to i64
  %125 = load i32, i32* %im, align 4
  %idxprom162 = sext i32 %125 to i64
  %126 = load i8**, i8*** %pair, align 8
  %arrayidx163 = getelementptr inbounds i8*, i8** %126, i64 %idxprom162
  %127 = load i8*, i8** %arrayidx163, align 8
  %arrayidx164 = getelementptr inbounds i8, i8* %127, i64 %idxprom161
  %128 = load i8, i8* %arrayidx164, align 1
  %conv165 = sext i8 %128 to i32
  %add166 = add nsw i32 %conv165, %conv160
  %conv167 = trunc i32 %add166 to i8
  store i8 %conv167, i8* %arrayidx164, align 1
  br label %for.inc.168

for.inc.168:                                      ; preds = %for.body.153
  %129 = load i32, i32* %i, align 4
  %inc169 = add nsw i32 %129, 1
  store i32 %inc169, i32* %i, align 4
  br label %for.cond.150

for.end.170:                                      ; preds = %for.cond.150
  store i32 0, i32* %i, align 4
  br label %for.cond.171

for.cond.171:                                     ; preds = %for.inc.179, %for.end.170
  %130 = load i32, i32* %i, align 4
  %131 = load i32, i32* %nseq.addr, align 4
  %cmp172 = icmp slt i32 %130, %131
  br i1 %cmp172, label %for.body.174, label %for.end.181

for.body.174:                                     ; preds = %for.cond.171
  %132 = load i32, i32* %i, align 4
  %idxprom175 = sext i32 %132 to i64
  %133 = load i32, i32* %jm, align 4
  %idxprom176 = sext i32 %133 to i64
  %134 = load i8**, i8*** %pair, align 8
  %arrayidx177 = getelementptr inbounds i8*, i8** %134, i64 %idxprom176
  %135 = load i8*, i8** %arrayidx177, align 8
  %arrayidx178 = getelementptr inbounds i8, i8* %135, i64 %idxprom175
  store i8 0, i8* %arrayidx178, align 1
  br label %for.inc.179

for.inc.179:                                      ; preds = %for.body.174
  %136 = load i32, i32* %i, align 4
  %inc180 = add nsw i32 %136, 1
  store i32 %inc180, i32* %i, align 4
  br label %for.cond.171

for.end.181:                                      ; preds = %for.cond.171
  store i32 0, i32* %i, align 4
  br label %for.cond.182

for.cond.182:                                     ; preds = %for.inc.294, %for.end.181
  %137 = load i32, i32* %i, align 4
  %138 = load i32, i32* %nseq.addr, align 4
  %cmp183 = icmp slt i32 %137, %138
  br i1 %cmp183, label %for.body.185, label %for.end.296

for.body.185:                                     ; preds = %for.cond.182
  %139 = load i32, i32* %i, align 4
  %140 = load i32, i32* %im, align 4
  %cmp186 = icmp ne i32 %139, %140
  br i1 %cmp186, label %land.lhs.true, label %if.end.289

land.lhs.true:                                    ; preds = %for.body.185
  %141 = load i32, i32* %i, align 4
  %142 = load i32, i32* %jm, align 4
  %cmp188 = icmp ne i32 %141, %142
  br i1 %cmp188, label %if.then.190, label %if.end.289

if.then.190:                                      ; preds = %land.lhs.true
  %143 = load i32, i32* %i, align 4
  %144 = load i32, i32* %im, align 4
  %cmp191 = icmp sgt i32 %143, %144
  br i1 %cmp191, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.190
  %145 = load i32, i32* %i, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then.190
  %146 = load i32, i32* %im, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %145, %cond.true ], [ %146, %cond.false ]
  %idxprom193 = sext i32 %cond to i64
  %147 = load i32, i32* %i, align 4
  %148 = load i32, i32* %im, align 4
  %cmp194 = icmp slt i32 %147, %148
  br i1 %cmp194, label %cond.true.196, label %cond.false.197

cond.true.196:                                    ; preds = %cond.end
  %149 = load i32, i32* %i, align 4
  br label %cond.end.198

cond.false.197:                                   ; preds = %cond.end
  %150 = load i32, i32* %im, align 4
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.197, %cond.true.196
  %cond199 = phi i32 [ %149, %cond.true.196 ], [ %150, %cond.false.197 ]
  %idxprom200 = sext i32 %cond199 to i64
  %151 = load double**, double*** %eff, align 8
  %arrayidx201 = getelementptr inbounds double*, double** %151, i64 %idxprom200
  %152 = load double*, double** %arrayidx201, align 8
  %arrayidx202 = getelementptr inbounds double, double* %152, i64 %idxprom193
  %153 = load double, double* %arrayidx202, align 8
  %154 = load i32, i32* %i, align 4
  %155 = load i32, i32* %jm, align 4
  %cmp203 = icmp sgt i32 %154, %155
  br i1 %cmp203, label %cond.true.205, label %cond.false.206

cond.true.205:                                    ; preds = %cond.end.198
  %156 = load i32, i32* %i, align 4
  br label %cond.end.207

cond.false.206:                                   ; preds = %cond.end.198
  %157 = load i32, i32* %jm, align 4
  br label %cond.end.207

cond.end.207:                                     ; preds = %cond.false.206, %cond.true.205
  %cond208 = phi i32 [ %156, %cond.true.205 ], [ %157, %cond.false.206 ]
  %idxprom209 = sext i32 %cond208 to i64
  %158 = load i32, i32* %i, align 4
  %159 = load i32, i32* %jm, align 4
  %cmp210 = icmp slt i32 %158, %159
  br i1 %cmp210, label %cond.true.212, label %cond.false.213

cond.true.212:                                    ; preds = %cond.end.207
  %160 = load i32, i32* %i, align 4
  br label %cond.end.214

cond.false.213:                                   ; preds = %cond.end.207
  %161 = load i32, i32* %jm, align 4
  br label %cond.end.214

cond.end.214:                                     ; preds = %cond.false.213, %cond.true.212
  %cond215 = phi i32 [ %160, %cond.true.212 ], [ %161, %cond.false.213 ]
  %idxprom216 = sext i32 %cond215 to i64
  %162 = load double**, double*** %eff, align 8
  %arrayidx217 = getelementptr inbounds double*, double** %162, i64 %idxprom216
  %163 = load double*, double** %arrayidx217, align 8
  %arrayidx218 = getelementptr inbounds double, double* %163, i64 %idxprom209
  %164 = load double, double* %arrayidx218, align 8
  %cmp219 = fcmp olt double %153, %164
  br i1 %cmp219, label %cond.true.221, label %cond.false.238

cond.true.221:                                    ; preds = %cond.end.214
  %165 = load i32, i32* %i, align 4
  %166 = load i32, i32* %im, align 4
  %cmp222 = icmp sgt i32 %165, %166
  br i1 %cmp222, label %cond.true.224, label %cond.false.225

cond.true.224:                                    ; preds = %cond.true.221
  %167 = load i32, i32* %i, align 4
  br label %cond.end.226

cond.false.225:                                   ; preds = %cond.true.221
  %168 = load i32, i32* %im, align 4
  br label %cond.end.226

cond.end.226:                                     ; preds = %cond.false.225, %cond.true.224
  %cond227 = phi i32 [ %167, %cond.true.224 ], [ %168, %cond.false.225 ]
  %idxprom228 = sext i32 %cond227 to i64
  %169 = load i32, i32* %i, align 4
  %170 = load i32, i32* %im, align 4
  %cmp229 = icmp slt i32 %169, %170
  br i1 %cmp229, label %cond.true.231, label %cond.false.232

cond.true.231:                                    ; preds = %cond.end.226
  %171 = load i32, i32* %i, align 4
  br label %cond.end.233

cond.false.232:                                   ; preds = %cond.end.226
  %172 = load i32, i32* %im, align 4
  br label %cond.end.233

cond.end.233:                                     ; preds = %cond.false.232, %cond.true.231
  %cond234 = phi i32 [ %171, %cond.true.231 ], [ %172, %cond.false.232 ]
  %idxprom235 = sext i32 %cond234 to i64
  %173 = load double**, double*** %eff, align 8
  %arrayidx236 = getelementptr inbounds double*, double** %173, i64 %idxprom235
  %174 = load double*, double** %arrayidx236, align 8
  %arrayidx237 = getelementptr inbounds double, double* %174, i64 %idxprom228
  %175 = load double, double* %arrayidx237, align 8
  br label %cond.end.255

cond.false.238:                                   ; preds = %cond.end.214
  %176 = load i32, i32* %i, align 4
  %177 = load i32, i32* %jm, align 4
  %cmp239 = icmp sgt i32 %176, %177
  br i1 %cmp239, label %cond.true.241, label %cond.false.242

cond.true.241:                                    ; preds = %cond.false.238
  %178 = load i32, i32* %i, align 4
  br label %cond.end.243

cond.false.242:                                   ; preds = %cond.false.238
  %179 = load i32, i32* %jm, align 4
  br label %cond.end.243

cond.end.243:                                     ; preds = %cond.false.242, %cond.true.241
  %cond244 = phi i32 [ %178, %cond.true.241 ], [ %179, %cond.false.242 ]
  %idxprom245 = sext i32 %cond244 to i64
  %180 = load i32, i32* %i, align 4
  %181 = load i32, i32* %jm, align 4
  %cmp246 = icmp slt i32 %180, %181
  br i1 %cmp246, label %cond.true.248, label %cond.false.249

cond.true.248:                                    ; preds = %cond.end.243
  %182 = load i32, i32* %i, align 4
  br label %cond.end.250

cond.false.249:                                   ; preds = %cond.end.243
  %183 = load i32, i32* %jm, align 4
  br label %cond.end.250

cond.end.250:                                     ; preds = %cond.false.249, %cond.true.248
  %cond251 = phi i32 [ %182, %cond.true.248 ], [ %183, %cond.false.249 ]
  %idxprom252 = sext i32 %cond251 to i64
  %184 = load double**, double*** %eff, align 8
  %arrayidx253 = getelementptr inbounds double*, double** %184, i64 %idxprom252
  %185 = load double*, double** %arrayidx253, align 8
  %arrayidx254 = getelementptr inbounds double, double* %185, i64 %idxprom245
  %186 = load double, double* %arrayidx254, align 8
  br label %cond.end.255

cond.end.255:                                     ; preds = %cond.end.250, %cond.end.233
  %cond256 = phi double [ %175, %cond.end.233 ], [ %186, %cond.end.250 ]
  %187 = load i32, i32* %i, align 4
  %188 = load i32, i32* %im, align 4
  %cmp257 = icmp sgt i32 %187, %188
  br i1 %cmp257, label %cond.true.259, label %cond.false.260

cond.true.259:                                    ; preds = %cond.end.255
  %189 = load i32, i32* %i, align 4
  br label %cond.end.261

cond.false.260:                                   ; preds = %cond.end.255
  %190 = load i32, i32* %im, align 4
  br label %cond.end.261

cond.end.261:                                     ; preds = %cond.false.260, %cond.true.259
  %cond262 = phi i32 [ %189, %cond.true.259 ], [ %190, %cond.false.260 ]
  %idxprom263 = sext i32 %cond262 to i64
  %191 = load i32, i32* %i, align 4
  %192 = load i32, i32* %im, align 4
  %cmp264 = icmp slt i32 %191, %192
  br i1 %cmp264, label %cond.true.266, label %cond.false.267

cond.true.266:                                    ; preds = %cond.end.261
  %193 = load i32, i32* %i, align 4
  br label %cond.end.268

cond.false.267:                                   ; preds = %cond.end.261
  %194 = load i32, i32* %im, align 4
  br label %cond.end.268

cond.end.268:                                     ; preds = %cond.false.267, %cond.true.266
  %cond269 = phi i32 [ %193, %cond.true.266 ], [ %194, %cond.false.267 ]
  %idxprom270 = sext i32 %cond269 to i64
  %195 = load double**, double*** %eff, align 8
  %arrayidx271 = getelementptr inbounds double*, double** %195, i64 %idxprom270
  %196 = load double*, double** %arrayidx271, align 8
  %arrayidx272 = getelementptr inbounds double, double* %196, i64 %idxprom263
  store double %cond256, double* %arrayidx272, align 8
  %197 = load i32, i32* %i, align 4
  %198 = load i32, i32* %jm, align 4
  %cmp273 = icmp sgt i32 %197, %198
  br i1 %cmp273, label %cond.true.275, label %cond.false.276

cond.true.275:                                    ; preds = %cond.end.268
  %199 = load i32, i32* %i, align 4
  br label %cond.end.277

cond.false.276:                                   ; preds = %cond.end.268
  %200 = load i32, i32* %jm, align 4
  br label %cond.end.277

cond.end.277:                                     ; preds = %cond.false.276, %cond.true.275
  %cond278 = phi i32 [ %199, %cond.true.275 ], [ %200, %cond.false.276 ]
  %idxprom279 = sext i32 %cond278 to i64
  %201 = load i32, i32* %i, align 4
  %202 = load i32, i32* %jm, align 4
  %cmp280 = icmp slt i32 %201, %202
  br i1 %cmp280, label %cond.true.282, label %cond.false.283

cond.true.282:                                    ; preds = %cond.end.277
  %203 = load i32, i32* %i, align 4
  br label %cond.end.284

cond.false.283:                                   ; preds = %cond.end.277
  %204 = load i32, i32* %jm, align 4
  br label %cond.end.284

cond.end.284:                                     ; preds = %cond.false.283, %cond.true.282
  %cond285 = phi i32 [ %203, %cond.true.282 ], [ %204, %cond.false.283 ]
  %idxprom286 = sext i32 %cond285 to i64
  %205 = load double**, double*** %eff, align 8
  %arrayidx287 = getelementptr inbounds double*, double** %205, i64 %idxprom286
  %206 = load double*, double** %arrayidx287, align 8
  %arrayidx288 = getelementptr inbounds double, double* %206, i64 %idxprom279
  store double 9.999000e+03, double* %arrayidx288, align 8
  br label %if.end.289

if.end.289:                                       ; preds = %cond.end.284, %land.lhs.true, %for.body.185
  %207 = load i32, i32* %jm, align 4
  %idxprom290 = sext i32 %207 to i64
  %208 = load i32, i32* %im, align 4
  %idxprom291 = sext i32 %208 to i64
  %209 = load double**, double*** %eff, align 8
  %arrayidx292 = getelementptr inbounds double*, double** %209, i64 %idxprom291
  %210 = load double*, double** %arrayidx292, align 8
  %arrayidx293 = getelementptr inbounds double, double* %210, i64 %idxprom290
  store double 9.999000e+03, double* %arrayidx293, align 8
  br label %for.inc.294

for.inc.294:                                      ; preds = %if.end.289
  %211 = load i32, i32* %i, align 4
  %inc295 = add nsw i32 %211, 1
  store i32 %inc295, i32* %i, align 4
  br label %for.cond.182

for.end.296:                                      ; preds = %for.cond.182
  br label %for.inc.297

for.inc.297:                                      ; preds = %for.end.296
  %212 = load i32, i32* %k, align 4
  %inc298 = add nsw i32 %212, 1
  store i32 %inc298, i32* %k, align 4
  br label %for.cond.48

for.end.299:                                      ; preds = %for.cond.48
  ret void
}

declare double** @AllocateDoubleMtx(i32, i32) #2

; Function Attrs: nounwind uwtable
define double @ipower(double %x, i32 %n) #0 {
entry:
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %r = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store double 1.000000e+00, double* %r, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %n.addr, align 4
  %and = and i32 %1, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %2 = load double, double* %x.addr, align 8
  %3 = load double, double* %r, align 8
  %mul = fmul double %3, %2
  store double %mul, double* %r, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %4 = load double, double* %x.addr, align 8
  %5 = load double, double* %x.addr, align 8
  %mul1 = fmul double %5, %4
  store double %mul1, double* %x.addr, align 8
  %6 = load i32, i32* %n.addr, align 4
  %shr = ashr i32 %6, 1
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load double, double* %r, align 8
  ret double %7
}

; Function Attrs: nounwind uwtable
define void @countnode(i32 %nseq, i32*** %topol, double** %node) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %node.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %node, double*** %node.addr, align 8
  %0 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %0, 2
  %cmp = icmp slt i32 %sub, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = load i32, i32* %nseq.addr, align 4
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.27, i32 0, i32 0), i32 %2)
  call void @exit(i32 1) #7
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nseq.addr, align 4
  %cmp1 = icmp slt i32 %3, %4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.91, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %nseq.addr, align 4
  %sub3 = sub nsw i32 %8, 2
  %cmp4 = icmp slt i32 %7, %sub3
  br i1 %cmp4, label %for.body.5, label %for.end.93

for.body.5:                                       ; preds = %for.cond.2
  store i32 0, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.22, %for.body.5
  %9 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %9 to i64
  %10 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %10 to i64
  %11 = load i32***, i32**** %topol.addr, align 8
  %arrayidx9 = getelementptr inbounds i32**, i32*** %11, i64 %idxprom8
  %12 = load i32**, i32*** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i32*, i32** %12, i64 0
  %13 = load i32*, i32** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %13, i64 %idxprom7
  %14 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sgt i32 %14, -1
  br i1 %cmp12, label %for.body.13, label %for.end.24

for.body.13:                                      ; preds = %for.cond.6
  %15 = load i32, i32* %j, align 4
  %idxprom14 = sext i32 %15 to i64
  %16 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %16 to i64
  %17 = load i32***, i32**** %topol.addr, align 8
  %arrayidx16 = getelementptr inbounds i32**, i32*** %17, i64 %idxprom15
  %18 = load i32**, i32*** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds i32*, i32** %18, i64 0
  %19 = load i32*, i32** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds i32, i32* %19, i64 %idxprom14
  %20 = load i32, i32* %arrayidx18, align 4
  %idxprom19 = sext i32 %20 to i64
  %arrayidx20 = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom19
  %21 = load double, double* %arrayidx20, align 8
  %inc21 = fadd double %21, 1.000000e+00
  store double %inc21, double* %arrayidx20, align 8
  br label %for.inc.22

for.inc.22:                                       ; preds = %for.body.13
  %22 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %22, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond.6

for.end.24:                                       ; preds = %for.cond.6
  store i32 0, i32* %j, align 4
  br label %for.cond.25

for.cond.25:                                      ; preds = %for.inc.41, %for.end.24
  %23 = load i32, i32* %j, align 4
  %idxprom26 = sext i32 %23 to i64
  %24 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %24 to i64
  %25 = load i32***, i32**** %topol.addr, align 8
  %arrayidx28 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom27
  %26 = load i32**, i32*** %arrayidx28, align 8
  %arrayidx29 = getelementptr inbounds i32*, i32** %26, i64 1
  %27 = load i32*, i32** %arrayidx29, align 8
  %arrayidx30 = getelementptr inbounds i32, i32* %27, i64 %idxprom26
  %28 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp sgt i32 %28, -1
  br i1 %cmp31, label %for.body.32, label %for.end.43

for.body.32:                                      ; preds = %for.cond.25
  %29 = load i32, i32* %j, align 4
  %idxprom33 = sext i32 %29 to i64
  %30 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %30 to i64
  %31 = load i32***, i32**** %topol.addr, align 8
  %arrayidx35 = getelementptr inbounds i32**, i32*** %31, i64 %idxprom34
  %32 = load i32**, i32*** %arrayidx35, align 8
  %arrayidx36 = getelementptr inbounds i32*, i32** %32, i64 1
  %33 = load i32*, i32** %arrayidx36, align 8
  %arrayidx37 = getelementptr inbounds i32, i32* %33, i64 %idxprom33
  %34 = load i32, i32* %arrayidx37, align 4
  %idxprom38 = sext i32 %34 to i64
  %arrayidx39 = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom38
  %35 = load double, double* %arrayidx39, align 8
  %inc40 = fadd double %35, 1.000000e+00
  store double %inc40, double* %arrayidx39, align 8
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.body.32
  %36 = load i32, i32* %j, align 4
  %inc42 = add nsw i32 %36, 1
  store i32 %inc42, i32* %j, align 4
  br label %for.cond.25

for.end.43:                                       ; preds = %for.cond.25
  store i32 0, i32* %j, align 4
  br label %for.cond.44

for.cond.44:                                      ; preds = %for.inc.88, %for.end.43
  %37 = load i32, i32* %j, align 4
  %idxprom45 = sext i32 %37 to i64
  %38 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %38 to i64
  %39 = load i32***, i32**** %topol.addr, align 8
  %arrayidx47 = getelementptr inbounds i32**, i32*** %39, i64 %idxprom46
  %40 = load i32**, i32*** %arrayidx47, align 8
  %arrayidx48 = getelementptr inbounds i32*, i32** %40, i64 0
  %41 = load i32*, i32** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds i32, i32* %41, i64 %idxprom45
  %42 = load i32, i32* %arrayidx49, align 4
  %cmp50 = icmp sgt i32 %42, -1
  br i1 %cmp50, label %for.body.51, label %for.end.90

for.body.51:                                      ; preds = %for.cond.44
  %43 = load i32, i32* %j, align 4
  %idxprom52 = sext i32 %43 to i64
  %44 = load i32, i32* %i, align 4
  %idxprom53 = sext i32 %44 to i64
  %45 = load i32***, i32**** %topol.addr, align 8
  %arrayidx54 = getelementptr inbounds i32**, i32*** %45, i64 %idxprom53
  %46 = load i32**, i32*** %arrayidx54, align 8
  %arrayidx55 = getelementptr inbounds i32*, i32** %46, i64 0
  %47 = load i32*, i32** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds i32, i32* %47, i64 %idxprom52
  %48 = load i32, i32* %arrayidx56, align 4
  store i32 %48, i32* %s1, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.57

for.cond.57:                                      ; preds = %for.inc.85, %for.body.51
  %49 = load i32, i32* %k, align 4
  %idxprom58 = sext i32 %49 to i64
  %50 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %50 to i64
  %51 = load i32***, i32**** %topol.addr, align 8
  %arrayidx60 = getelementptr inbounds i32**, i32*** %51, i64 %idxprom59
  %52 = load i32**, i32*** %arrayidx60, align 8
  %arrayidx61 = getelementptr inbounds i32*, i32** %52, i64 1
  %53 = load i32*, i32** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds i32, i32* %53, i64 %idxprom58
  %54 = load i32, i32* %arrayidx62, align 4
  %cmp63 = icmp sgt i32 %54, -1
  br i1 %cmp63, label %for.body.64, label %for.end.87

for.body.64:                                      ; preds = %for.cond.57
  %55 = load i32, i32* %k, align 4
  %idxprom65 = sext i32 %55 to i64
  %56 = load i32, i32* %i, align 4
  %idxprom66 = sext i32 %56 to i64
  %57 = load i32***, i32**** %topol.addr, align 8
  %arrayidx67 = getelementptr inbounds i32**, i32*** %57, i64 %idxprom66
  %58 = load i32**, i32*** %arrayidx67, align 8
  %arrayidx68 = getelementptr inbounds i32*, i32** %58, i64 1
  %59 = load i32*, i32** %arrayidx68, align 8
  %arrayidx69 = getelementptr inbounds i32, i32* %59, i64 %idxprom65
  %60 = load i32, i32* %arrayidx69, align 4
  store i32 %60, i32* %s2, align 4
  %61 = load i32, i32* %s1, align 4
  %idxprom70 = sext i32 %61 to i64
  %arrayidx71 = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom70
  %62 = load double, double* %arrayidx71, align 8
  %63 = load i32, i32* %s2, align 4
  %idxprom72 = sext i32 %63 to i64
  %arrayidx73 = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom72
  %64 = load double, double* %arrayidx73, align 8
  %add = fadd double %62, %64
  %sub74 = fsub double %add, 1.000000e+00
  %65 = load i32, i32* %s1, align 4
  %66 = load i32, i32* %s2, align 4
  %cmp75 = icmp sgt i32 %65, %66
  br i1 %cmp75, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.64
  %67 = load i32, i32* %s1, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body.64
  %68 = load i32, i32* %s2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %67, %cond.true ], [ %68, %cond.false ]
  %idxprom76 = sext i32 %cond to i64
  %69 = load i32, i32* %s1, align 4
  %70 = load i32, i32* %s2, align 4
  %cmp77 = icmp slt i32 %69, %70
  br i1 %cmp77, label %cond.true.78, label %cond.false.79

cond.true.78:                                     ; preds = %cond.end
  %71 = load i32, i32* %s1, align 4
  br label %cond.end.80

cond.false.79:                                    ; preds = %cond.end
  %72 = load i32, i32* %s2, align 4
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.79, %cond.true.78
  %cond81 = phi i32 [ %71, %cond.true.78 ], [ %72, %cond.false.79 ]
  %idxprom82 = sext i32 %cond81 to i64
  %73 = load double**, double*** %node.addr, align 8
  %arrayidx83 = getelementptr inbounds double*, double** %73, i64 %idxprom82
  %74 = load double*, double** %arrayidx83, align 8
  %arrayidx84 = getelementptr inbounds double, double* %74, i64 %idxprom76
  store double %sub74, double* %arrayidx84, align 8
  br label %for.inc.85

for.inc.85:                                       ; preds = %cond.end.80
  %75 = load i32, i32* %k, align 4
  %inc86 = add nsw i32 %75, 1
  store i32 %inc86, i32* %k, align 4
  br label %for.cond.57

for.end.87:                                       ; preds = %for.cond.57
  br label %for.inc.88

for.inc.88:                                       ; preds = %for.end.87
  %76 = load i32, i32* %j, align 4
  %inc89 = add nsw i32 %76, 1
  store i32 %inc89, i32* %j, align 4
  br label %for.cond.44

for.end.90:                                       ; preds = %for.cond.44
  br label %for.inc.91

for.inc.91:                                       ; preds = %for.end.90
  %77 = load i32, i32* %i, align 4
  %inc92 = add nsw i32 %77, 1
  store i32 %inc92, i32* %i, align 4
  br label %for.cond.2

for.end.93:                                       ; preds = %for.cond.2
  store i32 0, i32* %j, align 4
  br label %for.cond.94

for.cond.94:                                      ; preds = %for.inc.146, %for.end.93
  %78 = load i32, i32* %j, align 4
  %idxprom95 = sext i32 %78 to i64
  %79 = load i32, i32* %nseq.addr, align 4
  %sub96 = sub nsw i32 %79, 2
  %idxprom97 = sext i32 %sub96 to i64
  %80 = load i32***, i32**** %topol.addr, align 8
  %arrayidx98 = getelementptr inbounds i32**, i32*** %80, i64 %idxprom97
  %81 = load i32**, i32*** %arrayidx98, align 8
  %arrayidx99 = getelementptr inbounds i32*, i32** %81, i64 0
  %82 = load i32*, i32** %arrayidx99, align 8
  %arrayidx100 = getelementptr inbounds i32, i32* %82, i64 %idxprom95
  %83 = load i32, i32* %arrayidx100, align 4
  %cmp101 = icmp sgt i32 %83, -1
  br i1 %cmp101, label %for.body.102, label %for.end.148

for.body.102:                                     ; preds = %for.cond.94
  %84 = load i32, i32* %j, align 4
  %idxprom103 = sext i32 %84 to i64
  %85 = load i32, i32* %nseq.addr, align 4
  %sub104 = sub nsw i32 %85, 2
  %idxprom105 = sext i32 %sub104 to i64
  %86 = load i32***, i32**** %topol.addr, align 8
  %arrayidx106 = getelementptr inbounds i32**, i32*** %86, i64 %idxprom105
  %87 = load i32**, i32*** %arrayidx106, align 8
  %arrayidx107 = getelementptr inbounds i32*, i32** %87, i64 0
  %88 = load i32*, i32** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds i32, i32* %88, i64 %idxprom103
  %89 = load i32, i32* %arrayidx108, align 4
  store i32 %89, i32* %s1, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.109

for.cond.109:                                     ; preds = %for.inc.143, %for.body.102
  %90 = load i32, i32* %k, align 4
  %idxprom110 = sext i32 %90 to i64
  %91 = load i32, i32* %nseq.addr, align 4
  %sub111 = sub nsw i32 %91, 2
  %idxprom112 = sext i32 %sub111 to i64
  %92 = load i32***, i32**** %topol.addr, align 8
  %arrayidx113 = getelementptr inbounds i32**, i32*** %92, i64 %idxprom112
  %93 = load i32**, i32*** %arrayidx113, align 8
  %arrayidx114 = getelementptr inbounds i32*, i32** %93, i64 1
  %94 = load i32*, i32** %arrayidx114, align 8
  %arrayidx115 = getelementptr inbounds i32, i32* %94, i64 %idxprom110
  %95 = load i32, i32* %arrayidx115, align 4
  %cmp116 = icmp sgt i32 %95, -1
  br i1 %cmp116, label %for.body.117, label %for.end.145

for.body.117:                                     ; preds = %for.cond.109
  %96 = load i32, i32* %k, align 4
  %idxprom118 = sext i32 %96 to i64
  %97 = load i32, i32* %nseq.addr, align 4
  %sub119 = sub nsw i32 %97, 2
  %idxprom120 = sext i32 %sub119 to i64
  %98 = load i32***, i32**** %topol.addr, align 8
  %arrayidx121 = getelementptr inbounds i32**, i32*** %98, i64 %idxprom120
  %99 = load i32**, i32*** %arrayidx121, align 8
  %arrayidx122 = getelementptr inbounds i32*, i32** %99, i64 1
  %100 = load i32*, i32** %arrayidx122, align 8
  %arrayidx123 = getelementptr inbounds i32, i32* %100, i64 %idxprom118
  %101 = load i32, i32* %arrayidx123, align 4
  store i32 %101, i32* %s2, align 4
  %102 = load i32, i32* %s1, align 4
  %idxprom124 = sext i32 %102 to i64
  %arrayidx125 = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom124
  %103 = load double, double* %arrayidx125, align 8
  %104 = load i32, i32* %s2, align 4
  %idxprom126 = sext i32 %104 to i64
  %arrayidx127 = getelementptr inbounds [50000 x double], [50000 x double]* @countnode.rootnode, i32 0, i64 %idxprom126
  %105 = load double, double* %arrayidx127, align 8
  %add128 = fadd double %103, %105
  %106 = load i32, i32* %s1, align 4
  %107 = load i32, i32* %s2, align 4
  %cmp129 = icmp sgt i32 %106, %107
  br i1 %cmp129, label %cond.true.130, label %cond.false.131

cond.true.130:                                    ; preds = %for.body.117
  %108 = load i32, i32* %s1, align 4
  br label %cond.end.132

cond.false.131:                                   ; preds = %for.body.117
  %109 = load i32, i32* %s2, align 4
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.false.131, %cond.true.130
  %cond133 = phi i32 [ %108, %cond.true.130 ], [ %109, %cond.false.131 ]
  %idxprom134 = sext i32 %cond133 to i64
  %110 = load i32, i32* %s1, align 4
  %111 = load i32, i32* %s2, align 4
  %cmp135 = icmp slt i32 %110, %111
  br i1 %cmp135, label %cond.true.136, label %cond.false.137

cond.true.136:                                    ; preds = %cond.end.132
  %112 = load i32, i32* %s1, align 4
  br label %cond.end.138

cond.false.137:                                   ; preds = %cond.end.132
  %113 = load i32, i32* %s2, align 4
  br label %cond.end.138

cond.end.138:                                     ; preds = %cond.false.137, %cond.true.136
  %cond139 = phi i32 [ %112, %cond.true.136 ], [ %113, %cond.false.137 ]
  %idxprom140 = sext i32 %cond139 to i64
  %114 = load double**, double*** %node.addr, align 8
  %arrayidx141 = getelementptr inbounds double*, double** %114, i64 %idxprom140
  %115 = load double*, double** %arrayidx141, align 8
  %arrayidx142 = getelementptr inbounds double, double* %115, i64 %idxprom134
  store double %add128, double* %arrayidx142, align 8
  br label %for.inc.143

for.inc.143:                                      ; preds = %cond.end.138
  %116 = load i32, i32* %k, align 4
  %inc144 = add nsw i32 %116, 1
  store i32 %inc144, i32* %k, align 4
  br label %for.cond.109

for.end.145:                                      ; preds = %for.cond.109
  br label %for.inc.146

for.inc.146:                                      ; preds = %for.end.145
  %117 = load i32, i32* %j, align 4
  %inc147 = add nsw i32 %117, 1
  store i32 %inc147, i32* %j, align 4
  br label %for.cond.94

for.end.148:                                      ; preds = %for.cond.94
  ret void
}

; Function Attrs: nounwind uwtable
define void @countnode_int(i32 %nseq, i32*** %topol, i32** %node) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %node.addr = alloca i32**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %rootnode = alloca [50000 x i32], align 16
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store i32** %node, i32*** %node.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.89, %for.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %5, 2
  %cmp2 = icmp slt i32 %4, %sub
  br i1 %cmp2, label %for.body.3, label %for.end.91

for.body.3:                                       ; preds = %for.cond.1
  store i32 0, i32* %j, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.20, %for.body.3
  %6 = load i32, i32* %j, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %7 to i64
  %8 = load i32***, i32**** %topol.addr, align 8
  %arrayidx7 = getelementptr inbounds i32**, i32*** %8, i64 %idxprom6
  %9 = load i32**, i32*** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i32*, i32** %9, i64 0
  %10 = load i32*, i32** %arrayidx8, align 8
  %arrayidx9 = getelementptr inbounds i32, i32* %10, i64 %idxprom5
  %11 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp sgt i32 %11, -1
  br i1 %cmp10, label %for.body.11, label %for.end.22

for.body.11:                                      ; preds = %for.cond.4
  %12 = load i32, i32* %j, align 4
  %idxprom12 = sext i32 %12 to i64
  %13 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %13 to i64
  %14 = load i32***, i32**** %topol.addr, align 8
  %arrayidx14 = getelementptr inbounds i32**, i32*** %14, i64 %idxprom13
  %15 = load i32**, i32*** %arrayidx14, align 8
  %arrayidx15 = getelementptr inbounds i32*, i32** %15, i64 0
  %16 = load i32*, i32** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i32, i32* %16, i64 %idxprom12
  %17 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %17 to i64
  %arrayidx18 = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom17
  %18 = load i32, i32* %arrayidx18, align 4
  %inc19 = add nsw i32 %18, 1
  store i32 %inc19, i32* %arrayidx18, align 4
  br label %for.inc.20

for.inc.20:                                       ; preds = %for.body.11
  %19 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %19, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond.4

for.end.22:                                       ; preds = %for.cond.4
  store i32 0, i32* %j, align 4
  br label %for.cond.23

for.cond.23:                                      ; preds = %for.inc.39, %for.end.22
  %20 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %20 to i64
  %21 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %21 to i64
  %22 = load i32***, i32**** %topol.addr, align 8
  %arrayidx26 = getelementptr inbounds i32**, i32*** %22, i64 %idxprom25
  %23 = load i32**, i32*** %arrayidx26, align 8
  %arrayidx27 = getelementptr inbounds i32*, i32** %23, i64 1
  %24 = load i32*, i32** %arrayidx27, align 8
  %arrayidx28 = getelementptr inbounds i32, i32* %24, i64 %idxprom24
  %25 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp sgt i32 %25, -1
  br i1 %cmp29, label %for.body.30, label %for.end.41

for.body.30:                                      ; preds = %for.cond.23
  %26 = load i32, i32* %j, align 4
  %idxprom31 = sext i32 %26 to i64
  %27 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %27 to i64
  %28 = load i32***, i32**** %topol.addr, align 8
  %arrayidx33 = getelementptr inbounds i32**, i32*** %28, i64 %idxprom32
  %29 = load i32**, i32*** %arrayidx33, align 8
  %arrayidx34 = getelementptr inbounds i32*, i32** %29, i64 1
  %30 = load i32*, i32** %arrayidx34, align 8
  %arrayidx35 = getelementptr inbounds i32, i32* %30, i64 %idxprom31
  %31 = load i32, i32* %arrayidx35, align 4
  %idxprom36 = sext i32 %31 to i64
  %arrayidx37 = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom36
  %32 = load i32, i32* %arrayidx37, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %arrayidx37, align 4
  br label %for.inc.39

for.inc.39:                                       ; preds = %for.body.30
  %33 = load i32, i32* %j, align 4
  %inc40 = add nsw i32 %33, 1
  store i32 %inc40, i32* %j, align 4
  br label %for.cond.23

for.end.41:                                       ; preds = %for.cond.23
  store i32 0, i32* %j, align 4
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc.86, %for.end.41
  %34 = load i32, i32* %j, align 4
  %idxprom43 = sext i32 %34 to i64
  %35 = load i32, i32* %i, align 4
  %idxprom44 = sext i32 %35 to i64
  %36 = load i32***, i32**** %topol.addr, align 8
  %arrayidx45 = getelementptr inbounds i32**, i32*** %36, i64 %idxprom44
  %37 = load i32**, i32*** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds i32*, i32** %37, i64 0
  %38 = load i32*, i32** %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds i32, i32* %38, i64 %idxprom43
  %39 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp sgt i32 %39, -1
  br i1 %cmp48, label %for.body.49, label %for.end.88

for.body.49:                                      ; preds = %for.cond.42
  %40 = load i32, i32* %j, align 4
  %idxprom50 = sext i32 %40 to i64
  %41 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %41 to i64
  %42 = load i32***, i32**** %topol.addr, align 8
  %arrayidx52 = getelementptr inbounds i32**, i32*** %42, i64 %idxprom51
  %43 = load i32**, i32*** %arrayidx52, align 8
  %arrayidx53 = getelementptr inbounds i32*, i32** %43, i64 0
  %44 = load i32*, i32** %arrayidx53, align 8
  %arrayidx54 = getelementptr inbounds i32, i32* %44, i64 %idxprom50
  %45 = load i32, i32* %arrayidx54, align 4
  store i32 %45, i32* %s1, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc.83, %for.body.49
  %46 = load i32, i32* %k, align 4
  %idxprom56 = sext i32 %46 to i64
  %47 = load i32, i32* %i, align 4
  %idxprom57 = sext i32 %47 to i64
  %48 = load i32***, i32**** %topol.addr, align 8
  %arrayidx58 = getelementptr inbounds i32**, i32*** %48, i64 %idxprom57
  %49 = load i32**, i32*** %arrayidx58, align 8
  %arrayidx59 = getelementptr inbounds i32*, i32** %49, i64 1
  %50 = load i32*, i32** %arrayidx59, align 8
  %arrayidx60 = getelementptr inbounds i32, i32* %50, i64 %idxprom56
  %51 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp sgt i32 %51, -1
  br i1 %cmp61, label %for.body.62, label %for.end.85

for.body.62:                                      ; preds = %for.cond.55
  %52 = load i32, i32* %k, align 4
  %idxprom63 = sext i32 %52 to i64
  %53 = load i32, i32* %i, align 4
  %idxprom64 = sext i32 %53 to i64
  %54 = load i32***, i32**** %topol.addr, align 8
  %arrayidx65 = getelementptr inbounds i32**, i32*** %54, i64 %idxprom64
  %55 = load i32**, i32*** %arrayidx65, align 8
  %arrayidx66 = getelementptr inbounds i32*, i32** %55, i64 1
  %56 = load i32*, i32** %arrayidx66, align 8
  %arrayidx67 = getelementptr inbounds i32, i32* %56, i64 %idxprom63
  %57 = load i32, i32* %arrayidx67, align 4
  store i32 %57, i32* %s2, align 4
  %58 = load i32, i32* %s1, align 4
  %idxprom68 = sext i32 %58 to i64
  %arrayidx69 = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom68
  %59 = load i32, i32* %arrayidx69, align 4
  %60 = load i32, i32* %s2, align 4
  %idxprom70 = sext i32 %60 to i64
  %arrayidx71 = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom70
  %61 = load i32, i32* %arrayidx71, align 4
  %add = add nsw i32 %59, %61
  %sub72 = sub nsw i32 %add, 1
  %62 = load i32, i32* %s1, align 4
  %63 = load i32, i32* %s2, align 4
  %cmp73 = icmp sgt i32 %62, %63
  br i1 %cmp73, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.62
  %64 = load i32, i32* %s1, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body.62
  %65 = load i32, i32* %s2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %64, %cond.true ], [ %65, %cond.false ]
  %idxprom74 = sext i32 %cond to i64
  %66 = load i32, i32* %s1, align 4
  %67 = load i32, i32* %s2, align 4
  %cmp75 = icmp slt i32 %66, %67
  br i1 %cmp75, label %cond.true.76, label %cond.false.77

cond.true.76:                                     ; preds = %cond.end
  %68 = load i32, i32* %s1, align 4
  br label %cond.end.78

cond.false.77:                                    ; preds = %cond.end
  %69 = load i32, i32* %s2, align 4
  br label %cond.end.78

cond.end.78:                                      ; preds = %cond.false.77, %cond.true.76
  %cond79 = phi i32 [ %68, %cond.true.76 ], [ %69, %cond.false.77 ]
  %idxprom80 = sext i32 %cond79 to i64
  %70 = load i32**, i32*** %node.addr, align 8
  %arrayidx81 = getelementptr inbounds i32*, i32** %70, i64 %idxprom80
  %71 = load i32*, i32** %arrayidx81, align 8
  %arrayidx82 = getelementptr inbounds i32, i32* %71, i64 %idxprom74
  store i32 %sub72, i32* %arrayidx82, align 4
  br label %for.inc.83

for.inc.83:                                       ; preds = %cond.end.78
  %72 = load i32, i32* %k, align 4
  %inc84 = add nsw i32 %72, 1
  store i32 %inc84, i32* %k, align 4
  br label %for.cond.55

for.end.85:                                       ; preds = %for.cond.55
  br label %for.inc.86

for.inc.86:                                       ; preds = %for.end.85
  %73 = load i32, i32* %j, align 4
  %inc87 = add nsw i32 %73, 1
  store i32 %inc87, i32* %j, align 4
  br label %for.cond.42

for.end.88:                                       ; preds = %for.cond.42
  br label %for.inc.89

for.inc.89:                                       ; preds = %for.end.88
  %74 = load i32, i32* %i, align 4
  %inc90 = add nsw i32 %74, 1
  store i32 %inc90, i32* %i, align 4
  br label %for.cond.1

for.end.91:                                       ; preds = %for.cond.1
  store i32 0, i32* %j, align 4
  br label %for.cond.92

for.cond.92:                                      ; preds = %for.inc.144, %for.end.91
  %75 = load i32, i32* %j, align 4
  %idxprom93 = sext i32 %75 to i64
  %76 = load i32, i32* %nseq.addr, align 4
  %sub94 = sub nsw i32 %76, 2
  %idxprom95 = sext i32 %sub94 to i64
  %77 = load i32***, i32**** %topol.addr, align 8
  %arrayidx96 = getelementptr inbounds i32**, i32*** %77, i64 %idxprom95
  %78 = load i32**, i32*** %arrayidx96, align 8
  %arrayidx97 = getelementptr inbounds i32*, i32** %78, i64 0
  %79 = load i32*, i32** %arrayidx97, align 8
  %arrayidx98 = getelementptr inbounds i32, i32* %79, i64 %idxprom93
  %80 = load i32, i32* %arrayidx98, align 4
  %cmp99 = icmp sgt i32 %80, -1
  br i1 %cmp99, label %for.body.100, label %for.end.146

for.body.100:                                     ; preds = %for.cond.92
  %81 = load i32, i32* %j, align 4
  %idxprom101 = sext i32 %81 to i64
  %82 = load i32, i32* %nseq.addr, align 4
  %sub102 = sub nsw i32 %82, 2
  %idxprom103 = sext i32 %sub102 to i64
  %83 = load i32***, i32**** %topol.addr, align 8
  %arrayidx104 = getelementptr inbounds i32**, i32*** %83, i64 %idxprom103
  %84 = load i32**, i32*** %arrayidx104, align 8
  %arrayidx105 = getelementptr inbounds i32*, i32** %84, i64 0
  %85 = load i32*, i32** %arrayidx105, align 8
  %arrayidx106 = getelementptr inbounds i32, i32* %85, i64 %idxprom101
  %86 = load i32, i32* %arrayidx106, align 4
  store i32 %86, i32* %s1, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.107

for.cond.107:                                     ; preds = %for.inc.141, %for.body.100
  %87 = load i32, i32* %k, align 4
  %idxprom108 = sext i32 %87 to i64
  %88 = load i32, i32* %nseq.addr, align 4
  %sub109 = sub nsw i32 %88, 2
  %idxprom110 = sext i32 %sub109 to i64
  %89 = load i32***, i32**** %topol.addr, align 8
  %arrayidx111 = getelementptr inbounds i32**, i32*** %89, i64 %idxprom110
  %90 = load i32**, i32*** %arrayidx111, align 8
  %arrayidx112 = getelementptr inbounds i32*, i32** %90, i64 1
  %91 = load i32*, i32** %arrayidx112, align 8
  %arrayidx113 = getelementptr inbounds i32, i32* %91, i64 %idxprom108
  %92 = load i32, i32* %arrayidx113, align 4
  %cmp114 = icmp sgt i32 %92, -1
  br i1 %cmp114, label %for.body.115, label %for.end.143

for.body.115:                                     ; preds = %for.cond.107
  %93 = load i32, i32* %k, align 4
  %idxprom116 = sext i32 %93 to i64
  %94 = load i32, i32* %nseq.addr, align 4
  %sub117 = sub nsw i32 %94, 2
  %idxprom118 = sext i32 %sub117 to i64
  %95 = load i32***, i32**** %topol.addr, align 8
  %arrayidx119 = getelementptr inbounds i32**, i32*** %95, i64 %idxprom118
  %96 = load i32**, i32*** %arrayidx119, align 8
  %arrayidx120 = getelementptr inbounds i32*, i32** %96, i64 1
  %97 = load i32*, i32** %arrayidx120, align 8
  %arrayidx121 = getelementptr inbounds i32, i32* %97, i64 %idxprom116
  %98 = load i32, i32* %arrayidx121, align 4
  store i32 %98, i32* %s2, align 4
  %99 = load i32, i32* %s1, align 4
  %idxprom122 = sext i32 %99 to i64
  %arrayidx123 = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom122
  %100 = load i32, i32* %arrayidx123, align 4
  %101 = load i32, i32* %s2, align 4
  %idxprom124 = sext i32 %101 to i64
  %arrayidx125 = getelementptr inbounds [50000 x i32], [50000 x i32]* %rootnode, i32 0, i64 %idxprom124
  %102 = load i32, i32* %arrayidx125, align 4
  %add126 = add nsw i32 %100, %102
  %103 = load i32, i32* %s1, align 4
  %104 = load i32, i32* %s2, align 4
  %cmp127 = icmp sgt i32 %103, %104
  br i1 %cmp127, label %cond.true.128, label %cond.false.129

cond.true.128:                                    ; preds = %for.body.115
  %105 = load i32, i32* %s1, align 4
  br label %cond.end.130

cond.false.129:                                   ; preds = %for.body.115
  %106 = load i32, i32* %s2, align 4
  br label %cond.end.130

cond.end.130:                                     ; preds = %cond.false.129, %cond.true.128
  %cond131 = phi i32 [ %105, %cond.true.128 ], [ %106, %cond.false.129 ]
  %idxprom132 = sext i32 %cond131 to i64
  %107 = load i32, i32* %s1, align 4
  %108 = load i32, i32* %s2, align 4
  %cmp133 = icmp slt i32 %107, %108
  br i1 %cmp133, label %cond.true.134, label %cond.false.135

cond.true.134:                                    ; preds = %cond.end.130
  %109 = load i32, i32* %s1, align 4
  br label %cond.end.136

cond.false.135:                                   ; preds = %cond.end.130
  %110 = load i32, i32* %s2, align 4
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.135, %cond.true.134
  %cond137 = phi i32 [ %109, %cond.true.134 ], [ %110, %cond.false.135 ]
  %idxprom138 = sext i32 %cond137 to i64
  %111 = load i32**, i32*** %node.addr, align 8
  %arrayidx139 = getelementptr inbounds i32*, i32** %111, i64 %idxprom138
  %112 = load i32*, i32** %arrayidx139, align 8
  %arrayidx140 = getelementptr inbounds i32, i32* %112, i64 %idxprom132
  store i32 %add126, i32* %arrayidx140, align 4
  br label %for.inc.141

for.inc.141:                                      ; preds = %cond.end.136
  %113 = load i32, i32* %k, align 4
  %inc142 = add nsw i32 %113, 1
  store i32 %inc142, i32* %k, align 4
  br label %for.cond.107

for.end.143:                                      ; preds = %for.cond.107
  br label %for.inc.144

for.inc.144:                                      ; preds = %for.end.143
  %114 = load i32, i32* %j, align 4
  %inc145 = add nsw i32 %114, 1
  store i32 %inc145, i32* %j, align 4
  br label %for.cond.92

for.end.146:                                      ; preds = %for.cond.92
  store i32 0, i32* %i, align 4
  br label %for.cond.147

for.cond.147:                                     ; preds = %for.inc.166, %for.end.146
  %115 = load i32, i32* %i, align 4
  %116 = load i32, i32* %nseq.addr, align 4
  %sub148 = sub nsw i32 %116, 1
  %cmp149 = icmp slt i32 %115, %sub148
  br i1 %cmp149, label %for.body.150, label %for.end.168

for.body.150:                                     ; preds = %for.cond.147
  %117 = load i32, i32* %i, align 4
  %add151 = add nsw i32 %117, 1
  store i32 %add151, i32* %j, align 4
  br label %for.cond.152

for.cond.152:                                     ; preds = %for.inc.163, %for.body.150
  %118 = load i32, i32* %j, align 4
  %119 = load i32, i32* %nseq.addr, align 4
  %cmp153 = icmp slt i32 %118, %119
  br i1 %cmp153, label %for.body.154, label %for.end.165

for.body.154:                                     ; preds = %for.cond.152
  %120 = load i32, i32* %j, align 4
  %idxprom155 = sext i32 %120 to i64
  %121 = load i32, i32* %i, align 4
  %idxprom156 = sext i32 %121 to i64
  %122 = load i32**, i32*** %node.addr, align 8
  %arrayidx157 = getelementptr inbounds i32*, i32** %122, i64 %idxprom156
  %123 = load i32*, i32** %arrayidx157, align 8
  %arrayidx158 = getelementptr inbounds i32, i32* %123, i64 %idxprom155
  %124 = load i32, i32* %arrayidx158, align 4
  %125 = load i32, i32* %i, align 4
  %idxprom159 = sext i32 %125 to i64
  %126 = load i32, i32* %j, align 4
  %idxprom160 = sext i32 %126 to i64
  %127 = load i32**, i32*** %node.addr, align 8
  %arrayidx161 = getelementptr inbounds i32*, i32** %127, i64 %idxprom160
  %128 = load i32*, i32** %arrayidx161, align 8
  %arrayidx162 = getelementptr inbounds i32, i32* %128, i64 %idxprom159
  store i32 %124, i32* %arrayidx162, align 4
  br label %for.inc.163

for.inc.163:                                      ; preds = %for.body.154
  %129 = load i32, i32* %j, align 4
  %inc164 = add nsw i32 %129, 1
  store i32 %inc164, i32* %j, align 4
  br label %for.cond.152

for.end.165:                                      ; preds = %for.cond.152
  br label %for.inc.166

for.inc.166:                                      ; preds = %for.end.165
  %130 = load i32, i32* %i, align 4
  %inc167 = add nsw i32 %130, 1
  store i32 %inc167, i32* %i, align 4
  br label %for.cond.147

for.end.168:                                      ; preds = %for.cond.147
  ret void
}

; Function Attrs: nounwind uwtable
define void @counteff_simple_float(i32 %nseq, i32*** %topol, float** %len, double* %node) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca float**, align 8
  %node.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %total = alloca double, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store float** %len, float*** %len.addr, align 8
  store double* %node, double** %node.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.rootnode, i32 0, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.eff, i32 0, i64 %idxprom1
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.52, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp4 = icmp slt i32 %5, %sub
  br i1 %cmp4, label %for.body.5, label %for.end.54

for.body.5:                                       ; preds = %for.cond.3
  store i32 0, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.24, %for.body.5
  %7 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %8 to i64
  %9 = load i32***, i32**** %topol.addr, align 8
  %arrayidx9 = getelementptr inbounds i32**, i32*** %9, i64 %idxprom8
  %10 = load i32**, i32*** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i32*, i32** %10, i64 0
  %11 = load i32*, i32** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %11, i64 %idxprom7
  %12 = load i32, i32* %arrayidx11, align 4
  store i32 %12, i32* %s1, align 4
  %cmp12 = icmp sgt i32 %12, -1
  br i1 %cmp12, label %for.body.13, label %for.end.26

for.body.13:                                      ; preds = %for.cond.6
  %13 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %13 to i64
  %14 = load float**, float*** %len.addr, align 8
  %arrayidx15 = getelementptr inbounds float*, float** %14, i64 %idxprom14
  %15 = load float*, float** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds float, float* %15, i64 0
  %16 = load float, float* %arrayidx16, align 4
  %conv = fpext float %16 to double
  %17 = load i32, i32* %s1, align 4
  %idxprom17 = sext i32 %17 to i64
  %arrayidx18 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.eff, i32 0, i64 %idxprom17
  %18 = load double, double* %arrayidx18, align 8
  %mul = fmul double %conv, %18
  %19 = load i32, i32* %s1, align 4
  %idxprom19 = sext i32 %19 to i64
  %arrayidx20 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.rootnode, i32 0, i64 %idxprom19
  %20 = load double, double* %arrayidx20, align 8
  %add = fadd double %20, %mul
  store double %add, double* %arrayidx20, align 8
  %21 = load i32, i32* %s1, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.eff, i32 0, i64 %idxprom21
  %22 = load double, double* %arrayidx22, align 8
  %mul23 = fmul double %22, 5.000000e-01
  store double %mul23, double* %arrayidx22, align 8
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.body.13
  %23 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %23, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond.6

for.end.26:                                       ; preds = %for.cond.6
  store i32 0, i32* %j, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.49, %for.end.26
  %24 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %24 to i64
  %25 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %25 to i64
  %26 = load i32***, i32**** %topol.addr, align 8
  %arrayidx30 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom29
  %27 = load i32**, i32*** %arrayidx30, align 8
  %arrayidx31 = getelementptr inbounds i32*, i32** %27, i64 1
  %28 = load i32*, i32** %arrayidx31, align 8
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i64 %idxprom28
  %29 = load i32, i32* %arrayidx32, align 4
  store i32 %29, i32* %s2, align 4
  %cmp33 = icmp sgt i32 %29, -1
  br i1 %cmp33, label %for.body.35, label %for.end.51

for.body.35:                                      ; preds = %for.cond.27
  %30 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %30 to i64
  %31 = load float**, float*** %len.addr, align 8
  %arrayidx37 = getelementptr inbounds float*, float** %31, i64 %idxprom36
  %32 = load float*, float** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds float, float* %32, i64 1
  %33 = load float, float* %arrayidx38, align 4
  %conv39 = fpext float %33 to double
  %34 = load i32, i32* %s2, align 4
  %idxprom40 = sext i32 %34 to i64
  %arrayidx41 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.eff, i32 0, i64 %idxprom40
  %35 = load double, double* %arrayidx41, align 8
  %mul42 = fmul double %conv39, %35
  %36 = load i32, i32* %s2, align 4
  %idxprom43 = sext i32 %36 to i64
  %arrayidx44 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.rootnode, i32 0, i64 %idxprom43
  %37 = load double, double* %arrayidx44, align 8
  %add45 = fadd double %37, %mul42
  store double %add45, double* %arrayidx44, align 8
  %38 = load i32, i32* %s2, align 4
  %idxprom46 = sext i32 %38 to i64
  %arrayidx47 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.eff, i32 0, i64 %idxprom46
  %39 = load double, double* %arrayidx47, align 8
  %mul48 = fmul double %39, 5.000000e-01
  store double %mul48, double* %arrayidx47, align 8
  br label %for.inc.49

for.inc.49:                                       ; preds = %for.body.35
  %40 = load i32, i32* %j, align 4
  %inc50 = add nsw i32 %40, 1
  store i32 %inc50, i32* %j, align 4
  br label %for.cond.27

for.end.51:                                       ; preds = %for.cond.27
  br label %for.inc.52

for.inc.52:                                       ; preds = %for.end.51
  %41 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %41, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond.3

for.end.54:                                       ; preds = %for.cond.3
  store i32 0, i32* %i, align 4
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc.62, %for.end.54
  %42 = load i32, i32* %i, align 4
  %43 = load i32, i32* %nseq.addr, align 4
  %cmp56 = icmp slt i32 %42, %43
  br i1 %cmp56, label %for.body.58, label %for.end.64

for.body.58:                                      ; preds = %for.cond.55
  %44 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %44 to i64
  %arrayidx60 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.rootnode, i32 0, i64 %idxprom59
  %45 = load double, double* %arrayidx60, align 8
  %add61 = fadd double %45, 1.000000e-03
  store double %add61, double* %arrayidx60, align 8
  br label %for.inc.62

for.inc.62:                                       ; preds = %for.body.58
  %46 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %46, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond.55

for.end.64:                                       ; preds = %for.cond.55
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.65

for.cond.65:                                      ; preds = %for.inc.72, %for.end.64
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %nseq.addr, align 4
  %cmp66 = icmp slt i32 %47, %48
  br i1 %cmp66, label %for.body.68, label %for.end.74

for.body.68:                                      ; preds = %for.cond.65
  %49 = load i32, i32* %i, align 4
  %idxprom69 = sext i32 %49 to i64
  %arrayidx70 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.rootnode, i32 0, i64 %idxprom69
  %50 = load double, double* %arrayidx70, align 8
  %51 = load double, double* %total, align 8
  %add71 = fadd double %51, %50
  store double %add71, double* %total, align 8
  br label %for.inc.72

for.inc.72:                                       ; preds = %for.body.68
  %52 = load i32, i32* %i, align 4
  %inc73 = add nsw i32 %52, 1
  store i32 %inc73, i32* %i, align 4
  br label %for.cond.65

for.end.74:                                       ; preds = %for.cond.65
  store i32 0, i32* %i, align 4
  br label %for.cond.75

for.cond.75:                                      ; preds = %for.inc.83, %for.end.74
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %nseq.addr, align 4
  %cmp76 = icmp slt i32 %53, %54
  br i1 %cmp76, label %for.body.78, label %for.end.85

for.body.78:                                      ; preds = %for.cond.75
  %55 = load i32, i32* %i, align 4
  %idxprom79 = sext i32 %55 to i64
  %arrayidx80 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple_float.rootnode, i32 0, i64 %idxprom79
  %56 = load double, double* %arrayidx80, align 8
  %57 = load double, double* %total, align 8
  %div = fdiv double %56, %57
  %58 = load i32, i32* %i, align 4
  %idxprom81 = sext i32 %58 to i64
  %59 = load double*, double** %node.addr, align 8
  %arrayidx82 = getelementptr inbounds double, double* %59, i64 %idxprom81
  store double %div, double* %arrayidx82, align 8
  br label %for.inc.83

for.inc.83:                                       ; preds = %for.body.78
  %60 = load i32, i32* %i, align 4
  %inc84 = add nsw i32 %60, 1
  store i32 %inc84, i32* %i, align 4
  br label %for.cond.75

for.end.85:                                       ; preds = %for.cond.75
  ret void
}

; Function Attrs: nounwind uwtable
define void @counteff_simple(i32 %nseq, i32*** %topol, double** %len, double* %node) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %node.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %total = alloca double, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store double* %node, double** %node.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.rootnode, i32 0, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.eff, i32 0, i64 %idxprom1
  store double 1.000000e+00, double* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.50, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %6, 1
  %cmp4 = icmp slt i32 %5, %sub
  br i1 %cmp4, label %for.body.5, label %for.end.52

for.body.5:                                       ; preds = %for.cond.3
  store i32 0, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.24, %for.body.5
  %7 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %8 to i64
  %9 = load i32***, i32**** %topol.addr, align 8
  %arrayidx9 = getelementptr inbounds i32**, i32*** %9, i64 %idxprom8
  %10 = load i32**, i32*** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i32*, i32** %10, i64 0
  %11 = load i32*, i32** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %11, i64 %idxprom7
  %12 = load i32, i32* %arrayidx11, align 4
  store i32 %12, i32* %s1, align 4
  %cmp12 = icmp sgt i32 %12, -1
  br i1 %cmp12, label %for.body.13, label %for.end.26

for.body.13:                                      ; preds = %for.cond.6
  %13 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %13 to i64
  %14 = load double**, double*** %len.addr, align 8
  %arrayidx15 = getelementptr inbounds double*, double** %14, i64 %idxprom14
  %15 = load double*, double** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds double, double* %15, i64 0
  %16 = load double, double* %arrayidx16, align 8
  %17 = load i32, i32* %s1, align 4
  %idxprom17 = sext i32 %17 to i64
  %arrayidx18 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.eff, i32 0, i64 %idxprom17
  %18 = load double, double* %arrayidx18, align 8
  %mul = fmul double %16, %18
  %19 = load i32, i32* %s1, align 4
  %idxprom19 = sext i32 %19 to i64
  %arrayidx20 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.rootnode, i32 0, i64 %idxprom19
  %20 = load double, double* %arrayidx20, align 8
  %add = fadd double %20, %mul
  store double %add, double* %arrayidx20, align 8
  %21 = load i32, i32* %s1, align 4
  %idxprom21 = sext i32 %21 to i64
  %arrayidx22 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.eff, i32 0, i64 %idxprom21
  %22 = load double, double* %arrayidx22, align 8
  %mul23 = fmul double %22, 5.000000e-01
  store double %mul23, double* %arrayidx22, align 8
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.body.13
  %23 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %23, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond.6

for.end.26:                                       ; preds = %for.cond.6
  store i32 0, i32* %j, align 4
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.47, %for.end.26
  %24 = load i32, i32* %j, align 4
  %idxprom28 = sext i32 %24 to i64
  %25 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %25 to i64
  %26 = load i32***, i32**** %topol.addr, align 8
  %arrayidx30 = getelementptr inbounds i32**, i32*** %26, i64 %idxprom29
  %27 = load i32**, i32*** %arrayidx30, align 8
  %arrayidx31 = getelementptr inbounds i32*, i32** %27, i64 1
  %28 = load i32*, i32** %arrayidx31, align 8
  %arrayidx32 = getelementptr inbounds i32, i32* %28, i64 %idxprom28
  %29 = load i32, i32* %arrayidx32, align 4
  store i32 %29, i32* %s2, align 4
  %cmp33 = icmp sgt i32 %29, -1
  br i1 %cmp33, label %for.body.34, label %for.end.49

for.body.34:                                      ; preds = %for.cond.27
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %31 = load double**, double*** %len.addr, align 8
  %arrayidx36 = getelementptr inbounds double*, double** %31, i64 %idxprom35
  %32 = load double*, double** %arrayidx36, align 8
  %arrayidx37 = getelementptr inbounds double, double* %32, i64 1
  %33 = load double, double* %arrayidx37, align 8
  %34 = load i32, i32* %s2, align 4
  %idxprom38 = sext i32 %34 to i64
  %arrayidx39 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.eff, i32 0, i64 %idxprom38
  %35 = load double, double* %arrayidx39, align 8
  %mul40 = fmul double %33, %35
  %36 = load i32, i32* %s2, align 4
  %idxprom41 = sext i32 %36 to i64
  %arrayidx42 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.rootnode, i32 0, i64 %idxprom41
  %37 = load double, double* %arrayidx42, align 8
  %add43 = fadd double %37, %mul40
  store double %add43, double* %arrayidx42, align 8
  %38 = load i32, i32* %s2, align 4
  %idxprom44 = sext i32 %38 to i64
  %arrayidx45 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.eff, i32 0, i64 %idxprom44
  %39 = load double, double* %arrayidx45, align 8
  %mul46 = fmul double %39, 5.000000e-01
  store double %mul46, double* %arrayidx45, align 8
  br label %for.inc.47

for.inc.47:                                       ; preds = %for.body.34
  %40 = load i32, i32* %j, align 4
  %inc48 = add nsw i32 %40, 1
  store i32 %inc48, i32* %j, align 4
  br label %for.cond.27

for.end.49:                                       ; preds = %for.cond.27
  br label %for.inc.50

for.inc.50:                                       ; preds = %for.end.49
  %41 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %41, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond.3

for.end.52:                                       ; preds = %for.cond.3
  store i32 0, i32* %i, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.59, %for.end.52
  %42 = load i32, i32* %i, align 4
  %43 = load i32, i32* %nseq.addr, align 4
  %cmp54 = icmp slt i32 %42, %43
  br i1 %cmp54, label %for.body.55, label %for.end.61

for.body.55:                                      ; preds = %for.cond.53
  %44 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %44 to i64
  %arrayidx57 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.rootnode, i32 0, i64 %idxprom56
  %45 = load double, double* %arrayidx57, align 8
  %add58 = fadd double %45, 1.000000e-03
  store double %add58, double* %arrayidx57, align 8
  br label %for.inc.59

for.inc.59:                                       ; preds = %for.body.55
  %46 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %46, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond.53

for.end.61:                                       ; preds = %for.cond.53
  store double 0.000000e+00, double* %total, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond.62

for.cond.62:                                      ; preds = %for.inc.68, %for.end.61
  %47 = load i32, i32* %i, align 4
  %48 = load i32, i32* %nseq.addr, align 4
  %cmp63 = icmp slt i32 %47, %48
  br i1 %cmp63, label %for.body.64, label %for.end.70

for.body.64:                                      ; preds = %for.cond.62
  %49 = load i32, i32* %i, align 4
  %idxprom65 = sext i32 %49 to i64
  %arrayidx66 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.rootnode, i32 0, i64 %idxprom65
  %50 = load double, double* %arrayidx66, align 8
  %51 = load double, double* %total, align 8
  %add67 = fadd double %51, %50
  store double %add67, double* %total, align 8
  br label %for.inc.68

for.inc.68:                                       ; preds = %for.body.64
  %52 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %52, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond.62

for.end.70:                                       ; preds = %for.cond.62
  store i32 0, i32* %i, align 4
  br label %for.cond.71

for.cond.71:                                      ; preds = %for.inc.78, %for.end.70
  %53 = load i32, i32* %i, align 4
  %54 = load i32, i32* %nseq.addr, align 4
  %cmp72 = icmp slt i32 %53, %54
  br i1 %cmp72, label %for.body.73, label %for.end.80

for.body.73:                                      ; preds = %for.cond.71
  %55 = load i32, i32* %i, align 4
  %idxprom74 = sext i32 %55 to i64
  %arrayidx75 = getelementptr inbounds [50000 x double], [50000 x double]* @counteff_simple.rootnode, i32 0, i64 %idxprom74
  %56 = load double, double* %arrayidx75, align 8
  %57 = load double, double* %total, align 8
  %div = fdiv double %56, %57
  %58 = load i32, i32* %i, align 4
  %idxprom76 = sext i32 %58 to i64
  %59 = load double*, double** %node.addr, align 8
  %arrayidx77 = getelementptr inbounds double, double* %59, i64 %idxprom76
  store double %div, double* %arrayidx77, align 8
  br label %for.inc.78

for.inc.78:                                       ; preds = %for.body.73
  %60 = load i32, i32* %i, align 4
  %inc79 = add nsw i32 %60, 1
  store i32 %inc79, i32* %i, align 4
  br label %for.cond.71

for.end.80:                                       ; preds = %for.cond.71
  ret void
}

; Function Attrs: nounwind uwtable
define void @counteff(i32 %nseq, i32*** %topol, double** %len, double** %node) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %node.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %rootnode = alloca [50000 x double], align 16
  %eff = alloca [50000 x double], align 16
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store double** %node, double*** %node.addr, align 8
  %0 = load i32, i32* @mix, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @weight, align 4
  switch i32 %1, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.then
  store i32 3, i32* @weight, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.then
  store i32 2, i32* @weight, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  call void @ErrorExit(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.1, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %entry
  %2 = load i32, i32* @weight, align 4
  %cmp = icmp eq i32 %2, 2
  br i1 %cmp, label %if.then.2, label %if.end.198

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nseq.addr, align 4
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.92, %for.end
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %8, 2
  %cmp5 = icmp slt i32 %7, %sub
  br i1 %cmp5, label %for.body.6, label %for.end.94

for.body.6:                                       ; preds = %for.cond.4
  store i32 0, i32* %j, align 4
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc.23, %for.body.6
  %9 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %9 to i64
  %10 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %10 to i64
  %11 = load i32***, i32**** %topol.addr, align 8
  %arrayidx10 = getelementptr inbounds i32**, i32*** %11, i64 %idxprom9
  %12 = load i32**, i32*** %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds i32*, i32** %12, i64 0
  %13 = load i32*, i32** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %13, i64 %idxprom8
  %14 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp sgt i32 %14, -1
  br i1 %cmp13, label %for.body.14, label %for.end.25

for.body.14:                                      ; preds = %for.cond.7
  %15 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %15 to i64
  %16 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %16 to i64
  %17 = load i32***, i32**** %topol.addr, align 8
  %arrayidx17 = getelementptr inbounds i32**, i32*** %17, i64 %idxprom16
  %18 = load i32**, i32*** %arrayidx17, align 8
  %arrayidx18 = getelementptr inbounds i32*, i32** %18, i64 0
  %19 = load i32*, i32** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds i32, i32* %19, i64 %idxprom15
  %20 = load i32, i32* %arrayidx19, align 4
  %idxprom20 = sext i32 %20 to i64
  %arrayidx21 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom20
  %21 = load double, double* %arrayidx21, align 8
  %inc22 = fadd double %21, 1.000000e+00
  store double %inc22, double* %arrayidx21, align 8
  br label %for.inc.23

for.inc.23:                                       ; preds = %for.body.14
  %22 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond.7

for.end.25:                                       ; preds = %for.cond.7
  store i32 0, i32* %j, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc.42, %for.end.25
  %23 = load i32, i32* %j, align 4
  %idxprom27 = sext i32 %23 to i64
  %24 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %24 to i64
  %25 = load i32***, i32**** %topol.addr, align 8
  %arrayidx29 = getelementptr inbounds i32**, i32*** %25, i64 %idxprom28
  %26 = load i32**, i32*** %arrayidx29, align 8
  %arrayidx30 = getelementptr inbounds i32*, i32** %26, i64 1
  %27 = load i32*, i32** %arrayidx30, align 8
  %arrayidx31 = getelementptr inbounds i32, i32* %27, i64 %idxprom27
  %28 = load i32, i32* %arrayidx31, align 4
  %cmp32 = icmp sgt i32 %28, -1
  br i1 %cmp32, label %for.body.33, label %for.end.44

for.body.33:                                      ; preds = %for.cond.26
  %29 = load i32, i32* %j, align 4
  %idxprom34 = sext i32 %29 to i64
  %30 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %30 to i64
  %31 = load i32***, i32**** %topol.addr, align 8
  %arrayidx36 = getelementptr inbounds i32**, i32*** %31, i64 %idxprom35
  %32 = load i32**, i32*** %arrayidx36, align 8
  %arrayidx37 = getelementptr inbounds i32*, i32** %32, i64 1
  %33 = load i32*, i32** %arrayidx37, align 8
  %arrayidx38 = getelementptr inbounds i32, i32* %33, i64 %idxprom34
  %34 = load i32, i32* %arrayidx38, align 4
  %idxprom39 = sext i32 %34 to i64
  %arrayidx40 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom39
  %35 = load double, double* %arrayidx40, align 8
  %inc41 = fadd double %35, 1.000000e+00
  store double %inc41, double* %arrayidx40, align 8
  br label %for.inc.42

for.inc.42:                                       ; preds = %for.body.33
  %36 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %36, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond.26

for.end.44:                                       ; preds = %for.cond.26
  store i32 0, i32* %j, align 4
  br label %for.cond.45

for.cond.45:                                      ; preds = %for.inc.89, %for.end.44
  %37 = load i32, i32* %j, align 4
  %idxprom46 = sext i32 %37 to i64
  %38 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %38 to i64
  %39 = load i32***, i32**** %topol.addr, align 8
  %arrayidx48 = getelementptr inbounds i32**, i32*** %39, i64 %idxprom47
  %40 = load i32**, i32*** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds i32*, i32** %40, i64 0
  %41 = load i32*, i32** %arrayidx49, align 8
  %arrayidx50 = getelementptr inbounds i32, i32* %41, i64 %idxprom46
  %42 = load i32, i32* %arrayidx50, align 4
  %cmp51 = icmp sgt i32 %42, -1
  br i1 %cmp51, label %for.body.52, label %for.end.91

for.body.52:                                      ; preds = %for.cond.45
  %43 = load i32, i32* %j, align 4
  %idxprom53 = sext i32 %43 to i64
  %44 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %44 to i64
  %45 = load i32***, i32**** %topol.addr, align 8
  %arrayidx55 = getelementptr inbounds i32**, i32*** %45, i64 %idxprom54
  %46 = load i32**, i32*** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds i32*, i32** %46, i64 0
  %47 = load i32*, i32** %arrayidx56, align 8
  %arrayidx57 = getelementptr inbounds i32, i32* %47, i64 %idxprom53
  %48 = load i32, i32* %arrayidx57, align 4
  store i32 %48, i32* %s1, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.86, %for.body.52
  %49 = load i32, i32* %k, align 4
  %idxprom59 = sext i32 %49 to i64
  %50 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %50 to i64
  %51 = load i32***, i32**** %topol.addr, align 8
  %arrayidx61 = getelementptr inbounds i32**, i32*** %51, i64 %idxprom60
  %52 = load i32**, i32*** %arrayidx61, align 8
  %arrayidx62 = getelementptr inbounds i32*, i32** %52, i64 1
  %53 = load i32*, i32** %arrayidx62, align 8
  %arrayidx63 = getelementptr inbounds i32, i32* %53, i64 %idxprom59
  %54 = load i32, i32* %arrayidx63, align 4
  %cmp64 = icmp sgt i32 %54, -1
  br i1 %cmp64, label %for.body.65, label %for.end.88

for.body.65:                                      ; preds = %for.cond.58
  %55 = load i32, i32* %k, align 4
  %idxprom66 = sext i32 %55 to i64
  %56 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %56 to i64
  %57 = load i32***, i32**** %topol.addr, align 8
  %arrayidx68 = getelementptr inbounds i32**, i32*** %57, i64 %idxprom67
  %58 = load i32**, i32*** %arrayidx68, align 8
  %arrayidx69 = getelementptr inbounds i32*, i32** %58, i64 1
  %59 = load i32*, i32** %arrayidx69, align 8
  %arrayidx70 = getelementptr inbounds i32, i32* %59, i64 %idxprom66
  %60 = load i32, i32* %arrayidx70, align 4
  store i32 %60, i32* %s2, align 4
  %61 = load i32, i32* %s1, align 4
  %idxprom71 = sext i32 %61 to i64
  %arrayidx72 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom71
  %62 = load double, double* %arrayidx72, align 8
  %63 = load i32, i32* %s2, align 4
  %idxprom73 = sext i32 %63 to i64
  %arrayidx74 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom73
  %64 = load double, double* %arrayidx74, align 8
  %add = fadd double %62, %64
  %sub75 = fsub double %add, 1.000000e+00
  %65 = load i32, i32* %s1, align 4
  %66 = load i32, i32* %s2, align 4
  %cmp76 = icmp sgt i32 %65, %66
  br i1 %cmp76, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body.65
  %67 = load i32, i32* %s1, align 4
  br label %cond.end

cond.false:                                       ; preds = %for.body.65
  %68 = load i32, i32* %s2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %67, %cond.true ], [ %68, %cond.false ]
  %idxprom77 = sext i32 %cond to i64
  %69 = load i32, i32* %s1, align 4
  %70 = load i32, i32* %s2, align 4
  %cmp78 = icmp slt i32 %69, %70
  br i1 %cmp78, label %cond.true.79, label %cond.false.80

cond.true.79:                                     ; preds = %cond.end
  %71 = load i32, i32* %s1, align 4
  br label %cond.end.81

cond.false.80:                                    ; preds = %cond.end
  %72 = load i32, i32* %s2, align 4
  br label %cond.end.81

cond.end.81:                                      ; preds = %cond.false.80, %cond.true.79
  %cond82 = phi i32 [ %71, %cond.true.79 ], [ %72, %cond.false.80 ]
  %idxprom83 = sext i32 %cond82 to i64
  %73 = load double**, double*** %node.addr, align 8
  %arrayidx84 = getelementptr inbounds double*, double** %73, i64 %idxprom83
  %74 = load double*, double** %arrayidx84, align 8
  %arrayidx85 = getelementptr inbounds double, double* %74, i64 %idxprom77
  store double %sub75, double* %arrayidx85, align 8
  br label %for.inc.86

for.inc.86:                                       ; preds = %cond.end.81
  %75 = load i32, i32* %k, align 4
  %inc87 = add nsw i32 %75, 1
  store i32 %inc87, i32* %k, align 4
  br label %for.cond.58

for.end.88:                                       ; preds = %for.cond.58
  br label %for.inc.89

for.inc.89:                                       ; preds = %for.end.88
  %76 = load i32, i32* %j, align 4
  %inc90 = add nsw i32 %76, 1
  store i32 %inc90, i32* %j, align 4
  br label %for.cond.45

for.end.91:                                       ; preds = %for.cond.45
  br label %for.inc.92

for.inc.92:                                       ; preds = %for.end.91
  %77 = load i32, i32* %i, align 4
  %inc93 = add nsw i32 %77, 1
  store i32 %inc93, i32* %i, align 4
  br label %for.cond.4

for.end.94:                                       ; preds = %for.cond.4
  store i32 0, i32* %j, align 4
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.147, %for.end.94
  %78 = load i32, i32* %j, align 4
  %idxprom96 = sext i32 %78 to i64
  %79 = load i32, i32* %nseq.addr, align 4
  %sub97 = sub nsw i32 %79, 2
  %idxprom98 = sext i32 %sub97 to i64
  %80 = load i32***, i32**** %topol.addr, align 8
  %arrayidx99 = getelementptr inbounds i32**, i32*** %80, i64 %idxprom98
  %81 = load i32**, i32*** %arrayidx99, align 8
  %arrayidx100 = getelementptr inbounds i32*, i32** %81, i64 0
  %82 = load i32*, i32** %arrayidx100, align 8
  %arrayidx101 = getelementptr inbounds i32, i32* %82, i64 %idxprom96
  %83 = load i32, i32* %arrayidx101, align 4
  %cmp102 = icmp sgt i32 %83, -1
  br i1 %cmp102, label %for.body.103, label %for.end.149

for.body.103:                                     ; preds = %for.cond.95
  %84 = load i32, i32* %j, align 4
  %idxprom104 = sext i32 %84 to i64
  %85 = load i32, i32* %nseq.addr, align 4
  %sub105 = sub nsw i32 %85, 2
  %idxprom106 = sext i32 %sub105 to i64
  %86 = load i32***, i32**** %topol.addr, align 8
  %arrayidx107 = getelementptr inbounds i32**, i32*** %86, i64 %idxprom106
  %87 = load i32**, i32*** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds i32*, i32** %87, i64 0
  %88 = load i32*, i32** %arrayidx108, align 8
  %arrayidx109 = getelementptr inbounds i32, i32* %88, i64 %idxprom104
  %89 = load i32, i32* %arrayidx109, align 4
  store i32 %89, i32* %s1, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.110

for.cond.110:                                     ; preds = %for.inc.144, %for.body.103
  %90 = load i32, i32* %k, align 4
  %idxprom111 = sext i32 %90 to i64
  %91 = load i32, i32* %nseq.addr, align 4
  %sub112 = sub nsw i32 %91, 2
  %idxprom113 = sext i32 %sub112 to i64
  %92 = load i32***, i32**** %topol.addr, align 8
  %arrayidx114 = getelementptr inbounds i32**, i32*** %92, i64 %idxprom113
  %93 = load i32**, i32*** %arrayidx114, align 8
  %arrayidx115 = getelementptr inbounds i32*, i32** %93, i64 1
  %94 = load i32*, i32** %arrayidx115, align 8
  %arrayidx116 = getelementptr inbounds i32, i32* %94, i64 %idxprom111
  %95 = load i32, i32* %arrayidx116, align 4
  %cmp117 = icmp sgt i32 %95, -1
  br i1 %cmp117, label %for.body.118, label %for.end.146

for.body.118:                                     ; preds = %for.cond.110
  %96 = load i32, i32* %k, align 4
  %idxprom119 = sext i32 %96 to i64
  %97 = load i32, i32* %nseq.addr, align 4
  %sub120 = sub nsw i32 %97, 2
  %idxprom121 = sext i32 %sub120 to i64
  %98 = load i32***, i32**** %topol.addr, align 8
  %arrayidx122 = getelementptr inbounds i32**, i32*** %98, i64 %idxprom121
  %99 = load i32**, i32*** %arrayidx122, align 8
  %arrayidx123 = getelementptr inbounds i32*, i32** %99, i64 1
  %100 = load i32*, i32** %arrayidx123, align 8
  %arrayidx124 = getelementptr inbounds i32, i32* %100, i64 %idxprom119
  %101 = load i32, i32* %arrayidx124, align 4
  store i32 %101, i32* %s2, align 4
  %102 = load i32, i32* %s1, align 4
  %idxprom125 = sext i32 %102 to i64
  %arrayidx126 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom125
  %103 = load double, double* %arrayidx126, align 8
  %104 = load i32, i32* %s2, align 4
  %idxprom127 = sext i32 %104 to i64
  %arrayidx128 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom127
  %105 = load double, double* %arrayidx128, align 8
  %add129 = fadd double %103, %105
  %106 = load i32, i32* %s1, align 4
  %107 = load i32, i32* %s2, align 4
  %cmp130 = icmp sgt i32 %106, %107
  br i1 %cmp130, label %cond.true.131, label %cond.false.132

cond.true.131:                                    ; preds = %for.body.118
  %108 = load i32, i32* %s1, align 4
  br label %cond.end.133

cond.false.132:                                   ; preds = %for.body.118
  %109 = load i32, i32* %s2, align 4
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.false.132, %cond.true.131
  %cond134 = phi i32 [ %108, %cond.true.131 ], [ %109, %cond.false.132 ]
  %idxprom135 = sext i32 %cond134 to i64
  %110 = load i32, i32* %s1, align 4
  %111 = load i32, i32* %s2, align 4
  %cmp136 = icmp slt i32 %110, %111
  br i1 %cmp136, label %cond.true.137, label %cond.false.138

cond.true.137:                                    ; preds = %cond.end.133
  %112 = load i32, i32* %s1, align 4
  br label %cond.end.139

cond.false.138:                                   ; preds = %cond.end.133
  %113 = load i32, i32* %s2, align 4
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.138, %cond.true.137
  %cond140 = phi i32 [ %112, %cond.true.137 ], [ %113, %cond.false.138 ]
  %idxprom141 = sext i32 %cond140 to i64
  %114 = load double**, double*** %node.addr, align 8
  %arrayidx142 = getelementptr inbounds double*, double** %114, i64 %idxprom141
  %115 = load double*, double** %arrayidx142, align 8
  %arrayidx143 = getelementptr inbounds double, double* %115, i64 %idxprom135
  store double %add129, double* %arrayidx143, align 8
  br label %for.inc.144

for.inc.144:                                      ; preds = %cond.end.139
  %116 = load i32, i32* %k, align 4
  %inc145 = add nsw i32 %116, 1
  store i32 %inc145, i32* %k, align 4
  br label %for.cond.110

for.end.146:                                      ; preds = %for.cond.110
  br label %for.inc.147

for.inc.147:                                      ; preds = %for.end.146
  %117 = load i32, i32* %j, align 4
  %inc148 = add nsw i32 %117, 1
  store i32 %inc148, i32* %j, align 4
  br label %for.cond.95

for.end.149:                                      ; preds = %for.cond.95
  store i32 0, i32* %i, align 4
  br label %for.cond.150

for.cond.150:                                     ; preds = %for.inc.171, %for.end.149
  %118 = load i32, i32* %i, align 4
  %119 = load i32, i32* %nseq.addr, align 4
  %sub151 = sub nsw i32 %119, 1
  %cmp152 = icmp slt i32 %118, %sub151
  br i1 %cmp152, label %for.body.153, label %for.end.173

for.body.153:                                     ; preds = %for.cond.150
  %120 = load i32, i32* %i, align 4
  %add154 = add nsw i32 %120, 1
  store i32 %add154, i32* %j, align 4
  br label %for.cond.155

for.cond.155:                                     ; preds = %for.inc.168, %for.body.153
  %121 = load i32, i32* %j, align 4
  %122 = load i32, i32* %nseq.addr, align 4
  %cmp156 = icmp slt i32 %121, %122
  br i1 %cmp156, label %for.body.157, label %for.end.170

for.body.157:                                     ; preds = %for.cond.155
  %123 = load i32, i32* %j, align 4
  %idxprom158 = sext i32 %123 to i64
  %124 = load i32, i32* %i, align 4
  %idxprom159 = sext i32 %124 to i64
  %125 = load double**, double*** %node.addr, align 8
  %arrayidx160 = getelementptr inbounds double*, double** %125, i64 %idxprom159
  %126 = load double*, double** %arrayidx160, align 8
  %arrayidx161 = getelementptr inbounds double, double* %126, i64 %idxprom158
  %127 = load double, double* %arrayidx161, align 8
  %conv = fptosi double %127 to i32
  %call = call double @ipower(double 5.000000e-01, i32 %conv)
  %128 = load float, float* @geta2, align 4
  %conv162 = fpext float %128 to double
  %add163 = fadd double %call, %conv162
  %129 = load i32, i32* %j, align 4
  %idxprom164 = sext i32 %129 to i64
  %130 = load i32, i32* %i, align 4
  %idxprom165 = sext i32 %130 to i64
  %131 = load double**, double*** %node.addr, align 8
  %arrayidx166 = getelementptr inbounds double*, double** %131, i64 %idxprom165
  %132 = load double*, double** %arrayidx166, align 8
  %arrayidx167 = getelementptr inbounds double, double* %132, i64 %idxprom164
  store double %add163, double* %arrayidx167, align 8
  br label %for.inc.168

for.inc.168:                                      ; preds = %for.body.157
  %133 = load i32, i32* %j, align 4
  %inc169 = add nsw i32 %133, 1
  store i32 %inc169, i32* %j, align 4
  br label %for.cond.155

for.end.170:                                      ; preds = %for.cond.155
  br label %for.inc.171

for.inc.171:                                      ; preds = %for.end.170
  %134 = load i32, i32* %i, align 4
  %inc172 = add nsw i32 %134, 1
  store i32 %inc172, i32* %i, align 4
  br label %for.cond.150

for.end.173:                                      ; preds = %for.cond.150
  store i32 0, i32* %i, align 4
  br label %for.cond.174

for.cond.174:                                     ; preds = %for.inc.195, %for.end.173
  %135 = load i32, i32* %i, align 4
  %136 = load i32, i32* %nseq.addr, align 4
  %sub175 = sub nsw i32 %136, 1
  %cmp176 = icmp slt i32 %135, %sub175
  br i1 %cmp176, label %for.body.178, label %for.end.197

for.body.178:                                     ; preds = %for.cond.174
  %137 = load i32, i32* %i, align 4
  %add179 = add nsw i32 %137, 1
  store i32 %add179, i32* %j, align 4
  br label %for.cond.180

for.cond.180:                                     ; preds = %for.inc.192, %for.body.178
  %138 = load i32, i32* %j, align 4
  %139 = load i32, i32* %nseq.addr, align 4
  %cmp181 = icmp slt i32 %138, %139
  br i1 %cmp181, label %for.body.183, label %for.end.194

for.body.183:                                     ; preds = %for.cond.180
  %140 = load i32, i32* %j, align 4
  %idxprom184 = sext i32 %140 to i64
  %141 = load i32, i32* %i, align 4
  %idxprom185 = sext i32 %141 to i64
  %142 = load double**, double*** %node.addr, align 8
  %arrayidx186 = getelementptr inbounds double*, double** %142, i64 %idxprom185
  %143 = load double*, double** %arrayidx186, align 8
  %arrayidx187 = getelementptr inbounds double, double* %143, i64 %idxprom184
  %144 = load double, double* %arrayidx187, align 8
  %145 = load i32, i32* %i, align 4
  %idxprom188 = sext i32 %145 to i64
  %146 = load i32, i32* %j, align 4
  %idxprom189 = sext i32 %146 to i64
  %147 = load double**, double*** %node.addr, align 8
  %arrayidx190 = getelementptr inbounds double*, double** %147, i64 %idxprom189
  %148 = load double*, double** %arrayidx190, align 8
  %arrayidx191 = getelementptr inbounds double, double* %148, i64 %idxprom188
  store double %144, double* %arrayidx191, align 8
  br label %for.inc.192

for.inc.192:                                      ; preds = %for.body.183
  %149 = load i32, i32* %j, align 4
  %inc193 = add nsw i32 %149, 1
  store i32 %inc193, i32* %j, align 4
  br label %for.cond.180

for.end.194:                                      ; preds = %for.cond.180
  br label %for.inc.195

for.inc.195:                                      ; preds = %for.end.194
  %150 = load i32, i32* %i, align 4
  %inc196 = add nsw i32 %150, 1
  store i32 %inc196, i32* %i, align 4
  br label %for.cond.174

for.end.197:                                      ; preds = %for.cond.174
  br label %if.end.198

if.end.198:                                       ; preds = %for.end.197, %if.end
  %151 = load i32, i32* @weight, align 4
  %cmp199 = icmp eq i32 %151, 3
  br i1 %cmp199, label %if.then.201, label %if.end.311

if.then.201:                                      ; preds = %if.end.198
  store i32 0, i32* %i, align 4
  br label %for.cond.202

for.cond.202:                                     ; preds = %for.inc.210, %if.then.201
  %152 = load i32, i32* %i, align 4
  %153 = load i32, i32* %nseq.addr, align 4
  %cmp203 = icmp slt i32 %152, %153
  br i1 %cmp203, label %for.body.205, label %for.end.212

for.body.205:                                     ; preds = %for.cond.202
  %154 = load i32, i32* %i, align 4
  %idxprom206 = sext i32 %154 to i64
  %arrayidx207 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom206
  store double 0.000000e+00, double* %arrayidx207, align 8
  %155 = load i32, i32* %i, align 4
  %idxprom208 = sext i32 %155 to i64
  %arrayidx209 = getelementptr inbounds [50000 x double], [50000 x double]* %eff, i32 0, i64 %idxprom208
  store double 1.000000e+00, double* %arrayidx209, align 8
  br label %for.inc.210

for.inc.210:                                      ; preds = %for.body.205
  %156 = load i32, i32* %i, align 4
  %inc211 = add nsw i32 %156, 1
  store i32 %inc211, i32* %i, align 4
  br label %for.cond.202

for.end.212:                                      ; preds = %for.cond.202
  store i32 0, i32* %i, align 4
  br label %for.cond.213

for.cond.213:                                     ; preds = %for.inc.265, %for.end.212
  %157 = load i32, i32* %i, align 4
  %158 = load i32, i32* %nseq.addr, align 4
  %sub214 = sub nsw i32 %158, 1
  %cmp215 = icmp slt i32 %157, %sub214
  br i1 %cmp215, label %for.body.217, label %for.end.267

for.body.217:                                     ; preds = %for.cond.213
  store i32 0, i32* %j, align 4
  br label %for.cond.218

for.cond.218:                                     ; preds = %for.inc.238, %for.body.217
  %159 = load i32, i32* %j, align 4
  %idxprom219 = sext i32 %159 to i64
  %160 = load i32, i32* %i, align 4
  %idxprom220 = sext i32 %160 to i64
  %161 = load i32***, i32**** %topol.addr, align 8
  %arrayidx221 = getelementptr inbounds i32**, i32*** %161, i64 %idxprom220
  %162 = load i32**, i32*** %arrayidx221, align 8
  %arrayidx222 = getelementptr inbounds i32*, i32** %162, i64 0
  %163 = load i32*, i32** %arrayidx222, align 8
  %arrayidx223 = getelementptr inbounds i32, i32* %163, i64 %idxprom219
  %164 = load i32, i32* %arrayidx223, align 4
  store i32 %164, i32* %s1, align 4
  %cmp224 = icmp sgt i32 %164, -1
  br i1 %cmp224, label %for.body.226, label %for.end.240

for.body.226:                                     ; preds = %for.cond.218
  %165 = load i32, i32* %i, align 4
  %idxprom227 = sext i32 %165 to i64
  %166 = load double**, double*** %len.addr, align 8
  %arrayidx228 = getelementptr inbounds double*, double** %166, i64 %idxprom227
  %167 = load double*, double** %arrayidx228, align 8
  %arrayidx229 = getelementptr inbounds double, double* %167, i64 0
  %168 = load double, double* %arrayidx229, align 8
  %169 = load i32, i32* %s1, align 4
  %idxprom230 = sext i32 %169 to i64
  %arrayidx231 = getelementptr inbounds [50000 x double], [50000 x double]* %eff, i32 0, i64 %idxprom230
  %170 = load double, double* %arrayidx231, align 8
  %mul = fmul double %168, %170
  %171 = load i32, i32* %s1, align 4
  %idxprom232 = sext i32 %171 to i64
  %arrayidx233 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom232
  %172 = load double, double* %arrayidx233, align 8
  %add234 = fadd double %172, %mul
  store double %add234, double* %arrayidx233, align 8
  %173 = load i32, i32* %s1, align 4
  %idxprom235 = sext i32 %173 to i64
  %arrayidx236 = getelementptr inbounds [50000 x double], [50000 x double]* %eff, i32 0, i64 %idxprom235
  %174 = load double, double* %arrayidx236, align 8
  %mul237 = fmul double %174, 5.000000e-01
  store double %mul237, double* %arrayidx236, align 8
  br label %for.inc.238

for.inc.238:                                      ; preds = %for.body.226
  %175 = load i32, i32* %j, align 4
  %inc239 = add nsw i32 %175, 1
  store i32 %inc239, i32* %j, align 4
  br label %for.cond.218

for.end.240:                                      ; preds = %for.cond.218
  store i32 0, i32* %j, align 4
  br label %for.cond.241

for.cond.241:                                     ; preds = %for.inc.262, %for.end.240
  %176 = load i32, i32* %j, align 4
  %idxprom242 = sext i32 %176 to i64
  %177 = load i32, i32* %i, align 4
  %idxprom243 = sext i32 %177 to i64
  %178 = load i32***, i32**** %topol.addr, align 8
  %arrayidx244 = getelementptr inbounds i32**, i32*** %178, i64 %idxprom243
  %179 = load i32**, i32*** %arrayidx244, align 8
  %arrayidx245 = getelementptr inbounds i32*, i32** %179, i64 1
  %180 = load i32*, i32** %arrayidx245, align 8
  %arrayidx246 = getelementptr inbounds i32, i32* %180, i64 %idxprom242
  %181 = load i32, i32* %arrayidx246, align 4
  store i32 %181, i32* %s2, align 4
  %cmp247 = icmp sgt i32 %181, -1
  br i1 %cmp247, label %for.body.249, label %for.end.264

for.body.249:                                     ; preds = %for.cond.241
  %182 = load i32, i32* %i, align 4
  %idxprom250 = sext i32 %182 to i64
  %183 = load double**, double*** %len.addr, align 8
  %arrayidx251 = getelementptr inbounds double*, double** %183, i64 %idxprom250
  %184 = load double*, double** %arrayidx251, align 8
  %arrayidx252 = getelementptr inbounds double, double* %184, i64 1
  %185 = load double, double* %arrayidx252, align 8
  %186 = load i32, i32* %s2, align 4
  %idxprom253 = sext i32 %186 to i64
  %arrayidx254 = getelementptr inbounds [50000 x double], [50000 x double]* %eff, i32 0, i64 %idxprom253
  %187 = load double, double* %arrayidx254, align 8
  %mul255 = fmul double %185, %187
  %188 = load i32, i32* %s2, align 4
  %idxprom256 = sext i32 %188 to i64
  %arrayidx257 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom256
  %189 = load double, double* %arrayidx257, align 8
  %add258 = fadd double %189, %mul255
  store double %add258, double* %arrayidx257, align 8
  %190 = load i32, i32* %s2, align 4
  %idxprom259 = sext i32 %190 to i64
  %arrayidx260 = getelementptr inbounds [50000 x double], [50000 x double]* %eff, i32 0, i64 %idxprom259
  %191 = load double, double* %arrayidx260, align 8
  %mul261 = fmul double %191, 5.000000e-01
  store double %mul261, double* %arrayidx260, align 8
  br label %for.inc.262

for.inc.262:                                      ; preds = %for.body.249
  %192 = load i32, i32* %j, align 4
  %inc263 = add nsw i32 %192, 1
  store i32 %inc263, i32* %j, align 4
  br label %for.cond.241

for.end.264:                                      ; preds = %for.cond.241
  br label %for.inc.265

for.inc.265:                                      ; preds = %for.end.264
  %193 = load i32, i32* %i, align 4
  %inc266 = add nsw i32 %193, 1
  store i32 %inc266, i32* %i, align 4
  br label %for.cond.213

for.end.267:                                      ; preds = %for.cond.213
  store i32 0, i32* %i, align 4
  br label %for.cond.268

for.cond.268:                                     ; preds = %for.inc.275, %for.end.267
  %194 = load i32, i32* %i, align 4
  %195 = load i32, i32* %nseq.addr, align 4
  %cmp269 = icmp slt i32 %194, %195
  br i1 %cmp269, label %for.body.271, label %for.end.277

for.body.271:                                     ; preds = %for.cond.268
  %196 = load i32, i32* %i, align 4
  %idxprom272 = sext i32 %196 to i64
  %arrayidx273 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom272
  %197 = load double, double* %arrayidx273, align 8
  %add274 = fadd double %197, 1.000000e-03
  store double %add274, double* %arrayidx273, align 8
  br label %for.inc.275

for.inc.275:                                      ; preds = %for.body.271
  %198 = load i32, i32* %i, align 4
  %inc276 = add nsw i32 %198, 1
  store i32 %inc276, i32* %i, align 4
  br label %for.cond.268

for.end.277:                                      ; preds = %for.cond.268
  store i32 0, i32* %i, align 4
  br label %for.cond.278

for.cond.278:                                     ; preds = %for.inc.308, %for.end.277
  %199 = load i32, i32* %i, align 4
  %200 = load i32, i32* %nseq.addr, align 4
  %cmp279 = icmp slt i32 %199, %200
  br i1 %cmp279, label %for.body.281, label %for.end.310

for.body.281:                                     ; preds = %for.cond.278
  store i32 0, i32* %j, align 4
  br label %for.cond.282

for.cond.282:                                     ; preds = %for.inc.305, %for.body.281
  %201 = load i32, i32* %j, align 4
  %202 = load i32, i32* %nseq.addr, align 4
  %cmp283 = icmp slt i32 %201, %202
  br i1 %cmp283, label %for.body.285, label %for.end.307

for.body.285:                                     ; preds = %for.cond.282
  %203 = load i32, i32* %j, align 4
  %204 = load i32, i32* %i, align 4
  %cmp286 = icmp ne i32 %203, %204
  br i1 %cmp286, label %if.then.288, label %if.else

if.then.288:                                      ; preds = %for.body.285
  %205 = load i32, i32* %i, align 4
  %idxprom289 = sext i32 %205 to i64
  %arrayidx290 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom289
  %206 = load double, double* %arrayidx290, align 8
  %207 = load i32, i32* %j, align 4
  %idxprom291 = sext i32 %207 to i64
  %arrayidx292 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom291
  %208 = load double, double* %arrayidx292, align 8
  %mul293 = fmul double %206, %208
  %209 = load i32, i32* %j, align 4
  %idxprom294 = sext i32 %209 to i64
  %210 = load i32, i32* %i, align 4
  %idxprom295 = sext i32 %210 to i64
  %211 = load double**, double*** %node.addr, align 8
  %arrayidx296 = getelementptr inbounds double*, double** %211, i64 %idxprom295
  %212 = load double*, double** %arrayidx296, align 8
  %arrayidx297 = getelementptr inbounds double, double* %212, i64 %idxprom294
  store double %mul293, double* %arrayidx297, align 8
  br label %if.end.304

if.else:                                          ; preds = %for.body.285
  %213 = load i32, i32* %i, align 4
  %idxprom298 = sext i32 %213 to i64
  %arrayidx299 = getelementptr inbounds [50000 x double], [50000 x double]* %rootnode, i32 0, i64 %idxprom298
  %214 = load double, double* %arrayidx299, align 8
  %215 = load i32, i32* %i, align 4
  %idxprom300 = sext i32 %215 to i64
  %216 = load i32, i32* %i, align 4
  %idxprom301 = sext i32 %216 to i64
  %217 = load double**, double*** %node.addr, align 8
  %arrayidx302 = getelementptr inbounds double*, double** %217, i64 %idxprom301
  %218 = load double*, double** %arrayidx302, align 8
  %arrayidx303 = getelementptr inbounds double, double* %218, i64 %idxprom300
  store double %214, double* %arrayidx303, align 8
  br label %if.end.304

if.end.304:                                       ; preds = %if.else, %if.then.288
  br label %for.inc.305

for.inc.305:                                      ; preds = %if.end.304
  %219 = load i32, i32* %j, align 4
  %inc306 = add nsw i32 %219, 1
  store i32 %inc306, i32* %j, align 4
  br label %for.cond.282

for.end.307:                                      ; preds = %for.cond.282
  br label %for.inc.308

for.inc.308:                                      ; preds = %for.end.307
  %220 = load i32, i32* %i, align 4
  %inc309 = add nsw i32 %220, 1
  store i32 %inc309, i32* %i, align 4
  br label %for.cond.278

for.end.310:                                      ; preds = %for.cond.278
  br label %if.end.311

if.end.311:                                       ; preds = %for.end.310, %if.end.198
  ret void
}

declare void @ErrorExit(i8*) #2

; Function Attrs: nounwind uwtable
define float @score_calcp(i8* %seq1, i8* %seq2, i32 %len) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %ms1 = alloca i32, align 4
  %ms2 = alloca i32, align 4
  %tmpscore = alloca float, align 4
  %len2 = alloca i32, align 4
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %0, 2
  store i32 %sub, i32* %len2, align 4
  store float 0.000000e+00, float* %tmpscore, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %k, align 4
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %seq1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  store i32 %conv, i32* %ms1, align 4
  %6 = load i32, i32* %k, align 4
  %idxprom1 = sext i32 %6 to i64
  %7 = load i8*, i8** %seq2.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 %idxprom1
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %8 to i32
  store i32 %conv3, i32* %ms2, align 4
  %9 = load i32, i32* %ms1, align 4
  %cmp4 = icmp eq i32 %9, 45
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %10 = load i32, i32* %ms2, align 4
  %cmp6 = icmp eq i32 %10, 45
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %11 = load i32, i32* %ms2, align 4
  %idxprom8 = sext i32 %11 to i64
  %12 = load i32, i32* %ms1, align 4
  %idxprom9 = sext i32 %12 to i64
  %arrayidx10 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom9
  %arrayidx11 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx10, i32 0, i64 %idxprom8
  %13 = load i32, i32* %arrayidx11, align 4
  %conv12 = sitofp i32 %13 to float
  %14 = load float, float* %tmpscore, align 4
  %add = fadd float %14, %conv12
  store float %add, float* %tmpscore, align 4
  %15 = load i32, i32* %ms1, align 4
  %cmp13 = icmp eq i32 %15, 45
  br i1 %cmp13, label %if.then.15, label %if.end.39

if.then.15:                                       ; preds = %if.end
  %16 = load i32, i32* @penalty, align 4
  %conv16 = sitofp i32 %16 to float
  %17 = load float, float* %tmpscore, align 4
  %add17 = fadd float %17, %conv16
  store float %add17, float* %tmpscore, align 4
  %18 = load i32, i32* %ms2, align 4
  %idxprom18 = sext i32 %18 to i64
  %19 = load i32, i32* %ms1, align 4
  %idxprom19 = sext i32 %19 to i64
  %arrayidx20 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom19
  %arrayidx21 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx20, i32 0, i64 %idxprom18
  %20 = load i32, i32* %arrayidx21, align 4
  %conv22 = sitofp i32 %20 to float
  %21 = load float, float* %tmpscore, align 4
  %add23 = fadd float %21, %conv22
  store float %add23, float* %tmpscore, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.15
  %22 = load i32, i32* %k, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %k, align 4
  %idxprom24 = sext i32 %inc to i64
  %23 = load i8*, i8** %seq1.addr, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %23, i64 %idxprom24
  %24 = load i8, i8* %arrayidx25, align 1
  %conv26 = sext i8 %24 to i32
  store i32 %conv26, i32* %ms1, align 4
  %cmp27 = icmp eq i32 %conv26, 45
  br i1 %cmp27, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load i32, i32* %ms2, align 4
  %idxprom29 = sext i32 %25 to i64
  %26 = load i32, i32* %ms1, align 4
  %idxprom30 = sext i32 %26 to i64
  %arrayidx31 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom30
  %arrayidx32 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx31, i32 0, i64 %idxprom29
  %27 = load i32, i32* %arrayidx32, align 4
  %conv33 = sitofp i32 %27 to float
  %28 = load float, float* %tmpscore, align 4
  %add34 = fadd float %28, %conv33
  store float %add34, float* %tmpscore, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %29 = load i32, i32* %k, align 4
  %dec = add nsw i32 %29, -1
  store i32 %dec, i32* %k, align 4
  %30 = load i32, i32* %k, align 4
  %31 = load i32, i32* %len2, align 4
  %cmp35 = icmp sgt i32 %30, %31
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %while.end
  br label %for.end

if.end.38:                                        ; preds = %while.end
  br label %for.inc

if.end.39:                                        ; preds = %if.end
  %32 = load i32, i32* %ms2, align 4
  %cmp40 = icmp eq i32 %32, 45
  br i1 %cmp40, label %if.then.42, label %if.end.71

if.then.42:                                       ; preds = %if.end.39
  %33 = load i32, i32* @penalty, align 4
  %conv43 = sitofp i32 %33 to float
  %34 = load float, float* %tmpscore, align 4
  %add44 = fadd float %34, %conv43
  store float %add44, float* %tmpscore, align 4
  %35 = load i32, i32* %ms2, align 4
  %idxprom45 = sext i32 %35 to i64
  %36 = load i32, i32* %ms1, align 4
  %idxprom46 = sext i32 %36 to i64
  %arrayidx47 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom46
  %arrayidx48 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx47, i32 0, i64 %idxprom45
  %37 = load i32, i32* %arrayidx48, align 4
  %conv49 = sitofp i32 %37 to float
  %38 = load float, float* %tmpscore, align 4
  %add50 = fadd float %38, %conv49
  store float %add50, float* %tmpscore, align 4
  br label %while.cond.51

while.cond.51:                                    ; preds = %while.body.58, %if.then.42
  %39 = load i32, i32* %k, align 4
  %inc52 = add nsw i32 %39, 1
  store i32 %inc52, i32* %k, align 4
  %idxprom53 = sext i32 %inc52 to i64
  %40 = load i8*, i8** %seq2.addr, align 8
  %arrayidx54 = getelementptr inbounds i8, i8* %40, i64 %idxprom53
  %41 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %41 to i32
  store i32 %conv55, i32* %ms2, align 4
  %cmp56 = icmp eq i32 %conv55, 45
  br i1 %cmp56, label %while.body.58, label %while.end.65

while.body.58:                                    ; preds = %while.cond.51
  %42 = load i32, i32* %ms2, align 4
  %idxprom59 = sext i32 %42 to i64
  %43 = load i32, i32* %ms1, align 4
  %idxprom60 = sext i32 %43 to i64
  %arrayidx61 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom60
  %arrayidx62 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx61, i32 0, i64 %idxprom59
  %44 = load i32, i32* %arrayidx62, align 4
  %conv63 = sitofp i32 %44 to float
  %45 = load float, float* %tmpscore, align 4
  %add64 = fadd float %45, %conv63
  store float %add64, float* %tmpscore, align 4
  br label %while.cond.51

while.end.65:                                     ; preds = %while.cond.51
  %46 = load i32, i32* %k, align 4
  %dec66 = add nsw i32 %46, -1
  store i32 %dec66, i32* %k, align 4
  %47 = load i32, i32* %k, align 4
  %48 = load i32, i32* %len2, align 4
  %cmp67 = icmp sgt i32 %47, %48
  br i1 %cmp67, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %while.end.65
  br label %for.end

if.end.70:                                        ; preds = %while.end.65
  br label %for.inc

if.end.71:                                        ; preds = %if.end.39
  br label %for.inc

for.inc:                                          ; preds = %if.end.71, %if.end.70, %if.end.38, %if.then
  %49 = load i32, i32* %k, align 4
  %inc72 = add nsw i32 %49, 1
  store i32 %inc72, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.69, %if.then.37, %for.cond
  %50 = load float, float* %tmpscore, align 4
  ret float %50
}

; Function Attrs: nounwind uwtable
define float @score_calc1(i8* %seq1, i8* %seq2) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %k = alloca i32, align 4
  %score = alloca float, align 4
  %count = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %count, align 4
  %0 = load i8*, i8** %seq1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %k, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %seq1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %k, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load i8*, i8** %seq2.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom5
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp ne i32 %conv7, 45
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %k, align 4
  %idxprom10 = sext i32 %9 to i64
  %10 = load i8*, i8** %seq2.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  %idxprom13 = sext i32 %conv12 to i64
  %12 = load i32, i32* %k, align 4
  %idxprom14 = sext i32 %12 to i64
  %13 = load i8*, i8** %seq1.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 %idxprom14
  %14 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %14 to i32
  %idxprom17 = sext i32 %conv16 to i64
  %arrayidx18 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom17
  %arrayidx19 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx18, i32 0, i64 %idxprom13
  %15 = load i32, i32* %arrayidx19, align 4
  %conv20 = sitofp i32 %15 to float
  %16 = load float, float* %score, align 4
  %add = fadd float %16, %conv20
  store float %add, float* %score, align 4
  %17 = load i32, i32* %count, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %k, align 4
  %inc21 = add nsw i32 %18, 1
  store i32 %inc21, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %count, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %for.end
  %20 = load i32, i32* %count, align 4
  %conv23 = sitofp i32 %20 to float
  %21 = load float, float* %score, align 4
  %div = fdiv float %21, %conv23
  store float %div, float* %score, align 4
  br label %if.end.24

if.else:                                          ; preds = %for.end
  store float 1.000000e+00, float* %score, align 4
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.22
  %22 = load float, float* %score, align 4
  ret float %22
}

; Function Attrs: nounwind uwtable
define float @substitution_nid(i8* %seq1, i8* %seq2) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %k = alloca i32, align 4
  %s12 = alloca float, align 4
  %len = alloca i32, align 4
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  %0 = load i8*, i8** %seq1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %s12, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %k, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %seq1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %k, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load i8*, i8** %seq2.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom5
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp ne i32 %conv7, 45
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %k, align 4
  %idxprom10 = sext i32 %9 to i64
  %10 = load i8*, i8** %seq1.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  %12 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %12 to i64
  %13 = load i8*, i8** %seq2.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 %idxprom13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %14 to i32
  %cmp16 = icmp eq i32 %conv12, %conv15
  %conv17 = zext i1 %cmp16 to i32
  %conv18 = sitofp i32 %conv17 to float
  %15 = load float, float* %s12, align 4
  %add = fadd float %15, %conv18
  store float %add, float* %s12, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %k, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load float, float* %s12, align 4
  ret float %17
}

; Function Attrs: nounwind uwtable
define float @substitution_score(i8* %seq1, i8* %seq2) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %k = alloca i32, align 4
  %s12 = alloca float, align 4
  %len = alloca i32, align 4
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  %0 = load i8*, i8** %seq1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %s12, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %k, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %seq1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %k, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load i8*, i8** %seq2.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom5
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp ne i32 %conv7, 45
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %k, align 4
  %idxprom10 = sext i32 %9 to i64
  %10 = load i8*, i8** %seq2.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  %idxprom13 = sext i32 %conv12 to i64
  %12 = load i32, i32* %k, align 4
  %idxprom14 = sext i32 %12 to i64
  %13 = load i8*, i8** %seq1.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 %idxprom14
  %14 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %14 to i32
  %idxprom17 = sext i32 %conv16 to i64
  %arrayidx18 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom17
  %arrayidx19 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx18, i32 0, i64 %idxprom13
  %15 = load i32, i32* %arrayidx19, align 4
  %conv20 = sitofp i32 %15 to float
  %16 = load float, float* %s12, align 4
  %add = fadd float %16, %conv20
  store float %add, float* %s12, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %k, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load float, float* %s12, align 4
  ret float %18
}

; Function Attrs: nounwind uwtable
define float @substitution_hosei(i8* %seq1, i8* %seq2) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %count = alloca i32, align 4
  %score = alloca float, align 4
  %iscore = alloca i32, align 4
  %s1 = alloca i8, align 1
  %s2 = alloca i8, align 1
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  store i32 0, i32* %count, align 4
  store i32 0, i32* %iscore, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.7, %if.then.6, %if.then, %entry
  %0 = load i8*, i8** %seq1.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %seq1.addr, align 8
  %1 = load i8, i8* %0, align 1
  store i8 %1, i8* %s1, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %seq2.addr, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr1, i8** %seq2.addr, align 8
  %3 = load i8, i8* %2, align 1
  store i8 %3, i8* %s2, align 1
  %4 = load i8, i8* %s1, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.cond

if.end:                                           ; preds = %while.body
  %5 = load i8, i8* %s2, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 45
  br i1 %cmp4, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  br label %while.cond

if.end.7:                                         ; preds = %if.end
  %6 = load i8, i8* %s1, align 1
  %conv8 = sext i8 %6 to i32
  %7 = load i8, i8* %s2, align 1
  %conv9 = sext i8 %7 to i32
  %cmp10 = icmp ne i32 %conv8, %conv9
  %conv11 = zext i1 %cmp10 to i32
  %8 = load i32, i32* %iscore, align 4
  %add = add nsw i32 %8, %conv11
  store i32 %add, i32* %iscore, align 4
  %9 = load i32, i32* %count, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %count, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load i32, i32* %count, align 4
  %tobool12 = icmp ne i32 %10, 0
  br i1 %tobool12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %while.end
  %11 = load i32, i32* %iscore, align 4
  %conv14 = sitofp i32 %11 to float
  %12 = load i32, i32* %count, align 4
  %conv15 = sitofp i32 %12 to float
  %div = fdiv float %conv14, %conv15
  store float %div, float* %score, align 4
  br label %if.end.16

if.else:                                          ; preds = %while.end
  store float 1.000000e+00, float* %score, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.13
  %13 = load float, float* %score, align 4
  %conv17 = fpext float %13 to double
  %cmp18 = fcmp olt double %conv17, 9.500000e-01
  br i1 %cmp18, label %if.then.20, label %if.else.24

if.then.20:                                       ; preds = %if.end.16
  %14 = load float, float* %score, align 4
  %conv21 = fpext float %14 to double
  %sub = fsub double 1.000000e+00, %conv21
  %call = call double @log(double %sub) #8
  %sub22 = fsub double -0.000000e+00, %call
  %conv23 = fptrunc double %sub22 to float
  store float %conv23, float* %score, align 4
  br label %if.end.25

if.else.24:                                       ; preds = %if.end.16
  store float 3.000000e+00, float* %score, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.then.20
  %15 = load float, float* %score, align 4
  ret float %15
}

; Function Attrs: nounwind
declare double @log(double) #4

; Function Attrs: nounwind uwtable
define float @substitution(i8* %seq1, i8* %seq2) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %k = alloca i32, align 4
  %score = alloca float, align 4
  %count = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %count, align 4
  %0 = load i8*, i8** %seq1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %k, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %seq1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %6 = load i32, i32* %k, align 4
  %idxprom5 = sext i32 %6 to i64
  %7 = load i8*, i8** %seq2.addr, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 %idxprom5
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp ne i32 %conv7, 45
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %k, align 4
  %idxprom10 = sext i32 %9 to i64
  %10 = load i8*, i8** %seq1.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %10, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  %12 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %12 to i64
  %13 = load i8*, i8** %seq2.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 %idxprom13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %14 to i32
  %cmp16 = icmp ne i32 %conv12, %conv15
  %conv17 = zext i1 %cmp16 to i32
  %conv18 = sitofp i32 %conv17 to float
  %15 = load float, float* %score, align 4
  %add = fadd float %15, %conv18
  store float %add, float* %score, align 4
  %16 = load i32, i32* %count, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %k, align 4
  %inc19 = add nsw i32 %17, 1
  store i32 %inc19, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %count, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %for.end
  %19 = load i32, i32* %count, align 4
  %conv21 = sitofp i32 %19 to float
  %20 = load float, float* %score, align 4
  %div = fdiv float %20, %conv21
  store float %div, float* %score, align 4
  br label %if.end.22

if.else:                                          ; preds = %for.end
  store float 1.000000e+00, float* %score, align 4
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.20
  %21 = load float, float* %score, align 4
  ret float %21
}

; Function Attrs: nounwind uwtable
define void @treeconstruction(i8** %seq, i32 %nseq, i32*** %topol, double** %len, double** %eff) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %nseq.addr = alloca i32, align 4
  %topol.addr = alloca i32***, align 8
  %len.addr = alloca double**, align 8
  %eff.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32*** %topol, i32**** %topol.addr, align 8
  store double** %len, double*** %len.addr, align 8
  store double** %eff, double*** %eff.addr, align 8
  %0 = load i32, i32* @weight, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @utree, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.13, %if.then.2
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp3 = icmp slt i32 %2, %sub
  br i1 %cmp3, label %for.body, label %for.end.15

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %nseq.addr, align 4
  %cmp5 = icmp slt i32 %5, %6
  br i1 %cmp5, label %for.body.6, label %for.end

for.body.6:                                       ; preds = %for.cond.4
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %8, i64 %idxprom
  %9 = load i8*, i8** %arrayidx, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i64 %idxprom7
  %12 = load i8*, i8** %arrayidx8, align 8
  %call = call float @substitution_hosei(i8* %9, i8* %12)
  %conv = fpext float %call to double
  %13 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %13 to i64
  %14 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %14 to i64
  %15 = load double**, double*** %eff.addr, align 8
  %arrayidx11 = getelementptr inbounds double*, double** %15, i64 %idxprom10
  %16 = load double*, double** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds double, double* %16, i64 %idxprom9
  store double %conv, double* %arrayidx12, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.6
  %17 = load i32, i32* %j, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.13

for.inc.13:                                       ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc14 = add nsw i32 %18, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond

for.end.15:                                       ; preds = %for.cond
  %19 = load i32, i32* %nseq.addr, align 4
  %20 = load double**, double*** %eff.addr, align 8
  %21 = load i32***, i32**** %topol.addr, align 8
  %22 = load double**, double*** %len.addr, align 8
  call void @spg(i32 %19, double** %20, i32*** %21, double** %22)
  %23 = load i32, i32* %nseq.addr, align 4
  %24 = load i32***, i32**** %topol.addr, align 8
  %25 = load double**, double*** %len.addr, align 8
  %26 = load double**, double*** %eff.addr, align 8
  call void @counteff(i32 %23, i32*** %24, double** %25, double** %26)
  br label %if.end

if.end:                                           ; preds = %for.end.15, %if.then
  br label %if.end.34

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond.16

for.cond.16:                                      ; preds = %for.inc.31, %if.else
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %nseq.addr, align 4
  %cmp17 = icmp slt i32 %27, %28
  br i1 %cmp17, label %for.body.19, label %for.end.33

for.body.19:                                      ; preds = %for.cond.16
  store i32 0, i32* %j, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.28, %for.body.19
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %nseq.addr, align 4
  %cmp21 = icmp slt i32 %29, %30
  br i1 %cmp21, label %for.body.23, label %for.end.30

for.body.23:                                      ; preds = %for.cond.20
  %31 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %31 to i64
  %32 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %32 to i64
  %33 = load double**, double*** %eff.addr, align 8
  %arrayidx26 = getelementptr inbounds double*, double** %33, i64 %idxprom25
  %34 = load double*, double** %arrayidx26, align 8
  %arrayidx27 = getelementptr inbounds double, double* %34, i64 %idxprom24
  store double 1.000000e+00, double* %arrayidx27, align 8
  br label %for.inc.28

for.inc.28:                                       ; preds = %for.body.23
  %35 = load i32, i32* %j, align 4
  %inc29 = add nsw i32 %35, 1
  store i32 %inc29, i32* %j, align 4
  br label %for.cond.20

for.end.30:                                       ; preds = %for.cond.20
  br label %for.inc.31

for.inc.31:                                       ; preds = %for.end.30
  %36 = load i32, i32* %i, align 4
  %inc32 = add nsw i32 %36, 1
  store i32 %inc32, i32* %i, align 4
  br label %for.cond.16

for.end.33:                                       ; preds = %for.cond.16
  br label %if.end.34

if.end.34:                                        ; preds = %for.end.33, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define float @bscore_calc(i8** %seq, i32 %s, double** %eff) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb1 = alloca i32, align 4
  %gb2 = alloca i32, align 4
  %gc1 = alloca i32, align 4
  %gc2 = alloca i32, align 4
  %cob = alloca i32, align 4
  %nglen = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca i64, align 8
  %efficient = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i64 0, i64* %score, align 8
  store i32 0, i32* %nglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.127, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.129

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.124, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.126

for.body.5:                                       ; preds = %for.cond.2
  %7 = load i32, i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load double**, double*** %eff.addr, align 8
  %arrayidx7 = getelementptr inbounds double*, double** %9, i64 %idxprom6
  %10 = load double*, double** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds double, double* %10, i64 %idxprom
  %11 = load double, double* %arrayidx8, align 8
  store double %11, double* %efficient, align 8
  store i32 0, i32* %gc1, align 4
  store i32 0, i32* %gc2, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body.5
  %12 = load i32, i32* %k, align 4
  %13 = load i32, i32* %len, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %14 = load i32, i32* %gc1, align 4
  store i32 %14, i32* %gb1, align 4
  %15 = load i32, i32* %gc2, align 4
  store i32 %15, i32* %gb2, align 4
  %16 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %16 to i64
  %17 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx15 = getelementptr inbounds i8*, i8** %18, i64 %idxprom14
  %19 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %19, i64 %idxprom13
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %20 to i32
  %cmp18 = icmp eq i32 %conv17, 45
  %conv19 = zext i1 %cmp18 to i32
  store i32 %conv19, i32* %gc1, align 4
  %21 = load i32, i32* %k, align 4
  %idxprom20 = sext i32 %21 to i64
  %22 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %22 to i64
  %23 = load i8**, i8*** %seq.addr, align 8
  %arrayidx22 = getelementptr inbounds i8*, i8** %23, i64 %idxprom21
  %24 = load i8*, i8** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %idxprom20
  %25 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %25 to i32
  %cmp25 = icmp eq i32 %conv24, 45
  %conv26 = zext i1 %cmp25 to i32
  store i32 %conv26, i32* %gc2, align 4
  %26 = load i32, i32* %gb1, align 4
  %tobool = icmp ne i32 %26, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %27 = load i32, i32* %gc1, align 4
  %mul = mul nsw i32 %lnot.ext, %27
  %28 = load i32, i32* %gb2, align 4
  %tobool27 = icmp ne i32 %28, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %mul30 = mul nsw i32 %mul, %lnot.ext29
  %29 = load i32, i32* %gc2, align 4
  %tobool31 = icmp ne i32 %29, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %mul34 = mul nsw i32 %mul30, %lnot.ext33
  %30 = load i32, i32* %gb1, align 4
  %tobool35 = icmp ne i32 %30, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %31 = load i32, i32* %gc1, align 4
  %tobool38 = icmp ne i32 %31, 0
  %lnot39 = xor i1 %tobool38, true
  %lnot.ext40 = zext i1 %lnot39 to i32
  %mul41 = mul nsw i32 %lnot.ext37, %lnot.ext40
  %32 = load i32, i32* %gb2, align 4
  %tobool42 = icmp ne i32 %32, 0
  %lnot43 = xor i1 %tobool42, true
  %lnot.ext44 = zext i1 %lnot43 to i32
  %mul45 = mul nsw i32 %mul41, %lnot.ext44
  %33 = load i32, i32* %gc2, align 4
  %mul46 = mul nsw i32 %mul45, %33
  %add47 = add nsw i32 %mul34, %mul46
  %34 = load i32, i32* %gb1, align 4
  %tobool48 = icmp ne i32 %34, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %35 = load i32, i32* %gc1, align 4
  %mul51 = mul nsw i32 %lnot.ext50, %35
  %36 = load i32, i32* %gb2, align 4
  %mul52 = mul nsw i32 %mul51, %36
  %37 = load i32, i32* %gc2, align 4
  %tobool53 = icmp ne i32 %37, 0
  %lnot54 = xor i1 %tobool53, true
  %lnot.ext55 = zext i1 %lnot54 to i32
  %mul56 = mul nsw i32 %mul52, %lnot.ext55
  %add57 = add nsw i32 %add47, %mul56
  %38 = load i32, i32* %gb1, align 4
  %39 = load i32, i32* %gc1, align 4
  %tobool58 = icmp ne i32 %39, 0
  %lnot59 = xor i1 %tobool58, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  %mul61 = mul nsw i32 %38, %lnot.ext60
  %40 = load i32, i32* %gb2, align 4
  %tobool62 = icmp ne i32 %40, 0
  %lnot63 = xor i1 %tobool62, true
  %lnot.ext64 = zext i1 %lnot63 to i32
  %mul65 = mul nsw i32 %mul61, %lnot.ext64
  %41 = load i32, i32* %gc2, align 4
  %mul66 = mul nsw i32 %mul65, %41
  %add67 = add nsw i32 %add57, %mul66
  %conv68 = sitofp i32 %add67 to double
  %42 = load i32, i32* %gb1, align 4
  %43 = load i32, i32* %gc1, align 4
  %tobool69 = icmp ne i32 %43, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot.ext71 = zext i1 %lnot70 to i32
  %mul72 = mul nsw i32 %42, %lnot.ext71
  %44 = load i32, i32* %gb2, align 4
  %mul73 = mul nsw i32 %mul72, %44
  %45 = load i32, i32* %gc2, align 4
  %mul74 = mul nsw i32 %mul73, %45
  %conv75 = sitofp i32 %mul74 to double
  %mul76 = fmul double %conv75, 1.000000e+00
  %add77 = fadd double %conv68, %mul76
  %46 = load i32, i32* %gb1, align 4
  %47 = load i32, i32* %gc1, align 4
  %mul78 = mul nsw i32 %46, %47
  %48 = load i32, i32* %gb2, align 4
  %mul79 = mul nsw i32 %mul78, %48
  %49 = load i32, i32* %gc2, align 4
  %tobool80 = icmp ne i32 %49, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot.ext82 = zext i1 %lnot81 to i32
  %mul83 = mul nsw i32 %mul79, %lnot.ext82
  %conv84 = sitofp i32 %mul83 to double
  %mul85 = fmul double %conv84, 1.000000e+00
  %add86 = fadd double %add77, %mul85
  %conv87 = fptosi double %add86 to i32
  store i32 %conv87, i32* %cob, align 4
  %50 = load i32, i32* %cob, align 4
  %conv88 = sext i32 %50 to i64
  %51 = load i32, i32* @penalty, align 4
  %conv89 = sext i32 %51 to i64
  %mul90 = mul nsw i64 %conv88, %conv89
  %conv91 = sitofp i64 %mul90 to double
  %52 = load double, double* %efficient, align 8
  %mul92 = fmul double %conv91, %52
  %53 = load i64, i64* %score, align 8
  %conv93 = sitofp i64 %53 to double
  %add94 = fadd double %conv93, %mul92
  %conv95 = fptosi double %add94 to i64
  store i64 %conv95, i64* %score, align 8
  %54 = load i32, i32* %k, align 4
  %idxprom96 = sext i32 %54 to i64
  %55 = load i32, i32* %j, align 4
  %idxprom97 = sext i32 %55 to i64
  %56 = load i8**, i8*** %seq.addr, align 8
  %arrayidx98 = getelementptr inbounds i8*, i8** %56, i64 %idxprom97
  %57 = load i8*, i8** %arrayidx98, align 8
  %arrayidx99 = getelementptr inbounds i8, i8* %57, i64 %idxprom96
  %58 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %58 to i32
  %idxprom101 = sext i32 %conv100 to i64
  %59 = load i32, i32* %k, align 4
  %idxprom102 = sext i32 %59 to i64
  %60 = load i32, i32* %i, align 4
  %idxprom103 = sext i32 %60 to i64
  %61 = load i8**, i8*** %seq.addr, align 8
  %arrayidx104 = getelementptr inbounds i8*, i8** %61, i64 %idxprom103
  %62 = load i8*, i8** %arrayidx104, align 8
  %arrayidx105 = getelementptr inbounds i8, i8* %62, i64 %idxprom102
  %63 = load i8, i8* %arrayidx105, align 1
  %conv106 = sext i8 %63 to i32
  %idxprom107 = sext i32 %conv106 to i64
  %arrayidx108 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom107
  %arrayidx109 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx108, i32 0, i64 %idxprom101
  %64 = load i32, i32* %arrayidx109, align 4
  %conv110 = sext i32 %64 to i64
  %conv111 = sitofp i64 %conv110 to double
  %65 = load double, double* %efficient, align 8
  %mul112 = fmul double %conv111, %65
  %66 = load i64, i64* %score, align 8
  %conv113 = sitofp i64 %66 to double
  %add114 = fadd double %conv113, %mul112
  %conv115 = fptosi double %add114 to i64
  store i64 %conv115, i64* %score, align 8
  %67 = load i32, i32* %gc1, align 4
  %tobool116 = icmp ne i32 %67, 0
  %lnot117 = xor i1 %tobool116, true
  %lnot.ext118 = zext i1 %lnot117 to i32
  %68 = load i32, i32* %gc2, align 4
  %tobool119 = icmp ne i32 %68, 0
  %lnot120 = xor i1 %tobool119, true
  %lnot.ext121 = zext i1 %lnot120 to i32
  %mul122 = mul nsw i32 %lnot.ext118, %lnot.ext121
  %69 = load i32, i32* %nglen, align 4
  %add123 = add nsw i32 %69, %mul122
  store i32 %add123, i32* %nglen, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.12
  %70 = load i32, i32* %k, align 4
  %inc = add nsw i32 %70, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  br label %for.inc.124

for.inc.124:                                      ; preds = %for.end
  %71 = load i32, i32* %j, align 4
  %inc125 = add nsw i32 %71, 1
  store i32 %inc125, i32* %j, align 4
  br label %for.cond.2

for.end.126:                                      ; preds = %for.cond.2
  br label %for.inc.127

for.inc.127:                                      ; preds = %for.end.126
  %72 = load i32, i32* %i, align 4
  %inc128 = add nsw i32 %72, 1
  store i32 %inc128, i32* %i, align 4
  br label %for.cond

for.end.129:                                      ; preds = %for.cond
  %73 = load i64, i64* %score, align 8
  %conv130 = sitofp i64 %73 to float
  %74 = load i32, i32* %nglen, align 4
  %conv131 = sitofp i32 %74 to float
  %div = fdiv float %conv130, %conv131
  %conv132 = fpext float %div to double
  %75 = load i32, i32* @scoremtx, align 4
  %tobool133 = icmp ne i32 %75, 0
  %lnot134 = xor i1 %tobool133, true
  %lnot.ext135 = zext i1 %lnot134 to i32
  %conv136 = sitofp i32 %lnot.ext135 to double
  %mul137 = fmul double 4.000000e+02, %conv136
  %add138 = fadd double %conv132, %mul137
  %conv139 = fptrunc double %add138 to float
  ret float %conv139
}

; Function Attrs: nounwind uwtable
define void @AllocateTmpSeqs(i8*** %mseq2pt, i8** %mseq1pt, i32 %locnlenmax) #0 {
entry:
  %mseq2pt.addr = alloca i8***, align 8
  %mseq1pt.addr = alloca i8**, align 8
  %locnlenmax.addr = alloca i32, align 4
  store i8*** %mseq2pt, i8**** %mseq2pt.addr, align 8
  store i8** %mseq1pt, i8*** %mseq1pt.addr, align 8
  store i32 %locnlenmax, i32* %locnlenmax.addr, align 4
  %0 = load i32, i32* @njob, align 4
  %1 = load i32, i32* %locnlenmax.addr, align 4
  %add = add nsw i32 %1, 1
  %call = call i8** @AllocateCharMtx(i32 %0, i32 %add)
  %2 = load i8***, i8**** %mseq2pt.addr, align 8
  store i8** %call, i8*** %2, align 8
  %3 = load i32, i32* %locnlenmax.addr, align 4
  %add1 = add nsw i32 %3, 1
  %call2 = call i8* @AllocateCharVec(i32 %add1)
  %4 = load i8**, i8*** %mseq1pt.addr, align 8
  store i8* %call2, i8** %4, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @FreeTmpSeqs(i8** %mseq2, i8* %mseq1) #0 {
entry:
  %mseq2.addr = alloca i8**, align 8
  %mseq1.addr = alloca i8*, align 8
  store i8** %mseq2, i8*** %mseq2.addr, align 8
  store i8* %mseq1, i8** %mseq1.addr, align 8
  %0 = load i8**, i8*** %mseq2.addr, align 8
  call void @FreeCharMtx(i8** %0)
  %1 = load i8*, i8** %mseq1.addr, align 8
  call void @free(i8* %1) #8
  ret void
}

; Function Attrs: nounwind uwtable
define void @gappick0(i8* %aseq, i8* %seq) #0 {
entry:
  %aseq.addr = alloca i8*, align 8
  %seq.addr = alloca i8*, align 8
  store i8* %aseq, i8** %aseq.addr, align 8
  store i8* %seq, i8** %seq.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %seq.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %seq.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp ne i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i8*, i8** %seq.addr, align 8
  %5 = load i8, i8* %4, align 1
  %6 = load i8*, i8** %aseq.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %aseq.addr, align 8
  store i8 %5, i8* %6, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i8*, i8** %seq.addr, align 8
  %incdec.ptr5 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr5, i8** %seq.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i8*, i8** %aseq.addr, align 8
  store i8 0, i8* %8, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define void @gappick(i32 %nseq, i32 %s, i8** %aseq, i8** %mseq2, double** %eff, double* %effarr) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %aseq.addr = alloca i8**, align 8
  %mseq2.addr = alloca i8**, align 8
  %eff.addr = alloca double**, align 8
  %effarr.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %countjob = alloca i32, align 4
  %len = alloca i32, align 4
  %allgap = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i8** %aseq, i8*** %aseq.addr, align 8
  store i8** %mseq2, i8*** %mseq2.addr, align 8
  store double** %eff, double*** %eff.addr, align 8
  store double* %effarr, double** %effarr.addr, align 8
  %0 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.39, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.41

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %allgap, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %nseq.addr, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.2
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %s.addr, align 4
  %cmp6 = icmp ne i32 %6, %7
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.5
  %8 = load i32, i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %9 to i64
  %10 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %10, i64 %idxprom8
  %11 = load i8*, i8** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %11, i64 %idxprom
  %12 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %12 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  %conv13 = zext i1 %cmp12 to i32
  %13 = load i32, i32* %allgap, align 4
  %mul = mul nsw i32 %13, %conv13
  store i32 %mul, i32* %allgap, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.5
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %j, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.2

for.end:                                          ; preds = %for.cond.2
  %15 = load i32, i32* %allgap, align 4
  %cmp14 = icmp eq i32 %15, 0
  br i1 %cmp14, label %if.then.16, label %if.end.38

if.then.16:                                       ; preds = %for.end
  store i32 0, i32* %j, align 4
  store i32 0, i32* %countjob, align 4
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.34, %if.then.16
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %nseq.addr, align 4
  %cmp18 = icmp slt i32 %16, %17
  br i1 %cmp18, label %for.body.20, label %for.end.36

for.body.20:                                      ; preds = %for.cond.17
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %s.addr, align 4
  %cmp21 = icmp ne i32 %18, %19
  br i1 %cmp21, label %if.then.23, label %if.end.33

if.then.23:                                       ; preds = %for.body.20
  %20 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %20 to i64
  %21 = load i32, i32* %j, align 4
  %idxprom25 = sext i32 %21 to i64
  %22 = load i8**, i8*** %aseq.addr, align 8
  %arrayidx26 = getelementptr inbounds i8*, i8** %22, i64 %idxprom25
  %23 = load i8*, i8** %arrayidx26, align 8
  %arrayidx27 = getelementptr inbounds i8, i8* %23, i64 %idxprom24
  %24 = load i8, i8* %arrayidx27, align 1
  %25 = load i32, i32* %count, align 4
  %idxprom28 = sext i32 %25 to i64
  %26 = load i32, i32* %countjob, align 4
  %idxprom29 = sext i32 %26 to i64
  %27 = load i8**, i8*** %mseq2.addr, align 8
  %arrayidx30 = getelementptr inbounds i8*, i8** %27, i64 %idxprom29
  %28 = load i8*, i8** %arrayidx30, align 8
  %arrayidx31 = getelementptr inbounds i8, i8* %28, i64 %idxprom28
  store i8 %24, i8* %arrayidx31, align 1
  %29 = load i32, i32* %countjob, align 4
  %inc32 = add nsw i32 %29, 1
  store i32 %inc32, i32* %countjob, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.23, %for.body.20
  br label %for.inc.34

for.inc.34:                                       ; preds = %if.end.33
  %30 = load i32, i32* %j, align 4
  %inc35 = add nsw i32 %30, 1
  store i32 %inc35, i32* %j, align 4
  br label %for.cond.17

for.end.36:                                       ; preds = %for.cond.17
  %31 = load i32, i32* %count, align 4
  %inc37 = add nsw i32 %31, 1
  store i32 %inc37, i32* %count, align 4
  br label %if.end.38

if.end.38:                                        ; preds = %for.end.36, %for.end
  br label %for.inc.39

for.inc.39:                                       ; preds = %if.end.38
  %32 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %32, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end.41:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.42

for.cond.42:                                      ; preds = %for.inc.50, %for.end.41
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %34, 1
  %cmp43 = icmp slt i32 %33, %sub
  br i1 %cmp43, label %for.body.45, label %for.end.52

for.body.45:                                      ; preds = %for.cond.42
  %35 = load i32, i32* %count, align 4
  %idxprom46 = sext i32 %35 to i64
  %36 = load i32, i32* %i, align 4
  %idxprom47 = sext i32 %36 to i64
  %37 = load i8**, i8*** %mseq2.addr, align 8
  %arrayidx48 = getelementptr inbounds i8*, i8** %37, i64 %idxprom47
  %38 = load i8*, i8** %arrayidx48, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %38, i64 %idxprom46
  store i8 0, i8* %arrayidx49, align 1
  br label %for.inc.50

for.inc.50:                                       ; preds = %for.body.45
  %39 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %39, 1
  store i32 %inc51, i32* %i, align 4
  br label %for.cond.42

for.end.52:                                       ; preds = %for.cond.42
  store i32 0, i32* %i, align 4
  store i32 0, i32* %countjob, align 4
  br label %for.cond.53

for.cond.53:                                      ; preds = %for.inc.68, %for.end.52
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %nseq.addr, align 4
  %cmp54 = icmp slt i32 %40, %41
  br i1 %cmp54, label %for.body.56, label %for.end.70

for.body.56:                                      ; preds = %for.cond.53
  %42 = load i32, i32* %i, align 4
  %43 = load i32, i32* %s.addr, align 4
  %cmp57 = icmp ne i32 %42, %43
  br i1 %cmp57, label %if.then.59, label %if.end.67

if.then.59:                                       ; preds = %for.body.56
  %44 = load i32, i32* %i, align 4
  %idxprom60 = sext i32 %44 to i64
  %45 = load i32, i32* %s.addr, align 4
  %idxprom61 = sext i32 %45 to i64
  %46 = load double**, double*** %eff.addr, align 8
  %arrayidx62 = getelementptr inbounds double*, double** %46, i64 %idxprom61
  %47 = load double*, double** %arrayidx62, align 8
  %arrayidx63 = getelementptr inbounds double, double* %47, i64 %idxprom60
  %48 = load double, double* %arrayidx63, align 8
  %49 = load i32, i32* %countjob, align 4
  %idxprom64 = sext i32 %49 to i64
  %50 = load double*, double** %effarr.addr, align 8
  %arrayidx65 = getelementptr inbounds double, double* %50, i64 %idxprom64
  store double %48, double* %arrayidx65, align 8
  %51 = load i32, i32* %countjob, align 4
  %inc66 = add nsw i32 %51, 1
  store i32 %inc66, i32* %countjob, align 4
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.59, %for.body.56
  br label %for.inc.68

for.inc.68:                                       ; preds = %if.end.67
  %52 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %52, 1
  store i32 %inc69, i32* %i, align 4
  br label %for.cond.53

for.end.70:                                       ; preds = %for.cond.53
  ret void
}

; Function Attrs: nounwind uwtable
define void @commongappick_record(i32 %nseq, i8** %seq, i32* %map) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %map.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store i32* %map, i32** %map.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.34, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.36

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %nseq.addr, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.2
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i32, i32* %j, align 4
  %idxprom6 = sext i32 %7 to i64
  %8 = load i8**, i8*** %seq.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %8, i64 %idxprom6
  %9 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %10 to i32
  %cmp10 = icmp ne i32 %conv9, 45
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.5
  br label %for.end

if.end:                                           ; preds = %for.body.5
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.2

for.end:                                          ; preds = %if.then, %for.cond.2
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %nseq.addr, align 4
  %cmp12 = icmp ne i32 %12, %13
  br i1 %cmp12, label %if.then.14, label %if.end.33

if.then.14:                                       ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.27, %if.then.14
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %nseq.addr, align 4
  %cmp16 = icmp slt i32 %14, %15
  br i1 %cmp16, label %for.body.18, label %for.end.29

for.body.18:                                      ; preds = %for.cond.15
  %16 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %16 to i64
  %17 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx21 = getelementptr inbounds i8*, i8** %18, i64 %idxprom20
  %19 = load i8*, i8** %arrayidx21, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %19, i64 %idxprom19
  %20 = load i8, i8* %arrayidx22, align 1
  %21 = load i32, i32* %count, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %22 to i64
  %23 = load i8**, i8*** %seq.addr, align 8
  %arrayidx25 = getelementptr inbounds i8*, i8** %23, i64 %idxprom24
  %24 = load i8*, i8** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %24, i64 %idxprom23
  store i8 %20, i8* %arrayidx26, align 1
  br label %for.inc.27

for.inc.27:                                       ; preds = %for.body.18
  %25 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %25, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond.15

for.end.29:                                       ; preds = %for.cond.15
  %26 = load i32, i32* %i, align 4
  %27 = load i32, i32* %count, align 4
  %idxprom30 = sext i32 %27 to i64
  %28 = load i32*, i32** %map.addr, align 8
  %arrayidx31 = getelementptr inbounds i32, i32* %28, i64 %idxprom30
  store i32 %26, i32* %arrayidx31, align 4
  %29 = load i32, i32* %count, align 4
  %inc32 = add nsw i32 %29, 1
  store i32 %inc32, i32* %count, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %for.end.29, %for.end
  br label %for.inc.34

for.inc.34:                                       ; preds = %if.end.33
  %30 = load i32, i32* %i, align 4
  %inc35 = add nsw i32 %30, 1
  store i32 %inc35, i32* %i, align 4
  br label %for.cond

for.end.36:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @commongappick(i32 %nseq, i8** %seq) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %count, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.32, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end.34

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %nseq.addr, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.2
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load i32, i32* %j, align 4
  %idxprom6 = sext i32 %7 to i64
  %8 = load i8**, i8*** %seq.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %8, i64 %idxprom6
  %9 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %10 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %10 to i32
  %cmp10 = icmp ne i32 %conv9, 45
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.5
  br label %for.end

if.end:                                           ; preds = %for.body.5
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %j, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.2

for.end:                                          ; preds = %if.then, %for.cond.2
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %nseq.addr, align 4
  %cmp12 = icmp ne i32 %12, %13
  br i1 %cmp12, label %if.then.14, label %if.end.31

if.then.14:                                       ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc.27, %if.then.14
  %14 = load i32, i32* %j, align 4
  %15 = load i32, i32* %nseq.addr, align 4
  %cmp16 = icmp slt i32 %14, %15
  br i1 %cmp16, label %for.body.18, label %for.end.29

for.body.18:                                      ; preds = %for.cond.15
  %16 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %16 to i64
  %17 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx21 = getelementptr inbounds i8*, i8** %18, i64 %idxprom20
  %19 = load i8*, i8** %arrayidx21, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %19, i64 %idxprom19
  %20 = load i8, i8* %arrayidx22, align 1
  %21 = load i32, i32* %count, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %22 to i64
  %23 = load i8**, i8*** %seq.addr, align 8
  %arrayidx25 = getelementptr inbounds i8*, i8** %23, i64 %idxprom24
  %24 = load i8*, i8** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %24, i64 %idxprom23
  store i8 %20, i8* %arrayidx26, align 1
  br label %for.inc.27

for.inc.27:                                       ; preds = %for.body.18
  %25 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %25, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond.15

for.end.29:                                       ; preds = %for.cond.15
  %26 = load i32, i32* %count, align 4
  %inc30 = add nsw i32 %26, 1
  store i32 %inc30, i32* %count, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %for.end.29, %for.end
  br label %for.inc.32

for.inc.32:                                       ; preds = %if.end.31
  %27 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %27, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond

for.end.34:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define double @score_calc0(i8** %seq, i32 %s, double** %eff, i32 %ex) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %ex.addr = alloca i32, align 4
  %tmp = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  store i32 %ex, i32* %ex.addr, align 4
  %0 = load i32, i32* @scmtd, align 4
  %cmp = icmp eq i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %seq.addr, align 8
  %2 = load i32, i32* %s.addr, align 4
  %3 = load double**, double*** %eff.addr, align 8
  %4 = load i32, i32* %ex.addr, align 4
  %call = call double @score_calc3(i8** %1, i32 %2, double** %3, i32 %4)
  store double %call, double* %tmp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* @scmtd, align 4
  %cmp1 = icmp eq i32 %5, 4
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %6 = load i8**, i8*** %seq.addr, align 8
  %7 = load i32, i32* %s.addr, align 4
  %8 = load double**, double*** %eff.addr, align 8
  %9 = load i32, i32* %ex.addr, align 4
  %call3 = call double @score_calc4(i8** %6, i32 %7, double** %8, i32 %9)
  store double %call3, double* %tmp, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %10 = load i32, i32* @scmtd, align 4
  %cmp5 = icmp eq i32 %10, 5
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end.4
  %11 = load i8**, i8*** %seq.addr, align 8
  %12 = load i32, i32* %s.addr, align 4
  %13 = load double**, double*** %eff.addr, align 8
  %14 = load i32, i32* %ex.addr, align 4
  %call7 = call double @score_calc5(i8** %11, i32 %12, double** %13, i32 %14)
  store double %call7, double* %tmp, align 8
  br label %if.end.9

if.else:                                          ; preds = %if.end.4
  %15 = load i8**, i8*** %seq.addr, align 8
  %16 = load i32, i32* %s.addr, align 4
  %17 = load double**, double*** %eff.addr, align 8
  %18 = load i32, i32* %ex.addr, align 4
  %call8 = call double @score_calc5(i8** %15, i32 %16, double** %17, i32 %18)
  store double %call8, double* %tmp, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.6
  %19 = load double, double* %tmp, align 8
  ret double %19
}

; Function Attrs: nounwind uwtable
define void @strins(i8* %str1, i8* %str2) #0 {
entry:
  %str1.addr = alloca i8*, align 8
  %str2.addr = alloca i8*, align 8
  %bk = alloca i8*, align 8
  %len1 = alloca i32, align 4
  %len2 = alloca i32, align 4
  store i8* %str1, i8** %str1.addr, align 8
  store i8* %str2, i8** %str2.addr, align 8
  %0 = load i8*, i8** %str1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len1, align 4
  %1 = load i8*, i8** %str2.addr, align 8
  %call1 = call i64 @strlen(i8* %1) #6
  %conv2 = trunc i64 %call1 to i32
  store i32 %conv2, i32* %len2, align 4
  %2 = load i8*, i8** %str2.addr, align 8
  store i8* %2, i8** %bk, align 8
  %3 = load i32, i32* %len1, align 4
  %4 = load i32, i32* %len2, align 4
  %add = add nsw i32 %3, %4
  %5 = load i8*, i8** %str2.addr, align 8
  %idx.ext = sext i32 %add to i64
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %idx.ext
  store i8* %add.ptr, i8** %str2.addr, align 8
  %6 = load i32, i32* %len1, align 4
  %sub = sub nsw i32 %6, 1
  %7 = load i8*, i8** %str1.addr, align 8
  %idx.ext3 = sext i32 %sub to i64
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %idx.ext3
  store i8* %add.ptr4, i8** %str1.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %8 = load i8*, i8** %str2.addr, align 8
  %9 = load i8*, i8** %bk, align 8
  %10 = load i32, i32* %len1, align 4
  %idx.ext5 = sext i32 %10 to i64
  %add.ptr6 = getelementptr inbounds i8, i8* %9, i64 %idx.ext5
  %cmp = icmp uge i8* %8, %add.ptr6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %str2.addr, align 8
  %12 = load i32, i32* %len1, align 4
  %idx.ext8 = sext i32 %12 to i64
  %idx.neg = sub i64 0, %idx.ext8
  %add.ptr9 = getelementptr inbounds i8, i8* %11, i64 %idx.neg
  %13 = load i8, i8* %add.ptr9, align 1
  %14 = load i8*, i8** %str2.addr, align 8
  store i8 %13, i8* %14, align 1
  %15 = load i8*, i8** %str2.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 -1
  store i8* %incdec.ptr, i8** %str2.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond.10

while.cond.10:                                    ; preds = %while.body.13, %while.end
  %16 = load i8*, i8** %str2.addr, align 8
  %17 = load i8*, i8** %bk, align 8
  %cmp11 = icmp uge i8* %16, %17
  br i1 %cmp11, label %while.body.13, label %while.end.16

while.body.13:                                    ; preds = %while.cond.10
  %18 = load i8*, i8** %str1.addr, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %18, i32 -1
  store i8* %incdec.ptr14, i8** %str1.addr, align 8
  %19 = load i8, i8* %18, align 1
  %20 = load i8*, i8** %str2.addr, align 8
  %incdec.ptr15 = getelementptr inbounds i8, i8* %20, i32 -1
  store i8* %incdec.ptr15, i8** %str2.addr, align 8
  store i8 %19, i8* %20, align 1
  br label %while.cond.10

while.end.16:                                     ; preds = %while.cond.10
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @isaligned(i32 %nseq, i8** %seq) #0 {
entry:
  %retval = alloca i32, align 4
  %nseq.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store i32 %nseq, i32* %nseq.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nseq.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %5, i64 %idxprom
  %6 = load i8*, i8** %arrayidx2, align 8
  %call3 = call i64 @strlen(i8* %6) #6
  %7 = load i32, i32* %len, align 4
  %conv4 = sext i32 %7 to i64
  %cmp5 = icmp ne i64 %call3, %conv4
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define double @score_calc_for_score(i32 %nseq, i8** %seq) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca double, align 8
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store double 0.000000e+00, double* %score, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.87, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.89

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.84, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %nseq.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.86

for.body.5:                                       ; preds = %for.cond.2
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8**, i8*** %seq.addr, align 8
  %arrayidx6 = getelementptr inbounds i8*, i8** %8, i64 %idxprom
  %9 = load i8*, i8** %arrayidx6, align 8
  store i8* %9, i8** %mseq1, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i64 %idxprom7
  %12 = load i8*, i8** %arrayidx8, align 8
  store i8* %12, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %c, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body.5
  %13 = load i32, i32* %k, align 4
  %14 = load i32, i32* %len, align 4
  %cmp10 = icmp slt i32 %13, %14
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %16 = load i8*, i8** %mseq1, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %16, i64 %idxprom13
  %17 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %17 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.12
  %18 = load i32, i32* %k, align 4
  %idxprom18 = sext i32 %18 to i64
  %19 = load i8*, i8** %mseq2, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 %idxprom18
  %20 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body.12
  %21 = load i32, i32* %k, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i8*, i8** %mseq2, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %22, i64 %idxprom23
  %23 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %23 to i32
  %idxprom26 = sext i32 %conv25 to i64
  %24 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %24 to i64
  %25 = load i8*, i8** %mseq1, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %25, i64 %idxprom27
  %26 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %26 to i32
  %idxprom30 = sext i32 %conv29 to i64
  %arrayidx31 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom30
  %arrayidx32 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx31, i32 0, i64 %idxprom26
  %27 = load i32, i32* %arrayidx32, align 4
  %conv33 = sitofp i32 %27 to double
  %28 = load double, double* %tmpscore, align 8
  %add34 = fadd double %28, %conv33
  store double %add34, double* %tmpscore, align 8
  %29 = load i32, i32* %c, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, i32* %c, align 4
  %30 = load i32, i32* %k, align 4
  %idxprom35 = sext i32 %30 to i64
  %31 = load i8*, i8** %mseq1, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %31, i64 %idxprom35
  %32 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %32 to i32
  %cmp38 = icmp eq i32 %conv37, 45
  br i1 %cmp38, label %if.then.40, label %if.end.55

if.then.40:                                       ; preds = %if.end
  %33 = load i32, i32* @penalty, align 4
  %34 = load i32, i32* getelementptr inbounds ([26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 0, i64 24), align 4
  %sub41 = sub nsw i32 %33, %34
  %conv42 = sitofp i32 %sub41 to double
  %35 = load double, double* %tmpscore, align 8
  %add43 = fadd double %35, %conv42
  store double %add43, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.40
  %36 = load i32, i32* %k, align 4
  %inc44 = add nsw i32 %36, 1
  store i32 %inc44, i32* %k, align 4
  %idxprom45 = sext i32 %inc44 to i64
  %37 = load i8*, i8** %mseq1, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %37, i64 %idxprom45
  %38 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %38 to i32
  %cmp48 = icmp eq i32 %conv47, 45
  br i1 %cmp48, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %39 = load i32, i32* %k, align 4
  %dec = add nsw i32 %39, -1
  store i32 %dec, i32* %k, align 4
  %40 = load i32, i32* %k, align 4
  %41 = load i32, i32* %len, align 4
  %sub50 = sub nsw i32 %41, 2
  %cmp51 = icmp sgt i32 %40, %sub50
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %while.end
  br label %for.end

if.end.54:                                        ; preds = %while.end
  br label %for.inc

if.end.55:                                        ; preds = %if.end
  %42 = load i32, i32* %k, align 4
  %idxprom56 = sext i32 %42 to i64
  %43 = load i8*, i8** %mseq2, align 8
  %arrayidx57 = getelementptr inbounds i8, i8* %43, i64 %idxprom56
  %44 = load i8, i8* %arrayidx57, align 1
  %conv58 = sext i8 %44 to i32
  %cmp59 = icmp eq i32 %conv58, 45
  br i1 %cmp59, label %if.then.61, label %if.end.80

if.then.61:                                       ; preds = %if.end.55
  %45 = load i32, i32* @penalty, align 4
  %46 = load i32, i32* getelementptr inbounds ([26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 0, i64 24), align 4
  %sub62 = sub nsw i32 %45, %46
  %conv63 = sitofp i32 %sub62 to double
  %47 = load double, double* %tmpscore, align 8
  %add64 = fadd double %47, %conv63
  store double %add64, double* %tmpscore, align 8
  br label %while.cond.65

while.cond.65:                                    ; preds = %while.body.72, %if.then.61
  %48 = load i32, i32* %k, align 4
  %inc66 = add nsw i32 %48, 1
  store i32 %inc66, i32* %k, align 4
  %idxprom67 = sext i32 %inc66 to i64
  %49 = load i8*, i8** %mseq2, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %49, i64 %idxprom67
  %50 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %50 to i32
  %cmp70 = icmp eq i32 %conv69, 45
  br i1 %cmp70, label %while.body.72, label %while.end.73

while.body.72:                                    ; preds = %while.cond.65
  br label %while.cond.65

while.end.73:                                     ; preds = %while.cond.65
  %51 = load i32, i32* %k, align 4
  %dec74 = add nsw i32 %51, -1
  store i32 %dec74, i32* %k, align 4
  %52 = load i32, i32* %k, align 4
  %53 = load i32, i32* %len, align 4
  %sub75 = sub nsw i32 %53, 2
  %cmp76 = icmp sgt i32 %52, %sub75
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %while.end.73
  br label %for.end

if.end.79:                                        ; preds = %while.end.73
  br label %for.inc

if.end.80:                                        ; preds = %if.end.55
  br label %for.inc

for.inc:                                          ; preds = %if.end.80, %if.end.79, %if.end.54, %if.then
  %54 = load i32, i32* %k, align 4
  %inc81 = add nsw i32 %54, 1
  store i32 %inc81, i32* %k, align 4
  br label %for.cond.9

for.end:                                          ; preds = %if.then.78, %if.then.53, %for.cond.9
  %55 = load double, double* %tmpscore, align 8
  %56 = load i32, i32* %c, align 4
  %conv82 = sitofp i32 %56 to double
  %div = fdiv double %55, %conv82
  %57 = load double, double* %score, align 8
  %add83 = fadd double %57, %div
  store double %add83, double* %score, align 8
  br label %for.inc.84

for.inc.84:                                       ; preds = %for.end
  %58 = load i32, i32* %j, align 4
  %inc85 = add nsw i32 %58, 1
  store i32 %inc85, i32* %j, align 4
  br label %for.cond.2

for.end.86:                                       ; preds = %for.cond.2
  br label %for.inc.87

for.inc.87:                                       ; preds = %for.end.86
  %59 = load i32, i32* %i, align 4
  %inc88 = add nsw i32 %59, 1
  store i32 %inc88, i32* %i, align 4
  br label %for.cond

for.end.89:                                       ; preds = %for.cond
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %61 = load double, double* %score, align 8
  %call90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.29, i32 0, i32 0), double %61)
  %62 = load i32, i32* %nseq.addr, align 4
  %conv91 = sitofp i32 %62 to double
  %63 = load i32, i32* %nseq.addr, align 4
  %conv92 = sitofp i32 %63 to double
  %sub93 = fsub double %conv92, 1.000000e+00
  %mul = fmul double %conv91, %sub93
  %div94 = fdiv double %mul, 2.000000e+00
  %64 = load double, double* %score, align 8
  %div95 = fdiv double %64, %div94
  store double %div95, double* %score, align 8
  %65 = load double, double* %score, align 8
  %add96 = fadd double %65, 4.000000e+02
  store double %add96, double* %score, align 8
  %66 = load double, double* %score, align 8
  ret double %66
}

; Function Attrs: nounwind uwtable
define void @floatncpy(float* %vec1, float* %vec2, i32 %len) #0 {
entry:
  %vec1.addr = alloca float*, align 8
  %vec2.addr = alloca float*, align 8
  %len.addr = alloca i32, align 4
  store float* %vec1, float** %vec1.addr, align 8
  store float* %vec2, float** %vec2.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %len.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %len.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load float*, float** %vec2.addr, align 8
  %incdec.ptr = getelementptr inbounds float, float* %1, i32 1
  store float* %incdec.ptr, float** %vec2.addr, align 8
  %2 = load float, float* %1, align 4
  %3 = load float*, float** %vec1.addr, align 8
  %incdec.ptr1 = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr1, float** %vec1.addr, align 8
  store float %2, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define float @score_calc_a(i8** %seq, i32 %s, double** %eff) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb1 = alloca i32, align 4
  %gb2 = alloca i32, align 4
  %gc1 = alloca i32, align 4
  %gc2 = alloca i32, align 4
  %cob = alloca i32, align 4
  %nglen = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca float, align 4
  %efficient = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %nglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.160, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.162

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.157, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.159

for.body.5:                                       ; preds = %for.cond.2
  %7 = load i32, i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load double**, double*** %eff.addr, align 8
  %arrayidx7 = getelementptr inbounds double*, double** %9, i64 %idxprom6
  %10 = load double*, double** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds double, double* %10, i64 %idxprom
  %11 = load double, double* %arrayidx8, align 8
  store double %11, double* %efficient, align 8
  store i32 0, i32* %gc1, align 4
  store i32 0, i32* %gc2, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body.5
  %12 = load i32, i32* %k, align 4
  %13 = load i32, i32* %len, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %14 = load i32, i32* %gc1, align 4
  store i32 %14, i32* %gb1, align 4
  %15 = load i32, i32* %gc2, align 4
  store i32 %15, i32* %gb2, align 4
  %16 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %16 to i64
  %17 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx15 = getelementptr inbounds i8*, i8** %18, i64 %idxprom14
  %19 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %19, i64 %idxprom13
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %20 to i32
  %cmp18 = icmp eq i32 %conv17, 45
  %conv19 = zext i1 %cmp18 to i32
  store i32 %conv19, i32* %gc1, align 4
  %21 = load i32, i32* %k, align 4
  %idxprom20 = sext i32 %21 to i64
  %22 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %22 to i64
  %23 = load i8**, i8*** %seq.addr, align 8
  %arrayidx22 = getelementptr inbounds i8*, i8** %23, i64 %idxprom21
  %24 = load i8*, i8** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %idxprom20
  %25 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %25 to i32
  %cmp25 = icmp eq i32 %conv24, 45
  %conv26 = zext i1 %cmp25 to i32
  store i32 %conv26, i32* %gc2, align 4
  %26 = load i32, i32* %gb1, align 4
  %tobool = icmp ne i32 %26, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %27 = load i32, i32* %gc1, align 4
  %mul = mul nsw i32 %lnot.ext, %27
  %28 = load i32, i32* %gb2, align 4
  %tobool27 = icmp ne i32 %28, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %mul30 = mul nsw i32 %mul, %lnot.ext29
  %29 = load i32, i32* %gc2, align 4
  %tobool31 = icmp ne i32 %29, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %mul34 = mul nsw i32 %mul30, %lnot.ext33
  %30 = load i32, i32* %gb1, align 4
  %31 = load i32, i32* %gc1, align 4
  %tobool35 = icmp ne i32 %31, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %mul38 = mul nsw i32 %30, %lnot.ext37
  %32 = load i32, i32* %gb2, align 4
  %tobool39 = icmp ne i32 %32, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %mul42 = mul nsw i32 %mul38, %lnot.ext41
  %33 = load i32, i32* %gc2, align 4
  %tobool43 = icmp ne i32 %33, 0
  %lnot44 = xor i1 %tobool43, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  %mul46 = mul nsw i32 %mul42, %lnot.ext45
  %add47 = add nsw i32 %mul34, %mul46
  %34 = load i32, i32* %gb1, align 4
  %tobool48 = icmp ne i32 %34, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %35 = load i32, i32* %gc1, align 4
  %tobool51 = icmp ne i32 %35, 0
  %lnot52 = xor i1 %tobool51, true
  %lnot.ext53 = zext i1 %lnot52 to i32
  %mul54 = mul nsw i32 %lnot.ext50, %lnot.ext53
  %36 = load i32, i32* %gb2, align 4
  %tobool55 = icmp ne i32 %36, 0
  %lnot56 = xor i1 %tobool55, true
  %lnot.ext57 = zext i1 %lnot56 to i32
  %mul58 = mul nsw i32 %mul54, %lnot.ext57
  %37 = load i32, i32* %gc2, align 4
  %mul59 = mul nsw i32 %mul58, %37
  %add60 = add nsw i32 %add47, %mul59
  %38 = load i32, i32* %gb1, align 4
  %tobool61 = icmp ne i32 %38, 0
  %lnot62 = xor i1 %tobool61, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %39 = load i32, i32* %gc1, align 4
  %tobool64 = icmp ne i32 %39, 0
  %lnot65 = xor i1 %tobool64, true
  %lnot.ext66 = zext i1 %lnot65 to i32
  %mul67 = mul nsw i32 %lnot.ext63, %lnot.ext66
  %40 = load i32, i32* %gb2, align 4
  %mul68 = mul nsw i32 %mul67, %40
  %41 = load i32, i32* %gc2, align 4
  %tobool69 = icmp ne i32 %41, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot.ext71 = zext i1 %lnot70 to i32
  %mul72 = mul nsw i32 %mul68, %lnot.ext71
  %add73 = add nsw i32 %add60, %mul72
  %42 = load i32, i32* %gb1, align 4
  %tobool74 = icmp ne i32 %42, 0
  %lnot75 = xor i1 %tobool74, true
  %lnot.ext76 = zext i1 %lnot75 to i32
  %43 = load i32, i32* %gc1, align 4
  %mul77 = mul nsw i32 %lnot.ext76, %43
  %44 = load i32, i32* %gb2, align 4
  %mul78 = mul nsw i32 %mul77, %44
  %45 = load i32, i32* %gc2, align 4
  %tobool79 = icmp ne i32 %45, 0
  %lnot80 = xor i1 %tobool79, true
  %lnot.ext81 = zext i1 %lnot80 to i32
  %mul82 = mul nsw i32 %mul78, %lnot.ext81
  %add83 = add nsw i32 %add73, %mul82
  %46 = load i32, i32* %gb1, align 4
  %47 = load i32, i32* %gc1, align 4
  %tobool84 = icmp ne i32 %47, 0
  %lnot85 = xor i1 %tobool84, true
  %lnot.ext86 = zext i1 %lnot85 to i32
  %mul87 = mul nsw i32 %46, %lnot.ext86
  %48 = load i32, i32* %gb2, align 4
  %tobool88 = icmp ne i32 %48, 0
  %lnot89 = xor i1 %tobool88, true
  %lnot.ext90 = zext i1 %lnot89 to i32
  %mul91 = mul nsw i32 %mul87, %lnot.ext90
  %49 = load i32, i32* %gc2, align 4
  %mul92 = mul nsw i32 %mul91, %49
  %add93 = add nsw i32 %add83, %mul92
  %50 = load i32, i32* %gb1, align 4
  %51 = load i32, i32* %gc1, align 4
  %tobool94 = icmp ne i32 %51, 0
  %lnot95 = xor i1 %tobool94, true
  %lnot.ext96 = zext i1 %lnot95 to i32
  %mul97 = mul nsw i32 %50, %lnot.ext96
  %52 = load i32, i32* %gb2, align 4
  %mul98 = mul nsw i32 %mul97, %52
  %53 = load i32, i32* %gc2, align 4
  %mul99 = mul nsw i32 %mul98, %53
  %add100 = add nsw i32 %add93, %mul99
  %54 = load i32, i32* %gb1, align 4
  %55 = load i32, i32* %gc1, align 4
  %mul101 = mul nsw i32 %54, %55
  %56 = load i32, i32* %gb2, align 4
  %mul102 = mul nsw i32 %mul101, %56
  %57 = load i32, i32* %gc2, align 4
  %tobool103 = icmp ne i32 %57, 0
  %lnot104 = xor i1 %tobool103, true
  %lnot.ext105 = zext i1 %lnot104 to i32
  %mul106 = mul nsw i32 %mul102, %lnot.ext105
  %add107 = add nsw i32 %add100, %mul106
  %58 = load i32, i32* %gb1, align 4
  %tobool108 = icmp ne i32 %58, 0
  %lnot109 = xor i1 %tobool108, true
  %lnot.ext110 = zext i1 %lnot109 to i32
  %59 = load i32, i32* %gc1, align 4
  %mul111 = mul nsw i32 %lnot.ext110, %59
  %60 = load i32, i32* %gb2, align 4
  %mul112 = mul nsw i32 %mul111, %60
  %61 = load i32, i32* %gc2, align 4
  %mul113 = mul nsw i32 %mul112, %61
  %add114 = add nsw i32 %add107, %mul113
  %62 = load i32, i32* %gb1, align 4
  %63 = load i32, i32* %gc1, align 4
  %mul115 = mul nsw i32 %62, %63
  %64 = load i32, i32* %gb2, align 4
  %tobool116 = icmp ne i32 %64, 0
  %lnot117 = xor i1 %tobool116, true
  %lnot.ext118 = zext i1 %lnot117 to i32
  %mul119 = mul nsw i32 %mul115, %lnot.ext118
  %65 = load i32, i32* %gc2, align 4
  %mul120 = mul nsw i32 %mul119, %65
  %add121 = add nsw i32 %add114, %mul120
  store i32 %add121, i32* %cob, align 4
  %66 = load i32, i32* %cob, align 4
  %conv122 = sitofp i32 %66 to float
  %conv123 = fpext float %conv122 to double
  %mul124 = fmul double 5.000000e-01, %conv123
  %67 = load i32, i32* @penalty, align 4
  %conv125 = sitofp i32 %67 to double
  %mul126 = fmul double %mul124, %conv125
  %68 = load double, double* %efficient, align 8
  %mul127 = fmul double %mul126, %68
  %69 = load float, float* %score, align 4
  %conv128 = fpext float %69 to double
  %add129 = fadd double %conv128, %mul127
  %conv130 = fptrunc double %add129 to float
  store float %conv130, float* %score, align 4
  %70 = load i32, i32* %k, align 4
  %idxprom131 = sext i32 %70 to i64
  %71 = load i32, i32* %j, align 4
  %idxprom132 = sext i32 %71 to i64
  %72 = load i8**, i8*** %seq.addr, align 8
  %arrayidx133 = getelementptr inbounds i8*, i8** %72, i64 %idxprom132
  %73 = load i8*, i8** %arrayidx133, align 8
  %arrayidx134 = getelementptr inbounds i8, i8* %73, i64 %idxprom131
  %74 = load i8, i8* %arrayidx134, align 1
  %conv135 = sext i8 %74 to i32
  %idxprom136 = sext i32 %conv135 to i64
  %75 = load i32, i32* %k, align 4
  %idxprom137 = sext i32 %75 to i64
  %76 = load i32, i32* %i, align 4
  %idxprom138 = sext i32 %76 to i64
  %77 = load i8**, i8*** %seq.addr, align 8
  %arrayidx139 = getelementptr inbounds i8*, i8** %77, i64 %idxprom138
  %78 = load i8*, i8** %arrayidx139, align 8
  %arrayidx140 = getelementptr inbounds i8, i8* %78, i64 %idxprom137
  %79 = load i8, i8* %arrayidx140, align 1
  %conv141 = sext i8 %79 to i32
  %idxprom142 = sext i32 %conv141 to i64
  %arrayidx143 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom142
  %arrayidx144 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx143, i32 0, i64 %idxprom136
  %80 = load i32, i32* %arrayidx144, align 4
  %conv145 = sitofp i32 %80 to float
  %81 = load double, double* %efficient, align 8
  %conv146 = fptrunc double %81 to float
  %mul147 = fmul float %conv145, %conv146
  %82 = load float, float* %score, align 4
  %add148 = fadd float %82, %mul147
  store float %add148, float* %score, align 4
  %83 = load i32, i32* %gc1, align 4
  %tobool149 = icmp ne i32 %83, 0
  %lnot150 = xor i1 %tobool149, true
  %lnot.ext151 = zext i1 %lnot150 to i32
  %84 = load i32, i32* %gc2, align 4
  %tobool152 = icmp ne i32 %84, 0
  %lnot153 = xor i1 %tobool152, true
  %lnot.ext154 = zext i1 %lnot153 to i32
  %mul155 = mul nsw i32 %lnot.ext151, %lnot.ext154
  %85 = load i32, i32* %nglen, align 4
  %add156 = add nsw i32 %85, %mul155
  store i32 %add156, i32* %nglen, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.12
  %86 = load i32, i32* %k, align 4
  %inc = add nsw i32 %86, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  br label %for.inc.157

for.inc.157:                                      ; preds = %for.end
  %87 = load i32, i32* %j, align 4
  %inc158 = add nsw i32 %87, 1
  store i32 %inc158, i32* %j, align 4
  br label %for.cond.2

for.end.159:                                      ; preds = %for.cond.2
  br label %for.inc.160

for.inc.160:                                      ; preds = %for.end.159
  %88 = load i32, i32* %i, align 4
  %inc161 = add nsw i32 %88, 1
  store i32 %inc161, i32* %i, align 4
  br label %for.cond

for.end.162:                                      ; preds = %for.cond
  %89 = load float, float* %score, align 4
  %90 = load i32, i32* %nglen, align 4
  %conv163 = sitofp i32 %90 to float
  %div = fdiv float %89, %conv163
  %conv164 = fpext float %div to double
  %91 = load i32, i32* @scoremtx, align 4
  %tobool165 = icmp ne i32 %91, 0
  %lnot166 = xor i1 %tobool165, true
  %lnot.ext167 = zext i1 %lnot166 to i32
  %conv168 = sitofp i32 %lnot.ext167 to double
  %mul169 = fmul double 4.000000e+02, %conv168
  %add170 = fadd double %conv164, %mul169
  %conv171 = fptrunc double %add170 to float
  ret float %conv171
}

; Function Attrs: nounwind uwtable
define float @score_calc_s(i8** %seq, i32 %s, double** %eff) #0 {
entry:
  %seq.addr = alloca i8**, align 8
  %s.addr = alloca i32, align 4
  %eff.addr = alloca double**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb1 = alloca i32, align 4
  %gb2 = alloca i32, align 4
  %gc1 = alloca i32, align 4
  %gc2 = alloca i32, align 4
  %cob = alloca i32, align 4
  %nglen = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca float, align 4
  %efficient = alloca double, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %s, i32* %s.addr, align 4
  store double** %eff, double*** %eff.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %nglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.132, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.134

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.129, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.131

for.body.5:                                       ; preds = %for.cond.2
  %7 = load i32, i32* %j, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %8 to i64
  %9 = load double**, double*** %eff.addr, align 8
  %arrayidx7 = getelementptr inbounds double*, double** %9, i64 %idxprom6
  %10 = load double*, double** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds double, double* %10, i64 %idxprom
  %11 = load double, double* %arrayidx8, align 8
  store double %11, double* %efficient, align 8
  store i32 0, i32* %gc1, align 4
  store i32 0, i32* %gc2, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body.5
  %12 = load i32, i32* %k, align 4
  %13 = load i32, i32* %len, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %14 = load i32, i32* %gc1, align 4
  store i32 %14, i32* %gb1, align 4
  %15 = load i32, i32* %gc2, align 4
  store i32 %15, i32* %gb2, align 4
  %16 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %16 to i64
  %17 = load i32, i32* %i, align 4
  %idxprom14 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx15 = getelementptr inbounds i8*, i8** %18, i64 %idxprom14
  %19 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %19, i64 %idxprom13
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %20 to i32
  %cmp18 = icmp eq i32 %conv17, 45
  %conv19 = zext i1 %cmp18 to i32
  store i32 %conv19, i32* %gc1, align 4
  %21 = load i32, i32* %k, align 4
  %idxprom20 = sext i32 %21 to i64
  %22 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %22 to i64
  %23 = load i8**, i8*** %seq.addr, align 8
  %arrayidx22 = getelementptr inbounds i8*, i8** %23, i64 %idxprom21
  %24 = load i8*, i8** %arrayidx22, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %idxprom20
  %25 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %25 to i32
  %cmp25 = icmp eq i32 %conv24, 45
  %conv26 = zext i1 %cmp25 to i32
  store i32 %conv26, i32* %gc2, align 4
  %26 = load i32, i32* %gb1, align 4
  %tobool = icmp ne i32 %26, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %27 = load i32, i32* %gc1, align 4
  %mul = mul nsw i32 %lnot.ext, %27
  %28 = load i32, i32* %gb2, align 4
  %tobool27 = icmp ne i32 %28, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %mul30 = mul nsw i32 %mul, %lnot.ext29
  %29 = load i32, i32* %gc2, align 4
  %tobool31 = icmp ne i32 %29, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %mul34 = mul nsw i32 %mul30, %lnot.ext33
  %30 = load i32, i32* %gb1, align 4
  %31 = load i32, i32* %gc1, align 4
  %tobool35 = icmp ne i32 %31, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %mul38 = mul nsw i32 %30, %lnot.ext37
  %32 = load i32, i32* %gb2, align 4
  %tobool39 = icmp ne i32 %32, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %mul42 = mul nsw i32 %mul38, %lnot.ext41
  %33 = load i32, i32* %gc2, align 4
  %tobool43 = icmp ne i32 %33, 0
  %lnot44 = xor i1 %tobool43, true
  %lnot.ext45 = zext i1 %lnot44 to i32
  %mul46 = mul nsw i32 %mul42, %lnot.ext45
  %add47 = add nsw i32 %mul34, %mul46
  %34 = load i32, i32* %gb1, align 4
  %tobool48 = icmp ne i32 %34, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %35 = load i32, i32* %gc1, align 4
  %tobool51 = icmp ne i32 %35, 0
  %lnot52 = xor i1 %tobool51, true
  %lnot.ext53 = zext i1 %lnot52 to i32
  %mul54 = mul nsw i32 %lnot.ext50, %lnot.ext53
  %36 = load i32, i32* %gb2, align 4
  %tobool55 = icmp ne i32 %36, 0
  %lnot56 = xor i1 %tobool55, true
  %lnot.ext57 = zext i1 %lnot56 to i32
  %mul58 = mul nsw i32 %mul54, %lnot.ext57
  %37 = load i32, i32* %gc2, align 4
  %mul59 = mul nsw i32 %mul58, %37
  %add60 = add nsw i32 %add47, %mul59
  %38 = load i32, i32* %gb1, align 4
  %tobool61 = icmp ne i32 %38, 0
  %lnot62 = xor i1 %tobool61, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %39 = load i32, i32* %gc1, align 4
  %tobool64 = icmp ne i32 %39, 0
  %lnot65 = xor i1 %tobool64, true
  %lnot.ext66 = zext i1 %lnot65 to i32
  %mul67 = mul nsw i32 %lnot.ext63, %lnot.ext66
  %40 = load i32, i32* %gb2, align 4
  %mul68 = mul nsw i32 %mul67, %40
  %41 = load i32, i32* %gc2, align 4
  %tobool69 = icmp ne i32 %41, 0
  %lnot70 = xor i1 %tobool69, true
  %lnot.ext71 = zext i1 %lnot70 to i32
  %mul72 = mul nsw i32 %mul68, %lnot.ext71
  %add73 = add nsw i32 %add60, %mul72
  %42 = load i32, i32* %gb1, align 4
  %tobool74 = icmp ne i32 %42, 0
  %lnot75 = xor i1 %tobool74, true
  %lnot.ext76 = zext i1 %lnot75 to i32
  %43 = load i32, i32* %gc1, align 4
  %mul77 = mul nsw i32 %lnot.ext76, %43
  %44 = load i32, i32* %gb2, align 4
  %mul78 = mul nsw i32 %mul77, %44
  %45 = load i32, i32* %gc2, align 4
  %tobool79 = icmp ne i32 %45, 0
  %lnot80 = xor i1 %tobool79, true
  %lnot.ext81 = zext i1 %lnot80 to i32
  %mul82 = mul nsw i32 %mul78, %lnot.ext81
  %add83 = add nsw i32 %add73, %mul82
  %46 = load i32, i32* %gb1, align 4
  %47 = load i32, i32* %gc1, align 4
  %tobool84 = icmp ne i32 %47, 0
  %lnot85 = xor i1 %tobool84, true
  %lnot.ext86 = zext i1 %lnot85 to i32
  %mul87 = mul nsw i32 %46, %lnot.ext86
  %48 = load i32, i32* %gb2, align 4
  %tobool88 = icmp ne i32 %48, 0
  %lnot89 = xor i1 %tobool88, true
  %lnot.ext90 = zext i1 %lnot89 to i32
  %mul91 = mul nsw i32 %mul87, %lnot.ext90
  %49 = load i32, i32* %gc2, align 4
  %mul92 = mul nsw i32 %mul91, %49
  %add93 = add nsw i32 %add83, %mul92
  store i32 %add93, i32* %cob, align 4
  %50 = load i32, i32* %cob, align 4
  %conv94 = sitofp i32 %50 to float
  %conv95 = fpext float %conv94 to double
  %mul96 = fmul double 5.000000e-01, %conv95
  %51 = load i32, i32* @penalty, align 4
  %conv97 = sitofp i32 %51 to double
  %mul98 = fmul double %mul96, %conv97
  %52 = load double, double* %efficient, align 8
  %mul99 = fmul double %mul98, %52
  %53 = load float, float* %score, align 4
  %conv100 = fpext float %53 to double
  %add101 = fadd double %conv100, %mul99
  %conv102 = fptrunc double %add101 to float
  store float %conv102, float* %score, align 4
  %54 = load i32, i32* %k, align 4
  %idxprom103 = sext i32 %54 to i64
  %55 = load i32, i32* %j, align 4
  %idxprom104 = sext i32 %55 to i64
  %56 = load i8**, i8*** %seq.addr, align 8
  %arrayidx105 = getelementptr inbounds i8*, i8** %56, i64 %idxprom104
  %57 = load i8*, i8** %arrayidx105, align 8
  %arrayidx106 = getelementptr inbounds i8, i8* %57, i64 %idxprom103
  %58 = load i8, i8* %arrayidx106, align 1
  %conv107 = sext i8 %58 to i32
  %idxprom108 = sext i32 %conv107 to i64
  %59 = load i32, i32* %k, align 4
  %idxprom109 = sext i32 %59 to i64
  %60 = load i32, i32* %i, align 4
  %idxprom110 = sext i32 %60 to i64
  %61 = load i8**, i8*** %seq.addr, align 8
  %arrayidx111 = getelementptr inbounds i8*, i8** %61, i64 %idxprom110
  %62 = load i8*, i8** %arrayidx111, align 8
  %arrayidx112 = getelementptr inbounds i8, i8* %62, i64 %idxprom109
  %63 = load i8, i8* %arrayidx112, align 1
  %conv113 = sext i8 %63 to i32
  %idxprom114 = sext i32 %conv113 to i64
  %arrayidx115 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom114
  %arrayidx116 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx115, i32 0, i64 %idxprom108
  %64 = load i32, i32* %arrayidx116, align 4
  %conv117 = sitofp i32 %64 to float
  %65 = load double, double* %efficient, align 8
  %conv118 = fptrunc double %65 to float
  %mul119 = fmul float %conv117, %conv118
  %66 = load float, float* %score, align 4
  %add120 = fadd float %66, %mul119
  store float %add120, float* %score, align 4
  %67 = load i32, i32* %gc1, align 4
  %tobool121 = icmp ne i32 %67, 0
  %lnot122 = xor i1 %tobool121, true
  %lnot.ext123 = zext i1 %lnot122 to i32
  %68 = load i32, i32* %gc2, align 4
  %tobool124 = icmp ne i32 %68, 0
  %lnot125 = xor i1 %tobool124, true
  %lnot.ext126 = zext i1 %lnot125 to i32
  %mul127 = mul nsw i32 %lnot.ext123, %lnot.ext126
  %69 = load i32, i32* %nglen, align 4
  %add128 = add nsw i32 %69, %mul127
  store i32 %add128, i32* %nglen, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.12
  %70 = load i32, i32* %k, align 4
  %inc = add nsw i32 %70, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.9

for.end:                                          ; preds = %for.cond.9
  br label %for.inc.129

for.inc.129:                                      ; preds = %for.end
  %71 = load i32, i32* %j, align 4
  %inc130 = add nsw i32 %71, 1
  store i32 %inc130, i32* %j, align 4
  br label %for.cond.2

for.end.131:                                      ; preds = %for.cond.2
  br label %for.inc.132

for.inc.132:                                      ; preds = %for.end.131
  %72 = load i32, i32* %i, align 4
  %inc133 = add nsw i32 %72, 1
  store i32 %inc133, i32* %i, align 4
  br label %for.cond

for.end.134:                                      ; preds = %for.cond
  %73 = load float, float* %score, align 4
  %74 = load i32, i32* %nglen, align 4
  %conv135 = sitofp i32 %74 to float
  %div = fdiv float %73, %conv135
  %conv136 = fpext float %div to double
  %add137 = fadd double %conv136, 4.000000e+02
  %conv138 = fptrunc double %add137 to float
  ret float %conv138
}

; Function Attrs: nounwind uwtable
define double @score_calc_for_score_s(i32 %s, i8** %seq) #0 {
entry:
  %s.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb1 = alloca i32, align 4
  %gb2 = alloca i32, align 4
  %gc1 = alloca i32, align 4
  %gc2 = alloca i32, align 4
  %cob = alloca i32, align 4
  %nglen = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca float, align 4
  store i32 %s, i32* %s.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %nglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.125, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.127

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.122, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.124

for.body.5:                                       ; preds = %for.cond.2
  store i32 0, i32* %gc1, align 4
  store i32 0, i32* %gc2, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc, %for.body.5
  %7 = load i32, i32* %k, align 4
  %8 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %7, %8
  br i1 %cmp7, label %for.body.9, label %for.end

for.body.9:                                       ; preds = %for.cond.6
  %9 = load i32, i32* %gc1, align 4
  store i32 %9, i32* %gb1, align 4
  %10 = load i32, i32* %gc2, align 4
  store i32 %10, i32* %gb2, align 4
  %11 = load i32, i32* %k, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq.addr, align 8
  %arrayidx11 = getelementptr inbounds i8*, i8** %13, i64 %idxprom10
  %14 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %14, i64 %idxprom
  %15 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %15 to i32
  %cmp14 = icmp eq i32 %conv13, 45
  %conv15 = zext i1 %cmp14 to i32
  store i32 %conv15, i32* %gc1, align 4
  %16 = load i32, i32* %k, align 4
  %idxprom16 = sext i32 %16 to i64
  %17 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx18 = getelementptr inbounds i8*, i8** %18, i64 %idxprom17
  %19 = load i8*, i8** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 %idxprom16
  %20 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  %conv22 = zext i1 %cmp21 to i32
  store i32 %conv22, i32* %gc2, align 4
  %21 = load i32, i32* %gb1, align 4
  %tobool = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %22 = load i32, i32* %gc1, align 4
  %mul = mul nsw i32 %lnot.ext, %22
  %23 = load i32, i32* %gb2, align 4
  %tobool23 = icmp ne i32 %23, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %mul26 = mul nsw i32 %mul, %lnot.ext25
  %24 = load i32, i32* %gc2, align 4
  %tobool27 = icmp ne i32 %24, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %mul30 = mul nsw i32 %mul26, %lnot.ext29
  %25 = load i32, i32* %gb1, align 4
  %26 = load i32, i32* %gc1, align 4
  %tobool31 = icmp ne i32 %26, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %mul34 = mul nsw i32 %25, %lnot.ext33
  %27 = load i32, i32* %gb2, align 4
  %tobool35 = icmp ne i32 %27, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %mul38 = mul nsw i32 %mul34, %lnot.ext37
  %28 = load i32, i32* %gc2, align 4
  %tobool39 = icmp ne i32 %28, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %mul42 = mul nsw i32 %mul38, %lnot.ext41
  %add43 = add nsw i32 %mul30, %mul42
  %29 = load i32, i32* %gb1, align 4
  %tobool44 = icmp ne i32 %29, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %30 = load i32, i32* %gc1, align 4
  %tobool47 = icmp ne i32 %30, 0
  %lnot48 = xor i1 %tobool47, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %mul50 = mul nsw i32 %lnot.ext46, %lnot.ext49
  %31 = load i32, i32* %gb2, align 4
  %tobool51 = icmp ne i32 %31, 0
  %lnot52 = xor i1 %tobool51, true
  %lnot.ext53 = zext i1 %lnot52 to i32
  %mul54 = mul nsw i32 %mul50, %lnot.ext53
  %32 = load i32, i32* %gc2, align 4
  %mul55 = mul nsw i32 %mul54, %32
  %add56 = add nsw i32 %add43, %mul55
  %33 = load i32, i32* %gb1, align 4
  %tobool57 = icmp ne i32 %33, 0
  %lnot58 = xor i1 %tobool57, true
  %lnot.ext59 = zext i1 %lnot58 to i32
  %34 = load i32, i32* %gc1, align 4
  %tobool60 = icmp ne i32 %34, 0
  %lnot61 = xor i1 %tobool60, true
  %lnot.ext62 = zext i1 %lnot61 to i32
  %mul63 = mul nsw i32 %lnot.ext59, %lnot.ext62
  %35 = load i32, i32* %gb2, align 4
  %mul64 = mul nsw i32 %mul63, %35
  %36 = load i32, i32* %gc2, align 4
  %tobool65 = icmp ne i32 %36, 0
  %lnot66 = xor i1 %tobool65, true
  %lnot.ext67 = zext i1 %lnot66 to i32
  %mul68 = mul nsw i32 %mul64, %lnot.ext67
  %add69 = add nsw i32 %add56, %mul68
  %37 = load i32, i32* %gb1, align 4
  %tobool70 = icmp ne i32 %37, 0
  %lnot71 = xor i1 %tobool70, true
  %lnot.ext72 = zext i1 %lnot71 to i32
  %38 = load i32, i32* %gc1, align 4
  %mul73 = mul nsw i32 %lnot.ext72, %38
  %39 = load i32, i32* %gb2, align 4
  %mul74 = mul nsw i32 %mul73, %39
  %40 = load i32, i32* %gc2, align 4
  %tobool75 = icmp ne i32 %40, 0
  %lnot76 = xor i1 %tobool75, true
  %lnot.ext77 = zext i1 %lnot76 to i32
  %mul78 = mul nsw i32 %mul74, %lnot.ext77
  %add79 = add nsw i32 %add69, %mul78
  %41 = load i32, i32* %gb1, align 4
  %42 = load i32, i32* %gc1, align 4
  %tobool80 = icmp ne i32 %42, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot.ext82 = zext i1 %lnot81 to i32
  %mul83 = mul nsw i32 %41, %lnot.ext82
  %43 = load i32, i32* %gb2, align 4
  %tobool84 = icmp ne i32 %43, 0
  %lnot85 = xor i1 %tobool84, true
  %lnot.ext86 = zext i1 %lnot85 to i32
  %mul87 = mul nsw i32 %mul83, %lnot.ext86
  %44 = load i32, i32* %gc2, align 4
  %mul88 = mul nsw i32 %mul87, %44
  %add89 = add nsw i32 %add79, %mul88
  store i32 %add89, i32* %cob, align 4
  %45 = load i32, i32* %cob, align 4
  %conv90 = sitofp i32 %45 to float
  %conv91 = fpext float %conv90 to double
  %mul92 = fmul double 5.000000e-01, %conv91
  %46 = load i32, i32* @penalty, align 4
  %conv93 = sitofp i32 %46 to double
  %mul94 = fmul double %mul92, %conv93
  %47 = load float, float* %score, align 4
  %conv95 = fpext float %47 to double
  %add96 = fadd double %conv95, %mul94
  %conv97 = fptrunc double %add96 to float
  store float %conv97, float* %score, align 4
  %48 = load i32, i32* %k, align 4
  %idxprom98 = sext i32 %48 to i64
  %49 = load i32, i32* %j, align 4
  %idxprom99 = sext i32 %49 to i64
  %50 = load i8**, i8*** %seq.addr, align 8
  %arrayidx100 = getelementptr inbounds i8*, i8** %50, i64 %idxprom99
  %51 = load i8*, i8** %arrayidx100, align 8
  %arrayidx101 = getelementptr inbounds i8, i8* %51, i64 %idxprom98
  %52 = load i8, i8* %arrayidx101, align 1
  %conv102 = sext i8 %52 to i32
  %idxprom103 = sext i32 %conv102 to i64
  %53 = load i32, i32* %k, align 4
  %idxprom104 = sext i32 %53 to i64
  %54 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %54 to i64
  %55 = load i8**, i8*** %seq.addr, align 8
  %arrayidx106 = getelementptr inbounds i8*, i8** %55, i64 %idxprom105
  %56 = load i8*, i8** %arrayidx106, align 8
  %arrayidx107 = getelementptr inbounds i8, i8* %56, i64 %idxprom104
  %57 = load i8, i8* %arrayidx107, align 1
  %conv108 = sext i8 %57 to i32
  %idxprom109 = sext i32 %conv108 to i64
  %arrayidx110 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom109
  %arrayidx111 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx110, i32 0, i64 %idxprom103
  %58 = load i32, i32* %arrayidx111, align 4
  %conv112 = sitofp i32 %58 to float
  %59 = load float, float* %score, align 4
  %add113 = fadd float %59, %conv112
  store float %add113, float* %score, align 4
  %60 = load i32, i32* %gc1, align 4
  %tobool114 = icmp ne i32 %60, 0
  %lnot115 = xor i1 %tobool114, true
  %lnot.ext116 = zext i1 %lnot115 to i32
  %61 = load i32, i32* %gc2, align 4
  %tobool117 = icmp ne i32 %61, 0
  %lnot118 = xor i1 %tobool117, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %mul120 = mul nsw i32 %lnot.ext116, %lnot.ext119
  %62 = load i32, i32* %nglen, align 4
  %add121 = add nsw i32 %62, %mul120
  store i32 %add121, i32* %nglen, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.9
  %63 = load i32, i32* %k, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.6

for.end:                                          ; preds = %for.cond.6
  br label %for.inc.122

for.inc.122:                                      ; preds = %for.end
  %64 = load i32, i32* %j, align 4
  %inc123 = add nsw i32 %64, 1
  store i32 %inc123, i32* %j, align 4
  br label %for.cond.2

for.end.124:                                      ; preds = %for.cond.2
  br label %for.inc.125

for.inc.125:                                      ; preds = %for.end.124
  %65 = load i32, i32* %i, align 4
  %inc126 = add nsw i32 %65, 1
  store i32 %inc126, i32* %i, align 4
  br label %for.cond

for.end.127:                                      ; preds = %for.cond
  %66 = load float, float* %score, align 4
  %conv128 = fpext float %66 to double
  %67 = load i32, i32* %nglen, align 4
  %conv129 = sitofp i32 %67 to double
  %div = fdiv double %conv128, %conv129
  %add130 = fadd double %div, 4.000000e+02
  ret double %add130
}

; Function Attrs: nounwind uwtable
define double @SSPscore___(i32 %s, i8** %seq, i32 %ex) #0 {
entry:
  %s.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %ex.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb1 = alloca i32, align 4
  %gb2 = alloca i32, align 4
  %gc1 = alloca i32, align 4
  %gc2 = alloca i32, align 4
  %cob = alloca i32, align 4
  %nglen = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca float, align 4
  store i32 %s, i32* %s.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store i32 %ex, i32* %ex.addr, align 4
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %nglen, align 4
  %2 = load i32, i32* %ex.addr, align 4
  store i32 %2, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.125, %entry
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %s.addr, align 4
  %cmp = icmp slt i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end.127

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %ex.addr, align 4
  %cmp2 = icmp eq i32 %5, %6
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc.125

if.end:                                           ; preds = %for.body
  store i32 0, i32* %gc1, align 4
  store i32 0, i32* %gc2, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %if.end
  %7 = load i32, i32* %k, align 4
  %8 = load i32, i32* %len, align 4
  %cmp5 = icmp slt i32 %7, %8
  br i1 %cmp5, label %for.body.7, label %for.end

for.body.7:                                       ; preds = %for.cond.4
  %9 = load i32, i32* %gc1, align 4
  store i32 %9, i32* %gb1, align 4
  %10 = load i32, i32* %gc2, align 4
  store i32 %10, i32* %gb2, align 4
  %11 = load i32, i32* %k, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %13, i64 %idxprom8
  %14 = load i8*, i8** %arrayidx9, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %14, i64 %idxprom
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %15 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %gc1, align 4
  %16 = load i32, i32* %k, align 4
  %idxprom14 = sext i32 %16 to i64
  %17 = load i32, i32* %j, align 4
  %idxprom15 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx16 = getelementptr inbounds i8*, i8** %18, i64 %idxprom15
  %19 = load i8*, i8** %arrayidx16, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %19, i64 %idxprom14
  %20 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %20 to i32
  %cmp19 = icmp eq i32 %conv18, 45
  %conv20 = zext i1 %cmp19 to i32
  store i32 %conv20, i32* %gc2, align 4
  %21 = load i32, i32* %gb1, align 4
  %tobool = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %22 = load i32, i32* %gc1, align 4
  %mul = mul nsw i32 %lnot.ext, %22
  %23 = load i32, i32* %gb2, align 4
  %tobool21 = icmp ne i32 %23, 0
  %lnot22 = xor i1 %tobool21, true
  %lnot.ext23 = zext i1 %lnot22 to i32
  %mul24 = mul nsw i32 %mul, %lnot.ext23
  %24 = load i32, i32* %gc2, align 4
  %tobool25 = icmp ne i32 %24, 0
  %lnot26 = xor i1 %tobool25, true
  %lnot.ext27 = zext i1 %lnot26 to i32
  %mul28 = mul nsw i32 %mul24, %lnot.ext27
  %25 = load i32, i32* %gb1, align 4
  %26 = load i32, i32* %gc1, align 4
  %tobool29 = icmp ne i32 %26, 0
  %lnot30 = xor i1 %tobool29, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  %mul32 = mul nsw i32 %25, %lnot.ext31
  %27 = load i32, i32* %gb2, align 4
  %tobool33 = icmp ne i32 %27, 0
  %lnot34 = xor i1 %tobool33, true
  %lnot.ext35 = zext i1 %lnot34 to i32
  %mul36 = mul nsw i32 %mul32, %lnot.ext35
  %28 = load i32, i32* %gc2, align 4
  %tobool37 = icmp ne i32 %28, 0
  %lnot38 = xor i1 %tobool37, true
  %lnot.ext39 = zext i1 %lnot38 to i32
  %mul40 = mul nsw i32 %mul36, %lnot.ext39
  %add = add nsw i32 %mul28, %mul40
  %29 = load i32, i32* %gb1, align 4
  %tobool41 = icmp ne i32 %29, 0
  %lnot42 = xor i1 %tobool41, true
  %lnot.ext43 = zext i1 %lnot42 to i32
  %30 = load i32, i32* %gc1, align 4
  %tobool44 = icmp ne i32 %30, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %mul47 = mul nsw i32 %lnot.ext43, %lnot.ext46
  %31 = load i32, i32* %gb2, align 4
  %tobool48 = icmp ne i32 %31, 0
  %lnot49 = xor i1 %tobool48, true
  %lnot.ext50 = zext i1 %lnot49 to i32
  %mul51 = mul nsw i32 %mul47, %lnot.ext50
  %32 = load i32, i32* %gc2, align 4
  %mul52 = mul nsw i32 %mul51, %32
  %add53 = add nsw i32 %add, %mul52
  %33 = load i32, i32* %gb1, align 4
  %tobool54 = icmp ne i32 %33, 0
  %lnot55 = xor i1 %tobool54, true
  %lnot.ext56 = zext i1 %lnot55 to i32
  %34 = load i32, i32* %gc1, align 4
  %tobool57 = icmp ne i32 %34, 0
  %lnot58 = xor i1 %tobool57, true
  %lnot.ext59 = zext i1 %lnot58 to i32
  %mul60 = mul nsw i32 %lnot.ext56, %lnot.ext59
  %35 = load i32, i32* %gb2, align 4
  %mul61 = mul nsw i32 %mul60, %35
  %36 = load i32, i32* %gc2, align 4
  %tobool62 = icmp ne i32 %36, 0
  %lnot63 = xor i1 %tobool62, true
  %lnot.ext64 = zext i1 %lnot63 to i32
  %mul65 = mul nsw i32 %mul61, %lnot.ext64
  %add66 = add nsw i32 %add53, %mul65
  %conv67 = sitofp i32 %add66 to double
  %37 = load i32, i32* %gb1, align 4
  %tobool68 = icmp ne i32 %37, 0
  %lnot69 = xor i1 %tobool68, true
  %lnot.ext70 = zext i1 %lnot69 to i32
  %38 = load i32, i32* %gc1, align 4
  %mul71 = mul nsw i32 %lnot.ext70, %38
  %39 = load i32, i32* %gb2, align 4
  %mul72 = mul nsw i32 %mul71, %39
  %40 = load i32, i32* %gc2, align 4
  %tobool73 = icmp ne i32 %40, 0
  %lnot74 = xor i1 %tobool73, true
  %lnot.ext75 = zext i1 %lnot74 to i32
  %mul76 = mul nsw i32 %mul72, %lnot.ext75
  %conv77 = sitofp i32 %mul76 to double
  %mul78 = fmul double %conv77, 2.000000e+00
  %add79 = fadd double %conv67, %mul78
  %41 = load i32, i32* %gb1, align 4
  %42 = load i32, i32* %gc1, align 4
  %tobool80 = icmp ne i32 %42, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot.ext82 = zext i1 %lnot81 to i32
  %mul83 = mul nsw i32 %41, %lnot.ext82
  %43 = load i32, i32* %gb2, align 4
  %tobool84 = icmp ne i32 %43, 0
  %lnot85 = xor i1 %tobool84, true
  %lnot.ext86 = zext i1 %lnot85 to i32
  %mul87 = mul nsw i32 %mul83, %lnot.ext86
  %44 = load i32, i32* %gc2, align 4
  %mul88 = mul nsw i32 %mul87, %44
  %conv89 = sitofp i32 %mul88 to double
  %mul90 = fmul double %conv89, 2.000000e+00
  %add91 = fadd double %add79, %mul90
  %conv92 = fptosi double %add91 to i32
  store i32 %conv92, i32* %cob, align 4
  %45 = load i32, i32* %cob, align 4
  %conv93 = sitofp i32 %45 to float
  %conv94 = fpext float %conv93 to double
  %mul95 = fmul double 5.000000e-01, %conv94
  %46 = load i32, i32* @penalty, align 4
  %conv96 = sitofp i32 %46 to double
  %mul97 = fmul double %mul95, %conv96
  %47 = load float, float* %score, align 4
  %conv98 = fpext float %47 to double
  %add99 = fadd double %conv98, %mul97
  %conv100 = fptrunc double %add99 to float
  store float %conv100, float* %score, align 4
  %48 = load i32, i32* %k, align 4
  %idxprom101 = sext i32 %48 to i64
  %49 = load i32, i32* %j, align 4
  %idxprom102 = sext i32 %49 to i64
  %50 = load i8**, i8*** %seq.addr, align 8
  %arrayidx103 = getelementptr inbounds i8*, i8** %50, i64 %idxprom102
  %51 = load i8*, i8** %arrayidx103, align 8
  %arrayidx104 = getelementptr inbounds i8, i8* %51, i64 %idxprom101
  %52 = load i8, i8* %arrayidx104, align 1
  %conv105 = sext i8 %52 to i32
  %idxprom106 = sext i32 %conv105 to i64
  %53 = load i32, i32* %k, align 4
  %idxprom107 = sext i32 %53 to i64
  %54 = load i32, i32* %i, align 4
  %idxprom108 = sext i32 %54 to i64
  %55 = load i8**, i8*** %seq.addr, align 8
  %arrayidx109 = getelementptr inbounds i8*, i8** %55, i64 %idxprom108
  %56 = load i8*, i8** %arrayidx109, align 8
  %arrayidx110 = getelementptr inbounds i8, i8* %56, i64 %idxprom107
  %57 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %57 to i32
  %idxprom112 = sext i32 %conv111 to i64
  %arrayidx113 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom112
  %arrayidx114 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx113, i32 0, i64 %idxprom106
  %58 = load i32, i32* %arrayidx114, align 4
  %conv115 = sitofp i32 %58 to float
  %59 = load float, float* %score, align 4
  %add116 = fadd float %59, %conv115
  store float %add116, float* %score, align 4
  %60 = load i32, i32* %gc1, align 4
  %tobool117 = icmp ne i32 %60, 0
  %lnot118 = xor i1 %tobool117, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %61 = load i32, i32* %gc2, align 4
  %tobool120 = icmp ne i32 %61, 0
  %lnot121 = xor i1 %tobool120, true
  %lnot.ext122 = zext i1 %lnot121 to i32
  %mul123 = mul nsw i32 %lnot.ext119, %lnot.ext122
  %62 = load i32, i32* %nglen, align 4
  %add124 = add nsw i32 %62, %mul123
  store i32 %add124, i32* %nglen, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.7
  %63 = load i32, i32* %k, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.125

for.inc.125:                                      ; preds = %for.end, %if.then
  %64 = load i32, i32* %j, align 4
  %inc126 = add nsw i32 %64, 1
  store i32 %inc126, i32* %j, align 4
  br label %for.cond

for.end.127:                                      ; preds = %for.cond
  %65 = load float, float* %score, align 4
  %conv128 = fpext float %65 to double
  ret double %conv128
}

; Function Attrs: nounwind uwtable
define double @SSPscore(i32 %s, i8** %seq) #0 {
entry:
  %s.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb1 = alloca i32, align 4
  %gb2 = alloca i32, align 4
  %gc1 = alloca i32, align 4
  %gc2 = alloca i32, align 4
  %cob = alloca i32, align 4
  %nglen = alloca i32, align 4
  %len = alloca i32, align 4
  %score = alloca float, align 4
  store i32 %s, i32* %s.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store float 0.000000e+00, float* %score, align 4
  store i32 0, i32* %nglen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.125, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.127

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.122, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.124

for.body.5:                                       ; preds = %for.cond.2
  store i32 0, i32* %gc1, align 4
  store i32 0, i32* %gc2, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc, %for.body.5
  %7 = load i32, i32* %k, align 4
  %8 = load i32, i32* %len, align 4
  %cmp7 = icmp slt i32 %7, %8
  br i1 %cmp7, label %for.body.9, label %for.end

for.body.9:                                       ; preds = %for.cond.6
  %9 = load i32, i32* %gc1, align 4
  store i32 %9, i32* %gb1, align 4
  %10 = load i32, i32* %gc2, align 4
  store i32 %10, i32* %gb2, align 4
  %11 = load i32, i32* %k, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i8**, i8*** %seq.addr, align 8
  %arrayidx11 = getelementptr inbounds i8*, i8** %13, i64 %idxprom10
  %14 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %14, i64 %idxprom
  %15 = load i8, i8* %arrayidx12, align 1
  %conv13 = sext i8 %15 to i32
  %cmp14 = icmp eq i32 %conv13, 45
  %conv15 = zext i1 %cmp14 to i32
  store i32 %conv15, i32* %gc1, align 4
  %16 = load i32, i32* %k, align 4
  %idxprom16 = sext i32 %16 to i64
  %17 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %17 to i64
  %18 = load i8**, i8*** %seq.addr, align 8
  %arrayidx18 = getelementptr inbounds i8*, i8** %18, i64 %idxprom17
  %19 = load i8*, i8** %arrayidx18, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 %idxprom16
  %20 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  %conv22 = zext i1 %cmp21 to i32
  store i32 %conv22, i32* %gc2, align 4
  %21 = load i32, i32* %gb1, align 4
  %tobool = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %22 = load i32, i32* %gc1, align 4
  %mul = mul nsw i32 %lnot.ext, %22
  %23 = load i32, i32* %gb2, align 4
  %tobool23 = icmp ne i32 %23, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %mul26 = mul nsw i32 %mul, %lnot.ext25
  %24 = load i32, i32* %gc2, align 4
  %tobool27 = icmp ne i32 %24, 0
  %lnot28 = xor i1 %tobool27, true
  %lnot.ext29 = zext i1 %lnot28 to i32
  %mul30 = mul nsw i32 %mul26, %lnot.ext29
  %25 = load i32, i32* %gb1, align 4
  %26 = load i32, i32* %gc1, align 4
  %tobool31 = icmp ne i32 %26, 0
  %lnot32 = xor i1 %tobool31, true
  %lnot.ext33 = zext i1 %lnot32 to i32
  %mul34 = mul nsw i32 %25, %lnot.ext33
  %27 = load i32, i32* %gb2, align 4
  %tobool35 = icmp ne i32 %27, 0
  %lnot36 = xor i1 %tobool35, true
  %lnot.ext37 = zext i1 %lnot36 to i32
  %mul38 = mul nsw i32 %mul34, %lnot.ext37
  %28 = load i32, i32* %gc2, align 4
  %tobool39 = icmp ne i32 %28, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %mul42 = mul nsw i32 %mul38, %lnot.ext41
  %add43 = add nsw i32 %mul30, %mul42
  %29 = load i32, i32* %gb1, align 4
  %tobool44 = icmp ne i32 %29, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %30 = load i32, i32* %gc1, align 4
  %tobool47 = icmp ne i32 %30, 0
  %lnot48 = xor i1 %tobool47, true
  %lnot.ext49 = zext i1 %lnot48 to i32
  %mul50 = mul nsw i32 %lnot.ext46, %lnot.ext49
  %31 = load i32, i32* %gb2, align 4
  %tobool51 = icmp ne i32 %31, 0
  %lnot52 = xor i1 %tobool51, true
  %lnot.ext53 = zext i1 %lnot52 to i32
  %mul54 = mul nsw i32 %mul50, %lnot.ext53
  %32 = load i32, i32* %gc2, align 4
  %mul55 = mul nsw i32 %mul54, %32
  %add56 = add nsw i32 %add43, %mul55
  %33 = load i32, i32* %gb1, align 4
  %tobool57 = icmp ne i32 %33, 0
  %lnot58 = xor i1 %tobool57, true
  %lnot.ext59 = zext i1 %lnot58 to i32
  %34 = load i32, i32* %gc1, align 4
  %tobool60 = icmp ne i32 %34, 0
  %lnot61 = xor i1 %tobool60, true
  %lnot.ext62 = zext i1 %lnot61 to i32
  %mul63 = mul nsw i32 %lnot.ext59, %lnot.ext62
  %35 = load i32, i32* %gb2, align 4
  %mul64 = mul nsw i32 %mul63, %35
  %36 = load i32, i32* %gc2, align 4
  %tobool65 = icmp ne i32 %36, 0
  %lnot66 = xor i1 %tobool65, true
  %lnot.ext67 = zext i1 %lnot66 to i32
  %mul68 = mul nsw i32 %mul64, %lnot.ext67
  %add69 = add nsw i32 %add56, %mul68
  %37 = load i32, i32* %gb1, align 4
  %tobool70 = icmp ne i32 %37, 0
  %lnot71 = xor i1 %tobool70, true
  %lnot.ext72 = zext i1 %lnot71 to i32
  %38 = load i32, i32* %gc1, align 4
  %mul73 = mul nsw i32 %lnot.ext72, %38
  %39 = load i32, i32* %gb2, align 4
  %mul74 = mul nsw i32 %mul73, %39
  %40 = load i32, i32* %gc2, align 4
  %tobool75 = icmp ne i32 %40, 0
  %lnot76 = xor i1 %tobool75, true
  %lnot.ext77 = zext i1 %lnot76 to i32
  %mul78 = mul nsw i32 %mul74, %lnot.ext77
  %add79 = add nsw i32 %add69, %mul78
  %41 = load i32, i32* %gb1, align 4
  %42 = load i32, i32* %gc1, align 4
  %tobool80 = icmp ne i32 %42, 0
  %lnot81 = xor i1 %tobool80, true
  %lnot.ext82 = zext i1 %lnot81 to i32
  %mul83 = mul nsw i32 %41, %lnot.ext82
  %43 = load i32, i32* %gb2, align 4
  %tobool84 = icmp ne i32 %43, 0
  %lnot85 = xor i1 %tobool84, true
  %lnot.ext86 = zext i1 %lnot85 to i32
  %mul87 = mul nsw i32 %mul83, %lnot.ext86
  %44 = load i32, i32* %gc2, align 4
  %mul88 = mul nsw i32 %mul87, %44
  %add89 = add nsw i32 %add79, %mul88
  store i32 %add89, i32* %cob, align 4
  %45 = load i32, i32* %cob, align 4
  %conv90 = sitofp i32 %45 to float
  %conv91 = fpext float %conv90 to double
  %mul92 = fmul double 5.000000e-01, %conv91
  %46 = load i32, i32* @penalty, align 4
  %conv93 = sitofp i32 %46 to double
  %mul94 = fmul double %mul92, %conv93
  %47 = load float, float* %score, align 4
  %conv95 = fpext float %47 to double
  %add96 = fadd double %conv95, %mul94
  %conv97 = fptrunc double %add96 to float
  store float %conv97, float* %score, align 4
  %48 = load i32, i32* %k, align 4
  %idxprom98 = sext i32 %48 to i64
  %49 = load i32, i32* %j, align 4
  %idxprom99 = sext i32 %49 to i64
  %50 = load i8**, i8*** %seq.addr, align 8
  %arrayidx100 = getelementptr inbounds i8*, i8** %50, i64 %idxprom99
  %51 = load i8*, i8** %arrayidx100, align 8
  %arrayidx101 = getelementptr inbounds i8, i8* %51, i64 %idxprom98
  %52 = load i8, i8* %arrayidx101, align 1
  %conv102 = sext i8 %52 to i32
  %idxprom103 = sext i32 %conv102 to i64
  %53 = load i32, i32* %k, align 4
  %idxprom104 = sext i32 %53 to i64
  %54 = load i32, i32* %i, align 4
  %idxprom105 = sext i32 %54 to i64
  %55 = load i8**, i8*** %seq.addr, align 8
  %arrayidx106 = getelementptr inbounds i8*, i8** %55, i64 %idxprom105
  %56 = load i8*, i8** %arrayidx106, align 8
  %arrayidx107 = getelementptr inbounds i8, i8* %56, i64 %idxprom104
  %57 = load i8, i8* %arrayidx107, align 1
  %conv108 = sext i8 %57 to i32
  %idxprom109 = sext i32 %conv108 to i64
  %arrayidx110 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom109
  %arrayidx111 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx110, i32 0, i64 %idxprom103
  %58 = load i32, i32* %arrayidx111, align 4
  %conv112 = sitofp i32 %58 to float
  %59 = load float, float* %score, align 4
  %add113 = fadd float %59, %conv112
  store float %add113, float* %score, align 4
  %60 = load i32, i32* %gc1, align 4
  %tobool114 = icmp ne i32 %60, 0
  %lnot115 = xor i1 %tobool114, true
  %lnot.ext116 = zext i1 %lnot115 to i32
  %61 = load i32, i32* %gc2, align 4
  %tobool117 = icmp ne i32 %61, 0
  %lnot118 = xor i1 %tobool117, true
  %lnot.ext119 = zext i1 %lnot118 to i32
  %mul120 = mul nsw i32 %lnot.ext116, %lnot.ext119
  %62 = load i32, i32* %nglen, align 4
  %add121 = add nsw i32 %62, %mul120
  store i32 %add121, i32* %nglen, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body.9
  %63 = load i32, i32* %k, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond.6

for.end:                                          ; preds = %for.cond.6
  br label %for.inc.122

for.inc.122:                                      ; preds = %for.end
  %64 = load i32, i32* %j, align 4
  %inc123 = add nsw i32 %64, 1
  store i32 %inc123, i32* %j, align 4
  br label %for.cond.2

for.end.124:                                      ; preds = %for.cond.2
  br label %for.inc.125

for.inc.125:                                      ; preds = %for.end.124
  %65 = load i32, i32* %i, align 4
  %inc126 = add nsw i32 %65, 1
  store i32 %inc126, i32* %i, align 4
  br label %for.cond

for.end.127:                                      ; preds = %for.cond
  %66 = load float, float* %score, align 4
  %conv128 = fpext float %66 to double
  ret double %conv128
}

; Function Attrs: nounwind uwtable
define double @DSPscore(i32 %s, i8** %seq) #0 {
entry:
  %s.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %c = alloca double, align 8
  %len = alloca i32, align 4
  %score = alloca double, align 8
  %tmpscore = alloca double, align 8
  %mseq1 = alloca i8*, align 8
  %mseq2 = alloca i8*, align 8
  store i32 %s, i32* %s.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  store double 0.000000e+00, double* %score, align 8
  store double 0.000000e+00, double* %c, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.107, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %s.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp = icmp slt i32 %2, %sub
  br i1 %cmp, label %for.body, label %for.end.109

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.2

for.cond.2:                                       ; preds = %for.inc.104, %for.body
  %5 = load i32, i32* %j, align 4
  %6 = load i32, i32* %s.addr, align 4
  %cmp3 = icmp slt i32 %5, %6
  br i1 %cmp3, label %for.body.5, label %for.end.106

for.body.5:                                       ; preds = %for.cond.2
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load i8**, i8*** %seq.addr, align 8
  %arrayidx6 = getelementptr inbounds i8*, i8** %8, i64 %idxprom
  %9 = load i8*, i8** %arrayidx6, align 8
  store i8* %9, i8** %mseq1, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom7 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx8 = getelementptr inbounds i8*, i8** %11, i64 %idxprom7
  %12 = load i8*, i8** %arrayidx8, align 8
  store i8* %12, i8** %mseq2, align 8
  store double 0.000000e+00, double* %tmpscore, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc, %for.body.5
  %13 = load i32, i32* %k, align 4
  %14 = load i32, i32* %len, align 4
  %cmp10 = icmp slt i32 %13, %14
  br i1 %cmp10, label %for.body.12, label %for.end

for.body.12:                                      ; preds = %for.cond.9
  %15 = load i32, i32* %k, align 4
  %idxprom13 = sext i32 %15 to i64
  %16 = load i8*, i8** %mseq1, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %16, i64 %idxprom13
  %17 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %17 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.12
  %18 = load i32, i32* %k, align 4
  %idxprom18 = sext i32 %18 to i64
  %19 = load i8*, i8** %mseq2, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 %idxprom18
  %20 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %20 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body.12
  %21 = load i32, i32* %k, align 4
  %idxprom23 = sext i32 %21 to i64
  %22 = load i8*, i8** %mseq2, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %22, i64 %idxprom23
  %23 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %23 to i32
  %idxprom26 = sext i32 %conv25 to i64
  %24 = load i32, i32* %k, align 4
  %idxprom27 = sext i32 %24 to i64
  %25 = load i8*, i8** %mseq1, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %25, i64 %idxprom27
  %26 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %26 to i32
  %idxprom30 = sext i32 %conv29 to i64
  %arrayidx31 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom30
  %arrayidx32 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx31, i32 0, i64 %idxprom26
  %27 = load i32, i32* %arrayidx32, align 4
  %conv33 = sitofp i32 %27 to double
  %28 = load double, double* %tmpscore, align 8
  %add34 = fadd double %28, %conv33
  store double %add34, double* %tmpscore, align 8
  %29 = load i32, i32* %k, align 4
  %idxprom35 = sext i32 %29 to i64
  %30 = load i8*, i8** %mseq1, align 8
  %arrayidx36 = getelementptr inbounds i8, i8* %30, i64 %idxprom35
  %31 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %31 to i32
  %cmp38 = icmp eq i32 %conv37, 45
  br i1 %cmp38, label %if.then.40, label %if.end.65

if.then.40:                                       ; preds = %if.end
  %32 = load i32, i32* @penalty, align 4
  %conv41 = sitofp i32 %32 to double
  %33 = load double, double* %tmpscore, align 8
  %add42 = fadd double %33, %conv41
  store double %add42, double* %tmpscore, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.40
  %34 = load i32, i32* %k, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %k, align 4
  %idxprom43 = sext i32 %inc to i64
  %35 = load i8*, i8** %mseq1, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %35, i64 %idxprom43
  %36 = load i8, i8* %arrayidx44, align 1
  %conv45 = sext i8 %36 to i32
  %cmp46 = icmp eq i32 %conv45, 45
  br i1 %cmp46, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load i32, i32* %k, align 4
  %idxprom48 = sext i32 %37 to i64
  %38 = load i8*, i8** %mseq2, align 8
  %arrayidx49 = getelementptr inbounds i8, i8* %38, i64 %idxprom48
  %39 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %39 to i32
  %idxprom51 = sext i32 %conv50 to i64
  %40 = load i32, i32* %k, align 4
  %idxprom52 = sext i32 %40 to i64
  %41 = load i8*, i8** %mseq1, align 8
  %arrayidx53 = getelementptr inbounds i8, i8* %41, i64 %idxprom52
  %42 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %42 to i32
  %idxprom55 = sext i32 %conv54 to i64
  %arrayidx56 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom55
  %arrayidx57 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx56, i32 0, i64 %idxprom51
  %43 = load i32, i32* %arrayidx57, align 4
  %conv58 = sitofp i32 %43 to double
  %44 = load double, double* %tmpscore, align 8
  %add59 = fadd double %44, %conv58
  store double %add59, double* %tmpscore, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %45 = load i32, i32* %k, align 4
  %dec = add nsw i32 %45, -1
  store i32 %dec, i32* %k, align 4
  %46 = load i32, i32* %k, align 4
  %47 = load i32, i32* %len, align 4
  %sub60 = sub nsw i32 %47, 2
  %cmp61 = icmp sgt i32 %46, %sub60
  br i1 %cmp61, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %while.end
  br label %for.end

if.end.64:                                        ; preds = %while.end
  br label %for.inc

if.end.65:                                        ; preds = %if.end
  %48 = load i32, i32* %k, align 4
  %idxprom66 = sext i32 %48 to i64
  %49 = load i8*, i8** %mseq2, align 8
  %arrayidx67 = getelementptr inbounds i8, i8* %49, i64 %idxprom66
  %50 = load i8, i8* %arrayidx67, align 1
  %conv68 = sext i8 %50 to i32
  %cmp69 = icmp eq i32 %conv68, 45
  br i1 %cmp69, label %if.then.71, label %if.end.101

if.then.71:                                       ; preds = %if.end.65
  %51 = load i32, i32* @penalty, align 4
  %conv72 = sitofp i32 %51 to double
  %52 = load double, double* %tmpscore, align 8
  %add73 = fadd double %52, %conv72
  store double %add73, double* %tmpscore, align 8
  br label %while.cond.74

while.cond.74:                                    ; preds = %while.body.81, %if.then.71
  %53 = load i32, i32* %k, align 4
  %inc75 = add nsw i32 %53, 1
  store i32 %inc75, i32* %k, align 4
  %idxprom76 = sext i32 %inc75 to i64
  %54 = load i8*, i8** %mseq2, align 8
  %arrayidx77 = getelementptr inbounds i8, i8* %54, i64 %idxprom76
  %55 = load i8, i8* %arrayidx77, align 1
  %conv78 = sext i8 %55 to i32
  %cmp79 = icmp eq i32 %conv78, 45
  br i1 %cmp79, label %while.body.81, label %while.end.94

while.body.81:                                    ; preds = %while.cond.74
  %56 = load i32, i32* %k, align 4
  %idxprom82 = sext i32 %56 to i64
  %57 = load i8*, i8** %mseq2, align 8
  %arrayidx83 = getelementptr inbounds i8, i8* %57, i64 %idxprom82
  %58 = load i8, i8* %arrayidx83, align 1
  %conv84 = sext i8 %58 to i32
  %idxprom85 = sext i32 %conv84 to i64
  %59 = load i32, i32* %k, align 4
  %idxprom86 = sext i32 %59 to i64
  %60 = load i8*, i8** %mseq1, align 8
  %arrayidx87 = getelementptr inbounds i8, i8* %60, i64 %idxprom86
  %61 = load i8, i8* %arrayidx87, align 1
  %conv88 = sext i8 %61 to i32
  %idxprom89 = sext i32 %conv88 to i64
  %arrayidx90 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom89
  %arrayidx91 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx90, i32 0, i64 %idxprom85
  %62 = load i32, i32* %arrayidx91, align 4
  %conv92 = sitofp i32 %62 to double
  %63 = load double, double* %tmpscore, align 8
  %add93 = fadd double %63, %conv92
  store double %add93, double* %tmpscore, align 8
  br label %while.cond.74

while.end.94:                                     ; preds = %while.cond.74
  %64 = load i32, i32* %k, align 4
  %dec95 = add nsw i32 %64, -1
  store i32 %dec95, i32* %k, align 4
  %65 = load i32, i32* %k, align 4
  %66 = load i32, i32* %len, align 4
  %sub96 = sub nsw i32 %66, 2
  %cmp97 = icmp sgt i32 %65, %sub96
  br i1 %cmp97, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %while.end.94
  br label %for.end

if.end.100:                                       ; preds = %while.end.94
  br label %for.inc

if.end.101:                                       ; preds = %if.end.65
  br label %for.inc

for.inc:                                          ; preds = %if.end.101, %if.end.100, %if.end.64, %if.then
  %67 = load i32, i32* %k, align 4
  %inc102 = add nsw i32 %67, 1
  store i32 %inc102, i32* %k, align 4
  br label %for.cond.9

for.end:                                          ; preds = %if.then.99, %if.then.63, %for.cond.9
  %68 = load double, double* %tmpscore, align 8
  %69 = load double, double* %score, align 8
  %add103 = fadd double %69, %68
  store double %add103, double* %score, align 8
  br label %for.inc.104

for.inc.104:                                      ; preds = %for.end
  %70 = load i32, i32* %j, align 4
  %inc105 = add nsw i32 %70, 1
  store i32 %inc105, i32* %j, align 4
  br label %for.cond.2

for.end.106:                                      ; preds = %for.cond.2
  br label %for.inc.107

for.inc.107:                                      ; preds = %for.end.106
  %71 = load i32, i32* %i, align 4
  %inc108 = add nsw i32 %71, 1
  store i32 %inc108, i32* %i, align 4
  br label %for.cond

for.end.109:                                      ; preds = %for.cond
  %72 = load double, double* %score, align 8
  ret double %72
}

; Function Attrs: nounwind uwtable
define i32 @searchAnchors(i32 %nseq, i8** %seq, %struct._Segment* %seg) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %seg.addr = alloca %struct._Segment*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %status = alloca i32, align 4
  %score = alloca double, align 8
  %value = alloca i32, align 4
  %len = alloca i32, align 4
  %length = alloca i32, align 4
  %cumscore = alloca double, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store %struct._Segment* %seg, %struct._Segment** %seg.addr, align 8
  store i32 0, i32* %value, align 4
  %0 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %2 = load i32, i32* @searchAnchors.alloclen, align 4
  %3 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %4 = load i32, i32* @searchAnchors.alloclen, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %5 = load double*, double** @searchAnchors.stra, align 8
  call void @FreeDoubleVec(double* %5)
  br label %if.end

if.else:                                          ; preds = %if.then
  %6 = load i32, i32* @divThreshold, align 4
  %conv3 = sitofp i32 %6 to double
  %div = fdiv double %conv3, 1.000000e+02
  %mul = fmul double %div, 6.000000e+02
  %7 = load i32, i32* @divWinSize, align 4
  %conv4 = sitofp i32 %7 to double
  %mul5 = fmul double %mul, %conv4
  store double %mul5, double* @searchAnchors.threshold, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %8 = load i32, i32* %len, align 4
  %call6 = call double* @AllocateDoubleVec(i32 %8)
  store double* %call6, double** @searchAnchors.stra, align 8
  %9 = load i32, i32* %len, align 4
  store i32 %9, i32* @searchAnchors.alloclen, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.52, %if.end.7
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %len, align 4
  %cmp8 = icmp slt i32 %10, %11
  br i1 %cmp8, label %for.body, label %for.end.54

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load double*, double** @searchAnchors.stra, align 8
  %arrayidx10 = getelementptr inbounds double, double* %13, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx10, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond.11

for.cond.11:                                      ; preds = %for.inc.41, %for.body
  %14 = load i32, i32* %k, align 4
  %15 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %15, 1
  %cmp12 = icmp slt i32 %14, %sub
  br i1 %cmp12, label %for.body.14, label %for.end.43

for.body.14:                                      ; preds = %for.cond.11
  %16 = load i32, i32* %k, align 4
  %add = add nsw i32 %16, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.15

for.cond.15:                                      ; preds = %for.inc, %for.body.14
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %nseq.addr, align 4
  %cmp16 = icmp slt i32 %17, %18
  br i1 %cmp16, label %for.body.18, label %for.end

for.body.18:                                      ; preds = %for.cond.15
  %19 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %19 to i64
  %20 = load i32, i32* %j, align 4
  %idxprom20 = sext i32 %20 to i64
  %21 = load i8**, i8*** %seq.addr, align 8
  %arrayidx21 = getelementptr inbounds i8*, i8** %21, i64 %idxprom20
  %22 = load i8*, i8** %arrayidx21, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %22, i64 %idxprom19
  %23 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %23 to i32
  %idxprom24 = sext i32 %conv23 to i64
  %arrayidx25 = getelementptr inbounds [128 x i32], [128 x i32]* @amino_n, i32 0, i64 %idxprom24
  %24 = load i32, i32* %arrayidx25, align 4
  %idxprom26 = sext i32 %24 to i64
  %25 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %25 to i64
  %26 = load i32, i32* %k, align 4
  %idxprom28 = sext i32 %26 to i64
  %27 = load i8**, i8*** %seq.addr, align 8
  %arrayidx29 = getelementptr inbounds i8*, i8** %27, i64 %idxprom28
  %28 = load i8*, i8** %arrayidx29, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %28, i64 %idxprom27
  %29 = load i8, i8* %arrayidx30, align 1
  %conv31 = sext i8 %29 to i32
  %idxprom32 = sext i32 %conv31 to i64
  %arrayidx33 = getelementptr inbounds [128 x i32], [128 x i32]* @amino_n, i32 0, i64 %idxprom32
  %30 = load i32, i32* %arrayidx33, align 4
  %idxprom34 = sext i32 %30 to i64
  %arrayidx35 = getelementptr inbounds [26 x [26 x i32]], [26 x [26 x i32]]* @n_dis, i32 0, i64 %idxprom34
  %arrayidx36 = getelementptr inbounds [26 x i32], [26 x i32]* %arrayidx35, i32 0, i64 %idxprom26
  %31 = load i32, i32* %arrayidx36, align 4
  %conv37 = sitofp i32 %31 to double
  %32 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %32 to i64
  %33 = load double*, double** @searchAnchors.stra, align 8
  %arrayidx39 = getelementptr inbounds double, double* %33, i64 %idxprom38
  %34 = load double, double* %arrayidx39, align 8
  %add40 = fadd double %34, %conv37
  store double %add40, double* %arrayidx39, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.18
  %35 = load i32, i32* %j, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.15

for.end:                                          ; preds = %for.cond.15
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.end
  %36 = load i32, i32* %k, align 4
  %inc42 = add nsw i32 %36, 1
  store i32 %inc42, i32* %k, align 4
  br label %for.cond.11

for.end.43:                                       ; preds = %for.cond.11
  %37 = load i32, i32* %nseq.addr, align 4
  %conv44 = sitofp i32 %37 to double
  %38 = load i32, i32* %nseq.addr, align 4
  %sub45 = sub nsw i32 %38, 1
  %conv46 = sitofp i32 %sub45 to double
  %mul47 = fmul double %conv44, %conv46
  %div48 = fdiv double %mul47, 2.000000e+00
  %39 = load i32, i32* %i, align 4
  %idxprom49 = sext i32 %39 to i64
  %40 = load double*, double** @searchAnchors.stra, align 8
  %arrayidx50 = getelementptr inbounds double, double* %40, i64 %idxprom49
  %41 = load double, double* %arrayidx50, align 8
  %div51 = fdiv double %41, %div48
  store double %div51, double* %arrayidx50, align 8
  br label %for.inc.52

for.inc.52:                                       ; preds = %for.end.43
  %42 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %42, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond

for.end.54:                                       ; preds = %for.cond
  %43 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %add.ptr = getelementptr inbounds %struct._Segment, %struct._Segment* %43, i64 0
  %skipForeward = getelementptr inbounds %struct._Segment, %struct._Segment* %add.ptr, i32 0, i32 4
  store i32 0, i32* %skipForeward, align 4
  %44 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %add.ptr55 = getelementptr inbounds %struct._Segment, %struct._Segment* %44, i64 1
  %skipBackward = getelementptr inbounds %struct._Segment, %struct._Segment* %add.ptr55, i32 0, i32 5
  store i32 0, i32* %skipBackward, align 4
  store i32 0, i32* %status, align 4
  store double 0.000000e+00, double* %cumscore, align 8
  store double 0.000000e+00, double* %score, align 8
  store i32 0, i32* %length, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.63, %for.end.54
  %45 = load i32, i32* %j, align 4
  %46 = load i32, i32* @divWinSize, align 4
  %cmp57 = icmp slt i32 %45, %46
  br i1 %cmp57, label %for.body.59, label %for.end.65

for.body.59:                                      ; preds = %for.cond.56
  %47 = load i32, i32* %j, align 4
  %idxprom60 = sext i32 %47 to i64
  %48 = load double*, double** @searchAnchors.stra, align 8
  %arrayidx61 = getelementptr inbounds double, double* %48, i64 %idxprom60
  %49 = load double, double* %arrayidx61, align 8
  %50 = load double, double* %score, align 8
  %add62 = fadd double %50, %49
  store double %add62, double* %score, align 8
  br label %for.inc.63

for.inc.63:                                       ; preds = %for.body.59
  %51 = load i32, i32* %j, align 4
  %inc64 = add nsw i32 %51, 1
  store i32 %inc64, i32* %j, align 4
  br label %for.cond.56

for.end.65:                                       ; preds = %for.cond.56
  store i32 1, i32* %i, align 4
  br label %for.cond.66

for.cond.66:                                      ; preds = %for.inc.122, %for.end.65
  %52 = load i32, i32* %i, align 4
  %53 = load i32, i32* %len, align 4
  %54 = load i32, i32* @divWinSize, align 4
  %sub67 = sub nsw i32 %53, %54
  %cmp68 = icmp slt i32 %52, %sub67
  br i1 %cmp68, label %for.body.70, label %for.end.124

for.body.70:                                      ; preds = %for.cond.66
  %55 = load double, double* %score, align 8
  %56 = load i32, i32* %i, align 4
  %sub71 = sub nsw i32 %56, 1
  %idxprom72 = sext i32 %sub71 to i64
  %57 = load double*, double** @searchAnchors.stra, align 8
  %arrayidx73 = getelementptr inbounds double, double* %57, i64 %idxprom72
  %58 = load double, double* %arrayidx73, align 8
  %sub74 = fsub double %55, %58
  %59 = load i32, i32* %i, align 4
  %60 = load i32, i32* @divWinSize, align 4
  %add75 = add nsw i32 %59, %60
  %sub76 = sub nsw i32 %add75, 1
  %idxprom77 = sext i32 %sub76 to i64
  %61 = load double*, double** @searchAnchors.stra, align 8
  %arrayidx78 = getelementptr inbounds double, double* %61, i64 %idxprom77
  %62 = load double, double* %arrayidx78, align 8
  %add79 = fadd double %sub74, %62
  store double %add79, double* %score, align 8
  %63 = load double, double* %score, align 8
  %64 = load double, double* @searchAnchors.threshold, align 8
  %cmp80 = fcmp ogt double %63, %64
  br i1 %cmp80, label %if.then.82, label %if.end.88

if.then.82:                                       ; preds = %for.body.70
  %65 = load i32, i32* %status, align 4
  %tobool83 = icmp ne i32 %65, 0
  br i1 %tobool83, label %if.end.85, label %if.then.84

if.then.84:                                       ; preds = %if.then.82
  store i32 1, i32* %status, align 4
  %66 = load i32, i32* %i, align 4
  %67 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %start = getelementptr inbounds %struct._Segment, %struct._Segment* %67, i32 0, i32 0
  store i32 %66, i32* %start, align 4
  store i32 0, i32* %length, align 4
  store double 0.000000e+00, double* %cumscore, align 8
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.84, %if.then.82
  %68 = load i32, i32* %length, align 4
  %inc86 = add nsw i32 %68, 1
  store i32 %inc86, i32* %length, align 4
  %69 = load double, double* %score, align 8
  %70 = load double, double* %cumscore, align 8
  %add87 = fadd double %70, %69
  store double %add87, double* %cumscore, align 8
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.85, %for.body.70
  %71 = load double, double* %score, align 8
  %72 = load double, double* @searchAnchors.threshold, align 8
  %cmp89 = fcmp ole double %71, %72
  br i1 %cmp89, label %if.then.93, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.88
  %73 = load i32, i32* %length, align 4
  %cmp91 = icmp sgt i32 %73, 150
  br i1 %cmp91, label %if.then.93, label %if.end.121

if.then.93:                                       ; preds = %lor.lhs.false, %if.end.88
  %74 = load i32, i32* %status, align 4
  %tobool94 = icmp ne i32 %74, 0
  br i1 %tobool94, label %if.then.95, label %if.end.120

if.then.95:                                       ; preds = %if.then.93
  %75 = load i32, i32* %i, align 4
  %76 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %end = getelementptr inbounds %struct._Segment, %struct._Segment* %76, i32 0, i32 1
  store i32 %75, i32* %end, align 4
  %77 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %start96 = getelementptr inbounds %struct._Segment, %struct._Segment* %77, i32 0, i32 0
  %78 = load i32, i32* %start96, align 4
  %79 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %end97 = getelementptr inbounds %struct._Segment, %struct._Segment* %79, i32 0, i32 1
  %80 = load i32, i32* %end97, align 4
  %add98 = add nsw i32 %78, %80
  %81 = load i32, i32* @divWinSize, align 4
  %add99 = add nsw i32 %add98, %81
  %div100 = sdiv i32 %add99, 2
  %82 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %center = getelementptr inbounds %struct._Segment, %struct._Segment* %82, i32 0, i32 2
  store i32 %div100, i32* %center, align 4
  %83 = load double, double* %cumscore, align 8
  %84 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %score101 = getelementptr inbounds %struct._Segment, %struct._Segment* %84, i32 0, i32 3
  store double %83, double* %score101, align 8
  %85 = load i32, i32* %length, align 4
  %cmp102 = icmp sgt i32 %85, 150
  br i1 %cmp102, label %if.then.104, label %if.else.109

if.then.104:                                      ; preds = %if.then.95
  %86 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %add.ptr105 = getelementptr inbounds %struct._Segment, %struct._Segment* %86, i64 0
  %skipForeward106 = getelementptr inbounds %struct._Segment, %struct._Segment* %add.ptr105, i32 0, i32 4
  store i32 1, i32* %skipForeward106, align 4
  %87 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %add.ptr107 = getelementptr inbounds %struct._Segment, %struct._Segment* %87, i64 1
  %skipBackward108 = getelementptr inbounds %struct._Segment, %struct._Segment* %add.ptr107, i32 0, i32 5
  store i32 1, i32* %skipBackward108, align 4
  br label %if.end.114

if.else.109:                                      ; preds = %if.then.95
  %88 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %add.ptr110 = getelementptr inbounds %struct._Segment, %struct._Segment* %88, i64 0
  %skipForeward111 = getelementptr inbounds %struct._Segment, %struct._Segment* %add.ptr110, i32 0, i32 4
  store i32 0, i32* %skipForeward111, align 4
  %89 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %add.ptr112 = getelementptr inbounds %struct._Segment, %struct._Segment* %89, i64 1
  %skipBackward113 = getelementptr inbounds %struct._Segment, %struct._Segment* %add.ptr112, i32 0, i32 5
  store i32 0, i32* %skipBackward113, align 4
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.109, %if.then.104
  store i32 0, i32* %length, align 4
  store double 0.000000e+00, double* %cumscore, align 8
  store i32 0, i32* %status, align 4
  %90 = load i32, i32* %value, align 4
  %inc115 = add nsw i32 %90, 1
  store i32 %inc115, i32* %value, align 4
  %91 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %incdec.ptr = getelementptr inbounds %struct._Segment, %struct._Segment* %91, i32 1
  store %struct._Segment* %incdec.ptr, %struct._Segment** %seg.addr, align 8
  %92 = load i32, i32* %value, align 4
  %cmp116 = icmp sgt i32 %92, 99997
  br i1 %cmp116, label %if.then.118, label %if.end.119

if.then.118:                                      ; preds = %if.end.114
  call void @ErrorExit(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.30, i32 0, i32 0))
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.118, %if.end.114
  br label %if.end.120

if.end.120:                                       ; preds = %if.end.119, %if.then.93
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %lor.lhs.false
  br label %for.inc.122

for.inc.122:                                      ; preds = %if.end.121
  %93 = load i32, i32* %i, align 4
  %inc123 = add nsw i32 %93, 1
  store i32 %inc123, i32* %i, align 4
  br label %for.cond.66

for.end.124:                                      ; preds = %for.cond.66
  %94 = load i32, i32* %status, align 4
  %tobool125 = icmp ne i32 %94, 0
  br i1 %tobool125, label %if.then.126, label %if.end.136

if.then.126:                                      ; preds = %for.end.124
  %95 = load i32, i32* %i, align 4
  %96 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %end127 = getelementptr inbounds %struct._Segment, %struct._Segment* %96, i32 0, i32 1
  store i32 %95, i32* %end127, align 4
  %97 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %start128 = getelementptr inbounds %struct._Segment, %struct._Segment* %97, i32 0, i32 0
  %98 = load i32, i32* %start128, align 4
  %99 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %end129 = getelementptr inbounds %struct._Segment, %struct._Segment* %99, i32 0, i32 1
  %100 = load i32, i32* %end129, align 4
  %add130 = add nsw i32 %98, %100
  %101 = load i32, i32* @divWinSize, align 4
  %add131 = add nsw i32 %add130, %101
  %div132 = sdiv i32 %add131, 2
  %102 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %center133 = getelementptr inbounds %struct._Segment, %struct._Segment* %102, i32 0, i32 2
  store i32 %div132, i32* %center133, align 4
  %103 = load double, double* %cumscore, align 8
  %104 = load %struct._Segment*, %struct._Segment** %seg.addr, align 8
  %score134 = getelementptr inbounds %struct._Segment, %struct._Segment* %104, i32 0, i32 3
  store double %103, double* %score134, align 8
  %105 = load i32, i32* %value, align 4
  %inc135 = add nsw i32 %105, 1
  store i32 %inc135, i32* %value, align 4
  br label %if.end.136

if.end.136:                                       ; preds = %if.then.126, %for.end.124
  %106 = load i32, i32* %value, align 4
  ret i32 %106
}

declare void @FreeDoubleVec(double*) #2

declare double* @AllocateDoubleVec(i32) #2

; Function Attrs: nounwind uwtable
define void @dontcalcimportance(i32 %nseq, double* %eff, i8** %seq, %struct._LocalHom** %localhom) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca double*, align 8
  %seq.addr = alloca i8**, align 8
  %localhom.addr = alloca %struct._LocalHom**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ptr = alloca %struct._LocalHom*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store double* %eff, double** %eff.addr, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store %struct._LocalHom** %localhom, %struct._LocalHom*** %localhom.addr, align 8
  %0 = load i32*, i32** @dontcalcimportance.nogaplen, align 8
  %cmp = icmp eq i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nseq.addr, align 4
  %call = call i32* @AllocateIntVec(i32 %1)
  store i32* %call, i32** @dontcalcimportance.nogaplen, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %nseq.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  %call2 = call i32 @seqlen(i8* %6)
  %7 = load i32, i32* %i, align 4
  %idxprom3 = sext i32 %7 to i64
  %8 = load i32*, i32** @dontcalcimportance.nogaplen, align 8
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i64 %idxprom3
  store i32 %call2, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.22, %for.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %nseq.addr, align 4
  %cmp6 = icmp slt i32 %10, %11
  br i1 %cmp6, label %for.body.7, label %for.end.24

for.body.7:                                       ; preds = %for.cond.5
  store i32 0, i32* %j, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.19, %for.body.7
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %nseq.addr, align 4
  %cmp9 = icmp slt i32 %12, %13
  br i1 %cmp9, label %for.body.10, label %for.end.21

for.body.10:                                      ; preds = %for.cond.8
  %14 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %14 to i64
  %15 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx12 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %15, i64 %idxprom11
  %16 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx12, align 8
  %17 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %16, i64 %idx.ext
  store %struct._LocalHom* %add.ptr, %struct._LocalHom** %ptr, align 8
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc.17, %for.body.10
  %18 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %tobool = icmp ne %struct._LocalHom* %18, null
  br i1 %tobool, label %for.body.14, label %for.end.18

for.body.14:                                      ; preds = %for.cond.13
  %19 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %opt = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %19, i32 0, i32 7
  %20 = load double, double* %opt, align 8
  %21 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %overlapaa = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %21, i32 0, i32 8
  %22 = load i32, i32* %overlapaa, align 4
  %conv = sitofp i32 %22 to double
  %div = fdiv double %20, %conv
  %23 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %importance = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %23, i32 0, i32 10
  store double %div, double* %importance, align 8
  %24 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %importance15 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %24, i32 0, i32 10
  %25 = load double, double* %importance15, align 8
  %conv16 = fptrunc double %25 to float
  %26 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %fimportance = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %26, i32 0, i32 11
  store float %conv16, float* %fimportance, align 4
  br label %for.inc.17

for.inc.17:                                       ; preds = %for.body.14
  %27 = load %struct._LocalHom*, %struct._LocalHom** %ptr, align 8
  %next = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %27, i32 0, i32 1
  %28 = load %struct._LocalHom*, %struct._LocalHom** %next, align 8
  store %struct._LocalHom* %28, %struct._LocalHom** %ptr, align 8
  br label %for.cond.13

for.end.18:                                       ; preds = %for.cond.13
  br label %for.inc.19

for.inc.19:                                       ; preds = %for.end.18
  %29 = load i32, i32* %j, align 4
  %inc20 = add nsw i32 %29, 1
  store i32 %inc20, i32* %j, align 4
  br label %for.cond.8

for.end.21:                                       ; preds = %for.cond.8
  br label %for.inc.22

for.inc.22:                                       ; preds = %for.end.21
  %30 = load i32, i32* %i, align 4
  %inc23 = add nsw i32 %30, 1
  store i32 %inc23, i32* %i, align 4
  br label %for.cond.5

for.end.24:                                       ; preds = %for.cond.5
  ret void
}

; Function Attrs: nounwind uwtable
define void @calcimportance(i32 %nseq, double* %eff, i8** %seq, %struct._LocalHom** %localhom) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %eff.addr = alloca double*, align 8
  %seq.addr = alloca i8**, align 8
  %localhom.addr = alloca %struct._LocalHom**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pos = alloca i32, align 4
  %len = alloca i32, align 4
  %tmpdouble = alloca double, align 8
  %tmpptr = alloca %struct._LocalHom*, align 8
  %imp = alloca double, align 8
  %tmpptr1 = alloca %struct._LocalHom*, align 8
  %tmpptr2 = alloca %struct._LocalHom*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store double* %eff, double** %eff.addr, align 8
  store i8** %seq, i8*** %seq.addr, align 8
  store %struct._LocalHom** %localhom, %struct._LocalHom*** %localhom.addr, align 8
  %0 = load double*, double** @calcimportance.importance, align 8
  %cmp = icmp eq double* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @nlenmax, align 4
  %call = call double* @AllocateDoubleVec(i32 %1)
  store double* %call, double** @calcimportance.importance, align 8
  %2 = load i32, i32* %nseq.addr, align 4
  %call1 = call i32* @AllocateIntVec(i32 %2)
  store i32* %call1, i32** @calcimportance.nogaplen, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nseq.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8**, i8*** %seq.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %idxprom
  %7 = load i8*, i8** %arrayidx, align 8
  %call3 = call i32 @seqlen(i8* %7)
  %8 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load i32*, i32** @calcimportance.nogaplen, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4
  store i32 %call3, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.95, %for.end
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %nseq.addr, align 4
  %cmp7 = icmp slt i32 %11, %12
  br i1 %cmp7, label %for.body.8, label %for.end.97

for.body.8:                                       ; preds = %for.cond.6
  store i32 0, i32* %pos, align 4
  br label %for.cond.9

for.cond.9:                                       ; preds = %for.inc.14, %for.body.8
  %13 = load i32, i32* %pos, align 4
  %14 = load i32, i32* @nlenmax, align 4
  %cmp10 = icmp slt i32 %13, %14
  br i1 %cmp10, label %for.body.11, label %for.end.16

for.body.11:                                      ; preds = %for.cond.9
  %15 = load i32, i32* %pos, align 4
  %idxprom12 = sext i32 %15 to i64
  %16 = load double*, double** @calcimportance.importance, align 8
  %arrayidx13 = getelementptr inbounds double, double* %16, i64 %idxprom12
  store double 0.000000e+00, double* %arrayidx13, align 8
  br label %for.inc.14

for.inc.14:                                       ; preds = %for.body.11
  %17 = load i32, i32* %pos, align 4
  %inc15 = add nsw i32 %17, 1
  store i32 %inc15, i32* %pos, align 4
  br label %for.cond.9

for.end.16:                                       ; preds = %for.cond.9
  store i32 0, i32* %j, align 4
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.46, %for.end.16
  %18 = load i32, i32* %j, align 4
  %19 = load i32, i32* %nseq.addr, align 4
  %cmp18 = icmp slt i32 %18, %19
  br i1 %cmp18, label %for.body.19, label %for.end.48

for.body.19:                                      ; preds = %for.cond.17
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %j, align 4
  %cmp20 = icmp eq i32 %20, %21
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %for.body.19
  br label %for.inc.46

if.end.22:                                        ; preds = %for.body.19
  %22 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %22 to i64
  %23 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx24 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %23, i64 %idxprom23
  %24 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx24, align 8
  %25 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %24, i64 %idx.ext
  store %struct._LocalHom* %add.ptr, %struct._LocalHom** %tmpptr, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %26 to i64
  %27 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx26 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %27, i64 %idxprom25
  %28 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx26, align 8
  %29 = load i32, i32* %j, align 4
  %idx.ext27 = sext i32 %29 to i64
  %add.ptr28 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %28, i64 %idx.ext27
  store %struct._LocalHom* %add.ptr28, %struct._LocalHom** %tmpptr, align 8
  br label %for.cond.29

for.cond.29:                                      ; preds = %for.inc.44, %if.end.22
  %30 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %tobool = icmp ne %struct._LocalHom* %30, null
  br i1 %tobool, label %for.body.30, label %for.end.45

for.body.30:                                      ; preds = %for.cond.29
  %31 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %opt = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %31, i32 0, i32 7
  %32 = load double, double* %opt, align 8
  %cmp31 = fcmp oeq double %32, -1.000000e+00
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %for.body.30
  br label %for.inc.44

if.end.33:                                        ; preds = %for.body.30
  %33 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %start1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %33, i32 0, i32 3
  %34 = load i32, i32* %start1, align 4
  store i32 %34, i32* %pos, align 4
  br label %for.cond.34

for.cond.34:                                      ; preds = %for.inc.41, %if.end.33
  %35 = load i32, i32* %pos, align 4
  %36 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %end1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %36, i32 0, i32 4
  %37 = load i32, i32* %end1, align 4
  %cmp35 = icmp sle i32 %35, %37
  br i1 %cmp35, label %for.body.36, label %for.end.43

for.body.36:                                      ; preds = %for.cond.34
  %38 = load i32, i32* %j, align 4
  %idxprom37 = sext i32 %38 to i64
  %39 = load double*, double** %eff.addr, align 8
  %arrayidx38 = getelementptr inbounds double, double* %39, i64 %idxprom37
  %40 = load double, double* %arrayidx38, align 8
  %41 = load i32, i32* %pos, align 4
  %idxprom39 = sext i32 %41 to i64
  %42 = load double*, double** @calcimportance.importance, align 8
  %arrayidx40 = getelementptr inbounds double, double* %42, i64 %idxprom39
  %43 = load double, double* %arrayidx40, align 8
  %add = fadd double %43, %40
  store double %add, double* %arrayidx40, align 8
  br label %for.inc.41

for.inc.41:                                       ; preds = %for.body.36
  %44 = load i32, i32* %pos, align 4
  %inc42 = add nsw i32 %44, 1
  store i32 %inc42, i32* %pos, align 4
  br label %for.cond.34

for.end.43:                                       ; preds = %for.cond.34
  br label %for.inc.44

for.inc.44:                                       ; preds = %for.end.43, %if.then.32
  %45 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %next = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %45, i32 0, i32 1
  %46 = load %struct._LocalHom*, %struct._LocalHom** %next, align 8
  store %struct._LocalHom* %46, %struct._LocalHom** %tmpptr, align 8
  br label %for.cond.29

for.end.45:                                       ; preds = %for.cond.29
  br label %for.inc.46

for.inc.46:                                       ; preds = %for.end.45, %if.then.21
  %47 = load i32, i32* %j, align 4
  %inc47 = add nsw i32 %47, 1
  store i32 %inc47, i32* %j, align 4
  br label %for.cond.17

for.end.48:                                       ; preds = %for.cond.17
  store i32 0, i32* %j, align 4
  br label %for.cond.49

for.cond.49:                                      ; preds = %for.inc.92, %for.end.48
  %48 = load i32, i32* %j, align 4
  %49 = load i32, i32* %nseq.addr, align 4
  %cmp50 = icmp slt i32 %48, %49
  br i1 %cmp50, label %for.body.51, label %for.end.94

for.body.51:                                      ; preds = %for.cond.49
  %50 = load i32, i32* %i, align 4
  %51 = load i32, i32* %j, align 4
  %cmp52 = icmp eq i32 %50, %51
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %for.body.51
  br label %for.inc.92

if.end.54:                                        ; preds = %for.body.51
  %52 = load i32, i32* %j, align 4
  %idxprom55 = sext i32 %52 to i64
  %53 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %53 to i64
  %54 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx57 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %54, i64 %idxprom56
  %55 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx57, align 8
  %arrayidx58 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %55, i64 %idxprom55
  %opt59 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx58, i32 0, i32 7
  %56 = load double, double* %opt59, align 8
  %cmp60 = fcmp oeq double %56, -1.000000e+00
  br i1 %cmp60, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end.54
  br label %for.inc.92

if.end.62:                                        ; preds = %if.end.54
  %57 = load i32, i32* %i, align 4
  %idxprom63 = sext i32 %57 to i64
  %58 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx64 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %58, i64 %idxprom63
  %59 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx64, align 8
  %60 = load i32, i32* %j, align 4
  %idx.ext65 = sext i32 %60 to i64
  %add.ptr66 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %59, i64 %idx.ext65
  store %struct._LocalHom* %add.ptr66, %struct._LocalHom** %tmpptr, align 8
  br label %for.cond.67

for.cond.67:                                      ; preds = %for.inc.89, %if.end.62
  %61 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %tobool68 = icmp ne %struct._LocalHom* %61, null
  br i1 %tobool68, label %for.body.69, label %for.end.91

for.body.69:                                      ; preds = %for.cond.67
  %62 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %opt70 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %62, i32 0, i32 7
  %63 = load double, double* %opt70, align 8
  %cmp71 = fcmp oeq double %63, -1.000000e+00
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %for.body.69
  br label %for.inc.89

if.end.73:                                        ; preds = %for.body.69
  store double 0.000000e+00, double* %tmpdouble, align 8
  store i32 0, i32* %len, align 4
  %64 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %start174 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %64, i32 0, i32 3
  %65 = load i32, i32* %start174, align 4
  store i32 %65, i32* %pos, align 4
  br label %for.cond.75

for.cond.75:                                      ; preds = %for.inc.83, %if.end.73
  %66 = load i32, i32* %pos, align 4
  %67 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %end176 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %67, i32 0, i32 4
  %68 = load i32, i32* %end176, align 4
  %cmp77 = icmp sle i32 %66, %68
  br i1 %cmp77, label %for.body.78, label %for.end.85

for.body.78:                                      ; preds = %for.cond.75
  %69 = load i32, i32* %pos, align 4
  %idxprom79 = sext i32 %69 to i64
  %70 = load double*, double** @calcimportance.importance, align 8
  %arrayidx80 = getelementptr inbounds double, double* %70, i64 %idxprom79
  %71 = load double, double* %arrayidx80, align 8
  %72 = load double, double* %tmpdouble, align 8
  %add81 = fadd double %72, %71
  store double %add81, double* %tmpdouble, align 8
  %73 = load i32, i32* %len, align 4
  %inc82 = add nsw i32 %73, 1
  store i32 %inc82, i32* %len, align 4
  br label %for.inc.83

for.inc.83:                                       ; preds = %for.body.78
  %74 = load i32, i32* %pos, align 4
  %inc84 = add nsw i32 %74, 1
  store i32 %inc84, i32* %pos, align 4
  br label %for.cond.75

for.end.85:                                       ; preds = %for.cond.75
  %75 = load i32, i32* %len, align 4
  %conv = sitofp i32 %75 to double
  %76 = load double, double* %tmpdouble, align 8
  %div = fdiv double %76, %conv
  store double %div, double* %tmpdouble, align 8
  %77 = load double, double* %tmpdouble, align 8
  %78 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %opt86 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %78, i32 0, i32 7
  %79 = load double, double* %opt86, align 8
  %mul = fmul double %77, %79
  %80 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %importance = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %80, i32 0, i32 10
  store double %mul, double* %importance, align 8
  %81 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %importance87 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %81, i32 0, i32 10
  %82 = load double, double* %importance87, align 8
  %conv88 = fptrunc double %82 to float
  %83 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %fimportance = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %83, i32 0, i32 11
  store float %conv88, float* %fimportance, align 4
  br label %for.inc.89

for.inc.89:                                       ; preds = %for.end.85, %if.then.72
  %84 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr, align 8
  %next90 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %84, i32 0, i32 1
  %85 = load %struct._LocalHom*, %struct._LocalHom** %next90, align 8
  store %struct._LocalHom* %85, %struct._LocalHom** %tmpptr, align 8
  br label %for.cond.67

for.end.91:                                       ; preds = %for.cond.67
  br label %for.inc.92

for.inc.92:                                       ; preds = %for.end.91, %if.then.61, %if.then.53
  %86 = load i32, i32* %j, align 4
  %inc93 = add nsw i32 %86, 1
  store i32 %inc93, i32* %j, align 4
  br label %for.cond.49

for.end.94:                                       ; preds = %for.cond.49
  br label %for.inc.95

for.inc.95:                                       ; preds = %for.end.94
  %87 = load i32, i32* %i, align 4
  %inc96 = add nsw i32 %87, 1
  store i32 %inc96, i32* %i, align 4
  br label %for.cond.6

for.end.97:                                       ; preds = %for.cond.6
  store i32 0, i32* %i, align 4
  br label %for.cond.98

for.cond.98:                                      ; preds = %for.inc.152, %for.end.97
  %88 = load i32, i32* %i, align 4
  %89 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %89, 1
  %cmp99 = icmp slt i32 %88, %sub
  br i1 %cmp99, label %for.body.101, label %for.end.154

for.body.101:                                     ; preds = %for.cond.98
  %90 = load i32, i32* %i, align 4
  %add102 = add nsw i32 %90, 1
  store i32 %add102, i32* %j, align 4
  br label %for.cond.103

for.cond.103:                                     ; preds = %for.inc.149, %for.body.101
  %91 = load i32, i32* %j, align 4
  %92 = load i32, i32* %nseq.addr, align 4
  %cmp104 = icmp slt i32 %91, %92
  br i1 %cmp104, label %for.body.106, label %for.end.151

for.body.106:                                     ; preds = %for.cond.103
  %93 = load i32, i32* %i, align 4
  %idxprom107 = sext i32 %93 to i64
  %94 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx108 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %94, i64 %idxprom107
  %95 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx108, align 8
  %96 = load i32, i32* %j, align 4
  %idx.ext109 = sext i32 %96 to i64
  %add.ptr110 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %95, i64 %idx.ext109
  store %struct._LocalHom* %add.ptr110, %struct._LocalHom** %tmpptr1, align 8
  %97 = load i32, i32* %j, align 4
  %idxprom111 = sext i32 %97 to i64
  %98 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx112 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %98, i64 %idxprom111
  %99 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx112, align 8
  %100 = load i32, i32* %i, align 4
  %idx.ext113 = sext i32 %100 to i64
  %add.ptr114 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %99, i64 %idx.ext113
  store %struct._LocalHom* %add.ptr114, %struct._LocalHom** %tmpptr2, align 8
  br label %for.cond.115

for.cond.115:                                     ; preds = %for.inc.136, %for.body.106
  %101 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %tobool116 = icmp ne %struct._LocalHom* %101, null
  br i1 %tobool116, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond.115
  %102 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %tobool117 = icmp ne %struct._LocalHom* %102, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond.115
  %103 = phi i1 [ false, %for.cond.115 ], [ %tobool117, %land.rhs ]
  br i1 %103, label %for.body.118, label %for.end.139

for.body.118:                                     ; preds = %land.end
  %104 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %opt119 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %104, i32 0, i32 7
  %105 = load double, double* %opt119, align 8
  %cmp120 = fcmp oeq double %105, -1.000000e+00
  br i1 %cmp120, label %if.then.125, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.118
  %106 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %opt122 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %106, i32 0, i32 7
  %107 = load double, double* %opt122, align 8
  %cmp123 = fcmp oeq double %107, -1.000000e+00
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %lor.lhs.false, %for.body.118
  br label %for.inc.136

if.end.126:                                       ; preds = %lor.lhs.false
  %108 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %importance127 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %108, i32 0, i32 10
  %109 = load double, double* %importance127, align 8
  %110 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %importance128 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %110, i32 0, i32 10
  %111 = load double, double* %importance128, align 8
  %add129 = fadd double %109, %111
  %mul130 = fmul double 5.000000e-01, %add129
  store double %mul130, double* %imp, align 8
  %112 = load double, double* %imp, align 8
  %113 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %importance131 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %113, i32 0, i32 10
  store double %112, double* %importance131, align 8
  %114 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %importance132 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %114, i32 0, i32 10
  store double %112, double* %importance132, align 8
  %115 = load double, double* %imp, align 8
  %conv133 = fptrunc double %115 to float
  %116 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %fimportance134 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %116, i32 0, i32 11
  store float %conv133, float* %fimportance134, align 4
  %117 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %fimportance135 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %117, i32 0, i32 11
  store float %conv133, float* %fimportance135, align 4
  br label %for.inc.136

for.inc.136:                                      ; preds = %if.end.126, %if.then.125
  %118 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %next137 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %118, i32 0, i32 1
  %119 = load %struct._LocalHom*, %struct._LocalHom** %next137, align 8
  store %struct._LocalHom* %119, %struct._LocalHom** %tmpptr1, align 8
  %120 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %next138 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %120, i32 0, i32 1
  %121 = load %struct._LocalHom*, %struct._LocalHom** %next138, align 8
  store %struct._LocalHom* %121, %struct._LocalHom** %tmpptr2, align 8
  br label %for.cond.115

for.end.139:                                      ; preds = %land.end
  %122 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %tobool140 = icmp ne %struct._LocalHom* %122, null
  br i1 %tobool140, label %land.lhs.true, label %lor.lhs.false.142

land.lhs.true:                                    ; preds = %for.end.139
  %123 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %tobool141 = icmp ne %struct._LocalHom* %123, null
  br i1 %tobool141, label %lor.lhs.false.142, label %if.then.146

lor.lhs.false.142:                                ; preds = %land.lhs.true, %for.end.139
  %124 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr1, align 8
  %tobool143 = icmp ne %struct._LocalHom* %124, null
  br i1 %tobool143, label %if.end.148, label %land.lhs.true.144

land.lhs.true.144:                                ; preds = %lor.lhs.false.142
  %125 = load %struct._LocalHom*, %struct._LocalHom** %tmpptr2, align 8
  %tobool145 = icmp ne %struct._LocalHom* %125, null
  br i1 %tobool145, label %if.then.146, label %if.end.148

if.then.146:                                      ; preds = %land.lhs.true.144, %land.lhs.true
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %127 = load i32, i32* %i, align 4
  %128 = load i32, i32* %j, align 4
  %call147 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %126, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.31, i32 0, i32 0), i32 %127, i32 %128)
  call void @exit(i32 1) #7
  unreachable

if.end.148:                                       ; preds = %land.lhs.true.144, %lor.lhs.false.142
  br label %for.inc.149

for.inc.149:                                      ; preds = %if.end.148
  %129 = load i32, i32* %j, align 4
  %inc150 = add nsw i32 %129, 1
  store i32 %inc150, i32* %j, align 4
  br label %for.cond.103

for.end.151:                                      ; preds = %for.cond.103
  br label %for.inc.152

for.inc.152:                                      ; preds = %for.end.151
  %130 = load i32, i32* %i, align 4
  %inc153 = add nsw i32 %130, 1
  store i32 %inc153, i32* %i, align 4
  br label %for.cond.98

for.end.154:                                      ; preds = %for.cond.98
  ret void
}

; Function Attrs: nounwind uwtable
define void @extendlocalhom2(i32 %nseq, %struct._LocalHom** %localhom, double** %dist) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %localhom.addr = alloca %struct._LocalHom**, align 8
  %dist.addr = alloca double**, align 8
  %overlp = alloca i32, align 4
  %plim = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %pi = alloca i32, align 4
  %pj = alloca i32, align 4
  %pk = alloca i32, align 4
  %len = alloca i32, align 4
  %status = alloca i32, align 4
  %sti = alloca i32, align 4
  %stj = alloca i32, align 4
  %ipt = alloca i32*, align 8
  %co = alloca i32, align 4
  %pt = alloca %struct._LocalHom*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store %struct._LocalHom** %localhom, %struct._LocalHom*** %localhom.addr, align 8
  store double** %dist, double*** %dist.addr, align 8
  store i32 0, i32* %sti, align 4
  store i32 0, i32* %stj, align 4
  %0 = load i32*, i32** @extendlocalhom2.ini, align 8
  %cmp = icmp eq i32* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @nlenmax, align 4
  %add = add nsw i32 %1, 1
  %call = call i32* @AllocateIntVec(i32 %add)
  store i32* %call, i32** @extendlocalhom2.ini, align 8
  %2 = load i32, i32* @nlenmax, align 4
  %add1 = add nsw i32 %2, 1
  %call2 = call i32* @AllocateIntVec(i32 %add1)
  store i32* %call2, i32** @extendlocalhom2.inj, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.272, %if.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %4, 1
  %cmp3 = icmp slt i32 %3, %sub
  br i1 %cmp3, label %for.body, label %for.end.274

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %add4 = add nsw i32 %5, 1
  store i32 %add4, i32* %j, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.269, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %nseq.addr, align 4
  %cmp6 = icmp slt i32 %6, %7
  br i1 %cmp6, label %for.body.7, label %for.end.271

for.body.7:                                       ; preds = %for.cond.5
  store i32 0, i32* %k, align 4
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.266, %for.body.7
  %8 = load i32, i32* %k, align 4
  %9 = load i32, i32* %nseq.addr, align 4
  %cmp9 = icmp slt i32 %8, %9
  br i1 %cmp9, label %for.body.10, label %for.end.268

for.body.10:                                      ; preds = %for.cond.8
  %10 = load i32, i32* %k, align 4
  %11 = load i32, i32* %i, align 4
  %cmp11 = icmp eq i32 %10, %11
  br i1 %cmp11, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.10
  %12 = load i32, i32* %k, align 4
  %13 = load i32, i32* %j, align 4
  %cmp12 = icmp eq i32 %12, %13
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %lor.lhs.false, %for.body.10
  br label %for.inc.266

if.end.14:                                        ; preds = %lor.lhs.false
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %k, align 4
  %cmp15 = icmp sgt i32 %14, %15
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.14
  %16 = load i32, i32* %i, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.14
  %17 = load i32, i32* %k, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %16, %cond.true ], [ %17, %cond.false ]
  %idxprom = sext i32 %cond to i64
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %k, align 4
  %cmp16 = icmp slt i32 %18, %19
  br i1 %cmp16, label %cond.true.17, label %cond.false.18

cond.true.17:                                     ; preds = %cond.end
  %20 = load i32, i32* %i, align 4
  br label %cond.end.19

cond.false.18:                                    ; preds = %cond.end
  %21 = load i32, i32* %k, align 4
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.18, %cond.true.17
  %cond20 = phi i32 [ %20, %cond.true.17 ], [ %21, %cond.false.18 ]
  %idxprom21 = sext i32 %cond20 to i64
  %22 = load double**, double*** %dist.addr, align 8
  %arrayidx = getelementptr inbounds double*, double** %22, i64 %idxprom21
  %23 = load double*, double** %arrayidx, align 8
  %arrayidx22 = getelementptr inbounds double, double* %23, i64 %idxprom
  %24 = load double, double* %arrayidx22, align 8
  %25 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %25 to i64
  %26 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %26 to i64
  %27 = load double**, double*** %dist.addr, align 8
  %arrayidx25 = getelementptr inbounds double*, double** %27, i64 %idxprom24
  %28 = load double*, double** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds double, double* %28, i64 %idxprom23
  %29 = load double, double* %arrayidx26, align 8
  %30 = load double, double* @thrinter, align 8
  %mul = fmul double %29, %30
  %cmp27 = fcmp ogt double %24, %mul
  br i1 %cmp27, label %if.then.49, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %cond.end.19
  %31 = load i32, i32* %j, align 4
  %32 = load i32, i32* %k, align 4
  %cmp29 = icmp sgt i32 %31, %32
  br i1 %cmp29, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %lor.lhs.false.28
  %33 = load i32, i32* %j, align 4
  br label %cond.end.32

cond.false.31:                                    ; preds = %lor.lhs.false.28
  %34 = load i32, i32* %k, align 4
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.31, %cond.true.30
  %cond33 = phi i32 [ %33, %cond.true.30 ], [ %34, %cond.false.31 ]
  %idxprom34 = sext i32 %cond33 to i64
  %35 = load i32, i32* %j, align 4
  %36 = load i32, i32* %k, align 4
  %cmp35 = icmp slt i32 %35, %36
  br i1 %cmp35, label %cond.true.36, label %cond.false.37

cond.true.36:                                     ; preds = %cond.end.32
  %37 = load i32, i32* %j, align 4
  br label %cond.end.38

cond.false.37:                                    ; preds = %cond.end.32
  %38 = load i32, i32* %k, align 4
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.37, %cond.true.36
  %cond39 = phi i32 [ %37, %cond.true.36 ], [ %38, %cond.false.37 ]
  %idxprom40 = sext i32 %cond39 to i64
  %39 = load double**, double*** %dist.addr, align 8
  %arrayidx41 = getelementptr inbounds double*, double** %39, i64 %idxprom40
  %40 = load double*, double** %arrayidx41, align 8
  %arrayidx42 = getelementptr inbounds double, double* %40, i64 %idxprom34
  %41 = load double, double* %arrayidx42, align 8
  %42 = load i32, i32* %j, align 4
  %idxprom43 = sext i32 %42 to i64
  %43 = load i32, i32* %i, align 4
  %idxprom44 = sext i32 %43 to i64
  %44 = load double**, double*** %dist.addr, align 8
  %arrayidx45 = getelementptr inbounds double*, double** %44, i64 %idxprom44
  %45 = load double*, double** %arrayidx45, align 8
  %arrayidx46 = getelementptr inbounds double, double* %45, i64 %idxprom43
  %46 = load double, double* %arrayidx46, align 8
  %47 = load double, double* @thrinter, align 8
  %mul47 = fmul double %46, %47
  %cmp48 = fcmp ogt double %41, %mul47
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %cond.end.38, %cond.end.19
  br label %for.inc.266

if.end.50:                                        ; preds = %cond.end.38
  %48 = load i32*, i32** @extendlocalhom2.ini, align 8
  store i32* %48, i32** %ipt, align 8
  %49 = load i32, i32* @nlenmax, align 4
  %add51 = add nsw i32 %49, 1
  store i32 %add51, i32* %co, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.50
  %50 = load i32, i32* %co, align 4
  %dec = add nsw i32 %50, -1
  store i32 %dec, i32* %co, align 4
  %tobool = icmp ne i32 %50, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %51 = load i32*, i32** %ipt, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %51, i32 1
  store i32* %incdec.ptr, i32** %ipt, align 8
  store i32 -1, i32* %51, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %52 = load i32*, i32** @extendlocalhom2.inj, align 8
  store i32* %52, i32** %ipt, align 8
  %53 = load i32, i32* @nlenmax, align 4
  %add52 = add nsw i32 %53, 1
  store i32 %add52, i32* %co, align 4
  br label %while.cond.53

while.cond.53:                                    ; preds = %while.body.56, %while.end
  %54 = load i32, i32* %co, align 4
  %dec54 = add nsw i32 %54, -1
  store i32 %dec54, i32* %co, align 4
  %tobool55 = icmp ne i32 %54, 0
  br i1 %tobool55, label %while.body.56, label %while.end.58

while.body.56:                                    ; preds = %while.cond.53
  %55 = load i32*, i32** %ipt, align 8
  %incdec.ptr57 = getelementptr inbounds i32, i32* %55, i32 1
  store i32* %incdec.ptr57, i32** %ipt, align 8
  store i32 -1, i32* %55, align 4
  br label %while.cond.53

while.end.58:                                     ; preds = %while.cond.53
  store i32 0, i32* %overlp, align 4
  %56 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %56 to i64
  %57 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx60 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %57, i64 %idxprom59
  %58 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx60, align 8
  %59 = load i32, i32* %k, align 4
  %idx.ext = sext i32 %59 to i64
  %add.ptr = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %58, i64 %idx.ext
  store %struct._LocalHom* %add.ptr, %struct._LocalHom** %pt, align 8
  br label %for.cond.61

for.cond.61:                                      ; preds = %for.inc, %while.end.58
  %60 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %tobool62 = icmp ne %struct._LocalHom* %60, null
  br i1 %tobool62, label %for.body.63, label %for.end

for.body.63:                                      ; preds = %for.cond.61
  %61 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %opt = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %61, i32 0, i32 7
  %62 = load double, double* %opt, align 8
  %cmp64 = fcmp oeq double %62, -1.000000e+00
  br i1 %cmp64, label %if.then.65, label %if.end.68

if.then.65:                                       ; preds = %for.body.63
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %64 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %opt66 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %64, i32 0, i32 7
  %65 = load double, double* %opt66, align 8
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i32 0, i32 0), double %65)
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.65, %for.body.63
  %66 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %extended = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %66, i32 0, i32 9
  %67 = load i32, i32* %extended, align 4
  %cmp69 = icmp sgt i32 %67, -1
  br i1 %cmp69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.end.68
  br label %for.end

if.end.71:                                        ; preds = %if.end.68
  %68 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %start1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %68, i32 0, i32 3
  %69 = load i32, i32* %start1, align 4
  store i32 %69, i32* %pi, align 4
  %70 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %start2 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %70, i32 0, i32 5
  %71 = load i32, i32* %start2, align 4
  store i32 %71, i32* %pk, align 4
  %72 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %end1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %72, i32 0, i32 4
  %73 = load i32, i32* %end1, align 4
  %74 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %start172 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %74, i32 0, i32 3
  %75 = load i32, i32* %start172, align 4
  %sub73 = sub nsw i32 %73, %75
  %add74 = add nsw i32 %sub73, 1
  store i32 %add74, i32* %len, align 4
  %76 = load i32*, i32** @extendlocalhom2.ini, align 8
  %77 = load i32, i32* %pk, align 4
  %idx.ext75 = sext i32 %77 to i64
  %add.ptr76 = getelementptr inbounds i32, i32* %76, i64 %idx.ext75
  store i32* %add.ptr76, i32** %ipt, align 8
  br label %while.cond.77

while.cond.77:                                    ; preds = %while.body.80, %if.end.71
  %78 = load i32, i32* %len, align 4
  %dec78 = add nsw i32 %78, -1
  store i32 %dec78, i32* %len, align 4
  %tobool79 = icmp ne i32 %78, 0
  br i1 %tobool79, label %while.body.80, label %while.end.82

while.body.80:                                    ; preds = %while.cond.77
  %79 = load i32, i32* %pi, align 4
  %inc = add nsw i32 %79, 1
  store i32 %inc, i32* %pi, align 4
  %80 = load i32*, i32** %ipt, align 8
  %incdec.ptr81 = getelementptr inbounds i32, i32* %80, i32 1
  store i32* %incdec.ptr81, i32** %ipt, align 8
  store i32 %79, i32* %80, align 4
  br label %while.cond.77

while.end.82:                                     ; preds = %while.cond.77
  br label %for.inc

for.inc:                                          ; preds = %while.end.82
  %81 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %next = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %81, i32 0, i32 1
  %82 = load %struct._LocalHom*, %struct._LocalHom** %next, align 8
  store %struct._LocalHom* %82, %struct._LocalHom** %pt, align 8
  br label %for.cond.61

for.end:                                          ; preds = %if.then.70, %for.cond.61
  %83 = load i32, i32* %j, align 4
  %idxprom83 = sext i32 %83 to i64
  %84 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx84 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %84, i64 %idxprom83
  %85 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx84, align 8
  %86 = load i32, i32* %k, align 4
  %idx.ext85 = sext i32 %86 to i64
  %add.ptr86 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %85, i64 %idx.ext85
  store %struct._LocalHom* %add.ptr86, %struct._LocalHom** %pt, align 8
  br label %for.cond.87

for.cond.87:                                      ; preds = %for.inc.115, %for.end
  %87 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %tobool88 = icmp ne %struct._LocalHom* %87, null
  br i1 %tobool88, label %for.body.89, label %for.end.117

for.body.89:                                      ; preds = %for.cond.87
  %88 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %opt90 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %88, i32 0, i32 7
  %89 = load double, double* %opt90, align 8
  %cmp91 = fcmp oeq double %89, -1.000000e+00
  br i1 %cmp91, label %if.then.92, label %if.end.95

if.then.92:                                       ; preds = %for.body.89
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %91 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %opt93 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %91, i32 0, i32 7
  %92 = load double, double* %opt93, align 8
  %call94 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i32 0, i32 0), double %92)
  br label %if.end.95

if.end.95:                                        ; preds = %if.then.92, %for.body.89
  %93 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %extended96 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %93, i32 0, i32 9
  %94 = load i32, i32* %extended96, align 4
  %cmp97 = icmp sgt i32 %94, -1
  br i1 %cmp97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %if.end.95
  br label %for.end.117

if.end.99:                                        ; preds = %if.end.95
  %95 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %start1100 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %95, i32 0, i32 3
  %96 = load i32, i32* %start1100, align 4
  store i32 %96, i32* %pj, align 4
  %97 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %start2101 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %97, i32 0, i32 5
  %98 = load i32, i32* %start2101, align 4
  store i32 %98, i32* %pk, align 4
  %99 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %end1102 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %99, i32 0, i32 4
  %100 = load i32, i32* %end1102, align 4
  %101 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %start1103 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %101, i32 0, i32 3
  %102 = load i32, i32* %start1103, align 4
  %sub104 = sub nsw i32 %100, %102
  %add105 = add nsw i32 %sub104, 1
  store i32 %add105, i32* %len, align 4
  %103 = load i32*, i32** @extendlocalhom2.inj, align 8
  %104 = load i32, i32* %pk, align 4
  %idx.ext106 = sext i32 %104 to i64
  %add.ptr107 = getelementptr inbounds i32, i32* %103, i64 %idx.ext106
  store i32* %add.ptr107, i32** %ipt, align 8
  br label %while.cond.108

while.cond.108:                                   ; preds = %while.body.111, %if.end.99
  %105 = load i32, i32* %len, align 4
  %dec109 = add nsw i32 %105, -1
  store i32 %dec109, i32* %len, align 4
  %tobool110 = icmp ne i32 %105, 0
  br i1 %tobool110, label %while.body.111, label %while.end.114

while.body.111:                                   ; preds = %while.cond.108
  %106 = load i32, i32* %pj, align 4
  %inc112 = add nsw i32 %106, 1
  store i32 %inc112, i32* %pj, align 4
  %107 = load i32*, i32** %ipt, align 8
  %incdec.ptr113 = getelementptr inbounds i32, i32* %107, i32 1
  store i32* %incdec.ptr113, i32** %ipt, align 8
  store i32 %106, i32* %107, align 4
  br label %while.cond.108

while.end.114:                                    ; preds = %while.cond.108
  br label %for.inc.115

for.inc.115:                                      ; preds = %while.end.114
  %108 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %next116 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %108, i32 0, i32 1
  %109 = load %struct._LocalHom*, %struct._LocalHom** %next116, align 8
  store %struct._LocalHom* %109, %struct._LocalHom** %pt, align 8
  br label %for.cond.87

for.end.117:                                      ; preds = %if.then.98, %for.cond.87
  store i32 0, i32* %overlp, align 4
  %110 = load i32, i32* @nlenmax, align 4
  %add118 = add nsw i32 %110, 1
  store i32 %add118, i32* %plim, align 4
  store i32 0, i32* %pk, align 4
  br label %for.cond.119

for.cond.119:                                     ; preds = %for.inc.131, %for.end.117
  %111 = load i32, i32* %pk, align 4
  %112 = load i32, i32* %plim, align 4
  %cmp120 = icmp slt i32 %111, %112
  br i1 %cmp120, label %for.body.121, label %for.end.133

for.body.121:                                     ; preds = %for.cond.119
  %113 = load i32, i32* %pk, align 4
  %idxprom122 = sext i32 %113 to i64
  %114 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx123 = getelementptr inbounds i32, i32* %114, i64 %idxprom122
  %115 = load i32, i32* %arrayidx123, align 4
  %cmp124 = icmp ne i32 %115, -1
  br i1 %cmp124, label %land.lhs.true, label %if.end.130

land.lhs.true:                                    ; preds = %for.body.121
  %116 = load i32, i32* %pk, align 4
  %idxprom125 = sext i32 %116 to i64
  %117 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx126 = getelementptr inbounds i32, i32* %117, i64 %idxprom125
  %118 = load i32, i32* %arrayidx126, align 4
  %cmp127 = icmp ne i32 %118, -1
  br i1 %cmp127, label %if.then.128, label %if.end.130

if.then.128:                                      ; preds = %land.lhs.true
  %119 = load i32, i32* %overlp, align 4
  %inc129 = add nsw i32 %119, 1
  store i32 %inc129, i32* %overlp, align 4
  br label %if.end.130

if.end.130:                                       ; preds = %if.then.128, %land.lhs.true, %for.body.121
  br label %for.inc.131

for.inc.131:                                      ; preds = %if.end.130
  %120 = load i32, i32* %pk, align 4
  %inc132 = add nsw i32 %120, 1
  store i32 %inc132, i32* %pk, align 4
  br label %for.cond.119

for.end.133:                                      ; preds = %for.cond.119
  store i32 0, i32* %status, align 4
  %121 = load i32, i32* @nlenmax, align 4
  %add134 = add nsw i32 %121, 1
  store i32 %add134, i32* %plim, align 4
  store i32 0, i32* %pk, align 4
  br label %for.cond.135

for.cond.135:                                     ; preds = %for.inc.263, %for.end.133
  %122 = load i32, i32* %pk, align 4
  %123 = load i32, i32* %plim, align 4
  %cmp136 = icmp slt i32 %122, %123
  br i1 %cmp136, label %for.body.137, label %for.end.265

for.body.137:                                     ; preds = %for.cond.135
  %124 = load i32, i32* %status, align 4
  %tobool138 = icmp ne i32 %124, 0
  br i1 %tobool138, label %if.then.139, label %if.end.246

if.then.139:                                      ; preds = %for.body.137
  %125 = load i32, i32* %pk, align 4
  %idxprom140 = sext i32 %125 to i64
  %126 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx141 = getelementptr inbounds i32, i32* %126, i64 %idxprom140
  %127 = load i32, i32* %arrayidx141, align 4
  %cmp142 = icmp eq i32 %127, -1
  br i1 %cmp142, label %if.then.163, label %lor.lhs.false.143

lor.lhs.false.143:                                ; preds = %if.then.139
  %128 = load i32, i32* %pk, align 4
  %idxprom144 = sext i32 %128 to i64
  %129 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx145 = getelementptr inbounds i32, i32* %129, i64 %idxprom144
  %130 = load i32, i32* %arrayidx145, align 4
  %cmp146 = icmp eq i32 %130, -1
  br i1 %cmp146, label %if.then.163, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %lor.lhs.false.143
  %131 = load i32, i32* %pk, align 4
  %sub148 = sub nsw i32 %131, 1
  %idxprom149 = sext i32 %sub148 to i64
  %132 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx150 = getelementptr inbounds i32, i32* %132, i64 %idxprom149
  %133 = load i32, i32* %arrayidx150, align 4
  %134 = load i32, i32* %pk, align 4
  %idxprom151 = sext i32 %134 to i64
  %135 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx152 = getelementptr inbounds i32, i32* %135, i64 %idxprom151
  %136 = load i32, i32* %arrayidx152, align 4
  %sub153 = sub nsw i32 %136, 1
  %cmp154 = icmp ne i32 %133, %sub153
  br i1 %cmp154, label %if.then.163, label %lor.lhs.false.155

lor.lhs.false.155:                                ; preds = %lor.lhs.false.147
  %137 = load i32, i32* %pk, align 4
  %sub156 = sub nsw i32 %137, 1
  %idxprom157 = sext i32 %sub156 to i64
  %138 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx158 = getelementptr inbounds i32, i32* %138, i64 %idxprom157
  %139 = load i32, i32* %arrayidx158, align 4
  %140 = load i32, i32* %pk, align 4
  %idxprom159 = sext i32 %140 to i64
  %141 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx160 = getelementptr inbounds i32, i32* %141, i64 %idxprom159
  %142 = load i32, i32* %arrayidx160, align 4
  %sub161 = sub nsw i32 %142, 1
  %cmp162 = icmp ne i32 %139, %sub161
  br i1 %cmp162, label %if.then.163, label %if.end.245

if.then.163:                                      ; preds = %lor.lhs.false.155, %lor.lhs.false.147, %lor.lhs.false.143, %if.then.139
  store i32 0, i32* %status, align 4
  %143 = load i32, i32* %j, align 4
  %idxprom164 = sext i32 %143 to i64
  %144 = load i32, i32* %i, align 4
  %idxprom165 = sext i32 %144 to i64
  %145 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx166 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %145, i64 %idxprom165
  %146 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx166, align 8
  %arrayidx167 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %146, i64 %idxprom164
  %last = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx167, i32 0, i32 2
  %147 = load %struct._LocalHom*, %struct._LocalHom** %last, align 8
  store %struct._LocalHom* %147, %struct._LocalHom** %pt, align 8
  %148 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %149 = load i32, i32* %i, align 4
  %idxprom168 = sext i32 %149 to i64
  %150 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx169 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %150, i64 %idxprom168
  %151 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx169, align 8
  %152 = load i32, i32* %j, align 4
  %idx.ext170 = sext i32 %152 to i64
  %add.ptr171 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %151, i64 %idx.ext170
  %153 = load i32, i32* %sti, align 4
  %154 = load i32, i32* %stj, align 4
  %155 = load i32, i32* %pk, align 4
  %sub172 = sub nsw i32 %155, 1
  %idxprom173 = sext i32 %sub172 to i64
  %156 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx174 = getelementptr inbounds i32, i32* %156, i64 %idxprom173
  %157 = load i32, i32* %arrayidx174, align 4
  %158 = load i32, i32* %pk, align 4
  %sub175 = sub nsw i32 %158, 1
  %idxprom176 = sext i32 %sub175 to i64
  %159 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx177 = getelementptr inbounds i32, i32* %159, i64 %idxprom176
  %160 = load i32, i32* %arrayidx177, align 4
  %161 = load i32, i32* %k, align 4
  %idxprom178 = sext i32 %161 to i64
  %162 = load i32, i32* %i, align 4
  %idxprom179 = sext i32 %162 to i64
  %163 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx180 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %163, i64 %idxprom179
  %164 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx180, align 8
  %arrayidx181 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %164, i64 %idxprom178
  %opt182 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx181, i32 0, i32 7
  %165 = load double, double* %opt182, align 8
  %166 = load i32, i32* %k, align 4
  %idxprom183 = sext i32 %166 to i64
  %167 = load i32, i32* %j, align 4
  %idxprom184 = sext i32 %167 to i64
  %168 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx185 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %168, i64 %idxprom184
  %169 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx185, align 8
  %arrayidx186 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %169, i64 %idxprom183
  %opt187 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx186, i32 0, i32 7
  %170 = load double, double* %opt187, align 8
  %cmp188 = fcmp olt double %165, %170
  br i1 %cmp188, label %cond.true.189, label %cond.false.195

cond.true.189:                                    ; preds = %if.then.163
  %171 = load i32, i32* %k, align 4
  %idxprom190 = sext i32 %171 to i64
  %172 = load i32, i32* %i, align 4
  %idxprom191 = sext i32 %172 to i64
  %173 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx192 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %173, i64 %idxprom191
  %174 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx192, align 8
  %arrayidx193 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %174, i64 %idxprom190
  %opt194 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx193, i32 0, i32 7
  %175 = load double, double* %opt194, align 8
  br label %cond.end.201

cond.false.195:                                   ; preds = %if.then.163
  %176 = load i32, i32* %k, align 4
  %idxprom196 = sext i32 %176 to i64
  %177 = load i32, i32* %j, align 4
  %idxprom197 = sext i32 %177 to i64
  %178 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx198 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %178, i64 %idxprom197
  %179 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx198, align 8
  %arrayidx199 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %179, i64 %idxprom196
  %opt200 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx199, i32 0, i32 7
  %180 = load double, double* %opt200, align 8
  br label %cond.end.201

cond.end.201:                                     ; preds = %cond.false.195, %cond.true.189
  %cond202 = phi double [ %175, %cond.true.189 ], [ %180, %cond.false.195 ]
  %mul203 = fmul double %cond202, 1.000000e+00
  %181 = load i32, i32* %overlp, align 4
  %182 = load i32, i32* %k, align 4
  call void @addlocalhom2_e(%struct._LocalHom* %148, %struct._LocalHom* %add.ptr171, i32 %153, i32 %154, i32 %157, i32 %160, double %mul203, i32 %181, i32 %182)
  %183 = load i32, i32* %i, align 4
  %idxprom204 = sext i32 %183 to i64
  %184 = load i32, i32* %j, align 4
  %idxprom205 = sext i32 %184 to i64
  %185 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx206 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %185, i64 %idxprom205
  %186 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx206, align 8
  %arrayidx207 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %186, i64 %idxprom204
  %last208 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx207, i32 0, i32 2
  %187 = load %struct._LocalHom*, %struct._LocalHom** %last208, align 8
  store %struct._LocalHom* %187, %struct._LocalHom** %pt, align 8
  %188 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %189 = load i32, i32* %j, align 4
  %idxprom209 = sext i32 %189 to i64
  %190 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx210 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %190, i64 %idxprom209
  %191 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx210, align 8
  %192 = load i32, i32* %i, align 4
  %idx.ext211 = sext i32 %192 to i64
  %add.ptr212 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %191, i64 %idx.ext211
  %193 = load i32, i32* %stj, align 4
  %194 = load i32, i32* %sti, align 4
  %195 = load i32, i32* %pk, align 4
  %sub213 = sub nsw i32 %195, 1
  %idxprom214 = sext i32 %sub213 to i64
  %196 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx215 = getelementptr inbounds i32, i32* %196, i64 %idxprom214
  %197 = load i32, i32* %arrayidx215, align 4
  %198 = load i32, i32* %pk, align 4
  %sub216 = sub nsw i32 %198, 1
  %idxprom217 = sext i32 %sub216 to i64
  %199 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx218 = getelementptr inbounds i32, i32* %199, i64 %idxprom217
  %200 = load i32, i32* %arrayidx218, align 4
  %201 = load i32, i32* %k, align 4
  %idxprom219 = sext i32 %201 to i64
  %202 = load i32, i32* %i, align 4
  %idxprom220 = sext i32 %202 to i64
  %203 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx221 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %203, i64 %idxprom220
  %204 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx221, align 8
  %arrayidx222 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %204, i64 %idxprom219
  %opt223 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx222, i32 0, i32 7
  %205 = load double, double* %opt223, align 8
  %206 = load i32, i32* %k, align 4
  %idxprom224 = sext i32 %206 to i64
  %207 = load i32, i32* %j, align 4
  %idxprom225 = sext i32 %207 to i64
  %208 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx226 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %208, i64 %idxprom225
  %209 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx226, align 8
  %arrayidx227 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %209, i64 %idxprom224
  %opt228 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx227, i32 0, i32 7
  %210 = load double, double* %opt228, align 8
  %cmp229 = fcmp olt double %205, %210
  br i1 %cmp229, label %cond.true.230, label %cond.false.236

cond.true.230:                                    ; preds = %cond.end.201
  %211 = load i32, i32* %k, align 4
  %idxprom231 = sext i32 %211 to i64
  %212 = load i32, i32* %i, align 4
  %idxprom232 = sext i32 %212 to i64
  %213 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx233 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %213, i64 %idxprom232
  %214 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx233, align 8
  %arrayidx234 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %214, i64 %idxprom231
  %opt235 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx234, i32 0, i32 7
  %215 = load double, double* %opt235, align 8
  br label %cond.end.242

cond.false.236:                                   ; preds = %cond.end.201
  %216 = load i32, i32* %k, align 4
  %idxprom237 = sext i32 %216 to i64
  %217 = load i32, i32* %j, align 4
  %idxprom238 = sext i32 %217 to i64
  %218 = load %struct._LocalHom**, %struct._LocalHom*** %localhom.addr, align 8
  %arrayidx239 = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %218, i64 %idxprom238
  %219 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx239, align 8
  %arrayidx240 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %219, i64 %idxprom237
  %opt241 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %arrayidx240, i32 0, i32 7
  %220 = load double, double* %opt241, align 8
  br label %cond.end.242

cond.end.242:                                     ; preds = %cond.false.236, %cond.true.230
  %cond243 = phi double [ %215, %cond.true.230 ], [ %220, %cond.false.236 ]
  %mul244 = fmul double %cond243, 1.000000e+00
  %221 = load i32, i32* %overlp, align 4
  %222 = load i32, i32* %k, align 4
  call void @addlocalhom2_e(%struct._LocalHom* %188, %struct._LocalHom* %add.ptr212, i32 %193, i32 %194, i32 %197, i32 %200, double %mul244, i32 %221, i32 %222)
  br label %if.end.245

if.end.245:                                       ; preds = %cond.end.242, %lor.lhs.false.155
  br label %if.end.246

if.end.246:                                       ; preds = %if.end.245, %for.body.137
  %223 = load i32, i32* %status, align 4
  %tobool247 = icmp ne i32 %223, 0
  br i1 %tobool247, label %if.end.262, label %if.then.248

if.then.248:                                      ; preds = %if.end.246
  %224 = load i32, i32* %pk, align 4
  %idxprom249 = sext i32 %224 to i64
  %225 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx250 = getelementptr inbounds i32, i32* %225, i64 %idxprom249
  %226 = load i32, i32* %arrayidx250, align 4
  %cmp251 = icmp eq i32 %226, -1
  br i1 %cmp251, label %if.then.256, label %lor.lhs.false.252

lor.lhs.false.252:                                ; preds = %if.then.248
  %227 = load i32, i32* %pk, align 4
  %idxprom253 = sext i32 %227 to i64
  %228 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx254 = getelementptr inbounds i32, i32* %228, i64 %idxprom253
  %229 = load i32, i32* %arrayidx254, align 4
  %cmp255 = icmp eq i32 %229, -1
  br i1 %cmp255, label %if.then.256, label %if.end.257

if.then.256:                                      ; preds = %lor.lhs.false.252, %if.then.248
  br label %for.inc.263

if.end.257:                                       ; preds = %lor.lhs.false.252
  %230 = load i32, i32* %pk, align 4
  %idxprom258 = sext i32 %230 to i64
  %231 = load i32*, i32** @extendlocalhom2.ini, align 8
  %arrayidx259 = getelementptr inbounds i32, i32* %231, i64 %idxprom258
  %232 = load i32, i32* %arrayidx259, align 4
  store i32 %232, i32* %sti, align 4
  %233 = load i32, i32* %pk, align 4
  %idxprom260 = sext i32 %233 to i64
  %234 = load i32*, i32** @extendlocalhom2.inj, align 8
  %arrayidx261 = getelementptr inbounds i32, i32* %234, i64 %idxprom260
  %235 = load i32, i32* %arrayidx261, align 4
  store i32 %235, i32* %stj, align 4
  store i32 1, i32* %status, align 4
  br label %if.end.262

if.end.262:                                       ; preds = %if.end.257, %if.end.246
  br label %for.inc.263

for.inc.263:                                      ; preds = %if.end.262, %if.then.256
  %236 = load i32, i32* %pk, align 4
  %inc264 = add nsw i32 %236, 1
  store i32 %inc264, i32* %pk, align 4
  br label %for.cond.135

for.end.265:                                      ; preds = %for.cond.135
  br label %for.inc.266

for.inc.266:                                      ; preds = %for.end.265, %if.then.49, %if.then.13
  %237 = load i32, i32* %k, align 4
  %inc267 = add nsw i32 %237, 1
  store i32 %inc267, i32* %k, align 4
  br label %for.cond.8

for.end.268:                                      ; preds = %for.cond.8
  br label %for.inc.269

for.inc.269:                                      ; preds = %for.end.268
  %238 = load i32, i32* %j, align 4
  %inc270 = add nsw i32 %238, 1
  store i32 %inc270, i32* %j, align 4
  br label %for.cond.5

for.end.271:                                      ; preds = %for.cond.5
  br label %for.inc.272

for.inc.272:                                      ; preds = %for.end.271
  %239 = load i32, i32* %i, align 4
  %inc273 = add nsw i32 %239, 1
  store i32 %inc273, i32* %i, align 4
  br label %for.cond

for.end.274:                                      ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @addlocalhom2_e(%struct._LocalHom* %pt, %struct._LocalHom* %lh, i32 %sti, i32 %stj, i32 %eni, i32 %enj, double %opt, i32 %overlp, i32 %interm) #0 {
entry:
  %pt.addr = alloca %struct._LocalHom*, align 8
  %lh.addr = alloca %struct._LocalHom*, align 8
  %sti.addr = alloca i32, align 4
  %stj.addr = alloca i32, align 4
  %eni.addr = alloca i32, align 4
  %enj.addr = alloca i32, align 4
  %opt.addr = alloca double, align 8
  %overlp.addr = alloca i32, align 4
  %interm.addr = alloca i32, align 4
  store %struct._LocalHom* %pt, %struct._LocalHom** %pt.addr, align 8
  store %struct._LocalHom* %lh, %struct._LocalHom** %lh.addr, align 8
  store i32 %sti, i32* %sti.addr, align 4
  store i32 %stj, i32* %stj.addr, align 4
  store i32 %eni, i32* %eni.addr, align 4
  store i32 %enj, i32* %enj.addr, align 4
  store double %opt, double* %opt.addr, align 8
  store i32 %overlp, i32* %overlp.addr, align 4
  store i32 %interm, i32* %interm.addr, align 4
  %0 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %1 = load %struct._LocalHom*, %struct._LocalHom** %lh.addr, align 8
  %cmp = icmp ne %struct._LocalHom* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call noalias i8* @calloc(i64 1, i64 80) #8
  %2 = bitcast i8* %call to %struct._LocalHom*
  %3 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %next = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %3, i32 0, i32 1
  store %struct._LocalHom* %2, %struct._LocalHom** %next, align 8
  %4 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %next1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %4, i32 0, i32 1
  %5 = load %struct._LocalHom*, %struct._LocalHom** %next1, align 8
  store %struct._LocalHom* %5, %struct._LocalHom** %pt.addr, align 8
  %6 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %next2 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %6, i32 0, i32 1
  store %struct._LocalHom* null, %struct._LocalHom** %next2, align 8
  %7 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %8 = load %struct._LocalHom*, %struct._LocalHom** %lh.addr, align 8
  %last = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %8, i32 0, i32 2
  store %struct._LocalHom* %7, %struct._LocalHom** %last, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %10 = load %struct._LocalHom*, %struct._LocalHom** %lh.addr, align 8
  %last3 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %10, i32 0, i32 2
  store %struct._LocalHom* %9, %struct._LocalHom** %last3, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct._LocalHom*, %struct._LocalHom** %lh.addr, align 8
  %nokori = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %11, i32 0, i32 0
  %12 = load i32, i32* %nokori, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %nokori, align 4
  %13 = load i32, i32* %sti.addr, align 4
  %14 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %start1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %14, i32 0, i32 3
  store i32 %13, i32* %start1, align 4
  %15 = load i32, i32* %stj.addr, align 4
  %16 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %start2 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %16, i32 0, i32 5
  store i32 %15, i32* %start2, align 4
  %17 = load i32, i32* %eni.addr, align 4
  %18 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %end1 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %18, i32 0, i32 4
  store i32 %17, i32* %end1, align 4
  %19 = load i32, i32* %enj.addr, align 4
  %20 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %end2 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %20, i32 0, i32 6
  store i32 %19, i32* %end2, align 4
  %21 = load double, double* %opt.addr, align 8
  %22 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %opt4 = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %22, i32 0, i32 7
  store double %21, double* %opt4, align 8
  %23 = load i32, i32* %interm.addr, align 4
  %24 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %extended = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %24, i32 0, i32 9
  store i32 %23, i32* %extended, align 4
  %25 = load i32, i32* %overlp.addr, align 4
  %26 = load %struct._LocalHom*, %struct._LocalHom** %pt.addr, align 8
  %overlapaa = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %26, i32 0, i32 8
  store i32 %25, i32* %overlapaa, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @makelocal(i8* %s1, i8* %s2, i32 %thr) #0 {
entry:
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %thr.addr = alloca i32, align 4
  %start = alloca i32, align 4
  %maxstart = alloca i32, align 4
  %maxend = alloca i32, align 4
  %pt1 = alloca i8*, align 8
  %pt2 = alloca i8*, align 8
  %score = alloca double, align 8
  %maxscore = alloca double, align 8
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  store i32 %thr, i32* %thr.addr, align 4
  %0 = load i8*, i8** %s1.addr, align 8
  store i8* %0, i8** %pt1, align 8
  %1 = load i8*, i8** %s2.addr, align 8
  store i8* %1, i8** %pt2, align 8
  store i32 0, i32* %maxend, align 4
  store double 0.000000e+00, double* %maxscore, align 8
  store double 0.000000e+00, double* %score, align 8
  store i32 0, i32* %start, align 4
  store i32 0, i32* %maxstart, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.39, %while.end, %entry
  %2 = load i8*, i8** %pt1, align 8
  %3 = load i8, i8* %2, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end.40

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %pt1, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i8*, i8** %pt2, align 8
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %8 = load i32, i32* @penalty, align 4
  %conv5 = sitofp i32 %8 to double
  %9 = load double, double* %score, align 8
  %add = fadd double %9, %conv5
  store double %add, double* %score, align 8
  br label %while.cond.6

while.cond.6:                                     ; preds = %while.body.13, %if.then
  %10 = load i8*, i8** %pt1, align 8
  %11 = load i8, i8* %10, align 1
  %conv7 = sext i8 %11 to i32
  %cmp8 = icmp eq i32 %conv7, 45
  br i1 %cmp8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond.6
  %12 = load i8*, i8** %pt2, align 8
  %13 = load i8, i8* %12, align 1
  %conv10 = sext i8 %13 to i32
  %cmp11 = icmp eq i32 %conv10, 45
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond.6
  %14 = phi i1 [ true, %while.cond.6 ], [ %cmp11, %lor.rhs ]
  br i1 %14, label %while.body.13, label %while.end

while.body.13:                                    ; preds = %lor.end
  %15 = load i8*, i8** %pt1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %incdec.ptr, i8** %pt1, align 8
  %16 = load i8*, i8** %pt2, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr14, i8** %pt2, align 8
  br label %while.cond.6

while.end:                                        ; preds = %lor.end
  br label %while.cond

if.end:                                           ; preds = %lor.lhs.false
  %17 = load i8*, i8** %pt2, align 8
  %incdec.ptr15 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr15, i8** %pt2, align 8
  %18 = load i8, i8* %17, align 1
  %conv16 = sext i8 %18 to i32
  %idxprom = sext i32 %conv16 to i64
  %19 = load i8*, i8** %pt1, align 8
  %incdec.ptr17 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr17, i8** %pt1, align 8
  %20 = load i8, i8* %19, align 1
  %conv18 = sext i8 %20 to i32
  %idxprom19 = sext i32 %conv18 to i64
  %arrayidx = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom19
  %arrayidx20 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx, i32 0, i64 %idxprom
  %21 = load i32, i32* %arrayidx20, align 4
  %22 = load i32, i32* %thr.addr, align 4
  %sub = sub nsw i32 %21, %22
  %conv21 = sitofp i32 %sub to double
  %23 = load double, double* %score, align 8
  %add22 = fadd double %23, %conv21
  store double %add22, double* %score, align 8
  %24 = load double, double* %score, align 8
  %25 = load double, double* %maxscore, align 8
  %cmp23 = fcmp ogt double %24, %25
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end
  %26 = load double, double* %score, align 8
  store double %26, double* %maxscore, align 8
  %27 = load i32, i32* %start, align 4
  store i32 %27, i32* %maxstart, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.25, %if.end
  %28 = load double, double* %score, align 8
  %cmp27 = fcmp olt double %28, 0.000000e+00
  br i1 %cmp27, label %if.then.29, label %if.end.39

if.then.29:                                       ; preds = %if.end.26
  %29 = load i32, i32* %start, align 4
  %30 = load i32, i32* %maxstart, align 4
  %cmp30 = icmp eq i32 %29, %30
  br i1 %cmp30, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %if.then.29
  %31 = load i8*, i8** %pt1, align 8
  %32 = load i8*, i8** %s1.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %32 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv33 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv33, i32* %maxend, align 4
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %if.then.29
  store double 0.000000e+00, double* %score, align 8
  %33 = load i8*, i8** %pt1, align 8
  %34 = load i8*, i8** %s1.addr, align 8
  %sub.ptr.lhs.cast35 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast36 = ptrtoint i8* %34 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %conv38 = trunc i64 %sub.ptr.sub37 to i32
  store i32 %conv38, i32* %start, align 4
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.34, %if.end.26
  br label %while.cond

while.end.40:                                     ; preds = %while.cond
  %35 = load i32, i32* %start, align 4
  %36 = load i32, i32* %maxstart, align 4
  %cmp41 = icmp eq i32 %35, %36
  br i1 %cmp41, label %if.then.43, label %if.end.49

if.then.43:                                       ; preds = %while.end.40
  %37 = load i8*, i8** %pt1, align 8
  %38 = load i8*, i8** %s1.addr, align 8
  %sub.ptr.lhs.cast44 = ptrtoint i8* %37 to i64
  %sub.ptr.rhs.cast45 = ptrtoint i8* %38 to i64
  %sub.ptr.sub46 = sub i64 %sub.ptr.lhs.cast44, %sub.ptr.rhs.cast45
  %sub47 = sub nsw i64 %sub.ptr.sub46, 1
  %conv48 = trunc i64 %sub47 to i32
  store i32 %conv48, i32* %maxend, align 4
  br label %if.end.49

if.end.49:                                        ; preds = %if.then.43, %while.end.40
  %39 = load i32, i32* %maxend, align 4
  %add50 = add nsw i32 %39, 1
  %idxprom51 = sext i32 %add50 to i64
  %40 = load i8*, i8** %s1.addr, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %40, i64 %idxprom51
  store i8 0, i8* %arrayidx52, align 1
  %41 = load i32, i32* %maxend, align 4
  %add53 = add nsw i32 %41, 1
  %idxprom54 = sext i32 %add53 to i64
  %42 = load i8*, i8** %s2.addr, align 8
  %arrayidx55 = getelementptr inbounds i8, i8* %42, i64 %idxprom54
  store i8 0, i8* %arrayidx55, align 1
  %43 = load i32, i32* %maxstart, align 4
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define void @resetlocalhom(i32 %nseq, %struct._LocalHom** %lh) #0 {
entry:
  %nseq.addr = alloca i32, align 4
  %lh.addr = alloca %struct._LocalHom**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pt = alloca %struct._LocalHom*, align 8
  store i32 %nseq, i32* %nseq.addr, align 4
  store %struct._LocalHom** %lh, %struct._LocalHom*** %lh.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.8, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %nseq.addr, align 4
  %sub = sub nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %sub
  br i1 %cmp, label %for.body, label %for.end.10

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.6, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %nseq.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body.3, label %for.end.7

for.body.3:                                       ; preds = %for.cond.1
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct._LocalHom**, %struct._LocalHom*** %lh.addr, align 8
  %arrayidx = getelementptr inbounds %struct._LocalHom*, %struct._LocalHom** %6, i64 %idxprom
  %7 = load %struct._LocalHom*, %struct._LocalHom** %arrayidx, align 8
  %8 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %7, i64 %idx.ext
  store %struct._LocalHom* %add.ptr, %struct._LocalHom** %pt, align 8
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc, %for.body.3
  %9 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %tobool = icmp ne %struct._LocalHom* %9, null
  br i1 %tobool, label %for.body.5, label %for.end

for.body.5:                                       ; preds = %for.cond.4
  %10 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %opt = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %10, i32 0, i32 7
  store double 1.000000e+00, double* %opt, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body.5
  %11 = load %struct._LocalHom*, %struct._LocalHom** %pt, align 8
  %next = getelementptr inbounds %struct._LocalHom, %struct._LocalHom* %11, i32 0, i32 1
  %12 = load %struct._LocalHom*, %struct._LocalHom** %next, align 8
  store %struct._LocalHom* %12, %struct._LocalHom** %pt, align 8
  br label %for.cond.4

for.end:                                          ; preds = %for.cond.4
  br label %for.inc.6

for.inc.6:                                        ; preds = %for.end
  %13 = load i32, i32* %j, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.1

for.end.7:                                        ; preds = %for.cond.1
  br label %for.inc.8

for.inc.8:                                        ; preds = %for.end.7
  %14 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %14, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end.10:                                       ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @gapireru(i8* %res, i8* %ori, i8* %gt) #0 {
entry:
  %res.addr = alloca i8*, align 8
  %ori.addr = alloca i8*, align 8
  %gt.addr = alloca i8*, align 8
  %g = alloca i8, align 1
  store i8* %res, i8** %res.addr, align 8
  store i8* %ori, i8** %ori.addr, align 8
  store i8* %gt, i8** %gt.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %gt.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %gt.addr, align 8
  %1 = load i8, i8* %0, align 1
  store i8 %1, i8* %g, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8, i8* %g, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %3 = load i8*, i8** %res.addr, align 8
  %incdec.ptr2 = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr2, i8** %res.addr, align 8
  store i8 45, i8* %3, align 1
  br label %if.end

if.else:                                          ; preds = %while.body
  %4 = load i8*, i8** %ori.addr, align 8
  %incdec.ptr3 = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr3, i8** %ori.addr, align 8
  %5 = load i8, i8* %4, align 1
  %6 = load i8*, i8** %res.addr, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr4, i8** %res.addr, align 8
  store i8 %5, i8* %6, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %res.addr, align 8
  store i8 0, i8* %7, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getkyokaigap(i8* %g, i8** %s, i32 %pos, i32 %n) #0 {
entry:
  %g.addr = alloca i8*, align 8
  %s.addr = alloca i8**, align 8
  %pos.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i8* %g, i8** %g.addr, align 8
  store i8** %s, i8*** %s.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %pos.addr, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i8**, i8*** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8*, i8** %2, i32 1
  store i8** %incdec.ptr, i8*** %s.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %5 = load i8*, i8** %g.addr, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr1, i8** %g.addr, align 8
  store i8 %4, i8* %5, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @new_OpeningGapCount(float* %ogcp, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %sgappat) #0 {
entry:
  %ogcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %sgappat.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %ogcp, float** %ogcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %sgappat, i8** %sgappat.addr, align 8
  %0 = load float*, float** %ogcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  store i32 %1, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %9 to i64
  %10 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %10, i64 %idxprom1
  %11 = load i8*, i8** %arrayidx2, align 8
  store i8* %11, i8** %spt, align 8
  %12 = load float*, float** %ogcp.addr, align 8
  store float* %12, float** %fpt, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom3 = sext i32 %13 to i64
  %14 = load i8*, i8** %sgappat.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %14, i64 %idxprom3
  %15 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %15 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %gc, align 4
  %16 = load i32, i32* %len.addr, align 4
  store i32 %16, i32* %i, align 4
  br label %while.cond.8

while.cond.8:                                     ; preds = %if.end, %for.body
  %17 = load i32, i32* %i, align 4
  %dec9 = add nsw i32 %17, -1
  store i32 %dec9, i32* %i, align 4
  %tobool10 = icmp ne i32 %17, 0
  br i1 %tobool10, label %while.body.11, label %while.end.19

while.body.11:                                    ; preds = %while.cond.8
  %18 = load i32, i32* %gc, align 4
  store i32 %18, i32* %gb, align 4
  %19 = load i8*, i8** %spt, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr12, i8** %spt, align 8
  %20 = load i8, i8* %19, align 1
  %conv13 = sext i8 %20 to i32
  %cmp14 = icmp eq i32 %conv13, 45
  %conv15 = zext i1 %cmp14 to i32
  store i32 %conv15, i32* %gc, align 4
  %21 = load i32, i32* %gb, align 4
  %tobool16 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool16, true
  %lnot.ext = zext i1 %lnot to i32
  %22 = load i32, i32* %gc, align 4
  %mul = mul nsw i32 %lnot.ext, %22
  %tobool17 = icmp ne i32 %mul, 0
  br i1 %tobool17, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.11
  %23 = load float, float* %feff, align 4
  %24 = load float*, float** %fpt, align 8
  %25 = load float, float* %24, align 4
  %add = fadd float %25, %23
  store float %add, float* %24, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.11
  %26 = load float*, float** %fpt, align 8
  %incdec.ptr18 = getelementptr inbounds float, float* %26, i32 1
  store float* %incdec.ptr18, float** %fpt, align 8
  br label %while.cond.8

while.end.19:                                     ; preds = %while.cond.8
  br label %for.inc

for.inc:                                          ; preds = %while.end.19
  %27 = load i32, i32* %j, align 4
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @new_OpeningGapCount_zure(float* %ogcp, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %sgappat, i8* %egappat) #0 {
entry:
  %ogcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %sgappat.addr = alloca i8*, align 8
  %egappat.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %ogcp, float** %ogcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %sgappat, i8** %sgappat.addr, align 8
  store i8* %egappat, i8** %egappat.addr, align 8
  %0 = load float*, float** %ogcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 2
  store i32 %add, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %9 to i64
  %10 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %10, i64 %idxprom1
  %11 = load i8*, i8** %arrayidx2, align 8
  store i8* %11, i8** %spt, align 8
  %12 = load float*, float** %ogcp.addr, align 8
  store float* %12, float** %fpt, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom3 = sext i32 %13 to i64
  %14 = load i8*, i8** %sgappat.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %14, i64 %idxprom3
  %15 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %15 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %gc, align 4
  %16 = load i32, i32* %len.addr, align 4
  store i32 %16, i32* %i, align 4
  br label %while.cond.8

while.cond.8:                                     ; preds = %if.end, %for.body
  %17 = load i32, i32* %i, align 4
  %dec9 = add nsw i32 %17, -1
  store i32 %dec9, i32* %i, align 4
  %tobool10 = icmp ne i32 %17, 0
  br i1 %tobool10, label %while.body.11, label %while.end.20

while.body.11:                                    ; preds = %while.cond.8
  %18 = load i32, i32* %gc, align 4
  store i32 %18, i32* %gb, align 4
  %19 = load i8*, i8** %spt, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr12, i8** %spt, align 8
  %20 = load i8, i8* %19, align 1
  %conv13 = sext i8 %20 to i32
  %cmp14 = icmp eq i32 %conv13, 45
  %conv15 = zext i1 %cmp14 to i32
  store i32 %conv15, i32* %gc, align 4
  %21 = load i32, i32* %gb, align 4
  %tobool16 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool16, true
  %lnot.ext = zext i1 %lnot to i32
  %22 = load i32, i32* %gc, align 4
  %mul = mul nsw i32 %lnot.ext, %22
  %tobool17 = icmp ne i32 %mul, 0
  br i1 %tobool17, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.11
  %23 = load float, float* %feff, align 4
  %24 = load float*, float** %fpt, align 8
  %25 = load float, float* %24, align 4
  %add18 = fadd float %25, %23
  store float %add18, float* %24, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.11
  %26 = load float*, float** %fpt, align 8
  %incdec.ptr19 = getelementptr inbounds float, float* %26, i32 1
  store float* %incdec.ptr19, float** %fpt, align 8
  br label %while.cond.8

while.end.20:                                     ; preds = %while.cond.8
  %27 = load i32, i32* %gc, align 4
  store i32 %27, i32* %gb, align 4
  %28 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %28 to i64
  %29 = load i8*, i8** %egappat.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %29, i64 %idxprom21
  %30 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %30 to i32
  %cmp24 = icmp eq i32 %conv23, 45
  %conv25 = zext i1 %cmp24 to i32
  store i32 %conv25, i32* %gc, align 4
  %31 = load i32, i32* %gb, align 4
  %tobool26 = icmp ne i32 %31, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot.ext28 = zext i1 %lnot27 to i32
  %32 = load i32, i32* %gc, align 4
  %mul29 = mul nsw i32 %lnot.ext28, %32
  %tobool30 = icmp ne i32 %mul29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %while.end.20
  %33 = load float, float* %feff, align 4
  %34 = load float*, float** %fpt, align 8
  %35 = load float, float* %34, align 4
  %add32 = fadd float %35, %33
  store float %add32, float* %34, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %while.end.20
  br label %for.inc

for.inc:                                          ; preds = %if.end.33
  %36 = load i32, i32* %j, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @new_FinalGapCount_zure(float* %fgcp, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %sgappat, i8* %egappat) #0 {
entry:
  %fgcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %sgappat.addr = alloca i8*, align 8
  %egappat.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %fgcp, float** %fgcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %sgappat, i8** %sgappat.addr, align 8
  store i8* %egappat, i8** %egappat.addr, align 8
  %0 = load float*, float** %fgcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 2
  store i32 %add, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load float*, float** %fgcp.addr, align 8
  store float* %9, float** %fpt, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %11, i64 %idxprom1
  %12 = load i8*, i8** %arrayidx2, align 8
  store i8* %12, i8** %spt, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom3 = sext i32 %13 to i64
  %14 = load i8*, i8** %sgappat.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %14, i64 %idxprom3
  %15 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %15 to i32
  %cmp6 = icmp eq i32 %conv5, 45
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %gc, align 4
  %16 = load i32, i32* %len.addr, align 4
  store i32 %16, i32* %i, align 4
  br label %while.cond.8

while.cond.8:                                     ; preds = %if.end, %for.body
  %17 = load i32, i32* %i, align 4
  %dec9 = add nsw i32 %17, -1
  store i32 %dec9, i32* %i, align 4
  %tobool10 = icmp ne i32 %17, 0
  br i1 %tobool10, label %while.body.11, label %while.end.20

while.body.11:                                    ; preds = %while.cond.8
  %18 = load i32, i32* %gc, align 4
  store i32 %18, i32* %gb, align 4
  %19 = load i8*, i8** %spt, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr12, i8** %spt, align 8
  %20 = load i8, i8* %19, align 1
  %conv13 = sext i8 %20 to i32
  %cmp14 = icmp eq i32 %conv13, 45
  %conv15 = zext i1 %cmp14 to i32
  store i32 %conv15, i32* %gc, align 4
  %21 = load i32, i32* %gb, align 4
  %22 = load i32, i32* %gc, align 4
  %tobool16 = icmp ne i32 %22, 0
  %lnot = xor i1 %tobool16, true
  %lnot.ext = zext i1 %lnot to i32
  %mul = mul nsw i32 %21, %lnot.ext
  %tobool17 = icmp ne i32 %mul, 0
  br i1 %tobool17, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.11
  %23 = load float, float* %feff, align 4
  %24 = load float*, float** %fpt, align 8
  %25 = load float, float* %24, align 4
  %add18 = fadd float %25, %23
  store float %add18, float* %24, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.11
  %26 = load float*, float** %fpt, align 8
  %incdec.ptr19 = getelementptr inbounds float, float* %26, i32 1
  store float* %incdec.ptr19, float** %fpt, align 8
  br label %while.cond.8

while.end.20:                                     ; preds = %while.cond.8
  %27 = load i32, i32* %gc, align 4
  store i32 %27, i32* %gb, align 4
  %28 = load i32, i32* %j, align 4
  %idxprom21 = sext i32 %28 to i64
  %29 = load i8*, i8** %egappat.addr, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %29, i64 %idxprom21
  %30 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %30 to i32
  %cmp24 = icmp eq i32 %conv23, 45
  %conv25 = zext i1 %cmp24 to i32
  store i32 %conv25, i32* %gc, align 4
  %31 = load i32, i32* %gb, align 4
  %32 = load i32, i32* %gc, align 4
  %tobool26 = icmp ne i32 %32, 0
  %lnot27 = xor i1 %tobool26, true
  %lnot.ext28 = zext i1 %lnot27 to i32
  %mul29 = mul nsw i32 %31, %lnot.ext28
  %tobool30 = icmp ne i32 %mul29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %while.end.20
  %33 = load float, float* %feff, align 4
  %34 = load float*, float** %fpt, align 8
  %35 = load float, float* %34, align 4
  %add32 = fadd float %35, %33
  store float %add32, float* %34, align 4
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.31, %while.end.20
  br label %for.inc

for.inc:                                          ; preds = %if.end.33
  %36 = load i32, i32* %j, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @new_FinalGapCount(float* %fgcp, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %egappat) #0 {
entry:
  %fgcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %egappat.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %fgcp, float** %fgcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %egappat, i8** %egappat.addr, align 8
  %0 = load float*, float** %fgcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  store i32 %1, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load float*, float** %fgcp.addr, align 8
  store float* %9, float** %fpt, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %11, i64 %idxprom1
  %12 = load i8*, i8** %arrayidx2, align 8
  store i8* %12, i8** %spt, align 8
  %13 = load i8*, i8** %spt, align 8
  %14 = load i8, i8* %13, align 1
  %conv3 = sext i8 %14 to i32
  %cmp4 = icmp eq i32 %conv3, 45
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %gc, align 4
  %15 = load i32, i32* %len.addr, align 4
  store i32 %15, i32* %i, align 4
  br label %while.cond.6

while.cond.6:                                     ; preds = %if.end, %for.body
  %16 = load i32, i32* %i, align 4
  %dec7 = add nsw i32 %16, -1
  store i32 %dec7, i32* %i, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %while.body.9, label %while.end.17

while.body.9:                                     ; preds = %while.cond.6
  %17 = load i32, i32* %gc, align 4
  store i32 %17, i32* %gb, align 4
  %18 = load i8*, i8** %spt, align 8
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr10, i8** %spt, align 8
  %19 = load i8, i8* %incdec.ptr10, align 1
  %conv11 = sext i8 %19 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %gc, align 4
  %20 = load i32, i32* %gb, align 4
  %21 = load i32, i32* %gc, align 4
  %tobool14 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool14, true
  %lnot.ext = zext i1 %lnot to i32
  %mul = mul nsw i32 %20, %lnot.ext
  %tobool15 = icmp ne i32 %mul, 0
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.9
  %22 = load float, float* %feff, align 4
  %23 = load float*, float** %fpt, align 8
  %24 = load float, float* %23, align 4
  %add = fadd float %24, %22
  store float %add, float* %23, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.9
  %25 = load float*, float** %fpt, align 8
  %incdec.ptr16 = getelementptr inbounds float, float* %25, i32 1
  store float* %incdec.ptr16, float** %fpt, align 8
  br label %while.cond.6

while.end.17:                                     ; preds = %while.cond.6
  %26 = load i32, i32* %gc, align 4
  store i32 %26, i32* %gb, align 4
  %27 = load i32, i32* %j, align 4
  %idxprom18 = sext i32 %27 to i64
  %28 = load i8*, i8** %egappat.addr, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %28, i64 %idxprom18
  %29 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %29 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  %conv22 = zext i1 %cmp21 to i32
  store i32 %conv22, i32* %gc, align 4
  %30 = load i32, i32* %gb, align 4
  %31 = load i32, i32* %gc, align 4
  %tobool23 = icmp ne i32 %31, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %mul26 = mul nsw i32 %30, %lnot.ext25
  %tobool27 = icmp ne i32 %mul26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %while.end.17
  %32 = load float, float* %feff, align 4
  %33 = load float*, float** %fpt, align 8
  %34 = load float, float* %33, align 4
  %add29 = fadd float %34, %32
  store float %add29, float* %33, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.28, %while.end.17
  br label %for.inc

for.inc:                                          ; preds = %if.end.30
  %35 = load i32, i32* %j, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @st_OpeningGapCount(float* %ogcp, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %ogcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %ogcp, float** %ogcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load float*, float** %ogcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  store i32 %1, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %9 to i64
  %10 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %10, i64 %idxprom1
  %11 = load i8*, i8** %arrayidx2, align 8
  store i8* %11, i8** %spt, align 8
  %12 = load float*, float** %ogcp.addr, align 8
  store float* %12, float** %fpt, align 8
  store i32 0, i32* %gc, align 4
  %13 = load i32, i32* %len.addr, align 4
  store i32 %13, i32* %i, align 4
  br label %while.cond.3

while.cond.3:                                     ; preds = %if.end, %for.body
  %14 = load i32, i32* %i, align 4
  %dec4 = add nsw i32 %14, -1
  store i32 %dec4, i32* %i, align 4
  %tobool5 = icmp ne i32 %14, 0
  br i1 %tobool5, label %while.body.6, label %while.end.14

while.body.6:                                     ; preds = %while.cond.3
  %15 = load i32, i32* %gc, align 4
  store i32 %15, i32* %gb, align 4
  %16 = load i8*, i8** %spt, align 8
  %incdec.ptr7 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr7, i8** %spt, align 8
  %17 = load i8, i8* %16, align 1
  %conv8 = sext i8 %17 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %gc, align 4
  %18 = load i32, i32* %gb, align 4
  %tobool11 = icmp ne i32 %18, 0
  %lnot = xor i1 %tobool11, true
  %lnot.ext = zext i1 %lnot to i32
  %19 = load i32, i32* %gc, align 4
  %mul = mul nsw i32 %lnot.ext, %19
  %tobool12 = icmp ne i32 %mul, 0
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.6
  %20 = load float, float* %feff, align 4
  %21 = load float*, float** %fpt, align 8
  %22 = load float, float* %21, align 4
  %add = fadd float %22, %20
  store float %add, float* %21, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.6
  %23 = load float*, float** %fpt, align 8
  %incdec.ptr13 = getelementptr inbounds float, float* %23, i32 1
  store float* %incdec.ptr13, float** %fpt, align 8
  br label %while.cond.3

while.end.14:                                     ; preds = %while.cond.3
  br label %for.inc

for.inc:                                          ; preds = %while.end.14
  %24 = load i32, i32* %j, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i32, i32* %len.addr, align 4
  %idxprom15 = sext i32 %25 to i64
  %26 = load float*, float** %ogcp.addr, align 8
  %arrayidx16 = getelementptr inbounds float, float* %26, i64 %idxprom15
  store float 0.000000e+00, float* %arrayidx16, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @st_FinalGapCount_zure(float* %fgcp, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %fgcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %fgcp, float** %fgcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load float*, float** %fgcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load float*, float** %fgcp.addr, align 8
  %add.ptr = getelementptr inbounds float, float* %9, i64 1
  store float* %add.ptr, float** %fpt, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %11, i64 %idxprom1
  %12 = load i8*, i8** %arrayidx2, align 8
  store i8* %12, i8** %spt, align 8
  %13 = load i8*, i8** %spt, align 8
  %14 = load i8, i8* %13, align 1
  %conv3 = sext i8 %14 to i32
  %cmp4 = icmp eq i32 %conv3, 45
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %gc, align 4
  %15 = load i32, i32* %len.addr, align 4
  store i32 %15, i32* %i, align 4
  br label %while.cond.6

while.cond.6:                                     ; preds = %if.end, %for.body
  %16 = load i32, i32* %i, align 4
  %dec7 = add nsw i32 %16, -1
  store i32 %dec7, i32* %i, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %while.body.9, label %while.end.18

while.body.9:                                     ; preds = %while.cond.6
  %17 = load i32, i32* %gc, align 4
  store i32 %17, i32* %gb, align 4
  %18 = load i8*, i8** %spt, align 8
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr10, i8** %spt, align 8
  %19 = load i8, i8* %incdec.ptr10, align 1
  %conv11 = sext i8 %19 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %gc, align 4
  %20 = load i32, i32* %gb, align 4
  %21 = load i32, i32* %gc, align 4
  %tobool14 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool14, true
  %lnot.ext = zext i1 %lnot to i32
  %mul = mul nsw i32 %20, %lnot.ext
  %tobool15 = icmp ne i32 %mul, 0
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.9
  %22 = load float, float* %feff, align 4
  %23 = load float*, float** %fpt, align 8
  %24 = load float, float* %23, align 4
  %add16 = fadd float %24, %22
  store float %add16, float* %23, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.9
  %25 = load float*, float** %fpt, align 8
  %incdec.ptr17 = getelementptr inbounds float, float* %25, i32 1
  store float* %incdec.ptr17, float** %fpt, align 8
  br label %while.cond.6

while.end.18:                                     ; preds = %while.cond.6
  %26 = load i32, i32* %gc, align 4
  store i32 %26, i32* %gb, align 4
  store i32 0, i32* %gc, align 4
  %27 = load i32, i32* %gb, align 4
  %28 = load i32, i32* %gc, align 4
  %tobool19 = icmp ne i32 %28, 0
  %lnot20 = xor i1 %tobool19, true
  %lnot.ext21 = zext i1 %lnot20 to i32
  %mul22 = mul nsw i32 %27, %lnot.ext21
  %tobool23 = icmp ne i32 %mul22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %while.end.18
  %29 = load float, float* %feff, align 4
  %30 = load float*, float** %fpt, align 8
  %31 = load float, float* %30, align 4
  %add25 = fadd float %31, %29
  store float %add25, float* %30, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.24, %while.end.18
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %32 = load i32, i32* %j, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @st_FinalGapCount(float* %fgcp, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %fgcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %fgcp, float** %fgcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load float*, float** %fgcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  store i32 %1, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load float*, float** %fgcp.addr, align 8
  store float* %9, float** %fpt, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %11, i64 %idxprom1
  %12 = load i8*, i8** %arrayidx2, align 8
  store i8* %12, i8** %spt, align 8
  %13 = load i8*, i8** %spt, align 8
  %14 = load i8, i8* %13, align 1
  %conv3 = sext i8 %14 to i32
  %cmp4 = icmp eq i32 %conv3, 45
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %gc, align 4
  %15 = load i32, i32* %len.addr, align 4
  store i32 %15, i32* %i, align 4
  br label %while.cond.6

while.cond.6:                                     ; preds = %if.end, %for.body
  %16 = load i32, i32* %i, align 4
  %dec7 = add nsw i32 %16, -1
  store i32 %dec7, i32* %i, align 4
  %tobool8 = icmp ne i32 %16, 0
  br i1 %tobool8, label %while.body.9, label %while.end.17

while.body.9:                                     ; preds = %while.cond.6
  %17 = load i32, i32* %gc, align 4
  store i32 %17, i32* %gb, align 4
  %18 = load i8*, i8** %spt, align 8
  %incdec.ptr10 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr10, i8** %spt, align 8
  %19 = load i8, i8* %incdec.ptr10, align 1
  %conv11 = sext i8 %19 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %gc, align 4
  %20 = load i32, i32* %gb, align 4
  %21 = load i32, i32* %gc, align 4
  %tobool14 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool14, true
  %lnot.ext = zext i1 %lnot to i32
  %mul = mul nsw i32 %20, %lnot.ext
  %tobool15 = icmp ne i32 %mul, 0
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.9
  %22 = load float, float* %feff, align 4
  %23 = load float*, float** %fpt, align 8
  %24 = load float, float* %23, align 4
  %add = fadd float %24, %22
  store float %add, float* %23, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.9
  %25 = load float*, float** %fpt, align 8
  %incdec.ptr16 = getelementptr inbounds float, float* %25, i32 1
  store float* %incdec.ptr16, float** %fpt, align 8
  br label %while.cond.6

while.end.17:                                     ; preds = %while.cond.6
  %26 = load i32, i32* %gc, align 4
  store i32 %26, i32* %gb, align 4
  store i32 0, i32* %gc, align 4
  %27 = load i32, i32* %gb, align 4
  %28 = load i32, i32* %gc, align 4
  %tobool18 = icmp ne i32 %28, 0
  %lnot19 = xor i1 %tobool18, true
  %lnot.ext20 = zext i1 %lnot19 to i32
  %mul21 = mul nsw i32 %27, %lnot.ext20
  %tobool22 = icmp ne i32 %mul21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %while.end.17
  %29 = load float, float* %feff, align 4
  %30 = load float*, float** %fpt, align 8
  %31 = load float, float* %30, align 4
  %add24 = fadd float %31, %29
  store float %add24, float* %30, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %while.end.17
  br label %for.inc

for.inc:                                          ; preds = %if.end.25
  %32 = load i32, i32* %j, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define void @getGapPattern(float* %fgcp, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %xxx) #0 {
entry:
  %fgcp.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %xxx.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gc = alloca i32, align 4
  %gb = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca float*, align 8
  %spt = alloca i8*, align 8
  store float* %fgcp, float** %fgcp.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %xxx, i8** %xxx.addr, align 8
  %0 = load float*, float** %fgcp.addr, align 8
  store float* %0, float** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load float*, float** %fpt, align 8
  %incdec.ptr = getelementptr inbounds float, float* %3, i32 1
  store float* %incdec.ptr, float** %fpt, align 8
  store float 0.000000e+00, float* %3, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %4 = load i32, i32* %j, align 4
  %5 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %j, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %7, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %8 to float
  store float %conv, float* %feff, align 4
  %9 = load float*, float** %fgcp.addr, align 8
  store float* %9, float** %fpt, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom1 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx2 = getelementptr inbounds i8*, i8** %11, i64 %idxprom1
  %12 = load i8*, i8** %arrayidx2, align 8
  store i8* %12, i8** %spt, align 8
  %13 = load i8*, i8** %spt, align 8
  %14 = load i8, i8* %13, align 1
  %conv3 = sext i8 %14 to i32
  %cmp4 = icmp eq i32 %conv3, 45
  %conv5 = zext i1 %cmp4 to i32
  store i32 %conv5, i32* %gc, align 4
  %15 = load i32, i32* %len.addr, align 4
  %add6 = add nsw i32 %15, 1
  store i32 %add6, i32* %i, align 4
  br label %while.cond.7

while.cond.7:                                     ; preds = %if.end, %for.body
  %16 = load i32, i32* %i, align 4
  %dec8 = add nsw i32 %16, -1
  store i32 %dec8, i32* %i, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %while.body.10, label %while.end.19

while.body.10:                                    ; preds = %while.cond.7
  %17 = load i32, i32* %gc, align 4
  store i32 %17, i32* %gb, align 4
  %18 = load i8*, i8** %spt, align 8
  %incdec.ptr11 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr11, i8** %spt, align 8
  %19 = load i8, i8* %incdec.ptr11, align 1
  %conv12 = sext i8 %19 to i32
  %cmp13 = icmp eq i32 %conv12, 45
  %conv14 = zext i1 %cmp13 to i32
  store i32 %conv14, i32* %gc, align 4
  %20 = load i32, i32* %gb, align 4
  %21 = load i32, i32* %gc, align 4
  %tobool15 = icmp ne i32 %21, 0
  %lnot = xor i1 %tobool15, true
  %lnot.ext = zext i1 %lnot to i32
  %mul = mul nsw i32 %20, %lnot.ext
  %tobool16 = icmp ne i32 %mul, 0
  br i1 %tobool16, label %if.then, label %if.end

if.then:                                          ; preds = %while.body.10
  %22 = load float, float* %feff, align 4
  %23 = load float*, float** %fpt, align 8
  %24 = load float, float* %23, align 4
  %add17 = fadd float %24, %22
  store float %add17, float* %23, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body.10
  %25 = load float*, float** %fpt, align 8
  %incdec.ptr18 = getelementptr inbounds float, float* %25, i32 1
  store float* %incdec.ptr18, float** %fpt, align 8
  br label %while.cond.7

while.end.19:                                     ; preds = %while.cond.7
  br label %for.inc

for.inc:                                          ; preds = %while.end.19
  %26 = load i32, i32* %j, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.27, %for.end
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %len.addr, align 4
  %cmp21 = icmp slt i32 %27, %28
  br i1 %cmp21, label %for.body.23, label %for.end.29

for.body.23:                                      ; preds = %for.cond.20
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %30 = load i32, i32* %j, align 4
  %31 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %31 to i64
  %32 = load float*, float** %fgcp.addr, align 8
  %arrayidx25 = getelementptr inbounds float, float* %32, i64 %idxprom24
  %33 = load float, float* %arrayidx25, align 4
  %conv26 = fpext float %33 to double
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.33, i32 0, i32 0), i32 %30, double %conv26)
  br label %for.inc.27

for.inc.27:                                       ; preds = %for.body.23
  %34 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %34, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond.20

for.end.29:                                       ; preds = %for.cond.20
  ret void
}

; Function Attrs: nounwind uwtable
define void @getdigapfreq_st(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.30, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.32

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  store i32 1, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.27, %for.body.3
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp7 = icmp slt i32 %10, %11
  br i1 %cmp7, label %for.body.9, label %for.end.29

for.body.9:                                       ; preds = %for.cond.6
  %12 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %13 to i64
  %14 = load i8**, i8*** %seq.addr, align 8
  %arrayidx12 = getelementptr inbounds i8*, i8** %14, i64 %idxprom11
  %15 = load i8*, i8** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 %idxprom10
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 45
  br i1 %cmp15, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.9
  %17 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %17, 1
  %idxprom17 = sext i32 %sub to i64
  %18 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %18 to i64
  %19 = load i8**, i8*** %seq.addr, align 8
  %arrayidx19 = getelementptr inbounds i8*, i8** %19, i64 %idxprom18
  %20 = load i8*, i8** %arrayidx19, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %20, i64 %idxprom17
  %21 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %21 to i32
  %cmp22 = icmp eq i32 %conv21, 45
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %22 = load float, float* %feff, align 4
  %23 = load i32, i32* %j, align 4
  %idxprom24 = sext i32 %23 to i64
  %24 = load float*, float** %freq.addr, align 8
  %arrayidx25 = getelementptr inbounds float, float* %24, i64 %idxprom24
  %25 = load float, float* %arrayidx25, align 4
  %add26 = fadd float %25, %22
  store float %add26, float* %arrayidx25, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.9
  br label %for.inc.27

for.inc.27:                                       ; preds = %if.end
  %26 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %26, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond.6

for.end.29:                                       ; preds = %for.cond.6
  br label %for.inc.30

for.inc.30:                                       ; preds = %for.end.29
  %27 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %27, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond.1

for.end.32:                                       ; preds = %for.cond.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getdiaminofreq_x(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 2
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.53, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.55

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i64 %idxprom6
  %12 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %13 to i32
  %cmp10 = icmp ne i32 %conv9, 45
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.3
  %14 = load float, float* %feff, align 4
  %15 = load float*, float** %freq.addr, align 8
  %arrayidx12 = getelementptr inbounds float, float* %15, i64 0
  %16 = load float, float* %arrayidx12, align 4
  %add13 = fadd float %16, %14
  store float %add13, float* %arrayidx12, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.3
  store i32 1, i32* %j, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.37, %if.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len.addr, align 4
  %cmp15 = icmp slt i32 %17, %18
  br i1 %cmp15, label %for.body.17, label %for.end.39

for.body.17:                                      ; preds = %for.cond.14
  %19 = load i32, i32* %j, align 4
  %idxprom18 = sext i32 %19 to i64
  %20 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %20 to i64
  %21 = load i8**, i8*** %seq.addr, align 8
  %arrayidx20 = getelementptr inbounds i8*, i8** %21, i64 %idxprom19
  %22 = load i8*, i8** %arrayidx20, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %22, i64 %idxprom18
  %23 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %23 to i32
  %cmp23 = icmp ne i32 %conv22, 45
  br i1 %cmp23, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %for.body.17
  %24 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %24, 1
  %idxprom25 = sext i32 %sub to i64
  %25 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %25 to i64
  %26 = load i8**, i8*** %seq.addr, align 8
  %arrayidx27 = getelementptr inbounds i8*, i8** %26, i64 %idxprom26
  %27 = load i8*, i8** %arrayidx27, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %27, i64 %idxprom25
  %28 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %28 to i32
  %cmp30 = icmp ne i32 %conv29, 45
  br i1 %cmp30, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %land.lhs.true
  %29 = load float, float* %feff, align 4
  %30 = load i32, i32* %j, align 4
  %idxprom33 = sext i32 %30 to i64
  %31 = load float*, float** %freq.addr, align 8
  %arrayidx34 = getelementptr inbounds float, float* %31, i64 %idxprom33
  %32 = load float, float* %arrayidx34, align 4
  %add35 = fadd float %32, %29
  store float %add35, float* %arrayidx34, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.32, %land.lhs.true, %for.body.17
  br label %for.inc.37

for.inc.37:                                       ; preds = %if.end.36
  %33 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %33, 1
  store i32 %inc38, i32* %j, align 4
  br label %for.cond.14

for.end.39:                                       ; preds = %for.cond.14
  %34 = load i32, i32* %len.addr, align 4
  %sub40 = sub nsw i32 %34, 1
  %idxprom41 = sext i32 %sub40 to i64
  %35 = load i32, i32* %i, align 4
  %idxprom42 = sext i32 %35 to i64
  %36 = load i8**, i8*** %seq.addr, align 8
  %arrayidx43 = getelementptr inbounds i8*, i8** %36, i64 %idxprom42
  %37 = load i8*, i8** %arrayidx43, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %37, i64 %idxprom41
  %38 = load i8, i8* %arrayidx44, align 1
  %conv45 = sext i8 %38 to i32
  %cmp46 = icmp ne i32 %conv45, 45
  br i1 %cmp46, label %if.then.48, label %if.end.52

if.then.48:                                       ; preds = %for.end.39
  %39 = load float, float* %feff, align 4
  %40 = load i32, i32* %len.addr, align 4
  %idxprom49 = sext i32 %40 to i64
  %41 = load float*, float** %freq.addr, align 8
  %arrayidx50 = getelementptr inbounds float, float* %41, i64 %idxprom49
  %42 = load float, float* %arrayidx50, align 4
  %add51 = fadd float %42, %39
  store float %add51, float* %arrayidx50, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.48, %for.end.39
  br label %for.inc.53

for.inc.53:                                       ; preds = %if.end.52
  %43 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %43, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond.1

for.end.55:                                       ; preds = %for.cond.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getdiaminofreq_st(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.43, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.45

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i64 %idxprom6
  %12 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %13 to i32
  %cmp10 = icmp ne i32 %conv9, 45
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.3
  %14 = load float, float* %feff, align 4
  %15 = load float*, float** %freq.addr, align 8
  %arrayidx12 = getelementptr inbounds float, float* %15, i64 0
  %16 = load float, float* %arrayidx12, align 4
  %add13 = fadd float %16, %14
  store float %add13, float* %arrayidx12, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.3
  store i32 1, i32* %j, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.37, %if.end
  %17 = load i32, i32* %j, align 4
  %18 = load i32, i32* %len.addr, align 4
  %cmp15 = icmp slt i32 %17, %18
  br i1 %cmp15, label %for.body.17, label %for.end.39

for.body.17:                                      ; preds = %for.cond.14
  %19 = load i32, i32* %j, align 4
  %idxprom18 = sext i32 %19 to i64
  %20 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %20 to i64
  %21 = load i8**, i8*** %seq.addr, align 8
  %arrayidx20 = getelementptr inbounds i8*, i8** %21, i64 %idxprom19
  %22 = load i8*, i8** %arrayidx20, align 8
  %arrayidx21 = getelementptr inbounds i8, i8* %22, i64 %idxprom18
  %23 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %23 to i32
  %cmp23 = icmp ne i32 %conv22, 45
  br i1 %cmp23, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %for.body.17
  %24 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %24, 1
  %idxprom25 = sext i32 %sub to i64
  %25 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %25 to i64
  %26 = load i8**, i8*** %seq.addr, align 8
  %arrayidx27 = getelementptr inbounds i8*, i8** %26, i64 %idxprom26
  %27 = load i8*, i8** %arrayidx27, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %27, i64 %idxprom25
  %28 = load i8, i8* %arrayidx28, align 1
  %conv29 = sext i8 %28 to i32
  %cmp30 = icmp ne i32 %conv29, 45
  br i1 %cmp30, label %if.then.32, label %if.end.36

if.then.32:                                       ; preds = %land.lhs.true
  %29 = load float, float* %feff, align 4
  %30 = load i32, i32* %j, align 4
  %idxprom33 = sext i32 %30 to i64
  %31 = load float*, float** %freq.addr, align 8
  %arrayidx34 = getelementptr inbounds float, float* %31, i64 %idxprom33
  %32 = load float, float* %arrayidx34, align 4
  %add35 = fadd float %32, %29
  store float %add35, float* %arrayidx34, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.32, %land.lhs.true, %for.body.17
  br label %for.inc.37

for.inc.37:                                       ; preds = %if.end.36
  %33 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %33, 1
  store i32 %inc38, i32* %j, align 4
  br label %for.cond.14

for.end.39:                                       ; preds = %for.cond.14
  %34 = load float, float* %feff, align 4
  %35 = load i32, i32* %len.addr, align 4
  %idxprom40 = sext i32 %35 to i64
  %36 = load float*, float** %freq.addr, align 8
  %arrayidx41 = getelementptr inbounds float, float* %36, i64 %idxprom40
  %37 = load float, float* %arrayidx41, align 4
  %add42 = fadd float %37, %34
  store float %add42, float* %arrayidx41, align 4
  br label %for.inc.43

for.inc.43:                                       ; preds = %for.end.39
  %38 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %38, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond.1

for.end.45:                                       ; preds = %for.cond.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getdigapfreq_part(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %sgappat, i8* %egappat) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %sgappat.addr = alloca i8*, align 8
  %egappat.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %sgappat, i8** %sgappat.addr, align 8
  store i8* %egappat, i8** %egappat.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 2
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.65, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.67

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i64 %idxprom6
  %12 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %13 to i32
  %cmp10 = icmp eq i32 %conv9, 45
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.3
  %14 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %14 to i64
  %15 = load i8*, i8** %sgappat.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 %idxprom12
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 45
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %17 = load float, float* %feff, align 4
  %18 = load float*, float** %freq.addr, align 8
  %arrayidx17 = getelementptr inbounds float, float* %18, i64 0
  %19 = load float, float* %arrayidx17, align 4
  %add18 = fadd float %19, %17
  store float %add18, float* %arrayidx17, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.3
  store i32 1, i32* %j, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.43, %if.end
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %len.addr, align 4
  %cmp20 = icmp slt i32 %20, %21
  br i1 %cmp20, label %for.body.22, label %for.end.45

for.body.22:                                      ; preds = %for.cond.19
  %22 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %22 to i64
  %23 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %23 to i64
  %24 = load i8**, i8*** %seq.addr, align 8
  %arrayidx25 = getelementptr inbounds i8*, i8** %24, i64 %idxprom24
  %25 = load i8*, i8** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %25, i64 %idxprom23
  %26 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %26 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  br i1 %cmp28, label %land.lhs.true.30, label %if.end.42

land.lhs.true.30:                                 ; preds = %for.body.22
  %27 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %27, 1
  %idxprom31 = sext i32 %sub to i64
  %28 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %28 to i64
  %29 = load i8**, i8*** %seq.addr, align 8
  %arrayidx33 = getelementptr inbounds i8*, i8** %29, i64 %idxprom32
  %30 = load i8*, i8** %arrayidx33, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %30, i64 %idxprom31
  %31 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %31 to i32
  %cmp36 = icmp eq i32 %conv35, 45
  br i1 %cmp36, label %if.then.38, label %if.end.42

if.then.38:                                       ; preds = %land.lhs.true.30
  %32 = load float, float* %feff, align 4
  %33 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %33 to i64
  %34 = load float*, float** %freq.addr, align 8
  %arrayidx40 = getelementptr inbounds float, float* %34, i64 %idxprom39
  %35 = load float, float* %arrayidx40, align 4
  %add41 = fadd float %35, %32
  store float %add41, float* %arrayidx40, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.38, %land.lhs.true.30, %for.body.22
  br label %for.inc.43

for.inc.43:                                       ; preds = %if.end.42
  %36 = load i32, i32* %j, align 4
  %inc44 = add nsw i32 %36, 1
  store i32 %inc44, i32* %j, align 4
  br label %for.cond.19

for.end.45:                                       ; preds = %for.cond.19
  %37 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %37 to i64
  %38 = load i8*, i8** %egappat.addr, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %38, i64 %idxprom46
  %39 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %39 to i32
  %cmp49 = icmp eq i32 %conv48, 45
  br i1 %cmp49, label %land.lhs.true.51, label %if.end.64

land.lhs.true.51:                                 ; preds = %for.end.45
  %40 = load i32, i32* %len.addr, align 4
  %sub52 = sub nsw i32 %40, 1
  %idxprom53 = sext i32 %sub52 to i64
  %41 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %41 to i64
  %42 = load i8**, i8*** %seq.addr, align 8
  %arrayidx55 = getelementptr inbounds i8*, i8** %42, i64 %idxprom54
  %43 = load i8*, i8** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %43, i64 %idxprom53
  %44 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %44 to i32
  %cmp58 = icmp eq i32 %conv57, 45
  br i1 %cmp58, label %if.then.60, label %if.end.64

if.then.60:                                       ; preds = %land.lhs.true.51
  %45 = load float, float* %feff, align 4
  %46 = load i32, i32* %len.addr, align 4
  %idxprom61 = sext i32 %46 to i64
  %47 = load float*, float** %freq.addr, align 8
  %arrayidx62 = getelementptr inbounds float, float* %47, i64 %idxprom61
  %48 = load float, float* %arrayidx62, align 4
  %add63 = fadd float %48, %45
  store float %add63, float* %arrayidx62, align 4
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.60, %land.lhs.true.51, %for.end.45
  br label %for.inc.65

for.inc.65:                                       ; preds = %if.end.64
  %49 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %49, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond.1

for.end.67:                                       ; preds = %for.cond.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getdiaminofreq_part(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %sgappat, i8* %egappat) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %sgappat.addr = alloca i8*, align 8
  %egappat.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %sgappat, i8** %sgappat.addr, align 8
  store i8* %egappat, i8** %egappat.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 2
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.65, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.67

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i64 %idxprom6
  %12 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %13 to i32
  %cmp10 = icmp ne i32 %conv9, 45
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.3
  %14 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %14 to i64
  %15 = load i8*, i8** %sgappat.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 %idxprom12
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp ne i32 %conv14, 45
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %17 = load float, float* %feff, align 4
  %18 = load float*, float** %freq.addr, align 8
  %arrayidx17 = getelementptr inbounds float, float* %18, i64 0
  %19 = load float, float* %arrayidx17, align 4
  %add18 = fadd float %19, %17
  store float %add18, float* %arrayidx17, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.3
  store i32 1, i32* %j, align 4
  br label %for.cond.19

for.cond.19:                                      ; preds = %for.inc.43, %if.end
  %20 = load i32, i32* %j, align 4
  %21 = load i32, i32* %len.addr, align 4
  %cmp20 = icmp slt i32 %20, %21
  br i1 %cmp20, label %for.body.22, label %for.end.45

for.body.22:                                      ; preds = %for.cond.19
  %22 = load i32, i32* %j, align 4
  %idxprom23 = sext i32 %22 to i64
  %23 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %23 to i64
  %24 = load i8**, i8*** %seq.addr, align 8
  %arrayidx25 = getelementptr inbounds i8*, i8** %24, i64 %idxprom24
  %25 = load i8*, i8** %arrayidx25, align 8
  %arrayidx26 = getelementptr inbounds i8, i8* %25, i64 %idxprom23
  %26 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %26 to i32
  %cmp28 = icmp ne i32 %conv27, 45
  br i1 %cmp28, label %land.lhs.true.30, label %if.end.42

land.lhs.true.30:                                 ; preds = %for.body.22
  %27 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %27, 1
  %idxprom31 = sext i32 %sub to i64
  %28 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %28 to i64
  %29 = load i8**, i8*** %seq.addr, align 8
  %arrayidx33 = getelementptr inbounds i8*, i8** %29, i64 %idxprom32
  %30 = load i8*, i8** %arrayidx33, align 8
  %arrayidx34 = getelementptr inbounds i8, i8* %30, i64 %idxprom31
  %31 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %31 to i32
  %cmp36 = icmp ne i32 %conv35, 45
  br i1 %cmp36, label %if.then.38, label %if.end.42

if.then.38:                                       ; preds = %land.lhs.true.30
  %32 = load float, float* %feff, align 4
  %33 = load i32, i32* %j, align 4
  %idxprom39 = sext i32 %33 to i64
  %34 = load float*, float** %freq.addr, align 8
  %arrayidx40 = getelementptr inbounds float, float* %34, i64 %idxprom39
  %35 = load float, float* %arrayidx40, align 4
  %add41 = fadd float %35, %32
  store float %add41, float* %arrayidx40, align 4
  br label %if.end.42

if.end.42:                                        ; preds = %if.then.38, %land.lhs.true.30, %for.body.22
  br label %for.inc.43

for.inc.43:                                       ; preds = %if.end.42
  %36 = load i32, i32* %j, align 4
  %inc44 = add nsw i32 %36, 1
  store i32 %inc44, i32* %j, align 4
  br label %for.cond.19

for.end.45:                                       ; preds = %for.cond.19
  %37 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %37 to i64
  %38 = load i8*, i8** %egappat.addr, align 8
  %arrayidx47 = getelementptr inbounds i8, i8* %38, i64 %idxprom46
  %39 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %39 to i32
  %cmp49 = icmp ne i32 %conv48, 45
  br i1 %cmp49, label %land.lhs.true.51, label %if.end.64

land.lhs.true.51:                                 ; preds = %for.end.45
  %40 = load i32, i32* %len.addr, align 4
  %sub52 = sub nsw i32 %40, 1
  %idxprom53 = sext i32 %sub52 to i64
  %41 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %41 to i64
  %42 = load i8**, i8*** %seq.addr, align 8
  %arrayidx55 = getelementptr inbounds i8*, i8** %42, i64 %idxprom54
  %43 = load i8*, i8** %arrayidx55, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %43, i64 %idxprom53
  %44 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %44 to i32
  %cmp58 = icmp ne i32 %conv57, 45
  br i1 %cmp58, label %if.then.60, label %if.end.64

if.then.60:                                       ; preds = %land.lhs.true.51
  %45 = load float, float* %feff, align 4
  %46 = load i32, i32* %len.addr, align 4
  %idxprom61 = sext i32 %46 to i64
  %47 = load float*, float** %freq.addr, align 8
  %arrayidx62 = getelementptr inbounds float, float* %47, i64 %idxprom61
  %48 = load float, float* %arrayidx62, align 4
  %add63 = fadd float %48, %45
  store float %add63, float* %arrayidx62, align 4
  br label %if.end.64

if.end.64:                                        ; preds = %if.then.60, %land.lhs.true.51, %for.end.45
  br label %for.inc.65

for.inc.65:                                       ; preds = %if.end.64
  %49 = load i32, i32* %i, align 4
  %inc66 = add nsw i32 %49, 1
  store i32 %inc66, i32* %i, align 4
  br label %for.cond.1

for.end.67:                                       ; preds = %for.cond.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getgapfreq_zure_part(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len, i8* %sgap) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %sgap.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %sgap, i8** %sgap.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 2
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.33, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.35

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8*, i8** %sgap.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %11, i64 %idxprom6
  %12 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %12 to i32
  %cmp9 = icmp eq i32 %conv8, 45
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.3
  %13 = load float, float* %feff, align 4
  %14 = load float*, float** %freq.addr, align 8
  %arrayidx11 = getelementptr inbounds float, float* %14, i64 0
  %15 = load float, float* %arrayidx11, align 4
  %add12 = fadd float %15, %13
  store float %add12, float* %arrayidx11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.3
  store i32 0, i32* %j, align 4
  br label %for.cond.13

for.cond.13:                                      ; preds = %for.inc.30, %if.end
  %16 = load i32, i32* %j, align 4
  %17 = load i32, i32* %len.addr, align 4
  %cmp14 = icmp slt i32 %16, %17
  br i1 %cmp14, label %for.body.16, label %for.end.32

for.body.16:                                      ; preds = %for.cond.13
  %18 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %18 to i64
  %19 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %19 to i64
  %20 = load i8**, i8*** %seq.addr, align 8
  %arrayidx19 = getelementptr inbounds i8*, i8** %20, i64 %idxprom18
  %21 = load i8*, i8** %arrayidx19, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %21, i64 %idxprom17
  %22 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %22 to i32
  %cmp22 = icmp eq i32 %conv21, 45
  br i1 %cmp22, label %if.then.24, label %if.end.29

if.then.24:                                       ; preds = %for.body.16
  %23 = load float, float* %feff, align 4
  %24 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %24, 1
  %idxprom26 = sext i32 %add25 to i64
  %25 = load float*, float** %freq.addr, align 8
  %arrayidx27 = getelementptr inbounds float, float* %25, i64 %idxprom26
  %26 = load float, float* %arrayidx27, align 4
  %add28 = fadd float %26, %23
  store float %add28, float* %arrayidx27, align 4
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.24, %for.body.16
  br label %for.inc.30

for.inc.30:                                       ; preds = %if.end.29
  %27 = load i32, i32* %j, align 4
  %inc31 = add nsw i32 %27, 1
  store i32 %inc31, i32* %j, align 4
  br label %for.cond.13

for.end.32:                                       ; preds = %for.cond.13
  br label %for.inc.33

for.inc.33:                                       ; preds = %for.end.32
  %28 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %28, 1
  store i32 %inc34, i32* %i, align 4
  br label %for.cond.1

for.end.35:                                       ; preds = %for.cond.1
  ret void
}

; Function Attrs: nounwind uwtable
define void @getgapfreq_zure(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.24, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.26

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.21, %for.body.3
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp7 = icmp slt i32 %10, %11
  br i1 %cmp7, label %for.body.9, label %for.end.23

for.body.9:                                       ; preds = %for.cond.6
  %12 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %13 to i64
  %14 = load i8**, i8*** %seq.addr, align 8
  %arrayidx12 = getelementptr inbounds i8*, i8** %14, i64 %idxprom11
  %15 = load i8*, i8** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 %idxprom10
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 45
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.9
  %17 = load float, float* %feff, align 4
  %18 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %18, 1
  %idxprom18 = sext i32 %add17 to i64
  %19 = load float*, float** %freq.addr, align 8
  %arrayidx19 = getelementptr inbounds float, float* %19, i64 %idxprom18
  %20 = load float, float* %arrayidx19, align 4
  %add20 = fadd float %20, %17
  store float %add20, float* %arrayidx19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.9
  br label %for.inc.21

for.inc.21:                                       ; preds = %if.end
  %21 = load i32, i32* %j, align 4
  %inc22 = add nsw i32 %21, 1
  store i32 %inc22, i32* %j, align 4
  br label %for.cond.6

for.end.23:                                       ; preds = %for.cond.6
  br label %for.inc.24

for.inc.24:                                       ; preds = %for.end.23
  %22 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %22, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond.1

for.end.26:                                       ; preds = %for.cond.1
  %23 = load i32, i32* %len.addr, align 4
  %add27 = add nsw i32 %23, 1
  %idxprom28 = sext i32 %add27 to i64
  %24 = load float*, float** %freq.addr, align 8
  %arrayidx29 = getelementptr inbounds float, float* %24, i64 %idxprom28
  store float 0.000000e+00, float* %arrayidx29, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @getgapfreq(float* %freq, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %freq.addr = alloca float*, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %feff = alloca float, align 4
  store float* %freq, float** %freq.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  %cmp = icmp slt i32 %0, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %3 = load float*, float** %freq.addr, align 8
  %arrayidx = getelementptr inbounds float, float* %3, i64 %idxprom
  store float 0.000000e+00, float* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.23, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* %clus.addr, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body.3, label %for.end.25

for.body.3:                                       ; preds = %for.cond.1
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %conv = fptrunc double %9 to float
  store float %conv, float* %feff, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.20, %for.body.3
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %len.addr, align 4
  %cmp7 = icmp slt i32 %10, %11
  br i1 %cmp7, label %for.body.9, label %for.end.22

for.body.9:                                       ; preds = %for.cond.6
  %12 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %12 to i64
  %13 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %13 to i64
  %14 = load i8**, i8*** %seq.addr, align 8
  %arrayidx12 = getelementptr inbounds i8*, i8** %14, i64 %idxprom11
  %15 = load i8*, i8** %arrayidx12, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %15, i64 %idxprom10
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %16 to i32
  %cmp15 = icmp eq i32 %conv14, 45
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body.9
  %17 = load float, float* %feff, align 4
  %18 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %18 to i64
  %19 = load float*, float** %freq.addr, align 8
  %arrayidx18 = getelementptr inbounds float, float* %19, i64 %idxprom17
  %20 = load float, float* %arrayidx18, align 4
  %add19 = fadd float %20, %17
  store float %add19, float* %arrayidx18, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body.9
  br label %for.inc.20

for.inc.20:                                       ; preds = %if.end
  %21 = load i32, i32* %j, align 4
  %inc21 = add nsw i32 %21, 1
  store i32 %inc21, i32* %j, align 4
  br label %for.cond.6

for.end.22:                                       ; preds = %for.cond.6
  br label %for.inc.23

for.inc.23:                                       ; preds = %for.end.22
  %22 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %22, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond.1

for.end.25:                                       ; preds = %for.cond.1
  %23 = load i32, i32* %len.addr, align 4
  %idxprom26 = sext i32 %23 to i64
  %24 = load float*, float** %freq.addr, align 8
  %arrayidx27 = getelementptr inbounds float, float* %24, i64 %idxprom26
  store float 0.000000e+00, float* %arrayidx27, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @st_getGapPattern(%struct._Gappattern** %pat, i32 %clus, i8** %seq, double* %eff, i32 %len) #0 {
entry:
  %pat.addr = alloca %struct._Gappattern**, align 8
  %clus.addr = alloca i32, align 4
  %seq.addr = alloca i8**, align 8
  %eff.addr = alloca double*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %gb = alloca i32, align 4
  %gc = alloca i32, align 4
  %known = alloca i32, align 4
  %feff = alloca float, align 4
  %fpt = alloca %struct._Gappattern**, align 8
  %spt = alloca i8*, align 8
  %gaplen = alloca i32, align 4
  store %struct._Gappattern** %pat, %struct._Gappattern*** %pat.addr, align 8
  store i32 %clus, i32* %clus.addr, align 4
  store i8** %seq, i8*** %seq.addr, align 8
  store double* %eff, double** %eff.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  store %struct._Gappattern** %0, %struct._Gappattern*** %fpt, align 8
  %1 = load i32, i32* %len.addr, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i32, i32* %i, align 4
  %dec = add nsw i32 %2, -1
  store i32 %dec, i32* %i, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %4 = load %struct._Gappattern*, %struct._Gappattern** %3, align 8
  %tobool1 = icmp ne %struct._Gappattern* %4, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %6 = load %struct._Gappattern*, %struct._Gappattern** %5, align 8
  %7 = bitcast %struct._Gappattern* %6 to i8*
  call void @free(i8* %7) #8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %8 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %incdec.ptr = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %8, i32 1
  store %struct._Gappattern** %incdec.ptr, %struct._Gappattern*** %fpt, align 8
  store %struct._Gappattern* null, %struct._Gappattern** %8, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.72, %while.end
  %9 = load i32, i32* %j, align 4
  %10 = load i32, i32* %clus.addr, align 4
  %cmp = icmp slt i32 %9, %10
  br i1 %cmp, label %for.body, label %for.end.74

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %j, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load double*, double** %eff.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %12, i64 %idxprom
  %13 = load double, double* %arrayidx, align 8
  %conv = fptrunc double %13 to float
  store float %conv, float* %feff, align 4
  %14 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  store %struct._Gappattern** %14, %struct._Gappattern*** %fpt, align 8
  %15 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  store %struct._Gappattern* null, %struct._Gappattern** %15, align 8
  %16 = load i32, i32* %j, align 4
  %idxprom2 = sext i32 %16 to i64
  %17 = load i8**, i8*** %seq.addr, align 8
  %arrayidx3 = getelementptr inbounds i8*, i8** %17, i64 %idxprom2
  %18 = load i8*, i8** %arrayidx3, align 8
  store i8* %18, i8** %spt, align 8
  store i32 0, i32* %gc, align 4
  store i32 0, i32* %gaplen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.69, %for.body
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %len.addr, align 4
  %add5 = add nsw i32 %20, 1
  %cmp6 = icmp slt i32 %19, %add5
  br i1 %cmp6, label %for.body.8, label %for.end.71

for.body.8:                                       ; preds = %for.cond.4
  %21 = load i32, i32* %gc, align 4
  store i32 %21, i32* %gb, align 4
  %22 = load i32, i32* %i, align 4
  %23 = load i32, i32* %len.addr, align 4
  %cmp9 = icmp ne i32 %22, %23
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body.8
  %24 = load i8*, i8** %spt, align 8
  %incdec.ptr11 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr11, i8** %spt, align 8
  %25 = load i8, i8* %24, align 1
  %conv12 = sext i8 %25 to i32
  %cmp13 = icmp eq i32 %conv12, 45
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body.8
  %26 = phi i1 [ false, %for.body.8 ], [ %cmp13, %land.rhs ]
  %land.ext = zext i1 %26 to i32
  store i32 %land.ext, i32* %gc, align 4
  %27 = load i32, i32* %gc, align 4
  %tobool15 = icmp ne i32 %27, 0
  br i1 %tobool15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %land.end
  %28 = load i32, i32* %gaplen, align 4
  %inc = add nsw i32 %28, 1
  store i32 %inc, i32* %gaplen, align 4
  br label %if.end.67

if.else:                                          ; preds = %land.end
  %29 = load i32, i32* %gb, align 4
  %tobool17 = icmp ne i32 %29, 0
  br i1 %tobool17, label %land.lhs.true, label %if.end.66

land.lhs.true:                                    ; preds = %if.else
  %30 = load i32, i32* %gaplen, align 4
  %tobool18 = icmp ne i32 %30, 0
  br i1 %tobool18, label %if.then.19, label %if.end.66

if.then.19:                                       ; preds = %land.lhs.true
  store i32 1, i32* %k, align 4
  store i32 0, i32* %known, align 4
  %31 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %32 = load %struct._Gappattern*, %struct._Gappattern** %31, align 8
  %tobool20 = icmp ne %struct._Gappattern* %32, null
  br i1 %tobool20, label %if.then.21, label %if.end.37

if.then.21:                                       ; preds = %if.then.19
  br label %for.cond.22

for.cond.22:                                      ; preds = %for.inc, %if.then.21
  %33 = load i32, i32* %k, align 4
  %idxprom23 = sext i32 %33 to i64
  %34 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %35 = load %struct._Gappattern*, %struct._Gappattern** %34, align 8
  %arrayidx24 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %35, i64 %idxprom23
  %len25 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx24, i32 0, i32 0
  %36 = load i32, i32* %len25, align 4
  %cmp26 = icmp ne i32 %36, -1
  br i1 %cmp26, label %for.body.28, label %for.end

for.body.28:                                      ; preds = %for.cond.22
  %37 = load i32, i32* %k, align 4
  %idxprom29 = sext i32 %37 to i64
  %38 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %39 = load %struct._Gappattern*, %struct._Gappattern** %38, align 8
  %arrayidx30 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %39, i64 %idxprom29
  %len31 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx30, i32 0, i32 0
  %40 = load i32, i32* %len31, align 4
  %41 = load i32, i32* %gaplen, align 4
  %cmp32 = icmp eq i32 %40, %41
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %for.body.28
  store i32 1, i32* %known, align 4
  br label %for.end

if.end.35:                                        ; preds = %for.body.28
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %42 = load i32, i32* %k, align 4
  %inc36 = add nsw i32 %42, 1
  store i32 %inc36, i32* %k, align 4
  br label %for.cond.22

for.end:                                          ; preds = %if.then.34, %for.cond.22
  br label %if.end.37

if.end.37:                                        ; preds = %for.end, %if.then.19
  %43 = load i32, i32* %known, align 4
  %cmp38 = icmp eq i32 %43, 0
  br i1 %cmp38, label %if.then.40, label %if.end.61

if.then.40:                                       ; preds = %if.end.37
  %44 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %45 = load %struct._Gappattern*, %struct._Gappattern** %44, align 8
  %46 = bitcast %struct._Gappattern* %45 to i8*
  %47 = load i32, i32* %k, align 4
  %add41 = add nsw i32 %47, 3
  %conv42 = sext i32 %add41 to i64
  %mul = mul i64 %conv42, 8
  %call = call i8* @realloc(i8* %46, i64 %mul) #8
  %48 = bitcast i8* %call to %struct._Gappattern*
  %49 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  store %struct._Gappattern* %48, %struct._Gappattern** %49, align 8
  %50 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %51 = load %struct._Gappattern*, %struct._Gappattern** %50, align 8
  %tobool43 = icmp ne %struct._Gappattern* %51, null
  br i1 %tobool43, label %if.end.47, label %if.then.44

if.then.44:                                       ; preds = %if.then.40
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i32 0, i32 0))
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.35, i32 0, i32 0))
  call void @exit(i32 1) #7
  unreachable

if.end.47:                                        ; preds = %if.then.40
  %54 = load i32, i32* %k, align 4
  %idxprom48 = sext i32 %54 to i64
  %55 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %56 = load %struct._Gappattern*, %struct._Gappattern** %55, align 8
  %arrayidx49 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %56, i64 %idxprom48
  %freq = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx49, i32 0, i32 1
  store float 0.000000e+00, float* %freq, align 4
  %57 = load i32, i32* %gaplen, align 4
  %58 = load i32, i32* %k, align 4
  %idxprom50 = sext i32 %58 to i64
  %59 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %60 = load %struct._Gappattern*, %struct._Gappattern** %59, align 8
  %arrayidx51 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %60, i64 %idxprom50
  %len52 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx51, i32 0, i32 0
  store i32 %57, i32* %len52, align 4
  %61 = load i32, i32* %k, align 4
  %add53 = add nsw i32 %61, 1
  %idxprom54 = sext i32 %add53 to i64
  %62 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %63 = load %struct._Gappattern*, %struct._Gappattern** %62, align 8
  %arrayidx55 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %63, i64 %idxprom54
  %len56 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx55, i32 0, i32 0
  store i32 -1, i32* %len56, align 4
  %64 = load i32, i32* %k, align 4
  %add57 = add nsw i32 %64, 1
  %idxprom58 = sext i32 %add57 to i64
  %65 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %66 = load %struct._Gappattern*, %struct._Gappattern** %65, align 8
  %arrayidx59 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %66, i64 %idxprom58
  %freq60 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx59, i32 0, i32 1
  store float 0.000000e+00, float* %freq60, align 4
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.47, %if.end.37
  %67 = load float, float* %feff, align 4
  %68 = load i32, i32* %k, align 4
  %idxprom62 = sext i32 %68 to i64
  %69 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %70 = load %struct._Gappattern*, %struct._Gappattern** %69, align 8
  %arrayidx63 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %70, i64 %idxprom62
  %freq64 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx63, i32 0, i32 1
  %71 = load float, float* %freq64, align 4
  %add65 = fadd float %71, %67
  store float %add65, float* %freq64, align 4
  store i32 0, i32* %gaplen, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.61, %land.lhs.true, %if.else
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.then.16
  %72 = load %struct._Gappattern**, %struct._Gappattern*** %fpt, align 8
  %incdec.ptr68 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %72, i32 1
  store %struct._Gappattern** %incdec.ptr68, %struct._Gappattern*** %fpt, align 8
  br label %for.inc.69

for.inc.69:                                       ; preds = %if.end.67
  %73 = load i32, i32* %i, align 4
  %inc70 = add nsw i32 %73, 1
  store i32 %inc70, i32* %i, align 4
  br label %for.cond.4

for.end.71:                                       ; preds = %for.cond.4
  br label %for.inc.72

for.inc.72:                                       ; preds = %for.end.71
  %74 = load i32, i32* %j, align 4
  %inc73 = add nsw i32 %74, 1
  store i32 %inc73, i32* %j, align 4
  br label %for.cond

for.end.74:                                       ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.75

for.cond.75:                                      ; preds = %for.inc.168, %for.end.74
  %75 = load i32, i32* %j, align 4
  %76 = load i32, i32* %len.addr, align 4
  %add76 = add nsw i32 %76, 1
  %cmp77 = icmp slt i32 %75, %add76
  br i1 %cmp77, label %for.body.79, label %for.end.170

for.body.79:                                      ; preds = %for.cond.75
  %77 = load i32, i32* %j, align 4
  %idxprom80 = sext i32 %77 to i64
  %78 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx81 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %78, i64 %idxprom80
  %79 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx81, align 8
  %tobool82 = icmp ne %struct._Gappattern* %79, null
  br i1 %tobool82, label %if.then.83, label %if.else.136

if.then.83:                                       ; preds = %for.body.79
  %80 = load i32, i32* %j, align 4
  %idxprom84 = sext i32 %80 to i64
  %81 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx85 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %81, i64 %idxprom84
  %82 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx85, align 8
  %arrayidx86 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %82, i64 0
  %len87 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx86, i32 0, i32 0
  store i32 0, i32* %len87, align 4
  %83 = load i32, i32* %j, align 4
  %idxprom88 = sext i32 %83 to i64
  %84 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx89 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %84, i64 %idxprom88
  %85 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx89, align 8
  %arrayidx90 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %85, i64 0
  %freq91 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx90, i32 0, i32 1
  store float 0.000000e+00, float* %freq91, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond.92

for.cond.92:                                      ; preds = %for.inc.111, %if.then.83
  %86 = load i32, i32* %i, align 4
  %idxprom93 = sext i32 %86 to i64
  %87 = load i32, i32* %j, align 4
  %idxprom94 = sext i32 %87 to i64
  %88 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx95 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %88, i64 %idxprom94
  %89 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx95, align 8
  %arrayidx96 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %89, i64 %idxprom93
  %len97 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx96, i32 0, i32 0
  %90 = load i32, i32* %len97, align 4
  %cmp98 = icmp ne i32 %90, -1
  br i1 %cmp98, label %for.body.100, label %for.end.113

for.body.100:                                     ; preds = %for.cond.92
  %91 = load i32, i32* %i, align 4
  %idxprom101 = sext i32 %91 to i64
  %92 = load i32, i32* %j, align 4
  %idxprom102 = sext i32 %92 to i64
  %93 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx103 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %93, i64 %idxprom102
  %94 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx103, align 8
  %arrayidx104 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %94, i64 %idxprom101
  %freq105 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx104, i32 0, i32 1
  %95 = load float, float* %freq105, align 4
  %96 = load i32, i32* %j, align 4
  %idxprom106 = sext i32 %96 to i64
  %97 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx107 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %97, i64 %idxprom106
  %98 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx107, align 8
  %arrayidx108 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %98, i64 0
  %freq109 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx108, i32 0, i32 1
  %99 = load float, float* %freq109, align 4
  %add110 = fadd float %99, %95
  store float %add110, float* %freq109, align 4
  br label %for.inc.111

for.inc.111:                                      ; preds = %for.body.100
  %100 = load i32, i32* %i, align 4
  %inc112 = add nsw i32 %100, 1
  store i32 %inc112, i32* %i, align 4
  br label %for.cond.92

for.end.113:                                      ; preds = %for.cond.92
  %101 = load i32, i32* %j, align 4
  %idxprom114 = sext i32 %101 to i64
  %102 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx115 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %102, i64 %idxprom114
  %103 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx115, align 8
  %arrayidx116 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %103, i64 0
  %freq117 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx116, i32 0, i32 1
  %104 = load float, float* %freq117, align 4
  %conv118 = fpext float %104 to double
  %sub = fsub double 1.000000e+00, %conv118
  %conv119 = fptrunc double %sub to float
  %105 = load i32, i32* %i, align 4
  %idxprom120 = sext i32 %105 to i64
  %106 = load i32, i32* %j, align 4
  %idxprom121 = sext i32 %106 to i64
  %107 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx122 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %107, i64 %idxprom121
  %108 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx122, align 8
  %arrayidx123 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %108, i64 %idxprom120
  %freq124 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx123, i32 0, i32 1
  store float %conv119, float* %freq124, align 4
  %109 = load i32, i32* %i, align 4
  %idxprom125 = sext i32 %109 to i64
  %110 = load i32, i32* %j, align 4
  %idxprom126 = sext i32 %110 to i64
  %111 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx127 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %111, i64 %idxprom126
  %112 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx127, align 8
  %arrayidx128 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %112, i64 %idxprom125
  %len129 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx128, i32 0, i32 0
  store i32 0, i32* %len129, align 4
  %113 = load i32, i32* %i, align 4
  %add130 = add nsw i32 %113, 1
  %idxprom131 = sext i32 %add130 to i64
  %114 = load i32, i32* %j, align 4
  %idxprom132 = sext i32 %114 to i64
  %115 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx133 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %115, i64 %idxprom132
  %116 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx133, align 8
  %arrayidx134 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %116, i64 %idxprom131
  %len135 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx134, i32 0, i32 0
  store i32 -1, i32* %len135, align 4
  br label %if.end.167

if.else.136:                                      ; preds = %for.body.79
  %call137 = call noalias i8* @calloc(i64 3, i64 8) #8
  %117 = bitcast i8* %call137 to %struct._Gappattern*
  %118 = load i32, i32* %j, align 4
  %idxprom138 = sext i32 %118 to i64
  %119 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx139 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %119, i64 %idxprom138
  store %struct._Gappattern* %117, %struct._Gappattern** %arrayidx139, align 8
  %120 = load i32, i32* %j, align 4
  %idxprom140 = sext i32 %120 to i64
  %121 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx141 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %121, i64 %idxprom140
  %122 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx141, align 8
  %arrayidx142 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %122, i64 0
  %freq143 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx142, i32 0, i32 1
  store float 0.000000e+00, float* %freq143, align 4
  %123 = load i32, i32* %j, align 4
  %idxprom144 = sext i32 %123 to i64
  %124 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx145 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %124, i64 %idxprom144
  %125 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx145, align 8
  %arrayidx146 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %125, i64 0
  %len147 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx146, i32 0, i32 0
  store i32 0, i32* %len147, align 4
  %126 = load i32, i32* %j, align 4
  %idxprom148 = sext i32 %126 to i64
  %127 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx149 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %127, i64 %idxprom148
  %128 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx149, align 8
  %arrayidx150 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %128, i64 0
  %freq151 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx150, i32 0, i32 1
  %129 = load float, float* %freq151, align 4
  %conv152 = fpext float %129 to double
  %sub153 = fsub double 1.000000e+00, %conv152
  %conv154 = fptrunc double %sub153 to float
  %130 = load i32, i32* %j, align 4
  %idxprom155 = sext i32 %130 to i64
  %131 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx156 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %131, i64 %idxprom155
  %132 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx156, align 8
  %arrayidx157 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %132, i64 1
  %freq158 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx157, i32 0, i32 1
  store float %conv154, float* %freq158, align 4
  %133 = load i32, i32* %j, align 4
  %idxprom159 = sext i32 %133 to i64
  %134 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx160 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %134, i64 %idxprom159
  %135 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx160, align 8
  %arrayidx161 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %135, i64 1
  %len162 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx161, i32 0, i32 0
  store i32 0, i32* %len162, align 4
  %136 = load i32, i32* %j, align 4
  %idxprom163 = sext i32 %136 to i64
  %137 = load %struct._Gappattern**, %struct._Gappattern*** %pat.addr, align 8
  %arrayidx164 = getelementptr inbounds %struct._Gappattern*, %struct._Gappattern** %137, i64 %idxprom163
  %138 = load %struct._Gappattern*, %struct._Gappattern** %arrayidx164, align 8
  %arrayidx165 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %138, i64 2
  %len166 = getelementptr inbounds %struct._Gappattern, %struct._Gappattern* %arrayidx165, i32 0, i32 0
  store i32 -1, i32* %len166, align 4
  br label %if.end.167

if.end.167:                                       ; preds = %if.else.136, %for.end.113
  br label %for.inc.168

for.inc.168:                                      ; preds = %if.end.167
  %139 = load i32, i32* %j, align 4
  %inc169 = add nsw i32 %139, 1
  store i32 %inc169, i32* %j, align 4
  br label %for.cond.75

for.end.170:                                      ; preds = %for.cond.75
  ret void
}

; Function Attrs: nounwind uwtable
define float @naiveRpairscore(i32 %n1, i32 %n2, i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %penal) #0 {
entry:
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %penal.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %val = alloca float, align 4
  %valf = alloca float, align 4
  %pv = alloca i32, align 4
  %deff = alloca double, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %p1p = alloca i8*, align 8
  %p2p = alloca i8*, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %penal, i32* %penal.addr, align 4
  store float 0.000000e+00, float* %val, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.242, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.244

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n2.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load double*, double** %eff1.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %5, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %7 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff2.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %mul = fmul double %6, %9
  store double %mul, double* %deff, align 8
  store float 0.000000e+00, float* %valf, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i64 %idxprom6
  %12 = load i8*, i8** %arrayidx7, align 8
  store i8* %12, i8** %p1, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %14, i64 %idxprom8
  %15 = load i8*, i8** %arrayidx9, align 8
  store i8* %15, i8** %p2, align 8
  store i32 0, i32* %pv, align 4
  %16 = load i8*, i8** %p1, align 8
  %17 = load i8, i8* %16, align 1
  %conv = sext i8 %17 to i32
  %cmp10 = icmp eq i32 %conv, 45
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.3
  %18 = load i8*, i8** %p2, align 8
  %19 = load i8, i8* %18, align 1
  %conv12 = sext i8 %19 to i32
  %cmp13 = icmp ne i32 %conv12, 45
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32, i32* %penal.addr, align 4
  store i32 %20, i32* %pv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.3
  %21 = load i8*, i8** %p1, align 8
  %22 = load i8, i8* %21, align 1
  %conv15 = sext i8 %22 to i32
  %cmp16 = icmp ne i32 %conv15, 45
  br i1 %cmp16, label %land.lhs.true.18, label %if.end.23

land.lhs.true.18:                                 ; preds = %if.end
  %23 = load i8*, i8** %p2, align 8
  %24 = load i8, i8* %23, align 1
  %conv19 = sext i8 %24 to i32
  %cmp20 = icmp eq i32 %conv19, 45
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true.18
  %25 = load i32, i32* %penal.addr, align 4
  store i32 %25, i32* %pv, align 4
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %land.lhs.true.18, %if.end
  %26 = load i8*, i8** %p1, align 8
  store i8* %26, i8** %p1p, align 8
  %27 = load i8*, i8** %p2, align 8
  store i8* %27, i8** %p2p, align 8
  %28 = load i8*, i8** %p2, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr, i8** %p2, align 8
  %29 = load i8, i8* %28, align 1
  %conv24 = sext i8 %29 to i32
  %idxprom25 = sext i32 %conv24 to i64
  %30 = load i8*, i8** %p1, align 8
  %incdec.ptr26 = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr26, i8** %p1, align 8
  %31 = load i8, i8* %30, align 1
  %conv27 = sext i8 %31 to i32
  %idxprom28 = sext i32 %conv27 to i64
  %arrayidx29 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom28
  %arrayidx30 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx29, i32 0, i64 %idxprom25
  %32 = load i32, i32* %arrayidx30, align 4
  %conv31 = sitofp i32 %32 to float
  %conv32 = fpext float %conv31 to double
  %33 = load i32, i32* %pv, align 4
  %conv33 = sitofp i32 %33 to double
  %mul34 = fmul double 5.000000e-01, %conv33
  %add = fadd double %conv32, %mul34
  %34 = load float, float* %valf, align 4
  %conv35 = fpext float %34 to double
  %add36 = fadd double %conv35, %add
  %conv37 = fptrunc double %add36 to float
  store float %conv37, float* %valf, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.219, %if.end.23
  %35 = load i8*, i8** %p1p, align 8
  %36 = load i8, i8* %35, align 1
  %tobool = icmp ne i8 %36, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %pv, align 4
  %37 = load i8*, i8** %p1p, align 8
  %38 = load i8, i8* %37, align 1
  %conv38 = sext i8 %38 to i32
  %cmp39 = icmp ne i32 %conv38, 45
  br i1 %cmp39, label %land.lhs.true.41, label %if.end.82

land.lhs.true.41:                                 ; preds = %while.body
  %39 = load i8*, i8** %p2p, align 8
  %40 = load i8, i8* %39, align 1
  %conv42 = sext i8 %40 to i32
  %cmp43 = icmp ne i32 %conv42, 45
  br i1 %cmp43, label %if.then.45, label %if.end.82

if.then.45:                                       ; preds = %land.lhs.true.41
  %41 = load i8*, i8** %p1, align 8
  %42 = load i8, i8* %41, align 1
  %conv46 = sext i8 %42 to i32
  %cmp47 = icmp eq i32 %conv46, 45
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.54

land.lhs.true.49:                                 ; preds = %if.then.45
  %43 = load i8*, i8** %p2, align 8
  %44 = load i8, i8* %43, align 1
  %conv50 = sext i8 %44 to i32
  %cmp51 = icmp ne i32 %conv50, 45
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %land.lhs.true.49
  %45 = load i32, i32* %penal.addr, align 4
  store i32 %45, i32* %pv, align 4
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %land.lhs.true.49, %if.then.45
  %46 = load i8*, i8** %p1, align 8
  %47 = load i8, i8* %46, align 1
  %conv55 = sext i8 %47 to i32
  %cmp56 = icmp ne i32 %conv55, 45
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.63

land.lhs.true.58:                                 ; preds = %if.end.54
  %48 = load i8*, i8** %p2, align 8
  %49 = load i8, i8* %48, align 1
  %conv59 = sext i8 %49 to i32
  %cmp60 = icmp eq i32 %conv59, 45
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %land.lhs.true.58
  %50 = load i32, i32* %penal.addr, align 4
  store i32 %50, i32* %pv, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.62, %land.lhs.true.58, %if.end.54
  %51 = load i8*, i8** %p1, align 8
  %52 = load i8, i8* %51, align 1
  %conv64 = sext i8 %52 to i32
  %cmp65 = icmp ne i32 %conv64, 45
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.72

land.lhs.true.67:                                 ; preds = %if.end.63
  %53 = load i8*, i8** %p2, align 8
  %54 = load i8, i8* %53, align 1
  %conv68 = sext i8 %54 to i32
  %cmp69 = icmp ne i32 %conv68, 45
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %land.lhs.true.67
  br label %if.end.72

if.end.72:                                        ; preds = %if.then.71, %land.lhs.true.67, %if.end.63
  %55 = load i8*, i8** %p1, align 8
  %56 = load i8, i8* %55, align 1
  %conv73 = sext i8 %56 to i32
  %cmp74 = icmp eq i32 %conv73, 45
  br i1 %cmp74, label %land.lhs.true.76, label %if.end.81

land.lhs.true.76:                                 ; preds = %if.end.72
  %57 = load i8*, i8** %p2, align 8
  %58 = load i8, i8* %57, align 1
  %conv77 = sext i8 %58 to i32
  %cmp78 = icmp eq i32 %conv77, 45
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %land.lhs.true.76
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.80, %land.lhs.true.76, %if.end.72
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %land.lhs.true.41, %while.body
  %59 = load i8*, i8** %p1p, align 8
  %60 = load i8, i8* %59, align 1
  %conv83 = sext i8 %60 to i32
  %cmp84 = icmp eq i32 %conv83, 45
  br i1 %cmp84, label %land.lhs.true.86, label %if.end.127

land.lhs.true.86:                                 ; preds = %if.end.82
  %61 = load i8*, i8** %p2p, align 8
  %62 = load i8, i8* %61, align 1
  %conv87 = sext i8 %62 to i32
  %cmp88 = icmp eq i32 %conv87, 45
  br i1 %cmp88, label %if.then.90, label %if.end.127

if.then.90:                                       ; preds = %land.lhs.true.86
  %63 = load i8*, i8** %p1, align 8
  %64 = load i8, i8* %63, align 1
  %conv91 = sext i8 %64 to i32
  %cmp92 = icmp eq i32 %conv91, 45
  br i1 %cmp92, label %land.lhs.true.94, label %if.end.99

land.lhs.true.94:                                 ; preds = %if.then.90
  %65 = load i8*, i8** %p2, align 8
  %66 = load i8, i8* %65, align 1
  %conv95 = sext i8 %66 to i32
  %cmp96 = icmp ne i32 %conv95, 45
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %land.lhs.true.94
  %67 = load i32, i32* %penal.addr, align 4
  store i32 %67, i32* %pv, align 4
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %land.lhs.true.94, %if.then.90
  %68 = load i8*, i8** %p1, align 8
  %69 = load i8, i8* %68, align 1
  %conv100 = sext i8 %69 to i32
  %cmp101 = icmp ne i32 %conv100, 45
  br i1 %cmp101, label %land.lhs.true.103, label %if.end.108

land.lhs.true.103:                                ; preds = %if.end.99
  %70 = load i8*, i8** %p2, align 8
  %71 = load i8, i8* %70, align 1
  %conv104 = sext i8 %71 to i32
  %cmp105 = icmp eq i32 %conv104, 45
  br i1 %cmp105, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %land.lhs.true.103
  %72 = load i32, i32* %penal.addr, align 4
  store i32 %72, i32* %pv, align 4
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.107, %land.lhs.true.103, %if.end.99
  %73 = load i8*, i8** %p1, align 8
  %74 = load i8, i8* %73, align 1
  %conv109 = sext i8 %74 to i32
  %cmp110 = icmp ne i32 %conv109, 45
  br i1 %cmp110, label %land.lhs.true.112, label %if.end.117

land.lhs.true.112:                                ; preds = %if.end.108
  %75 = load i8*, i8** %p2, align 8
  %76 = load i8, i8* %75, align 1
  %conv113 = sext i8 %76 to i32
  %cmp114 = icmp ne i32 %conv113, 45
  br i1 %cmp114, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %land.lhs.true.112
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.116, %land.lhs.true.112, %if.end.108
  %77 = load i8*, i8** %p1, align 8
  %78 = load i8, i8* %77, align 1
  %conv118 = sext i8 %78 to i32
  %cmp119 = icmp eq i32 %conv118, 45
  br i1 %cmp119, label %land.lhs.true.121, label %if.end.126

land.lhs.true.121:                                ; preds = %if.end.117
  %79 = load i8*, i8** %p2, align 8
  %80 = load i8, i8* %79, align 1
  %conv122 = sext i8 %80 to i32
  %cmp123 = icmp eq i32 %conv122, 45
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %land.lhs.true.121
  br label %if.end.126

if.end.126:                                       ; preds = %if.then.125, %land.lhs.true.121, %if.end.117
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %land.lhs.true.86, %if.end.82
  %81 = load i8*, i8** %p1p, align 8
  %82 = load i8, i8* %81, align 1
  %conv128 = sext i8 %82 to i32
  %cmp129 = icmp ne i32 %conv128, 45
  br i1 %cmp129, label %land.lhs.true.131, label %if.end.173

land.lhs.true.131:                                ; preds = %if.end.127
  %83 = load i8*, i8** %p2p, align 8
  %84 = load i8, i8* %83, align 1
  %conv132 = sext i8 %84 to i32
  %cmp133 = icmp eq i32 %conv132, 45
  br i1 %cmp133, label %if.then.135, label %if.end.173

if.then.135:                                      ; preds = %land.lhs.true.131
  %85 = load i8*, i8** %p1, align 8
  %86 = load i8, i8* %85, align 1
  %conv136 = sext i8 %86 to i32
  %cmp137 = icmp eq i32 %conv136, 45
  br i1 %cmp137, label %land.lhs.true.139, label %if.end.145

land.lhs.true.139:                                ; preds = %if.then.135
  %87 = load i8*, i8** %p2, align 8
  %88 = load i8, i8* %87, align 1
  %conv140 = sext i8 %88 to i32
  %cmp141 = icmp ne i32 %conv140, 45
  br i1 %cmp141, label %if.then.143, label %if.end.145

if.then.143:                                      ; preds = %land.lhs.true.139
  %89 = load i32, i32* %penal.addr, align 4
  %mul144 = mul nsw i32 %89, 2
  store i32 %mul144, i32* %pv, align 4
  br label %if.end.145

if.end.145:                                       ; preds = %if.then.143, %land.lhs.true.139, %if.then.135
  %90 = load i8*, i8** %p1, align 8
  %91 = load i8, i8* %90, align 1
  %conv146 = sext i8 %91 to i32
  %cmp147 = icmp ne i32 %conv146, 45
  br i1 %cmp147, label %land.lhs.true.149, label %if.end.154

land.lhs.true.149:                                ; preds = %if.end.145
  %92 = load i8*, i8** %p2, align 8
  %93 = load i8, i8* %92, align 1
  %conv150 = sext i8 %93 to i32
  %cmp151 = icmp eq i32 %conv150, 45
  br i1 %cmp151, label %if.then.153, label %if.end.154

if.then.153:                                      ; preds = %land.lhs.true.149
  br label %if.end.154

if.end.154:                                       ; preds = %if.then.153, %land.lhs.true.149, %if.end.145
  %94 = load i8*, i8** %p1, align 8
  %95 = load i8, i8* %94, align 1
  %conv155 = sext i8 %95 to i32
  %cmp156 = icmp ne i32 %conv155, 45
  br i1 %cmp156, label %land.lhs.true.158, label %if.end.163

land.lhs.true.158:                                ; preds = %if.end.154
  %96 = load i8*, i8** %p2, align 8
  %97 = load i8, i8* %96, align 1
  %conv159 = sext i8 %97 to i32
  %cmp160 = icmp ne i32 %conv159, 45
  br i1 %cmp160, label %if.then.162, label %if.end.163

if.then.162:                                      ; preds = %land.lhs.true.158
  %98 = load i32, i32* %penal.addr, align 4
  store i32 %98, i32* %pv, align 4
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.162, %land.lhs.true.158, %if.end.154
  %99 = load i8*, i8** %p1, align 8
  %100 = load i8, i8* %99, align 1
  %conv164 = sext i8 %100 to i32
  %cmp165 = icmp eq i32 %conv164, 45
  br i1 %cmp165, label %land.lhs.true.167, label %if.end.172

land.lhs.true.167:                                ; preds = %if.end.163
  %101 = load i8*, i8** %p2, align 8
  %102 = load i8, i8* %101, align 1
  %conv168 = sext i8 %102 to i32
  %cmp169 = icmp eq i32 %conv168, 45
  br i1 %cmp169, label %if.then.171, label %if.end.172

if.then.171:                                      ; preds = %land.lhs.true.167
  %103 = load i32, i32* %penal.addr, align 4
  store i32 %103, i32* %pv, align 4
  br label %if.end.172

if.end.172:                                       ; preds = %if.then.171, %land.lhs.true.167, %if.end.163
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %land.lhs.true.131, %if.end.127
  %104 = load i8*, i8** %p1p, align 8
  %105 = load i8, i8* %104, align 1
  %conv174 = sext i8 %105 to i32
  %cmp175 = icmp eq i32 %conv174, 45
  br i1 %cmp175, label %land.lhs.true.177, label %if.end.219

land.lhs.true.177:                                ; preds = %if.end.173
  %106 = load i8*, i8** %p2p, align 8
  %107 = load i8, i8* %106, align 1
  %conv178 = sext i8 %107 to i32
  %cmp179 = icmp ne i32 %conv178, 45
  br i1 %cmp179, label %if.then.181, label %if.end.219

if.then.181:                                      ; preds = %land.lhs.true.177
  %108 = load i8*, i8** %p1, align 8
  %109 = load i8, i8* %108, align 1
  %conv182 = sext i8 %109 to i32
  %cmp183 = icmp eq i32 %conv182, 45
  br i1 %cmp183, label %land.lhs.true.185, label %if.end.190

land.lhs.true.185:                                ; preds = %if.then.181
  %110 = load i8*, i8** %p2, align 8
  %111 = load i8, i8* %110, align 1
  %conv186 = sext i8 %111 to i32
  %cmp187 = icmp ne i32 %conv186, 45
  br i1 %cmp187, label %if.then.189, label %if.end.190

if.then.189:                                      ; preds = %land.lhs.true.185
  br label %if.end.190

if.end.190:                                       ; preds = %if.then.189, %land.lhs.true.185, %if.then.181
  %112 = load i8*, i8** %p1, align 8
  %113 = load i8, i8* %112, align 1
  %conv191 = sext i8 %113 to i32
  %cmp192 = icmp ne i32 %conv191, 45
  br i1 %cmp192, label %land.lhs.true.194, label %if.end.200

land.lhs.true.194:                                ; preds = %if.end.190
  %114 = load i8*, i8** %p2, align 8
  %115 = load i8, i8* %114, align 1
  %conv195 = sext i8 %115 to i32
  %cmp196 = icmp eq i32 %conv195, 45
  br i1 %cmp196, label %if.then.198, label %if.end.200

if.then.198:                                      ; preds = %land.lhs.true.194
  %116 = load i32, i32* %penal.addr, align 4
  %mul199 = mul nsw i32 %116, 2
  store i32 %mul199, i32* %pv, align 4
  br label %if.end.200

if.end.200:                                       ; preds = %if.then.198, %land.lhs.true.194, %if.end.190
  %117 = load i8*, i8** %p1, align 8
  %118 = load i8, i8* %117, align 1
  %conv201 = sext i8 %118 to i32
  %cmp202 = icmp ne i32 %conv201, 45
  br i1 %cmp202, label %land.lhs.true.204, label %if.end.209

land.lhs.true.204:                                ; preds = %if.end.200
  %119 = load i8*, i8** %p2, align 8
  %120 = load i8, i8* %119, align 1
  %conv205 = sext i8 %120 to i32
  %cmp206 = icmp ne i32 %conv205, 45
  br i1 %cmp206, label %if.then.208, label %if.end.209

if.then.208:                                      ; preds = %land.lhs.true.204
  %121 = load i32, i32* %penal.addr, align 4
  store i32 %121, i32* %pv, align 4
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.208, %land.lhs.true.204, %if.end.200
  %122 = load i8*, i8** %p1, align 8
  %123 = load i8, i8* %122, align 1
  %conv210 = sext i8 %123 to i32
  %cmp211 = icmp eq i32 %conv210, 45
  br i1 %cmp211, label %land.lhs.true.213, label %if.end.218

land.lhs.true.213:                                ; preds = %if.end.209
  %124 = load i8*, i8** %p2, align 8
  %125 = load i8, i8* %124, align 1
  %conv214 = sext i8 %125 to i32
  %cmp215 = icmp eq i32 %conv214, 45
  br i1 %cmp215, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %land.lhs.true.213
  %126 = load i32, i32* %penal.addr, align 4
  store i32 %126, i32* %pv, align 4
  br label %if.end.218

if.end.218:                                       ; preds = %if.then.217, %land.lhs.true.213, %if.end.209
  br label %if.end.219

if.end.219:                                       ; preds = %if.end.218, %land.lhs.true.177, %if.end.173
  %127 = load i8*, i8** %p2, align 8
  %incdec.ptr220 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %incdec.ptr220, i8** %p2, align 8
  %128 = load i8, i8* %127, align 1
  %conv221 = sext i8 %128 to i32
  %idxprom222 = sext i32 %conv221 to i64
  %129 = load i8*, i8** %p1, align 8
  %incdec.ptr223 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %incdec.ptr223, i8** %p1, align 8
  %130 = load i8, i8* %129, align 1
  %conv224 = sext i8 %130 to i32
  %idxprom225 = sext i32 %conv224 to i64
  %arrayidx226 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom225
  %arrayidx227 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx226, i32 0, i64 %idxprom222
  %131 = load i32, i32* %arrayidx227, align 4
  %conv228 = sitofp i32 %131 to double
  %132 = load i32, i32* %pv, align 4
  %conv229 = sitofp i32 %132 to double
  %mul230 = fmul double 5.000000e-01, %conv229
  %add231 = fadd double %conv228, %mul230
  %133 = load float, float* %valf, align 4
  %conv232 = fpext float %133 to double
  %add233 = fadd double %conv232, %add231
  %conv234 = fptrunc double %add233 to float
  store float %conv234, float* %valf, align 4
  %134 = load i8*, i8** %p1p, align 8
  %incdec.ptr235 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr235, i8** %p1p, align 8
  %135 = load i8*, i8** %p2p, align 8
  %incdec.ptr236 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %incdec.ptr236, i8** %p2p, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %136 = load double, double* %deff, align 8
  %137 = load float, float* %valf, align 4
  %conv237 = fpext float %137 to double
  %mul238 = fmul double %136, %conv237
  %138 = load float, float* %val, align 4
  %conv239 = fpext float %138 to double
  %add240 = fadd double %conv239, %mul238
  %conv241 = fptrunc double %add240 to float
  store float %conv241, float* %val, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %139 = load i32, i32* %j, align 4
  %inc = add nsw i32 %139, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.242

for.inc.242:                                      ; preds = %for.end
  %140 = load i32, i32* %i, align 4
  %inc243 = add nsw i32 %140, 1
  store i32 %inc243, i32* %i, align 4
  br label %for.cond

for.end.244:                                      ; preds = %for.cond
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %142 = load float, float* %val, align 4
  %conv245 = fpext float %142 to double
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %141, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), double %conv245)
  %143 = load float, float* %val, align 4
  ret float %143
}

; Function Attrs: nounwind uwtable
define float @naiveQpairscore(i32 %n1, i32 %n2, i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %penal) #0 {
entry:
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %penal.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %val = alloca float, align 4
  %valf = alloca float, align 4
  %pv = alloca i32, align 4
  %deff = alloca double, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %p1p = alloca i8*, align 8
  %p2p = alloca i8*, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %penal, i32* %penal.addr, align 4
  ret float 0.000000e+00
}

; Function Attrs: nounwind uwtable
define float @naiveHpairscore(i32 %n1, i32 %n2, i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %penal) #0 {
entry:
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %penal.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %val = alloca float, align 4
  %valf = alloca float, align 4
  %pv = alloca i32, align 4
  %deff = alloca double, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %p1p = alloca i8*, align 8
  %p2p = alloca i8*, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %penal, i32* %penal.addr, align 4
  store float 0.000000e+00, float* %val, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.255, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %n1.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end.257

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %n2.addr, align 4
  %cmp2 = icmp slt i32 %2, %3
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load double*, double** %eff1.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %5, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %7 = load i32, i32* %j, align 4
  %idxprom4 = sext i32 %7 to i64
  %8 = load double*, double** %eff2.addr, align 8
  %arrayidx5 = getelementptr inbounds double, double* %8, i64 %idxprom4
  %9 = load double, double* %arrayidx5, align 8
  %mul = fmul double %6, %9
  store double %mul, double* %deff, align 8
  store float 0.000000e+00, float* %valf, align 4
  %10 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %10 to i64
  %11 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx7 = getelementptr inbounds i8*, i8** %11, i64 %idxprom6
  %12 = load i8*, i8** %arrayidx7, align 8
  store i8* %12, i8** %p1, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx9 = getelementptr inbounds i8*, i8** %14, i64 %idxprom8
  %15 = load i8*, i8** %arrayidx9, align 8
  store i8* %15, i8** %p2, align 8
  store i32 0, i32* %pv, align 4
  %16 = load i8*, i8** %p1, align 8
  %17 = load i8, i8* %16, align 1
  %conv = sext i8 %17 to i32
  %cmp10 = icmp eq i32 %conv, 45
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.3
  %18 = load i8*, i8** %p2, align 8
  %19 = load i8, i8* %18, align 1
  %conv12 = sext i8 %19 to i32
  %cmp13 = icmp ne i32 %conv12, 45
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32, i32* %penal.addr, align 4
  store i32 %20, i32* %pv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body.3
  %21 = load i8*, i8** %p1, align 8
  %22 = load i8, i8* %21, align 1
  %conv15 = sext i8 %22 to i32
  %cmp16 = icmp ne i32 %conv15, 45
  br i1 %cmp16, label %land.lhs.true.18, label %if.end.23

land.lhs.true.18:                                 ; preds = %if.end
  %23 = load i8*, i8** %p2, align 8
  %24 = load i8, i8* %23, align 1
  %conv19 = sext i8 %24 to i32
  %cmp20 = icmp eq i32 %conv19, 45
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %land.lhs.true.18
  %25 = load i32, i32* %penal.addr, align 4
  store i32 %25, i32* %pv, align 4
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %land.lhs.true.18, %if.end
  %26 = load i32, i32* %pv, align 4
  %tobool = icmp ne i32 %26, 0
  br i1 %tobool, label %if.then.24, label %if.end.37

if.then.24:                                       ; preds = %if.end.23
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %28 = load i32, i32* %pv, align 4
  %conv25 = sitofp i32 %28 to double
  %29 = load double, double* %deff, align 8
  %mul26 = fmul double %conv25, %29
  %mul27 = fmul double %mul26, 5.000000e-01
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* %j, align 4
  %32 = load i8*, i8** %p1, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %33 to i64
  %34 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx29 = getelementptr inbounds i8*, i8** %34, i64 %idxprom28
  %35 = load i8*, i8** %arrayidx29, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %35 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv30 = trunc i64 %sub.ptr.sub to i32
  %36 = load i8*, i8** %p2, align 8
  %37 = load i32, i32* %j, align 4
  %idxprom31 = sext i32 %37 to i64
  %38 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx32 = getelementptr inbounds i8*, i8** %38, i64 %idxprom31
  %39 = load i8*, i8** %arrayidx32, align 8
  %sub.ptr.lhs.cast33 = ptrtoint i8* %36 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i8* %39 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %conv36 = trunc i64 %sub.ptr.sub35 to i32
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.37, i32 0, i32 0), double %mul27, i32 %30, i32 %31, i32 %conv30, i32 %conv36)
  br label %if.end.37

if.end.37:                                        ; preds = %if.then.24, %if.end.23
  %40 = load i8*, i8** %p1, align 8
  store i8* %40, i8** %p1p, align 8
  %41 = load i8*, i8** %p2, align 8
  store i8* %41, i8** %p2p, align 8
  %42 = load i8*, i8** %p2, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr, i8** %p2, align 8
  %43 = load i8, i8* %42, align 1
  %conv38 = sext i8 %43 to i32
  %idxprom39 = sext i32 %conv38 to i64
  %44 = load i8*, i8** %p1, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr40, i8** %p1, align 8
  %45 = load i8, i8* %44, align 1
  %conv41 = sext i8 %45 to i32
  %idxprom42 = sext i32 %conv41 to i64
  %arrayidx43 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom42
  %arrayidx44 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx43, i32 0, i64 %idxprom39
  %46 = load i32, i32* %arrayidx44, align 4
  %conv45 = sitofp i32 %46 to float
  %conv46 = fpext float %conv45 to double
  %47 = load i32, i32* %pv, align 4
  %conv47 = sitofp i32 %47 to double
  %mul48 = fmul double 5.000000e-01, %conv47
  %add = fadd double %conv46, %mul48
  %48 = load float, float* %valf, align 4
  %conv49 = fpext float %48 to double
  %add50 = fadd double %conv49, %add
  %conv51 = fptrunc double %add50 to float
  store float %conv51, float* %valf, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.232, %if.end.37
  %49 = load i8*, i8** %p1p, align 8
  %50 = load i8, i8* %49, align 1
  %tobool52 = icmp ne i8 %50, 0
  br i1 %tobool52, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %pv, align 4
  %51 = load i8*, i8** %p1p, align 8
  %52 = load i8, i8* %51, align 1
  %conv53 = sext i8 %52 to i32
  %cmp54 = icmp ne i32 %conv53, 45
  br i1 %cmp54, label %land.lhs.true.56, label %if.end.97

land.lhs.true.56:                                 ; preds = %while.body
  %53 = load i8*, i8** %p2p, align 8
  %54 = load i8, i8* %53, align 1
  %conv57 = sext i8 %54 to i32
  %cmp58 = icmp ne i32 %conv57, 45
  br i1 %cmp58, label %if.then.60, label %if.end.97

if.then.60:                                       ; preds = %land.lhs.true.56
  %55 = load i8*, i8** %p1, align 8
  %56 = load i8, i8* %55, align 1
  %conv61 = sext i8 %56 to i32
  %cmp62 = icmp eq i32 %conv61, 45
  br i1 %cmp62, label %land.lhs.true.64, label %if.end.69

land.lhs.true.64:                                 ; preds = %if.then.60
  %57 = load i8*, i8** %p2, align 8
  %58 = load i8, i8* %57, align 1
  %conv65 = sext i8 %58 to i32
  %cmp66 = icmp ne i32 %conv65, 45
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %land.lhs.true.64
  %59 = load i32, i32* %penal.addr, align 4
  store i32 %59, i32* %pv, align 4
  br label %if.end.69

if.end.69:                                        ; preds = %if.then.68, %land.lhs.true.64, %if.then.60
  %60 = load i8*, i8** %p1, align 8
  %61 = load i8, i8* %60, align 1
  %conv70 = sext i8 %61 to i32
  %cmp71 = icmp ne i32 %conv70, 45
  br i1 %cmp71, label %land.lhs.true.73, label %if.end.78

land.lhs.true.73:                                 ; preds = %if.end.69
  %62 = load i8*, i8** %p2, align 8
  %63 = load i8, i8* %62, align 1
  %conv74 = sext i8 %63 to i32
  %cmp75 = icmp eq i32 %conv74, 45
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %land.lhs.true.73
  %64 = load i32, i32* %penal.addr, align 4
  store i32 %64, i32* %pv, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %land.lhs.true.73, %if.end.69
  %65 = load i8*, i8** %p1, align 8
  %66 = load i8, i8* %65, align 1
  %conv79 = sext i8 %66 to i32
  %cmp80 = icmp ne i32 %conv79, 45
  br i1 %cmp80, label %land.lhs.true.82, label %if.end.87

land.lhs.true.82:                                 ; preds = %if.end.78
  %67 = load i8*, i8** %p2, align 8
  %68 = load i8, i8* %67, align 1
  %conv83 = sext i8 %68 to i32
  %cmp84 = icmp ne i32 %conv83, 45
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %land.lhs.true.82
  br label %if.end.87

if.end.87:                                        ; preds = %if.then.86, %land.lhs.true.82, %if.end.78
  %69 = load i8*, i8** %p1, align 8
  %70 = load i8, i8* %69, align 1
  %conv88 = sext i8 %70 to i32
  %cmp89 = icmp eq i32 %conv88, 45
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.96

land.lhs.true.91:                                 ; preds = %if.end.87
  %71 = load i8*, i8** %p2, align 8
  %72 = load i8, i8* %71, align 1
  %conv92 = sext i8 %72 to i32
  %cmp93 = icmp eq i32 %conv92, 45
  br i1 %cmp93, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %land.lhs.true.91
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.95, %land.lhs.true.91, %if.end.87
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true.56, %while.body
  %73 = load i8*, i8** %p1p, align 8
  %74 = load i8, i8* %73, align 1
  %conv98 = sext i8 %74 to i32
  %cmp99 = icmp eq i32 %conv98, 45
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.142

land.lhs.true.101:                                ; preds = %if.end.97
  %75 = load i8*, i8** %p2p, align 8
  %76 = load i8, i8* %75, align 1
  %conv102 = sext i8 %76 to i32
  %cmp103 = icmp eq i32 %conv102, 45
  br i1 %cmp103, label %if.then.105, label %if.end.142

if.then.105:                                      ; preds = %land.lhs.true.101
  %77 = load i8*, i8** %p1, align 8
  %78 = load i8, i8* %77, align 1
  %conv106 = sext i8 %78 to i32
  %cmp107 = icmp eq i32 %conv106, 45
  br i1 %cmp107, label %land.lhs.true.109, label %if.end.114

land.lhs.true.109:                                ; preds = %if.then.105
  %79 = load i8*, i8** %p2, align 8
  %80 = load i8, i8* %79, align 1
  %conv110 = sext i8 %80 to i32
  %cmp111 = icmp ne i32 %conv110, 45
  br i1 %cmp111, label %if.then.113, label %if.end.114

if.then.113:                                      ; preds = %land.lhs.true.109
  br label %if.end.114

if.end.114:                                       ; preds = %if.then.113, %land.lhs.true.109, %if.then.105
  %81 = load i8*, i8** %p1, align 8
  %82 = load i8, i8* %81, align 1
  %conv115 = sext i8 %82 to i32
  %cmp116 = icmp ne i32 %conv115, 45
  br i1 %cmp116, label %land.lhs.true.118, label %if.end.123

land.lhs.true.118:                                ; preds = %if.end.114
  %83 = load i8*, i8** %p2, align 8
  %84 = load i8, i8* %83, align 1
  %conv119 = sext i8 %84 to i32
  %cmp120 = icmp eq i32 %conv119, 45
  br i1 %cmp120, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %land.lhs.true.118
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.122, %land.lhs.true.118, %if.end.114
  %85 = load i8*, i8** %p1, align 8
  %86 = load i8, i8* %85, align 1
  %conv124 = sext i8 %86 to i32
  %cmp125 = icmp ne i32 %conv124, 45
  br i1 %cmp125, label %land.lhs.true.127, label %if.end.132

land.lhs.true.127:                                ; preds = %if.end.123
  %87 = load i8*, i8** %p2, align 8
  %88 = load i8, i8* %87, align 1
  %conv128 = sext i8 %88 to i32
  %cmp129 = icmp ne i32 %conv128, 45
  br i1 %cmp129, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %land.lhs.true.127
  br label %if.end.132

if.end.132:                                       ; preds = %if.then.131, %land.lhs.true.127, %if.end.123
  %89 = load i8*, i8** %p1, align 8
  %90 = load i8, i8* %89, align 1
  %conv133 = sext i8 %90 to i32
  %cmp134 = icmp eq i32 %conv133, 45
  br i1 %cmp134, label %land.lhs.true.136, label %if.end.141

land.lhs.true.136:                                ; preds = %if.end.132
  %91 = load i8*, i8** %p2, align 8
  %92 = load i8, i8* %91, align 1
  %conv137 = sext i8 %92 to i32
  %cmp138 = icmp eq i32 %conv137, 45
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %land.lhs.true.136
  br label %if.end.141

if.end.141:                                       ; preds = %if.then.140, %land.lhs.true.136, %if.end.132
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141, %land.lhs.true.101, %if.end.97
  %93 = load i8*, i8** %p1p, align 8
  %94 = load i8, i8* %93, align 1
  %conv143 = sext i8 %94 to i32
  %cmp144 = icmp ne i32 %conv143, 45
  br i1 %cmp144, label %land.lhs.true.146, label %if.end.187

land.lhs.true.146:                                ; preds = %if.end.142
  %95 = load i8*, i8** %p2p, align 8
  %96 = load i8, i8* %95, align 1
  %conv147 = sext i8 %96 to i32
  %cmp148 = icmp eq i32 %conv147, 45
  br i1 %cmp148, label %if.then.150, label %if.end.187

if.then.150:                                      ; preds = %land.lhs.true.146
  %97 = load i8*, i8** %p1, align 8
  %98 = load i8, i8* %97, align 1
  %conv151 = sext i8 %98 to i32
  %cmp152 = icmp eq i32 %conv151, 45
  br i1 %cmp152, label %land.lhs.true.154, label %if.end.159

land.lhs.true.154:                                ; preds = %if.then.150
  %99 = load i8*, i8** %p2, align 8
  %100 = load i8, i8* %99, align 1
  %conv155 = sext i8 %100 to i32
  %cmp156 = icmp ne i32 %conv155, 45
  br i1 %cmp156, label %if.then.158, label %if.end.159

if.then.158:                                      ; preds = %land.lhs.true.154
  br label %if.end.159

if.end.159:                                       ; preds = %if.then.158, %land.lhs.true.154, %if.then.150
  %101 = load i8*, i8** %p1, align 8
  %102 = load i8, i8* %101, align 1
  %conv160 = sext i8 %102 to i32
  %cmp161 = icmp ne i32 %conv160, 45
  br i1 %cmp161, label %land.lhs.true.163, label %if.end.168

land.lhs.true.163:                                ; preds = %if.end.159
  %103 = load i8*, i8** %p2, align 8
  %104 = load i8, i8* %103, align 1
  %conv164 = sext i8 %104 to i32
  %cmp165 = icmp eq i32 %conv164, 45
  br i1 %cmp165, label %if.then.167, label %if.end.168

if.then.167:                                      ; preds = %land.lhs.true.163
  br label %if.end.168

if.end.168:                                       ; preds = %if.then.167, %land.lhs.true.163, %if.end.159
  %105 = load i8*, i8** %p1, align 8
  %106 = load i8, i8* %105, align 1
  %conv169 = sext i8 %106 to i32
  %cmp170 = icmp ne i32 %conv169, 45
  br i1 %cmp170, label %land.lhs.true.172, label %if.end.177

land.lhs.true.172:                                ; preds = %if.end.168
  %107 = load i8*, i8** %p2, align 8
  %108 = load i8, i8* %107, align 1
  %conv173 = sext i8 %108 to i32
  %cmp174 = icmp ne i32 %conv173, 45
  br i1 %cmp174, label %if.then.176, label %if.end.177

if.then.176:                                      ; preds = %land.lhs.true.172
  %109 = load i32, i32* %penal.addr, align 4
  store i32 %109, i32* %pv, align 4
  br label %if.end.177

if.end.177:                                       ; preds = %if.then.176, %land.lhs.true.172, %if.end.168
  %110 = load i8*, i8** %p1, align 8
  %111 = load i8, i8* %110, align 1
  %conv178 = sext i8 %111 to i32
  %cmp179 = icmp eq i32 %conv178, 45
  br i1 %cmp179, label %land.lhs.true.181, label %if.end.186

land.lhs.true.181:                                ; preds = %if.end.177
  %112 = load i8*, i8** %p2, align 8
  %113 = load i8, i8* %112, align 1
  %conv182 = sext i8 %113 to i32
  %cmp183 = icmp eq i32 %conv182, 45
  br i1 %cmp183, label %if.then.185, label %if.end.186

if.then.185:                                      ; preds = %land.lhs.true.181
  br label %if.end.186

if.end.186:                                       ; preds = %if.then.185, %land.lhs.true.181, %if.end.177
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %land.lhs.true.146, %if.end.142
  %114 = load i8*, i8** %p1p, align 8
  %115 = load i8, i8* %114, align 1
  %conv188 = sext i8 %115 to i32
  %cmp189 = icmp eq i32 %conv188, 45
  br i1 %cmp189, label %land.lhs.true.191, label %if.end.232

land.lhs.true.191:                                ; preds = %if.end.187
  %116 = load i8*, i8** %p2p, align 8
  %117 = load i8, i8* %116, align 1
  %conv192 = sext i8 %117 to i32
  %cmp193 = icmp ne i32 %conv192, 45
  br i1 %cmp193, label %if.then.195, label %if.end.232

if.then.195:                                      ; preds = %land.lhs.true.191
  %118 = load i8*, i8** %p1, align 8
  %119 = load i8, i8* %118, align 1
  %conv196 = sext i8 %119 to i32
  %cmp197 = icmp eq i32 %conv196, 45
  br i1 %cmp197, label %land.lhs.true.199, label %if.end.204

land.lhs.true.199:                                ; preds = %if.then.195
  %120 = load i8*, i8** %p2, align 8
  %121 = load i8, i8* %120, align 1
  %conv200 = sext i8 %121 to i32
  %cmp201 = icmp ne i32 %conv200, 45
  br i1 %cmp201, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %land.lhs.true.199
  br label %if.end.204

if.end.204:                                       ; preds = %if.then.203, %land.lhs.true.199, %if.then.195
  %122 = load i8*, i8** %p1, align 8
  %123 = load i8, i8* %122, align 1
  %conv205 = sext i8 %123 to i32
  %cmp206 = icmp ne i32 %conv205, 45
  br i1 %cmp206, label %land.lhs.true.208, label %if.end.213

land.lhs.true.208:                                ; preds = %if.end.204
  %124 = load i8*, i8** %p2, align 8
  %125 = load i8, i8* %124, align 1
  %conv209 = sext i8 %125 to i32
  %cmp210 = icmp eq i32 %conv209, 45
  br i1 %cmp210, label %if.then.212, label %if.end.213

if.then.212:                                      ; preds = %land.lhs.true.208
  br label %if.end.213

if.end.213:                                       ; preds = %if.then.212, %land.lhs.true.208, %if.end.204
  %126 = load i8*, i8** %p1, align 8
  %127 = load i8, i8* %126, align 1
  %conv214 = sext i8 %127 to i32
  %cmp215 = icmp ne i32 %conv214, 45
  br i1 %cmp215, label %land.lhs.true.217, label %if.end.222

land.lhs.true.217:                                ; preds = %if.end.213
  %128 = load i8*, i8** %p2, align 8
  %129 = load i8, i8* %128, align 1
  %conv218 = sext i8 %129 to i32
  %cmp219 = icmp ne i32 %conv218, 45
  br i1 %cmp219, label %if.then.221, label %if.end.222

if.then.221:                                      ; preds = %land.lhs.true.217
  %130 = load i32, i32* %penal.addr, align 4
  store i32 %130, i32* %pv, align 4
  br label %if.end.222

if.end.222:                                       ; preds = %if.then.221, %land.lhs.true.217, %if.end.213
  %131 = load i8*, i8** %p1, align 8
  %132 = load i8, i8* %131, align 1
  %conv223 = sext i8 %132 to i32
  %cmp224 = icmp eq i32 %conv223, 45
  br i1 %cmp224, label %land.lhs.true.226, label %if.end.231

land.lhs.true.226:                                ; preds = %if.end.222
  %133 = load i8*, i8** %p2, align 8
  %134 = load i8, i8* %133, align 1
  %conv227 = sext i8 %134 to i32
  %cmp228 = icmp eq i32 %conv227, 45
  br i1 %cmp228, label %if.then.230, label %if.end.231

if.then.230:                                      ; preds = %land.lhs.true.226
  br label %if.end.231

if.end.231:                                       ; preds = %if.then.230, %land.lhs.true.226, %if.end.222
  br label %if.end.232

if.end.232:                                       ; preds = %if.end.231, %land.lhs.true.191, %if.end.187
  %135 = load i8*, i8** %p2, align 8
  %incdec.ptr233 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %incdec.ptr233, i8** %p2, align 8
  %136 = load i8, i8* %135, align 1
  %conv234 = sext i8 %136 to i32
  %idxprom235 = sext i32 %conv234 to i64
  %137 = load i8*, i8** %p1, align 8
  %incdec.ptr236 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %incdec.ptr236, i8** %p1, align 8
  %138 = load i8, i8* %137, align 1
  %conv237 = sext i8 %138 to i32
  %idxprom238 = sext i32 %conv237 to i64
  %arrayidx239 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom238
  %arrayidx240 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx239, i32 0, i64 %idxprom235
  %139 = load i32, i32* %arrayidx240, align 4
  %conv241 = sitofp i32 %139 to double
  %140 = load i32, i32* %pv, align 4
  %conv242 = sitofp i32 %140 to double
  %mul243 = fmul double 5.000000e-01, %conv242
  %add244 = fadd double %conv241, %mul243
  %141 = load float, float* %valf, align 4
  %conv245 = fpext float %141 to double
  %add246 = fadd double %conv245, %add244
  %conv247 = fptrunc double %add246 to float
  store float %conv247, float* %valf, align 4
  %142 = load i8*, i8** %p1p, align 8
  %incdec.ptr248 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr248, i8** %p1p, align 8
  %143 = load i8*, i8** %p2p, align 8
  %incdec.ptr249 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr249, i8** %p2p, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %144 = load double, double* %deff, align 8
  %145 = load float, float* %valf, align 4
  %conv250 = fpext float %145 to double
  %mul251 = fmul double %144, %conv250
  %146 = load float, float* %val, align 4
  %conv252 = fpext float %146 to double
  %add253 = fadd double %conv252, %mul251
  %conv254 = fptrunc double %add253 to float
  store float %conv254, float* %val, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %147 = load i32, i32* %j, align 4
  %inc = add nsw i32 %147, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.255

for.inc.255:                                      ; preds = %for.end
  %148 = load i32, i32* %i, align 4
  %inc256 = add nsw i32 %148, 1
  store i32 %inc256, i32* %i, align 4
  br label %for.cond

for.end.257:                                      ; preds = %for.cond
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %150 = load float, float* %val, align 4
  %conv258 = fpext float %150 to double
  %call259 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %149, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), double %conv258)
  %151 = load float, float* %val, align 4
  ret float %151
}

; Function Attrs: nounwind uwtable
define i32 @naivepairscore11(i8* %seq1, i8* %seq2, i32 %penal) #0 {
entry:
  %seq1.addr = alloca i8*, align 8
  %seq2.addr = alloca i8*, align 8
  %penal.addr = alloca i32, align 4
  %vali = alloca i32, align 4
  %len = alloca i32, align 4
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  store i8* %seq1, i8** %seq1.addr, align 8
  store i8* %seq2, i8** %seq2.addr, align 8
  store i32 %penal, i32* %penal.addr, align 4
  %0 = load i8*, i8** %seq1.addr, align 8
  %call = call i64 @strlen(i8* %0) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %1 = load i32, i32* %len, align 4
  %add = add nsw i32 %1, 1
  %conv1 = sext i32 %add to i64
  %call2 = call noalias i8* @calloc(i64 %conv1, i64 1) #8
  store i8* %call2, i8** %s1, align 8
  %2 = load i32, i32* %len, align 4
  %add3 = add nsw i32 %2, 1
  %conv4 = sext i32 %add3 to i64
  %call5 = call noalias i8* @calloc(i64 %conv4, i64 1) #8
  store i8* %call5, i8** %s2, align 8
  store i32 0, i32* %vali, align 4
  %3 = load i8*, i8** %s1, align 8
  %4 = load i8*, i8** %s2, align 8
  %5 = load i8*, i8** %seq1.addr, align 8
  %6 = load i8*, i8** %seq2.addr, align 8
  call void @commongappickpair(i8* %3, i8* %4, i8* %5, i8* %6)
  %7 = load i8*, i8** %s1, align 8
  store i8* %7, i8** %p1, align 8
  %8 = load i8*, i8** %s2, align 8
  store i8* %8, i8** %p2, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.28, %while.end.27, %while.end, %entry
  %9 = load i8*, i8** %p1, align 8
  %10 = load i8, i8* %9, align 1
  %tobool = icmp ne i8 %10, 0
  br i1 %tobool, label %while.body, label %while.end.36

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %p1, align 8
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %cmp = icmp eq i32 %conv6, 45
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %13 = load i32, i32* %penal.addr, align 4
  %14 = load i32, i32* %vali, align 4
  %add8 = add nsw i32 %14, %13
  store i32 %add8, i32* %vali, align 4
  br label %while.cond.9

while.cond.9:                                     ; preds = %while.body.13, %if.then
  %15 = load i8*, i8** %p1, align 8
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %cmp11 = icmp eq i32 %conv10, 45
  br i1 %cmp11, label %while.body.13, label %while.end

while.body.13:                                    ; preds = %while.cond.9
  %17 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  %18 = load i8*, i8** %p2, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr14, i8** %p2, align 8
  br label %while.cond.9

while.end:                                        ; preds = %while.cond.9
  br label %while.cond

if.end:                                           ; preds = %while.body
  %19 = load i8*, i8** %p2, align 8
  %20 = load i8, i8* %19, align 1
  %conv15 = sext i8 %20 to i32
  %cmp16 = icmp eq i32 %conv15, 45
  br i1 %cmp16, label %if.then.18, label %if.end.28

if.then.18:                                       ; preds = %if.end
  %21 = load i32, i32* %penal.addr, align 4
  %22 = load i32, i32* %vali, align 4
  %add19 = add nsw i32 %22, %21
  store i32 %add19, i32* %vali, align 4
  br label %while.cond.20

while.cond.20:                                    ; preds = %while.body.24, %if.then.18
  %23 = load i8*, i8** %p2, align 8
  %24 = load i8, i8* %23, align 1
  %conv21 = sext i8 %24 to i32
  %cmp22 = icmp eq i32 %conv21, 45
  br i1 %cmp22, label %while.body.24, label %while.end.27

while.body.24:                                    ; preds = %while.cond.20
  %25 = load i8*, i8** %p1, align 8
  %incdec.ptr25 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %incdec.ptr25, i8** %p1, align 8
  %26 = load i8*, i8** %p2, align 8
  %incdec.ptr26 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr26, i8** %p2, align 8
  br label %while.cond.20

while.end.27:                                     ; preds = %while.cond.20
  br label %while.cond

if.end.28:                                        ; preds = %if.end
  %27 = load i8*, i8** %p2, align 8
  %incdec.ptr29 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %incdec.ptr29, i8** %p2, align 8
  %28 = load i8, i8* %27, align 1
  %conv30 = sext i8 %28 to i32
  %idxprom = sext i32 %conv30 to i64
  %29 = load i8*, i8** %p1, align 8
  %incdec.ptr31 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %incdec.ptr31, i8** %p1, align 8
  %30 = load i8, i8* %29, align 1
  %conv32 = sext i8 %30 to i32
  %idxprom33 = sext i32 %conv32 to i64
  %arrayidx = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom33
  %arrayidx34 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx, i32 0, i64 %idxprom
  %31 = load i32, i32* %arrayidx34, align 4
  %32 = load i32, i32* %vali, align 4
  %add35 = add nsw i32 %32, %31
  store i32 %add35, i32* %vali, align 4
  br label %while.cond

while.end.36:                                     ; preds = %while.cond
  %33 = load i8*, i8** %s1, align 8
  call void @free(i8* %33) #8
  %34 = load i8*, i8** %s2, align 8
  call void @free(i8* %34) #8
  %35 = load i32, i32* %vali, align 4
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal void @commongappickpair(i8* %r1, i8* %r2, i8* %i1, i8* %i2) #0 {
entry:
  %r1.addr = alloca i8*, align 8
  %r2.addr = alloca i8*, align 8
  %i1.addr = alloca i8*, align 8
  %i2.addr = alloca i8*, align 8
  store i8* %r1, i8** %r1.addr, align 8
  store i8* %r2, i8** %r2.addr, align 8
  store i8* %i1, i8** %i1.addr, align 8
  store i8* %i2, i8** %i2.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %i1.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %i1.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 45
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %4 = load i8*, i8** %i2.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %cmp3 = icmp eq i32 %conv2, 45
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %i1.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %i1.addr, align 8
  %7 = load i8*, i8** %i2.addr, align 8
  %incdec.ptr5 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr5, i8** %i2.addr, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %while.body
  %8 = load i8*, i8** %i1.addr, align 8
  %incdec.ptr6 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr6, i8** %i1.addr, align 8
  %9 = load i8, i8* %8, align 1
  %10 = load i8*, i8** %r1.addr, align 8
  %incdec.ptr7 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr7, i8** %r1.addr, align 8
  store i8 %9, i8* %10, align 1
  %11 = load i8*, i8** %i2.addr, align 8
  %incdec.ptr8 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr8, i8** %i2.addr, align 8
  %12 = load i8, i8* %11, align 1
  %13 = load i8*, i8** %r2.addr, align 8
  %incdec.ptr9 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr9, i8** %r2.addr, align 8
  store i8 %12, i8* %13, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load i8*, i8** %r1.addr, align 8
  store i8 0, i8* %14, align 1
  %15 = load i8*, i8** %r2.addr, align 8
  store i8 0, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define float @naivepairscore(i32 %n1, i32 %n2, i8** %seq1, i8** %seq2, double* %eff1, double* %eff2, i32 %penal) #0 {
entry:
  %n1.addr = alloca i32, align 4
  %n2.addr = alloca i32, align 4
  %seq1.addr = alloca i8**, align 8
  %seq2.addr = alloca i8**, align 8
  %eff1.addr = alloca double*, align 8
  %eff2.addr = alloca double*, align 8
  %penal.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %val = alloca float, align 4
  %vali = alloca i32, align 4
  %feff = alloca float, align 4
  %len = alloca i32, align 4
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  store i32 %n1, i32* %n1.addr, align 4
  store i32 %n2, i32* %n2.addr, align 4
  store i8** %seq1, i8*** %seq1.addr, align 8
  store i8** %seq2, i8*** %seq2.addr, align 8
  store double* %eff1, double** %eff1.addr, align 8
  store double* %eff2, double** %eff2.addr, align 8
  store i32 %penal, i32* %penal.addr, align 4
  %0 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %1) #6
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %add = add nsw i32 %2, 1
  %conv1 = sext i32 %add to i64
  %call2 = call noalias i8* @calloc(i64 %conv1, i64 1) #8
  store i8* %call2, i8** %s1, align 8
  %3 = load i32, i32* %len, align 4
  %add3 = add nsw i32 %3, 1
  %conv4 = sext i32 %add3 to i64
  %call5 = call noalias i8* @calloc(i64 %conv4, i64 1) #8
  store i8* %call5, i8** %s2, align 8
  store float 0.000000e+00, float* %val, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc.56, %entry
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %n1.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %for.body, label %for.end.58

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond.7

for.cond.7:                                       ; preds = %for.inc, %for.body
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %n2.addr, align 4
  %cmp8 = icmp slt i32 %6, %7
  br i1 %cmp8, label %for.body.10, label %for.end

for.body.10:                                      ; preds = %for.cond.7
  store i32 0, i32* %vali, align 4
  %8 = load i32, i32* %i, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load double*, double** %eff1.addr, align 8
  %arrayidx11 = getelementptr inbounds double, double* %9, i64 %idxprom
  %10 = load double, double* %arrayidx11, align 8
  %11 = load i32, i32* %j, align 4
  %idxprom12 = sext i32 %11 to i64
  %12 = load double*, double** %eff2.addr, align 8
  %arrayidx13 = getelementptr inbounds double, double* %12, i64 %idxprom12
  %13 = load double, double* %arrayidx13, align 8
  %mul = fmul double %10, %13
  %conv14 = fptrunc double %mul to float
  store float %conv14, float* %feff, align 4
  %14 = load i8*, i8** %s1, align 8
  %15 = load i8*, i8** %s2, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %16 to i64
  %17 = load i8**, i8*** %seq1.addr, align 8
  %arrayidx16 = getelementptr inbounds i8*, i8** %17, i64 %idxprom15
  %18 = load i8*, i8** %arrayidx16, align 8
  %19 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %19 to i64
  %20 = load i8**, i8*** %seq2.addr, align 8
  %arrayidx18 = getelementptr inbounds i8*, i8** %20, i64 %idxprom17
  %21 = load i8*, i8** %arrayidx18, align 8
  call void @commongappickpair(i8* %14, i8* %15, i8* %18, i8* %21)
  %22 = load i8*, i8** %s1, align 8
  store i8* %22, i8** %p1, align 8
  %23 = load i8*, i8** %s2, align 8
  store i8* %23, i8** %p2, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.42, %while.end.41, %while.end, %for.body.10
  %24 = load i8*, i8** %p1, align 8
  %25 = load i8, i8* %24, align 1
  %tobool = icmp ne i8 %25, 0
  br i1 %tobool, label %while.body, label %while.end.52

while.body:                                       ; preds = %while.cond
  %26 = load i8*, i8** %p1, align 8
  %27 = load i8, i8* %26, align 1
  %conv19 = sext i8 %27 to i32
  %cmp20 = icmp eq i32 %conv19, 45
  br i1 %cmp20, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %28 = load i32, i32* %penal.addr, align 4
  %29 = load i32, i32* %vali, align 4
  %add22 = add nsw i32 %29, %28
  store i32 %add22, i32* %vali, align 4
  br label %while.cond.23

while.cond.23:                                    ; preds = %while.body.27, %if.then
  %30 = load i8*, i8** %p1, align 8
  %31 = load i8, i8* %30, align 1
  %conv24 = sext i8 %31 to i32
  %cmp25 = icmp eq i32 %conv24, 45
  br i1 %cmp25, label %while.body.27, label %while.end

while.body.27:                                    ; preds = %while.cond.23
  %32 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  %33 = load i8*, i8** %p2, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr28, i8** %p2, align 8
  br label %while.cond.23

while.end:                                        ; preds = %while.cond.23
  br label %while.cond

if.end:                                           ; preds = %while.body
  %34 = load i8*, i8** %p2, align 8
  %35 = load i8, i8* %34, align 1
  %conv29 = sext i8 %35 to i32
  %cmp30 = icmp eq i32 %conv29, 45
  br i1 %cmp30, label %if.then.32, label %if.end.42

if.then.32:                                       ; preds = %if.end
  %36 = load i32, i32* %penal.addr, align 4
  %37 = load i32, i32* %vali, align 4
  %add33 = add nsw i32 %37, %36
  store i32 %add33, i32* %vali, align 4
  br label %while.cond.34

while.cond.34:                                    ; preds = %while.body.38, %if.then.32
  %38 = load i8*, i8** %p2, align 8
  %39 = load i8, i8* %38, align 1
  %conv35 = sext i8 %39 to i32
  %cmp36 = icmp eq i32 %conv35, 45
  br i1 %cmp36, label %while.body.38, label %while.end.41

while.body.38:                                    ; preds = %while.cond.34
  %40 = load i8*, i8** %p1, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %incdec.ptr39, i8** %p1, align 8
  %41 = load i8*, i8** %p2, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr40, i8** %p2, align 8
  br label %while.cond.34

while.end.41:                                     ; preds = %while.cond.34
  br label %while.cond

if.end.42:                                        ; preds = %if.end
  %42 = load i8*, i8** %p2, align 8
  %incdec.ptr43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr43, i8** %p2, align 8
  %43 = load i8, i8* %42, align 1
  %conv44 = sext i8 %43 to i32
  %idxprom45 = sext i32 %conv44 to i64
  %44 = load i8*, i8** %p1, align 8
  %incdec.ptr46 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %incdec.ptr46, i8** %p1, align 8
  %45 = load i8, i8* %44, align 1
  %conv47 = sext i8 %45 to i32
  %idxprom48 = sext i32 %conv47 to i64
  %arrayidx49 = getelementptr inbounds [128 x [128 x i32]], [128 x [128 x i32]]* @amino_dis, i32 0, i64 %idxprom48
  %arrayidx50 = getelementptr inbounds [128 x i32], [128 x i32]* %arrayidx49, i32 0, i64 %idxprom45
  %46 = load i32, i32* %arrayidx50, align 4
  %47 = load i32, i32* %vali, align 4
  %add51 = add nsw i32 %47, %46
  store i32 %add51, i32* %vali, align 4
  br label %while.cond

while.end.52:                                     ; preds = %while.cond
  %48 = load float, float* %feff, align 4
  %49 = load i32, i32* %vali, align 4
  %conv53 = sitofp i32 %49 to float
  %mul54 = fmul float %48, %conv53
  %50 = load float, float* %val, align 4
  %add55 = fadd float %50, %mul54
  store float %add55, float* %val, align 4
  br label %for.inc

for.inc:                                          ; preds = %while.end.52
  %51 = load i32, i32* %j, align 4
  %inc = add nsw i32 %51, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond.7

for.end:                                          ; preds = %for.cond.7
  br label %for.inc.56

for.inc.56:                                       ; preds = %for.end
  %52 = load i32, i32* %i, align 4
  %inc57 = add nsw i32 %52, 1
  store i32 %inc57, i32* %i, align 4
  br label %for.cond

for.end.58:                                       ; preds = %for.cond
  %53 = load i8*, i8** %s1, align 8
  call void @free(i8* %53) #8
  %54 = load i8*, i8** %s2, align 8
  call void @free(i8* %54) #8
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %56 = load float, float* %val, align 4
  %conv59 = fpext float %56 to double
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.36, i32 0, i32 0), double %conv59)
  %57 = load float, float* %val, align 4
  ret float %57
}

declare i8* @fgets(i8*, i32, %struct._IO_FILE*) #2

; Function Attrs: nounwind
declare i32 @__isoc99_sscanf(i8*, i8*, ...) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
