	.text
	.file	"sha512.bc"
	.globl	sha512_init_ctx
	.align	16, 0x90
	.type	sha512_init_ctx,@function
sha512_init_ctx:                        # @sha512_init_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp0:
	.cfi_def_cfa_offset 16
.Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2:
	.cfi_def_cfa_register %rbp
	movabsq	$6620516959819538809, %rax # imm = 0x5BE0CD19137E2179
	movabsq	$2270897969802886507, %rcx # imm = 0x1F83D9ABFB41BD6B
	movabsq	$-7276294671716946913, %rdx # imm = 0x9B05688C2B3E6C1F
	movabsq	$5840696475078001361, %rsi # imm = 0x510E527FADE682D1
	movabsq	$-6534734903238641935, %r8 # imm = 0xA54FF53A5F1D36F1
	movabsq	$4354685564936845355, %r9 # imm = 0x3C6EF372FE94F82B
	movabsq	$-4942790177534073029, %r10 # imm = 0xBB67AE8584CAA73B
	movabsq	$7640891576956012808, %r11 # imm = 0x6A09E667F3BCC908
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%r11, (%rdi)
	movq	-8(%rbp), %rdi
	movq	%r10, 8(%rdi)
	movq	-8(%rbp), %rdi
	movq	%r9, 16(%rdi)
	movq	-8(%rbp), %rdi
	movq	%r8, 24(%rdi)
	movq	-8(%rbp), %rdi
	movq	%rsi, 32(%rdi)
	movq	-8(%rbp), %rsi
	movq	%rdx, 40(%rsi)
	movq	-8(%rbp), %rdx
	movq	%rcx, 48(%rdx)
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	popq	%rbp
	retq
.Lfunc_end0:
	.size	sha512_init_ctx, .Lfunc_end0-sha512_init_ctx
	.cfi_endproc

	.globl	sha384_init_ctx
	.align	16, 0x90
	.type	sha384_init_ctx,@function
sha384_init_ctx:                        # @sha384_init_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp3:
	.cfi_def_cfa_offset 16
.Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp5:
	.cfi_def_cfa_register %rbp
	movabsq	$5167115440072839076, %rax # imm = 0x47B5481DBEFA4FA4
	movabsq	$-2662702644619276377, %rcx # imm = 0xDB0C2E0D64F98FA7
	movabsq	$-8163818279084223215, %rdx # imm = 0x8EB44A8768581511
	movabsq	$7436329637833083697, %rsi # imm = 0x67332667FFC00B31
	movabsq	$1526699215303891257, %r8 # imm = 0x152FECD8F70E5939
	movabsq	$-7973340178411365097, %r9 # imm = 0x9159015A3070DD17
	movabsq	$7105036623409894663, %r10 # imm = 0x629A292A367CD507
	movabsq	$-3766243637369397544, %r11 # imm = 0xCBBB9D5DC1059ED8
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%r11, (%rdi)
	movq	-8(%rbp), %rdi
	movq	%r10, 8(%rdi)
	movq	-8(%rbp), %rdi
	movq	%r9, 16(%rdi)
	movq	-8(%rbp), %rdi
	movq	%r8, 24(%rdi)
	movq	-8(%rbp), %rdi
	movq	%rsi, 32(%rdi)
	movq	-8(%rbp), %rsi
	movq	%rdx, 40(%rsi)
	movq	-8(%rbp), %rdx
	movq	%rcx, 48(%rdx)
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	popq	%rbp
	retq
.Lfunc_end1:
	.size	sha384_init_ctx, .Lfunc_end1-sha384_init_ctx
	.cfi_endproc

	.globl	sha512_read_ctx
	.align	16, 0x90
	.type	sha512_read_ctx,@function
sha512_read_ctx:                        # @sha512_read_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp6:
	.cfi_def_cfa_offset 16
.Ltmp7:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp8:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movl	$0, -20(%rbp)
.LBB2_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -20(%rbp)
	jge	.LBB2_4
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB2_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	shlq	$56, %rcx
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	andq	$65280, %rdx            # imm = 0xFF00
	shlq	$40, %rdx
	orq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	shlq	$24, %rdx
	movslq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movabsq	$4278190080, %r8        # imm = 0xFF000000
	andq	(%rdi,%rsi,8), %r8
	shlq	$8, %r8
	orq	%r8, %rdx
	orq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	shrq	$8, %rdx
	movabsq	$4278190080, %rsi       # imm = 0xFF000000
	andq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	(%rdi,%rsi,8), %rsi
	shrq	$24, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	orq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	(%rdi,%rsi,8), %rsi
	shrq	$40, %rsi
	andq	$65280, %rsi            # imm = 0xFF00
	movslq	-20(%rbp), %rdi
	movq	-8(%rbp), %r8
	movq	(%r8,%rdi,8), %rdi
	shrq	$56, %rdi
	orq	%rdi, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	set_uint64
# BB#3:                                 # %for.inc
                                        #   in Loop: Header=BB2_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB2_1
.LBB2_4:                                # %for.end
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end2:
	.size	sha512_read_ctx, .Lfunc_end2-sha512_read_ctx
	.cfi_endproc

	.align	16, 0x90
	.type	set_uint64,@function
set_uint64:                             # @set_uint64
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
.Lfunc_end3:
	.size	set_uint64, .Lfunc_end3-set_uint64
	.cfi_endproc

	.globl	sha384_read_ctx
	.align	16, 0x90
	.type	sha384_read_ctx,@function
sha384_read_ctx:                        # @sha384_read_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp12:
	.cfi_def_cfa_offset 16
.Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp14:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movl	$0, -20(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -20(%rbp)
	jge	.LBB4_4
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	shlq	$56, %rcx
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	andq	$65280, %rdx            # imm = 0xFF00
	shlq	$40, %rdx
	orq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	shlq	$24, %rdx
	movslq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movabsq	$4278190080, %r8        # imm = 0xFF000000
	andq	(%rdi,%rsi,8), %r8
	shlq	$8, %r8
	orq	%r8, %rdx
	orq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	shrq	$8, %rdx
	movabsq	$4278190080, %rsi       # imm = 0xFF000000
	andq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	(%rdi,%rsi,8), %rsi
	shrq	$24, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	orq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	(%rdi,%rsi,8), %rsi
	shrq	$40, %rsi
	andq	$65280, %rsi            # imm = 0xFF00
	movslq	-20(%rbp), %rdi
	movq	-8(%rbp), %r8
	movq	(%r8,%rdi,8), %rdi
	shrq	$56, %rdi
	orq	%rdi, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	set_uint64
# BB#3:                                 # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end4:
	.size	sha384_read_ctx, .Lfunc_end4-sha384_read_ctx
	.cfi_endproc

	.globl	sha512_finish_ctx
	.align	16, 0x90
	.type	sha512_finish_ctx,@function
sha512_finish_ctx:                      # @sha512_finish_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp15:
	.cfi_def_cfa_offset 16
.Ltmp16:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp17:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	sha512_conclude_ctx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	sha512_read_ctx
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end5:
	.size	sha512_finish_ctx, .Lfunc_end5-sha512_finish_ctx
	.cfi_endproc

	.align	16, 0x90
	.type	sha512_conclude_ctx,@function
sha512_conclude_ctx:                    # @sha512_conclude_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp18:
	.cfi_def_cfa_offset 16
.Ltmp19:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp20:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$32, %eax
	movl	$16, %ecx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	80(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	cmpq	$112, -16(%rbp)
	cmovbl	%ecx, %eax
	movslq	%eax, %rdi
	movq	%rdi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	addq	-16(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	%rdi, 64(%rdx)
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	cmpq	-16(%rbp), %rdx
	jae	.LBB6_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	addq	$1, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 72(%rcx)
.LBB6_2:                                # %if.end
	movq	-24(%rbp), %rax
	subq	$2, %rax
	movq	-8(%rbp), %rcx
	addq	$88, %rcx
	shlq	$3, %rax
	addq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	shlq	$3, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	shrq	$61, %rdx
	orq	%rdx, %rax
	shlq	$56, %rax
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %rdx
	shlq	$3, %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	shrq	$61, %rsi
	orq	%rsi, %rdx
	andq	$65280, %rdx            # imm = 0xFF00
	shlq	$40, %rdx
	orq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %rdx
	shlq	$3, %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	shrq	$61, %rsi
	orq	%rsi, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	shlq	$24, %rdx
	movq	-8(%rbp), %rsi
	movq	72(%rsi), %rsi
	shlq	$3, %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	shrq	$61, %rdi
	orq	%rdi, %rsi
	movabsq	$4278190080, %rdi       # imm = 0xFF000000
	andq	%rdi, %rsi
	shlq	$8, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	72(%rdx), %rdx
	shlq	$3, %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	shrq	$61, %rsi
	orq	%rsi, %rdx
	shrq	$8, %rdx
	movabsq	$4278190080, %rsi       # imm = 0xFF000000
	andq	%rsi, %rdx
	movq	-8(%rbp), %rsi
	movq	72(%rsi), %rsi
	shlq	$3, %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	shrq	$61, %rdi
	orq	%rdi, %rsi
	shrq	$24, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	orq	%rsi, %rdx
	movq	-8(%rbp), %rsi
	movq	72(%rsi), %rsi
	shlq	$3, %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	shrq	$61, %rdi
	orq	%rdi, %rsi
	shrq	$40, %rsi
	andq	$65280, %rsi            # imm = 0xFF00
	movq	-8(%rbp), %rdi
	movq	72(%rdi), %rdi
	shlq	$3, %rdi
	movq	-8(%rbp), %r8
	movq	64(%r8), %r8
	shrq	$61, %r8
	orq	%r8, %rdi
	shrq	$56, %rdi
	orq	%rdi, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	set_uint64
	movq	-24(%rbp), %rax
	subq	$1, %rax
	movq	-8(%rbp), %rcx
	addq	$88, %rcx
	shlq	$3, %rax
	addq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	shlq	$3, %rax
	shlq	$56, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	shlq	$3, %rdx
	andq	$65280, %rdx            # imm = 0xFF00
	shlq	$40, %rdx
	orq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	shlq	$3, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	shlq	$24, %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	shlq	$3, %rsi
	movabsq	$4278190080, %rdi       # imm = 0xFF000000
	andq	%rdi, %rsi
	shlq	$8, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	shlq	$3, %rdx
	shrq	$8, %rdx
	movabsq	$4278190080, %rsi       # imm = 0xFF000000
	andq	%rsi, %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	shlq	$3, %rsi
	shrq	$24, %rsi
	andq	$16711680, %rsi         # imm = 0xFF0000
	orq	%rsi, %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	shlq	$3, %rsi
	shrq	$40, %rsi
	andq	$65280, %rsi            # imm = 0xFF00
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	shlq	$3, %rdi
	shrq	$56, %rdi
	orq	%rdi, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rax
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	set_uint64
	movabsq	$fillbuf, %rsi
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	$88, %rcx
	addq	%rax, %rcx
	movq	-24(%rbp), %rax
	subq	$2, %rax
	shlq	$3, %rax
	subq	-16(%rbp), %rax
	movq	%rcx, %rdi
	movq	%rax, %rdx
	callq	memcpy
	movq	-8(%rbp), %rax
	addq	$88, %rax
	movq	-24(%rbp), %rcx
	shlq	$3, %rcx
	movq	-8(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	sha512_process_block
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end6:
	.size	sha512_conclude_ctx, .Lfunc_end6-sha512_conclude_ctx
	.cfi_endproc

	.globl	sha384_finish_ctx
	.align	16, 0x90
	.type	sha384_finish_ctx,@function
sha384_finish_ctx:                      # @sha384_finish_ctx
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp21:
	.cfi_def_cfa_offset 16
.Ltmp22:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp23:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	sha512_conclude_ctx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	sha384_read_ctx
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end7:
	.size	sha384_finish_ctx, .Lfunc_end7-sha384_finish_ctx
	.cfi_endproc

	.globl	sha512_stream
	.align	16, 0x90
	.type	sha512_stream,@function
sha512_stream:                          # @sha512_stream
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp24:
	.cfi_def_cfa_offset 16
.Ltmp25:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp26:
	.cfi_def_cfa_register %rbp
	subq	$416, %rsp              # imm = 0x1A0
	movl	$32840, %eax            # imm = 0x8048
	movl	%eax, %ecx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rcx, %rdi
	callq	malloc
	movq	%rax, -384(%rbp)
	cmpq	$0, -384(%rbp)
	jne	.LBB8_2
# BB#1:                                 # %if.then
	movl	$1, -4(%rbp)
	jmp	.LBB8_17
.LBB8_2:                                # %if.end
	leaq	-368(%rbp), %rdi
	callq	sha512_init_ctx
.LBB8_3:                                # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_4 Depth 2
	movq	$0, -376(%rbp)
.LBB8_4:                                # %while.body.2
                                        #   Parent Loop BB8_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$1, %eax
	movl	%eax, %esi
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %ecx
	movq	-384(%rbp), %rdx
	addq	-376(%rbp), %rdx
	subq	-376(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	%rdi, -400(%rbp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, %rdx
	movq	-400(%rbp), %rcx        # 8-byte Reload
	callq	fread
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	addq	-376(%rbp), %rax
	movq	%rax, -376(%rbp)
	cmpq	$32768, -376(%rbp)      # imm = 0x8000
	jne	.LBB8_6
# BB#5:                                 # %if.then.4
                                        #   in Loop: Header=BB8_3 Depth=1
	jmp	.LBB8_13
.LBB8_6:                                # %if.end.5
                                        #   in Loop: Header=BB8_4 Depth=2
	cmpq	$0, -392(%rbp)
	jne	.LBB8_10
# BB#7:                                 # %if.then.7
	movq	-16(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB8_9
# BB#8:                                 # %if.then.10
	movq	-384(%rbp), %rdi
	callq	free
	movl	$1, -4(%rbp)
	jmp	.LBB8_17
.LBB8_9:                                # %if.end.11
	jmp	.LBB8_14
.LBB8_10:                               # %if.end.12
                                        #   in Loop: Header=BB8_4 Depth=2
	movq	-16(%rbp), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB8_12
# BB#11:                                # %if.then.15
	jmp	.LBB8_14
.LBB8_12:                               # %if.end.16
                                        #   in Loop: Header=BB8_4 Depth=2
	jmp	.LBB8_4
.LBB8_13:                               # %while.end
                                        #   in Loop: Header=BB8_3 Depth=1
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %esi
	leaq	-368(%rbp), %rdx
	movq	-384(%rbp), %rdi
	callq	sha512_process_block
	jmp	.LBB8_3
.LBB8_14:                               # %process_partial_block
	cmpq	$0, -376(%rbp)
	jbe	.LBB8_16
# BB#15:                                # %if.then.18
	leaq	-368(%rbp), %rdx
	movq	-384(%rbp), %rdi
	movq	-376(%rbp), %rsi
	callq	sha512_process_bytes
.LBB8_16:                               # %if.end.19
	leaq	-368(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	sha512_finish_ctx
	movq	-384(%rbp), %rdi
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	free
	movl	$0, -4(%rbp)
.LBB8_17:                               # %return
	movl	-4(%rbp), %eax
	addq	$416, %rsp              # imm = 0x1A0
	popq	%rbp
	retq
.Lfunc_end8:
	.size	sha512_stream, .Lfunc_end8-sha512_stream
	.cfi_endproc

	.globl	sha512_process_block
	.align	16, 0x90
	.type	sha512_process_block,@function
sha512_process_block:                   # @sha512_process_block
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp27:
	.cfi_def_cfa_offset 16
.Ltmp28:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp29:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1400, %rsp             # imm = 0x578
.Ltmp30:
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rsi
	shrq	$3, %rsi
	shlq	$3, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -48(%rbp)
	movq	-32(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -184(%rbp)
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	%rdx, -192(%rbp)
	movq	-32(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	%rdx, -200(%rbp)
	movq	-32(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	%rdx, -208(%rbp)
	movq	-32(%rbp), %rdx
	movq	32(%rdx), %rdx
	movq	%rdx, -216(%rbp)
	movq	-32(%rbp), %rdx
	movq	40(%rdx), %rdx
	movq	%rdx, -224(%rbp)
	movq	-32(%rbp), %rdx
	movq	48(%rdx), %rdx
	movq	%rdx, -232(%rbp)
	movq	-32(%rbp), %rdx
	movq	56(%rdx), %rdx
	movq	%rdx, -240(%rbp)
	movq	-24(%rbp), %rdx
	movq	%rdx, -248(%rbp)
	movq	-32(%rbp), %rdx
	movq	64(%rdx), %rdx
	addq	-248(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	%rdx, 64(%rsi)
	movq	-32(%rbp), %rdx
	movq	72(%rdx), %rdx
	movq	-24(%rbp), %rsi
	shrq	$31, %rsi
	shrq	$31, %rsi
	shrq	$2, %rsi
	movq	-32(%rbp), %rdi
	movq	64(%rdi), %rdi
	cmpq	-248(%rbp), %rdi
	setb	%al
	andb	$1, %al
	movzbl	%al, %ecx
	movslq	%ecx, %rdi
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	movq	-32(%rbp), %rsi
	movq	%rdx, 72(%rsi)
.LBB9_1:                                # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_3 Depth 2
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jae	.LBB9_167
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB9_1 Depth=1
	movl	$0, -252(%rbp)
.LBB9_3:                                # %for.cond
                                        #   Parent Loop BB9_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -252(%rbp)
	jge	.LBB9_6
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB9_3 Depth=2
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	shlq	$56, %rax
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rcx
	andq	$65280, %rcx            # imm = 0xFF00
	shlq	$40, %rcx
	orq	%rcx, %rax
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shlq	$24, %rcx
	movq	-40(%rbp), %rdx
	movabsq	$4278190080, %rsi       # imm = 0xFF000000
	andq	(%rdx), %rsi
	shlq	$8, %rsi
	orq	%rsi, %rcx
	orq	%rcx, %rax
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rcx
	shrq	$8, %rcx
	movabsq	$4278190080, %rdx       # imm = 0xFF000000
	andq	%rdx, %rcx
	movq	-40(%rbp), %rdx
	movq	(%rdx), %rdx
	shrq	$24, %rdx
	andq	$16711680, %rdx         # imm = 0xFF0000
	orq	%rdx, %rcx
	movq	-40(%rbp), %rdx
	movq	(%rdx), %rdx
	shrq	$40, %rdx
	andq	$65280, %rdx            # imm = 0xFF00
	movq	-40(%rbp), %rsi
	movq	(%rsi), %rsi
	shrq	$56, %rsi
	orq	%rsi, %rdx
	orq	%rdx, %rcx
	orq	%rcx, %rax
	movslq	-252(%rbp), %rcx
	movq	%rax, -176(%rbp,%rcx,8)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -40(%rbp)
# BB#5:                                 # %for.inc
                                        #   in Loop: Header=BB9_3 Depth=2
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB9_3
.LBB9_6:                                # %for.end
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_7
.LBB9_7:                                # %do.body
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -264(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants, %rsi
	addq	-176(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -272(%rbp)
	movq	-208(%rbp), %rax
	addq	-272(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-264(%rbp), %rax
	addq	-272(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#8:                                 # %do.end
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_9
.LBB9_9:                                # %do.body.88
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -280(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+8, %rsi
	addq	-168(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -288(%rbp)
	movq	-200(%rbp), %rax
	addq	-288(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-280(%rbp), %rax
	addq	-288(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#10:                                # %do.end.128
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_11
.LBB9_11:                               # %do.body.129
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -296(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+16, %rsi
	addq	-160(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	addq	-304(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-296(%rbp), %rax
	addq	-304(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#12:                                # %do.end.169
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_13
.LBB9_13:                               # %do.body.170
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -312(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+24, %rsi
	addq	-152(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -320(%rbp)
	movq	-184(%rbp), %rax
	addq	-320(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-312(%rbp), %rax
	addq	-320(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#14:                                # %do.end.210
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_15
.LBB9_15:                               # %do.body.211
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -328(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+32, %rsi
	addq	-144(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -336(%rbp)
	movq	-240(%rbp), %rax
	addq	-336(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-328(%rbp), %rax
	addq	-336(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#16:                                # %do.end.251
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_17
.LBB9_17:                               # %do.body.252
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -344(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+40, %rsi
	addq	-136(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -352(%rbp)
	movq	-232(%rbp), %rax
	addq	-352(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-344(%rbp), %rax
	addq	-352(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#18:                                # %do.end.292
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_19
.LBB9_19:                               # %do.body.293
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -360(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+48, %rsi
	addq	-128(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -368(%rbp)
	movq	-224(%rbp), %rax
	addq	-368(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-360(%rbp), %rax
	addq	-368(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#20:                                # %do.end.333
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_21
.LBB9_21:                               # %do.body.334
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -376(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+56, %rsi
	addq	-120(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -384(%rbp)
	movq	-216(%rbp), %rax
	addq	-384(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-376(%rbp), %rax
	addq	-384(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#22:                                # %do.end.374
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_23
.LBB9_23:                               # %do.body.375
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -392(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+64, %rsi
	addq	-112(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -400(%rbp)
	movq	-208(%rbp), %rax
	addq	-400(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-392(%rbp), %rax
	addq	-400(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#24:                                # %do.end.415
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_25
.LBB9_25:                               # %do.body.416
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -408(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+72, %rsi
	addq	-104(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -416(%rbp)
	movq	-200(%rbp), %rax
	addq	-416(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-408(%rbp), %rax
	addq	-416(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#26:                                # %do.end.456
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_27
.LBB9_27:                               # %do.body.457
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -424(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+80, %rsi
	addq	-96(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -432(%rbp)
	movq	-192(%rbp), %rax
	addq	-432(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-424(%rbp), %rax
	addq	-432(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#28:                                # %do.end.497
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_29
.LBB9_29:                               # %do.body.498
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -440(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+88, %rsi
	addq	-88(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -448(%rbp)
	movq	-184(%rbp), %rax
	addq	-448(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-440(%rbp), %rax
	addq	-448(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#30:                                # %do.end.538
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_31
.LBB9_31:                               # %do.body.539
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -456(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+96, %rsi
	addq	-80(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -464(%rbp)
	movq	-240(%rbp), %rax
	addq	-464(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-456(%rbp), %rax
	addq	-464(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#32:                                # %do.end.579
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_33
.LBB9_33:                               # %do.body.580
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -472(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+104, %rsi
	addq	-72(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -480(%rbp)
	movq	-232(%rbp), %rax
	addq	-480(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-472(%rbp), %rax
	addq	-480(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#34:                                # %do.end.620
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_35
.LBB9_35:                               # %do.body.621
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -488(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+112, %rsi
	addq	-64(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -496(%rbp)
	movq	-224(%rbp), %rax
	addq	-496(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-488(%rbp), %rax
	addq	-496(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#36:                                # %do.end.661
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_37
.LBB9_37:                               # %do.body.662
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -504(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+120, %rsi
	addq	-56(%rbp), %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -512(%rbp)
	movq	-216(%rbp), %rax
	addq	-512(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-504(%rbp), %rax
	addq	-512(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#38:                                # %do.end.702
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_39
.LBB9_39:                               # %do.body.703
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -520(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+128, %rsi
	movq	-176(%rbp), %rdi
	movq	-64(%rbp), %r8
	shlq	$45, %r8
	movq	-64(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-64(%rbp), %r9
	shlq	$3, %r9
	movq	-64(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-64(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-104(%rbp), %r9
	movq	-168(%rbp), %r10
	shlq	$63, %r10
	movq	-168(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-168(%rbp), %r11
	shlq	$56, %r11
	movq	-168(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-168(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -176(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -528(%rbp)
	movq	-208(%rbp), %rax
	addq	-528(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-520(%rbp), %rax
	addq	-528(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#40:                                # %do.end.776
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_41
.LBB9_41:                               # %do.body.777
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -536(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+136, %rsi
	movq	-168(%rbp), %rdi
	movq	-56(%rbp), %r8
	shlq	$45, %r8
	movq	-56(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-56(%rbp), %r9
	shlq	$3, %r9
	movq	-56(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-56(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-96(%rbp), %r9
	movq	-160(%rbp), %r10
	shlq	$63, %r10
	movq	-160(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-160(%rbp), %r11
	shlq	$56, %r11
	movq	-160(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-160(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -168(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -544(%rbp)
	movq	-200(%rbp), %rax
	addq	-544(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-536(%rbp), %rax
	addq	-544(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#42:                                # %do.end.850
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_43
.LBB9_43:                               # %do.body.851
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -552(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+144, %rsi
	movq	-160(%rbp), %rdi
	movq	-176(%rbp), %r8
	shlq	$45, %r8
	movq	-176(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-176(%rbp), %r9
	shlq	$3, %r9
	movq	-176(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-176(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-88(%rbp), %r9
	movq	-152(%rbp), %r10
	shlq	$63, %r10
	movq	-152(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-152(%rbp), %r11
	shlq	$56, %r11
	movq	-152(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-152(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -160(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -560(%rbp)
	movq	-192(%rbp), %rax
	addq	-560(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-552(%rbp), %rax
	addq	-560(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#44:                                # %do.end.924
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_45
.LBB9_45:                               # %do.body.925
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -568(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+152, %rsi
	movq	-152(%rbp), %rdi
	movq	-168(%rbp), %r8
	shlq	$45, %r8
	movq	-168(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-168(%rbp), %r9
	shlq	$3, %r9
	movq	-168(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-168(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-80(%rbp), %r9
	movq	-144(%rbp), %r10
	shlq	$63, %r10
	movq	-144(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-144(%rbp), %r11
	shlq	$56, %r11
	movq	-144(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-144(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -152(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -576(%rbp)
	movq	-184(%rbp), %rax
	addq	-576(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-568(%rbp), %rax
	addq	-576(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#46:                                # %do.end.998
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_47
.LBB9_47:                               # %do.body.999
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -584(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+160, %rsi
	movq	-144(%rbp), %rdi
	movq	-160(%rbp), %r8
	shlq	$45, %r8
	movq	-160(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-160(%rbp), %r9
	shlq	$3, %r9
	movq	-160(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-160(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-72(%rbp), %r9
	movq	-136(%rbp), %r10
	shlq	$63, %r10
	movq	-136(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-136(%rbp), %r11
	shlq	$56, %r11
	movq	-136(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-136(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -144(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -592(%rbp)
	movq	-240(%rbp), %rax
	addq	-592(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-584(%rbp), %rax
	addq	-592(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#48:                                # %do.end.1072
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_49
.LBB9_49:                               # %do.body.1073
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -600(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+168, %rsi
	movq	-136(%rbp), %rdi
	movq	-152(%rbp), %r8
	shlq	$45, %r8
	movq	-152(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-152(%rbp), %r9
	shlq	$3, %r9
	movq	-152(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-152(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-64(%rbp), %r9
	movq	-128(%rbp), %r10
	shlq	$63, %r10
	movq	-128(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-128(%rbp), %r11
	shlq	$56, %r11
	movq	-128(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-128(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -136(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -608(%rbp)
	movq	-232(%rbp), %rax
	addq	-608(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-600(%rbp), %rax
	addq	-608(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#50:                                # %do.end.1146
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_51
.LBB9_51:                               # %do.body.1147
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -616(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+176, %rsi
	movq	-128(%rbp), %rdi
	movq	-144(%rbp), %r8
	shlq	$45, %r8
	movq	-144(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-144(%rbp), %r9
	shlq	$3, %r9
	movq	-144(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-144(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-56(%rbp), %r9
	movq	-120(%rbp), %r10
	shlq	$63, %r10
	movq	-120(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-120(%rbp), %r11
	shlq	$56, %r11
	movq	-120(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-120(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -128(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -624(%rbp)
	movq	-224(%rbp), %rax
	addq	-624(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-616(%rbp), %rax
	addq	-624(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#52:                                # %do.end.1220
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_53
.LBB9_53:                               # %do.body.1221
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -632(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+184, %rsi
	movq	-120(%rbp), %rdi
	movq	-136(%rbp), %r8
	shlq	$45, %r8
	movq	-136(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-136(%rbp), %r9
	shlq	$3, %r9
	movq	-136(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-136(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-176(%rbp), %r9
	movq	-112(%rbp), %r10
	shlq	$63, %r10
	movq	-112(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-112(%rbp), %r11
	shlq	$56, %r11
	movq	-112(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-112(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -120(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -640(%rbp)
	movq	-216(%rbp), %rax
	addq	-640(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-632(%rbp), %rax
	addq	-640(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#54:                                # %do.end.1294
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_55
.LBB9_55:                               # %do.body.1295
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -648(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+192, %rsi
	movq	-112(%rbp), %rdi
	movq	-128(%rbp), %r8
	shlq	$45, %r8
	movq	-128(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-128(%rbp), %r9
	shlq	$3, %r9
	movq	-128(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-128(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-168(%rbp), %r9
	movq	-104(%rbp), %r10
	shlq	$63, %r10
	movq	-104(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-104(%rbp), %r11
	shlq	$56, %r11
	movq	-104(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-104(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -112(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -656(%rbp)
	movq	-208(%rbp), %rax
	addq	-656(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-648(%rbp), %rax
	addq	-656(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#56:                                # %do.end.1368
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_57
.LBB9_57:                               # %do.body.1369
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -664(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+200, %rsi
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %r8
	shlq	$45, %r8
	movq	-120(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-120(%rbp), %r9
	shlq	$3, %r9
	movq	-120(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-120(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-160(%rbp), %r9
	movq	-96(%rbp), %r10
	shlq	$63, %r10
	movq	-96(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-96(%rbp), %r11
	shlq	$56, %r11
	movq	-96(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-96(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -104(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -672(%rbp)
	movq	-200(%rbp), %rax
	addq	-672(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-664(%rbp), %rax
	addq	-672(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#58:                                # %do.end.1442
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_59
.LBB9_59:                               # %do.body.1443
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -680(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+208, %rsi
	movq	-96(%rbp), %rdi
	movq	-112(%rbp), %r8
	shlq	$45, %r8
	movq	-112(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-112(%rbp), %r9
	shlq	$3, %r9
	movq	-112(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-112(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-152(%rbp), %r9
	movq	-88(%rbp), %r10
	shlq	$63, %r10
	movq	-88(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-88(%rbp), %r11
	shlq	$56, %r11
	movq	-88(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-88(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -96(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -688(%rbp)
	movq	-192(%rbp), %rax
	addq	-688(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-680(%rbp), %rax
	addq	-688(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#60:                                # %do.end.1516
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_61
.LBB9_61:                               # %do.body.1517
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -696(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+216, %rsi
	movq	-88(%rbp), %rdi
	movq	-104(%rbp), %r8
	shlq	$45, %r8
	movq	-104(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-104(%rbp), %r9
	shlq	$3, %r9
	movq	-104(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-104(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-144(%rbp), %r9
	movq	-80(%rbp), %r10
	shlq	$63, %r10
	movq	-80(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-80(%rbp), %r11
	shlq	$56, %r11
	movq	-80(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-80(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -88(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -704(%rbp)
	movq	-184(%rbp), %rax
	addq	-704(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-696(%rbp), %rax
	addq	-704(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#62:                                # %do.end.1590
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_63
.LBB9_63:                               # %do.body.1591
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -712(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+224, %rsi
	movq	-80(%rbp), %rdi
	movq	-96(%rbp), %r8
	shlq	$45, %r8
	movq	-96(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-96(%rbp), %r9
	shlq	$3, %r9
	movq	-96(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-96(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-136(%rbp), %r9
	movq	-72(%rbp), %r10
	shlq	$63, %r10
	movq	-72(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-72(%rbp), %r11
	shlq	$56, %r11
	movq	-72(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-72(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -80(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -720(%rbp)
	movq	-240(%rbp), %rax
	addq	-720(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-712(%rbp), %rax
	addq	-720(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#64:                                # %do.end.1664
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_65
.LBB9_65:                               # %do.body.1665
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -728(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+232, %rsi
	movq	-72(%rbp), %rdi
	movq	-88(%rbp), %r8
	shlq	$45, %r8
	movq	-88(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-88(%rbp), %r9
	shlq	$3, %r9
	movq	-88(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-88(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-128(%rbp), %r9
	movq	-64(%rbp), %r10
	shlq	$63, %r10
	movq	-64(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-64(%rbp), %r11
	shlq	$56, %r11
	movq	-64(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-64(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -72(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -736(%rbp)
	movq	-232(%rbp), %rax
	addq	-736(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-728(%rbp), %rax
	addq	-736(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#66:                                # %do.end.1738
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_67
.LBB9_67:                               # %do.body.1739
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -744(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+240, %rsi
	movq	-64(%rbp), %rdi
	movq	-80(%rbp), %r8
	shlq	$45, %r8
	movq	-80(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-80(%rbp), %r9
	shlq	$3, %r9
	movq	-80(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-80(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-120(%rbp), %r9
	movq	-56(%rbp), %r10
	shlq	$63, %r10
	movq	-56(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-56(%rbp), %r11
	shlq	$56, %r11
	movq	-56(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-56(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -64(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -752(%rbp)
	movq	-224(%rbp), %rax
	addq	-752(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-744(%rbp), %rax
	addq	-752(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#68:                                # %do.end.1812
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_69
.LBB9_69:                               # %do.body.1813
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -760(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+248, %rsi
	movq	-56(%rbp), %rdi
	movq	-72(%rbp), %r8
	shlq	$45, %r8
	movq	-72(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-72(%rbp), %r9
	shlq	$3, %r9
	movq	-72(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-72(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-112(%rbp), %r9
	movq	-176(%rbp), %r10
	shlq	$63, %r10
	movq	-176(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-176(%rbp), %r11
	shlq	$56, %r11
	movq	-176(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-176(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -56(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -768(%rbp)
	movq	-216(%rbp), %rax
	addq	-768(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-760(%rbp), %rax
	addq	-768(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#70:                                # %do.end.1886
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_71
.LBB9_71:                               # %do.body.1887
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -776(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+256, %rsi
	movq	-176(%rbp), %rdi
	movq	-64(%rbp), %r8
	shlq	$45, %r8
	movq	-64(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-64(%rbp), %r9
	shlq	$3, %r9
	movq	-64(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-64(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-104(%rbp), %r9
	movq	-168(%rbp), %r10
	shlq	$63, %r10
	movq	-168(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-168(%rbp), %r11
	shlq	$56, %r11
	movq	-168(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-168(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -176(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -784(%rbp)
	movq	-208(%rbp), %rax
	addq	-784(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-776(%rbp), %rax
	addq	-784(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#72:                                # %do.end.1960
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_73
.LBB9_73:                               # %do.body.1961
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -792(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+264, %rsi
	movq	-168(%rbp), %rdi
	movq	-56(%rbp), %r8
	shlq	$45, %r8
	movq	-56(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-56(%rbp), %r9
	shlq	$3, %r9
	movq	-56(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-56(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-96(%rbp), %r9
	movq	-160(%rbp), %r10
	shlq	$63, %r10
	movq	-160(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-160(%rbp), %r11
	shlq	$56, %r11
	movq	-160(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-160(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -168(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -800(%rbp)
	movq	-200(%rbp), %rax
	addq	-800(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-792(%rbp), %rax
	addq	-800(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#74:                                # %do.end.2034
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_75
.LBB9_75:                               # %do.body.2035
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -808(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+272, %rsi
	movq	-160(%rbp), %rdi
	movq	-176(%rbp), %r8
	shlq	$45, %r8
	movq	-176(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-176(%rbp), %r9
	shlq	$3, %r9
	movq	-176(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-176(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-88(%rbp), %r9
	movq	-152(%rbp), %r10
	shlq	$63, %r10
	movq	-152(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-152(%rbp), %r11
	shlq	$56, %r11
	movq	-152(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-152(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -160(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -816(%rbp)
	movq	-192(%rbp), %rax
	addq	-816(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-808(%rbp), %rax
	addq	-816(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#76:                                # %do.end.2108
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_77
.LBB9_77:                               # %do.body.2109
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -824(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+280, %rsi
	movq	-152(%rbp), %rdi
	movq	-168(%rbp), %r8
	shlq	$45, %r8
	movq	-168(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-168(%rbp), %r9
	shlq	$3, %r9
	movq	-168(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-168(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-80(%rbp), %r9
	movq	-144(%rbp), %r10
	shlq	$63, %r10
	movq	-144(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-144(%rbp), %r11
	shlq	$56, %r11
	movq	-144(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-144(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -152(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -832(%rbp)
	movq	-184(%rbp), %rax
	addq	-832(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-824(%rbp), %rax
	addq	-832(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#78:                                # %do.end.2182
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_79
.LBB9_79:                               # %do.body.2183
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -840(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+288, %rsi
	movq	-144(%rbp), %rdi
	movq	-160(%rbp), %r8
	shlq	$45, %r8
	movq	-160(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-160(%rbp), %r9
	shlq	$3, %r9
	movq	-160(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-160(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-72(%rbp), %r9
	movq	-136(%rbp), %r10
	shlq	$63, %r10
	movq	-136(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-136(%rbp), %r11
	shlq	$56, %r11
	movq	-136(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-136(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -144(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -848(%rbp)
	movq	-240(%rbp), %rax
	addq	-848(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-840(%rbp), %rax
	addq	-848(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#80:                                # %do.end.2256
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_81
.LBB9_81:                               # %do.body.2257
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -856(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+296, %rsi
	movq	-136(%rbp), %rdi
	movq	-152(%rbp), %r8
	shlq	$45, %r8
	movq	-152(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-152(%rbp), %r9
	shlq	$3, %r9
	movq	-152(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-152(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-64(%rbp), %r9
	movq	-128(%rbp), %r10
	shlq	$63, %r10
	movq	-128(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-128(%rbp), %r11
	shlq	$56, %r11
	movq	-128(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-128(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -136(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -864(%rbp)
	movq	-232(%rbp), %rax
	addq	-864(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-856(%rbp), %rax
	addq	-864(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#82:                                # %do.end.2330
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_83
.LBB9_83:                               # %do.body.2331
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -872(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+304, %rsi
	movq	-128(%rbp), %rdi
	movq	-144(%rbp), %r8
	shlq	$45, %r8
	movq	-144(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-144(%rbp), %r9
	shlq	$3, %r9
	movq	-144(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-144(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-56(%rbp), %r9
	movq	-120(%rbp), %r10
	shlq	$63, %r10
	movq	-120(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-120(%rbp), %r11
	shlq	$56, %r11
	movq	-120(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-120(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -128(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -880(%rbp)
	movq	-224(%rbp), %rax
	addq	-880(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-872(%rbp), %rax
	addq	-880(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#84:                                # %do.end.2404
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_85
.LBB9_85:                               # %do.body.2405
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -888(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+312, %rsi
	movq	-120(%rbp), %rdi
	movq	-136(%rbp), %r8
	shlq	$45, %r8
	movq	-136(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-136(%rbp), %r9
	shlq	$3, %r9
	movq	-136(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-136(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-176(%rbp), %r9
	movq	-112(%rbp), %r10
	shlq	$63, %r10
	movq	-112(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-112(%rbp), %r11
	shlq	$56, %r11
	movq	-112(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-112(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -120(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -896(%rbp)
	movq	-216(%rbp), %rax
	addq	-896(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-888(%rbp), %rax
	addq	-896(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#86:                                # %do.end.2478
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_87
.LBB9_87:                               # %do.body.2479
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -904(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+320, %rsi
	movq	-112(%rbp), %rdi
	movq	-128(%rbp), %r8
	shlq	$45, %r8
	movq	-128(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-128(%rbp), %r9
	shlq	$3, %r9
	movq	-128(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-128(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-168(%rbp), %r9
	movq	-104(%rbp), %r10
	shlq	$63, %r10
	movq	-104(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-104(%rbp), %r11
	shlq	$56, %r11
	movq	-104(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-104(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -112(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -912(%rbp)
	movq	-208(%rbp), %rax
	addq	-912(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-904(%rbp), %rax
	addq	-912(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#88:                                # %do.end.2552
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_89
.LBB9_89:                               # %do.body.2553
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -920(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+328, %rsi
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %r8
	shlq	$45, %r8
	movq	-120(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-120(%rbp), %r9
	shlq	$3, %r9
	movq	-120(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-120(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-160(%rbp), %r9
	movq	-96(%rbp), %r10
	shlq	$63, %r10
	movq	-96(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-96(%rbp), %r11
	shlq	$56, %r11
	movq	-96(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-96(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -104(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -928(%rbp)
	movq	-200(%rbp), %rax
	addq	-928(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-920(%rbp), %rax
	addq	-928(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#90:                                # %do.end.2626
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_91
.LBB9_91:                               # %do.body.2627
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -936(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+336, %rsi
	movq	-96(%rbp), %rdi
	movq	-112(%rbp), %r8
	shlq	$45, %r8
	movq	-112(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-112(%rbp), %r9
	shlq	$3, %r9
	movq	-112(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-112(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-152(%rbp), %r9
	movq	-88(%rbp), %r10
	shlq	$63, %r10
	movq	-88(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-88(%rbp), %r11
	shlq	$56, %r11
	movq	-88(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-88(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -96(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -944(%rbp)
	movq	-192(%rbp), %rax
	addq	-944(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-936(%rbp), %rax
	addq	-944(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#92:                                # %do.end.2700
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_93
.LBB9_93:                               # %do.body.2701
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -952(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+344, %rsi
	movq	-88(%rbp), %rdi
	movq	-104(%rbp), %r8
	shlq	$45, %r8
	movq	-104(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-104(%rbp), %r9
	shlq	$3, %r9
	movq	-104(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-104(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-144(%rbp), %r9
	movq	-80(%rbp), %r10
	shlq	$63, %r10
	movq	-80(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-80(%rbp), %r11
	shlq	$56, %r11
	movq	-80(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-80(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -88(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -960(%rbp)
	movq	-184(%rbp), %rax
	addq	-960(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-952(%rbp), %rax
	addq	-960(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#94:                                # %do.end.2774
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_95
.LBB9_95:                               # %do.body.2775
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -968(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+352, %rsi
	movq	-80(%rbp), %rdi
	movq	-96(%rbp), %r8
	shlq	$45, %r8
	movq	-96(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-96(%rbp), %r9
	shlq	$3, %r9
	movq	-96(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-96(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-136(%rbp), %r9
	movq	-72(%rbp), %r10
	shlq	$63, %r10
	movq	-72(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-72(%rbp), %r11
	shlq	$56, %r11
	movq	-72(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-72(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -80(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -976(%rbp)
	movq	-240(%rbp), %rax
	addq	-976(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-968(%rbp), %rax
	addq	-976(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#96:                                # %do.end.2848
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_97
.LBB9_97:                               # %do.body.2849
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -984(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+360, %rsi
	movq	-72(%rbp), %rdi
	movq	-88(%rbp), %r8
	shlq	$45, %r8
	movq	-88(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-88(%rbp), %r9
	shlq	$3, %r9
	movq	-88(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-88(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-128(%rbp), %r9
	movq	-64(%rbp), %r10
	shlq	$63, %r10
	movq	-64(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-64(%rbp), %r11
	shlq	$56, %r11
	movq	-64(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-64(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -72(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -992(%rbp)
	movq	-232(%rbp), %rax
	addq	-992(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-984(%rbp), %rax
	addq	-992(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#98:                                # %do.end.2922
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_99
.LBB9_99:                               # %do.body.2923
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1000(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+368, %rsi
	movq	-64(%rbp), %rdi
	movq	-80(%rbp), %r8
	shlq	$45, %r8
	movq	-80(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-80(%rbp), %r9
	shlq	$3, %r9
	movq	-80(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-80(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-120(%rbp), %r9
	movq	-56(%rbp), %r10
	shlq	$63, %r10
	movq	-56(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-56(%rbp), %r11
	shlq	$56, %r11
	movq	-56(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-56(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -64(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1008(%rbp)
	movq	-224(%rbp), %rax
	addq	-1008(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-1000(%rbp), %rax
	addq	-1008(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#100:                               # %do.end.2996
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_101
.LBB9_101:                              # %do.body.2997
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1016(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+376, %rsi
	movq	-56(%rbp), %rdi
	movq	-72(%rbp), %r8
	shlq	$45, %r8
	movq	-72(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-72(%rbp), %r9
	shlq	$3, %r9
	movq	-72(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-72(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-112(%rbp), %r9
	movq	-176(%rbp), %r10
	shlq	$63, %r10
	movq	-176(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-176(%rbp), %r11
	shlq	$56, %r11
	movq	-176(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-176(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -56(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1024(%rbp)
	movq	-216(%rbp), %rax
	addq	-1024(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-1016(%rbp), %rax
	addq	-1024(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#102:                               # %do.end.3070
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_103
.LBB9_103:                              # %do.body.3071
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1032(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+384, %rsi
	movq	-176(%rbp), %rdi
	movq	-64(%rbp), %r8
	shlq	$45, %r8
	movq	-64(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-64(%rbp), %r9
	shlq	$3, %r9
	movq	-64(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-64(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-104(%rbp), %r9
	movq	-168(%rbp), %r10
	shlq	$63, %r10
	movq	-168(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-168(%rbp), %r11
	shlq	$56, %r11
	movq	-168(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-168(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -176(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1040(%rbp)
	movq	-208(%rbp), %rax
	addq	-1040(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-1032(%rbp), %rax
	addq	-1040(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#104:                               # %do.end.3144
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_105
.LBB9_105:                              # %do.body.3145
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1048(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+392, %rsi
	movq	-168(%rbp), %rdi
	movq	-56(%rbp), %r8
	shlq	$45, %r8
	movq	-56(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-56(%rbp), %r9
	shlq	$3, %r9
	movq	-56(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-56(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-96(%rbp), %r9
	movq	-160(%rbp), %r10
	shlq	$63, %r10
	movq	-160(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-160(%rbp), %r11
	shlq	$56, %r11
	movq	-160(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-160(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -168(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1056(%rbp)
	movq	-200(%rbp), %rax
	addq	-1056(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-1048(%rbp), %rax
	addq	-1056(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#106:                               # %do.end.3218
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_107
.LBB9_107:                              # %do.body.3219
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1064(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+400, %rsi
	movq	-160(%rbp), %rdi
	movq	-176(%rbp), %r8
	shlq	$45, %r8
	movq	-176(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-176(%rbp), %r9
	shlq	$3, %r9
	movq	-176(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-176(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-88(%rbp), %r9
	movq	-152(%rbp), %r10
	shlq	$63, %r10
	movq	-152(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-152(%rbp), %r11
	shlq	$56, %r11
	movq	-152(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-152(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -160(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1072(%rbp)
	movq	-192(%rbp), %rax
	addq	-1072(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-1064(%rbp), %rax
	addq	-1072(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#108:                               # %do.end.3292
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_109
.LBB9_109:                              # %do.body.3293
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1080(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+408, %rsi
	movq	-152(%rbp), %rdi
	movq	-168(%rbp), %r8
	shlq	$45, %r8
	movq	-168(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-168(%rbp), %r9
	shlq	$3, %r9
	movq	-168(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-168(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-80(%rbp), %r9
	movq	-144(%rbp), %r10
	shlq	$63, %r10
	movq	-144(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-144(%rbp), %r11
	shlq	$56, %r11
	movq	-144(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-144(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -152(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1088(%rbp)
	movq	-184(%rbp), %rax
	addq	-1088(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-1080(%rbp), %rax
	addq	-1088(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#110:                               # %do.end.3366
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_111
.LBB9_111:                              # %do.body.3367
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1096(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+416, %rsi
	movq	-144(%rbp), %rdi
	movq	-160(%rbp), %r8
	shlq	$45, %r8
	movq	-160(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-160(%rbp), %r9
	shlq	$3, %r9
	movq	-160(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-160(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-72(%rbp), %r9
	movq	-136(%rbp), %r10
	shlq	$63, %r10
	movq	-136(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-136(%rbp), %r11
	shlq	$56, %r11
	movq	-136(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-136(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -144(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1104(%rbp)
	movq	-240(%rbp), %rax
	addq	-1104(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-1096(%rbp), %rax
	addq	-1104(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#112:                               # %do.end.3440
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_113
.LBB9_113:                              # %do.body.3441
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1112(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+424, %rsi
	movq	-136(%rbp), %rdi
	movq	-152(%rbp), %r8
	shlq	$45, %r8
	movq	-152(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-152(%rbp), %r9
	shlq	$3, %r9
	movq	-152(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-152(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-64(%rbp), %r9
	movq	-128(%rbp), %r10
	shlq	$63, %r10
	movq	-128(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-128(%rbp), %r11
	shlq	$56, %r11
	movq	-128(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-128(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -136(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1120(%rbp)
	movq	-232(%rbp), %rax
	addq	-1120(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-1112(%rbp), %rax
	addq	-1120(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#114:                               # %do.end.3514
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_115
.LBB9_115:                              # %do.body.3515
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1128(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+432, %rsi
	movq	-128(%rbp), %rdi
	movq	-144(%rbp), %r8
	shlq	$45, %r8
	movq	-144(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-144(%rbp), %r9
	shlq	$3, %r9
	movq	-144(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-144(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-56(%rbp), %r9
	movq	-120(%rbp), %r10
	shlq	$63, %r10
	movq	-120(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-120(%rbp), %r11
	shlq	$56, %r11
	movq	-120(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-120(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -128(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1136(%rbp)
	movq	-224(%rbp), %rax
	addq	-1136(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-1128(%rbp), %rax
	addq	-1136(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#116:                               # %do.end.3588
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_117
.LBB9_117:                              # %do.body.3589
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1144(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+440, %rsi
	movq	-120(%rbp), %rdi
	movq	-136(%rbp), %r8
	shlq	$45, %r8
	movq	-136(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-136(%rbp), %r9
	shlq	$3, %r9
	movq	-136(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-136(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-176(%rbp), %r9
	movq	-112(%rbp), %r10
	shlq	$63, %r10
	movq	-112(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-112(%rbp), %r11
	shlq	$56, %r11
	movq	-112(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-112(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -120(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1152(%rbp)
	movq	-216(%rbp), %rax
	addq	-1152(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-1144(%rbp), %rax
	addq	-1152(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#118:                               # %do.end.3662
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_119
.LBB9_119:                              # %do.body.3663
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1160(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+448, %rsi
	movq	-112(%rbp), %rdi
	movq	-128(%rbp), %r8
	shlq	$45, %r8
	movq	-128(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-128(%rbp), %r9
	shlq	$3, %r9
	movq	-128(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-128(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-168(%rbp), %r9
	movq	-104(%rbp), %r10
	shlq	$63, %r10
	movq	-104(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-104(%rbp), %r11
	shlq	$56, %r11
	movq	-104(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-104(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -112(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1168(%rbp)
	movq	-208(%rbp), %rax
	addq	-1168(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-1160(%rbp), %rax
	addq	-1168(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#120:                               # %do.end.3736
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_121
.LBB9_121:                              # %do.body.3737
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1176(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+456, %rsi
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %r8
	shlq	$45, %r8
	movq	-120(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-120(%rbp), %r9
	shlq	$3, %r9
	movq	-120(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-120(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-160(%rbp), %r9
	movq	-96(%rbp), %r10
	shlq	$63, %r10
	movq	-96(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-96(%rbp), %r11
	shlq	$56, %r11
	movq	-96(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-96(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -104(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1184(%rbp)
	movq	-200(%rbp), %rax
	addq	-1184(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-1176(%rbp), %rax
	addq	-1184(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#122:                               # %do.end.3810
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_123
.LBB9_123:                              # %do.body.3811
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1192(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+464, %rsi
	movq	-96(%rbp), %rdi
	movq	-112(%rbp), %r8
	shlq	$45, %r8
	movq	-112(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-112(%rbp), %r9
	shlq	$3, %r9
	movq	-112(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-112(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-152(%rbp), %r9
	movq	-88(%rbp), %r10
	shlq	$63, %r10
	movq	-88(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-88(%rbp), %r11
	shlq	$56, %r11
	movq	-88(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-88(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -96(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1200(%rbp)
	movq	-192(%rbp), %rax
	addq	-1200(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-1192(%rbp), %rax
	addq	-1200(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#124:                               # %do.end.3884
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_125
.LBB9_125:                              # %do.body.3885
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1208(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+472, %rsi
	movq	-88(%rbp), %rdi
	movq	-104(%rbp), %r8
	shlq	$45, %r8
	movq	-104(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-104(%rbp), %r9
	shlq	$3, %r9
	movq	-104(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-104(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-144(%rbp), %r9
	movq	-80(%rbp), %r10
	shlq	$63, %r10
	movq	-80(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-80(%rbp), %r11
	shlq	$56, %r11
	movq	-80(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-80(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -88(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1216(%rbp)
	movq	-184(%rbp), %rax
	addq	-1216(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-1208(%rbp), %rax
	addq	-1216(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#126:                               # %do.end.3958
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_127
.LBB9_127:                              # %do.body.3959
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1224(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+480, %rsi
	movq	-80(%rbp), %rdi
	movq	-96(%rbp), %r8
	shlq	$45, %r8
	movq	-96(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-96(%rbp), %r9
	shlq	$3, %r9
	movq	-96(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-96(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-136(%rbp), %r9
	movq	-72(%rbp), %r10
	shlq	$63, %r10
	movq	-72(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-72(%rbp), %r11
	shlq	$56, %r11
	movq	-72(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-72(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -80(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1232(%rbp)
	movq	-240(%rbp), %rax
	addq	-1232(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-1224(%rbp), %rax
	addq	-1232(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#128:                               # %do.end.4032
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_129
.LBB9_129:                              # %do.body.4033
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1240(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+488, %rsi
	movq	-72(%rbp), %rdi
	movq	-88(%rbp), %r8
	shlq	$45, %r8
	movq	-88(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-88(%rbp), %r9
	shlq	$3, %r9
	movq	-88(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-88(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-128(%rbp), %r9
	movq	-64(%rbp), %r10
	shlq	$63, %r10
	movq	-64(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-64(%rbp), %r11
	shlq	$56, %r11
	movq	-64(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-64(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -72(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1248(%rbp)
	movq	-232(%rbp), %rax
	addq	-1248(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-1240(%rbp), %rax
	addq	-1248(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#130:                               # %do.end.4106
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_131
.LBB9_131:                              # %do.body.4107
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1256(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+496, %rsi
	movq	-64(%rbp), %rdi
	movq	-80(%rbp), %r8
	shlq	$45, %r8
	movq	-80(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-80(%rbp), %r9
	shlq	$3, %r9
	movq	-80(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-80(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-120(%rbp), %r9
	movq	-56(%rbp), %r10
	shlq	$63, %r10
	movq	-56(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-56(%rbp), %r11
	shlq	$56, %r11
	movq	-56(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-56(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -64(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1264(%rbp)
	movq	-224(%rbp), %rax
	addq	-1264(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-1256(%rbp), %rax
	addq	-1264(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#132:                               # %do.end.4180
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_133
.LBB9_133:                              # %do.body.4181
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1272(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+504, %rsi
	movq	-56(%rbp), %rdi
	movq	-72(%rbp), %r8
	shlq	$45, %r8
	movq	-72(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-72(%rbp), %r9
	shlq	$3, %r9
	movq	-72(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-72(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-112(%rbp), %r9
	movq	-176(%rbp), %r10
	shlq	$63, %r10
	movq	-176(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-176(%rbp), %r11
	shlq	$56, %r11
	movq	-176(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-176(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -56(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1280(%rbp)
	movq	-216(%rbp), %rax
	addq	-1280(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-1272(%rbp), %rax
	addq	-1280(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#134:                               # %do.end.4254
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_135
.LBB9_135:                              # %do.body.4255
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1288(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+512, %rsi
	movq	-176(%rbp), %rdi
	movq	-64(%rbp), %r8
	shlq	$45, %r8
	movq	-64(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-64(%rbp), %r9
	shlq	$3, %r9
	movq	-64(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-64(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-104(%rbp), %r9
	movq	-168(%rbp), %r10
	shlq	$63, %r10
	movq	-168(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-168(%rbp), %r11
	shlq	$56, %r11
	movq	-168(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-168(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -176(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1296(%rbp)
	movq	-208(%rbp), %rax
	addq	-1296(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-1288(%rbp), %rax
	addq	-1296(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#136:                               # %do.end.4328
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_137
.LBB9_137:                              # %do.body.4329
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1304(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+520, %rsi
	movq	-168(%rbp), %rdi
	movq	-56(%rbp), %r8
	shlq	$45, %r8
	movq	-56(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-56(%rbp), %r9
	shlq	$3, %r9
	movq	-56(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-56(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-96(%rbp), %r9
	movq	-160(%rbp), %r10
	shlq	$63, %r10
	movq	-160(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-160(%rbp), %r11
	shlq	$56, %r11
	movq	-160(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-160(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -168(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1312(%rbp)
	movq	-200(%rbp), %rax
	addq	-1312(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-1304(%rbp), %rax
	addq	-1312(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#138:                               # %do.end.4402
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_139
.LBB9_139:                              # %do.body.4403
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1320(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+528, %rsi
	movq	-160(%rbp), %rdi
	movq	-176(%rbp), %r8
	shlq	$45, %r8
	movq	-176(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-176(%rbp), %r9
	shlq	$3, %r9
	movq	-176(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-176(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-88(%rbp), %r9
	movq	-152(%rbp), %r10
	shlq	$63, %r10
	movq	-152(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-152(%rbp), %r11
	shlq	$56, %r11
	movq	-152(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-152(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -160(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1328(%rbp)
	movq	-192(%rbp), %rax
	addq	-1328(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-1320(%rbp), %rax
	addq	-1328(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#140:                               # %do.end.4476
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_141
.LBB9_141:                              # %do.body.4477
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1336(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+536, %rsi
	movq	-152(%rbp), %rdi
	movq	-168(%rbp), %r8
	shlq	$45, %r8
	movq	-168(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-168(%rbp), %r9
	shlq	$3, %r9
	movq	-168(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-168(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-80(%rbp), %r9
	movq	-144(%rbp), %r10
	shlq	$63, %r10
	movq	-144(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-144(%rbp), %r11
	shlq	$56, %r11
	movq	-144(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-144(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -152(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1344(%rbp)
	movq	-184(%rbp), %rax
	addq	-1344(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-1336(%rbp), %rax
	addq	-1344(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#142:                               # %do.end.4550
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_143
.LBB9_143:                              # %do.body.4551
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1352(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+544, %rsi
	movq	-144(%rbp), %rdi
	movq	-160(%rbp), %r8
	shlq	$45, %r8
	movq	-160(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-160(%rbp), %r9
	shlq	$3, %r9
	movq	-160(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-160(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-72(%rbp), %r9
	movq	-136(%rbp), %r10
	shlq	$63, %r10
	movq	-136(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-136(%rbp), %r11
	shlq	$56, %r11
	movq	-136(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-136(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -144(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1360(%rbp)
	movq	-240(%rbp), %rax
	addq	-1360(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-1352(%rbp), %rax
	addq	-1360(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#144:                               # %do.end.4624
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_145
.LBB9_145:                              # %do.body.4625
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1368(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+552, %rsi
	movq	-136(%rbp), %rdi
	movq	-152(%rbp), %r8
	shlq	$45, %r8
	movq	-152(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-152(%rbp), %r9
	shlq	$3, %r9
	movq	-152(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-152(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-64(%rbp), %r9
	movq	-128(%rbp), %r10
	shlq	$63, %r10
	movq	-128(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-128(%rbp), %r11
	shlq	$56, %r11
	movq	-128(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-128(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -136(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1376(%rbp)
	movq	-232(%rbp), %rax
	addq	-1376(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-1368(%rbp), %rax
	addq	-1376(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#146:                               # %do.end.4698
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_147
.LBB9_147:                              # %do.body.4699
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1384(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+560, %rsi
	movq	-128(%rbp), %rdi
	movq	-144(%rbp), %r8
	shlq	$45, %r8
	movq	-144(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-144(%rbp), %r9
	shlq	$3, %r9
	movq	-144(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-144(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-56(%rbp), %r9
	movq	-120(%rbp), %r10
	shlq	$63, %r10
	movq	-120(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-120(%rbp), %r11
	shlq	$56, %r11
	movq	-120(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-120(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -128(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1392(%rbp)
	movq	-224(%rbp), %rax
	addq	-1392(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-1384(%rbp), %rax
	addq	-1392(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#148:                               # %do.end.4772
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_149
.LBB9_149:                              # %do.body.4773
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1400(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+568, %rsi
	movq	-120(%rbp), %rdi
	movq	-136(%rbp), %r8
	shlq	$45, %r8
	movq	-136(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-136(%rbp), %r9
	shlq	$3, %r9
	movq	-136(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-136(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-176(%rbp), %r9
	movq	-112(%rbp), %r10
	shlq	$63, %r10
	movq	-112(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-112(%rbp), %r11
	shlq	$56, %r11
	movq	-112(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-112(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -120(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1408(%rbp)
	movq	-216(%rbp), %rax
	addq	-1408(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-1400(%rbp), %rax
	addq	-1408(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#150:                               # %do.end.4846
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_151
.LBB9_151:                              # %do.body.4847
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-184(%rbp), %rax
	shlq	$36, %rax
	movq	-184(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-184(%rbp), %rcx
	shlq	$30, %rcx
	movq	-184(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$25, %rdx
	movq	-184(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-184(%rbp), %rcx
	andq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	orq	-192(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1416(%rbp)
	movq	-240(%rbp), %rax
	movq	-216(%rbp), %rcx
	shlq	$50, %rcx
	movq	-216(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$46, %rdx
	movq	-216(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	shlq	$23, %rsi
	movq	-216(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	movq	-224(%rbp), %rdi
	xorq	-232(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+576, %rsi
	movq	-112(%rbp), %rdi
	movq	-128(%rbp), %r8
	shlq	$45, %r8
	movq	-128(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-128(%rbp), %r9
	shlq	$3, %r9
	movq	-128(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-128(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-168(%rbp), %r9
	movq	-104(%rbp), %r10
	shlq	$63, %r10
	movq	-104(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-104(%rbp), %r11
	shlq	$56, %r11
	movq	-104(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-104(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -112(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1424(%rbp)
	movq	-208(%rbp), %rax
	addq	-1424(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-1416(%rbp), %rax
	addq	-1424(%rbp), %rax
	movq	%rax, -240(%rbp)
# BB#152:                               # %do.end.4920
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_153
.LBB9_153:                              # %do.body.4921
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-240(%rbp), %rax
	shlq	$36, %rax
	movq	-240(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-240(%rbp), %rcx
	shlq	$30, %rcx
	movq	-240(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$25, %rdx
	movq	-240(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-240(%rbp), %rcx
	andq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	orq	-184(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1432(%rbp)
	movq	-232(%rbp), %rax
	movq	-208(%rbp), %rcx
	shlq	$50, %rcx
	movq	-208(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$46, %rdx
	movq	-208(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-208(%rbp), %rsi
	shlq	$23, %rsi
	movq	-208(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	xorq	-224(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+584, %rsi
	movq	-104(%rbp), %rdi
	movq	-120(%rbp), %r8
	shlq	$45, %r8
	movq	-120(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-120(%rbp), %r9
	shlq	$3, %r9
	movq	-120(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-120(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-160(%rbp), %r9
	movq	-96(%rbp), %r10
	shlq	$63, %r10
	movq	-96(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-96(%rbp), %r11
	shlq	$56, %r11
	movq	-96(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-96(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -104(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1440(%rbp)
	movq	-200(%rbp), %rax
	addq	-1440(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-1432(%rbp), %rax
	addq	-1440(%rbp), %rax
	movq	%rax, -232(%rbp)
# BB#154:                               # %do.end.4994
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_155
.LBB9_155:                              # %do.body.4995
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-232(%rbp), %rax
	shlq	$36, %rax
	movq	-232(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-232(%rbp), %rcx
	shlq	$30, %rcx
	movq	-232(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$25, %rdx
	movq	-232(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-232(%rbp), %rcx
	andq	-240(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	orq	-240(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1448(%rbp)
	movq	-224(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$50, %rcx
	movq	-200(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$46, %rdx
	movq	-200(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-200(%rbp), %rsi
	shlq	$23, %rsi
	movq	-200(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	movq	-208(%rbp), %rdi
	xorq	-216(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+592, %rsi
	movq	-96(%rbp), %rdi
	movq	-112(%rbp), %r8
	shlq	$45, %r8
	movq	-112(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-112(%rbp), %r9
	shlq	$3, %r9
	movq	-112(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-112(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-152(%rbp), %r9
	movq	-88(%rbp), %r10
	shlq	$63, %r10
	movq	-88(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-88(%rbp), %r11
	shlq	$56, %r11
	movq	-88(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-88(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -96(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1456(%rbp)
	movq	-192(%rbp), %rax
	addq	-1456(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-1448(%rbp), %rax
	addq	-1456(%rbp), %rax
	movq	%rax, -224(%rbp)
# BB#156:                               # %do.end.5068
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_157
.LBB9_157:                              # %do.body.5069
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-224(%rbp), %rax
	shlq	$36, %rax
	movq	-224(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-224(%rbp), %rcx
	shlq	$30, %rcx
	movq	-224(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$25, %rdx
	movq	-224(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-224(%rbp), %rcx
	andq	-232(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	orq	-232(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1464(%rbp)
	movq	-216(%rbp), %rax
	movq	-192(%rbp), %rcx
	shlq	$50, %rcx
	movq	-192(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$46, %rdx
	movq	-192(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	shlq	$23, %rsi
	movq	-192(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	xorq	-208(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+600, %rsi
	movq	-88(%rbp), %rdi
	movq	-104(%rbp), %r8
	shlq	$45, %r8
	movq	-104(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-104(%rbp), %r9
	shlq	$3, %r9
	movq	-104(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-104(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-144(%rbp), %r9
	movq	-80(%rbp), %r10
	shlq	$63, %r10
	movq	-80(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-80(%rbp), %r11
	shlq	$56, %r11
	movq	-80(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-80(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -88(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1472(%rbp)
	movq	-184(%rbp), %rax
	addq	-1472(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-1464(%rbp), %rax
	addq	-1472(%rbp), %rax
	movq	%rax, -216(%rbp)
# BB#158:                               # %do.end.5142
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_159
.LBB9_159:                              # %do.body.5143
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-216(%rbp), %rax
	shlq	$36, %rax
	movq	-216(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-216(%rbp), %rcx
	shlq	$30, %rcx
	movq	-216(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-216(%rbp), %rdx
	shlq	$25, %rdx
	movq	-216(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-216(%rbp), %rcx
	andq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	-216(%rbp), %rsi
	orq	-224(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1480(%rbp)
	movq	-208(%rbp), %rax
	movq	-184(%rbp), %rcx
	shlq	$50, %rcx
	movq	-184(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	shlq	$46, %rdx
	movq	-184(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-184(%rbp), %rsi
	shlq	$23, %rsi
	movq	-184(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi
	xorq	-200(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+608, %rsi
	movq	-80(%rbp), %rdi
	movq	-96(%rbp), %r8
	shlq	$45, %r8
	movq	-96(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-96(%rbp), %r9
	shlq	$3, %r9
	movq	-96(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-96(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-136(%rbp), %r9
	movq	-72(%rbp), %r10
	shlq	$63, %r10
	movq	-72(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-72(%rbp), %r11
	shlq	$56, %r11
	movq	-72(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-72(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -80(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1488(%rbp)
	movq	-240(%rbp), %rax
	addq	-1488(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-1480(%rbp), %rax
	addq	-1488(%rbp), %rax
	movq	%rax, -208(%rbp)
# BB#160:                               # %do.end.5216
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_161
.LBB9_161:                              # %do.body.5217
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-208(%rbp), %rax
	shlq	$36, %rax
	movq	-208(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-208(%rbp), %rcx
	shlq	$30, %rcx
	movq	-208(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-208(%rbp), %rdx
	shlq	$25, %rdx
	movq	-208(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-208(%rbp), %rcx
	andq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdx
	movq	-208(%rbp), %rsi
	orq	-216(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1496(%rbp)
	movq	-200(%rbp), %rax
	movq	-240(%rbp), %rcx
	shlq	$50, %rcx
	movq	-240(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	shlq	$46, %rdx
	movq	-240(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-240(%rbp), %rsi
	shlq	$23, %rsi
	movq	-240(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-184(%rbp), %rdi
	xorq	-192(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+616, %rsi
	movq	-72(%rbp), %rdi
	movq	-88(%rbp), %r8
	shlq	$45, %r8
	movq	-88(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-88(%rbp), %r9
	shlq	$3, %r9
	movq	-88(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-88(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-128(%rbp), %r9
	movq	-64(%rbp), %r10
	shlq	$63, %r10
	movq	-64(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-64(%rbp), %r11
	shlq	$56, %r11
	movq	-64(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-64(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -72(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1504(%rbp)
	movq	-232(%rbp), %rax
	addq	-1504(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-1496(%rbp), %rax
	addq	-1504(%rbp), %rax
	movq	%rax, -200(%rbp)
# BB#162:                               # %do.end.5290
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_163
.LBB9_163:                              # %do.body.5291
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-200(%rbp), %rax
	shlq	$36, %rax
	movq	-200(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-200(%rbp), %rcx
	shlq	$30, %rcx
	movq	-200(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-200(%rbp), %rdx
	shlq	$25, %rdx
	movq	-200(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-200(%rbp), %rcx
	andq	-208(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	-200(%rbp), %rsi
	orq	-208(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1512(%rbp)
	movq	-192(%rbp), %rax
	movq	-232(%rbp), %rcx
	shlq	$50, %rcx
	movq	-232(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-232(%rbp), %rdx
	shlq	$46, %rdx
	movq	-232(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-232(%rbp), %rsi
	shlq	$23, %rsi
	movq	-232(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-184(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdi
	xorq	-184(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+624, %rsi
	movq	-64(%rbp), %rdi
	movq	-80(%rbp), %r8
	shlq	$45, %r8
	movq	-80(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-80(%rbp), %r9
	shlq	$3, %r9
	movq	-80(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-80(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-120(%rbp), %r9
	movq	-56(%rbp), %r10
	shlq	$63, %r10
	movq	-56(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-56(%rbp), %r11
	shlq	$56, %r11
	movq	-56(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-56(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -64(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1520(%rbp)
	movq	-224(%rbp), %rax
	addq	-1520(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-1512(%rbp), %rax
	addq	-1520(%rbp), %rax
	movq	%rax, -192(%rbp)
# BB#164:                               # %do.end.5364
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_165
.LBB9_165:                              # %do.body.5365
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-192(%rbp), %rax
	shlq	$36, %rax
	movq	-192(%rbp), %rcx
	shrq	$28, %rcx
	orq	%rcx, %rax
	movq	-192(%rbp), %rcx
	shlq	$30, %rcx
	movq	-192(%rbp), %rdx
	shrq	$34, %rdx
	orq	%rdx, %rcx
	movq	-192(%rbp), %rdx
	shlq	$25, %rdx
	movq	-192(%rbp), %rsi
	shrq	$39, %rsi
	orq	%rsi, %rdx
	xorq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	-192(%rbp), %rcx
	andq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-192(%rbp), %rsi
	orq	-200(%rbp), %rsi
	andq	%rsi, %rdx
	orq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1528(%rbp)
	movq	-184(%rbp), %rax
	movq	-224(%rbp), %rcx
	shlq	$50, %rcx
	movq	-224(%rbp), %rdx
	shrq	$14, %rdx
	orq	%rdx, %rcx
	movq	-224(%rbp), %rdx
	shlq	$46, %rdx
	movq	-224(%rbp), %rsi
	shrq	$18, %rsi
	orq	%rsi, %rdx
	movq	-224(%rbp), %rsi
	shlq	$23, %rsi
	movq	-224(%rbp), %rdi
	shrq	$41, %rdi
	orq	%rdi, %rsi
	xorq	%rsi, %rdx
	xorq	%rdx, %rcx
	movq	-240(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	-232(%rbp), %rdi
	xorq	-240(%rbp), %rdi
	andq	%rdi, %rsi
	xorq	%rsi, %rdx
	movq	sha512_round_constants+632, %rsi
	movq	-56(%rbp), %rdi
	movq	-72(%rbp), %r8
	shlq	$45, %r8
	movq	-72(%rbp), %r9
	shrq	$19, %r9
	orq	%r9, %r8
	movq	-72(%rbp), %r9
	shlq	$3, %r9
	movq	-72(%rbp), %r10
	shrq	$61, %r10
	orq	%r10, %r9
	movq	-72(%rbp), %r10
	shrq	$6, %r10
	xorq	%r10, %r9
	xorq	%r9, %r8
	movq	-112(%rbp), %r9
	movq	-176(%rbp), %r10
	shlq	$63, %r10
	movq	-176(%rbp), %r11
	shrq	$1, %r11
	orq	%r11, %r10
	movq	-176(%rbp), %r11
	shlq	$56, %r11
	movq	-176(%rbp), %rbx
	shrq	$8, %rbx
	orq	%rbx, %r11
	movq	-176(%rbp), %rbx
	shrq	$7, %rbx
	xorq	%rbx, %r11
	xorq	%r11, %r10
	addq	%r10, %r9
	addq	%r9, %r8
	addq	%r8, %rdi
	movq	%rdi, -56(%rbp)
	addq	%rdi, %rsi
	addq	%rsi, %rdx
	addq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -1536(%rbp)
	movq	-216(%rbp), %rax
	addq	-1536(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-1528(%rbp), %rax
	addq	-1536(%rbp), %rax
	movq	%rax, -184(%rbp)
# BB#166:                               # %do.end.5438
                                        #   in Loop: Header=BB9_1 Depth=1
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	addq	-184(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	%rax, -184(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	addq	-192(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	%rax, -192(%rbp)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	addq	-200(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	%rax, -200(%rbp)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	addq	-208(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	%rax, -208(%rbp)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	addq	-216(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	%rax, -216(%rbp)
	movq	-32(%rbp), %rax
	movq	40(%rax), %rax
	addq	-224(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	%rax, -224(%rbp)
	movq	-32(%rbp), %rax
	movq	48(%rax), %rax
	addq	-232(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	%rax, -232(%rbp)
	movq	-32(%rbp), %rax
	movq	56(%rax), %rax
	addq	-240(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	%rax, -240(%rbp)
	jmp	.LBB9_1
.LBB9_167:                              # %while.end
	addq	$1400, %rsp             # imm = 0x578
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end9:
	.size	sha512_process_block, .Lfunc_end9-sha512_process_block
	.cfi_endproc

	.globl	sha512_process_bytes
	.align	16, 0x90
	.type	sha512_process_bytes,@function
sha512_process_bytes:                   # @sha512_process_bytes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp31:
	.cfi_def_cfa_offset 16
.Ltmp32:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp33:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	cmpq	$0, 80(%rdx)
	je	.LBB10_7
# BB#1:                                 # %if.then
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	80(%rdx), %rdx
	movq	%rdx, -32(%rbp)
	subq	-32(%rbp), %rcx
	cmpq	-16(%rbp), %rcx
	jbe	.LBB10_3
# BB#2:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB10_4
.LBB10_3:                               # %cond.false
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %ecx
	subq	-32(%rbp), %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
.LBB10_4:                               # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	$88, %rcx
	addq	%rax, %rcx
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	%rcx, %rdi
	callq	memcpy
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	80(%rcx), %rax
	movq	%rax, 80(%rcx)
	movq	-24(%rbp), %rax
	cmpq	$128, 80(%rax)
	jbe	.LBB10_6
# BB#5:                                 # %if.then.9
	movq	-24(%rbp), %rax
	addq	$88, %rax
	movq	-24(%rbp), %rcx
	movq	80(%rcx), %rcx
	andq	$-128, %rcx
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	sha512_process_block
	movq	-24(%rbp), %rax
	movq	80(%rax), %rcx
	andq	$127, %rcx
	movq	%rcx, 80(%rax)
	movq	-24(%rbp), %rax
	addq	$88, %rax
	movq	-32(%rbp), %rcx
	addq	-40(%rbp), %rcx
	andq	$-128, %rcx
	movq	-24(%rbp), %rdx
	addq	$88, %rdx
	addq	%rcx, %rdx
	movq	-24(%rbp), %rcx
	movq	80(%rcx), %rcx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movq	%rcx, %rdx
	callq	memcpy
.LBB10_6:                               # %if.end
	movq	-8(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -16(%rbp)
.LBB10_7:                               # %if.end.23
	cmpq	$128, -16(%rbp)
	jb	.LBB10_15
# BB#8:                                 # %if.then.25
	movq	-8(%rbp), %rax
	andq	$7, %rax
	cmpq	$0, %rax
	je	.LBB10_13
# BB#9:                                 # %if.then.27
	jmp	.LBB10_10
.LBB10_10:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$128, -16(%rbp)
	jbe	.LBB10_12
# BB#11:                                # %while.body
                                        #   in Loop: Header=BB10_10 Depth=1
	movl	$128, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	addq	$88, %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, %rdi
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	memcpy
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	callq	sha512_process_block
	movq	-8(%rbp), %rcx
	addq	$128, %rcx
	movq	%rcx, -8(%rbp)
	movq	-16(%rbp), %rcx
	subq	$128, %rcx
	movq	%rcx, -16(%rbp)
	jmp	.LBB10_10
.LBB10_12:                              # %while.end
	jmp	.LBB10_14
.LBB10_13:                              # %if.else
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rax
	andq	$-128, %rax
	movq	-24(%rbp), %rdx
	movq	%rax, %rsi
	callq	sha512_process_block
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	andq	$-128, %rdx
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	andq	$127, %rax
	movq	%rax, -16(%rbp)
.LBB10_14:                              # %if.end.36
	jmp	.LBB10_15
.LBB10_15:                              # %if.end.37
	cmpq	$0, -16(%rbp)
	jbe	.LBB10_19
# BB#16:                                # %if.then.39
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	$88, %rcx
	addq	%rax, %rcx
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	%rcx, %rdi
	callq	memcpy
	movq	-16(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
	cmpq	$128, -48(%rbp)
	jb	.LBB10_18
# BB#17:                                # %if.then.47
	movl	$128, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rcx
	addq	$88, %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, %rdi
	callq	sha512_process_block
	movq	-48(%rbp), %rcx
	subq	$128, %rcx
	movq	%rcx, -48(%rbp)
	movq	-24(%rbp), %rcx
	addq	$88, %rcx
	movq	-24(%rbp), %rdx
	addq	$88, %rdx
	addq	$128, %rdx
	movq	-48(%rbp), %rsi
	movq	%rcx, %rdi
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	-80(%rbp), %rdx         # 8-byte Reload
	callq	memcpy
.LBB10_18:                              # %if.end.54
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 80(%rcx)
.LBB10_19:                              # %if.end.56
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end10:
	.size	sha512_process_bytes, .Lfunc_end10-sha512_process_bytes
	.cfi_endproc

	.globl	sha384_stream
	.align	16, 0x90
	.type	sha384_stream,@function
sha384_stream:                          # @sha384_stream
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp34:
	.cfi_def_cfa_offset 16
.Ltmp35:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp36:
	.cfi_def_cfa_register %rbp
	subq	$416, %rsp              # imm = 0x1A0
	movl	$32840, %eax            # imm = 0x8048
	movl	%eax, %ecx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rcx, %rdi
	callq	malloc
	movq	%rax, -384(%rbp)
	cmpq	$0, -384(%rbp)
	jne	.LBB11_2
# BB#1:                                 # %if.then
	movl	$1, -4(%rbp)
	jmp	.LBB11_17
.LBB11_2:                               # %if.end
	leaq	-368(%rbp), %rdi
	callq	sha384_init_ctx
.LBB11_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movq	$0, -376(%rbp)
.LBB11_4:                               # %while.body.2
                                        #   Parent Loop BB11_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$1, %eax
	movl	%eax, %esi
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %ecx
	movq	-384(%rbp), %rdx
	addq	-376(%rbp), %rdx
	subq	-376(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	%rdi, -400(%rbp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rcx, %rdx
	movq	-400(%rbp), %rcx        # 8-byte Reload
	callq	fread
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	addq	-376(%rbp), %rax
	movq	%rax, -376(%rbp)
	cmpq	$32768, -376(%rbp)      # imm = 0x8000
	jne	.LBB11_6
# BB#5:                                 # %if.then.4
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_13
.LBB11_6:                               # %if.end.5
                                        #   in Loop: Header=BB11_4 Depth=2
	cmpq	$0, -392(%rbp)
	jne	.LBB11_10
# BB#7:                                 # %if.then.7
	movq	-16(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB11_9
# BB#8:                                 # %if.then.10
	movq	-384(%rbp), %rdi
	callq	free
	movl	$1, -4(%rbp)
	jmp	.LBB11_17
.LBB11_9:                               # %if.end.11
	jmp	.LBB11_14
.LBB11_10:                              # %if.end.12
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	-16(%rbp), %rdi
	callq	feof
	cmpl	$0, %eax
	je	.LBB11_12
# BB#11:                                # %if.then.15
	jmp	.LBB11_14
.LBB11_12:                              # %if.end.16
                                        #   in Loop: Header=BB11_4 Depth=2
	jmp	.LBB11_4
.LBB11_13:                              # %while.end
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	$32768, %eax            # imm = 0x8000
	movl	%eax, %esi
	leaq	-368(%rbp), %rdx
	movq	-384(%rbp), %rdi
	callq	sha512_process_block
	jmp	.LBB11_3
.LBB11_14:                              # %process_partial_block
	cmpq	$0, -376(%rbp)
	jbe	.LBB11_16
# BB#15:                                # %if.then.18
	leaq	-368(%rbp), %rdx
	movq	-384(%rbp), %rdi
	movq	-376(%rbp), %rsi
	callq	sha512_process_bytes
.LBB11_16:                              # %if.end.19
	leaq	-368(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	sha384_finish_ctx
	movq	-384(%rbp), %rdi
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	free
	movl	$0, -4(%rbp)
.LBB11_17:                              # %return
	movl	-4(%rbp), %eax
	addq	$416, %rsp              # imm = 0x1A0
	popq	%rbp
	retq
.Lfunc_end11:
	.size	sha384_stream, .Lfunc_end11-sha384_stream
	.cfi_endproc

	.globl	sha512_buffer
	.align	16, 0x90
	.type	sha512_buffer,@function
sha512_buffer:                          # @sha512_buffer
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp37:
	.cfi_def_cfa_offset 16
.Ltmp38:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp39:
	.cfi_def_cfa_register %rbp
	subq	$368, %rsp              # imm = 0x170
	leaq	-368(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rax, %rdi
	callq	sha512_init_ctx
	leaq	-368(%rbp), %rdx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	sha512_process_bytes
	leaq	-368(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	sha512_finish_ctx
	addq	$368, %rsp              # imm = 0x170
	popq	%rbp
	retq
.Lfunc_end12:
	.size	sha512_buffer, .Lfunc_end12-sha512_buffer
	.cfi_endproc

	.globl	sha384_buffer
	.align	16, 0x90
	.type	sha384_buffer,@function
sha384_buffer:                          # @sha384_buffer
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp40:
	.cfi_def_cfa_offset 16
.Ltmp41:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp42:
	.cfi_def_cfa_register %rbp
	subq	$368, %rsp              # imm = 0x170
	leaq	-368(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rax, %rdi
	callq	sha384_init_ctx
	leaq	-368(%rbp), %rdx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	sha512_process_bytes
	leaq	-368(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	sha384_finish_ctx
	addq	$368, %rsp              # imm = 0x170
	popq	%rbp
	retq
.Lfunc_end13:
	.size	sha384_buffer, .Lfunc_end13-sha384_buffer
	.cfi_endproc

	.type	sha512_round_constants,@object # @sha512_round_constants
	.section	.rodata,"a",@progbits
	.align	16
sha512_round_constants:
	.quad	4794697086780616226     # 0x428a2f98d728ae22
	.quad	8158064640168781261     # 0x7137449123ef65cd
	.quad	-5349999486874862801    # 0xb5c0fbcfec4d3b2f
	.quad	-1606136188198331460    # 0xe9b5dba58189dbbc
	.quad	4131703408338449720     # 0x3956c25bf348b538
	.quad	6480981068601479193     # 0x59f111f1b605d019
	.quad	-7908458776815382629    # 0x923f82a4af194f9b
	.quad	-6116909921290321640    # 0xab1c5ed5da6d8118
	.quad	-2880145864133508542    # 0xd807aa98a3030242
	.quad	1334009975649890238     # 0x12835b0145706fbe
	.quad	2608012711638119052     # 0x243185be4ee4b28c
	.quad	6128411473006802146     # 0x550c7dc3d5ffb4e2
	.quad	8268148722764581231     # 0x72be5d74f27b896f
	.quad	-9160688886553864527    # 0x80deb1fe3b1696b1
	.quad	-7215885187991268811    # 0x9bdc06a725c71235
	.quad	-4495734319001033068    # 0xc19bf174cf692694
	.quad	-1973867731355612462    # 0xe49b69c19ef14ad2
	.quad	-1171420211273849373    # 0xefbe4786384f25e3
	.quad	1135362057144423861     # 0xfc19dc68b8cd5b5
	.quad	2597628984639134821     # 0x240ca1cc77ac9c65
	.quad	3308224258029322869     # 0x2de92c6f592b0275
	.quad	5365058923640841347     # 0x4a7484aa6ea6e483
	.quad	6679025012923562964     # 0x5cb0a9dcbd41fbd4
	.quad	8573033837759648693     # 0x76f988da831153b5
	.quad	-7476448914759557205    # 0x983e5152ee66dfab
	.quad	-6327057829258317296    # 0xa831c66d2db43210
	.quad	-5763719355590565569    # 0xb00327c898fb213f
	.quad	-4658551843659510044    # 0xbf597fc7beef0ee4
	.quad	-4116276920077217854    # 0xc6e00bf33da88fc2
	.quad	-3051310485924567259    # 0xd5a79147930aa725
	.quad	489312712824947311      # 0x6ca6351e003826f
	.quad	1452737877330783856     # 0x142929670a0e6e70
	.quad	2861767655752347644     # 0x27b70a8546d22ffc
	.quad	3322285676063803686     # 0x2e1b21385c26c926
	.quad	5560940570517711597     # 0x4d2c6dfc5ac42aed
	.quad	5996557281743188959     # 0x53380d139d95b3df
	.quad	7280758554555802590     # 0x650a73548baf63de
	.quad	8532644243296465576     # 0x766a0abb3c77b2a8
	.quad	-9096487096722542874    # 0x81c2c92e47edaee6
	.quad	-7894198246740708037    # 0x92722c851482353b
	.quad	-6719396339535248540    # 0xa2bfe8a14cf10364
	.quad	-6333637450476146687    # 0xa81a664bbc423001
	.quad	-4446306890439682159    # 0xc24b8b70d0f89791
	.quad	-4076793802049405392    # 0xc76c51a30654be30
	.quad	-3345356375505022440    # 0xd192e819d6ef5218
	.quad	-2983346525034927856    # 0xd69906245565a910
	.quad	-860691631967231958     # 0xf40e35855771202a
	.quad	1182934255886127544     # 0x106aa07032bbd1b8
	.quad	1847814050463011016     # 0x19a4c116b8d2d0c8
	.quad	2177327727835720531     # 0x1e376c085141ab53
	.quad	2830643537854262169     # 0x2748774cdf8eeb99
	.quad	3796741975233480872     # 0x34b0bcb5e19b48a8
	.quad	4115178125766777443     # 0x391c0cb3c5c95a63
	.quad	5681478168544905931     # 0x4ed8aa4ae3418acb
	.quad	6601373596472566643     # 0x5b9cca4f7763e373
	.quad	7507060721942968483     # 0x682e6ff3d6b2b8a3
	.quad	8399075790359081724     # 0x748f82ee5defb2fc
	.quad	8693463985226723168     # 0x78a5636f43172f60
	.quad	-8878714635349349518    # 0x84c87814a1f0ab72
	.quad	-8302665154208450068    # 0x8cc702081a6439ec
	.quad	-8016688836872298968    # 0x90befffa23631e28
	.quad	-6606660893046293015    # 0xa4506cebde82bde9
	.quad	-4685533653050689259    # 0xbef9a3f7b2c67915
	.quad	-4147400797238176981    # 0xc67178f2e372532b
	.quad	-3880063495543823972    # 0xca273eceea26619c
	.quad	-3348786107499101689    # 0xd186b8c721c0c207
	.quad	-1523767162380948706    # 0xeada7dd6cde0eb1e
	.quad	-757361751448694408     # 0xf57d4f7fee6ed178
	.quad	500013540394364858      # 0x6f067aa72176fba
	.quad	748580250866718886      # 0xa637dc5a2c898a6
	.quad	1242879168328830382     # 0x113f9804bef90dae
	.quad	1977374033974150939     # 0x1b710b35131c471b
	.quad	2944078676154940804     # 0x28db77f523047d84
	.quad	3659926193048069267     # 0x32caab7b40c72493
	.quad	4368137639120453308     # 0x3c9ebe0a15c9bebc
	.quad	4836135668995329356     # 0x431d67c49c100d4c
	.quad	5532061633213252278     # 0x4cc5d4becb3e42b6
	.quad	6448918945643986474     # 0x597f299cfc657e2a
	.quad	6902733635092675308     # 0x5fcb6fab3ad6faec
	.quad	7801388544844847127     # 0x6c44198c4a475817
	.size	sha512_round_constants, 640

	.type	fillbuf,@object         # @fillbuf
	.align	16
fillbuf:
	.asciz	
	.size	fillbuf, 128


	.ident	"clang version 3.7.0 (tags/RELEASE_370/final)"
	.section	".note.GNU-stack","",@progbits
