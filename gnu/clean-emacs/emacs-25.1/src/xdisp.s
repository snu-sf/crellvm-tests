	.text
	.file	"xdisp.bc"
	.globl	redisplay_other_windows
	.align	16, 0x90
	.type	redisplay_other_windows,@function
redisplay_other_windows:                # @redisplay_other_windows
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp0:
	.cfi_def_cfa_offset 16
.Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2:
	.cfi_def_cfa_register %rbp
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB0_2
# BB#1:                                 # %if.then
	movl	$2, windows_or_buffers_changed
.LBB0_2:                                # %if.end
	popq	%rbp
	retq
.Lfunc_end0:
	.size	redisplay_other_windows, .Lfunc_end0-redisplay_other_windows
	.cfi_endproc

	.globl	wset_redisplay
	.align	16, 0x90
	.type	wset_redisplay,@function
wset_redisplay:                         # @wset_redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp3:
	.cfi_def_cfa_offset 16
.Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp5:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$5, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	make_lisp_ptr
	cmpq	selected_window, %rax
	je	.LBB1_2
# BB#1:                                 # %if.then
	callq	redisplay_other_windows
.LBB1_2:                                # %if.end
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-16385, %cx            # imm = 0xFFFFFFFFFFFFBFFF
	orw	$16384, %cx             # imm = 0x4000
	movw	%cx, 468(%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end1:
	.size	wset_redisplay, .Lfunc_end1-wset_redisplay
	.cfi_endproc

	.globl	fset_redisplay
	.align	16, 0x90
	.type	fset_redisplay,@function
fset_redisplay:                         # @fset_redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp6:
	.cfi_def_cfa_offset 16
.Ltmp7:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp8:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	callq	redisplay_other_windows
	movq	-8(%rbp), %rdi
	movq	208(%rdi), %rax
	andq	$-257, %rax             # imm = 0xFFFFFFFFFFFFFEFF
	orq	$256, %rax              # imm = 0x100
	movq	%rax, 208(%rdi)
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end2:
	.size	fset_redisplay, .Lfunc_end2-fset_redisplay
	.cfi_endproc

	.globl	bset_redisplay
	.align	16, 0x90
	.type	bset_redisplay,@function
bset_redisplay:                         # @bset_redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	buffer_window_count
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jle	.LBB3_5
# BB#1:                                 # %if.then
	cmpl	$1, -12(%rbp)
	jg	.LBB3_3
# BB#2:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	-24(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	je	.LBB3_4
.LBB3_3:                                # %if.then.5
	callq	redisplay_other_windows
.LBB3_4:                                # %if.end
	movq	-8(%rbp), %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	andb	$-3, %cl
	orb	$2, %cl
	movb	%cl, 136(%rax)
.LBB3_5:                                # %if.end.6
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end3:
	.size	bset_redisplay, .Lfunc_end3-bset_redisplay
	.cfi_endproc

	.globl	bset_update_mode_line
	.align	16, 0x90
	.type	bset_update_mode_line,@function
bset_update_mode_line:                  # @bset_update_mode_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp12:
	.cfi_def_cfa_offset 16
.Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp14:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	cmpl	$0, update_mode_lines
	jne	.LBB4_2
# BB#1:                                 # %if.then
	movl	$2, update_mode_lines
.LBB4_2:                                # %if.end
	movq	-8(%rbp), %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	andb	$-3, %cl
	orb	$2, %cl
	movb	%cl, 136(%rax)
	popq	%rbp
	retq
.Lfunc_end4:
	.size	bset_update_mode_line, .Lfunc_end4-bset_update_mode_line
	.cfi_endproc

	.globl	maybe_set_redisplay
	.align	16, 0x90
	.type	maybe_set_redisplay,@function
maybe_set_redisplay:                    # @maybe_set_redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp15:
	.cfi_def_cfa_offset 16
.Ltmp16:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp17:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	globals+2016, %rdi
	callq	HASH_TABLE_P
	testb	$1, %al
	jne	.LBB5_1
	jmp	.LBB5_3
.LBB5_1:                                # %land.lhs.true
	movq	globals+2016, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jl	.LBB5_3
# BB#2:                                 # %if.then
	movq	current_buffer, %rdi
	callq	bset_update_mode_line
	movq	current_buffer, %rdi
	movb	936(%rdi), %al
	andb	$-2, %al
	orb	$1, %al
	movb	%al, 936(%rdi)
.LBB5_3:                                # %if.end
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end5:
	.size	maybe_set_redisplay, .Lfunc_end5-maybe_set_redisplay
	.cfi_endproc

	.globl	window_text_bottom_y
	.align	16, 0x90
	.type	window_text_bottom_y,@function
window_text_bottom_y:                   # @window_text_bottom_y
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp18:
	.cfi_def_cfa_offset 16
.Ltmp19:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp20:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	260(%rdi), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	244(%rdi), %eax
	movq	-8(%rbp), %rdi
	addl	260(%rdi), %eax
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	40(%rdi), %rdi
	movl	%eax, -16(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -20(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-20(%rbp), %ecx         # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-16(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB6_2
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB6_4
.LBB6_2:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB6_4
# BB#3:                                 # %lor.lhs.false.19
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB6_5
.LBB6_4:                                # %cond.true
	xorl	%eax, %eax
	movl	%eax, -36(%rbp)         # 4-byte Spill
	jmp	.LBB6_6
.LBB6_5:                                # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -36(%rbp)         # 4-byte Spill
.LBB6_6:                                # %cond.end
	movl	-36(%rbp), %eax         # 4-byte Reload
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB6_7
	jmp	.LBB6_12
.LBB6_7:                                # %cond.true.24
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB6_34
# BB#8:                                 # %land.lhs.true.28
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB6_34
# BB#9:                                 # %land.lhs.true.34
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB6_34
# BB#10:                                # %land.lhs.true.41
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB6_34
# BB#11:                                # %land.lhs.true.46
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB6_13
	jmp	.LBB6_34
.LBB6_12:                               # %cond.false.51
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB6_13
	jmp	.LBB6_34
.LBB6_13:                               # %if.then
	movq	-8(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB6_15
# BB#14:                                # %cond.true.53
	movq	-8(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	jmp	.LBB6_33
.LBB6_15:                               # %cond.false.55
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB6_18
# BB#16:                                # %land.lhs.true.56
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB6_18
# BB#17:                                # %cond.true.59
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB6_19
	jmp	.LBB6_24
.LBB6_18:                               # %cond.false.66
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB6_19
	jmp	.LBB6_24
.LBB6_19:                               # %cond.true.67
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB6_22
# BB#20:                                # %land.lhs.true.70
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB6_22
# BB#21:                                # %cond.true.74
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -56(%rbp)         # 4-byte Spill
	jmp	.LBB6_23
.LBB6_22:                               # %cond.false.83
	xorl	%eax, %eax
	movl	%eax, -56(%rbp)         # 4-byte Spill
	jmp	.LBB6_23
.LBB6_23:                               # %cond.end.84
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	%eax, -60(%rbp)         # 4-byte Spill
	jmp	.LBB6_32
.LBB6_24:                               # %cond.false.86
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	movb	%al, -73(%rbp)          # 1-byte Spill
	je	.LBB6_31
# BB#25:                                # %lor.lhs.false.90
	movq	-8(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-88(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -73(%rbp)          # 1-byte Spill
	je	.LBB6_31
# BB#26:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -89(%rbp)          # 1-byte Spill
	jle	.LBB6_30
# BB#27:                                # %land.lhs.true.94
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-104(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -89(%rbp)          # 1-byte Spill
	je	.LBB6_30
# BB#28:                                # %land.lhs.true.97
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-112(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -89(%rbp)          # 1-byte Spill
	jne	.LBB6_30
# BB#29:                                # %land.rhs
	movq	-8(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-120(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -89(%rbp)          # 1-byte Spill
.LBB6_30:                               # %land.end
	movb	-89(%rbp), %al          # 1-byte Reload
	movb	%al, -73(%rbp)          # 1-byte Spill
.LBB6_31:                               # %lor.end
	movb	-73(%rbp), %al          # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -60(%rbp)         # 4-byte Spill
.LBB6_32:                               # %cond.end.105
	movl	-60(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -52(%rbp)         # 4-byte Spill
.LBB6_33:                               # %cond.end.108
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB6_34:                               # %if.end
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB6_37
# BB#35:                                # %lor.lhs.false.116
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB6_38
# BB#36:                                # %land.lhs.true.121
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB6_38
.LBB6_37:                               # %cond.true.127
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB6_43
	jmp	.LBB6_47
.LBB6_38:                               # %cond.false.128
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB6_40
# BB#39:                                # %cond.true.131
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB6_43
	jmp	.LBB6_47
.LBB6_40:                               # %cond.false.138
	movl	$213, %edi
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB6_42
# BB#41:                                # %cond.true.142
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_43
	jmp	.LBB6_47
.LBB6_42:                               # %cond.false.143
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB6_43
	jmp	.LBB6_47
.LBB6_43:                               # %cond.true.144
	movq	-8(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB6_45
# BB#44:                                # %cond.true.146
	movq	-8(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB6_46
.LBB6_45:                               # %cond.false.148
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
.LBB6_46:                               # %cond.end.151
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, -144(%rbp)        # 4-byte Spill
	jmp	.LBB6_48
.LBB6_47:                               # %cond.false.153
	xorl	%eax, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	jmp	.LBB6_48
.LBB6_48:                               # %cond.end.154
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-12(%rbp), %eax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end6:
	.size	window_text_bottom_y, .Lfunc_end6-window_text_bottom_y
	.cfi_endproc

	.globl	estimate_mode_line_height
	.align	16, 0x90
	.type	estimate_mode_line_height,@function
estimate_mode_line_height:              # @estimate_mode_line_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp21:
	.cfi_def_cfa_offset 16
.Ltmp22:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp23:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %esi
	cmpl	$2, %esi
	jne	.LBB7_15
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movl	156(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 160(%rax)
	je	.LBB7_14
# BB#2:                                 # %if.then.2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB7_3
	jmp	.LBB7_4
.LBB7_3:                                # %cond.true
	movl	-20(%rbp), %eax
	addl	$0, %eax
	movq	-16(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB7_5
	jmp	.LBB7_6
.LBB7_4:                                # %cond.false
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	movq	-16(%rbp), %rdx
	movq	160(%rdx), %rdx
	movslq	32(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB7_6
.LBB7_5:                                # %cond.true.13
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	160(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	jmp	.LBB7_7
.LBB7_6:                                # %cond.false.15
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	jmp	.LBB7_7
.LBB7_7:                                # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB7_13
# BB#8:                                 # %if.then.17
	movq	-32(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB7_10
# BB#9:                                 # %if.then.20
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movq	-32(%rbp), %rax
	movq	224(%rax), %rdi
	callq	normal_char_height
	movl	%eax, -24(%rbp)
.LBB7_10:                               # %if.end
	movq	-32(%rbp), %rax
	cmpl	$0, 236(%rax)
	jle	.LBB7_12
# BB#11:                                # %if.then.24
	movq	-32(%rbp), %rax
	movl	236(%rax), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movl	%ecx, -24(%rbp)
.LBB7_12:                               # %if.end.27
	jmp	.LBB7_13
.LBB7_13:                               # %if.end.28
	jmp	.LBB7_14
.LBB7_14:                               # %if.end.29
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB7_16
.LBB7_15:                               # %if.end.30
	movl	$1, -4(%rbp)
.LBB7_16:                               # %return
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end7:
	.size	estimate_mode_line_height, .Lfunc_end7-estimate_mode_line_height
	.cfi_endproc

	.globl	window_box_width
	.align	16, 0x90
	.type	window_box_width,@function
window_box_width:                       # @window_box_width
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp24:
	.cfi_def_cfa_offset 16
.Ltmp25:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp26:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	256(%rdi), %esi
	movl	%esi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movw	468(%rdi), %ax
	shrw	$11, %ax
	andw	$1, %ax
	testw	$1, %ax
	jne	.LBB8_45
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB8_3
# BB#2:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, -20(%rbp)         # 4-byte Spill
	jmp	.LBB8_10
.LBB8_3:                                # %cond.false
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB8_5
# BB#4:                                 # %cond.true.6
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)         # 4-byte Spill
	jmp	.LBB8_9
.LBB8_5:                                # %cond.false.12
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB8_7
# BB#6:                                 # %cond.true.16
	movl	$1, %eax
	movl	%eax, -52(%rbp)         # 4-byte Spill
	jmp	.LBB8_8
.LBB8_7:                                # %cond.false.17
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-64(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -52(%rbp)         # 4-byte Spill
.LBB8_8:                                # %cond.end
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, -36(%rbp)         # 4-byte Spill
.LBB8_9:                                # %cond.end.22
	movl	-36(%rbp), %eax         # 4-byte Reload
	movl	%eax, -20(%rbp)         # 4-byte Spill
.LBB8_10:                               # %cond.end.24
	movl	-20(%rbp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB8_21
# BB#11:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB8_13
# BB#12:                                # %cond.true.32
	xorl	%eax, %eax
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB8_20
.LBB8_13:                               # %cond.false.33
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB8_15
# BB#14:                                # %cond.true.37
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB8_19
.LBB8_15:                               # %cond.false.45
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB8_17
# BB#16:                                # %cond.true.49
	movl	$1, %eax
	movl	%eax, -100(%rbp)        # 4-byte Spill
	jmp	.LBB8_18
.LBB8_17:                               # %cond.false.50
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-112(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -100(%rbp)        # 4-byte Spill
.LBB8_18:                               # %cond.end.55
	movl	-100(%rbp), %eax        # 4-byte Reload
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB8_19:                               # %cond.end.57
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -68(%rbp)         # 4-byte Spill
.LBB8_20:                               # %cond.end.59
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$2, %eax
	jne	.LBB8_25
.LBB8_21:                               # %cond.true.62
	movq	-8(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB8_23
# BB#22:                                # %cond.true.64
	movq	-8(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -116(%rbp)        # 4-byte Spill
	jmp	.LBB8_24
.LBB8_23:                               # %cond.false.66
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -116(%rbp)        # 4-byte Spill
.LBB8_24:                               # %cond.end.69
	movl	-116(%rbp), %eax        # 4-byte Reload
	movl	%eax, -120(%rbp)        # 4-byte Spill
	jmp	.LBB8_26
.LBB8_25:                               # %cond.false.71
	xorl	%eax, %eax
	movl	%eax, -120(%rbp)        # 4-byte Spill
	jmp	.LBB8_26
.LBB8_26:                               # %cond.end.72
	movl	-120(%rbp), %eax        # 4-byte Reload
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movq	-8(%rbp), %rdx
	movl	240(%rdx), %eax
	movq	-8(%rbp), %rdx
	addl	256(%rdx), %eax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	40(%rdx), %rdi
	movl	%eax, -124(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -128(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-128(%rbp), %ecx        # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-124(%rbp), %esi        # 4-byte Reload
	cmpl	%ecx, %esi
	je	.LBB8_28
# BB#27:                                # %lor.lhs.false.87
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB8_29
.LBB8_28:                               # %cond.true.91
	xorl	%eax, %eax
	movl	%eax, -132(%rbp)        # 4-byte Spill
	jmp	.LBB8_30
.LBB8_29:                               # %cond.false.92
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -132(%rbp)        # 4-byte Spill
.LBB8_30:                               # %cond.end.95
	movl	-132(%rbp), %eax        # 4-byte Reload
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	cmpl	$1, -12(%rbp)
	jne	.LBB8_38
# BB#31:                                # %if.then.99
	movq	-8(%rbp), %rax
	movl	428(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	432(%rax), %edx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %edx
	addl	%edx, %ecx
	movq	-8(%rbp), %rax
	cmpl	$0, 420(%rax)
	movl	%ecx, -136(%rbp)        # 4-byte Spill
	jl	.LBB8_33
# BB#32:                                # %cond.true.108
	movq	-8(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB8_34
.LBB8_33:                               # %cond.false.110
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
.LBB8_34:                               # %cond.end.114
	movl	-140(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	cmpl	$0, 424(%rcx)
	movl	%eax, -144(%rbp)        # 4-byte Spill
	jl	.LBB8_36
# BB#35:                                # %cond.true.117
	movq	-8(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
	jmp	.LBB8_37
.LBB8_36:                               # %cond.false.119
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
.LBB8_37:                               # %cond.end.123
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	-144(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	-136(%rbp), %eax        # 4-byte Reload
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB8_44
.LBB8_38:                               # %if.else
	cmpl	$0, -12(%rbp)
	jne	.LBB8_40
# BB#39:                                # %if.then.129
	movq	-8(%rbp), %rax
	movl	428(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB8_43
.LBB8_40:                               # %if.else.135
	cmpl	$2, -12(%rbp)
	jne	.LBB8_42
# BB#41:                                # %if.then.137
	movq	-8(%rbp), %rax
	movl	432(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	movl	%ecx, -16(%rbp)
.LBB8_42:                               # %if.end
	jmp	.LBB8_43
.LBB8_43:                               # %if.end.143
	jmp	.LBB8_44
.LBB8_44:                               # %if.end.144
	jmp	.LBB8_45
.LBB8_45:                               # %if.end.145
	xorl	%eax, %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB8_47
# BB#46:                                # %cond.true.147
	xorl	%eax, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB8_48
.LBB8_47:                               # %cond.false.148
	movl	-16(%rbp), %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB8_48:                               # %cond.end.149
	movl	-152(%rbp), %eax        # 4-byte Reload
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end8:
	.size	window_box_width, .Lfunc_end8-window_box_width
	.cfi_endproc

	.globl	window_box_height
	.align	16, 0x90
	.type	window_box_height,@function
window_box_height:                      # @window_box_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp27:
	.cfi_def_cfa_offset 16
.Ltmp28:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp29:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movl	260(%rdi), %eax
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rdi
	movl	244(%rdi), %eax
	movq	-8(%rbp), %rdi
	addl	260(%rdi), %eax
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	40(%rdi), %rdi
	movl	%eax, -44(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -48(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-48(%rbp), %ecx         # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB9_2
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB9_4
.LBB9_2:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB9_4
# BB#3:                                 # %lor.lhs.false.21
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB9_5
.LBB9_4:                                # %cond.true
	xorl	%eax, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	jmp	.LBB9_6
.LBB9_5:                                # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
.LBB9_6:                                # %cond.end
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	jne	.LBB9_9
# BB#7:                                 # %lor.lhs.false.30
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB9_10
# BB#8:                                 # %land.lhs.true.34
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB9_10
.LBB9_9:                                # %cond.true.40
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB9_15
	jmp	.LBB9_19
.LBB9_10:                               # %cond.false.41
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB9_12
# BB#11:                                # %cond.true.44
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB9_15
	jmp	.LBB9_19
.LBB9_12:                               # %cond.false.51
	movl	$213, %edi
	movq	-8(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB9_14
# BB#13:                                # %cond.true.55
	movb	$1, %al
	testb	$1, %al
	jne	.LBB9_15
	jmp	.LBB9_19
.LBB9_14:                               # %cond.false.56
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB9_15
	jmp	.LBB9_19
.LBB9_15:                               # %cond.true.57
	movq	-8(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB9_17
# BB#16:                                # %cond.true.59
	movq	-8(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB9_18
.LBB9_17:                               # %cond.false.61
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
.LBB9_18:                               # %cond.end.64
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB9_20
.LBB9_19:                               # %cond.false.66
	xorl	%eax, %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB9_20
.LBB9_20:                               # %cond.end.67
	movl	-88(%rbp), %eax         # 4-byte Reload
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB9_21
	jmp	.LBB9_26
.LBB9_21:                               # %cond.true.71
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB9_43
# BB#22:                                # %land.lhs.true.76
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB9_43
# BB#23:                                # %land.lhs.true.82
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB9_43
# BB#24:                                # %land.lhs.true.89
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB9_43
# BB#25:                                # %land.lhs.true.94
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB9_27
	jmp	.LBB9_43
.LBB9_26:                               # %cond.false.99
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB9_27
	jmp	.LBB9_43
.LBB9_27:                               # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB9_30
# BB#28:                                # %land.lhs.true.100
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB9_30
# BB#29:                                # %cond.true.103
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	addq	$-256, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB9_31
.LBB9_30:                               # %cond.false.108
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	jmp	.LBB9_31
.LBB9_31:                               # %cond.end.109
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB9_34
# BB#32:                                # %land.lhs.true.112
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB9_34
# BB#33:                                # %if.then.117
	movq	-32(%rbp), %rax
	movl	60(%rax), %ecx
	movl	-20(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -20(%rbp)
	jmp	.LBB9_42
.LBB9_34:                               # %if.else
	movb	$1, %al
	movq	-16(%rbp), %rdi
	testb	$1, globals+3413
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movb	%al, -113(%rbp)         # 1-byte Spill
	je	.LBB9_41
# BB#35:                                # %lor.lhs.false.121
	movq	-8(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-128(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -113(%rbp)         # 1-byte Spill
	je	.LBB9_41
# BB#36:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -129(%rbp)         # 1-byte Spill
	jle	.LBB9_40
# BB#37:                                # %land.lhs.true.125
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-144(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -129(%rbp)         # 1-byte Spill
	je	.LBB9_40
# BB#38:                                # %land.lhs.true.128
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-152(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -129(%rbp)         # 1-byte Spill
	jne	.LBB9_40
# BB#39:                                # %land.rhs
	movq	-8(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-160(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -129(%rbp)         # 1-byte Spill
.LBB9_40:                               # %land.end
	movb	-129(%rbp), %al         # 1-byte Reload
	movb	%al, -113(%rbp)         # 1-byte Spill
.LBB9_41:                               # %lor.end
	movb	-113(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	-20(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
.LBB9_42:                               # %if.end
	jmp	.LBB9_43
.LBB9_43:                               # %if.end.137
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB9_44
	jmp	.LBB9_58
.LBB9_44:                               # %cond.true.140
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB9_68
# BB#45:                                # %land.lhs.true.145
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB9_68
# BB#46:                                # %land.lhs.true.151
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB9_68
# BB#47:                                # %land.lhs.true.159
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB9_68
# BB#48:                                # %land.lhs.true.164
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -172(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB9_49
	jmp	.LBB9_54
.LBB9_49:                               # %cond.true.168
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB9_56
# BB#50:                                # %land.lhs.true.173
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB9_56
# BB#51:                                # %land.lhs.true.179
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB9_56
# BB#52:                                # %land.lhs.true.187
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB9_56
# BB#53:                                # %land.lhs.true.193
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB9_55
	jmp	.LBB9_56
.LBB9_54:                               # %cond.false.199
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB9_55
	jmp	.LBB9_56
.LBB9_55:                               # %cond.true.200
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
	jmp	.LBB9_57
.LBB9_56:                               # %cond.false.204
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
.LBB9_57:                               # %cond.end.208
	movl	-188(%rbp), %eax        # 4-byte Reload
	movl	-172(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB9_59
	jmp	.LBB9_68
.LBB9_58:                               # %cond.false.211
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB9_59
	jmp	.LBB9_68
.LBB9_59:                               # %if.then.212
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB9_62
# BB#60:                                # %land.lhs.true.215
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB9_62
# BB#61:                                # %cond.true.219
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB9_63
.LBB9_62:                               # %cond.false.222
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB9_63
.LBB9_63:                               # %cond.end.223
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB9_66
# BB#64:                                # %land.lhs.true.226
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB9_66
# BB#65:                                # %if.then.232
	movq	-40(%rbp), %rax
	movl	60(%rax), %ecx
	movl	-20(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -20(%rbp)
	jmp	.LBB9_67
.LBB9_66:                               # %if.else.235
	movl	$5, %esi
	movq	-16(%rbp), %rdi
	callq	estimate_mode_line_height
	movl	-20(%rbp), %esi
	subl	%eax, %esi
	movl	%esi, -20(%rbp)
.LBB9_67:                               # %if.end.238
	jmp	.LBB9_68
.LBB9_68:                               # %if.end.239
	xorl	%eax, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB9_70
# BB#69:                                # %cond.true.241
	xorl	%eax, %eax
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB9_71
.LBB9_70:                               # %cond.false.242
	movl	-20(%rbp), %eax
	movl	%eax, -204(%rbp)        # 4-byte Spill
.LBB9_71:                               # %cond.end.243
	movl	-204(%rbp), %eax        # 4-byte Reload
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end9:
	.size	window_box_height, .Lfunc_end9-window_box_height
	.cfi_endproc

	.globl	window_box_left_offset
	.align	16, 0x90
	.type	window_box_left_offset,@function
window_box_left_offset:                 # @window_box_left_offset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp30:
	.cfi_def_cfa_offset 16
.Ltmp31:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp32:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rdi
	movw	468(%rdi), %ax
	shrw	$11, %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB10_2
# BB#1:                                 # %if.then
	movl	$0, -4(%rbp)
	jmp	.LBB10_45
.LBB10_2:                               # %if.end
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB10_4
# BB#3:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, -28(%rbp)         # 4-byte Spill
	jmp	.LBB10_11
.LBB10_4:                               # %cond.false
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB10_6
# BB#5:                                 # %cond.true.6
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)         # 4-byte Spill
	jmp	.LBB10_10
.LBB10_6:                               # %cond.false.12
	movl	$607, %edi              # imm = 0x25F
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB10_8
# BB#7:                                 # %cond.true.16
	movl	$1, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	jmp	.LBB10_9
.LBB10_8:                               # %cond.false.17
	movl	$811, %edi              # imm = 0x32B
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -60(%rbp)         # 4-byte Spill
.LBB10_9:                               # %cond.end
	movl	-60(%rbp), %eax         # 4-byte Reload
	movl	%eax, -44(%rbp)         # 4-byte Spill
.LBB10_10:                              # %cond.end.22
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, -28(%rbp)         # 4-byte Spill
.LBB10_11:                              # %cond.end.24
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB10_16
# BB#12:                                # %cond.true.27
	movq	-16(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB10_14
# BB#13:                                # %cond.true.29
	movq	-16(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	jmp	.LBB10_15
.LBB10_14:                              # %cond.false.31
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
.LBB10_15:                              # %cond.end.34
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB10_17
.LBB10_16:                              # %cond.false.36
	xorl	%eax, %eax
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB10_17
.LBB10_17:                              # %cond.end.37
	movl	-80(%rbp), %eax         # 4-byte Reload
	movl	%eax, -24(%rbp)
	cmpl	$1, -20(%rbp)
	jne	.LBB10_22
# BB#18:                                # %if.then.40
	movq	-16(%rbp), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB10_20
# BB#19:                                # %cond.true.42
	movq	-16(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB10_21
.LBB10_20:                              # %cond.false.44
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
.LBB10_21:                              # %cond.end.48
	movl	-84(%rbp), %eax         # 4-byte Reload
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	movl	%eax, -88(%rbp)         # 4-byte Spill
	callq	window_box_width
	movl	-88(%rbp), %esi         # 4-byte Reload
	addl	%eax, %esi
	addl	-24(%rbp), %esi
	movl	%esi, -24(%rbp)
	jmp	.LBB10_41
.LBB10_22:                              # %if.else
	cmpl	$2, -20(%rbp)
	jne	.LBB10_33
# BB#23:                                # %if.then.53
	movq	-16(%rbp), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB10_25
# BB#24:                                # %cond.true.56
	movq	-16(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
	jmp	.LBB10_26
.LBB10_25:                              # %cond.false.58
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
.LBB10_26:                              # %cond.end.62
	movl	-92(%rbp), %eax         # 4-byte Reload
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	movl	%eax, -96(%rbp)         # 4-byte Spill
	callq	window_box_width
	movl	$1, %esi
	movl	-96(%rbp), %ecx         # 4-byte Reload
	addl	%eax, %ecx
	movq	-16(%rbp), %rdi
	movl	%ecx, -100(%rbp)        # 4-byte Spill
	callq	window_box_width
	movl	-100(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movq	-16(%rbp), %rdi
	movw	468(%rdi), %dx
	shrw	$12, %dx
	andw	$1, %dx
	testw	$1, %dx
	movl	%ecx, -104(%rbp)        # 4-byte Spill
	je	.LBB10_28
# BB#27:                                # %cond.true.72
	xorl	%eax, %eax
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB10_32
.LBB10_28:                              # %cond.false.73
	movq	-16(%rbp), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB10_30
# BB#29:                                # %cond.true.75
	movq	-16(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -112(%rbp)        # 4-byte Spill
	jmp	.LBB10_31
.LBB10_30:                              # %cond.false.77
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -112(%rbp)        # 4-byte Spill
.LBB10_31:                              # %cond.end.81
	movl	-112(%rbp), %eax        # 4-byte Reload
	movl	%eax, -108(%rbp)        # 4-byte Spill
.LBB10_32:                              # %cond.end.83
	movl	-108(%rbp), %eax        # 4-byte Reload
	movl	-104(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	addl	-24(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	jmp	.LBB10_40
.LBB10_33:                              # %if.else.87
	cmpl	$0, -20(%rbp)
	jne	.LBB10_39
# BB#34:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB10_39
# BB#35:                                # %if.then.94
	movq	-16(%rbp), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB10_37
# BB#36:                                # %cond.true.97
	movq	-16(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -116(%rbp)        # 4-byte Spill
	jmp	.LBB10_38
.LBB10_37:                              # %cond.false.99
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -116(%rbp)        # 4-byte Spill
.LBB10_38:                              # %cond.end.103
	movl	-116(%rbp), %eax        # 4-byte Reload
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB10_39:                              # %if.end.106
	jmp	.LBB10_40
.LBB10_40:                              # %if.end.107
	jmp	.LBB10_41
.LBB10_41:                              # %if.end.108
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	256(%rcx), %eax
	jge	.LBB10_43
# BB#42:                                # %cond.true.110
	movl	-24(%rbp), %eax
	movl	%eax, -120(%rbp)        # 4-byte Spill
	jmp	.LBB10_44
.LBB10_43:                              # %cond.false.111
	movq	-16(%rbp), %rax
	movl	256(%rax), %ecx
	movl	%ecx, -120(%rbp)        # 4-byte Spill
.LBB10_44:                              # %cond.end.113
	movl	-120(%rbp), %eax        # 4-byte Reload
	movl	%eax, -4(%rbp)
.LBB10_45:                              # %return
	movl	-4(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end10:
	.size	window_box_left_offset, .Lfunc_end10-window_box_left_offset
	.cfi_endproc

	.globl	window_box_left
	.align	16, 0x90
	.type	window_box_left,@function
window_box_left:                        # @window_box_left
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp33:
	.cfi_def_cfa_offset 16
.Ltmp34:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp35:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rdi
	movw	468(%rdi), %ax
	shrw	$11, %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB11_2
# BB#1:                                 # %if.then
	movq	-32(%rbp), %rax
	movl	332(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB11_3
.LBB11_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	240(%rax), %ecx
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	%ecx, -40(%rbp)         # 4-byte Spill
	callq	window_box_left_offset
	movl	-40(%rbp), %ecx         # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_3:                               # %return
	movl	-4(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end11:
	.size	window_box_left, .Lfunc_end11-window_box_left
	.cfi_endproc

	.globl	window_box_right
	.align	16, 0x90
	.type	window_box_right,@function
window_box_right:                       # @window_box_right
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp36:
	.cfi_def_cfa_offset 16
.Ltmp37:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp38:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	window_box_left
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%eax, -16(%rbp)         # 4-byte Spill
	callq	window_box_width
	movl	-16(%rbp), %esi         # 4-byte Reload
	addl	%eax, %esi
	movl	%esi, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end12:
	.size	window_box_right, .Lfunc_end12-window_box_right
	.cfi_endproc

	.globl	window_box
	.align	16, 0x90
	.type	window_box,@function
window_box:                             # @window_box
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp39:
	.cfi_def_cfa_offset 16
.Ltmp40:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp41:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB13_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	window_box_width
	movq	-40(%rbp), %rdi
	movl	%eax, (%rdi)
.LBB13_2:                               # %if.end
	cmpq	$0, -48(%rbp)
	je	.LBB13_4
# BB#3:                                 # %if.then.2
	movq	-8(%rbp), %rdi
	callq	window_box_height
	movq	-48(%rbp), %rdi
	movl	%eax, (%rdi)
.LBB13_4:                               # %if.end.4
	cmpq	$0, -24(%rbp)
	je	.LBB13_6
# BB#5:                                 # %if.then.6
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	window_box_left
	movq	-24(%rbp), %rdi
	movl	%eax, (%rdi)
.LBB13_6:                               # %if.end.8
	cmpq	$0, -32(%rbp)
	je	.LBB13_38
# BB#7:                                 # %if.then.10
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	244(%rax), %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB13_8
	jmp	.LBB13_22
.LBB13_8:                               # %cond.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB13_37
# BB#9:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB13_37
# BB#10:                                # %land.lhs.true.15
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB13_37
# BB#11:                                # %land.lhs.true.22
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB13_37
# BB#12:                                # %land.lhs.true.26
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB13_13
	jmp	.LBB13_18
.LBB13_13:                              # %cond.true.29
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB13_20
# BB#14:                                # %land.lhs.true.34
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB13_20
# BB#15:                                # %land.lhs.true.40
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB13_20
# BB#16:                                # %land.lhs.true.48
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB13_20
# BB#17:                                # %land.lhs.true.53
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB13_19
	jmp	.LBB13_20
.LBB13_18:                              # %cond.false
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB13_19
	jmp	.LBB13_20
.LBB13_19:                              # %cond.true.58
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	jmp	.LBB13_21
.LBB13_20:                              # %cond.false.62
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
.LBB13_21:                              # %cond.end
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	-60(%rbp), %ecx         # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB13_23
	jmp	.LBB13_37
.LBB13_22:                              # %cond.false.67
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB13_23
	jmp	.LBB13_37
.LBB13_23:                              # %if.then.68
	movq	-8(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB13_25
# BB#24:                                # %cond.true.70
	movq	-8(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -80(%rbp)         # 4-byte Spill
	jmp	.LBB13_36
.LBB13_25:                              # %cond.false.72
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB13_28
# BB#26:                                # %land.lhs.true.74
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB13_28
# BB#27:                                # %cond.true.77
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB13_29
	jmp	.LBB13_34
.LBB13_28:                              # %cond.false.81
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB13_29
	jmp	.LBB13_34
.LBB13_29:                              # %cond.true.82
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB13_32
# BB#30:                                # %land.lhs.true.85
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB13_32
# BB#31:                                # %cond.true.89
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB13_33
.LBB13_32:                              # %cond.false.93
	xorl	%eax, %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB13_33
.LBB13_33:                              # %cond.end.94
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB13_35
.LBB13_34:                              # %cond.false.96
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -88(%rbp)         # 4-byte Spill
.LBB13_35:                              # %cond.end.100
	movl	-88(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -80(%rbp)         # 4-byte Spill
.LBB13_36:                              # %cond.end.103
	movl	-80(%rbp), %eax         # 4-byte Reload
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB13_37:                              # %if.end.106
	jmp	.LBB13_38
.LBB13_38:                              # %if.end.107
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end13:
	.size	window_box, .Lfunc_end13-window_box
	.cfi_endproc

	.globl	line_bottom_y
	.align	16, 0x90
	.type	line_bottom_y,@function
line_bottom_y:                          # @line_bottom_y
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp42:
	.cfi_def_cfa_offset 16
.Ltmp43:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp44:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	2380(%rdi), %eax
	movq	-8(%rbp), %rdi
	addl	2384(%rdi), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	2432(%rdi), %eax
	movl	%eax, -16(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB14_22
# BB#1:                                 # %if.then
	cmpl	$0, last_height
	je	.LBB14_3
# BB#2:                                 # %if.then.1
	movl	last_height, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_21
.LBB14_3:                               # %if.else
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB14_9
# BB#4:                                 # %if.then.3
	movl	$1, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	move_it_by_lines
	movq	-8(%rbp), %rsi
	cmpl	$0, 2380(%rsi)
	jne	.LBB14_6
# BB#5:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$0, 2384(%rax)
	je	.LBB14_7
.LBB14_6:                               # %cond.true
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	jmp	.LBB14_8
.LBB14_7:                               # %cond.false
	movl	last_height, %eax
	movl	%eax, -28(%rbp)         # 4-byte Spill
.LBB14_8:                               # %cond.end
	movl	-28(%rbp), %eax         # 4-byte Reload
	movl	%eax, -12(%rbp)
	jmp	.LBB14_20
.LBB14_9:                               # %if.else.11
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 2352(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2104(%rax)
	movq	-8(%rbp), %rax
	movl	$32, 2124(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2128(%rax)
# BB#10:                                # %do.body
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB14_13
# BB#11:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB14_13
# BB#12:                                # %if.then.15
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB14_13:                              # %if.end
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB14_15
# BB#14:                                # %if.then.22
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	jmp	.LBB14_16
.LBB14_15:                              # %if.else.26
	movq	-8(%rbp), %rdi
	callq	produce_glyphs
.LBB14_16:                              # %if.end.27
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB14_18
# BB#17:                                # %if.then.30
	movb	$1, globals+3391
.LBB14_18:                              # %if.end.31
	jmp	.LBB14_19
.LBB14_19:                              # %do.end
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 2352(%rdx)
.LBB14_20:                              # %if.end.34
	jmp	.LBB14_21
.LBB14_21:                              # %if.end.35
	jmp	.LBB14_22
.LBB14_22:                              # %if.end.36
	movl	-16(%rbp), %eax
	addl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end14:
	.size	line_bottom_y, .Lfunc_end14-line_bottom_y
	.cfi_endproc

	.globl	move_it_by_lines
	.align	16, 0x90
	.type	move_it_by_lines,@function
move_it_by_lines:                       # @move_it_by_lines
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp45:
	.cfi_def_cfa_offset 16
.Ltmp46:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp47:
	.cfi_def_cfa_register %rbp
	subq	$4912, %rsp             # imm = 0x1330
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB15_2
# BB#1:                                 # %if.then
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	move_it_vertically_backward
	movl	$0, last_height
	jmp	.LBB15_71
.LBB15_2:                               # %if.else
	cmpq	$0, -16(%rbp)
	jle	.LBB15_7
# BB#3:                                 # %if.then.2
	movq	$-1, %rsi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$4, %r9d
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movslq	2440(%rcx), %rcx
	addq	-16(%rbp), %rcx
	movl	%ecx, %edx
	movl	%edx, -4864(%rbp)       # 4-byte Spill
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	-4864(%rbp), %r8d       # 4-byte Reload
	callq	move_it_to
	movq	-8(%rbp), %rsi
	cmpl	$2, 24(%rsi)
	movl	%eax, -4868(%rbp)       # 4-byte Spill
	jne	.LBB15_6
# BB#4:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpq	$0, 336(%rax)
	je	.LBB15_6
# BB#5:                                 # %if.then.8
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movb	88(%rdx), %sil
	shrb	$2, %sil
	andb	$1, %sil
	andb	$1, %sil
	movzbl	%sil, %r8d
	movl	%r8d, %edx
	addq	%rdx, %rcx
	movq	%rcx, %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movl	%eax, -4872(%rbp)       # 4-byte Spill
.LBB15_6:                               # %if.end
	jmp	.LBB15_70
.LBB15_7:                               # %if.else.14
	xorl	%esi, %esi
	movq	$0, -4824(%rbp)
	movq	-8(%rbp), %rax
	movl	2320(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2316(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -4880(%rbp)       # 8-byte Spill
	movl	%ecx, %eax
	cltd
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	idivl	364(%rdi)
	movl	%eax, -4844(%rbp)
	movb	$0, -4845(%rbp)
	movq	-8(%rbp), %r8
	movslq	2440(%r8), %r8
	addq	-16(%rbp), %r8
	movq	%r8, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	move_it_vertically_backward
	movq	-8(%rbp), %rdi
	movslq	2440(%rdi), %rdi
	movq	-16(%rbp), %r8
	subq	%rdi, %r8
	movq	%r8, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	movq	%rdi, -4832(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 2116(%rdi)
	je	.LBB15_9
# BB#8:                                 # %lor.lhs.false.26
	cmpl	$0, -4844(%rbp)
	jne	.LBB15_10
.LBB15_9:                               # %if.then.29
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4856(%rbp)
	jmp	.LBB15_14
.LBB15_10:                              # %if.else.30
	movq	-4832(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-4844(%rbp), %rdx
	imulq	%rdx, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB15_12
# BB#11:                                # %cond.true
	movq	-4832(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	-4844(%rbp), %rdx
	imulq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, -4888(%rbp)       # 8-byte Spill
	jmp	.LBB15_13
.LBB15_12:                              # %cond.false
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4888(%rbp)       # 8-byte Spill
.LBB15_13:                              # %cond.end
	movq	-4888(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4856(%rbp)
.LBB15_14:                              # %if.end.40
	xorl	%eax, %eax
	movl	%eax, %ecx
	subq	-16(%rbp), %rcx
	movq	%rcx, -4840(%rbp)
.LBB15_15:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -4840(%rbp)
	movb	%cl, -4889(%rbp)        # 1-byte Spill
	jle	.LBB15_17
# BB#16:                                # %land.rhs
                                        #   in Loop: Header=BB15_15 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4856(%rbp), %rax
	setg	%cl
	movb	%cl, -4889(%rbp)        # 1-byte Spill
.LBB15_17:                              # %land.end
                                        #   in Loop: Header=BB15_15 Depth=1
	movb	-4889(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB15_18
	jmp	.LBB15_20
.LBB15_18:                              # %for.body
                                        #   in Loop: Header=BB15_15 Depth=1
	movq	-8(%rbp), %rdi
	callq	back_to_previous_visible_line_start
# BB#19:                                # %for.inc
                                        #   in Loop: Header=BB15_15 Depth=1
	movq	-4840(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4840(%rbp)
	jmp	.LBB15_15
.LBB15_20:                              # %for.end
	cmpq	$0, -4840(%rbp)
	jle	.LBB15_23
# BB#21:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4856(%rbp), %rax
	jg	.LBB15_23
# BB#22:                                # %if.then.56
	movb	$1, -4845(%rbp)
.LBB15_23:                              # %if.end.57
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat
.LBB15_24:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	cmpl	$2, 24(%rcx)
	movb	%al, -4890(%rbp)        # 1-byte Spill
	jne	.LBB15_26
# BB#25:                                # %lor.rhs
                                        #   in Loop: Header=BB15_24 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 336(%rax)
	sete	%cl
	movb	%cl, -4890(%rbp)        # 1-byte Spill
.LBB15_26:                              # %lor.end
                                        #   in Loop: Header=BB15_24 Depth=1
	movb	-4890(%rbp), %al        # 1-byte Reload
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB15_27
	jmp	.LBB15_31
.LBB15_27:                              # %while.body
                                        #   in Loop: Header=BB15_24 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movslq	2440(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	move_it_vertically_backward
	movq	-8(%rbp), %rax
	movslq	2440(%rax), %rax
	movq	-16(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_29
# BB#28:                                # %lor.lhs.false.77
                                        #   in Loop: Header=BB15_24 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 336(%rax)
	jne	.LBB15_30
.LBB15_29:                              # %if.then.83
	jmp	.LBB15_31
.LBB15_30:                              # %if.end.84
                                        #   in Loop: Header=BB15_24 Depth=1
	movq	-8(%rbp), %rdi
	callq	back_to_previous_visible_line_start
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat
	movq	-16(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB15_24
.LBB15_31:                              # %while.end
	movq	-8(%rbp), %rax
	movl	$0, 2444(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2404(%rax)
# BB#32:                                # %do.body
	cmpq	$0, -4824(%rbp)
	je	.LBB15_34
# BB#33:                                # %if.then.88
	movl	$1, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB15_34:                              # %if.end.89
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4816(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4824(%rbp)
# BB#35:                                # %do.end
	leaq	-4816(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movl	$0, -2384(%rbp)
	movl	$0, -2376(%rbp)
	movq	-4832(%rbp), %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movl	-2376(%rbp), %ecx
	movq	-8(%rbp), %rdi
	movl	2440(%rdi), %edx
	subl	%ecx, %edx
	movl	%edx, 2440(%rdi)
	movl	-2384(%rbp), %ecx
	movq	-8(%rbp), %rdi
	movl	2432(%rdi), %edx
	subl	%ecx, %edx
	movl	%edx, 2432(%rdi)
	movq	-8(%rbp), %rdi
	movl	$0, 2444(%rdi)
	movq	-8(%rbp), %rdi
	movl	$0, 2404(%rdi)
	movslq	-2376(%rbp), %rdi
	subq	-16(%rbp), %rsi
	cmpq	%rsi, %rdi
	movl	%eax, -4896(%rbp)       # 4-byte Spill
	jle	.LBB15_50
# BB#36:                                # %if.then.106
	movslq	-2376(%rbp), %rax
	addq	-16(%rbp), %rax
	movl	%eax, %ecx
	movl	%ecx, -4860(%rbp)
# BB#37:                                # %do.body.111
	xorl	%esi, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4824(%rbp)
# BB#38:                                # %do.end.112
	jmp	.LBB15_39
.LBB15_39:                              # %do.body.113
	cmpq	$0, -4824(%rbp)
	je	.LBB15_41
# BB#40:                                # %if.then.115
	movl	$1, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB15_41:                              # %if.end.116
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4816(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4824(%rbp)
# BB#42:                                # %do.end.118
	movq	$-1, %rsi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$4, %r9d
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movl	2440(%rcx), %edx
	addl	-4860(%rbp), %edx
	movl	%edx, -4900(%rbp)       # 4-byte Spill
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	-4900(%rbp), %r8d       # 4-byte Reload
	callq	move_it_to
	movq	-8(%rbp), %rsi
	movq	312(%rsi), %rsi
	cmpq	-4832(%rbp), %rsi
	movl	%eax, -4904(%rbp)       # 4-byte Spill
	jl	.LBB15_48
# BB#43:                                # %if.then.127
	jmp	.LBB15_44
.LBB15_44:                              # %do.body.128
	leaq	-4816(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB15_46
# BB#45:                                # %if.then.131
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4816(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB15_46:                              # %if.end.132
	xorl	%esi, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4824(%rbp)
# BB#47:                                # %do.end.133
	jmp	.LBB15_49
.LBB15_48:                              # %if.else.134
	movl	$1, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB15_49:                              # %if.end.135
	jmp	.LBB15_69
.LBB15_50:                              # %if.else.136
	testb	$1, -4845(%rbp)
	je	.LBB15_63
# BB#51:                                # %land.lhs.true.139
	movq	-4856(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB15_63
# BB#52:                                # %land.lhs.true.143
	cmpq	$0, -16(%rbp)
	jge	.LBB15_63
# BB#53:                                # %land.lhs.true.146
	xorl	%eax, %eax
	movl	%eax, %ecx
	movslq	-2376(%rbp), %rdx
	subq	-16(%rbp), %rcx
	cmpq	%rcx, %rdx
	jge	.LBB15_63
# BB#54:                                # %if.then.152
	movslq	-2376(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# BB#55:                                # %do.body.156
	movq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.LBB15_57
# BB#56:                                # %if.then.159
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB15_57:                              # %if.end.160
	xorl	%esi, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4824(%rbp)
# BB#58:                                # %do.end.161
	xorl	%eax, %eax
	movl	%eax, %ecx
	subq	-16(%rbp), %rcx
	movq	%rcx, -4840(%rbp)
.LBB15_59:                              # %for.cond.163
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -4840(%rbp)
	jle	.LBB15_62
# BB#60:                                # %for.body.166
                                        #   in Loop: Header=BB15_59 Depth=1
	movq	-8(%rbp), %rdi
	callq	back_to_previous_visible_line_start
	movq	-8(%rbp), %rdi
	movl	2440(%rdi), %eax
	addl	$-1, %eax
	movl	%eax, 2440(%rdi)
# BB#61:                                # %for.inc.169
                                        #   in Loop: Header=BB15_59 Depth=1
	movq	-4840(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4840(%rbp)
	jmp	.LBB15_59
.LBB15_62:                              # %for.end.171
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat_1
	jmp	.LBB15_68
.LBB15_63:                              # %if.else.174
	jmp	.LBB15_64
.LBB15_64:                              # %do.body.175
	movq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.LBB15_66
# BB#65:                                # %if.then.178
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB15_66:                              # %if.end.179
	xorl	%esi, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4824(%rbp)
# BB#67:                                # %do.end.180
	jmp	.LBB15_68
.LBB15_68:                              # %if.end.181
	jmp	.LBB15_69
.LBB15_69:                              # %if.end.182
	jmp	.LBB15_70
.LBB15_70:                              # %if.end.183
	jmp	.LBB15_71
.LBB15_71:                              # %if.end.184
	addq	$4912, %rsp             # imm = 0x1330
	popq	%rbp
	retq
.Lfunc_end15:
	.size	move_it_by_lines, .Lfunc_end15-move_it_by_lines
	.cfi_endproc

	.globl	Fline_pixel_height
	.align	16, 0x90
	.type	Fline_pixel_height,@function
Fline_pixel_height:                     # @Fline_pixel_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp48:
	.cfi_def_cfa_offset 16
.Ltmp49:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp50:
	.cfi_def_cfa_register %rbp
	subq	$4848, %rsp             # imm = 0x12F0
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -4824(%rbp)
	movq	$0, -4832(%rbp)
	movq	-4824(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	cmpq	current_buffer, %rax
	je	.LBB16_2
# BB#1:                                 # %if.then
	movq	current_buffer, %rax
	movq	%rax, -4832(%rbp)
	movq	-4824(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
.LBB16_2:                               # %if.end
	leaq	-4800(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -4816(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -4808(%rbp)
	movq	-4824(%rbp), %rsi
	movq	-4816(%rbp), %rdx
	movq	-4808(%rbp), %rcx
	callq	start_display
	leaq	-4800(%rbp), %rdi
	movl	$0, -2368(%rbp)
	movl	$0, -2360(%rbp)
	movl	$0, last_height
	callq	line_bottom_y
	movslq	%eax, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, -4840(%rbp)
	cmpq	$0, -4832(%rbp)
	je	.LBB16_4
# BB#3:                                 # %if.then.8
	movq	-4832(%rbp), %rdi
	callq	set_buffer_internal_1
.LBB16_4:                               # %if.end.9
	movq	-4840(%rbp), %rax
	addq	$4848, %rsp             # imm = 0x12F0
	popq	%rbp
	retq
.Lfunc_end16:
	.size	Fline_pixel_height, .Lfunc_end16-Fline_pixel_height
	.cfi_endproc

	.globl	start_display
	.align	16, 0x90
	.type	start_display,@function
start_display:                          # @start_display
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp51:
	.cfi_def_cfa_offset 16
.Ltmp52:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp53:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdx, -16(%rbp)
	movq	%rcx, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	80(%rcx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB17_1
	jmp	.LBB17_16
.LBB17_1:                               # %cond.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -57(%rbp)          # 1-byte Spill
	jne	.LBB17_15
# BB#2:                                 # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -57(%rbp)          # 1-byte Spill
	jne	.LBB17_15
# BB#3:                                 # %land.lhs.true.4
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -57(%rbp)          # 1-byte Spill
	je	.LBB17_15
# BB#4:                                 # %land.lhs.true.9
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-72(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -57(%rbp)          # 1-byte Spill
	je	.LBB17_15
# BB#5:                                 # %land.rhs
	movq	-32(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB17_6
	jmp	.LBB17_11
.LBB17_6:                               # %cond.true.15
	movq	-32(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB17_13
# BB#7:                                 # %land.lhs.true.20
	movq	-32(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB17_13
# BB#8:                                 # %land.lhs.true.26
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB17_13
# BB#9:                                 # %land.lhs.true.34
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB17_13
# BB#10:                                # %land.lhs.true.39
	movq	-32(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB17_12
	jmp	.LBB17_13
.LBB17_11:                              # %cond.false
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB17_12
	jmp	.LBB17_13
.LBB17_12:                              # %cond.true.44
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
	jmp	.LBB17_14
.LBB17_13:                              # %cond.false.48
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
.LBB17_14:                              # %cond.end
	movl	-92(%rbp), %eax         # 4-byte Reload
	movl	-76(%rbp), %ecx         # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -57(%rbp)          # 1-byte Spill
.LBB17_15:                              # %land.end
	movb	-57(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -96(%rbp)         # 4-byte Spill
	jmp	.LBB17_17
.LBB17_16:                              # %cond.false.53
	xorl	%eax, %eax
	movl	%eax, -96(%rbp)         # 4-byte Spill
	jmp	.LBB17_17
.LBB17_17:                              # %cond.end.54
	movl	-96(%rbp), %eax         # 4-byte Reload
	xorl	%r9d, %r9d
	cmpl	$0, %eax
	setne	%cl
	andb	$1, %cl
	movb	%cl, -41(%rbp)
	movq	-32(%rbp), %rdx
	movq	200(%rdx), %rdx
	movq	8(%rdx), %rdx
	movb	-41(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movslq	%eax, %rsi
	shlq	$8, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %r8
	callq	init_iterator
	movb	-41(%rbp), %r10b
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 2436(%rcx)
	movq	-24(%rbp), %rcx
	cmpl	$0, 24(%rcx)
	jne	.LBB17_48
# BB#18:                                # %land.lhs.true.62
	movq	-24(%rbp), %rax
	cmpl	$0, 2116(%rax)
	je	.LBB17_48
# BB#19:                                # %if.then
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movl	2432(%rcx), %edx
	movl	%edx, -48(%rbp)
	movq	-16(%rbp), %rcx
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rcx
	movb	%al, -97(%rbp)          # 1-byte Spill
	je	.LBB17_24
# BB#20:                                # %lor.rhs
	movq	-8(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB17_22
# BB#21:                                # %cond.true.72
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB17_23
.LBB17_22:                              # %cond.false.74
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	jmp	.LBB17_23
.LBB17_23:                              # %cond.end.75
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	sete	%sil
	movb	%sil, -97(%rbp)         # 1-byte Spill
.LBB17_24:                              # %lor.end
	movb	-97(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -49(%rbp)
	testb	$1, -49(%rbp)
	jne	.LBB17_47
# BB#25:                                # %if.then.87
	movq	-24(%rbp), %rdi
	callq	reseat_at_previous_visible_line_start
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movq	-24(%rbp), %rsi
	movl	2404(%rsi), %ecx
	movq	-24(%rbp), %rsi
	addl	2368(%rsi), %ecx
	movl	%ecx, -56(%rbp)
	movq	-24(%rbp), %rsi
	cmpl	$0, 2404(%rsi)
	movl	%eax, -116(%rbp)        # 4-byte Spill
	jle	.LBB17_43
# BB#26:                                # %land.lhs.true.94
	movq	-24(%rbp), %rax
	cmpl	$0, 2116(%rax)
	je	.LBB17_43
# BB#27:                                # %land.lhs.true.98
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jg	.LBB17_38
# BB#28:                                # %lor.lhs.false
	movl	-56(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jne	.LBB17_43
# BB#29:                                # %land.lhs.true.104
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB17_43
# BB#30:                                # %land.lhs.true.111
	movq	-24(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB17_35
# BB#31:                                # %land.lhs.true.117
	movq	-24(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB17_35
# BB#32:                                # %cond.true.120
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB17_34
# BB#33:                                # %cond.true.124
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jne	.LBB17_38
	jmp	.LBB17_43
.LBB17_34:                              # %cond.false.128
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 344(%rax)
	jne	.LBB17_38
	jmp	.LBB17_43
.LBB17_35:                              # %cond.false.134
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB17_37
# BB#36:                                # %cond.true.138
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jne	.LBB17_38
	jmp	.LBB17_43
.LBB17_37:                              # %cond.false.142
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 348(%rax)
	je	.LBB17_43
.LBB17_38:                              # %if.then.148
	movq	-24(%rbp), %rax
	cmpl	$0, 352(%rax)
	jge	.LBB17_40
# BB#39:                                # %lor.lhs.false.151
	movq	-24(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB17_42
.LBB17_40:                              # %land.lhs.true.155
	movq	-24(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB17_42
# BB#41:                                # %if.then.158
	movl	$1, %esi
	movq	-24(%rbp), %rdi
	callq	set_iterator_to_next
	movq	$-1, %rsi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rdi
	callq	move_it_in_display_line_to
	movl	%eax, -120(%rbp)        # 4-byte Spill
.LBB17_42:                              # %if.end
	movq	-24(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-24(%rbp), %rax
	addl	2408(%rax), %ecx
	movl	%ecx, 2408(%rax)
	jmp	.LBB17_46
.LBB17_43:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 352(%rax)
	jl	.LBB17_45
# BB#44:                                # %if.then.166
	movq	-24(%rbp), %rax
	movl	$0, 352(%rax)
.LBB17_45:                              # %if.end.169
	jmp	.LBB17_46
.LBB17_46:                              # %if.end.170
	movq	-24(%rbp), %rax
	movl	$0, 2384(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2380(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2400(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2396(%rax)
	movl	-48(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 2432(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2440(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2444(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2404(%rax)
.LBB17_47:                              # %if.end.173
	jmp	.LBB17_48
.LBB17_48:                              # %if.end.174
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end17:
	.size	start_display, .Lfunc_end17-start_display
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI18_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	default_line_pixel_height
	.align	16, 0x90
	.type	default_line_pixel_height,@function
default_line_pixel_height:              # @default_line_pixel_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp54:
	.cfi_def_cfa_offset 16
.Ltmp55:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp56:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movl	368(%rdi), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$0, %eax
	je	.LBB18_15
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB18_2
	jmp	.LBB18_15
.LBB18_2:                               # %if.then
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	560(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB18_4
# BB#3:                                 # %if.then.5
	movq	buffer_defaults+560, %rax
	movq	%rax, -40(%rbp)
.LBB18_4:                               # %if.end
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB18_13
# BB#5:                                 # %if.then.8
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %edx
	movq	-40(%rbp), %rsi
	callq	RANGED_INTEGERP
	testb	$1, %al
	jne	.LBB18_6
	jmp	.LBB18_7
.LBB18_6:                               # %if.then.10
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movslq	-20(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, %edx
	movl	%edx, -20(%rbp)
	jmp	.LBB18_12
.LBB18_7:                               # %if.else
	movq	-40(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB18_11
# BB#8:                                 # %if.then.15
	movq	-40(%rbp), %rdi
	callq	XFLOAT_DATA
	movsd	.LCPI18_0, %xmm1        # xmm1 = mem[0],zero
	cvtsi2sdl	-20(%rbp), %xmm2
	mulsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jl	.LBB18_10
# BB#9:                                 # %if.then.22
	movl	-44(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB18_10:                              # %if.end.24
	jmp	.LBB18_11
.LBB18_11:                              # %if.end.25
	jmp	.LBB18_12
.LBB18_12:                              # %if.end.26
	jmp	.LBB18_14
.LBB18_13:                              # %if.else.27
	movq	-16(%rbp), %rax
	movl	464(%rax), %ecx
	addl	-20(%rbp), %ecx
	movl	%ecx, -20(%rbp)
.LBB18_14:                              # %if.end.29
	jmp	.LBB18_15
.LBB18_15:                              # %if.end.30
	movl	-20(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end18:
	.size	default_line_pixel_height, .Lfunc_end18-default_line_pixel_height
	.cfi_endproc

	.globl	pos_visible_p
	.align	16, 0x90
	.type	pos_visible_p,@function
pos_visible_p:                          # @pos_visible_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp57:
	.cfi_def_cfa_offset 16
.Ltmp58:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp59:
	.cfi_def_cfa_register %rbp
	subq	$29712, %rsp            # imm = 0x7410
	movq	24(%rbp), %rax
	movq	16(%rbp), %r10
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	%r10, -64(%rbp)
	movq	%rax, -72(%rbp)
	callq	bidi_shelve_cache
	movq	%rax, -4880(%rbp)
	movb	$0, -4897(%rbp)
	movq	$0, -4912(%rbp)
	movb	$0, -4913(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %r11d
	cmpl	$0, %r11d
	jne	.LBB19_2
# BB#1:                                 # %if.then
	movb	-4897(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB19_388
.LBB19_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	cmpq	current_buffer, %rax
	je	.LBB19_4
# BB#3:                                 # %if.then.3
	movq	current_buffer, %rax
	movq	%rax, -4912(%rbp)
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
.LBB19_4:                               # %if.end.6
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -4896(%rbp)
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -4888(%rbp)
	movq	-4896(%rbp), %rax
	movq	current_buffer, %rdi
	cmpq	768(%rdi), %rax
	jle	.LBB19_6
# BB#5:                                 # %if.then.13
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4896(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -4888(%rbp)
.LBB19_6:                               # %if.end.16
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_7
	jmp	.LBB19_12
.LBB19_7:                               # %cond.true
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_21
# BB#8:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_21
# BB#9:                                 # %land.lhs.true.26
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_21
# BB#10:                                # %land.lhs.true.33
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29064(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29064(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_21
# BB#11:                                # %land.lhs.true.38
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_13
	jmp	.LBB19_21
.LBB19_12:                              # %cond.false
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_13
	jmp	.LBB19_21
.LBB19_13:                              # %if.then.42
	movb	$1, %al
	movq	-16(%rbp), %rdi
	testb	$1, globals+3413
	movq	%rdi, -29072(%rbp)      # 8-byte Spill
	movb	%al, -29073(%rbp)       # 1-byte Spill
	je	.LBB19_20
# BB#14:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -29088(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-29088(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -29073(%rbp)       # 1-byte Spill
	je	.LBB19_20
# BB#15:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -29089(%rbp)       # 1-byte Spill
	jle	.LBB19_19
# BB#16:                                # %land.lhs.true.47
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -29104(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-29104(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -29089(%rbp)       # 1-byte Spill
	je	.LBB19_19
# BB#17:                                # %land.lhs.true.50
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -29112(%rbp)      # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-29112(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -29089(%rbp)       # 1-byte Spill
	jne	.LBB19_19
# BB#18:                                # %land.rhs
	movq	-16(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -29120(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-29120(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -29089(%rbp)       # 1-byte Spill
.LBB19_19:                              # %land.end
	movb	-29089(%rbp), %al       # 1-byte Reload
	movb	%al, -29073(%rbp)       # 1-byte Spill
.LBB19_20:                              # %lor.end
	movb	-29073(%rbp), %al       # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	current_buffer, %rsi
	movq	96(%rsi), %rdx
	movq	-29072(%rbp), %rdi      # 8-byte Reload
	movl	%ecx, %esi
	callq	display_mode_line
	movq	-16(%rbp), %rdx
	movl	%eax, 444(%rdx)
.LBB19_21:                              # %if.end.58
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_22
	jmp	.LBB19_36
.LBB19_22:                              # %cond.true.61
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_38
# BB#23:                                # %land.lhs.true.66
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_38
# BB#24:                                # %land.lhs.true.72
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_38
# BB#25:                                # %land.lhs.true.80
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -29128(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29128(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_38
# BB#26:                                # %land.lhs.true.85
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -29132(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_27
	jmp	.LBB19_32
.LBB19_27:                              # %cond.true.89
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_34
# BB#28:                                # %land.lhs.true.94
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_34
# BB#29:                                # %land.lhs.true.100
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_34
# BB#30:                                # %land.lhs.true.108
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29144(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29144(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_34
# BB#31:                                # %land.lhs.true.114
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_33
	jmp	.LBB19_34
.LBB19_32:                              # %cond.false.120
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_33
	jmp	.LBB19_34
.LBB19_33:                              # %cond.true.121
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -29148(%rbp)      # 4-byte Spill
	jmp	.LBB19_35
.LBB19_34:                              # %cond.false.125
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -29148(%rbp)      # 4-byte Spill
.LBB19_35:                              # %cond.end
	movl	-29148(%rbp), %eax      # 4-byte Reload
	movl	-29132(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB19_37
	jmp	.LBB19_38
.LBB19_36:                              # %cond.false.131
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_37
	jmp	.LBB19_38
.LBB19_37:                              # %if.then.132
	movl	$5, %esi
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	104(%rax), %rdx
	callq	display_mode_line
	movq	-16(%rbp), %rdx
	movl	%eax, 448(%rdx)
.LBB19_38:                              # %if.end.135
	leaq	-4872(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4896(%rbp), %rdx
	movq	-4888(%rbp), %rcx
	callq	start_display
	leaq	-4872(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	movl	$8, %r9d
	movq	-24(%rbp), %rsi
	movl	-2548(%rbp), %r10d
	subl	$1, %r10d
	cmpq	$0, -24(%rbp)
	cmovgel	%r9d, %r8d
	orl	$2, %r8d
	movl	%eax, %edx
	movl	%r10d, %ecx
	movl	%r8d, -29152(%rbp)      # 4-byte Spill
	movl	%eax, %r8d
	movl	-29152(%rbp), %r9d      # 4-byte Reload
	callq	move_it_to
	cmpq	$0, -24(%rbp)
	movl	%eax, -29156(%rbp)      # 4-byte Spill
	jl	.LBB19_214
# BB#39:                                # %land.lhs.true.141
	movl	-2416(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB19_41
# BB#40:                                # %lor.lhs.false.146
	cmpl	$-1, -2224(%rbp)
	je	.LBB19_42
.LBB19_41:                              # %land.lhs.true.148
	movq	-4560(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB19_45
.LBB19_42:                              # %lor.lhs.false.151
	movl	-2416(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB19_214
# BB#43:                                # %land.lhs.true.157
	cmpl	$-1, -2224(%rbp)
	jne	.LBB19_214
# BB#44:                                # %land.lhs.true.161
	movq	-4560(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jg	.LBB19_214
.LBB19_45:                              # %if.then.166
	movl	-2468(%rbp), %eax
	movl	%eax, -4920(%rbp)
	movl	-2440(%rbp), %eax
	movl	%eax, -4924(%rbp)
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_46
	jmp	.LBB19_60
.LBB19_46:                              # %cond.true.169
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_75
# BB#47:                                # %land.lhs.true.174
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_75
# BB#48:                                # %land.lhs.true.180
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_75
# BB#49:                                # %land.lhs.true.188
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -29168(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29168(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_75
# BB#50:                                # %land.lhs.true.194
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -29172(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_51
	jmp	.LBB19_56
.LBB19_51:                              # %cond.true.198
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_58
# BB#52:                                # %land.lhs.true.203
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_58
# BB#53:                                # %land.lhs.true.209
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_58
# BB#54:                                # %land.lhs.true.217
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29184(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29184(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_58
# BB#55:                                # %land.lhs.true.223
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_57
	jmp	.LBB19_58
.LBB19_56:                              # %cond.false.229
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_57
	jmp	.LBB19_58
.LBB19_57:                              # %cond.true.230
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -29188(%rbp)      # 4-byte Spill
	jmp	.LBB19_59
.LBB19_58:                              # %cond.false.235
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -29188(%rbp)      # 4-byte Spill
.LBB19_59:                              # %cond.end.239
	movl	-29188(%rbp), %eax      # 4-byte Reload
	movl	-29172(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB19_61
	jmp	.LBB19_75
.LBB19_60:                              # %cond.false.242
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_61
	jmp	.LBB19_75
.LBB19_61:                              # %cond.true.243
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB19_63
# BB#62:                                # %cond.true.246
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -29192(%rbp)      # 4-byte Spill
	jmp	.LBB19_74
.LBB19_63:                              # %cond.false.248
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_66
# BB#64:                                # %land.lhs.true.250
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_66
# BB#65:                                # %cond.true.253
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB19_67
	jmp	.LBB19_72
.LBB19_66:                              # %cond.false.257
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_67
	jmp	.LBB19_72
.LBB19_67:                              # %cond.true.258
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_70
# BB#68:                                # %land.lhs.true.261
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_70
# BB#69:                                # %cond.true.265
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -29196(%rbp)      # 4-byte Spill
	jmp	.LBB19_71
.LBB19_70:                              # %cond.false.269
	xorl	%eax, %eax
	movl	%eax, -29196(%rbp)      # 4-byte Spill
	jmp	.LBB19_71
.LBB19_71:                              # %cond.end.270
	movl	-29196(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29200(%rbp)      # 4-byte Spill
	jmp	.LBB19_73
.LBB19_72:                              # %cond.false.272
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -29200(%rbp)      # 4-byte Spill
.LBB19_73:                              # %cond.end.276
	movl	-29200(%rbp), %eax      # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -29192(%rbp)      # 4-byte Spill
.LBB19_74:                              # %cond.end.279
	movl	-29192(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29204(%rbp)      # 4-byte Spill
	jmp	.LBB19_76
.LBB19_75:                              # %cond.false.281
	xorl	%eax, %eax
	movl	%eax, -29204(%rbp)      # 4-byte Spill
	jmp	.LBB19_76
.LBB19_76:                              # %cond.end.282
	movl	-29204(%rbp), %eax      # 4-byte Reload
	movl	%eax, -4928(%rbp)
	movq	$0, -9744(%rbp)
# BB#77:                                # %do.body
	cmpq	$0, -9744(%rbp)
	je	.LBB19_79
# BB#78:                                # %if.then.285
	movl	$1, %esi
	movq	-9744(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB19_79:                              # %if.end.286
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4872(%rbp), %rcx
	leaq	-9736(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -9744(%rbp)
# BB#80:                                # %do.end
	leaq	-4872(%rbp), %rdi
	movl	$0, last_height
	callq	line_bottom_y
	movl	%eax, -4932(%rbp)
	movl	-4924(%rbp), %eax
	cmpl	-4928(%rbp), %eax
	jge	.LBB19_82
# BB#81:                                # %if.then.290
	movl	-4932(%rbp), %eax
	cmpl	-4928(%rbp), %eax
	setg	%cl
	andb	$1, %cl
	movb	%cl, -4897(%rbp)
	jmp	.LBB19_85
.LBB19_82:                              # %if.else
	movl	-4924(%rbp), %eax
	cmpl	-2548(%rbp), %eax
	jge	.LBB19_84
# BB#83:                                # %if.then.294
	movb	$1, -4897(%rbp)
.LBB19_84:                              # %if.end.295
	jmp	.LBB19_85
.LBB19_85:                              # %if.end.296
	movl	-4932(%rbp), %eax
	cmpl	-2548(%rbp), %eax
	jl	.LBB19_92
# BB#86:                                # %land.lhs.true.299
	movl	-2416(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB19_92
# BB#87:                                # %land.lhs.true.305
	cmpl	$-1, -2224(%rbp)
	jne	.LBB19_92
# BB#88:                                # %land.lhs.true.309
	movq	-4560(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB19_92
# BB#89:                                # %if.then.314
	movq	-16(%rbp), %rdi
	callq	default_line_pixel_height
	leaq	-4872(%rbp), %rdi
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$10, %r9d
	imull	$10, %eax, %eax
	movl	%eax, -9748(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4932(%rbp), %eax
	addl	-9748(%rbp), %eax
	movl	%ecx, %edx
	movl	%ecx, -29208(%rbp)      # 4-byte Spill
	movl	%eax, %ecx
	movl	-29208(%rbp), %r8d      # 4-byte Reload
	callq	move_it_to
	movl	-2440(%rbp), %ecx
	cmpl	-4924(%rbp), %ecx
	movl	%eax, -29212(%rbp)      # 4-byte Spill
	jle	.LBB19_91
# BB#90:                                # %if.then.320
	movb	$0, -4897(%rbp)
.LBB19_91:                              # %if.end.321
	jmp	.LBB19_92
.LBB19_92:                              # %if.end.322
	jmp	.LBB19_93
.LBB19_93:                              # %do.body.323
	xorl	%esi, %esi
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9736(%rbp), %rcx
	leaq	-4872(%rbp), %rdi
	movl	%esi, -29216(%rbp)      # 4-byte Spill
	movq	%rcx, %rsi
	callq	memcpy
	movq	-9744(%rbp), %rdi
	movl	-29216(%rbp), %esi      # 4-byte Reload
	callq	bidi_unshelve_cache
	movq	$0, -9744(%rbp)
# BB#94:                                # %do.end.324
	testb	$1, -4897(%rbp)
	je	.LBB19_213
# BB#95:                                # %if.then.326
	cmpl	$1, -4848(%rbp)
	jne	.LBB19_126
# BB#96:                                # %if.then.328
	cmpq	$2, -24(%rbp)
	jl	.LBB19_98
# BB#97:                                # %lor.lhs.false.330
	movq	-4896(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jl	.LBB19_99
.LBB19_98:                              # %if.then.333
	movq	-2520(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, -4920(%rbp)
	jmp	.LBB19_125
.LBB19_99:                              # %if.else.335
	leaq	-14552(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4896(%rbp), %rdx
	movq	-4888(%rbp), %rcx
	callq	start_display
	leaq	-14552(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-24(%rbp), %rcx
	subq	$1, %rcx
	movq	%rcx, %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movq	-14240(%rbp), %rsi
	movq	-24(%rbp), %rdi
	subq	$1, %rdi
	cmpq	%rdi, %rsi
	movl	%eax, -29220(%rbp)      # 4-byte Spill
	je	.LBB19_101
# BB#100:                               # %if.then.343
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-14552(%rbp), %rcx
	leaq	-19352(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	jmp	.LBB19_117
.LBB19_101:                             # %if.else.344
	jmp	.LBB19_102
.LBB19_102:                             # %do.body.345
                                        # =>This Inner Loop Header: Depth=1
	leaq	-14552(%rbp), %rdi
	callq	get_next_display_element
	movb	%al, -29221(%rbp)       # 1-byte Spill
# BB#103:                               # %do.body.347
                                        #   in Loop: Header=BB19_102 Depth=1
	cmpq	$0, -12200(%rbp)
	je	.LBB19_106
# BB#104:                               # %land.lhs.true.350
                                        #   in Loop: Header=BB19_102 Depth=1
	movl	-12096(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB19_106
# BB#105:                               # %if.then.356
                                        #   in Loop: Header=BB19_102 Depth=1
	cmpl	$2, -9784(%rbp)
	sete	%al
	movq	-12200(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB19_106:                             # %if.end.363
                                        #   in Loop: Header=BB19_102 Depth=1
	movq	-14536(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB19_108
# BB#107:                               # %if.then.365
                                        #   in Loop: Header=BB19_102 Depth=1
	leaq	-14552(%rbp), %rdi
	movq	-14536(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	callq	*8(%rax)
	jmp	.LBB19_109
.LBB19_108:                             # %if.else.369
                                        #   in Loop: Header=BB19_102 Depth=1
	leaq	-14552(%rbp), %rdi
	callq	produce_glyphs
.LBB19_109:                             # %if.end.370
                                        #   in Loop: Header=BB19_102 Depth=1
	cmpq	$0, -12200(%rbp)
	je	.LBB19_111
# BB#110:                               # %if.then.373
                                        #   in Loop: Header=BB19_102 Depth=1
	movb	$1, globals+3391
.LBB19_111:                             # %if.end.374
                                        #   in Loop: Header=BB19_102 Depth=1
	jmp	.LBB19_112
.LBB19_112:                             # %do.end.375
                                        #   in Loop: Header=BB19_102 Depth=1
	leaq	-14552(%rbp), %rax
	movl	$1, %esi
	movl	$4800, %ecx             # imm = 0x12C0
	movl	%ecx, %edx
	leaq	-19352(%rbp), %rdi
	movq	%rax, %r8
	movl	%esi, -29228(%rbp)      # 4-byte Spill
	movq	%r8, %rsi
	movq	%rax, -29240(%rbp)      # 8-byte Spill
	callq	memcpy
	movq	-29240(%rbp), %rdi      # 8-byte Reload
	movl	-29228(%rbp), %esi      # 4-byte Reload
	callq	set_iterator_to_next
# BB#113:                               # %do.cond
                                        #   in Loop: Header=BB19_102 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$1, -14528(%rbp)
	movb	%cl, -29241(%rbp)       # 1-byte Spill
	jne	.LBB19_115
# BB#114:                               # %land.rhs.378
                                        #   in Loop: Header=BB19_102 Depth=1
	movq	-14240(%rbp), %rax
	cmpq	-24(%rbp), %rax
	setl	%cl
	movb	%cl, -29241(%rbp)       # 1-byte Spill
.LBB19_115:                             # %land.end.383
                                        #   in Loop: Header=BB19_102 Depth=1
	movb	-29241(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_102
# BB#116:                               # %do.end.384
	jmp	.LBB19_117
.LBB19_117:                             # %if.end.385
	cmpl	$0, -17248(%rbp)
	jne	.LBB19_121
# BB#118:                               # %land.lhs.true.387
	cmpl	$10, -17228(%rbp)
	je	.LBB19_122
# BB#119:                               # %lor.lhs.false.389
	cmpl	$13, -17228(%rbp)
	jne	.LBB19_121
# BB#120:                               # %land.lhs.true.392
	cmpq	$0, -17256(%rbp)
	jne	.LBB19_122
.LBB19_121:                             # %lor.lhs.false.394
	movl	-16948(%rbp), %eax
	cmpl	-17032(%rbp), %eax
	jle	.LBB19_123
.LBB19_122:                             # %if.then.397
	movq	-2520(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, -4920(%rbp)
	jmp	.LBB19_124
.LBB19_123:                             # %if.else.400
	movl	-16948(%rbp), %eax
	movl	%eax, -4920(%rbp)
	movl	-16920(%rbp), %eax
	movl	%eax, -4924(%rbp)
.LBB19_124:                             # %if.end.403
	jmp	.LBB19_125
.LBB19_125:                             # %if.end.404
	jmp	.LBB19_180
.LBB19_126:                             # %if.else.405
	movq	-4560(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB19_179
# BB#127:                               # %if.then.410
	movl	$344, %edi              # imm = 0x158
	movq	-24(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -19360(%rbp)
	movq	-19360(%rbp), %rax
	movq	%rax, -29256(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -29264(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29256(%rbp), %rdi      # 8-byte Reload
	movq	-29264(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	movq	%rax, -19368(%rbp)
	movq	-19368(%rbp), %rdi
	callq	string_from_display_spec
	movq	%rax, -19376(%rbp)
	movq	-19376(%rbp), %rdi
	callq	STRINGP
	xorl	%ecx, %ecx
	movb	%cl, %r8b
	testb	$1, %al
	movb	%r8b, -29265(%rbp)      # 1-byte Spill
	jne	.LBB19_128
	jmp	.LBB19_129
.LBB19_128:                             # %land.rhs.417
	movq	-19376(%rbp), %rdi
	callq	SDATA
	movq	-19376(%rbp), %rdi
	movq	%rax, -29280(%rbp)      # 8-byte Spill
	callq	SBYTES
	movl	$10, %esi
	movq	-29280(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rdx
	callq	memchr
	cmpq	$0, %rax
	setne	%cl
	movb	%cl, -29265(%rbp)       # 1-byte Spill
.LBB19_129:                             # %land.end.422
	movb	-29265(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movb	%al, -19393(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -19392(%rbp)
	movq	current_buffer, %rdi
	movq	-24(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	xorl	%edi, %edi
	movq	%rax, -19384(%rbp)
	movq	-19368(%rbp), %rax
	movq	%rax, -29288(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %dl
	movq	-29288(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	movb	%dl, -29289(%rbp)       # 1-byte Spill
	je	.LBB19_131
# BB#130:                               # %land.rhs.429
	xorl	%edi, %edi
	movq	-19368(%rbp), %rsi
	movq	%rsi, -29304(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -29312(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %esi
	leaq	-19392(%rbp), %rcx
	movq	-24(%rbp), %r9
	movq	-4856(%rbp), %rdx
	movq	208(%rdx), %rdx
	shrq	$23, %rdx
	andq	$7, %rdx
	movl	%edx, %edi
	cmpl	$2, %edi
	sete	%r8b
	movzbl	%r8b, %edi
	andl	$1, %edi
	movq	%rsp, %rdx
	movl	%edi, (%rdx)
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-19392(%rbp), %r8
	movq	-29304(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -29320(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-29312(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -29328(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	callq	handle_display_spec
	cmpl	$0, %eax
	setne	%r10b
	movb	%r10b, -29289(%rbp)     # 1-byte Spill
.LBB19_131:                             # %land.end.441
	movb	-29289(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movb	%al, -19394(%rbp)
	testb	$1, -19394(%rbp)
	je	.LBB19_178
# BB#132:                               # %if.then.444
	movl	$344, %edi              # imm = 0x158
	movq	-19360(%rbp), %rax
	movq	%rax, -29336(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -29344(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -29352(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29336(%rbp), %rdi      # 8-byte Reload
	movq	-29344(%rbp), %rsi      # 8-byte Reload
	movq	-29352(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_char_property_change
	movl	$344, %edi              # imm = 0x158
	movq	%rax, -19416(%rbp)
	movq	-19416(%rbp), %rax
	movq	%rax, -29360(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -29368(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -29376(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29360(%rbp), %rdi      # 8-byte Reload
	movq	-29368(%rbp), %rsi      # 8-byte Reload
	movq	-29376(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	Fprevious_single_char_property_change
	leaq	-24232(%rbp), %rdi
	movq	%rax, -19408(%rbp)
	movq	-19408(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -19424(%rbp)
	movq	-19416(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -19432(%rbp)
	movq	-16(%rbp), %rsi
	movq	-4896(%rbp), %rdx
	movq	-4888(%rbp), %rcx
	callq	start_display
	movq	-19424(%rbp), %rax
	cmpq	-4896(%rbp), %rax
	jle	.LBB19_134
# BB#133:                               # %if.then.457
	leaq	-24232(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-19424(%rbp), %rcx
	subq	$1, %rcx
	movq	%rcx, %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movl	%eax, -29380(%rbp)      # 4-byte Spill
.LBB19_134:                             # %if.end.460
	cmpl	$0, -24208(%rbp)
	jne	.LBB19_141
# BB#135:                               # %land.lhs.true.463
	cmpl	$10, -22108(%rbp)
	je	.LBB19_140
# BB#136:                               # %lor.lhs.false.466
	movq	-23912(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB19_138
# BB#137:                               # %cond.true.471
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -29392(%rbp)      # 8-byte Spill
	jmp	.LBB19_139
.LBB19_138:                             # %cond.false.473
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -29392(%rbp)      # 8-byte Spill
	jmp	.LBB19_139
.LBB19_139:                             # %cond.end.474
	movq	-29392(%rbp), %rax      # 8-byte Reload
	addq	-23912(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	jne	.LBB19_141
.LBB19_140:                             # %if.then.484
	leaq	-24232(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
	jmp	.LBB19_146
.LBB19_141:                             # %if.else.485
	leaq	-24232(%rbp), %rdi
	movq	$-1, %rsi
	movl	$1, %ecx
	movl	-21828(%rbp), %eax
	addl	-21864(%rbp), %eax
	movl	%eax, %edx
	callq	move_it_in_display_line_to
	cmpl	$3, %eax
	jne	.LBB19_145
# BB#142:                               # %if.then.491
	leaq	-24232(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
	cmpl	$1, -22116(%rbp)
	jne	.LBB19_144
# BB#143:                               # %if.then.494
	leaq	-24232(%rbp), %rdi
	movq	$-1, %rsi
	callq	move_it_by_lines
.LBB19_144:                             # %if.end.495
	jmp	.LBB19_145
.LBB19_145:                             # %if.end.496
	jmp	.LBB19_146
.LBB19_146:                             # %if.end.497
	movl	-21800(%rbp), %eax
	movl	%eax, -4924(%rbp)
	movl	-21776(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB19_150
# BB#147:                               # %if.then.504
	leaq	-24232(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4896(%rbp), %rdx
	movq	-4888(%rbp), %rcx
	callq	start_display
	leaq	-24232(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-19432(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movl	-21800(%rbp), %ecx
	cmpl	-4924(%rbp), %ecx
	movl	%eax, -29396(%rbp)      # 4-byte Spill
	jge	.LBB19_149
# BB#148:                               # %if.then.510
	movl	-21800(%rbp), %eax
	movl	%eax, -4924(%rbp)
.LBB19_149:                             # %if.end.512
	jmp	.LBB19_150
.LBB19_150:                             # %if.end.513
	leaq	-24232(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4896(%rbp), %rdx
	movq	-4888(%rbp), %rcx
	callq	start_display
	leaq	-24232(%rbp), %rdi
	movq	$-1, %rsi
	xorl	%edx, %edx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$3, %r9d
	movl	-4924(%rbp), %ecx
	callq	move_it_to
	movb	$0, -24233(%rbp)
	movl	%eax, -29400(%rbp)      # 4-byte Spill
.LBB19_151:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24232(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB19_152
	jmp	.LBB19_169
.LBB19_152:                             # %while.body
                                        #   in Loop: Header=BB19_151 Depth=1
	jmp	.LBB19_153
.LBB19_153:                             # %do.body.516
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpq	$0, -21880(%rbp)
	je	.LBB19_156
# BB#154:                               # %land.lhs.true.520
                                        #   in Loop: Header=BB19_151 Depth=1
	movl	-21776(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB19_156
# BB#155:                               # %if.then.527
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpl	$2, -19464(%rbp)
	sete	%al
	movq	-21880(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB19_156:                             # %if.end.540
                                        #   in Loop: Header=BB19_151 Depth=1
	movq	-24216(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB19_158
# BB#157:                               # %if.then.546
                                        #   in Loop: Header=BB19_151 Depth=1
	leaq	-24232(%rbp), %rdi
	movq	-24216(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	callq	*8(%rax)
	jmp	.LBB19_159
.LBB19_158:                             # %if.else.551
                                        #   in Loop: Header=BB19_151 Depth=1
	leaq	-24232(%rbp), %rdi
	callq	produce_glyphs
.LBB19_159:                             # %if.end.552
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpq	$0, -21880(%rbp)
	je	.LBB19_161
# BB#160:                               # %if.then.556
                                        #   in Loop: Header=BB19_151 Depth=1
	movb	$1, globals+3391
.LBB19_161:                             # %if.end.557
                                        #   in Loop: Header=BB19_151 Depth=1
	jmp	.LBB19_162
.LBB19_162:                             # %do.end.559
                                        #   in Loop: Header=BB19_151 Depth=1
	movq	-23920(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB19_167
# BB#163:                               # %lor.lhs.false.565
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpl	$0, -22128(%rbp)
	jne	.LBB19_168
# BB#164:                               # %land.lhs.true.569
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpl	$10, -22108(%rbp)
	je	.LBB19_167
# BB#165:                               # %lor.lhs.false.573
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpl	$13, -22108(%rbp)
	jne	.LBB19_168
# BB#166:                               # %land.lhs.true.577
                                        #   in Loop: Header=BB19_151 Depth=1
	cmpq	$0, -22136(%rbp)
	je	.LBB19_168
.LBB19_167:                             # %if.then.580
	jmp	.LBB19_169
.LBB19_168:                             # %if.end.581
                                        #   in Loop: Header=BB19_151 Depth=1
	leaq	-24232(%rbp), %rdi
	xorl	%esi, %esi
	movb	$1, -24233(%rbp)
	callq	set_iterator_to_next
	jmp	.LBB19_151
.LBB19_169:                             # %while.end
	movl	-21828(%rbp), %eax
	subl	-21864(%rbp), %eax
	movl	%eax, -4920(%rbp)
	testb	$1, -24233(%rbp)
	je	.LBB19_177
# BB#170:                               # %land.lhs.true.587
	testb	$1, -19393(%rbp)
	je	.LBB19_177
# BB#171:                               # %land.lhs.true.590
	movq	-23920(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB19_177
# BB#172:                               # %land.lhs.true.596
	movq	-21944(%rbp), %rax
	cmpq	-19376(%rbp), %rax
	jne	.LBB19_177
# BB#173:                               # %if.then.599
	movq	-21880(%rbp), %rax
	movq	8(%rax), %rax
	movq	-21880(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24248(%rbp)
.LBB19_174:                             # %while.cond.605
                                        # =>This Inner Loop Header: Depth=1
	movq	-24248(%rbp), %rax
	movq	-40(%rax), %rax
	cmpq	-19376(%rbp), %rax
	jne	.LBB19_176
# BB#175:                               # %while.body.610
                                        #   in Loop: Header=BB19_174 Depth=1
	movq	-24248(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -24248(%rbp)
	movq	-24248(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-4920(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -4920(%rbp)
	jmp	.LBB19_174
.LBB19_176:                             # %while.end.614
	jmp	.LBB19_177
.LBB19_177:                             # %if.end.615
	jmp	.LBB19_178
.LBB19_178:                             # %if.end.616
	jmp	.LBB19_179
.LBB19_179:                             # %if.end.617
	jmp	.LBB19_180
.LBB19_180:                             # %if.end.618
	xorl	%eax, %eax
	movl	-4920(%rbp), %ecx
	movq	-32(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-4924(%rbp), %ecx
	movl	-2492(%rbp), %esi
	subl	-2500(%rbp), %esi
	cmpl	%esi, %eax
	movl	%ecx, -29404(%rbp)      # 4-byte Spill
	jle	.LBB19_182
# BB#181:                               # %cond.true.622
	xorl	%eax, %eax
	movl	%eax, -29408(%rbp)      # 4-byte Spill
	jmp	.LBB19_183
.LBB19_182:                             # %cond.false.623
	movl	-2492(%rbp), %eax
	subl	-2500(%rbp), %eax
	movl	%eax, -29408(%rbp)      # 4-byte Spill
.LBB19_183:                             # %cond.end.627
	movl	-29408(%rbp), %eax      # 4-byte Reload
	movl	-29404(%rbp), %ecx      # 4-byte Reload
	addl	%eax, %ecx
	cmpl	-4928(%rbp), %ecx
	jle	.LBB19_188
# BB#184:                               # %cond.true.632
	xorl	%eax, %eax
	movl	-4924(%rbp), %ecx
	movl	-2492(%rbp), %edx
	subl	-2500(%rbp), %edx
	cmpl	%edx, %eax
	movl	%ecx, -29412(%rbp)      # 4-byte Spill
	jle	.LBB19_186
# BB#185:                               # %cond.true.638
	xorl	%eax, %eax
	movl	%eax, -29416(%rbp)      # 4-byte Spill
	jmp	.LBB19_187
.LBB19_186:                             # %cond.false.639
	movl	-2492(%rbp), %eax
	subl	-2500(%rbp), %eax
	movl	%eax, -29416(%rbp)      # 4-byte Spill
.LBB19_187:                             # %cond.end.643
	movl	-29416(%rbp), %eax      # 4-byte Reload
	movl	-29412(%rbp), %ecx      # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -29420(%rbp)      # 4-byte Spill
	jmp	.LBB19_189
.LBB19_188:                             # %cond.false.646
	movl	-4928(%rbp), %eax
	movl	%eax, -29420(%rbp)      # 4-byte Spill
.LBB19_189:                             # %cond.end.647
	movl	-29420(%rbp), %eax      # 4-byte Reload
	xorl	%ecx, %ecx
	movq	-40(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-4928(%rbp), %eax
	subl	-4924(%rbp), %eax
	cmpl	%eax, %ecx
	jle	.LBB19_191
# BB#190:                               # %cond.true.652
	xorl	%eax, %eax
	movl	%eax, -29424(%rbp)      # 4-byte Spill
	jmp	.LBB19_192
.LBB19_191:                             # %cond.false.653
	movl	-4928(%rbp), %eax
	subl	-4924(%rbp), %eax
	movl	%eax, -29424(%rbp)      # 4-byte Spill
.LBB19_192:                             # %cond.end.655
	movl	-29424(%rbp), %eax      # 4-byte Reload
	xorl	%ecx, %ecx
	movq	-48(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-4932(%rbp), %eax
	subl	-2548(%rbp), %eax
	cmpl	%eax, %ecx
	jle	.LBB19_194
# BB#193:                               # %cond.true.661
	xorl	%eax, %eax
	movl	%eax, -29428(%rbp)      # 4-byte Spill
	jmp	.LBB19_195
.LBB19_194:                             # %cond.false.662
	movl	-4932(%rbp), %eax
	subl	-2548(%rbp), %eax
	movl	%eax, -29428(%rbp)      # 4-byte Spill
.LBB19_195:                             # %cond.end.665
	movl	-29428(%rbp), %eax      # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4932(%rbp), %eax
	cmpl	-2548(%rbp), %eax
	jge	.LBB19_197
# BB#196:                               # %cond.true.670
	movl	-4932(%rbp), %eax
	movl	%eax, -29432(%rbp)      # 4-byte Spill
	jmp	.LBB19_198
.LBB19_197:                             # %cond.false.671
	movl	-2548(%rbp), %eax
	movl	%eax, -29432(%rbp)      # 4-byte Spill
.LBB19_198:                             # %cond.end.673
	movl	-29432(%rbp), %eax      # 4-byte Reload
	movl	-4924(%rbp), %ecx
	cmpl	-4928(%rbp), %ecx
	movl	%eax, -29436(%rbp)      # 4-byte Spill
	jle	.LBB19_200
# BB#199:                               # %cond.true.677
	movl	-4924(%rbp), %eax
	movl	%eax, -29440(%rbp)      # 4-byte Spill
	jmp	.LBB19_201
.LBB19_200:                             # %cond.false.678
	movl	-4928(%rbp), %eax
	movl	%eax, -29440(%rbp)      # 4-byte Spill
.LBB19_201:                             # %cond.end.679
	movl	-29440(%rbp), %eax      # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-29436(%rbp), %edx      # 4-byte Reload
	subl	%eax, %edx
	cmpl	%edx, %ecx
	jle	.LBB19_203
# BB#202:                               # %cond.true.684
	xorl	%eax, %eax
	movl	%eax, -29444(%rbp)      # 4-byte Spill
	jmp	.LBB19_210
.LBB19_203:                             # %cond.false.685
	movl	-4932(%rbp), %eax
	cmpl	-2548(%rbp), %eax
	jge	.LBB19_205
# BB#204:                               # %cond.true.689
	movl	-4932(%rbp), %eax
	movl	%eax, -29448(%rbp)      # 4-byte Spill
	jmp	.LBB19_206
.LBB19_205:                             # %cond.false.690
	movl	-2548(%rbp), %eax
	movl	%eax, -29448(%rbp)      # 4-byte Spill
.LBB19_206:                             # %cond.end.692
	movl	-29448(%rbp), %eax      # 4-byte Reload
	movl	-4924(%rbp), %ecx
	cmpl	-4928(%rbp), %ecx
	movl	%eax, -29452(%rbp)      # 4-byte Spill
	jle	.LBB19_208
# BB#207:                               # %cond.true.696
	movl	-4924(%rbp), %eax
	movl	%eax, -29456(%rbp)      # 4-byte Spill
	jmp	.LBB19_209
.LBB19_208:                             # %cond.false.697
	movl	-4928(%rbp), %eax
	movl	%eax, -29456(%rbp)      # 4-byte Spill
.LBB19_209:                             # %cond.end.698
	movl	-29456(%rbp), %eax      # 4-byte Reload
	movl	-29452(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -29444(%rbp)      # 4-byte Spill
.LBB19_210:                             # %cond.end.701
	movl	-29444(%rbp), %eax      # 4-byte Reload
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-2432(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$2, -104(%rbp)
	jne	.LBB19_212
# BB#211:                               # %if.then.708
	movb	$1, -4913(%rbp)
.LBB19_212:                             # %if.end.709
	jmp	.LBB19_213
.LBB19_213:                             # %if.end.710
	jmp	.LBB19_379
.LBB19_214:                             # %if.else.711
	movq	$0, -29056(%rbp)
# BB#215:                               # %do.body.713
	cmpq	$0, -29056(%rbp)
	je	.LBB19_217
# BB#216:                               # %if.then.715
	movl	$1, %esi
	movq	-29056(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB19_217:                             # %if.end.716
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4872(%rbp), %rcx
	leaq	-29048(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -29056(%rbp)
# BB#218:                               # %do.end.719
	movq	-4560(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB19_224
# BB#219:                               # %land.lhs.true.726
	movq	-4552(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB19_221
# BB#220:                               # %cond.true.734
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -29464(%rbp)      # 8-byte Spill
	jmp	.LBB19_222
.LBB19_221:                             # %cond.false.737
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -29464(%rbp)      # 8-byte Spill
	jmp	.LBB19_222
.LBB19_222:                             # %cond.end.738
	movq	-29464(%rbp), %rax      # 8-byte Reload
	addq	-4552(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	je	.LBB19_224
# BB#223:                               # %if.then.751
	leaq	-4872(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
.LBB19_224:                             # %if.end.752
	movq	-24(%rbp), %rax
	cmpq	-4560(%rbp), %rax
	jl	.LBB19_227
# BB#225:                               # %lor.lhs.false.758
	cmpl	$5, -2768(%rbp)
	jne	.LBB19_377
# BB#226:                               # %land.lhs.true.762
	movq	-24(%rbp), %rax
	cmpq	-4560(%rbp), %rax
	jne	.LBB19_377
.LBB19_227:                             # %if.then.768
	movb	$1, -4897(%rbp)
# BB#228:                               # %do.body.769
	xorl	%esi, %esi
	movq	-29056(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -29056(%rbp)
# BB#229:                               # %do.end.771
	leaq	-29048(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-24(%rbp), %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	xorl	%ecx, %ecx
	movl	-26644(%rbp), %edx
	movq	-32(%rbp), %rsi
	movl	%edx, (%rsi)
	movl	-26616(%rbp), %edx
	addl	-26668(%rbp), %edx
	subl	-26676(%rbp), %edx
	movq	-40(%rbp), %rsi
	movl	%edx, (%rsi)
	movl	%ecx, %edx
	subl	-26616(%rbp), %edx
	cmpl	%edx, %ecx
	movl	%eax, -29468(%rbp)      # 4-byte Spill
	jle	.LBB19_231
# BB#230:                               # %cond.true.783
	xorl	%eax, %eax
	movl	%eax, -29472(%rbp)      # 4-byte Spill
	jmp	.LBB19_232
.LBB19_231:                             # %cond.false.784
	xorl	%eax, %eax
	subl	-26616(%rbp), %eax
	movl	%eax, -29472(%rbp)      # 4-byte Spill
.LBB19_232:                             # %cond.end.787
	movl	-29472(%rbp), %eax      # 4-byte Reload
	xorl	%ecx, %ecx
	movq	-48(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-26616(%rbp), %eax
	addl	-26668(%rbp), %eax
	addl	-26664(%rbp), %eax
	subl	-2548(%rbp), %eax
	cmpl	%eax, %ecx
	jle	.LBB19_234
# BB#233:                               # %cond.true.797
	xorl	%eax, %eax
	movl	%eax, -29476(%rbp)      # 4-byte Spill
	jmp	.LBB19_235
.LBB19_234:                             # %cond.false.798
	movl	-26616(%rbp), %eax
	addl	-26668(%rbp), %eax
	addl	-26664(%rbp), %eax
	subl	-2548(%rbp), %eax
	movl	%eax, -29476(%rbp)      # 4-byte Spill
.LBB19_235:                             # %cond.end.806
	movl	-29476(%rbp), %eax      # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-26616(%rbp), %eax
	addl	-26668(%rbp), %eax
	addl	-26664(%rbp), %eax
	cmpl	-2548(%rbp), %eax
	jge	.LBB19_237
# BB#236:                               # %cond.true.816
	movl	-26616(%rbp), %eax
	addl	-26668(%rbp), %eax
	addl	-26664(%rbp), %eax
	movl	%eax, -29480(%rbp)      # 4-byte Spill
	jmp	.LBB19_238
.LBB19_237:                             # %cond.false.822
	movl	-2548(%rbp), %eax
	movl	%eax, -29480(%rbp)      # 4-byte Spill
.LBB19_238:                             # %cond.end.824
	movl	-29480(%rbp), %eax      # 4-byte Reload
	movl	-26616(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%eax, -29484(%rbp)      # 4-byte Spill
	movl	%ecx, -29488(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_239
	jmp	.LBB19_253
.LBB19_239:                             # %cond.true.830
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_268
# BB#240:                               # %land.lhs.true.835
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_268
# BB#241:                               # %land.lhs.true.841
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_268
# BB#242:                               # %land.lhs.true.850
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -29496(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29496(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_268
# BB#243:                               # %land.lhs.true.857
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -29500(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_244
	jmp	.LBB19_249
.LBB19_244:                             # %cond.true.862
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_251
# BB#245:                               # %land.lhs.true.867
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_251
# BB#246:                               # %land.lhs.true.873
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_251
# BB#247:                               # %land.lhs.true.882
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29512(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29512(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_251
# BB#248:                               # %land.lhs.true.889
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_250
	jmp	.LBB19_251
.LBB19_249:                             # %cond.false.896
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_250
	jmp	.LBB19_251
.LBB19_250:                             # %cond.true.897
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -29516(%rbp)      # 4-byte Spill
	jmp	.LBB19_252
.LBB19_251:                             # %cond.false.902
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -29516(%rbp)      # 4-byte Spill
.LBB19_252:                             # %cond.end.906
	movl	-29516(%rbp), %eax      # 4-byte Reload
	movl	-29500(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB19_254
	jmp	.LBB19_268
.LBB19_253:                             # %cond.false.910
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_254
	jmp	.LBB19_268
.LBB19_254:                             # %cond.true.911
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB19_256
# BB#255:                               # %cond.true.915
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -29520(%rbp)      # 4-byte Spill
	jmp	.LBB19_267
.LBB19_256:                             # %cond.false.917
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_259
# BB#257:                               # %land.lhs.true.920
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_259
# BB#258:                               # %cond.true.924
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB19_260
	jmp	.LBB19_265
.LBB19_259:                             # %cond.false.929
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_260
	jmp	.LBB19_265
.LBB19_260:                             # %cond.true.930
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_263
# BB#261:                               # %land.lhs.true.933
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_263
# BB#262:                               # %cond.true.937
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -29524(%rbp)      # 4-byte Spill
	jmp	.LBB19_264
.LBB19_263:                             # %cond.false.941
	xorl	%eax, %eax
	movl	%eax, -29524(%rbp)      # 4-byte Spill
	jmp	.LBB19_264
.LBB19_264:                             # %cond.end.942
	movl	-29524(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29528(%rbp)      # 4-byte Spill
	jmp	.LBB19_266
.LBB19_265:                             # %cond.false.944
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -29528(%rbp)      # 4-byte Spill
.LBB19_266:                             # %cond.end.948
	movl	-29528(%rbp), %eax      # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -29520(%rbp)      # 4-byte Spill
.LBB19_267:                             # %cond.end.951
	movl	-29520(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29532(%rbp)      # 4-byte Spill
	jmp	.LBB19_269
.LBB19_268:                             # %cond.false.953
	xorl	%eax, %eax
	movl	%eax, -29532(%rbp)      # 4-byte Spill
	jmp	.LBB19_269
.LBB19_269:                             # %cond.end.954
	movl	-29532(%rbp), %eax      # 4-byte Reload
	movl	-29488(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jle	.LBB19_271
# BB#270:                               # %cond.true.958
	movl	-26616(%rbp), %eax
	movl	%eax, -29536(%rbp)      # 4-byte Spill
	jmp	.LBB19_303
.LBB19_271:                             # %cond.false.960
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_272
	jmp	.LBB19_286
.LBB19_272:                             # %cond.true.964
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_301
# BB#273:                               # %land.lhs.true.969
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_301
# BB#274:                               # %land.lhs.true.975
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_301
# BB#275:                               # %land.lhs.true.984
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -29544(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29544(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_301
# BB#276:                               # %land.lhs.true.991
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -29548(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_277
	jmp	.LBB19_282
.LBB19_277:                             # %cond.true.996
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_284
# BB#278:                               # %land.lhs.true.1001
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_284
# BB#279:                               # %land.lhs.true.1007
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_284
# BB#280:                               # %land.lhs.true.1016
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29560(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29560(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_284
# BB#281:                               # %land.lhs.true.1023
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_283
	jmp	.LBB19_284
.LBB19_282:                             # %cond.false.1030
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_283
	jmp	.LBB19_284
.LBB19_283:                             # %cond.true.1031
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -29564(%rbp)      # 4-byte Spill
	jmp	.LBB19_285
.LBB19_284:                             # %cond.false.1036
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -29564(%rbp)      # 4-byte Spill
.LBB19_285:                             # %cond.end.1040
	movl	-29564(%rbp), %eax      # 4-byte Reload
	movl	-29548(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB19_287
	jmp	.LBB19_301
.LBB19_286:                             # %cond.false.1044
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_287
	jmp	.LBB19_301
.LBB19_287:                             # %cond.true.1045
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB19_289
# BB#288:                               # %cond.true.1049
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -29568(%rbp)      # 4-byte Spill
	jmp	.LBB19_300
.LBB19_289:                             # %cond.false.1051
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_292
# BB#290:                               # %land.lhs.true.1054
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_292
# BB#291:                               # %cond.true.1058
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB19_293
	jmp	.LBB19_298
.LBB19_292:                             # %cond.false.1063
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_293
	jmp	.LBB19_298
.LBB19_293:                             # %cond.true.1064
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_296
# BB#294:                               # %land.lhs.true.1067
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_296
# BB#295:                               # %cond.true.1071
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -29572(%rbp)      # 4-byte Spill
	jmp	.LBB19_297
.LBB19_296:                             # %cond.false.1075
	xorl	%eax, %eax
	movl	%eax, -29572(%rbp)      # 4-byte Spill
	jmp	.LBB19_297
.LBB19_297:                             # %cond.end.1076
	movl	-29572(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29576(%rbp)      # 4-byte Spill
	jmp	.LBB19_299
.LBB19_298:                             # %cond.false.1078
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -29576(%rbp)      # 4-byte Spill
.LBB19_299:                             # %cond.end.1082
	movl	-29576(%rbp), %eax      # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -29568(%rbp)      # 4-byte Spill
.LBB19_300:                             # %cond.end.1085
	movl	-29568(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29580(%rbp)      # 4-byte Spill
	jmp	.LBB19_302
.LBB19_301:                             # %cond.false.1087
	xorl	%eax, %eax
	movl	%eax, -29580(%rbp)      # 4-byte Spill
	jmp	.LBB19_302
.LBB19_302:                             # %cond.end.1088
	movl	-29580(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29536(%rbp)      # 4-byte Spill
.LBB19_303:                             # %cond.end.1090
	movl	-29536(%rbp), %eax      # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-29484(%rbp), %edx      # 4-byte Reload
	subl	%eax, %edx
	cmpl	%edx, %ecx
	jle	.LBB19_305
# BB#304:                               # %cond.true.1095
	xorl	%eax, %eax
	movl	%eax, -29584(%rbp)      # 4-byte Spill
	jmp	.LBB19_374
.LBB19_305:                             # %cond.false.1096
	movl	-26616(%rbp), %eax
	addl	-26668(%rbp), %eax
	addl	-26664(%rbp), %eax
	cmpl	-2548(%rbp), %eax
	jge	.LBB19_307
# BB#306:                               # %cond.true.1105
	movl	-26616(%rbp), %eax
	addl	-26668(%rbp), %eax
	addl	-26664(%rbp), %eax
	movl	%eax, -29588(%rbp)      # 4-byte Spill
	jmp	.LBB19_308
.LBB19_307:                             # %cond.false.1111
	movl	-2548(%rbp), %eax
	movl	%eax, -29588(%rbp)      # 4-byte Spill
.LBB19_308:                             # %cond.end.1113
	movl	-29588(%rbp), %eax      # 4-byte Reload
	movl	-26616(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%eax, -29592(%rbp)      # 4-byte Spill
	movl	%ecx, -29596(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_309
	jmp	.LBB19_323
.LBB19_309:                             # %cond.true.1119
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_338
# BB#310:                               # %land.lhs.true.1124
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_338
# BB#311:                               # %land.lhs.true.1130
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_338
# BB#312:                               # %land.lhs.true.1139
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -29608(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29608(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_338
# BB#313:                               # %land.lhs.true.1146
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -29612(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_314
	jmp	.LBB19_319
.LBB19_314:                             # %cond.true.1151
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_321
# BB#315:                               # %land.lhs.true.1156
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_321
# BB#316:                               # %land.lhs.true.1162
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_321
# BB#317:                               # %land.lhs.true.1171
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29624(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29624(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_321
# BB#318:                               # %land.lhs.true.1178
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_320
	jmp	.LBB19_321
.LBB19_319:                             # %cond.false.1185
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_320
	jmp	.LBB19_321
.LBB19_320:                             # %cond.true.1186
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -29628(%rbp)      # 4-byte Spill
	jmp	.LBB19_322
.LBB19_321:                             # %cond.false.1191
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -29628(%rbp)      # 4-byte Spill
.LBB19_322:                             # %cond.end.1195
	movl	-29628(%rbp), %eax      # 4-byte Reload
	movl	-29612(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB19_324
	jmp	.LBB19_338
.LBB19_323:                             # %cond.false.1199
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_324
	jmp	.LBB19_338
.LBB19_324:                             # %cond.true.1200
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB19_326
# BB#325:                               # %cond.true.1204
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -29632(%rbp)      # 4-byte Spill
	jmp	.LBB19_337
.LBB19_326:                             # %cond.false.1206
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_329
# BB#327:                               # %land.lhs.true.1209
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_329
# BB#328:                               # %cond.true.1213
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB19_330
	jmp	.LBB19_335
.LBB19_329:                             # %cond.false.1218
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_330
	jmp	.LBB19_335
.LBB19_330:                             # %cond.true.1219
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_333
# BB#331:                               # %land.lhs.true.1222
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_333
# BB#332:                               # %cond.true.1226
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -29636(%rbp)      # 4-byte Spill
	jmp	.LBB19_334
.LBB19_333:                             # %cond.false.1230
	xorl	%eax, %eax
	movl	%eax, -29636(%rbp)      # 4-byte Spill
	jmp	.LBB19_334
.LBB19_334:                             # %cond.end.1231
	movl	-29636(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29640(%rbp)      # 4-byte Spill
	jmp	.LBB19_336
.LBB19_335:                             # %cond.false.1233
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -29640(%rbp)      # 4-byte Spill
.LBB19_336:                             # %cond.end.1237
	movl	-29640(%rbp), %eax      # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -29632(%rbp)      # 4-byte Spill
.LBB19_337:                             # %cond.end.1240
	movl	-29632(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29644(%rbp)      # 4-byte Spill
	jmp	.LBB19_339
.LBB19_338:                             # %cond.false.1242
	xorl	%eax, %eax
	movl	%eax, -29644(%rbp)      # 4-byte Spill
	jmp	.LBB19_339
.LBB19_339:                             # %cond.end.1243
	movl	-29644(%rbp), %eax      # 4-byte Reload
	movl	-29596(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jle	.LBB19_341
# BB#340:                               # %cond.true.1247
	movl	-26616(%rbp), %eax
	movl	%eax, -29648(%rbp)      # 4-byte Spill
	jmp	.LBB19_373
.LBB19_341:                             # %cond.false.1249
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_342
	jmp	.LBB19_356
.LBB19_342:                             # %cond.true.1253
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_371
# BB#343:                               # %land.lhs.true.1258
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_371
# BB#344:                               # %land.lhs.true.1264
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_371
# BB#345:                               # %land.lhs.true.1273
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -29656(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29656(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_371
# BB#346:                               # %land.lhs.true.1280
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -29660(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB19_347
	jmp	.LBB19_352
.LBB19_347:                             # %cond.true.1285
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_354
# BB#348:                               # %land.lhs.true.1290
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB19_354
# BB#349:                               # %land.lhs.true.1296
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB19_354
# BB#350:                               # %land.lhs.true.1305
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -29672(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-29672(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB19_354
# BB#351:                               # %land.lhs.true.1312
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB19_353
	jmp	.LBB19_354
.LBB19_352:                             # %cond.false.1319
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_353
	jmp	.LBB19_354
.LBB19_353:                             # %cond.true.1320
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -29676(%rbp)      # 4-byte Spill
	jmp	.LBB19_355
.LBB19_354:                             # %cond.false.1325
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -29676(%rbp)      # 4-byte Spill
.LBB19_355:                             # %cond.end.1329
	movl	-29676(%rbp), %eax      # 4-byte Reload
	movl	-29660(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB19_357
	jmp	.LBB19_371
.LBB19_356:                             # %cond.false.1333
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_357
	jmp	.LBB19_371
.LBB19_357:                             # %cond.true.1334
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB19_359
# BB#358:                               # %cond.true.1338
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -29680(%rbp)      # 4-byte Spill
	jmp	.LBB19_370
.LBB19_359:                             # %cond.false.1340
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_362
# BB#360:                               # %land.lhs.true.1343
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_362
# BB#361:                               # %cond.true.1347
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB19_363
	jmp	.LBB19_368
.LBB19_362:                             # %cond.false.1352
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB19_363
	jmp	.LBB19_368
.LBB19_363:                             # %cond.true.1353
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB19_366
# BB#364:                               # %land.lhs.true.1356
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB19_366
# BB#365:                               # %cond.true.1360
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -29684(%rbp)      # 4-byte Spill
	jmp	.LBB19_367
.LBB19_366:                             # %cond.false.1364
	xorl	%eax, %eax
	movl	%eax, -29684(%rbp)      # 4-byte Spill
	jmp	.LBB19_367
.LBB19_367:                             # %cond.end.1365
	movl	-29684(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29688(%rbp)      # 4-byte Spill
	jmp	.LBB19_369
.LBB19_368:                             # %cond.false.1367
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -29688(%rbp)      # 4-byte Spill
.LBB19_369:                             # %cond.end.1371
	movl	-29688(%rbp), %eax      # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -29680(%rbp)      # 4-byte Spill
.LBB19_370:                             # %cond.end.1374
	movl	-29680(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29692(%rbp)      # 4-byte Spill
	jmp	.LBB19_372
.LBB19_371:                             # %cond.false.1376
	xorl	%eax, %eax
	movl	%eax, -29692(%rbp)      # 4-byte Spill
	jmp	.LBB19_372
.LBB19_372:                             # %cond.end.1377
	movl	-29692(%rbp), %eax      # 4-byte Reload
	movl	%eax, -29648(%rbp)      # 4-byte Spill
.LBB19_373:                             # %cond.end.1379
	movl	-29648(%rbp), %eax      # 4-byte Reload
	movl	-29592(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -29584(%rbp)      # 4-byte Spill
.LBB19_374:                             # %cond.end.1382
	movl	-29584(%rbp), %eax      # 4-byte Reload
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-26608(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$2, -24280(%rbp)
	jne	.LBB19_376
# BB#375:                               # %if.then.1389
	movb	$1, -4913(%rbp)
.LBB19_376:                             # %if.end.1390
	jmp	.LBB19_378
.LBB19_377:                             # %if.else.1391
	movl	$1, %esi
	movq	-29056(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB19_378:                             # %if.end.1392
	jmp	.LBB19_379
.LBB19_379:                             # %if.end.1393
	xorl	%esi, %esi
	movq	-4880(%rbp), %rdi
	callq	bidi_unshelve_cache
	cmpq	$0, -4912(%rbp)
	je	.LBB19_381
# BB#380:                               # %if.then.1395
	movq	-4912(%rbp), %rdi
	callq	set_buffer_internal_1
.LBB19_381:                             # %if.end.1396
	testb	$1, -4897(%rbp)
	je	.LBB19_387
# BB#382:                               # %if.then.1398
	movq	-16(%rbp), %rax
	cmpq	$0, 272(%rax)
	jle	.LBB19_384
# BB#383:                               # %if.then.1401
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rsi
	callq	window_hscroll_limited
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	$5, %rsi
	imull	364(%rsi), %eax
	movq	-32(%rbp), %rsi
	movl	(%rsi), %ecx
	subl	%eax, %ecx
	movl	%ecx, (%rsi)
.LBB19_384:                             # %if.end.1409
	testb	$1, -4913(%rbp)
	je	.LBB19_386
# BB#385:                               # %if.then.1411
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	window_box_width
	movq	-32(%rbp), %rdi
	subl	(%rdi), %eax
	subl	$1, %eax
	movq	-32(%rbp), %rdi
	movl	%eax, (%rdi)
.LBB19_386:                             # %if.end.1415
	jmp	.LBB19_387
.LBB19_387:                             # %if.end.1416
	movb	-4897(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB19_388:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$29712, %rsp            # imm = 0x7410
	popq	%rbp
	retq
.Lfunc_end19:
	.size	pos_visible_p, .Lfunc_end19-pos_visible_p
	.cfi_endproc

	.align	16, 0x90
	.type	display_mode_line,@function
display_mode_line:                      # @display_mode_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp60:
	.cfi_def_cfa_offset 16
.Ltmp61:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp62:
	.cfi_def_cfa_register %rbp
	subq	$4976, %rsp             # imm = 0x1370
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	callq	SPECPDL_INDEX
	leaq	-4824(%rbp), %rdi
	movq	$-1, %rdx
	xorl	%esi, %esi
	movl	%esi, %r8d
	movq	%rax, -4840(%rbp)
	movq	-8(%rbp), %rsi
	movl	-12(%rbp), %r9d
	movq	%rdx, -4856(%rbp)       # 8-byte Spill
	movq	-4856(%rbp), %rcx       # 8-byte Reload
	callq	init_iterator
	movl	$1, %edx
	movq	-2472(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
	movq	-8(%rbp), %rdi
	movq	-2472(%rbp), %rsi
	callq	prepare_desired_row
	xorl	%edi, %edi
	movq	-2472(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1048577, %rcx         # imm = 0xFFFFFFFFFFEFFFFF
	orq	$1048576, %rcx          # imm = 0x100000
	movq	%rcx, 236(%rax)
	movl	$1, -32(%rbp)
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movl	%edx, %ecx
	xorl	%edx, %edx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	movl	%edx, -4860(%rbp)       # 4-byte Spill
	movq	%rax, %rdx
	movl	-4860(%rbp), %ecx       # 4-byte Reload
	callq	format_mode_line_unwind_data
	movabsq	$unwind_format_mode_line, %rdi
	movq	%rax, %rsi
	callq	record_unwind_protect
	movl	$0, mode_line_target
	movq	-4808(%rbp), %rax
	movq	376(%rax), %rax
	movq	72(%rax), %rdi
	callq	push_kboard
	callq	record_unwind_save_match_data
	xorl	%edi, %edi
	movq	-24(%rbp), %r8
	movq	%r8, -4872(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-4824(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movl	%ecx, %edx
	movq	-4872(%rbp), %r8        # 8-byte Reload
	movq	%rax, %r9
	movl	$0, (%rsp)
	callq	display_mode_element
	movl	%eax, -4876(%rbp)       # 4-byte Spill
	callq	pop_kboard
	xorl	%edi, %edi
	movq	-4840(%rbp), %r8
	movq	%r8, -4888(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4888(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	xorl	%edi, %edi
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str.5, %rdi
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	leaq	-4824(%rbp), %r9
	movl	$10000, %ecx            # imm = 0x2710
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%r10d, %r10d
	movq	-4904(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4912(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movl	%edx, -4916(%rbp)       # 4-byte Spill
	movq	%rax, %rdx
	movq	-4912(%rbp), %rax       # 8-byte Reload
	movl	%ecx, -4920(%rbp)       # 4-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r8
	movl	$10000, (%rsp)          # imm = 0x2710
	movl	$-1, 8(%rsp)
	movl	$-1, 16(%rsp)
	movl	$0, 24(%rsp)
	movl	%r10d, -4924(%rbp)      # 4-byte Spill
	callq	display_string
	leaq	-4824(%rbp), %rdi
	movl	%eax, -4928(%rbp)       # 4-byte Spill
	callq	compute_line_metrics
	movb	$1, %r11b
	movq	-2472(%rbp), %rcx
	movq	236(%rcx), %rdx
	andq	$-524289, %rdx          # imm = 0xFFFFFFFFFFF7FFFF
	orq	$524288, %rdx           # imm = 0x80000
	movq	%rdx, 236(%rcx)
	movq	-2472(%rbp), %rcx
	movq	236(%rcx), %rdx
	andq	$-8193, %rdx            # imm = 0xFFFFFFFFFFFFDFFF
	movq	%rdx, 236(%rcx)
	movq	-2472(%rbp), %rcx
	movq	236(%rcx), %rdx
	andq	$-2049, %rdx            # imm = 0xFFFFFFFFFFFFF7FF
	movq	%rdx, 236(%rcx)
	movq	-2472(%rbp), %rcx
	movq	236(%rcx), %rdx
	andq	$-4097, %rdx            # imm = 0xFFFFFFFFFFFFEFFF
	movq	%rdx, 236(%rcx)
	testb	$1, %r11b
	jne	.LBB20_1
	jmp	.LBB20_2
.LBB20_1:                               # %cond.true
	movl	-12(%rbp), %eax
	addl	$0, %eax
	movq	-4808(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB20_3
	jmp	.LBB20_4
.LBB20_2:                               # %cond.false
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	movq	-4808(%rbp), %rdx
	movq	160(%rdx), %rdx
	movslq	32(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB20_4
.LBB20_3:                               # %cond.true.37
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	movq	-4808(%rbp), %rdx
	movq	160(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	%rcx, -4936(%rbp)       # 8-byte Spill
	jmp	.LBB20_5
.LBB20_4:                               # %cond.false.40
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4936(%rbp)       # 8-byte Spill
	jmp	.LBB20_5
.LBB20_5:                               # %cond.end
	movq	-4936(%rbp), %rax       # 8-byte Reload
	leaq	-4824(%rbp), %rdi
	movq	%rax, -4832(%rbp)
	callq	extend_face_to_end_of_line
	movq	-4832(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB20_7
# BB#6:                                 # %if.then
	movq	-2472(%rbp), %rax
	movq	8(%rax), %rax
	movq	-2472(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -4848(%rbp)
	movq	-4848(%rbp), %rax
	movl	24(%rax), %edx
	andl	$-33, %edx
	orl	$32, %edx
	movl	%edx, 24(%rax)
.LBB20_7:                               # %if.end
	movq	-2472(%rbp), %rax
	movl	60(%rax), %eax
	addq	$4976, %rsp             # imm = 0x1370
	popq	%rbp
	retq
.Lfunc_end20:
	.size	display_mode_line, .Lfunc_end20-display_mode_line
	.cfi_endproc

	.globl	move_it_to
	.align	16, 0x90
	.type	move_it_to,@function
move_it_to:                             # @move_it_to
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp63:
	.cfi_def_cfa_offset 16
.Ltmp64:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp65:
	.cfi_def_cfa_register %rbp
	subq	$4960, %rsp             # imm = 0x1360
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -32(%rbp)
	movl	$2, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movq	$0, -64(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB21_20
# BB#2:                                 # %if.then
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-32(%rbp), %eax
	andl	$9, %eax
	cmpl	$0, %eax
	jne	.LBB21_7
# BB#3:                                 # %if.then.2
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	cmpl	-28(%rbp), %ecx
	jne	.LBB21_5
# BB#4:                                 # %if.then.4
	movl	$1, -52(%rbp)
	jmp	.LBB21_121
.LBB21_5:                               # %if.else
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	$-1, %rsi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	callq	move_it_in_display_line_to
	movl	%eax, -36(%rbp)
# BB#6:                                 # %if.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_19
.LBB21_7:                               # %if.else.5
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	cmpl	-28(%rbp), %ecx
	jne	.LBB21_9
# BB#8:                                 # %if.then.8
	movl	$2, -52(%rbp)
	jmp	.LBB21_121
.LBB21_9:                               # %if.end.9
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-32(%rbp), %ecx
	callq	move_it_in_display_line_to
	movl	%eax, -36(%rbp)
	cmpl	$1, -36(%rbp)
	je	.LBB21_11
# BB#10:                                # %lor.lhs.false
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	cmpl	-28(%rbp), %ecx
	jne	.LBB21_12
.LBB21_11:                              # %if.then.14
	movl	$3, -52(%rbp)
	jmp	.LBB21_121
.LBB21_12:                              # %if.else.15
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$2, -36(%rbp)
	jne	.LBB21_17
# BB#13:                                # %land.lhs.true
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	cmpl	-28(%rbp), %ecx
	je	.LBB21_17
# BB#14:                                # %if.then.19
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	move_it_in_display_line_to
	movl	%eax, -36(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB21_16
# BB#15:                                # %if.then.22
	movl	$4, -52(%rbp)
	jmp	.LBB21_121
.LBB21_16:                              # %if.end.23
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_17
.LBB21_17:                              # %if.end.24
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_18
.LBB21_18:                              # %if.end.25
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_19
.LBB21_19:                              # %if.end.26
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_87
.LBB21_20:                              # %if.else.27
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-32(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB21_77
# BB#21:                                # %if.then.30
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB21_27
# BB#22:                                # %if.then.32
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_23
.LBB21_23:                              # %do.body
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpq	$0, -64(%rbp)
	je	.LBB21_25
# BB#24:                                # %if.then.34
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$1, %esi
	movq	-64(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB21_25:                              # %if.end.35
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4864(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -64(%rbp)
# BB#26:                                # %do.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_27
.LBB21_27:                              # %if.end.37
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-32(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movq	%rdi, -4904(%rbp)       # 8-byte Spill
	movq	%rsi, -4912(%rbp)       # 8-byte Spill
	je	.LBB21_29
# BB#28:                                # %cond.true
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4916(%rbp)       # 4-byte Spill
	jmp	.LBB21_30
.LBB21_29:                              # %cond.false
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, -4916(%rbp)       # 4-byte Spill
	jmp	.LBB21_30
.LBB21_30:                              # %cond.end
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4916(%rbp), %eax       # 4-byte Reload
	movl	-32(%rbp), %ecx
	andl	$8, %ecx
	orl	$1, %ecx
	movq	-4904(%rbp), %rdi       # 8-byte Reload
	movq	-4912(%rbp), %rsi       # 8-byte Reload
	movl	%eax, %edx
	callq	move_it_in_display_line_to
	movl	%eax, -36(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB21_32
# BB#31:                                # %if.then.43
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$5, -52(%rbp)
	jmp	.LBB21_71
.LBB21_32:                              # %if.else.44
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$2, -36(%rbp)
	jne	.LBB21_51
# BB#33:                                # %if.then.46
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -44(%rbp)
	movl	-24(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	2432(%rax), %ecx
	jl	.LBB21_36
# BB#34:                                # %land.lhs.true.48
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	2432(%rcx), %edx
	addl	-44(%rbp), %edx
	cmpl	%edx, %eax
	jge	.LBB21_36
# BB#35:                                # %if.then.52
	movl	$6, -52(%rbp)
	jmp	.LBB21_121
.LBB21_36:                              # %if.end.53
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_37
.LBB21_37:                              # %do.body.54
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpq	$0, -64(%rbp)
	je	.LBB21_39
# BB#38:                                # %if.then.56
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$1, %esi
	movq	-64(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB21_39:                              # %if.end.57
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4864(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -64(%rbp)
# BB#40:                                # %do.end.59
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-32(%rbp), %eax
	andl	$8, %eax
	movl	%eax, %ecx
	callq	move_it_in_display_line_to
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rsi
	movl	2380(%rsi), %eax
	movq	-8(%rbp), %rsi
	addl	2384(%rsi), %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rsi
	cmpl	2432(%rsi), %eax
	jl	.LBB21_47
# BB#41:                                # %land.lhs.true.67
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	2432(%rcx), %edx
	addl	-44(%rbp), %edx
	cmpl	%edx, %eax
	jge	.LBB21_47
# BB#42:                                # %if.then.71
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -4868(%rbp)
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -4872(%rbp)
# BB#43:                                # %do.body.76
                                        #   in Loop: Header=BB21_1 Depth=1
	leaq	-4864(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB21_45
# BB#44:                                # %if.then.78
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4864(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB21_45:                              # %if.end.79
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%esi, %esi
	movq	-64(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -64(%rbp)
# BB#46:                                # %do.end.80
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4868(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2380(%rcx)
	movl	-4872(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2384(%rcx)
	movl	$6, -52(%rbp)
	jmp	.LBB21_50
.LBB21_47:                              # %if.else.83
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB21_49
# BB#48:                                # %if.then.85
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$7, -52(%rbp)
.LBB21_49:                              # %if.end.86
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_50
.LBB21_50:                              # %if.end.87
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_70
.LBB21_51:                              # %if.else.88
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -44(%rbp)
	movl	-24(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	2432(%rax), %ecx
	jl	.LBB21_69
# BB#52:                                # %land.lhs.true.94
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	2432(%rcx), %edx
	addl	-44(%rbp), %edx
	cmpl	%edx, %eax
	jge	.LBB21_69
# BB#53:                                # %if.then.98
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2432(%rcx), %eax
	jle	.LBB21_58
# BB#54:                                # %if.then.101
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	cmpl	-56(%rbp), %ecx
	jle	.LBB21_56
# BB#55:                                # %cond.true.103
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -4920(%rbp)       # 4-byte Spill
	jmp	.LBB21_57
.LBB21_56:                              # %cond.false.105
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -4920(%rbp)       # 4-byte Spill
.LBB21_57:                              # %cond.end.106
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4920(%rbp), %eax       # 4-byte Reload
	movl	%eax, -56(%rbp)
.LBB21_58:                              # %if.end.108
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$3, -36(%rbp)
	jne	.LBB21_68
# BB#59:                                # %land.lhs.true.110
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB21_68
# BB#60:                                # %if.then.113
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jle	.LBB21_62
# BB#61:                                # %cond.true.116
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -4924(%rbp)       # 4-byte Spill
	jmp	.LBB21_63
.LBB21_62:                              # %cond.false.119
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, -4924(%rbp)       # 4-byte Spill
	jmp	.LBB21_63
.LBB21_63:                              # %cond.end.120
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4924(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4876(%rbp)
# BB#64:                                # %do.body.122
                                        #   in Loop: Header=BB21_1 Depth=1
	leaq	-4864(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB21_66
# BB#65:                                # %if.then.124
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4864(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB21_66:                              # %if.end.125
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%esi, %esi
	movq	-64(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -64(%rbp)
# BB#67:                                # %do.end.126
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	$-1, %rsi
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movl	-4876(%rbp), %edx
	callq	move_it_in_display_line_to
	movl	%eax, -36(%rbp)
.LBB21_68:                              # %if.end.128
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$6, -52(%rbp)
.LBB21_69:                              # %if.end.129
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_70
.LBB21_70:                              # %if.end.130
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_71
.LBB21_71:                              # %if.end.131
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB21_76
# BB#72:                                # %if.then.133
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	cmpl	-56(%rbp), %ecx
	jle	.LBB21_74
# BB#73:                                # %cond.true.136
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -4928(%rbp)       # 4-byte Spill
	jmp	.LBB21_75
.LBB21_74:                              # %cond.false.138
	movl	-56(%rbp), %eax
	movl	%eax, -4928(%rbp)       # 4-byte Spill
.LBB21_75:                              # %cond.end.139
	movl	-4928(%rbp), %eax       # 4-byte Reload
	movl	%eax, -56(%rbp)
	jmp	.LBB21_121
.LBB21_76:                              # %if.end.141
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_86
.LBB21_77:                              # %if.else.142
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB21_78
	jmp	.LBB21_84
.LBB21_78:                              # %land.lhs.true.144
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB21_80
# BB#79:                                # %lor.lhs.false.146
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$5, 24(%rax)
	jne	.LBB21_84
.LBB21_80:                              # %land.lhs.true.149
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB21_84
# BB#81:                                # %land.lhs.true.151
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB21_83
# BB#82:                                # %land.lhs.true.152
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$-1, 2648(%rax)
	je	.LBB21_84
.LBB21_83:                              # %if.then.154
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$1, -36(%rbp)
	jmp	.LBB21_85
.LBB21_84:                              # %if.else.155
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	move_it_in_display_line_to
	movl	%eax, -36(%rbp)
.LBB21_85:                              # %if.end.157
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_86
.LBB21_86:                              # %if.end.158
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_87
.LBB21_87:                              # %if.end.159
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-36(%rbp), %eax
	decl	%eax
	movl	%eax, %ecx
	subl	$4, %eax
	movq	%rcx, -4936(%rbp)       # 8-byte Spill
	movl	%eax, -4940(%rbp)       # 4-byte Spill
	ja	.LBB21_119
# BB#137:                               # %if.end.159
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-4936(%rbp), %rax       # 8-byte Reload
	movq	.LJTI21_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB21_88:                              # %sw.bb
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	cmpl	-56(%rbp), %ecx
	jle	.LBB21_90
# BB#89:                                # %cond.true.162
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -4944(%rbp)       # 4-byte Spill
	jmp	.LBB21_91
.LBB21_90:                              # %cond.false.164
	movl	-56(%rbp), %eax
	movl	%eax, -4944(%rbp)       # 4-byte Spill
.LBB21_91:                              # %cond.end.165
	movl	-4944(%rbp), %eax       # 4-byte Reload
	movl	%eax, -56(%rbp)
	movl	$8, -52(%rbp)
	jmp	.LBB21_122
.LBB21_92:                              # %sw.bb.167
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	cmpl	-56(%rbp), %ecx
	jle	.LBB21_94
# BB#93:                                # %cond.true.170
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -4948(%rbp)       # 4-byte Spill
	jmp	.LBB21_95
.LBB21_94:                              # %cond.false.172
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -4948(%rbp)       # 4-byte Spill
.LBB21_95:                              # %cond.end.173
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4948(%rbp), %eax       # 4-byte Reload
	movl	$1, %esi
	movl	%eax, -56(%rbp)
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-8(%rbp), %rdi
	movl	$0, 2408(%rdi)
	jmp	.LBB21_120
.LBB21_96:                              # %sw.bb.175
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movl	2320(%rax), %ecx
	movl	%ecx, -56(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 2408(%rax)
	movq	-8(%rbp), %rdi
	callq	reseat_at_next_visible_line_start
	movl	-32(%rbp), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB21_99
# BB#97:                                # %land.lhs.true.179
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB21_99
# BB#98:                                # %if.then.184
	movl	$9, -52(%rbp)
	jmp	.LBB21_122
.LBB21_99:                              # %if.end.185
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_120
.LBB21_100:                             # %sw.bb.186
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2320(%rax), %ecx
	movl	%ecx, -56(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 2124(%rax)
	jne	.LBB21_117
# BB#101:                               # %if.then.189
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2320(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2408(%rax), %ecx
	movl	%ecx, 2408(%rax)
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	je	.LBB21_116
# BB#102:                               # %land.lhs.true.196
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-32(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB21_116
# BB#103:                               # %land.lhs.true.199
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-32(%rbp), %eax
	andl	$9, %eax
	cmpl	$0, %eax
	jne	.LBB21_116
# BB#104:                               # %if.then.202
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2368(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2320(%rax), %ecx
	movl	%ecx, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB21_115
# BB#105:                               # %if.then.212
                                        #   in Loop: Header=BB21_1 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB21_106
	jmp	.LBB21_107
.LBB21_106:                             # %cond.true.213
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB21_108
	jmp	.LBB21_109
.LBB21_107:                             # %cond.false.218
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB21_109
.LBB21_108:                             # %cond.true.228
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	jmp	.LBB21_110
.LBB21_109:                             # %cond.false.232
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4960(%rbp)       # 8-byte Spill
	jmp	.LBB21_110
.LBB21_110:                             # %cond.end.233
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-4960(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4888(%rbp)
	movq	-4888(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -4896(%rbp)
	cmpq	$0, -4896(%rbp)
	je	.LBB21_114
# BB#111:                               # %if.then.236
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-48(%rbp), %eax
	movq	-4896(%rbp), %rcx
	cmpl	160(%rcx), %eax
	jge	.LBB21_113
# BB#112:                               # %if.then.239
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movswl	2274(%rax), %ecx
	movq	-4896(%rbp), %rax
	imull	160(%rax), %ecx
	addl	-48(%rbp), %ecx
	movl	%ecx, -48(%rbp)
.LBB21_113:                             # %if.end.243
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_114
.LBB21_114:                             # %if.end.244
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_115
.LBB21_115:                             # %if.end.245
                                        #   in Loop: Header=BB21_1 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
.LBB21_116:                             # %if.end.246
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_118
.LBB21_117:                             # %if.else.247
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2408(%rax), %ecx
	movl	%ecx, 2408(%rax)
.LBB21_118:                             # %if.end.251
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_120
.LBB21_119:                             # %sw.default
	callq	emacs_abort
.LBB21_120:                             # %sw.epilog
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	current_buffer, %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	callq	recenter_overlay_lists
	movl	-48(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2404(%rax)
	movl	$0, -48(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 2444(%rax)
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2432(%rax), %ecx
	movl	%ecx, 2432(%rax)
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2440(%rax)
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, last_height
	movq	-8(%rbp), %rax
	movl	$0, 2384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2380(%rax)
	jmp	.LBB21_1
.LBB21_121:                             # %for.end
	jmp	.LBB21_122
.LBB21_122:                             # %out
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB21_134
# BB#123:                               # %land.lhs.true.275
	movl	-32(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB21_134
# BB#124:                               # %land.lhs.true.278
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB21_134
# BB#125:                               # %land.lhs.true.284
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB21_134
# BB#126:                               # %land.lhs.true.287
	movq	-8(%rbp), %rax
	cmpl	$1, 2364(%rax)
	jle	.LBB21_134
# BB#127:                               # %land.lhs.true.290
	movq	-8(%rbp), %rax
	cmpl	$2, 2116(%rax)
	jne	.LBB21_134
# BB#128:                               # %land.lhs.true.294
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2320(%rax), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jne	.LBB21_134
# BB#129:                               # %land.lhs.true.300
	movq	-8(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB21_134
# BB#130:                               # %land.lhs.true.304
	movq	-8(%rbp), %rax
	cmpl	$9, 2124(%rax)
	je	.LBB21_134
# BB#131:                               # %land.lhs.true.308
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB21_134
# BB#132:                               # %land.lhs.true.314
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	464(%rax), %ecx
	jge	.LBB21_134
# BB#133:                               # %if.then.319
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2408(%rax), %ecx
	movl	%ecx, 2408(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2380(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2444(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2404(%rax)
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2432(%rax), %ecx
	movl	%ecx, 2432(%rax)
	movq	-8(%rbp), %rax
	movl	2440(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2440(%rax)
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, last_height
.LBB21_134:                             # %if.end.337
	cmpq	$0, -64(%rbp)
	je	.LBB21_136
# BB#135:                               # %if.then.339
	movl	$1, %esi
	movq	-64(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB21_136:                             # %if.end.340
	movl	-56(%rbp), %eax
	addq	$4960, %rsp             # imm = 0x1360
	popq	%rbp
	retq
.Lfunc_end21:
	.size	move_it_to, .Lfunc_end21-move_it_to
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI21_0:
	.quad	.LBB21_88
	.quad	.LBB21_119
	.quad	.LBB21_100
	.quad	.LBB21_96
	.quad	.LBB21_92

	.text
	.align	16, 0x90
	.type	get_next_display_element,@function
get_next_display_element:               # @get_next_display_element
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp66:
	.cfi_def_cfa_offset 16
.Ltmp67:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp68:
	.cfi_def_cfa_register %rbp
	subq	$576, %rsp              # imm = 0x240
	movq	%rdi, -8(%rbp)
.LBB22_1:                               # %get_next
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_124 Depth 2
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 2104(%rdi)
	jne	.LBB22_134
# BB#2:                                 # %if.then
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB22_6
# BB#3:                                 # %land.lhs.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 2504(%rax)
	jne	.LBB22_6
# BB#4:                                 # %land.lhs.true.2
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, globals+3388
	jne	.LBB22_6
# BB#5:                                 # %if.then.3
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2124(%rax), %edi
	callq	bidi_mirror_char
	movq	-8(%rbp), %rcx
	movl	%eax, 2124(%rcx)
.LBB22_6:                               # %if.end
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, -9(%rbp)
	je	.LBB22_130
# BB#7:                                 # %land.lhs.true.7
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	jne	.LBB22_130
# BB#8:                                 # %if.then.9
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	charset_table, %rax
	movslq	charset_unibyte, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movb	$0, -33(%rbp)
	movb	$0, -34(%rbp)
	movq	-8(%rbp), %rax
	movl	2124(%rax), %edx
	movl	%edx, -40(%rbp)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	andb	$1, %sil
	testb	$1, %sil
	jne	.LBB22_44
# BB#9:                                 # %land.lhs.true.15
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_10
	jmp	.LBB22_11
.LBB22_10:                              # %cond.true
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB22_44
	jmp	.LBB22_12
.LBB22_11:                              # %cond.false
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jb	.LBB22_44
.LBB22_12:                              # %if.then.20
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, globals+3432
	je	.LBB22_42
# BB#13:                                # %if.then.22
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_14
	jmp	.LBB22_15
.LBB22_14:                              # %cond.true.23
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB22_16
	jmp	.LBB22_18
.LBB22_15:                              # %cond.false.27
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB22_18
.LBB22_16:                              # %land.lhs.true.32
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_18
# BB#17:                                # %cond.true.38
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jmp	.LBB22_39
.LBB22_18:                              # %cond.false.40
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB22_20
# BB#19:                                # %lor.lhs.false
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB22_21
.LBB22_20:                              # %cond.true.45
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	$-1, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	jmp	.LBB22_38
.LBB22_21:                              # %cond.false.46
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_23
# BB#22:                                # %cond.true.52
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -248(%rbp)        # 8-byte Spill
	jmp	.LBB22_37
.LBB22_23:                              # %cond.false.55
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB22_28
# BB#24:                                # %cond.true.59
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_26
# BB#25:                                # %cond.true.64
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-32(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB22_27
.LBB22_26:                              # %cond.false.67
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	decode_char
	movl	%eax, -252(%rbp)        # 4-byte Spill
.LBB22_27:                              # %cond.end
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-252(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	jmp	.LBB22_36
.LBB22_28:                              # %cond.false.70
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB22_34
# BB#29:                                # %cond.true.74
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_32
# BB#30:                                # %land.lhs.true.80
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-32(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB22_31
	jmp	.LBB22_32
.LBB22_31:                              # %cond.true.86
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-32(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-40(%rbp), %ecx
	movq	-32(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	jmp	.LBB22_33
.LBB22_32:                              # %cond.false.95
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -272(%rbp)        # 8-byte Spill
.LBB22_33:                              # %cond.end.98
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
	jmp	.LBB22_35
.LBB22_34:                              # %cond.false.100
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-32(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -280(%rbp)        # 8-byte Spill
.LBB22_35:                              # %cond.end.103
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, -264(%rbp)        # 8-byte Spill
.LBB22_36:                              # %cond.end.105
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB22_37:                              # %cond.end.107
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
.LBB22_38:                              # %cond.end.109
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, -232(%rbp)        # 8-byte Spill
.LBB22_39:                              # %cond.end.111
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-232(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB22_41
# BB#40:                                # %if.then.116
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2124(%rax), %ecx
	addl	$4194048, %ecx          # imm = 0x3FFF00
	movl	%ecx, -40(%rbp)
.LBB22_41:                              # %if.end.119
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_43
.LBB22_42:                              # %if.else
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2124(%rax), %ecx
	addl	$4194048, %ecx          # imm = 0x3FFF00
	movl	%ecx, -40(%rbp)
.LBB22_43:                              # %if.end.122
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_44
.LBB22_44:                              # %if.end.123
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB22_61
# BB#45:                                # %land.lhs.true.125
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_46
	jmp	.LBB22_47
.LBB22_46:                              # %cond.true.126
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB22_48
	jmp	.LBB22_55
.LBB22_47:                              # %cond.false.130
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB22_55
.LBB22_48:                              # %cond.true.135
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB22_50
# BB#49:                                # %cond.true.140
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jmp	.LBB22_54
.LBB22_50:                              # %cond.false.142
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	32(%rax), %rdi
	callq	SUB_CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB22_51
	jmp	.LBB22_52
.LBB22_51:                              # %cond.true.147
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	96(%rcx), %rcx
	movq	32(%rcx), %rdi
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	XSUB_CHAR_TABLE
	movq	-304(%rbp), %rcx        # 8-byte Reload
	movq	16(%rax,%rcx,8), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	jmp	.LBB22_53
.LBB22_52:                              # %cond.false.153
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
.LBB22_53:                              # %cond.end.156
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, -296(%rbp)        # 8-byte Spill
.LBB22_54:                              # %cond.end.158
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-296(%rbp), %rax        # 8-byte Reload
	movq	%rax, -320(%rbp)        # 8-byte Spill
	jmp	.LBB22_56
.LBB22_55:                              # %cond.false.160
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	movl	-40(%rbp), %esi
	callq	disp_char_vector
	movq	%rax, -320(%rbp)        # 8-byte Spill
.LBB22_56:                              # %cond.end.163
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB22_57
	jmp	.LBB22_61
.LBB22_57:                              # %if.then.167
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	XVECTOR
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB22_59
# BB#58:                                # %if.then.170
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2128(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 120(%rax)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	-48(%rbp), %rdx
	movq	(%rdx), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 112(%rdx)
	movq	-8(%rbp), %rax
	movl	$0, 352(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 124(%rax)
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 128(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	andb	$-33, %sil
	movb	%sil, 88(%rax)
	jmp	.LBB22_60
.LBB22_59:                              # %if.else.181
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
.LBB22_60:                              # %if.end.182
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_1
.LBB22_61:                              # %if.end.183
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %edi
	movq	-8(%rbp), %rsi
	callq	lookup_glyphless_char_display
	xorl	%edi, %edi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-328(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB22_65
# BB#62:                                # %if.then.188
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 2104(%rax)
	jne	.LBB22_64
# BB#63:                                # %if.then.192
	jmp	.LBB22_168
.LBB22_64:                              # %if.end.193
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
	jmp	.LBB22_1
.LBB22_65:                              # %if.end.194
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_66
	jmp	.LBB22_67
.LBB22_66:                              # %cond.true.195
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB22_77
	jmp	.LBB22_68
.LBB22_67:                              # %cond.false.199
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jb	.LBB22_77
.LBB22_68:                              # %land.lhs.true.204
                                        #   in Loop: Header=BB22_1 Depth=1
	xorl	%edi, %edi
	movq	globals+1648, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-336(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB22_77
# BB#69:                                # %if.then.208
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$160, -40(%rbp)
	jne	.LBB22_71
# BB#70:                                # %if.then.211
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, -33(%rbp)
	jmp	.LBB22_76
.LBB22_71:                              # %if.else.212
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$173, -40(%rbp)
	je	.LBB22_74
# BB#72:                                # %lor.lhs.false.215
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$8208, -40(%rbp)        # imm = 0x2010
	je	.LBB22_74
# BB#73:                                # %lor.lhs.false.218
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$8209, -40(%rbp)        # imm = 0x2011
	jne	.LBB22_75
.LBB22_74:                              # %if.then.221
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, -34(%rbp)
.LBB22_75:                              # %if.end.222
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_76
.LBB22_76:                              # %if.end.223
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_77
.LBB22_77:                              # %if.end.224
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$32, -40(%rbp)
	jl	.LBB22_79
# BB#78:                                # %lor.lhs.false.227
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$127, -40(%rbp)
	jne	.LBB22_86
.LBB22_79:                              # %cond.true.230
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2360(%rax)
	jne	.LBB22_92
# BB#80:                                # %lor.lhs.false.233
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$9, -40(%rbp)
	je	.LBB22_84
# BB#81:                                # %land.lhs.true.236
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB22_84
# BB#82:                                # %land.lhs.true.238
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB22_92
# BB#83:                                # %lor.lhs.false.245
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$6, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB22_92
.LBB22_84:                              # %lor.lhs.false.251
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$10, -40(%rbp)
	je	.LBB22_129
# BB#85:                                # %land.lhs.true.254
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$9, -40(%rbp)
	jne	.LBB22_92
	jmp	.LBB22_129
.LBB22_86:                              # %cond.false.257
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, -33(%rbp)
	jne	.LBB22_92
# BB#87:                                # %lor.lhs.false.260
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, -34(%rbp)
	jne	.LBB22_92
# BB#88:                                # %lor.lhs.false.263
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$4194175, -40(%rbp)     # imm = 0x3FFF7F
	jg	.LBB22_92
# BB#89:                                # %lor.lhs.false.266
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$32, -40(%rbp)
	jl	.LBB22_91
# BB#90:                                # %land.lhs.true.269
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$127, -40(%rbp)
	jl	.LBB22_129
.LBB22_91:                              # %lor.lhs.false.272
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	globals+1880, %rdi
	movl	-40(%rbp), %esi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-344(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB22_129
.LBB22_92:                              # %if.then.277
                                        #   in Loop: Header=BB22_1 Depth=1
	movb	$1, %al
	movl	$0, -68(%rbp)
	testb	$1, %al
	jne	.LBB22_93
	jmp	.LBB22_94
.LBB22_93:                              # %cond.true.279
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB22_95
	jmp	.LBB22_103
.LBB22_94:                              # %cond.false.283
                                        #   in Loop: Header=BB22_1 Depth=1
	movslq	-40(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB22_103
.LBB22_95:                              # %land.lhs.true.288
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$1, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB22_103
# BB#96:                                # %if.then.294
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$94, -76(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB22_99
# BB#97:                                # %land.lhs.true.297
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	576(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	GLYPH_CODE_P
	testb	$1, %al
	jne	.LBB22_98
	jmp	.LBB22_99
.LBB22_98:                              # %if.then.302
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rdi
	callq	GLYPH_CODE_CHAR
	movl	%eax, -76(%rbp)
	movq	-56(%rbp), %rdi
	callq	GLYPH_CODE_FACE
	movl	%eax, -68(%rbp)
.LBB22_99:                              # %if.end.305
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB22_101
# BB#100:                               # %cond.true.307
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	-68(%rbp), %edx
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %ecx
	movq	-352(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jmp	.LBB22_102
.LBB22_101:                             # %cond.false.311
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	merge_escape_glyph_face
	movl	%eax, -356(%rbp)        # 4-byte Spill
.LBB22_102:                             # %cond.end.313
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-356(%rbp), %eax        # 4-byte Reload
	movl	%eax, -64(%rbp)
	movslq	-76(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 136(%rdx)
	movl	-40(%rbp), %eax
	xorl	$64, %eax
	movslq	%eax, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 144(%rdx)
	movl	$2, -60(%rbp)
	jmp	.LBB22_128
.LBB22_103:                             # %if.end.323
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, -33(%rbp)
	je	.LBB22_106
# BB#104:                               # %land.lhs.true.326
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	globals+1648, %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-368(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB22_106
# BB#105:                               # %if.then.330
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$703, %edi              # imm = 0x2BF
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %ecx
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movl	%eax, -64(%rbp)
	movq	-8(%rbp), %rsi
	movq	$130, 136(%rsi)
	movl	$1, -60(%rbp)
	jmp	.LBB22_128
.LBB22_106:                             # %if.end.337
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$92, -72(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB22_109
# BB#107:                               # %land.lhs.true.340
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	568(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	GLYPH_CODE_P
	testb	$1, %al
	jne	.LBB22_108
	jmp	.LBB22_109
.LBB22_108:                             # %if.then.346
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-56(%rbp), %rdi
	callq	GLYPH_CODE_CHAR
	movl	%eax, -72(%rbp)
	movq	-56(%rbp), %rdi
	callq	GLYPH_CODE_FACE
	movl	%eax, -68(%rbp)
.LBB22_109:                             # %if.end.349
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB22_111
# BB#110:                               # %cond.true.351
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	-68(%rbp), %edx
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %ecx
	movq	-384(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movl	%eax, -388(%rbp)        # 4-byte Spill
	jmp	.LBB22_112
.LBB22_111:                             # %cond.false.356
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	merge_escape_glyph_face
	movl	%eax, -388(%rbp)        # 4-byte Spill
.LBB22_112:                             # %cond.end.358
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-388(%rbp), %eax        # 4-byte Reload
	movl	%eax, -64(%rbp)
	testb	$1, -34(%rbp)
	je	.LBB22_115
# BB#113:                               # %land.lhs.true.362
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	globals+1648, %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-400(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB22_115
# BB#114:                               # %if.then.366
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movq	$182, 136(%rax)
	movl	$1, -60(%rbp)
	jmp	.LBB22_128
.LBB22_115:                             # %if.end.369
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, -33(%rbp)
	jne	.LBB22_117
# BB#116:                               # %lor.lhs.false.372
                                        #   in Loop: Header=BB22_1 Depth=1
	testb	$1, -34(%rbp)
	je	.LBB22_118
.LBB22_117:                             # %if.then.375
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$45, %eax
	movl	$32, %ecx
	movslq	-72(%rbp), %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 136(%rsi)
	movb	-33(%rbp), %dil
	testb	$1, %dil
	cmovnel	%ecx, %eax
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 144(%rsi)
	movl	$2, -60(%rbp)
	jmp	.LBB22_128
.LBB22_118:                             # %if.end.389
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$4194175, -40(%rbp)     # imm = 0x3FFF7F
	jle	.LBB22_123
# BB#119:                               # %if.then.393
                                        #   in Loop: Header=BB22_1 Depth=1
	cmpl	$4194175, -40(%rbp)     # imm = 0x3FFF7F
	jle	.LBB22_121
# BB#120:                               # %cond.true.396
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -404(%rbp)        # 4-byte Spill
	jmp	.LBB22_122
.LBB22_121:                             # %cond.false.398
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-40(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -404(%rbp)        # 4-byte Spill
.LBB22_122:                             # %cond.end.399
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-404(%rbp), %eax        # 4-byte Reload
	movl	%eax, -40(%rbp)
.LBB22_123:                             # %if.end.401
                                        #   in Loop: Header=BB22_1 Depth=1
	movabsq	$.L.str.139, %rsi
	leaq	-86(%rbp), %rdi
	movl	-40(%rbp), %eax
	addl	$0, %eax
	movl	%eax, %edx
	movb	$0, %al
	callq	sprintf
	movl	%eax, -92(%rbp)
	movslq	-72(%rbp), %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 136(%rdi)
	movl	$0, -96(%rbp)
.LBB22_124:                             # %for.cond
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-96(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB22_127
# BB#125:                               # %for.body
                                        #   in Loop: Header=BB22_124 Depth=2
	movslq	-96(%rbp), %rax
	movsbq	-86(%rbp,%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movl	-96(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	-8(%rbp), %rsi
	movq	%rax, 136(%rsi,%rdx,8)
# BB#126:                               # %for.inc
                                        #   in Loop: Header=BB22_124 Depth=2
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB22_124
.LBB22_127:                             # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB22_128:                             # %display_control
                                        #   in Loop: Header=BB22_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2128(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 120(%rax)
	movq	-8(%rbp), %rax
	addq	$136, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movslq	-60(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 112(%rdx)
	movq	-8(%rbp), %rax
	movl	$0, 352(%rax)
	movl	-64(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 124(%rax)
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 128(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	andb	$-33, %sil
	movb	%sil, 88(%rax)
	jmp	.LBB22_1
.LBB22_129:                             # %if.end.440
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2208(%rcx)
	jmp	.LBB22_133
.LBB22_130:                             # %if.else.441
	testb	$1, -9(%rbp)
	je	.LBB22_132
# BB#131:                               # %if.then.443
	movq	-8(%rbp), %rax
	movl	2124(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2208(%rax)
.LBB22_132:                             # %if.end.446
	jmp	.LBB22_133
.LBB22_133:                             # %if.end.447
	jmp	.LBB22_134
.LBB22_134:                             # %if.end.448
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	je	.LBB22_136
# BB#135:                               # %lor.lhs.false.452
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB22_167
.LBB22_136:                             # %land.lhs.true.456
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_167
# BB#137:                               # %land.lhs.true.462
	testb	$1, -9(%rbp)
	je	.LBB22_167
# BB#138:                               # %land.lhs.true.465
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB22_167
# BB#139:                               # %if.then.473
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_140
	jmp	.LBB22_141
.LBB22_140:                             # %cond.true.474
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB22_142
	jmp	.LBB22_143
.LBB22_141:                             # %cond.false.481
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB22_143
.LBB22_142:                             # %cond.true.492
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	jmp	.LBB22_144
.LBB22_143:                             # %cond.false.498
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -416(%rbp)        # 8-byte Spill
	jmp	.LBB22_144
.LBB22_144:                             # %cond.end.499
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB22_147
# BB#145:                               # %land.lhs.true.504
	movq	-8(%rbp), %rax
	cmpl	$0, 2152(%rax)
	jl	.LBB22_147
# BB#146:                               # %if.then.507
	movq	-8(%rbp), %rax
	movq	2144(%rax), %rdi
	callq	composition_gstring_from_id
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -112(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-112(%rbp), %rax
	movq	%rdi, -424(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	-104(%rbp), %rdx
	movq	-424(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	face_for_font
	movq	-8(%rbp), %rdx
	movl	%eax, 2108(%rdx)
	jmp	.LBB22_166
.LBB22_147:                             # %if.else.515
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB22_149
# BB#148:                               # %cond.true.517
	movq	$-1, %rax
	movq	%rax, -432(%rbp)        # 8-byte Spill
	jmp	.LBB22_153
.LBB22_149:                             # %cond.false.518
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB22_150
	jmp	.LBB22_151
.LBB22_150:                             # %cond.true.521
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	jmp	.LBB22_152
.LBB22_151:                             # %cond.false.523
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
.LBB22_152:                             # %cond.end.527
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, -432(%rbp)        # 8-byte Spill
.LBB22_153:                             # %cond.end.529
	movq	-432(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB22_155
# BB#154:                               # %if.then.535
	movq	-8(%rbp), %rax
	movl	2208(%rax), %ecx
	movl	%ecx, -124(%rbp)
	jmp	.LBB22_165
.LBB22_155:                             # %if.else.537
	movq	-8(%rbp), %rax
	movq	2144(%rax), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$32, -124(%rbp)
	movl	$0, -140(%rbp)
.LBB22_156:                             # %for.cond.543
                                        # =>This Inner Loop Header: Depth=1
	movl	-140(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB22_164
# BB#157:                               # %for.body.546
                                        #   in Loop: Header=BB22_156 Depth=1
	movq	-136(%rbp), %rax
	cmpl	$3, 20(%rax)
	jne	.LBB22_159
# BB#158:                               # %cond.true.550
                                        #   in Loop: Header=BB22_156 Depth=1
	movl	-140(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -444(%rbp)        # 4-byte Spill
	jmp	.LBB22_160
.LBB22_159:                             # %cond.false.551
                                        #   in Loop: Header=BB22_156 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -444(%rbp)        # 4-byte Spill
.LBB22_160:                             # %cond.end.552
                                        #   in Loop: Header=BB22_156 Depth=1
	movl	-444(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-136(%rbp), %rdx
	movq	24(%rdx), %rdx
	shlq	$1, %rdx
	movq	composition_hash_table, %rdi
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	72(%rax), %rdi
	callq	XVECTOR
	movq	-464(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	callq	XVECTOR
	movq	-456(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movl	%esi, -124(%rbp)
	cmpl	$9, %esi
	je	.LBB22_162
# BB#161:                               # %if.then.568
	jmp	.LBB22_164
.LBB22_162:                             # %if.end.569
                                        #   in Loop: Header=BB22_156 Depth=1
	jmp	.LBB22_163
.LBB22_163:                             # %for.inc.570
                                        #   in Loop: Header=BB22_156 Depth=1
	movl	-140(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB22_156
.LBB22_164:                             # %for.end.572
	jmp	.LBB22_165
.LBB22_165:                             # %if.end.573
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-104(%rbp), %rsi
	movl	-124(%rbp), %edx
	movq	-120(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	632(%rax), %r8
	callq	face_for_char
	movq	-8(%rbp), %rcx
	movl	%eax, 2108(%rcx)
.LBB22_166:                             # %if.end.578
	jmp	.LBB22_167
.LBB22_167:                             # %if.end.579
	jmp	.LBB22_168
.LBB22_168:                             # %done
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$2, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB22_253
# BB#169:                               # %land.lhs.true.585
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB22_253
# BB#170:                               # %if.then.589
	movq	-8(%rbp), %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_242
# BB#171:                               # %land.lhs.true.593
	movq	-8(%rbp), %rax
	cmpl	$0, 2088(%rax)
	je	.LBB22_242
# BB#172:                               # %if.then.595
	movq	-8(%rbp), %rdi
	callq	underlying_face_id
	movb	$1, %cl
	movl	%eax, -144(%rbp)
	testb	$1, %cl
	jne	.LBB22_173
	jmp	.LBB22_174
.LBB22_173:                             # %cond.true.599
	movl	-144(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB22_175
	jmp	.LBB22_176
.LBB22_174:                             # %cond.false.607
	movslq	-144(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB22_176
.LBB22_175:                             # %cond.true.617
	movslq	-144(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	jmp	.LBB22_177
.LBB22_176:                             # %cond.false.623
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -472(%rbp)        # 8-byte Spill
	jmp	.LBB22_177
.LBB22_177:                             # %cond.end.624
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)
	cmpq	$0, -152(%rbp)
	je	.LBB22_241
# BB#178:                               # %if.then.627
	movq	-152(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	jne	.LBB22_185
# BB#179:                               # %if.then.632
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	face_before_or_after_it_pos
	movb	$1, %cl
	movl	%eax, -156(%rbp)
	testb	$1, %cl
	jne	.LBB22_180
	jmp	.LBB22_181
.LBB22_180:                             # %cond.true.634
	movl	-156(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB22_182
	jmp	.LBB22_183
.LBB22_181:                             # %cond.false.642
	movslq	-156(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB22_183
.LBB22_182:                             # %cond.true.652
	movslq	-156(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	jmp	.LBB22_184
.LBB22_183:                             # %cond.false.658
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	jmp	.LBB22_184
.LBB22_184:                             # %cond.end.659
	movq	-480(%rbp), %rax        # 8-byte Reload
	movb	240(%rax), %cl
	testb	$3, %cl
	sete	%cl
	movq	-8(%rbp), %rax
	movzbl	%cl, %edx
	movw	%dx, %si
	movw	2112(%rax), %di
	shlw	$4, %si
	andw	$-17, %di
	orw	%si, %di
	movw	%di, 2112(%rax)
	jmp	.LBB22_240
.LBB22_185:                             # %if.else.669
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	SCHARS
	subq	$1, %rax
	movq	-488(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB22_239
# BB#186:                               # %land.lhs.true.678
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB22_188
# BB#187:                               # %land.lhs.true.682
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	360(%rcx), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	je	.LBB22_189
.LBB22_188:                             # %lor.lhs.false.688
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_239
.LBB22_189:                             # %if.then.694
	movb	$0, -173(%rbp)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rcx
	movq	%rcx, -192(%rbp)
	movq	320(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-8(%rbp), %rax
	movb	88(%rax), %dl
	shrb	$4, %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB22_199
# BB#190:                               # %if.then.703
	movq	-8(%rbp), %rax
	movl	2088(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -196(%rbp)
.LBB22_191:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$0, -196(%rbp)
	movb	%cl, -489(%rbp)         # 1-byte Spill
	jl	.LBB22_193
# BB#192:                               # %land.rhs
                                        #   in Loop: Header=BB22_191 Depth=1
	movq	-8(%rbp), %rax
	addq	$648, %rax              # imm = 0x288
	movslq	-196(%rbp), %rcx
	imulq	$288, %rcx, %rcx        # imm = 0x120
	addq	%rcx, %rax
	movq	(%rax), %rdi
	callq	STRINGP
	movb	%al, -489(%rbp)         # 1-byte Spill
.LBB22_193:                             # %land.end
                                        #   in Loop: Header=BB22_191 Depth=1
	movb	-489(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_194
	jmp	.LBB22_195
.LBB22_194:                             # %while.body
                                        #   in Loop: Header=BB22_191 Depth=1
	movl	-196(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -196(%rbp)
	jmp	.LBB22_191
.LBB22_195:                             # %while.end
	cmpl	$0, -196(%rbp)
	jge	.LBB22_197
# BB#196:                               # %if.then.716
	movb	$1, -173(%rbp)
	movq	-8(%rbp), %rax
	movl	2088(%rax), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rax
	movq	-8(%rbp), %rdx
	addq	$648, %rdx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rdx
	movq	176(%rdx), %rax
	movq	%rax, -192(%rbp)
	movq	184(%rdx), %rax
	movq	%rax, -184(%rbp)
	jmp	.LBB22_198
.LBB22_197:                             # %if.else.722
	movq	-8(%rbp), %rax
	addq	$648, %rax              # imm = 0x288
	movslq	-196(%rbp), %rcx
	imulq	$288, %rcx, %rcx        # imm = 0x120
	addq	%rcx, %rax
	movq	176(%rax), %rcx
	movq	%rcx, -192(%rbp)
	movq	184(%rax), %rax
	movq	%rax, -184(%rbp)
.LBB22_198:                             # %if.end.728
	jmp	.LBB22_219
.LBB22_199:                             # %if.else.729
	jmp	.LBB22_200
.LBB22_200:                             # %do.body
	movq	-192(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -192(%rbp)
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB22_216
# BB#201:                               # %if.then.736
	jmp	.LBB22_202
.LBB22_202:                             # %do.body.737
	movq	-184(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB22_204
# BB#203:                               # %cond.true.740
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	jmp	.LBB22_205
.LBB22_204:                             # %cond.false.742
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	jmp	.LBB22_205
.LBB22_205:                             # %cond.end.743
	movq	-504(%rbp), %rax        # 8-byte Reload
	addq	-184(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movzbl	(%rax), %edx
	andl	$128, %edx
	cmpl	$0, %edx
	jne	.LBB22_207
# BB#206:                               # %cond.true.753
	movl	$1, %eax
	movl	%eax, -508(%rbp)        # 4-byte Spill
	jmp	.LBB22_214
.LBB22_207:                             # %cond.false.754
	movq	-208(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB22_209
# BB#208:                               # %cond.true.758
	movl	$2, %eax
	movl	%eax, -512(%rbp)        # 4-byte Spill
	jmp	.LBB22_213
.LBB22_209:                             # %cond.false.759
	movq	-208(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB22_211
# BB#210:                               # %cond.true.763
	movl	$3, %eax
	movl	%eax, -516(%rbp)        # 4-byte Spill
	jmp	.LBB22_212
.LBB22_211:                             # %cond.false.764
	movl	$5, %eax
	movl	$4, %ecx
	movq	-208(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$8, %esi
	cmpl	$0, %esi
	setne	%dil
	xorb	$-1, %dil
	testb	$1, %dil
	cmovnel	%ecx, %eax
	movl	%eax, -516(%rbp)        # 4-byte Spill
.LBB22_212:                             # %cond.end.769
	movl	-516(%rbp), %eax        # 4-byte Reload
	movl	%eax, -512(%rbp)        # 4-byte Spill
.LBB22_213:                             # %cond.end.771
	movl	-512(%rbp), %eax        # 4-byte Reload
	movl	%eax, -508(%rbp)        # 4-byte Spill
.LBB22_214:                             # %cond.end.773
	movl	-508(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	addq	-184(%rbp), %rcx
	movq	%rcx, -184(%rbp)
# BB#215:                               # %do.end
	jmp	.LBB22_217
.LBB22_216:                             # %if.else.778
	movq	-184(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -184(%rbp)
.LBB22_217:                             # %if.end.781
	jmp	.LBB22_218
.LBB22_218:                             # %do.end.782
	jmp	.LBB22_219
.LBB22_219:                             # %if.end.783
	testb	$1, -173(%rbp)
	je	.LBB22_229
# BB#220:                               # %if.then.785
	movq	-8(%rbp), %rax
	movl	2088(%rax), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rax
	movq	-8(%rbp), %rdx
	addq	$648, %rdx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rdx
	movq	(%rdx), %rax
	movq	%rax, -216(%rbp)
	movq	-192(%rbp), %rax
	movq	-216(%rbp), %rdi
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	SCHARS
	subq	$1, %rax
	movq	-528(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jl	.LBB22_222
# BB#221:                               # %if.then.797
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-17, %cx
	orw	$16, %cx
	movw	%cx, 2112(%rax)
	jmp	.LBB22_228
.LBB22_222:                             # %if.else.802
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	-168(%rbp), %r8
	xorl	%eax, %eax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdi
	movq	-216(%rbp), %rsi
	movq	-192(%rbp), %rdx
	movl	-144(%rbp), %r9d
	movl	$0, (%rsp)
	movl	%eax, -532(%rbp)        # 4-byte Spill
	callq	face_at_string_position
	movb	$1, %r10b
	movl	%eax, -172(%rbp)
	testb	$1, %r10b
	jne	.LBB22_223
	jmp	.LBB22_224
.LBB22_223:                             # %cond.true.805
	movl	-172(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB22_225
	jmp	.LBB22_226
.LBB22_224:                             # %cond.false.813
	movslq	-172(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB22_226
.LBB22_225:                             # %cond.true.823
	movslq	-172(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	jmp	.LBB22_227
.LBB22_226:                             # %cond.false.829
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	jmp	.LBB22_227
.LBB22_227:                             # %cond.end.830
	movq	-544(%rbp), %rax        # 8-byte Reload
	movb	240(%rax), %cl
	testb	$3, %cl
	sete	%cl
	movq	-8(%rbp), %rax
	movzbl	%cl, %edx
	movw	%dx, %si
	movw	2112(%rax), %di
	shlw	$4, %si
	andw	$-17, %di
	orw	%si, %di
	movw	%di, 2112(%rax)
.LBB22_228:                             # %if.end.844
	jmp	.LBB22_238
.LBB22_229:                             # %if.else.845
	movq	-192(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jl	.LBB22_231
# BB#230:                               # %if.then.849
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-17, %cx
	orw	$16, %cx
	movw	%cx, 2112(%rax)
	jmp	.LBB22_237
.LBB22_231:                             # %if.else.854
	leaq	-168(%rbp), %rdx
	xorl	%r8d, %r8d
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-192(%rbp), %rsi
	movq	-192(%rbp), %rax
	addq	$100, %rax
	movq	%rax, %rcx
	callq	face_at_buffer_position
	movb	$1, %r10b
	movl	%eax, -172(%rbp)
	testb	$1, %r10b
	jne	.LBB22_232
	jmp	.LBB22_233
.LBB22_232:                             # %cond.true.860
	movl	-172(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB22_234
	jmp	.LBB22_235
.LBB22_233:                             # %cond.false.868
	movslq	-172(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB22_235
.LBB22_234:                             # %cond.true.878
	movslq	-172(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	jmp	.LBB22_236
.LBB22_235:                             # %cond.false.884
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	jmp	.LBB22_236
.LBB22_236:                             # %cond.end.885
	movq	-552(%rbp), %rax        # 8-byte Reload
	movb	240(%rax), %cl
	testb	$3, %cl
	sete	%cl
	movq	-8(%rbp), %rax
	movzbl	%cl, %edx
	movw	%dx, %si
	movw	2112(%rax), %di
	shlw	$4, %si
	andw	$-17, %di
	orw	%si, %di
	movw	%di, 2112(%rax)
.LBB22_237:                             # %if.end.899
	jmp	.LBB22_238
.LBB22_238:                             # %if.end.900
	jmp	.LBB22_239
.LBB22_239:                             # %if.end.901
	jmp	.LBB22_240
.LBB22_240:                             # %if.end.902
	jmp	.LBB22_241
.LBB22_241:                             # %if.end.903
	jmp	.LBB22_252
.LBB22_242:                             # %if.else.904
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	je	.LBB22_251
# BB#243:                               # %if.then.908
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	face_before_or_after_it_pos
	xorl	%esi, %esi
	movb	%sil, %cl
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	movq	-8(%rbp), %rdi
	cmpl	2108(%rdi), %eax
	movb	%cl, -553(%rbp)         # 1-byte Spill
	je	.LBB22_250
# BB#244:                               # %land.rhs.914
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_245
	jmp	.LBB22_246
.LBB22_245:                             # %cond.true.915
	movl	-220(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB22_247
	jmp	.LBB22_248
.LBB22_246:                             # %cond.false.923
	movslq	-220(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB22_248
.LBB22_247:                             # %cond.true.933
	movslq	-220(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	jmp	.LBB22_249
.LBB22_248:                             # %cond.false.939
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -568(%rbp)        # 8-byte Spill
	jmp	.LBB22_249
.LBB22_249:                             # %cond.end.940
	movq	-568(%rbp), %rax        # 8-byte Reload
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	sete	%dl
	movb	%dl, -553(%rbp)         # 1-byte Spill
.LBB22_250:                             # %land.end.947
	movb	-553(%rbp), %al         # 1-byte Reload
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movw	%dx, %si
	movw	2112(%rcx), %di
	shlw	$4, %si
	andw	$-17, %di
	orw	%si, %di
	movw	%di, 2112(%rcx)
.LBB22_251:                             # %if.end.955
	jmp	.LBB22_252
.LBB22_252:                             # %if.end.956
	jmp	.LBB22_253
.LBB22_253:                             # %if.end.957
	testb	$1, -9(%rbp)
	jne	.LBB22_256
# BB#254:                               # %land.lhs.true.959
	movq	-8(%rbp), %rax
	cmpl	$0, 2088(%rax)
	jle	.LBB22_256
# BB#255:                               # %if.then.963
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-8(%rbp), %rdi
	callq	get_next_display_element
	andb	$1, %al
	movb	%al, -9(%rbp)
.LBB22_256:                             # %if.end.966
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$576, %rsp              # imm = 0x240
	popq	%rbp
	retq
.Lfunc_end22:
	.size	get_next_display_element, .Lfunc_end22-get_next_display_element
	.cfi_endproc

	.align	16, 0x90
	.type	set_iterator_to_next,@function
set_iterator_to_next:                   # @set_iterator_to_next
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp69:
	.cfi_def_cfa_offset 16
.Ltmp70:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp71:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	movw	2112(%rdi), %cx
	andw	$-17, %cx
	movw	%cx, 2112(%rdi)
	movq	-8(%rbp), %rdi
	movw	2112(%rdi), %cx
	andw	$-9, %cx
	movw	%cx, 2112(%rdi)
	movq	-8(%rbp), %rdi
	movl	24(%rdi), %esi
	movl	%esi, %edi
	movq	%rdi, %rdx
	subq	$6, %rdx
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	ja	.LBB23_125
# BB#127:                               # %entry
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	.LJTI23_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB23_1:                               # %sw.bb
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB23_7
# BB#2:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB23_5
# BB#3:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB23_7
# BB#4:                                 # %land.lhs.true.6
	movq	-8(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB23_7
.LBB23_5:                               # %land.lhs.true.7
	testb	$1, -9(%rbp)
	je	.LBB23_7
# BB#6:                                 # %if.then
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	reseat_at_next_visible_line_start
	jmp	.LBB23_39
.LBB23_7:                               # %if.else
	movq	-8(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jl	.LBB23_28
# BB#8:                                 # %if.then.10
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB23_10
# BB#9:                                 # %if.then.13
	movq	-8(%rbp), %rax
	movslq	2184(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	312(%rcx), %rax
	movq	%rax, 312(%rcx)
	movq	-8(%rbp), %rax
	movslq	2188(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	%rax, 320(%rcx)
	jmp	.LBB23_15
.LBB23_10:                              # %if.else.20
	movl	$0, -16(%rbp)
.LBB23_11:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2184(%rcx), %eax
	jge	.LBB23_14
# BB#12:                                # %for.body
                                        #   in Loop: Header=BB23_11 Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#13:                                # %for.inc
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_11
.LBB23_14:                              # %for.end
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 320(%rcx)
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
.LBB23_15:                              # %if.end
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_17
# BB#16:                                # %lor.lhs.false.40
	movq	-8(%rbp), %rax
	testb	$1, 2172(%rax)
	jne	.LBB23_19
.LBB23_17:                              # %land.lhs.true.43
	movq	-8(%rbp), %rax
	movl	2196(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2168(%rax), %ecx
	jge	.LBB23_19
# BB#18:                                # %if.then.48
	movq	-8(%rbp), %rax
	movl	2196(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2192(%rax)
	jmp	.LBB23_27
.LBB23_19:                              # %if.else.52
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_23
# BB#20:                                # %land.lhs.true.59
	movq	-8(%rbp), %rax
	testb	$1, 2172(%rax)
	je	.LBB23_23
# BB#21:                                # %land.lhs.true.64
	movq	-8(%rbp), %rax
	cmpl	$0, 2192(%rax)
	jle	.LBB23_23
# BB#22:                                # %if.then.69
	movq	-8(%rbp), %rax
	movl	2192(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2196(%rax)
	jmp	.LBB23_26
.LBB23_23:                              # %if.else.74
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB23_25
# BB#24:                                # %if.then.78
	movq	$-1, -24(%rbp)
.LBB23_25:                              # %if.end.79
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movq	320(%rcx), %rdx
	movq	-24(%rbp), %rcx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	movq	%rdx, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	-120(%rbp), %rdx        # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	composition_compute_stop_pos
.LBB23_26:                              # %if.end.87
	jmp	.LBB23_27
.LBB23_27:                              # %if.end.88
	jmp	.LBB23_38
.LBB23_28:                              # %if.else.89
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB23_30
# BB#29:                                # %if.then.95
	movq	-8(%rbp), %rax
	movslq	2128(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	%rax, 320(%rcx)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 312(%rax)
	jmp	.LBB23_37
.LBB23_30:                              # %if.else.105
	movq	-8(%rbp), %rax
	movl	2648(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rax
	movb	4784(%rax), %dl
	shrb	$1, %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB23_32
# BB#31:                                # %if.then.113
	xorl	%edx, %edx
	movq	-8(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
.LBB23_32:                              # %if.end.115
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 320(%rdi)
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 312(%rdi)
	movl	-28(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	2648(%rax), %ecx
	je	.LBB23_36
# BB#33:                                # %if.then.131
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB23_35
# BB#34:                                # %if.then.138
	movq	$-1, -40(%rbp)
.LBB23_35:                              # %if.end.139
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movq	320(%rcx), %rdx
	movq	-40(%rbp), %rcx
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-128(%rbp), %rcx        # 8-byte Reload
	movq	%rax, %r8
	callq	composition_compute_stop_pos
.LBB23_36:                              # %if.end.148
	jmp	.LBB23_37
.LBB23_37:                              # %if.end.149
	jmp	.LBB23_38
.LBB23_38:                              # %if.end.150
	jmp	.LBB23_39
.LBB23_39:                              # %if.end.151
	jmp	.LBB23_126
.LBB23_40:                              # %sw.bb.152
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_42
# BB#41:                                # %lor.lhs.false.158
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	4736(%rcx), %rax
	jl	.LBB23_43
.LBB23_42:                              # %if.then.165
	movq	-8(%rbp), %rax
	movslq	2128(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	%rax, 320(%rcx)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 312(%rax)
	jmp	.LBB23_44
.LBB23_43:                              # %if.else.176
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 320(%rdi)
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 312(%rdi)
.LBB23_44:                              # %if.end.188
	jmp	.LBB23_126
.LBB23_45:                              # %sw.bb.189
	movq	-8(%rbp), %rax
	movl	352(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 352(%rax)
	movq	-8(%rbp), %rax
	movl	128(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2108(%rax)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rdx
	movslq	352(%rdx), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	-8(%rbp), %rdx
	cmpq	112(%rdx), %rax
	jb	.LBB23_63
# BB#46:                                # %if.then.196
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	andb	$1, %cl
	movb	%cl, -41(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB23_48
# BB#47:                                # %if.then.203
	movq	-8(%rbp), %rax
	movl	$3, 24(%rax)
	jmp	.LBB23_52
.LBB23_48:                              # %if.else.205
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB23_49
	jmp	.LBB23_50
.LBB23_49:                              # %if.then.208
	movq	-8(%rbp), %rax
	movl	$2, 24(%rax)
	jmp	.LBB23_51
.LBB23_50:                              # %if.else.210
	movq	-8(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
.LBB23_51:                              # %if.end.212
	jmp	.LBB23_52
.LBB23_52:                              # %if.end.213
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 352(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 120(%rax)
	jge	.LBB23_54
# BB#53:                                # %if.then.219
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	reseat_at_next_visible_line_start
	jmp	.LBB23_57
.LBB23_54:                              # %if.else.220
	movq	-8(%rbp), %rax
	cmpl	$0, 120(%rax)
	jle	.LBB23_56
# BB#55:                                # %if.then.224
	movq	-8(%rbp), %rax
	movl	120(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2128(%rax)
	movq	-8(%rbp), %rdi
	movb	-9(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	callq	set_iterator_to_next
.LBB23_56:                              # %if.end.228
	jmp	.LBB23_57
.LBB23_57:                              # %if.end.229
	testb	$1, -41(%rbp)
	je	.LBB23_62
# BB#58:                                # %if.then.231
	movq	-8(%rbp), %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_60
# BB#59:                                # %if.then.235
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	jmp	.LBB23_61
.LBB23_60:                              # %if.else.238
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
.LBB23_61:                              # %if.end.243
	jmp	.LBB23_62
.LBB23_62:                              # %if.end.244
	jmp	.LBB23_63
.LBB23_63:                              # %if.end.245
	jmp	.LBB23_126
.LBB23_64:                              # %sw.bb.246
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB23_68
# BB#65:                                # %if.then.250
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	SCHARS
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB23_67
# BB#66:                                # %if.then.258
	jmp	.LBB23_109
.LBB23_67:                              # %if.end.259
	jmp	.LBB23_71
.LBB23_68:                              # %if.else.260
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jl	.LBB23_70
# BB#69:                                # %if.then.267
	jmp	.LBB23_109
.LBB23_70:                              # %if.end.268
	jmp	.LBB23_71
.LBB23_71:                              # %if.end.269
	movq	-8(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jl	.LBB23_96
# BB#72:                                # %if.then.274
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB23_74
# BB#73:                                # %if.then.280
	movq	-8(%rbp), %rax
	movslq	2184(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	336(%rcx), %rax
	movq	%rax, 336(%rcx)
	movq	-8(%rbp), %rax
	movslq	2188(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	344(%rcx), %rax
	movq	%rax, 344(%rcx)
	jmp	.LBB23_79
.LBB23_74:                              # %if.else.295
	movl	$0, -48(%rbp)
.LBB23_75:                              # %for.cond.297
                                        # =>This Inner Loop Header: Depth=1
	movl	-48(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2184(%rcx), %eax
	jge	.LBB23_78
# BB#76:                                # %for.body.302
                                        #   in Loop: Header=BB23_75 Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#77:                                # %for.inc.304
                                        #   in Loop: Header=BB23_75 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB23_75
.LBB23_78:                              # %for.end.306
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 344(%rcx)
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
.LBB23_79:                              # %if.end.317
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_81
# BB#80:                                # %lor.lhs.false.323
	movq	-8(%rbp), %rax
	testb	$1, 2172(%rax)
	jne	.LBB23_83
.LBB23_81:                              # %land.lhs.true.327
	movq	-8(%rbp), %rax
	movl	2196(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2168(%rax), %ecx
	jge	.LBB23_83
# BB#82:                                # %if.then.334
	movq	-8(%rbp), %rax
	movl	2196(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2192(%rax)
	jmp	.LBB23_95
.LBB23_83:                              # %if.else.339
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_87
# BB#84:                                # %land.lhs.true.346
	movq	-8(%rbp), %rax
	testb	$1, 2172(%rax)
	je	.LBB23_87
# BB#85:                                # %land.lhs.true.351
	movq	-8(%rbp), %rax
	cmpl	$0, 2192(%rax)
	jle	.LBB23_87
# BB#86:                                # %if.then.356
	movq	-8(%rbp), %rax
	movl	2192(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2196(%rax)
	jmp	.LBB23_94
.LBB23_87:                              # %if.else.361
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_90
# BB#88:                                # %land.lhs.true.371
	movq	-8(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB23_90
# BB#89:                                # %if.then.376
	movq	$-1, -56(%rbp)
	jmp	.LBB23_93
.LBB23_90:                              # %if.else.377
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	cmpq	-56(%rbp), %rax
	jge	.LBB23_92
# BB#91:                                # %if.then.381
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -56(%rbp)
.LBB23_92:                              # %if.end.383
	jmp	.LBB23_93
.LBB23_93:                              # %if.end.384
	movq	-8(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-8(%rbp), %rcx
	movq	336(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movq	344(%rcx), %rdx
	movq	-56(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %r8
	movq	%rax, %rdi
	callq	composition_compute_stop_pos
.LBB23_94:                              # %if.end.393
	jmp	.LBB23_95
.LBB23_95:                              # %if.end.394
	jmp	.LBB23_108
.LBB23_96:                              # %if.else.395
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB23_98
# BB#97:                                # %lor.lhs.false.401
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	4736(%rcx), %rax
	jl	.LBB23_99
.LBB23_98:                              # %if.then.410
	movq	-8(%rbp), %rax
	movslq	2128(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	344(%rcx), %rax
	movq	%rax, 344(%rcx)
	movq	-8(%rbp), %rax
	movq	336(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 336(%rax)
	jmp	.LBB23_107
.LBB23_99:                              # %if.else.421
	movq	-8(%rbp), %rax
	movl	2648(%rax), %ecx
	movl	%ecx, -60(%rbp)
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 344(%rdi)
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 336(%rdi)
	movl	-60(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	2648(%rax), %ecx
	je	.LBB23_106
# BB#100:                               # %if.then.440
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB23_102
# BB#101:                               # %if.then.448
	movq	$-1, -72(%rbp)
	jmp	.LBB23_105
.LBB23_102:                             # %if.else.449
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	cmpq	-72(%rbp), %rax
	jge	.LBB23_104
# BB#103:                               # %if.then.453
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -72(%rbp)
.LBB23_104:                             # %if.end.455
	jmp	.LBB23_105
.LBB23_105:                             # %if.end.456
	movq	-8(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-8(%rbp), %rcx
	movq	336(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movq	344(%rcx), %rdx
	movq	-72(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %r8
	movq	%rax, %rdi
	callq	composition_compute_stop_pos
.LBB23_106:                             # %if.end.465
	jmp	.LBB23_107
.LBB23_107:                             # %if.end.466
	jmp	.LBB23_108
.LBB23_108:                             # %if.end.467
	jmp	.LBB23_109
.LBB23_109:                             # %consider_string_end
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB23_115
# BB#110:                               # %if.then.472
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	SCHARS
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB23_114
# BB#111:                               # %if.then.480
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-33, %cl
	movb	%cl, 88(%rax)
	movq	-8(%rbp), %rdi
	callq	next_overlay_string
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB23_113
# BB#112:                               # %if.then.489
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	setup_for_ellipsis
.LBB23_113:                             # %if.end.490
	jmp	.LBB23_114
.LBB23_114:                             # %if.end.491
	jmp	.LBB23_121
.LBB23_115:                             # %if.else.492
                                        #   in Loop: Header=BB23_109 Depth=1
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	SCHARS
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB23_120
# BB#116:                               # %land.lhs.true.500
                                        #   in Loop: Header=BB23_109 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2088(%rax)
	jle	.LBB23_120
# BB#117:                               # %if.then.503
                                        #   in Loop: Header=BB23_109 Depth=1
	movq	-8(%rbp), %rdi
	callq	pop_it
	movq	-8(%rbp), %rdi
	cmpl	$2, 24(%rdi)
	jne	.LBB23_119
# BB#118:                               # %if.then.507
                                        #   in Loop: Header=BB23_109 Depth=1
	jmp	.LBB23_109
.LBB23_119:                             # %if.end.508
	jmp	.LBB23_120
.LBB23_120:                             # %if.end.509
	jmp	.LBB23_121
.LBB23_121:                             # %if.end.510
	jmp	.LBB23_126
.LBB23_122:                             # %sw.bb.511
	movq	-8(%rbp), %rdi
	callq	pop_it
	movq	-8(%rbp), %rdi
	cmpl	$2, 24(%rdi)
	jne	.LBB23_124
# BB#123:                               # %if.then.515
	jmp	.LBB23_109
.LBB23_124:                             # %if.end.516
	jmp	.LBB23_126
.LBB23_125:                             # %sw.default
	callq	emacs_abort
.LBB23_126:                             # %sw.epilog
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end23:
	.size	set_iterator_to_next, .Lfunc_end23-set_iterator_to_next
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI23_0:
	.quad	.LBB23_1
	.quad	.LBB23_45
	.quad	.LBB23_64
	.quad	.LBB23_40
	.quad	.LBB23_122
	.quad	.LBB23_122
	.quad	.LBB23_122

	.text
	.align	16, 0x90
	.type	string_from_display_spec,@function
string_from_display_spec:               # @string_from_display_spec
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp72:
	.cfi_def_cfa_offset 16
.Ltmp73:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp74:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$3, %eax
	jne	.LBB24_7
# BB#1:                                 # %if.then
	jmp	.LBB24_2
.LBB24_2:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB24_6
# BB#3:                                 # %while.body
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB24_4
	jmp	.LBB24_5
.LBB24_4:                               # %if.then.6
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB24_17
.LBB24_5:                               # %if.end
                                        #   in Loop: Header=BB24_2 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB24_2
.LBB24_6:                               # %while.end
	jmp	.LBB24_16
.LBB24_7:                               # %if.else
	movq	-16(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB24_8
	jmp	.LBB24_15
.LBB24_8:                               # %if.then.11
	movq	$0, -24(%rbp)
.LBB24_9:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	ASIZE
	movq	-32(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jge	.LBB24_14
# BB#10:                                # %for.body
                                        #   in Loop: Header=BB24_9 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	AREF
	movq	%rax, %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB24_11
	jmp	.LBB24_12
.LBB24_11:                              # %if.then.17
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	AREF
	movq	%rax, -8(%rbp)
	jmp	.LBB24_17
.LBB24_12:                              # %if.end.19
                                        #   in Loop: Header=BB24_9 Depth=1
	jmp	.LBB24_13
.LBB24_13:                              # %for.inc
                                        #   in Loop: Header=BB24_9 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB24_9
.LBB24_14:                              # %for.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB24_17
.LBB24_15:                              # %if.end.21
	jmp	.LBB24_16
.LBB24_16:                              # %if.end.22
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB24_17:                              # %return
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end24:
	.size	string_from_display_spec, .Lfunc_end24-string_from_display_spec
	.cfi_endproc

	.align	16, 0x90
	.type	handle_display_spec,@function
handle_display_spec:                    # @handle_display_spec
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp75:
	.cfi_def_cfa_offset 16
.Ltmp76:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp77:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movb	16(%rbp), %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	andb	$1, %al
	movb	%al, -49(%rbp)
	movl	$0, -56(%rbp)
	movq	-16(%rbp), %rcx
	andq	$7, %rcx
	movl	%ecx, %r10d
	cmpl	$3, %r10d
	jne	.LBB25_23
# BB#1:                                 # %land.lhs.true
	movl	$537, %edi              # imm = 0x219
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#2:                                 # %land.lhs.true.4
	movl	$868, %edi              # imm = 0x364
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#3:                                 # %land.lhs.true.10
	movl	$1014, %edi             # imm = 0x3F6
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#4:                                 # %land.lhs.true.16
	movl	$865, %edi              # imm = 0x361
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#5:                                 # %land.lhs.true.22
	movl	$869, %edi              # imm = 0x365
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#6:                                 # %land.lhs.true.28
	movl	$515, %edi              # imm = 0x203
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#7:                                 # %land.lhs.true.34
	movl	$784, %edi              # imm = 0x310
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#8:                                 # %land.lhs.true.40
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB25_10
# BB#9:                                 # %land.lhs.true.47
	movl	$643, %edi              # imm = 0x283
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
.LBB25_10:                              # %land.lhs.true.55
	movl	$608, %edi              # imm = 0x260
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#11:                                # %land.lhs.true.61
	movl	$814, %edi              # imm = 0x32E
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#12:                                # %land.lhs.true.67
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB25_23
# BB#13:                                # %if.then
	jmp	.LBB25_14
.LBB25_14:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB25_22
# BB#15:                                # %for.body
                                        #   in Loop: Header=BB25_14 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %r8
	movq	-48(%rbp), %r9
	movl	-56(%rbp), %r10d
	movb	-49(%rbp), %r11b
	andb	$1, %r11b
	movl	%r10d, (%rsp)
	movzbl	%r11b, %r10d
	movl	%r10d, 8(%rsp)
	callq	handle_single_display_spec
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB25_20
# BB#16:                                # %if.then.82
                                        #   in Loop: Header=BB25_14 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB25_18
# BB#17:                                # %lor.lhs.false
                                        #   in Loop: Header=BB25_14 Depth=1
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB25_18
	jmp	.LBB25_19
.LBB25_18:                              # %if.then.86
	jmp	.LBB25_22
.LBB25_19:                              # %if.end
                                        #   in Loop: Header=BB25_14 Depth=1
	jmp	.LBB25_20
.LBB25_20:                              # %if.end.87
                                        #   in Loop: Header=BB25_14 Depth=1
	jmp	.LBB25_21
.LBB25_21:                              # %for.inc
                                        #   in Loop: Header=BB25_14 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB25_14
.LBB25_22:                              # %for.end
	jmp	.LBB25_36
.LBB25_23:                              # %if.else
	movq	-16(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB25_24
	jmp	.LBB25_34
.LBB25_24:                              # %if.then.90
	movq	$0, -72(%rbp)
.LBB25_25:                              # %for.cond.91
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	ASIZE
	movq	-176(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jge	.LBB25_33
# BB#26:                                # %for.body.95
                                        #   in Loop: Header=BB25_25 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	-72(%rbp), %rsi
	movq	%rdi, -184(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	AREF
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %r8
	movq	-48(%rbp), %r9
	movl	-56(%rbp), %r10d
	movb	-49(%rbp), %r11b
	andb	$1, %r11b
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	movl	%r10d, (%rsp)
	movzbl	%r11b, %r10d
	movl	%r10d, 8(%rsp)
	callq	handle_single_display_spec
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	je	.LBB25_31
# BB#27:                                # %if.then.102
                                        #   in Loop: Header=BB25_25 Depth=1
	movl	-76(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB25_29
# BB#28:                                # %lor.lhs.false.104
                                        #   in Loop: Header=BB25_25 Depth=1
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB25_29
	jmp	.LBB25_30
.LBB25_29:                              # %if.then.107
	jmp	.LBB25_33
.LBB25_30:                              # %if.end.108
                                        #   in Loop: Header=BB25_25 Depth=1
	jmp	.LBB25_31
.LBB25_31:                              # %if.end.109
                                        #   in Loop: Header=BB25_25 Depth=1
	jmp	.LBB25_32
.LBB25_32:                              # %for.inc.110
                                        #   in Loop: Header=BB25_25 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB25_25
.LBB25_33:                              # %for.end.111
	jmp	.LBB25_35
.LBB25_34:                              # %if.else.112
	xorl	%eax, %eax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %r8
	movq	-48(%rbp), %r9
	movb	-49(%rbp), %r10b
	andb	$1, %r10b
	movl	$0, (%rsp)
	movzbl	%r10b, %r11d
	movl	%r11d, 8(%rsp)
	movl	%eax, -188(%rbp)        # 4-byte Spill
	callq	handle_single_display_spec
	movl	%eax, -56(%rbp)
.LBB25_35:                              # %if.end.115
	jmp	.LBB25_36
.LBB25_36:                              # %if.end.116
	movl	-56(%rbp), %eax
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end25:
	.size	handle_display_spec, .Lfunc_end25-handle_display_spec
	.cfi_endproc

	.align	16, 0x90
	.type	move_it_in_display_line_to,@function
move_it_in_display_line_to:             # @move_it_in_display_line_to
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp78:
	.cfi_def_cfa_offset 16
.Ltmp79:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp80:
	.cfi_def_cfa_register %rbp
	subq	$19472, %rsp            # imm = 0x4C10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -19248(%rbp)
	movq	$0, -19256(%rbp)
	movq	$0, -19264(%rbp)
	movq	$0, -19272(%rbp)
	movb	$0, -19273(%rbp)
	movq	-8(%rbp), %rsi
	movl	24(%rsi), %ecx
	movl	%ecx, -19280(%rbp)
	movq	-8(%rbp), %rsi
	movq	312(%rsi), %rsi
	movq	%rsi, -19296(%rbp)
	movq	-19296(%rbp), %rsi
	cmpq	-16(%rbp), %rsi
	setl	%al
	andb	$1, %al
	movb	%al, -19297(%rbp)
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movq	%rsi, -40(%rbp)
	movq	-8(%rbp), %rsi
	movq	$0, 2352(%rsi)
	movl	$-1, -2752(%rbp)
	movl	$-1, -7552(%rbp)
	movl	$-1, -12352(%rbp)
	movq	-8(%rbp), %rsi
	movl	2456(%rsi), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_10
# BB#1:                                 # %if.then
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_8
# BB#2:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB26_8
# BB#3:                                 # %if.then.8
	jmp	.LBB26_4
.LBB26_4:                               # %do.body
	cmpq	$0, -19272(%rbp)
	je	.LBB26_6
# BB#5:                                 # %if.then.10
	movl	$1, %esi
	movq	-19272(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_6:                               # %if.end
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-19240(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19272(%rbp)
# BB#7:                                 # %do.end
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -19288(%rbp)
	jmp	.LBB26_9
.LBB26_8:                               # %if.else
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -19288(%rbp)
.LBB26_9:                               # %if.end.14
	jmp	.LBB26_10
.LBB26_10:                              # %if.end.15
	movq	-8(%rbp), %rax
	cmpl	$0, 2444(%rax)
	jne	.LBB26_14
# BB#11:                                # %land.lhs.true.17
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB26_14
# BB#12:                                # %land.lhs.true.20
	movq	-8(%rbp), %rax
	movl	2432(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2324(%rax), %ecx
	jge	.LBB26_14
# BB#13:                                # %if.then.22
	movq	-8(%rbp), %rdi
	callq	handle_line_prefix
.LBB26_14:                              # %if.end.23
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	this_line_min_pos, %rax
	jge	.LBB26_16
# BB#15:                                # %if.then.28
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, this_line_min_pos
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, this_line_min_pos+8
.LBB26_16:                              # %if.end.34
	jmp	.LBB26_17
.LBB26_17:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_127 Depth 2
	movl	$0, -19312(%rbp)
	movl	$0, -19316(%rbp)
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_43
# BB#18:                                # %land.lhs.true.37
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_19
	jmp	.LBB26_43
.LBB26_19:                              # %land.lhs.true.39
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB26_43
# BB#20:                                # %land.lhs.true.42
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_22
# BB#21:                                # %lor.lhs.false
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_23
.LBB26_22:                              # %land.lhs.true.52
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_31
.LBB26_23:                              # %lor.lhs.false.58
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_43
# BB#24:                                # %land.lhs.true.65
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$4, -19280(%rbp)
	je	.LBB26_27
# BB#25:                                # %lor.lhs.false.68
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$5, -19280(%rbp)
	je	.LBB26_27
# BB#26:                                # %lor.lhs.false.71
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$2, -19280(%rbp)
	jne	.LBB26_43
.LBB26_27:                              # %land.lhs.true.74
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-19296(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_29
# BB#28:                                # %land.lhs.true.77
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_31
.LBB26_29:                              # %lor.lhs.false.83
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-19296(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_43
# BB#30:                                # %land.lhs.true.86
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_43
.LBB26_31:                              # %if.then.92
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_33
# BB#32:                                # %lor.lhs.false.95
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -2752(%rbp)
	jge	.LBB26_34
.LBB26_33:                              # %if.then.99
	movl	$1, -28(%rbp)
	jmp	.LBB26_506
.LBB26_34:                              # %if.else.100
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_41
# BB#35:                                # %land.lhs.true.104
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -7552(%rbp)
	jge	.LBB26_41
# BB#36:                                # %if.then.108
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_37
.LBB26_37:                              # %do.body.109
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpq	$0, -19256(%rbp)
	je	.LBB26_39
# BB#38:                                # %if.then.111
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_39:                              # %if.end.112
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9640(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19256(%rbp)
# BB#40:                                # %do.end.114
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_41
.LBB26_41:                              # %if.end.115
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_42
.LBB26_42:                              # %if.end.116
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_43
.LBB26_43:                              # %if.end.117
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB26_45
# BB#44:                                # %if.then.119
	movl	$1, -28(%rbp)
	jmp	.LBB26_506
.LBB26_45:                              # %if.end.120
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB26_62
# BB#46:                                # %if.then.124
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_61
# BB#47:                                # %land.lhs.true.128
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_48
	jmp	.LBB26_61
.LBB26_48:                              # %land.lhs.true.132
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_57
# BB#49:                                # %lor.lhs.false.138
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_51
# BB#50:                                # %lor.lhs.false.144
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_52
.LBB26_51:                              # %land.lhs.true.155
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_57
.LBB26_52:                              # %lor.lhs.false.161
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_61
# BB#53:                                # %land.lhs.true.164
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_55
# BB#54:                                # %land.lhs.true.170
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_57
.LBB26_55:                              # %lor.lhs.false.174
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_61
# BB#56:                                # %land.lhs.true.180
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_61
.LBB26_57:                              # %land.lhs.true.185
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_60
# BB#58:                                # %lor.lhs.false.189
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_61
# BB#59:                                # %land.lhs.true.193
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jb	.LBB26_61
.LBB26_60:                              # %if.then.198
	movl	$1, -28(%rbp)
	jmp	.LBB26_506
.LBB26_61:                              # %if.end.199
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_104
.LBB26_62:                              # %if.else.200
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_103
# BB#63:                                # %land.lhs.true.204
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2360(%rax)
	jne	.LBB26_103
# BB#64:                                # %if.then.207
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB26_67
# BB#65:                                # %land.lhs.true.211
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$32, 2124(%rax)
	je	.LBB26_82
# BB#66:                                # %lor.lhs.false.214
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$9, 2124(%rax)
	je	.LBB26_82
.LBB26_67:                              # %lor.lhs.false.218
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB26_68
	jmp	.LBB26_70
.LBB26_68:                              # %land.lhs.true.221
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$32, %ecx
	je	.LBB26_82
# BB#69:                                # %lor.lhs.false.229
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$9, %ecx
	je	.LBB26_82
.LBB26_70:                              # %lor.lhs.false.238
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB26_73
# BB#71:                                # %land.lhs.true.240
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB26_82
# BB#72:                                # %lor.lhs.false.249
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$9, %edx
	je	.LBB26_82
.LBB26_73:                              # %lor.lhs.false.258
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	776(%rcx), %rax
	jge	.LBB26_83
# BB#74:                                # %land.lhs.true.264
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB26_76
# BB#75:                                # %cond.true
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -19344(%rbp)      # 8-byte Spill
	jmp	.LBB26_77
.LBB26_76:                              # %cond.false
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -19344(%rbp)      # 8-byte Spill
	jmp	.LBB26_77
.LBB26_77:                              # %cond.end
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-19344(%rbp), %rax      # 8-byte Reload
	movq	-8(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB26_82
# BB#78:                                # %lor.lhs.false.280
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB26_80
# BB#79:                                # %cond.true.288
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -19352(%rbp)      # 8-byte Spill
	jmp	.LBB26_81
.LBB26_80:                              # %cond.false.291
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -19352(%rbp)      # 8-byte Spill
	jmp	.LBB26_81
.LBB26_81:                              # %cond.end.292
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-19352(%rbp), %rax      # 8-byte Reload
	movq	-8(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$9, %edx
	jne	.LBB26_83
.LBB26_82:                              # %if.then.305
                                        #   in Loop: Header=BB26_17 Depth=1
	movb	$1, -19273(%rbp)
	jmp	.LBB26_102
.LBB26_83:                              # %if.else.306
                                        #   in Loop: Header=BB26_17 Depth=1
	testb	$1, -19273(%rbp)
	je	.LBB26_101
# BB#84:                                # %if.then.308
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -7552(%rbp)
	jl	.LBB26_90
# BB#85:                                # %if.then.312
	jmp	.LBB26_86
.LBB26_86:                              # %do.body.313
	leaq	-9640(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_88
# BB#87:                                # %if.then.316
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9640(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_88:                              # %if.end.317
	xorl	%esi, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19256(%rbp)
# BB#89:                                # %do.end.318
	movl	$1, -28(%rbp)
	jmp	.LBB26_520
.LBB26_90:                              # %if.end.319
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -12352(%rbp)
	jl	.LBB26_96
# BB#91:                                # %if.then.323
	jmp	.LBB26_92
.LBB26_92:                              # %do.body.324
	leaq	-14440(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_94
# BB#93:                                # %if.then.327
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-14440(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_94:                              # %if.end.328
	xorl	%esi, %esi
	movq	-19264(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19264(%rbp)
# BB#95:                                # %do.end.329
	movl	$2, -28(%rbp)
	jmp	.LBB26_520
.LBB26_96:                              # %if.end.330
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_97
.LBB26_97:                              # %do.body.331
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpq	$0, -19248(%rbp)
	je	.LBB26_99
# BB#98:                                # %if.then.333
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, %esi
	movq	-19248(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_99:                              # %if.end.334
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4840(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19248(%rbp)
# BB#100:                               # %do.end.336
                                        #   in Loop: Header=BB26_17 Depth=1
	movb	$0, -19273(%rbp)
.LBB26_101:                             # %if.end.337
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_102
.LBB26_102:                             # %if.end.338
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_103
.LBB26_103:                             # %if.end.339
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_104
.LBB26_104:                             # %if.end.340
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -19312(%rbp)
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -19316(%rbp)
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -19304(%rbp)
# BB#105:                               # %do.body.341
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB26_108
# BB#106:                               # %land.lhs.true.345
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_108
# BB#107:                               # %if.then.352
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB26_108:                             # %if.end.360
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB26_110
# BB#109:                               # %if.then.363
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	jmp	.LBB26_111
.LBB26_110:                             # %if.else.367
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rdi
	callq	produce_glyphs
.LBB26_111:                             # %if.end.368
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB26_113
# BB#112:                               # %if.then.372
                                        #   in Loop: Header=BB26_17 Depth=1
	movb	$1, globals+3391
.LBB26_113:                             # %if.end.373
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_114
.LBB26_114:                             # %do.end.374
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2360(%rax)
	je	.LBB26_125
# BB#115:                               # %if.then.378
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, -19280(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB26_117
# BB#116:                               # %if.then.383
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -19296(%rbp)
.LBB26_117:                             # %if.end.387
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	cmpq	this_line_min_pos, %rdi
	jge	.LBB26_119
# BB#118:                               # %if.then.393
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, this_line_min_pos
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, this_line_min_pos+8
.LBB26_119:                             # %if.end.400
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_124
# BB#120:                               # %land.lhs.true.407
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_124
# BB#121:                               # %land.lhs.true.410
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_124
# BB#122:                               # %land.lhs.true.416
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-19288(%rbp), %rax
	jge	.LBB26_124
# BB#123:                               # %if.then.422
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -19288(%rbp)
.LBB26_124:                             # %if.end.426
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_17
.LBB26_125:                             # %if.end.427
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2364(%rax)
	je	.LBB26_355
# BB#126:                               # %if.then.429
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2368(%rax), %eax
	movq	-8(%rbp), %rcx
	cltd
	idivl	2364(%rcx)
	movl	%eax, -19320(%rbp)
	movl	-19304(%rbp), %eax
	movl	%eax, -19328(%rbp)
	movq	-8(%rbp), %rcx
	movl	2444(%rcx), %eax
	movl	%eax, -19332(%rbp)
	movl	$0, -19308(%rbp)
.LBB26_127:                             # %for.cond
                                        #   Parent Loop BB26_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-19308(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2364(%rcx), %eax
	jge	.LBB26_352
# BB#128:                               # %for.body
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19304(%rbp), %eax
	addl	-19320(%rbp), %eax
	movl	%eax, -19324(%rbp)
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB26_165
# BB#129:                               # %land.lhs.true.438
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19324(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB26_165
# BB#130:                               # %if.then.441
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_154
# BB#131:                               # %land.lhs.true.445
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_132
	jmp	.LBB26_154
.LBB26_132:                             # %land.lhs.true.449
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_141
# BB#133:                               # %lor.lhs.false.455
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_135
# BB#134:                               # %lor.lhs.false.461
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_136
.LBB26_135:                             # %land.lhs.true.472
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_141
.LBB26_136:                             # %lor.lhs.false.478
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_154
# BB#137:                               # %land.lhs.true.482
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_139
# BB#138:                               # %land.lhs.true.488
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_141
.LBB26_139:                             # %lor.lhs.false.493
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_154
# BB#140:                               # %land.lhs.true.499
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_154
.LBB26_141:                             # %land.lhs.true.504
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_144
# BB#142:                               # %lor.lhs.false.508
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_154
# BB#143:                               # %land.lhs.true.512
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jb	.LBB26_154
.LBB26_144:                             # %if.then.522
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_146
# BB#145:                               # %lor.lhs.false.526
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpl	$0, -2752(%rbp)
	jge	.LBB26_147
.LBB26_146:                             # %if.then.530
	jmp	.LBB26_370
.LBB26_147:                             # %if.end.531
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpl	$0, -7552(%rbp)
	jge	.LBB26_153
# BB#148:                               # %if.then.535
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_149
.LBB26_149:                             # %do.body.536
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpq	$0, -19256(%rbp)
	je	.LBB26_151
# BB#150:                               # %if.then.538
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	$1, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_151:                             # %if.end.539
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9640(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19256(%rbp)
# BB#152:                               # %do.end.541
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19304(%rbp), %eax
	movl	%eax, -7236(%rbp)
	movl	-19312(%rbp), %eax
	movl	%eax, -7260(%rbp)
	movl	-19316(%rbp), %eax
	movl	%eax, -7256(%rbp)
.LBB26_153:                             # %if.end.545
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_164
.LBB26_154:                             # %if.else.546
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_156
# BB#155:                               # %lor.lhs.false.550
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpl	$0, -2752(%rbp)
	jge	.LBB26_157
.LBB26_156:                             # %if.then.554
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19304(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movl	$2, -28(%rbp)
	jmp	.LBB26_352
.LBB26_157:                             # %if.end.556
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpl	$0, -12352(%rbp)
	jge	.LBB26_163
# BB#158:                               # %if.then.560
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_159
.LBB26_159:                             # %do.body.561
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpq	$0, -19264(%rbp)
	je	.LBB26_161
# BB#160:                               # %if.then.563
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	$1, %esi
	movq	-19264(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_161:                             # %if.end.564
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-14440(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19264(%rbp)
# BB#162:                               # %do.end.566
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19304(%rbp), %eax
	movl	%eax, -12036(%rbp)
	movl	-19312(%rbp), %eax
	movl	%eax, -12060(%rbp)
	movl	-19316(%rbp), %eax
	movl	%eax, -12056(%rbp)
.LBB26_163:                             # %if.end.570
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_164
.LBB26_164:                             # %if.end.571
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_165
.LBB26_165:                             # %if.end.572
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	je	.LBB26_323
# BB#166:                               # %land.lhs.true.576
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19324(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jg	.LBB26_177
# BB#167:                               # %lor.lhs.false.579
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19324(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jne	.LBB26_323
# BB#168:                               # %land.lhs.true.583
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_323
# BB#169:                               # %land.lhs.true.591
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_174
# BB#170:                               # %land.lhs.true.598
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_174
# BB#171:                               # %cond.true.603
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_173
# BB#172:                               # %cond.true.606
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jne	.LBB26_177
	jmp	.LBB26_323
.LBB26_173:                             # %cond.false.610
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 344(%rax)
	jne	.LBB26_177
	jmp	.LBB26_323
.LBB26_174:                             # %cond.false.614
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_176
# BB#175:                               # %cond.true.618
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jne	.LBB26_177
	jmp	.LBB26_323
.LBB26_176:                             # %cond.false.622
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 348(%rax)
	je	.LBB26_323
.LBB26_177:                             # %if.then.628
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2444(%rax)
	je	.LBB26_180
# BB#178:                               # %lor.lhs.false.632
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19324(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jne	.LBB26_292
# BB#179:                               # %land.lhs.true.636
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_292
.LBB26_180:                             # %if.then.645
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2444(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2444(%rax)
	movl	-19324(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2404(%rax)
	movl	-19308(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	2364(%rax), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jne	.LBB26_291
# BB#181:                               # %if.then.652
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_219
# BB#182:                               # %land.lhs.true.656
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_183
	jmp	.LBB26_219
.LBB26_183:                             # %land.lhs.true.660
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_192
# BB#184:                               # %lor.lhs.false.666
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_186
# BB#185:                               # %lor.lhs.false.672
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_187
.LBB26_186:                             # %land.lhs.true.683
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_192
.LBB26_187:                             # %lor.lhs.false.689
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_219
# BB#188:                               # %land.lhs.true.693
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_190
# BB#189:                               # %land.lhs.true.699
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_192
.LBB26_190:                             # %lor.lhs.false.704
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_219
# BB#191:                               # %land.lhs.true.710
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_219
.LBB26_192:                             # %land.lhs.true.715
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_195
# BB#193:                               # %lor.lhs.false.719
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_219
# BB#194:                               # %land.lhs.true.723
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jb	.LBB26_219
.LBB26_195:                             # %if.then.733
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_210
# BB#196:                               # %lor.lhs.false.737
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -2752(%rbp)
	jl	.LBB26_210
# BB#197:                               # %lor.lhs.false.741
                                        #   in Loop: Header=BB26_17 Depth=1
	testb	$1, -19273(%rbp)
	je	.LBB26_211
# BB#198:                               # %land.lhs.true.744
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -19360(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-19360(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB26_211
# BB#199:                               # %land.lhs.true.748
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_211
# BB#200:                               # %land.lhs.true.757
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_205
# BB#201:                               # %cond.true.762
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_203
# BB#202:                               # %cond.true.767
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19364(%rbp)      # 4-byte Spill
	jmp	.LBB26_204
.LBB26_203:                             # %cond.false.770
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19364(%rbp)      # 4-byte Spill
.LBB26_204:                             # %cond.end.775
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19364(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB26_209
	jmp	.LBB26_211
.LBB26_205:                             # %cond.false.779
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_207
# BB#206:                               # %cond.true.784
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19368(%rbp)      # 4-byte Spill
	jmp	.LBB26_208
.LBB26_207:                             # %cond.false.787
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19368(%rbp)      # 4-byte Spill
.LBB26_208:                             # %cond.end.792
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19368(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB26_211
.LBB26_209:                             # %land.lhs.true.796
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB26_211
.LBB26_210:                             # %if.then.801
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19332(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2444(%rcx)
	movl	-19328(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movl	$1, -28(%rbp)
	jmp	.LBB26_352
.LBB26_211:                             # %if.end.804
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_218
# BB#212:                               # %land.lhs.true.808
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -7552(%rbp)
	jge	.LBB26_218
# BB#213:                               # %if.then.812
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_214
.LBB26_214:                             # %do.body.813
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpq	$0, -19256(%rbp)
	je	.LBB26_216
# BB#215:                               # %if.then.815
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_216:                             # %if.end.816
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9640(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19256(%rbp)
# BB#217:                               # %do.end.818
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19328(%rbp), %eax
	movl	%eax, -7236(%rbp)
	movl	-19332(%rbp), %eax
	movl	%eax, -7196(%rbp)
.LBB26_218:                             # %if.end.821
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_219
.LBB26_219:                             # %if.end.822
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, -19280(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB26_221
# BB#220:                               # %if.then.827
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -19296(%rbp)
.LBB26_221:                             # %if.end.831
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	cmpq	this_line_min_pos, %rdi
	jge	.LBB26_223
# BB#222:                               # %if.then.837
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, this_line_min_pos
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, this_line_min_pos+8
.LBB26_223:                             # %if.end.844
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_247
# BB#224:                               # %lor.lhs.false.853
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_230
# BB#225:                               # %land.lhs.true.860
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_230
# BB#226:                               # %cond.true.865
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_228
# BB#227:                               # %cond.true.870
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19372(%rbp)      # 4-byte Spill
	jmp	.LBB26_229
.LBB26_228:                             # %cond.false.873
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19372(%rbp)      # 4-byte Spill
.LBB26_229:                             # %cond.end.878
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19372(%rbp), %eax      # 4-byte Reload
	movl	%eax, -19376(%rbp)      # 4-byte Spill
	jmp	.LBB26_234
.LBB26_230:                             # %cond.false.880
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_232
# BB#231:                               # %cond.true.885
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19380(%rbp)      # 4-byte Spill
	jmp	.LBB26_233
.LBB26_232:                             # %cond.false.888
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19380(%rbp)      # 4-byte Spill
.LBB26_233:                             # %cond.end.893
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19380(%rbp), %eax      # 4-byte Reload
	movl	%eax, -19376(%rbp)      # 4-byte Spill
.LBB26_234:                             # %cond.end.895
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19376(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB26_247
# BB#235:                               # %lor.lhs.false.899
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -19392(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-19392(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB26_290
# BB#236:                               # %land.lhs.true.903
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_290
# BB#237:                               # %land.lhs.true.912
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_242
# BB#238:                               # %cond.true.917
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_240
# BB#239:                               # %cond.true.922
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19396(%rbp)      # 4-byte Spill
	jmp	.LBB26_241
.LBB26_240:                             # %cond.false.925
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19396(%rbp)      # 4-byte Spill
.LBB26_241:                             # %cond.end.930
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19396(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB26_246
	jmp	.LBB26_290
.LBB26_242:                             # %cond.false.934
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_244
# BB#243:                               # %cond.true.939
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19400(%rbp)      # 4-byte Spill
	jmp	.LBB26_245
.LBB26_244:                             # %cond.false.942
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19400(%rbp)      # 4-byte Spill
.LBB26_245:                             # %cond.end.947
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19400(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB26_290
.LBB26_246:                             # %land.lhs.true.951
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB26_290
.LBB26_247:                             # %if.then.956
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB26_249
# BB#248:                               # %if.then.958
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, -28(%rbp)
	jmp	.LBB26_352
.LBB26_249:                             # %if.end.959
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_270
# BB#250:                               # %land.lhs.true.963
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_251
	jmp	.LBB26_270
.LBB26_251:                             # %land.lhs.true.967
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_260
# BB#252:                               # %lor.lhs.false.973
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_254
# BB#253:                               # %lor.lhs.false.979
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_255
.LBB26_254:                             # %land.lhs.true.990
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_260
.LBB26_255:                             # %lor.lhs.false.996
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_270
# BB#256:                               # %land.lhs.true.1000
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_258
# BB#257:                               # %land.lhs.true.1006
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_260
.LBB26_258:                             # %lor.lhs.false.1011
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_270
# BB#259:                               # %land.lhs.true.1017
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_270
.LBB26_260:                             # %land.lhs.true.1022
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_263
# BB#261:                               # %lor.lhs.false.1026
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_270
# BB#262:                               # %land.lhs.true.1030
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jb	.LBB26_270
.LBB26_263:                             # %if.then.1040
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB26_268
# BB#264:                               # %land.lhs.true.1044
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB26_267
# BB#265:                               # %lor.lhs.false.1048
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB26_268
# BB#266:                               # %land.lhs.true.1052
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB26_268
.LBB26_267:                             # %if.then.1054
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, -28(%rbp)
	jmp	.LBB26_269
.LBB26_268:                             # %if.else.1055
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$3, -28(%rbp)
.LBB26_269:                             # %if.end.1056
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_352
.LBB26_270:                             # %if.end.1057
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB26_289
# BB#271:                               # %land.lhs.true.1061
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB26_274
# BB#272:                               # %lor.lhs.false.1065
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB26_289
# BB#273:                               # %land.lhs.true.1069
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB26_289
.LBB26_274:                             # %land.lhs.true.1072
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_288
# BB#275:                               # %lor.lhs.false.1076
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -2752(%rbp)
	jl	.LBB26_288
# BB#276:                               # %lor.lhs.false.1080
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -19408(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-19408(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB26_289
# BB#277:                               # %land.lhs.true.1084
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_289
# BB#278:                               # %land.lhs.true.1093
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_283
# BB#279:                               # %cond.true.1098
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_281
# BB#280:                               # %cond.true.1103
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19412(%rbp)      # 4-byte Spill
	jmp	.LBB26_282
.LBB26_281:                             # %cond.false.1106
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19412(%rbp)      # 4-byte Spill
.LBB26_282:                             # %cond.end.1111
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19412(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB26_287
	jmp	.LBB26_289
.LBB26_283:                             # %cond.false.1115
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_285
# BB#284:                               # %cond.true.1120
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19416(%rbp)      # 4-byte Spill
	jmp	.LBB26_286
.LBB26_285:                             # %cond.false.1123
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19416(%rbp)      # 4-byte Spill
.LBB26_286:                             # %cond.end.1128
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19416(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB26_289
.LBB26_287:                             # %land.lhs.true.1132
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB26_289
.LBB26_288:                             # %if.then.1137
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$5, -28(%rbp)
	jmp	.LBB26_352
.LBB26_289:                             # %if.end.1138
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_290
.LBB26_290:                             # %if.end.1139
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_291
.LBB26_291:                             # %if.end.1140
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_293
.LBB26_292:                             # %if.else.1141
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19304(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movl	-19312(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2380(%rcx)
	movl	-19316(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2384(%rcx)
.LBB26_293:                             # %if.end.1145
                                        #   in Loop: Header=BB26_17 Depth=1
	testb	$1, -19273(%rbp)
	je	.LBB26_315
# BB#294:                               # %land.lhs.true.1148
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -19424(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-19424(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB26_315
# BB#295:                               # %land.lhs.true.1152
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_315
# BB#296:                               # %land.lhs.true.1161
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_301
# BB#297:                               # %cond.true.1166
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_299
# BB#298:                               # %cond.true.1171
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19428(%rbp)      # 4-byte Spill
	jmp	.LBB26_300
.LBB26_299:                             # %cond.false.1174
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19428(%rbp)      # 4-byte Spill
.LBB26_300:                             # %cond.end.1179
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19428(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB26_305
	jmp	.LBB26_315
.LBB26_301:                             # %cond.false.1183
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_303
# BB#302:                               # %cond.true.1188
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19432(%rbp)      # 4-byte Spill
	jmp	.LBB26_304
.LBB26_303:                             # %cond.false.1191
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19432(%rbp)      # 4-byte Spill
.LBB26_304:                             # %cond.end.1196
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19432(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB26_315
.LBB26_305:                             # %land.lhs.true.1200
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB26_315
# BB#306:                               # %if.then.1205
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB26_314
# BB#307:                               # %land.lhs.true.1208
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-19324(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jne	.LBB26_314
# BB#308:                               # %land.lhs.true.1212
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -12352(%rbp)
	jl	.LBB26_314
# BB#309:                               # %if.then.1216
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_310
.LBB26_310:                             # %do.body.1217
                                        #   in Loop: Header=BB26_17 Depth=1
	leaq	-14440(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_312
# BB#311:                               # %if.then.1220
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-14440(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_312:                             # %if.end.1221
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%esi, %esi
	movq	-19264(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19264(%rbp)
# BB#313:                               # %do.end.1222
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$-1, -7552(%rbp)
	movl	$-1, -12352(%rbp)
	movl	$2, -28(%rbp)
	jmp	.LBB26_352
.LBB26_314:                             # %if.end.1225
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_322
.LBB26_315:                             # %if.else.1226
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -2752(%rbp)
	jl	.LBB26_321
# BB#316:                               # %if.then.1230
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_317
.LBB26_317:                             # %do.body.1231
                                        #   in Loop: Header=BB26_17 Depth=1
	leaq	-4840(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_319
# BB#318:                               # %if.then.1234
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4840(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_319:                             # %if.end.1235
                                        #   in Loop: Header=BB26_17 Depth=1
	xorl	%esi, %esi
	movq	-19248(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19248(%rbp)
# BB#320:                               # %do.end.1236
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$-1, -7552(%rbp)
	movl	$-1, -12352(%rbp)
.LBB26_321:                             # %if.end.1239
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_322
.LBB26_322:                             # %if.end.1240
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$3, -28(%rbp)
	jmp	.LBB26_352
.LBB26_323:                             # %if.end.1241
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_348
# BB#324:                               # %land.lhs.true.1245
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_325
	jmp	.LBB26_348
.LBB26_325:                             # %land.lhs.true.1249
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_334
# BB#326:                               # %lor.lhs.false.1255
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_328
# BB#327:                               # %lor.lhs.false.1261
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_329
.LBB26_328:                             # %land.lhs.true.1272
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_334
.LBB26_329:                             # %lor.lhs.false.1278
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_348
# BB#330:                               # %land.lhs.true.1282
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_332
# BB#331:                               # %land.lhs.true.1288
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_334
.LBB26_332:                             # %lor.lhs.false.1293
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_348
# BB#333:                               # %land.lhs.true.1299
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_348
.LBB26_334:                             # %land.lhs.true.1304
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_337
# BB#335:                               # %lor.lhs.false.1308
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_348
# BB#336:                               # %land.lhs.true.1312
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jb	.LBB26_348
.LBB26_337:                             # %if.then.1322
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_339
# BB#338:                               # %lor.lhs.false.1326
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpl	$0, -2752(%rbp)
	jge	.LBB26_340
.LBB26_339:                             # %if.then.1330
	jmp	.LBB26_370
.LBB26_340:                             # %if.end.1331
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_347
# BB#341:                               # %land.lhs.true.1335
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpl	$0, -7552(%rbp)
	jge	.LBB26_347
# BB#342:                               # %if.then.1339
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_343
.LBB26_343:                             # %do.body.1340
                                        #   in Loop: Header=BB26_127 Depth=2
	cmpq	$0, -19256(%rbp)
	je	.LBB26_345
# BB#344:                               # %if.then.1342
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	$1, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_345:                             # %if.end.1343
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9640(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -19256(%rbp)
# BB#346:                               # %do.end.1345
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19304(%rbp), %eax
	movl	%eax, -7236(%rbp)
	movl	-19312(%rbp), %eax
	movl	%eax, -7260(%rbp)
	movl	-19316(%rbp), %eax
	movl	%eax, -7256(%rbp)
.LBB26_347:                             # %if.end.1349
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_348
.LBB26_348:                             # %if.end.1350
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19324(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2316(%rcx), %eax
	jle	.LBB26_350
# BB#349:                               # %if.then.1353
                                        #   in Loop: Header=BB26_127 Depth=2
	movq	-8(%rbp), %rax
	movl	2444(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2444(%rax)
.LBB26_350:                             # %if.end.1356
                                        #   in Loop: Header=BB26_127 Depth=2
	jmp	.LBB26_351
.LBB26_351:                             # %for.inc
                                        #   in Loop: Header=BB26_127 Depth=2
	movl	-19308(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -19308(%rbp)
	movl	-19324(%rbp), %eax
	movl	%eax, -19304(%rbp)
	jmp	.LBB26_127
.LBB26_352:                             # %for.end
                                        #   in Loop: Header=BB26_17 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB26_354
# BB#353:                               # %if.then.1360
	jmp	.LBB26_506
.LBB26_354:                             # %if.end.1361
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_376
.LBB26_355:                             # %if.else.1362
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_371
# BB#356:                               # %land.lhs.true.1366
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_357
	jmp	.LBB26_371
.LBB26_357:                             # %land.lhs.true.1370
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_366
# BB#358:                               # %lor.lhs.false.1376
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_360
# BB#359:                               # %lor.lhs.false.1382
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_361
.LBB26_360:                             # %land.lhs.true.1393
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_366
.LBB26_361:                             # %lor.lhs.false.1399
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_371
# BB#362:                               # %land.lhs.true.1403
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_364
# BB#363:                               # %land.lhs.true.1409
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_366
.LBB26_364:                             # %lor.lhs.false.1414
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_371
# BB#365:                               # %land.lhs.true.1420
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_371
.LBB26_366:                             # %land.lhs.true.1425
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_369
# BB#367:                               # %lor.lhs.false.1429
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_371
# BB#368:                               # %land.lhs.true.1433
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jb	.LBB26_371
.LBB26_369:                             # %if.then.1443
	jmp	.LBB26_370
.LBB26_370:                             # %buffer_pos_reached
	movl	-19304(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movl	-19312(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2380(%rcx)
	movl	-19316(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2384(%rcx)
	movl	$1, -28(%rbp)
	jmp	.LBB26_506
.LBB26_371:                             # %if.else.1447
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB26_374
# BB#372:                               # %land.lhs.true.1450
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	cmpl	-20(%rbp), %ecx
	jl	.LBB26_374
# BB#373:                               # %if.then.1454
	movl	$2, -28(%rbp)
	jmp	.LBB26_506
.LBB26_374:                             # %if.end.1455
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_375
.LBB26_375:                             # %if.end.1456
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_376
.LBB26_376:                             # %if.end.1457
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB26_403
# BB#377:                               # %land.lhs.true.1461
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB26_380
# BB#378:                               # %lor.lhs.false.1465
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB26_403
# BB#379:                               # %land.lhs.true.1469
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB26_403
.LBB26_380:                             # %if.then.1472
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_401
# BB#381:                               # %land.lhs.true.1479
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_401
# BB#382:                               # %if.then.1483
	testb	$1, -19297(%rbp)
	jne	.LBB26_394
# BB#383:                               # %land.lhs.true.1485
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_394
# BB#384:                               # %if.then.1491
	movq	-19288(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB26_392
# BB#385:                               # %if.then.1495
	jmp	.LBB26_386
.LBB26_386:                             # %do.body.1496
	leaq	-19240(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_388
# BB#387:                               # %if.then.1499
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-19240(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_388:                             # %if.end.1500
	xorl	%esi, %esi
	movq	-19272(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19272(%rbp)
# BB#389:                               # %do.end.1501
	movq	-19288(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_391
# BB#390:                               # %if.then.1504
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movq	-8(%rbp), %rdi
	movq	-19288(%rbp), %rsi
	callq	move_it_in_display_line_to
	movl	%eax, -19436(%rbp)      # 4-byte Spill
.LBB26_391:                             # %if.end.1506
	movl	$1, -28(%rbp)
	jmp	.LBB26_393
.LBB26_392:                             # %if.else.1507
	jmp	.LBB26_370
.LBB26_393:                             # %if.end.1508
	jmp	.LBB26_400
.LBB26_394:                             # %if.else.1509
	movq	-8(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB26_398
# BB#395:                               # %land.lhs.true.1513
	cmpl	$0, -7552(%rbp)
	jl	.LBB26_398
# BB#396:                               # %land.lhs.true.1517
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_398
# BB#397:                               # %if.then.1523
	jmp	.LBB26_370
.LBB26_398:                             # %if.else.1524
	movl	$5, -28(%rbp)
# BB#399:                               # %if.end.1525
	jmp	.LBB26_400
.LBB26_400:                             # %if.end.1526
	jmp	.LBB26_402
.LBB26_401:                             # %if.else.1527
	movl	$5, -28(%rbp)
.LBB26_402:                             # %if.end.1528
	jmp	.LBB26_506
.LBB26_403:                             # %if.end.1529
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, -19280(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB26_405
# BB#404:                               # %if.then.1534
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -19296(%rbp)
.LBB26_405:                             # %if.end.1538
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	cmpq	this_line_min_pos, %rdi
	jge	.LBB26_407
# BB#406:                               # %if.then.1544
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, this_line_min_pos
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, this_line_min_pos+8
.LBB26_407:                             # %if.end.1551
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_409
# BB#408:                               # %if.then.1557
                                        #   in Loop: Header=BB26_17 Depth=1
	movb	$1, -19297(%rbp)
.LBB26_409:                             # %if.end.1558
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_414
# BB#410:                               # %land.lhs.true.1565
                                        #   in Loop: Header=BB26_17 Depth=1
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_414
# BB#411:                               # %land.lhs.true.1568
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB26_414
# BB#412:                               # %land.lhs.true.1574
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-19288(%rbp), %rax
	jge	.LBB26_414
# BB#413:                               # %if.then.1580
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -19288(%rbp)
.LBB26_414:                             # %if.end.1584
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB26_505
# BB#415:                               # %land.lhs.true.1588
                                        #   in Loop: Header=BB26_17 Depth=1
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jl	.LBB26_505
# BB#416:                               # %if.then.1593
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_440
# BB#417:                               # %lor.lhs.false.1602
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_423
# BB#418:                               # %land.lhs.true.1609
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_423
# BB#419:                               # %cond.true.1614
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_421
# BB#420:                               # %cond.true.1619
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19440(%rbp)      # 4-byte Spill
	jmp	.LBB26_422
.LBB26_421:                             # %cond.false.1622
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19440(%rbp)      # 4-byte Spill
.LBB26_422:                             # %cond.end.1627
	movl	-19440(%rbp), %eax      # 4-byte Reload
	movl	%eax, -19444(%rbp)      # 4-byte Spill
	jmp	.LBB26_427
.LBB26_423:                             # %cond.false.1629
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_425
# BB#424:                               # %cond.true.1634
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19448(%rbp)      # 4-byte Spill
	jmp	.LBB26_426
.LBB26_425:                             # %cond.false.1637
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19448(%rbp)      # 4-byte Spill
.LBB26_426:                             # %cond.end.1642
	movl	-19448(%rbp), %eax      # 4-byte Reload
	movl	%eax, -19444(%rbp)      # 4-byte Spill
.LBB26_427:                             # %cond.end.1644
	movl	-19444(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB26_440
# BB#428:                               # %lor.lhs.false.1648
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -19456(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-19456(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB26_490
# BB#429:                               # %land.lhs.true.1652
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB26_490
# BB#430:                               # %land.lhs.true.1661
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB26_435
# BB#431:                               # %cond.true.1666
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB26_433
# BB#432:                               # %cond.true.1671
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -19460(%rbp)      # 4-byte Spill
	jmp	.LBB26_434
.LBB26_433:                             # %cond.false.1674
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -19460(%rbp)      # 4-byte Spill
.LBB26_434:                             # %cond.end.1679
	movl	-19460(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB26_439
	jmp	.LBB26_490
.LBB26_435:                             # %cond.false.1683
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB26_437
# BB#436:                               # %cond.true.1688
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -19464(%rbp)      # 4-byte Spill
	jmp	.LBB26_438
.LBB26_437:                             # %cond.false.1691
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -19464(%rbp)      # 4-byte Spill
.LBB26_438:                             # %cond.end.1696
	movl	-19464(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB26_490
.LBB26_439:                             # %land.lhs.true.1700
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB26_490
.LBB26_440:                             # %if.then.1705
	movb	$0, -19333(%rbp)
	movq	-8(%rbp), %rdi
	callq	get_next_display_element
	xorb	$-1, %al
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -19333(%rbp)
	testb	$1, %al
	jne	.LBB26_459
# BB#441:                               # %lor.lhs.false.1709
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_455
# BB#442:                               # %land.lhs.true.1713
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_443
	jmp	.LBB26_455
.LBB26_443:                             # %land.lhs.true.1717
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_452
# BB#444:                               # %lor.lhs.false.1723
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_446
# BB#445:                               # %lor.lhs.false.1729
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_447
.LBB26_446:                             # %land.lhs.true.1740
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_452
.LBB26_447:                             # %lor.lhs.false.1746
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_455
# BB#448:                               # %land.lhs.true.1750
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_450
# BB#449:                               # %land.lhs.true.1756
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_452
.LBB26_450:                             # %lor.lhs.false.1761
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_455
# BB#451:                               # %land.lhs.true.1767
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_455
.LBB26_452:                             # %land.lhs.true.1772
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_459
# BB#453:                               # %lor.lhs.false.1776
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_455
# BB#454:                               # %land.lhs.true.1780
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jae	.LBB26_459
.LBB26_455:                             # %lor.lhs.false.1790
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_484
# BB#456:                               # %land.lhs.true.1797
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_484
# BB#457:                               # %land.lhs.true.1801
	testb	$1, -19297(%rbp)
	jne	.LBB26_484
# BB#458:                               # %land.lhs.true.1803
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_484
.LBB26_459:                             # %if.then.1809
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_483
# BB#460:                               # %land.lhs.true.1816
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_474
# BB#461:                               # %land.lhs.true.1820
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB26_462
	jmp	.LBB26_474
.LBB26_462:                             # %land.lhs.true.1824
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_471
# BB#463:                               # %lor.lhs.false.1830
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_465
# BB#464:                               # %lor.lhs.false.1836
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-8(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	jne	.LBB26_466
.LBB26_465:                             # %land.lhs.true.1847
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB26_471
.LBB26_466:                             # %lor.lhs.false.1853
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB26_474
# BB#467:                               # %land.lhs.true.1857
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_469
# BB#468:                               # %land.lhs.true.1863
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jge	.LBB26_471
.LBB26_469:                             # %lor.lhs.false.1868
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB26_474
# BB#470:                               # %land.lhs.true.1874
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	2176(%rcx), %rax
	jg	.LBB26_474
.LBB26_471:                             # %land.lhs.true.1879
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB26_483
# BB#472:                               # %lor.lhs.false.1883
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB26_474
# BB#473:                               # %land.lhs.true.1887
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	jae	.LBB26_483
.LBB26_474:                             # %land.lhs.true.1897
	testb	$1, -19333(%rbp)
	jne	.LBB26_483
# BB#475:                               # %land.lhs.true.1899
	movq	-19288(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB26_483
# BB#476:                               # %if.then.1903
	jmp	.LBB26_477
.LBB26_477:                             # %do.body.1904
	leaq	-19240(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_479
# BB#478:                               # %if.then.1907
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-19240(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_479:                             # %if.end.1908
	xorl	%esi, %esi
	movq	-19272(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19272(%rbp)
# BB#480:                               # %do.end.1909
	movq	-19288(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_482
# BB#481:                               # %if.then.1912
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movq	-8(%rbp), %rdi
	movq	-19288(%rbp), %rsi
	callq	move_it_in_display_line_to
	movl	%eax, -19468(%rbp)      # 4-byte Spill
.LBB26_482:                             # %if.end.1914
	jmp	.LBB26_483
.LBB26_483:                             # %if.end.1915
	movl	$1, -28(%rbp)
	jmp	.LBB26_506
.LBB26_484:                             # %if.end.1916
	movq	-8(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB26_489
# BB#485:                               # %land.lhs.true.1920
	movq	-8(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB26_488
# BB#486:                               # %lor.lhs.false.1924
	movq	-8(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB26_489
# BB#487:                               # %land.lhs.true.1928
	movq	-8(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB26_489
.LBB26_488:                             # %if.then.1931
	movl	$5, -28(%rbp)
	jmp	.LBB26_506
.LBB26_489:                             # %if.end.1932
	jmp	.LBB26_504
.LBB26_490:                             # %if.else.1933
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB26_503
# BB#491:                               # %land.lhs.true.1940
	movl	-24(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB26_503
# BB#492:                               # %land.lhs.true.1944
	testb	$1, -19297(%rbp)
	jne	.LBB26_503
# BB#493:                               # %land.lhs.true.1946
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB26_503
# BB#494:                               # %if.then.1952
	movq	-19288(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB26_502
# BB#495:                               # %if.then.1956
	jmp	.LBB26_496
.LBB26_496:                             # %do.body.1957
	leaq	-19240(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_498
# BB#497:                               # %if.then.1960
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-19240(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_498:                             # %if.end.1961
	xorl	%esi, %esi
	movq	-19272(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19272(%rbp)
# BB#499:                               # %do.end.1962
	movq	-19288(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB26_501
# BB#500:                               # %if.then.1965
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movq	-8(%rbp), %rdi
	movq	-19288(%rbp), %rsi
	callq	move_it_in_display_line_to
	movl	%eax, -19472(%rbp)      # 4-byte Spill
.LBB26_501:                             # %if.end.1967
	jmp	.LBB26_502
.LBB26_502:                             # %if.end.1968
	movl	$1, -28(%rbp)
	jmp	.LBB26_506
.LBB26_503:                             # %if.end.1969
	jmp	.LBB26_504
.LBB26_504:                             # %if.end.1970
	movl	$4, -28(%rbp)
	jmp	.LBB26_506
.LBB26_505:                             # %if.end.1971
                                        #   in Loop: Header=BB26_17 Depth=1
	jmp	.LBB26_17
.LBB26_506:                             # %while.end
	cmpl	$0, -7552(%rbp)
	jl	.LBB26_512
# BB#507:                               # %if.then.1975
	jmp	.LBB26_508
.LBB26_508:                             # %do.body.1976
	leaq	-9640(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_510
# BB#509:                               # %if.then.1979
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9640(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_510:                             # %if.end.1980
	xorl	%esi, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19256(%rbp)
# BB#511:                               # %do.end.1981
	jmp	.LBB26_519
.LBB26_512:                             # %if.else.1982
	cmpl	$0, -12352(%rbp)
	jl	.LBB26_518
# BB#513:                               # %if.then.1986
	jmp	.LBB26_514
.LBB26_514:                             # %do.body.1987
	leaq	-14440(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB26_516
# BB#515:                               # %if.then.1990
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-14440(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB26_516:                             # %if.end.1991
	xorl	%esi, %esi
	movq	-19264(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -19264(%rbp)
# BB#517:                               # %do.end.1992
	jmp	.LBB26_518
.LBB26_518:                             # %if.end.1993
	jmp	.LBB26_519
.LBB26_519:                             # %if.end.1994
	jmp	.LBB26_520
.LBB26_520:                             # %done
	cmpq	$0, -19256(%rbp)
	je	.LBB26_522
# BB#521:                               # %if.then.1996
	movl	$1, %esi
	movq	-19256(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_522:                             # %if.end.1997
	cmpq	$0, -19264(%rbp)
	je	.LBB26_524
# BB#523:                               # %if.then.1999
	movl	$1, %esi
	movq	-19264(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_524:                             # %if.end.2000
	cmpq	$0, -19248(%rbp)
	je	.LBB26_526
# BB#525:                               # %if.then.2002
	movl	$1, %esi
	movq	-19248(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_526:                             # %if.end.2003
	cmpq	$0, -19272(%rbp)
	je	.LBB26_528
# BB#527:                               # %if.then.2005
	movl	$1, %esi
	movq	-19272(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB26_528:                             # %if.end.2006
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2352(%rcx)
	movl	-28(%rbp), %eax
	addq	$19472, %rsp            # imm = 0x4C10
	popq	%rbp
	retq
.Lfunc_end26:
	.size	move_it_in_display_line_to, .Lfunc_end26-move_it_in_display_line_to
	.cfi_endproc

	.align	16, 0x90
	.type	window_hscroll_limited,@function
window_hscroll_limited:                 # @window_hscroll_limited
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp81:
	.cfi_def_cfa_offset 16
.Ltmp82:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp83:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	272(%rsi), %rsi
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	%eax, %esi
	callq	window_box_width
	movl	$2147483647, %esi       # imm = 0x7FFFFFFF
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rdi
	movl	364(%rdi), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rdi
	subl	-28(%rbp), %esi
	movl	%esi, %eax
	cltd
	idivl	-32(%rbp)
	subl	$1, %eax
	movslq	%eax, %rcx
	cmpq	%rcx, %rdi
	jle	.LBB27_2
# BB#1:                                 # %if.then
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	subl	-28(%rbp), %eax
	cltd
	idivl	-32(%rbp)
	subl	$1, %eax
	movslq	%eax, %rcx
	movq	%rcx, -24(%rbp)
.LBB27_2:                               # %if.end
	movq	-24(%rbp), %rax
	movl	%eax, %ecx
	movl	%ecx, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end27:
	.size	window_hscroll_limited, .Lfunc_end27-window_hscroll_limited
	.cfi_endproc

	.align	16, 0x90
	.type	normal_char_height,@function
normal_char_height:                     # @normal_char_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp84:
	.cfi_def_cfa_offset 16
.Ltmp85:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp86:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-16(%rbp), %rdx
	leaq	-20(%rbp), %rcx
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	normal_char_ascent_descent
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movl	%esi, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end28:
	.size	normal_char_height, .Lfunc_end28-normal_char_height
	.cfi_endproc

	.globl	pixel_to_glyph_coords
	.align	16, 0x90
	.type	pixel_to_glyph_coords,@function
pixel_to_glyph_coords:                  # @pixel_to_glyph_coords
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp87:
	.cfi_def_cfa_offset 16
.Ltmp88:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp89:
	.cfi_def_cfa_register %rbp
	movb	16(%rbp), %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	andb	$1, %al
	movb	%al, -41(%rbp)
	movq	-8(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %edx
	cmpl	$2, %edx
	jne	.LBB29_29
# BB#1:                                 # %if.then
	cmpl	$0, -12(%rbp)
	jge	.LBB29_3
# BB#2:                                 # %if.then.2
	movq	-8(%rbp), %rax
	movl	364(%rax), %ecx
	subl	$1, %ecx
	movl	-12(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -12(%rbp)
.LBB29_3:                               # %if.end
	cmpl	$0, -16(%rbp)
	jge	.LBB29_5
# BB#4:                                 # %if.then.5
	movq	-8(%rbp), %rax
	movl	368(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -16(%rbp)
.LBB29_5:                               # %if.end.8
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	332(%rcx), %eax
	movq	-8(%rbp), %rcx
	cltd
	idivl	364(%rcx)
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	360(%rcx), %esi
	movq	-8(%rbp), %rcx
	addl	220(%rcx), %esi
	cmpl	%esi, %eax
	jge	.LBB29_7
# BB#6:                                 # %cond.true
	movl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)         # 4-byte Spill
	jmp	.LBB29_11
.LBB29_7:                               # %cond.false
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	360(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	220(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	332(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB29_9
# BB#8:                                 # %cond.true.18
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	360(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	220(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	332(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	368(%rcx), %edx
	subl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -52(%rbp)         # 4-byte Spill
	jmp	.LBB29_10
.LBB29_9:                               # %cond.false.28
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	332(%rcx), %eax
	movl	%eax, -52(%rbp)         # 4-byte Spill
.LBB29_10:                              # %cond.end
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, -48(%rbp)         # 4-byte Spill
.LBB29_11:                              # %cond.end.31
	movl	-48(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	cltd
	idivl	368(%rcx)
	movl	%eax, -16(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB29_16
# BB#12:                                # %if.then.35
	movq	-8(%rbp), %rax
	movl	332(%rax), %ecx
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	imull	364(%rax), %edx
	addl	%edx, %ecx
	movw	%cx, %si
	movq	-40(%rbp), %rax
	movw	%si, (%rax)
	movl	-16(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	356(%rax), %edx
	movq	-8(%rbp), %rax
	addl	216(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB29_14
# BB#13:                                # %cond.true.43
	xorl	%eax, %eax
	movl	%eax, -56(%rbp)         # 4-byte Spill
	jmp	.LBB29_15
.LBB29_14:                              # %cond.false.44
	movq	-8(%rbp), %rax
	movl	332(%rax), %ecx
	movl	%ecx, -56(%rbp)         # 4-byte Spill
.LBB29_15:                              # %cond.end.46
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	-16(%rbp), %ecx
	movq	-8(%rbp), %rdx
	imull	368(%rdx), %ecx
	addl	%ecx, %eax
	movw	%ax, %si
	movq	-40(%rbp), %rdx
	movw	%si, 2(%rdx)
	movq	-8(%rbp), %rdx
	movl	364(%rdx), %eax
	subl	$1, %eax
	movw	%ax, %si
	movq	-40(%rbp), %rdx
	movw	%si, 4(%rdx)
	movq	-8(%rbp), %rdx
	movl	368(%rdx), %eax
	subl	$1, %eax
	movw	%ax, %si
	movq	-40(%rbp), %rdx
	movw	%si, 6(%rdx)
.LBB29_16:                              # %if.end.59
	testb	$1, -41(%rbp)
	jne	.LBB29_28
# BB#17:                                # %if.then.61
	cmpl	$0, -12(%rbp)
	jge	.LBB29_19
# BB#18:                                # %if.then.64
	movl	$0, -12(%rbp)
	jmp	.LBB29_22
.LBB29_19:                              # %if.else
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	280(%rcx), %eax
	jle	.LBB29_21
# BB#20:                                # %if.then.67
	movq	-8(%rbp), %rax
	movl	280(%rax), %ecx
	movl	%ecx, -12(%rbp)
.LBB29_21:                              # %if.end.69
	jmp	.LBB29_22
.LBB29_22:                              # %if.end.70
	cmpl	$0, -16(%rbp)
	jge	.LBB29_24
# BB#23:                                # %if.then.73
	movl	$0, -16(%rbp)
	jmp	.LBB29_27
.LBB29_24:                              # %if.else.74
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	284(%rcx), %eax
	jle	.LBB29_26
# BB#25:                                # %if.then.77
	movq	-8(%rbp), %rax
	movl	284(%rax), %ecx
	movl	%ecx, -16(%rbp)
.LBB29_26:                              # %if.end.79
	jmp	.LBB29_27
.LBB29_27:                              # %if.end.80
	jmp	.LBB29_28
.LBB29_28:                              # %if.end.81
	jmp	.LBB29_29
.LBB29_29:                              # %if.end.82
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	popq	%rbp
	retq
.Lfunc_end29:
	.size	pixel_to_glyph_coords, .Lfunc_end29-pixel_to_glyph_coords
	.cfi_endproc

	.globl	get_glyph_string_clip_rects
	.align	16, 0x90
	.type	get_glyph_string_clip_rects,@function
get_glyph_string_clip_rects:            # @get_glyph_string_clip_rects
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp90:
	.cfi_def_cfa_offset 16
.Ltmp91:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp92:
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	cmpl	$0, -28(%rbp)
	jg	.LBB30_2
# BB#1:                                 # %if.then
	movl	$0, -4(%rbp)
	jmp	.LBB30_197
.LBB30_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_14
# BB#3:                                 # %if.then.1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addl	240(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_9
# BB#4:                                 # %if.then.8
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	256(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	240(%rax), %edx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addl	256(%rax), %edx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -100(%rbp)        # 4-byte Spill
	movl	%edx, -104(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -108(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-108(%rbp), %ecx        # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-104(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB30_6
# BB#5:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB30_7
.LBB30_6:                               # %cond.true
	xorl	%eax, %eax
	movl	%eax, -112(%rbp)        # 4-byte Spill
	jmp	.LBB30_8
.LBB30_7:                               # %cond.false
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -112(%rbp)        # 4-byte Spill
.LBB30_8:                               # %cond.end
	movl	-112(%rbp), %eax        # 4-byte Reload
	movl	-100(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movw	%cx, %dx
	movw	%dx, -36(%rbp)
	jmp	.LBB30_10
.LBB30_9:                               # %if.else
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	256(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -36(%rbp)
.LBB30_10:                              # %if.end.42
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB30_12
# BB#11:                                # %if.then.48
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	72(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -34(%rbp)
	jmp	.LBB30_13
.LBB30_12:                              # %if.else.51
	movq	-16(%rbp), %rax
	movl	20(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -34(%rbp)
.LBB30_13:                              # %if.end.55
	jmp	.LBB30_15
.LBB30_14:                              # %if.else.56
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	72(%rax), %esi
	callq	window_box_left
	movw	%ax, %cx
	movw	%cx, -40(%rbp)
	movq	-16(%rbp), %rdi
	movq	40(%rdi), %rdi
	movq	-16(%rbp), %rdx
	movl	72(%rdx), %esi
	callq	window_box_width
	movw	%ax, %cx
	movw	%cx, -36(%rbp)
	movq	-16(%rbp), %rdx
	movq	64(%rdx), %rdx
	movl	72(%rdx), %eax
	movw	%ax, %cx
	movw	%cx, -34(%rbp)
.LBB30_15:                              # %if.end.70
	movq	-16(%rbp), %rax
	cmpq	$0, 184(%rax)
	je	.LBB30_22
# BB#16:                                # %if.then.71
	movswl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	184(%rcx), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB30_21
# BB#17:                                # %if.then.78
	movzwl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	184(%rcx), %rcx
	movl	(%rcx), %edx
	movswl	-40(%rbp), %esi
	subl	%esi, %edx
	cmpl	%edx, %eax
	jl	.LBB30_19
# BB#18:                                # %if.then.88
	movq	-16(%rbp), %rax
	movq	184(%rax), %rax
	movl	(%rax), %ecx
	movswl	-40(%rbp), %edx
	subl	%edx, %ecx
	movzwl	-36(%rbp), %edx
	subl	%ecx, %edx
	movw	%dx, %si
	movw	%si, -36(%rbp)
	jmp	.LBB30_20
.LBB30_19:                              # %if.else.98
	movw	$0, -36(%rbp)
.LBB30_20:                              # %if.end.100
	movq	-16(%rbp), %rax
	movq	184(%rax), %rax
	movl	(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -40(%rbp)
.LBB30_21:                              # %if.end.105
	jmp	.LBB30_22
.LBB30_22:                              # %if.end.106
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_29
# BB#23:                                # %if.then.108
	movswl	-40(%rbp), %eax
	movzwl	-36(%rbp), %ecx
	addl	%ecx, %eax
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movl	(%rdx), %ecx
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	addl	16(%rdx), %ecx
	cmpl	%ecx, %eax
	jle	.LBB30_28
# BB#24:                                # %if.then.120
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movl	(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	addl	16(%rax), %ecx
	movswl	-40(%rbp), %edx
	cmpl	%edx, %ecx
	jl	.LBB30_26
# BB#25:                                # %if.then.130
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movl	(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	addl	16(%rax), %ecx
	movswl	-40(%rbp), %edx
	subl	%edx, %ecx
	movw	%cx, %si
	movw	%si, -36(%rbp)
	jmp	.LBB30_27
.LBB30_26:                              # %if.else.141
	movw	$0, -36(%rbp)
.LBB30_27:                              # %if.end.143
	jmp	.LBB30_28
.LBB30_28:                              # %if.end.144
	jmp	.LBB30_29
.LBB30_29:                              # %if.end.145
	movq	-16(%rbp), %rax
	movb	136(%rax), %cl
	shrb	$4, %cl
	andb	$7, %cl
	movzbl	%cl, %edx
	cmpl	$0, %edx
	je	.LBB30_64
# BB#30:                                # %if.then.151
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB30_31
	jmp	.LBB30_45
.LBB30_31:                              # %cond.true.155
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_60
# BB#32:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_60
# BB#33:                                # %land.lhs.true.167
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_60
# BB#34:                                # %land.lhs.true.176
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB30_60
# BB#35:                                # %land.lhs.true.183
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB30_36
	jmp	.LBB30_41
.LBB30_36:                              # %cond.true.189
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_43
# BB#37:                                # %land.lhs.true.195
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_43
# BB#38:                                # %land.lhs.true.202
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_43
# BB#39:                                # %land.lhs.true.212
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB30_43
# BB#40:                                # %land.lhs.true.219
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB30_42
	jmp	.LBB30_43
.LBB30_41:                              # %cond.false.227
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_42
	jmp	.LBB30_43
.LBB30_42:                              # %cond.true.228
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB30_44
.LBB30_43:                              # %cond.false.233
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
.LBB30_44:                              # %cond.end.238
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	-124(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB30_46
	jmp	.LBB30_60
.LBB30_45:                              # %cond.false.242
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_46
	jmp	.LBB30_60
.LBB30_46:                              # %cond.true.243
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB30_48
# BB#47:                                # %cond.true.247
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -144(%rbp)        # 4-byte Spill
	jmp	.LBB30_59
.LBB30_48:                              # %cond.false.250
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_51
# BB#49:                                # %land.lhs.true.253
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB30_51
# BB#50:                                # %cond.true.257
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB30_52
	jmp	.LBB30_57
.LBB30_51:                              # %cond.false.263
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_52
	jmp	.LBB30_57
.LBB30_52:                              # %cond.true.264
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_55
# BB#53:                                # %land.lhs.true.268
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB30_55
# BB#54:                                # %cond.true.273
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
	jmp	.LBB30_56
.LBB30_55:                              # %cond.false.278
	xorl	%eax, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB30_56
.LBB30_56:                              # %cond.end.279
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB30_58
.LBB30_57:                              # %cond.false.281
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB30_58:                              # %cond.end.286
	movl	-152(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -144(%rbp)        # 4-byte Spill
.LBB30_59:                              # %cond.end.290
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB30_61
.LBB30_60:                              # %cond.false.292
	xorl	%eax, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB30_61
.LBB30_61:                              # %cond.end.293
	movl	-156(%rbp), %eax        # 4-byte Reload
	movw	%ax, %cx
	movw	%cx, -38(%rbp)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdi
	callq	window_text_bottom_y
	movswl	-38(%rbp), %esi
	subl	%esi, %eax
	movw	%ax, %cx
	movw	%cx, -34(%rbp)
	movq	-16(%rbp), %rdx
	movb	136(%rdx), %r8b
	shrb	$4, %r8b
	andb	$7, %r8b
	movzbl	%r8b, %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB30_63
# BB#62:                                # %if.then.309
	movl	$1, %esi
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	window_box_left
	leaq	-56(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	addl	368(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -48(%rbp)
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	372(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -46(%rbp)
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	408(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -44(%rbp)
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	416(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -42(%rbp)
	callq	x_intersect_rectangles
	movb	%al, -157(%rbp)         # 1-byte Spill
.LBB30_63:                              # %if.end.329
	jmp	.LBB30_135
.LBB30_64:                              # %if.else.330
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB30_130
# BB#65:                                # %land.lhs.true.337
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	60(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	cmpl	72(%rax), %ecx
	je	.LBB30_130
# BB#66:                                # %land.lhs.true.344
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -164(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB30_67
	jmp	.LBB30_81
.LBB30_67:                              # %cond.true.351
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_96
# BB#68:                                # %land.lhs.true.357
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_96
# BB#69:                                # %land.lhs.true.364
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_96
# BB#70:                                # %land.lhs.true.374
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB30_96
# BB#71:                                # %land.lhs.true.382
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -180(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB30_72
	jmp	.LBB30_77
.LBB30_72:                              # %cond.true.389
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_79
# BB#73:                                # %land.lhs.true.395
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_79
# BB#74:                                # %land.lhs.true.402
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_79
# BB#75:                                # %land.lhs.true.412
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB30_79
# BB#76:                                # %land.lhs.true.420
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB30_78
	jmp	.LBB30_79
.LBB30_77:                              # %cond.false.429
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_78
	jmp	.LBB30_79
.LBB30_78:                              # %cond.true.430
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -196(%rbp)        # 4-byte Spill
	jmp	.LBB30_80
.LBB30_79:                              # %cond.false.436
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -196(%rbp)        # 4-byte Spill
.LBB30_80:                              # %cond.end.441
	movl	-196(%rbp), %eax        # 4-byte Reload
	movl	-180(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB30_82
	jmp	.LBB30_96
.LBB30_81:                              # %cond.false.445
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_82
	jmp	.LBB30_96
.LBB30_82:                              # %cond.true.446
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB30_84
# BB#83:                                # %cond.true.451
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -200(%rbp)        # 4-byte Spill
	jmp	.LBB30_95
.LBB30_84:                              # %cond.false.454
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_87
# BB#85:                                # %land.lhs.true.458
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB30_87
# BB#86:                                # %cond.true.463
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB30_88
	jmp	.LBB30_93
.LBB30_87:                              # %cond.false.469
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_88
	jmp	.LBB30_93
.LBB30_88:                              # %cond.true.470
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_91
# BB#89:                                # %land.lhs.true.474
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB30_91
# BB#90:                                # %cond.true.479
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -204(%rbp)        # 4-byte Spill
	jmp	.LBB30_92
.LBB30_91:                              # %cond.false.484
	xorl	%eax, %eax
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB30_92
.LBB30_92:                              # %cond.end.485
	movl	-204(%rbp), %eax        # 4-byte Reload
	movl	%eax, -208(%rbp)        # 4-byte Spill
	jmp	.LBB30_94
.LBB30_93:                              # %cond.false.487
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -208(%rbp)        # 4-byte Spill
.LBB30_94:                              # %cond.end.492
	movl	-208(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -200(%rbp)        # 4-byte Spill
.LBB30_95:                              # %cond.end.496
	movl	-200(%rbp), %eax        # 4-byte Reload
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB30_97
.LBB30_96:                              # %cond.false.498
	xorl	%eax, %eax
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB30_97
.LBB30_97:                              # %cond.end.499
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	-164(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB30_130
# BB#98:                                # %if.then.503
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB30_99
	jmp	.LBB30_113
.LBB30_99:                              # %cond.true.508
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_128
# BB#100:                               # %land.lhs.true.514
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_128
# BB#101:                               # %land.lhs.true.521
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_128
# BB#102:                               # %land.lhs.true.531
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB30_128
# BB#103:                               # %land.lhs.true.539
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -228(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB30_104
	jmp	.LBB30_109
.LBB30_104:                             # %cond.true.546
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_111
# BB#105:                               # %land.lhs.true.552
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB30_111
# BB#106:                               # %land.lhs.true.559
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB30_111
# BB#107:                               # %land.lhs.true.569
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB30_111
# BB#108:                               # %land.lhs.true.577
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB30_110
	jmp	.LBB30_111
.LBB30_109:                             # %cond.false.586
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_110
	jmp	.LBB30_111
.LBB30_110:                             # %cond.true.587
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -244(%rbp)        # 4-byte Spill
	jmp	.LBB30_112
.LBB30_111:                             # %cond.false.593
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -244(%rbp)        # 4-byte Spill
.LBB30_112:                             # %cond.end.598
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	-228(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB30_114
	jmp	.LBB30_128
.LBB30_113:                             # %cond.false.602
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_114
	jmp	.LBB30_128
.LBB30_114:                             # %cond.true.603
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB30_116
# BB#115:                               # %cond.true.608
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -248(%rbp)        # 4-byte Spill
	jmp	.LBB30_127
.LBB30_116:                             # %cond.false.611
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_119
# BB#117:                               # %land.lhs.true.615
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB30_119
# BB#118:                               # %cond.true.620
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB30_120
	jmp	.LBB30_125
.LBB30_119:                             # %cond.false.626
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB30_120
	jmp	.LBB30_125
.LBB30_120:                             # %cond.true.627
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB30_123
# BB#121:                               # %land.lhs.true.631
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB30_123
# BB#122:                               # %cond.true.636
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -252(%rbp)        # 4-byte Spill
	jmp	.LBB30_124
.LBB30_123:                             # %cond.false.641
	xorl	%eax, %eax
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB30_124
.LBB30_124:                             # %cond.end.642
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB30_126
.LBB30_125:                             # %cond.false.644
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -256(%rbp)        # 4-byte Spill
.LBB30_126:                             # %cond.end.649
	movl	-256(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -248(%rbp)        # 4-byte Spill
.LBB30_127:                             # %cond.end.653
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB30_129
.LBB30_128:                             # %cond.false.655
	xorl	%eax, %eax
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB30_129
.LBB30_129:                             # %cond.end.656
	movl	-260(%rbp), %eax        # 4-byte Reload
	movw	%ax, %cx
	movw	%cx, -38(%rbp)
	jmp	.LBB30_134
.LBB30_130:                             # %if.else.660
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	cmpl	48(%rcx), %eax
	jle	.LBB30_132
# BB#131:                               # %cond.true.665
	xorl	%eax, %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
	jmp	.LBB30_133
.LBB30_132:                             # %cond.false.666
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -264(%rbp)        # 4-byte Spill
.LBB30_133:                             # %cond.end.669
	movl	-264(%rbp), %eax        # 4-byte Reload
	movw	%ax, %cx
	movw	%cx, -38(%rbp)
.LBB30_134:                             # %if.end.673
	jmp	.LBB30_135
.LBB30_135:                             # %if.end.674
	movswl	-38(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	addl	244(%rcx), %edx
	addl	%edx, %eax
	movw	%ax, %si
	movw	%si, -38(%rbp)
	movq	-16(%rbp), %rcx
	cmpl	$2, 92(%rcx)
	jne	.LBB30_174
# BB#136:                               # %if.then.688
	movq	-16(%rbp), %rax
	movq	152(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	movswl	-40(%rbp), %edx
	cmpl	%edx, %ecx
	jle	.LBB30_141
# BB#137:                               # %if.then.695
	movzwl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	(%rcx), %edx
	movswl	-40(%rbp), %esi
	subl	%esi, %edx
	cmpl	%edx, %eax
	jl	.LBB30_139
# BB#138:                               # %if.then.704
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	movswl	-40(%rbp), %edx
	subl	%edx, %ecx
	movzwl	-36(%rbp), %edx
	subl	%ecx, %edx
	movw	%dx, %si
	movw	%si, -36(%rbp)
	jmp	.LBB30_140
.LBB30_139:                             # %if.else.713
	movw	$0, -36(%rbp)
.LBB30_140:                             # %if.end.715
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -40(%rbp)
.LBB30_141:                             # %if.end.719
	movzwl	-36(%rbp), %eax
	movq	-64(%rbp), %rcx
	movswl	16(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB30_143
# BB#142:                               # %cond.true.726
	movzwl	-36(%rbp), %eax
	movl	%eax, -268(%rbp)        # 4-byte Spill
	jmp	.LBB30_144
.LBB30_143:                             # %cond.false.729
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	%ecx, -268(%rbp)        # 4-byte Spill
.LBB30_144:                             # %cond.end.732
	movl	-268(%rbp), %eax        # 4-byte Reload
	movw	%ax, %cx
	movw	%cx, -36(%rbp)
	movq	-64(%rbp), %rdx
	movswl	18(%rdx), %eax
	movq	-64(%rbp), %rdx
	movswl	20(%rdx), %esi
	addl	%esi, %eax
	movq	-16(%rbp), %rdx
	movq	32(%rdx), %rdx
	movl	368(%rdx), %esi
	movq	-16(%rbp), %rdx
	movq	64(%rdx), %rdx
	cmpl	72(%rdx), %esi
	movl	%eax, -272(%rbp)        # 4-byte Spill
	jge	.LBB30_146
# BB#145:                               # %cond.true.744
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -276(%rbp)        # 4-byte Spill
	jmp	.LBB30_147
.LBB30_146:                             # %cond.false.747
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	72(%rax), %ecx
	movl	%ecx, -276(%rbp)        # 4-byte Spill
.LBB30_147:                             # %cond.end.750
	movl	-276(%rbp), %eax        # 4-byte Reload
	movl	-272(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB30_149
# BB#148:                               # %cond.true.754
	movq	-64(%rbp), %rax
	movswl	18(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	20(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -280(%rbp)        # 4-byte Spill
	jmp	.LBB30_153
.LBB30_149:                             # %cond.false.760
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	368(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	cmpl	72(%rax), %ecx
	jge	.LBB30_151
# BB#150:                               # %cond.true.767
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -284(%rbp)        # 4-byte Spill
	jmp	.LBB30_152
.LBB30_151:                             # %cond.false.770
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	72(%rax), %ecx
	movl	%ecx, -284(%rbp)        # 4-byte Spill
.LBB30_152:                             # %cond.end.773
	movl	-284(%rbp), %eax        # 4-byte Reload
	movl	%eax, -280(%rbp)        # 4-byte Spill
.LBB30_153:                             # %cond.end.775
	movl	-280(%rbp), %eax        # 4-byte Reload
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rdi
	callq	window_text_bottom_y
	subl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	addl	244(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	movq	-64(%rbp), %rcx
	movswl	18(%rcx), %edx
	subl	%edx, %eax
	cmpl	-72(%rbp), %eax
	jle	.LBB30_155
# BB#154:                               # %if.then.793
	movl	-72(%rbp), %eax
	movw	%ax, %cx
	movw	%cx, -38(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, %cx
	movw	%cx, -34(%rbp)
	jmp	.LBB30_173
.LBB30_155:                             # %if.else.798
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	368(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	18(%rax), %edx
	movq	-64(%rbp), %rax
	movswl	20(%rax), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB30_157
# BB#156:                               # %cond.true.808
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -288(%rbp)        # 4-byte Spill
	jmp	.LBB30_158
.LBB30_157:                             # %cond.false.811
	movq	-64(%rbp), %rax
	movswl	18(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	20(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -288(%rbp)        # 4-byte Spill
.LBB30_158:                             # %cond.end.817
	movl	-288(%rbp), %eax        # 4-byte Reload
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	movzwl	-34(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_172
# BB#159:                               # %if.then.823
	movswl	-38(%rbp), %eax
	movzwl	-34(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	movswl	-38(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movl	8(%rdx), %esi
	movq	-64(%rbp), %rdx
	movswl	20(%rdx), %edi
	addl	%edi, %esi
	subl	-68(%rbp), %esi
	cmpl	%esi, %ecx
	movl	%eax, -292(%rbp)        # 4-byte Spill
	jle	.LBB30_161
# BB#160:                               # %cond.true.838
	movswl	-38(%rbp), %eax
	movl	%eax, -296(%rbp)        # 4-byte Spill
	jmp	.LBB30_162
.LBB30_161:                             # %cond.false.841
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	20(%rax), %edx
	addl	%edx, %ecx
	subl	-68(%rbp), %ecx
	movl	%ecx, -296(%rbp)        # 4-byte Spill
.LBB30_162:                             # %cond.end.847
	movl	-296(%rbp), %eax        # 4-byte Reload
	movl	-292(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB30_164
# BB#163:                               # %cond.true.851
	movl	-72(%rbp), %eax
	movl	%eax, -300(%rbp)        # 4-byte Spill
	jmp	.LBB30_168
.LBB30_164:                             # %cond.false.852
	movswl	-38(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	movq	-64(%rbp), %rcx
	movswl	20(%rcx), %esi
	addl	%esi, %edx
	subl	-68(%rbp), %edx
	cmpl	%edx, %eax
	jle	.LBB30_166
# BB#165:                               # %cond.true.862
	movswl	-38(%rbp), %eax
	movl	%eax, -304(%rbp)        # 4-byte Spill
	jmp	.LBB30_167
.LBB30_166:                             # %cond.false.865
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	20(%rax), %edx
	addl	%edx, %ecx
	subl	-68(%rbp), %ecx
	movl	%ecx, -304(%rbp)        # 4-byte Spill
.LBB30_167:                             # %cond.end.871
	movl	-304(%rbp), %eax        # 4-byte Reload
	movl	%eax, -300(%rbp)        # 4-byte Spill
.LBB30_168:                             # %cond.end.873
	movl	-300(%rbp), %eax        # 4-byte Reload
	movw	%ax, %cx
	movw	%cx, -38(%rbp)
	movl	-72(%rbp), %eax
	movswl	-38(%rbp), %edx
	subl	%edx, %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB30_170
# BB#169:                               # %cond.true.882
	movl	-72(%rbp), %eax
	movswl	-38(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -308(%rbp)        # 4-byte Spill
	jmp	.LBB30_171
.LBB30_170:                             # %cond.false.886
	movl	-68(%rbp), %eax
	movl	%eax, -308(%rbp)        # 4-byte Spill
.LBB30_171:                             # %cond.end.887
	movl	-308(%rbp), %eax        # 4-byte Reload
	movw	%ax, %cx
	movw	%cx, -34(%rbp)
.LBB30_172:                             # %if.end.891
	jmp	.LBB30_173
.LBB30_173:                             # %if.end.892
	jmp	.LBB30_174
.LBB30_174:                             # %if.end.893
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	cmpq	$0, 248(%rax)
	je	.LBB30_178
# BB#175:                               # %if.then.896
	leaq	-80(%rbp), %rdi
	leaq	-40(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movq	248(%rax), %rsi
	callq	x_intersect_rectangles
	testb	$1, %al
	jne	.LBB30_177
# BB#176:                               # %if.then.901
	movw	$0, -36(%rbp)
.LBB30_177:                             # %if.end.903
	jmp	.LBB30_178
.LBB30_178:                             # %if.end.904
	movq	-16(%rbp), %rax
	movb	136(%rax), %cl
	shrb	$4, %cl
	andb	$7, %cl
	movzbl	%cl, %edx
	andl	$3, %edx
	cmpl	$0, %edx
	je	.LBB30_181
# BB#179:                               # %lor.lhs.false.913
	movq	-16(%rbp), %rax
	movb	136(%rax), %cl
	shrb	$4, %cl
	andb	$7, %cl
	movzbl	%cl, %edx
	andl	$3, %edx
	cmpl	$3, %edx
	jne	.LBB30_182
# BB#180:                               # %land.lhs.true.922
	cmpl	$1, -28(%rbp)
	jne	.LBB30_182
.LBB30_181:                             # %if.then.925
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, (%rax)
	movl	$1, -4(%rbp)
	jmp	.LBB30_197
.LBB30_182:                             # %if.else.926
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -92(%rbp)
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %edx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addl	244(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -96(%rbp)
	movq	-16(%rbp), %rax
	movb	136(%rax), %sil
	shrb	$4, %sil
	andb	$7, %sil
	movzbl	%sil, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB30_189
# BB#183:                               # %if.then.944
	movslq	-92(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rcx,%rax,8)
	movswl	-38(%rbp), %esi
	movzwl	-34(%rbp), %edi
	addl	%edi, %esi
	cmpl	-96(%rbp), %esi
	jle	.LBB30_188
# BB#184:                               # %if.then.952
	movswl	-38(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB30_186
# BB#185:                               # %if.then.957
	movl	-96(%rbp), %eax
	movswl	-38(%rbp), %ecx
	subl	%ecx, %eax
	movw	%ax, %dx
	movslq	-92(%rbp), %rsi
	movq	-88(%rbp), %rdi
	movw	%dx, 6(%rdi,%rsi,8)
	jmp	.LBB30_187
.LBB30_186:                             # %if.else.965
	movslq	-92(%rbp), %rax
	movq	-88(%rbp), %rcx
	movw	$0, 6(%rcx,%rax,8)
.LBB30_187:                             # %if.end.969
	jmp	.LBB30_188
.LBB30_188:                             # %if.end.970
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB30_189:                             # %if.end.971
	movq	-16(%rbp), %rax
	movb	136(%rax), %cl
	shrb	$4, %cl
	andb	$7, %cl
	movzbl	%cl, %edx
	andl	$2, %edx
	cmpl	$0, %edx
	je	.LBB30_196
# BB#190:                               # %if.then.979
	movslq	-92(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rcx,%rax,8)
	movswl	-38(%rbp), %esi
	movl	-96(%rbp), %edi
	movq	-16(%rbp), %rax
	movq	64(%rax), %rax
	addl	72(%rax), %edi
	cmpl	%edi, %esi
	jge	.LBB30_195
# BB#191:                               # %if.then.989
	movswl	-38(%rbp), %eax
	movzwl	-34(%rbp), %ecx
	addl	%ecx, %eax
	movl	-96(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	64(%rdx), %rdx
	addl	72(%rdx), %ecx
	cmpl	%ecx, %eax
	jle	.LBB30_193
# BB#192:                               # %if.then.1000
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	addl	72(%rcx), %eax
	movw	%ax, %dx
	movslq	-92(%rbp), %rcx
	movq	-88(%rbp), %rsi
	movw	%dx, 2(%rsi,%rcx,8)
	movswl	-38(%rbp), %eax
	movzwl	-34(%rbp), %edi
	addl	%edi, %eax
	movslq	-92(%rbp), %rcx
	movq	-88(%rbp), %rsi
	movswl	2(%rsi,%rcx,8), %edi
	subl	%edi, %eax
	movw	%ax, %dx
	movslq	-92(%rbp), %rcx
	movq	-88(%rbp), %rsi
	movw	%dx, 6(%rsi,%rcx,8)
	jmp	.LBB30_194
.LBB30_193:                             # %if.else.1022
	movslq	-92(%rbp), %rax
	movq	-88(%rbp), %rcx
	movw	$0, 6(%rcx,%rax,8)
.LBB30_194:                             # %if.end.1026
	jmp	.LBB30_195
.LBB30_195:                             # %if.end.1027
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB30_196:                             # %if.end.1029
	movl	-92(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_197:                             # %return
	movl	-4(%rbp), %eax
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	retq
.Lfunc_end30:
	.size	get_glyph_string_clip_rects, .Lfunc_end30-get_glyph_string_clip_rects
	.cfi_endproc

	.globl	x_intersect_rectangles
	.align	16, 0x90
	.type	x_intersect_rectangles,@function
x_intersect_rectangles:                 # @x_intersect_rectangles
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp93:
	.cfi_def_cfa_offset 16
.Ltmp94:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp95:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$0, -57(%rbp)
	movq	-8(%rbp), %rdx
	movswl	(%rdx), %eax
	movq	-16(%rbp), %rdx
	movswl	(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB31_3
.LBB31_2:                               # %if.else
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB31_3:                               # %if.end
	movq	-40(%rbp), %rax
	movswl	(%rax), %ecx
	movq	-32(%rbp), %rax
	movswl	(%rax), %edx
	movq	-32(%rbp), %rax
	movzwl	4(%rax), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jg	.LBB31_16
# BB#4:                                 # %if.then.11
	movq	-40(%rbp), %rax
	movw	(%rax), %cx
	movq	-24(%rbp), %rax
	movw	%cx, (%rax)
	movq	-32(%rbp), %rax
	movswl	(%rax), %edx
	movq	-32(%rbp), %rax
	movzwl	4(%rax), %esi
	addl	%esi, %edx
	movq	-40(%rbp), %rax
	movswl	(%rax), %esi
	movq	-40(%rbp), %rax
	movzwl	4(%rax), %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jge	.LBB31_6
# BB#5:                                 # %cond.true
	movq	-32(%rbp), %rax
	movswl	(%rax), %ecx
	movq	-32(%rbp), %rax
	movzwl	4(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)         # 4-byte Spill
	jmp	.LBB31_7
.LBB31_6:                               # %cond.false
	movq	-40(%rbp), %rax
	movswl	(%rax), %ecx
	movq	-40(%rbp), %rax
	movzwl	4(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)         # 4-byte Spill
.LBB31_7:                               # %cond.end
	movl	-64(%rbp), %eax         # 4-byte Reload
	movq	-24(%rbp), %rcx
	movswl	(%rcx), %edx
	subl	%edx, %eax
	movw	%ax, %si
	movq	-24(%rbp), %rcx
	movw	%si, 4(%rcx)
	movq	-8(%rbp), %rcx
	movswl	2(%rcx), %eax
	movq	-16(%rbp), %rcx
	movswl	2(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB31_9
# BB#8:                                 # %if.then.45
	movq	-8(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB31_10
.LBB31_9:                               # %if.else.46
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB31_10:                              # %if.end.47
	movq	-56(%rbp), %rax
	movswl	2(%rax), %ecx
	movq	-48(%rbp), %rax
	movswl	2(%rax), %edx
	movq	-48(%rbp), %rax
	movzwl	6(%rax), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jg	.LBB31_15
# BB#11:                                # %if.then.56
	movq	-56(%rbp), %rax
	movw	2(%rax), %cx
	movq	-24(%rbp), %rax
	movw	%cx, 2(%rax)
	movq	-56(%rbp), %rax
	movswl	2(%rax), %edx
	movq	-56(%rbp), %rax
	movzwl	6(%rax), %esi
	addl	%esi, %edx
	movq	-48(%rbp), %rax
	movswl	2(%rax), %esi
	movq	-48(%rbp), %rax
	movzwl	6(%rax), %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jge	.LBB31_13
# BB#12:                                # %cond.true.71
	movq	-56(%rbp), %rax
	movswl	2(%rax), %ecx
	movq	-56(%rbp), %rax
	movzwl	6(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)         # 4-byte Spill
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false.77
	movq	-48(%rbp), %rax
	movswl	2(%rax), %ecx
	movq	-48(%rbp), %rax
	movzwl	6(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)         # 4-byte Spill
.LBB31_14:                              # %cond.end.83
	movl	-68(%rbp), %eax         # 4-byte Reload
	movq	-24(%rbp), %rcx
	movswl	2(%rcx), %edx
	subl	%edx, %eax
	movw	%ax, %si
	movq	-24(%rbp), %rcx
	movw	%si, 6(%rcx)
	movb	$1, -57(%rbp)
.LBB31_15:                              # %if.end.90
	jmp	.LBB31_16
.LBB31_16:                              # %if.end.91
	movb	-57(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end31:
	.size	x_intersect_rectangles, .Lfunc_end31-x_intersect_rectangles
	.cfi_endproc

	.globl	get_glyph_string_clip_rect
	.align	16, 0x90
	.type	get_glyph_string_clip_rect,@function
get_glyph_string_clip_rect:             # @get_glyph_string_clip_rect
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp96:
	.cfi_def_cfa_offset 16
.Ltmp97:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp98:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %edx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	get_glyph_string_clip_rects
	movl	%eax, -20(%rbp)         # 4-byte Spill
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end32:
	.size	get_glyph_string_clip_rect, .Lfunc_end32-get_glyph_string_clip_rect
	.cfi_endproc

	.globl	get_phys_cursor_geometry
	.align	16, 0x90
	.type	get_phys_cursor_geometry,@function
get_phys_cursor_geometry:               # @get_phys_cursor_geometry
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp99:
	.cfi_def_cfa_offset 16
.Ltmp100:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp101:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	%rcx, -56(%rbp)
	movq	-24(%rbp), %rcx
	movswl	16(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-8(%rbp), %rcx
	movl	368(%rcx), %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jge	.LBB33_2
# BB#1:                                 # %if.then
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	$0, -60(%rbp)
.LBB33_2:                               # %if.end
	movq	-24(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$4, %ecx
	jne	.LBB33_8
# BB#3:                                 # %land.lhs.true
	testb	$1, globals+3447
	jne	.LBB33_8
# BB#4:                                 # %if.then.5
	movq	-56(%rbp), %rax
	movl	364(%rax), %ecx
	cmpl	-68(%rbp), %ecx
	jge	.LBB33_6
# BB#5:                                 # %cond.true
	movq	-56(%rbp), %rax
	movl	364(%rax), %ecx
	movl	%ecx, -88(%rbp)         # 4-byte Spill
	jmp	.LBB33_7
.LBB33_6:                               # %cond.false
	movl	-68(%rbp), %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
.LBB33_7:                               # %cond.end
	movl	-88(%rbp), %eax         # 4-byte Reload
	movl	%eax, -68(%rbp)
.LBB33_8:                               # %if.end.9
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 408(%rcx)
	movq	-8(%rbp), %rcx
	movl	372(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rcx
	movl	56(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rcx
	movl	56(%rcx), %eax
	movq	-24(%rbp), %rcx
	movswl	18(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB33_10
# BB#9:                                 # %if.then.18
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movswl	18(%rcx), %edx
	subl	%edx, %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-24(%rbp), %rcx
	movswl	18(%rcx), %eax
	movl	%eax, -84(%rbp)
.LBB33_10:                              # %if.end.26
	movq	-56(%rbp), %rax
	movl	368(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	72(%rax), %ecx
	jge	.LBB33_12
# BB#11:                                # %cond.true.29
	movq	-56(%rbp), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
	jmp	.LBB33_13
.LBB33_12:                              # %cond.false.31
	movq	-16(%rbp), %rax
	movl	72(%rax), %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
.LBB33_13:                              # %cond.end.33
	movl	-92(%rbp), %eax         # 4-byte Reload
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movl	-84(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movswl	20(%rdx), %esi
	addl	%esi, %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_15
# BB#14:                                # %cond.true.39
	movl	-76(%rbp), %eax
	movl	%eax, -96(%rbp)         # 4-byte Spill
	jmp	.LBB33_16
.LBB33_15:                              # %cond.false.40
	movl	-84(%rbp), %eax
	movq	-24(%rbp), %rcx
	movswl	20(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB33_16:                              # %cond.end.44
	movl	-96(%rbp), %eax         # 4-byte Reload
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	movl	-84(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movswl	20(%rdx), %esi
	addl	%esi, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_18
# BB#17:                                # %cond.true.51
	movl	-76(%rbp), %eax
	movl	%eax, -100(%rbp)        # 4-byte Spill
	jmp	.LBB33_19
.LBB33_18:                              # %cond.false.52
	movl	-84(%rbp), %eax
	movq	-24(%rbp), %rcx
	movswl	20(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)        # 4-byte Spill
.LBB33_19:                              # %cond.end.56
	movl	-100(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
	movq	-8(%rbp), %rcx
	movq	80(%rcx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB33_20
	jmp	.LBB33_34
.LBB33_20:                              # %cond.true.59
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB33_49
# BB#21:                                # %land.lhs.true.62
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB33_49
# BB#22:                                # %land.lhs.true.66
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB33_49
# BB#23:                                # %land.lhs.true.74
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB33_49
# BB#24:                                # %land.lhs.true.80
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -116(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB33_25
	jmp	.LBB33_30
.LBB33_25:                              # %cond.true.84
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB33_32
# BB#26:                                # %land.lhs.true.89
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB33_32
# BB#27:                                # %land.lhs.true.95
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB33_32
# BB#28:                                # %land.lhs.true.104
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB33_32
# BB#29:                                # %land.lhs.true.110
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB33_31
	jmp	.LBB33_32
.LBB33_30:                              # %cond.false.117
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB33_31
	jmp	.LBB33_32
.LBB33_31:                              # %cond.true.118
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -132(%rbp)        # 4-byte Spill
	jmp	.LBB33_33
.LBB33_32:                              # %cond.false.122
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -132(%rbp)        # 4-byte Spill
.LBB33_33:                              # %cond.end.126
	movl	-132(%rbp), %eax        # 4-byte Reload
	movl	-116(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB33_35
	jmp	.LBB33_49
.LBB33_34:                              # %cond.false.130
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB33_35
	jmp	.LBB33_49
.LBB33_35:                              # %cond.true.131
	movq	-8(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB33_37
# BB#36:                                # %cond.true.134
	movq	-8(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -136(%rbp)        # 4-byte Spill
	jmp	.LBB33_48
.LBB33_37:                              # %cond.false.136
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB33_40
# BB#38:                                # %land.lhs.true.138
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB33_40
# BB#39:                                # %cond.true.141
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB33_41
	jmp	.LBB33_46
.LBB33_40:                              # %cond.false.145
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB33_41
	jmp	.LBB33_46
.LBB33_41:                              # %cond.true.146
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB33_44
# BB#42:                                # %land.lhs.true.149
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB33_44
# BB#43:                                # %cond.true.153
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB33_45
.LBB33_44:                              # %cond.false.157
	xorl	%eax, %eax
	movl	%eax, -140(%rbp)        # 4-byte Spill
	jmp	.LBB33_45
.LBB33_45:                              # %cond.end.158
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, -144(%rbp)        # 4-byte Spill
	jmp	.LBB33_47
.LBB33_46:                              # %cond.false.160
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -144(%rbp)        # 4-byte Spill
.LBB33_47:                              # %cond.end.164
	movl	-144(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -136(%rbp)        # 4-byte Spill
.LBB33_48:                              # %cond.end.167
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB33_50
.LBB33_49:                              # %cond.false.169
	xorl	%eax, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB33_50
.LBB33_50:                              # %cond.end.170
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB33_55
# BB#51:                                # %if.then.174
	movl	-72(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	cmpl	-76(%rbp), %eax
	jle	.LBB33_53
# BB#52:                                # %cond.true.180
	movl	-72(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	-64(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB33_54
.LBB33_53:                              # %cond.false.184
	movl	-76(%rbp), %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB33_54:                              # %cond.end.185
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB33_58
.LBB33_55:                              # %if.else
	movq	-8(%rbp), %rdi
	callq	window_text_bottom_y
	subl	-76(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jle	.LBB33_57
# BB#56:                                # %if.then.192
	movl	-64(%rbp), %eax
	subl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB33_57:                              # %if.end.195
	jmp	.LBB33_58
.LBB33_58:                              # %if.end.196
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	window_box_left
	addl	-60(%rbp), %eax
	movq	-32(%rbp), %rdi
	movl	%eax, (%rdi)
	movl	-64(%rbp), %eax
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movl	332(%rdi), %esi
	movq	-8(%rbp), %rdi
	addl	244(%rdi), %esi
	addl	%esi, %eax
	movq	-40(%rbp), %rdi
	movl	%eax, (%rdi)
	movl	-72(%rbp), %eax
	movq	-48(%rbp), %rdi
	movl	%eax, (%rdi)
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end33:
	.size	get_phys_cursor_geometry, .Lfunc_end33-get_phys_cursor_geometry
	.cfi_endproc

	.globl	remember_mouse_glyph
	.align	16, 0x90
	.type	remember_mouse_glyph,@function
remember_mouse_glyph:                   # @remember_mouse_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp102:
	.cfi_def_cfa_offset 16
.Ltmp103:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp104:
	.cfi_def_cfa_register %rbp
	subq	$1872, %rsp             # imm = 0x750
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	%rcx, -24(%rbp)
	testb	$1, globals+3438
	je	.LBB34_2
# BB#1:                                 # %if.then
	movl	$1, -88(%rbp)
	movl	$1, -84(%rbp)
	jmp	.LBB34_618
.LBB34_2:                               # %if.else
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_4
# BB#3:                                 # %lor.lhs.false
	leaq	-68(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	window_from_coordinates
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_5
.LBB34_4:                               # %if.then.2
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	movl	168(%rax), %ecx
	movl	%ecx, -84(%rbp)
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	movl	172(%rax), %ecx
	movl	%ecx, -88(%rbp)
	jmp	.LBB34_618
.LBB34_5:                               # %if.end
	jmp	.LBB34_6
.LBB34_6:                               # %if.end.7
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	364(%rax), %ecx
	movl	%ecx, -84(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -88(%rbp)
	movq	-40(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	window_relative_x_coord
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	movq	-40(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movl	332(%rdi), %ecx
	movq	-40(%rbp), %rdi
	addl	244(%rdi), %ecx
	subl	%ecx, %eax
	movl	%eax, -80(%rbp)
	movq	-40(%rbp), %rdi
	movq	192(%rdi), %rdi
	movq	8(%rdi), %rdi
	movq	236(%rdi), %rdi
	shrq	$20, %rdi
	andq	$1, %rdi
	testq	$1, %rdi
	je	.LBB34_8
# BB#7:                                 # %cond.true
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB34_9
.LBB34_8:                               # %cond.false
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB34_9:                               # %cond.end
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-40(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_10
	jmp	.LBB34_16
.LBB34_10:                              # %cond.true.27
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -129(%rbp)         # 1-byte Spill
	jne	.LBB34_15
# BB#11:                                # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -129(%rbp)         # 1-byte Spill
	jne	.LBB34_15
# BB#12:                                # %land.lhs.true.35
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -129(%rbp)         # 1-byte Spill
	je	.LBB34_15
# BB#13:                                # %land.lhs.true.42
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-144(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -129(%rbp)         # 1-byte Spill
	je	.LBB34_15
# BB#14:                                # %land.rhs
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -129(%rbp)         # 1-byte Spill
.LBB34_15:                              # %land.end
	movb	-129(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
	jmp	.LBB34_17
.LBB34_16:                              # %cond.false.51
	xorl	%eax, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB34_17
.LBB34_17:                              # %cond.end.52
	movl	-148(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-128(%rbp), %rdi        # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -64(%rbp)
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %r8w
	shrw	$11, %r8w
	andw	$1, %r8w
	testw	$1, %r8w
	je	.LBB34_19
# BB#18:                                # %if.then.63
	movl	$1, -72(%rbp)
	movl	$2, -68(%rbp)
	jmp	.LBB34_27
.LBB34_19:                              # %if.end.64
	movl	-68(%rbp), %eax
	decl	%eax
	movl	%eax, %ecx
	subl	$11, %eax
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	movl	%eax, -164(%rbp)        # 4-byte Spill
	ja	.LBB34_617
# BB#627:                               # %if.end.64
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	.LJTI34_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB34_20:                              # %sw.bb
	movl	$0, -72(%rbp)
	jmp	.LBB34_27
.LBB34_21:                              # %sw.bb.65
	movl	$2, -72(%rbp)
	jmp	.LBB34_27
.LBB34_22:                              # %sw.bb.66
	cmpl	$4, -68(%rbp)
	jne	.LBB34_24
# BB#23:                                # %cond.true.68
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB34_25
.LBB34_24:                              # %cond.false.71
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	addq	$-256, %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB34_25:                              # %cond.end.79
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -16(%rbp)
	movl	$1, -72(%rbp)
	jmp	.LBB34_36
.LBB34_26:                              # %sw.bb.82
	movl	$1, -72(%rbp)
.LBB34_27:                              # %text_glyph
	movq	$0, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB34_28:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -177(%rbp)         # 1-byte Spill
	ja	.LBB34_30
# BB#29:                                # %land.rhs.84
                                        #   in Loop: Header=BB34_28 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	movb	%al, %cl
	movb	%cl, -177(%rbp)         # 1-byte Spill
.LBB34_30:                              # %land.end.89
                                        #   in Loop: Header=BB34_28 Depth=1
	movb	-177(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB34_31
	jmp	.LBB34_35
.LBB34_31:                              # %for.body
                                        #   in Loop: Header=BB34_28 Depth=1
	movq	-48(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-48(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-80(%rbp), %ecx
	jle	.LBB34_33
# BB#32:                                # %if.then.95
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB34_35
.LBB34_33:                              # %if.end.97
                                        #   in Loop: Header=BB34_28 Depth=1
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc
                                        #   in Loop: Header=BB34_28 Depth=1
	movq	-48(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -48(%rbp)
	jmp	.LBB34_28
.LBB34_35:                              # %for.end
	jmp	.LBB34_36
.LBB34_36:                              # %text_glyph_row_found
	cmpq	$0, -56(%rbp)
	je	.LBB34_258
# BB#37:                                # %land.lhs.true.99
	movl	-16(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jg	.LBB34_258
# BB#38:                                # %if.then.101
	movslq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movswl	32(%rdx,%rcx,2), %esi
	movslq	%esi, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-56(%rbp), %rax
	movl	60(%rax), %esi
	movl	%esi, -88(%rbp)
	movq	-56(%rbp), %rax
	movl	44(%rax), %esi
	movl	%esi, -12(%rbp)
.LBB34_39:                              # %for.cond.108
                                        # =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jae	.LBB34_44
# BB#40:                                # %for.body.111
                                        #   in Loop: Header=BB34_39 Depth=1
	movl	-12(%rbp), %eax
	movq	-96(%rbp), %rcx
	movswl	16(%rcx), %edx
	addl	%edx, %eax
	cmpl	-76(%rbp), %eax
	jle	.LBB34_42
# BB#41:                                # %if.then.116
	jmp	.LBB34_44
.LBB34_42:                              # %if.end.117
                                        #   in Loop: Header=BB34_39 Depth=1
	jmp	.LBB34_43
.LBB34_43:                              # %for.inc.118
                                        #   in Loop: Header=BB34_39 Depth=1
	movq	-96(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-12(%rbp), %ecx
	movl	%ecx, -12(%rbp)
	movq	-96(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB34_39
.LBB34_44:                              # %for.end.123
	movq	-96(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jae	.LBB34_48
# BB#45:                                # %if.then.126
	movq	-96(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$3, %ecx
	jne	.LBB34_47
# BB#46:                                # %if.then.131
	movq	-24(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movw	$0, 2(%rax)
	movq	-24(%rbp), %rax
	movw	$0, 4(%rax)
	movq	-24(%rbp), %rax
	movw	$0, 6(%rax)
	jmp	.LBB34_626
.LBB34_47:                              # %if.end.136
	movq	-96(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	%ecx, -84(%rbp)
	jmp	.LBB34_49
.LBB34_48:                              # %if.else.139
	movl	-12(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	-84(%rbp)
	imull	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_49:                              # %if.end.142
	cmpl	$2, -68(%rbp)
	je	.LBB34_257
# BB#50:                                # %land.lhs.true.145
	cmpl	$4, -68(%rbp)
	je	.LBB34_257
# BB#51:                                # %if.then.148
	movq	-40(%rbp), %rdi
	movl	-72(%rbp), %esi
	callq	window_box_left_offset
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-88(%rbp), %eax
	movq	-40(%rbp), %rdi
	movl	260(%rdi), %esi
	movq	-40(%rbp), %rdi
	movl	244(%rdi), %ecx
	movq	-40(%rbp), %rdi
	addl	260(%rdi), %ecx
	movq	-40(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	40(%rdi), %rdi
	movl	%eax, -184(%rbp)        # 4-byte Spill
	movl	%esi, -188(%rbp)        # 4-byte Spill
	movl	%ecx, -192(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -196(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-196(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-192(%rbp), %esi        # 4-byte Reload
	cmpl	%ecx, %esi
	jne	.LBB34_53
# BB#52:                                # %land.lhs.true.167
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_55
.LBB34_53:                              # %lor.lhs.false.175
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_55
# BB#54:                                # %lor.lhs.false.181
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_56
.LBB34_55:                              # %cond.true.188
	xorl	%eax, %eax
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB34_57
.LBB34_56:                              # %cond.false.189
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
.LBB34_57:                              # %cond.end.192
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	-188(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -216(%rbp)        # 4-byte Spill
	jne	.LBB34_60
# BB#58:                                # %lor.lhs.false.201
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_61
# BB#59:                                # %land.lhs.true.207
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_61
.LBB34_60:                              # %cond.true.214
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_66
	jmp	.LBB34_70
.LBB34_61:                              # %cond.false.215
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_63
# BB#62:                                # %cond.true.219
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_66
	jmp	.LBB34_70
.LBB34_63:                              # %cond.false.227
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_65
# BB#64:                                # %cond.true.232
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_66
	jmp	.LBB34_70
.LBB34_65:                              # %cond.false.233
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_66
	jmp	.LBB34_70
.LBB34_66:                              # %cond.true.234
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_68
# BB#67:                                # %cond.true.237
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -236(%rbp)        # 4-byte Spill
	jmp	.LBB34_69
.LBB34_68:                              # %cond.false.239
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -236(%rbp)        # 4-byte Spill
.LBB34_69:                              # %cond.end.242
	movl	-236(%rbp), %eax        # 4-byte Reload
	movl	%eax, -240(%rbp)        # 4-byte Spill
	jmp	.LBB34_71
.LBB34_70:                              # %cond.false.244
	xorl	%eax, %eax
	movl	%eax, -240(%rbp)        # 4-byte Spill
	jmp	.LBB34_71
.LBB34_71:                              # %cond.end.245
	movl	-240(%rbp), %eax        # 4-byte Reload
	movl	-216(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -244(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_72
	jmp	.LBB34_77
.LBB34_72:                              # %cond.true.251
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_99
# BB#73:                                # %land.lhs.true.256
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_99
# BB#74:                                # %land.lhs.true.262
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_99
# BB#75:                                # %land.lhs.true.271
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_99
# BB#76:                                # %land.lhs.true.278
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_78
	jmp	.LBB34_99
.LBB34_77:                              # %cond.false.285
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_78
	jmp	.LBB34_99
.LBB34_78:                              # %cond.true.286
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_80
# BB#79:                                # %cond.true.289
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
	jmp	.LBB34_98
.LBB34_80:                              # %cond.false.291
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_83
# BB#81:                                # %land.lhs.true.294
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_83
# BB#82:                                # %cond.true.298
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_84
	jmp	.LBB34_89
.LBB34_83:                              # %cond.false.308
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_84
	jmp	.LBB34_89
.LBB34_84:                              # %cond.true.309
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_87
# BB#85:                                # %land.lhs.true.312
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_87
# BB#86:                                # %cond.true.316
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -264(%rbp)        # 4-byte Spill
	jmp	.LBB34_88
.LBB34_87:                              # %cond.false.325
	xorl	%eax, %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
	jmp	.LBB34_88
.LBB34_88:                              # %cond.end.326
	movl	-264(%rbp), %eax        # 4-byte Reload
	movl	%eax, -268(%rbp)        # 4-byte Spill
	jmp	.LBB34_97
.LBB34_89:                              # %cond.false.328
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	movb	%al, -281(%rbp)         # 1-byte Spill
	je	.LBB34_96
# BB#90:                                # %lor.lhs.false.332
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-296(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -281(%rbp)         # 1-byte Spill
	je	.LBB34_96
# BB#91:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -297(%rbp)         # 1-byte Spill
	jle	.LBB34_95
# BB#92:                                # %land.lhs.true.338
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-312(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -297(%rbp)         # 1-byte Spill
	je	.LBB34_95
# BB#93:                                # %land.lhs.true.342
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-320(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -297(%rbp)         # 1-byte Spill
	jne	.LBB34_95
# BB#94:                                # %land.rhs.347
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-328(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -297(%rbp)         # 1-byte Spill
.LBB34_95:                              # %land.end.351
	movb	-297(%rbp), %al         # 1-byte Reload
	movb	%al, -281(%rbp)         # 1-byte Spill
.LBB34_96:                              # %lor.end
	movb	-281(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -268(%rbp)        # 4-byte Spill
.LBB34_97:                              # %cond.end.355
	movl	-268(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -260(%rbp)        # 4-byte Spill
.LBB34_98:                              # %cond.end.358
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, -332(%rbp)        # 4-byte Spill
	jmp	.LBB34_100
.LBB34_99:                              # %cond.false.360
	xorl	%eax, %eax
	movl	%eax, -332(%rbp)        # 4-byte Spill
	jmp	.LBB34_100
.LBB34_100:                             # %cond.end.361
	movl	-332(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-244(%rbp), %edx        # 4-byte Reload
	subl	%eax, %edx
	subl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jle	.LBB34_102
# BB#101:                               # %cond.true.367
	xorl	%eax, %eax
	movl	%eax, -336(%rbp)        # 4-byte Spill
	jmp	.LBB34_152
.LBB34_102:                             # %cond.false.368
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -340(%rbp)        # 4-byte Spill
	movl	%edx, -344(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -348(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-348(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-344(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_104
# BB#103:                               # %land.lhs.true.386
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-360(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_106
.LBB34_104:                             # %lor.lhs.false.395
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_106
# BB#105:                               # %lor.lhs.false.402
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_107
.LBB34_106:                             # %cond.true.409
	xorl	%eax, %eax
	movl	%eax, -364(%rbp)        # 4-byte Spill
	jmp	.LBB34_108
.LBB34_107:                             # %cond.false.410
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -364(%rbp)        # 4-byte Spill
.LBB34_108:                             # %cond.end.414
	movl	-364(%rbp), %eax        # 4-byte Reload
	movl	-340(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -368(%rbp)        # 4-byte Spill
	jne	.LBB34_111
# BB#109:                               # %lor.lhs.false.423
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_112
# BB#110:                               # %land.lhs.true.429
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_112
.LBB34_111:                             # %cond.true.436
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_117
	jmp	.LBB34_121
.LBB34_112:                             # %cond.false.437
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-376(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_114
# BB#113:                               # %cond.true.442
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_117
	jmp	.LBB34_121
.LBB34_114:                             # %cond.false.451
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-384(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_116
# BB#115:                               # %cond.true.456
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_117
	jmp	.LBB34_121
.LBB34_116:                             # %cond.false.457
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_117
	jmp	.LBB34_121
.LBB34_117:                             # %cond.true.458
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_119
# BB#118:                               # %cond.true.462
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -388(%rbp)        # 4-byte Spill
	jmp	.LBB34_120
.LBB34_119:                             # %cond.false.464
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -388(%rbp)        # 4-byte Spill
.LBB34_120:                             # %cond.end.468
	movl	-388(%rbp), %eax        # 4-byte Reload
	movl	%eax, -392(%rbp)        # 4-byte Spill
	jmp	.LBB34_122
.LBB34_121:                             # %cond.false.470
	xorl	%eax, %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
	jmp	.LBB34_122
.LBB34_122:                             # %cond.end.471
	movl	-392(%rbp), %eax        # 4-byte Reload
	movl	-368(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -396(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_123
	jmp	.LBB34_128
.LBB34_123:                             # %cond.true.477
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_150
# BB#124:                               # %land.lhs.true.482
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_150
# BB#125:                               # %land.lhs.true.488
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_150
# BB#126:                               # %land.lhs.true.497
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-408(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_150
# BB#127:                               # %land.lhs.true.504
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_129
	jmp	.LBB34_150
.LBB34_128:                             # %cond.false.511
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_129
	jmp	.LBB34_150
.LBB34_129:                             # %cond.true.512
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_131
# BB#130:                               # %cond.true.516
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -412(%rbp)        # 4-byte Spill
	jmp	.LBB34_149
.LBB34_131:                             # %cond.false.518
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_134
# BB#132:                               # %land.lhs.true.521
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_134
# BB#133:                               # %cond.true.525
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_135
	jmp	.LBB34_140
.LBB34_134:                             # %cond.false.535
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_135
	jmp	.LBB34_140
.LBB34_135:                             # %cond.true.536
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_138
# BB#136:                               # %land.lhs.true.539
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_138
# BB#137:                               # %cond.true.543
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -416(%rbp)        # 4-byte Spill
	jmp	.LBB34_139
.LBB34_138:                             # %cond.false.552
	xorl	%eax, %eax
	movl	%eax, -416(%rbp)        # 4-byte Spill
	jmp	.LBB34_139
.LBB34_139:                             # %cond.end.553
	movl	-416(%rbp), %eax        # 4-byte Reload
	movl	%eax, -420(%rbp)        # 4-byte Spill
	jmp	.LBB34_148
.LBB34_140:                             # %cond.false.555
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -432(%rbp)        # 8-byte Spill
	movb	%al, -433(%rbp)         # 1-byte Spill
	je	.LBB34_147
# BB#141:                               # %lor.lhs.false.559
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-448(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -433(%rbp)         # 1-byte Spill
	je	.LBB34_147
# BB#142:                               # %lor.rhs.563
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -449(%rbp)         # 1-byte Spill
	jle	.LBB34_146
# BB#143:                               # %land.lhs.true.566
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-464(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -449(%rbp)         # 1-byte Spill
	je	.LBB34_146
# BB#144:                               # %land.lhs.true.570
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-472(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -449(%rbp)         # 1-byte Spill
	jne	.LBB34_146
# BB#145:                               # %land.rhs.575
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-480(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -449(%rbp)         # 1-byte Spill
.LBB34_146:                             # %land.end.579
	movb	-449(%rbp), %al         # 1-byte Reload
	movb	%al, -433(%rbp)         # 1-byte Spill
.LBB34_147:                             # %lor.end.581
	movb	-433(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-432(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -420(%rbp)        # 4-byte Spill
.LBB34_148:                             # %cond.end.584
	movl	-420(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -412(%rbp)        # 4-byte Spill
.LBB34_149:                             # %cond.end.587
	movl	-412(%rbp), %eax        # 4-byte Reload
	movl	%eax, -484(%rbp)        # 4-byte Spill
	jmp	.LBB34_151
.LBB34_150:                             # %cond.false.589
	xorl	%eax, %eax
	movl	%eax, -484(%rbp)        # 4-byte Spill
	jmp	.LBB34_151
.LBB34_151:                             # %cond.end.590
	movl	-484(%rbp), %eax        # 4-byte Reload
	movl	-396(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	subl	-16(%rbp), %ecx
	movl	%ecx, -336(%rbp)        # 4-byte Spill
.LBB34_152:                             # %cond.end.594
	movl	-336(%rbp), %eax        # 4-byte Reload
	movl	-184(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB34_154
# BB#153:                               # %cond.true.598
	movl	-88(%rbp), %eax
	movl	%eax, -488(%rbp)        # 4-byte Spill
	jmp	.LBB34_256
.LBB34_154:                             # %cond.false.599
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -492(%rbp)        # 4-byte Spill
	movl	%edx, -496(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -500(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-500(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-496(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_156
# BB#155:                               # %land.lhs.true.617
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-512(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_158
.LBB34_156:                             # %lor.lhs.false.626
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_158
# BB#157:                               # %lor.lhs.false.633
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_159
.LBB34_158:                             # %cond.true.640
	xorl	%eax, %eax
	movl	%eax, -516(%rbp)        # 4-byte Spill
	jmp	.LBB34_160
.LBB34_159:                             # %cond.false.641
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -516(%rbp)        # 4-byte Spill
.LBB34_160:                             # %cond.end.645
	movl	-516(%rbp), %eax        # 4-byte Reload
	movl	-492(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -520(%rbp)        # 4-byte Spill
	jne	.LBB34_163
# BB#161:                               # %lor.lhs.false.654
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_164
# BB#162:                               # %land.lhs.true.660
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_164
.LBB34_163:                             # %cond.true.667
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_169
	jmp	.LBB34_173
.LBB34_164:                             # %cond.false.668
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-528(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_166
# BB#165:                               # %cond.true.673
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_169
	jmp	.LBB34_173
.LBB34_166:                             # %cond.false.682
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-536(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_168
# BB#167:                               # %cond.true.687
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_169
	jmp	.LBB34_173
.LBB34_168:                             # %cond.false.688
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_169
	jmp	.LBB34_173
.LBB34_169:                             # %cond.true.689
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_171
# BB#170:                               # %cond.true.693
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -540(%rbp)        # 4-byte Spill
	jmp	.LBB34_172
.LBB34_171:                             # %cond.false.695
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -540(%rbp)        # 4-byte Spill
.LBB34_172:                             # %cond.end.699
	movl	-540(%rbp), %eax        # 4-byte Reload
	movl	%eax, -544(%rbp)        # 4-byte Spill
	jmp	.LBB34_174
.LBB34_173:                             # %cond.false.701
	xorl	%eax, %eax
	movl	%eax, -544(%rbp)        # 4-byte Spill
	jmp	.LBB34_174
.LBB34_174:                             # %cond.end.702
	movl	-544(%rbp), %eax        # 4-byte Reload
	movl	-520(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -548(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_175
	jmp	.LBB34_180
.LBB34_175:                             # %cond.true.708
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_202
# BB#176:                               # %land.lhs.true.713
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_202
# BB#177:                               # %land.lhs.true.719
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_202
# BB#178:                               # %land.lhs.true.728
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-560(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_202
# BB#179:                               # %land.lhs.true.735
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_181
	jmp	.LBB34_202
.LBB34_180:                             # %cond.false.742
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_181
	jmp	.LBB34_202
.LBB34_181:                             # %cond.true.743
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_183
# BB#182:                               # %cond.true.747
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -564(%rbp)        # 4-byte Spill
	jmp	.LBB34_201
.LBB34_183:                             # %cond.false.749
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_186
# BB#184:                               # %land.lhs.true.752
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_186
# BB#185:                               # %cond.true.756
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_187
	jmp	.LBB34_192
.LBB34_186:                             # %cond.false.766
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_187
	jmp	.LBB34_192
.LBB34_187:                             # %cond.true.767
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_190
# BB#188:                               # %land.lhs.true.770
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_190
# BB#189:                               # %cond.true.774
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -568(%rbp)        # 4-byte Spill
	jmp	.LBB34_191
.LBB34_190:                             # %cond.false.783
	xorl	%eax, %eax
	movl	%eax, -568(%rbp)        # 4-byte Spill
	jmp	.LBB34_191
.LBB34_191:                             # %cond.end.784
	movl	-568(%rbp), %eax        # 4-byte Reload
	movl	%eax, -572(%rbp)        # 4-byte Spill
	jmp	.LBB34_200
.LBB34_192:                             # %cond.false.786
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -584(%rbp)        # 8-byte Spill
	movb	%al, -585(%rbp)         # 1-byte Spill
	je	.LBB34_199
# BB#193:                               # %lor.lhs.false.790
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-600(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -585(%rbp)         # 1-byte Spill
	je	.LBB34_199
# BB#194:                               # %lor.rhs.794
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -601(%rbp)         # 1-byte Spill
	jle	.LBB34_198
# BB#195:                               # %land.lhs.true.797
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-616(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -601(%rbp)         # 1-byte Spill
	je	.LBB34_198
# BB#196:                               # %land.lhs.true.801
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-624(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -601(%rbp)         # 1-byte Spill
	jne	.LBB34_198
# BB#197:                               # %land.rhs.806
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-632(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -601(%rbp)         # 1-byte Spill
.LBB34_198:                             # %land.end.810
	movb	-601(%rbp), %al         # 1-byte Reload
	movb	%al, -585(%rbp)         # 1-byte Spill
.LBB34_199:                             # %lor.end.812
	movb	-585(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-584(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -572(%rbp)        # 4-byte Spill
.LBB34_200:                             # %cond.end.815
	movl	-572(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -564(%rbp)        # 4-byte Spill
.LBB34_201:                             # %cond.end.818
	movl	-564(%rbp), %eax        # 4-byte Reload
	movl	%eax, -636(%rbp)        # 4-byte Spill
	jmp	.LBB34_203
.LBB34_202:                             # %cond.false.820
	xorl	%eax, %eax
	movl	%eax, -636(%rbp)        # 4-byte Spill
	jmp	.LBB34_203
.LBB34_203:                             # %cond.end.821
	movl	-636(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-548(%rbp), %edx        # 4-byte Reload
	subl	%eax, %edx
	subl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jle	.LBB34_205
# BB#204:                               # %cond.true.827
	xorl	%eax, %eax
	movl	%eax, -640(%rbp)        # 4-byte Spill
	jmp	.LBB34_255
.LBB34_205:                             # %cond.false.828
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -644(%rbp)        # 4-byte Spill
	movl	%edx, -648(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -652(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-652(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-648(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_207
# BB#206:                               # %land.lhs.true.846
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-664(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_209
.LBB34_207:                             # %lor.lhs.false.855
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_209
# BB#208:                               # %lor.lhs.false.862
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_210
.LBB34_209:                             # %cond.true.869
	xorl	%eax, %eax
	movl	%eax, -668(%rbp)        # 4-byte Spill
	jmp	.LBB34_211
.LBB34_210:                             # %cond.false.870
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -668(%rbp)        # 4-byte Spill
.LBB34_211:                             # %cond.end.874
	movl	-668(%rbp), %eax        # 4-byte Reload
	movl	-644(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -672(%rbp)        # 4-byte Spill
	jne	.LBB34_214
# BB#212:                               # %lor.lhs.false.883
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_215
# BB#213:                               # %land.lhs.true.889
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_215
.LBB34_214:                             # %cond.true.896
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_220
	jmp	.LBB34_224
.LBB34_215:                             # %cond.false.897
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-680(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_217
# BB#216:                               # %cond.true.902
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_220
	jmp	.LBB34_224
.LBB34_217:                             # %cond.false.911
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-688(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_219
# BB#218:                               # %cond.true.916
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_220
	jmp	.LBB34_224
.LBB34_219:                             # %cond.false.917
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_220
	jmp	.LBB34_224
.LBB34_220:                             # %cond.true.918
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_222
# BB#221:                               # %cond.true.922
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -692(%rbp)        # 4-byte Spill
	jmp	.LBB34_223
.LBB34_222:                             # %cond.false.924
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -692(%rbp)        # 4-byte Spill
.LBB34_223:                             # %cond.end.928
	movl	-692(%rbp), %eax        # 4-byte Reload
	movl	%eax, -696(%rbp)        # 4-byte Spill
	jmp	.LBB34_225
.LBB34_224:                             # %cond.false.930
	xorl	%eax, %eax
	movl	%eax, -696(%rbp)        # 4-byte Spill
	jmp	.LBB34_225
.LBB34_225:                             # %cond.end.931
	movl	-696(%rbp), %eax        # 4-byte Reload
	movl	-672(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -700(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_226
	jmp	.LBB34_231
.LBB34_226:                             # %cond.true.937
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_253
# BB#227:                               # %land.lhs.true.942
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_253
# BB#228:                               # %land.lhs.true.948
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_253
# BB#229:                               # %land.lhs.true.957
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-712(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_253
# BB#230:                               # %land.lhs.true.964
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_232
	jmp	.LBB34_253
.LBB34_231:                             # %cond.false.971
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_232
	jmp	.LBB34_253
.LBB34_232:                             # %cond.true.972
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_234
# BB#233:                               # %cond.true.976
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -716(%rbp)        # 4-byte Spill
	jmp	.LBB34_252
.LBB34_234:                             # %cond.false.978
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_237
# BB#235:                               # %land.lhs.true.981
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_237
# BB#236:                               # %cond.true.985
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_238
	jmp	.LBB34_243
.LBB34_237:                             # %cond.false.995
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_238
	jmp	.LBB34_243
.LBB34_238:                             # %cond.true.996
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_241
# BB#239:                               # %land.lhs.true.999
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_241
# BB#240:                               # %cond.true.1003
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -720(%rbp)        # 4-byte Spill
	jmp	.LBB34_242
.LBB34_241:                             # %cond.false.1012
	xorl	%eax, %eax
	movl	%eax, -720(%rbp)        # 4-byte Spill
	jmp	.LBB34_242
.LBB34_242:                             # %cond.end.1013
	movl	-720(%rbp), %eax        # 4-byte Reload
	movl	%eax, -724(%rbp)        # 4-byte Spill
	jmp	.LBB34_251
.LBB34_243:                             # %cond.false.1015
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -736(%rbp)        # 8-byte Spill
	movb	%al, -737(%rbp)         # 1-byte Spill
	je	.LBB34_250
# BB#244:                               # %lor.lhs.false.1019
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-752(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -737(%rbp)         # 1-byte Spill
	je	.LBB34_250
# BB#245:                               # %lor.rhs.1023
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -753(%rbp)         # 1-byte Spill
	jle	.LBB34_249
# BB#246:                               # %land.lhs.true.1026
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-768(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -753(%rbp)         # 1-byte Spill
	je	.LBB34_249
# BB#247:                               # %land.lhs.true.1030
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -776(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-776(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -753(%rbp)         # 1-byte Spill
	jne	.LBB34_249
# BB#248:                               # %land.rhs.1035
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -784(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-784(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -753(%rbp)         # 1-byte Spill
.LBB34_249:                             # %land.end.1039
	movb	-753(%rbp), %al         # 1-byte Reload
	movb	%al, -737(%rbp)         # 1-byte Spill
.LBB34_250:                             # %lor.end.1041
	movb	-737(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-736(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -724(%rbp)        # 4-byte Spill
.LBB34_251:                             # %cond.end.1044
	movl	-724(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -716(%rbp)        # 4-byte Spill
.LBB34_252:                             # %cond.end.1047
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	%eax, -788(%rbp)        # 4-byte Spill
	jmp	.LBB34_254
.LBB34_253:                             # %cond.false.1049
	xorl	%eax, %eax
	movl	%eax, -788(%rbp)        # 4-byte Spill
	jmp	.LBB34_254
.LBB34_254:                             # %cond.end.1050
	movl	-788(%rbp), %eax        # 4-byte Reload
	movl	-700(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	subl	-16(%rbp), %ecx
	movl	%ecx, -640(%rbp)        # 4-byte Spill
.LBB34_255:                             # %cond.end.1054
	movl	-640(%rbp), %eax        # 4-byte Reload
	movl	%eax, -488(%rbp)        # 4-byte Spill
.LBB34_256:                             # %cond.end.1056
	movl	-488(%rbp), %eax        # 4-byte Reload
	movl	%eax, -88(%rbp)
.LBB34_257:                             # %if.end.1058
	jmp	.LBB34_467
.LBB34_258:                             # %if.else.1059
	movl	-76(%rbp), %eax
	cltd
	idivl	-84(%rbp)
	imull	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	-88(%rbp)
	imull	-88(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	cmpl	$2, -68(%rbp)
	je	.LBB34_466
# BB#259:                               # %land.lhs.true.1068
	cmpl	$4, -68(%rbp)
	je	.LBB34_466
# BB#260:                               # %if.then.1071
	movl	-88(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	260(%rcx), %edx
	movq	-40(%rbp), %rcx
	movl	244(%rcx), %esi
	movq	-40(%rbp), %rcx
	addl	260(%rcx), %esi
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	40(%rcx), %rdi
	movl	%eax, -792(%rbp)        # 4-byte Spill
	movl	%edx, -796(%rbp)        # 4-byte Spill
	movl	%esi, -800(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%edx, -804(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-804(%rbp), %edx        # 4-byte Reload
	addl	260(%rax), %edx
	movl	-800(%rbp), %esi        # 4-byte Reload
	cmpl	%edx, %esi
	jne	.LBB34_262
# BB#261:                               # %land.lhs.true.1089
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-816(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_264
.LBB34_262:                             # %lor.lhs.false.1098
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_264
# BB#263:                               # %lor.lhs.false.1105
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_265
.LBB34_264:                             # %cond.true.1112
	xorl	%eax, %eax
	movl	%eax, -820(%rbp)        # 4-byte Spill
	jmp	.LBB34_266
.LBB34_265:                             # %cond.false.1113
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -820(%rbp)        # 4-byte Spill
.LBB34_266:                             # %cond.end.1117
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	-796(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -824(%rbp)        # 4-byte Spill
	jne	.LBB34_269
# BB#267:                               # %lor.lhs.false.1126
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_270
# BB#268:                               # %land.lhs.true.1132
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_270
.LBB34_269:                             # %cond.true.1139
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_275
	jmp	.LBB34_279
.LBB34_270:                             # %cond.false.1140
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-832(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_272
# BB#271:                               # %cond.true.1145
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_275
	jmp	.LBB34_279
.LBB34_272:                             # %cond.false.1154
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-840(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_274
# BB#273:                               # %cond.true.1159
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_275
	jmp	.LBB34_279
.LBB34_274:                             # %cond.false.1160
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_275
	jmp	.LBB34_279
.LBB34_275:                             # %cond.true.1161
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_277
# BB#276:                               # %cond.true.1165
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -844(%rbp)        # 4-byte Spill
	jmp	.LBB34_278
.LBB34_277:                             # %cond.false.1167
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -844(%rbp)        # 4-byte Spill
.LBB34_278:                             # %cond.end.1171
	movl	-844(%rbp), %eax        # 4-byte Reload
	movl	%eax, -848(%rbp)        # 4-byte Spill
	jmp	.LBB34_280
.LBB34_279:                             # %cond.false.1173
	xorl	%eax, %eax
	movl	%eax, -848(%rbp)        # 4-byte Spill
	jmp	.LBB34_280
.LBB34_280:                             # %cond.end.1174
	movl	-848(%rbp), %eax        # 4-byte Reload
	movl	-824(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -852(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_281
	jmp	.LBB34_286
.LBB34_281:                             # %cond.true.1180
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_308
# BB#282:                               # %land.lhs.true.1185
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_308
# BB#283:                               # %land.lhs.true.1191
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_308
# BB#284:                               # %land.lhs.true.1200
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-864(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_308
# BB#285:                               # %land.lhs.true.1207
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_287
	jmp	.LBB34_308
.LBB34_286:                             # %cond.false.1214
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_287
	jmp	.LBB34_308
.LBB34_287:                             # %cond.true.1215
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_289
# BB#288:                               # %cond.true.1219
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -868(%rbp)        # 4-byte Spill
	jmp	.LBB34_307
.LBB34_289:                             # %cond.false.1221
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_292
# BB#290:                               # %land.lhs.true.1224
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_292
# BB#291:                               # %cond.true.1228
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_293
	jmp	.LBB34_298
.LBB34_292:                             # %cond.false.1238
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_293
	jmp	.LBB34_298
.LBB34_293:                             # %cond.true.1239
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_296
# BB#294:                               # %land.lhs.true.1242
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_296
# BB#295:                               # %cond.true.1246
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -872(%rbp)        # 4-byte Spill
	jmp	.LBB34_297
.LBB34_296:                             # %cond.false.1255
	xorl	%eax, %eax
	movl	%eax, -872(%rbp)        # 4-byte Spill
	jmp	.LBB34_297
.LBB34_297:                             # %cond.end.1256
	movl	-872(%rbp), %eax        # 4-byte Reload
	movl	%eax, -876(%rbp)        # 4-byte Spill
	jmp	.LBB34_306
.LBB34_298:                             # %cond.false.1258
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movb	%al, -889(%rbp)         # 1-byte Spill
	je	.LBB34_305
# BB#299:                               # %lor.lhs.false.1262
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -904(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-904(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -889(%rbp)         # 1-byte Spill
	je	.LBB34_305
# BB#300:                               # %lor.rhs.1266
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -905(%rbp)         # 1-byte Spill
	jle	.LBB34_304
# BB#301:                               # %land.lhs.true.1269
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-920(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -905(%rbp)         # 1-byte Spill
	je	.LBB34_304
# BB#302:                               # %land.lhs.true.1273
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -928(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-928(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -905(%rbp)         # 1-byte Spill
	jne	.LBB34_304
# BB#303:                               # %land.rhs.1278
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -936(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-936(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -905(%rbp)         # 1-byte Spill
.LBB34_304:                             # %land.end.1282
	movb	-905(%rbp), %al         # 1-byte Reload
	movb	%al, -889(%rbp)         # 1-byte Spill
.LBB34_305:                             # %lor.end.1284
	movb	-889(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-888(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -876(%rbp)        # 4-byte Spill
.LBB34_306:                             # %cond.end.1287
	movl	-876(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -868(%rbp)        # 4-byte Spill
.LBB34_307:                             # %cond.end.1290
	movl	-868(%rbp), %eax        # 4-byte Reload
	movl	%eax, -940(%rbp)        # 4-byte Spill
	jmp	.LBB34_309
.LBB34_308:                             # %cond.false.1292
	xorl	%eax, %eax
	movl	%eax, -940(%rbp)        # 4-byte Spill
	jmp	.LBB34_309
.LBB34_309:                             # %cond.end.1293
	movl	-940(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-852(%rbp), %edx        # 4-byte Reload
	subl	%eax, %edx
	subl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jle	.LBB34_311
# BB#310:                               # %cond.true.1299
	xorl	%eax, %eax
	movl	%eax, -944(%rbp)        # 4-byte Spill
	jmp	.LBB34_361
.LBB34_311:                             # %cond.false.1300
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -948(%rbp)        # 4-byte Spill
	movl	%edx, -952(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -956(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-956(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-952(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_313
# BB#312:                               # %land.lhs.true.1318
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-968(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_315
.LBB34_313:                             # %lor.lhs.false.1327
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_315
# BB#314:                               # %lor.lhs.false.1334
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_316
.LBB34_315:                             # %cond.true.1341
	xorl	%eax, %eax
	movl	%eax, -972(%rbp)        # 4-byte Spill
	jmp	.LBB34_317
.LBB34_316:                             # %cond.false.1342
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -972(%rbp)        # 4-byte Spill
.LBB34_317:                             # %cond.end.1346
	movl	-972(%rbp), %eax        # 4-byte Reload
	movl	-948(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -976(%rbp)        # 4-byte Spill
	jne	.LBB34_320
# BB#318:                               # %lor.lhs.false.1355
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_321
# BB#319:                               # %land.lhs.true.1361
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_321
.LBB34_320:                             # %cond.true.1368
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_326
	jmp	.LBB34_330
.LBB34_321:                             # %cond.false.1369
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-984(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_323
# BB#322:                               # %cond.true.1374
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_326
	jmp	.LBB34_330
.LBB34_323:                             # %cond.false.1383
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-992(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_325
# BB#324:                               # %cond.true.1388
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_326
	jmp	.LBB34_330
.LBB34_325:                             # %cond.false.1389
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_326
	jmp	.LBB34_330
.LBB34_326:                             # %cond.true.1390
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_328
# BB#327:                               # %cond.true.1394
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -996(%rbp)        # 4-byte Spill
	jmp	.LBB34_329
.LBB34_328:                             # %cond.false.1396
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -996(%rbp)        # 4-byte Spill
.LBB34_329:                             # %cond.end.1400
	movl	-996(%rbp), %eax        # 4-byte Reload
	movl	%eax, -1000(%rbp)       # 4-byte Spill
	jmp	.LBB34_331
.LBB34_330:                             # %cond.false.1402
	xorl	%eax, %eax
	movl	%eax, -1000(%rbp)       # 4-byte Spill
	jmp	.LBB34_331
.LBB34_331:                             # %cond.end.1403
	movl	-1000(%rbp), %eax       # 4-byte Reload
	movl	-976(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -1004(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_332
	jmp	.LBB34_337
.LBB34_332:                             # %cond.true.1409
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_359
# BB#333:                               # %land.lhs.true.1414
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_359
# BB#334:                               # %land.lhs.true.1420
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_359
# BB#335:                               # %land.lhs.true.1429
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1016(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_359
# BB#336:                               # %land.lhs.true.1436
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_338
	jmp	.LBB34_359
.LBB34_337:                             # %cond.false.1443
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_338
	jmp	.LBB34_359
.LBB34_338:                             # %cond.true.1444
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_340
# BB#339:                               # %cond.true.1448
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -1020(%rbp)       # 4-byte Spill
	jmp	.LBB34_358
.LBB34_340:                             # %cond.false.1450
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_343
# BB#341:                               # %land.lhs.true.1453
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_343
# BB#342:                               # %cond.true.1457
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_344
	jmp	.LBB34_349
.LBB34_343:                             # %cond.false.1467
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_344
	jmp	.LBB34_349
.LBB34_344:                             # %cond.true.1468
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_347
# BB#345:                               # %land.lhs.true.1471
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_347
# BB#346:                               # %cond.true.1475
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -1024(%rbp)       # 4-byte Spill
	jmp	.LBB34_348
.LBB34_347:                             # %cond.false.1484
	xorl	%eax, %eax
	movl	%eax, -1024(%rbp)       # 4-byte Spill
	jmp	.LBB34_348
.LBB34_348:                             # %cond.end.1485
	movl	-1024(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1028(%rbp)       # 4-byte Spill
	jmp	.LBB34_357
.LBB34_349:                             # %cond.false.1487
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -1040(%rbp)       # 8-byte Spill
	movb	%al, -1041(%rbp)        # 1-byte Spill
	je	.LBB34_356
# BB#350:                               # %lor.lhs.false.1491
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -1041(%rbp)        # 1-byte Spill
	je	.LBB34_356
# BB#351:                               # %lor.rhs.1495
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -1057(%rbp)        # 1-byte Spill
	jle	.LBB34_355
# BB#352:                               # %land.lhs.true.1498
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-1072(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -1057(%rbp)        # 1-byte Spill
	je	.LBB34_355
# BB#353:                               # %land.lhs.true.1502
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-1080(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -1057(%rbp)        # 1-byte Spill
	jne	.LBB34_355
# BB#354:                               # %land.rhs.1507
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-1088(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -1057(%rbp)        # 1-byte Spill
.LBB34_355:                             # %land.end.1511
	movb	-1057(%rbp), %al        # 1-byte Reload
	movb	%al, -1041(%rbp)        # 1-byte Spill
.LBB34_356:                             # %lor.end.1513
	movb	-1041(%rbp), %al        # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-1040(%rbp), %rdi       # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -1028(%rbp)       # 4-byte Spill
.LBB34_357:                             # %cond.end.1516
	movl	-1028(%rbp), %eax       # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -1020(%rbp)       # 4-byte Spill
.LBB34_358:                             # %cond.end.1519
	movl	-1020(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1092(%rbp)       # 4-byte Spill
	jmp	.LBB34_360
.LBB34_359:                             # %cond.false.1521
	xorl	%eax, %eax
	movl	%eax, -1092(%rbp)       # 4-byte Spill
	jmp	.LBB34_360
.LBB34_360:                             # %cond.end.1522
	movl	-1092(%rbp), %eax       # 4-byte Reload
	movl	-1004(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	subl	-16(%rbp), %ecx
	movl	%ecx, -944(%rbp)        # 4-byte Spill
.LBB34_361:                             # %cond.end.1526
	movl	-944(%rbp), %eax        # 4-byte Reload
	movl	-792(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB34_363
# BB#362:                               # %cond.true.1530
	movl	-88(%rbp), %eax
	movl	%eax, -1096(%rbp)       # 4-byte Spill
	jmp	.LBB34_465
.LBB34_363:                             # %cond.false.1531
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1100(%rbp)       # 4-byte Spill
	movl	%edx, -1104(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1108(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1108(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-1104(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_365
# BB#364:                               # %land.lhs.true.1549
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -1120(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_367
.LBB34_365:                             # %lor.lhs.false.1558
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_367
# BB#366:                               # %lor.lhs.false.1565
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_368
.LBB34_367:                             # %cond.true.1572
	xorl	%eax, %eax
	movl	%eax, -1124(%rbp)       # 4-byte Spill
	jmp	.LBB34_369
.LBB34_368:                             # %cond.false.1573
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -1124(%rbp)       # 4-byte Spill
.LBB34_369:                             # %cond.end.1577
	movl	-1124(%rbp), %eax       # 4-byte Reload
	movl	-1100(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -1128(%rbp)       # 4-byte Spill
	jne	.LBB34_372
# BB#370:                               # %lor.lhs.false.1586
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_373
# BB#371:                               # %land.lhs.true.1592
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_373
.LBB34_372:                             # %cond.true.1599
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_378
	jmp	.LBB34_382
.LBB34_373:                             # %cond.false.1600
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -1136(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1136(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_375
# BB#374:                               # %cond.true.1605
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_378
	jmp	.LBB34_382
.LBB34_375:                             # %cond.false.1614
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -1144(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1144(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_377
# BB#376:                               # %cond.true.1619
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_378
	jmp	.LBB34_382
.LBB34_377:                             # %cond.false.1620
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_378
	jmp	.LBB34_382
.LBB34_378:                             # %cond.true.1621
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_380
# BB#379:                               # %cond.true.1625
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -1148(%rbp)       # 4-byte Spill
	jmp	.LBB34_381
.LBB34_380:                             # %cond.false.1627
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -1148(%rbp)       # 4-byte Spill
.LBB34_381:                             # %cond.end.1631
	movl	-1148(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1152(%rbp)       # 4-byte Spill
	jmp	.LBB34_383
.LBB34_382:                             # %cond.false.1633
	xorl	%eax, %eax
	movl	%eax, -1152(%rbp)       # 4-byte Spill
	jmp	.LBB34_383
.LBB34_383:                             # %cond.end.1634
	movl	-1152(%rbp), %eax       # 4-byte Reload
	movl	-1128(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -1156(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_384
	jmp	.LBB34_389
.LBB34_384:                             # %cond.true.1640
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_411
# BB#385:                               # %land.lhs.true.1645
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_411
# BB#386:                               # %land.lhs.true.1651
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_411
# BB#387:                               # %land.lhs.true.1660
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -1168(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1168(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_411
# BB#388:                               # %land.lhs.true.1667
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_390
	jmp	.LBB34_411
.LBB34_389:                             # %cond.false.1674
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_390
	jmp	.LBB34_411
.LBB34_390:                             # %cond.true.1675
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_392
# BB#391:                               # %cond.true.1679
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -1172(%rbp)       # 4-byte Spill
	jmp	.LBB34_410
.LBB34_392:                             # %cond.false.1681
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_395
# BB#393:                               # %land.lhs.true.1684
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_395
# BB#394:                               # %cond.true.1688
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_396
	jmp	.LBB34_401
.LBB34_395:                             # %cond.false.1698
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_396
	jmp	.LBB34_401
.LBB34_396:                             # %cond.true.1699
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_399
# BB#397:                               # %land.lhs.true.1702
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_399
# BB#398:                               # %cond.true.1706
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -1176(%rbp)       # 4-byte Spill
	jmp	.LBB34_400
.LBB34_399:                             # %cond.false.1715
	xorl	%eax, %eax
	movl	%eax, -1176(%rbp)       # 4-byte Spill
	jmp	.LBB34_400
.LBB34_400:                             # %cond.end.1716
	movl	-1176(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	jmp	.LBB34_409
.LBB34_401:                             # %cond.false.1718
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -1192(%rbp)       # 8-byte Spill
	movb	%al, -1193(%rbp)        # 1-byte Spill
	je	.LBB34_408
# BB#402:                               # %lor.lhs.false.1722
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -1208(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-1208(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -1193(%rbp)        # 1-byte Spill
	je	.LBB34_408
# BB#403:                               # %lor.rhs.1726
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -1209(%rbp)        # 1-byte Spill
	jle	.LBB34_407
# BB#404:                               # %land.lhs.true.1729
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -1224(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-1224(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -1209(%rbp)        # 1-byte Spill
	je	.LBB34_407
# BB#405:                               # %land.lhs.true.1733
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -1232(%rbp)       # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-1232(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -1209(%rbp)        # 1-byte Spill
	jne	.LBB34_407
# BB#406:                               # %land.rhs.1738
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -1240(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-1240(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -1209(%rbp)        # 1-byte Spill
.LBB34_407:                             # %land.end.1742
	movb	-1209(%rbp), %al        # 1-byte Reload
	movb	%al, -1193(%rbp)        # 1-byte Spill
.LBB34_408:                             # %lor.end.1744
	movb	-1193(%rbp), %al        # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-1192(%rbp), %rdi       # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -1180(%rbp)       # 4-byte Spill
.LBB34_409:                             # %cond.end.1747
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -1172(%rbp)       # 4-byte Spill
.LBB34_410:                             # %cond.end.1750
	movl	-1172(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1244(%rbp)       # 4-byte Spill
	jmp	.LBB34_412
.LBB34_411:                             # %cond.false.1752
	xorl	%eax, %eax
	movl	%eax, -1244(%rbp)       # 4-byte Spill
	jmp	.LBB34_412
.LBB34_412:                             # %cond.end.1753
	movl	-1244(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-1156(%rbp), %edx       # 4-byte Reload
	subl	%eax, %edx
	subl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jle	.LBB34_414
# BB#413:                               # %cond.true.1759
	xorl	%eax, %eax
	movl	%eax, -1248(%rbp)       # 4-byte Spill
	jmp	.LBB34_464
.LBB34_414:                             # %cond.false.1760
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1252(%rbp)       # 4-byte Spill
	movl	%edx, -1256(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1260(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1260(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-1256(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_416
# BB#415:                               # %land.lhs.true.1778
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -1272(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1272(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_418
.LBB34_416:                             # %lor.lhs.false.1787
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_418
# BB#417:                               # %lor.lhs.false.1794
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_419
.LBB34_418:                             # %cond.true.1801
	xorl	%eax, %eax
	movl	%eax, -1276(%rbp)       # 4-byte Spill
	jmp	.LBB34_420
.LBB34_419:                             # %cond.false.1802
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -1276(%rbp)       # 4-byte Spill
.LBB34_420:                             # %cond.end.1806
	movl	-1276(%rbp), %eax       # 4-byte Reload
	movl	-1252(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -1280(%rbp)       # 4-byte Spill
	jne	.LBB34_423
# BB#421:                               # %lor.lhs.false.1815
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_424
# BB#422:                               # %land.lhs.true.1821
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB34_424
.LBB34_423:                             # %cond.true.1828
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_429
	jmp	.LBB34_433
.LBB34_424:                             # %cond.false.1829
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -1288(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_426
# BB#425:                               # %cond.true.1834
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB34_429
	jmp	.LBB34_433
.LBB34_426:                             # %cond.false.1843
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -1296(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1296(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_428
# BB#427:                               # %cond.true.1848
	movb	$1, %al
	testb	$1, %al
	jne	.LBB34_429
	jmp	.LBB34_433
.LBB34_428:                             # %cond.false.1849
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_429
	jmp	.LBB34_433
.LBB34_429:                             # %cond.true.1850
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB34_431
# BB#430:                               # %cond.true.1854
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -1300(%rbp)       # 4-byte Spill
	jmp	.LBB34_432
.LBB34_431:                             # %cond.false.1856
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -1300(%rbp)       # 4-byte Spill
.LBB34_432:                             # %cond.end.1860
	movl	-1300(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1304(%rbp)       # 4-byte Spill
	jmp	.LBB34_434
.LBB34_433:                             # %cond.false.1862
	xorl	%eax, %eax
	movl	%eax, -1304(%rbp)       # 4-byte Spill
	jmp	.LBB34_434
.LBB34_434:                             # %cond.end.1863
	movl	-1304(%rbp), %eax       # 4-byte Reload
	movl	-1280(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -1308(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB34_435
	jmp	.LBB34_440
.LBB34_435:                             # %cond.true.1869
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_462
# BB#436:                               # %land.lhs.true.1874
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB34_462
# BB#437:                               # %land.lhs.true.1880
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB34_462
# BB#438:                               # %land.lhs.true.1889
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -1320(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1320(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_462
# BB#439:                               # %land.lhs.true.1896
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB34_441
	jmp	.LBB34_462
.LBB34_440:                             # %cond.false.1903
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_441
	jmp	.LBB34_462
.LBB34_441:                             # %cond.true.1904
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB34_443
# BB#442:                               # %cond.true.1908
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -1324(%rbp)       # 4-byte Spill
	jmp	.LBB34_461
.LBB34_443:                             # %cond.false.1910
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_446
# BB#444:                               # %land.lhs.true.1913
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_446
# BB#445:                               # %cond.true.1917
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB34_447
	jmp	.LBB34_452
.LBB34_446:                             # %cond.false.1927
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB34_447
	jmp	.LBB34_452
.LBB34_447:                             # %cond.true.1928
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB34_450
# BB#448:                               # %land.lhs.true.1931
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB34_450
# BB#449:                               # %cond.true.1935
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -1328(%rbp)       # 4-byte Spill
	jmp	.LBB34_451
.LBB34_450:                             # %cond.false.1944
	xorl	%eax, %eax
	movl	%eax, -1328(%rbp)       # 4-byte Spill
	jmp	.LBB34_451
.LBB34_451:                             # %cond.end.1945
	movl	-1328(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1332(%rbp)       # 4-byte Spill
	jmp	.LBB34_460
.LBB34_452:                             # %cond.false.1947
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -1344(%rbp)       # 8-byte Spill
	movb	%al, -1345(%rbp)        # 1-byte Spill
	je	.LBB34_459
# BB#453:                               # %lor.lhs.false.1951
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -1360(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-1360(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -1345(%rbp)        # 1-byte Spill
	je	.LBB34_459
# BB#454:                               # %lor.rhs.1955
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -1361(%rbp)        # 1-byte Spill
	jle	.LBB34_458
# BB#455:                               # %land.lhs.true.1958
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -1376(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-1376(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -1361(%rbp)        # 1-byte Spill
	je	.LBB34_458
# BB#456:                               # %land.lhs.true.1962
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -1384(%rbp)       # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-1384(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -1361(%rbp)        # 1-byte Spill
	jne	.LBB34_458
# BB#457:                               # %land.rhs.1967
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -1392(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-1392(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -1361(%rbp)        # 1-byte Spill
.LBB34_458:                             # %land.end.1971
	movb	-1361(%rbp), %al        # 1-byte Reload
	movb	%al, -1345(%rbp)        # 1-byte Spill
.LBB34_459:                             # %lor.end.1973
	movb	-1345(%rbp), %al        # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-1344(%rbp), %rdi       # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -1332(%rbp)       # 4-byte Spill
.LBB34_460:                             # %cond.end.1976
	movl	-1332(%rbp), %eax       # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -1324(%rbp)       # 4-byte Spill
.LBB34_461:                             # %cond.end.1979
	movl	-1324(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	jmp	.LBB34_463
.LBB34_462:                             # %cond.false.1981
	xorl	%eax, %eax
	movl	%eax, -1396(%rbp)       # 4-byte Spill
	jmp	.LBB34_463
.LBB34_463:                             # %cond.end.1982
	movl	-1396(%rbp), %eax       # 4-byte Reload
	movl	-1308(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	subl	-16(%rbp), %ecx
	movl	%ecx, -1248(%rbp)       # 4-byte Spill
.LBB34_464:                             # %cond.end.1986
	movl	-1248(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1096(%rbp)       # 4-byte Spill
.LBB34_465:                             # %cond.end.1988
	movl	-1096(%rbp), %eax       # 4-byte Reload
	movl	%eax, -88(%rbp)
.LBB34_466:                             # %if.end.1990
	jmp	.LBB34_467
.LBB34_467:                             # %if.end.1991
	jmp	.LBB34_623
.LBB34_468:                             # %sw.bb.1992
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_485
# BB#469:                               # %cond.true.1998
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_471
# BB#470:                               # %cond.true.2005
	xorl	%eax, %eax
	movl	%eax, -1400(%rbp)       # 4-byte Spill
	jmp	.LBB34_478
.LBB34_471:                             # %cond.false.2006
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1408(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1408(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_473
# BB#472:                               # %cond.true.2010
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -1412(%rbp)       # 4-byte Spill
	jmp	.LBB34_477
.LBB34_473:                             # %cond.false.2018
	movl	$607, %edi              # imm = 0x25F
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1424(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_475
# BB#474:                               # %cond.true.2023
	movl	$1, %eax
	movl	%eax, -1428(%rbp)       # 4-byte Spill
	jmp	.LBB34_476
.LBB34_475:                             # %cond.false.2024
	movl	$811, %edi              # imm = 0x32B
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1440(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1440(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -1428(%rbp)       # 4-byte Spill
.LBB34_476:                             # %cond.end.2030
	movl	-1428(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1412(%rbp)       # 4-byte Spill
.LBB34_477:                             # %cond.end.2032
	movl	-1412(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1400(%rbp)       # 4-byte Spill
.LBB34_478:                             # %cond.end.2034
	movl	-1400(%rbp), %eax       # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB34_483
# BB#479:                               # %cond.true.2038
	movq	-40(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB34_481
# BB#480:                               # %cond.true.2041
	movq	-40(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -1444(%rbp)       # 4-byte Spill
	jmp	.LBB34_482
.LBB34_481:                             # %cond.false.2043
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -1444(%rbp)       # 4-byte Spill
.LBB34_482:                             # %cond.end.2046
	movl	-1444(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1448(%rbp)       # 4-byte Spill
	jmp	.LBB34_484
.LBB34_483:                             # %cond.false.2048
	xorl	%eax, %eax
	movl	%eax, -1448(%rbp)       # 4-byte Spill
	jmp	.LBB34_484
.LBB34_484:                             # %cond.end.2049
	movl	-1448(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1452(%rbp)       # 4-byte Spill
	jmp	.LBB34_486
.LBB34_485:                             # %cond.false.2051
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	window_box_right_offset
	movl	%eax, -1452(%rbp)       # 4-byte Spill
.LBB34_486:                             # %cond.end.2053
	movl	-1452(%rbp), %eax       # 4-byte Reload
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	cmpl	$0, 420(%rcx)
	jl	.LBB34_488
# BB#487:                               # %cond.true.2057
	movq	-40(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -1456(%rbp)       # 4-byte Spill
	jmp	.LBB34_489
.LBB34_488:                             # %cond.false.2059
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -1456(%rbp)       # 4-byte Spill
.LBB34_489:                             # %cond.end.2063
	movl	-1456(%rbp), %eax       # 4-byte Reload
	movl	%eax, -84(%rbp)
	jmp	.LBB34_576
.LBB34_490:                             # %sw.bb.2065
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_492
# BB#491:                               # %cond.true.2072
	movl	$2, %esi
	movq	-40(%rbp), %rdi
	callq	window_box_right_offset
	movl	%eax, -1460(%rbp)       # 4-byte Spill
	jmp	.LBB34_493
.LBB34_492:                             # %cond.false.2074
	movl	$1, %esi
	movq	-40(%rbp), %rdi
	callq	window_box_right_offset
	movl	%eax, -1460(%rbp)       # 4-byte Spill
.LBB34_493:                             # %cond.end.2076
	movl	-1460(%rbp), %eax       # 4-byte Reload
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movl	240(%rcx), %eax
	movq	-40(%rbp), %rcx
	addl	256(%rcx), %eax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	40(%rcx), %rdi
	movl	%eax, -1464(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%edx, -1468(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1468(%rbp), %edx       # 4-byte Reload
	addl	256(%rax), %edx
	movl	-1464(%rbp), %esi       # 4-byte Reload
	cmpl	%edx, %esi
	je	.LBB34_495
# BB#494:                               # %lor.lhs.false.2093
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_496
.LBB34_495:                             # %cond.true.2099
	xorl	%eax, %eax
	movl	%eax, -1472(%rbp)       # 4-byte Spill
	jmp	.LBB34_497
.LBB34_496:                             # %cond.false.2100
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -1472(%rbp)       # 4-byte Spill
.LBB34_497:                             # %cond.end.2103
	movl	-1472(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB34_526
# BB#498:                               # %land.lhs.true.2107
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_500
# BB#499:                               # %cond.true.2114
	xorl	%eax, %eax
	movl	%eax, -1476(%rbp)       # 4-byte Spill
	jmp	.LBB34_507
.LBB34_500:                             # %cond.false.2115
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1488(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_502
# BB#501:                               # %cond.true.2120
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -1492(%rbp)       # 4-byte Spill
	jmp	.LBB34_506
.LBB34_502:                             # %cond.false.2128
	movl	$607, %edi              # imm = 0x25F
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1504(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1504(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_504
# BB#503:                               # %cond.true.2133
	movl	$1, %eax
	movl	%eax, -1508(%rbp)       # 4-byte Spill
	jmp	.LBB34_505
.LBB34_504:                             # %cond.false.2134
	movl	$811, %edi              # imm = 0x32B
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1520(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1520(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -1508(%rbp)       # 4-byte Spill
.LBB34_505:                             # %cond.end.2140
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1492(%rbp)       # 4-byte Spill
.LBB34_506:                             # %cond.end.2142
	movl	-1492(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1476(%rbp)       # 4-byte Spill
.LBB34_507:                             # %cond.end.2144
	movl	-1476(%rbp), %eax       # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB34_526
# BB#508:                               # %lor.lhs.false.2148
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_510
# BB#509:                               # %cond.true.2155
	xorl	%eax, %eax
	movl	%eax, -1524(%rbp)       # 4-byte Spill
	jmp	.LBB34_517
.LBB34_510:                             # %cond.false.2156
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1536(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1536(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_512
# BB#511:                               # %cond.true.2161
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -1540(%rbp)       # 4-byte Spill
	jmp	.LBB34_516
.LBB34_512:                             # %cond.false.2169
	movl	$607, %edi              # imm = 0x25F
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1552(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1552(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_514
# BB#513:                               # %cond.true.2174
	movl	$1, %eax
	movl	%eax, -1556(%rbp)       # 4-byte Spill
	jmp	.LBB34_515
.LBB34_514:                             # %cond.false.2175
	movl	$811, %edi              # imm = 0x32B
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1568(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1568(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -1556(%rbp)       # 4-byte Spill
.LBB34_515:                             # %cond.end.2181
	movl	-1556(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1540(%rbp)       # 4-byte Spill
.LBB34_516:                             # %cond.end.2183
	movl	-1540(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1524(%rbp)       # 4-byte Spill
.LBB34_517:                             # %cond.end.2185
	movl	-1524(%rbp), %eax       # 4-byte Reload
	cmpl	$2, %eax
	je	.LBB34_526
# BB#518:                               # %land.lhs.true.2189
	movq	-40(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-40(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1572(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1576(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1576(%rbp), %ecx       # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-1572(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB34_526
# BB#519:                               # %if.then.2206
	movl	-12(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	256(%rcx), %edx
	subl	-84(%rbp), %edx
	cmpl	%edx, %eax
	jge	.LBB34_524
# BB#520:                               # %if.then.2211
	movq	-40(%rbp), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB34_522
# BB#521:                               # %cond.true.2214
	movq	-40(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -1580(%rbp)       # 4-byte Spill
	jmp	.LBB34_523
.LBB34_522:                             # %cond.false.2216
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -1580(%rbp)       # 4-byte Spill
.LBB34_523:                             # %cond.end.2220
	movl	-1580(%rbp), %eax       # 4-byte Reload
	subl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB34_525
.LBB34_524:                             # %if.else.2223
	movq	-40(%rbp), %rax
	movl	256(%rax), %ecx
	subl	-12(%rbp), %ecx
	movl	%ecx, -84(%rbp)
.LBB34_525:                             # %if.end.2226
	jmp	.LBB34_530
.LBB34_526:                             # %if.else.2227
	movq	-40(%rbp), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB34_528
# BB#527:                               # %cond.true.2231
	movq	-40(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -1584(%rbp)       # 4-byte Spill
	jmp	.LBB34_529
.LBB34_528:                             # %cond.false.2233
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -1584(%rbp)       # 4-byte Spill
.LBB34_529:                             # %cond.end.2237
	movl	-1584(%rbp), %eax       # 4-byte Reload
	movl	%eax, -84(%rbp)
.LBB34_530:                             # %if.end.2239
	jmp	.LBB34_576
.LBB34_531:                             # %sw.bb.2240
	movq	-40(%rbp), %rax
	movl	256(%rax), %ecx
	subl	-84(%rbp), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB34_576
.LBB34_532:                             # %sw.bb.2243
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_534
# BB#533:                               # %cond.true.2250
	xorl	%eax, %eax
	movl	%eax, -1588(%rbp)       # 4-byte Spill
	jmp	.LBB34_541
.LBB34_534:                             # %cond.false.2251
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1600(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1600(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_536
# BB#535:                               # %cond.true.2256
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -1604(%rbp)       # 4-byte Spill
	jmp	.LBB34_540
.LBB34_536:                             # %cond.false.2264
	movl	$607, %edi              # imm = 0x25F
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1616(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1616(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_538
# BB#537:                               # %cond.true.2269
	movl	$1, %eax
	movl	%eax, -1620(%rbp)       # 4-byte Spill
	jmp	.LBB34_539
.LBB34_538:                             # %cond.false.2270
	movl	$811, %edi              # imm = 0x32B
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1632(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1632(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -1620(%rbp)       # 4-byte Spill
.LBB34_539:                             # %cond.end.2276
	movl	-1620(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1604(%rbp)       # 4-byte Spill
.LBB34_540:                             # %cond.end.2278
	movl	-1604(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1588(%rbp)       # 4-byte Spill
.LBB34_541:                             # %cond.end.2280
	movl	-1588(%rbp), %eax       # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB34_543
# BB#542:                               # %cond.true.2284
	xorl	%eax, %eax
	movl	%eax, -1636(%rbp)       # 4-byte Spill
	jmp	.LBB34_550
.LBB34_543:                             # %cond.false.2285
	movl	$2, %esi
	movq	-40(%rbp), %rdi
	callq	window_box_right_offset
	movq	-40(%rbp), %rdi
	movw	468(%rdi), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	movl	%eax, -1640(%rbp)       # 4-byte Spill
	je	.LBB34_548
# BB#544:                               # %cond.true.2293
	movq	-40(%rbp), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB34_546
# BB#545:                               # %cond.true.2297
	movq	-40(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -1644(%rbp)       # 4-byte Spill
	jmp	.LBB34_547
.LBB34_546:                             # %cond.false.2299
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -1644(%rbp)       # 4-byte Spill
.LBB34_547:                             # %cond.end.2303
	movl	-1644(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1648(%rbp)       # 4-byte Spill
	jmp	.LBB34_549
.LBB34_548:                             # %cond.false.2305
	xorl	%eax, %eax
	movl	%eax, -1648(%rbp)       # 4-byte Spill
	jmp	.LBB34_549
.LBB34_549:                             # %cond.end.2306
	movl	-1648(%rbp), %eax       # 4-byte Reload
	movl	-1640(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -1636(%rbp)       # 4-byte Spill
.LBB34_550:                             # %cond.end.2309
	movl	-1636(%rbp), %eax       # 4-byte Reload
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movw	468(%rcx), %dx
	shrw	$11, %dx
	andw	$1, %dx
	testw	$1, %dx
	je	.LBB34_552
# BB#551:                               # %cond.true.2317
	xorl	%eax, %eax
	movl	%eax, -1652(%rbp)       # 4-byte Spill
	jmp	.LBB34_559
.LBB34_552:                             # %cond.false.2318
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1664(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1664(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_554
# BB#553:                               # %cond.true.2323
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -1668(%rbp)       # 4-byte Spill
	jmp	.LBB34_558
.LBB34_554:                             # %cond.false.2331
	movl	$607, %edi              # imm = 0x25F
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1680(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1680(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_556
# BB#555:                               # %cond.true.2336
	movl	$1, %eax
	movl	%eax, -1684(%rbp)       # 4-byte Spill
	jmp	.LBB34_557
.LBB34_556:                             # %cond.false.2337
	movl	$811, %edi              # imm = 0x32B
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1696(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -1684(%rbp)       # 4-byte Spill
.LBB34_557:                             # %cond.end.2343
	movl	-1684(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1668(%rbp)       # 4-byte Spill
.LBB34_558:                             # %cond.end.2345
	movl	-1668(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1652(%rbp)       # 4-byte Spill
.LBB34_559:                             # %cond.end.2347
	movl	-1652(%rbp), %eax       # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB34_570
# BB#560:                               # %lor.lhs.false.2351
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_562
# BB#561:                               # %cond.true.2358
	xorl	%eax, %eax
	movl	%eax, -1700(%rbp)       # 4-byte Spill
	jmp	.LBB34_569
.LBB34_562:                             # %cond.false.2359
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1712(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1712(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_564
# BB#563:                               # %cond.true.2364
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -1716(%rbp)       # 4-byte Spill
	jmp	.LBB34_568
.LBB34_564:                             # %cond.false.2372
	movl	$607, %edi              # imm = 0x25F
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1728(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1728(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_566
# BB#565:                               # %cond.true.2377
	movl	$1, %eax
	movl	%eax, -1732(%rbp)       # 4-byte Spill
	jmp	.LBB34_567
.LBB34_566:                             # %cond.false.2378
	movl	$811, %edi              # imm = 0x32B
	movq	-40(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1744(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1744(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -1732(%rbp)       # 4-byte Spill
.LBB34_567:                             # %cond.end.2384
	movl	-1732(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1716(%rbp)       # 4-byte Spill
.LBB34_568:                             # %cond.end.2386
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1700(%rbp)       # 4-byte Spill
.LBB34_569:                             # %cond.end.2388
	movl	-1700(%rbp), %eax       # 4-byte Reload
	cmpl	$2, %eax
	jne	.LBB34_574
.LBB34_570:                             # %cond.true.2392
	movq	-40(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB34_572
# BB#571:                               # %cond.true.2396
	movq	-40(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -1748(%rbp)       # 4-byte Spill
	jmp	.LBB34_573
.LBB34_572:                             # %cond.false.2398
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -1748(%rbp)       # 4-byte Spill
.LBB34_573:                             # %cond.end.2402
	movl	-1748(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1752(%rbp)       # 4-byte Spill
	jmp	.LBB34_575
.LBB34_574:                             # %cond.false.2404
	xorl	%eax, %eax
	movl	%eax, -1752(%rbp)       # 4-byte Spill
	jmp	.LBB34_575
.LBB34_575:                             # %cond.end.2405
	movl	-1752(%rbp), %eax       # 4-byte Reload
	movl	%eax, -84(%rbp)
.LBB34_576:                             # %row_glyph
	movq	$0, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB34_577:                             # %for.cond.2407
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -1753(%rbp)        # 1-byte Spill
	ja	.LBB34_579
# BB#578:                               # %land.rhs.2410
                                        #   in Loop: Header=BB34_577 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	movb	%al, %cl
	movb	%cl, -1753(%rbp)        # 1-byte Spill
.LBB34_579:                             # %land.end.2417
                                        #   in Loop: Header=BB34_577 Depth=1
	movb	-1753(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB34_580
	jmp	.LBB34_584
.LBB34_580:                             # %for.body.2419
                                        #   in Loop: Header=BB34_577 Depth=1
	movq	-48(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-48(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-80(%rbp), %ecx
	jle	.LBB34_582
# BB#581:                               # %if.then.2425
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -16(%rbp)
	jmp	.LBB34_584
.LBB34_582:                             # %if.end.2427
                                        #   in Loop: Header=BB34_577 Depth=1
	jmp	.LBB34_583
.LBB34_583:                             # %for.inc.2428
                                        #   in Loop: Header=BB34_577 Depth=1
	movq	-48(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -48(%rbp)
	jmp	.LBB34_577
.LBB34_584:                             # %for.end.2430
	cmpq	$0, -56(%rbp)
	je	.LBB34_587
# BB#585:                               # %land.lhs.true.2432
	movl	-16(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jg	.LBB34_587
# BB#586:                               # %if.then.2435
	movq	-56(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -88(%rbp)
	jmp	.LBB34_588
.LBB34_587:                             # %if.else.2437
	movl	-16(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	-88(%rbp)
	imull	-88(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_588:                             # %if.end.2442
	jmp	.LBB34_623
.LBB34_589:                             # %sw.bb.2443
	movq	-40(%rbp), %rax
	movl	256(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	240(%rax), %edx
	movq	-40(%rbp), %rax
	addl	256(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1760(%rbp)       # 4-byte Spill
	movl	%edx, -1764(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1768(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1768(%rbp), %ecx       # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-1764(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB34_591
# BB#590:                               # %lor.lhs.false.2461
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_592
.LBB34_591:                             # %cond.true.2467
	xorl	%eax, %eax
	movl	%eax, -1772(%rbp)       # 4-byte Spill
	jmp	.LBB34_593
.LBB34_592:                             # %cond.false.2468
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -1772(%rbp)       # 4-byte Spill
.LBB34_593:                             # %cond.end.2472
	movl	-1772(%rbp), %eax       # 4-byte Reload
	movl	-1760(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movq	-40(%rbp), %rdx
	movl	240(%rdx), %eax
	movq	-40(%rbp), %rdx
	addl	256(%rdx), %eax
	movq	-40(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	40(%rdx), %rdi
	movl	%eax, -1776(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1780(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1780(%rbp), %ecx       # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-1776(%rbp), %esi       # 4-byte Reload
	cmpl	%ecx, %esi
	je	.LBB34_595
# BB#594:                               # %lor.lhs.false.2491
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_596
.LBB34_595:                             # %cond.true.2497
	xorl	%eax, %eax
	movl	%eax, -1784(%rbp)       # 4-byte Spill
	jmp	.LBB34_597
.LBB34_596:                             # %cond.false.2498
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -1784(%rbp)       # 4-byte Spill
.LBB34_597:                             # %cond.end.2502
	movl	-1784(%rbp), %eax       # 4-byte Reload
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
	movq	-40(%rbp), %rcx
	movl	260(%rcx), %eax
	movq	-40(%rbp), %rcx
	movl	244(%rcx), %edx
	movq	-40(%rbp), %rcx
	addl	260(%rcx), %edx
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	40(%rcx), %rdi
	movl	%eax, -1788(%rbp)       # 4-byte Spill
	movl	%edx, -1792(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%edx, -1796(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1796(%rbp), %edx       # 4-byte Reload
	addl	260(%rax), %edx
	movl	-1792(%rbp), %esi       # 4-byte Reload
	cmpl	%edx, %esi
	jne	.LBB34_599
# BB#598:                               # %land.lhs.true.2521
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -1808(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1808(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_601
.LBB34_599:                             # %lor.lhs.false.2530
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_601
# BB#600:                               # %lor.lhs.false.2537
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_602
.LBB34_601:                             # %cond.true.2544
	xorl	%eax, %eax
	movl	%eax, -1812(%rbp)       # 4-byte Spill
	jmp	.LBB34_603
.LBB34_602:                             # %cond.false.2545
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -1812(%rbp)       # 4-byte Spill
.LBB34_603:                             # %cond.end.2549
	movl	-1812(%rbp), %eax       # 4-byte Reload
	movl	-1788(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	jmp	.LBB34_624
.LBB34_604:                             # %sw.bb.2552
	movl	$0, -12(%rbp)
	movq	-40(%rbp), %rax
	movl	256(%rax), %ecx
	movl	%ecx, -84(%rbp)
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	244(%rax), %edx
	movq	-40(%rbp), %rax
	addl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1816(%rbp)       # 4-byte Spill
	movl	%edx, -1820(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1824(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1824(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-1820(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB34_606
# BB#605:                               # %land.lhs.true.2571
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -1832(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1832(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_608
.LBB34_606:                             # %lor.lhs.false.2580
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_608
# BB#607:                               # %lor.lhs.false.2587
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_609
.LBB34_608:                             # %cond.true.2594
	xorl	%eax, %eax
	movl	%eax, -1836(%rbp)       # 4-byte Spill
	jmp	.LBB34_610
.LBB34_609:                             # %cond.false.2595
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -1836(%rbp)       # 4-byte Spill
.LBB34_610:                             # %cond.end.2599
	movl	-1836(%rbp), %eax       # 4-byte Reload
	movl	-1816(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movq	-40(%rbp), %rdx
	movl	244(%rdx), %eax
	movq	-40(%rbp), %rdx
	addl	260(%rdx), %eax
	movq	-40(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	40(%rdx), %rdi
	movl	%eax, -1840(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -1844(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-1844(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-1840(%rbp), %esi       # 4-byte Reload
	cmpl	%ecx, %esi
	jne	.LBB34_612
# BB#611:                               # %land.lhs.true.2618
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -1856(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1856(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_614
.LBB34_612:                             # %lor.lhs.false.2627
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB34_614
# BB#613:                               # %lor.lhs.false.2634
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB34_615
.LBB34_614:                             # %cond.true.2641
	xorl	%eax, %eax
	movl	%eax, -1860(%rbp)       # 4-byte Spill
	jmp	.LBB34_616
.LBB34_615:                             # %cond.false.2642
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -1860(%rbp)       # 4-byte Spill
.LBB34_616:                             # %cond.end.2646
	movl	-1860(%rbp), %eax       # 4-byte Reload
	movl	%eax, -88(%rbp)
	jmp	.LBB34_624
.LBB34_617:                             # %sw.default
	jmp	.LBB34_618
.LBB34_618:                             # %virtual_glyph
	cmpl	$0, -12(%rbp)
	jge	.LBB34_620
# BB#619:                               # %if.then.2650
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB34_620:                             # %if.end.2653
	cmpl	$0, -16(%rbp)
	jge	.LBB34_622
# BB#621:                               # %if.then.2656
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	-16(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -16(%rbp)
.LBB34_622:                             # %if.end.2659
	movl	-12(%rbp), %eax
	cltd
	idivl	-84(%rbp)
	imull	-84(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	-88(%rbp)
	imull	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_625
.LBB34_623:                             # %sw.epilog
	jmp	.LBB34_624
.LBB34_624:                             # %add_edge
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-40(%rbp), %rax
	addl	240(%rax), %ecx
	addl	-12(%rbp), %ecx
	movl	%ecx, -12(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-40(%rbp), %rax
	addl	244(%rax), %ecx
	addl	-16(%rbp), %ecx
	movl	%ecx, -16(%rbp)
.LBB34_625:                             # %store_rect
	movl	-12(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, (%rdx)
	movl	-16(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 2(%rdx)
	movl	-84(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 4(%rdx)
	movl	-88(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 6(%rdx)
.LBB34_626:                             # %return
	addq	$1872, %rsp             # imm = 0x750
	popq	%rbp
	retq
.Lfunc_end34:
	.size	remember_mouse_glyph, .Lfunc_end34-remember_mouse_glyph
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI34_0:
	.quad	.LBB34_26
	.quad	.LBB34_22
	.quad	.LBB34_531
	.quad	.LBB34_22
	.quad	.LBB34_468
	.quad	.LBB34_490
	.quad	.LBB34_20
	.quad	.LBB34_21
	.quad	.LBB34_532
	.quad	.LBB34_617
	.quad	.LBB34_589
	.quad	.LBB34_604

	.text
	.align	16, 0x90
	.type	window_box_right_offset,@function
window_box_right_offset:                # @window_box_right_offset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp105:
	.cfi_def_cfa_offset 16
.Ltmp106:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp107:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	window_box_left_offset
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%eax, -16(%rbp)         # 4-byte Spill
	callq	window_box_width
	movl	-16(%rbp), %esi         # 4-byte Reload
	addl	%eax, %esi
	movq	-8(%rbp), %rdi
	cmpl	256(%rdi), %esi
	jge	.LBB35_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	window_box_left_offset
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	callq	window_box_width
	movl	-20(%rbp), %esi         # 4-byte Reload
	addl	%eax, %esi
	movl	%esi, -24(%rbp)         # 4-byte Spill
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movq	-8(%rbp), %rax
	movl	256(%rax), %ecx
	movl	%ecx, -24(%rbp)         # 4-byte Spill
.LBB35_3:                               # %cond.end
	movl	-24(%rbp), %eax         # 4-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end35:
	.size	window_box_right_offset, .Lfunc_end35-window_box_right_offset
	.cfi_endproc

	.globl	safe_call
	.align	16, 0x90
	.type	safe_call,@function
safe_call:                              # @safe_call
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp108:
	.cfi_def_cfa_offset 16
.Ltmp109:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp110:
	.cfi_def_cfa_register %rbp
	subq	$400, %rsp              # imm = 0x190
	testb	%al, %al
	movaps	%xmm7, -240(%rbp)       # 16-byte Spill
	movaps	%xmm6, -256(%rbp)       # 16-byte Spill
	movaps	%xmm5, -272(%rbp)       # 16-byte Spill
	movaps	%xmm4, -288(%rbp)       # 16-byte Spill
	movaps	%xmm3, -304(%rbp)       # 16-byte Spill
	movaps	%xmm2, -320(%rbp)       # 16-byte Spill
	movaps	%xmm1, -336(%rbp)       # 16-byte Spill
	movaps	%xmm0, -352(%rbp)       # 16-byte Spill
	movq	%rdi, -360(%rbp)        # 8-byte Spill
	movq	%r9, -368(%rbp)         # 8-byte Spill
	movq	%r8, -376(%rbp)         # 8-byte Spill
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rsi, -400(%rbp)        # 8-byte Spill
	je	.LBB36_2
# BB#1:                                 # %entry
	movaps	-352(%rbp), %xmm0       # 16-byte Reload
	movaps	%xmm0, -176(%rbp)
	movaps	-336(%rbp), %xmm1       # 16-byte Reload
	movaps	%xmm1, -160(%rbp)
	movaps	-320(%rbp), %xmm2       # 16-byte Reload
	movaps	%xmm2, -144(%rbp)
	movaps	-304(%rbp), %xmm3       # 16-byte Reload
	movaps	%xmm3, -128(%rbp)
	movaps	-288(%rbp), %xmm4       # 16-byte Reload
	movaps	%xmm4, -112(%rbp)
	movaps	-272(%rbp), %xmm5       # 16-byte Reload
	movaps	%xmm5, -96(%rbp)
	movaps	-256(%rbp), %xmm6       # 16-byte Reload
	movaps	%xmm6, -80(%rbp)
	movaps	-240(%rbp), %xmm7       # 16-byte Reload
	movaps	%xmm7, -64(%rbp)
.LBB36_2:                               # %entry
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)
	movq	-376(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -192(%rbp)
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -200(%rbp)
	movq	-392(%rbp), %rsi        # 8-byte Reload
	movq	%rsi, -208(%rbp)
	movq	-400(%rbp), %rdi        # 8-byte Reload
	movq	-360(%rbp), %r8         # 8-byte Reload
	movq	%r8, -8(%rbp)
	movq	%rdi, -16(%rbp)
	leaq	-224(%rbp), %rdi
	movq	%rdi, -32(%rbp)
	leaq	16(%rbp), %rdi
	movq	%rdi, -40(%rbp)
	movl	$48, -44(%rbp)
	movl	$16, -48(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	xorl	%edi, %edi
	leaq	-48(%rbp), %rcx
	callq	safe__call
	movq	%rax, -24(%rbp)
	addq	$400, %rsp              # imm = 0x190
	popq	%rbp
	retq
.Lfunc_end36:
	.size	safe_call, .Lfunc_end36-safe_call
	.cfi_endproc

	.align	16, 0x90
	.type	safe__call,@function
safe__call:                             # @safe__call
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp111:
	.cfi_def_cfa_offset 16
.Ltmp112:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp113:
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	testb	$1, globals+3390
	je	.LBB37_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	jmp	.LBB37_423
.LBB37_2:                               # %if.else
	callq	SPECPDL_INDEX
	movq	%rax, -56(%rbp)
	movq	$16384, -72(%rbp)       # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -80(%rbp)
	movb	$0, -81(%rbp)
# BB#3:                                 # %do.body
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_4
	jmp	.LBB37_83
.LBB37_4:                               # %cond.true
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_5
	jmp	.LBB37_44
.LBB37_5:                               # %cond.true.3
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_7
# BB#6:                                 # %cond.true.6
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB37_8
.LBB37_7:                               # %cond.false
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -108(%rbp)        # 4-byte Spill
.LBB37_8:                               # %cond.end
	movl	-108(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB37_10
# BB#9:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jl	.LBB37_36
.LBB37_10:                              # %lor.lhs.false
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_11
	jmp	.LBB37_22
.LBB37_11:                              # %cond.true.35
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB37_16
# BB#12:                                # %cond.true.40
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -112(%rbp)        # 4-byte Spill
	jge	.LBB37_14
# BB#13:                                # %cond.true.50
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -116(%rbp)        # 4-byte Spill
	jmp	.LBB37_15
.LBB37_14:                              # %cond.false.60
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -116(%rbp)        # 4-byte Spill
.LBB37_15:                              # %cond.end.66
	movl	-116(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movl	-112(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB37_36
	jmp	.LBB37_33
.LBB37_16:                              # %cond.false.70
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_17
	jmp	.LBB37_18
.LBB37_17:                              # %cond.true.71
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_36
	jmp	.LBB37_33
.LBB37_18:                              # %cond.false.72
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_20
# BB#19:                                # %cond.true.80
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -120(%rbp)        # 4-byte Spill
	jmp	.LBB37_21
.LBB37_20:                              # %cond.false.100
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -120(%rbp)        # 4-byte Spill
.LBB37_21:                              # %cond.end.106
	movl	-120(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movq	-16(%rbp), %rsi
	movb	%sil, %dil
	movsbl	%dil, %ecx
	cmpl	%ecx, %eax
	jl	.LBB37_36
	jmp	.LBB37_33
.LBB37_22:                              # %cond.false.113
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_23
	jmp	.LBB37_24
.LBB37_23:                              # %cond.true.114
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_36
	jmp	.LBB37_33
.LBB37_24:                              # %cond.false.115
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB37_29
# BB#25:                                # %cond.true.120
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -124(%rbp)        # 4-byte Spill
	jge	.LBB37_27
# BB#26:                                # %cond.true.130
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	jmp	.LBB37_28
.LBB37_27:                              # %cond.false.150
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -128(%rbp)        # 4-byte Spill
.LBB37_28:                              # %cond.end.156
	movl	-128(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movl	-124(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB37_36
	jmp	.LBB37_33
.LBB37_29:                              # %cond.false.161
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_31
# BB#30:                                # %cond.true.169
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -132(%rbp)        # 4-byte Spill
	jmp	.LBB37_32
.LBB37_31:                              # %cond.false.179
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -132(%rbp)        # 4-byte Spill
.LBB37_32:                              # %cond.end.185
	movl	-132(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movq	-16(%rbp), %rsi
	movb	%sil, %dil
	movsbl	%dil, %ecx
	cmpl	%ecx, %eax
	jl	.LBB37_36
.LBB37_33:                              # %lor.lhs.false.192
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	shll	$3, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_35
# BB#34:                                # %land.lhs.true.200
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	shll	$3, %edx
	cmpl	$-128, %edx
	jl	.LBB37_36
.LBB37_35:                              # %lor.lhs.false.206
	movl	$127, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	shll	$3, %esi
	cmpl	%esi, %eax
	jge	.LBB37_40
.LBB37_36:                              # %cond.true.212
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	cmpl	$127, %edx
	jg	.LBB37_38
# BB#37:                                # %cond.true.218
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -136(%rbp)        # 4-byte Spill
	jmp	.LBB37_39
.LBB37_38:                              # %cond.false.224
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -136(%rbp)        # 4-byte Spill
.LBB37_39:                              # %cond.end.232
	movl	-136(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_40:                              # %cond.false.235
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	cmpl	$127, %edx
	jg	.LBB37_42
# BB#41:                                # %cond.true.241
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB37_43
.LBB37_42:                              # %cond.false.247
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -140(%rbp)        # 4-byte Spill
.LBB37_43:                              # %cond.end.255
	movl	-140(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_44:                              # %cond.false.258
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_46
# BB#45:                                # %cond.true.264
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	jmp	.LBB37_47
.LBB37_46:                              # %cond.false.281
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB37_47:                              # %cond.end.285
	movq	-152(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_49
# BB#48:                                # %land.lhs.true.289
	cmpq	$0, -16(%rbp)
	jl	.LBB37_75
.LBB37_49:                              # %lor.lhs.false.292
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_50
	jmp	.LBB37_61
.LBB37_50:                              # %cond.true.293
	cmpq	$0, -16(%rbp)
	jge	.LBB37_55
# BB#51:                                # %cond.true.296
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jge	.LBB37_53
# BB#52:                                # %cond.true.302
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB37_54
.LBB37_53:                              # %cond.false.310
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB37_54:                              # %cond.end.314
	movq	-168(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -176(%rbp)        # 8-byte Spill
	cqto
	movq	-176(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-160(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_75
	jmp	.LBB37_72
.LBB37_55:                              # %cond.false.319
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_56
	jmp	.LBB37_57
.LBB37_56:                              # %cond.true.320
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_75
	jmp	.LBB37_72
.LBB37_57:                              # %cond.false.321
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_59
# BB#58:                                # %cond.true.327
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	jmp	.LBB37_60
.LBB37_59:                              # %cond.false.344
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB37_60:                              # %cond.end.348
	movq	-184(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -192(%rbp)        # 8-byte Spill
	cqto
	movq	-192(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_75
	jmp	.LBB37_72
.LBB37_61:                              # %cond.false.353
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_62
	jmp	.LBB37_63
.LBB37_62:                              # %cond.true.354
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_75
	jmp	.LBB37_72
.LBB37_63:                              # %cond.false.355
	cmpq	$0, -16(%rbp)
	jge	.LBB37_68
# BB#64:                                # %cond.true.358
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jge	.LBB37_66
# BB#65:                                # %cond.true.364
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	jmp	.LBB37_67
.LBB37_66:                              # %cond.false.381
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB37_67:                              # %cond.end.385
	movq	-208(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	cqto
	movq	-216(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-200(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_75
	jmp	.LBB37_72
.LBB37_68:                              # %cond.false.390
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_70
# BB#69:                                # %cond.true.396
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jmp	.LBB37_71
.LBB37_70:                              # %cond.false.404
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB37_71:                              # %cond.end.408
	movq	-224(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -232(%rbp)        # 8-byte Spill
	cqto
	movq	-232(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_75
.LBB37_72:                              # %lor.lhs.false.413
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_74
# BB#73:                                # %land.lhs.true.419
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	cmpq	$-128, %rax
	jl	.LBB37_75
.LBB37_74:                              # %lor.lhs.false.423
	movl	$127, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	shlq	$3, %rdx
	cmpq	%rdx, %rcx
	jge	.LBB37_79
.LBB37_75:                              # %cond.true.427
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	cmpl	$127, %edx
	jg	.LBB37_77
# BB#76:                                # %cond.true.433
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -236(%rbp)        # 4-byte Spill
	jmp	.LBB37_78
.LBB37_77:                              # %cond.false.439
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -236(%rbp)        # 4-byte Spill
.LBB37_78:                              # %cond.end.447
	movl	-236(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_79:                              # %cond.false.450
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	cmpl	$127, %edx
	jg	.LBB37_81
# BB#80:                                # %cond.true.456
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -240(%rbp)        # 4-byte Spill
	jmp	.LBB37_82
.LBB37_81:                              # %cond.false.462
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	shll	$3, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -240(%rbp)        # 4-byte Spill
.LBB37_82:                              # %cond.end.470
	movl	-240(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_83:                              # %cond.false.473
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_84
	jmp	.LBB37_163
.LBB37_84:                              # %cond.true.474
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_85
	jmp	.LBB37_124
.LBB37_85:                              # %cond.true.475
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_87
# BB#86:                                # %cond.true.483
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB37_88
.LBB37_87:                              # %cond.false.503
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -244(%rbp)        # 4-byte Spill
.LBB37_88:                              # %cond.end.509
	movl	-244(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB37_90
# BB#89:                                # %land.lhs.true.513
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jl	.LBB37_116
.LBB37_90:                              # %lor.lhs.false.518
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_91
	jmp	.LBB37_102
.LBB37_91:                              # %cond.true.519
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB37_96
# BB#92:                                # %cond.true.524
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -248(%rbp)        # 4-byte Spill
	jge	.LBB37_94
# BB#93:                                # %cond.true.534
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -252(%rbp)        # 4-byte Spill
	jmp	.LBB37_95
.LBB37_94:                              # %cond.false.544
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -252(%rbp)        # 4-byte Spill
.LBB37_95:                              # %cond.end.550
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movl	-248(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB37_116
	jmp	.LBB37_113
.LBB37_96:                              # %cond.false.555
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_97
	jmp	.LBB37_98
.LBB37_97:                              # %cond.true.556
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_116
	jmp	.LBB37_113
.LBB37_98:                              # %cond.false.557
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_100
# BB#99:                                # %cond.true.565
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB37_101
.LBB37_100:                             # %cond.false.585
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -256(%rbp)        # 4-byte Spill
.LBB37_101:                             # %cond.end.591
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movq	-16(%rbp), %rsi
	movw	%si, %di
	movswl	%di, %ecx
	cmpl	%ecx, %eax
	jl	.LBB37_116
	jmp	.LBB37_113
.LBB37_102:                             # %cond.false.598
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_103
	jmp	.LBB37_104
.LBB37_103:                             # %cond.true.599
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_116
	jmp	.LBB37_113
.LBB37_104:                             # %cond.false.600
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB37_109
# BB#105:                               # %cond.true.605
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -260(%rbp)        # 4-byte Spill
	jge	.LBB37_107
# BB#106:                               # %cond.true.615
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
	jmp	.LBB37_108
.LBB37_107:                             # %cond.false.635
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -264(%rbp)        # 4-byte Spill
.LBB37_108:                             # %cond.end.641
	movl	-264(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movl	-260(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB37_116
	jmp	.LBB37_113
.LBB37_109:                             # %cond.false.646
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_111
# BB#110:                               # %cond.true.654
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -268(%rbp)        # 4-byte Spill
	jmp	.LBB37_112
.LBB37_111:                             # %cond.false.664
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -268(%rbp)        # 4-byte Spill
.LBB37_112:                             # %cond.end.670
	movl	-268(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movq	-16(%rbp), %rsi
	movw	%si, %di
	movswl	%di, %ecx
	cmpl	%ecx, %eax
	jl	.LBB37_116
.LBB37_113:                             # %lor.lhs.false.677
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	shll	$3, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB37_115
# BB#114:                               # %land.lhs.true.685
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	shll	$3, %edx
	cmpl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB37_116
.LBB37_115:                             # %lor.lhs.false.691
	movl	$32767, %eax            # imm = 0x7FFF
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	shll	$3, %esi
	cmpl	%esi, %eax
	jge	.LBB37_120
.LBB37_116:                             # %cond.true.697
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB37_118
# BB#117:                               # %cond.true.703
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -272(%rbp)        # 4-byte Spill
	jmp	.LBB37_119
.LBB37_118:                             # %cond.false.709
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -272(%rbp)        # 4-byte Spill
.LBB37_119:                             # %cond.end.717
	movl	-272(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_120:                             # %cond.false.720
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB37_122
# BB#121:                               # %cond.true.726
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -276(%rbp)        # 4-byte Spill
	jmp	.LBB37_123
.LBB37_122:                             # %cond.false.732
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -276(%rbp)        # 4-byte Spill
.LBB37_123:                             # %cond.end.740
	movl	-276(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_124:                             # %cond.false.743
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_126
# BB#125:                               # %cond.true.749
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	jmp	.LBB37_127
.LBB37_126:                             # %cond.false.766
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
.LBB37_127:                             # %cond.end.770
	movq	-288(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_129
# BB#128:                               # %land.lhs.true.774
	cmpq	$0, -16(%rbp)
	jl	.LBB37_155
.LBB37_129:                             # %lor.lhs.false.777
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_130
	jmp	.LBB37_141
.LBB37_130:                             # %cond.true.778
	cmpq	$0, -16(%rbp)
	jge	.LBB37_135
# BB#131:                               # %cond.true.781
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jge	.LBB37_133
# BB#132:                               # %cond.true.787
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	jmp	.LBB37_134
.LBB37_133:                             # %cond.false.795
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
.LBB37_134:                             # %cond.end.799
	movq	-304(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -312(%rbp)        # 8-byte Spill
	cqto
	movq	-312(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-296(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_155
	jmp	.LBB37_152
.LBB37_135:                             # %cond.false.804
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_136
	jmp	.LBB37_137
.LBB37_136:                             # %cond.true.805
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_155
	jmp	.LBB37_152
.LBB37_137:                             # %cond.false.806
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_139
# BB#138:                               # %cond.true.812
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	jmp	.LBB37_140
.LBB37_139:                             # %cond.false.829
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
.LBB37_140:                             # %cond.end.833
	movq	-320(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -328(%rbp)        # 8-byte Spill
	cqto
	movq	-328(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_155
	jmp	.LBB37_152
.LBB37_141:                             # %cond.false.838
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_142
	jmp	.LBB37_143
.LBB37_142:                             # %cond.true.839
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_155
	jmp	.LBB37_152
.LBB37_143:                             # %cond.false.840
	cmpq	$0, -16(%rbp)
	jge	.LBB37_148
# BB#144:                               # %cond.true.843
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -336(%rbp)        # 8-byte Spill
	jge	.LBB37_146
# BB#145:                               # %cond.true.849
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	jmp	.LBB37_147
.LBB37_146:                             # %cond.false.866
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
.LBB37_147:                             # %cond.end.870
	movq	-344(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -352(%rbp)        # 8-byte Spill
	cqto
	movq	-352(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-336(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_155
	jmp	.LBB37_152
.LBB37_148:                             # %cond.false.875
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_150
# BB#149:                               # %cond.true.881
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	jmp	.LBB37_151
.LBB37_150:                             # %cond.false.889
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
.LBB37_151:                             # %cond.end.893
	movq	-360(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -368(%rbp)        # 8-byte Spill
	cqto
	movq	-368(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_155
.LBB37_152:                             # %lor.lhs.false.898
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_154
# BB#153:                               # %land.lhs.true.904
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	cmpq	$-32768, %rax           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB37_155
.LBB37_154:                             # %lor.lhs.false.908
	movl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	shlq	$3, %rdx
	cmpq	%rdx, %rcx
	jge	.LBB37_159
.LBB37_155:                             # %cond.true.912
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB37_157
# BB#156:                               # %cond.true.918
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -372(%rbp)        # 4-byte Spill
	jmp	.LBB37_158
.LBB37_157:                             # %cond.false.924
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -372(%rbp)        # 4-byte Spill
.LBB37_158:                             # %cond.end.932
	movl	-372(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_159:                             # %cond.false.935
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB37_161
# BB#160:                               # %cond.true.941
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -376(%rbp)        # 4-byte Spill
	jmp	.LBB37_162
.LBB37_161:                             # %cond.false.947
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	shll	$3, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -376(%rbp)        # 4-byte Spill
.LBB37_162:                             # %cond.end.955
	movl	-376(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_163:                             # %cond.false.958
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_164
	jmp	.LBB37_243
.LBB37_164:                             # %cond.true.959
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_165
	jmp	.LBB37_204
.LBB37_165:                             # %cond.true.960
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB37_167
# BB#166:                               # %cond.true.967
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	subl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -380(%rbp)        # 4-byte Spill
	jmp	.LBB37_168
.LBB37_167:                             # %cond.false.985
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -380(%rbp)        # 4-byte Spill
.LBB37_168:                             # %cond.end.990
	movl	-380(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB37_170
# BB#169:                               # %land.lhs.true.994
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jl	.LBB37_196
.LBB37_170:                             # %lor.lhs.false.998
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_171
	jmp	.LBB37_182
.LBB37_171:                             # %cond.true.999
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB37_176
# BB#172:                               # %cond.true.1003
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	movl	%ecx, -384(%rbp)        # 4-byte Spill
	jge	.LBB37_174
# BB#173:                               # %cond.true.1011
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$1, %ecx
	shll	$30, %ecx
	subl	$1, %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	%ecx, -388(%rbp)        # 4-byte Spill
	jmp	.LBB37_175
.LBB37_174:                             # %cond.false.1020
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	movl	%ecx, -388(%rbp)        # 4-byte Spill
.LBB37_175:                             # %cond.end.1025
	movl	-388(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movl	-384(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB37_196
	jmp	.LBB37_193
.LBB37_176:                             # %cond.false.1030
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_177
	jmp	.LBB37_178
.LBB37_177:                             # %cond.true.1031
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_196
	jmp	.LBB37_193
.LBB37_178:                             # %cond.false.1032
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB37_180
# BB#179:                               # %cond.true.1039
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	subl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
	jmp	.LBB37_181
.LBB37_180:                             # %cond.false.1057
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -392(%rbp)        # 4-byte Spill
.LBB37_181:                             # %cond.end.1062
	movl	-392(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movq	-16(%rbp), %rsi
	movl	%esi, %ecx
	cmpl	%ecx, %eax
	jl	.LBB37_196
	jmp	.LBB37_193
.LBB37_182:                             # %cond.false.1068
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_183
	jmp	.LBB37_184
.LBB37_183:                             # %cond.true.1069
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_196
	jmp	.LBB37_193
.LBB37_184:                             # %cond.false.1070
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB37_189
# BB#185:                               # %cond.true.1074
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	movl	%ecx, -396(%rbp)        # 4-byte Spill
	jge	.LBB37_187
# BB#186:                               # %cond.true.1082
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	subl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -400(%rbp)        # 4-byte Spill
	jmp	.LBB37_188
.LBB37_187:                             # %cond.false.1100
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -400(%rbp)        # 4-byte Spill
.LBB37_188:                             # %cond.end.1105
	movl	-400(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movl	-396(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB37_196
	jmp	.LBB37_193
.LBB37_189:                             # %cond.false.1110
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB37_191
# BB#190:                               # %cond.true.1117
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$1, %ecx
	shll	$30, %ecx
	subl	$1, %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	%ecx, -404(%rbp)        # 4-byte Spill
	jmp	.LBB37_192
.LBB37_191:                             # %cond.false.1126
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	movl	%ecx, -404(%rbp)        # 4-byte Spill
.LBB37_192:                             # %cond.end.1131
	movl	-404(%rbp), %eax        # 4-byte Reload
	movl	$8, %ecx
	cltd
	idivl	%ecx
	movq	-16(%rbp), %rsi
	movl	%esi, %ecx
	cmpl	%ecx, %eax
	jl	.LBB37_196
.LBB37_193:                             # %lor.lhs.false.1137
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB37_195
# BB#194:                               # %land.lhs.true.1144
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	cmpl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	jl	.LBB37_196
.LBB37_195:                             # %lor.lhs.false.1149
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	shll	$3, %edx
	cmpl	%edx, %eax
	jge	.LBB37_200
.LBB37_196:                             # %cond.true.1154
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB37_198
# BB#197:                               # %cond.true.1159
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	%ecx, -408(%rbp)        # 4-byte Spill
	jmp	.LBB37_199
.LBB37_198:                             # %cond.false.1162
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -408(%rbp)        # 4-byte Spill
.LBB37_199:                             # %cond.end.1167
	movl	-408(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_200:                             # %cond.false.1170
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB37_202
# BB#201:                               # %cond.true.1175
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	%ecx, -412(%rbp)        # 4-byte Spill
	jmp	.LBB37_203
.LBB37_202:                             # %cond.false.1178
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -412(%rbp)        # 4-byte Spill
.LBB37_203:                             # %cond.end.1183
	movl	-412(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_204:                             # %cond.false.1186
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_206
# BB#205:                               # %cond.true.1192
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -424(%rbp)        # 8-byte Spill
	jmp	.LBB37_207
.LBB37_206:                             # %cond.false.1209
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
.LBB37_207:                             # %cond.end.1213
	movq	-424(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_209
# BB#208:                               # %land.lhs.true.1217
	cmpq	$0, -16(%rbp)
	jl	.LBB37_235
.LBB37_209:                             # %lor.lhs.false.1220
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_210
	jmp	.LBB37_221
.LBB37_210:                             # %cond.true.1221
	cmpq	$0, -16(%rbp)
	jge	.LBB37_215
# BB#211:                               # %cond.true.1224
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -432(%rbp)        # 8-byte Spill
	jge	.LBB37_213
# BB#212:                               # %cond.true.1230
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	jmp	.LBB37_214
.LBB37_213:                             # %cond.false.1238
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
.LBB37_214:                             # %cond.end.1242
	movq	-440(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -448(%rbp)        # 8-byte Spill
	cqto
	movq	-448(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-432(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_235
	jmp	.LBB37_232
.LBB37_215:                             # %cond.false.1247
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_216
	jmp	.LBB37_217
.LBB37_216:                             # %cond.true.1248
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_235
	jmp	.LBB37_232
.LBB37_217:                             # %cond.false.1249
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_219
# BB#218:                               # %cond.true.1255
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	jmp	.LBB37_220
.LBB37_219:                             # %cond.false.1272
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
.LBB37_220:                             # %cond.end.1276
	movq	-456(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	cqto
	movq	-464(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_235
	jmp	.LBB37_232
.LBB37_221:                             # %cond.false.1281
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_222
	jmp	.LBB37_223
.LBB37_222:                             # %cond.true.1282
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_235
	jmp	.LBB37_232
.LBB37_223:                             # %cond.false.1283
	cmpq	$0, -16(%rbp)
	jge	.LBB37_228
# BB#224:                               # %cond.true.1286
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -472(%rbp)        # 8-byte Spill
	jge	.LBB37_226
# BB#225:                               # %cond.true.1292
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	jmp	.LBB37_227
.LBB37_226:                             # %cond.false.1309
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
.LBB37_227:                             # %cond.end.1313
	movq	-480(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	cqto
	movq	-488(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-472(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_235
	jmp	.LBB37_232
.LBB37_228:                             # %cond.false.1318
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_230
# BB#229:                               # %cond.true.1324
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	jmp	.LBB37_231
.LBB37_230:                             # %cond.false.1332
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
.LBB37_231:                             # %cond.end.1336
	movq	-496(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	cqto
	movq	-504(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_235
.LBB37_232:                             # %lor.lhs.false.1341
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_234
# BB#233:                               # %land.lhs.true.1347
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	cmpq	$-2147483648, %rax      # imm = 0xFFFFFFFF80000000
	jl	.LBB37_235
.LBB37_234:                             # %lor.lhs.false.1351
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	shlq	$3, %rdx
	cmpq	%rdx, %rcx
	jge	.LBB37_239
.LBB37_235:                             # %cond.true.1355
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB37_237
# BB#236:                               # %cond.true.1360
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	%ecx, -508(%rbp)        # 4-byte Spill
	jmp	.LBB37_238
.LBB37_237:                             # %cond.false.1363
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -508(%rbp)        # 4-byte Spill
.LBB37_238:                             # %cond.end.1368
	movl	-508(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_239:                             # %cond.false.1371
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB37_241
# BB#240:                               # %cond.true.1376
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	%ecx, -512(%rbp)        # 4-byte Spill
	jmp	.LBB37_242
.LBB37_241:                             # %cond.false.1379
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	shll	$3, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -512(%rbp)        # 4-byte Spill
.LBB37_242:                             # %cond.end.1384
	movl	-512(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_243:                             # %cond.false.1387
	movb	$1, %al
	testb	$1, %al
	jne	.LBB37_244
	jmp	.LBB37_323
.LBB37_244:                             # %cond.true.1388
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_245
	jmp	.LBB37_284
.LBB37_245:                             # %cond.true.1389
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_247
# BB#246:                               # %cond.true.1395
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -520(%rbp)        # 8-byte Spill
	jmp	.LBB37_248
.LBB37_247:                             # %cond.false.1412
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.LBB37_248:                             # %cond.end.1416
	movq	-520(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_250
# BB#249:                               # %land.lhs.true.1420
	cmpq	$0, -16(%rbp)
	jl	.LBB37_276
.LBB37_250:                             # %lor.lhs.false.1423
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_251
	jmp	.LBB37_262
.LBB37_251:                             # %cond.true.1424
	cmpq	$0, -16(%rbp)
	jge	.LBB37_256
# BB#252:                               # %cond.true.1427
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -528(%rbp)        # 8-byte Spill
	jge	.LBB37_254
# BB#253:                               # %cond.true.1433
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	jmp	.LBB37_255
.LBB37_254:                             # %cond.false.1441
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
.LBB37_255:                             # %cond.end.1445
	movq	-536(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -544(%rbp)        # 8-byte Spill
	cqto
	movq	-544(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-528(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_276
	jmp	.LBB37_273
.LBB37_256:                             # %cond.false.1450
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_257
	jmp	.LBB37_258
.LBB37_257:                             # %cond.true.1451
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_276
	jmp	.LBB37_273
.LBB37_258:                             # %cond.false.1452
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_260
# BB#259:                               # %cond.true.1458
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	jmp	.LBB37_261
.LBB37_260:                             # %cond.false.1475
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
.LBB37_261:                             # %cond.end.1479
	movq	-552(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	cqto
	movq	-560(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_276
	jmp	.LBB37_273
.LBB37_262:                             # %cond.false.1484
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_263
	jmp	.LBB37_264
.LBB37_263:                             # %cond.true.1485
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_276
	jmp	.LBB37_273
.LBB37_264:                             # %cond.false.1486
	cmpq	$0, -16(%rbp)
	jge	.LBB37_269
# BB#265:                               # %cond.true.1489
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -568(%rbp)        # 8-byte Spill
	jge	.LBB37_267
# BB#266:                               # %cond.true.1495
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -576(%rbp)        # 8-byte Spill
	jmp	.LBB37_268
.LBB37_267:                             # %cond.false.1512
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
.LBB37_268:                             # %cond.end.1516
	movq	-576(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -584(%rbp)        # 8-byte Spill
	cqto
	movq	-584(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-568(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_276
	jmp	.LBB37_273
.LBB37_269:                             # %cond.false.1521
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_271
# BB#270:                               # %cond.true.1527
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -592(%rbp)        # 8-byte Spill
	jmp	.LBB37_272
.LBB37_271:                             # %cond.false.1535
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -592(%rbp)        # 8-byte Spill
.LBB37_272:                             # %cond.end.1539
	movq	-592(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -600(%rbp)        # 8-byte Spill
	cqto
	movq	-600(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_276
.LBB37_273:                             # %lor.lhs.false.1544
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_275
# BB#274:                               # %land.lhs.true.1550
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	jl	.LBB37_276
.LBB37_275:                             # %lor.lhs.false.1554
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rcx, %rax
	jge	.LBB37_280
.LBB37_276:                             # %cond.true.1558
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_278
# BB#277:                               # %cond.true.1562
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	jmp	.LBB37_279
.LBB37_278:                             # %cond.false.1564
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
.LBB37_279:                             # %cond.end.1568
	movq	-608(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_280:                             # %cond.false.1570
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_282
# BB#281:                               # %cond.true.1574
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	jmp	.LBB37_283
.LBB37_282:                             # %cond.false.1576
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
.LBB37_283:                             # %cond.end.1580
	movq	-616(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_284:                             # %cond.false.1582
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_286
# BB#285:                               # %cond.true.1588
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	jmp	.LBB37_287
.LBB37_286:                             # %cond.false.1605
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
.LBB37_287:                             # %cond.end.1609
	movq	-624(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_289
# BB#288:                               # %land.lhs.true.1613
	cmpq	$0, -16(%rbp)
	jl	.LBB37_315
.LBB37_289:                             # %lor.lhs.false.1616
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_290
	jmp	.LBB37_301
.LBB37_290:                             # %cond.true.1617
	cmpq	$0, -16(%rbp)
	jge	.LBB37_295
# BB#291:                               # %cond.true.1620
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -632(%rbp)        # 8-byte Spill
	jge	.LBB37_293
# BB#292:                               # %cond.true.1626
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	jmp	.LBB37_294
.LBB37_293:                             # %cond.false.1634
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
.LBB37_294:                             # %cond.end.1638
	movq	-640(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -648(%rbp)        # 8-byte Spill
	cqto
	movq	-648(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-632(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_315
	jmp	.LBB37_312
.LBB37_295:                             # %cond.false.1643
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_296
	jmp	.LBB37_297
.LBB37_296:                             # %cond.true.1644
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_315
	jmp	.LBB37_312
.LBB37_297:                             # %cond.false.1645
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_299
# BB#298:                               # %cond.true.1651
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -656(%rbp)        # 8-byte Spill
	jmp	.LBB37_300
.LBB37_299:                             # %cond.false.1668
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -656(%rbp)        # 8-byte Spill
.LBB37_300:                             # %cond.end.1672
	movq	-656(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -664(%rbp)        # 8-byte Spill
	cqto
	movq	-664(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_315
	jmp	.LBB37_312
.LBB37_301:                             # %cond.false.1677
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_302
	jmp	.LBB37_303
.LBB37_302:                             # %cond.true.1678
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_315
	jmp	.LBB37_312
.LBB37_303:                             # %cond.false.1679
	cmpq	$0, -16(%rbp)
	jge	.LBB37_308
# BB#304:                               # %cond.true.1682
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -672(%rbp)        # 8-byte Spill
	jge	.LBB37_306
# BB#305:                               # %cond.true.1688
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -680(%rbp)        # 8-byte Spill
	jmp	.LBB37_307
.LBB37_306:                             # %cond.false.1705
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
.LBB37_307:                             # %cond.end.1709
	movq	-680(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	cqto
	movq	-688(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-672(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_315
	jmp	.LBB37_312
.LBB37_308:                             # %cond.false.1714
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_310
# BB#309:                               # %cond.true.1720
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	jmp	.LBB37_311
.LBB37_310:                             # %cond.false.1728
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
.LBB37_311:                             # %cond.end.1732
	movq	-696(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -704(%rbp)        # 8-byte Spill
	cqto
	movq	-704(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_315
.LBB37_312:                             # %lor.lhs.false.1737
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_314
# BB#313:                               # %land.lhs.true.1743
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	jl	.LBB37_315
.LBB37_314:                             # %lor.lhs.false.1747
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rcx, %rax
	jge	.LBB37_319
.LBB37_315:                             # %cond.true.1751
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_317
# BB#316:                               # %cond.true.1755
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
	jmp	.LBB37_318
.LBB37_317:                             # %cond.false.1757
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
.LBB37_318:                             # %cond.end.1761
	movq	-712(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_319:                             # %cond.false.1763
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_321
# BB#320:                               # %cond.true.1767
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
	jmp	.LBB37_322
.LBB37_321:                             # %cond.false.1769
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
.LBB37_322:                             # %cond.end.1773
	movq	-720(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_323:                             # %cond.false.1775
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_324
	jmp	.LBB37_363
.LBB37_324:                             # %cond.true.1776
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_326
# BB#325:                               # %cond.true.1782
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	jmp	.LBB37_327
.LBB37_326:                             # %cond.false.1799
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -728(%rbp)        # 8-byte Spill
.LBB37_327:                             # %cond.end.1803
	movq	-728(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_329
# BB#328:                               # %land.lhs.true.1807
	cmpq	$0, -16(%rbp)
	jl	.LBB37_355
.LBB37_329:                             # %lor.lhs.false.1810
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_330
	jmp	.LBB37_341
.LBB37_330:                             # %cond.true.1811
	cmpq	$0, -16(%rbp)
	jge	.LBB37_335
# BB#331:                               # %cond.true.1814
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -736(%rbp)        # 8-byte Spill
	jge	.LBB37_333
# BB#332:                               # %cond.true.1820
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	jmp	.LBB37_334
.LBB37_333:                             # %cond.false.1828
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
.LBB37_334:                             # %cond.end.1832
	movq	-744(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -752(%rbp)        # 8-byte Spill
	cqto
	movq	-752(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-736(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_355
	jmp	.LBB37_352
.LBB37_335:                             # %cond.false.1837
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_336
	jmp	.LBB37_337
.LBB37_336:                             # %cond.true.1838
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_355
	jmp	.LBB37_352
.LBB37_337:                             # %cond.false.1839
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_339
# BB#338:                               # %cond.true.1845
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	jmp	.LBB37_340
.LBB37_339:                             # %cond.false.1862
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
.LBB37_340:                             # %cond.end.1866
	movq	-760(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	cqto
	movq	-768(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_355
	jmp	.LBB37_352
.LBB37_341:                             # %cond.false.1871
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_342
	jmp	.LBB37_343
.LBB37_342:                             # %cond.true.1872
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_355
	jmp	.LBB37_352
.LBB37_343:                             # %cond.false.1873
	cmpq	$0, -16(%rbp)
	jge	.LBB37_348
# BB#344:                               # %cond.true.1876
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -776(%rbp)        # 8-byte Spill
	jge	.LBB37_346
# BB#345:                               # %cond.true.1882
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	jmp	.LBB37_347
.LBB37_346:                             # %cond.false.1899
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
.LBB37_347:                             # %cond.end.1903
	movq	-784(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -792(%rbp)        # 8-byte Spill
	cqto
	movq	-792(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-776(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_355
	jmp	.LBB37_352
.LBB37_348:                             # %cond.false.1908
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_350
# BB#349:                               # %cond.true.1914
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	jmp	.LBB37_351
.LBB37_350:                             # %cond.false.1922
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
.LBB37_351:                             # %cond.end.1926
	movq	-800(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -808(%rbp)        # 8-byte Spill
	cqto
	movq	-808(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_355
.LBB37_352:                             # %lor.lhs.false.1931
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_354
# BB#353:                               # %land.lhs.true.1937
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	jl	.LBB37_355
.LBB37_354:                             # %lor.lhs.false.1941
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rcx, %rax
	jge	.LBB37_359
.LBB37_355:                             # %cond.true.1945
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_357
# BB#356:                               # %cond.true.1949
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	jmp	.LBB37_358
.LBB37_357:                             # %cond.false.1951
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
.LBB37_358:                             # %cond.end.1955
	movq	-816(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_359:                             # %cond.false.1957
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_361
# BB#360:                               # %cond.true.1961
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
	jmp	.LBB37_362
.LBB37_361:                             # %cond.false.1963
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
.LBB37_362:                             # %cond.end.1967
	movq	-824(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_363:                             # %cond.false.1969
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_365
# BB#364:                               # %cond.true.1975
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -832(%rbp)        # 8-byte Spill
	jmp	.LBB37_366
.LBB37_365:                             # %cond.false.1992
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
.LBB37_366:                             # %cond.end.1996
	movq	-832(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB37_368
# BB#367:                               # %land.lhs.true.2000
	cmpq	$0, -16(%rbp)
	jl	.LBB37_394
.LBB37_368:                             # %lor.lhs.false.2003
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_369
	jmp	.LBB37_380
.LBB37_369:                             # %cond.true.2004
	cmpq	$0, -16(%rbp)
	jge	.LBB37_374
# BB#370:                               # %cond.true.2007
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -840(%rbp)        # 8-byte Spill
	jge	.LBB37_372
# BB#371:                               # %cond.true.2013
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	jmp	.LBB37_373
.LBB37_372:                             # %cond.false.2021
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
.LBB37_373:                             # %cond.end.2025
	movq	-848(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -856(%rbp)        # 8-byte Spill
	cqto
	movq	-856(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-840(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_394
	jmp	.LBB37_391
.LBB37_374:                             # %cond.false.2030
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_375
	jmp	.LBB37_376
.LBB37_375:                             # %cond.true.2031
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_394
	jmp	.LBB37_391
.LBB37_376:                             # %cond.false.2032
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_378
# BB#377:                               # %cond.true.2038
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -864(%rbp)        # 8-byte Spill
	jmp	.LBB37_379
.LBB37_378:                             # %cond.false.2055
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
.LBB37_379:                             # %cond.end.2059
	movq	-864(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	cqto
	movq	-872(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_394
	jmp	.LBB37_391
.LBB37_380:                             # %cond.false.2064
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_381
	jmp	.LBB37_382
.LBB37_381:                             # %cond.true.2065
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB37_394
	jmp	.LBB37_391
.LBB37_382:                             # %cond.false.2066
	cmpq	$0, -16(%rbp)
	jge	.LBB37_387
# BB#383:                               # %cond.true.2069
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -880(%rbp)        # 8-byte Spill
	jge	.LBB37_385
# BB#384:                               # %cond.true.2075
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-16(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	jmp	.LBB37_386
.LBB37_385:                             # %cond.false.2092
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
.LBB37_386:                             # %cond.end.2096
	movq	-888(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -896(%rbp)        # 8-byte Spill
	cqto
	movq	-896(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-880(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB37_394
	jmp	.LBB37_391
.LBB37_387:                             # %cond.false.2101
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_389
# BB#388:                               # %cond.true.2107
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	jmp	.LBB37_390
.LBB37_389:                             # %cond.false.2115
	movq	-16(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
.LBB37_390:                             # %cond.end.2119
	movq	-904(%rbp), %rax        # 8-byte Reload
	movl	$8, %ecx
	movl	%ecx, %edx
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	cqto
	movq	-912(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-16(%rbp), %rax
	jl	.LBB37_394
.LBB37_391:                             # %lor.lhs.false.2124
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB37_393
# BB#392:                               # %land.lhs.true.2130
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	jl	.LBB37_394
.LBB37_393:                             # %lor.lhs.false.2134
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rcx, %rax
	jge	.LBB37_398
.LBB37_394:                             # %cond.true.2138
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_396
# BB#395:                               # %cond.true.2142
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	jmp	.LBB37_397
.LBB37_396:                             # %cond.false.2144
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
.LBB37_397:                             # %cond.end.2148
	movq	-920(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -96(%rbp)
	testb	$1, %cl
	jne	.LBB37_403
	jmp	.LBB37_402
.LBB37_398:                             # %cond.false.2150
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rcx
	shlq	$3, %rcx
	cmpq	%rax, %rcx
	ja	.LBB37_400
# BB#399:                               # %cond.true.2154
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	jmp	.LBB37_401
.LBB37_400:                             # %cond.false.2156
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
.LBB37_401:                             # %cond.end.2160
	movq	-928(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -96(%rbp)
	testb	$1, %dl
	jne	.LBB37_403
.LBB37_402:                             # %lor.lhs.false.2162
	movq	$-1, %rax
	cmpq	-96(%rbp), %rax
	jae	.LBB37_404
.LBB37_403:                             # %if.then.2165
	movq	$-1, %rdi
	callq	memory_full
.LBB37_404:                             # %if.else.2166
	movq	-96(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jg	.LBB37_406
# BB#405:                               # %if.then.2169
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movq	-96(%rbp), %rax
	addq	$15, %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -64(%rbp)
	jmp	.LBB37_407
.LBB37_406:                             # %if.else.2171
	movq	-96(%rbp), %rdi
	callq	xmalloc
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	make_save_memory
	movabsq	$free_save_value, %rdi
	movq	%rax, -104(%rbp)
	movb	$1, -81(%rbp)
	movq	-104(%rbp), %rsi
	callq	record_unwind_protect
.LBB37_407:                             # %if.end
	jmp	.LBB37_408
.LBB37_408:                             # %if.end.2174
	jmp	.LBB37_409
.LBB37_409:                             # %do.end
	movq	-24(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	$1, -48(%rbp)
.LBB37_410:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB37_416
# BB#411:                               # %for.body
                                        #   in Loop: Header=BB37_410 Depth=1
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	$40, %ecx
	movq	%rax, -936(%rbp)        # 8-byte Spill
	movl	%ecx, -940(%rbp)        # 4-byte Spill
	ja	.LBB37_413
# BB#412:                               # %vaarg.in_reg
                                        #   in Loop: Header=BB37_410 Depth=1
	movl	-940(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-936(%rbp), %rdx        # 8-byte Reload
	addq	16(%rdx), %rcx
	addl	$8, %eax
	movl	%eax, (%rdx)
	movq	%rcx, -952(%rbp)        # 8-byte Spill
	jmp	.LBB37_414
.LBB37_413:                             # %vaarg.in_mem
                                        #   in Loop: Header=BB37_410 Depth=1
	movq	-936(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, %rdx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	%rdx, -952(%rbp)        # 8-byte Spill
.LBB37_414:                             # %vaarg.end
                                        #   in Loop: Header=BB37_410 Depth=1
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	%rax, (%rdx,%rcx,8)
# BB#415:                               # %for.inc
                                        #   in Loop: Header=BB37_410 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB37_410
.LBB37_416:                             # %for.end
	movl	$548, %edi              # imm = 0x224
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -960(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	testb	$1, -1(%rbp)
	je	.LBB37_418
# BB#417:                               # %if.then.2181
	movl	$546, %edi              # imm = 0x222
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -968(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-968(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
.LBB37_418:                             # %if.end.2184
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%rsi, -984(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$Ffuncall, %rdi
	movabsq	$safe_eval_handler, %r8
	movq	-984(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	internal_condition_case_n
	movq	%rax, -40(%rbp)
# BB#419:                               # %do.body.2187
	testb	$1, -81(%rbp)
	je	.LBB37_421
# BB#420:                               # %if.then.2189
	xorl	%edi, %edi
	movb	$0, -81(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-992(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -1000(%rbp)       # 8-byte Spill
.LBB37_421:                             # %if.end.2192
	jmp	.LBB37_422
.LBB37_422:                             # %do.end.2193
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	unbind_to
	movq	%rax, -40(%rbp)
.LBB37_423:                             # %if.end.2195
	movq	-40(%rbp), %rax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end37:
	.size	safe__call, .Lfunc_end37-safe__call
	.cfi_endproc

	.globl	safe_call1
	.align	16, 0x90
	.type	safe_call1,@function
safe_call1:                             # @safe_call1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp114:
	.cfi_def_cfa_offset 16
.Ltmp115:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp116:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	%rcx, %rdi
	movb	$0, %al
	callq	safe_call
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end38:
	.size	safe_call1, .Lfunc_end38-safe_call1
	.cfi_endproc

	.globl	safe_eval
	.align	16, 0x90
	.type	safe_eval,@function
safe_eval:                              # @safe_eval
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp117:
	.cfi_def_cfa_offset 16
.Ltmp118:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp119:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$378, %eax              # imm = 0x17A
	movq	%rdi, -8(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-8(%rbp), %rdx
	movq	%rax, %rsi
	movb	$0, %al
	callq	safe__call1
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end39:
	.size	safe_eval, .Lfunc_end39-safe_eval
	.cfi_endproc

	.align	16, 0x90
	.type	safe__call1,@function
safe__call1:                            # @safe__call1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp120:
	.cfi_def_cfa_offset 16
.Ltmp121:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp122:
	.cfi_def_cfa_register %rbp
	subq	$400, %rsp              # imm = 0x190
	testb	%al, %al
	movaps	%xmm7, -240(%rbp)       # 16-byte Spill
	movaps	%xmm6, -256(%rbp)       # 16-byte Spill
	movaps	%xmm5, -272(%rbp)       # 16-byte Spill
	movaps	%xmm4, -288(%rbp)       # 16-byte Spill
	movaps	%xmm3, -304(%rbp)       # 16-byte Spill
	movaps	%xmm2, -320(%rbp)       # 16-byte Spill
	movaps	%xmm1, -336(%rbp)       # 16-byte Spill
	movaps	%xmm0, -352(%rbp)       # 16-byte Spill
	movl	%edi, -356(%rbp)        # 4-byte Spill
	movq	%r9, -368(%rbp)         # 8-byte Spill
	movq	%r8, -376(%rbp)         # 8-byte Spill
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rdx, -392(%rbp)        # 8-byte Spill
	movq	%rsi, -400(%rbp)        # 8-byte Spill
	je	.LBB40_2
# BB#1:                                 # %entry
	movaps	-352(%rbp), %xmm0       # 16-byte Reload
	movaps	%xmm0, -176(%rbp)
	movaps	-336(%rbp), %xmm1       # 16-byte Reload
	movaps	%xmm1, -160(%rbp)
	movaps	-320(%rbp), %xmm2       # 16-byte Reload
	movaps	%xmm2, -144(%rbp)
	movaps	-304(%rbp), %xmm3       # 16-byte Reload
	movaps	%xmm3, -128(%rbp)
	movaps	-288(%rbp), %xmm4       # 16-byte Reload
	movaps	%xmm4, -112(%rbp)
	movaps	-272(%rbp), %xmm5       # 16-byte Reload
	movaps	%xmm5, -96(%rbp)
	movaps	-256(%rbp), %xmm6       # 16-byte Reload
	movaps	%xmm6, -80(%rbp)
	movaps	-240(%rbp), %xmm7       # 16-byte Reload
	movaps	%xmm7, -64(%rbp)
.LBB40_2:                               # %entry
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)
	movq	-376(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -192(%rbp)
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -200(%rbp)
	movq	-392(%rbp), %rsi        # 8-byte Reload
	movq	%rsi, -208(%rbp)
	movl	-356(%rbp), %edi        # 4-byte Reload
	movb	%dil, %r8b
	movq	-400(%rbp), %r9         # 8-byte Reload
	andb	$1, %r8b
	movb	%r8b, -1(%rbp)
	movq	%r9, -16(%rbp)
	leaq	-224(%rbp), %r9
	movq	%r9, -32(%rbp)
	leaq	16(%rbp), %r9
	movq	%r9, -40(%rbp)
	movl	$48, -44(%rbp)
	movl	$16, -48(%rbp)
	movq	-16(%rbp), %rdx
	movzbl	-1(%rbp), %r10d
	andl	$1, %r10d
	movl	$2, %r11d
	movl	%r11d, %esi
	leaq	-48(%rbp), %rcx
	movl	%r10d, %edi
	callq	safe__call
	movq	%rax, -24(%rbp)
	addq	$400, %rsp              # imm = 0x190
	popq	%rbp
	retq
.Lfunc_end40:
	.size	safe__call1, .Lfunc_end40-safe__call1
	.cfi_endproc

	.globl	safe_call2
	.align	16, 0x90
	.type	safe_call2,@function
safe_call2:                             # @safe_call2
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp123:
	.cfi_def_cfa_offset 16
.Ltmp124:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp125:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$3, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-32(%rbp), %rcx         # 8-byte Reload
	movb	$0, %al
	callq	safe_call
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end41:
	.size	safe_call2, .Lfunc_end41-safe_call2
	.cfi_endproc

	.globl	init_iterator
	.align	16, 0x90
	.type	init_iterator,@function
init_iterator:                          # @init_iterator
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp126:
	.cfi_def_cfa_offset 16
.Ltmp127:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp128:
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movl	%r9d, -44(%rbp)
	movl	-44(%rbp), %r9d
	movl	%r9d, -48(%rbp)
	testb	$1, globals+3391
	jne	.LBB42_7
# BB#1:                                 # %if.then
	testb	$1, face_change
	je	.LBB42_3
# BB#2:                                 # %if.then.2
	xorl	%edi, %edi
	movb	$0, face_change
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	free_all_realized_faces
	jmp	.LBB42_6
.LBB42_3:                               # %if.else
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$40, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB42_5
# BB#4:                                 # %if.then.3
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movabsq	$-1099511627777, %rcx   # imm = 0xFFFFFEFFFFFFFFFF
	andq	208(%rax), %rcx
	movq	%rcx, 208(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	free_all_realized_faces
.LBB42_5:                               # %if.end
	jmp	.LBB42_6
.LBB42_6:                               # %if.end.10
	jmp	.LBB42_7
.LBB42_7:                               # %if.end.11
	xorl	%edi, %edi
	movq	globals+728, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB42_9
# BB#8:                                 # %if.then.13
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	-44(%rbp), %esi
	movq	%rax, %rdi
	callq	lookup_basic_face
	movl	%eax, -48(%rbp)
.LBB42_9:                               # %if.end.17
	cmpq	$0, -40(%rbp)
	jne	.LBB42_17
# BB#10:                                # %if.then.19
	cmpl	$1, -44(%rbp)
	je	.LBB42_12
# BB#11:                                # %lor.lhs.false
	cmpl	$2, -44(%rbp)
	jne	.LBB42_13
.LBB42_12:                              # %if.then.22
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	200(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	addq	$-256, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB42_16
.LBB42_13:                              # %if.else.25
	cmpl	$5, -44(%rbp)
	jne	.LBB42_15
# BB#14:                                # %if.then.27
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB42_15:                              # %if.end.30
	jmp	.LBB42_16
.LBB42_16:                              # %if.end.31
	jmp	.LBB42_17
.LBB42_17:                              # %if.end.32
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %esi
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdi
	callq	memclear
	movl	$5, %esi
	movq	-8(%rbp), %rcx
	movq	$-1, 328(%rcx)
	movq	-8(%rbp), %rcx
	movl	$-1, 352(%rcx)
	movl	-48(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2120(%rcx)
	movq	-8(%rbp), %rcx
	movq	$-1, 344(%rcx)
	movq	-8(%rbp), %rcx
	movq	$-1, 336(%rcx)
	movq	-8(%rbp), %rcx
	movl	$1, 4792(%rcx)
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 4760(%rdi)
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdi
	callq	make_lisp_ptr
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-8(%rbp), %rax
	movq	$-1, 2144(%rax)
	cmpl	$0, -44(%rbp)
	jne	.LBB42_28
# BB#18:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB42_28
# BB#19:                                # %if.then.52
	movq	current_buffer, %rax
	movq	560(%rax), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB42_20
	jmp	.LBB42_21
.LBB42_20:                              # %if.then.54
	movq	current_buffer, %rax
	movq	560(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2328(%rax)
	jmp	.LBB42_27
.LBB42_21:                              # %if.else.56
	movq	current_buffer, %rax
	movq	560(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB42_23
# BB#22:                                # %if.then.61
	movq	current_buffer, %rax
	movq	560(%rax), %rdi
	callq	XFLOAT_DATA
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	cvtsi2sdl	368(%rax), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2328(%rax)
	jmp	.LBB42_26
.LBB42_23:                              # %if.else.68
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	cmpl	$0, 464(%rax)
	jle	.LBB42_25
# BB#24:                                # %if.then.73
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	464(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2328(%rax)
.LBB42_25:                              # %if.end.77
	jmp	.LBB42_26
.LBB42_26:                              # %if.end.78
	jmp	.LBB42_27
.LBB42_27:                              # %if.end.79
	jmp	.LBB42_28
.LBB42_28:                              # %if.end.80
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	cmpq	$0, 160(%rax)
	jne	.LBB42_30
# BB#29:                                # %if.then.84
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	init_frame_faces
.LBB42_30:                              # %if.end.86
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB42_32
# BB#31:                                # %if.then.91
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	recompute_basic_faces
.LBB42_32:                              # %if.end.93
	movq	-8(%rbp), %rax
	movl	$-1, 2336(%rax)
	movq	current_buffer(%rip), %rax
	movq	232(%rax), %rax
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	setne	%dl
	movq	-8(%rbp), %rax
	movzbl	%dl, %edi
	movw	%di, %si
	movw	2112(%rax), %r8w
	shlw	$1, %si
	andw	$-3, %r8w
	orw	%si, %r8w
	movw	%r8w, 2112(%rax)
	movq	current_buffer, %rax
	movq	256(%rax), %rax
	andq	$7, %rax
	movl	%eax, %edi
	andl	$-5, %edi
	cmpl	$2, %edi
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	jne	.LBB42_34
# BB#33:                                # %cond.true
	movq	$-1, %rdi
	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
	movq	current_buffer, %rax
	movq	256(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	clip_to_bounds
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB42_35
.LBB42_34:                              # %cond.false
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	256(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-96(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	sete	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	cmovnel	%ecx, %edi
	movslq	%edi, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB42_35:                              # %cond.end
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 2096(%rcx)
	movq	current_buffer(%rip), %rax
	movq	264(%rax), %rax
	xorl	%edi, %edi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	setne	%dl
	movq	-8(%rbp), %rax
	movzbl	%dl, %edi
	movw	%di, %si
	movw	2112(%rax), %r8w
	andw	$-2, %r8w
	orw	%si, %r8w
	movw	%r8w, 2112(%rax)
	movq	-16(%rbp), %rdi
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	window_display_table
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movb	88(%rax), %r9b
	andb	$-2, %r9b
	orb	%dl, %r9b
	movb	%r9b, 88(%rax)
	movq	-16(%rbp), %rax
	movq	168(%rax), %rax
	andq	$7, %rax
	movl	%eax, %edi
	cmpl	$1, %edi
	jne	.LBB42_39
# BB#36:                                # %land.lhs.true.137
	movq	-16(%rbp), %rax
	movq	168(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB42_39
# BB#37:                                # %land.lhs.true.142
	movq	-16(%rbp), %rax
	movq	168(%rax), %rdi
	callq	XMARKER
	cmpq	$0, 8(%rax)
	je	.LBB42_39
# BB#38:                                # %if.then.147
	movq	-16(%rbp), %rax
	movq	168(%rax), %rdi
	callq	marker_position
	movq	-8(%rbp), %rdi
	movq	%rax, 80(%rdi)
	jmp	.LBB42_42
.LBB42_39:                              # %if.else.150
	movq	-16(%rbp), %rax
	movq	168(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB42_41
# BB#40:                                # %if.then.157
	movabsq	$-9223372036854775808, %rdi # imm = 0x8000000000000000
	movabsq	$9223372036854775807, %rdx # imm = 0x7FFFFFFFFFFFFFFF
	movq	-16(%rbp), %rax
	movq	168(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	clip_to_bounds
	movq	-8(%rbp), %rdx
	movq	%rax, 80(%rdx)
.LBB42_41:                              # %if.end.162
	jmp	.LBB42_42
.LBB42_42:                              # %if.end.163
	movq	current_buffer, %rax
	movq	152(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rdi
	callq	sanitize_tab_width
	movw	%ax, %cx
	movq	-8(%rbp), %rdi
	movw	%cx, 2274(%rdi)
	cmpl	$0, -44(%rbp)
	jne	.LBB42_50
# BB#43:                                # %land.lhs.true.169
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 272(%rax)
	jne	.LBB42_50
# BB#44:                                # %land.lhs.true.172
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-124(%rbp), %ecx        # 4-byte Reload
	cmpl	256(%rax), %ecx
	je	.LBB42_48
# BB#45:                                # %lor.lhs.false.181
	xorl	%edi, %edi
	movq	globals+2472, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB42_48
# BB#46:                                # %lor.lhs.false.185
	movq	globals+2472, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB42_50
# BB#47:                                # %land.lhs.true.191
	movq	globals+2472, %rax
	sarq	$2, %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movslq	264(%rcx), %rcx
	cmpq	%rcx, %rax
	jg	.LBB42_50
.LBB42_48:                              # %land.lhs.true.197
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	216(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB42_50
# BB#49:                                # %if.then.201
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	224(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	movl	$2, %ecx
	movq	-152(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movq	-8(%rbp), %rax
	movl	%edi, 2116(%rax)
.LBB42_50:                              # %if.end.206
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB42_53
# BB#51:                                # %land.lhs.true.215
	movq	tip_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB42_52
	jmp	.LBB42_53
.LBB42_52:                              # %land.lhs.true.218
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	tip_frame, %rcx
	subq	$5, %rcx
	cmpq	%rcx, %rax
	je	.LBB42_57
.LBB42_53:                              # %if.then.223
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB42_55
# BB#54:                                # %if.then.227
	movl	$6, %esi
	movq	-8(%rbp), %rdi
	callq	produce_special_glyphs
	movq	-8(%rbp), %rdi
	movl	2368(%rdi), %esi
	movw	%si, %ax
	movq	-8(%rbp), %rdi
	movw	%ax, 2312(%rdi)
	jmp	.LBB42_56
.LBB42_55:                              # %if.else.230
	movl	$7, %esi
	movq	-8(%rbp), %rdi
	callq	produce_special_glyphs
	movq	-8(%rbp), %rdi
	movl	2368(%rdi), %esi
	movw	%si, %ax
	movq	-8(%rbp), %rdi
	movw	%ax, 2314(%rdi)
.LBB42_56:                              # %if.end.233
	jmp	.LBB42_57
.LBB42_57:                              # %if.end.234
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2368(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2392(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2388(%rax)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2352(%rcx)
	movq	-8(%rbp), %rax
	movl	$1, 2360(%rax)
	cmpl	$0, -44(%rbp)
	je	.LBB42_59
# BB#58:                                # %if.then.238
	movq	-8(%rbp), %rax
	movl	$0, 2316(%rax)
	movq	-16(%rbp), %rax
	movl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2320(%rax)
	jmp	.LBB42_116
.LBB42_59:                              # %if.else.240
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	16(%rax), %rsi
	callq	window_hscroll_limited
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	imull	364(%rdi), %eax
	movq	-8(%rbp), %rdi
	movl	%eax, 2316(%rdi)
	movq	-8(%rbp), %rdi
	movl	2316(%rdi), %eax
	movq	-16(%rbp), %rdi
	movl	%eax, -156(%rbp)        # 4-byte Spill
	callq	window_box_width
	movl	-156(%rbp), %esi        # 4-byte Reload
	addl	%eax, %esi
	movq	-8(%rbp), %rdi
	movl	%esi, 2320(%rdi)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	cmpl	$0, 424(%rdi)
	jl	.LBB42_61
# BB#60:                                # %cond.true.253
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -160(%rbp)        # 4-byte Spill
	jmp	.LBB42_62
.LBB42_61:                              # %cond.false.256
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -160(%rbp)        # 4-byte Spill
.LBB42_62:                              # %cond.end.261
	movl	-160(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB42_67
# BB#63:                                # %if.then.265
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB42_65
# BB#64:                                # %if.then.269
	movq	-8(%rbp), %rax
	movswl	2312(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2320(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 2320(%rax)
	jmp	.LBB42_66
.LBB42_65:                              # %if.else.274
	movq	-8(%rbp), %rax
	movswl	2314(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2320(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 2320(%rax)
.LBB42_66:                              # %if.end.279
	jmp	.LBB42_67
.LBB42_67:                              # %if.end.280
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB42_68
	jmp	.LBB42_83
.LBB42_68:                              # %cond.true.283
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -161(%rbp)         # 1-byte Spill
	jne	.LBB42_82
# BB#69:                                # %land.lhs.true.287
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -161(%rbp)         # 1-byte Spill
	jne	.LBB42_82
# BB#70:                                # %land.lhs.true.292
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -161(%rbp)         # 1-byte Spill
	je	.LBB42_82
# BB#71:                                # %land.lhs.true.300
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-176(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -161(%rbp)         # 1-byte Spill
	je	.LBB42_82
# BB#72:                                # %land.rhs
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -180(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB42_73
	jmp	.LBB42_78
.LBB42_73:                              # %cond.true.309
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB42_80
# BB#74:                                # %land.lhs.true.314
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB42_80
# BB#75:                                # %land.lhs.true.320
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB42_80
# BB#76:                                # %land.lhs.true.329
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB42_80
# BB#77:                                # %land.lhs.true.335
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB42_79
	jmp	.LBB42_80
.LBB42_78:                              # %cond.false.342
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB42_79
	jmp	.LBB42_80
.LBB42_79:                              # %cond.true.343
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -196(%rbp)        # 4-byte Spill
	jmp	.LBB42_81
.LBB42_80:                              # %cond.false.348
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -196(%rbp)        # 4-byte Spill
.LBB42_81:                              # %cond.end.352
	movl	-196(%rbp), %eax        # 4-byte Reload
	movl	-180(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -161(%rbp)         # 1-byte Spill
.LBB42_82:                              # %land.end
	movb	-161(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -200(%rbp)        # 4-byte Spill
	jmp	.LBB42_84
.LBB42_83:                              # %cond.false.356
	xorl	%eax, %eax
	movl	%eax, -200(%rbp)        # 4-byte Spill
	jmp	.LBB42_84
.LBB42_84:                              # %cond.end.357
	movl	-200(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	movq	-8(%rbp), %rdx
	andb	$1, %cl
	movb	88(%rdx), %sil
	shlb	$1, %cl
	andb	$-3, %sil
	orb	%cl, %sil
	movb	%sil, 88(%rdx)
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB42_85
	jmp	.LBB42_99
.LBB42_85:                              # %cond.true.368
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB42_114
# BB#86:                                # %land.lhs.true.373
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB42_114
# BB#87:                                # %land.lhs.true.379
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB42_114
# BB#88:                                # %land.lhs.true.388
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB42_114
# BB#89:                                # %land.lhs.true.395
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -212(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB42_90
	jmp	.LBB42_95
.LBB42_90:                              # %cond.true.400
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB42_97
# BB#91:                                # %land.lhs.true.405
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB42_97
# BB#92:                                # %land.lhs.true.411
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB42_97
# BB#93:                                # %land.lhs.true.420
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB42_97
# BB#94:                                # %land.lhs.true.427
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB42_96
	jmp	.LBB42_97
.LBB42_95:                              # %cond.false.434
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB42_96
	jmp	.LBB42_97
.LBB42_96:                              # %cond.true.435
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -228(%rbp)        # 4-byte Spill
	jmp	.LBB42_98
.LBB42_97:                              # %cond.false.440
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -228(%rbp)        # 4-byte Spill
.LBB42_98:                              # %cond.end.444
	movl	-228(%rbp), %eax        # 4-byte Reload
	movl	-212(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB42_100
	jmp	.LBB42_114
.LBB42_99:                              # %cond.false.448
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB42_100
	jmp	.LBB42_114
.LBB42_100:                             # %cond.true.449
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB42_102
# BB#101:                               # %cond.true.452
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -232(%rbp)        # 4-byte Spill
	jmp	.LBB42_113
.LBB42_102:                             # %cond.false.454
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB42_105
# BB#103:                               # %land.lhs.true.456
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB42_105
# BB#104:                               # %cond.true.460
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB42_106
	jmp	.LBB42_111
.LBB42_105:                             # %cond.false.464
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB42_106
	jmp	.LBB42_111
.LBB42_106:                             # %cond.true.465
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB42_109
# BB#107:                               # %land.lhs.true.468
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB42_109
# BB#108:                               # %cond.true.472
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -236(%rbp)        # 4-byte Spill
	jmp	.LBB42_110
.LBB42_109:                             # %cond.false.476
	xorl	%eax, %eax
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB42_110
.LBB42_110:                             # %cond.end.477
	movl	-236(%rbp), %eax        # 4-byte Reload
	movl	%eax, -240(%rbp)        # 4-byte Spill
	jmp	.LBB42_112
.LBB42_111:                             # %cond.false.479
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -240(%rbp)        # 4-byte Spill
.LBB42_112:                             # %cond.end.483
	movl	-240(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -232(%rbp)        # 4-byte Spill
.LBB42_113:                             # %cond.end.486
	movl	-232(%rbp), %eax        # 4-byte Reload
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB42_115
.LBB42_114:                             # %cond.false.488
	xorl	%eax, %eax
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB42_115
.LBB42_115:                             # %cond.end.489
	movl	-244(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	addl	472(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2432(%rcx)
.LBB42_116:                             # %if.end.492
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB42_119
# BB#117:                               # %land.lhs.true.501
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	addl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -248(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -252(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-252(%rbp), %ecx        # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-248(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB42_119
# BB#118:                               # %if.then.521
	movq	-8(%rbp), %rax
	movl	2320(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 2320(%rax)
.LBB42_119:                             # %if.end.524
	movq	-16(%rbp), %rdi
	callq	window_text_bottom_y
	movq	-8(%rbp), %rdi
	movl	%eax, 2324(%rdi)
	cmpl	$0, -44(%rbp)
	je	.LBB42_129
# BB#120:                               # %if.then.528
	movb	$1, %al
	movl	-48(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movl	%ecx, 2108(%rdx)
	testb	$1, %al
	jne	.LBB42_121
	jmp	.LBB42_122
.LBB42_121:                             # %cond.true.529
	movl	-48(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB42_123
	jmp	.LBB42_124
.LBB42_122:                             # %cond.false.537
	movl	-48(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	160(%rdx), %rdx
	movslq	32(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rcx
	jae	.LBB42_124
.LBB42_123:                             # %cond.true.547
	movl	-48(%rbp), %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	160(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	jmp	.LBB42_125
.LBB42_124:                             # %cond.false.550
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	jmp	.LBB42_125
.LBB42_125:                             # %cond.end.551
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB42_128
# BB#126:                               # %land.lhs.true.554
	movq	-56(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB42_128
# BB#127:                               # %if.then.559
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-9, %cx
	orw	$8, %cx
	movw	%cx, 2112(%rax)
.LBB42_128:                             # %if.end.563
	jmp	.LBB42_129
.LBB42_129:                             # %if.end.564
	cmpq	$1, -24(%rbp)
	jl	.LBB42_155
# BB#130:                               # %if.then.567
	xorl	%eax, %eax
	movb	%al, %cl
	movl	$48, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 32(%rdi)
	movq	current_buffer, %rsi
	movq	768(%rsi), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 56(%rdi)
	movq	-24(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 312(%rdi)
	movq	-32(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 320(%rdi)
	movq	-8(%rbp), %rsi
	movl	2120(%rsi), %eax
	movq	-8(%rbp), %rsi
	movl	%eax, 2108(%rsi)
	movq	-8(%rbp), %rsi
	addq	$264, %rsi              # imm = 0x108
	movq	-8(%rbp), %rdi
	addq	$312, %rdi              # imm = 0x138
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movb	%cl, -273(%rbp)         # 1-byte Spill
	callq	memcpy
	testb	$1, globals+3426
	movb	-273(%rbp), %cl         # 1-byte Reload
	movb	%cl, -274(%rbp)         # 1-byte Spill
	jne	.LBB42_133
# BB#131:                               # %land.lhs.true.577
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	240(%rax), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-288(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -274(%rbp)         # 1-byte Spill
	je	.LBB42_133
# BB#132:                               # %land.rhs.581
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	movb	%cl, -274(%rbp)         # 1-byte Spill
.LBB42_133:                             # %land.end.587
	movb	-274(%rbp), %al         # 1-byte Reload
	movq	-8(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	2456(%rcx), %esi
	shll	$20, %edx
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%edx, %esi
	movl	%esi, 2456(%rcx)
	movq	-8(%rbp), %rcx
	movl	2456(%rcx), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB42_154
# BB#134:                               # %if.then.600
	cmpl	$0, -44(%rbp)
	jne	.LBB42_147
# BB#135:                               # %land.lhs.true.603
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB42_137
# BB#136:                               # %cond.true.607
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -292(%rbp)        # 4-byte Spill
	jmp	.LBB42_138
.LBB42_137:                             # %cond.false.610
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -292(%rbp)        # 4-byte Spill
.LBB42_138:                             # %cond.end.615
	movl	-292(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB42_147
# BB#139:                               # %land.lhs.true.619
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB42_141
# BB#140:                               # %cond.true.624
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -296(%rbp)        # 4-byte Spill
	jmp	.LBB42_142
.LBB42_141:                             # %cond.false.627
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -296(%rbp)        # 4-byte Spill
.LBB42_142:                             # %cond.end.632
	movl	-296(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB42_147
# BB#143:                               # %if.then.636
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB42_145
# BB#144:                               # %if.then.640
	movq	-8(%rbp), %rax
	movswl	2312(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2320(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 2320(%rax)
	jmp	.LBB42_146
.LBB42_145:                             # %if.else.645
	movq	-8(%rbp), %rax
	movswl	2314(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2320(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 2320(%rax)
.LBB42_146:                             # %if.end.650
	jmp	.LBB42_147
.LBB42_147:                             # %if.end.651
	movl	$610, %edi              # imm = 0x262
	movq	current_buffer, %rax
	movq	248(%rax), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB42_149
# BB#148:                               # %if.then.655
	movq	-8(%rbp), %rax
	movl	$1, 4792(%rax)
	jmp	.LBB42_153
.LBB42_149:                             # %if.else.657
	movl	$816, %edi              # imm = 0x330
	movq	current_buffer, %rax
	movq	248(%rax), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-312(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB42_151
# BB#150:                               # %if.then.662
	movq	-8(%rbp), %rax
	movl	$2, 4792(%rax)
	jmp	.LBB42_152
.LBB42_151:                             # %if.else.664
	movq	-8(%rbp), %rax
	movl	$0, 4792(%rax)
.LBB42_152:                             # %if.end.666
	jmp	.LBB42_153
.LBB42_153:                             # %if.end.667
	xorl	%eax, %eax
	movl	%eax, %edi
	xorl	%esi, %esi
	callq	bidi_unshelve_cache
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	320(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	cmpl	$2, %eax
	sete	%dl
	movq	-8(%rbp), %rcx
	addq	$2464, %rcx             # imm = 0x9A0
	movzbl	%dl, %eax
	andl	$1, %eax
	movl	%eax, %edx
	callq	bidi_init_it
.LBB42_154:                             # %if.end.680
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat
.LBB42_155:                             # %if.end.683
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	retq
.Lfunc_end42:
	.size	init_iterator, .Lfunc_end42-init_iterator
	.cfi_endproc

	.align	16, 0x90
	.type	produce_special_glyphs,@function
produce_special_glyphs:                 # @produce_special_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp129:
	.cfi_def_cfa_offset 16
.Ltmp130:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp131:
	.cfi_def_cfa_register %rbp
	subq	$4928, %rsp             # imm = 0x1340
	xorl	%eax, %eax
	movl	$4800, %ecx             # imm = 0x12C0
	movl	%ecx, %edx
	leaq	-4816(%rbp), %r8
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -4872(%rbp)       # 8-byte Spill
	movq	%r8, %rdi
	movq	-4872(%rbp), %rsi       # 8-byte Reload
	movl	%eax, -4876(%rbp)       # 4-byte Spill
	callq	memcpy
	movl	-4876(%rbp), %edi       # 4-byte Reload
	callq	builtin_lisp_symbol
	xorl	%esi, %esi
	movl	$48, %ecx
	movl	%ecx, %edx
	leaq	-4816(%rbp), %r8
	movq	%rax, -2528(%rbp)
	addq	$312, %r8               # imm = 0x138
	movq	%r8, %rdi
	callq	memset
	cmpl	$7, -12(%rbp)
	jne	.LBB43_13
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB43_3
# BB#2:                                 # %if.then.2
	movl	$47, -4832(%rbp)
	movl	$0, -4828(%rbp)
	jmp	.LBB43_4
.LBB43_3:                               # %if.else
	movl	$92, -4832(%rbp)
	movl	$0, -4828(%rbp)
.LBB43_4:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB43_12
# BB#5:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	560(%rax), %rax
	movq	%rax, -4824(%rbp)
	movq	-4824(%rbp), %rdi
	callq	GLYPH_CODE_P
	testb	$1, %al
	jne	.LBB43_6
	jmp	.LBB43_12
.LBB43_6:                               # %if.then.7
	jmp	.LBB43_7
.LBB43_7:                               # %do.body
	movq	-4824(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB43_9
# BB#8:                                 # %if.then.10
	movq	-4824(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -4832(%rbp)
	movq	-4824(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -4828(%rbp)
	jmp	.LBB43_10
.LBB43_9:                               # %if.else.17
	movq	-4824(%rbp), %rax
	sarq	$2, %rax
	andq	$4194303, %rax          # imm = 0x3FFFFF
	movl	%eax, %ecx
	movl	%ecx, -4832(%rbp)
	movq	-4824(%rbp), %rax
	sarq	$2, %rax
	sarq	$22, %rax
	movl	%eax, %ecx
	movl	%ecx, -4828(%rbp)
.LBB43_10:                              # %if.end.26
	jmp	.LBB43_11
.LBB43_11:                              # %do.end
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	XWINDOW
	leaq	-4832(%rbp), %rsi
	movq	%rax, %rdi
	callq	spec_glyph_lookup_face
.LBB43_12:                              # %if.end.28
	jmp	.LBB43_25
.LBB43_13:                              # %if.else.29
	cmpl	$6, -12(%rbp)
	jne	.LBB43_23
# BB#14:                                # %if.then.32
	movl	$36, -4832(%rbp)
	movl	$0, -4828(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB43_22
# BB#15:                                # %land.lhs.true.37
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	552(%rax), %rax
	movq	%rax, -4824(%rbp)
	movq	-4824(%rbp), %rdi
	callq	GLYPH_CODE_P
	testb	$1, %al
	jne	.LBB43_16
	jmp	.LBB43_22
.LBB43_16:                              # %if.then.43
	jmp	.LBB43_17
.LBB43_17:                              # %do.body.44
	movq	-4824(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB43_19
# BB#18:                                # %if.then.49
	movq	-4824(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -4832(%rbp)
	movq	-4824(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -4828(%rbp)
	jmp	.LBB43_20
.LBB43_19:                              # %if.else.61
	movq	-4824(%rbp), %rax
	sarq	$2, %rax
	andq	$4194303, %rax          # imm = 0x3FFFFF
	movl	%eax, %ecx
	movl	%ecx, -4832(%rbp)
	movq	-4824(%rbp), %rax
	sarq	$2, %rax
	sarq	$22, %rax
	movl	%eax, %ecx
	movl	%ecx, -4828(%rbp)
.LBB43_20:                              # %if.end.70
	jmp	.LBB43_21
.LBB43_21:                              # %do.end.71
	movq	-8(%rbp), %rax
	movq	(%rax), %rdi
	callq	XWINDOW
	leaq	-4832(%rbp), %rsi
	movq	%rax, %rdi
	callq	spec_glyph_lookup_face
.LBB43_22:                              # %if.end.74
	jmp	.LBB43_24
.LBB43_23:                              # %if.else.75
	callq	emacs_abort
.LBB43_24:                              # %if.end.76
	jmp	.LBB43_25
.LBB43_25:                              # %if.end.77
	movq	-4800(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB43_49
# BB#26:                                # %land.lhs.true.80
	cmpq	$0, -2464(%rbp)
	je	.LBB43_49
# BB#27:                                # %land.lhs.true.82
	movq	-2464(%rbp), %rax
	movswl	34(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB43_49
# BB#28:                                # %land.lhs.true.88
	movq	-2464(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB43_33
# BB#29:                                # %cond.true
	movq	-4808(%rbp), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB43_31
# BB#30:                                # %cond.true.97
	movq	-4808(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -4880(%rbp)       # 4-byte Spill
	jmp	.LBB43_32
.LBB43_31:                              # %cond.false
	movq	-4808(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -4880(%rbp)       # 4-byte Spill
.LBB43_32:                              # %cond.end
	movl	-4880(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4884(%rbp)       # 4-byte Spill
	jmp	.LBB43_37
.LBB43_33:                              # %cond.false.103
	movq	-4808(%rbp), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB43_35
# BB#34:                                # %cond.true.107
	movq	-4808(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -4888(%rbp)       # 4-byte Spill
	jmp	.LBB43_36
.LBB43_35:                              # %cond.false.110
	movq	-4808(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -4888(%rbp)       # 4-byte Spill
.LBB43_36:                              # %cond.end.115
	movl	-4888(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4884(%rbp)       # 4-byte Spill
.LBB43_37:                              # %cond.end.117
	movl	-4884(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB43_49
# BB#38:                                # %if.then.121
	movl	-2496(%rbp), %eax
	subl	-2412(%rbp), %eax
	movl	%eax, -4836(%rbp)
	cmpl	$0, -4836(%rbp)
	jle	.LBB43_48
# BB#39:                                # %if.then.125
	movb	$1, %al
	testb	$1, %al
	jne	.LBB43_40
	jmp	.LBB43_41
.LBB43_40:                              # %cond.true.126
	movl	-2708(%rbp), %eax
	addl	$0, %eax
	movq	-4800(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB43_42
	jmp	.LBB43_43
.LBB43_41:                              # %cond.false.133
	movslq	-2708(%rbp), %rax
	addq	$0, %rax
	movq	-4800(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB43_43
.LBB43_42:                              # %cond.true.144
	movslq	-2708(%rbp), %rax
	movq	-4800(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	jmp	.LBB43_44
.LBB43_43:                              # %cond.false.149
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4896(%rbp)       # 8-byte Spill
	jmp	.LBB43_44
.LBB43_44:                              # %cond.end.150
	movq	-4896(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4848(%rbp)
	movq	-4848(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB43_46
# BB#45:                                # %cond.true.154
	movq	-4848(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	jmp	.LBB43_47
.LBB43_46:                              # %cond.false.156
	movq	-4800(%rbp), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
.LBB43_47:                              # %cond.end.159
	movq	-4904(%rbp), %rax       # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -4856(%rbp)
	movl	-2444(%rbp), %ecx
	addl	-2440(%rbp), %ecx
	movq	-4856(%rbp), %rax
	imull	168(%rax), %ecx
	movq	-4856(%rbp), %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	movl	%ecx, %eax
	cltd
	movq	-4912(%rbp), %rsi       # 8-byte Reload
	idivl	156(%rsi)
	movl	%eax, -4860(%rbp)
	callq	builtin_lisp_symbol
	leaq	-4816(%rbp), %rdi
	movl	-4836(%rbp), %ecx
	movl	-2444(%rbp), %r8d
	addl	-2440(%rbp), %r8d
	movl	-4860(%rbp), %r9d
	movq	%rax, %rsi
	movl	%ecx, %edx
	movl	%r8d, %ecx
	movl	%r9d, %r8d
	callq	append_stretch_glyph
.LBB43_48:                              # %if.end.167
	jmp	.LBB43_49
.LBB43_49:                              # %if.end.168
	movq	$0, -4720(%rbp)
	movl	$0, -2712(%rbp)
	movq	-4832(%rbp), %rdi
	callq	GLYPH_CHAR
	movl	%eax, -2608(%rbp)
	movl	%eax, -2692(%rbp)
	movq	-4832(%rbp), %rdi
	callq	GLYPH_FACE
	movl	%eax, -2708(%rbp)
	cmpl	$127, -2692(%rbp)
	jg	.LBB43_51
# BB#50:                                # %cond.true.177
	movl	$1, %eax
	movl	%eax, -4916(%rbp)       # 4-byte Spill
	jmp	.LBB43_61
.LBB43_51:                              # %cond.false.178
	cmpl	$2047, -2692(%rbp)      # imm = 0x7FF
	jg	.LBB43_53
# BB#52:                                # %cond.true.182
	movl	$2, %eax
	movl	%eax, -4920(%rbp)       # 4-byte Spill
	jmp	.LBB43_60
.LBB43_53:                              # %cond.false.183
	cmpl	$65535, -2692(%rbp)     # imm = 0xFFFF
	jg	.LBB43_55
# BB#54:                                # %cond.true.187
	movl	$3, %eax
	movl	%eax, -4924(%rbp)       # 4-byte Spill
	jmp	.LBB43_59
.LBB43_55:                              # %cond.false.188
	cmpl	$2097151, -2692(%rbp)   # imm = 0x1FFFFF
	jg	.LBB43_57
# BB#56:                                # %cond.true.192
	movl	$4, %eax
	movl	%eax, -4928(%rbp)       # 4-byte Spill
	jmp	.LBB43_58
.LBB43_57:                              # %cond.false.193
	movl	$2, %eax
	movl	$5, %ecx
	cmpl	$4194175, -2692(%rbp)   # imm = 0x3FFF7F
	cmovlel	%ecx, %eax
	movl	%eax, -4928(%rbp)       # 4-byte Spill
.LBB43_58:                              # %cond.end.198
	movl	-4928(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4924(%rbp)       # 4-byte Spill
.LBB43_59:                              # %cond.end.200
	movl	-4924(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4920(%rbp)       # 4-byte Spill
.LBB43_60:                              # %cond.end.202
	movl	-4920(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4916(%rbp)       # 4-byte Spill
.LBB43_61:                              # %cond.end.204
	movl	-4916(%rbp), %eax       # 4-byte Reload
	movl	%eax, -2688(%rbp)
# BB#62:                                # %do.body.206
	cmpq	$0, -2464(%rbp)
	je	.LBB43_65
# BB#63:                                # %land.lhs.true.210
	movl	-2360(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB43_65
# BB#64:                                # %if.then.216
	cmpl	$2, -48(%rbp)
	sete	%al
	movq	-2464(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB43_65:                              # %if.end.226
	movq	-4800(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB43_67
# BB#66:                                # %if.then.230
	leaq	-4816(%rbp), %rdi
	movq	-4800(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	callq	*8(%rax)
	jmp	.LBB43_68
.LBB43_67:                              # %if.else.234
	leaq	-4816(%rbp), %rdi
	callq	produce_glyphs
.LBB43_68:                              # %if.end.235
	cmpq	$0, -2464(%rbp)
	je	.LBB43_70
# BB#69:                                # %if.then.239
	movb	$1, globals+3391
.LBB43_70:                              # %if.end.240
	jmp	.LBB43_71
.LBB43_71:                              # %do.end.241
	movl	-2448(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movl	-2452(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2364(%rcx)
	addq	$4928, %rsp             # imm = 0x1340
	popq	%rbp
	retq
.Lfunc_end43:
	.size	produce_special_glyphs, .Lfunc_end43-produce_special_glyphs
	.cfi_endproc

	.align	16, 0x90
	.type	reseat,@function
reseat:                                 # @reseat
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp132:
	.cfi_def_cfa_offset 16
.Ltmp133:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp134:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	%cl, %al
	xorl	%ecx, %ecx
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rdi, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	%rdx, -40(%rbp)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rdx
	callq	reseat_1
	testb	$1, -25(%rbp)
	jne	.LBB44_3
# BB#1:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	cmpq	32(%rcx), %rax
	jg	.LBB44_3
# BB#2:                                 # %lor.lhs.false.3
	movq	-16(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB44_11
.LBB44_3:                               # %if.then
	movq	-24(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB44_9
# BB#4:                                 # %if.then.6
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	cmpq	40(%rcx), %rax
	je	.LBB44_6
# BB#5:                                 # %if.then.9
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 40(%rcx)
.LBB44_6:                               # %if.end
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	cmpq	48(%rcx), %rax
	jge	.LBB44_8
# BB#7:                                 # %if.then.14
	movq	-24(%rbp), %rax
	movq	$0, 48(%rax)
.LBB44_8:                               # %if.end.16
	movq	-24(%rbp), %rdi
	callq	handle_stop
	jmp	.LBB44_10
.LBB44_9:                               # %if.else
	movq	-24(%rbp), %rdi
	callq	handle_stop
	movq	-24(%rbp), %rdi
	movq	$0, 48(%rdi)
	movq	-24(%rbp), %rdi
	movq	$0, 40(%rdi)
.LBB44_10:                              # %if.end.19
	jmp	.LBB44_11
.LBB44_11:                              # %if.end.20
	movq	-24(%rbp), %rdi
	callq	CHECK_IT
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end44:
	.size	reseat, .Lfunc_end44-reseat
	.cfi_endproc

	.align	16, 0x90
	.type	CHECK_IT,@function
CHECK_IT:                               # @CHECK_IT
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp135:
	.cfi_def_cfa_offset 16
.Ltmp136:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp137:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
.Lfunc_end45:
	.size	CHECK_IT, .Lfunc_end45-CHECK_IT
	.cfi_endproc

	.globl	reseat_at_previous_visible_line_start
	.align	16, 0x90
	.type	reseat_at_previous_visible_line_start,@function
reseat_at_previous_visible_line_start:  # @reseat_at_previous_visible_line_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp138:
	.cfi_def_cfa_offset 16
.Ltmp139:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp140:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	back_to_previous_visible_line_start
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end46:
	.size	reseat_at_previous_visible_line_start, .Lfunc_end46-reseat_at_previous_visible_line_start
	.cfi_endproc

	.globl	compute_display_string_pos
	.align	16, 0x90
	.type	compute_display_string_pos,@function
compute_display_string_pos:             # @compute_display_string_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp141:
	.cfi_def_cfa_offset 16
.Ltmp142:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp143:
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              # imm = 0x130
	movb	%cl, %al
	xorl	%ecx, %ecx
	movb	%cl, %r9b
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	andb	$1, %al
	movb	%al, -33(%rbp)
	movq	%r8, -48(%rbp)
	cmpq	$0, -24(%rbp)
	movb	%r9b, -157(%rbp)        # 1-byte Spill
	je	.LBB47_4
# BB#1:                                 # %land.rhs
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	STRINGP
	movb	$1, %cl
	testb	$1, %al
	movb	%cl, -158(%rbp)         # 1-byte Spill
	jne	.LBB47_3
# BB#2:                                 # %lor.rhs
	movq	-24(%rbp), %rax
	cmpq	$0, 8(%rax)
	setne	%cl
	movb	%cl, -158(%rbp)         # 1-byte Spill
.LBB47_3:                               # %lor.end
	movb	-158(%rbp), %al         # 1-byte Reload
	movb	%al, -157(%rbp)         # 1-byte Spill
.LBB47_4:                               # %land.end
	movb	-157(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -89(%rbp)
	testb	$1, -89(%rbp)
	je	.LBB47_6
# BB#5:                                 # %cond.true
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB47_7
.LBB47_6:                               # %cond.false
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB47_7:                               # %cond.end
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)
	testb	$1, -89(%rbp)
	je	.LBB47_9
# BB#8:                                 # %cond.true.5
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jmp	.LBB47_10
.LBB47_9:                               # %cond.false.6
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB47_10:                              # %cond.end.7
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	-104(%rbp), %rcx
	subq	$250, %rcx
	cmpq	%rcx, %rax
	jge	.LBB47_12
# BB#11:                                # %cond.true.10
	movq	-128(%rbp), %rax
	addq	$250, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB47_13
.LBB47_12:                              # %cond.false.11
	movq	-104(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB47_13:                              # %cond.end.12
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, -136(%rbp)
	movl	$0, -156(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB47_16
# BB#14:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB47_15
	jmp	.LBB47_16
.LBB47_15:                              # %if.then
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	jmp	.LBB47_21
.LBB47_16:                              # %if.else
	cmpq	$0, -32(%rbp)
	je	.LBB47_19
# BB#17:                                # %land.lhs.true.19
	testb	$1, -89(%rbp)
	jne	.LBB47_19
# BB#18:                                # %if.then.21
	movl	$5, %esi
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	xorl	%edi, %edi
	movq	%rax, -56(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -64(%rbp)
	jmp	.LBB47_20
.LBB47_19:                              # %if.else.24
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
.LBB47_20:                              # %if.end
	jmp	.LBB47_21
.LBB47_21:                              # %if.end.26
	movq	-48(%rbp), %rax
	movl	$1, (%rax)
	movq	-128(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jge	.LBB47_25
# BB#22:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	movb	32(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB47_25
# BB#23:                                # %lor.lhs.false.28
	movq	-24(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB47_26
# BB#24:                                # %land.lhs.true.31
	movq	-56(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB47_26
.LBB47_25:                              # %if.then.33
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-104(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB47_51
.LBB47_26:                              # %if.end.34
	movq	-128(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	movq	-56(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB47_27
	jmp	.LBB47_28
.LBB47_27:                              # %if.then.37
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -120(%rbp)
	jmp	.LBB47_29
.LBB47_28:                              # %if.else.39
	movq	-128(%rbp), %rax
	movq	%rax, -120(%rbp)
.LBB47_29:                              # %if.end.40
	movl	$344, %edi              # imm = 0x158
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, -152(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdx
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -80(%rbp)
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB47_36
# BB#30:                                # %land.lhs.true.45
	movq	-128(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jle	.LBB47_32
# BB#31:                                # %lor.lhs.false.47
	movl	$344, %edi              # imm = 0x158
	movq	-128(%rbp), %rax
	subq	$1, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdx
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	cmpq	-80(%rbp), %rax
	je	.LBB47_36
.LBB47_32:                              # %land.lhs.true.54
	xorl	%edi, %edi
	movq	-80(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	%rdx, -216(%rbp)        # 8-byte Spill
	movq	%rsi, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-152(%rbp), %r8
	movq	-120(%rbp), %r9
	movb	-33(%rbp), %cl
	andb	$1, %cl
	movq	-224(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movb	%cl, -225(%rbp)         # 1-byte Spill
	movq	%rax, %rcx
	movb	-225(%rbp), %r10b       # 1-byte Reload
	movzbl	%r10b, %r11d
	movl	%r11d, (%rsp)
	callq	handle_display_spec
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	je	.LBB47_36
# BB#33:                                # %if.then.59
	cmpl	$2, -156(%rbp)
	jne	.LBB47_35
# BB#34:                                # %if.then.61
	movq	-48(%rbp), %rax
	movl	$2, (%rax)
.LBB47_35:                              # %if.end.62
	movq	-128(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB47_51
.LBB47_36:                              # %if.end.63
	movq	-136(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -88(%rbp)
.LBB47_37:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-72(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fnext_single_char_property_change
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB47_39
# BB#38:                                # %if.then.71
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB47_48
.LBB47_39:                              # %if.end.72
                                        #   in Loop: Header=BB47_37 Depth=1
	movq	-56(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB47_40
	jmp	.LBB47_41
.LBB47_40:                              # %if.then.74
                                        #   in Loop: Header=BB47_37 Depth=1
	movq	-56(%rbp), %rdi
	movq	-152(%rbp), %rsi
	callq	string_char_to_byte
	movq	%rax, -144(%rbp)
	jmp	.LBB47_42
.LBB47_41:                              # %if.else.77
                                        #   in Loop: Header=BB47_37 Depth=1
	movq	current_buffer, %rdi
	movq	-152(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -144(%rbp)
.LBB47_42:                              # %if.end.81
                                        #   in Loop: Header=BB47_37 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-72(%rbp), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdx
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	movq	%rax, -80(%rbp)
	movq	-56(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB47_44
# BB#43:                                # %if.then.85
                                        #   in Loop: Header=BB47_37 Depth=1
	movq	-152(%rbp), %rax
	movq	%rax, -120(%rbp)
.LBB47_44:                              # %if.end.87
                                        #   in Loop: Header=BB47_37 Depth=1
	jmp	.LBB47_45
.LBB47_45:                              # %do.cond
                                        #   in Loop: Header=BB47_37 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movb	$1, %cl
	movq	-256(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -257(%rbp)         # 1-byte Spill
	je	.LBB47_47
# BB#46:                                # %lor.rhs.90
                                        #   in Loop: Header=BB47_37 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	movq	%rsi, -280(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-152(%rbp), %r8
	movq	-120(%rbp), %r9
	movb	-33(%rbp), %cl
	andb	$1, %cl
	movq	-280(%rbp), %rsi        # 8-byte Reload
	movq	-272(%rbp), %rdx        # 8-byte Reload
	movb	%cl, -281(%rbp)         # 1-byte Spill
	movq	%rax, %rcx
	movb	-281(%rbp), %r10b       # 1-byte Reload
	movzbl	%r10b, %r11d
	movl	%r11d, (%rsp)
	callq	handle_display_spec
	movl	%eax, -156(%rbp)
	cmpl	$0, %eax
	setne	%r10b
	xorb	$-1, %r10b
	movb	%r10b, -257(%rbp)       # 1-byte Spill
.LBB47_47:                              # %lor.end.95
                                        #   in Loop: Header=BB47_37 Depth=1
	movb	-257(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB47_37
.LBB47_48:                              # %do.end
	cmpl	$2, -156(%rbp)
	jne	.LBB47_50
# BB#49:                                # %if.then.97
	movq	-48(%rbp), %rax
	movl	$2, (%rax)
.LBB47_50:                              # %if.end.98
	movq	-152(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB47_51:                              # %return
	movq	-8(%rbp), %rax
	addq	$304, %rsp              # imm = 0x130
	popq	%rbp
	retq
.Lfunc_end47:
	.size	compute_display_string_pos, .Lfunc_end47-compute_display_string_pos
	.cfi_endproc

	.globl	compute_display_string_end
	.align	16, 0x90
	.type	compute_display_string_end,@function
compute_display_string_end:             # @compute_display_string_end
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp144:
	.cfi_def_cfa_offset 16
.Ltmp145:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp146:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB48_3
# BB#1:                                 # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB48_2
	jmp	.LBB48_3
.LBB48_2:                               # %cond.true
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB48_4
.LBB48_3:                               # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB48_4:                               # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB48_7
# BB#5:                                 # %lor.lhs.false
	cmpq	$0, -24(%rbp)
	je	.LBB48_8
# BB#6:                                 # %land.lhs.true.5
	movq	-24(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB48_8
.LBB48_7:                               # %cond.true.7
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false.8
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB48_9:                               # %cond.end.9
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jge	.LBB48_12
# BB#10:                                # %lor.lhs.false.11
	movq	-24(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB48_13
# BB#11:                                # %land.lhs.true.14
	movq	-32(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB48_13
.LBB48_12:                              # %if.then
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB48_16
.LBB48_13:                              # %if.end
	movl	$344, %edi              # imm = 0x158
	movq	-40(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB48_15
# BB#14:                                # %if.then.20
	movq	$-1, -8(%rbp)
	jmp	.LBB48_16
.LBB48_15:                              # %if.end.21
	movl	$344, %edi              # imm = 0x158
	movq	-40(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-32(%rbp), %rdx
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-104(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_char_property_change
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -8(%rbp)
.LBB48_16:                              # %return
	movq	-8(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end48:
	.size	compute_display_string_end, .Lfunc_end48-compute_display_string_end
	.cfi_endproc

	.globl	display_prop_intangible_p
	.align	16, 0x90
	.type	display_prop_intangible_p,@function
display_prop_intangible_p:              # @display_prop_intangible_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp147:
	.cfi_def_cfa_offset 16
.Ltmp148:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp149:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	selected_frame, %rcx
	subq	$5, %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %r8d
	cmpl	$2, %r8d
	sete	%r9b
	andb	$1, %r9b
	movb	%r9b, -33(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movq	-8(%rbp), %rsi
	movl	%eax, %edi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-56(%rbp), %r8
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %r9
	movb	-33(%rbp), %r10b
	andb	$1, %r10b
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movzbl	%r10b, %r11d
	movl	%r11d, (%rsp)
	callq	handle_display_spec
	cmpl	$0, %eax
	setne	%r10b
	andb	$1, %r10b
	movzbl	%r10b, %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end49:
	.size	display_prop_intangible_p, .Lfunc_end49-display_prop_intangible_p
	.cfi_endproc

	.align	16, 0x90
	.type	back_to_previous_visible_line_start,@function
back_to_previous_visible_line_start:    # @back_to_previous_visible_line_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp150:
	.cfi_def_cfa_offset 16
.Ltmp151:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp152:
	.cfi_def_cfa_register %rbp
	subq	$4960, %rsp             # imm = 0x1360
	movq	%rdi, -8(%rbp)
.LBB50_1:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB50_43
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	back_to_previous_line_start
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	movq	current_buffer, %rax
	cmpq	752(%rax), %rdi
	jg	.LBB50_4
# BB#3:                                 # %if.then
	jmp	.LBB50_43
.LBB50_4:                               # %if.end
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2096(%rax)
	jle	.LBB50_7
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	320(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	2096(%rax), %rdx
	callq	indented_beyond_p
	testb	$1, %al
	jne	.LBB50_6
	jmp	.LBB50_7
.LBB50_6:                               # %if.then.13
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_1
.LBB50_7:                               # %if.end.14
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	subq	$1, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -4872(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-4872(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -16(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -4880(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4880(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB50_9
# BB#8:                                 # %cond.true
                                        #   in Loop: Header=BB50_1 Depth=1
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -4888(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4888(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -4892(%rbp)       # 4-byte Spill
	jmp	.LBB50_10
.LBB50_9:                               # %cond.false
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -4892(%rbp)       # 4-byte Spill
.LBB50_10:                              # %cond.end
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4892(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB50_12
# BB#11:                                # %if.then.27
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_1
.LBB50_12:                              # %if.end.28
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jg	.LBB50_14
# BB#13:                                # %if.then.34
	jmp	.LBB50_43
.LBB50_14:                              # %if.end.35
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	$0, -4824(%rbp)
# BB#15:                                # %do.body
                                        #   in Loop: Header=BB50_1 Depth=1
	cmpq	$0, -4824(%rbp)
	je	.LBB50_17
# BB#16:                                # %if.then.37
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$1, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB50_17:                              # %if.end.38
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4816(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4824(%rbp)
# BB#18:                                # %do.end
                                        #   in Loop: Header=BB50_1 Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	$-1, %rsi
	leaq	-4840(%rbp), %rdx
	leaq	-4848(%rbp), %rcx
	leaq	-4856(%rbp), %r8
	movq	-4904(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %r9
	callq	find_composition
	testb	$1, %al
	jne	.LBB50_19
	jmp	.LBB50_21
.LBB50_19:                              # %land.lhs.true.45
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4840(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jge	.LBB50_21
# BB#20:                                # %if.then.50
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_40
.LBB50_21:                              # %if.end.51
                                        #   in Loop: Header=BB50_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edi
	xorl	%esi, %esi
	movq	-4504(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -4504(%rbp)
	movq	%rcx, -4832(%rbp)
	movq	-4496(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -4496(%rbp)
	movl	$0, -2728(%rbp)
	callq	bidi_unshelve_cache
	leaq	-4816(%rbp), %rdi
	movb	-4728(%rbp), %dl
	andb	$-5, %dl
	movb	%dl, -4728(%rbp)
	movb	-4728(%rbp), %dl
	andb	$-17, %dl
	movb	%dl, -4728(%rbp)
	callq	handle_display_prop
	cmpl	$3, %eax
	jne	.LBB50_35
# BB#22:                                # %land.lhs.true.63
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-4832(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-4864(%rbp), %rcx
	movq	-4912(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	callq	get_char_property_and_overlay
	xorl	%edi, %edi
	movq	%rax, -4856(%rbp)
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4928(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB50_35
# BB#23:                                # %land.lhs.true.71
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4864(%rbp), %rdi
	callq	OVERLAYP
	testb	$1, %al
	jne	.LBB50_24
	jmp	.LBB50_29
.LBB50_24:                              # %cond.true.73
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4864(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB50_27
# BB#25:                                # %land.lhs.true.77
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4864(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB50_27
# BB#26:                                # %cond.true.83
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4864(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rdi
	callq	marker_position
	movq	%rax, -4936(%rbp)       # 8-byte Spill
	jmp	.LBB50_28
.LBB50_27:                              # %cond.false.87
	callq	emacs_abort
.LBB50_28:                              # %cond.end.88
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4936(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4840(%rbp)
	cmpq	$0, %rax
	jne	.LBB50_30
	jmp	.LBB50_35
.LBB50_29:                              # %cond.false.91
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-4832(%rbp), %rax
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-4856(%rbp), %rdx
	leaq	-4840(%rbp), %rcx
	leaq	-4848(%rbp), %r8
	movq	-4944(%rbp), %rdi       # 8-byte Reload
	movq	-4952(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %r9
	callq	get_property_and_range
	testb	$1, %al
	jne	.LBB50_30
	jmp	.LBB50_35
.LBB50_30:                              # %if.then.96
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_31
.LBB50_31:                              # %do.body.97
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.LBB50_33
# BB#32:                                # %if.then.100
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB50_33:                              # %if.end.101
                                        #   in Loop: Header=BB50_1 Depth=1
	xorl	%esi, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4824(%rbp)
# BB#34:                                # %do.end.102
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_40
.LBB50_35:                              # %if.end.103
	jmp	.LBB50_36
.LBB50_36:                              # %do.body.104
	movq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.LBB50_38
# BB#37:                                # %if.then.107
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB50_38:                              # %if.end.108
	xorl	%esi, %esi
	movq	-4824(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4824(%rbp)
# BB#39:                                # %do.end.109
	jmp	.LBB50_43
.LBB50_40:                              # %replaced
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4840(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jge	.LBB50_42
# BB#41:                                # %if.then.113
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4840(%rbp)
.LBB50_42:                              # %if.end.115
                                        #   in Loop: Header=BB50_1 Depth=1
	movq	-4840(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	current_buffer, %rdi
	movq	-4840(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	-8(%rbp), %rcx
	movq	%rax, 320(%rcx)
	jmp	.LBB50_1
.LBB50_43:                              # %while.end
	movq	-8(%rbp), %rax
	movl	$0, 2408(%rax)
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	addq	$4960, %rsp             # imm = 0x1360
	popq	%rbp
	retq
.Lfunc_end50:
	.size	back_to_previous_visible_line_start, .Lfunc_end50-back_to_previous_visible_line_start
	.cfi_endproc

	.globl	lookup_glyphless_char_display
	.align	16, 0x90
	.type	lookup_glyphless_char_display,@function
lookup_glyphless_char_display:          # @lookup_glyphless_char_display
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp153:
	.cfi_def_cfa_offset 16
.Ltmp154:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp155:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movl	%edi, -12(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
	movq	globals+952, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB51_1
	jmp	.LBB51_11
.LBB51_1:                               # %land.lhs.true
	movq	globals+952, %rdi
	callq	XCHAR_TABLE
	movq	%rax, %rdi
	callq	CHAR_TABLE_EXTRA_SLOTS
	cmpl	$1, %eax
	jl	.LBB51_11
# BB#2:                                 # %if.then
	cmpl	$0, -12(%rbp)
	jl	.LBB51_9
# BB#3:                                 # %if.then.5
	movq	globals+952, %rdi
	movl	-12(%rbp), %esi
	callq	CHAR_TABLE_REF
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %esi
	cmpl	$3, %esi
	jne	.LBB51_8
# BB#4:                                 # %if.then.9
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB51_6
# BB#5:                                 # %cond.true
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB51_7
.LBB51_6:                               # %cond.false
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB51_7:                               # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
.LBB51_8:                               # %if.end
	jmp	.LBB51_10
.LBB51_9:                               # %if.else
	movq	globals+952, %rdi
	callq	XCHAR_TABLE
	movq	552(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB51_10:                              # %if.end.14
	jmp	.LBB51_11
.LBB51_11:                              # %if.end.15
	jmp	.LBB51_12
.LBB51_12:                              # %retry
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB51_16
# BB#13:                                # %if.then.19
                                        #   in Loop: Header=BB51_12 Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB51_15
# BB#14:                                # %if.then.22
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB51_33
.LBB51_15:                              # %if.end.24
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$363, %edi              # imm = 0x16B
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
.LBB51_16:                              # %if.end.26
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$1073, %edi             # imm = 0x431
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB51_20
# BB#17:                                # %if.then.30
                                        #   in Loop: Header=BB51_12 Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB51_19
# BB#18:                                # %if.then.33
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB51_33
.LBB51_19:                              # %if.end.34
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$363, %edi              # imm = 0x16B
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
.LBB51_20:                              # %if.end.36
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$915, %edi              # imm = 0x393
	movq	-32(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB51_22
# BB#21:                                # %if.then.40
	movq	-24(%rbp), %rax
	movl	$0, 2212(%rax)
	jmp	.LBB51_32
.LBB51_22:                              # %if.else.42
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$363, %edi              # imm = 0x16B
	movq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB51_24
# BB#23:                                # %if.then.46
	movq	-24(%rbp), %rax
	movl	$1, 2212(%rax)
	jmp	.LBB51_31
.LBB51_24:                              # %if.else.48
                                        #   in Loop: Header=BB51_12 Depth=1
	movl	$519, %edi              # imm = 0x207
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB51_26
# BB#25:                                # %if.then.52
	movq	-24(%rbp), %rax
	movl	$3, 2212(%rax)
	jmp	.LBB51_30
.LBB51_26:                              # %if.else.54
                                        #   in Loop: Header=BB51_12 Depth=1
	movq	-32(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB51_27
	jmp	.LBB51_28
.LBB51_27:                              # %if.then.56
	movq	-24(%rbp), %rax
	movl	$2, 2212(%rax)
	jmp	.LBB51_29
.LBB51_28:                              # %if.else.58
                                        #   in Loop: Header=BB51_12 Depth=1
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
	jmp	.LBB51_12
.LBB51_29:                              # %if.end.60
	jmp	.LBB51_30
.LBB51_30:                              # %if.end.61
	jmp	.LBB51_31
.LBB51_31:                              # %if.end.62
	jmp	.LBB51_32
.LBB51_32:                              # %if.end.63
	movq	-24(%rbp), %rax
	movl	$2, 2104(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB51_33:                              # %return
	movq	-8(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end51:
	.size	lookup_glyphless_char_display, .Lfunc_end51-lookup_glyphless_char_display
	.cfi_endproc

	.globl	merge_glyphless_glyph_face
	.align	16, 0x90
	.type	merge_glyphless_glyph_face,@function
merge_glyphless_glyph_face:             # @merge_glyphless_glyph_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp156:
	.cfi_def_cfa_offset 16
.Ltmp157:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp158:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	cmpq	last_glyphless_glyph_frame, %rdi
	jne	.LBB52_3
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	cmpl	last_glyphless_glyph_face_id, %ecx
	jne	.LBB52_3
# BB#2:                                 # %if.then
	movl	last_glyphless_glyph_merged_face_id, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_4
.LBB52_3:                               # %if.else
	movl	$490, %edi              # imm = 0x1EA
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %ecx
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, last_glyphless_glyph_frame
	movq	-8(%rbp), %rsi
	movl	2108(%rsi), %eax
	movl	%eax, last_glyphless_glyph_face_id
	movl	-12(%rbp), %eax
	movl	%eax, last_glyphless_glyph_merged_face_id
.LBB52_4:                               # %if.end
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end52:
	.size	merge_glyphless_glyph_face, .Lfunc_end52-merge_glyphless_glyph_face
	.cfi_endproc

	.globl	forget_escape_and_glyphless_faces
	.align	16, 0x90
	.type	forget_escape_and_glyphless_faces,@function
forget_escape_and_glyphless_faces:      # @forget_escape_and_glyphless_faces
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp159:
	.cfi_def_cfa_offset 16
.Ltmp160:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp161:
	.cfi_def_cfa_register %rbp
	movq	$0, last_escape_glyph_frame
	movl	$1048576, last_escape_glyph_face_id # imm = 0x100000
	movq	$0, last_glyphless_glyph_frame
	movl	$1048576, last_glyphless_glyph_face_id # imm = 0x100000
	popq	%rbp
	retq
.Lfunc_end53:
	.size	forget_escape_and_glyphless_faces, .Lfunc_end53-forget_escape_and_glyphless_faces
	.cfi_endproc

	.globl	move_it_in_display_line
	.align	16, 0x90
	.type	move_it_in_display_line,@function
move_it_in_display_line:                # @move_it_in_display_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp162:
	.cfi_def_cfa_offset 16
.Ltmp163:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp164:
	.cfi_def_cfa_register %rbp
	subq	$4864, %rsp             # imm = 0x1300
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rsi
	cmpl	$1, 2116(%rsi)
	jne	.LBB54_17
# BB#1:                                 # %land.lhs.true
	movl	-24(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB54_17
# BB#2:                                 # %if.then
	movq	$0, -4832(%rbp)
# BB#3:                                 # %do.body
	cmpq	$0, -4832(%rbp)
	je	.LBB54_5
# BB#4:                                 # %if.then.2
	movl	$1, %esi
	movq	-4832(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB54_5:                               # %if.end
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4824(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4832(%rbp)
# BB#6:                                 # %do.end
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	callq	move_it_in_display_line_to
	movl	%eax, -4836(%rbp)
	cmpl	$3, -4836(%rbp)
	jne	.LBB54_15
# BB#7:                                 # %if.then.5
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jle	.LBB54_9
# BB#8:                                 # %cond.true
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -4844(%rbp)       # 4-byte Spill
	jmp	.LBB54_10
.LBB54_9:                               # %cond.false
	xorl	%eax, %eax
	movl	%eax, -4844(%rbp)       # 4-byte Spill
	jmp	.LBB54_10
.LBB54_10:                              # %cond.end
	movl	-4844(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4840(%rbp)
# BB#11:                                # %do.body.9
	leaq	-4824(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.LBB54_13
# BB#12:                                # %if.then.11
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4824(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB54_13:                              # %if.end.12
	xorl	%esi, %esi
	movq	-4832(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4832(%rbp)
# BB#14:                                # %do.end.13
	movq	$-1, %rsi
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movl	-4840(%rbp), %edx
	callq	move_it_in_display_line_to
	movl	%eax, -4848(%rbp)       # 4-byte Spill
	jmp	.LBB54_16
.LBB54_15:                              # %if.else
	movl	$1, %esi
	movq	-4832(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB54_16:                              # %if.end.15
	jmp	.LBB54_18
.LBB54_17:                              # %if.else.16
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	callq	move_it_in_display_line_to
	movl	%eax, -4852(%rbp)       # 4-byte Spill
.LBB54_18:                              # %if.end.18
	addq	$4864, %rsp             # imm = 0x1300
	popq	%rbp
	retq
.Lfunc_end54:
	.size	move_it_in_display_line, .Lfunc_end54-move_it_in_display_line
	.cfi_endproc

	.align	16, 0x90
	.type	reseat_at_next_visible_line_start,@function
reseat_at_next_visible_line_start:      # @reseat_at_next_visible_line_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp165:
	.cfi_def_cfa_offset 16
.Ltmp166:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp167:
	.cfi_def_cfa_register %rbp
	subq	$2352, %rsp             # imm = 0x930
	movb	%sil, %al
	leaq	-10(%rbp), %rsi
	leaq	-2344(%rbp), %rdx
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movb	$0, -10(%rbp)
	movq	-8(%rbp), %rdi
	callq	forward_to_next_line_start
	andb	$1, %al
	movb	%al, -2345(%rbp)
	movq	-8(%rbp), %rdx
	cmpq	$0, 2096(%rdx)
	jle	.LBB55_7
# BB#1:                                 # %if.then
	jmp	.LBB55_2
.LBB55_2:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	current_buffer, %rsi
	cmpq	768(%rsi), %rdx
	movb	%cl, -2346(%rbp)        # 1-byte Spill
	jge	.LBB55_4
# BB#3:                                 # %land.rhs
                                        #   in Loop: Header=BB55_2 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	320(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	2096(%rax), %rdx
	callq	indented_beyond_p
	movb	%al, -2346(%rbp)        # 1-byte Spill
.LBB55_4:                               # %land.end
                                        #   in Loop: Header=BB55_2 Depth=1
	movb	-2346(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB55_5
	jmp	.LBB55_6
.LBB55_5:                               # %while.body
                                        #   in Loop: Header=BB55_2 Depth=1
	leaq	-10(%rbp), %rsi
	leaq	-2344(%rbp), %rdx
	movq	-8(%rbp), %rdi
	callq	forward_to_next_line_start
	andb	$1, %al
	movb	%al, -2345(%rbp)
	jmp	.LBB55_2
.LBB55_6:                               # %while.end
	jmp	.LBB55_7
.LBB55_7:                               # %if.end
	testb	$1, -9(%rbp)
	je	.LBB55_23
# BB#8:                                 # %land.lhs.true
	testb	$1, -2345(%rbp)
	je	.LBB55_23
# BB#9:                                 # %if.then.13
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB55_10
	jmp	.LBB55_16
.LBB55_10:                              # %if.then.15
	movq	-8(%rbp), %rax
	cmpq	$0, 336(%rax)
	jle	.LBB55_15
# BB#11:                                # %if.then.19
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB55_13
# BB#12:                                # %if.then.20
	movq	-8(%rbp), %rax
	movq	336(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, 336(%rax)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, 344(%rax)
	jmp	.LBB55_14
.LBB55_13:                              # %if.else
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	leaq	-2344(%rbp), %rcx
	movq	-8(%rbp), %rsi
	addq	$2464, %rsi             # imm = 0x9A0
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-8(%rbp), %rcx
	movq	2472(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 336(%rdx)
	movq	-8(%rbp), %rcx
	movq	2464(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 344(%rdx)
.LBB55_14:                              # %if.end.38
	jmp	.LBB55_15
.LBB55_15:                              # %if.end.39
	jmp	.LBB55_22
.LBB55_16:                              # %if.else.40
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB55_21
# BB#17:                                # %if.then.45
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB55_19
# BB#18:                                # %if.then.51
	movq	-8(%rbp), %rax
	movq	312(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, 312(%rax)
	movq	-8(%rbp), %rax
	movq	320(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, 320(%rax)
	jmp	.LBB55_20
.LBB55_19:                              # %if.else.60
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	leaq	-2344(%rbp), %rcx
	movq	-8(%rbp), %rsi
	addq	$2464, %rsi             # imm = 0x9A0
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-8(%rbp), %rcx
	movq	2472(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 312(%rdx)
	movq	-8(%rbp), %rcx
	movq	2464(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 320(%rdx)
.LBB55_20:                              # %if.end.72
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat
.LBB55_21:                              # %if.end.75
	jmp	.LBB55_22
.LBB55_22:                              # %if.end.76
	jmp	.LBB55_26
.LBB55_23:                              # %if.else.77
	testb	$1, -10(%rbp)
	je	.LBB55_25
# BB#24:                                # %if.then.79
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat
.LBB55_25:                              # %if.end.82
	jmp	.LBB55_26
.LBB55_26:                              # %if.end.83
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	addq	$2352, %rsp             # imm = 0x930
	popq	%rbp
	retq
.Lfunc_end55:
	.size	reseat_at_next_visible_line_start, .Lfunc_end55-reseat_at_next_visible_line_start
	.cfi_endproc

	.globl	move_it_vertically_backward
	.align	16, 0x90
	.type	move_it_vertically_backward,@function
move_it_vertically_backward:            # @move_it_vertically_backward
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp168:
	.cfi_def_cfa_offset 16
.Ltmp169:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp170:
	.cfi_def_cfa_register %rbp
	subq	$9808, %rsp             # imm = 0x2650
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	$0, -9632(%rbp)
	movq	$0, -9640(%rbp)
	movq	-8(%rbp), %rdi
	movl	2320(%rdi), %esi
	movq	-8(%rbp), %rdi
	subl	2316(%rdi), %esi
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	movl	%esi, %eax
	cltd
	idivl	364(%rdi)
	movl	%eax, -9652(%rbp)
.LBB56_1:                               # %move_further_back
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_12 Depth 2
                                        #     Child Loop BB56_21 Depth 2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -9648(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdi
	movl	%eax, -9708(%rbp)       # 4-byte Spill
	callq	default_line_pixel_height
	movl	$1, %edx
	movl	-9708(%rbp), %esi       # 4-byte Reload
	movl	%eax, -9712(%rbp)       # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -9716(%rbp)       # 4-byte Spill
	cltd
	movl	-9712(%rbp), %r8d       # 4-byte Reload
	idivl	%r8d
	movl	-9716(%rbp), %r9d       # 4-byte Reload
	cmpl	%eax, %r9d
	jle	.LBB56_3
# BB#2:                                 # %cond.true
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$1, %eax
	movl	%eax, -9720(%rbp)       # 4-byte Spill
	jmp	.LBB56_4
.LBB56_3:                               # %cond.false
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdi
	movl	%eax, -9724(%rbp)       # 4-byte Spill
	callq	default_line_pixel_height
	movl	-9724(%rbp), %edx       # 4-byte Reload
	movl	%eax, -9728(%rbp)       # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-9728(%rbp), %esi       # 4-byte Reload
	idivl	%esi
	movl	%eax, -9720(%rbp)       # 4-byte Spill
.LBB56_4:                               # %cond.end
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-9720(%rbp), %eax       # 4-byte Reload
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 2116(%rcx)
	je	.LBB56_6
# BB#5:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB56_1 Depth=1
	cmpl	$0, -9652(%rbp)
	jne	.LBB56_7
.LBB56_6:                               # %if.then
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -9664(%rbp)
	jmp	.LBB56_11
.LBB56_7:                               # %if.else
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-9648(%rbp), %rax
	movl	-16(%rbp), %ecx
	imull	-9652(%rbp), %ecx
	movslq	%ecx, %rdx
	subq	%rdx, %rax
	movq	current_buffer, %rdx
	cmpq	752(%rdx), %rax
	jle	.LBB56_9
# BB#8:                                 # %cond.true.11
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-9648(%rbp), %rax
	movl	-16(%rbp), %ecx
	imull	-9652(%rbp), %ecx
	movslq	%ecx, %rdx
	subq	%rdx, %rax
	movq	%rax, -9736(%rbp)       # 8-byte Spill
	jmp	.LBB56_10
.LBB56_9:                               # %cond.false.15
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -9736(%rbp)       # 8-byte Spill
.LBB56_10:                              # %cond.end.17
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-9736(%rbp), %rax       # 8-byte Reload
	movq	%rax, -9664(%rbp)
.LBB56_11:                              # %if.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_12
.LBB56_12:                              # %while.cond
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-16(%rbp), %eax
	movl	%eax, %edx
	addl	$-1, %edx
	movl	%edx, -16(%rbp)
	cmpl	$0, %eax
	movb	%cl, -9737(%rbp)        # 1-byte Spill
	je	.LBB56_14
# BB#13:                                # %land.rhs
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-9664(%rbp), %rax
	setg	%cl
	movb	%cl, -9737(%rbp)        # 1-byte Spill
.LBB56_14:                              # %land.end
                                        #   in Loop: Header=BB56_12 Depth=2
	movb	-9737(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB56_15
	jmp	.LBB56_16
.LBB56_15:                              # %while.body
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	-8(%rbp), %rdi
	callq	back_to_previous_visible_line_start
	jmp	.LBB56_12
.LBB56_16:                              # %while.end
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	320(%rax), %rdx
	callq	reseat_1
	movq	-8(%rbp), %rax
	movl	$0, 2444(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2404(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2408(%rax)
# BB#17:                                # %do.body
                                        #   in Loop: Header=BB56_1 Depth=1
	cmpq	$0, -9632(%rbp)
	je	.LBB56_19
# BB#18:                                # %if.then.27
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$1, %esi
	movq	-9632(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB56_19:                              # %if.end.28
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4824(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -9632(%rbp)
# BB#20:                                # %do.end
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$0, -2440(%rbp)
	movl	$0, -2444(%rbp)
.LBB56_21:                              # %do.body.30
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-4824(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$12, %r9d
	movq	-9648(%rbp), %rsi
	movl	-2384(%rbp), %ecx
	addl	$1, %ecx
	movl	%eax, %edx
	movl	%ecx, -9744(%rbp)       # 4-byte Spill
	movl	%eax, %ecx
	movl	-9744(%rbp), %r8d       # 4-byte Reload
	callq	move_it_to
	movl	%eax, -9748(%rbp)       # 4-byte Spill
# BB#22:                                # %do.cond
                                        #   in Loop: Header=BB56_21 Depth=2
	movb	$1, %al
	cmpl	$2, -4800(%rbp)
	movb	%al, -9749(%rbp)        # 1-byte Spill
	jne	.LBB56_28
# BB#23:                                # %lor.lhs.false.34
                                        #   in Loop: Header=BB56_21 Depth=2
	movb	$1, %al
	cmpq	$0, -4488(%rbp)
	movb	%al, -9749(%rbp)        # 1-byte Spill
	je	.LBB56_28
# BB#24:                                # %lor.rhs
                                        #   in Loop: Header=BB56_21 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$2, -4800(%rbp)
	movb	%cl, -9750(%rbp)        # 1-byte Spill
	jne	.LBB56_27
# BB#25:                                # %land.lhs.true
                                        #   in Loop: Header=BB56_21 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4512(%rbp), %rdx
	cmpq	-9648(%rbp), %rdx
	movb	%cl, -9750(%rbp)        # 1-byte Spill
	jne	.LBB56_27
# BB#26:                                # %land.rhs.47
                                        #   in Loop: Header=BB56_21 Depth=2
	movq	-4192(%rbp), %rdi
	movq	-4480(%rbp), %rax
	subq	$1, %rax
	movq	%rax, %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$10, %ecx
	sete	%al
	movb	%al, -9750(%rbp)        # 1-byte Spill
.LBB56_27:                              # %land.end.55
                                        #   in Loop: Header=BB56_21 Depth=2
	movb	-9750(%rbp), %al        # 1-byte Reload
	movb	%al, -9749(%rbp)        # 1-byte Spill
.LBB56_28:                              # %lor.end
                                        #   in Loop: Header=BB56_21 Depth=2
	movb	-9749(%rbp), %al        # 1-byte Reload
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB56_21
# BB#29:                                # %do.end.56
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_30
.LBB56_30:                              # %do.body.57
                                        #   in Loop: Header=BB56_1 Depth=1
	cmpq	$0, -9640(%rbp)
	je	.LBB56_32
# BB#31:                                # %if.then.59
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$1, %esi
	movq	-9640(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB56_32:                              # %if.end.60
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4824(%rbp), %rcx
	leaq	-9624(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -9640(%rbp)
# BB#33:                                # %do.end.63
                                        #   in Loop: Header=BB56_1 Depth=1
	leaq	-4824(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	-9648(%rbp), %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movl	-2392(%rbp), %ecx
	movq	-8(%rbp), %rsi
	subl	2432(%rsi), %ecx
	movl	%ecx, -20(%rbp)
	movl	-2384(%rbp), %ecx
	movq	-8(%rbp), %rsi
	subl	2440(%rsi), %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movq	-8(%rbp), %rsi
	movl	2440(%rsi), %edx
	subl	%ecx, %edx
	movl	%edx, 2440(%rsi)
	movl	-20(%rbp), %ecx
	movq	-8(%rbp), %rsi
	movl	2432(%rsi), %edx
	subl	%ecx, %edx
	movl	%edx, 2432(%rsi)
	cmpl	$0, -12(%rbp)
	movl	%eax, -9756(%rbp)       # 4-byte Spill
	jne	.LBB56_63
# BB#34:                                # %if.then.76
	jmp	.LBB56_35
.LBB56_35:                              # %do.body.77
	movq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.LBB56_37
# BB#36:                                # %if.then.80
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB56_37:                              # %if.end.81
	xorl	%esi, %esi
	movq	-9632(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -9632(%rbp)
# BB#38:                                # %do.end.83
	cmpl	$0, -16(%rbp)
	jle	.LBB56_40
# BB#39:                                # %if.then.86
	movq	-8(%rbp), %rdi
	movslq	-16(%rbp), %rsi
	callq	move_it_by_lines
.LBB56_40:                              # %if.end.88
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB56_62
# BB#41:                                # %land.lhs.true.90
	movq	-8(%rbp), %rax
	cmpl	$0, 2408(%rax)
	jne	.LBB56_62
# BB#42:                                # %land.lhs.true.93
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB56_62
# BB#43:                                # %land.lhs.true.96
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB56_62
# BB#44:                                # %land.lhs.true.103
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB56_46
# BB#45:                                # %cond.true.110
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -9768(%rbp)       # 8-byte Spill
	jmp	.LBB56_47
.LBB56_46:                              # %cond.false.112
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -9768(%rbp)       # 8-byte Spill
	jmp	.LBB56_47
.LBB56_47:                              # %cond.end.113
	movq	-9768(%rbp), %rax       # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	320(%rcx), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	je	.LBB56_62
# BB#48:                                # %if.then.125
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -9672(%rbp)
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -9680(%rbp)
# BB#49:                                # %do.body.132
	xorl	%edi, %edi
	movq	-9672(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9672(%rbp)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -9776(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9776(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB56_51
# BB#50:                                # %if.then.137
	movq	-9680(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9680(%rbp)
	jmp	.LBB56_60
.LBB56_51:                              # %if.else.139
	jmp	.LBB56_52
.LBB56_52:                              # %do.body.140
	movq	-9680(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9680(%rbp)
	movq	-9680(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB56_54
# BB#53:                                # %if.then.146
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	addq	-9680(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9688(%rbp)
	jmp	.LBB56_55
.LBB56_54:                              # %if.else.151
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	addq	-9680(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9688(%rbp)
.LBB56_55:                              # %if.end.159
	jmp	.LBB56_56
.LBB56_56:                              # %while.cond.160
                                        # =>This Inner Loop Header: Depth=1
	movq	-9688(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	setne	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB56_57
	jmp	.LBB56_58
.LBB56_57:                              # %while.body.165
                                        #   in Loop: Header=BB56_56 Depth=1
	movq	-9688(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9688(%rbp)
	movq	-9680(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -9680(%rbp)
	jmp	.LBB56_56
.LBB56_58:                              # %while.end.167
	jmp	.LBB56_59
.LBB56_59:                              # %do.end.169
	jmp	.LBB56_60
.LBB56_60:                              # %if.end.170
	jmp	.LBB56_61
.LBB56_61:                              # %do.end.172
	movq	$-1, %rdx
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-9672(%rbp), %rdi
	movq	-9680(%rbp), %rsi
	callq	find_newline_no_quit
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	%rax, -9672(%rbp)
	movq	-8(%rbp), %rdi
	movq	-9672(%rbp), %rsi
	movl	%r8d, %edx
	movl	%r8d, %ecx
	callq	move_it_to
	movl	%eax, -9780(%rbp)       # 4-byte Spill
.LBB56_62:                              # %if.end.175
	movl	$1, %esi
	movq	-9640(%rbp), %rdi
	callq	bidi_unshelve_cache
	jmp	.LBB56_89
.LBB56_63:                              # %if.else.176
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2432(%rax), %ecx
	addl	-20(%rbp), %ecx
	subl	-12(%rbp), %ecx
	movl	%ecx, -9692(%rbp)
	movl	-7192(%rbp), %ecx
	movl	%ecx, -9696(%rbp)
# BB#64:                                # %do.body.181
                                        #   in Loop: Header=BB56_1 Depth=1
	xorl	%esi, %esi
	movq	-9640(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -9640(%rbp)
# BB#65:                                # %do.end.183
                                        #   in Loop: Header=BB56_1 Depth=1
	leaq	-9624(%rbp), %rdi
	callq	line_bottom_y
	movl	%eax, -9700(%rbp)
	movl	-9700(%rbp), %eax
	subl	-9696(%rbp), %eax
	movl	%eax, -9704(%rbp)
# BB#66:                                # %do.body.186
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.LBB56_68
# BB#67:                                # %if.then.189
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB56_68:                              # %if.end.190
                                        #   in Loop: Header=BB56_1 Depth=1
	xorl	%esi, %esi
	movq	-9632(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -9632(%rbp)
# BB#69:                                # %do.end.192
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-9692(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2432(%rcx), %eax
	jge	.LBB56_76
# BB#70:                                # %land.lhs.true.196
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2432(%rax), %ecx
	subl	-9692(%rbp), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movl	%ecx, -9784(%rbp)       # 4-byte Spill
	callq	window_box_height
	movl	$3, %ecx
	movl	-9704(%rbp), %edx
	shll	$1, %edx
	movl	%eax, -9788(%rbp)       # 4-byte Spill
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	-9788(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB56_72
# BB#71:                                # %cond.true.205
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_height
	movl	%eax, -9792(%rbp)       # 4-byte Spill
	jmp	.LBB56_73
.LBB56_72:                              # %cond.false.208
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	$3, %eax
	movl	-9704(%rbp), %ecx
	shll	$1, %ecx
	movl	%eax, -9796(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-9796(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movl	%eax, -9792(%rbp)       # 4-byte Spill
.LBB56_73:                              # %cond.end.211
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-9792(%rbp), %eax       # 4-byte Reload
	movl	-9784(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jle	.LBB56_76
# BB#74:                                # %land.lhs.true.215
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB56_76
# BB#75:                                # %if.then.222
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-8(%rbp), %rax
	movl	2432(%rax), %ecx
	subl	-9692(%rbp), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB56_1
.LBB56_76:                              # %if.else.225
	movl	-9692(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	2432(%rcx), %edx
	addl	-9704(%rbp), %edx
	cmpl	%edx, %eax
	jl	.LBB56_87
# BB#77:                                # %land.lhs.true.230
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB56_87
# BB#78:                                # %if.then.236
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB56_80
# BB#79:                                # %if.then.244
	movq	-8(%rbp), %rdi
	movl	-9692(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	2432(%rcx), %eax
	movl	%eax, %esi
	callq	move_it_vertically
	jmp	.LBB56_86
.LBB56_80:                              # %if.else.247
	jmp	.LBB56_81
.LBB56_81:                              # %do.body.248
                                        # =>This Inner Loop Header: Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	move_it_by_lines
# BB#82:                                # %do.cond.249
                                        #   in Loop: Header=BB56_81 Depth=1
	movl	-9692(%rbp), %eax
	movq	-8(%rbp), %rdi
	movl	%eax, -9800(%rbp)       # 4-byte Spill
	callq	line_bottom_y
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movl	-9800(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	movb	%dl, -9801(%rbp)        # 1-byte Spill
	jl	.LBB56_84
# BB#83:                                # %land.rhs.253
                                        #   in Loop: Header=BB56_81 Depth=1
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	setl	%dl
	movb	%dl, -9801(%rbp)        # 1-byte Spill
.LBB56_84:                              # %land.end.260
                                        #   in Loop: Header=BB56_81 Depth=1
	movb	-9801(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB56_81
# BB#85:                                # %do.end.261
	jmp	.LBB56_86
.LBB56_86:                              # %if.end.262
	jmp	.LBB56_87
.LBB56_87:                              # %if.end.263
	jmp	.LBB56_88
.LBB56_88:                              # %if.end.264
	jmp	.LBB56_89
.LBB56_89:                              # %if.end.265
	addq	$9808, %rsp             # imm = 0x2650
	popq	%rbp
	retq
.Lfunc_end56:
	.size	move_it_vertically_backward, .Lfunc_end56-move_it_vertically_backward
	.cfi_endproc

	.align	16, 0x90
	.type	reseat_1,@function
reseat_1:                               # @reseat_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp171:
	.cfi_def_cfa_offset 16
.Ltmp172:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp173:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	%cl, %al
	xorl	%ecx, %ecx
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rdi, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	-24(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, 2296(%rsi)
	movq	-8(%rbp), %rdi
	movq	%rdi, 2304(%rsi)
	movq	2296(%rsi), %rdi
	movq	%rdi, 312(%rdx)
	movq	2304(%rsi), %rsi
	movq	%rsi, 320(%rdx)
	movq	current_buffer, %rdx
	movq	768(%rdx), %rdx
	movq	-24(%rbp), %rsi
	movq	%rdx, 56(%rsi)
	movq	-24(%rbp), %rdx
	movq	$0, 104(%rdx)
	movq	-24(%rbp), %rdx
	movl	$-1, 352(%rdx)
	movq	-24(%rbp), %rdx
	movq	$-1, 328(%rdx)
	movq	-24(%rbp), %rdx
	movq	$-1, 336(%rdx)
	movq	-24(%rbp), %rdx
	movq	$-1, 344(%rdx)
	movl	%ecx, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-24(%rbp), %rdx
	movq	%rax, 632(%rdx)
	movq	-24(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	%rax, 2288(%rdx)
	movq	-24(%rbp), %rax
	movl	$1, 2360(%rax)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	sete	%r8b
	xorb	$-1, %r8b
	movq	-24(%rbp), %rax
	andb	$1, %r8b
	movb	88(%rax), %r9b
	andb	$-2, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 88(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 2088(%rax)
	movq	-24(%rbp), %rax
	movb	88(%rax), %r8b
	andb	$-5, %r8b
	movb	%r8b, 88(%rax)
	movq	-24(%rbp), %rax
	movb	88(%rax), %r8b
	andb	$-9, %r8b
	movb	%r8b, 88(%rax)
	movq	-24(%rbp), %rax
	movb	88(%rax), %r8b
	andb	$-17, %r8b
	movb	%r8b, 88(%rax)
	movq	-24(%rbp), %rax
	movw	2112(%rax), %r10w
	andw	$-513, %r10w            # imm = 0xFFFFFFFFFFFFFDFF
	movw	%r10w, 2112(%rax)
	movq	-24(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB57_2
# BB#1:                                 # %if.then
	movq	-24(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	320(%rax), %rsi
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	sete	%dl
	movq	-24(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%dl, %ecx
	andl	$1, %ecx
	movl	%ecx, %edx
	movq	%rax, %rcx
	callq	bidi_init_it
	xorl	%edx, %edx
	movl	%edx, %edi
	xorl	%esi, %esi
	callq	bidi_unshelve_cache
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movl	$0, 4768(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 4728(%rax)
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx
	movq	%rax, 4720(%rcx)
	movq	-24(%rbp), %rax
	movq	$0, 4744(%rax)
	movq	-24(%rbp), %rax
	movb	4752(%rax), %r8b
	andb	$-2, %r8b
	movb	%r8b, 4752(%rax)
	movq	-24(%rbp), %rax
	movb	4752(%rax), %r8b
	andb	$-3, %r8b
	movb	%r8b, 4752(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 4760(%rcx)
.LBB57_2:                               # %if.end
	testb	$1, -25(%rbp)
	je	.LBB57_4
# BB#3:                                 # %if.then.49
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 48(%rcx)
.LBB57_4:                               # %if.end.52
	movq	-24(%rbp), %rax
	movq	$-1, 2144(%rax)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end57:
	.size	reseat_1, .Lfunc_end57-reseat_1
	.cfi_endproc

	.globl	move_it_vertically
	.align	16, 0x90
	.type	move_it_vertically,@function
move_it_vertically:                     # @move_it_vertically
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp174:
	.cfi_def_cfa_offset 16
.Ltmp175:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp176:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jg	.LBB58_2
# BB#1:                                 # %if.then
	xorl	%eax, %eax
	movq	-8(%rbp), %rdi
	subl	-12(%rbp), %eax
	movl	%eax, %esi
	callq	move_it_vertically_backward
	jmp	.LBB58_10
.LBB58_2:                               # %if.else
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$10, %r9d
	movq	-8(%rbp), %rdi
	movq	current_buffer, %rcx
	movq	768(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movl	2432(%rcx), %edx
	addl	-12(%rbp), %edx
	movl	%edx, -16(%rbp)         # 4-byte Spill
	movl	%eax, %edx
	movl	-16(%rbp), %ecx         # 4-byte Reload
	movl	%eax, %r8d
	callq	move_it_to
	movq	-8(%rbp), %rsi
	movq	312(%rsi), %rsi
	movq	current_buffer, %rdi
	cmpq	768(%rdi), %rsi
	movl	%eax, -20(%rbp)         # 4-byte Spill
	jne	.LBB58_9
# BB#3:                                 # %land.lhs.true
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB58_9
# BB#4:                                 # %land.lhs.true.5
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB58_6
# BB#5:                                 # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB58_7
.LBB58_6:                               # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jmp	.LBB58_7
.LBB58_7:                               # %cond.end
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	320(%rcx), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	je	.LBB58_9
# BB#8:                                 # %if.then.20
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	move_it_by_lines
.LBB58_9:                               # %if.end
	jmp	.LBB58_10
.LBB58_10:                              # %if.end.21
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end58:
	.size	move_it_vertically, .Lfunc_end58-move_it_vertically
	.cfi_endproc

	.globl	move_it_past_eol
	.align	16, 0x90
	.type	move_it_past_eol,@function
move_it_past_eol:                       # @move_it_past_eol
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp177:
	.cfi_def_cfa_offset 16
.Ltmp178:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp179:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%edx, %edx
	movl	$8, %ecx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rsi
	callq	move_it_in_display_line_to
	movl	%eax, -12(%rbp)
	cmpl	$5, -12(%rbp)
	jne	.LBB59_2
# BB#1:                                 # %if.then
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	set_iterator_to_next
.LBB59_2:                               # %if.end
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end59:
	.size	move_it_past_eol, .Lfunc_end59-move_it_past_eol
	.cfi_endproc

	.globl	in_display_vector_p
	.align	16, 0x90
	.type	in_display_vector_p,@function
in_display_vector_p:                    # @in_display_vector_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp180:
	.cfi_def_cfa_offset 16
.Ltmp181:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp182:
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$1, 24(%rdi)
	movb	%cl, -9(%rbp)           # 1-byte Spill
	jne	.LBB60_3
# BB#1:                                 # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	cmpl	$0, 352(%rdx)
	movb	%cl, -9(%rbp)           # 1-byte Spill
	jle	.LBB60_3
# BB#2:                                 # %land.rhs
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	cmpq	112(%rcx), %rax
	setne	%dl
	movb	%dl, -9(%rbp)           # 1-byte Spill
.LBB60_3:                               # %land.end
	movb	-9(%rbp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end60:
	.size	in_display_vector_p, .Lfunc_end60-in_display_vector_p
	.cfi_endproc

	.globl	Fwindow_text_pixel_size
	.align	16, 0x90
	.type	Fwindow_text_pixel_size,@function
Fwindow_text_pixel_size:                # @Fwindow_text_pixel_size
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp183:
	.cfi_def_cfa_offset 16
.Ltmp184:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp185:
	.cfi_def_cfa_register %rbp
	subq	$5424, %rsp             # imm = 0x1530
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-8(%rbp), %rdi
	callq	decode_live_window
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	$0, -4880(%rbp)
	movq	$0, -4928(%rbp)
	movl	$-1, -4936(%rbp)
	movl	$0, -4940(%rbp)
	movl	$0, -4944(%rbp)
	movq	-64(%rbp), %rdi
	callq	CHECK_BUFFER
	movq	-64(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	je	.LBB61_2
# BB#1:                                 # %if.then
	movq	current_buffer, %rax
	movq	%rax, -4880(%rbp)
	movq	-72(%rbp), %rdi
	callq	set_buffer_internal
.LBB61_2:                               # %if.end
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4952(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_4
# BB#3:                                 # %if.then.4
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4888(%rbp)
	jmp	.LBB61_56
.LBB61_4:                               # %if.else
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4960(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_36
# BB#5:                                 # %if.then.7
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4904(%rbp)
	movq	%rax, -4888(%rbp)
.LBB61_6:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4904(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -4904(%rbp)
	movq	current_buffer, %rsi
	cmpq	768(%rsi), %rdx
	movb	%cl, -4961(%rbp)        # 1-byte Spill
	jge	.LBB61_19
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB61_6 Depth=1
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4976(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_9
# BB#8:                                 # %cond.true
                                        #   in Loop: Header=BB61_6 Depth=1
	movq	-4904(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -4980(%rbp)       # 4-byte Spill
	jmp	.LBB61_13
.LBB61_9:                               # %cond.false
                                        #   in Loop: Header=BB61_6 Depth=1
	movq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB61_11
# BB#10:                                # %cond.true.14
                                        #   in Loop: Header=BB61_6 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -4992(%rbp)       # 8-byte Spill
	jmp	.LBB61_12
.LBB61_11:                              # %cond.false.16
                                        #   in Loop: Header=BB61_6 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4992(%rbp)       # 8-byte Spill
	jmp	.LBB61_12
.LBB61_12:                              # %cond.end
                                        #   in Loop: Header=BB61_6 Depth=1
	movq	-4992(%rbp), %rax       # 8-byte Reload
	addq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -4980(%rbp)       # 4-byte Spill
.LBB61_13:                              # %cond.end.19
                                        #   in Loop: Header=BB61_6 Depth=1
	movl	-4980(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movl	%eax, -4932(%rbp)
	cmpl	$0, %eax
	movb	%dl, -4961(%rbp)        # 1-byte Spill
	je	.LBB61_19
# BB#14:                                # %land.rhs
                                        #   in Loop: Header=BB61_6 Depth=1
	movb	$1, %al
	cmpl	$32, -4932(%rbp)
	movb	%al, -4993(%rbp)        # 1-byte Spill
	je	.LBB61_18
# BB#15:                                # %lor.lhs.false
                                        #   in Loop: Header=BB61_6 Depth=1
	movb	$1, %al
	cmpl	$9, -4932(%rbp)
	movb	%al, -4993(%rbp)        # 1-byte Spill
	je	.LBB61_18
# BB#16:                                # %lor.lhs.false.25
                                        #   in Loop: Header=BB61_6 Depth=1
	movb	$1, %al
	cmpl	$10, -4932(%rbp)
	movb	%al, -4993(%rbp)        # 1-byte Spill
	je	.LBB61_18
# BB#17:                                # %lor.rhs
                                        #   in Loop: Header=BB61_6 Depth=1
	cmpl	$13, -4932(%rbp)
	sete	%al
	movb	%al, -4993(%rbp)        # 1-byte Spill
.LBB61_18:                              # %lor.end
                                        #   in Loop: Header=BB61_6 Depth=1
	movb	-4993(%rbp), %al        # 1-byte Reload
	movb	%al, -4961(%rbp)        # 1-byte Spill
.LBB61_19:                              # %land.end
                                        #   in Loop: Header=BB61_6 Depth=1
	movb	-4961(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB61_20
	jmp	.LBB61_21
.LBB61_20:                              # %while.body
                                        #   in Loop: Header=BB61_6 Depth=1
	movq	-4904(%rbp), %rax
	movq	%rax, -4888(%rbp)
	jmp	.LBB61_6
.LBB61_21:                              # %while.end
	jmp	.LBB61_22
.LBB61_22:                              # %while.cond.30
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4904(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$-1, %rsi
	movq	%rsi, -4904(%rbp)
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rdx
	movb	%cl, -4994(%rbp)        # 1-byte Spill
	jle	.LBB61_33
# BB#23:                                # %land.lhs.true.34
                                        #   in Loop: Header=BB61_22 Depth=1
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5008(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_25
# BB#24:                                # %cond.true.39
                                        #   in Loop: Header=BB61_22 Depth=1
	movq	-4904(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -5012(%rbp)       # 4-byte Spill
	jmp	.LBB61_29
.LBB61_25:                              # %cond.false.41
                                        #   in Loop: Header=BB61_22 Depth=1
	movq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB61_27
# BB#26:                                # %cond.true.46
                                        #   in Loop: Header=BB61_22 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	jmp	.LBB61_28
.LBB61_27:                              # %cond.false.49
                                        #   in Loop: Header=BB61_22 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5024(%rbp)       # 8-byte Spill
	jmp	.LBB61_28
.LBB61_28:                              # %cond.end.50
                                        #   in Loop: Header=BB61_22 Depth=1
	movq	-5024(%rbp), %rax       # 8-byte Reload
	addq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -5012(%rbp)       # 4-byte Spill
.LBB61_29:                              # %cond.end.58
                                        #   in Loop: Header=BB61_22 Depth=1
	movl	-5012(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movl	%eax, -4932(%rbp)
	cmpl	$0, %eax
	movb	%dl, -4994(%rbp)        # 1-byte Spill
	je	.LBB61_33
# BB#30:                                # %land.rhs.61
                                        #   in Loop: Header=BB61_22 Depth=1
	movb	$1, %al
	cmpl	$32, -4932(%rbp)
	movb	%al, -5025(%rbp)        # 1-byte Spill
	je	.LBB61_32
# BB#31:                                # %lor.rhs.64
                                        #   in Loop: Header=BB61_22 Depth=1
	cmpl	$9, -4932(%rbp)
	sete	%al
	movb	%al, -5025(%rbp)        # 1-byte Spill
.LBB61_32:                              # %lor.end.67
                                        #   in Loop: Header=BB61_22 Depth=1
	movb	-5025(%rbp), %al        # 1-byte Reload
	movb	%al, -4994(%rbp)        # 1-byte Spill
.LBB61_33:                              # %land.end.68
                                        #   in Loop: Header=BB61_22 Depth=1
	movb	-4994(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB61_34
	jmp	.LBB61_35
.LBB61_34:                              # %while.body.69
                                        #   in Loop: Header=BB61_22 Depth=1
	movq	-4904(%rbp), %rax
	movq	%rax, -4888(%rbp)
	jmp	.LBB61_22
.LBB61_35:                              # %while.end.70
	jmp	.LBB61_55
.LBB61_36:                              # %if.else.71
	jmp	.LBB61_37
.LBB61_37:                              # %do.body
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB61_40
# BB#38:                                # %land.lhs.true.75
	movq	-16(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB61_40
# BB#39:                                # %if.then.79
	movq	-16(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -16(%rbp)
	jmp	.LBB61_44
.LBB61_40:                              # %if.else.82
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB61_42
# BB#41:                                # %cond.true.88
	jmp	.LBB61_43
.LBB61_42:                              # %cond.false.89
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -5040(%rbp)       # 8-byte Spill
.LBB61_43:                              # %cond.end.91
	jmp	.LBB61_44
.LBB61_44:                              # %if.end.92
	jmp	.LBB61_45
.LBB61_45:                              # %do.end
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB61_47
# BB#46:                                # %cond.true.96
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	jmp	.LBB61_48
.LBB61_47:                              # %cond.false.98
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
.LBB61_48:                              # %cond.end.100
	movq	-5048(%rbp), %rax       # 8-byte Reload
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB61_53
# BB#49:                                # %cond.true.105
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB61_51
# BB#50:                                # %cond.true.110
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5056(%rbp)       # 8-byte Spill
	jmp	.LBB61_52
.LBB61_51:                              # %cond.false.112
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -5056(%rbp)       # 8-byte Spill
.LBB61_52:                              # %cond.end.114
	movq	-5056(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5064(%rbp)       # 8-byte Spill
	jmp	.LBB61_54
.LBB61_53:                              # %cond.false.116
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -5064(%rbp)       # 8-byte Spill
.LBB61_54:                              # %cond.end.118
	movq	-5064(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4888(%rbp)
.LBB61_55:                              # %if.end.120
	jmp	.LBB61_56
.LBB61_56:                              # %if.end.121
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -5072(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5072(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_58
# BB#57:                                # %if.then.125
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -4896(%rbp)
	jmp	.LBB61_110
.LBB61_58:                              # %if.else.127
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	%rax, -5080(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5080(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_90
# BB#59:                                # %if.then.131
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -4904(%rbp)
	movq	%rax, -4896(%rbp)
.LBB61_60:                              # %while.cond.133
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4904(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$-1, %rsi
	movq	%rsi, -4904(%rbp)
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rdx
	movb	%cl, -5081(%rbp)        # 1-byte Spill
	jle	.LBB61_73
# BB#61:                                # %land.lhs.true.138
                                        #   in Loop: Header=BB61_60 Depth=1
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -5096(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5096(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_63
# BB#62:                                # %cond.true.143
                                        #   in Loop: Header=BB61_60 Depth=1
	movq	-4904(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -5100(%rbp)       # 4-byte Spill
	jmp	.LBB61_67
.LBB61_63:                              # %cond.false.145
                                        #   in Loop: Header=BB61_60 Depth=1
	movq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB61_65
# BB#64:                                # %cond.true.150
                                        #   in Loop: Header=BB61_60 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5112(%rbp)       # 8-byte Spill
	jmp	.LBB61_66
.LBB61_65:                              # %cond.false.153
                                        #   in Loop: Header=BB61_60 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5112(%rbp)       # 8-byte Spill
	jmp	.LBB61_66
.LBB61_66:                              # %cond.end.154
                                        #   in Loop: Header=BB61_60 Depth=1
	movq	-5112(%rbp), %rax       # 8-byte Reload
	addq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -5100(%rbp)       # 4-byte Spill
.LBB61_67:                              # %cond.end.162
                                        #   in Loop: Header=BB61_60 Depth=1
	movl	-5100(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movl	%eax, -4932(%rbp)
	cmpl	$0, %eax
	movb	%dl, -5081(%rbp)        # 1-byte Spill
	je	.LBB61_73
# BB#68:                                # %land.rhs.165
                                        #   in Loop: Header=BB61_60 Depth=1
	movb	$1, %al
	cmpl	$32, -4932(%rbp)
	movb	%al, -5113(%rbp)        # 1-byte Spill
	je	.LBB61_72
# BB#69:                                # %lor.lhs.false.168
                                        #   in Loop: Header=BB61_60 Depth=1
	movb	$1, %al
	cmpl	$9, -4932(%rbp)
	movb	%al, -5113(%rbp)        # 1-byte Spill
	je	.LBB61_72
# BB#70:                                # %lor.lhs.false.171
                                        #   in Loop: Header=BB61_60 Depth=1
	movb	$1, %al
	cmpl	$10, -4932(%rbp)
	movb	%al, -5113(%rbp)        # 1-byte Spill
	je	.LBB61_72
# BB#71:                                # %lor.rhs.174
                                        #   in Loop: Header=BB61_60 Depth=1
	cmpl	$13, -4932(%rbp)
	sete	%al
	movb	%al, -5113(%rbp)        # 1-byte Spill
.LBB61_72:                              # %lor.end.177
                                        #   in Loop: Header=BB61_60 Depth=1
	movb	-5113(%rbp), %al        # 1-byte Reload
	movb	%al, -5081(%rbp)        # 1-byte Spill
.LBB61_73:                              # %land.end.178
                                        #   in Loop: Header=BB61_60 Depth=1
	movb	-5081(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB61_74
	jmp	.LBB61_75
.LBB61_74:                              # %while.body.179
                                        #   in Loop: Header=BB61_60 Depth=1
	movq	-4904(%rbp), %rax
	movq	%rax, -4896(%rbp)
	jmp	.LBB61_60
.LBB61_75:                              # %while.end.180
	jmp	.LBB61_76
.LBB61_76:                              # %while.cond.181
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4904(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -4904(%rbp)
	movq	current_buffer, %rsi
	cmpq	768(%rsi), %rdx
	movb	%cl, -5114(%rbp)        # 1-byte Spill
	jge	.LBB61_87
# BB#77:                                # %land.lhs.true.186
                                        #   in Loop: Header=BB61_76 Depth=1
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -5128(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5128(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_79
# BB#78:                                # %cond.true.191
                                        #   in Loop: Header=BB61_76 Depth=1
	movq	-4904(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -5132(%rbp)       # 4-byte Spill
	jmp	.LBB61_83
.LBB61_79:                              # %cond.false.193
                                        #   in Loop: Header=BB61_76 Depth=1
	movq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB61_81
# BB#80:                                # %cond.true.198
                                        #   in Loop: Header=BB61_76 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5144(%rbp)       # 8-byte Spill
	jmp	.LBB61_82
.LBB61_81:                              # %cond.false.201
                                        #   in Loop: Header=BB61_76 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5144(%rbp)       # 8-byte Spill
	jmp	.LBB61_82
.LBB61_82:                              # %cond.end.202
                                        #   in Loop: Header=BB61_76 Depth=1
	movq	-5144(%rbp), %rax       # 8-byte Reload
	addq	-4904(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -5132(%rbp)       # 4-byte Spill
.LBB61_83:                              # %cond.end.210
                                        #   in Loop: Header=BB61_76 Depth=1
	movl	-5132(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movl	%eax, -4932(%rbp)
	cmpl	$0, %eax
	movb	%dl, -5114(%rbp)        # 1-byte Spill
	je	.LBB61_87
# BB#84:                                # %land.rhs.213
                                        #   in Loop: Header=BB61_76 Depth=1
	movb	$1, %al
	cmpl	$32, -4932(%rbp)
	movb	%al, -5145(%rbp)        # 1-byte Spill
	je	.LBB61_86
# BB#85:                                # %lor.rhs.216
                                        #   in Loop: Header=BB61_76 Depth=1
	cmpl	$9, -4932(%rbp)
	sete	%al
	movb	%al, -5145(%rbp)        # 1-byte Spill
.LBB61_86:                              # %lor.end.219
                                        #   in Loop: Header=BB61_76 Depth=1
	movb	-5145(%rbp), %al        # 1-byte Reload
	movb	%al, -5114(%rbp)        # 1-byte Spill
.LBB61_87:                              # %land.end.220
                                        #   in Loop: Header=BB61_76 Depth=1
	movb	-5114(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB61_88
	jmp	.LBB61_89
.LBB61_88:                              # %while.body.221
                                        #   in Loop: Header=BB61_76 Depth=1
	movq	-4904(%rbp), %rax
	movq	%rax, -4896(%rbp)
	jmp	.LBB61_76
.LBB61_89:                              # %while.end.222
	jmp	.LBB61_109
.LBB61_90:                              # %if.else.223
	jmp	.LBB61_91
.LBB61_91:                              # %do.body.224
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB61_94
# BB#92:                                # %land.lhs.true.229
	movq	-24(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB61_94
# BB#93:                                # %if.then.233
	movq	-24(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -24(%rbp)
	jmp	.LBB61_98
.LBB61_94:                              # %if.else.236
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB61_96
# BB#95:                                # %cond.true.242
	jmp	.LBB61_97
.LBB61_96:                              # %cond.false.243
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -5160(%rbp)       # 8-byte Spill
.LBB61_97:                              # %cond.end.245
	jmp	.LBB61_98
.LBB61_98:                              # %if.end.246
	jmp	.LBB61_99
.LBB61_99:                              # %do.end.247
	movq	-4888(%rbp), %rax
	movq	-24(%rbp), %rcx
	sarq	$2, %rcx
	movq	current_buffer, %rdx
	cmpq	768(%rdx), %rcx
	movq	%rax, -5168(%rbp)       # 8-byte Spill
	jge	.LBB61_101
# BB#100:                               # %cond.true.252
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5176(%rbp)       # 8-byte Spill
	jmp	.LBB61_102
.LBB61_101:                             # %cond.false.254
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -5176(%rbp)       # 8-byte Spill
.LBB61_102:                             # %cond.end.256
	movq	-5176(%rbp), %rax       # 8-byte Reload
	movq	-5168(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jle	.LBB61_104
# BB#103:                               # %cond.true.260
	movq	-4888(%rbp), %rax
	movq	%rax, -5184(%rbp)       # 8-byte Spill
	jmp	.LBB61_108
.LBB61_104:                             # %cond.false.261
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB61_106
# BB#105:                               # %cond.true.266
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5192(%rbp)       # 8-byte Spill
	jmp	.LBB61_107
.LBB61_106:                             # %cond.false.268
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -5192(%rbp)       # 8-byte Spill
.LBB61_107:                             # %cond.end.270
	movq	-5192(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5184(%rbp)       # 8-byte Spill
.LBB61_108:                             # %cond.end.272
	movq	-5184(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4896(%rbp)
.LBB61_109:                             # %if.end.274
	jmp	.LBB61_110
.LBB61_110:                             # %if.end.275
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -5200(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5200(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_118
# BB#111:                               # %if.then.279
	movq	-40(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB61_113
# BB#112:                               # %cond.true.285
	jmp	.LBB61_114
.LBB61_113:                             # %cond.false.286
	movl	$559, %edi              # imm = 0x22F
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -5208(%rbp)       # 8-byte Spill
.LBB61_114:                             # %cond.end.288
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	jge	.LBB61_116
# BB#115:                               # %cond.true.292
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5216(%rbp)       # 8-byte Spill
	jmp	.LBB61_117
.LBB61_116:                             # %cond.false.294
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %ecx
	movq	%rcx, -5216(%rbp)       # 8-byte Spill
	jmp	.LBB61_117
.LBB61_117:                             # %cond.end.295
	movq	-5216(%rbp), %rax       # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -4936(%rbp)
.LBB61_118:                             # %if.end.298
	callq	bidi_shelve_cache
	movq	%rax, -4928(%rbp)
	movq	-4888(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	current_buffer, %rdi
	movq	-4888(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	leaq	-4872(%rbp), %rdi
	movq	%rax, -4912(%rbp)
	movq	-56(%rbp), %rsi
	movq	-4920(%rbp), %rdx
	movq	-4912(%rbp), %rcx
	callq	start_display
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -5224(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5224(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_120
# BB#119:                               # %if.then.304
	leaq	-4872(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$10, %r9d
	movq	-4896(%rbp), %rsi
	movl	-4936(%rbp), %ecx
	movl	%eax, %edx
	movl	%eax, %r8d
	callq	move_it_to
	movl	%eax, -4940(%rbp)
	jmp	.LBB61_127
.LBB61_120:                             # %if.else.306
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB61_122
# BB#121:                               # %cond.true.312
	jmp	.LBB61_123
.LBB61_122:                             # %cond.false.313
	movl	$559, %edi              # imm = 0x22F
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -5232(%rbp)       # 8-byte Spill
.LBB61_123:                             # %cond.end.315
	movq	-32(%rbp), %rax
	sarq	$2, %rax
	cmpq	$10000000, %rax         # imm = 0x989680
	jge	.LBB61_125
# BB#124:                               # %cond.true.319
	movq	-32(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5240(%rbp)       # 8-byte Spill
	jmp	.LBB61_126
.LBB61_125:                             # %cond.false.321
	movl	$10000000, %eax         # imm = 0x989680
	movl	%eax, %ecx
	movq	%rcx, -5240(%rbp)       # 8-byte Spill
	jmp	.LBB61_126
.LBB61_126:                             # %cond.end.322
	movq	-5240(%rbp), %rax       # 8-byte Reload
	leaq	-4872(%rbp), %rdi
	movl	$2147483647, %edx       # imm = 0x7FFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$11, %r9d
	movl	%eax, %ecx
	movl	%ecx, -2552(%rbp)
	movq	-4896(%rbp), %rsi
	movl	-4936(%rbp), %ecx
	callq	move_it_to
	movl	%eax, -4940(%rbp)
.LBB61_127:                             # %if.end.326
	movl	$513, %edi              # imm = 0x201
	movl	-2440(%rbp), %eax
	addl	-2492(%rbp), %eax
	addl	-2488(%rbp), %eax
	movl	%eax, -4944(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -5248(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5248(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_161
# BB#128:                               # %land.lhs.true.332
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -5256(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5256(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_161
# BB#129:                               # %if.then.336
	movl	-4944(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	80(%rcx), %rdi
	movl	%eax, -5260(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB61_130
	jmp	.LBB61_144
.LBB61_130:                             # %cond.true.340
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB61_159
# BB#131:                               # %land.lhs.true.341
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB61_159
# BB#132:                               # %land.lhs.true.345
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB61_159
# BB#133:                               # %land.lhs.true.351
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5272(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5272(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_159
# BB#134:                               # %land.lhs.true.357
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5276(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB61_135
	jmp	.LBB61_140
.LBB61_135:                             # %cond.true.361
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB61_142
# BB#136:                               # %land.lhs.true.366
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB61_142
# BB#137:                               # %land.lhs.true.372
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB61_142
# BB#138:                               # %land.lhs.true.381
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5288(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5288(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_142
# BB#139:                               # %land.lhs.true.387
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB61_141
	jmp	.LBB61_142
.LBB61_140:                             # %cond.false.393
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB61_141
	jmp	.LBB61_142
.LBB61_141:                             # %cond.true.394
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5292(%rbp)       # 4-byte Spill
	jmp	.LBB61_143
.LBB61_142:                             # %cond.false.398
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5292(%rbp)       # 4-byte Spill
.LBB61_143:                             # %cond.end.402
	movl	-5292(%rbp), %eax       # 4-byte Reload
	movl	-5276(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB61_145
	jmp	.LBB61_159
.LBB61_144:                             # %cond.false.406
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB61_145
	jmp	.LBB61_159
.LBB61_145:                             # %cond.true.407
	movq	-56(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB61_147
# BB#146:                               # %cond.true.410
	movq	-56(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5296(%rbp)       # 4-byte Spill
	jmp	.LBB61_158
.LBB61_147:                             # %cond.false.412
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB61_150
# BB#148:                               # %land.lhs.true.414
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB61_150
# BB#149:                               # %cond.true.417
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB61_151
	jmp	.LBB61_156
.LBB61_150:                             # %cond.false.421
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB61_151
	jmp	.LBB61_156
.LBB61_151:                             # %cond.true.422
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB61_154
# BB#152:                               # %land.lhs.true.425
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB61_154
# BB#153:                               # %cond.true.429
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5300(%rbp)       # 4-byte Spill
	jmp	.LBB61_155
.LBB61_154:                             # %cond.false.433
	xorl	%eax, %eax
	movl	%eax, -5300(%rbp)       # 4-byte Spill
	jmp	.LBB61_155
.LBB61_155:                             # %cond.end.434
	movl	-5300(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5304(%rbp)       # 4-byte Spill
	jmp	.LBB61_157
.LBB61_156:                             # %cond.false.436
	movl	$5, %esi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5304(%rbp)       # 4-byte Spill
.LBB61_157:                             # %cond.end.440
	movl	-5304(%rbp), %eax       # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5296(%rbp)       # 4-byte Spill
.LBB61_158:                             # %cond.end.443
	movl	-5296(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5308(%rbp)       # 4-byte Spill
	jmp	.LBB61_160
.LBB61_159:                             # %cond.false.445
	xorl	%eax, %eax
	movl	%eax, -5308(%rbp)       # 4-byte Spill
	jmp	.LBB61_160
.LBB61_160:                             # %cond.end.446
	movl	-5308(%rbp), %eax       # 4-byte Reload
	movl	-5260(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -4944(%rbp)
.LBB61_161:                             # %if.end.449
	movl	$672, %edi              # imm = 0x2A0
	movq	-48(%rbp), %rax
	movq	%rax, -5320(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5320(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_163
# BB#162:                               # %lor.lhs.false.453
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -5328(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5328(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_193
.LBB61_163:                             # %if.then.457
	movl	-4944(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	80(%rcx), %rdi
	movl	%eax, -5332(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB61_164
	jmp	.LBB61_169
.LBB61_164:                             # %cond.true.461
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB61_191
# BB#165:                               # %land.lhs.true.466
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB61_191
# BB#166:                               # %land.lhs.true.472
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB61_191
# BB#167:                               # %land.lhs.true.481
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5344(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5344(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB61_191
# BB#168:                               # %land.lhs.true.488
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB61_170
	jmp	.LBB61_191
.LBB61_169:                             # %cond.false.495
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB61_170
	jmp	.LBB61_191
.LBB61_170:                             # %cond.true.496
	movq	-56(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB61_172
# BB#171:                               # %cond.true.499
	movq	-56(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -5348(%rbp)       # 4-byte Spill
	jmp	.LBB61_190
.LBB61_172:                             # %cond.false.501
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB61_175
# BB#173:                               # %land.lhs.true.504
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB61_175
# BB#174:                               # %cond.true.508
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB61_176
	jmp	.LBB61_181
.LBB61_175:                             # %cond.false.516
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB61_176
	jmp	.LBB61_181
.LBB61_176:                             # %cond.true.517
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB61_179
# BB#177:                               # %land.lhs.true.520
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB61_179
# BB#178:                               # %cond.true.524
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -5352(%rbp)       # 4-byte Spill
	jmp	.LBB61_180
.LBB61_179:                             # %cond.false.533
	xorl	%eax, %eax
	movl	%eax, -5352(%rbp)       # 4-byte Spill
	jmp	.LBB61_180
.LBB61_180:                             # %cond.end.534
	movl	-5352(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5356(%rbp)       # 4-byte Spill
	jmp	.LBB61_189
.LBB61_181:                             # %cond.false.536
	movb	$1, %al
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -5368(%rbp)       # 8-byte Spill
	movb	%al, -5369(%rbp)        # 1-byte Spill
	je	.LBB61_188
# BB#182:                               # %lor.lhs.false.540
	movq	-56(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -5384(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-5384(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -5369(%rbp)        # 1-byte Spill
	je	.LBB61_188
# BB#183:                               # %lor.rhs.544
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -5385(%rbp)        # 1-byte Spill
	jle	.LBB61_187
# BB#184:                               # %land.lhs.true.547
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -5400(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5400(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5385(%rbp)        # 1-byte Spill
	je	.LBB61_187
# BB#185:                               # %land.lhs.true.551
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -5408(%rbp)       # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-5408(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -5385(%rbp)        # 1-byte Spill
	jne	.LBB61_187
# BB#186:                               # %land.rhs.556
	movq	-56(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -5416(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-5416(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -5385(%rbp)        # 1-byte Spill
.LBB61_187:                             # %land.end.560
	movb	-5385(%rbp), %al        # 1-byte Reload
	movb	%al, -5369(%rbp)        # 1-byte Spill
.LBB61_188:                             # %lor.end.561
	movb	-5369(%rbp), %al        # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -5356(%rbp)       # 4-byte Spill
.LBB61_189:                             # %cond.end.564
	movl	-5356(%rbp), %eax       # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -5348(%rbp)       # 4-byte Spill
.LBB61_190:                             # %cond.end.567
	movl	-5348(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5420(%rbp)       # 4-byte Spill
	jmp	.LBB61_192
.LBB61_191:                             # %cond.false.569
	xorl	%eax, %eax
	movl	%eax, -5420(%rbp)       # 4-byte Spill
	jmp	.LBB61_192
.LBB61_192:                             # %cond.end.570
	movl	-5420(%rbp), %eax       # 4-byte Reload
	movl	-5332(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -4944(%rbp)
.LBB61_193:                             # %if.end.573
	xorl	%esi, %esi
	movq	-4928(%rbp), %rdi
	callq	bidi_unshelve_cache
	cmpq	$0, -4880(%rbp)
	je	.LBB61_195
# BB#194:                               # %if.then.575
	movq	-4880(%rbp), %rdi
	callq	set_buffer_internal
.LBB61_195:                             # %if.end.576
	movslq	-4940(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movslq	-4944(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	Fcons
	addq	$5424, %rsp             # imm = 0x1530
	popq	%rbp
	retq
.Lfunc_end61:
	.size	Fwindow_text_pixel_size, .Lfunc_end61-Fwindow_text_pixel_size
	.cfi_endproc

	.globl	add_to_log
	.align	16, 0x90
	.type	add_to_log,@function
add_to_log:                             # @add_to_log
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp186:
	.cfi_def_cfa_offset 16
.Ltmp187:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp188:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              # imm = 0x180
	testb	%al, %al
	movaps	%xmm7, -224(%rbp)       # 16-byte Spill
	movaps	%xmm6, -240(%rbp)       # 16-byte Spill
	movaps	%xmm5, -256(%rbp)       # 16-byte Spill
	movaps	%xmm4, -272(%rbp)       # 16-byte Spill
	movaps	%xmm3, -288(%rbp)       # 16-byte Spill
	movaps	%xmm2, -304(%rbp)       # 16-byte Spill
	movaps	%xmm1, -320(%rbp)       # 16-byte Spill
	movaps	%xmm0, -336(%rbp)       # 16-byte Spill
	movq	%rdi, -344(%rbp)        # 8-byte Spill
	movq	%r9, -352(%rbp)         # 8-byte Spill
	movq	%r8, -360(%rbp)         # 8-byte Spill
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	movq	%rsi, -384(%rbp)        # 8-byte Spill
	je	.LBB62_2
# BB#1:                                 # %entry
	movaps	-336(%rbp), %xmm0       # 16-byte Reload
	movaps	%xmm0, -160(%rbp)
	movaps	-320(%rbp), %xmm1       # 16-byte Reload
	movaps	%xmm1, -144(%rbp)
	movaps	-304(%rbp), %xmm2       # 16-byte Reload
	movaps	%xmm2, -128(%rbp)
	movaps	-288(%rbp), %xmm3       # 16-byte Reload
	movaps	%xmm3, -112(%rbp)
	movaps	-272(%rbp), %xmm4       # 16-byte Reload
	movaps	%xmm4, -96(%rbp)
	movaps	-256(%rbp), %xmm5       # 16-byte Reload
	movaps	%xmm5, -80(%rbp)
	movaps	-240(%rbp), %xmm6       # 16-byte Reload
	movaps	%xmm6, -64(%rbp)
	movaps	-224(%rbp), %xmm7       # 16-byte Reload
	movaps	%xmm7, -48(%rbp)
.LBB62_2:                               # %entry
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	-360(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -176(%rbp)
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -184(%rbp)
	movq	-376(%rbp), %rsi        # 8-byte Reload
	movq	%rsi, -192(%rbp)
	movq	-384(%rbp), %rdi        # 8-byte Reload
	movq	%rdi, -200(%rbp)
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	%r8, -8(%rbp)
	leaq	-208(%rbp), %r8
	movq	%r8, -16(%rbp)
	leaq	16(%rbp), %r8
	movq	%r8, -24(%rbp)
	movl	$48, -28(%rbp)
	movl	$8, -32(%rbp)
	movq	-8(%rbp), %rdi
	leaq	-32(%rbp), %rsi
	callq	vadd_to_log
	addq	$384, %rsp              # imm = 0x180
	popq	%rbp
	retq
.Lfunc_end62:
	.size	add_to_log, .Lfunc_end62-add_to_log
	.cfi_endproc

	.globl	vadd_to_log
	.align	16, 0x90
	.type	vadd_to_log,@function
vadd_to_log:                            # @vadd_to_log
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp189:
	.cfi_def_cfa_offset 16
.Ltmp190:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp191:
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              # imm = 0x130
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	format_nargs
	movl	$4, %esi
	leaq	-152(%rbp), %rdi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	%rdi, -216(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -220(%rbp)        # 4-byte Spill
	callq	strlen
	movq	%rax, -152(%rbp)
	movq	$-1, -144(%rbp)
	movq	$0, -136(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, %rdi
	movl	-220(%rbp), %esi        # 4-byte Reload
	callq	make_lisp_ptr
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$1, -160(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-160(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jg	.LBB63_7
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	$40, %ecx
	movq	%rax, -232(%rbp)        # 8-byte Spill
	movl	%ecx, -236(%rbp)        # 4-byte Spill
	ja	.LBB63_4
# BB#3:                                 # %vaarg.in_reg
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-236(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-232(%rbp), %rdx        # 8-byte Reload
	addq	16(%rdx), %rcx
	addl	$8, %eax
	movl	%eax, (%rdx)
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	jmp	.LBB63_5
.LBB63_4:                               # %vaarg.in_mem
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, %rdx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	%rdx, -248(%rbp)        # 8-byte Spill
.LBB63_5:                               # %vaarg.end
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	(%rax), %rax
	movq	-160(%rbp), %rcx
	movq	%rax, -112(%rbp,%rcx,8)
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-160(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB63_1
.LBB63_7:                               # %for.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	leaq	-112(%rbp), %rsi
	movq	%rax, -168(%rbp)
	movq	-32(%rbp), %rdi
	callq	Fformat_message
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rdi
	callq	SBYTES
	addq	$1, %rax
	movq	%rax, -176(%rbp)
	movq	$16384, -184(%rbp)      # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -192(%rbp)
	movb	$0, -193(%rbp)
	movq	-176(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jg	.LBB63_9
# BB#8:                                 # %cond.true
	movq	-176(%rbp), %rax
	movq	-184(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -184(%rbp)
	movq	-176(%rbp), %rax
	addq	$15, %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -256(%rbp)        # 8-byte Spill
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false
	movb	$1, -193(%rbp)
	movq	-176(%rbp), %rdi
	callq	record_xmalloc
	movq	%rax, -256(%rbp)        # 8-byte Spill
.LBB63_10:                              # %cond.end
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rdi
	movq	-168(%rbp), %rax
	movq	%rdi, -264(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	SDATA
	movq	-176(%rbp), %rdx
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	memcpy
	movq	-208(%rbp), %rdi
	movq	-176(%rbp), %rax
	subq	$1, %rax
	movq	-168(%rbp), %rdx
	movq	%rdi, -272(%rbp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	STRING_MULTIBYTE
	movl	$1, %ecx
	movzbl	%al, %r8d
	andl	$1, %r8d
	movl	$1, %edx
	movq	-272(%rbp), %rdi        # 8-byte Reload
	movq	-280(%rbp), %rsi        # 8-byte Reload
	movl	%ecx, -284(%rbp)        # 4-byte Spill
	movl	%r8d, %ecx
	callq	message_dolog
# BB#11:                                # %do.body
	testb	$1, -193(%rbp)
	je	.LBB63_13
# BB#12:                                # %if.then
	xorl	%edi, %edi
	movb	$0, -193(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-296(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -304(%rbp)        # 8-byte Spill
.LBB63_13:                              # %if.end
	jmp	.LBB63_14
.LBB63_14:                              # %do.end
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end63:
	.size	vadd_to_log, .Lfunc_end63-vadd_to_log
	.cfi_endproc

	.align	16, 0x90
	.type	format_nargs,@function
format_nargs:                           # @format_nargs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp192:
	.cfi_def_cfa_offset 16
.Ltmp193:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp194:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	$0, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -24(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	$37, %esi
	movq	-24(%rbp), %rdi
	callq	strchr
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB64_7
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-24(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$37, %ecx
	jne	.LBB64_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB64_5
.LBB64_4:                               # %if.else
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
.LBB64_5:                               # %if.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_6
.LBB64_6:                               # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB64_1
.LBB64_7:                               # %for.end
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end64:
	.size	format_nargs, .Lfunc_end64-format_nargs
	.cfi_endproc

	.globl	message_dolog
	.align	16, 0x90
	.type	message_dolog,@function
message_dolog:                          # @message_dolog
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp195:
	.cfi_def_cfa_offset 16
.Ltmp196:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp197:
	.cfi_def_cfa_register %rbp
	subq	$496, %rsp              # imm = 0x1F0
	movb	%cl, %al
	movb	%dl, %r8b
	xorl	%ecx, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %r8b
	movb	%r8b, -17(%rbp)
	andb	$1, %al
	movb	%al, -18(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	globals+1392, %rsi
	movl	%ecx, %edi
	movq	%rsi, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB65_2
# BB#1:                                 # %if.then
	jmp	.LBB65_68
.LBB65_2:                               # %if.end
	xorl	%edi, %edi
	movq	globals+1440, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB65_68
# BB#3:                                 # %if.then.4
	movl	windows_or_buffers_changed, %eax
	movl	%eax, -68(%rbp)
	movq	$0, -80(%rbp)
	movq	$0, -88(%rbp)
	movq	globals+416, %rcx
	movq	%rcx, -96(%rbp)
	movq	current_buffer, %rcx
	movq	%rcx, -40(%rbp)
	movq	Vmessages_buffer_name, %rdi
	callq	Fget_buffer
	xorl	%edi, %edi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	andb	$1, %dl
	movb	%dl, -97(%rbp)
	movq	Vmessages_buffer_name, %rdi
	callq	Fget_buffer_create
	movq	%rax, %rdi
	callq	Fset_buffer
	testb	$1, -97(%rbp)
	movq	%rax, -264(%rbp)        # 8-byte Spill
	je	.LBB65_6
# BB#4:                                 # %land.lhs.true
	movabsq	$.L.str.1, %rdi
	callq	intern
	movq	%rax, %rdi
	callq	Ffboundp
	xorl	%edi, %edi
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB65_6
# BB#5:                                 # %if.then.15
	movabsq	$.L.str.1, %rdi
	callq	intern
	movq	%rax, %rdi
	callq	call0
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB65_6:                               # %if.end.18
	movl	$901, %edi              # imm = 0x385
	movq	current_buffer, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_undo_list
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-296(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_cache_long_scans
	xorl	%edi, %edi
	movq	message_dolog_marker1, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	movq	current_buffer, %rcx
	movq	744(%rcx), %rcx
	addq	$0, %rcx
	movq	-304(%rbp), %rdi        # 8-byte Reload
	movq	%rsi, -312(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	-312(%rbp), %rdx        # 8-byte Reload
	callq	set_marker_restricted_both
	xorl	%edi, %edi
	movq	message_dolog_marker2, %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rax, -320(%rbp)        # 8-byte Spill
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	current_buffer, %rcx
	movq	752(%rcx), %rdx
	movq	current_buffer, %rcx
	movq	760(%rcx), %rcx
	movq	-328(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_restricted_both
	xorl	%edi, %edi
	movq	message_dolog_marker3, %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rax, -336(%rbp)        # 8-byte Spill
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	current_buffer, %rcx
	movq	768(%rcx), %rdx
	movq	current_buffer, %rcx
	movq	776(%rcx), %rcx
	movq	-344(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_restricted_both
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	cmpq	16(%rdx), %rcx
	movq	%rax, -352(%rbp)        # 8-byte Spill
	jne	.LBB65_8
# BB#7:                                 # %if.then.31
	movq	$1, -80(%rbp)
.LBB65_8:                               # %if.end.32
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	16(%rcx), %rax
	jne	.LBB65_10
# BB#9:                                 # %if.then.37
	movq	$1, -88(%rbp)
.LBB65_10:                              # %if.end.38
	movq	current_buffer, %rax
	movq	$1, 752(%rax)
	movq	current_buffer, %rax
	movq	$1, 760(%rax)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	%rax, 768(%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	current_buffer, %rcx
	movq	%rax, 776(%rcx)
	movq	current_buffer, %rdi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rdx
	callq	temp_set_point_both
	testb	$1, -18(%rbp)
	je	.LBB65_20
# BB#11:                                # %land.lhs.true.51
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-360(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB65_20
# BB#12:                                # %if.then.54
	movq	$0, -112(%rbp)
.LBB65_13:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-112(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB65_19
# BB#14:                                # %for.body
                                        #   in Loop: Header=BB65_13 Depth=1
	leaq	-120(%rbp), %rsi
	movq	-32(%rbp), %rax
	addq	-112(%rbp), %rax
	movq	%rax, %rdi
	callq	string_char_and_length
	movl	%eax, -116(%rbp)
	cmpl	$4194175, -116(%rbp)    # imm = 0x3FFF7F
	jle	.LBB65_16
# BB#15:                                # %cond.true
                                        #   in Loop: Header=BB65_13 Depth=1
	movl	-116(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -364(%rbp)        # 4-byte Spill
	jmp	.LBB65_17
.LBB65_16:                              # %cond.false
                                        #   in Loop: Header=BB65_13 Depth=1
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -364(%rbp)        # 4-byte Spill
.LBB65_17:                              # %cond.end
                                        #   in Loop: Header=BB65_13 Depth=1
	movl	-364(%rbp), %eax        # 4-byte Reload
	movl	$1, %ecx
	movl	%ecx, %edx
	movl	$1, %ecx
	xorl	%esi, %esi
	leaq	-121(%rbp), %rdi
	movb	%al, %r8b
	movb	%r8b, -121(%rbp)
	movl	%esi, -368(%rbp)        # 4-byte Spill
	movq	%rdx, %rsi
	movl	-368(%rbp), %r8d        # 4-byte Reload
	movl	-368(%rbp), %r9d        # 4-byte Reload
	callq	insert_1_both
# BB#18:                                # %for.inc
                                        #   in Loop: Header=BB65_13 Depth=1
	movslq	-120(%rbp), %rax
	addq	-112(%rbp), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB65_13
.LBB65_19:                              # %for.end
	jmp	.LBB65_51
.LBB65_20:                              # %if.else
	testb	$1, -18(%rbp)
	jne	.LBB65_47
# BB#21:                                # %land.lhs.true.61
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-376(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB65_47
# BB#22:                                # %if.then.66
	movq	$0, -136(%rbp)
.LBB65_23:                              # %for.cond.70
                                        # =>This Inner Loop Header: Depth=1
	movq	-136(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB65_46
# BB#24:                                # %for.body.73
                                        #   in Loop: Header=BB65_23 Depth=1
	movb	$1, %al
	movq	-136(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movzbl	(%rdx,%rcx), %esi
	movl	%esi, -140(%rbp)
	testb	$1, %al
	jne	.LBB65_25
	jmp	.LBB65_26
.LBB65_25:                              # %cond.true.76
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-140(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB65_27
	jmp	.LBB65_28
.LBB65_26:                              # %cond.false.80
                                        #   in Loop: Header=BB65_23 Depth=1
	movslq	-140(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB65_28
.LBB65_27:                              # %cond.true.85
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -380(%rbp)        # 4-byte Spill
	jmp	.LBB65_29
.LBB65_28:                              # %cond.false.86
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-140(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -380(%rbp)        # 4-byte Spill
.LBB65_29:                              # %cond.end.88
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-380(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movl	%eax, -140(%rbp)
	testb	$1, %cl
	jne	.LBB65_30
	jmp	.LBB65_31
.LBB65_30:                              # %cond.true.90
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-140(%rbp), %eax
	addl	$0, %eax
	cmpl	$127, %eax
	jbe	.LBB65_32
	jmp	.LBB65_33
.LBB65_31:                              # %cond.false.94
                                        #   in Loop: Header=BB65_23 Depth=1
	movslq	-140(%rbp), %rax
	addq	$0, %rax
	cmpq	$127, %rax
	ja	.LBB65_33
.LBB65_32:                              # %cond.true.99
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	$1, %eax
	movl	-140(%rbp), %ecx
	movb	%cl, %dl
	movb	%dl, -149(%rbp)
	movl	%eax, -384(%rbp)        # 4-byte Spill
	jmp	.LBB65_44
.LBB65_33:                              # %cond.false.102
                                        #   in Loop: Header=BB65_23 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB65_34
	jmp	.LBB65_35
.LBB65_34:                              # %cond.true.103
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-140(%rbp), %eax
	addl	$0, %eax
	cmpl	$2047, %eax             # imm = 0x7FF
	jbe	.LBB65_36
	jmp	.LBB65_37
.LBB65_35:                              # %cond.false.107
                                        #   in Loop: Header=BB65_23 Depth=1
	movslq	-140(%rbp), %rax
	addq	$0, %rax
	cmpq	$2047, %rax             # imm = 0x7FF
	ja	.LBB65_37
.LBB65_36:                              # %cond.true.112
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	$2, %eax
	movl	-140(%rbp), %ecx
	sarl	$6, %ecx
	orl	$192, %ecx
	movb	%cl, %dl
	movb	%dl, -149(%rbp)
	movl	-140(%rbp), %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movb	%cl, %dl
	movb	%dl, -148(%rbp)
	movl	%eax, -388(%rbp)        # 4-byte Spill
	jmp	.LBB65_43
.LBB65_37:                              # %cond.false.119
                                        #   in Loop: Header=BB65_23 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB65_38
	jmp	.LBB65_39
.LBB65_38:                              # %cond.true.120
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-140(%rbp), %eax
	addl	$0, %eax
	cmpl	$65535, %eax            # imm = 0xFFFF
	jbe	.LBB65_40
	jmp	.LBB65_41
.LBB65_39:                              # %cond.false.124
                                        #   in Loop: Header=BB65_23 Depth=1
	movslq	-140(%rbp), %rax
	addq	$0, %rax
	cmpq	$65535, %rax            # imm = 0xFFFF
	ja	.LBB65_41
.LBB65_40:                              # %cond.true.129
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	$3, %eax
	movl	-140(%rbp), %ecx
	sarl	$12, %ecx
	orl	$224, %ecx
	movb	%cl, %dl
	movb	%dl, -149(%rbp)
	movl	-140(%rbp), %ecx
	sarl	$6, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movb	%cl, %dl
	movb	%dl, -148(%rbp)
	movl	-140(%rbp), %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movb	%cl, %dl
	movb	%dl, -147(%rbp)
	movl	%eax, -392(%rbp)        # 4-byte Spill
	jmp	.LBB65_42
.LBB65_41:                              # %cond.false.143
                                        #   in Loop: Header=BB65_23 Depth=1
	leaq	-149(%rbp), %rsi
	movl	-140(%rbp), %edi
	callq	char_string
	movl	%eax, -392(%rbp)        # 4-byte Spill
.LBB65_42:                              # %cond.end.146
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-392(%rbp), %eax        # 4-byte Reload
	movl	%eax, -388(%rbp)        # 4-byte Spill
.LBB65_43:                              # %cond.end.148
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-388(%rbp), %eax        # 4-byte Reload
	movl	%eax, -384(%rbp)        # 4-byte Spill
.LBB65_44:                              # %cond.end.150
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-384(%rbp), %eax        # 4-byte Reload
	movl	$1, %ecx
	movl	%ecx, %esi
	movl	$1, %ecx
	xorl	%edx, %edx
	leaq	-149(%rbp), %rdi
	movl	%eax, -144(%rbp)
	movslq	-144(%rbp), %r8
	movl	%edx, -396(%rbp)        # 4-byte Spill
	movq	%r8, %rdx
	movl	-396(%rbp), %r8d        # 4-byte Reload
	movl	-396(%rbp), %r9d        # 4-byte Reload
	callq	insert_1_both
# BB#45:                                # %for.inc.154
                                        #   in Loop: Header=BB65_23 Depth=1
	movq	-136(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB65_23
.LBB65_46:                              # %for.end.155
	jmp	.LBB65_50
.LBB65_47:                              # %if.else.156
	cmpq	$0, -16(%rbp)
	je	.LBB65_49
# BB#48:                                # %if.then.158
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rsi
	movq	%rdi, -408(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	chars_in_text
	movl	$1, %ecx
	xorl	%edx, %edx
	movq	-16(%rbp), %rsi
	movq	-408(%rbp), %rdi        # 8-byte Reload
	movq	%rsi, -416(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	-416(%rbp), %rax        # 8-byte Reload
	movl	%edx, -420(%rbp)        # 4-byte Spill
	movq	%rax, %rdx
	movl	-420(%rbp), %r8d        # 4-byte Reload
	movl	-420(%rbp), %r9d        # 4-byte Reload
	callq	insert_1_both
.LBB65_49:                              # %if.end.160
	jmp	.LBB65_50
.LBB65_50:                              # %if.end.161
	jmp	.LBB65_51
.LBB65_51:                              # %if.end.162
	testb	$1, -17(%rbp)
	je	.LBB65_61
# BB#52:                                # %if.then.164
	movabsq	$.L.str.2, %rdi
	movl	$1, %eax
	movl	%eax, %ecx
	movl	$1, %eax
	xorl	%edx, %edx
	movq	%rcx, %rsi
	movl	%edx, -424(%rbp)        # 4-byte Spill
	movq	%rcx, %rdx
	movl	%eax, %ecx
	movl	-424(%rbp), %r8d        # 4-byte Reload
	movl	-424(%rbp), %r9d        # 4-byte Reload
	callq	insert_1_both
	movl	$1, %eax
	movl	%eax, %edx
	movq	$-2, %r8
	xorl	%r9d, %r9d
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	16(%rsi), %rdi
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	32(%rsi), %rsi
	movq	%rdx, -432(%rbp)        # 8-byte Spill
	movq	-432(%rbp), %rcx        # 8-byte Reload
	callq	scan_newline
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -160(%rbp)
	movq	current_buffer, %rcx
	movq	744(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -168(%rbp)
	cmpq	$1, -160(%rbp)
	movq	%rax, -440(%rbp)        # 8-byte Spill
	jle	.LBB65_58
# BB#53:                                # %if.then.176
	movl	$1, %eax
	movl	%eax, %ecx
	movq	$-2, %r8
	xorl	%r9d, %r9d
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movq	current_buffer, %rsi
	movq	744(%rsi), %rsi
	addq	$0, %rsi
	movq	%rdx, %rdi
	movq	%rcx, %rdx
	callq	scan_newline
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -176(%rbp)
	movq	current_buffer, %rcx
	movq	744(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -184(%rbp)
	movq	-184(%rbp), %rdi
	movq	-168(%rbp), %rsi
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	message_log_check_duplicate
	movq	%rax, -192(%rbp)
	cmpq	$0, -192(%rbp)
	je	.LBB65_57
# BB#54:                                # %if.then.188
	xorl	%r8d, %r8d
	movq	-176(%rbp), %rdi
	movq	-184(%rbp), %rsi
	movq	-160(%rbp), %rdx
	movq	-168(%rbp), %rcx
	callq	del_range_both
	cmpq	$1, -192(%rbp)
	jle	.LBB65_56
# BB#55:                                # %if.then.191
	movabsq	$.L.str.3, %rsi
	leaq	-224(%rbp), %rdi
	movq	-192(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movl	%eax, -228(%rbp)
	movq	current_buffer, %rdi
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	16(%rdx), %rdx
	subq	$1, %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	32(%rsi), %rsi
	subq	$1, %rsi
	movq	%rsi, -456(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	-456(%rbp), %rdx        # 8-byte Reload
	callq	temp_set_point_both
	movl	$1, %eax
	xorl	%r8d, %r8d
	leaq	-224(%rbp), %rdi
	movslq	-228(%rbp), %rsi
	movslq	-228(%rbp), %rdx
	movl	%eax, %ecx
	movl	%eax, %r9d
	callq	insert_1_both
.LBB65_56:                              # %if.end.203
	jmp	.LBB65_57
.LBB65_57:                              # %if.end.204
	jmp	.LBB65_58
.LBB65_58:                              # %if.end.205
	movq	globals+1440, %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB65_59
	jmp	.LBB65_60
.LBB65_59:                              # %if.then.207
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	16(%rsi), %rdi
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	32(%rsi), %rsi
	movq	globals+1440, %r8
	sarq	$2, %r8
	subq	%r8, %rdx
	subq	$1, %rdx
	movq	%rdx, -464(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-464(%rbp), %r8         # 8-byte Reload
	callq	scan_newline
	movl	$1, %r9d
	movl	%r9d, %ecx
	xorl	%r8d, %r8d
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movq	current_buffer, %rsi
	movq	744(%rsi), %rsi
	addq	$0, %rsi
	movq	%rcx, %rdi
	movq	%rsi, -472(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	del_range_both
.LBB65_60:                              # %if.end.220
	jmp	.LBB65_61
.LBB65_61:                              # %if.end.221
	movq	-56(%rbp), %rdi
	callq	marker_position
	movq	current_buffer, %rdi
	movq	%rax, 752(%rdi)
	movq	-56(%rbp), %rdi
	callq	marker_byte_position
	movq	current_buffer, %rdi
	movq	%rax, 760(%rdi)
	cmpq	$0, -88(%rbp)
	je	.LBB65_63
# BB#62:                                # %if.then.227
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	%rax, 768(%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	current_buffer, %rcx
	movq	%rax, 776(%rcx)
	jmp	.LBB65_64
.LBB65_63:                              # %if.else.234
	movq	-64(%rbp), %rdi
	callq	marker_position
	movq	current_buffer, %rdi
	movq	%rax, 768(%rdi)
	movq	-64(%rbp), %rdi
	callq	marker_byte_position
	movq	current_buffer, %rdi
	movq	%rax, 776(%rdi)
.LBB65_64:                              # %if.end.239
	cmpq	$0, -80(%rbp)
	je	.LBB65_66
# BB#65:                                # %if.then.241
	movq	current_buffer, %rdi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rdx
	callq	temp_set_point_both
	jmp	.LBB65_67
.LBB65_66:                              # %if.else.246
	movq	current_buffer, %rdi
	movq	-48(%rbp), %rax
	movq	%rdi, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	marker_position
	movq	-48(%rbp), %rdi
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	marker_byte_position
	movq	-488(%rbp), %rdi        # 8-byte Reload
	movq	-496(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	temp_set_point_both
.LBB65_67:                              # %if.end.249
	movq	-48(%rbp), %rdi
	callq	XMARKER
	movq	%rax, %rdi
	callq	unchain_marker
	movq	-56(%rbp), %rdi
	callq	XMARKER
	movq	%rax, %rdi
	callq	unchain_marker
	movq	-64(%rbp), %rdi
	callq	XMARKER
	movq	%rax, %rdi
	callq	unchain_marker
	movl	-68(%rbp), %ecx
	movl	%ecx, windows_or_buffers_changed
	movq	current_buffer, %rdi
	callq	bset_redisplay
	movq	-40(%rbp), %rdi
	callq	set_buffer_internal
	movb	-17(%rbp), %dl
	xorb	$-1, %dl
	andb	$1, %dl
	movb	%dl, message_log_need_newline
	movq	-96(%rbp), %rax
	movq	%rax, globals+416
.LBB65_68:                              # %if.end.255
	addq	$496, %rsp              # imm = 0x1F0
	popq	%rbp
	retq
.Lfunc_end65:
	.size	message_dolog, .Lfunc_end65-message_dolog
	.cfi_endproc

	.globl	message_log_maybe_newline
	.align	16, 0x90
	.type	message_log_maybe_newline,@function
message_log_maybe_newline:              # @message_log_maybe_newline
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp198:
	.cfi_def_cfa_offset 16
.Ltmp199:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp200:
	.cfi_def_cfa_register %rbp
	testb	$1, message_log_need_newline
	je	.LBB66_2
# BB#1:                                 # %if.then
	movabsq	$.L.str, %rdi
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %edx
	xorl	%ecx, %ecx
	callq	message_dolog
.LBB66_2:                               # %if.end
	popq	%rbp
	retq
.Lfunc_end66:
	.size	message_log_maybe_newline, .Lfunc_end66-message_log_maybe_newline
	.cfi_endproc

	.align	16, 0x90
	.type	string_char_and_length,@function
string_char_and_length:                 # @string_char_and_length
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp201:
	.cfi_def_cfa_offset 16
.Ltmp202:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp203:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movzbl	(%rsi), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	jne	.LBB67_2
# BB#1:                                 # %cond.true
	movq	-16(%rbp), %rax
	movl	$1, (%rax)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -24(%rbp)         # 4-byte Spill
	jmp	.LBB67_9
.LBB67_2:                               # %cond.false
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB67_4
# BB#3:                                 # %cond.true.7
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-16(%rbp), %rdx
	movl	$2, (%rdx)
	movq	-8(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-8(%rbp), %rdx
	movzbl	1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-8(%rbp), %rdx
	movzbl	(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	addl	%eax, %esi
	movl	%esi, -28(%rbp)         # 4-byte Spill
	jmp	.LBB67_8
.LBB67_4:                               # %cond.false.17
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB67_6
# BB#5:                                 # %cond.true.22
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-8(%rbp), %rax
	movzbl	1(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-8(%rbp), %rax
	movzbl	2(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -32(%rbp)         # 4-byte Spill
	jmp	.LBB67_7
.LBB67_6:                               # %cond.false.36
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	callq	string_char
	movl	%eax, -32(%rbp)         # 4-byte Spill
.LBB67_7:                               # %cond.end
	movl	-32(%rbp), %eax         # 4-byte Reload
	movl	%eax, -28(%rbp)         # 4-byte Spill
.LBB67_8:                               # %cond.end.38
	movl	-28(%rbp), %eax         # 4-byte Reload
	movl	%eax, -24(%rbp)         # 4-byte Spill
.LBB67_9:                               # %cond.end.40
	movl	-24(%rbp), %eax         # 4-byte Reload
	movb	$1, %cl
	movl	%eax, -20(%rbp)
	testb	$1, %cl
	jne	.LBB67_10
	jmp	.LBB67_11
.LBB67_10:                              # %cond.true.42
	movl	-20(%rbp), %eax
	addl	$0, %eax
	cmpl	$4194303, %eax          # imm = 0x3FFFFF
	jbe	.LBB67_13
	jmp	.LBB67_12
.LBB67_11:                              # %cond.false.46
	movslq	-20(%rbp), %rax
	addq	$0, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jbe	.LBB67_13
.LBB67_12:                              # %if.then
	movl	$63, -20(%rbp)
.LBB67_13:                              # %if.end
	movl	-20(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end67:
	.size	string_char_and_length, .Lfunc_end67-string_char_and_length
	.cfi_endproc

	.align	16, 0x90
	.type	message_log_check_duplicate,@function
message_log_check_duplicate:            # @message_log_check_duplicate
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp204:
	.cfi_def_cfa_offset 16
.Ltmp205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp206:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	32(%rsi), %rsi
	subq	$1, %rsi
	subq	-24(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movb	$0, -41(%rbp)
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	(%rsi), %rsi
	addq	-16(%rbp), %rsi
	addq	$-1, %rsi
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	cmpq	24(%rax), %rdi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	jl	.LBB68_2
# BB#1:                                 # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB68_3
.LBB68_2:                               # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	jmp	.LBB68_3
.LBB68_3:                               # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, -56(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	addq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	-24(%rbp), %rcx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	cmpq	24(%rdx), %rcx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jl	.LBB68_5
# BB#4:                                 # %cond.true.14
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB68_6
.LBB68_5:                               # %cond.false.17
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	jmp	.LBB68_6
.LBB68_6:                               # %cond.end.18
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-104(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	$0, -32(%rbp)
.LBB68_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB68_17
# BB#8:                                 # %for.body
                                        #   in Loop: Header=BB68_7 Depth=1
	cmpq	$3, -32(%rbp)
	jl	.LBB68_13
# BB#9:                                 # %land.lhs.true
                                        #   in Loop: Header=BB68_7 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	-56(%rbp), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$46, %edx
	jne	.LBB68_13
# BB#10:                                # %land.lhs.true.26
                                        #   in Loop: Header=BB68_7 Depth=1
	movq	-32(%rbp), %rax
	subq	$2, %rax
	movq	-56(%rbp), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$46, %edx
	jne	.LBB68_13
# BB#11:                                # %land.lhs.true.32
                                        #   in Loop: Header=BB68_7 Depth=1
	movq	-32(%rbp), %rax
	subq	$1, %rax
	movq	-56(%rbp), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$46, %edx
	jne	.LBB68_13
# BB#12:                                # %if.then
                                        #   in Loop: Header=BB68_7 Depth=1
	movb	$1, -41(%rbp)
.LBB68_13:                              # %if.end
                                        #   in Loop: Header=BB68_7 Depth=1
	movq	-32(%rbp), %rax
	movq	-56(%rbp), %rcx
	movzbl	(%rcx,%rax), %edx
	movq	-32(%rbp), %rax
	movq	-64(%rbp), %rcx
	movzbl	(%rcx,%rax), %esi
	cmpl	%esi, %edx
	je	.LBB68_15
# BB#14:                                # %if.then.44
	movb	-41(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	%rdx, -8(%rbp)
	jmp	.LBB68_27
.LBB68_15:                              # %if.end.46
                                        #   in Loop: Header=BB68_7 Depth=1
	jmp	.LBB68_16
.LBB68_16:                              # %for.inc
                                        #   in Loop: Header=BB68_7 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB68_7
.LBB68_17:                              # %for.end
	movq	-40(%rbp), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB68_19
# BB#18:                                # %if.then.51
	movq	$2, -8(%rbp)
	jmp	.LBB68_27
.LBB68_19:                              # %if.end.52
	movq	-56(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -56(%rbp)
	movzbl	(%rax), %edx
	cmpl	$32, %edx
	jne	.LBB68_26
# BB#20:                                # %land.lhs.true.56
	movq	-56(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -56(%rbp)
	movzbl	(%rax), %edx
	cmpl	$91, %edx
	jne	.LBB68_26
# BB#21:                                # %if.then.61
	leaq	-72(%rbp), %rsi
	movl	$10, %edx
	movq	-56(%rbp), %rdi
	callq	strtoimax
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, -80(%rbp)
	cmpq	-80(%rbp), %rsi
	jge	.LBB68_25
# BB#22:                                # %land.lhs.true.64
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	cmpq	%rax, -80(%rbp)
	jge	.LBB68_25
# BB#23:                                # %land.lhs.true.67
	movabsq	$.L.str.140, %rsi
	movl	$8, %eax
	movl	%eax, %edx
	movq	-72(%rbp), %rdi
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB68_25
# BB#24:                                # %if.then.71
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB68_27
.LBB68_25:                              # %if.end.72
	jmp	.LBB68_26
.LBB68_26:                              # %if.end.73
	movq	$0, -8(%rbp)
.LBB68_27:                              # %return
	movq	-8(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end68:
	.size	message_log_check_duplicate, .Lfunc_end68-message_log_check_duplicate
	.cfi_endproc

	.globl	message3
	.align	16, 0x90
	.type	message3,@function
message3:                               # @message3
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp207:
	.cfi_def_cfa_offset 16
.Ltmp208:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp209:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movl	%eax, %edi
	movl	%eax, %esi
	callq	clear_message
	callq	cancel_echoing
	callq	message_log_maybe_newline
	movq	-8(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB69_1
	jmp	.LBB69_11
.LBB69_1:                               # %if.then
	movq	-8(%rbp), %rdi
	callq	SBYTES
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	STRING_MULTIBYTE
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	$16384, -40(%rbp)       # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -48(%rbp)
	movb	$0, -49(%rbp)
# BB#2:                                 # %do.body
	movq	-8(%rbp), %rdi
	callq	SBYTES
	addq	$1, %rax
	cmpq	-40(%rbp), %rax
	jg	.LBB69_4
# BB#3:                                 # %cond.true
	movq	-8(%rbp), %rdi
	callq	SBYTES
	incq	%rax
	movq	-40(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -40(%rbp)
	movq	-8(%rbp), %rdi
	callq	SBYTES
	addq	$16, %rax
	andq	$-16, %rax
	movq	%rsp, %rdi
	subq	%rax, %rdi
	movq	%rdi, %rsp
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	jmp	.LBB69_5
.LBB69_4:                               # %cond.false
	movb	$1, -49(%rbp)
	movq	-8(%rbp), %rdi
	callq	SBYTES
	addq	$1, %rax
	movq	%rax, %rdi
	callq	record_xmalloc
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB69_5:                               # %cond.end
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	SDATA
	movq	-8(%rbp), %rdi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	SBYTES
	addq	$1, %rax
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	memcpy
# BB#6:                                 # %do.end
	movl	$1, %edx
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movb	-17(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	callq	message_dolog
# BB#7:                                 # %do.body.15
	testb	$1, -49(%rbp)
	je	.LBB69_9
# BB#8:                                 # %if.then.17
	xorl	%edi, %edi
	movb	$0, -49(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB69_9:                               # %if.end
	jmp	.LBB69_10
.LBB69_10:                              # %do.end.20
	jmp	.LBB69_11
.LBB69_11:                              # %if.end.21
	testb	$1, globals+3395
	jne	.LBB69_13
# BB#12:                                # %if.then.23
	movq	-8(%rbp), %rdi
	callq	message3_nolog
.LBB69_13:                              # %if.end.24
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end69:
	.size	message3, .Lfunc_end69-message3
	.cfi_endproc

	.globl	clear_message
	.align	16, 0x90
	.type	clear_message,@function
clear_message:                          # @clear_message
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp210:
	.cfi_def_cfa_offset 16
.Ltmp211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp212:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%sil, %al
	movb	%dil, %cl
	andb	$1, %cl
	movb	%cl, -1(%rbp)
	andb	$1, %al
	movb	%al, -2(%rbp)
	testb	$1, -1(%rbp)
	je	.LBB70_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, echo_area_buffer
	movb	$1, message_cleared_p
.LBB70_2:                               # %if.end
	testb	$1, -2(%rbp)
	je	.LBB70_4
# BB#3:                                 # %if.then.3
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, echo_area_buffer+8
.LBB70_4:                               # %if.end.5
	movb	$0, message_buf_print
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end70:
	.size	clear_message, .Lfunc_end70-clear_message
	.cfi_endproc

	.globl	message3_nolog
	.align	16, 0x90
	.type	message3_nolog,@function
message3_nolog:                         # @message3_nolog
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp213:
	.cfi_def_cfa_offset 16
.Ltmp214:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp215:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB71_1
	jmp	.LBB71_3
.LBB71_1:                               # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB71_3
# BB#2:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB71_4
.LBB71_3:                               # %cond.false
	callq	emacs_abort
.LBB71_4:                               # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %edx
	cmpl	$0, %edx
	jne	.LBB71_6
# BB#5:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	message_to_stderr
	jmp	.LBB71_22
.LBB71_6:                               # %if.else
	xorl	%edi, %edi
	movq	globals+688, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB71_21
# BB#7:                                 # %land.lhs.true.5
	testb	$1, noninteractive
	jne	.LBB71_21
# BB#8:                                 # %land.lhs.true.6
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB71_21
# BB#9:                                 # %if.then.10
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB71_12
# BB#10:                                # %land.lhs.true.19
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB71_12
# BB#11:                                # %if.then.26
	movq	-32(%rbp), %rdi
	callq	Fmake_frame_visible
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB71_12:                              # %if.end
	movq	-8(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB71_13
	jmp	.LBB71_17
.LBB71_13:                              # %land.lhs.true.29
	movq	-8(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	jle	.LBB71_17
# BB#14:                                # %if.then.32
	movq	-8(%rbp), %rdi
	callq	set_message
	testb	$1, globals+3412
	je	.LBB71_16
# BB#15:                                # %if.then.34
	movq	-32(%rbp), %rdi
	callq	Fraise_frame
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB71_16:                              # %if.end.36
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, echo_message_buffer
	jmp	.LBB71_18
.LBB71_17:                              # %if.else.38
	movl	$1, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	clear_message
.LBB71_18:                              # %if.end.39
	xorl	%edi, %edi
	callq	do_pending_window_change
	movl	$1, %edi
	callq	echo_area_display
	xorl	%edi, %edi
	callq	do_pending_window_change
	movq	-40(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 344(%rax)
	je	.LBB71_20
# BB#19:                                # %if.then.43
	movq	-40(%rbp), %rax
	movq	376(%rax), %rax
	movq	344(%rax), %rax
	movq	-40(%rbp), %rdi
	callq	*%rax
.LBB71_20:                              # %if.end.47
	jmp	.LBB71_21
.LBB71_21:                              # %if.end.48
	jmp	.LBB71_22
.LBB71_22:                              # %if.end.49
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end71:
	.size	message3_nolog, .Lfunc_end71-message3_nolog
	.cfi_endproc

	.align	16, 0x90
	.type	message_to_stderr,@function
message_to_stderr:                      # @message_to_stderr
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp216:
	.cfi_def_cfa_offset 16
.Ltmp217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp218:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	testb	$1, noninteractive_need_newline
	je	.LBB72_2
# BB#1:                                 # %if.then
	movl	$10, %edi
	movb	$0, noninteractive_need_newline
	movq	stderr, %rsi
	callq	fputc
	movl	%eax, -28(%rbp)         # 4-byte Spill
.LBB72_2:                               # %if.end
	movq	-8(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB72_3
	jmp	.LBB72_9
.LBB72_3:                               # %if.then.2
	xorl	%edi, %edi
	movq	globals+1344, %rax
	movq	%rax, -16(%rbp)
	movq	globals+288, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB72_5
# BB#4:                                 # %if.then.4
	movq	globals+288, %rax
	movq	%rax, -16(%rbp)
.LBB72_5:                               # %if.end.5
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB72_7
# BB#6:                                 # %if.then.8
	movl	$1, %edx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	code_convert_string_norecord
	movq	%rax, -24(%rbp)
	jmp	.LBB72_8
.LBB72_7:                               # %if.else
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB72_8:                               # %if.end.10
	movq	-24(%rbp), %rdi
	callq	SDATA
	movq	-24(%rbp), %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	SBYTES
	movl	$1, %ecx
	movl	%ecx, %edx
	movq	stderr, %rcx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	fwrite
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB72_9:                               # %if.end.14
	testb	$1, globals+3371
	jne	.LBB72_11
# BB#10:                                # %if.then.16
	movl	$10, %edi
	movq	stderr, %rsi
	callq	fputc
	movl	%eax, -68(%rbp)         # 4-byte Spill
.LBB72_11:                              # %if.end.18
	movq	stderr, %rdi
	callq	fflush
	movl	%eax, -72(%rbp)         # 4-byte Spill
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end72:
	.size	message_to_stderr, .Lfunc_end72-message_to_stderr
	.cfi_endproc

	.align	16, 0x90
	.type	set_message,@function
set_message:                            # @set_message
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp219:
	.cfi_def_cfa_offset 16
.Ltmp220:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp221:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	STRING_MULTIBYTE
	xorl	%ecx, %ecx
	movl	%ecx, %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movabsq	$set_message_1, %rdx
	andb	$1, %al
	movb	%al, message_enable_multibyte
	movq	-8(%rbp), %r8
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movq	-16(%rbp), %rcx         # 8-byte Reload
	callq	with_echo_area_buffer
	movb	$0, message_buf_print
	movb	$0, help_echo_showing_p
	movq	globals+448, %rdi
	movb	%al, -17(%rbp)          # 1-byte Spill
	callq	STRINGP
	testb	$1, %al
	jne	.LBB73_1
	jmp	.LBB73_4
.LBB73_1:                               # %land.lhs.true
	movq	-8(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB73_2
	jmp	.LBB73_4
.LBB73_2:                               # %land.lhs.true.4
	movq	globals+448, %rdi
	movq	-8(%rbp), %rsi
	callq	fast_string_match
	cmpq	$0, %rax
	jl	.LBB73_4
# BB#3:                                 # %if.then
	movl	$372, %edi              # imm = 0x174
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	list2
	movq	%rax, %rdi
	callq	call_debugger
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB73_4:                               # %if.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end73:
	.size	set_message, .Lfunc_end73-set_message
	.cfi_endproc

	.align	16, 0x90
	.type	echo_area_display,@function
echo_area_display:                      # @echo_area_display
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp222:
	.cfi_def_cfa_offset 16
.Ltmp223:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp224:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movb	$0, -33(%rbp)
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB74_1
	jmp	.LBB74_3
.LBB74_1:                               # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB74_3
# BB#2:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB74_4
.LBB74_3:                               # %cond.false
	callq	emacs_abort
.LBB74_4:                               # %cond.end
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB74_6
# BB#5:                                 # %lor.lhs.false
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB74_7
.LBB74_6:                               # %if.then
	jmp	.LBB74_34
.LBB74_7:                               # %if.end
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB74_9
# BB#8:                                 # %if.then.13
	jmp	.LBB74_34
.LBB74_9:                               # %if.end.14
	callq	clear_garbaged_frames
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB74_11
# BB#10:                                # %lor.lhs.false.17
	cmpq	$0, minibuf_level
	jne	.LBB74_27
.LBB74_11:                              # %if.then.19
	movq	-16(%rbp), %rax
	movq	%rax, echo_area_window
	movq	-24(%rbp), %rdi
	callq	display_echo_area
	andb	$1, %al
	movb	%al, -33(%rbp)
	movq	-24(%rbp), %rdi
	movw	468(%rdi), %cx
	andw	$-1025, %cx             # imm = 0xFFFFFFFFFFFFFBFF
	orw	$1024, %cx              # imm = 0x400
	movw	%cx, 468(%rdi)
	testb	$1, -1(%rbp)
	je	.LBB74_26
# BB#12:                                # %land.lhs.true.25
	testb	$1, redisplaying_p
	jne	.LBB74_26
# BB#13:                                # %if.then.27
	movl	$0, -52(%rbp)
	testb	$1, display_completed
	jne	.LBB74_15
# BB#14:                                # %if.then.29
	xorl	%esi, %esi
	movq	-32(%rbp), %rax
	movq	40(%rax), %rdi
	callq	redisplay_mode_lines
	movl	%eax, -52(%rbp)
.LBB74_15:                              # %if.end.31
	testb	$1, -33(%rbp)
	je	.LBB74_18
# BB#16:                                # %land.lhs.true.33
	xorl	%edi, %edi
	movq	Vrun_hooks, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB74_18
# BB#17:                                # %if.then.36
	callq	SPECPDL_INDEX
	movl	$798, %edi              # imm = 0x31E
	movq	%rax, -64(%rbp)
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movq	-32(%rbp), %rdi
	callq	fset_redisplay
	callq	redisplay_internal
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB74_23
.LBB74_18:                              # %if.else
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB74_21
# BB#19:                                # %land.lhs.true.48
	cmpl	$0, -52(%rbp)
	jne	.LBB74_21
# BB#20:                                # %if.then.50
	movq	-24(%rbp), %rdi
	callq	update_single_window
	movq	-32(%rbp), %rdi
	callq	flush_frame
	jmp	.LBB74_22
.LBB74_21:                              # %if.else.51
	movl	$1, %eax
	movq	-32(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	update_frame
	movb	%al, -113(%rbp)         # 1-byte Spill
.LBB74_22:                              # %if.end.53
	jmp	.LBB74_23
.LBB74_23:                              # %if.end.54
	testb	$1, globals+3371
	je	.LBB74_25
# BB#24:                                # %if.then.56
	movq	-16(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, %rdi
	callq	wset_redisplay
.LBB74_25:                              # %if.end.58
	jmp	.LBB74_26
.LBB74_26:                              # %if.end.59
	jmp	.LBB74_30
.LBB74_27:                              # %if.else.60
	movq	-16(%rbp), %rax
	cmpq	selected_window, %rax
	je	.LBB74_29
# BB#28:                                # %if.then.62
	movq	-16(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, %rdi
	callq	wset_redisplay
.LBB74_29:                              # %if.end.64
	jmp	.LBB74_30
.LBB74_30:                              # %if.end.65
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, echo_area_buffer+8
	callq	builtin_lisp_symbol
	movq	%rax, echo_message_buffer
	movq	-16(%rbp), %rax
	cmpq	selected_window, %rax
	jne	.LBB74_32
# BB#31:                                # %if.then.68
	movq	$0, this_line_start_pos
.LBB74_32:                              # %if.end.69
	testb	$1, -33(%rbp)
	je	.LBB74_34
# BB#33:                                # %if.then.71
	movq	-32(%rbp), %rdi
	callq	fset_redisplay
	callq	clear_garbaged_frames
.LBB74_34:                              # %if.end.72
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end74:
	.size	echo_area_display, .Lfunc_end74-echo_area_display
	.cfi_endproc

	.globl	message1
	.align	16, 0x90
	.type	message1,@function
message1:                               # @message1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp225:
	.cfi_def_cfa_offset 16
.Ltmp226:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp227:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB75_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rdi
	callq	build_unibyte_string
	movq	%rax, -16(%rbp)         # 8-byte Spill
	jmp	.LBB75_3
.LBB75_2:                               # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -16(%rbp)         # 8-byte Spill
.LBB75_3:                               # %cond.end
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	message3
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end75:
	.size	message1, .Lfunc_end75-message1
	.cfi_endproc

	.globl	message1_nolog
	.align	16, 0x90
	.type	message1_nolog,@function
message1_nolog:                         # @message1_nolog
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp228:
	.cfi_def_cfa_offset 16
.Ltmp229:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp230:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB76_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rdi
	callq	build_unibyte_string
	movq	%rax, -16(%rbp)         # 8-byte Spill
	jmp	.LBB76_3
.LBB76_2:                               # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -16(%rbp)         # 8-byte Spill
.LBB76_3:                               # %cond.end
	movq	-16(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	message3_nolog
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end76:
	.size	message1_nolog, .Lfunc_end76-message1_nolog
	.cfi_endproc

	.globl	message_with_string
	.align	16, 0x90
	.type	message_with_string,@function
message_with_string:                    # @message_with_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp231:
	.cfi_def_cfa_offset 16
.Ltmp232:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp233:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHECK_STRING
	testb	$1, noninteractive
	je	.LBB77_2
# BB#1:                                 # %if.then
	cmpq	$0, -8(%rbp)
	setne	%al
	xorb	$-1, %al
	xorb	$-1, %al
	andb	$1, %al
	movb	%al, -18(%rbp)
	jmp	.LBB77_11
.LBB77_2:                               # %if.else
	xorl	%edi, %edi
	movq	globals+688, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB77_4
# BB#3:                                 # %land.lhs.true
	testb	$1, noninteractive
	je	.LBB77_5
.LBB77_4:                               # %if.then.5
	movb	$0, -18(%rbp)
	jmp	.LBB77_10
.LBB77_5:                               # %if.else.6
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB77_6
	jmp	.LBB77_8
.LBB77_6:                               # %land.lhs.true.8
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB77_8
# BB#7:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB77_9
.LBB77_8:                               # %cond.false
	callq	emacs_abort
.LBB77_9:                               # %cond.end
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	andq	$1, %rax
	movb	%al, %dl
	andb	$1, %dl
	movb	%dl, -18(%rbp)
.LBB77_10:                              # %if.end
	jmp	.LBB77_11
.LBB77_11:                              # %if.end.14
	testb	$1, -18(%rbp)
	je	.LBB77_19
# BB#12:                                # %if.then.16
	movl	$4, %esi
	leaq	-88(%rbp), %rax
	movq	-8(%rbp), %rdi
	movl	%esi, -132(%rbp)        # 4-byte Spill
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	strlen
	movq	%rax, -88(%rbp)
	movq	$-1, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, %rdi
	movl	-132(%rbp), %esi        # 4-byte Reload
	callq	make_lisp_ptr
	movl	$2, %esi
	movl	%esi, %edi
	leaq	-112(%rbp), %rsi
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -104(%rbp)
	callq	Fformat_message
	movq	%rax, -96(%rbp)
	testb	$1, noninteractive
	je	.LBB77_14
# BB#13:                                # %if.then.23
	movq	-96(%rbp), %rdi
	callq	message_to_stderr
	jmp	.LBB77_18
.LBB77_14:                              # %if.else.24
	testb	$1, -17(%rbp)
	je	.LBB77_16
# BB#15:                                # %if.then.26
	movq	-96(%rbp), %rdi
	callq	message3
	jmp	.LBB77_17
.LBB77_16:                              # %if.else.27
	movq	-96(%rbp), %rdi
	callq	message3_nolog
.LBB77_17:                              # %if.end.28
	movb	$0, message_buf_print
.LBB77_18:                              # %if.end.29
	jmp	.LBB77_19
.LBB77_19:                              # %if.end.30
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end77:
	.size	message_with_string, .Lfunc_end77-message_with_string
	.cfi_endproc

	.globl	message
	.align	16, 0x90
	.type	message,@function
message:                                # @message
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp234:
	.cfi_def_cfa_offset 16
.Ltmp235:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp236:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              # imm = 0x180
	testb	%al, %al
	movaps	%xmm7, -224(%rbp)       # 16-byte Spill
	movaps	%xmm6, -240(%rbp)       # 16-byte Spill
	movaps	%xmm5, -256(%rbp)       # 16-byte Spill
	movaps	%xmm4, -272(%rbp)       # 16-byte Spill
	movaps	%xmm3, -288(%rbp)       # 16-byte Spill
	movaps	%xmm2, -304(%rbp)       # 16-byte Spill
	movaps	%xmm1, -320(%rbp)       # 16-byte Spill
	movaps	%xmm0, -336(%rbp)       # 16-byte Spill
	movq	%rdi, -344(%rbp)        # 8-byte Spill
	movq	%r9, -352(%rbp)         # 8-byte Spill
	movq	%r8, -360(%rbp)         # 8-byte Spill
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	movq	%rdx, -376(%rbp)        # 8-byte Spill
	movq	%rsi, -384(%rbp)        # 8-byte Spill
	je	.LBB78_2
# BB#1:                                 # %entry
	movaps	-336(%rbp), %xmm0       # 16-byte Reload
	movaps	%xmm0, -160(%rbp)
	movaps	-320(%rbp), %xmm1       # 16-byte Reload
	movaps	%xmm1, -144(%rbp)
	movaps	-304(%rbp), %xmm2       # 16-byte Reload
	movaps	%xmm2, -128(%rbp)
	movaps	-288(%rbp), %xmm3       # 16-byte Reload
	movaps	%xmm3, -112(%rbp)
	movaps	-272(%rbp), %xmm4       # 16-byte Reload
	movaps	%xmm4, -96(%rbp)
	movaps	-256(%rbp), %xmm5       # 16-byte Reload
	movaps	%xmm5, -80(%rbp)
	movaps	-240(%rbp), %xmm6       # 16-byte Reload
	movaps	%xmm6, -64(%rbp)
	movaps	-224(%rbp), %xmm7       # 16-byte Reload
	movaps	%xmm7, -48(%rbp)
.LBB78_2:                               # %entry
	movq	-352(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	-360(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -176(%rbp)
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, -184(%rbp)
	movq	-376(%rbp), %rsi        # 8-byte Reload
	movq	%rsi, -192(%rbp)
	movq	-384(%rbp), %rdi        # 8-byte Reload
	movq	%rdi, -200(%rbp)
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	%r8, -8(%rbp)
	leaq	-208(%rbp), %r8
	movq	%r8, -16(%rbp)
	leaq	16(%rbp), %r8
	movq	%r8, -24(%rbp)
	movl	$48, -28(%rbp)
	movl	$8, -32(%rbp)
	movq	-8(%rbp), %rdi
	leaq	-32(%rbp), %rsi
	callq	vmessage
	addq	$384, %rsp              # imm = 0x180
	popq	%rbp
	retq
.Lfunc_end78:
	.size	message, .Lfunc_end78-message
	.cfi_endproc

	.align	16, 0x90
	.type	vmessage,@function
vmessage:                               # @vmessage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp237:
	.cfi_def_cfa_offset 16
.Ltmp238:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp239:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	testb	$1, noninteractive
	je	.LBB79_8
# BB#1:                                 # %if.then
	cmpq	$0, -8(%rbp)
	je	.LBB79_7
# BB#2:                                 # %if.then.2
	testb	$1, noninteractive_need_newline
	je	.LBB79_4
# BB#3:                                 # %if.then.4
	movl	$10, %edi
	movq	stderr, %rsi
	callq	_IO_putc
	movl	%eax, -92(%rbp)         # 4-byte Spill
.LBB79_4:                               # %if.end
	movb	$0, noninteractive_need_newline
	movq	stderr, %rdi
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	vfprintf
	testb	$1, globals+3371
	movl	%eax, -96(%rbp)         # 4-byte Spill
	jne	.LBB79_6
# BB#5:                                 # %if.then.7
	movabsq	$.L.str.2, %rsi
	movq	stderr, %rdi
	movb	$0, %al
	callq	fprintf
	movl	%eax, -100(%rbp)        # 4-byte Spill
.LBB79_6:                               # %if.end.9
	movq	stderr, %rdi
	callq	fflush
	movl	%eax, -104(%rbp)        # 4-byte Spill
.LBB79_7:                               # %if.end.11
	jmp	.LBB79_28
.LBB79_8:                               # %if.else
	xorl	%edi, %edi
	movq	globals+688, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB79_27
# BB#9:                                 # %land.lhs.true
	testb	$1, noninteractive
	jne	.LBB79_27
# BB#10:                                # %if.then.14
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB79_11
	jmp	.LBB79_13
.LBB79_11:                              # %land.lhs.true.16
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB79_13
# BB#12:                                # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false
	callq	emacs_abort
.LBB79_14:                              # %cond.end
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB79_26
# BB#15:                                # %if.then.21
	cmpq	$0, -8(%rbp)
	je	.LBB79_24
# BB#16:                                # %if.then.23
	movq	-32(%rbp), %rax
	movl	272(%rax), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rax
	movq	%rax, -56(%rbp)
	movq	$16384, -64(%rbp)       # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -72(%rbp)
	movb	$0, -73(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	cmpq	-64(%rbp), %rax
	jg	.LBB79_18
# BB#17:                                # %cond.true.27
	movq	-56(%rbp), %rax
	incq	%rax
	movq	-64(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	-56(%rbp), %rax
	addq	$16, %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jmp	.LBB79_19
.LBB79_18:                              # %cond.false.31
	movb	$1, -73(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	callq	record_xmalloc
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB79_19:                              # %cond.end.34
	movq	-128(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %r8
	callq	doprnt
	movq	%rax, -48(%rbp)
	movq	-88(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	make_string
	movq	%rax, %rdi
	callq	message3
# BB#20:                                # %do.body
	testb	$1, -73(%rbp)
	je	.LBB79_22
# BB#21:                                # %if.then.39
	xorl	%edi, %edi
	movb	$0, -73(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB79_22:                              # %if.end.42
	jmp	.LBB79_23
.LBB79_23:                              # %do.end
	jmp	.LBB79_25
.LBB79_24:                              # %if.else.43
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	message1
.LBB79_25:                              # %if.end.44
	movb	$0, message_buf_print
.LBB79_26:                              # %if.end.45
	jmp	.LBB79_27
.LBB79_27:                              # %if.end.46
	jmp	.LBB79_28
.LBB79_28:                              # %if.end.47
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end79:
	.size	vmessage, .Lfunc_end79-vmessage
	.cfi_endproc

	.globl	update_echo_area
	.align	16, 0x90
	.type	update_echo_area,@function
update_echo_area:                       # @update_echo_area
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp240:
	.cfi_def_cfa_offset 16
.Ltmp241:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp242:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB80_2
# BB#1:                                 # %if.then
	callq	Fcurrent_message
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	message3
.LBB80_2:                               # %if.end
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end80:
	.size	update_echo_area, .Lfunc_end80-update_echo_area
	.cfi_endproc

	.globl	setup_echo_area_for_printing
	.align	16, 0x90
	.type	setup_echo_area_for_printing,@function
setup_echo_area_for_printing:           # @setup_echo_area_for_printing
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp243:
	.cfi_def_cfa_offset 16
.Ltmp244:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp245:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	selected_frame, %rcx
	subq	$5, %rcx
	cmpq	$0, 376(%rcx)
	jne	.LBB81_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fkill_emacs
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB81_2:                               # %if.end
	callq	ensure_echo_area_buffers
	testb	$1, message_buf_print
	jne	.LBB81_20
# BB#3:                                 # %if.then.1
	movq	echo_area_buffer+8, %rax
	cmpq	echo_buffer, %rax
	jne	.LBB81_5
# BB#4:                                 # %if.then.3
	movq	echo_buffer+8, %rax
	movq	%rax, echo_area_buffer
	jmp	.LBB81_6
.LBB81_5:                               # %if.else
	movq	echo_buffer, %rax
	movq	%rax, echo_area_buffer
.LBB81_6:                               # %if.end.4
	movq	echo_area_buffer, %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_truncate_lines
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	cmpq	$1, 16(%rax)
	jle	.LBB81_8
# BB#7:                                 # %if.then.8
	callq	SPECPDL_INDEX
	movl	$547, %edi              # imm = 0x223
	movq	%rax, -16(%rbp)
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movl	$1, %ecx
	movl	%ecx, %edi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rsi
	callq	del_range
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB81_8:                               # %if.end.16
	movl	$1, %eax
	movl	%eax, %ecx
	movq	current_buffer, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	temp_set_point_both
	xorl	%edi, %edi
	movb	-1(%rbp), %r8b
	andb	$1, %r8b
	movzbl	%r8b, %eax
	movq	current_buffer, %rcx
	movq	312(%rcx), %rcx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	movl	%eax, -84(%rbp)         # 4-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r8b
	xorb	$-1, %r8b
	andb	$1, %r8b
	movzbl	%r8b, %edi
	movl	-84(%rbp), %r9d         # 4-byte Reload
	cmpl	%edi, %r9d
	je	.LBB81_13
# BB#9:                                 # %if.then.23
	testb	$1, -1(%rbp)
	je	.LBB81_11
# BB#10:                                # %cond.true
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB81_12
.LBB81_11:                              # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB81_12:                              # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	Fset_buffer_multibyte
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB81_13:                              # %if.end.29
	testb	$1, globals+3412
	je	.LBB81_19
# BB#14:                                # %if.then.31
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB81_15
	jmp	.LBB81_17
.LBB81_15:                              # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB81_17
# BB#16:                                # %cond.true.38
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB81_18
.LBB81_17:                              # %cond.false.40
	callq	emacs_abort
.LBB81_18:                              # %cond.end.41
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rdi
	callq	Fraise_frame
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB81_19:                              # %if.end.45
	callq	message_log_maybe_newline
	movb	$1, message_buf_print
	jmp	.LBB81_28
.LBB81_20:                              # %if.else.46
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB81_25
# BB#21:                                # %if.then.50
	movq	echo_area_buffer+8, %rax
	cmpq	echo_buffer, %rax
	jne	.LBB81_23
# BB#22:                                # %if.then.53
	movq	echo_buffer+8, %rax
	movq	%rax, echo_area_buffer
	jmp	.LBB81_24
.LBB81_23:                              # %if.else.54
	movq	echo_buffer, %rax
	movq	%rax, echo_area_buffer
.LBB81_24:                              # %if.end.55
	jmp	.LBB81_25
.LBB81_25:                              # %if.end.56
	movq	current_buffer, %rax
	movq	echo_area_buffer, %rdi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	XBUFFER
	movq	-136(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	je	.LBB81_27
# BB#26:                                # %if.then.60
	movq	echo_area_buffer, %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_truncate_lines
.LBB81_27:                              # %if.end.63
	jmp	.LBB81_28
.LBB81_28:                              # %if.end.64
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end81:
	.size	setup_echo_area_for_printing, .Lfunc_end81-setup_echo_area_for_printing
	.cfi_endproc

	.align	16, 0x90
	.type	ensure_echo_area_buffers,@function
ensure_echo_area_buffers:               # @ensure_echo_area_buffers
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp246:
	.cfi_def_cfa_offset 16
.Ltmp247:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp248:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$0, -4(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_5 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB82_13
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movslq	-4(%rbp), %rax
	movq	echo_buffer(,%rax,8), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB82_3
	jmp	.LBB82_4
.LBB82_3:                               # %lor.lhs.false
                                        #   in Loop: Header=BB82_1 Depth=1
	movslq	-4(%rbp), %rax
	movq	echo_buffer(,%rax,8), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB82_11
.LBB82_4:                               # %if.then
                                        #   in Loop: Header=BB82_1 Depth=1
	movabsq	$.L.str.141, %rsi
	leaq	-48(%rbp), %rdi
	movslq	-4(%rbp), %rax
	movq	echo_buffer(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	-4(%rbp), %edx
	movb	$0, %al
	callq	make_formatted_string
	movq	%rax, %rdi
	callq	Fget_buffer_create
	movslq	-4(%rbp), %rsi
	movq	%rax, echo_buffer(,%rsi,8)
	movslq	-4(%rbp), %rax
	movq	echo_buffer(,%rax,8), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_truncate_lines
	movl	$0, -60(%rbp)
.LBB82_5:                               # %for.cond.16
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -60(%rbp)
	jge	.LBB82_10
# BB#6:                                 # %for.body.18
                                        #   in Loop: Header=BB82_5 Depth=2
	movq	-56(%rbp), %rax
	movslq	-60(%rbp), %rcx
	cmpq	echo_area_buffer(,%rcx,8), %rax
	jne	.LBB82_8
# BB#7:                                 # %if.then.22
                                        #   in Loop: Header=BB82_5 Depth=2
	movslq	-4(%rbp), %rax
	movq	echo_buffer(,%rax,8), %rax
	movslq	-60(%rbp), %rcx
	movq	%rax, echo_area_buffer(,%rcx,8)
.LBB82_8:                               # %if.end
                                        #   in Loop: Header=BB82_5 Depth=2
	jmp	.LBB82_9
.LBB82_9:                               # %for.inc
                                        #   in Loop: Header=BB82_5 Depth=2
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_5
.LBB82_10:                              # %for.end
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_11
.LBB82_11:                              # %if.end.27
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_12
.LBB82_12:                              # %for.inc.28
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_1
.LBB82_13:                              # %for.end.30
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end82:
	.size	ensure_echo_area_buffers, .Lfunc_end82-ensure_echo_area_buffers
	.cfi_endproc

	.globl	resize_echo_area_exactly
	.align	16, 0x90
	.type	resize_echo_area_exactly,@function
resize_echo_area_exactly:               # @resize_echo_area_exactly
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp249:
	.cfi_def_cfa_offset 16
.Ltmp250:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp251:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	echo_area_buffer, %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB83_1
	jmp	.LBB83_8
.LBB83_1:                               # %land.lhs.true
	movq	echo_area_window, %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB83_2
	jmp	.LBB83_8
.LBB83_2:                               # %if.then
	movq	echo_area_window, %rdi
	callq	XWINDOW
	movq	%rax, -8(%rbp)
	cmpq	$0, minibuf_level
	jne	.LBB83_4
# BB#3:                                 # %cond.true
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB83_5
.LBB83_4:                               # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB83_5:                               # %cond.end
	movq	-32(%rbp), %rax         # 8-byte Reload
	xorl	%esi, %esi
	movabsq	$resize_mini_window_1, %rdx
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %r8
	callq	with_echo_area_buffer
	andb	$1, %al
	movb	%al, -17(%rbp)
	testb	$1, -17(%rbp)
	je	.LBB83_7
# BB#6:                                 # %if.then.6
	movl	$42, windows_or_buffers_changed
	movl	$30, update_mode_lines
	callq	redisplay_internal
.LBB83_7:                               # %if.end
	jmp	.LBB83_8
.LBB83_8:                               # %if.end.7
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end83:
	.size	resize_echo_area_exactly, .Lfunc_end83-resize_echo_area_exactly
	.cfi_endproc

	.align	16, 0x90
	.type	with_echo_area_buffer,@function
with_echo_area_buffer:                  # @with_echo_area_buffer
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp252:
	.cfi_def_cfa_offset 16
.Ltmp253:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp254:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -64(%rbp)
	callq	ensure_echo_area_buffers
	movb	$0, -51(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB84_2
# BB#1:                                 # %if.then
	movb	$0, -49(%rbp)
	movb	$1, -50(%rbp)
	jmp	.LBB84_9
.LBB84_2:                               # %if.else
	cmpl	$0, -12(%rbp)
	jle	.LBB84_4
# BB#3:                                 # %if.then.2
	movb	$1, -49(%rbp)
	movb	$0, -50(%rbp)
	jmp	.LBB84_8
.LBB84_4:                               # %if.else.3
	xorl	%edi, %edi
	movb	$0, -49(%rbp)
	movb	$1, -50(%rbp)
	movb	$1, -51(%rbp)
	movb	-49(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_area_buffer(,%rdx,8), %rdx
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB84_7
# BB#5:                                 # %land.lhs.true
	movb	-49(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_area_buffer(,%rdx,8), %rdx
	movb	-50(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %esi
	cmpq	echo_area_buffer(,%rsi,8), %rdx
	jne	.LBB84_7
# BB#6:                                 # %if.then.13
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movb	-49(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edi
	movl	%edi, %edx
	movq	%rax, echo_area_buffer(,%rdx,8)
.LBB84_7:                               # %if.end
	jmp	.LBB84_8
.LBB84_8:                               # %if.end.18
	jmp	.LBB84_9
.LBB84_9:                               # %if.end.19
	xorl	%edi, %edi
	movb	-49(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_area_buffer(,%rdx,8), %rdx
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB84_14
# BB#10:                                # %if.then.25
	movb	-50(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_area_buffer(,%rdx,8), %rdx
	movb	-49(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %esi
	cmpq	echo_buffer(,%rsi,8), %rdx
	jne	.LBB84_12
# BB#11:                                # %cond.true
	movb	-50(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_buffer(,%rdx,8), %rdx
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	jmp	.LBB84_13
.LBB84_12:                              # %cond.false
	movb	-49(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_buffer(,%rdx,8), %rdx
	movq	%rdx, -88(%rbp)         # 8-byte Spill
.LBB84_13:                              # %cond.end
	movq	-88(%rbp), %rax         # 8-byte Reload
	movb	-49(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	%rax, echo_area_buffer(,%rsi,8)
	movb	$1, -51(%rbp)
.LBB84_14:                              # %if.end.42
	movb	-49(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	echo_area_buffer(,%rdx,8), %rdx
	movq	%rdx, -48(%rbp)
	cmpq	$0, echo_kboard
	jne	.LBB84_17
# BB#15:                                # %land.lhs.true.47
	movq	-48(%rbp), %rax
	cmpq	echo_message_buffer, %rax
	jne	.LBB84_17
# BB#16:                                # %if.then.49
	callq	cancel_echoing
.LBB84_17:                              # %if.end.50
	movq	-8(%rbp), %rdi
	callq	with_echo_area_buffer_unwind_data
	movabsq	$unwind_with_echo_area_buffer, %rdi
	movq	%rax, %rsi
	callq	record_unwind_protect
	movq	-48(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	cmpq	$0, -8(%rbp)
	je	.LBB84_19
# BB#18:                                # %if.then.54
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	wset_buffer
	movl	$1, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	movq	96(%rdi), %rdi
	movq	-48(%rbp), %rcx
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	movq	%rcx, %rsi
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	-96(%rbp), %rcx         # 8-byte Reload
	callq	set_marker_both
	movl	$1, %r8d
	movl	%r8d, %ecx
	movq	-8(%rbp), %rdx
	movq	104(%rdx), %rdi
	movq	-48(%rbp), %rsi
	movq	%rcx, %rdx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	set_marker_both
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB84_19:                              # %if.end.57
	movl	$901, %edi              # imm = 0x385
	movq	current_buffer, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_undo_list
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_read_only
	movl	$547, %edi              # imm = 0x223
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movl	$544, %edi              # imm = 0x220
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	testb	$1, -51(%rbp)
	je	.LBB84_22
# BB#20:                                # %land.lhs.true.65
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	cmpq	$1, 16(%rax)
	jle	.LBB84_22
# BB#21:                                # %if.then.67
	movl	$1, %eax
	movl	%eax, %edi
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rsi
	callq	del_range
.LBB84_22:                              # %if.end.70
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	xorl	%edi, %edi
	andb	$1, %al
	movb	%al, -52(%rbp)
	movq	-64(%rbp), %rsi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movb	-52(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	%edx, %eax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end84:
	.size	with_echo_area_buffer, .Lfunc_end84-with_echo_area_buffer
	.cfi_endproc

	.align	16, 0x90
	.type	resize_mini_window_1,@function
resize_mini_window_1:                   # @resize_mini_window_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp255:
	.cfi_def_cfa_offset 16
.Ltmp256:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp257:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	movzbl	%cl, %edi
	andl	$1, %edi
	movq	-32(%rbp), %rax         # 8-byte Reload
	movl	%edi, -44(%rbp)         # 4-byte Spill
	movq	%rax, %rdi
	movl	-44(%rbp), %esi         # 4-byte Reload
	callq	resize_mini_window
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end85:
	.size	resize_mini_window_1, .Lfunc_end85-resize_mini_window_1
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_internal,@function
redisplay_internal:                     # @redisplay_internal
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp258:
	.cfi_def_cfa_offset 16
.Ltmp259:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp260:
	.cfi_def_cfa_register %rbp
	subq	$10208, %rsp            # imm = 0x27E0
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -8(%rbp)
	movb	$0, -26(%rbp)
	movb	$0, -89(%rbp)
	movb	$0, -114(%rbp)
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB86_1
	jmp	.LBB86_3
.LBB86_1:                               # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB86_3
# BB#2:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -9872(%rbp)       # 8-byte Spill
	jmp	.LBB86_4
.LBB86_3:                               # %cond.false
	callq	emacs_abort
.LBB86_4:                               # %cond.end
	movq	-9872(%rbp), %rax       # 8-byte Reload
	movq	208(%rax), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %edx
	cmpl	$0, %edx
	je	.LBB86_6
# BB#5:                                 # %lor.lhs.false
	xorl	%edi, %edi
	movq	globals+1120, %rax
	movq	%rax, -9880(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9880(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB86_7
.LBB86_6:                               # %if.then
	jmp	.LBB86_339
.LBB86_7:                               # %if.end
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -24(%rbp)
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB86_8
	jmp	.LBB86_10
.LBB86_8:                               # %land.lhs.true.9
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB86_10
# BB#9:                                 # %cond.true.13
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -9888(%rbp)       # 8-byte Spill
	jmp	.LBB86_11
.LBB86_10:                              # %cond.false.15
	callq	emacs_abort
.LBB86_11:                              # %cond.end.16
	movq	-9888(%rbp), %rax       # 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	-24(%rbp), %rcx
	movq	208(%rcx), %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	jne	.LBB86_13
# BB#12:                                # %if.then.21
	jmp	.LBB86_339
.LBB86_13:                              # %if.end.22
	callq	popup_activated
	cmpl	$0, %eax
	je	.LBB86_15
# BB#14:                                # %if.then.24
	jmp	.LBB86_339
.LBB86_15:                              # %if.end.25
	testb	$1, redisplaying_p
	je	.LBB86_17
# BB#16:                                # %if.then.27
	jmp	.LBB86_339
.LBB86_17:                              # %if.end.28
	callq	SPECPDL_INDEX
	movabsq	$unwind_redisplay, %rdi
	movq	%rax, -80(%rbp)
	callq	record_unwind_protect_void
	movl	$542, %edi              # imm = 0x21E
	movb	$1, redisplaying_p
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -9896(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9896(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movl	$800, %edi              # imm = 0x320
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %esi
	movq	%rax, %rdi
	movq	%rsi, -9904(%rbp)       # 8-byte Spill
	movq	-9904(%rbp), %rdx       # 8-byte Reload
	callq	record_in_backtrace
	movq	Vframe_list, %rdx
	movq	%rdx, -104(%rbp)
	movq	%rax, -9912(%rbp)       # 8-byte Spill
.LBB86_18:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -9913(%rbp)        # 1-byte Spill
	jne	.LBB86_20
# BB#19:                                # %land.rhs
                                        #   in Loop: Header=BB86_18 Depth=1
	movb	$1, %al
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movb	%al, -9913(%rbp)        # 1-byte Spill
.LBB86_20:                              # %land.end
                                        #   in Loop: Header=BB86_18 Depth=1
	movb	-9913(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB86_21
	jmp	.LBB86_23
.LBB86_21:                              # %for.body
                                        #   in Loop: Header=BB86_18 Depth=1
	movq	-112(%rbp), %rax
	subq	$5, %rax
	movq	208(%rax), %rcx
	andq	$-9, %rcx
	movq	%rcx, 208(%rax)
# BB#22:                                # %for.inc
                                        #   in Loop: Header=BB86_18 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB86_18
.LBB86_23:                              # %for.end
	jmp	.LBB86_24
.LBB86_24:                              # %retry
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_42 Depth 2
                                        #     Child Loop BB86_77 Depth 2
                                        #     Child Loop BB86_93 Depth 2
                                        #     Child Loop BB86_184 Depth 2
                                        #     Child Loop BB86_190 Depth 2
                                        #       Child Loop BB86_201 Depth 3
                                        #     Child Loop BB86_251 Depth 2
                                        #     Child Loop BB86_312 Depth 2
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movb	$0, -25(%rbp)
	callq	forget_escape_and_glyphless_faces
	movb	$0, globals+3391
	testb	$1, face_change
	je	.LBB86_26
# BB#25:                                # %if.then.42
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$47, windows_or_buffers_changed
.LBB86_26:                              # %if.end.43
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB86_41
# BB#27:                                # %land.lhs.true.51
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB86_29
# BB#28:                                # %lor.lhs.false.59
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB86_30
.LBB86_29:                              # %cond.true.67
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -9928(%rbp)       # 8-byte Spill
	jmp	.LBB86_31
.LBB86_30:                              # %cond.false.69
	callq	emacs_abort
.LBB86_31:                              # %cond.end.70
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-9928(%rbp), %rax       # 8-byte Reload
	movq	88(%rax), %rcx
	cmpq	-88(%rbp), %rcx
	je	.LBB86_41
# BB#32:                                # %if.then.74
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, frame_garbaged
	movq	-88(%rbp), %rdi
	callq	fset_redisplay
	movq	-88(%rbp), %rdi
	movq	208(%rdi), %rax
	andq	$-8193, %rax            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rax             # imm = 0x2000
	movq	%rax, 208(%rdi)
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB86_34
# BB#33:                                # %lor.lhs.false.84
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB86_35
.LBB86_34:                              # %cond.true.92
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rdi
	movq	%rdi, -9936(%rbp)       # 8-byte Spill
	jmp	.LBB86_36
.LBB86_35:                              # %cond.false.96
	callq	emacs_abort
.LBB86_36:                              # %cond.end.97
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rsi
	movq	-9936(%rbp), %rdi       # 8-byte Reload
	callq	set_tty_color_mode
	movq	-88(%rbp), %rsi
	movq	-88(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$1, %eax
	movq	%rsi, -9944(%rbp)       # 8-byte Spill
	je	.LBB86_38
# BB#37:                                # %lor.lhs.false.106
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB86_39
.LBB86_38:                              # %cond.true.114
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -9952(%rbp)       # 8-byte Spill
	jmp	.LBB86_40
.LBB86_39:                              # %cond.false.118
	callq	emacs_abort
.LBB86_40:                              # %cond.end.119
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-9952(%rbp), %rax       # 8-byte Reload
	movq	-9944(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, 88(%rax)
.LBB86_41:                              # %if.end.122
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -68(%rbp)
	movq	Vframe_list, %rax
	movq	%rax, -104(%rbp)
.LBB86_42:                              # %for.cond.123
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -9953(%rbp)        # 1-byte Spill
	jne	.LBB86_44
# BB#43:                                # %land.rhs.128
                                        #   in Loop: Header=BB86_42 Depth=2
	movb	$1, %al
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movb	%al, -9953(%rbp)        # 1-byte Spill
.LBB86_44:                              # %land.end.131
                                        #   in Loop: Header=BB86_42 Depth=2
	movb	-9953(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB86_45
	jmp	.LBB86_54
.LBB86_45:                              # %for.body.132
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-112(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_52
# BB#46:                                # %if.then.139
                                        #   in Loop: Header=BB86_42 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$6, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB86_48
# BB#47:                                # %if.then.144
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-128(%rbp), %rdi
	callq	adjust_frame_glyphs
	movb	$1, frame_garbaged
	movq	-128(%rbp), %rdi
	callq	fset_redisplay
	movq	-128(%rbp), %rdi
	movq	208(%rdi), %rax
	andq	$-8193, %rax            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rax             # imm = 0x2000
	movq	%rax, 208(%rdi)
	movq	-128(%rbp), %rax
	movq	208(%rax), %rdi
	andq	$-65, %rdi
	movq	%rdi, 208(%rax)
.LBB86_48:                              # %if.end.152
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-128(%rbp), %rax
	cmpq	-88(%rbp), %rax
	je	.LBB86_51
# BB#49:                                # %land.lhs.true.155
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-128(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$7, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_51
# BB#50:                                # %if.then.161
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-128(%rbp), %rdi
	callq	fset_redisplay
.LBB86_51:                              # %if.end.162
                                        #   in Loop: Header=BB86_42 Depth=2
	jmp	.LBB86_52
.LBB86_52:                              # %if.end.163
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-128(%rbp), %rdi
	callq	clear_desired_matrices
# BB#53:                                # %for.inc.164
                                        #   in Loop: Header=BB86_42 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB86_42
.LBB86_54:                              # %for.end.168
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$1, %edi
	callq	do_pending_window_change
	movq	selected_window, %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB86_55
	jmp	.LBB86_57
.LBB86_55:                              # %land.lhs.true.171
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -8(%rbp)
	cmpq	-16(%rbp), %rax
	je	.LBB86_57
# BB#56:                                # %if.then.175
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB86_57:                              # %if.end.176
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	clear_garbaged_frames
	xorl	%edi, %edi
	movq	globals+1392, %rax
	movq	%rax, -9968(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9968(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB86_59
# BB#58:                                # %if.then.180
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	prepare_menu_bars
.LBB86_59:                              # %if.end.181
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rdi
	callq	reconsider_clip_changes
	movq	-8(%rbp), %rdi
	movq	80(%rdi), %rdi
	callq	XBUFFER
	cmpq	current_buffer, %rax
	sete	%cl
	andb	$1, %cl
	movb	%cl, -27(%rbp)
	testb	$1, -27(%rbp)
	je	.LBB86_67
# BB#60:                                # %if.then.186
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	64(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	48(%rcx), %rax
	setl	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movq	-8(%rbp), %rax
	movw	468(%rax), %di
	shrw	$3, %di
	andw	$1, %di
	movb	%dil, %dl
	andb	$1, %dl
	movzbl	%dl, %r8d
	cmpl	%r8d, %esi
	je	.LBB86_62
# BB#61:                                # %if.then.197
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rax)
.LBB86_62:                              # %if.end.201
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rdi
	callq	mode_line_update_needed
	testb	$1, %al
	jne	.LBB86_63
	jmp	.LBB86_64
.LBB86_63:                              # %if.then.203
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rax)
.LBB86_64:                              # %if.end.208
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB86_66
# BB#65:                                # %if.then.213
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rdi
	callq	bset_update_mode_line
.LBB86_66:                              # %if.end.214
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_67
.LBB86_67:                              # %if.end.215
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -9976(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9976(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB86_69
# BB#68:                                # %land.lhs.true.219
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, display_last_displayed_message_p
	je	.LBB86_74
.LBB86_69:                              # %lor.lhs.false.221
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	movq	echo_area_buffer+8, %rax
	movq	%rax, -9984(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9984(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB86_71
# BB#70:                                # %land.lhs.true.225
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, display_last_displayed_message_p
	jne	.LBB86_74
.LBB86_71:                              # %lor.lhs.false.228
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, message_cleared_p
	je	.LBB86_87
# BB#72:                                # %land.lhs.true.231
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpq	$0, minibuf_level
	jne	.LBB86_87
# BB#73:                                # %land.lhs.true.234
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB86_87
.LBB86_74:                              # %if.then.239
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	callq	echo_area_display
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_82
# BB#75:                                # %land.lhs.true.245
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_82
# BB#76:                                # %if.then.251
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	SPECPDL_INDEX
	movq	%rax, -144(%rbp)
	callq	record_unwind_save_match_data
	movq	-88(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-524289, %rcx          # imm = 0xFFFFFFFFFFF7FFFF
	movq	%rcx, 208(%rax)
	movq	globals+2664, %rax
	movq	%rax, -136(%rbp)
.LBB86_77:                              # %while.cond
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-136(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB86_81
# BB#78:                                # %while.body
                                        #   in Loop: Header=BB86_77 Depth=2
	movl	$901, %edi              # imm = 0x385
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -9992(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB86_80
# BB#79:                                # %if.then.265
                                        #   in Loop: Header=BB86_77 Depth=2
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	selected_frame, %rsi
	callq	call1
	movq	%rax, -10000(%rbp)      # 8-byte Spill
.LBB86_80:                              # %if.end.269
                                        #   in Loop: Header=BB86_77 Depth=2
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB86_77
.LBB86_81:                              # %while.end
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	movq	-144(%rbp), %rax
	movq	%rax, -10008(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10008(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -10016(%rbp)      # 8-byte Spill
.LBB86_82:                              # %if.end.275
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, message_cleared_p
	je	.LBB86_84
# BB#83:                                # %if.then.277
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, -114(%rbp)
.LBB86_84:                              # %if.end.278
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, -26(%rbp)
	testb	$1, display_last_displayed_message_p
	jne	.LBB86_86
# BB#85:                                # %if.then.280
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$0, message_cleared_p
.LBB86_86:                              # %if.end.281
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_100
.LBB86_87:                              # %if.else
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rax
	cmpq	minibuf_window, %rax
	jne	.LBB86_99
# BB#88:                                # %land.lhs.true.284
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB86_90
# BB#89:                                # %lor.lhs.false.291
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB86_90
	jmp	.LBB86_99
.LBB86_90:                              # %land.lhs.true.294
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	resize_mini_window
	testb	$1, %al
	jne	.LBB86_91
	jmp	.LBB86_99
.LBB86_91:                              # %if.then.297
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_98
# BB#92:                                # %if.then.303
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	SPECPDL_INDEX
	movq	%rax, -160(%rbp)
	callq	record_unwind_save_match_data
	movq	-88(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-524289, %rcx          # imm = 0xFFFFFFFFFFF7FFFF
	movq	%rcx, 208(%rax)
	movq	globals+2664, %rax
	movq	%rax, -152(%rbp)
.LBB86_93:                              # %while.cond.310
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-152(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB86_97
# BB#94:                                # %while.body.315
                                        #   in Loop: Header=BB86_93 Depth=2
	movl	$901, %edi              # imm = 0x385
	movq	-152(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -10024(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10024(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB86_96
# BB#95:                                # %if.then.321
                                        #   in Loop: Header=BB86_93 Depth=2
	movq	-152(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	selected_frame, %rsi
	callq	call1
	movq	%rax, -10032(%rbp)      # 8-byte Spill
.LBB86_96:                              # %if.end.325
                                        #   in Loop: Header=BB86_93 Depth=2
	movq	-152(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -152(%rbp)
	jmp	.LBB86_93
.LBB86_97:                              # %while.end.329
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	movq	-160(%rbp), %rax
	movq	%rax, -10040(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -10048(%rbp)      # 8-byte Spill
.LBB86_98:                              # %if.end.332
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, -26(%rbp)
	callq	clear_garbaged_frames
.LBB86_99:                              # %if.end.333
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_100
.LBB86_100:                             # %if.end.334
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, windows_or_buffers_changed
	je	.LBB86_103
# BB#101:                               # %land.lhs.true.336
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, update_mode_lines
	jne	.LBB86_103
# BB#102:                               # %if.then.338
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$32, %eax
	movl	$2, %ecx
	cmpl	$2, windows_or_buffers_changed
	cmovel	%ecx, %eax
	movl	%eax, update_mode_lines
.LBB86_103:                             # %if.end.342
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	overlay_arrows_changed_p
	testb	$1, %al
	jne	.LBB86_104
	jmp	.LBB86_105
.LBB86_104:                             # %if.then.344
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$49, windows_or_buffers_changed
.LBB86_105:                             # %if.end.345
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, %al
	cmpl	$0, update_mode_lines
	movb	%al, -10049(%rbp)       # 1-byte Spill
	jne	.LBB86_107
# BB#106:                               # %lor.rhs
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, windows_or_buffers_changed
	setne	%al
	movb	%al, -10049(%rbp)       # 1-byte Spill
.LBB86_107:                             # %lor.end
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	-10049(%rbp), %al       # 1-byte Reload
	movl	$2, %ecx
	movl	%ecx, %edx
	andb	$1, %al
	movb	%al, -113(%rbp)
	movslq	windows_or_buffers_changed, %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movq	globals+2000, %rdi
	movq	%rdi, -10064(%rbp)      # 8-byte Spill
	movq	%rsi, %rdi
	movq	-10064(%rbp), %rsi      # 8-byte Reload
	callq	Fgethash
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB86_109
# BB#108:                               # %if.then.357
                                        #   in Loop: Header=BB86_24 Depth=1
	movslq	windows_or_buffers_changed, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-168(%rbp), %rcx
	sarq	$2, %rcx
	addq	$1, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	globals+2000, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	Fputhash
	movq	%rax, -10072(%rbp)      # 8-byte Spill
.LBB86_109:                             # %if.end.365
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$2, %eax
	movl	%eax, %edx
	movslq	update_mode_lines, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	globals+2008, %rsi
	movq	%rcx, %rdi
	callq	Fgethash
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %r8d
	andl	$-5, %r8d
	cmpl	$2, %r8d
	jne	.LBB86_111
# BB#110:                               # %if.then.376
                                        #   in Loop: Header=BB86_24 Depth=1
	movslq	update_mode_lines, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-176(%rbp), %rcx
	sarq	$2, %rcx
	addq	$1, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	globals+2008, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	Fputhash
	movq	%rax, -10080(%rbp)      # 8-byte Spill
.LBB86_111:                             # %if.end.385
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	this_line_start_pos, %rax
	movq	%rax, -48(%rbp)
	movq	this_line_start_pos+8, %rax
	movq	%rax, -40(%rbp)
	movq	this_line_end_pos, %rax
	movq	%rax, -64(%rbp)
	movq	this_line_end_pos+8, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -113(%rbp)
	jne	.LBB86_182
# BB#112:                               # %land.lhs.true.387
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpq	$0, -48(%rbp)
	jle	.LBB86_182
# BB#113:                               # %land.lhs.true.390
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$2, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB86_182
# BB#114:                               # %land.lhs.true.396
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB86_182
# BB#115:                               # %land.lhs.true.402
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB86_182
# BB#116:                               # %land.lhs.true.406
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_182
# BB#117:                               # %land.lhs.true.415
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jg	.LBB86_182
# BB#118:                               # %land.lhs.true.425
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$7, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB86_182
# BB#119:                               # %land.lhs.true.433
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$40, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB86_182
# BB#120:                               # %land.lhs.true.440
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	this_line_buffer, %rax
	cmpq	current_buffer, %rax
	jne	.LBB86_182
# BB#121:                               # %land.lhs.true.443
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -27(%rbp)
	je	.LBB86_182
# BB#122:                               # %land.lhs.true.446
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$5, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB86_182
# BB#123:                               # %land.lhs.true.451
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$6, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB86_182
# BB#124:                               # %land.lhs.true.456
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-48(%rbp), %rax
	jl	.LBB86_182
# BB#125:                               # %land.lhs.true.461
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rcx
	subq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	jg	.LBB86_182
# BB#126:                               # %land.lhs.true.469
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	text_outside_line_unchanged_p
	testb	$1, %al
	jne	.LBB86_127
	jmp	.LBB86_182
.LBB86_127:                             # %if.then.474
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB86_138
# BB#128:                               # %land.lhs.true.478
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-40(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB86_130
# BB#129:                               # %cond.true.483
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -10088(%rbp)      # 8-byte Spill
	jmp	.LBB86_131
.LBB86_130:                             # %cond.false.485
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -10088(%rbp)      # 8-byte Spill
	jmp	.LBB86_131
.LBB86_131:                             # %cond.end.486
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-10088(%rbp), %rax      # 8-byte Reload
	movq	-40(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	je	.LBB86_138
# BB#132:                               # %land.lhs.true.496
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	je	.LBB86_137
# BB#133:                               # %lor.lhs.false.500
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-40(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB86_135
# BB#134:                               # %cond.true.506
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -10096(%rbp)      # 8-byte Spill
	jmp	.LBB86_136
.LBB86_135:                             # %cond.false.509
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -10096(%rbp)      # 8-byte Spill
	jmp	.LBB86_136
.LBB86_136:                             # %cond.end.510
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-10096(%rbp), %rax      # 8-byte Reload
	addq	-40(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	jne	.LBB86_138
.LBB86_137:                             # %if.then.521
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_181
.LBB86_138:                             # %if.else.522
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB86_140
# BB#139:                               # %lor.lhs.false.525
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB86_158
.LBB86_140:                             # %if.then.531
                                        #   in Loop: Header=BB86_24 Depth=1
	leaq	-4976(%rbp), %rdi
	movl	this_line_pixel_height, %eax
	movl	%eax, -4980(%rbp)
	movq	-8(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rcx
	callq	start_display
	movl	-2572(%rbp), %eax
	cmpl	this_line_start_x, %eax
	je	.LBB86_142
# BB#141:                               # %if.then.534
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_181
.LBB86_142:                             # %if.end.535
                                        #   in Loop: Header=BB86_24 Depth=1
	leaq	-4976(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	$-1, 364(%rax)
	movb	$0, overlay_arrow_seen
	movl	this_line_vpos, %ecx
	movl	%ecx, -2536(%rbp)
	movl	this_line_y, %ecx
	movl	%ecx, -2544(%rbp)
	movq	-8(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movslq	this_line_vpos, %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movq	%rax, -2624(%rbp)
	callq	display_line
	movq	-8(%rbp), %rdx
	cmpl	$0, 364(%rdx)
	movb	%al, -10097(%rbp)       # 1-byte Spill
	jl	.LBB86_157
# BB#143:                               # %land.lhs.true.543
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpq	$0, this_line_start_pos
	je	.LBB86_157
# BB#144:                               # %land.lhs.true.545
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	this_line_end_pos, %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB86_157
# BB#145:                               # %land.lhs.true.549
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	this_line_pixel_height, %eax
	cmpl	-4980(%rbp), %eax
	jne	.LBB86_157
# BB#146:                               # %if.then.552
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-2544(%rbp), %eax
	cmpl	-2652(%rbp), %eax
	jge	.LBB86_148
# BB#147:                               # %if.then.556
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	this_line_vpos, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movq	%rax, -4992(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	-64(%rbp), %rax
	movq	-4992(%rbp), %rdx
	subq	176(%rdx), %rax
	movq	%rax, -5000(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	subq	-56(%rbp), %rax
	movq	-4992(%rbp), %rdx
	subq	184(%rdx), %rax
	movq	%rax, -5008(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rdi
	movl	this_line_vpos, %ecx
	addl	$1, %ecx
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movl	24(%rax), %edx
	movq	-5000(%rbp), %rax
	movq	-5008(%rbp), %r8
	movl	%ecx, %esi
	movq	%rax, %rcx
	callq	increment_matrix_positions
.LBB86_148:                             # %if.end.576
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-2624(%rbp), %rax
	movq	-20(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_152
# BB#149:                               # %if.then.583
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movl	464(%rax), %ecx
	cmpl	this_line_vpos, %ecx
	jge	.LBB86_151
# BB#150:                               # %if.then.586
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	this_line_vpos, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 464(%rcx)
.LBB86_151:                             # %if.end.588
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_156
.LBB86_152:                             # %if.else.589
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movl	464(%rax), %ecx
	cmpl	this_line_vpos, %ecx
	jne	.LBB86_155
# BB#153:                               # %land.lhs.true.593
                                        #   in Loop: Header=BB86_24 Depth=1
	cmpl	$0, this_line_vpos
	jle	.LBB86_155
# BB#154:                               # %if.then.596
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	this_line_vpos, %eax
	subl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 464(%rcx)
.LBB86_155:                             # %if.end.599
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_156
.LBB86_156:                             # %if.end.600
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	movq	-8(%rbp), %rax
	movq	200(%rax), %rax
	movb	72(%rax), %dl
	andb	$-2, %dl
	orb	$1, %dl
	movb	%dl, 72(%rax)
	movq	-8(%rbp), %rdi
	callq	update_window_fringes
	movb	%al, -10098(%rbp)       # 1-byte Spill
	jmp	.LBB86_267
.LBB86_157:                             # %if.else.608
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_181
.LBB86_158:                             # %if.else.609
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jne	.LBB86_169
# BB#159:                               # %land.lhs.true.614
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	cmpl	364(%rcx), %eax
	jg	.LBB86_169
# BB#160:                               # %land.lhs.true.619
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movl	364(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	268(%rax), %ecx
	jge	.LBB86_169
# BB#161:                               # %if.then.624
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -26(%rbp)
	jne	.LBB86_168
# BB#162:                               # %if.then.626
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$1, %edi
	callq	do_pending_window_change
	movq	selected_window, %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB86_163
	jmp	.LBB86_165
.LBB86_163:                             # %land.lhs.true.629
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -8(%rbp)
	cmpq	-16(%rbp), %rax
	je	.LBB86_165
# BB#164:                               # %if.then.633
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_24
.LBB86_165:                             # %if.end.634
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$8, %cx
	andw	$1, %cx
	movb	%cl, %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$9, %cx
	andw	$1, %cx
	movb	%cl, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	cmpl	%edi, %esi
	jne	.LBB86_167
# BB#166:                               # %if.then.647
	jmp	.LBB86_332
.LBB86_167:                             # %if.end.648
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_168
.LBB86_168:                             # %if.end.649
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_267
.LBB86_169:                             # %if.else.650
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	movq	globals+2168, %rax
	movq	%rax, -10112(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10112(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB86_177
# BB#170:                               # %land.lhs.true.654
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, globals+3371
	jne	.LBB86_177
# BB#171:                               # %if.then.656
                                        #   in Loop: Header=BB86_24 Depth=1
	leaq	-9808(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movq	-8(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rcx
	callq	init_iterator
	leaq	-9808(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movl	this_line_start_x, %r10d
	movl	%r10d, -7404(%rbp)
	movl	this_line_y, %r10d
	movl	%r10d, -7376(%rbp)
	movl	this_line_vpos, %r10d
	movl	%r10d, -7368(%rbp)
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movl	-7368(%rbp), %ecx
	cmpl	this_line_vpos, %ecx
	movl	%eax, -10116(%rbp)      # 4-byte Spill
	jne	.LBB86_176
# BB#172:                               # %land.lhs.true.670
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	this_line_vpos, %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -9816(%rbp)
	movq	-9816(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_176
# BB#173:                               # %if.then.680
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-8(%rbp), %rdi
	movq	-9816(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rcx, -10128(%rbp)      # 8-byte Spill
	movq	-10128(%rbp), %r8       # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	xorl	%esi, %esi
	movl	$1, %edx
	movq	-8(%rbp), %rdi
	movb	%al, -10129(%rbp)       # 1-byte Spill
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB86_174
	jmp	.LBB86_175
.LBB86_174:                             # %if.then.684
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_267
.LBB86_175:                             # %if.else.685
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_181
.LBB86_176:                             # %if.else.686
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_181
.LBB86_177:                             # %if.end.687
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_178
.LBB86_178:                             # %if.end.688
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_179
.LBB86_179:                             # %if.end.689
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_180
.LBB86_180:                             # %if.end.690
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_181
.LBB86_181:                             # %cancel
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movslq	this_line_vpos, %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
.LBB86_182:                             # %if.end.698
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	$0, this_line_start_pos
	movl	clear_face_cache_count, %eax
	addl	$1, %eax
	movl	%eax, clear_face_cache_count
	movl	clear_image_cache_count, %eax
	addl	$1, %eax
	movl	%eax, clear_image_cache_count
	testb	$1, -113(%rbp)
	je	.LBB86_262
# BB#183:                               # %if.then.702
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	Vframe_list, %rax
	movq	%rax, -104(%rbp)
.LBB86_184:                             # %for.cond.703
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -10130(%rbp)       # 1-byte Spill
	jne	.LBB86_186
# BB#185:                               # %land.rhs.708
                                        #   in Loop: Header=BB86_184 Depth=2
	movb	$1, %al
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movb	%al, -10130(%rbp)       # 1-byte Spill
.LBB86_186:                             # %land.end.711
                                        #   in Loop: Header=BB86_184 Depth=2
	movb	-10130(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB86_187
	jmp	.LBB86_189
.LBB86_187:                             # %for.body.712
                                        #   in Loop: Header=BB86_184 Depth=2
	movq	-112(%rbp), %rax
	subq	$5, %rax
	movq	208(%rax), %rcx
	andq	$-17, %rcx
	movq	%rcx, 208(%rax)
# BB#188:                               # %for.inc.716
                                        #   in Loop: Header=BB86_184 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB86_184
.LBB86_189:                             # %for.end.720
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	propagate_buffer_redisplay
	movq	Vframe_list, %rax
	movq	%rax, -104(%rbp)
.LBB86_190:                             # %for.cond.721
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_201 Depth 3
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -10131(%rbp)       # 1-byte Spill
	jne	.LBB86_192
# BB#191:                               # %land.rhs.726
                                        #   in Loop: Header=BB86_190 Depth=2
	movb	$1, %al
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movb	%al, -10131(%rbp)       # 1-byte Spill
.LBB86_192:                             # %land.end.729
                                        #   in Loop: Header=BB86_190 Depth=2
	movb	-10131(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB86_193
	jmp	.LBB86_249
.LBB86_193:                             # %for.body.730
                                        #   in Loop: Header=BB86_190 Depth=2
	movq	-112(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -9824(%rbp)
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB86_200
# BB#194:                               # %land.lhs.true.740
                                        #   in Loop: Header=BB86_190 Depth=2
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB86_196
# BB#195:                               # %lor.lhs.false.748
                                        #   in Loop: Header=BB86_190 Depth=2
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB86_197
.LBB86_196:                             # %cond.true.756
                                        #   in Loop: Header=BB86_190 Depth=2
	movq	-9824(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -10144(%rbp)      # 8-byte Spill
	jmp	.LBB86_198
.LBB86_197:                             # %cond.false.760
	callq	emacs_abort
.LBB86_198:                             # %cond.end.761
                                        #   in Loop: Header=BB86_190 Depth=2
	movq	-10144(%rbp), %rax      # 8-byte Reload
	movq	80(%rax), %rcx
	cmpq	-112(%rbp), %rcx
	je	.LBB86_200
# BB#199:                               # %if.then.765
                                        #   in Loop: Header=BB86_190 Depth=2
	jmp	.LBB86_248
.LBB86_200:                             # %if.end.766
                                        #   in Loop: Header=BB86_190 Depth=2
	jmp	.LBB86_201
.LBB86_201:                             # %retry_frame
                                        #   Parent Loop BB86_24 Depth=1
                                        #     Parent Loop BB86_190 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB86_204
# BB#202:                               # %lor.lhs.false.774
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB86_204
# BB#203:                               # %lor.lhs.false.782
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jne	.LBB86_247
.LBB86_204:                             # %if.then.785
                                        #   in Loop: Header=BB86_201 Depth=3
	movb	$1, %al
	movq	-9824(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$8, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	movb	%al, -10145(%rbp)       # 1-byte Spill
	jne	.LBB86_211
# BB#205:                               # %lor.rhs.792
                                        #   in Loop: Header=BB86_201 Depth=3
	cmpl	$0, windows_or_buffers_changed
	je	.LBB86_207
# BB#206:                               # %lor.lhs.false.795
                                        #   in Loop: Header=BB86_201 Depth=3
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$2, windows_or_buffers_changed
	movb	%cl, -10146(%rbp)       # 1-byte Spill
	jne	.LBB86_210
.LBB86_207:                             # %land.rhs.798
                                        #   in Loop: Header=BB86_201 Depth=3
	movb	$1, %al
	cmpl	$0, update_mode_lines
	movb	%al, -10147(%rbp)       # 1-byte Spill
	je	.LBB86_209
# BB#208:                               # %lor.rhs.801
                                        #   in Loop: Header=BB86_201 Depth=3
	cmpl	$2, update_mode_lines
	sete	%al
	movb	%al, -10147(%rbp)       # 1-byte Spill
.LBB86_209:                             # %lor.end.804
                                        #   in Loop: Header=BB86_201 Depth=3
	movb	-10147(%rbp), %al       # 1-byte Reload
	movb	%al, -10146(%rbp)       # 1-byte Spill
.LBB86_210:                             # %land.end.805
                                        #   in Loop: Header=BB86_201 Depth=3
	movb	-10146(%rbp), %al       # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -10145(%rbp)       # 1-byte Spill
.LBB86_211:                             # %lor.end.806
                                        #   in Loop: Header=BB86_201 Depth=3
	movb	-10145(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movb	%al, -9825(%rbp)
	movq	-9824(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$8, %rcx
	andq	$1, %rcx
	movb	%cl, %al
	andb	$1, %al
	movb	%al, -9826(%rbp)
	testb	$1, -9825(%rbp)
	je	.LBB86_214
# BB#212:                               # %land.lhs.true.816
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 312(%rax)
	je	.LBB86_214
# BB#213:                               # %if.then.820
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	376(%rax), %rax
	movq	312(%rax), %rax
	movq	-9824(%rbp), %rdi
	callq	*%rax
.LBB86_214:                             # %if.end.824
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_217
# BB#215:                               # %land.lhs.true.831
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jg	.LBB86_217
# BB#216:                               # %if.then.839
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	40(%rax), %rdi
	callq	redisplay_windows
	jmp	.LBB86_223
.LBB86_217:                             # %if.else.840
                                        #   in Loop: Header=BB86_201 Depth=3
	cmpl	$0, windows_or_buffers_changed
	je	.LBB86_219
# BB#218:                               # %lor.lhs.false.843
                                        #   in Loop: Header=BB86_201 Depth=3
	cmpl	$2, windows_or_buffers_changed
	jne	.LBB86_221
.LBB86_219:                             # %land.lhs.true.846
                                        #   in Loop: Header=BB86_201 Depth=3
	cmpl	$0, update_mode_lines
	je	.LBB86_222
# BB#220:                               # %lor.lhs.false.849
                                        #   in Loop: Header=BB86_201 Depth=3
	cmpl	$2, update_mode_lines
	je	.LBB86_222
.LBB86_221:                             # %if.then.852
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-257, %rcx             # imm = 0xFFFFFFFFFFFFFEFF
	orq	$256, %rcx              # imm = 0x100
	movq	%rcx, 208(%rax)
.LBB86_222:                             # %if.end.857
                                        #   in Loop: Header=BB86_201 Depth=3
	jmp	.LBB86_223
.LBB86_223:                             # %if.end.858
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	cmpq	$0, 376(%rax)
	jne	.LBB86_225
# BB#224:                               # %if.then.862
                                        #   in Loop: Header=BB86_190 Depth=2
	jmp	.LBB86_248
.LBB86_225:                             # %if.end.863
                                        #   in Loop: Header=BB86_201 Depth=3
	testb	$1, -9825(%rbp)
	je	.LBB86_228
# BB#226:                               # %land.lhs.true.866
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 328(%rax)
	je	.LBB86_228
# BB#227:                               # %if.then.870
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	376(%rax), %rax
	movq	328(%rax), %rax
	movq	-9824(%rbp), %rdi
	callq	*%rax
.LBB86_228:                             # %if.end.874
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_246
# BB#229:                               # %land.lhs.true.881
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jg	.LBB86_246
# BB#230:                               # %if.then.889
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_232
# BB#231:                               # %if.then.895
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rdi
	callq	adjust_frame_glyphs
	movb	$1, frame_garbaged
	movq	-9824(%rbp), %rdi
	callq	fset_redisplay
	movq	-9824(%rbp), %rdi
	movq	208(%rdi), %rax
	andq	$-8193, %rax            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rax             # imm = 0x2000
	movq	%rax, 208(%rdi)
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rdi
	andq	$-65, %rdi
	movq	%rdi, 208(%rax)
	jmp	.LBB86_201
.LBB86_232:                             # %if.end.903
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$3, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB86_236
# BB#233:                               # %if.then.909
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-9, %rcx
	orq	$8, %rcx
	movq	%rcx, 208(%rax)
	movq	-9824(%rbp), %rax
	movq	40(%rax), %rdi
	callq	hscroll_windows
	testb	$1, %al
	jne	.LBB86_234
	jmp	.LBB86_235
.LBB86_234:                             # %if.then.916
                                        #   in Loop: Header=BB86_201 Depth=3
	jmp	.LBB86_201
.LBB86_235:                             # %if.end.917
                                        #   in Loop: Header=BB86_201 Depth=3
	jmp	.LBB86_236
.LBB86_236:                             # %if.end.918
                                        #   in Loop: Header=BB86_201 Depth=3
	testb	$1, -9826(%rbp)
	jne	.LBB86_239
# BB#237:                               # %land.lhs.true.920
                                        #   in Loop: Header=BB86_201 Depth=3
	movq	-9824(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_239
# BB#238:                               # %if.then.927
                                        #   in Loop: Header=BB86_201 Depth=3
	jmp	.LBB86_201
.LBB86_239:                             # %if.end.928
                                        #   in Loop: Header=BB86_190 Depth=2
	testb	$1, interrupt_input
	je	.LBB86_241
# BB#240:                               # %if.then.930
                                        #   in Loop: Header=BB86_190 Depth=2
	callq	unrequest_sigio
.LBB86_241:                             # %if.end.931
                                        #   in Loop: Header=BB86_190 Depth=2
	jmp	.LBB86_242
.LBB86_242:                             # %do.body
                                        #   in Loop: Header=BB86_190 Depth=2
	testb	$1, -89(%rbp)
	jne	.LBB86_244
# BB#243:                               # %if.then.933
                                        #   in Loop: Header=BB86_190 Depth=2
	callq	stop_polling
.LBB86_244:                             # %if.end.934
                                        #   in Loop: Header=BB86_190 Depth=2
	movb	$1, -89(%rbp)
# BB#245:                               # %do.end
                                        #   in Loop: Header=BB86_190 Depth=2
	xorl	%eax, %eax
	movq	-9824(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	update_frame
	andb	$1, %al
	movzbl	%al, %edx
	movb	-25(%rbp), %al
	andb	$1, %al
	movzbl	%al, %esi
	orl	%edx, %esi
	cmpl	$0, %esi
	setne	%al
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	-9824(%rbp), %rdi
	movq	208(%rdi), %rcx
	andq	$-129, %rcx
	movq	%rcx, 208(%rdi)
	movq	-9824(%rbp), %rcx
	movq	208(%rcx), %rdi
	andq	$-17, %rdi
	orq	$16, %rdi
	movq	%rdi, 208(%rcx)
.LBB86_246:                             # %if.end.948
                                        #   in Loop: Header=BB86_190 Depth=2
	jmp	.LBB86_247
.LBB86_247:                             # %if.end.949
                                        #   in Loop: Header=BB86_190 Depth=2
	jmp	.LBB86_248
.LBB86_248:                             # %for.inc.950
                                        #   in Loop: Header=BB86_190 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB86_190
.LBB86_249:                             # %for.end.954
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -25(%rbp)
	jne	.LBB86_261
# BB#250:                               # %if.then.956
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	Vframe_list, %rax
	movq	%rax, -104(%rbp)
.LBB86_251:                             # %for.cond.957
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -10148(%rbp)       # 1-byte Spill
	jne	.LBB86_253
# BB#252:                               # %land.rhs.962
                                        #   in Loop: Header=BB86_251 Depth=2
	movb	$1, %al
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movb	%al, -10148(%rbp)       # 1-byte Spill
.LBB86_253:                             # %land.end.965
                                        #   in Loop: Header=BB86_251 Depth=2
	movb	-10148(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB86_254
	jmp	.LBB86_260
.LBB86_254:                             # %for.body.966
                                        #   in Loop: Header=BB86_251 Depth=2
	movq	-112(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -9840(%rbp)
	movq	-9840(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$4, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_258
# BB#255:                               # %if.then.974
                                        #   in Loop: Header=BB86_251 Depth=2
	movl	$1, %esi
	movq	-9840(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-257, %rcx             # imm = 0xFFFFFFFFFFFFFEFF
	movq	%rcx, 208(%rax)
	movq	-9840(%rbp), %rax
	movq	40(%rax), %rdi
	callq	mark_window_display_accurate
	movq	-9840(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 344(%rax)
	je	.LBB86_257
# BB#256:                               # %if.then.982
                                        #   in Loop: Header=BB86_251 Depth=2
	movq	-9840(%rbp), %rax
	movq	376(%rax), %rax
	movq	344(%rax), %rax
	movq	-9840(%rbp), %rdi
	callq	*%rax
.LBB86_257:                             # %if.end.986
                                        #   in Loop: Header=BB86_251 Depth=2
	jmp	.LBB86_258
.LBB86_258:                             # %if.end.987
                                        #   in Loop: Header=BB86_251 Depth=2
	jmp	.LBB86_259
.LBB86_259:                             # %for.inc.988
                                        #   in Loop: Header=BB86_251 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB86_251
.LBB86_260:                             # %for.end.992
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_261
.LBB86_261:                             # %if.end.993
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_291
.LBB86_262:                             # %if.else.994
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_290
# BB#263:                               # %land.lhs.true.1001
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jg	.LBB86_290
# BB#264:                               # %if.then.1009
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -9848(%rbp)
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	80(%rax), %rdi
	callq	XBUFFER
	movabsq	$redisplay_window_1, %rdi
	movabsq	$redisplay_window_error, %rcx
	movq	%rax, displayed_buffer
	movq	selected_window, %rsi
	movq	list_of_error, %rdx
	callq	internal_condition_case_1
	testb	$1, -114(%rbp)
	movq	%rax, -10160(%rbp)      # 8-byte Spill
	je	.LBB86_266
# BB#265:                               # %if.then.1015
                                        #   in Loop: Header=BB86_24 Depth=1
	movabsq	$redisplay_window_1, %rdi
	movabsq	$redisplay_window_error, %rcx
	movq	-9848(%rbp), %rsi
	movq	list_of_error, %rdx
	callq	internal_condition_case_1
	movq	%rax, -10168(%rbp)      # 8-byte Spill
.LBB86_266:                             # %if.end.1017
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_267
.LBB86_267:                             # %update
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB86_269
# BB#268:                               # %lor.lhs.false.1024
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_272
.LBB86_269:                             # %if.then.1031
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB86_271
# BB#270:                               # %if.then.1037
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$50, windows_or_buffers_changed
.LBB86_271:                             # %if.end.1038
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_24
.LBB86_272:                             # %if.end.1039
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, globals+3391
	testb	$1, interrupt_input
	je	.LBB86_274
# BB#273:                               # %if.then.1041
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	unrequest_sigio
.LBB86_274:                             # %if.end.1042
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_275
.LBB86_275:                             # %do.body.1043
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -89(%rbp)
	jne	.LBB86_277
# BB#276:                               # %if.then.1045
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	stop_polling
.LBB86_277:                             # %if.end.1046
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$1, -89(%rbp)
# BB#278:                               # %do.end.1047
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_283
# BB#279:                               # %land.lhs.true.1054
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jg	.LBB86_283
# BB#280:                               # %if.then.1062
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	hscroll_windows
	testb	$1, %al
	jne	.LBB86_281
	jmp	.LBB86_282
.LBB86_281:                             # %if.then.1064
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_24
.LBB86_282:                             # %if.end.1065
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	xorl	%ecx, %ecx
	movw	468(%rax), %dx
	andw	$-1025, %dx             # imm = 0xFFFFFFFFFFFFFBFF
	orw	$1024, %dx              # imm = 0x400
	movw	%dx, 468(%rax)
	movq	-88(%rbp), %rdi
	movl	%ecx, %esi
	movl	%ecx, %edx
	callq	update_frame
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	-88(%rbp), %rdi
	movq	208(%rdi), %r8
	andq	$-129, %r8
	movq	%r8, 208(%rdi)
.LBB86_283:                             # %if.end.1075
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -9848(%rbp)
	movq	-9848(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -9856(%rbp)
	movq	-9856(%rbp), %rax
	cmpq	-88(%rbp), %rax
	je	.LBB86_289
# BB#284:                               # %land.lhs.true.1082
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-9856(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB86_289
# BB#285:                               # %if.then.1090
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-9848(%rbp), %rdi
	callq	XWINDOW
	xorl	%ecx, %ecx
	movw	468(%rax), %dx
	andw	$-1025, %dx             # imm = 0xFFFFFFFFFFFFFBFF
	orw	$1024, %dx              # imm = 0x400
	movw	%dx, 468(%rax)
	movq	-9856(%rbp), %rdi
	movl	%ecx, %esi
	movl	%ecx, %edx
	callq	update_frame
	andb	$1, %al
	movzbl	%al, %ecx
	movb	-25(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edx
	orl	%ecx, %edx
	cmpl	$0, %edx
	setne	%al
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	-9856(%rbp), %rdi
	movq	208(%rdi), %r8
	andq	$-129, %r8
	movq	%r8, 208(%rdi)
	testb	$1, -25(%rbp)
	jne	.LBB86_288
# BB#286:                               # %land.lhs.true.1107
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-9848(%rbp), %rdi
	callq	hscroll_windows
	testb	$1, %al
	jne	.LBB86_287
	jmp	.LBB86_288
.LBB86_287:                             # %if.then.1110
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_24
.LBB86_288:                             # %if.end.1111
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_289
.LBB86_289:                             # %if.end.1112
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_290
.LBB86_290:                             # %if.end.1113
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_291
.LBB86_291:                             # %if.end.1114
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -25(%rbp)
	je	.LBB86_296
# BB#292:                               # %if.then.1116
                                        #   in Loop: Header=BB86_24 Depth=1
	xorl	%edi, %edi
	movq	$0, this_line_start_pos
	callq	update_overlay_arrows
	movq	-8(%rbp), %rax
	movl	256(%rax), %edi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rax
	movl	%edi, -10172(%rbp)      # 4-byte Spill
	movq	%rax, %rdi
	callq	XWINDOW
	movl	-10172(%rbp), %ecx      # 4-byte Reload
	cmpl	256(%rax), %ecx
	je	.LBB86_295
# BB#293:                               # %land.lhs.true.1124
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB86_295
# BB#294:                               # %if.then.1134
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$36, update_mode_lines
.LBB86_295:                             # %if.end.1135
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_304
.LBB86_296:                             # %if.else.1136
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -113(%rbp)
	jne	.LBB86_303
# BB#297:                               # %if.then.1138
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB86_300
# BB#298:                               # %land.lhs.true.1148
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	buffer_window_count
	cmpl	$1, %eax
	jle	.LBB86_300
# BB#299:                               # %if.then.1154
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	propagate_buffer_redisplay
.LBB86_300:                             # %if.end.1155
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	mark_window_display_accurate_1
	movl	$1, %edi
	callq	update_overlay_arrows
	movq	-88(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 344(%rax)
	je	.LBB86_302
# BB#301:                               # %if.then.1161
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	-88(%rbp), %rax
	movq	376(%rax), %rax
	movq	344(%rax), %rax
	movq	-88(%rbp), %rdi
	callq	*%rax
.LBB86_302:                             # %if.end.1165
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_303
.LBB86_303:                             # %if.end.1166
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, update_mode_lines
	movl	$0, windows_or_buffers_changed
.LBB86_304:                             # %if.end.1167
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, interrupt_input
	je	.LBB86_306
# BB#305:                               # %if.then.1169
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	request_sigio
.LBB86_306:                             # %if.end.1170
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_307
.LBB86_307:                             # %do.body.1171
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -89(%rbp)
	je	.LBB86_309
# BB#308:                               # %if.then.1173
                                        #   in Loop: Header=BB86_24 Depth=1
	callq	start_polling
.LBB86_309:                             # %if.end.1174
                                        #   in Loop: Header=BB86_24 Depth=1
	movb	$0, -89(%rbp)
# BB#310:                               # %do.end.1175
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -25(%rbp)
	jne	.LBB86_322
# BB#311:                               # %if.then.1177
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -9860(%rbp)
	movq	Vframe_list, %rax
	movq	%rax, -104(%rbp)
.LBB86_312:                             # %for.cond.1178
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -10173(%rbp)       # 1-byte Spill
	jne	.LBB86_314
# BB#313:                               # %land.rhs.1183
                                        #   in Loop: Header=BB86_312 Depth=2
	movb	$1, %al
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movb	%al, -10173(%rbp)       # 1-byte Spill
.LBB86_314:                             # %land.end.1186
                                        #   in Loop: Header=BB86_312 Depth=2
	movb	-10173(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB86_315
	jmp	.LBB86_319
.LBB86_315:                             # %for.body.1187
                                        #   in Loop: Header=BB86_312 Depth=2
	movq	-112(%rbp), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB86_317
# BB#316:                               # %if.then.1195
                                        #   in Loop: Header=BB86_312 Depth=2
	movl	-9860(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -9860(%rbp)
.LBB86_317:                             # %if.end.1197
                                        #   in Loop: Header=BB86_312 Depth=2
	jmp	.LBB86_318
.LBB86_318:                             # %for.inc.1198
                                        #   in Loop: Header=BB86_312 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB86_312
.LBB86_319:                             # %for.end.1202
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-9860(%rbp), %eax
	cmpl	-68(%rbp), %eax
	je	.LBB86_321
# BB#320:                               # %if.then.1205
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$52, windows_or_buffers_changed
.LBB86_321:                             # %if.end.1206
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_322
.LBB86_322:                             # %if.end.1207
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$1, %edi
	callq	do_pending_window_change
	cmpl	$0, windows_or_buffers_changed
	je	.LBB86_324
# BB#323:                               # %land.lhs.true.1209
                                        #   in Loop: Header=BB86_24 Depth=1
	testb	$1, -25(%rbp)
	je	.LBB86_326
.LBB86_324:                             # %lor.lhs.false.1211
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB86_325
	jmp	.LBB86_327
.LBB86_325:                             # %land.lhs.true.1214
                                        #   in Loop: Header=BB86_24 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -8(%rbp)
	cmpq	-16(%rbp), %rax
	je	.LBB86_327
.LBB86_326:                             # %if.then.1218
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_24
.LBB86_327:                             # %if.end.1219
	cmpl	$500, clear_face_cache_count # imm = 0x1F4
	jle	.LBB86_329
# BB#328:                               # %if.then.1222
	xorl	%edi, %edi
	callq	clear_face_cache
	movl	$0, clear_face_cache_count
.LBB86_329:                             # %if.end.1223
	cmpl	$101, clear_image_cache_count
	jle	.LBB86_331
# BB#330:                               # %if.then.1226
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	clear_image_caches
	movl	$0, clear_image_cache_count
.LBB86_331:                             # %if.end.1228
	jmp	.LBB86_332
.LBB86_332:                             # %end_of_redisplay
	testb	$1, interrupt_input
	je	.LBB86_335
# BB#333:                               # %land.lhs.true.1231
	testb	$1, interrupts_deferred
	je	.LBB86_335
# BB#334:                               # %if.then.1234
	callq	request_sigio
.LBB86_335:                             # %if.end.1235
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	%rax, -10184(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10184(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -10192(%rbp)      # 8-byte Spill
# BB#336:                               # %do.body.1238
	testb	$1, -89(%rbp)
	je	.LBB86_338
# BB#337:                               # %if.then.1240
	callq	start_polling
.LBB86_338:                             # %if.end.1241
	movb	$0, -89(%rbp)
.LBB86_339:                             # %do.end.1242
	addq	$10208, %rsp            # imm = 0x27E0
	popq	%rbp
	retq
.Lfunc_end86:
	.size	redisplay_internal, .Lfunc_end86-redisplay_internal
	.cfi_endproc

	.globl	resize_mini_window
	.align	16, 0x90
	.type	resize_mini_window,@function
resize_mini_window:                     # @resize_mini_window
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp261:
	.cfi_def_cfa_offset 16
.Ltmp262:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp263:
	.cfi_def_cfa_register %rbp
	subq	$5040, %rsp             # imm = 0x13B0
	movb	%sil, %al
	movq	%rdi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -32(%rbp)
	movb	$0, -33(%rbp)
	movq	-16(%rbp), %rdi
	movq	88(%rdi), %rdi
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rsi
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rcx
	movq	%rdi, -4904(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -4912(%rbp)       # 8-byte Spill
	callq	XBUFFER
	cmpq	current_buffer, %rax
	jne	.LBB87_2
# BB#1:                                 # %cond.true
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	jmp	.LBB87_6
.LBB87_2:                               # %cond.false
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	368(%rax), %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4928(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_4
# BB#3:                                 # %cond.true.6
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	752(%rax), %rax
	movq	%rax, -4936(%rbp)       # 8-byte Spill
	jmp	.LBB87_5
.LBB87_4:                               # %cond.false.10
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -4936(%rbp)       # 8-byte Spill
.LBB87_5:                               # %cond.end
	movq	-4936(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4920(%rbp)       # 8-byte Spill
.LBB87_6:                               # %cond.end.15
	movq	-4920(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	callq	XBUFFER
	cmpq	current_buffer, %rax
	jne	.LBB87_8
# BB#7:                                 # %cond.true.20
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	jmp	.LBB87_12
.LBB87_8:                               # %cond.false.21
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	368(%rax), %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4960(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_10
# BB#9:                                 # %cond.true.27
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	760(%rax), %rax
	movq	%rax, -4968(%rbp)       # 8-byte Spill
	jmp	.LBB87_11
.LBB87_10:                              # %cond.false.31
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	368(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -4968(%rbp)       # 8-byte Spill
.LBB87_11:                              # %cond.end.36
	movq	-4968(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4952(%rbp)       # 8-byte Spill
.LBB87_12:                              # %cond.end.38
	movq	-4952(%rbp), %rax       # 8-byte Reload
	movq	-4904(%rbp), %rdi       # 8-byte Reload
	movq	-4912(%rbp), %rsi       # 8-byte Reload
	movq	-4944(%rbp), %rdx       # 8-byte Reload
	movq	%rax, %rcx
	callq	set_marker_both
	xorl	%edi, %edi
	movq	globals+1120, %rcx
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	movq	%rcx, -4984(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4984(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB87_14
# BB#13:                                # %if.then
	movb	$0, -1(%rbp)
	jmp	.LBB87_61
.LBB87_14:                              # %if.end
	xorl	%edi, %edi
	movq	globals+2040, %rax
	movq	%rax, -4992(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4992(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB87_17
# BB#15:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB87_18
# BB#16:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpq	$0, 384(%rax)
	jne	.LBB87_18
.LBB87_17:                              # %if.then.47
	movb	$0, -1(%rbp)
	jmp	.LBB87_61
.LBB87_18:                              # %if.end.48
	movq	-32(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rcx
	cmpq	56(%rcx), %rax
	je	.LBB87_60
# BB#19:                                # %if.then.50
	movq	-32(%rbp), %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	260(%rax), %ecx
	movl	%ecx, -4844(%rbp)
	movq	-32(%rbp), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -4848(%rbp)
	movq	$0, -4880(%rbp)
	movq	current_buffer, %rax
	movq	-16(%rbp), %rdi
	movq	80(%rdi), %rdi
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	callq	XBUFFER
	movq	-5000(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	je	.LBB87_21
# BB#20:                                # %if.then.58
	movq	current_buffer, %rax
	movq	%rax, -4880(%rbp)
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
.LBB87_21:                              # %if.end.61
	leaq	-4840(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movq	-16(%rbp), %rsi
	movq	current_buffer, %rcx
	movq	752(%rcx), %rdx
	movq	current_buffer, %rcx
	movq	760(%rcx), %rcx
	callq	init_iterator
	movq	globals+1384, %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	cmpl	$7, %eax
	jne	.LBB87_23
# BB#22:                                # %if.then.66
	movq	globals+1384, %rdi
	callq	XFLOATINT
	cvtsi2sdl	-4844(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -4856(%rbp)
	jmp	.LBB87_27
.LBB87_23:                              # %if.else
	movq	globals+1384, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB87_25
# BB#24:                                # %if.then.75
	movq	globals+1384, %rax
	sarq	$2, %rax
	movslq	-4848(%rbp), %rcx
	imulq	%rcx, %rax
	movl	%eax, %edx
	movl	%edx, -4856(%rbp)
	jmp	.LBB87_26
.LBB87_25:                              # %if.else.79
	movl	$4, %eax
	movl	-4844(%rbp), %ecx
	movl	%eax, -5004(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-5004(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movl	%eax, -4856(%rbp)
.LBB87_26:                              # %if.end.80
	jmp	.LBB87_27
.LBB87_27:                              # %if.end.81
	movslq	-4848(%rbp), %rdi
	movslq	-4856(%rbp), %rsi
	movslq	-4844(%rbp), %rdx
	callq	clip_to_bounds
	movl	%eax, %ecx
	movl	%ecx, -4856(%rbp)
	cmpl	$0, -2724(%rbp)
	jne	.LBB87_29
# BB#28:                                # %if.then.89
	movl	-4848(%rbp), %eax
	movl	%eax, -4852(%rbp)
	jmp	.LBB87_37
.LBB87_29:                              # %if.else.90
	leaq	-4840(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movl	$0, last_height
	movq	current_buffer, %rcx
	movq	768(%rcx), %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	cmpl	$0, -2460(%rbp)
	movl	%eax, -5008(%rbp)       # 4-byte Spill
	jne	.LBB87_32
# BB#30:                                # %land.lhs.true.94
	cmpl	$0, -2456(%rbp)
	jne	.LBB87_32
# BB#31:                                # %if.then.97
	movl	-2408(%rbp), %eax
	addl	last_height, %eax
	movl	%eax, -4852(%rbp)
	jmp	.LBB87_33
.LBB87_32:                              # %if.else.99
	movl	-2408(%rbp), %eax
	addl	-2460(%rbp), %eax
	addl	-2456(%rbp), %eax
	movl	%eax, -4852(%rbp)
.LBB87_33:                              # %if.end.105
	movl	-2512(%rbp), %eax
	cmpl	-2508(%rbp), %eax
	jge	.LBB87_35
# BB#34:                                # %cond.true.108
	movl	-2512(%rbp), %eax
	movl	%eax, -5012(%rbp)       # 4-byte Spill
	jmp	.LBB87_36
.LBB87_35:                              # %cond.false.110
	movl	-2508(%rbp), %eax
	movl	%eax, -5012(%rbp)       # 4-byte Spill
.LBB87_36:                              # %cond.end.112
	movl	-5012(%rbp), %eax       # 4-byte Reload
	movl	-4852(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4852(%rbp)
.LBB87_37:                              # %if.end.115
	movl	-4852(%rbp), %eax
	cmpl	-4856(%rbp), %eax
	jle	.LBB87_39
# BB#38:                                # %if.then.118
	leaq	-4840(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movl	-4856(%rbp), %eax
	cltd
	idivl	-4848(%rbp)
	imull	-4848(%rbp), %eax
	movl	%eax, -4852(%rbp)
	movq	-16(%rbp), %rsi
	movq	current_buffer, %rcx
	movq	768(%rcx), %rcx
	movq	current_buffer, %r10
	movq	776(%r10), %r10
	movq	%rcx, %rdx
	movq	%r10, %rcx
	callq	init_iterator
	leaq	-4840(%rbp), %rdi
	movl	-4852(%rbp), %eax
	subl	-4848(%rbp), %eax
	movl	%eax, %esi
	callq	move_it_vertically_backward
	movq	-4528(%rbp), %rcx
	movq	%rcx, -4872(%rbp)
	movq	-4520(%rbp), %rcx
	movq	%rcx, -4864(%rbp)
	jmp	.LBB87_40
.LBB87_39:                              # %if.else.123
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -4872(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -4864(%rbp)
.LBB87_40:                              # %if.end.126
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4872(%rbp), %rdx
	movq	-4864(%rbp), %rcx
	movq	-5024(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	movl	$502, %edi              # imm = 0x1F6
	movq	globals+2040, %rcx
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	movq	%rcx, -5040(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5040(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_49
# BB#41:                                # %if.then.135
	movl	-4852(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	260(%rcx), %eax
	jle	.LBB87_43
# BB#42:                                # %if.then.139
	movl	$1, %edx
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movl	%ecx, -4884(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rsi
	andq	$-4194305, %rsi         # imm = 0xFFFFFFFFFFBFFFFF
	orq	$4194304, %rsi          # imm = 0x400000
	movq	%rsi, 208(%rax)
	movq	-16(%rbp), %rdi
	movl	-4852(%rbp), %ecx
	movq	-16(%rbp), %rax
	subl	260(%rax), %ecx
	movl	%ecx, %esi
	callq	grow_mini_window
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	cmpl	-4884(%rbp), %ecx
	setne	%r8b
	andb	$1, %r8b
	movb	%r8b, -33(%rbp)
	jmp	.LBB87_48
.LBB87_43:                              # %if.else.149
	movl	-4852(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	260(%rcx), %eax
	jge	.LBB87_47
# BB#44:                                # %land.lhs.true.153
	testb	$1, -17(%rbp)
	jne	.LBB87_46
# BB#45:                                # %lor.lhs.false.155
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jne	.LBB87_47
.LBB87_46:                              # %if.then.160
	movl	$1, %esi
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movl	%ecx, -4888(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rdx
	andq	$-4194305, %rdx         # imm = 0xFFFFFFFFFFBFFFFF
	movq	%rdx, 208(%rax)
	movq	-16(%rbp), %rdi
	callq	shrink_mini_window
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	cmpl	-4888(%rbp), %ecx
	setne	%r8b
	andb	$1, %r8b
	movb	%r8b, -33(%rbp)
.LBB87_47:                              # %if.end.170
	jmp	.LBB87_48
.LBB87_48:                              # %if.end.171
	jmp	.LBB87_57
.LBB87_49:                              # %if.else.172
	movl	-4852(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	260(%rcx), %eax
	jle	.LBB87_51
# BB#50:                                # %if.then.176
	movl	$1, %edx
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movl	%ecx, -4892(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rsi
	andq	$-4194305, %rsi         # imm = 0xFFFFFFFFFFBFFFFF
	orq	$4194304, %rsi          # imm = 0x400000
	movq	%rsi, 208(%rax)
	movq	-16(%rbp), %rdi
	movl	-4852(%rbp), %ecx
	movq	-16(%rbp), %rax
	subl	260(%rax), %ecx
	movl	%ecx, %esi
	callq	grow_mini_window
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	cmpl	-4892(%rbp), %ecx
	setne	%r8b
	andb	$1, %r8b
	movb	%r8b, -33(%rbp)
	jmp	.LBB87_56
.LBB87_51:                              # %if.else.189
	movl	-4852(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	260(%rcx), %eax
	jge	.LBB87_55
# BB#52:                                # %if.then.193
	movl	$1, %esi
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movl	%ecx, -4896(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rdx
	andq	$-4194305, %rdx         # imm = 0xFFFFFFFFFFBFFFFF
	movq	%rdx, 208(%rax)
	movq	-16(%rbp), %rdi
	callq	shrink_mini_window
	cmpl	$0, -4852(%rbp)
	je	.LBB87_54
# BB#53:                                # %if.then.200
	movl	$1, %edx
	movq	-32(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-4194305, %rcx         # imm = 0xFFFFFFFFFFBFFFFF
	orq	$4194304, %rcx          # imm = 0x400000
	movq	%rcx, 208(%rax)
	movq	-16(%rbp), %rdi
	movl	-4852(%rbp), %esi
	movq	-16(%rbp), %rax
	subl	260(%rax), %esi
	callq	grow_mini_window
.LBB87_54:                              # %if.end.207
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	cmpl	-4896(%rbp), %ecx
	setne	%dl
	andb	$1, %dl
	movb	%dl, -33(%rbp)
.LBB87_55:                              # %if.end.212
	jmp	.LBB87_56
.LBB87_56:                              # %if.end.213
	jmp	.LBB87_57
.LBB87_57:                              # %if.end.214
	cmpq	$0, -4880(%rbp)
	je	.LBB87_59
# BB#58:                                # %if.then.216
	movq	-4880(%rbp), %rdi
	callq	set_buffer_internal
.LBB87_59:                              # %if.end.217
	jmp	.LBB87_60
.LBB87_60:                              # %if.end.218
	movb	-33(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB87_61:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$5040, %rsp             # imm = 0x13B0
	popq	%rbp
	retq
.Lfunc_end87:
	.size	resize_mini_window, .Lfunc_end87-resize_mini_window
	.cfi_endproc

	.globl	current_message
	.align	16, 0x90
	.type	current_message,@function
current_message:                        # @current_message
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp264:
	.cfi_def_cfa_offset 16
.Ltmp265:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp266:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	echo_area_buffer, %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB88_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB88_5
.LBB88_2:                               # %if.else
	xorl	%edi, %edi
	leaq	-8(%rbp), %rcx
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	xorl	%esi, %esi
	movabsq	$current_message_1, %rdx
	movq	-16(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	with_echo_area_buffer
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movb	%al, -17(%rbp)          # 1-byte Spill
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB88_4
# BB#3:                                 # %if.then.5
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, echo_area_buffer
.LBB88_4:                               # %if.end
	jmp	.LBB88_5
.LBB88_5:                               # %if.end.7
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end88:
	.size	current_message, .Lfunc_end88-current_message
	.cfi_endproc

	.align	16, 0x90
	.type	current_message_1,@function
current_message_1:                      # @current_message_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp267:
	.cfi_def_cfa_offset 16
.Ltmp268:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp269:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	$1, 16(%rsi)
	jle	.LBB89_2
# BB#1:                                 # %if.then
	movl	$1, %eax
	movl	%eax, %edi
	movl	$1, %edx
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rsi
	callq	make_buffer_string
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB89_3
.LBB89_2:                               # %if.else
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB89_3:                               # %if.end
	xorl	%eax, %eax
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end89:
	.size	current_message_1, .Lfunc_end89-current_message_1
	.cfi_endproc

	.globl	push_message
	.align	16, 0x90
	.type	push_message,@function
push_message:                           # @push_message
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp270:
	.cfi_def_cfa_offset 16
.Ltmp271:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp272:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	callq	current_message
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	Vmessage_stack, %rsi
	callq	Fcons
	movq	%rax, Vmessage_stack
	movq	-8(%rbp), %rdi
	callq	STRINGP
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end90:
	.size	push_message, .Lfunc_end90-push_message
	.cfi_endproc

	.globl	restore_message
	.align	16, 0x90
	.type	restore_message,@function
restore_message:                        # @restore_message
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp273:
	.cfi_def_cfa_offset 16
.Ltmp274:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp275:
	.cfi_def_cfa_register %rbp
	movq	Vmessage_stack, %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	message3_nolog
	popq	%rbp
	retq
.Lfunc_end91:
	.size	restore_message, .Lfunc_end91-restore_message
	.cfi_endproc

	.globl	pop_message_unwind
	.align	16, 0x90
	.type	pop_message_unwind,@function
pop_message_unwind:                     # @pop_message_unwind
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp276:
	.cfi_def_cfa_offset 16
.Ltmp277:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp278:
	.cfi_def_cfa_register %rbp
	movq	Vmessage_stack, %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, Vmessage_stack
	popq	%rbp
	retq
.Lfunc_end92:
	.size	pop_message_unwind, .Lfunc_end92-pop_message_unwind
	.cfi_endproc

	.globl	check_message_stack
	.align	16, 0x90
	.type	check_message_stack,@function
check_message_stack:                    # @check_message_stack
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp279:
	.cfi_def_cfa_offset 16
.Ltmp280:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp281:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%edi, %edi
	movq	Vmessage_stack, %rax
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx          # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB93_2
# BB#1:                                 # %if.then
	callq	emacs_abort
.LBB93_2:                               # %if.end
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end93:
	.size	check_message_stack, .Lfunc_end93-check_message_stack
	.cfi_endproc

	.globl	truncate_echo_area
	.align	16, 0x90
	.type	truncate_echo_area,@function
truncate_echo_area:                     # @truncate_echo_area
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp282:
	.cfi_def_cfa_offset 16
.Ltmp283:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp284:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.LBB94_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, echo_area_buffer
	jmp	.LBB94_14
.LBB94_2:                               # %if.else
	testb	$1, noninteractive
	jne	.LBB94_13
# BB#3:                                 # %land.lhs.true
	xorl	%edi, %edi
	movq	globals+688, %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB94_13
# BB#4:                                 # %land.lhs.true.3
	testb	$1, noninteractive
	jne	.LBB94_13
# BB#5:                                 # %land.lhs.true.5
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB94_13
# BB#6:                                 # %if.then.8
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB94_7
	jmp	.LBB94_9
.LBB94_7:                               # %land.lhs.true.10
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB94_9
# BB#8:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB94_10
.LBB94_9:                               # %cond.false
	callq	emacs_abort
.LBB94_10:                              # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	208(%rcx), %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB94_12
# BB#11:                                # %if.then.13
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	xorl	%esi, %esi
	movabsq	$truncate_message_1, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	with_echo_area_buffer
	movb	%al, -49(%rbp)          # 1-byte Spill
.LBB94_12:                              # %if.end
	jmp	.LBB94_13
.LBB94_13:                              # %if.end.16
	jmp	.LBB94_14
.LBB94_14:                              # %if.end.17
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end94:
	.size	truncate_echo_area, .Lfunc_end94-truncate_echo_area
	.cfi_endproc

	.align	16, 0x90
	.type	truncate_message_1,@function
truncate_message_1:                     # @truncate_message_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp285:
	.cfi_def_cfa_offset 16
.Ltmp286:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp287:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	addq	$1, %rsi
	movq	current_buffer, %rdi
	movq	720(%rdi), %rdi
	cmpq	16(%rdi), %rsi
	jge	.LBB95_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rsi
	movq	%rax, %rdi
	callq	del_range
.LBB95_2:                               # %if.end
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	cmpq	$1, 16(%rax)
	jne	.LBB95_4
# BB#3:                                 # %if.then.7
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, echo_area_buffer
.LBB95_4:                               # %if.end.8
	xorl	%eax, %eax
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end95:
	.size	truncate_message_1, .Lfunc_end95-truncate_message_1
	.cfi_endproc

	.globl	Ftool_bar_height
	.align	16, 0x90
	.type	Ftool_bar_height,@function
Ftool_bar_height:                       # @Ftool_bar_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp288:
	.cfi_def_cfa_offset 16
.Ltmp289:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp290:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, -20(%rbp)
	movslq	-20(%rbp), %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movq	%rsi, %rax
	popq	%rbp
	retq
.Lfunc_end96:
	.size	Ftool_bar_height, .Lfunc_end96-Ftool_bar_height
	.cfi_endproc

	.globl	redisplay
	.align	16, 0x90
	.type	redisplay,@function
redisplay:                              # @redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp291:
	.cfi_def_cfa_offset 16
.Ltmp292:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp293:
	.cfi_def_cfa_register %rbp
	callq	redisplay_internal
	popq	%rbp
	retq
.Lfunc_end97:
	.size	redisplay, .Lfunc_end97-redisplay
	.cfi_endproc

	.globl	redisplay_preserve_echo_area
	.align	16, 0x90
	.type	redisplay_preserve_echo_area,@function
redisplay_preserve_echo_area:           # @redisplay_preserve_echo_area
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp294:
	.cfi_def_cfa_offset 16
.Ltmp295:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp296:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%edi, -4(%rbp)
	movq	echo_area_buffer+8, %rcx
	movl	%eax, %edi
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB98_2
# BB#1:                                 # %if.then
	movb	$1, display_last_displayed_message_p
	callq	redisplay_internal
	movb	$0, display_last_displayed_message_p
	jmp	.LBB98_3
.LBB98_2:                               # %if.else
	callq	redisplay_internal
.LBB98_3:                               # %if.end
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB98_4
	jmp	.LBB98_6
.LBB98_4:                               # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB98_6
# BB#5:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jmp	.LBB98_7
.LBB98_6:                               # %cond.false
	callq	emacs_abort
.LBB98_7:                               # %cond.end
	movq	-24(%rbp), %rdi         # 8-byte Reload
	callq	flush_frame
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end98:
	.size	redisplay_preserve_echo_area, .Lfunc_end98-redisplay_preserve_echo_area
	.cfi_endproc

	.globl	mark_window_display_accurate
	.align	16, 0x90
	.type	mark_window_display_accurate,@function
mark_window_display_accurate:           # @mark_window_display_accurate
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp297:
	.cfi_def_cfa_offset 16
.Ltmp298:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp299:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB99_2
	jmp	.LBB99_7
.LBB99_2:                               # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB99_3
	jmp	.LBB99_4
.LBB99_3:                               # %if.then
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movb	-9(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	callq	mark_window_display_accurate
	jmp	.LBB99_5
.LBB99_4:                               # %if.else
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-24(%rbp), %rdi
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	mark_window_display_accurate_1
.LBB99_5:                               # %if.end
                                        #   in Loop: Header=BB99_1 Depth=1
	jmp	.LBB99_6
.LBB99_6:                               # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB99_1
.LBB99_7:                               # %for.end
	testb	$1, -9(%rbp)
	je	.LBB99_9
# BB#8:                                 # %if.then.6
	movl	$1, %edi
	callq	update_overlay_arrows
	jmp	.LBB99_10
.LBB99_9:                               # %if.else.7
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	update_overlay_arrows
.LBB99_10:                              # %if.end.8
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end99:
	.size	mark_window_display_accurate, .Lfunc_end99-mark_window_display_accurate
	.cfi_endproc

	.align	16, 0x90
	.type	mark_window_display_accurate_1,@function
mark_window_display_accurate_1:         # @mark_window_display_accurate_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp300:
	.cfi_def_cfa_offset 16
.Ltmp301:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp302:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	80(%rdi), %rdi
	callq	XBUFFER
	movq	%rax, -24(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB100_2
# BB#1:                                 # %cond.true
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB100_3
.LBB100_2:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jmp	.LBB100_3
.LBB100_3:                              # %cond.end
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 296(%rcx)
	testb	$1, -9(%rbp)
	je	.LBB100_5
# BB#4:                                 # %cond.true.2
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	72(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB100_6
.LBB100_5:                              # %cond.false.4
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	jmp	.LBB100_6
.LBB100_6:                              # %cond.end.5
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 304(%rcx)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rcx
	movq	64(%rax), %rax
	subq	%rax, %rcx
	setg	%dl
	movq	-8(%rbp), %rax
	movzbl	%dl, %esi
	movw	%si, %di
	movw	468(%rax), %r8w
	shlw	$3, %di
	andw	$-9, %r8w
	orw	%di, %r8w
	movw	%r8w, 468(%rax)
	testb	$1, -9(%rbp)
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	je	.LBB100_29
# BB#7:                                 # %if.then
	movq	-24(%rbp), %rax
	movb	936(%rax), %cl
	andb	$-3, %cl
	movb	%cl, 936(%rax)
	movq	-24(%rbp), %rax
	movb	936(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 936(%rax)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	andb	$-3, %cl
	movb	%cl, 136(%rax)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	720(%rdx), %rdx
	movq	%rax, 104(%rdx)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	72(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	720(%rdx), %rdx
	movq	%rax, 112(%rdx)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	subq	$1, %rax
	movq	-24(%rbp), %rdx
	movq	720(%rdx), %rdx
	movq	%rax, 88(%rdx)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	720(%rdx), %rdx
	subq	8(%rdx), %rax
	movq	-24(%rbp), %rdx
	movq	720(%rdx), %rdx
	movq	%rax, 96(%rdx)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rax, 80(%rdx)
	movq	-24(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB100_9
# BB#8:                                 # %cond.true.33
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB100_13
.LBB100_9:                              # %cond.false.34
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB100_11
# BB#10:                                # %cond.true.37
	movq	-24(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB100_12
.LBB100_11:                             # %cond.false.39
	movq	-24(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB100_12:                             # %cond.end.42
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB100_13:                             # %cond.end.44
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	%rax, 88(%rcx)
	movq	-24(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB100_15
# BB#14:                                # %cond.true.49
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB100_19
.LBB100_15:                             # %cond.false.50
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB100_17
# BB#16:                                # %cond.true.53
	movq	-24(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB100_18
.LBB100_17:                             # %cond.false.55
	movq	-24(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB100_18:                             # %cond.end.58
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB100_19:                             # %cond.end.60
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movl	364(%rax), %edx
	movl	%edx, 400(%rax)
	movq	-8(%rbp), %rax
	movzbl	469(%rax), %edx
	andl	$1, %edx
	movw	%dx, %si
	movb	%dl, %dil
	movw	468(%rax), %r8w
	shlw	$9, %si
	andw	$-513, %r8w             # imm = 0xFFFFFFFFFFFFFDFF
	orw	%si, %r8w
	movw	%r8w, 468(%rax)
	movq	-8(%rbp), %rax
	movq	selected_window, %rcx
	movb	%dil, -97(%rbp)         # 1-byte Spill
	movq	%rcx, %rdi
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB100_27
# BB#20:                                # %if.then.74
	movq	-24(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB100_22
# BB#21:                                # %cond.true.76
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB100_26
.LBB100_22:                             # %cond.false.77
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB100_24
# BB#23:                                # %cond.true.80
	movq	-24(%rbp), %rax
	movq	736(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB100_25
.LBB100_24:                             # %cond.false.82
	movq	-24(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB100_25:                             # %cond.end.85
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB100_26:                             # %cond.end.87
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	jmp	.LBB100_28
.LBB100_27:                             # %if.else
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	marker_position
	movq	-8(%rbp), %rdi
	movq	%rax, 312(%rdi)
.LBB100_28:                             # %if.end
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	orw	$8192, %cx              # imm = 0x2000
	movw	%cx, 468(%rax)
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	movw	%cx, 468(%rax)
.LBB100_29:                             # %if.end.96
	movb	-9(%rbp), %al
	xorb	$1, %al
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movw	%dx, %si
	movw	468(%rcx), %di
	shlw	$14, %si
	andw	$-16385, %di            # imm = 0xFFFFFFFFFFFFBFFF
	orw	%si, %di
	movw	%di, 468(%rcx)
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end100:
	.size	mark_window_display_accurate_1, .Lfunc_end100-mark_window_display_accurate_1
	.cfi_endproc

	.align	16, 0x90
	.type	update_overlay_arrows,@function
update_overlay_arrows:                  # @update_overlay_arrows
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp303:
	.cfi_def_cfa_offset 16
.Ltmp304:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp305:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	%edi, -4(%rbp)
	movq	globals+1720, %rax
	movq	%rax, -16(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB101_16
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB101_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_15
.LBB101_4:                              # %if.end
                                        #   in Loop: Header=BB101_1 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB101_10
# BB#5:                                 # %if.then.8
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	find_symbol_value
	movl	$602, %edi              # imm = 0x25A
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx
	andq	$7, %rcx
	movl	%ecx, %edi
	cmpl	$1, %edi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jne	.LBB101_8
# BB#6:                                 # %land.lhs.true
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB101_8
# BB#7:                                 # %cond.true
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	Fmarker_position
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB101_9
.LBB101_8:                              # %cond.false
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB101_9:                              # %cond.end
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movl	$603, %edi              # imm = 0x25B
	movq	-24(%rbp), %rdx
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rdi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	overlay_arrow_string_or_property
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB101_14
.LBB101_10:                             # %if.else
                                        #   in Loop: Header=BB101_1 Depth=1
	cmpl	$0, -4(%rbp)
	jl	.LBB101_12
# BB#11:                                # %lor.lhs.false
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$602, %edi              # imm = 0x25A
	movq	-24(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	xorl	%edi, %edi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB101_13
.LBB101_12:                             # %if.then.29
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	$602, %edi              # imm = 0x25A
	movq	-24(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movl	$603, %edi              # imm = 0x25B
	movq	-24(%rbp), %rdx
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%rdx, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB101_13:                             # %if.end.36
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_14
.LBB101_14:                             # %if.end.37
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_15
.LBB101_15:                             # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB101_1
.LBB101_16:                             # %for.end
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end101:
	.size	update_overlay_arrows, .Lfunc_end101-update_overlay_arrows
	.cfi_endproc

	.globl	disp_char_vector
	.align	16, 0x90
	.type	disp_char_vector,@function
disp_char_vector:                       # @disp_char_vector
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp306:
	.cfi_def_cfa_offset 16
.Ltmp307:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp308:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	testb	$1, %al
	jne	.LBB102_1
	jmp	.LBB102_2
.LBB102_1:                              # %cond.true
	movl	-12(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB102_3
	jmp	.LBB102_6
.LBB102_2:                              # %cond.false
	movslq	-12(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB102_6
.LBB102_3:                              # %if.then
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	SUB_CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB102_4
	jmp	.LBB102_5
.LBB102_4:                              # %if.then.4
	movslq	-12(%rbp), %rax
	movq	-24(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	XSUB_CHAR_TABLE
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	16(%rax,%rdi,8), %rax
	movq	%rax, -24(%rbp)
.LBB102_5:                              # %if.end
	jmp	.LBB102_7
.LBB102_6:                              # %if.else
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	char_table_ref
	movq	%rax, -24(%rbp)
.LBB102_7:                              # %if.end.8
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB102_9
# BB#8:                                 # %if.then.12
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB102_9:                              # %if.end.13
	movq	-24(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end102:
	.size	disp_char_vector, .Lfunc_end102-disp_char_vector
	.cfi_endproc

	.globl	set_vertical_scroll_bar
	.align	16, 0x90
	.type	set_vertical_scroll_bar,@function
set_vertical_scroll_bar:                # @set_vertical_scroll_bar
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp309:
	.cfi_def_cfa_offset 16
.Ltmp310:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp311:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movw	468(%rdi), %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB103_3
# BB#1:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	minibuf_window, %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movq	-48(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB103_32
# BB#2:                                 # %land.lhs.true
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB103_32
.LBB103_3:                              # %if.then
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB103_5
# BB#4:                                 # %cond.true
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB103_9
.LBB103_5:                              # %cond.false
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB103_7
# BB#6:                                 # %cond.true.7
	movq	-40(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB103_8
.LBB103_7:                              # %cond.false.9
	movq	-40(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB103_8:                              # %cond.end
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB103_9:                              # %cond.end.12
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jne	.LBB103_11
# BB#10:                                # %cond.true.15
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB103_15
.LBB103_11:                             # %cond.false.16
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB103_13
# BB#12:                                # %cond.true.19
	movq	-40(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB103_14
.LBB103_13:                             # %cond.false.21
	movq	-40(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB103_14:                             # %cond.end.24
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB103_15:                             # %cond.end.26
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	-40(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jne	.LBB103_17
# BB#16:                                # %cond.true.31
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB103_21
.LBB103_17:                             # %cond.false.33
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB103_19
# BB#18:                                # %cond.true.37
	movq	-40(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB103_20
.LBB103_19:                             # %cond.false.39
	movq	-40(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB103_20:                             # %cond.end.42
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB103_21:                             # %cond.end.44
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	-120(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rcx
	subq	456(%rcx), %rax
	movq	-40(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jne	.LBB103_23
# BB#22:                                # %cond.true.49
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB103_27
.LBB103_23:                             # %cond.false.51
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB103_25
# BB#24:                                # %cond.true.55
	movq	-40(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB103_26
.LBB103_25:                             # %cond.false.57
	movq	-40(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB103_26:                             # %cond.end.60
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB103_27:                             # %cond.end.62
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jge	.LBB103_29
# BB#28:                                # %if.then.66
	movq	-16(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB103_29:                             # %if.end
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB103_31
# BB#30:                                # %if.then.69
	movq	-24(%rbp), %rax
	subq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB103_31:                             # %if.end.71
	jmp	.LBB103_33
.LBB103_32:                             # %if.else
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
.LBB103_33:                             # %if.end.72
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	376(%rax), %rax
	cmpq	$0, 296(%rax)
	je	.LBB103_35
# BB#34:                                # %if.then.74
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	376(%rax), %rax
	movq	296(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rcx
	subq	-16(%rbp), %rcx
	movl	%ecx, %edx
	movq	-32(%rbp), %rcx
	movl	%ecx, %esi
	movq	-16(%rbp), %rcx
	movl	%ecx, %r8d
	movl	%esi, -180(%rbp)        # 4-byte Spill
	movl	%edx, %esi
	movl	-180(%rbp), %edx        # 4-byte Reload
	movl	%r8d, %ecx
	callq	*%rax
.LBB103_35:                             # %if.end.82
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end103:
	.size	set_vertical_scroll_bar, .Lfunc_end103-set_vertical_scroll_bar
	.cfi_endproc

	.globl	set_horizontal_scroll_bar
	.align	16, 0x90
	.type	set_horizontal_scroll_bar,@function
set_horizontal_scroll_bar:              # @set_horizontal_scroll_bar
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp312:
	.cfi_def_cfa_offset 16
.Ltmp313:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp314:
	.cfi_def_cfa_register %rbp
	subq	$4896, %rsp             # imm = 0x1320
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movw	468(%rdi), %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB104_3
# BB#1:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	minibuf_window, %rdi
	movq	%rax, -4872(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-4872(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB104_15
# BB#2:                                 # %land.lhs.true
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -4880(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4880(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB104_15
.LBB104_3:                              # %if.then
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpq	current_buffer, %rax
	je	.LBB104_5
# BB#4:                                 # %if.then.5
	movq	current_buffer, %rax
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	set_buffer_internal
.LBB104_5:                              # %if.end
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -4856(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	leaq	-4840(%rbp), %rdi
	movq	%rax, -4848(%rbp)
	movq	-8(%rbp), %rsi
	movq	-4856(%rbp), %rdx
	movq	-4848(%rbp), %rcx
	callq	start_display
	movl	$2147483647, -2520(%rbp) # imm = 0x7FFFFFFF
	movq	-8(%rbp), %rdi
	callq	window_box_height
	leaq	-4840(%rbp), %rdi
	movq	$-1, %rsi
	movl	$2147483647, %edx       # imm = 0x7FFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$3, %r9d
	movl	%eax, %ecx
	callq	move_it_to
	movl	$1, %esi
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rdi
	movq	272(%rdi), %rdi
	movq	-8(%rbp), %r10
	movq	8(%r10), %r10
	subq	$5, %r10
	movslq	364(%r10), %r10
	imulq	%r10, %rdi
	movl	%edi, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rdi
	movl	%eax, -4884(%rbp)       # 4-byte Spill
	callq	window_box_width
	movl	-4884(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.LBB104_7
# BB#6:                                 # %cond.true
	movl	-20(%rbp), %eax
	movl	%eax, -4888(%rbp)       # 4-byte Spill
	jmp	.LBB104_8
.LBB104_7:                              # %cond.false
	movl	-16(%rbp), %eax
	movl	%eax, -4888(%rbp)       # 4-byte Spill
.LBB104_8:                              # %cond.end
	movl	-4888(%rbp), %eax       # 4-byte Reload
	movl	%eax, -20(%rbp)
	movl	-2384(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB104_12
# BB#9:                                 # %if.then.20
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fcurrent_bidi_paragraph_direction
	movl	$816, %edi              # imm = 0x330
	movq	%rax, -4864(%rbp)
	movq	-4864(%rbp), %rax
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4896(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB104_11
# BB#10:                                # %if.then.26
	movl	-20(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_11:                             # %if.end.29
	jmp	.LBB104_12
.LBB104_12:                             # %if.end.30
	cmpq	$0, -40(%rbp)
	je	.LBB104_14
# BB#13:                                # %if.then.31
	movq	-40(%rbp), %rdi
	callq	set_buffer_internal
.LBB104_14:                             # %if.end.32
	jmp	.LBB104_16
.LBB104_15:                             # %if.else
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB104_16:                             # %if.end.33
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 288(%rcx)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	376(%rax), %rax
	cmpq	$0, 304(%rax)
	je	.LBB104_18
# BB#17:                                # %if.then.38
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	376(%rax), %rax
	movq	304(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-12(%rbp), %ecx
	callq	*%rax
.LBB104_18:                             # %if.end.43
	addq	$4896, %rsp             # imm = 0x1320
	popq	%rbp
	retq
.Lfunc_end104:
	.size	set_horizontal_scroll_bar, .Lfunc_end104-set_horizontal_scroll_bar
	.cfi_endproc

	.globl	Fcurrent_bidi_paragraph_direction
	.align	16, 0x90
	.type	Fcurrent_bidi_paragraph_direction,@function
Fcurrent_bidi_paragraph_direction:      # @Fcurrent_bidi_paragraph_direction
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp315:
	.cfi_def_cfa_offset 16
.Ltmp316:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp317:
	.cfi_def_cfa_register %rbp
	subq	$2656, %rsp             # imm = 0xA60
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	current_buffer, %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -2448(%rbp)       # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-2448(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB105_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	CHECK_BUFFER
	movq	-16(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, -24(%rbp)
.LBB105_2:                              # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	240(%rax), %rax
	movq	%rax, -2456(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2456(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB105_5
# BB#3:                                 # %lor.lhs.false
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -2464(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2464(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB105_5
# BB#4:                                 # %lor.lhs.false.6
	testb	$1, globals+3426
	je	.LBB105_6
.LBB105_5:                              # %if.then.7
	movl	$610, %edi              # imm = 0x262
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB105_64
.LBB105_6:                              # %if.else
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	248(%rax), %rax
	movq	%rax, -2472(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB105_8
# BB#7:                                 # %if.then.11
	movq	-24(%rbp), %rax
	movq	248(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB105_64
.LBB105_8:                              # %if.else.13
	movq	-24(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB105_10
# BB#9:                                 # %cond.true
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -2480(%rbp)       # 8-byte Spill
	jmp	.LBB105_14
.LBB105_10:                             # %cond.false
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -2488(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2488(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB105_12
# BB#11:                                # %cond.true.17
	movq	-24(%rbp), %rax
	movq	736(%rax), %rax
	movq	%rax, -2496(%rbp)       # 8-byte Spill
	jmp	.LBB105_13
.LBB105_12:                             # %cond.false.19
	movq	-24(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -2496(%rbp)       # 8-byte Spill
.LBB105_13:                             # %cond.end
	movq	-2496(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2480(%rbp)       # 8-byte Spill
.LBB105_14:                             # %cond.end.22
	movq	-2480(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2368(%rbp)
	movq	-24(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB105_16
# BB#15:                                # %cond.true.25
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -2504(%rbp)       # 8-byte Spill
	jmp	.LBB105_20
.LBB105_16:                             # %cond.false.27
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -2512(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2512(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB105_18
# BB#17:                                # %cond.true.31
	movq	-24(%rbp), %rax
	movq	744(%rax), %rax
	movq	%rax, -2520(%rbp)       # 8-byte Spill
	jmp	.LBB105_19
.LBB105_18:                             # %cond.false.33
	movq	-24(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -2520(%rbp)       # 8-byte Spill
.LBB105_19:                             # %cond.end.36
	movq	-2520(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2504(%rbp)       # 8-byte Spill
.LBB105_20:                             # %cond.end.38
	movq	-2504(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2376(%rbp)
	callq	bidi_shelve_cache
	movq	%rax, -2392(%rbp)
	movq	-24(%rbp), %rdi
	callq	set_buffer_temp
	movq	-2368(%rbp), %rax
	movq	current_buffer, %rdi
	cmpq	768(%rdi), %rax
	jl	.LBB105_36
# BB#21:                                # %land.lhs.true
	movq	-2368(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB105_36
# BB#22:                                # %if.then.43
	jmp	.LBB105_23
.LBB105_23:                             # %do.body
	xorl	%edi, %edi
	movq	-2368(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2368(%rbp)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -2528(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2528(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB105_25
# BB#24:                                # %if.then.47
	movq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2376(%rbp)
	jmp	.LBB105_34
.LBB105_25:                             # %if.else.49
	jmp	.LBB105_26
.LBB105_26:                             # %do.body.50
	movq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2376(%rbp)
	movq	-2376(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB105_28
# BB#27:                                # %if.then.53
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	addq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2400(%rbp)
	jmp	.LBB105_29
.LBB105_28:                             # %if.else.56
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	addq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2400(%rbp)
.LBB105_29:                             # %if.end.63
	jmp	.LBB105_30
.LBB105_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-2400(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	setne	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB105_31
	jmp	.LBB105_32
.LBB105_31:                             # %while.body
                                        #   in Loop: Header=BB105_30 Depth=1
	movq	-2400(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2400(%rbp)
	movq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2376(%rbp)
	jmp	.LBB105_30
.LBB105_32:                             # %while.end
	jmp	.LBB105_33
.LBB105_33:                             # %do.end
	jmp	.LBB105_34
.LBB105_34:                             # %if.end.67
	jmp	.LBB105_35
.LBB105_35:                             # %do.end.68
	jmp	.LBB105_36
.LBB105_36:                             # %if.end.69
	movl	$4, %esi
	leaq	-2440(%rbp), %rax
	movabsq	$.L.str.4, %rcx
	movq	$7, -2440(%rbp)
	movq	$-1, -2432(%rbp)
	movq	$0, -2424(%rbp)
	movq	%rcx, -2416(%rbp)
	movq	%rax, %rdi
	callq	make_lisp_ptr
	xorl	%edi, %edi
	movq	%rax, -2408(%rbp)
	movq	-2408(%rbp), %rax
	movq	-2368(%rbp), %rsi
	movq	-2376(%rbp), %rdx
	movq	current_buffer, %rcx
	movq	768(%rcx), %rcx
	movq	current_buffer, %r8
	movq	776(%r8), %r8
	movq	%r8, -2536(%rbp)        # 8-byte Spill
	movq	%rax, -2544(%rbp)       # 8-byte Spill
	movq	%rsi, -2552(%rbp)       # 8-byte Spill
	movq	%rdx, -2560(%rbp)       # 8-byte Spill
	movq	%rcx, -2568(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2544(%rbp), %rdi       # 8-byte Reload
	movq	-2552(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rdx       # 8-byte Reload
	movq	-2568(%rbp), %rcx       # 8-byte Reload
	movq	-2536(%rbp), %r8        # 8-byte Reload
	movq	%rax, %r9
	callq	fast_looking_at
	cmpq	$0, %rax
	jle	.LBB105_56
# BB#37:                                # %if.then.77
	jmp	.LBB105_38
.LBB105_38:                             # %while.cond.78
                                        # =>This Inner Loop Header: Depth=1
	movq	-2376(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB105_40
# BB#39:                                # %cond.true.83
                                        #   in Loop: Header=BB105_38 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -2576(%rbp)       # 8-byte Spill
	jmp	.LBB105_41
.LBB105_40:                             # %cond.false.86
                                        #   in Loop: Header=BB105_38 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2576(%rbp)       # 8-byte Spill
	jmp	.LBB105_41
.LBB105_41:                             # %cond.end.87
                                        #   in Loop: Header=BB105_38 Depth=1
	movq	-2576(%rbp), %rax       # 8-byte Reload
	movb	$1, %cl
	addq	-2376(%rbp), %rax
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	(%rdx), %rdx
	movzbl	-1(%rdx,%rax), %esi
	movl	%esi, -2380(%rbp)
	cmpl	$10, %esi
	movb	%cl, -2577(%rbp)        # 1-byte Spill
	je	.LBB105_45
# BB#42:                                # %lor.lhs.false.97
                                        #   in Loop: Header=BB105_38 Depth=1
	movb	$1, %al
	cmpl	$32, -2380(%rbp)
	movb	%al, -2577(%rbp)        # 1-byte Spill
	je	.LBB105_45
# BB#43:                                # %lor.lhs.false.100
                                        #   in Loop: Header=BB105_38 Depth=1
	movb	$1, %al
	cmpl	$9, -2380(%rbp)
	movb	%al, -2577(%rbp)        # 1-byte Spill
	je	.LBB105_45
# BB#44:                                # %lor.rhs
                                        #   in Loop: Header=BB105_38 Depth=1
	cmpl	$12, -2380(%rbp)
	sete	%al
	movb	%al, -2577(%rbp)        # 1-byte Spill
.LBB105_45:                             # %lor.end
                                        #   in Loop: Header=BB105_38 Depth=1
	movb	-2577(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB105_46
	jmp	.LBB105_49
.LBB105_46:                             # %while.body.105
                                        #   in Loop: Header=BB105_38 Depth=1
	movq	-2376(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	760(%rcx), %rax
	jg	.LBB105_48
# BB#47:                                # %if.then.108
	jmp	.LBB105_49
.LBB105_48:                             # %if.end.109
                                        #   in Loop: Header=BB105_38 Depth=1
	movq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2376(%rbp)
	movq	-2368(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2368(%rbp)
	jmp	.LBB105_38
.LBB105_49:                             # %while.end.112
	jmp	.LBB105_50
.LBB105_50:                             # %while.cond.113
                                        # =>This Inner Loop Header: Depth=1
	movq	-2376(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB105_52
# BB#51:                                # %cond.true.118
                                        #   in Loop: Header=BB105_50 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -2592(%rbp)       # 8-byte Spill
	jmp	.LBB105_53
.LBB105_52:                             # %cond.false.121
                                        #   in Loop: Header=BB105_50 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2592(%rbp)       # 8-byte Spill
	jmp	.LBB105_53
.LBB105_53:                             # %cond.end.122
                                        #   in Loop: Header=BB105_50 Depth=1
	movq	-2592(%rbp), %rax       # 8-byte Reload
	addq	-2376(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	andl	$192, %edx
	cmpl	$128, %edx
	setne	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	jne	.LBB105_54
	jmp	.LBB105_55
.LBB105_54:                             # %while.body.134
                                        #   in Loop: Header=BB105_50 Depth=1
	movq	-2376(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -2376(%rbp)
	jmp	.LBB105_50
.LBB105_55:                             # %while.end.136
	jmp	.LBB105_56
.LBB105_56:                             # %if.end.137
	movq	-2368(%rbp), %rdi
	movq	-2376(%rbp), %rsi
	movq	selected_frame, %rax
	movq	%rdi, -2600(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -2608(%rbp)       # 8-byte Spill
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB105_57
	jmp	.LBB105_59
.LBB105_57:                             # %land.lhs.true.140
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB105_59
# BB#58:                                # %cond.true.143
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -2616(%rbp)       # 8-byte Spill
	jmp	.LBB105_60
.LBB105_59:                             # %cond.false.145
	callq	emacs_abort
.LBB105_60:                             # %cond.end.146
	movq	-2616(%rbp), %rax       # 8-byte Reload
	movl	208(%rax), %ecx
	shrl	$23, %ecx
	andl	$7, %ecx
	subl	$2, %ecx
	sete	%dl
	movzbl	%dl, %edx
	leaq	-2360(%rbp), %rsi
	movq	-2600(%rbp), %rdi       # 8-byte Reload
	movq	-2608(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -2624(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-2624(%rbp), %r9        # 8-byte Reload
	movl	%ecx, -2628(%rbp)       # 4-byte Spill
	movq	%r9, %rcx
	callq	bidi_init_it
	movl	$0, -56(%rbp)
	movq	$0, -96(%rbp)
	xorl	%edx, %edx
	movl	%edx, %edi
	movl	%edx, -2632(%rbp)       # 4-byte Spill
	callq	builtin_lisp_symbol
	movq	%rax, -104(%rbp)
	movq	$0, -80(%rbp)
	movb	-72(%rbp), %r10b
	movb	%r10b, %r11b
	andb	$-2, %r11b
	movb	%r11b, -72(%rbp)
	andb	$-4, %r10b
	movb	%r10b, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	$1, %edx
	movl	-2632(%rbp), %edi       # 4-byte Reload
	movq	-2624(%rbp), %rsi       # 8-byte Reload
	callq	bidi_paragraph_init
	movq	-2392(%rbp), %rdi
	movl	-2632(%rbp), %esi       # 4-byte Reload
	callq	bidi_unshelve_cache
	movq	-32(%rbp), %rdi
	callq	set_buffer_temp
	movl	-56(%rbp), %edx
	movl	%edx, %esi
	subl	$1, %esi
	movl	%edx, -2636(%rbp)       # 4-byte Spill
	movl	%esi, -2640(%rbp)       # 4-byte Spill
	je	.LBB105_61
	jmp	.LBB105_65
.LBB105_65:                             # %cond.end.146
	movl	-2636(%rbp), %eax       # 4-byte Reload
	subl	$2, %eax
	movl	%eax, -2644(%rbp)       # 4-byte Spill
	je	.LBB105_62
	jmp	.LBB105_63
.LBB105_61:                             # %sw.bb
	movl	$610, %edi              # imm = 0x262
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB105_64
.LBB105_62:                             # %sw.bb.162
	movl	$816, %edi              # imm = 0x330
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB105_64
.LBB105_63:                             # %sw.default
	callq	emacs_abort
.LBB105_64:                             # %return
	movq	-8(%rbp), %rax
	addq	$2656, %rsp             # imm = 0xA60
	popq	%rbp
	retq
.Lfunc_end105:
	.size	Fcurrent_bidi_paragraph_direction, .Lfunc_end105-Fcurrent_bidi_paragraph_direction
	.cfi_endproc

	.globl	try_window
	.align	16, 0x90
	.type	try_window,@function
try_window:                             # @try_window
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp318:
	.cfi_def_cfa_offset 16
.Ltmp319:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp320:
	.cfi_def_cfa_register %rbp
	subq	$4928, %rsp             # imm = 0x1340
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rdi, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -48(%rbp)
	movq	$0, -4856(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -4864(%rbp)
	movq	-48(%rbp), %rdi
	callq	default_line_pixel_height
	xorl	%edi, %edi
	movl	%eax, -4868(%rbp)
	movq	-48(%rbp), %rdx
	movq	88(%rdx), %rdx
	movq	%rdx, -4888(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-4888(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	leaq	-4848(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movl	$-1, 364(%rcx)
	movb	$0, overlay_arrow_seen
	movq	-48(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	callq	start_display
	movq	-2496(%rbp), %rax
	movabsq	$-17179869185, %rcx     # imm = 0xFFFFFFFBFFFFFFFF
	andq	236(%rax), %rcx
	movq	%rcx, 236(%rax)
.LBB106_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-2416(%rbp), %eax
	cmpl	-2524(%rbp), %eax
	jge	.LBB106_8
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB106_1 Depth=1
	leaq	-4848(%rbp), %rdi
	callq	display_line
	testb	$1, %al
	jne	.LBB106_3
	jmp	.LBB106_4
.LBB106_3:                              # %if.then
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	-2496(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -4856(%rbp)
.LBB106_4:                              # %if.end
                                        #   in Loop: Header=BB106_1 Depth=1
	movq	-4864(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB106_7
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-36(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB106_7
# BB#6:                                 # %if.then.8
	movl	$0, -4(%rbp)
	jmp	.LBB106_30
.LBB106_7:                              # %if.end.9
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_1
.LBB106_8:                              # %while.end
	movl	-36(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB106_23
# BB#9:                                 # %land.lhs.true.12
	movq	-48(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB106_23
# BB#10:                                # %if.then.16
	movq	-48(%rbp), %rax
	movl	268(%rax), %ecx
	movq	-4864(%rbp), %rax
	imull	368(%rax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	-4868(%rbp)
	movl	%eax, -4876(%rbp)
	cmpq	$0, globals+3264
	jle	.LBB106_15
# BB#11:                                # %if.then.18
	movl	$4, %eax
	movq	globals+3264, %rcx
	movl	-4876(%rbp), %edx
	movl	%eax, -4900(%rbp)       # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-4900(%rbp), %esi       # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB106_13
# BB#12:                                # %cond.true
	movq	globals+3264, %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	jmp	.LBB106_14
.LBB106_13:                             # %cond.false
	movl	$4, %eax
	movl	-4876(%rbp), %ecx
	movl	%eax, -4916(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-4916(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -4912(%rbp)       # 8-byte Spill
.LBB106_14:                             # %cond.end
	movq	-4912(%rbp), %rax       # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -4872(%rbp)
	movl	-4868(%rbp), %ecx
	imull	-4872(%rbp), %ecx
	movl	%ecx, -4872(%rbp)
	jmp	.LBB106_16
.LBB106_15:                             # %if.else
	movl	$0, -4872(%rbp)
.LBB106_16:                             # %if.end.26
	movq	-48(%rbp), %rax
	cmpl	$0, 356(%rax)
	jl	.LBB106_20
# BB#17:                                # %land.lhs.true.30
	movq	-48(%rbp), %rax
	movl	356(%rax), %ecx
	cmpl	-4872(%rbp), %ecx
	jge	.LBB106_20
# BB#18:                                # %land.lhs.true.35
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB106_20
# BB#19:                                # %land.lhs.true.39
	movq	-4536(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jl	.LBB106_21
.LBB106_20:                             # %lor.lhs.false
	movq	-48(%rbp), %rax
	movl	356(%rax), %ecx
	movl	-2524(%rbp), %edx
	subl	-4872(%rbp), %edx
	subl	$1, %edx
	cmpl	%edx, %ecx
	jle	.LBB106_22
.LBB106_21:                             # %if.then.51
	movq	-48(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	-48(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$-1, -4(%rbp)
	jmp	.LBB106_30
.LBB106_22:                             # %if.end.54
	jmp	.LBB106_23
.LBB106_23:                             # %if.end.55
	movq	-48(%rbp), %rax
	cmpq	$0, 456(%rax)
	jg	.LBB106_26
# BB#24:                                # %land.lhs.true.58
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	cmpq	-4536(%rbp), %rax
	je	.LBB106_26
# BB#25:                                # %if.then.64
	movq	-48(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rax)
.LBB106_26:                             # %if.end.67
	cmpq	$0, -4856(%rbp)
	je	.LBB106_28
# BB#27:                                # %if.then.69
	xorl	%edx, %edx
	movq	-48(%rbp), %rdi
	movq	-4856(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB106_29
.LBB106_28:                             # %if.else.70
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	current_buffer, %rcx
	subq	776(%rcx), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, 480(%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	subq	768(%rcx), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, 456(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 464(%rax)
.LBB106_29:                             # %if.end.78
	movq	-48(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	movl	$1, -4(%rbp)
.LBB106_30:                             # %return
	movl	-4(%rbp), %eax
	addq	$4928, %rsp             # imm = 0x1340
	popq	%rbp
	retq
.Lfunc_end106:
	.size	try_window, .Lfunc_end106-try_window
	.cfi_endproc

	.align	16, 0x90
	.type	display_line,@function
display_line:                           # @display_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp321:
	.cfi_def_cfa_offset 16
.Ltmp322:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp323:
	.cfi_def_cfa_register %rbp
	subq	$5680, %rsp             # imm = 0x1630
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	2352(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	$0, -4840(%rbp)
	movb	$0, -4841(%rbp)
	movl	$-1, -4852(%rbp)
	movq	current_buffer, %rdi
	movq	768(%rdi), %rdi
	addq	$1, %rdi
	movq	%rdi, -4920(%rbp)
	movq	$0, -4928(%rbp)
	movb	$0, -4945(%rbp)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	subq	%rax, %rdi
	sarq	$8, %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	200(%rax), %rax
	movslq	24(%rax), %rax
	cmpq	%rax, %rdi
	jl	.LBB107_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	344(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 344(%rax)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rdx
	andq	$-65, %rdx
	orq	$64, %rdx
	movq	%rdx, 208(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB107_571
.LBB107_2:                              # %if.end
	xorl	%edx, %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	prepare_desired_row
	movl	$48, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	-16(%rbp), %rax
	movl	2432(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 48(%rax)
	movq	-24(%rbp), %rax
	addq	$80, %rax
	movq	-16(%rbp), %rsi
	addq	$264, %rsi              # imm = 0x108
	movq	%rax, %rdi
	callq	memcpy
	movq	-16(%rbp), %rax
	movl	2408(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 244(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rdx
	andq	$-16385, %rdx           # imm = 0xFFFFFFFFFFFFBFFF
	orq	$16384, %rdx            # imm = 0x4000
	movq	%rdx, 236(%rax)
	movq	-16(%rbp), %rax
	movw	2112(%rax), %r8w
	shrw	$8, %r8w
	andw	$1, %r8w
	movb	%r8b, %r9b
	movq	-24(%rbp), %rax
	andb	$1, %r9b
	movzbl	%r9b, %ecx
	movl	%ecx, %edx
	movq	236(%rax), %rsi
	shlq	$23, %rdx
	andq	$-8388609, %rsi         # imm = 0xFFFFFFFFFF7FFFFF
	orq	%rdx, %rsi
	movq	%rsi, 236(%rax)
	movq	-16(%rbp), %rax
	movw	2112(%rax), %r8w
	andw	$-257, %r8w             # imm = 0xFFFFFFFFFFFFFEFF
	movw	%r8w, 2112(%rax)
	movq	current_buffer, %rdi
	movq	-16(%rbp), %rax
	movq	312(%rax), %rsi
	callq	recenter_overlay_lists
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2316(%rax), %ecx
	jge	.LBB107_8
# BB#3:                                 # %if.then.22
	movl	$9, %ecx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdx
	movq	%rdx, this_line_min_pos
	movq	88(%rax), %rax
	movq	%rax, this_line_min_pos+8
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	768(%rax), %rsi
	movq	-16(%rbp), %rax
	movl	2316(%rax), %edx
	callq	move_it_in_display_line_to
	movl	%eax, -4952(%rbp)
	movq	-16(%rbp), %rsi
	movl	2404(%rsi), %eax
	movq	-16(%rbp), %rsi
	cmpl	2316(%rsi), %eax
	jge	.LBB107_7
# BB#4:                                 # %land.lhs.true
	cmpl	$5, -4952(%rbp)
	je	.LBB107_6
# BB#5:                                 # %lor.lhs.false
	cmpl	$1, -4952(%rbp)
	jne	.LBB107_7
.LBB107_6:                              # %if.then.35
	movq	-16(%rbp), %rax
	movl	2316(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2404(%rax)
.LBB107_7:                              # %if.end.38
	movq	this_line_min_pos, %rax
	movq	%rax, -4920(%rbp)
	movq	this_line_min_pos+8, %rax
	movq	%rax, -4936(%rbp)
	jmp	.LBB107_12
.LBB107_8:                              # %if.else
	movq	-16(%rbp), %rax
	cmpl	$1, 2360(%rax)
	jne	.LBB107_10
# BB#9:                                 # %if.then.41
	movq	-16(%rbp), %rdi
	callq	handle_line_prefix
	jmp	.LBB107_11
.LBB107_10:                             # %if.else.42
	movb	$1, -4945(%rbp)
.LBB107_11:                             # %if.end.43
	jmp	.LBB107_12
.LBB107_12:                             # %if.end.44
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 56(%rax)
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2384(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 64(%rax)
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2400(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 68(%rax)
	movq	-16(%rbp), %rax
	movl	2332(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 76(%rax)
.LBB107_13:                             # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_140 Depth 2
                                        #     Child Loop BB107_285 Depth 2
                                        #     Child Loop BB107_409 Depth 2
	movl	$0, -4976(%rbp)
	movl	$0, -4980(%rbp)
	movl	$0, -4984(%rbp)
	movl	$0, -4988(%rbp)
	movq	-16(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB107_41
# BB#14:                                # %if.then.52
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -5192(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5192(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB107_27
# BB#15:                                # %land.lhs.true.56
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_27
# BB#16:                                # %land.lhs.true.64
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB107_21
# BB#17:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_19
# BB#18:                                # %cond.true.70
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5196(%rbp)       # 4-byte Spill
	jmp	.LBB107_20
.LBB107_19:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5196(%rbp)       # 4-byte Spill
.LBB107_20:                             # %cond.end
	movl	-5196(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB107_25
	jmp	.LBB107_27
.LBB107_21:                             # %cond.false.77
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_23
# BB#22:                                # %cond.true.81
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5200(%rbp)       # 4-byte Spill
	jmp	.LBB107_24
.LBB107_23:                             # %cond.false.84
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5200(%rbp)       # 4-byte Spill
.LBB107_24:                             # %cond.end.89
	movl	-5200(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB107_27
.LBB107_25:                             # %land.lhs.true.93
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB107_27
# BB#26:                                # %if.then.97
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-134217729, %rcx       # imm = 0xFFFFFFFFF7FFFFFF
	orq	$134217728, %rcx        # imm = 0x8000000
	movq	%rcx, 236(%rax)
	jmp	.LBB107_37
.LBB107_27:                             # %if.else.101
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	append_space_for_newline
	testb	$1, %al
	jne	.LBB107_28
	jmp	.LBB107_29
.LBB107_28:                             # %land.lhs.true.104
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	cmpl	$1, %ecx
	je	.LBB107_30
.LBB107_29:                             # %lor.lhs.false.108
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB107_36
.LBB107_30:                             # %if.then.114
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	$-1, (%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-16385, %rcx           # imm = 0xFFFFFFFFFFFFBFFF
	movq	%rcx, 236(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	496(%rax), %rax
	movq	%rax, -5208(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5208(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB107_35
# BB#31:                                # %land.lhs.true.125
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB107_34
# BB#32:                                # %lor.lhs.false.130
	cmpq	$0, minibuf_level
	je	.LBB107_35
# BB#33:                                # %land.lhs.true.132
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	cmpq	minibuf_window, %rax
	jne	.LBB107_35
.LBB107_34:                             # %if.then.135
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-131073, %rcx          # imm = 0xFFFFFFFFFFFDFFFF
	orq	$131072, %rcx           # imm = 0x20000
	movq	%rcx, 236(%rax)
.LBB107_35:                             # %if.end.139
	jmp	.LBB107_36
.LBB107_36:                             # %if.end.140
	jmp	.LBB107_37
.LBB107_37:                             # %if.end.141
	movq	-16(%rbp), %rax
	movl	$0, 2408(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-32769, %rcx           # imm = 0xFFFFFFFFFFFF7FFF
	orq	$32768, %rcx            # imm = 0x8000
	movq	%rcx, 236(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_39
# BB#38:                                # %lor.lhs.false.151
	xorl	%esi, %esi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	cmpl	$0, %eax
	je	.LBB107_40
.LBB107_39:                             # %if.then.156
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
.LBB107_40:                             # %if.end.157
	jmp	.LBB107_508
.LBB107_41:                             # %if.end.158
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -4956(%rbp)
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -4968(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 2116(%rax)
	je	.LBB107_72
# BB#42:                                # %if.then.165
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -4976(%rbp)
	movq	-16(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -4980(%rbp)
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movl	%ecx, -4984(%rbp)
	movq	-16(%rbp), %rax
	movl	2400(%rax), %ecx
	movl	%ecx, -4988(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$1, 2116(%rax)
	jne	.LBB107_71
# BB#43:                                # %land.lhs.true.173
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 2360(%rax)
	jne	.LBB107_71
# BB#44:                                # %if.then.177
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB107_47
# BB#45:                                # %land.lhs.true.180
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$32, 2124(%rax)
	je	.LBB107_62
# BB#46:                                # %lor.lhs.false.183
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$9, 2124(%rax)
	je	.LBB107_62
.LBB107_47:                             # %lor.lhs.false.187
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB107_48
	jmp	.LBB107_50
.LBB107_48:                             # %land.lhs.true.190
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$32, %ecx
	je	.LBB107_62
# BB#49:                                # %lor.lhs.false.197
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$9, %ecx
	je	.LBB107_62
.LBB107_50:                             # %lor.lhs.false.206
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB107_53
# BB#51:                                # %land.lhs.true.208
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB107_62
# BB#52:                                # %lor.lhs.false.217
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$9, %edx
	je	.LBB107_62
.LBB107_53:                             # %lor.lhs.false.226
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	776(%rcx), %rax
	jge	.LBB107_63
# BB#54:                                # %land.lhs.true.232
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_56
# BB#55:                                # %cond.true.238
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5216(%rbp)       # 8-byte Spill
	jmp	.LBB107_57
.LBB107_56:                             # %cond.false.240
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5216(%rbp)       # 8-byte Spill
	jmp	.LBB107_57
.LBB107_57:                             # %cond.end.241
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5216(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB107_62
# BB#58:                                # %lor.lhs.false.252
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_60
# BB#59:                                # %cond.true.260
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5224(%rbp)       # 8-byte Spill
	jmp	.LBB107_61
.LBB107_60:                             # %cond.false.263
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5224(%rbp)       # 8-byte Spill
	jmp	.LBB107_61
.LBB107_61:                             # %cond.end.264
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5224(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$9, %edx
	jne	.LBB107_63
.LBB107_62:                             # %if.then.277
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	$1, -4841(%rbp)
	jmp	.LBB107_70
.LBB107_63:                             # %if.else.278
                                        #   in Loop: Header=BB107_13 Depth=1
	testb	$1, -4841(%rbp)
	je	.LBB107_69
# BB#64:                                # %if.then.280
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_65
.LBB107_65:                             # %do.body
                                        #   in Loop: Header=BB107_13 Depth=1
	cmpq	$0, -4840(%rbp)
	je	.LBB107_67
# BB#66:                                # %if.then.282
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$1, %esi
	movq	-4840(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB107_67:                             # %if.end.283
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4832(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4840(%rbp)
# BB#68:                                # %do.end
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4968(%rbp), %eax
	movl	%eax, -4848(%rbp)
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %eax
	movl	%eax, -4852(%rbp)
	movq	-24(%rbp), %rcx
	movl	56(%rcx), %eax
	movl	%eax, -4856(%rbp)
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %eax
	movl	%eax, -4860(%rbp)
	movq	-24(%rbp), %rcx
	movl	64(%rcx), %eax
	movl	%eax, -4864(%rbp)
	movq	-24(%rbp), %rcx
	movl	68(%rcx), %eax
	movl	%eax, -4868(%rbp)
	movq	-24(%rbp), %rcx
	movl	76(%rcx), %eax
	movl	%eax, -4872(%rbp)
	movq	-4920(%rbp), %rcx
	movq	%rcx, -4880(%rbp)
	movq	-4936(%rbp), %rcx
	movq	%rcx, -4888(%rbp)
	movq	-4928(%rbp), %rcx
	movq	%rcx, -4896(%rbp)
	movq	-4944(%rbp), %rcx
	movq	%rcx, -4904(%rbp)
	movb	$0, -4841(%rbp)
.LBB107_69:                             # %if.end.293
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_70
.LBB107_70:                             # %if.end.294
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_71
.LBB107_71:                             # %if.end.295
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_72
.LBB107_72:                             # %if.end.296
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_73
.LBB107_73:                             # %do.body.297
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB107_76
# BB#74:                                # %land.lhs.true.301
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_76
# BB#75:                                # %if.then.307
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB107_76:                             # %if.end.320
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB107_78
# BB#77:                                # %if.then.324
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	jmp	.LBB107_79
.LBB107_78:                             # %if.else.328
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	callq	produce_glyphs
.LBB107_79:                             # %if.end.329
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB107_81
# BB#80:                                # %if.then.333
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	$1, globals+3391
.LBB107_81:                             # %if.end.334
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_82
.LBB107_82:                             # %do.end.335
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 2360(%rax)
	je	.LBB107_102
# BB#83:                                # %if.then.339
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2380(%rax), %ecx
	jle	.LBB107_85
# BB#84:                                # %cond.true.344
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	56(%rax), %ecx
	movl	%ecx, -5228(%rbp)       # 4-byte Spill
	jmp	.LBB107_86
.LBB107_85:                             # %cond.false.346
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -5228(%rbp)       # 4-byte Spill
.LBB107_86:                             # %cond.end.348
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5228(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	2380(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2384(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB107_88
# BB#87:                                # %cond.true.357
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5232(%rbp)       # 4-byte Spill
	jmp	.LBB107_89
.LBB107_88:                             # %cond.false.359
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -5232(%rbp)       # 4-byte Spill
.LBB107_89:                             # %cond.end.363
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5232(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rcx
	movl	64(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2396(%rcx), %eax
	jle	.LBB107_91
# BB#90:                                # %cond.true.370
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -5236(%rbp)       # 4-byte Spill
	jmp	.LBB107_92
.LBB107_91:                             # %cond.false.372
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movl	%ecx, -5236(%rbp)       # 4-byte Spill
.LBB107_92:                             # %cond.end.374
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5236(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rcx
	movl	68(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	2396(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2400(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB107_94
# BB#93:                                # %cond.true.383
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	68(%rax), %ecx
	movl	%ecx, -5240(%rbp)       # 4-byte Spill
	jmp	.LBB107_95
.LBB107_94:                             # %cond.false.385
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2400(%rax), %ecx
	movl	%ecx, -5240(%rbp)       # 4-byte Spill
.LBB107_95:                             # %cond.end.389
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5240(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movq	-24(%rbp), %rcx
	movl	76(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2332(%rcx), %eax
	jle	.LBB107_97
# BB#96:                                # %cond.true.396
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	76(%rax), %ecx
	movl	%ecx, -5244(%rbp)       # 4-byte Spill
	jmp	.LBB107_98
.LBB107_97:                             # %cond.false.398
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2332(%rax), %ecx
	movl	%ecx, -5244(%rbp)       # 4-byte Spill
.LBB107_98:                             # %cond.end.400
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5244(%rbp), %eax       # 4-byte Reload
	movl	$1, %esi
	movq	-24(%rbp), %rcx
	movl	%eax, 76(%rcx)
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-16(%rbp), %rcx
	cmpl	$1, 2360(%rcx)
	jne	.LBB107_101
# BB#99:                                # %land.lhs.true.406
                                        #   in Loop: Header=BB107_13 Depth=1
	testb	$1, -4945(%rbp)
	je	.LBB107_101
# BB#100:                               # %if.then.409
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	$0, -4945(%rbp)
	movq	-16(%rbp), %rdi
	callq	handle_line_prefix
.LBB107_101:                            # %if.end.410
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_13
.LBB107_102:                            # %if.end.411
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	-4956(%rbp), %ecx
	movl	%ecx, -4972(%rbp)
	movq	-16(%rbp), %rax
	movl	2444(%rax), %ecx
	movl	%ecx, -4960(%rbp)
	movl	-4968(%rbp), %ecx
	movl	%ecx, -4964(%rbp)
	cmpl	$0, -4972(%rbp)
	jle	.LBB107_139
# BB#103:                               # %land.lhs.true.418
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jge	.LBB107_139
# BB#104:                               # %if.then.423
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4972(%rbp), %eax
	movq	-16(%rbp), %rcx
	addl	2444(%rcx), %eax
	movl	%eax, 2444(%rcx)
	movq	-24(%rbp), %rcx
	movl	56(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2380(%rcx), %eax
	jle	.LBB107_106
# BB#105:                               # %cond.true.430
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	56(%rax), %ecx
	movl	%ecx, -5248(%rbp)       # 4-byte Spill
	jmp	.LBB107_107
.LBB107_106:                            # %cond.false.432
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -5248(%rbp)       # 4-byte Spill
.LBB107_107:                            # %cond.end.434
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5248(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	2380(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2384(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB107_109
# BB#108:                               # %cond.true.443
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5252(%rbp)       # 4-byte Spill
	jmp	.LBB107_110
.LBB107_109:                            # %cond.false.445
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -5252(%rbp)       # 4-byte Spill
.LBB107_110:                            # %cond.end.449
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5252(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rcx
	movl	64(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2396(%rcx), %eax
	jle	.LBB107_112
# BB#111:                               # %cond.true.456
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -5256(%rbp)       # 4-byte Spill
	jmp	.LBB107_113
.LBB107_112:                            # %cond.false.458
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movl	%ecx, -5256(%rbp)       # 4-byte Spill
.LBB107_113:                            # %cond.end.460
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5256(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rcx
	movl	68(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	2396(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2400(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB107_115
# BB#114:                               # %cond.true.469
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	68(%rax), %ecx
	movl	%ecx, -5260(%rbp)       # 4-byte Spill
	jmp	.LBB107_116
.LBB107_115:                            # %cond.false.471
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2400(%rax), %ecx
	movl	%ecx, -5260(%rbp)       # 4-byte Spill
.LBB107_116:                            # %cond.end.475
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5260(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movq	-24(%rbp), %rcx
	movl	76(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2332(%rcx), %eax
	jle	.LBB107_118
# BB#117:                               # %cond.true.482
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	76(%rax), %ecx
	movl	%ecx, -5264(%rbp)       # 4-byte Spill
	jmp	.LBB107_119
.LBB107_118:                            # %cond.false.484
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2332(%rax), %ecx
	movl	%ecx, -5264(%rbp)       # 4-byte Spill
.LBB107_119:                            # %cond.end.486
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5264(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 76(%rcx)
	movq	-16(%rbp), %rcx
	movl	2404(%rcx), %eax
	movq	-16(%rbp), %rcx
	subl	2368(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2316(%rcx), %eax
	jge	.LBB107_122
# BB#120:                               # %land.lhs.true.494
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_122
# BB#121:                               # %if.then.500
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4968(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	2316(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 44(%rcx)
.LBB107_122:                            # %if.end.504
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_138
# BB#123:                               # %if.then.510
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_124
.LBB107_124:                            # %do.body.511
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -5265(%rbp)        # 1-byte Spill
	jne	.LBB107_126
# BB#125:                               # %land.rhs
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	sete	%cl
	movb	%cl, -5265(%rbp)        # 1-byte Spill
.LBB107_126:                            # %land.end
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	-5265(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -4989(%rbp)
	testb	$1, -4989(%rbp)
	je	.LBB107_128
# BB#127:                               # %cond.true.519
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	2176(%rax), %rax
	movq	%rax, -5280(%rbp)       # 8-byte Spill
	jmp	.LBB107_129
.LBB107_128:                            # %cond.false.521
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -5280(%rbp)       # 8-byte Spill
.LBB107_129:                            # %cond.end.525
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5280(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5000(%rbp)
	testb	$1, -4989(%rbp)
	je	.LBB107_131
# BB#130:                               # %cond.true.529
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rdi
	movq	-5000(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -5288(%rbp)       # 8-byte Spill
	jmp	.LBB107_132
.LBB107_131:                            # %cond.false.531
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -5288(%rbp)       # 8-byte Spill
.LBB107_132:                            # %cond.end.535
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5288(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5008(%rbp)
	movq	-5000(%rbp), %rax
	cmpq	-4920(%rbp), %rax
	jge	.LBB107_134
# BB#133:                               # %if.then.539
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5000(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	-5008(%rbp), %rax
	movq	%rax, -4936(%rbp)
.LBB107_134:                            # %if.end.540
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4928(%rbp), %rax
	jle	.LBB107_136
# BB#135:                               # %if.then.546
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -4944(%rbp)
.LBB107_136:                            # %if.end.553
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_137
.LBB107_137:                            # %do.end.554
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_138
.LBB107_138:                            # %if.end.555
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_408
.LBB107_139:                            # %if.else.556
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$0, -5012(%rbp)
.LBB107_140:                            # %for.cond
                                        #   Parent Loop BB107_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-5012(%rbp), %eax
	cmpl	-4972(%rbp), %eax
	jge	.LBB107_372
# BB#141:                               # %for.body
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_143
# BB#142:                               # %if.then.564
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-4956(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-5012(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -5024(%rbp)
	jmp	.LBB107_144
.LBB107_143:                            # %if.else.570
                                        #   in Loop: Header=BB107_140 Depth=2
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	movslq	-4972(%rbp), %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rdx
	addq	$-48, %rdx
	movslq	-5012(%rbp), %rsi
	subq	%rsi, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -5024(%rbp)
.LBB107_144:                            # %if.end.578
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-4968(%rbp), %eax
	movq	-5024(%rbp), %rcx
	movswl	16(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -5016(%rbp)
	movq	-16(%rbp), %rcx
	cmpl	$0, 2116(%rcx)
	je	.LBB107_339
# BB#145:                               # %land.lhs.true.585
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-5016(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jg	.LBB107_155
# BB#146:                               # %lor.lhs.false.589
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-5016(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jne	.LBB107_339
# BB#147:                               # %land.lhs.true.593
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_339
# BB#148:                               # %land.lhs.true.602
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_152
# BB#149:                               # %cond.true.609
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_151
# BB#150:                               # %cond.true.614
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jne	.LBB107_155
	jmp	.LBB107_339
.LBB107_151:                            # %cond.false.618
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 344(%rax)
	jne	.LBB107_155
	jmp	.LBB107_339
.LBB107_152:                            # %cond.false.624
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_154
# BB#153:                               # %cond.true.629
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jne	.LBB107_155
	jmp	.LBB107_339
.LBB107_154:                            # %cond.false.633
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 348(%rax)
	je	.LBB107_339
.LBB107_155:                            # %if.then.639
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 2444(%rax)
	je	.LBB107_165
# BB#156:                               # %lor.lhs.false.643
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5016(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jne	.LBB107_280
# BB#157:                               # %land.lhs.true.647
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_280
# BB#158:                               # %land.lhs.true.656
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_162
# BB#159:                               # %cond.true.663
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_161
# BB#160:                               # %cond.true.668
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jne	.LBB107_165
	jmp	.LBB107_280
.LBB107_161:                            # %cond.false.672
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 344(%rax)
	jne	.LBB107_165
	jmp	.LBB107_280
.LBB107_162:                            # %cond.false.678
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_164
# BB#163:                               # %cond.true.683
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jne	.LBB107_165
	jmp	.LBB107_280
.LBB107_164:                            # %cond.false.687
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 348(%rax)
	je	.LBB107_280
.LBB107_165:                            # %if.then.693
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-8193, %rcx            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rcx             # imm = 0x2000
	movq	%rcx, 236(%rax)
	movl	-5016(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2404(%rax)
	movl	-5016(%rbp), %edx
	movq	-16(%rbp), %rax
	addl	2408(%rax), %edx
	movl	%edx, 2408(%rax)
	movq	-16(%rbp), %rax
	movl	2444(%rax), %edx
	addl	$1, %edx
	movl	%edx, 2444(%rax)
	movl	-5012(%rbp), %edx
	movl	-4972(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edx
	jne	.LBB107_259
# BB#166:                               # %if.then.705
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -5296(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5296(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB107_178
# BB#167:                               # %land.lhs.true.709
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_178
# BB#168:                               # %land.lhs.true.718
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB107_173
# BB#169:                               # %cond.true.723
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_171
# BB#170:                               # %cond.true.728
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5300(%rbp)       # 4-byte Spill
	jmp	.LBB107_172
.LBB107_171:                            # %cond.false.731
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5300(%rbp)       # 4-byte Spill
.LBB107_172:                            # %cond.end.736
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5300(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB107_177
	jmp	.LBB107_178
.LBB107_173:                            # %cond.false.740
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_175
# BB#174:                               # %cond.true.745
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5304(%rbp)       # 4-byte Spill
	jmp	.LBB107_176
.LBB107_175:                            # %cond.false.748
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5304(%rbp)       # 4-byte Spill
.LBB107_176:                            # %cond.end.753
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5304(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB107_178
.LBB107_177:                            # %land.lhs.true.757
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	je	.LBB107_199
.LBB107_178:                            # %land.lhs.true.762
                                        #   in Loop: Header=BB107_13 Depth=1
	cmpl	$0, -4852(%rbp)
	jle	.LBB107_199
# BB#179:                               # %land.lhs.true.765
                                        #   in Loop: Header=BB107_13 Depth=1
	testb	$1, -4841(%rbp)
	je	.LBB107_198
# BB#180:                               # %lor.lhs.false.767
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB107_183
# BB#181:                               # %land.lhs.true.771
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$32, 2124(%rax)
	je	.LBB107_198
# BB#182:                               # %lor.lhs.false.775
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$9, 2124(%rax)
	je	.LBB107_198
.LBB107_183:                            # %lor.lhs.false.779
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB107_184
	jmp	.LBB107_186
.LBB107_184:                            # %land.lhs.true.783
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$32, %ecx
	je	.LBB107_198
# BB#185:                               # %lor.lhs.false.792
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$9, %ecx
	je	.LBB107_198
.LBB107_186:                            # %lor.lhs.false.801
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB107_189
# BB#187:                               # %land.lhs.true.804
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB107_198
# BB#188:                               # %lor.lhs.false.813
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$9, %edx
	je	.LBB107_198
.LBB107_189:                            # %lor.lhs.false.822
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	776(%rcx), %rax
	jge	.LBB107_199
# BB#190:                               # %land.lhs.true.829
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_192
# BB#191:                               # %cond.true.837
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5312(%rbp)       # 8-byte Spill
	jmp	.LBB107_193
.LBB107_192:                            # %cond.false.840
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5312(%rbp)       # 8-byte Spill
	jmp	.LBB107_193
.LBB107_193:                            # %cond.end.841
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5312(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB107_198
# BB#194:                               # %lor.lhs.false.854
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_196
# BB#195:                               # %cond.true.862
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5320(%rbp)       # 8-byte Spill
	jmp	.LBB107_197
.LBB107_196:                            # %cond.false.865
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5320(%rbp)       # 8-byte Spill
	jmp	.LBB107_197
.LBB107_197:                            # %cond.end.866
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5320(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$9, %edx
	jne	.LBB107_199
.LBB107_198:                            # %if.then.879
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_293
.LBB107_199:                            # %if.end.880
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_215
# BB#200:                               # %if.then.886
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_201
.LBB107_201:                            # %do.body.887
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -5321(%rbp)        # 1-byte Spill
	jne	.LBB107_203
# BB#202:                               # %land.rhs.891
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	sete	%cl
	movb	%cl, -5321(%rbp)        # 1-byte Spill
.LBB107_203:                            # %land.end.895
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	-5321(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -5025(%rbp)
	testb	$1, -5025(%rbp)
	je	.LBB107_205
# BB#204:                               # %cond.true.900
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	2176(%rax), %rax
	movq	%rax, -5336(%rbp)       # 8-byte Spill
	jmp	.LBB107_206
.LBB107_205:                            # %cond.false.903
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -5336(%rbp)       # 8-byte Spill
.LBB107_206:                            # %cond.end.907
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5336(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5040(%rbp)
	testb	$1, -5025(%rbp)
	je	.LBB107_208
# BB#207:                               # %cond.true.912
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rdi
	movq	-5040(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -5344(%rbp)       # 8-byte Spill
	jmp	.LBB107_209
.LBB107_208:                            # %cond.false.914
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -5344(%rbp)       # 8-byte Spill
.LBB107_209:                            # %cond.end.918
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5048(%rbp)
	movq	-5040(%rbp), %rax
	cmpq	-4920(%rbp), %rax
	jge	.LBB107_211
# BB#210:                               # %if.then.922
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5040(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	-5048(%rbp), %rax
	movq	%rax, -4936(%rbp)
.LBB107_211:                            # %if.end.923
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4928(%rbp), %rax
	jle	.LBB107_213
# BB#212:                               # %if.then.929
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -4944(%rbp)
.LBB107_213:                            # %if.end.936
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_214
.LBB107_214:                            # %do.end.937
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_215
.LBB107_215:                            # %if.end.938
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -5352(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB107_258
# BB#216:                               # %land.lhs.true.942
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_258
# BB#217:                               # %land.lhs.true.951
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB107_222
# BB#218:                               # %cond.true.956
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_220
# BB#219:                               # %cond.true.961
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5356(%rbp)       # 4-byte Spill
	jmp	.LBB107_221
.LBB107_220:                            # %cond.false.964
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5356(%rbp)       # 4-byte Spill
.LBB107_221:                            # %cond.end.969
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5356(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB107_226
	jmp	.LBB107_258
.LBB107_222:                            # %cond.false.973
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_224
# BB#223:                               # %cond.true.978
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5360(%rbp)       # 4-byte Spill
	jmp	.LBB107_225
.LBB107_224:                            # %cond.false.981
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5360(%rbp)       # 4-byte Spill
.LBB107_225:                            # %cond.end.986
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5360(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB107_258
.LBB107_226:                            # %land.lhs.true.990
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB107_258
# BB#227:                               # %if.then.995
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB107_229
# BB#228:                               # %if.then.997
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-134217729, %rcx       # imm = 0xFFFFFFFFF7FFFFFF
	orq	$134217728, %rcx        # imm = 0x8000000
	movq	%rcx, 236(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 2408(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-8193, %rcx            # imm = 0xFFFFFFFFFFFFDFFF
	movq	%rcx, 236(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-32769, %rcx           # imm = 0xFFFFFFFFFFFF7FFF
	orq	$32768, %rcx            # imm = 0x8000
	movq	%rcx, 236(%rax)
	jmp	.LBB107_257
.LBB107_229:                            # %if.else.1010
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB107_234
# BB#230:                               # %land.lhs.true.1014
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB107_233
# BB#231:                               # %lor.lhs.false.1018
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB107_234
# BB#232:                               # %land.lhs.true.1022
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB107_234
.LBB107_233:                            # %if.then.1024
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-8193, %rcx            # imm = 0xFFFFFFFFFFFFDFFF
	movq	%rcx, 236(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-134217729, %rcx       # imm = 0xFFFFFFFFF7FFFFFF
	orq	$134217728, %rcx        # imm = 0x8000000
	movq	%rcx, 236(%rax)
	jmp	.LBB107_256
.LBB107_234:                            # %if.else.1032
                                        #   in Loop: Header=BB107_13 Depth=1
	cmpl	$0, -4852(%rbp)
	jle	.LBB107_255
# BB#235:                               # %land.lhs.true.1035
                                        #   in Loop: Header=BB107_13 Depth=1
	testb	$1, -4841(%rbp)
	je	.LBB107_254
# BB#236:                               # %lor.lhs.false.1037
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB107_239
# BB#237:                               # %land.lhs.true.1041
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$32, 2124(%rax)
	je	.LBB107_254
# BB#238:                               # %lor.lhs.false.1045
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$9, 2124(%rax)
	je	.LBB107_254
.LBB107_239:                            # %lor.lhs.false.1049
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB107_240
	jmp	.LBB107_242
.LBB107_240:                            # %land.lhs.true.1053
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$32, %ecx
	je	.LBB107_254
# BB#241:                               # %lor.lhs.false.1062
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	cmpl	$9, %ecx
	je	.LBB107_254
.LBB107_242:                            # %lor.lhs.false.1071
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB107_245
# BB#243:                               # %land.lhs.true.1074
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB107_254
# BB#244:                               # %lor.lhs.false.1083
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$9, %edx
	je	.LBB107_254
.LBB107_245:                            # %lor.lhs.false.1092
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	776(%rcx), %rax
	jge	.LBB107_255
# BB#246:                               # %land.lhs.true.1099
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_248
# BB#247:                               # %cond.true.1107
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5368(%rbp)       # 8-byte Spill
	jmp	.LBB107_249
.LBB107_248:                            # %cond.false.1110
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5368(%rbp)       # 8-byte Spill
	jmp	.LBB107_249
.LBB107_249:                            # %cond.end.1111
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5368(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$32, %edx
	je	.LBB107_254
# BB#250:                               # %lor.lhs.false.1124
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_252
# BB#251:                               # %cond.true.1132
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5376(%rbp)       # 8-byte Spill
	jmp	.LBB107_253
.LBB107_252:                            # %cond.false.1135
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5376(%rbp)       # 8-byte Spill
	jmp	.LBB107_253
.LBB107_253:                            # %cond.end.1136
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5376(%rbp), %rax       # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$9, %edx
	jne	.LBB107_255
.LBB107_254:                            # %if.then.1149
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_293
.LBB107_255:                            # %if.end.1150
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_256
.LBB107_256:                            # %if.end.1151
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_257
.LBB107_257:                            # %if.end.1152
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_258
.LBB107_258:                            # %if.end.1153
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_276
.LBB107_259:                            # %if.else.1154
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_275
# BB#260:                               # %if.then.1160
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_261
.LBB107_261:                            # %do.body.1161
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -5377(%rbp)        # 1-byte Spill
	jne	.LBB107_263
# BB#262:                               # %land.rhs.1165
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	sete	%cl
	movb	%cl, -5377(%rbp)        # 1-byte Spill
.LBB107_263:                            # %land.end.1169
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	-5377(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -5049(%rbp)
	testb	$1, -5049(%rbp)
	je	.LBB107_265
# BB#264:                               # %cond.true.1174
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	2176(%rax), %rax
	movq	%rax, -5392(%rbp)       # 8-byte Spill
	jmp	.LBB107_266
.LBB107_265:                            # %cond.false.1177
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -5392(%rbp)       # 8-byte Spill
.LBB107_266:                            # %cond.end.1181
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5392(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5064(%rbp)
	testb	$1, -5049(%rbp)
	je	.LBB107_268
# BB#267:                               # %cond.true.1186
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rdi
	movq	-5064(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -5400(%rbp)       # 8-byte Spill
	jmp	.LBB107_269
.LBB107_268:                            # %cond.false.1188
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -5400(%rbp)       # 8-byte Spill
.LBB107_269:                            # %cond.end.1192
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5400(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5072(%rbp)
	movq	-5064(%rbp), %rax
	cmpq	-4920(%rbp), %rax
	jge	.LBB107_271
# BB#270:                               # %if.then.1196
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5064(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	-5072(%rbp), %rax
	movq	%rax, -4936(%rbp)
.LBB107_271:                            # %if.end.1197
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4928(%rbp), %rax
	jle	.LBB107_273
# BB#272:                               # %if.then.1203
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -4944(%rbp)
.LBB107_273:                            # %if.end.1210
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_274
.LBB107_274:                            # %do.end.1211
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_275
.LBB107_275:                            # %if.end.1212
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_276
.LBB107_276:                            # %if.end.1213
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jg	.LBB107_278
# BB#277:                               # %lor.lhs.false.1220
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB107_279
.LBB107_278:                            # %if.then.1229
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
.LBB107_279:                            # %if.end.1230
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_338
.LBB107_280:                            # %if.else.1231
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5024(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_291
# BB#281:                               # %land.lhs.true.1237
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB107_291
# BB#282:                               # %if.then.1246
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_284
# BB#283:                               # %if.then.1252
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	-4956(%rbp), %ecx
	movl	%ecx, %esi
	callq	unproduce_glyphs
.LBB107_284:                            # %if.end.1257
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4956(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 34(%rdx)
.LBB107_285:                            # %while.cond.1261
                                        #   Parent Loop BB107_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	-24(%rbp), %rcx
	cmpq	16(%rcx), %rax
	jae	.LBB107_287
# BB#286:                               # %while.body.1273
                                        #   in Loop: Header=BB107_285 Depth=2
	movl	$7, %esi
	movq	-16(%rbp), %rdi
	callq	produce_special_glyphs
	jmp	.LBB107_285
.LBB107_287:                            # %while.end
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-8193, %rcx            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rcx             # imm = 0x2000
	movq	%rcx, 236(%rax)
	movl	-4964(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2404(%rax)
	movl	-4964(%rbp), %edx
	movq	-16(%rbp), %rax
	addl	2408(%rax), %edx
	movl	%edx, 2408(%rax)
	movl	-4976(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2380(%rax)
	movl	-4980(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2384(%rax)
	movl	-4984(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2396(%rax)
	movl	-4988(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2400(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %edx
	cmpl	$0, %edx
	jg	.LBB107_289
# BB#288:                               # %lor.lhs.false.1294
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB107_290
.LBB107_289:                            # %if.then.1304
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
.LBB107_290:                            # %if.end.1305
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_337
.LBB107_291:                            # %if.else.1306
                                        #   in Loop: Header=BB107_13 Depth=1
	cmpl	$0, -4852(%rbp)
	jle	.LBB107_300
# BB#292:                               # %if.then.1309
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_293
.LBB107_293:                            # %back_to_wrap
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_295
# BB#294:                               # %if.then.1315
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	-4852(%rbp), %ecx
	movl	%ecx, %esi
	callq	unproduce_glyphs
.LBB107_295:                            # %if.end.1320
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_296
.LBB107_296:                            # %do.body.1321
                                        #   in Loop: Header=BB107_13 Depth=1
	leaq	-4832(%rbp), %rax
	cmpq	%rax, -16(%rbp)
	je	.LBB107_298
# BB#297:                               # %if.then.1324
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4832(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB107_298:                            # %if.end.1325
                                        #   in Loop: Header=BB107_13 Depth=1
	xorl	%esi, %esi
	movq	-4840(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4840(%rbp)
# BB#299:                               # %do.end.1326
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4848(%rbp), %eax
	movq	-16(%rbp), %rcx
	addl	2408(%rcx), %eax
	movl	%eax, 2408(%rcx)
	movl	-4852(%rbp), %eax
	movw	%ax, %dx
	movq	-24(%rbp), %rcx
	movw	%dx, 34(%rcx)
	movl	-4856(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movl	-4860(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movl	-4864(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movl	-4868(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movl	-4872(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 76(%rcx)
	movq	-4880(%rbp), %rcx
	movq	%rcx, -4920(%rbp)
	movq	-4888(%rbp), %rcx
	movq	%rcx, -4936(%rbp)
	movq	-4896(%rbp), %rcx
	movq	%rcx, -4928(%rbp)
	movq	-4904(%rbp), %rcx
	movq	%rcx, -4944(%rbp)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rsi
	andq	$-8193, %rsi            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rsi             # imm = 0x2000
	movq	%rsi, 236(%rcx)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rsi
	andq	$-32769, %rsi           # imm = 0xFFFFFFFFFFFF7FFF
	movq	%rsi, 236(%rcx)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rsi
	andq	$-134217729, %rsi       # imm = 0xFFFFFFFFF7FFFFFF
	movq	%rsi, 236(%rcx)
	movl	-4968(%rbp), %eax
	movq	-16(%rbp), %rcx
	addl	2408(%rcx), %eax
	movl	%eax, 2408(%rcx)
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
	jmp	.LBB107_336
.LBB107_300:                            # %if.else.1349
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$9, 2124(%rax)
	jne	.LBB107_317
# BB#301:                               # %land.lhs.true.1353
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_317
# BB#302:                               # %if.then.1362
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_307
# BB#303:                               # %cond.true.1369
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_305
# BB#304:                               # %cond.true.1374
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5404(%rbp)       # 4-byte Spill
	jmp	.LBB107_306
.LBB107_305:                            # %cond.false.1377
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5404(%rbp)       # 4-byte Spill
.LBB107_306:                            # %cond.end.1382
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5404(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5408(%rbp)       # 4-byte Spill
	jmp	.LBB107_311
.LBB107_307:                            # %cond.false.1384
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_309
# BB#308:                               # %cond.true.1389
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5412(%rbp)       # 4-byte Spill
	jmp	.LBB107_310
.LBB107_309:                            # %cond.false.1392
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5412(%rbp)       # 4-byte Spill
.LBB107_310:                            # %cond.end.1397
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5412(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5408(%rbp)       # 4-byte Spill
.LBB107_311:                            # %cond.end.1399
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5408(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB107_313
# BB#312:                               # %if.then.1403
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$7, %esi
	movq	-16(%rbp), %rdi
	callq	produce_special_glyphs
.LBB107_313:                            # %if.end.1404
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2320(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2408(%rax), %ecx
	movl	%ecx, 2408(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rdx
	andq	$-4194305, %rdx         # imm = 0xFFFFFFFFFFBFFFFF
	orq	$4194304, %rdx          # imm = 0x400000
	movq	%rdx, 236(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rdx
	andq	$-8193, %rdx            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rdx             # imm = 0x2000
	movq	%rdx, 236(%rax)
	movq	-16(%rbp), %rax
	movl	2320(%rax), %ecx
	subl	-4968(%rbp), %ecx
	movw	%cx, %si
	movq	-5024(%rbp), %rax
	movw	%si, 16(%rax)
	movq	-16(%rbp), %rax
	movw	2112(%rax), %si
	andw	$-257, %si              # imm = 0xFFFFFFFFFFFFFEFF
	orw	$256, %si               # imm = 0x100
	movw	%si, 2112(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jg	.LBB107_315
# BB#314:                               # %lor.lhs.false.1432
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB107_316
.LBB107_315:                            # %if.then.1442
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
.LBB107_316:                            # %if.end.1443
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_335
.LBB107_317:                            # %if.else.1444
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_319
# BB#318:                               # %if.then.1450
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	-4956(%rbp), %edx
	addl	-5012(%rbp), %edx
	subl	%edx, %ecx
	movl	%ecx, %esi
	callq	unproduce_glyphs
.LBB107_319:                            # %if.end.1456
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4956(%rbp), %eax
	addl	-5012(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movl	-4964(%rbp), %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 2404(%rdx)
	movl	-4968(%rbp), %eax
	movq	-16(%rbp), %rdx
	addl	2408(%rdx), %eax
	movl	%eax, 2408(%rdx)
	movq	-16(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	208(%rdx), %rdx
	shrq	$23, %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$2, %eax
	jne	.LBB107_330
# BB#320:                               # %lor.lhs.false.1472
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_325
# BB#321:                               # %cond.true.1479
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_323
# BB#322:                               # %cond.true.1484
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5416(%rbp)       # 4-byte Spill
	jmp	.LBB107_324
.LBB107_323:                            # %cond.false.1487
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5416(%rbp)       # 4-byte Spill
.LBB107_324:                            # %cond.end.1492
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5416(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5420(%rbp)       # 4-byte Spill
	jmp	.LBB107_329
.LBB107_325:                            # %cond.false.1494
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_327
# BB#326:                               # %cond.true.1499
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5424(%rbp)       # 4-byte Spill
	jmp	.LBB107_328
.LBB107_327:                            # %cond.false.1502
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5424(%rbp)       # 4-byte Spill
.LBB107_328:                            # %cond.end.1507
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5424(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5420(%rbp)       # 4-byte Spill
.LBB107_329:                            # %cond.end.1509
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5420(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB107_331
.LBB107_330:                            # %if.then.1513
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	$7, %esi
	movq	-16(%rbp), %rdi
	callq	produce_special_glyphs
.LBB107_331:                            # %if.end.1514
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-8193, %rcx            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rcx             # imm = 0x2000
	movq	%rcx, 236(%rax)
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
	cmpl	$1, -4972(%rbp)
	jle	.LBB107_334
# BB#332:                               # %land.lhs.true.1521
                                        #   in Loop: Header=BB107_13 Depth=1
	cmpl	$0, -5012(%rbp)
	jle	.LBB107_334
# BB#333:                               # %if.then.1524
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-4194305, %rcx         # imm = 0xFFFFFFFFFFBFFFFF
	orq	$4194304, %rcx          # imm = 0x400000
	movq	%rcx, 236(%rax)
	movq	-16(%rbp), %rax
	movw	2112(%rax), %dx
	andw	$-257, %dx              # imm = 0xFFFFFFFFFFFFFEFF
	orw	$256, %dx               # imm = 0x100
	movw	%dx, 2112(%rax)
.LBB107_334:                            # %if.end.1533
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-4976(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2380(%rcx)
	movl	-4980(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2384(%rcx)
	movl	-4984(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2396(%rcx)
	movl	-4988(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2400(%rcx)
.LBB107_335:                            # %if.end.1538
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_336
.LBB107_336:                            # %if.end.1539
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_337
.LBB107_337:                            # %if.end.1540
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_338
.LBB107_338:                            # %if.end.1541
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_372
.LBB107_339:                            # %if.else.1542
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-5016(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2316(%rcx), %eax
	jle	.LBB107_368
# BB#340:                               # %if.then.1546
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movl	2444(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2444(%rax)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_356
# BB#341:                               # %if.then.1554
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_342
.LBB107_342:                            # %do.body.1555
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -5425(%rbp)        # 1-byte Spill
	jne	.LBB107_344
# BB#343:                               # %land.rhs.1559
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	sete	%cl
	movb	%cl, -5425(%rbp)        # 1-byte Spill
.LBB107_344:                            # %land.end.1563
                                        #   in Loop: Header=BB107_140 Depth=2
	movb	-5425(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -5073(%rbp)
	testb	$1, -5073(%rbp)
	je	.LBB107_346
# BB#345:                               # %cond.true.1568
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	2176(%rax), %rax
	movq	%rax, -5440(%rbp)       # 8-byte Spill
	jmp	.LBB107_347
.LBB107_346:                            # %cond.false.1571
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -5440(%rbp)       # 8-byte Spill
.LBB107_347:                            # %cond.end.1575
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-5440(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5088(%rbp)
	testb	$1, -5073(%rbp)
	je	.LBB107_349
# BB#348:                               # %cond.true.1580
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	current_buffer, %rdi
	movq	-5088(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -5448(%rbp)       # 8-byte Spill
	jmp	.LBB107_350
.LBB107_349:                            # %cond.false.1582
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -5448(%rbp)       # 8-byte Spill
.LBB107_350:                            # %cond.end.1586
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-5448(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5096(%rbp)
	movq	-5088(%rbp), %rax
	cmpq	-4920(%rbp), %rax
	jge	.LBB107_352
# BB#351:                               # %if.then.1590
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-5088(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	-5096(%rbp), %rax
	movq	%rax, -4936(%rbp)
.LBB107_352:                            # %if.end.1591
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4928(%rbp), %rax
	jle	.LBB107_354
# BB#353:                               # %if.then.1597
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -4944(%rbp)
.LBB107_354:                            # %if.end.1604
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_355
.LBB107_355:                            # %do.end.1605
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_356
.LBB107_356:                            # %if.end.1606
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-4968(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2316(%rcx), %eax
	jge	.LBB107_359
# BB#357:                               # %land.lhs.true.1610
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_359
# BB#358:                               # %if.then.1616
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-4968(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	2316(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 44(%rcx)
.LBB107_359:                            # %if.end.1620
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_367
# BB#360:                               # %land.lhs.true.1627
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-5016(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jle	.LBB107_367
# BB#361:                               # %land.lhs.true.1631
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB107_366
# BB#362:                               # %land.lhs.true.1635
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_364
# BB#363:                               # %cond.true.1640
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5452(%rbp)       # 4-byte Spill
	jmp	.LBB107_365
.LBB107_364:                            # %cond.false.1643
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5452(%rbp)       # 4-byte Spill
.LBB107_365:                            # %cond.end.1648
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-5452(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB107_367
.LBB107_366:                            # %if.then.1652
                                        #   in Loop: Header=BB107_140 Depth=2
	movq	-16(%rbp), %rax
	movl	2320(%rax), %ecx
	subl	-5016(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 44(%rax)
.LBB107_367:                            # %if.end.1656
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_369
.LBB107_368:                            # %if.else.1657
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_369
.LBB107_369:                            # %if.end.1658
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_370
.LBB107_370:                            # %if.end.1659
                                        #   in Loop: Header=BB107_140 Depth=2
	jmp	.LBB107_371
.LBB107_371:                            # %for.inc
                                        #   in Loop: Header=BB107_140 Depth=2
	movl	-5012(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5012(%rbp)
	movl	-5016(%rbp), %eax
	movl	%eax, -4968(%rbp)
	jmp	.LBB107_140
.LBB107_372:                            # %for.end
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_389
# BB#373:                               # %land.lhs.true.1667
                                        #   in Loop: Header=BB107_13 Depth=1
	cmpl	$0, -4972(%rbp)
	jne	.LBB107_389
# BB#374:                               # %if.then.1670
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_375
.LBB107_375:                            # %do.body.1671
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -5453(%rbp)        # 1-byte Spill
	jne	.LBB107_377
# BB#376:                               # %land.rhs.1675
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	sete	%cl
	movb	%cl, -5453(%rbp)        # 1-byte Spill
.LBB107_377:                            # %land.end.1679
                                        #   in Loop: Header=BB107_13 Depth=1
	movb	-5453(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -5097(%rbp)
	testb	$1, -5097(%rbp)
	je	.LBB107_379
# BB#378:                               # %cond.true.1684
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	2176(%rax), %rax
	movq	%rax, -5464(%rbp)       # 8-byte Spill
	jmp	.LBB107_380
.LBB107_379:                            # %cond.false.1687
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -5464(%rbp)       # 8-byte Spill
.LBB107_380:                            # %cond.end.1691
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5464(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5112(%rbp)
	testb	$1, -5097(%rbp)
	je	.LBB107_382
# BB#381:                               # %cond.true.1696
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	current_buffer, %rdi
	movq	-5112(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -5472(%rbp)       # 8-byte Spill
	jmp	.LBB107_383
.LBB107_382:                            # %cond.false.1698
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -5472(%rbp)       # 8-byte Spill
.LBB107_383:                            # %cond.end.1702
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5472(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5120(%rbp)
	movq	-5112(%rbp), %rax
	cmpq	-4920(%rbp), %rax
	jge	.LBB107_385
# BB#384:                               # %if.then.1706
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-5112(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	-5120(%rbp), %rax
	movq	%rax, -4936(%rbp)
.LBB107_385:                            # %if.end.1707
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-4928(%rbp), %rax
	jle	.LBB107_387
# BB#386:                               # %if.then.1713
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -4944(%rbp)
.LBB107_387:                            # %if.end.1720
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_388
.LBB107_388:                            # %do.end.1721
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_389
.LBB107_389:                            # %if.end.1722
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2380(%rax), %ecx
	jle	.LBB107_391
# BB#390:                               # %cond.true.1727
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	56(%rax), %ecx
	movl	%ecx, -5476(%rbp)       # 4-byte Spill
	jmp	.LBB107_392
.LBB107_391:                            # %cond.false.1729
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -5476(%rbp)       # 4-byte Spill
.LBB107_392:                            # %cond.end.1731
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5476(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-24(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	2380(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2384(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB107_394
# BB#393:                               # %cond.true.1740
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5480(%rbp)       # 4-byte Spill
	jmp	.LBB107_395
.LBB107_394:                            # %cond.false.1742
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -5480(%rbp)       # 4-byte Spill
.LBB107_395:                            # %cond.end.1746
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5480(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-24(%rbp), %rcx
	movl	64(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2396(%rcx), %eax
	jle	.LBB107_397
# BB#396:                               # %cond.true.1753
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -5484(%rbp)       # 4-byte Spill
	jmp	.LBB107_398
.LBB107_397:                            # %cond.false.1755
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movl	%ecx, -5484(%rbp)       # 4-byte Spill
.LBB107_398:                            # %cond.end.1757
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5484(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-24(%rbp), %rcx
	movl	68(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	2396(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2400(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB107_400
# BB#399:                               # %cond.true.1766
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	68(%rax), %ecx
	movl	%ecx, -5488(%rbp)       # 4-byte Spill
	jmp	.LBB107_401
.LBB107_400:                            # %cond.false.1768
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2400(%rax), %ecx
	movl	%ecx, -5488(%rbp)       # 4-byte Spill
.LBB107_401:                            # %cond.end.1772
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5488(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movq	-24(%rbp), %rcx
	movl	76(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2332(%rcx), %eax
	jle	.LBB107_403
# BB#402:                               # %cond.true.1779
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movl	76(%rax), %ecx
	movl	%ecx, -5492(%rbp)       # 4-byte Spill
	jmp	.LBB107_404
.LBB107_403:                            # %cond.false.1781
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-16(%rbp), %rax
	movl	2332(%rax), %ecx
	movl	%ecx, -5492(%rbp)       # 4-byte Spill
.LBB107_404:                            # %cond.end.1783
                                        #   in Loop: Header=BB107_13 Depth=1
	movl	-5492(%rbp), %eax       # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 76(%rcx)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$13, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	jne	.LBB107_406
# BB#405:                               # %lor.lhs.false.1792
                                        #   in Loop: Header=BB107_13 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_407
.LBB107_406:                            # %if.then.1799
	jmp	.LBB107_508
.LBB107_407:                            # %if.end.1800
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_408
.LBB107_408:                            # %if.end.1801
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_409
.LBB107_409:                            # %at_end_of_line
                                        #   Parent Loop BB107_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB107_429
# BB#410:                               # %land.lhs.true.1805
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB107_413
# BB#411:                               # %lor.lhs.false.1809
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB107_429
# BB#412:                               # %land.lhs.true.1813
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB107_429
.LBB107_413:                            # %if.then.1816
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -5124(%rbp)
	movq	-16(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	STRINGP
	xorl	%edi, %edi
	movq	-24(%rbp), %rdx
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %esi
	movq	236(%rdx), %r8
	shlq	$26, %rsi
	andq	$-67108865, %r8         # imm = 0xFFFFFFFFFBFFFFFF
	orq	%rsi, %r8
	movq	%r8, 236(%rdx)
	movq	globals+1696, %rdx
	movq	%rdx, -5504(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5504(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB107_425
# BB#414:                               # %land.lhs.true.1830
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_425
# BB#415:                               # %land.lhs.true.1839
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB107_420
# BB#416:                               # %cond.true.1844
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_418
# BB#417:                               # %cond.true.1849
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5508(%rbp)       # 4-byte Spill
	jmp	.LBB107_419
.LBB107_418:                            # %cond.false.1852
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5508(%rbp)       # 4-byte Spill
.LBB107_419:                            # %cond.end.1857
	movl	-5508(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB107_424
	jmp	.LBB107_425
.LBB107_420:                            # %cond.false.1861
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_422
# BB#421:                               # %cond.true.1866
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5512(%rbp)       # 4-byte Spill
	jmp	.LBB107_423
.LBB107_422:                            # %cond.false.1869
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5512(%rbp)       # 4-byte Spill
.LBB107_423:                            # %cond.end.1874
	movl	-5512(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB107_425
.LBB107_424:                            # %land.lhs.true.1878
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	je	.LBB107_426
.LBB107_425:                            # %if.then.1883
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	callq	append_space_for_newline
	movb	%al, -5513(%rbp)        # 1-byte Spill
.LBB107_426:                            # %if.end.1885
	movq	-16(%rbp), %rdi
	callq	extend_face_to_end_of_line
	cmpl	$0, -5124(%rbp)
	jne	.LBB107_428
# BB#427:                               # %if.then.1888
	movq	-16(%rbp), %rax
	movq	2296(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rax, (%rcx)
.LBB107_428:                            # %if.end.1893
	movl	$1, %esi
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 2416(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 2424(%rax)
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-16(%rbp), %rax
	movl	$0, 2408(%rax)
	jmp	.LBB107_508
.LBB107_429:                            # %if.end.1897
                                        #   in Loop: Header=BB107_409 Depth=2
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-16(%rbp), %rdi
	cmpl	$0, 2116(%rdi)
	jne	.LBB107_507
# BB#430:                               # %land.lhs.true.1901
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_440
# BB#431:                               # %land.lhs.true.1910
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_435
# BB#432:                               # %cond.true.1917
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_434
# BB#433:                               # %cond.true.1922
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jne	.LBB107_439
	jmp	.LBB107_438
.LBB107_434:                            # %cond.false.1926
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 344(%rax)
	jne	.LBB107_439
	jmp	.LBB107_438
.LBB107_435:                            # %cond.false.1932
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_437
# BB#436:                               # %cond.true.1937
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jne	.LBB107_439
	jmp	.LBB107_438
.LBB107_437:                            # %cond.false.1941
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 348(%rax)
	jne	.LBB107_439
.LBB107_438:                            # %lor.lhs.false.1947
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$3, 2104(%rax)
	jne	.LBB107_440
.LBB107_439:                            # %cond.true.1951
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jge	.LBB107_441
	jmp	.LBB107_507
.LBB107_440:                            # %cond.false.1956
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jle	.LBB107_507
.LBB107_441:                            # %if.then.1961
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_452
# BB#442:                               # %lor.lhs.false.1970
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_447
# BB#443:                               # %cond.true.1977
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_445
# BB#444:                               # %cond.true.1982
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5520(%rbp)       # 4-byte Spill
	jmp	.LBB107_446
.LBB107_445:                            # %cond.false.1985
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5520(%rbp)       # 4-byte Spill
.LBB107_446:                            # %cond.end.1990
                                        #   in Loop: Header=BB107_409 Depth=2
	movl	-5520(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5524(%rbp)       # 4-byte Spill
	jmp	.LBB107_451
.LBB107_447:                            # %cond.false.1992
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_449
# BB#448:                               # %cond.true.1997
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5528(%rbp)       # 4-byte Spill
	jmp	.LBB107_450
.LBB107_449:                            # %cond.false.2000
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5528(%rbp)       # 4-byte Spill
.LBB107_450:                            # %cond.end.2005
                                        #   in Loop: Header=BB107_409 Depth=2
	movl	-5528(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5524(%rbp)       # 4-byte Spill
.LBB107_451:                            # %cond.end.2007
                                        #   in Loop: Header=BB107_409 Depth=2
	movl	-5524(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB107_477
.LBB107_452:                            # %if.then.2011
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_460
# BB#453:                               # %if.then.2018
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -5128(%rbp)
.LBB107_454:                            # %for.cond.2023
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -5128(%rbp)
	jle	.LBB107_459
# BB#455:                               # %for.body.2026
                                        #   in Loop: Header=BB107_454 Depth=1
	movslq	-5128(%rbp), %rax
	movq	-24(%rbp), %rcx
	imulq	$48, %rax, %rax
	addq	8(%rcx), %rax
	movl	24(%rax), %edx
	shrl	$7, %edx
	andl	$1, %edx
	testl	$1, %edx
	jne	.LBB107_457
# BB#456:                               # %if.then.2035
	jmp	.LBB107_459
.LBB107_457:                            # %if.end.2036
                                        #   in Loop: Header=BB107_454 Depth=1
	jmp	.LBB107_458
.LBB107_458:                            # %for.inc.2037
                                        #   in Loop: Header=BB107_454 Depth=1
	movl	-5128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -5128(%rbp)
	jmp	.LBB107_454
.LBB107_459:                            # %for.end.2038
	jmp	.LBB107_467
.LBB107_460:                            # %if.else.2039
	movl	$0, -5128(%rbp)
.LBB107_461:                            # %for.cond.2040
                                        # =>This Inner Loop Header: Depth=1
	movl	-5128(%rbp), %eax
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB107_466
# BB#462:                               # %for.body.2046
                                        #   in Loop: Header=BB107_461 Depth=1
	movslq	-5128(%rbp), %rax
	movq	-24(%rbp), %rcx
	imulq	$48, %rax, %rax
	addq	8(%rcx), %rax
	movl	24(%rax), %edx
	shrl	$7, %edx
	andl	$1, %edx
	testl	$1, %edx
	jne	.LBB107_464
# BB#463:                               # %if.then.2056
	jmp	.LBB107_466
.LBB107_464:                            # %if.end.2057
                                        #   in Loop: Header=BB107_461 Depth=1
	jmp	.LBB107_465
.LBB107_465:                            # %for.inc.2058
                                        #   in Loop: Header=BB107_461 Depth=1
	movl	-5128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5128(%rbp)
	jmp	.LBB107_461
.LBB107_466:                            # %for.end.2060
	movq	-16(%rbp), %rdi
	movl	-5128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	unproduce_glyphs
	movq	-24(%rbp), %rdi
	movswl	34(%rdi), %eax
	movl	-5128(%rbp), %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -5128(%rbp)
.LBB107_467:                            # %if.end.2067
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jle	.LBB107_476
# BB#468:                               # %if.then.2072
	movl	-4964(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	cmpl	$2, %eax
	je	.LBB107_474
# BB#469:                               # %if.then.2082
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -5132(%rbp)
.LBB107_470:                            # %for.cond.2086
                                        # =>This Inner Loop Header: Depth=1
	movl	-5128(%rbp), %eax
	cmpl	-5132(%rbp), %eax
	jge	.LBB107_473
# BB#471:                               # %for.body.2089
                                        #   in Loop: Header=BB107_470 Depth=1
	movl	$6, %esi
	movl	-5128(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movq	-16(%rbp), %rdi
	callq	produce_special_glyphs
# BB#472:                               # %for.inc.2093
                                        #   in Loop: Header=BB107_470 Depth=1
	movl	-5128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -5128(%rbp)
	jmp	.LBB107_470
.LBB107_473:                            # %for.end.2095
	jmp	.LBB107_475
.LBB107_474:                            # %if.else.2096
	movl	$6, %esi
	movl	-5128(%rbp), %eax
	movw	%ax, %cx
	movq	-24(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movq	-16(%rbp), %rdi
	callq	produce_special_glyphs
.LBB107_475:                            # %if.end.2100
	movl	-4960(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2444(%rcx)
.LBB107_476:                            # %if.end.2102
	jmp	.LBB107_498
.LBB107_477:                            # %if.else.2103
                                        #   in Loop: Header=BB107_409 Depth=2
	xorl	%edi, %edi
	movq	globals+1696, %rax
	movq	%rax, -5536(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5536(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB107_497
# BB#478:                               # %land.lhs.true.2107
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_497
# BB#479:                               # %land.lhs.true.2116
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB107_484
# BB#480:                               # %cond.true.2121
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_482
# BB#481:                               # %cond.true.2126
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5540(%rbp)       # 4-byte Spill
	jmp	.LBB107_483
.LBB107_482:                            # %cond.false.2129
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5540(%rbp)       # 4-byte Spill
.LBB107_483:                            # %cond.end.2134
                                        #   in Loop: Header=BB107_409 Depth=2
	movl	-5540(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jg	.LBB107_488
	jmp	.LBB107_497
.LBB107_484:                            # %cond.false.2138
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_486
# BB#485:                               # %cond.true.2143
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5544(%rbp)       # 4-byte Spill
	jmp	.LBB107_487
.LBB107_486:                            # %cond.false.2146
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5544(%rbp)       # 4-byte Spill
.LBB107_487:                            # %cond.end.2151
                                        #   in Loop: Header=BB107_409 Depth=2
	movl	-5544(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB107_497
.LBB107_488:                            # %land.lhs.true.2155
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jne	.LBB107_497
# BB#489:                               # %if.then.2160
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB107_491
# BB#490:                               # %if.then.2162
	movq	-16(%rbp), %rax
	movl	$0, 2408(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-32769, %rcx           # imm = 0xFFFFFFFFFFFF7FFF
	orq	$32768, %rcx            # imm = 0x8000
	movq	%rcx, 236(%rax)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-134217729, %rcx       # imm = 0xFFFFFFFFF7FFFFFF
	orq	$134217728, %rcx        # imm = 0x8000000
	movq	%rcx, 236(%rax)
	jmp	.LBB107_508
.LBB107_491:                            # %if.end.2172
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB107_496
# BB#492:                               # %land.lhs.true.2176
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB107_495
# BB#493:                               # %lor.lhs.false.2180
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB107_496
# BB#494:                               # %land.lhs.true.2184
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB107_496
.LBB107_495:                            # %if.then.2187
                                        #   in Loop: Header=BB107_409 Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-134217729, %rcx       # imm = 0xFFFFFFFFF7FFFFFF
	orq	$134217728, %rcx        # imm = 0x8000000
	movq	%rcx, 236(%rax)
	jmp	.LBB107_409
.LBB107_496:                            # %if.end.2192
	movl	-4964(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movl	-4960(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2444(%rcx)
.LBB107_497:                            # %if.end.2195
	jmp	.LBB107_498
.LBB107_498:                            # %if.end.2196
	xorl	%esi, %esi
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-4097, %rcx            # imm = 0xFFFFFFFFFFFFEFFF
	orq	$4096, %rcx             # imm = 0x1000
	movq	%rcx, 236(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 2408(%rax)
	movq	-16(%rbp), %rdi
	callq	reseat_at_next_visible_line_start
	movq	-16(%rbp), %rax
	cmpq	$1, 320(%rax)
	jle	.LBB107_505
# BB#499:                               # %if.then.2206
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	320(%rdx), %rdx
	movq	current_buffer, %rsi
	cmpq	776(%rsi), %rdx
	movb	%cl, -5545(%rbp)        # 1-byte Spill
	jl	.LBB107_504
# BB#500:                               # %land.rhs.2213
	movq	current_buffer, %rax
	movq	776(%rax), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB107_502
# BB#501:                               # %cond.true.2220
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5560(%rbp)       # 8-byte Spill
	jmp	.LBB107_503
.LBB107_502:                            # %cond.false.2223
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5560(%rbp)       # 8-byte Spill
	jmp	.LBB107_503
.LBB107_503:                            # %cond.end.2224
	movq	-5560(%rbp), %rax       # 8-byte Reload
	movq	current_buffer, %rcx
	movq	776(%rcx), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	setne	%sil
	movb	%sil, -5545(%rbp)       # 1-byte Spill
.LBB107_504:                            # %land.end.2236
	movb	-5545(%rbp), %al        # 1-byte Reload
	movq	-24(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$15, %rsi
	andq	$-32769, %rdi           # imm = 0xFFFFFFFFFFFF7FFF
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
	jmp	.LBB107_506
.LBB107_505:                            # %if.else.2244
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-32769, %rcx           # imm = 0xFFFFFFFFFFFF7FFF
	movq	%rcx, 236(%rax)
.LBB107_506:                            # %if.end.2248
	jmp	.LBB107_508
.LBB107_507:                            # %if.end.2249
                                        #   in Loop: Header=BB107_13 Depth=1
	jmp	.LBB107_13
.LBB107_508:                            # %while.end.2250
	cmpq	$0, -4840(%rbp)
	je	.LBB107_510
# BB#509:                               # %if.then.2252
	movl	$1, %esi
	movq	-4840(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB107_510:                            # %if.end.2253
	movq	-16(%rbp), %rax
	cmpl	$0, 2316(%rax)
	je	.LBB107_526
# BB#511:                               # %land.lhs.true.2256
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-24(%rbp), %rcx
	cmpq	80(%rcx), %rax
	je	.LBB107_526
# BB#512:                               # %if.then.2265
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB107_524
# BB#513:                               # %lor.lhs.false.2274
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB107_518
# BB#514:                               # %cond.true.2281
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB107_516
# BB#515:                               # %cond.true.2286
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -5564(%rbp)       # 4-byte Spill
	jmp	.LBB107_517
.LBB107_516:                            # %cond.false.2289
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -5564(%rbp)       # 4-byte Spill
.LBB107_517:                            # %cond.end.2294
	movl	-5564(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5568(%rbp)       # 4-byte Spill
	jmp	.LBB107_522
.LBB107_518:                            # %cond.false.2296
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB107_520
# BB#519:                               # %cond.true.2301
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -5572(%rbp)       # 4-byte Spill
	jmp	.LBB107_521
.LBB107_520:                            # %cond.false.2304
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -5572(%rbp)       # 4-byte Spill
.LBB107_521:                            # %cond.end.2309
	movl	-5572(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5568(%rbp)       # 4-byte Spill
.LBB107_522:                            # %cond.end.2311
	movl	-5568(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB107_525
# BB#523:                               # %land.lhs.true.2315
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$3, %ecx
	je	.LBB107_525
.LBB107_524:                            # %if.then.2322
	movq	-16(%rbp), %rdi
	callq	insert_left_trunc_glyphs
.LBB107_525:                            # %if.end.2323
	movq	-24(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-2049, %rcx            # imm = 0xFFFFFFFFFFFFF7FF
	orq	$2048, %rcx             # imm = 0x800
	movq	%rcx, 236(%rax)
.LBB107_526:                            # %if.end.2327
	movl	$48, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$128, %rcx
	movq	-16(%rbp), %rsi
	addq	$312, %rsi              # imm = 0x138
	movq	%rcx, %rdi
	callq	memcpy
	movq	-16(%rbp), %rcx
	movl	2456(%rcx), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	jne	.LBB107_528
# BB#527:                               # %if.then.2334
	movq	-24(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	80(%rcx), %rdx
	movq	%rdx, 176(%rax)
	movq	88(%rcx), %rcx
	movq	%rcx, 184(%rax)
	movq	-24(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	128(%rcx), %rdx
	movq	%rdx, 192(%rax)
	movq	136(%rcx), %rcx
	movq	%rcx, 200(%rax)
	jmp	.LBB107_529
.LBB107_528:                            # %if.else.2339
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-4920(%rbp), %rdx
	movq	-4936(%rbp), %rcx
	movq	-4928(%rbp), %r8
	movq	-4944(%rbp), %r9
	callq	find_row_edges
.LBB107_529:                            # %if.end.2340
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_531
# BB#530:                               # %lor.lhs.false.2347
	testb	$1, overlay_arrow_seen
	jne	.LBB107_549
.LBB107_531:                            # %land.lhs.true.2349
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	overlay_arrow_at_row
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -5584(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5584(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB107_532
	jmp	.LBB107_549
.LBB107_532:                            # %if.then.2354
	movq	-32(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB107_533
	jmp	.LBB107_547
.LBB107_533:                            # %if.then.2356
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	get_overlay_arrow_glyph_row
	movq	%rax, -5144(%rbp)
	movq	-5144(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5152(%rbp)
	movq	-5152(%rbp), %rax
	movq	-5144(%rbp), %rsi
	movswl	34(%rsi), %ecx
	movslq	%ecx, %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rax
	movq	%rax, -5160(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5168(%rbp)
.LBB107_534:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-5152(%rbp), %rax
	cmpq	-5160(%rbp), %rax
	jae	.LBB107_536
# BB#535:                               # %while.body.2372
                                        #   in Loop: Header=BB107_534 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-5168(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$48, %rsi
	movq	%rsi, -5168(%rbp)
	movq	-5152(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$48, %rdi
	movq	%rdi, -5152(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB107_534
.LBB107_536:                            # %while.end.2374
	movq	-5168(%rbp), %rax
	movq	%rax, -5176(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -5184(%rbp)
.LBB107_537:                            # %while.cond.2382
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-5176(%rbp), %rdx
	cmpq	-5184(%rbp), %rdx
	movb	%cl, -5585(%rbp)        # 1-byte Spill
	jae	.LBB107_539
# BB#538:                               # %land.rhs.2385
                                        #   in Loop: Header=BB107_537 Depth=1
	movq	-5176(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	movb	%dl, -5585(%rbp)        # 1-byte Spill
.LBB107_539:                            # %land.end.2392
                                        #   in Loop: Header=BB107_537 Depth=1
	movb	-5585(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB107_540
	jmp	.LBB107_541
.LBB107_540:                            # %while.body.2393
                                        #   in Loop: Header=BB107_537 Depth=1
	movq	-5176(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -5176(%rbp)
	jmp	.LBB107_537
.LBB107_541:                            # %while.end.2395
	movq	-5176(%rbp), %rax
	cmpq	-5168(%rbp), %rax
	jbe	.LBB107_546
# BB#542:                               # %if.then.2398
	jmp	.LBB107_543
.LBB107_543:                            # %while.cond.2399
                                        # =>This Inner Loop Header: Depth=1
	movq	-5176(%rbp), %rax
	cmpq	-5184(%rbp), %rax
	jae	.LBB107_545
# BB#544:                               # %while.body.2402
                                        #   in Loop: Header=BB107_543 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-5168(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$48, %rsi
	movq	%rsi, -5168(%rbp)
	movq	-5176(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$48, %rdi
	movq	%rdi, -5176(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB107_543
.LBB107_545:                            # %while.end.2405
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-5176(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movw	%ax, %di
	movq	-24(%rbp), %rax
	movw	%di, 34(%rax)
.LBB107_546:                            # %if.end.2415
	jmp	.LBB107_548
.LBB107_547:                            # %if.else.2416
	movq	-32(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 208(%rax)
.LBB107_548:                            # %if.end.2418
	movb	$1, overlay_arrow_seen
.LBB107_549:                            # %if.end.2419
	xorl	%edi, %edi
	movq	globals+2168, %rax
	movq	%rax, -5600(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5600(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB107_551
# BB#550:                               # %if.then.2423
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rsi
	callq	highlight_trailing_whitespace
.LBB107_551:                            # %if.end.2426
	movq	-16(%rbp), %rdi
	callq	compute_line_metrics
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdi
	cmpl	$1, 24(%rdi)
	movb	%cl, -5601(%rbp)        # 1-byte Spill
	jne	.LBB107_553
# BB#552:                               # %land.rhs.2429
	movq	-16(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	movb	%cl, -5601(%rbp)        # 1-byte Spill
.LBB107_553:                            # %land.end.2435
	movb	-5601(%rbp), %al        # 1-byte Reload
	movq	-24(%rbp), %rcx
	movzbl	%al, %edx
	movl	%edx, %esi
	movl	%esi, %edx
	andl	$1, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$29, %rsi
	andq	$-536870913, %rdi       # imm = 0xFFFFFFFFDFFFFFFF
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %rsi
	movzwl	2448(%rcx), %edx
	movl	%edx, %ecx
	movw	%cx, %r8w
	movzwl	220(%rsi), %edx
	movl	%edx, %ecx
	movzbl	222(%rsi), %edx
	movl	%edx, %edi
	movb	%dil, %al
	movb	%al, 222(%rsi)
	movw	%cx, %r9w
	movw	%r9w, 220(%rsi)
	movw	%r8w, 212(%rsi)
	movq	-16(%rbp), %rcx
	movl	2452(%rcx), %edx
	andl	$1048575, %edx          # imm = 0xFFFFF
	movq	-24(%rbp), %rcx
	movq	212(%rcx), %rsi
	movzbl	222(%rcx), %r10d
	shll	$16, %r10d
	andl	$15728640, %r10d        # imm = 0xF00000
	orl	%edx, %r10d
	shrl	$16, %r10d
	movq	%rsi, 212(%rcx)
	movw	%dx, %r8w
	movw	%r8w, 220(%rcx)
	movb	%r10b, %al
	movb	%al, 222(%rcx)
	movq	-16(%rbp), %rcx
	movq	2448(%rcx), %rcx
	movq	-24(%rbp), %rsi
	shrq	$16, %rcx
	movw	%cx, %r8w
	movzwl	220(%rsi), %edx
	movl	%edx, %ecx
	movzbl	222(%rsi), %edx
	movl	%edx, %edi
	movb	%dil, %al
	movb	%al, 222(%rsi)
	movw	%cx, %r9w
	movw	%r9w, 220(%rsi)
	movw	%r8w, 214(%rsi)
	movq	-16(%rbp), %rcx
	movl	2456(%rcx), %edx
	andl	$1048575, %edx          # imm = 0xFFFFF
	movq	-24(%rbp), %rcx
	movl	224(%rcx), %r10d
	andl	$1048575, %edx          # imm = 0xFFFFF
	andl	$-1048576, %r10d        # imm = 0xFFFFFFFFFFF00000
	orl	%edx, %r10d
	movl	%r10d, 224(%rcx)
	movq	-16(%rbp), %rcx
	movq	2448(%rcx), %rsi
	andq	$-65536, %rsi           # imm = 0xFFFFFFFFFFFF0000
	movq	%rsi, 2448(%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$-4503595332403201, %rsi # imm = 0xFFF00000FFFFFFFF
	andq	2448(%rcx), %rsi
	movq	%rsi, 2448(%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$-4294901761, %rsi      # imm = 0xFFFFFFFF0000FFFF
	andq	2448(%rcx), %rsi
	movq	%rsi, 2448(%rcx)
	movq	-16(%rbp), %rcx
	movl	2456(%rcx), %edx
	andl	$-1048576, %edx         # imm = 0xFFFFFFFFFFF00000
	movl	%edx, 2456(%rcx)
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	364(%rcx), %edx
	movl	%edx, -4908(%rbp)
	cmpl	$0, -4908(%rbp)
	jl	.LBB107_556
# BB#554:                               # %lor.lhs.false.2494
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB107_560
# BB#555:                               # %land.lhs.true.2501
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4908(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB107_560
.LBB107_556:                            # %land.lhs.true.2512
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-24(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jl	.LBB107_560
# BB#557:                               # %land.lhs.true.2518
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-24(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB107_560
# BB#558:                               # %land.lhs.true.2525
	movq	-24(%rbp), %rdi
	callq	cursor_row_p
	testb	$1, %al
	jne	.LBB107_559
	jmp	.LBB107_560
.LBB107_559:                            # %if.then.2528
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	200(%rdx), %rdx
	movq	%rcx, -5616(%rbp)       # 8-byte Spill
	movq	-5616(%rbp), %r8        # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -5617(%rbp)        # 1-byte Spill
.LBB107_560:                            # %if.end.2533
	movq	-16(%rbp), %rax
	movl	$0, 2444(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 2404(%rax)
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2432(%rax), %ecx
	movl	%ecx, 2432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 2416(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 2424(%rax)
	movq	-16(%rbp), %rax
	movl	2440(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2440(%rax)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rdx
	addq	$256, %rdx              # imm = 0x100
	movq	%rdx, 2352(%rax)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	200(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rsi
	movq	200(%rsi), %rsi
	movslq	24(%rsi), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rdx
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rsi
	movq	80(%rsi), %rdi
	movq	%rax, -5632(%rbp)       # 8-byte Spill
	movq	%rdx, -5640(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB107_561
	jmp	.LBB107_567
.LBB107_561:                            # %cond.true.2560
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5641(%rbp)        # 1-byte Spill
	jne	.LBB107_566
# BB#562:                               # %land.lhs.true.2566
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5641(%rbp)        # 1-byte Spill
	jne	.LBB107_566
# BB#563:                               # %land.lhs.true.2572
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5641(%rbp)        # 1-byte Spill
	je	.LBB107_566
# BB#564:                               # %land.lhs.true.2581
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5656(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5656(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5641(%rbp)        # 1-byte Spill
	je	.LBB107_566
# BB#565:                               # %land.rhs.2588
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -5641(%rbp)        # 1-byte Spill
.LBB107_566:                            # %land.end.2595
	movb	-5641(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5660(%rbp)       # 4-byte Spill
	jmp	.LBB107_568
.LBB107_567:                            # %cond.false.2596
	xorl	%eax, %eax
	movl	%eax, -5660(%rbp)       # 4-byte Spill
	jmp	.LBB107_568
.LBB107_568:                            # %cond.end.2597
	movl	-5660(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-5640(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	-5632(%rbp), %rdx       # 8-byte Reload
	cmpq	%rdi, %rdx
	jae	.LBB107_570
# BB#569:                               # %if.then.2606
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	movb	%al, %cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB107_570:                            # %if.end.2620
	movl	$48, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$264, %rcx              # imm = 0x108
	movq	-24(%rbp), %rsi
	addq	$128, %rsi
	movq	%rcx, %rdi
	callq	memcpy
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$14, %rcx
	andq	$1, %rcx
	movb	%cl, %r8b
	andb	$1, %r8b
	movb	%r8b, -1(%rbp)
.LBB107_571:                            # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$5680, %rsp             # imm = 0x1630
	popq	%rbp
	retq
.Lfunc_end107:
	.size	display_line, .Lfunc_end107-display_line
	.cfi_endproc

	.align	16, 0x90
	.type	adjust_window_ends,@function
adjust_window_ends:                     # @adjust_window_ends
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp324:
	.cfi_def_cfa_offset 16
.Ltmp325:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp326:
	.cfi_def_cfa_register %rbp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	-16(%rbp), %rdi
	subq	192(%rdi), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 456(%rdi)
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	movq	32(%rsi), %rsi
	movq	-16(%rbp), %rdi
	subq	200(%rdi), %rsi
	movq	-8(%rbp), %rdi
	movq	%rsi, 480(%rdi)
	movq	-16(%rbp), %rsi
	testb	$1, -17(%rbp)
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	je	.LBB108_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB108_3
.LBB108_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	200(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB108_3:                              # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx         # 8-byte Reload
	subq	%rax, %rcx
	sarq	$8, %rcx
	movl	%ecx, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 464(%rax)
	popq	%rbp
	retq
.Lfunc_end108:
	.size	adjust_window_ends, .Lfunc_end108-adjust_window_ends
	.cfi_endproc

	.globl	row_containing_pos
	.align	16, 0x90
	.type	row_containing_pos,@function
row_containing_pos:                     # @row_containing_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp327:
	.cfi_def_cfa_offset 16
.Ltmp328:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp329:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movl	%r8d, -44(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	callq	XBUFFER
	cmpq	current_buffer, %rax
	jne	.LBB109_2
# BB#1:                                 # %cond.true
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB109_6
.LBB109_2:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	376(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB109_4
# BB#3:                                 # %cond.true.5
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	768(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB109_5
.LBB109_4:                              # %cond.false.9
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB109_5:                              # %cond.end
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB109_6:                              # %cond.end.14
	movq	-96(%rbp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB109_8
# BB#7:                                 # %if.then
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
.LBB109_8:                              # %if.end
	cmpq	$0, -40(%rbp)
	je	.LBB109_10
# BB#9:                                 # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB109_11
.LBB109_10:                             # %lor.lhs.false
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB109_12
.LBB109_11:                             # %if.then.21
	movq	$0, -8(%rbp)
	jmp	.LBB109_50
.LBB109_12:                             # %if.end.22
	movq	-16(%rbp), %rdi
	callq	window_text_bottom_y
	subl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB109_13:                             # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_28 Depth 2
	cmpq	$0, -40(%rbp)
	je	.LBB109_15
# BB#14:                                # %land.lhs.true.25
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB109_16
.LBB109_15:                             # %lor.lhs.false.27
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB109_17
.LBB109_16:                             # %if.then.33
	movq	$0, -8(%rbp)
	jmp	.LBB109_50
.LBB109_17:                             # %if.end.34
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-56(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-76(%rbp), %ecx
	jle	.LBB109_19
# BB#18:                                # %if.then.37
	movq	$0, -8(%rbp)
	jmp	.LBB109_50
.LBB109_19:                             # %if.end.38
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	-24(%rbp), %rax
	jl	.LBB109_45
# BB#20:                                # %lor.lhs.false.41
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB109_22
# BB#21:                                # %land.lhs.true.45
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	row_for_charpos_p
	testb	$1, %al
	jne	.LBB109_22
	jmp	.LBB109_45
.LBB109_22:                             # %land.lhs.true.47
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jl	.LBB109_45
# BB#23:                                # %if.then.50
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB109_26
# BB#24:                                # %lor.lhs.false.55
                                        #   in Loop: Header=BB109_13 Depth=1
	cmpq	$0, -64(%rbp)
	jne	.LBB109_27
# BB#25:                                # %land.lhs.true.57
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB109_27
.LBB109_26:                             # %if.then.62
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB109_50
.LBB109_27:                             # %if.end.63
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
.LBB109_28:                             # %for.cond
                                        #   Parent Loop BB109_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-56(%rbp), %rdx
	movswl	34(%rdx), %esi
	movslq	%esi, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	cmpq	%rcx, %rax
	jae	.LBB109_44
# BB#29:                                # %for.body
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB109_42
# BB#30:                                # %if.then.70
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	cmpq	$0, (%rax)
	jle	.LBB109_41
# BB#31:                                # %land.lhs.true.74
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	subq	-24(%rbp), %rax
	cmpq	$0, %rax
	jge	.LBB109_33
# BB#32:                                # %cond.true.79
                                        #   in Loop: Header=BB109_28 Depth=2
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-88(%rbp), %rdx
	movq	(%rdx), %rdx
	subq	-24(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jmp	.LBB109_34
.LBB109_33:                             # %cond.false.83
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	subq	-24(%rbp), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB109_34:                             # %cond.end.86
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-128(%rbp), %rax        # 8-byte Reload
	cmpq	-72(%rbp), %rax
	jge	.LBB109_41
# BB#35:                                # %if.then.90
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	subq	-24(%rbp), %rax
	cmpq	$0, %rax
	jge	.LBB109_37
# BB#36:                                # %cond.true.95
                                        #   in Loop: Header=BB109_28 Depth=2
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-88(%rbp), %rdx
	movq	(%rdx), %rdx
	subq	-24(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB109_38
.LBB109_37:                             # %cond.false.99
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	subq	-24(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB109_38:                             # %cond.end.102
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -72(%rbp)
	jne	.LBB109_40
# BB#39:                                # %if.then.106
	movq	-64(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB109_50
.LBB109_40:                             # %if.end.107
                                        #   in Loop: Header=BB109_28 Depth=2
	jmp	.LBB109_41
.LBB109_41:                             # %if.end.108
                                        #   in Loop: Header=BB109_28 Depth=2
	jmp	.LBB109_42
.LBB109_42:                             # %if.end.109
                                        #   in Loop: Header=BB109_28 Depth=2
	jmp	.LBB109_43
.LBB109_43:                             # %for.inc
                                        #   in Loop: Header=BB109_28 Depth=2
	movq	-88(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB109_28
.LBB109_44:                             # %for.end
                                        #   in Loop: Header=BB109_13 Depth=1
	jmp	.LBB109_49
.LBB109_45:                             # %if.else
                                        #   in Loop: Header=BB109_13 Depth=1
	cmpq	$0, -64(%rbp)
	je	.LBB109_48
# BB#46:                                # %land.lhs.true.112
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB109_48
# BB#47:                                # %if.then.118
	movq	-64(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB109_50
.LBB109_48:                             # %if.end.119
                                        #   in Loop: Header=BB109_13 Depth=1
	jmp	.LBB109_49
.LBB109_49:                             # %if.end.120
                                        #   in Loop: Header=BB109_13 Depth=1
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
	jmp	.LBB109_13
.LBB109_50:                             # %return
	movq	-8(%rbp), %rax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end109:
	.size	row_containing_pos, .Lfunc_end109-row_containing_pos
	.cfi_endproc

	.align	16, 0x90
	.type	row_for_charpos_p,@function
row_for_charpos_p:                      # @row_for_charpos_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp330:
	.cfi_def_cfa_offset 16
.Ltmp331:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp332:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rdi
	cmpq	128(%rdi), %rsi
	je	.LBB110_2
# BB#1:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB110_35
.LBB110_2:                              # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 152(%rax)
	jl	.LBB110_25
# BB#3:                                 # %if.then.7
	movq	-8(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB110_5
# BB#4:                                 # %if.then.8
	movb	$1, -17(%rbp)
	jmp	.LBB110_24
.LBB110_5:                              # %if.else
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -40(%rbp)
	movb	$0, -17(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB110_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jb	.LBB110_23
# BB#7:                                 # %for.body
                                        #   in Loop: Header=BB110_6 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB110_8
	jmp	.LBB110_21
.LBB110_8:                              # %if.then.14
	movl	$344, %edi              # imm = 0x158
	movq	-16(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-96(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -97(%rbp)          # 1-byte Spill
	je	.LBB110_10
# BB#9:                                 # %land.rhs
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	8(%rax), %rsi
	callq	display_prop_string_p
	movb	%al, -97(%rbp)          # 1-byte Spill
.LBB110_10:                             # %land.end
	movb	-97(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -17(%rbp)
	testb	$1, -17(%rbp)
	jne	.LBB110_20
# BB#11:                                # %if.then.24
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB110_12:                             # %for.cond.26
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -98(%rbp)          # 1-byte Spill
	jb	.LBB110_14
# BB#13:                                # %land.rhs.29
                                        #   in Loop: Header=BB110_12 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-64(%rbp), %rax
	sete	%cl
	movb	%cl, -98(%rbp)          # 1-byte Spill
.LBB110_14:                             # %land.end.33
                                        #   in Loop: Header=BB110_12 Depth=1
	movb	-98(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB110_15
	jmp	.LBB110_19
.LBB110_15:                             # %for.body.34
                                        #   in Loop: Header=BB110_12 Depth=1
	movl	$306, %edi              # imm = 0x132
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB110_17
# BB#16:                                # %if.then.43
	movb	$1, -17(%rbp)
	jmp	.LBB110_19
.LBB110_17:                             # %if.end
                                        #   in Loop: Header=BB110_12 Depth=1
	jmp	.LBB110_18
.LBB110_18:                             # %for.inc
                                        #   in Loop: Header=BB110_12 Depth=1
	movq	-48(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB110_12
.LBB110_19:                             # %for.end
	jmp	.LBB110_20
.LBB110_20:                             # %if.end.44
	jmp	.LBB110_23
.LBB110_21:                             # %if.end.45
                                        #   in Loop: Header=BB110_6 Depth=1
	jmp	.LBB110_22
.LBB110_22:                             # %for.inc.46
                                        #   in Loop: Header=BB110_6 Depth=1
	movq	-48(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB110_6
.LBB110_23:                             # %for.end.48
	jmp	.LBB110_24
.LBB110_24:                             # %if.end.49
	jmp	.LBB110_34
.LBB110_25:                             # %if.else.50
	movq	-8(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB110_28
# BB#26:                                # %lor.lhs.false.54
	movq	-8(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB110_28
# BB#27:                                # %lor.lhs.false.58
	movq	-8(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB110_32
.LBB110_28:                             # %if.then.64
	movq	-8(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$29, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB110_30
# BB#29:                                # %if.then.69
	movq	-8(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -17(%rbp)
	jmp	.LBB110_31
.LBB110_30:                             # %if.else.76
	movb	$0, -17(%rbp)
.LBB110_31:                             # %if.end.77
	jmp	.LBB110_33
.LBB110_32:                             # %if.else.78
	movq	-8(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -17(%rbp)
.LBB110_33:                             # %if.end.84
	jmp	.LBB110_34
.LBB110_34:                             # %if.end.85
	jmp	.LBB110_35
.LBB110_35:                             # %if.end.86
	movb	-17(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end110:
	.size	row_for_charpos_p, .Lfunc_end110-row_for_charpos_p
	.cfi_endproc

	.globl	row_hash
	.align	16, 0x90
	.type	row_hash,@function
row_hash:                               # @row_hash
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp333:
	.cfi_def_cfa_offset 16
.Ltmp334:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp335:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
	cmpl	$3, -12(%rbp)
	jge	.LBB111_8
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -16(%rbp)
.LBB111_3:                              # %for.cond.1
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movswl	32(%rdx,%rcx,2), %esi
	cmpl	%esi, %eax
	jge	.LBB111_6
# BB#4:                                 # %for.body.4
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	-20(%rbp), %ecx
	shrl	$24, %ecx
	addl	%ecx, %eax
	andl	$268435455, %eax        # imm = 0xFFFFFFF
	movslq	-16(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rdi
	imulq	$48, %rdx, %rdx
	addq	(%rdi,%rsi,8), %rdx
	addl	40(%rdx), %eax
	movslq	-16(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rdi
	imulq	$48, %rdx, %rdx
	addq	(%rdi,%rsi,8), %rdx
	movl	28(%rdx), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	addl	%ecx, %eax
	movslq	-16(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rdi
	imulq	$48, %rdx, %rdx
	addq	(%rdi,%rsi,8), %rdx
	movl	24(%rdx), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	movb	%cl, %r8b
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	addl	%ecx, %eax
	movslq	-16(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rdi
	imulq	$48, %rdx, %rdx
	addq	(%rdi,%rsi,8), %rdx
	movl	24(%rdx), %ecx
	andl	$7, %ecx
	shll	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
# BB#5:                                 # %for.inc
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_3
.LBB111_6:                              # %for.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_7
.LBB111_7:                              # %for.inc.34
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_1
.LBB111_8:                              # %for.end.36
	movl	-20(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end111:
	.size	row_hash, .Lfunc_end111-row_hash
	.cfi_endproc

	.globl	Fbidi_find_overridden_directionality
	.align	16, 0x90
	.type	Fbidi_find_overridden_directionality,@function
Fbidi_find_overridden_directionality:   # @Fbidi_find_overridden_directionality
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp336:
	.cfi_def_cfa_offset 16
.Ltmp337:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp338:
	.cfi_def_cfa_register %rbp
	subq	$2560, %rsp             # imm = 0xA00
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	current_buffer, %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB112_1
	jmp	.LBB112_3
.LBB112_1:                              # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB112_3
# BB#2:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -2440(%rbp)       # 8-byte Spill
	jmp	.LBB112_4
.LBB112_3:                              # %cond.false
	callq	emacs_abort
.LBB112_4:                              # %cond.end
	xorl	%edi, %edi
	movq	-2440(%rbp), %rax       # 8-byte Reload
	movq	208(%rax), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %edx
	cmpl	$2, %edx
	sete	%sil
	andb	$1, %sil
	movb	%sil, -57(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -2448(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2448(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB112_12
# BB#5:                                 # %if.then
	movq	-32(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB112_6
	jmp	.LBB112_7
.LBB112_6:                              # %if.then.6
	movq	-32(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, -40(%rbp)
	jmp	.LBB112_11
.LBB112_7:                              # %if.else
	movq	-32(%rbp), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB112_8
	jmp	.LBB112_9
.LBB112_8:                              # %if.then.9
	movq	-32(%rbp), %rdi
	callq	decode_live_window
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	sete	%dl
	andb	$1, %dl
	movb	%dl, -57(%rbp)
	jmp	.LBB112_10
.LBB112_9:                              # %if.else.20
	movq	-32(%rbp), %rdi
	callq	CHECK_STRING
.LBB112_10:                             # %if.end
	jmp	.LBB112_11
.LBB112_11:                             # %if.end.21
	jmp	.LBB112_12
.LBB112_12:                             # %if.end.22
	movq	-32(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB112_13
	jmp	.LBB112_19
.LBB112_13:                             # %if.then.24
	movq	-32(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB112_14
	jmp	.LBB112_15
.LBB112_14:                             # %lor.lhs.false
	testb	$1, globals+3426
	je	.LBB112_16
.LBB112_15:                             # %if.then.26
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB112_52
.LBB112_16:                             # %if.end.28
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rax
	movq	%rdi, -2456(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -2464(%rbp)       # 8-byte Spill
	movq	%rsi, -2472(%rbp)       # 8-byte Spill
	callq	SCHARS
	leaq	-2400(%rbp), %r8
	leaq	-2408(%rbp), %r9
	movq	-2456(%rbp), %rdi       # 8-byte Reload
	movq	-2472(%rbp), %rsi       # 8-byte Reload
	movq	-2464(%rbp), %rdx       # 8-byte Reload
	movq	%rax, %rcx
	callq	validate_subarray
	movq	-2400(%rbp), %rax
	movq	-32(%rbp), %rdi
	movq	%rax, -2480(%rbp)       # 8-byte Spill
	callq	SCHARS
	movq	-2480(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB112_18
# BB#17:                                # %if.then.32
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB112_52
.LBB112_18:                             # %if.end.34
	callq	bidi_shelve_cache
	movq	%rax, -2424(%rbp)
	movl	$0, -88(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	$0, -128(%rbp)
	movq	-32(%rbp), %rdi
	callq	SCHARS
	xorl	%ecx, %ecx
	movl	%ecx, %edi
	leaq	-2392(%rbp), %rcx
	movq	%rax, -120(%rbp)
	movq	$0, -112(%rbp)
	movb	-104(%rbp), %dl
	andb	$-2, %dl
	movb	%dl, -104(%rbp)
	movb	-104(%rbp), %dl
	andb	$-3, %dl
	movb	%dl, -104(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -96(%rbp)
	movb	-57(%rbp), %dl
	andb	$1, %dl
	movq	%rdi, -2488(%rbp)       # 8-byte Spill
	movq	-2488(%rbp), %rsi       # 8-byte Reload
	movzbl	%dl, %edx
	callq	bidi_init_it
	jmp	.LBB112_38
.LBB112_19:                             # %if.else.48
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	240(%rax), %rax
	movq	%rax, -2496(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2496(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB112_22
# BB#20:                                # %lor.lhs.false.51
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -2504(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2504(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB112_22
# BB#21:                                # %lor.lhs.false.54
	testb	$1, globals+3426
	je	.LBB112_23
.LBB112_22:                             # %if.then.56
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB112_52
.LBB112_23:                             # %if.end.58
	movq	-40(%rbp), %rdi
	callq	set_buffer_temp
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	validate_region
	movq	-16(%rbp), %rsi
	sarq	$2, %rsi
	movq	%rsi, -2400(%rbp)
	movq	-24(%rbp), %rsi
	sarq	$2, %rsi
	movq	%rsi, -2408(%rbp)
	movq	-2400(%rbp), %rsi
	movq	current_buffer, %rdi
	cmpq	768(%rdi), %rsi
	jl	.LBB112_25
# BB#24:                                # %if.then.61
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB112_52
.LBB112_25:                             # %if.end.63
	callq	bidi_shelve_cache
	movq	%rax, -2424(%rbp)
	movq	current_buffer, %rdi
	movq	-2400(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -2416(%rbp)
	movq	-2400(%rbp), %rax
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rax
	jne	.LBB112_27
# BB#26:                                # %if.then.67
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -2384(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -2392(%rbp)
	jmp	.LBB112_37
.LBB112_27:                             # %if.else.69
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -2512(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2512(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB112_29
# BB#28:                                # %cond.true.73
	movq	-2416(%rbp), %rax
	subq	$1, %rax
	movq	%rax, %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -2516(%rbp)       # 4-byte Spill
	jmp	.LBB112_33
.LBB112_29:                             # %cond.false.76
	movq	-2416(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB112_31
# BB#30:                                # %cond.true.79
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -2528(%rbp)       # 8-byte Spill
	jmp	.LBB112_32
.LBB112_31:                             # %cond.false.81
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -2528(%rbp)       # 8-byte Spill
	jmp	.LBB112_32
.LBB112_32:                             # %cond.end.82
	movq	-2528(%rbp), %rax       # 8-byte Reload
	movq	-2416(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -2516(%rbp)       # 4-byte Spill
.LBB112_33:                             # %cond.end.87
	movl	-2516(%rbp), %eax       # 4-byte Reload
	cmpl	$10, %eax
	jne	.LBB112_35
# BB#34:                                # %if.then.91
	movq	-2400(%rbp), %rax
	movq	%rax, -2384(%rbp)
	movq	-2416(%rbp), %rax
	movq	%rax, -2392(%rbp)
	jmp	.LBB112_36
.LBB112_35:                             # %if.else.94
	movq	-2400(%rbp), %rdi
	movq	current_buffer, %rax
	movq	-2400(%rbp), %rsi
	movq	%rdi, -2536(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	callq	buf_charpos_to_bytepos
	movq	$-1, %rdx
	leaq	-2392(%rbp), %rcx
	movq	-2536(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	find_newline_no_quit
	movq	%rax, -2384(%rbp)
.LBB112_36:                             # %if.end.99
	jmp	.LBB112_37
.LBB112_37:                             # %if.end.100
	xorl	%edi, %edi
	movl	$0, -88(%rbp)
	movq	$0, -128(%rbp)
	callq	builtin_lisp_symbol
	leaq	-2392(%rbp), %rcx
	movq	%rax, -136(%rbp)
	movq	$0, -112(%rbp)
	movb	-104(%rbp), %dl
	andb	$-2, %dl
	movb	%dl, -104(%rbp)
	movb	-104(%rbp), %dl
	andb	$-3, %dl
	movb	%dl, -104(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-2384(%rbp), %rdi
	movq	-2392(%rbp), %rsi
	movb	-57(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %edx
	callq	bidi_init_it
.LBB112_38:                             # %if.end.121
	jmp	.LBB112_39
.LBB112_39:                             # %do.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_40 Depth 2
	movl	$1, %edi
	leaq	-2392(%rbp), %rsi
	xorl	%edx, %edx
	callq	bidi_paragraph_init
.LBB112_40:                             # %while.cond
                                        #   Parent Loop BB112_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	leaq	-2392(%rbp), %rdi
	callq	bidi_find_first_overridden
	movq	%rax, -2432(%rbp)
	cmpq	-2400(%rbp), %rax
	jge	.LBB112_42
# BB#41:                                # %while.body
                                        #   in Loop: Header=BB112_40 Depth=2
	jmp	.LBB112_40
.LBB112_42:                             # %while.end
                                        #   in Loop: Header=BB112_39 Depth=1
	jmp	.LBB112_43
.LBB112_43:                             # %do.cond
                                        #   in Loop: Header=BB112_39 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-2432(%rbp), %rdx
	movq	current_buffer, %rsi
	cmpq	768(%rsi), %rdx
	movb	%cl, -2537(%rbp)        # 1-byte Spill
	jne	.LBB112_46
# BB#44:                                # %land.lhs.true.128
                                        #   in Loop: Header=BB112_39 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$10, -2376(%rbp)
	movb	%cl, -2537(%rbp)        # 1-byte Spill
	jne	.LBB112_46
# BB#45:                                # %land.rhs
                                        #   in Loop: Header=BB112_39 Depth=1
	movq	-2384(%rbp), %rax
	cmpq	-2408(%rbp), %rax
	setl	%cl
	movb	%cl, -2537(%rbp)        # 1-byte Spill
.LBB112_46:                             # %land.end
                                        #   in Loop: Header=BB112_39 Depth=1
	movb	-2537(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB112_39
# BB#47:                                # %do.end
	xorl	%esi, %esi
	movq	-2424(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	-48(%rbp), %rdi
	callq	set_buffer_temp
	movq	-2400(%rbp), %rdi
	cmpq	-2432(%rbp), %rdi
	jg	.LBB112_50
# BB#48:                                # %land.lhs.true.136
	movq	-2432(%rbp), %rax
	cmpq	-2408(%rbp), %rax
	jge	.LBB112_50
# BB#49:                                # %cond.true.139
	movq	-2432(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -2552(%rbp)       # 8-byte Spill
	jmp	.LBB112_51
.LBB112_50:                             # %cond.false.141
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -2552(%rbp)       # 8-byte Spill
.LBB112_51:                             # %cond.end.143
	movq	-2552(%rbp), %rax       # 8-byte Reload
	movq	%rax, -8(%rbp)
.LBB112_52:                             # %return
	movq	-8(%rbp), %rax
	addq	$2560, %rsp             # imm = 0xA00
	popq	%rbp
	retq
.Lfunc_end112:
	.size	Fbidi_find_overridden_directionality, .Lfunc_end112-Fbidi_find_overridden_directionality
	.cfi_endproc

	.globl	Fmove_point_visually
	.align	16, 0x90
	.type	Fmove_point_visually,@function
Fmove_point_visually:                   # @Fmove_point_visually
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp339:
	.cfi_def_cfa_offset 16
.Ltmp340:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp341:
	.cfi_def_cfa_register %rbp
	subq	$10000, %rsp            # imm = 0x2710
	movq	%rdi, -16(%rbp)
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB113_2
# BB#1:                                 # %cond.true
	jmp	.LBB113_3
.LBB113_2:                              # %cond.false
	movl	$559, %edi              # imm = 0x22F
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -9776(%rbp)       # 8-byte Spill
.LBB113_3:                              # %cond.end
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jle	.LBB113_5
# BB#4:                                 # %if.then
	movl	$1, -44(%rbp)
	jmp	.LBB113_6
.LBB113_5:                              # %if.else
	movl	$-1, -44(%rbp)
.LBB113_6:                              # %if.end
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB113_157
# BB#7:                                 # %land.lhs.true
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB113_157
# BB#8:                                 # %land.lhs.true.9
	cmpq	$0, -32(%rbp)
	je	.LBB113_157
# BB#9:                                 # %land.lhs.true.11
	movq	-32(%rbp), %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB113_157
# BB#10:                                # %land.lhs.true.16
	movq	-32(%rbp), %rax
	movb	936(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB113_157
# BB#11:                                # %land.lhs.true.20
	movq	-24(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB113_157
# BB#12:                                # %land.lhs.true.22
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	-32(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -9784(%rbp)       # 8-byte Spill
	jne	.LBB113_14
# BB#13:                                # %cond.true.25
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -9792(%rbp)       # 8-byte Spill
	jmp	.LBB113_18
.LBB113_14:                             # %cond.false.26
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -9800(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9800(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_16
# BB#15:                                # %cond.true.30
	movq	-32(%rbp), %rax
	movq	736(%rax), %rax
	movq	%rax, -9808(%rbp)       # 8-byte Spill
	jmp	.LBB113_17
.LBB113_16:                             # %cond.false.32
	movq	-32(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -9808(%rbp)       # 8-byte Spill
.LBB113_17:                             # %cond.end.35
	movq	-9808(%rbp), %rax       # 8-byte Reload
	movq	%rax, -9792(%rbp)       # 8-byte Spill
.LBB113_18:                             # %cond.end.36
	movq	-9792(%rbp), %rax       # 8-byte Reload
	movq	-9784(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_157
# BB#19:                                # %land.lhs.true.40
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jl	.LBB113_157
# BB#20:                                # %land.lhs.true.43
	movq	-24(%rbp), %rax
	movl	364(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %ecx
	jge	.LBB113_157
# BB#21:                                # %land.lhs.true.48
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_157
# BB#22:                                # %if.then.57
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -44(%rbp)
	jle	.LBB113_24
# BB#23:                                # %cond.true.60
	movq	-64(%rbp), %rax
	movq	-40(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -9816(%rbp)       # 8-byte Spill
	jmp	.LBB113_25
.LBB113_24:                             # %cond.false.65
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -9816(%rbp)       # 8-byte Spill
.LBB113_25:                             # %cond.end.67
	movq	-9816(%rbp), %rax       # 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-64(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	360(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-44(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
.LBB113_26:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB113_28
# BB#27:                                # %cond.true.76
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	setb	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, -9820(%rbp)       # 4-byte Spill
	jmp	.LBB113_29
.LBB113_28:                             # %cond.false.79
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	seta	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, -9820(%rbp)       # 4-byte Spill
.LBB113_29:                             # %cond.end.82
                                        #   in Loop: Header=BB113_26 Depth=1
	movl	-9820(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB113_72
# BB#30:                                # %for.body
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB113_31
	jmp	.LBB113_33
.LBB113_31:                             # %land.lhs.true.87
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	je	.LBB113_33
# BB#32:                                # %if.then.92
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	callq	set_point
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB113_304
.LBB113_33:                             # %if.else.99
                                        #   in Loop: Header=BB113_26 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9832(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9832(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB113_51
# BB#34:                                # %land.lhs.true.104
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	-80(%rbp), %rcx
	cmpq	8(%rcx), %rax
	je	.LBB113_51
# BB#35:                                # %if.then.109
	movq	-80(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB113_36
	jmp	.LBB113_46
.LBB113_36:                             # %if.then.112
	movl	$2, %eax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -88(%rbp)
	movq	-80(%rbp), %rcx
	movl	24(%rcx), %edx
	shrl	$10, %edx
	andl	$127, %edx
	movq	-40(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$34, %rcx
	andq	$1, %rcx
	movb	%cl, %sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %edx
	movl	%eax, -9836(%rbp)       # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-9836(%rbp), %edi       # 4-byte Reload
	idivl	%edi
	cmpl	$0, %edx
	jne	.LBB113_41
# BB#37:                                # %if.then.125
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_39
# BB#38:                                # %cond.true.132
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	movl	%eax, -9840(%rbp)       # 4-byte Spill
	jmp	.LBB113_40
.LBB113_39:                             # %cond.false.134
	movl	-44(%rbp), %eax
	movl	%eax, -9840(%rbp)       # 4-byte Spill
.LBB113_40:                             # %cond.end.135
	movl	-9840(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	addq	-88(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	jmp	.LBB113_45
.LBB113_41:                             # %if.else.139
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_43
# BB#42:                                # %cond.true.146
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	movl	%eax, -9844(%rbp)       # 4-byte Spill
	jmp	.LBB113_44
.LBB113_43:                             # %cond.false.148
	movl	-44(%rbp), %eax
	movl	%eax, -9844(%rbp)       # 4-byte Spill
.LBB113_44:                             # %cond.end.149
	movl	-9844(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	movq	-88(%rbp), %rdx
	subq	%rcx, %rdx
	movq	%rdx, -88(%rbp)
.LBB113_45:                             # %if.end.153
	jmp	.LBB113_50
.LBB113_46:                             # %if.else.154
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB113_47
	jmp	.LBB113_48
.LBB113_47:                             # %if.then.157
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB113_49
.LBB113_48:                             # %if.else.159
	jmp	.LBB113_72
.LBB113_49:                             # %if.end.160
	jmp	.LBB113_50
.LBB113_50:                             # %if.end.161
	movq	-88(%rbp), %rdi
	callq	set_point
	movq	-24(%rbp), %rdi
	movl	$-1, 364(%rdi)
	movq	current_buffer, %rdi
	movq	736(%rdi), %rdi
	addq	$0, %rdi
	shlq	$2, %rdi
	addq	$2, %rdi
	movq	%rdi, -8(%rbp)
	jmp	.LBB113_304
.LBB113_51:                             # %if.else.168
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_68
# BB#52:                                # %land.lhs.true.173
                                        #   in Loop: Header=BB113_26 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9856(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9856(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_68
# BB#53:                                # %land.lhs.true.178
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	.LBB113_68
# BB#54:                                # %land.lhs.true.183
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$32, 40(%rax)
	jne	.LBB113_68
# BB#55:                                # %land.lhs.true.186
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jl	.LBB113_68
# BB#56:                                # %land.lhs.true.190
                                        #   in Loop: Header=BB113_26 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$9, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB113_68
# BB#57:                                # %if.then.195
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jle	.LBB113_59
# BB#58:                                # %if.then.199
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	callq	set_point
	jmp	.LBB113_67
.LBB113_59:                             # %if.else.201
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_62
# BB#60:                                # %land.lhs.true.207
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	je	.LBB113_62
# BB#61:                                # %if.then.212
	movq	current_buffer, %rax
	movq	768(%rax), %rdi
	callq	set_point
	jmp	.LBB113_66
.LBB113_62:                             # %if.else.214
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	je	.LBB113_64
# BB#63:                                # %if.then.221
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	subq	$1, %rax
	movq	%rax, %rdi
	callq	set_point
	jmp	.LBB113_65
.LBB113_64:                             # %if.else.225
	jmp	.LBB113_72
.LBB113_65:                             # %if.end.226
	jmp	.LBB113_66
.LBB113_66:                             # %if.end.227
	jmp	.LBB113_67
.LBB113_67:                             # %if.end.228
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB113_304
.LBB113_68:                             # %if.end.235
                                        #   in Loop: Header=BB113_26 Depth=1
	jmp	.LBB113_69
.LBB113_69:                             # %if.end.236
                                        #   in Loop: Header=BB113_26 Depth=1
	jmp	.LBB113_70
.LBB113_70:                             # %if.end.237
                                        #   in Loop: Header=BB113_26 Depth=1
	jmp	.LBB113_71
.LBB113_71:                             # %for.inc
                                        #   in Loop: Header=BB113_26 Depth=1
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -64(%rbp)
	jmp	.LBB113_26
.LBB113_72:                             # %for.end
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	je	.LBB113_74
# BB#73:                                # %lor.lhs.false
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9864(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9864(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_156
.LBB113_74:                             # %if.then.246
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$11, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_76
# BB#75:                                # %lor.lhs.false.252
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_77
.LBB113_76:                             # %if.then.258
	jmp	.LBB113_158
.LBB113_77:                             # %if.end.259
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_79
# BB#78:                                # %if.then.265
	movl	-44(%rbp), %eax
	movq	-40(%rbp), %rcx
	movslq	%eax, %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -40(%rbp)
	jmp	.LBB113_80
.LBB113_79:                             # %if.else.268
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	-44(%rbp), %eax
	movq	-40(%rbp), %rdx
	movslq	%eax, %rsi
	subq	%rsi, %rcx
	shlq	$8, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -40(%rbp)
.LBB113_80:                             # %if.end.271
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	movq	%rax, -9872(%rbp)       # 8-byte Spill
	je	.LBB113_82
# BB#81:                                # %cond.true.279
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -9880(%rbp)       # 8-byte Spill
	jmp	.LBB113_83
.LBB113_82:                             # %cond.false.283
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -9880(%rbp)       # 8-byte Spill
.LBB113_83:                             # %cond.end.286
	movq	-9880(%rbp), %rax       # 8-byte Reload
	movq	-9872(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jb	.LBB113_93
# BB#84:                                # %lor.lhs.false.290
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movq	192(%rdx), %rdx
	movslq	24(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	-24(%rbp), %rdx
	movq	80(%rdx), %rdi
	movq	%rax, -9888(%rbp)       # 8-byte Spill
	movq	%rcx, -9896(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB113_85
	jmp	.LBB113_91
.LBB113_85:                             # %cond.true.300
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -9897(%rbp)        # 1-byte Spill
	jne	.LBB113_90
# BB#86:                                # %land.lhs.true.304
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -9897(%rbp)        # 1-byte Spill
	jne	.LBB113_90
# BB#87:                                # %land.lhs.true.309
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -9897(%rbp)        # 1-byte Spill
	je	.LBB113_90
# BB#88:                                # %land.lhs.true.316
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -9912(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-9912(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -9897(%rbp)        # 1-byte Spill
	je	.LBB113_90
# BB#89:                                # %land.rhs
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -9897(%rbp)        # 1-byte Spill
.LBB113_90:                             # %land.end
	movb	-9897(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -9916(%rbp)       # 4-byte Spill
	jmp	.LBB113_92
.LBB113_91:                             # %cond.false.326
	xorl	%eax, %eax
	movl	%eax, -9916(%rbp)       # 4-byte Spill
	jmp	.LBB113_92
.LBB113_92:                             # %cond.end.327
	movl	-9916(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-9896(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	-9888(%rbp), %rdx       # 8-byte Reload
	cmpq	%rdi, %rdx
	jbe	.LBB113_94
.LBB113_93:                             # %if.then.336
	jmp	.LBB113_158
.LBB113_94:                             # %if.end.337
	cmpl	$0, -44(%rbp)
	jle	.LBB113_124
# BB#95:                                # %if.then.340
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_98
# BB#96:                                # %land.lhs.true.347
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_98
# BB#97:                                # %if.then.353
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	subq	$1, %rax
	movq	%rax, %rdi
	callq	set_point
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB113_304
.LBB113_98:                             # %if.end.363
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	-40(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
.LBB113_99:                             # %for.cond.371
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB113_123
# BB#100:                               # %for.body.374
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB113_112
# BB#101:                               # %lor.lhs.false.378
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_107
# BB#102:                               # %land.lhs.true.384
                                        #   in Loop: Header=BB113_99 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9928(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9928(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_107
# BB#103:                               # %land.lhs.true.389
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	.LBB113_107
# BB#104:                               # %land.lhs.true.395
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$32, 40(%rax)
	jne	.LBB113_107
# BB#105:                               # %land.lhs.true.400
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jl	.LBB113_107
# BB#106:                               # %land.lhs.true.404
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$9, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB113_112
.LBB113_107:                            # %lor.lhs.false.410
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_121
# BB#108:                               # %land.lhs.true.417
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_121
# BB#109:                               # %land.lhs.true.423
                                        #   in Loop: Header=BB113_99 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9936(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9936(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_121
# BB#110:                               # %land.lhs.true.428
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	.LBB113_121
# BB#111:                               # %land.lhs.true.434
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$32, 40(%rax)
	jne	.LBB113_121
.LBB113_112:                            # %if.then.439
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jle	.LBB113_114
# BB#113:                               # %if.then.443
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	callq	set_point
	jmp	.LBB113_120
.LBB113_114:                            # %if.else.445
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_118
# BB#115:                               # %land.lhs.true.451
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_118
# BB#116:                               # %land.lhs.true.458
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	je	.LBB113_118
# BB#117:                               # %if.then.464
	movq	current_buffer, %rax
	movq	768(%rax), %rdi
	callq	set_point
	jmp	.LBB113_119
.LBB113_118:                            # %if.else.466
                                        #   in Loop: Header=BB113_99 Depth=1
	jmp	.LBB113_122
.LBB113_119:                            # %if.end.467
	jmp	.LBB113_120
.LBB113_120:                            # %if.end.468
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB113_304
.LBB113_121:                            # %if.end.475
                                        #   in Loop: Header=BB113_99 Depth=1
	jmp	.LBB113_122
.LBB113_122:                            # %for.inc.476
                                        #   in Loop: Header=BB113_99 Depth=1
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB113_99
.LBB113_123:                            # %for.end.477
	jmp	.LBB113_155
.LBB113_124:                            # %if.else.478
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_127
# BB#125:                               # %land.lhs.true.484
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_127
# BB#126:                               # %if.then.490
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	subq	$1, %rax
	movq	%rax, %rdi
	callq	set_point
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB113_304
.LBB113_127:                            # %if.end.500
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
.LBB113_128:                            # %for.cond.509
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jb	.LBB113_154
# BB#129:                               # %for.body.512
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB113_143
# BB#130:                               # %lor.lhs.false.516
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB113_137
# BB#131:                               # %land.lhs.true.522
                                        #   in Loop: Header=BB113_128 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9944(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9944(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_137
# BB#132:                               # %land.lhs.true.527
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	.LBB113_137
# BB#133:                               # %land.lhs.true.533
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$32, 40(%rax)
	jne	.LBB113_137
# BB#134:                               # %land.lhs.true.538
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jl	.LBB113_137
# BB#135:                               # %land.lhs.true.542
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$9, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB113_137
# BB#136:                               # %land.lhs.true.548
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jg	.LBB113_143
.LBB113_137:                            # %lor.lhs.false.552
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$4, %ecx
	je	.LBB113_143
# BB#138:                               # %lor.lhs.false.558
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_152
# BB#139:                               # %land.lhs.true.565
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_152
# BB#140:                               # %land.lhs.true.572
                                        #   in Loop: Header=BB113_128 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -9952(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9952(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_152
# BB#141:                               # %land.lhs.true.577
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	.LBB113_152
# BB#142:                               # %land.lhs.true.583
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$32, 40(%rax)
	jne	.LBB113_152
.LBB113_143:                            # %if.then.588
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jle	.LBB113_145
# BB#144:                               # %if.then.592
	movq	-64(%rbp), %rax
	movq	(%rax), %rdi
	callq	set_point
	jmp	.LBB113_151
.LBB113_145:                            # %if.else.594
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_149
# BB#146:                               # %land.lhs.true.601
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB113_149
# BB#147:                               # %land.lhs.true.608
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	je	.LBB113_149
# BB#148:                               # %if.then.614
	movq	current_buffer, %rax
	movq	768(%rax), %rdi
	callq	set_point
	jmp	.LBB113_150
.LBB113_149:                            # %if.else.616
                                        #   in Loop: Header=BB113_128 Depth=1
	jmp	.LBB113_153
.LBB113_150:                            # %if.end.617
	jmp	.LBB113_151
.LBB113_151:                            # %if.end.618
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB113_304
.LBB113_152:                            # %if.end.625
                                        #   in Loop: Header=BB113_128 Depth=1
	jmp	.LBB113_153
.LBB113_153:                            # %for.inc.626
                                        #   in Loop: Header=BB113_128 Depth=1
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB113_128
.LBB113_154:                            # %for.end.628
	jmp	.LBB113_155
.LBB113_155:                            # %if.end.629
	jmp	.LBB113_156
.LBB113_156:                            # %if.end.630
	jmp	.LBB113_157
.LBB113_157:                            # %if.end.631
	jmp	.LBB113_158
.LBB113_158:                            # %simulate_display
	cmpq	$0, -32(%rbp)
	je	.LBB113_160
# BB#159:                               # %if.then.633
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	Fcurrent_bidi_paragraph_direction
	movq	%rax, -56(%rbp)
	jmp	.LBB113_161
.LBB113_160:                            # %if.else.636
	movl	$610, %edi              # imm = 0x262
	callq	builtin_lisp_symbol
	movq	%rax, -56(%rbp)
.LBB113_161:                            # %if.end.638
	movl	$816, %edi              # imm = 0x330
	movq	-56(%rbp), %rax
	movq	%rax, -9960(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9960(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB113_163
# BB#162:                               # %if.then.642
	xorl	%eax, %eax
	subl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB113_163:                            # %if.end.644
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jg	.LBB113_166
# BB#164:                               # %land.lhs.true.649
	cmpl	$0, -44(%rbp)
	jge	.LBB113_166
# BB#165:                               # %if.then.652
	movl	$200, %edi
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	xsignal0
.LBB113_166:                            # %if.else.654
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jl	.LBB113_169
# BB#167:                               # %land.lhs.true.660
	cmpl	$0, -44(%rbp)
	jle	.LBB113_169
# BB#168:                               # %if.then.663
	movl	$366, %edi              # imm = 0x16E
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	xsignal0
.LBB113_169:                            # %if.else.665
	leaq	-4904(%rbp), %rdi
	movb	$0, -4922(%rbp)
	movb	$0, -4923(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -104(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rcx
	callq	start_display
	cmpl	$0, -2788(%rbp)
	jne	.LBB113_171
# BB#170:                               # %if.then.673
	movl	$10000000, -2584(%rbp)  # imm = 0x989680
.LBB113_171:                            # %if.end.674
	cmpq	$0, -2760(%rbp)
	jge	.LBB113_178
# BB#172:                               # %land.lhs.true.677
	cmpl	$2, -4880(%rbp)
	jne	.LBB113_178
# BB#173:                               # %land.lhs.true.680
	cmpl	$1, -2544(%rbp)
	jne	.LBB113_178
# BB#174:                               # %land.lhs.true.683
	movb	-4816(%rbp), %al
	shrb	$2, %al
	andb	$1, %al
	testb	$1, %al
	je	.LBB113_178
# BB#175:                               # %land.lhs.true.689
	cmpl	$0, -2816(%rbp)
	jle	.LBB113_178
# BB#176:                               # %land.lhs.true.692
	leaq	-4904(%rbp), %rax
	movl	-2816(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rdx
	addq	$648, %rax              # imm = 0x288
	imulq	$288, %rdx, %rdx        # imm = 0x120
	addq	%rdx, %rax
	cmpl	$0, 252(%rax)
	jne	.LBB113_178
# BB#177:                               # %if.then.699
	movb	$1, -4922(%rbp)
.LBB113_178:                            # %if.end.700
	jmp	.LBB113_179
.LBB113_179:                            # %reseat
                                        # =>This Inner Loop Header: Depth=1
	leaq	-4904(%rbp), %rdi
	callq	reseat_at_previous_visible_line_start
	movl	$0, -2464(%rbp)
	movl	$0, -2472(%rbp)
	movl	$0, -2460(%rbp)
	movl	$0, -2500(%rbp)
	movq	-4592(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	%rax, %rdi
	je	.LBB113_192
# BB#180:                               # %if.then.708
                                        #   in Loop: Header=BB113_179 Depth=1
	testb	$1, -4922(%rbp)
	je	.LBB113_182
# BB#181:                               # %cond.true.711
                                        #   in Loop: Header=BB113_179 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	subq	$1, %rax
	movq	%rax, -9968(%rbp)       # 8-byte Spill
	jmp	.LBB113_183
.LBB113_182:                            # %cond.false.715
                                        #   in Loop: Header=BB113_179 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -9968(%rbp)       # 8-byte Spill
.LBB113_183:                            # %cond.end.718
                                        #   in Loop: Header=BB113_179 Depth=1
	movq	-9968(%rbp), %rax       # 8-byte Reload
	leaq	-4904(%rbp), %rdi
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$8, %r9d
	movq	%rax, %rsi
	movl	%ecx, %edx
	movl	%ecx, -9972(%rbp)       # 4-byte Spill
	movl	-9972(%rbp), %r8d       # 4-byte Reload
	callq	move_it_to
	cmpl	$1, -4880(%rbp)
	movl	%eax, -9976(%rbp)       # 4-byte Spill
	jne	.LBB113_187
# BB#184:                               # %land.lhs.true.724
                                        #   in Loop: Header=BB113_179 Depth=1
	cmpl	$0, -4552(%rbp)
	jle	.LBB113_187
# BB#185:                               # %land.lhs.true.728
                                        #   in Loop: Header=BB113_179 Depth=1
	testb	$1, -4922(%rbp)
	jne	.LBB113_187
# BB#186:                               # %if.then.730
                                        #   in Loop: Header=BB113_179 Depth=1
	movb	$1, -4922(%rbp)
	jmp	.LBB113_179
.LBB113_187:                            # %if.else.731
	movq	-4592(%rbp), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	je	.LBB113_190
# BB#188:                               # %land.lhs.true.739
	testb	$1, -4922(%rbp)
	jne	.LBB113_190
# BB#189:                               # %if.then.741
	leaq	-4904(%rbp), %rdi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, %rsi
	callq	move_it_in_display_line
.LBB113_190:                            # %if.end.744
	jmp	.LBB113_191
.LBB113_191:                            # %if.end.745
	jmp	.LBB113_192
.LBB113_192:                            # %if.end.746
	movl	-2500(%rbp), %eax
	movl	%eax, -4908(%rbp)
	movl	-2464(%rbp), %eax
	movl	%eax, -4920(%rbp)
	cmpl	$0, -44(%rbp)
	jg	.LBB113_194
# BB#193:                               # %lor.lhs.false.751
	testb	$1, -4922(%rbp)
	je	.LBB113_213
.LBB113_194:                            # %if.then.754
	movq	-2552(%rbp), %rax
	movq	%rax, -4936(%rbp)
	cmpl	$0, -4908(%rbp)
	jne	.LBB113_196
# BB#195:                               # %if.then.758
	leaq	-4904(%rbp), %rdi
	callq	get_next_display_element
	movb	%al, -9977(%rbp)        # 1-byte Spill
.LBB113_196:                            # %if.end.760
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$0, -2800(%rbp)
	movb	%cl, -9978(%rbp)        # 1-byte Spill
	jne	.LBB113_202
# BB#197:                               # %land.rhs.763
	movb	$1, %al
	cmpl	$10, -2780(%rbp)
	movb	%al, -9979(%rbp)        # 1-byte Spill
	je	.LBB113_201
# BB#198:                               # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$13, -2780(%rbp)
	movb	%cl, -9980(%rbp)        # 1-byte Spill
	jne	.LBB113_200
# BB#199:                               # %land.rhs.769
	cmpq	$0, -2808(%rbp)
	setne	%al
	movb	%al, -9980(%rbp)        # 1-byte Spill
.LBB113_200:                            # %land.end.771
	movb	-9980(%rbp), %al        # 1-byte Reload
	movb	%al, -9979(%rbp)        # 1-byte Spill
.LBB113_201:                            # %lor.end
	movb	-9979(%rbp), %al        # 1-byte Reload
	movb	%al, -9978(%rbp)        # 1-byte Spill
.LBB113_202:                            # %land.end.773
	movb	-9978(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -4921(%rbp)
	movq	$0, -2552(%rbp)
# BB#203:                               # %do.body
	cmpq	$0, -2552(%rbp)
	je	.LBB113_206
# BB#204:                               # %land.lhs.true.779
	movl	-2448(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB113_206
# BB#205:                               # %if.then.785
	cmpl	$2, -136(%rbp)
	sete	%al
	movq	-2552(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB113_206:                            # %if.end.794
	movq	-4888(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB113_208
# BB#207:                               # %if.then.797
	leaq	-4904(%rbp), %rdi
	movq	-4888(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	callq	*8(%rax)
	jmp	.LBB113_209
.LBB113_208:                            # %if.else.801
	leaq	-4904(%rbp), %rdi
	callq	produce_glyphs
.LBB113_209:                            # %if.end.802
	cmpq	$0, -2552(%rbp)
	je	.LBB113_211
# BB#210:                               # %if.then.806
	movb	$1, globals+3391
.LBB113_211:                            # %if.end.807
	jmp	.LBB113_212
.LBB113_212:                            # %do.end
	movq	-4936(%rbp), %rax
	movq	%rax, -2552(%rbp)
	movl	-4908(%rbp), %ecx
	movl	%ecx, -2500(%rbp)
	jmp	.LBB113_220
.LBB113_213:                            # %if.else.810
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$0, -2800(%rbp)
	movb	%cl, -9981(%rbp)        # 1-byte Spill
	jne	.LBB113_219
# BB#214:                               # %land.rhs.814
	movb	$1, %al
	cmpl	$10, -2780(%rbp)
	movb	%al, -9982(%rbp)        # 1-byte Spill
	je	.LBB113_218
# BB#215:                               # %lor.rhs.818
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$13, -2780(%rbp)
	movb	%cl, -9983(%rbp)        # 1-byte Spill
	jne	.LBB113_217
# BB#216:                               # %land.rhs.822
	cmpq	$0, -2808(%rbp)
	setne	%al
	movb	%al, -9983(%rbp)        # 1-byte Spill
.LBB113_217:                            # %land.end.825
	movb	-9983(%rbp), %al        # 1-byte Reload
	movb	%al, -9982(%rbp)        # 1-byte Spill
.LBB113_218:                            # %lor.end.827
	movb	-9982(%rbp), %al        # 1-byte Reload
	movb	%al, -9981(%rbp)        # 1-byte Spill
.LBB113_219:                            # %land.end.828
	movb	-9981(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -4921(%rbp)
.LBB113_220:                            # %if.end.831
	movl	-2536(%rbp), %eax
	movl	%eax, -4916(%rbp)
	testb	$1, -4922(%rbp)
	je	.LBB113_223
# BB#221:                               # %land.lhs.true.835
	testb	$1, -4921(%rbp)
	je	.LBB113_223
# BB#222:                               # %if.then.838
	movl	$0, -4916(%rbp)
	jmp	.LBB113_226
.LBB113_223:                            # %if.else.839
	cmpl	$0, -4916(%rbp)
	jg	.LBB113_225
# BB#224:                               # %if.then.842
	movl	$1, -4916(%rbp)
.LBB113_225:                            # %if.end.843
	jmp	.LBB113_226
.LBB113_226:                            # %if.end.844
	testb	$1, -4922(%rbp)
	je	.LBB113_231
# BB#227:                               # %if.then.846
	movl	-2448(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB113_229
# BB#228:                               # %if.then.852
	movl	-4916(%rbp), %eax
	imull	-2256(%rbp), %eax
	addl	-4908(%rbp), %eax
	movl	%eax, -4908(%rbp)
	jmp	.LBB113_230
.LBB113_229:                            # %if.else.855
	movl	-4916(%rbp), %eax
	addl	-4908(%rbp), %eax
	movl	%eax, -4908(%rbp)
.LBB113_230:                            # %if.end.857
	jmp	.LBB113_231
.LBB113_231:                            # %if.end.858
	cmpl	$0, -44(%rbp)
	jle	.LBB113_233
# BB#232:                               # %if.then.861
	movl	-4908(%rbp), %eax
	addl	-4916(%rbp), %eax
	movl	%eax, -4912(%rbp)
	jmp	.LBB113_234
.LBB113_233:                            # %if.else.863
	movl	-4908(%rbp), %eax
	movq	-4888(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %edx
	cmpl	$2, %edx
	sete	%sil
	xorb	$-1, %sil
	andb	$1, %sil
	movzbl	%sil, %edx
	imull	-4916(%rbp), %edx
	subl	%edx, %eax
	movl	%eax, -4912(%rbp)
.LBB113_234:                            # %if.end.873
	cmpl	$0, -44(%rbp)
	jge	.LBB113_254
# BB#235:                               # %if.then.876
	cmpl	$0, -4908(%rbp)
	jle	.LBB113_241
# BB#236:                               # %if.then.879
	leaq	-4904(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rcx
	callq	start_display
	cmpl	$0, -2788(%rbp)
	jne	.LBB113_238
# BB#237:                               # %if.then.883
	movl	$10000000, -2584(%rbp)  # imm = 0x989680
.LBB113_238:                            # %if.end.885
	leaq	-4904(%rbp), %rdi
	callq	reseat_at_previous_visible_line_start
	movl	$0, -2460(%rbp)
	movl	$0, -2472(%rbp)
	movl	$0, -2500(%rbp)
	cmpl	$0, -4920(%rbp)
	je	.LBB113_240
# BB#239:                               # %if.then.891
	leaq	-4904(%rbp), %rdi
	movslq	-4920(%rbp), %rsi
	callq	move_it_by_lines
.LBB113_240:                            # %if.end.893
	jmp	.LBB113_253
.LBB113_241:                            # %if.else.894
	leaq	-4904(%rbp), %rdi
	movq	$-1, %rsi
	callq	move_it_by_lines
	movl	-2584(%rbp), %eax
	movq	-4888(%rbp), %rsi
	movq	208(%rsi), %rsi
	shrq	$23, %rsi
	andq	$7, %rsi
	movl	%esi, %ecx
	cmpl	$2, %ecx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	subl	%ecx, %eax
	movl	%eax, -4912(%rbp)
	movb	$1, -4923(%rbp)
	movq	-4888(%rbp), %rsi
	movq	208(%rsi), %rsi
	shrq	$23, %rsi
	andq	$7, %rsi
	movl	%esi, %eax
	cmpl	$2, %eax
	je	.LBB113_252
# BB#242:                               # %land.lhs.true.915
	cmpl	$1, -2788(%rbp)
	jne	.LBB113_252
# BB#243:                               # %if.then.919
	movq	$0, -4944(%rbp)
# BB#244:                               # %do.body.920
	cmpq	$0, -4944(%rbp)
	je	.LBB113_246
# BB#245:                               # %if.then.922
	movl	$1, %esi
	movq	-4944(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB113_246:                            # %if.end.923
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4904(%rbp), %rcx
	leaq	-9744(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4944(%rbp)
# BB#247:                               # %do.end.925
	leaq	-4904(%rbp), %rdi
	movl	$9, %ecx
	movq	current_buffer, %rax
	movq	768(%rax), %rsi
	movl	-4912(%rbp), %edx
	callq	move_it_in_display_line_to
	movl	-2500(%rbp), %ecx
	cmpl	-4912(%rbp), %ecx
	movl	%eax, -9988(%rbp)       # 4-byte Spill
	je	.LBB113_249
# BB#248:                               # %if.then.931
	movl	-2500(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -4912(%rbp)
.LBB113_249:                            # %if.end.934
	jmp	.LBB113_250
.LBB113_250:                            # %do.body.935
	xorl	%esi, %esi
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-9744(%rbp), %rcx
	leaq	-4904(%rbp), %rdi
	movl	%esi, -9992(%rbp)       # 4-byte Spill
	movq	%rcx, %rsi
	callq	memcpy
	movq	-4944(%rbp), %rdi
	movl	-9992(%rbp), %esi       # 4-byte Reload
	callq	bidi_unshelve_cache
	movq	$0, -4944(%rbp)
# BB#251:                               # %do.end.936
	jmp	.LBB113_252
.LBB113_252:                            # %if.end.937
	jmp	.LBB113_253
.LBB113_253:                            # %if.end.938
	jmp	.LBB113_261
.LBB113_254:                            # %if.else.939
	testb	$1, -4921(%rbp)
	jne	.LBB113_257
# BB#255:                               # %lor.lhs.false.942
	movl	-4912(%rbp), %eax
	cmpl	-2584(%rbp), %eax
	jl	.LBB113_260
# BB#256:                               # %land.lhs.true.946
	cmpl	$0, -2788(%rbp)
	je	.LBB113_260
.LBB113_257:                            # %if.then.950
	cmpl	$0, -4908(%rbp)
	jle	.LBB113_259
# BB#258:                               # %if.then.953
	leaq	-4904(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
.LBB113_259:                            # %if.end.954
	leaq	-4904(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
	movl	$0, -4912(%rbp)
.LBB113_260:                            # %if.end.955
	jmp	.LBB113_261
.LBB113_261:                            # %if.end.956
	movq	-4888(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB113_291
# BB#262:                               # %land.lhs.true.965
	cmpl	$0, -44(%rbp)
	jge	.LBB113_291
# BB#263:                               # %if.then.968
	movl	$2, -9764(%rbp)
	cmpl	$0, -2500(%rbp)
	jne	.LBB113_265
# BB#264:                               # %if.then.973
	leaq	-4904(%rbp), %rdi
	callq	get_next_display_element
	movb	%al, -9993(%rbp)        # 1-byte Spill
.LBB113_265:                            # %if.end.975
	cmpl	$1, -2800(%rbp)
	jne	.LBB113_267
# BB#266:                               # %if.then.979
	movq	-2728(%rbp), %rax
	movq	%rax, -9760(%rbp)
	movq	$-1, -9752(%rbp)
	jmp	.LBB113_268
.LBB113_267:                            # %if.else.984
	movq	-4592(%rbp), %rax
	movq	%rax, -9760(%rbp)
	movq	-4584(%rbp), %rax
	movq	%rax, -9752(%rbp)
.LBB113_268:                            # %if.end.987
	jmp	.LBB113_269
.LBB113_269:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-2500(%rbp), %eax
	addl	-2536(%rbp), %eax
	cmpl	-4912(%rbp), %eax
	movb	%cl, -9994(%rbp)        # 1-byte Spill
	jg	.LBB113_275
# BB#270:                               # %land.rhs.993
                                        #   in Loop: Header=BB113_269 Depth=1
	movb	$1, %al
	cmpl	$2, -9764(%rbp)
	movb	%al, -9995(%rbp)        # 1-byte Spill
	je	.LBB113_274
# BB#271:                               # %lor.rhs.996
                                        #   in Loop: Header=BB113_269 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$1, -2788(%rbp)
	movb	%cl, -9996(%rbp)        # 1-byte Spill
	jne	.LBB113_273
# BB#272:                               # %land.rhs.1000
                                        #   in Loop: Header=BB113_269 Depth=1
	cmpl	$1, -9764(%rbp)
	sete	%al
	movb	%al, -9996(%rbp)        # 1-byte Spill
.LBB113_273:                            # %land.end.1003
                                        #   in Loop: Header=BB113_269 Depth=1
	movb	-9996(%rbp), %al        # 1-byte Reload
	movb	%al, -9995(%rbp)        # 1-byte Spill
.LBB113_274:                            # %lor.end.1005
                                        #   in Loop: Header=BB113_269 Depth=1
	movb	-9995(%rbp), %al        # 1-byte Reload
	movb	%al, -9994(%rbp)        # 1-byte Spill
.LBB113_275:                            # %land.end.1006
                                        #   in Loop: Header=BB113_269 Depth=1
	movb	-9994(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB113_276
	jmp	.LBB113_288
.LBB113_276:                            # %while.body
                                        #   in Loop: Header=BB113_269 Depth=1
	movl	-2500(%rbp), %eax
	addl	-2536(%rbp), %eax
	movl	%eax, -9768(%rbp)
	cmpl	$1, -2800(%rbp)
	jne	.LBB113_278
# BB#277:                               # %if.then.1014
                                        #   in Loop: Header=BB113_269 Depth=1
	movq	-2728(%rbp), %rax
	movq	%rax, -9760(%rbp)
	movq	$-1, -9752(%rbp)
	jmp	.LBB113_279
.LBB113_278:                            # %if.else.1019
                                        #   in Loop: Header=BB113_269 Depth=1
	movq	-4592(%rbp), %rax
	movq	%rax, -9760(%rbp)
	movq	-4584(%rbp), %rax
	movq	%rax, -9752(%rbp)
.LBB113_279:                            # %if.end.1022
                                        #   in Loop: Header=BB113_269 Depth=1
	movl	-9768(%rbp), %eax
	cmpl	-2500(%rbp), %eax
	jne	.LBB113_281
# BB#280:                               # %if.then.1026
                                        #   in Loop: Header=BB113_269 Depth=1
	movl	-9768(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -9768(%rbp)
.LBB113_281:                            # %if.end.1027
                                        #   in Loop: Header=BB113_269 Depth=1
	leaq	-4904(%rbp), %rdi
	movl	$9, %ecx
	movq	current_buffer, %rax
	movq	768(%rax), %rsi
	movl	-9768(%rbp), %edx
	callq	move_it_in_display_line_to
	movl	%eax, -9764(%rbp)
	cmpl	$0, -2800(%rbp)
	jne	.LBB113_287
# BB#282:                               # %land.lhs.true.1033
                                        #   in Loop: Header=BB113_269 Depth=1
	cmpl	$10, -2780(%rbp)
	je	.LBB113_285
# BB#283:                               # %lor.lhs.false.1037
                                        #   in Loop: Header=BB113_269 Depth=1
	cmpl	$13, -2780(%rbp)
	jne	.LBB113_287
# BB#284:                               # %land.lhs.true.1041
                                        #   in Loop: Header=BB113_269 Depth=1
	cmpq	$0, -2808(%rbp)
	je	.LBB113_287
.LBB113_285:                            # %land.lhs.true.1044
                                        #   in Loop: Header=BB113_269 Depth=1
	testb	$1, -4923(%rbp)
	jne	.LBB113_287
# BB#286:                               # %if.then.1046
	jmp	.LBB113_288
.LBB113_287:                            # %if.end.1047
                                        #   in Loop: Header=BB113_269 Depth=1
	jmp	.LBB113_269
.LBB113_288:                            # %while.end
	cmpq	$-1, -9752(%rbp)
	jne	.LBB113_290
# BB#289:                               # %if.then.1051
	movq	current_buffer, %rdi
	movq	-9760(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -9752(%rbp)
.LBB113_290:                            # %if.end.1055
	movq	-9760(%rbp), %rax
	movq	%rax, -4592(%rbp)
	movq	-9752(%rbp), %rax
	movq	%rax, -4584(%rbp)
	jmp	.LBB113_294
.LBB113_291:                            # %if.else.1058
	movl	-2500(%rbp), %eax
	cmpl	-4912(%rbp), %eax
	je	.LBB113_293
# BB#292:                               # %if.then.1062
	leaq	-4904(%rbp), %rdi
	movl	$9, %ecx
	movq	current_buffer, %rax
	movq	768(%rax), %rsi
	movl	-4912(%rbp), %edx
	callq	move_it_in_display_line_to
	movl	%eax, -10000(%rbp)      # 4-byte Spill
.LBB113_293:                            # %if.end.1065
	jmp	.LBB113_294
.LBB113_294:                            # %if.end.1066
	cmpl	$0, -44(%rbp)
	jle	.LBB113_301
# BB#295:                               # %if.then.1069
	jmp	.LBB113_296
.LBB113_296:                            # %while.cond.1070
                                        # =>This Inner Loop Header: Depth=1
	movq	-4592(%rbp), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jne	.LBB113_300
# BB#297:                               # %while.body.1078
                                        #   in Loop: Header=BB113_296 Depth=1
	leaq	-4904(%rbp), %rdi
	xorl	%esi, %esi
	callq	set_iterator_to_next
	leaq	-4904(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB113_299
# BB#298:                               # %if.then.1080
	jmp	.LBB113_300
.LBB113_299:                            # %if.end.1081
                                        #   in Loop: Header=BB113_296 Depth=1
	jmp	.LBB113_296
.LBB113_300:                            # %while.end.1082
	jmp	.LBB113_301
.LBB113_301:                            # %if.end.1083
	movq	-4592(%rbp), %rdi
	movq	-4584(%rbp), %rsi
	callq	set_point_both
# BB#302:                               # %if.end.1090
	jmp	.LBB113_303
.LBB113_303:                            # %if.end.1091
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
.LBB113_304:                            # %return
	movq	-8(%rbp), %rax
	addq	$10000, %rsp            # imm = 0x2710
	popq	%rbp
	retq
.Lfunc_end113:
	.size	Fmove_point_visually, .Lfunc_end113-Fmove_point_visually
	.cfi_endproc

	.globl	Fbidi_resolved_levels
	.align	16, 0x90
	.type	Fbidi_resolved_levels,@function
Fbidi_resolved_levels:                  # @Fbidi_resolved_levels
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp342:
	.cfi_def_cfa_offset 16
.Ltmp343:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp344:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -16(%rbp)
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB114_2
# BB#1:                                 # %if.then
	leaq	-52(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-60(%rbp), %r8
	leaq	-64(%rbp), %r9
	leaq	-68(%rbp), %rax
	leaq	-36(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movq	current_buffer, %r10
	movq	736(%r10), %r10
	addq	$0, %r10
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	movq	%r10, %rsi
	movq	%rax, (%rsp)
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, 8(%rsp)
	callq	pos_visible_p
	movb	%al, -129(%rbp)         # 1-byte Spill
	jmp	.LBB114_12
.LBB114_2:                              # %if.else
	jmp	.LBB114_3
.LBB114_3:                              # %do.body
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB114_6
# BB#4:                                 # %land.lhs.true
	movq	-16(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB114_6
# BB#5:                                 # %if.then.9
	movq	-16(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -16(%rbp)
	jmp	.LBB114_10
.LBB114_6:                              # %if.else.12
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB114_8
# BB#7:                                 # %cond.true
	jmp	.LBB114_9
.LBB114_8:                              # %cond.false
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB114_9:                              # %cond.end
	jmp	.LBB114_10
.LBB114_10:                             # %if.end
	jmp	.LBB114_11
.LBB114_11:                             # %do.end
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB114_12:                             # %if.end.20
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB114_58
# BB#13:                                # %land.lhs.true.22
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB114_58
# BB#14:                                # %land.lhs.true.23
	cmpq	$0, -32(%rbp)
	je	.LBB114_58
# BB#15:                                # %land.lhs.true.25
	movq	-32(%rbp), %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB114_58
# BB#16:                                # %land.lhs.true.30
	movq	-32(%rbp), %rax
	movb	936(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB114_58
# BB#17:                                # %land.lhs.true.34
	movq	-24(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB114_58
# BB#18:                                # %land.lhs.true.36
	cmpl	$0, -36(%rbp)
	jl	.LBB114_58
# BB#19:                                # %land.lhs.true.39
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB114_58
# BB#20:                                # %land.lhs.true.42
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-36(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB114_58
# BB#21:                                # %land.lhs.true.49
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB114_58
# BB#22:                                # %if.then.55
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB114_40
# BB#23:                                # %if.then.60
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	-48(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
.LBB114_24:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-80(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -145(%rbp)         # 1-byte Spill
	jae	.LBB114_27
# BB#25:                                # %land.lhs.true.67
                                        #   in Loop: Header=BB114_24 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-160(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -145(%rbp)         # 1-byte Spill
	jne	.LBB114_27
# BB#26:                                # %land.rhs
                                        #   in Loop: Header=BB114_24 Depth=1
	movq	-80(%rbp), %rax
	cmpq	$0, (%rax)
	setl	%cl
	movb	%cl, -145(%rbp)         # 1-byte Spill
.LBB114_27:                             # %land.end
                                        #   in Loop: Header=BB114_24 Depth=1
	movb	-145(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB114_28
	jmp	.LBB114_29
.LBB114_28:                             # %while.body
                                        #   in Loop: Header=BB114_24 Depth=1
	movq	-80(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB114_24
.LBB114_29:                             # %while.end
	movq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -100(%rbp)
.LBB114_30:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-80(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -161(%rbp)         # 1-byte Spill
	jae	.LBB114_32
# BB#31:                                # %land.rhs.75
                                        #   in Loop: Header=BB114_30 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -161(%rbp)         # 1-byte Spill
.LBB114_32:                             # %land.end.80
                                        #   in Loop: Header=BB114_30 Depth=1
	movb	-161(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB114_33
	jmp	.LBB114_35
.LBB114_33:                             # %for.body
                                        #   in Loop: Header=BB114_30 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
# BB#34:                                # %for.inc
                                        #   in Loop: Header=BB114_30 Depth=1
	movq	-80(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB114_30
.LBB114_35:                             # %for.end
	movslq	-100(%rbp), %rdi
	callq	make_uninit_vector
	movq	%rax, -112(%rbp)
	movl	$0, -104(%rbp)
.LBB114_36:                             # %for.cond.84
                                        # =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jae	.LBB114_39
# BB#37:                                # %for.body.87
                                        #   in Loop: Header=BB114_36 Depth=1
	movq	-112(%rbp), %rdi
	movslq	-104(%rbp), %rsi
	movq	-96(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$10, %ecx
	andl	$127, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdx
	callq	ASET
# BB#38:                                # %for.inc.94
                                        #   in Loop: Header=BB114_36 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movq	-96(%rbp), %rcx
	addq	$48, %rcx
	movq	%rcx, -96(%rbp)
	jmp	.LBB114_36
.LBB114_39:                             # %for.end.97
	jmp	.LBB114_57
.LBB114_40:                             # %if.else.98
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	-48(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	addq	$-48, %rax
	movq	%rax, -88(%rbp)
.LBB114_41:                             # %while.cond.110
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-80(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -177(%rbp)         # 1-byte Spill
	jbe	.LBB114_44
# BB#42:                                # %land.lhs.true.113
                                        #   in Loop: Header=BB114_41 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-192(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -177(%rbp)         # 1-byte Spill
	jne	.LBB114_44
# BB#43:                                # %land.rhs.118
                                        #   in Loop: Header=BB114_41 Depth=1
	movq	-80(%rbp), %rax
	cmpq	$0, (%rax)
	setl	%cl
	movb	%cl, -177(%rbp)         # 1-byte Spill
.LBB114_44:                             # %land.end.122
                                        #   in Loop: Header=BB114_41 Depth=1
	movb	-177(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB114_45
	jmp	.LBB114_46
.LBB114_45:                             # %while.body.123
                                        #   in Loop: Header=BB114_41 Depth=1
	movq	-80(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB114_41
.LBB114_46:                             # %while.end.125
	movq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -100(%rbp)
.LBB114_47:                             # %for.cond.126
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-80(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -193(%rbp)         # 1-byte Spill
	jbe	.LBB114_49
# BB#48:                                # %land.rhs.129
                                        #   in Loop: Header=BB114_47 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -193(%rbp)         # 1-byte Spill
.LBB114_49:                             # %land.end.135
                                        #   in Loop: Header=BB114_47 Depth=1
	movb	-193(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB114_50
	jmp	.LBB114_52
.LBB114_50:                             # %for.body.136
                                        #   in Loop: Header=BB114_47 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
# BB#51:                                # %for.inc.138
                                        #   in Loop: Header=BB114_47 Depth=1
	movq	-80(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB114_47
.LBB114_52:                             # %for.end.140
	movslq	-100(%rbp), %rdi
	callq	make_uninit_vector
	movq	%rax, -112(%rbp)
	movl	$0, -104(%rbp)
.LBB114_53:                             # %for.cond.143
                                        # =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jbe	.LBB114_56
# BB#54:                                # %for.body.146
                                        #   in Loop: Header=BB114_53 Depth=1
	movq	-112(%rbp), %rdi
	movslq	-104(%rbp), %rsi
	movq	-96(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$10, %ecx
	andl	$127, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdx
	callq	ASET
# BB#55:                                # %for.inc.155
                                        #   in Loop: Header=BB114_53 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movq	-96(%rbp), %rcx
	addq	$-48, %rcx
	movq	%rcx, -96(%rbp)
	jmp	.LBB114_53
.LBB114_56:                             # %for.end.158
	jmp	.LBB114_57
.LBB114_57:                             # %if.end.159
	movq	-112(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB114_59
.LBB114_58:                             # %if.else.160
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB114_59:                             # %return
	movq	-8(%rbp), %rax
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end114:
	.size	Fbidi_resolved_levels, .Lfunc_end114-Fbidi_resolved_levels
	.cfi_endproc

	.globl	display_tty_menu_item
	.align	16, 0x90
	.type	display_tty_menu_item,@function
display_tty_menu_item:                  # @display_tty_menu_item
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp345:
	.cfi_def_cfa_offset 16
.Ltmp346:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp347:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	subq	$5088, %rsp             # imm = 0x13E0
.Ltmp348:
	.cfi_offset %rbx, -48
.Ltmp349:
	.cfi_offset %r12, -40
.Ltmp350:
	.cfi_offset %r14, -32
.Ltmp351:
	.cfi_offset %r15, -24
	movb	%r9b, %al
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -56(%rbp)
	andb	$1, %al
	movb	%al, -57(%rbp)
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB115_1
	jmp	.LBB115_3
.LBB115_1:                              # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB115_3
# BB#2:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	jmp	.LBB115_4
.LBB115_3:                              # %cond.false
	callq	emacs_abort
.LBB115_4:                              # %cond.end
	movq	-4920(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4872(%rbp)
	movq	-4872(%rbp), %rcx
	movq	48(%rcx), %rdi
	callq	XWINDOW
	movq	%rax, -4880(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movq	%rax, -4896(%rbp)
	movl	-56(%rbp), %edx
	movq	-4872(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %edx
	jl	.LBB115_6
# BB#5:                                 # %if.then
	jmp	.LBB115_13
.LBB115_6:                              # %if.end
	leaq	-4864(%rbp), %rdi
	movq	$-1, %rax
	movl	$10, %r9d
	movq	-4880(%rbp), %rsi
	movq	-4872(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	movq	%rcx, -4928(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4928(%rbp), %r8        # 8-byte Reload
	callq	init_iterator
	movl	$0, -2548(%rbp)
	movq	-4872(%rbp), %rax
	movl	272(%rax), %r9d
	subl	$1, %r9d
	movl	%r9d, -2544(%rbp)
	movq	-2512(%rbp), %rax
	movq	%rax, -4888(%rbp)
	movq	-4888(%rbp), %rdi
	movq	-4872(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	callq	deep_copy_glyph_row
	xorl	%edi, %edi
	movq	-4888(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	movb	%al, %r10b
	andb	$1, %r10b
	movb	%r10b, -4897(%rbp)
	movq	-4888(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-524289, %rcx          # imm = 0xFFFFFFFFFFF7FFFF
	orq	$524288, %rcx           # imm = 0x80000
	movq	%rcx, 236(%rax)
	movq	-4888(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	movb	%al, %r10b
	andb	$1, %r10b
	movb	%r10b, -4898(%rbp)
	movq	-4888(%rbp), %rax
	movabsq	$-17179869185, %rcx     # imm = 0xFFFFFFFBFFFFFFFF
	andq	236(%rax), %rcx
	movq	%rcx, 236(%rax)
	movq	-4888(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	orq	$1024, %rcx             # imm = 0x400
	movq	%rcx, 236(%rax)
	movl	-52(%rbp), %r9d
	movl	%r9d, -2420(%rbp)
	movl	%r9d, -2460(%rbp)
	movl	-56(%rbp), %r9d
	movl	%r9d, -2424(%rbp)
	movl	%r9d, -2432(%rbp)
	movq	-4888(%rbp), %rax
	movswl	34(%rax), %r9d
	movl	%r9d, -4904(%rbp)
	movq	-4888(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	movb	%al, %r10b
	andb	$1, %r10b
	movb	%r10b, -4905(%rbp)
	movl	-52(%rbp), %r9d
	movw	%r9w, %r11w
	movq	-4888(%rbp), %rax
	movw	%r11w, 34(%rax)
	movl	-48(%rbp), %r9d
	movl	%r9d, -2756(%rbp)
	movl	$0, -2748(%rbp)
	movl	$1, -72(%rbp)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -4936(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str.5, %rdi
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	leaq	-4864(%rbp), %r9
	movl	$1, %ebx
	xorl	%r14d, %r14d
	movl	$4294967295, %r15d      # imm = 0xFFFFFFFF
	movq	-4872(%rbp), %rdx
	movl	272(%rdx), %r12d
	subl	$1, %r12d
	movq	-4936(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	%rcx, -4944(%rbp)       # 8-byte Spill
	movq	-4944(%rbp), %r8        # 8-byte Reload
	movl	$1, (%rsp)
	movl	$0, 8(%rsp)
	movl	%r12d, 16(%rsp)
	movl	$-1, 24(%rsp)
	movl	%r15d, -4948(%rbp)      # 4-byte Spill
	movl	%ebx, -4952(%rbp)       # 4-byte Spill
	movl	%r14d, -4956(%rbp)      # 4-byte Spill
	callq	display_string
	movl	-44(%rbp), %ebx
	addl	$-1, %ebx
	movl	%ebx, -44(%rbp)
	testb	$1, -57(%rbp)
	movl	%eax, -4960(%rbp)       # 4-byte Spill
	je	.LBB115_8
# BB#7:                                 # %if.then.39
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -4968(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %ecx
	leaq	-4864(%rbp), %r9
	xorl	%edi, %edi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movq	-4896(%rbp), %rsi
	movl	%esi, %r8d
	movq	-4872(%rbp), %rsi
	movl	272(%rsi), %r10d
	subl	$1, %r10d
	movq	-4968(%rbp), %rsi       # 8-byte Reload
	movl	%edi, -4980(%rbp)       # 4-byte Spill
	movq	%rsi, %rdi
	movq	-4976(%rbp), %rsi       # 8-byte Reload
	movl	%edx, -4984(%rbp)       # 4-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -4992(%rbp)       # 8-byte Spill
	movq	-4992(%rbp), %rax       # 8-byte Reload
	movl	%r8d, -4996(%rbp)       # 4-byte Spill
	movq	%rax, %r8
	movl	-4996(%rbp), %r11d      # 4-byte Reload
	movl	%r11d, (%rsp)
	movl	$0, 8(%rsp)
	movl	%r10d, 16(%rsp)
	movl	$-1, 24(%rsp)
	callq	display_string
	xorl	%edi, %edi
	movq	-4896(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	subq	%rcx, %rdx
	movl	%edx, %r10d
	movl	%r10d, -44(%rbp)
	movl	%eax, -5000(%rbp)       # 4-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str.6, %rdi
	xorl	%r10d, %r10d
	movl	%r10d, %ecx
	leaq	-4864(%rbp), %r9
	xorl	%r10d, %r10d
	movl	$4294967295, %r11d      # imm = 0xFFFFFFFF
	movl	-44(%rbp), %ebx
	movq	-4872(%rbp), %rdx
	movl	272(%rdx), %r14d
	subl	$1, %r14d
	movq	-5008(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	%rcx, -5016(%rbp)       # 8-byte Spill
	movq	-5016(%rbp), %r8        # 8-byte Reload
	movl	%ebx, (%rsp)
	movl	$0, 8(%rsp)
	movl	%r14d, 16(%rsp)
	movl	$-1, 24(%rsp)
	movl	%r10d, -5020(%rbp)      # 4-byte Spill
	movl	%r11d, -5024(%rbp)      # 4-byte Spill
	callq	display_string
	movl	%eax, -5028(%rbp)       # 4-byte Spill
	jmp	.LBB115_9
.LBB115_8:                              # %if.else
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %ecx
	leaq	-4864(%rbp), %r9
	xorl	%edi, %edi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	-44(%rbp), %esi
	movq	-4872(%rbp), %r8
	movl	272(%r8), %r10d
	subl	$1, %r10d
	movq	-5040(%rbp), %r8        # 8-byte Reload
	movl	%edi, -5052(%rbp)       # 4-byte Spill
	movq	%r8, %rdi
	movq	-5048(%rbp), %r11       # 8-byte Reload
	movl	%esi, -5056(%rbp)       # 4-byte Spill
	movq	%r11, %rsi
	movl	%edx, -5060(%rbp)       # 4-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -5072(%rbp)       # 8-byte Spill
	movq	-5072(%rbp), %r8        # 8-byte Reload
	movl	-5056(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rsp)
	movl	$0, 8(%rsp)
	movl	%r10d, 16(%rsp)
	movl	$-1, 24(%rsp)
	callq	display_string
	movl	%eax, -5076(%rbp)       # 4-byte Spill
.LBB115_9:                              # %if.end.59
	movl	-4904(%rbp), %eax
	movq	-4888(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB115_11
# BB#10:                                # %cond.true.65
	movl	-4904(%rbp), %eax
	movl	%eax, -5080(%rbp)       # 4-byte Spill
	jmp	.LBB115_12
.LBB115_11:                             # %cond.false.66
	movq	-4888(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -5080(%rbp)       # 4-byte Spill
.LBB115_12:                             # %cond.end.70
	movl	-5080(%rbp), %eax       # 4-byte Reload
	movw	%ax, %cx
	movq	-4888(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movb	-4905(%rbp), %sil
	movq	-4888(%rbp), %rdx
	andb	$1, %sil
	movzbl	%sil, %eax
	movl	%eax, %edi
	movq	236(%rdx), %r8
	shlq	$12, %rdi
	andq	$-4097, %r8             # imm = 0xFFFFFFFFFFFFEFFF
	orq	%rdi, %r8
	movq	%r8, 236(%rdx)
	movq	-4888(%rbp), %rdi
	callq	row_hash
	movq	-4888(%rbp), %rdx
	movl	%eax, 40(%rdx)
	movb	-4897(%rbp), %sil
	movq	-4888(%rbp), %rdx
	andb	$1, %sil
	movzbl	%sil, %eax
	movl	%eax, %edi
	movq	236(%rdx), %r8
	shlq	$19, %rdi
	andq	$-524289, %r8           # imm = 0xFFFFFFFFFFF7FFFF
	orq	%rdi, %r8
	movq	%r8, 236(%rdx)
	movb	-4898(%rbp), %sil
	movq	-4888(%rbp), %rdx
	andb	$1, %sil
	movzbl	%sil, %eax
	movl	%eax, %edi
	movq	236(%rdx), %r8
	shlq	$34, %rdi
	movabsq	$-17179869185, %r9      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r9, %r8
	orq	%rdi, %r8
	movq	%r8, 236(%rdx)
.LBB115_13:                             # %return
	addq	$5088, %rsp             # imm = 0x13E0
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end115:
	.size	display_tty_menu_item, .Lfunc_end115-display_tty_menu_item
	.cfi_endproc

	.align	16, 0x90
	.type	deep_copy_glyph_row,@function
deep_copy_glyph_row:                    # @deep_copy_glyph_row
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp352:
	.cfi_def_cfa_offset 16
.Ltmp353:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp354:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$256, %eax              # imm = 0x100
	movl	%eax, %edx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movswl	34(%rsi), %eax
	movl	%eax, -52(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdi, -48(%rbp)
	movq	8(%rsi), %rdi
	movq	%rdi, -40(%rbp)
	movq	16(%rsi), %rdi
	movq	%rdi, -32(%rbp)
	movq	24(%rsi), %rsi
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	callq	memcpy
	movq	-8(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-40(%rbp), %rsi
	movq	%rsi, 8(%rdx)
	movq	-32(%rbp), %rsi
	movq	%rsi, 16(%rdx)
	movq	-24(%rbp), %rsi
	movq	%rsi, 24(%rdx)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rsi
	movq	-16(%rbp), %rdi
	movswl	34(%rdi), %eax
	cmpl	-52(%rbp), %eax
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	jge	.LBB116_2
# BB#1:                                 # %cond.true
	movq	-16(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB116_3
.LBB116_2:                              # %cond.false
	movl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB116_3:                              # %cond.end
	movl	-84(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	imulq	$48, %rcx, %rdx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	callq	memcpy
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movswl	34(%rcx), %r8d
	cmpl	%r8d, %eax
	jle	.LBB116_5
# BB#4:                                 # %if.then
	movq	-8(%rbp), %rdi
	movl	-52(%rbp), %esi
	callq	fill_up_frame_row_with_spaces
.LBB116_5:                              # %if.end
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end116:
	.size	deep_copy_glyph_row, .Lfunc_end116-deep_copy_glyph_row
	.cfi_endproc

	.align	16, 0x90
	.type	display_string,@function
display_string:                         # @display_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp355:
	.cfi_def_cfa_offset 16
.Ltmp356:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp357:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$240, %rsp
.Ltmp358:
	.cfi_offset %rbx, -32
.Ltmp359:
	.cfi_offset %r14, -24
	movl	40(%rbp), %eax
	movl	32(%rbp), %r10d
	movl	24(%rbp), %r11d
	movl	16(%rbp), %ebx
	xorl	%r14d, %r14d
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	movl	%ebx, -68(%rbp)
	movl	%r11d, -72(%rbp)
	movl	%r10d, -76(%rbp)
	movl	%eax, -80(%rbp)
	movq	-64(%rbp), %rcx
	movl	2444(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rcx
	movl	2108(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-64(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	-64(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	%rdi, -168(%rbp)        # 8-byte Spill
	movl	%r14d, %edi
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB117_2
# BB#1:                                 # %cond.true
	movq	-24(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB117_3
.LBB117_2:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	jmp	.LBB117_3
.LBB117_3:                              # %cond.end
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movslq	-72(%rbp), %r8
	movl	-68(%rbp), %r9d
	movl	-80(%rbp), %esi
	movq	-168(%rbp), %rdi        # 8-byte Reload
	movl	%esi, -188(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movl	-188(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, (%rsp)
	callq	reseat_to_string
	cmpq	$0, -24(%rbp)
	je	.LBB117_6
# BB#4:                                 # %land.lhs.true
	movq	-32(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB117_5
	jmp	.LBB117_6
.LBB117_5:                              # %if.then
	movq	-64(%rbp), %rax
	movq	56(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 32(%rcx)
.LBB117_6:                              # %if.end
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB117_7
	jmp	.LBB117_13
.LBB117_7:                              # %if.then.4
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	-112(%rbp), %r8
	xorl	%eax, %eax
	movq	-64(%rbp), %rdx
	movq	8(%rdx), %rdi
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-64(%rbp), %r9
	movl	2120(%r9), %r9d
	movl	$0, (%rsp)
	movl	%eax, -192(%rbp)        # 4-byte Spill
	callq	face_at_string_position
	movb	$1, %r10b
	movq	-64(%rbp), %rcx
	movl	%eax, 2108(%rcx)
	testb	$1, %r10b
	jne	.LBB117_8
	jmp	.LBB117_9
.LBB117_8:                              # %cond.true.7
	movq	-64(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB117_10
	jmp	.LBB117_11
.LBB117_9:                              # %cond.false.12
	movq	-64(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-64(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB117_11
.LBB117_10:                             # %cond.true.23
	movq	-64(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-64(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB117_12
.LBB117_11:                             # %cond.false.27
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB117_12
.LBB117_12:                             # %cond.end.28
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)
	movb	240(%rax), %cl
	testb	$3, %cl
	setne	%cl
	movq	-64(%rbp), %rax
	movzbl	%cl, %edx
	movw	%dx, %si
	movw	2112(%rax), %di
	shlw	$2, %si
	andw	$-5, %di
	orw	%si, %di
	movw	%di, 2112(%rax)
.LBB117_13:                             # %if.end.35
	cmpl	$0, -76(%rbp)
	jg	.LBB117_15
# BB#14:                                # %if.then.38
	movq	-64(%rbp), %rax
	movl	2320(%rax), %ecx
	movl	%ecx, -76(%rbp)
	jmp	.LBB117_19
.LBB117_15:                             # %if.else
	movl	-76(%rbp), %eax
	movq	-64(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jge	.LBB117_17
# BB#16:                                # %cond.true.42
	movl	-76(%rbp), %eax
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB117_18
.LBB117_17:                             # %cond.false.43
	movq	-64(%rbp), %rax
	movl	2320(%rax), %ecx
	movl	%ecx, -204(%rbp)        # 4-byte Spill
.LBB117_18:                             # %cond.end.45
	movl	-204(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
.LBB117_19:                             # %if.end.47
	movq	-64(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-64(%rbp), %rax
	cmpl	2316(%rax), %ecx
	jge	.LBB117_21
# BB#20:                                # %if.then.50
	movl	$100000, %eax           # imm = 0x186A0
	movl	%eax, %esi
	movl	$9, %ecx
	movq	-64(%rbp), %rdi
	movq	-64(%rbp), %rdx
	movl	2316(%rdx), %edx
	callq	move_it_in_display_line_to
	movl	%eax, -208(%rbp)        # 4-byte Spill
.LBB117_21:                             # %if.end.53
	movq	-64(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, 56(%rax)
	movq	-64(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	2384(%rax), %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, 60(%rax)
	movq	-64(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, 64(%rax)
	movq	-64(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	2400(%rax), %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, 68(%rax)
	movq	-64(%rbp), %rax
	movl	2332(%rax), %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, 76(%rax)
	movq	-64(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB117_22
	jmp	.LBB117_23
.LBB117_22:                             # %if.then.60
	movq	-64(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB117_24
.LBB117_23:                             # %if.else.61
	movq	-64(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -104(%rbp)
.LBB117_24:                             # %if.end.64
	jmp	.LBB117_25
.LBB117_25:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_39 Depth 2
	movq	-64(%rbp), %rax
	movl	2404(%rax), %ecx
	cmpl	-76(%rbp), %ecx
	jge	.LBB117_111
# BB#26:                                # %while.body
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB117_28
# BB#27:                                # %if.then.69
	jmp	.LBB117_111
.LBB117_28:                             # %if.end.70
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movl	2404(%rax), %ecx
	movl	%ecx, -124(%rbp)
	movq	-96(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -132(%rbp)
# BB#29:                                # %do.body
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB117_32
# BB#30:                                # %land.lhs.true.78
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB117_32
# BB#31:                                # %if.then.82
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-64(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB117_32:                             # %if.end.92
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB117_34
# BB#33:                                # %if.then.96
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-64(%rbp), %rdi
	callq	*%rax
	jmp	.LBB117_35
.LBB117_34:                             # %if.else.100
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rdi
	callq	produce_glyphs
.LBB117_35:                             # %if.end.101
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB117_37
# BB#36:                                # %if.then.105
                                        #   in Loop: Header=BB117_25 Depth=1
	movb	$1, globals+3391
.LBB117_37:                             # %if.end.106
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_38
.LBB117_38:                             # %do.end
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-96(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	-132(%rbp), %ecx
	movl	%ecx, -140(%rbp)
	movl	$0, -136(%rbp)
	movl	-124(%rbp), %ecx
	movl	%ecx, -128(%rbp)
.LBB117_39:                             # %while.cond.110
                                        #   Parent Loop BB117_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-136(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB117_72
# BB#40:                                # %while.body.113
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -152(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 2116(%rax)
	je	.LBB117_50
# BB#41:                                # %land.lhs.true.119
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-128(%rbp), %eax
	movq	-152(%rbp), %rcx
	movswl	16(%rcx), %edx
	addl	%edx, %eax
	cmpl	-76(%rbp), %eax
	jle	.LBB117_50
# BB#42:                                # %if.then.124
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-152(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB117_46
# BB#43:                                # %if.then.129
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB117_45
# BB#44:                                # %if.then.135
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rdi
	movq	-96(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	-132(%rbp), %ecx
	movl	%ecx, %esi
	callq	unproduce_glyphs
.LBB117_45:                             # %if.end.140
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-132(%rbp), %eax
	movw	%ax, %cx
	movq	-96(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movl	-124(%rbp), %eax
	movq	-64(%rbp), %rdx
	movl	%eax, 2404(%rdx)
	jmp	.LBB117_49
.LBB117_46:                             # %if.else.145
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB117_48
# BB#47:                                # %if.then.151
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rdi
	movq	-96(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	-132(%rbp), %edx
	addl	-136(%rbp), %edx
	subl	%edx, %ecx
	movl	%ecx, %esi
	callq	unproduce_glyphs
.LBB117_48:                             # %if.end.157
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-132(%rbp), %eax
	addl	-136(%rbp), %eax
	movw	%ax, %cx
	movq	-96(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movl	-128(%rbp), %eax
	movq	-64(%rbp), %rdx
	movl	%eax, 2404(%rdx)
.LBB117_49:                             # %if.end.163
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_72
.LBB117_50:                             # %if.else.164
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-128(%rbp), %eax
	movq	-152(%rbp), %rcx
	movswl	16(%rcx), %edx
	addl	%edx, %eax
	movq	-64(%rbp), %rcx
	cmpl	2316(%rcx), %eax
	jl	.LBB117_54
# BB#51:                                # %if.then.171
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-64(%rbp), %rax
	movl	2444(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 2444(%rax)
	movl	-128(%rbp), %ecx
	movq	-64(%rbp), %rax
	cmpl	2316(%rax), %ecx
	jge	.LBB117_53
# BB#52:                                # %if.then.176
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-128(%rbp), %eax
	movq	-64(%rbp), %rcx
	subl	2316(%rcx), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, 44(%rcx)
.LBB117_53:                             # %if.end.180
                                        #   in Loop: Header=BB117_39 Depth=2
	jmp	.LBB117_55
.LBB117_54:                             # %if.else.181
	callq	emacs_abort
.LBB117_55:                             # %if.end.182
                                        #   in Loop: Header=BB117_39 Depth=2
	jmp	.LBB117_56
.LBB117_56:                             # %if.end.183
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-64(%rbp), %rax
	cmpl	2380(%rax), %ecx
	jle	.LBB117_58
# BB#57:                                # %cond.true.188
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movl	56(%rax), %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
	jmp	.LBB117_59
.LBB117_58:                             # %cond.false.190
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-64(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
.LBB117_59:                             # %cond.end.192
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-212(%rbp), %eax        # 4-byte Reload
	movq	-96(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-96(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-64(%rbp), %rcx
	movl	2380(%rcx), %edx
	movq	-64(%rbp), %rcx
	addl	2384(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB117_61
# BB#60:                                # %cond.true.201
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -216(%rbp)        # 4-byte Spill
	jmp	.LBB117_62
.LBB117_61:                             # %cond.false.203
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-64(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	2384(%rax), %ecx
	movl	%ecx, -216(%rbp)        # 4-byte Spill
.LBB117_62:                             # %cond.end.207
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-216(%rbp), %eax        # 4-byte Reload
	movq	-96(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-96(%rbp), %rcx
	movl	64(%rcx), %eax
	movq	-64(%rbp), %rcx
	cmpl	2396(%rcx), %eax
	jle	.LBB117_64
# BB#63:                                # %cond.true.214
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, -220(%rbp)        # 4-byte Spill
	jmp	.LBB117_65
.LBB117_64:                             # %cond.false.216
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-64(%rbp), %rax
	movl	2396(%rax), %ecx
	movl	%ecx, -220(%rbp)        # 4-byte Spill
.LBB117_65:                             # %cond.end.218
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-220(%rbp), %eax        # 4-byte Reload
	movq	-96(%rbp), %rcx
	movl	%eax, 64(%rcx)
	movq	-96(%rbp), %rcx
	movl	68(%rcx), %eax
	movq	-64(%rbp), %rcx
	movl	2396(%rcx), %edx
	movq	-64(%rbp), %rcx
	addl	2400(%rcx), %edx
	cmpl	%edx, %eax
	jle	.LBB117_67
# BB#66:                                # %cond.true.227
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movl	68(%rax), %ecx
	movl	%ecx, -224(%rbp)        # 4-byte Spill
	jmp	.LBB117_68
.LBB117_67:                             # %cond.false.229
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-64(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	2400(%rax), %ecx
	movl	%ecx, -224(%rbp)        # 4-byte Spill
.LBB117_68:                             # %cond.end.233
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-224(%rbp), %eax        # 4-byte Reload
	movq	-96(%rbp), %rcx
	movl	%eax, 68(%rcx)
	movq	-96(%rbp), %rcx
	movl	76(%rcx), %eax
	movq	-64(%rbp), %rcx
	cmpl	2332(%rcx), %eax
	jle	.LBB117_70
# BB#69:                                # %cond.true.240
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-96(%rbp), %rax
	movl	76(%rax), %ecx
	movl	%ecx, -228(%rbp)        # 4-byte Spill
	jmp	.LBB117_71
.LBB117_70:                             # %cond.false.242
                                        #   in Loop: Header=BB117_39 Depth=2
	movq	-64(%rbp), %rax
	movl	2332(%rax), %ecx
	movl	%ecx, -228(%rbp)        # 4-byte Spill
.LBB117_71:                             # %cond.end.244
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-228(%rbp), %eax        # 4-byte Reload
	movq	-96(%rbp), %rcx
	movl	%eax, 76(%rcx)
	movq	-152(%rbp), %rcx
	movswl	16(%rcx), %eax
	addl	-128(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-136(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB117_39
.LBB117_72:                             # %while.end
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-136(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB117_74
# BB#73:                                # %if.then.253
	jmp	.LBB117_111
.LBB117_74:                             # %if.end.254
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$0, 2104(%rax)
	jne	.LBB117_79
# BB#75:                                # %land.lhs.true.257
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$10, 2124(%rax)
	je	.LBB117_78
# BB#76:                                # %lor.lhs.false
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB117_79
# BB#77:                                # %land.lhs.true.263
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB117_79
.LBB117_78:                             # %if.then.265
	movq	-64(%rbp), %rax
	movl	$0, 2408(%rax)
	jmp	.LBB117_111
.LBB117_79:                             # %if.end.266
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	$1, %esi
	movq	-64(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-64(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB117_80
	jmp	.LBB117_81
.LBB117_80:                             # %if.then.269
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB117_82
.LBB117_81:                             # %if.else.273
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -104(%rbp)
.LBB117_82:                             # %if.end.277
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$0, 2116(%rax)
	jne	.LBB117_110
# BB#83:                                # %land.lhs.true.281
                                        #   in Loop: Header=BB117_25 Depth=1
	movq	-64(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-64(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jl	.LBB117_110
# BB#84:                                # %if.then.286
	movq	-104(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	72(%rcx), %rax
	jge	.LBB117_109
# BB#85:                                # %if.then.289
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB117_108
# BB#86:                                # %if.then.297
	movq	-64(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-64(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jle	.LBB117_107
# BB#87:                                # %if.then.302
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB117_95
# BB#88:                                # %if.then.308
	movq	-96(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -156(%rbp)
.LBB117_89:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -156(%rbp)
	jle	.LBB117_94
# BB#90:                                # %for.body
                                        #   in Loop: Header=BB117_89 Depth=1
	movslq	-156(%rbp), %rax
	movq	-96(%rbp), %rcx
	imulq	$48, %rax, %rax
	addq	8(%rcx), %rax
	movl	24(%rax), %edx
	shrl	$7, %edx
	andl	$1, %edx
	testl	$1, %edx
	jne	.LBB117_92
# BB#91:                                # %if.then.324
	jmp	.LBB117_94
.LBB117_92:                             # %if.end.325
                                        #   in Loop: Header=BB117_89 Depth=1
	jmp	.LBB117_93
.LBB117_93:                             # %for.inc
                                        #   in Loop: Header=BB117_89 Depth=1
	movl	-156(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB117_89
.LBB117_94:                             # %for.end
	jmp	.LBB117_102
.LBB117_95:                             # %if.else.326
	movl	$0, -156(%rbp)
.LBB117_96:                             # %for.cond.327
                                        # =>This Inner Loop Header: Depth=1
	movl	-156(%rbp), %eax
	movq	-96(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB117_101
# BB#97:                                # %for.body.333
                                        #   in Loop: Header=BB117_96 Depth=1
	movslq	-156(%rbp), %rax
	movq	-96(%rbp), %rcx
	imulq	$48, %rax, %rax
	addq	8(%rcx), %rax
	movl	24(%rax), %edx
	shrl	$7, %edx
	andl	$1, %edx
	testl	$1, %edx
	jne	.LBB117_99
# BB#98:                                # %if.then.343
	jmp	.LBB117_101
.LBB117_99:                             # %if.end.344
                                        #   in Loop: Header=BB117_96 Depth=1
	jmp	.LBB117_100
.LBB117_100:                            # %for.inc.345
                                        #   in Loop: Header=BB117_96 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB117_96
.LBB117_101:                            # %for.end.347
	movq	-64(%rbp), %rdi
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, %esi
	callq	unproduce_glyphs
	movq	-96(%rbp), %rdi
	movswl	34(%rdi), %eax
	movl	-156(%rbp), %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -156(%rbp)
.LBB117_102:                            # %if.end.354
	movq	-96(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -160(%rbp)
.LBB117_103:                            # %for.cond.358
                                        # =>This Inner Loop Header: Depth=1
	movl	-156(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jge	.LBB117_106
# BB#104:                               # %for.body.361
                                        #   in Loop: Header=BB117_103 Depth=1
	movl	$6, %esi
	movl	-156(%rbp), %eax
	movw	%ax, %cx
	movq	-96(%rbp), %rdx
	movw	%cx, 34(%rdx)
	movq	-64(%rbp), %rdi
	callq	produce_special_glyphs
# BB#105:                               # %for.inc.365
                                        #   in Loop: Header=BB117_103 Depth=1
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB117_103
.LBB117_106:                            # %for.end.367
	jmp	.LBB117_107
.LBB117_107:                            # %if.end.368
	movl	$6, %esi
	movq	-64(%rbp), %rdi
	callq	produce_special_glyphs
.LBB117_108:                            # %if.end.369
	movq	-96(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-4097, %rcx            # imm = 0xFFFFFFFFFFFFEFFF
	orq	$4096, %rcx             # imm = 0x1000
	movq	%rcx, 236(%rax)
.LBB117_109:                            # %if.end.373
	jmp	.LBB117_111
.LBB117_110:                            # %if.end.374
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_25
.LBB117_111:                            # %while.end.375
	movq	-64(%rbp), %rax
	cmpl	$0, 2316(%rax)
	je	.LBB117_126
# BB#112:                               # %land.lhs.true.378
	cmpq	$0, -104(%rbp)
	jle	.LBB117_126
# BB#113:                               # %if.then.381
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB117_124
# BB#114:                               # %lor.lhs.false.390
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB117_119
# BB#115:                               # %cond.true.397
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB117_117
# BB#116:                               # %cond.true.401
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -232(%rbp)        # 4-byte Spill
	jmp	.LBB117_118
.LBB117_117:                            # %cond.false.404
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -232(%rbp)        # 4-byte Spill
.LBB117_118:                            # %cond.end.408
	movl	-232(%rbp), %eax        # 4-byte Reload
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB117_123
.LBB117_119:                            # %cond.false.410
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB117_121
# BB#120:                               # %cond.true.414
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -240(%rbp)        # 4-byte Spill
	jmp	.LBB117_122
.LBB117_121:                            # %cond.false.417
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -240(%rbp)        # 4-byte Spill
.LBB117_122:                            # %cond.end.422
	movl	-240(%rbp), %eax        # 4-byte Reload
	movl	%eax, -236(%rbp)        # 4-byte Spill
.LBB117_123:                            # %cond.end.424
	movl	-236(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB117_125
.LBB117_124:                            # %if.then.428
	movq	-64(%rbp), %rdi
	callq	insert_left_trunc_glyphs
.LBB117_125:                            # %if.end.429
	movq	-96(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-2049, %rcx            # imm = 0xFFFFFFFFFFFFF7FF
	orq	$2048, %rcx             # imm = 0x800
	movq	%rcx, 236(%rax)
.LBB117_126:                            # %if.end.433
	movl	-88(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 2108(%rcx)
	movq	-64(%rbp), %rcx
	movl	2444(%rcx), %eax
	subl	-84(%rbp), %eax
	addq	$240, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end117:
	.size	display_string, .Lfunc_end117-display_string
	.cfi_endproc

	.globl	Fformat_mode_line
	.align	16, 0x90
	.type	Fformat_mode_line,@function
Fformat_mode_line:                      # @Fformat_mode_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp360:
	.cfi_def_cfa_offset 16
.Ltmp361:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp362:
	.cfi_def_cfa_register %rbp
	subq	$5088, %rsp             # imm = 0x13E0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	$0, -4864(%rbp)
	movq	-24(%rbp), %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	sete	%r8b
	andb	$1, %r8b
	movb	%r8b, -4869(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -4880(%rbp)
	movl	$0, -4892(%rbp)
	movq	-32(%rbp), %rdi
	callq	decode_any_window
	movl	$5, %esi
	movq	%rax, -4856(%rbp)
	movq	-4856(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4904(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_2
# BB#1:                                 # %if.then
	movq	-4856(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB118_2:                              # %if.end
	movq	-40(%rbp), %rdi
	callq	CHECK_BUFFER
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4912(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB118_4
# BB#3:                                 # %lor.lhs.false
	testb	$1, noninteractive
	je	.LBB118_5
.LBB118_4:                              # %if.then.12
	movq	empty_unibyte_string, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB118_33
.LBB118_5:                              # %if.end.13
	testb	$1, -4869(%rbp)
	je	.LBB118_7
# BB#6:                                 # %if.then.15
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
.LBB118_7:                              # %if.end.17
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4920(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB118_9
# BB#8:                                 # %lor.lhs.false.21
	movl	$324, %edi              # imm = 0x144
	movq	-24(%rbp), %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4928(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_10
.LBB118_9:                              # %cond.true
	xorl	%eax, %eax
	movl	%eax, -4932(%rbp)       # 4-byte Spill
	jmp	.LBB118_23
.LBB118_10:                             # %cond.false
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4944(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_12
# BB#11:                                # %cond.true.28
	movl	$2, %eax
	movl	$1, %ecx
	movq	-32(%rbp), %rdx
	cmpq	selected_window, %rdx
	cmovel	%ecx, %eax
	movl	%eax, -4948(%rbp)       # 4-byte Spill
	jmp	.LBB118_22
.LBB118_12:                             # %cond.false.31
	movl	$672, %edi              # imm = 0x2A0
	movq	-24(%rbp), %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4960(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_14
# BB#13:                                # %cond.true.35
	movl	$1, %eax
	movl	%eax, -4964(%rbp)       # 4-byte Spill
	jmp	.LBB118_21
.LBB118_14:                             # %cond.false.36
	movl	$674, %edi              # imm = 0x2A2
	movq	-24(%rbp), %rax
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4976(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_16
# BB#15:                                # %cond.true.40
	movl	$2, %eax
	movl	%eax, -4980(%rbp)       # 4-byte Spill
	jmp	.LBB118_20
.LBB118_16:                             # %cond.false.41
	movl	$513, %edi              # imm = 0x201
	movq	-24(%rbp), %rax
	movq	%rax, -4992(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4992(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_18
# BB#17:                                # %cond.true.45
	movl	$5, %eax
	movl	%eax, -4996(%rbp)       # 4-byte Spill
	jmp	.LBB118_19
.LBB118_18:                             # %cond.false.46
	movl	$921, %edi              # imm = 0x399
	movq	-24(%rbp), %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$3, %ecx
	movq	-5008(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -4996(%rbp)       # 4-byte Spill
.LBB118_19:                             # %cond.end
	movl	-4996(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4980(%rbp)       # 4-byte Spill
.LBB118_20:                             # %cond.end.52
	movl	-4980(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4964(%rbp)       # 4-byte Spill
.LBB118_21:                             # %cond.end.54
	movl	-4964(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4948(%rbp)       # 4-byte Spill
.LBB118_22:                             # %cond.end.56
	movl	-4948(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4932(%rbp)       # 4-byte Spill
.LBB118_23:                             # %cond.end.58
	movl	-4932(%rbp), %eax       # 4-byte Reload
	movl	$1, %ecx
	movl	%eax, -4868(%rbp)
	movq	current_buffer, %rdx
	movq	%rdx, -4864(%rbp)
	movq	-4856(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	-4864(%rbp), %rsi
	movq	selected_window, %rdi
	movq	%rdi, -5016(%rbp)       # 8-byte Spill
	movq	%rdx, %rdi
	movq	-5016(%rbp), %rdx       # 8-byte Reload
	callq	format_mode_line_unwind_data
	movabsq	$unwind_format_mode_line, %rdi
	movq	%rax, %rsi
	callq	record_unwind_protect
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, mode_line_proptrans_alist
	movq	-32(%rbp), %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5024(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fselect_window
	movq	-40(%rbp), %rdi
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	leaq	-4840(%rbp), %rdi
	movq	$-1, %rax
	xorl	%ecx, %ecx
	movl	%ecx, %r8d
	movq	-4856(%rbp), %rsi
	movl	-4868(%rbp), %r9d
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	init_iterator
	testb	$1, -4869(%rbp)
	je	.LBB118_25
# BB#24:                                # %if.then.66
	xorl	%edi, %edi
	movl	$2, mode_line_target
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, mode_line_string_face_prop
	callq	builtin_lisp_symbol
	movq	%rax, mode_line_string_list
	movq	mode_line_noprop_ptr, %rax
	movq	mode_line_noprop_buf, %rcx
	subq	%rcx, %rax
	subq	$0, %rax
	movl	%eax, %edi
	movl	%edi, -4892(%rbp)
	jmp	.LBB118_29
.LBB118_25:                             # %if.else
	xorl	%edi, %edi
	movl	$3, mode_line_target
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, mode_line_string_list
	movq	-24(%rbp), %rax
	movq	%rax, mode_line_string_face
	movq	-24(%rbp), %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5040(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB118_27
# BB#26:                                # %cond.true.75
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	jmp	.LBB118_28
.LBB118_27:                             # %cond.false.77
	movl	$397, %edi              # imm = 0x18D
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	list2
	movq	%rax, -5048(%rbp)       # 8-byte Spill
.LBB118_28:                             # %cond.end.80
	movq	-5048(%rbp), %rax       # 8-byte Reload
	movq	%rax, mode_line_string_face_prop
.LBB118_29:                             # %if.end.82
	movq	-4824(%rbp), %rax
	movq	376(%rax), %rax
	movq	72(%rax), %rdi
	callq	push_kboard
	xorl	%edi, %edi
	movq	-16(%rbp), %r8
	movq	%r8, -5056(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-4840(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movl	%ecx, %edx
	movq	-5056(%rbp), %r8        # 8-byte Reload
	movq	%rax, %r9
	movl	$0, (%rsp)
	callq	display_mode_element
	movl	%eax, -5060(%rbp)       # 4-byte Spill
	callq	pop_kboard
	testb	$1, -4869(%rbp)
	je	.LBB118_31
# BB#30:                                # %if.then.86
	movq	mode_line_noprop_ptr, %rax
	movq	mode_line_noprop_buf, %rcx
	subq	%rcx, %rax
	movslq	-4892(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movl	%edx, -4844(%rbp)
	movq	mode_line_noprop_buf, %rax
	movslq	-4892(%rbp), %rcx
	addq	%rcx, %rax
	movslq	-4844(%rbp), %rsi
	movq	%rax, %rdi
	callq	make_string
	movq	%rax, -4888(%rbp)
	jmp	.LBB118_32
.LBB118_31:                             # %if.else.95
	movq	mode_line_string_list, %rdi
	callq	Fnreverse
	movl	$534, %edi              # imm = 0x216
	movq	%rax, mode_line_string_list
	callq	builtin_lisp_symbol
	movq	mode_line_string_list, %rsi
	movq	empty_unibyte_string, %rdx
	movq	%rax, %rdi
	callq	Fmapconcat
	movq	%rax, -4888(%rbp)
.LBB118_32:                             # %if.end.99
	xorl	%edi, %edi
	movq	-4880(%rbp), %rax
	movq	%rax, -5072(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5072(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-4888(%rbp), %rsi
	movq	%rsi, -8(%rbp)
	movq	%rax, -5080(%rbp)       # 8-byte Spill
.LBB118_33:                             # %return
	movq	-8(%rbp), %rax
	addq	$5088, %rsp             # imm = 0x13E0
	popq	%rbp
	retq
.Lfunc_end118:
	.size	Fformat_mode_line, .Lfunc_end118-Fformat_mode_line
	.cfi_endproc

	.align	16, 0x90
	.type	unwind_format_mode_line,@function
unwind_format_mode_line:                # @unwind_format_mode_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp363:
	.cfi_def_cfa_offset 16
.Ltmp364:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp365:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$7, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$8, %ecx
	movl	%ecx, %esi
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$9, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$1, %ecx
	movl	%ecx, %esi
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, mode_line_target
	movq	mode_line_noprop_buf, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	AREF
	movl	$2, %ecx
	movl	%ecx, %esi
	sarq	$2, %rax
	movq	-48(%rbp), %rdi         # 8-byte Reload
	addq	%rax, %rdi
	movq	%rdi, mode_line_noprop_ptr
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	movq	%rax, mode_line_string_list
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB119_2
# BB#1:                                 # %if.then
	movl	$3, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, mode_line_proptrans_alist
.LBB119_2:                              # %if.end
	movl	$4, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, mode_line_string_face
	movq	-8(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, mode_line_string_face_prop
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB119_11
# BB#3:                                 # %if.then.16
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB119_10
# BB#4:                                 # %if.then.20
	movq	-24(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	8(%rax), %rdi
	je	.LBB119_6
# BB#5:                                 # %if.then.27
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fselect_window
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB119_6:                              # %if.end.30
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB119_9
# BB#7:                                 # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB119_9
# BB#8:                                 # %if.then.36
	movl	$901, %edi              # imm = 0x385
	movq	-32(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fselect_frame
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB119_9:                              # %if.end.39
	jmp	.LBB119_10
.LBB119_10:                             # %if.end.40
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fselect_window
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB119_11:                             # %if.end.43
	movl	$6, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB119_13
# BB#12:                                # %if.then.48
	movl	$6, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$6, %edi
	movl	%edi, %esi
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB119_13:                             # %if.end.52
	movq	-8(%rbp), %rax
	movq	%rax, Vmode_line_unwind_vector
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end119:
	.size	unwind_format_mode_line, .Lfunc_end119-unwind_format_mode_line
	.cfi_endproc

	.align	16, 0x90
	.type	format_mode_line_unwind_data,@function
format_mode_line_unwind_data:           # @format_mode_line_unwind_data
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp366:
	.cfi_def_cfa_offset 16
.Ltmp367:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp368:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movb	%cl, %al
	xorl	%ecx, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	Vmode_line_unwind_vector, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, Vmode_line_unwind_vector
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB120_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$42, %edi
                                        # kill: RDI<def> EDI<kill>
	movq	%rax, %rsi
	callq	Fmake_vector
	movq	%rax, -40(%rbp)
.LBB120_2:                              # %if.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movl	mode_line_target, %eax
	movl	%eax, %ecx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, %rdx
	callq	ASET
	movl	$1, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	mode_line_noprop_ptr, %rcx
	movq	mode_line_noprop_buf, %rdx
	subq	%rdx, %rcx
	subq	$0, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, %rdx
	callq	ASET
	movl	$2, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	mode_line_string_list, %rdx
	callq	ASET
	movq	-40(%rbp), %rdi
	testb	$1, -25(%rbp)
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	je	.LBB120_4
# BB#3:                                 # %cond.true
	movq	mode_line_proptrans_alist, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB120_5
.LBB120_4:                              # %cond.false
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB120_5:                              # %cond.end
	movq	-72(%rbp), %rax         # 8-byte Reload
	movl	$3, %ecx
	movl	%ecx, %esi
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	-40(%rbp), %rdi
	movq	mode_line_string_face, %rdx
	callq	ASET
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	-40(%rbp), %rdi
	movq	mode_line_string_face_prop, %rdx
	callq	ASET
	cmpq	$0, -16(%rbp)
	je	.LBB120_7
# BB#6:                                 # %if.then.9
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -48(%rbp)
	jmp	.LBB120_8
.LBB120_7:                              # %if.else
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -48(%rbp)
.LBB120_8:                              # %if.end.12
	movl	$6, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rdx
	callq	ASET
	movl	$7, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	cmpq	$0, -8(%rbp)
	je	.LBB120_16
# BB#9:                                 # %if.then.14
	movl	$8, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	48(%rcx), %rdx
	callq	ASET
	movq	-8(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	cmpl	$1, %eax
	jne	.LBB120_15
# BB#10:                                # %if.then.17
	movq	-40(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	je	.LBB120_12
# BB#11:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB120_13
.LBB120_12:                             # %cond.true.32
	movq	-8(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB120_14
.LBB120_13:                             # %cond.false.33
	callq	emacs_abort
.LBB120_14:                             # %cond.end.34
	movl	$9, %eax
	movl	%eax, %esi
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	80(%rcx), %rdx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	callq	ASET
.LBB120_15:                             # %if.end.36
	jmp	.LBB120_16
.LBB120_16:                             # %if.end.37
	movq	-40(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end120:
	.size	format_mode_line_unwind_data, .Lfunc_end120-format_mode_line_unwind_data
	.cfi_endproc

	.align	16, 0x90
	.type	display_mode_element,@function
display_mode_element:                   # @display_mode_element
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp369:
	.cfi_def_cfa_offset 16
.Ltmp370:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp371:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$816, %rsp              # imm = 0x330
.Ltmp372:
	.cfi_offset %rbx, -32
.Ltmp373:
	.cfi_offset %r14, -24
	movb	16(%rbp), %al
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	andb	$1, %al
	movb	%al, -57(%rbp)
	movl	$0, -64(%rbp)
	movb	$0, -73(%rbp)
.LBB121_1:                              # %tail_recurse
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$100, -28(%rbp)
	jle	.LBB121_3
# BB#2:                                 # %if.then
                                        #   in Loop: Header=BB121_1 Depth=1
	movabsq	$.L.str.142, %rdi
	callq	build_string
	movq	%rax, -48(%rbp)
.LBB121_3:                              # %if.end
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-28(%rbp), %eax
	incl	%eax
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	andl	$7, %eax
	movl	%eax, -328(%rbp)        # 4-byte Spill
	je	.LBB121_87
	jmp	.LBB121_174
.LBB121_174:                            # %if.end
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-328(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -332(%rbp)        # 4-byte Spill
	je	.LBB121_96
	jmp	.LBB121_175
.LBB121_175:                            # %if.end
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-328(%rbp), %eax        # 4-byte Reload
	subl	$4, %eax
	movl	%eax, -336(%rbp)        # 4-byte Spill
	jne	.LBB121_164
	jmp	.LBB121_4
.LBB121_4:                              # %sw.bb
	movq	$0, -88(%rbp)
	movq	-48(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	jle	.LBB121_25
# BB#5:                                 # %land.lhs.true
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-344(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB121_7
# BB#6:                                 # %lor.lhs.false
	testb	$1, -57(%rbp)
	je	.LBB121_25
.LBB121_7:                              # %if.then.8
	movl	$2, %eax
	movl	%eax, %edi
	movq	-48(%rbp), %rsi
	callq	Ftext_properties_at
	movq	%rax, -96(%rbp)
	movq	-56(%rbp), %rdi
	movq	-96(%rbp), %rsi
	callq	Fequal
	xorl	%edi, %edi
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-352(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB121_9
# BB#8:                                 # %lor.lhs.false.14
	testb	$1, -57(%rbp)
	je	.LBB121_24
.LBB121_9:                              # %if.then.17
	xorl	%edi, %edi
	movq	-96(%rbp), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-360(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB121_15
# BB#10:                                # %land.lhs.true.21
	testb	$1, -57(%rbp)
	jne	.LBB121_15
# BB#11:                                # %if.then.23
	movq	-96(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -96(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -112(%rbp)
.LBB121_12:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB121_14
# BB#13:                                # %while.body
                                        #   in Loop: Header=BB121_12 Depth=1
	movq	-96(%rbp), %rdi
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rdx
	callq	Fplist_put
	movq	%rax, -96(%rbp)
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB121_12
.LBB121_14:                             # %while.end
	movq	-96(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB121_15:                             # %if.end.39
	movq	-48(%rbp), %rdi
	movq	mode_line_proptrans_alist, %rsi
	callq	Fassoc
	xorl	%edi, %edi
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-368(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB121_18
# BB#16:                                # %land.lhs.true.44
	movq	-56(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rsi
	callq	Fequal
	xorl	%edi, %edi
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-376(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB121_18
# BB#17:                                # %if.then.52
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-104(%rbp), %rdi
	movq	mode_line_proptrans_alist, %rsi
	callq	move_elt_to_front
	movq	%rax, mode_line_proptrans_alist
	jmp	.LBB121_23
.LBB121_18:                             # %if.else
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-384(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB121_20
# BB#19:                                # %if.then.60
	movq	-104(%rbp), %rdi
	movq	mode_line_proptrans_alist, %rsi
	callq	Fdelq
	movq	%rax, mode_line_proptrans_alist
.LBB121_20:                             # %if.end.62
	movq	-48(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	Flength
	movl	$2, %ecx
	movl	%ecx, %edi
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	%rax, %rsi
	callq	Fset_text_properties
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	Fcons
	movq	mode_line_proptrans_alist, %rsi
	movq	%rax, %rdi
	callq	Fcons
	movl	$202, %r8d
	movl	%r8d, %edi
	movq	%rax, mode_line_proptrans_alist
	movq	mode_line_proptrans_alist, %rsi
	callq	Fnthcdr
	xorl	%edi, %edi
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-400(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB121_22
# BB#21:                                # %if.then.72
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-408(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCDR
.LBB121_22:                             # %if.end.74
	jmp	.LBB121_23
.LBB121_23:                             # %if.end.75
	jmp	.LBB121_24
.LBB121_24:                             # %if.end.76
	jmp	.LBB121_25
.LBB121_25:                             # %if.end.77
	movq	$0, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB121_31
# BB#26:                                # %if.then.79
	movl	-36(%rbp), %eax
	movl	-64(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	mode_line_target(%rip), %eax
	testl	%eax, %eax
	movl	%eax, -412(%rbp)        # 4-byte Spill
	je	.LBB121_29
	jmp	.LBB121_180
.LBB121_180:                            # %if.then.79
	movl	-412(%rbp), %eax        # 4-byte Reload
	decl	%eax
	subl	$2, %eax
	movl	%eax, -416(%rbp)        # 4-byte Spill
	jb	.LBB121_27
	jmp	.LBB121_181
.LBB121_181:                            # %if.then.79
	movl	-412(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -420(%rbp)        # 4-byte Spill
	je	.LBB121_28
	jmp	.LBB121_30
.LBB121_27:                             # %sw.bb.81
	movq	-48(%rbp), %rdi
	callq	SSDATA
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	-72(%rbp), %edx
	movq	%rax, %rdi
	callq	store_mode_line_noprop
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_30
.LBB121_28:                             # %sw.bb.84
	xorl	%edi, %edi
	movq	-48(%rbp), %rsi
	movl	-72(%rbp), %r8d
	movl	%r8d, -424(%rbp)        # 4-byte Spill
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	movl	$1, %edx
	xorl	%ecx, %ecx
	movq	-432(%rbp), %rsi        # 8-byte Reload
	movl	-424(%rbp), %r8d        # 4-byte Reload
	movq	%rax, %r9
	callq	store_mode_line_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_30
.LBB121_29:                             # %sw.bb.88
	xorl	%edi, %edi
	movq	-48(%rbp), %rsi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %r9
	movl	-72(%rbp), %edi
	movq	-48(%rbp), %rsi
	movl	%edi, -444(%rbp)        # 4-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -456(%rbp)        # 8-byte Spill
	movq	%r9, -464(%rbp)         # 8-byte Spill
	callq	STRING_MULTIBYTE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %edx
	movq	%rsi, %rdi
	movq	-440(%rbp), %r9         # 8-byte Reload
	movq	%rsi, -472(%rbp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	-456(%rbp), %r8         # 8-byte Reload
	movl	%edx, -476(%rbp)        # 4-byte Spill
	movq	%r8, %rdx
	movq	-472(%rbp), %r10        # 8-byte Reload
	movl	%ecx, -480(%rbp)        # 4-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r8
	movq	-464(%rbp), %r9         # 8-byte Reload
	movl	$0, (%rsp)
	movl	-444(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	-476(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, 24(%rsp)
	callq	display_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB121_30:                             # %sw.epilog
	jmp	.LBB121_166
.LBB121_31:                             # %if.end.94
	jmp	.LBB121_32
.LBB121_32:                             # %while.cond.95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_40 Depth 2
                                        #     Child Loop BB121_56 Depth 2
                                        #     Child Loop BB121_76 Depth 2
	cmpl	$0, -36(%rbp)
	jle	.LBB121_34
# BB#33:                                # %lor.lhs.false.98
                                        #   in Loop: Header=BB121_32 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-64(%rbp), %eax
	cmpl	-36(%rbp), %eax
	movb	%cl, -481(%rbp)         # 1-byte Spill
	jge	.LBB121_38
.LBB121_34:                             # %land.lhs.true.101
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rsi
	callq	SREF
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movzbl	%al, %ecx
	cmpl	$0, %ecx
	movb	%dl, -481(%rbp)         # 1-byte Spill
	je	.LBB121_38
# BB#35:                                # %land.rhs
                                        #   in Loop: Header=BB121_32 Depth=1
	movb	$1, %al
	cmpl	$0, mode_line_target
	movb	%al, -482(%rbp)         # 1-byte Spill
	jne	.LBB121_37
# BB#36:                                # %lor.rhs
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-24(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-24(%rbp), %rax
	cmpl	2320(%rax), %ecx
	setl	%dl
	movb	%dl, -482(%rbp)         # 1-byte Spill
.LBB121_37:                             # %lor.end
                                        #   in Loop: Header=BB121_32 Depth=1
	movb	-482(%rbp), %al         # 1-byte Reload
	movb	%al, -481(%rbp)         # 1-byte Spill
.LBB121_38:                             # %land.end
                                        #   in Loop: Header=BB121_32 Depth=1
	movb	-481(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB121_39
	jmp	.LBB121_86
.LBB121_39:                             # %while.body.110
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -128(%rbp)
.LBB121_40:                             # %while.cond.111
                                        #   Parent Loop BB121_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -88(%rbp)
	movq	%rax, %rsi
	callq	SREF
	xorl	%edx, %edx
	movb	%dl, %r8b
	movb	%al, -74(%rbp)
	movzbl	%al, %edx
	cmpl	$0, %edx
	movb	%r8b, -483(%rbp)        # 1-byte Spill
	je	.LBB121_42
# BB#41:                                # %land.rhs.117
                                        #   in Loop: Header=BB121_40 Depth=2
	movzbl	-74(%rbp), %eax
	cmpl	$37, %eax
	setne	%cl
	movb	%cl, -483(%rbp)         # 1-byte Spill
.LBB121_42:                             # %land.end.121
                                        #   in Loop: Header=BB121_40 Depth=2
	movb	-483(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB121_43
	jmp	.LBB121_44
.LBB121_43:                             # %while.body.122
                                        #   in Loop: Header=BB121_40 Depth=2
	jmp	.LBB121_40
.LBB121_44:                             # %while.end.123
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-88(%rbp), %rax
	subq	$1, %rax
	cmpq	-128(%rbp), %rax
	je	.LBB121_55
# BB#45:                                # %if.then.127
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-88(%rbp), %rax
	decq	%rax
	movq	%rax, -88(%rbp)
	movq	-48(%rbp), %rdi
	callq	SDATA
	movq	-128(%rbp), %rdi
	addq	%rdi, %rax
	movq	-88(%rbp), %rcx
	subq	%rdi, %rcx
	movl	-36(%rbp), %edx
	movl	-64(%rbp), %esi
	subl	%esi, %edx
	leaq	-136(%rbp), %rdi
	leaq	-144(%rbp), %r8
	movq	%rdi, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rcx, %rsi
	movq	-496(%rbp), %rcx        # 8-byte Reload
	callq	c_string_width
	movl	%eax, %edx
	movl	%edx, -72(%rbp)
	movl	mode_line_target(%rip), %edx
	testl	%edx, %edx
	movl	%edx, -500(%rbp)        # 4-byte Spill
	je	.LBB121_51
	jmp	.LBB121_178
.LBB121_178:                            # %if.then.127
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-500(%rbp), %eax        # 4-byte Reload
	decl	%eax
	subl	$2, %eax
	movl	%eax, -504(%rbp)        # 4-byte Spill
	jb	.LBB121_46
	jmp	.LBB121_179
.LBB121_179:                            # %if.then.127
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-500(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -508(%rbp)        # 4-byte Spill
	je	.LBB121_47
	jmp	.LBB121_54
.LBB121_46:                             # %sw.bb.133
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-48(%rbp), %rdi
	callq	SSDATA
	xorl	%esi, %esi
	addq	-128(%rbp), %rax
	movl	-72(%rbp), %edx
	movq	%rax, %rdi
	callq	store_mode_line_noprop
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_54
.LBB121_47:                             # %sw.bb.138
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-128(%rbp), %rax
	movq	%rax, -152(%rbp)
	movq	-48(%rbp), %rdi
	movq	-152(%rbp), %rsi
	callq	string_byte_to_char
	movq	%rax, -160(%rbp)
	cmpl	$0, -36(%rbp)
	jg	.LBB121_49
# BB#48:                                # %cond.true
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rsi
	callq	string_byte_to_char
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jmp	.LBB121_50
.LBB121_49:                             # %cond.false
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-160(%rbp), %rax
	addq	-136(%rbp), %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
.LBB121_50:                             # %cond.end
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-520(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	-48(%rbp), %rdi
	movq	-160(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-168(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	Fsubstring
	xorl	%edi, %edi
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rsi
	movq	%rsi, -528(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
                                        # kill: RDI<def> EDI<kill>
	xorl	%r8d, %r8d
	movq	-528(%rbp), %rsi        # 8-byte Reload
	movl	%r8d, %edx
	movl	%r8d, %ecx
	movq	%rax, %r9
	callq	store_mode_line_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_54
.LBB121_51:                             # %sw.bb.151
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-128(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-48(%rbp), %rdi
	movq	-184(%rbp), %rsi
	callq	string_byte_to_char
	movq	%rax, -192(%rbp)
	cmpl	$0, -36(%rbp)
	jg	.LBB121_53
# BB#52:                                # %if.then.157
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rsi
	callq	string_byte_to_char
	subq	-192(%rbp), %rax
	movq	%rax, -136(%rbp)
.LBB121_53:                             # %if.end.160
                                        #   in Loop: Header=BB121_32 Depth=1
	xorl	%edi, %edi
	movq	-48(%rbp), %rsi
	movq	%rsi, -536(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %r8
	movq	-24(%rbp), %r9
	movq	-136(%rbp), %rsi
	movl	%esi, %edi
	movq	-48(%rbp), %rsi
	movl	%edi, -540(%rbp)        # 4-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -552(%rbp)        # 8-byte Spill
	movq	%r8, -560(%rbp)         # 8-byte Spill
	movq	%r9, -568(%rbp)         # 8-byte Spill
	callq	STRING_MULTIBYTE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %edx
	movq	%rsi, %rdi
	movq	-536(%rbp), %r8         # 8-byte Reload
	movq	%rsi, -576(%rbp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	-552(%rbp), %r9         # 8-byte Reload
	movl	%edx, -580(%rbp)        # 4-byte Spill
	movq	%r9, %rdx
	movq	-576(%rbp), %r10        # 8-byte Reload
	movl	%ecx, -584(%rbp)        # 4-byte Spill
	movq	%r10, %rcx
	movq	-560(%rbp), %r8         # 8-byte Reload
	movq	-568(%rbp), %r9         # 8-byte Reload
	movl	$0, (%rsp)
	movl	-540(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	-580(%rbp), %r11d       # 4-byte Reload
	movl	%r11d, 24(%rsp)
	callq	display_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB121_54:                             # %sw.epilog.167
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_85
.LBB121_55:                             # %if.else.168
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -68(%rbp)
.LBB121_56:                             # %while.cond.169
                                        #   Parent Loop BB121_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -88(%rbp)
	movq	%rax, %rsi
	callq	SREF
	xorl	%edx, %edx
	movb	%dl, %r8b
	movb	%al, -74(%rbp)
	movzbl	%al, %edx
	cmpl	$48, %edx
	movb	%r8b, -585(%rbp)        # 1-byte Spill
	jl	.LBB121_58
# BB#57:                                # %land.rhs.175
                                        #   in Loop: Header=BB121_56 Depth=2
	movzbl	-74(%rbp), %eax
	cmpl	$57, %eax
	setle	%cl
	movb	%cl, -585(%rbp)         # 1-byte Spill
.LBB121_58:                             # %land.end.179
                                        #   in Loop: Header=BB121_56 Depth=2
	movb	-585(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB121_59
	jmp	.LBB121_60
.LBB121_59:                             # %while.body.180
                                        #   in Loop: Header=BB121_56 Depth=2
	imull	$10, -68(%rbp), %eax
	movzbl	-74(%rbp), %ecx
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB121_56
.LBB121_60:                             # %while.end.184
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-32(%rbp), %eax
	subl	-64(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB121_63
# BB#61:                                # %land.lhs.true.188
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-68(%rbp), %eax
	movl	-32(%rbp), %ecx
	subl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB121_63
# BB#62:                                # %if.then.192
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-32(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB121_63:                             # %if.end.194
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-36(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -72(%rbp)
	movzbl	-74(%rbp), %eax
	cmpl	$77, %eax
	jne	.LBB121_65
# BB#64:                                # %if.then.199
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-72(%rbp), %ecx
	movq	globals+936, %r8
	movq	-56(%rbp), %r9
	movb	-57(%rbp), %al
	andb	$1, %al
	movzbl	%al, %r10d
	movl	%r10d, (%rsp)
	callq	display_mode_element
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_84
.LBB121_65:                             # %if.else.203
                                        #   in Loop: Header=BB121_32 Depth=1
	movzbl	-74(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_82
# BB#66:                                # %if.then.207
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-200(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-48(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB121_67
	jmp	.LBB121_68
.LBB121_67:                             # %cond.true.212
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-48(%rbp), %rdi
	movq	-216(%rbp), %rsi
	callq	string_byte_to_char
	movq	%rax, -600(%rbp)        # 8-byte Spill
	jmp	.LBB121_69
.LBB121_68:                             # %cond.false.214
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-216(%rbp), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
.LBB121_69:                             # %cond.end.215
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-600(%rbp), %rax        # 8-byte Reload
	leaq	-240(%rbp), %rcx
	movq	%rax, -224(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	movzbl	-74(%rbp), %esi
	movl	-68(%rbp), %edx
	callq	decode_mode_spec
	movq	%rax, -232(%rbp)
	movq	-240(%rbp), %rdi
	callq	STRINGP
	xorl	%edx, %edx
	movb	%dl, %r8b
	testb	$1, %al
	movb	%r8b, -601(%rbp)        # 1-byte Spill
	jne	.LBB121_70
	jmp	.LBB121_71
.LBB121_70:                             # %land.rhs.221
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-240(%rbp), %rdi
	callq	STRING_MULTIBYTE
	movb	%al, -601(%rbp)         # 1-byte Spill
.LBB121_71:                             # %land.end.224
                                        #   in Loop: Header=BB121_32 Depth=1
	movb	-601(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -201(%rbp)
	movl	mode_line_target(%rip), %ecx
	testl	%ecx, %ecx
	movl	%ecx, -608(%rbp)        # 4-byte Spill
	je	.LBB121_74
	jmp	.LBB121_176
.LBB121_176:                            # %land.end.224
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-608(%rbp), %eax        # 4-byte Reload
	decl	%eax
	subl	$2, %eax
	movl	%eax, -612(%rbp)        # 4-byte Spill
	jb	.LBB121_72
	jmp	.LBB121_177
.LBB121_177:                            # %land.end.224
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-608(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -616(%rbp)        # 4-byte Spill
	je	.LBB121_73
	jmp	.LBB121_81
.LBB121_72:                             # %sw.bb.226
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-232(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	callq	store_mode_line_noprop
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_81
.LBB121_73:                             # %sw.bb.229
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-232(%rbp), %rdi
	callq	build_string
	movq	%rax, -248(%rbp)
	movq	-224(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-48(%rbp), %rsi
	movq	%rax, %rdi
	callq	Ftext_properties_at
	xorl	%ecx, %ecx
	movl	%ecx, %edi
	xorl	%edx, %edx
	movq	%rax, -56(%rbp)
	movq	-248(%rbp), %rsi
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movq	-56(%rbp), %r9
	callq	store_mode_line_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_81
.LBB121_74:                             # %sw.bb.237
                                        #   in Loop: Header=BB121_32 Depth=1
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	34(%rcx), %edx
	movl	%edx, -252(%rbp)
	movq	-232(%rbp), %rdi
	movq	-240(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-224(%rbp), %rcx
	movq	-24(%rbp), %r9
	movl	-68(%rbp), %r10d
	movl	-72(%rbp), %r11d
	movb	-201(%rbp), %bl
	andb	$1, %bl
	movzbl	%bl, %r14d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	%r14d, 24(%rsp)
	movl	%eax, -620(%rbp)        # 4-byte Spill
	callq	display_string
	movl	%eax, -256(%rbp)
	cmpl	$0, -256(%rbp)
	jle	.LBB121_80
# BB#75:                                # %if.then.244
                                        #   in Loop: Header=BB121_32 Depth=1
	movq	-24(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movslq	-252(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -264(%rbp)
	movl	$0, -268(%rbp)
.LBB121_76:                             # %for.cond
                                        #   Parent Loop BB121_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-268(%rbp), %eax
	cmpl	-256(%rbp), %eax
	jge	.LBB121_79
# BB#77:                                # %for.body
                                        #   in Loop: Header=BB121_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-268(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	-264(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-224(%rbp), %rax
	movslq	-268(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
# BB#78:                                # %for.inc
                                        #   in Loop: Header=BB121_76 Depth=2
	movl	-268(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -268(%rbp)
	jmp	.LBB121_76
.LBB121_79:                             # %for.end
                                        #   in Loop: Header=BB121_32 Depth=1
	movl	-256(%rbp), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB121_80:                             # %if.end.256
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_81
.LBB121_81:                             # %sw.epilog.257
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_83
.LBB121_82:                             # %if.else.258
	jmp	.LBB121_86
.LBB121_83:                             # %if.end.259
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_84
.LBB121_84:                             # %if.end.260
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_85
.LBB121_85:                             # %if.end.261
                                        #   in Loop: Header=BB121_32 Depth=1
	jmp	.LBB121_32
.LBB121_86:                             # %while.end.262
	jmp	.LBB121_166
.LBB121_87:                             # %sw.bb.263
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$818, %edi              # imm = 0x332
	movq	-48(%rbp), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	xorl	%edi, %edi
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-640(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB121_89
# BB#88:                                # %if.then.270
                                        #   in Loop: Header=BB121_1 Depth=1
	movb	$1, -57(%rbp)
.LBB121_89:                             # %if.end.271
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-48(%rbp), %rdi
	callq	Fboundp
	xorl	%edi, %edi
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-648(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB121_95
# BB#90:                                # %if.then.276
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-48(%rbp), %rdi
	callq	Fsymbol_value
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB121_91
	jmp	.LBB121_92
.LBB121_91:                             # %if.then.279
                                        #   in Loop: Header=BB121_1 Depth=1
	movb	$1, -73(%rbp)
.LBB121_92:                             # %if.end.280
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-280(%rbp), %rax
	cmpq	-48(%rbp), %rax
	je	.LBB121_94
# BB#93:                                # %if.then.283
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-280(%rbp), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB121_1
.LBB121_94:                             # %if.end.284
	jmp	.LBB121_95
.LBB121_95:                             # %if.end.285
	jmp	.LBB121_166
.LBB121_96:                             # %sw.bb.286
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$39, %edi
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rax
	movq	%rax, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-656(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB121_102
# BB#97:                                # %if.then.294
	testb	$1, -57(%rbp)
	je	.LBB121_99
# BB#98:                                # %if.then.296
	jmp	.LBB121_166
.LBB121_99:                             # %if.end.297
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB121_101
# BB#100:                               # %if.then.305
	movl	$1, %edi
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	callq	safe__eval
	movq	%rax, -304(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %ecx
	subl	-64(%rbp), %ecx
	movl	-36(%rbp), %edx
	subl	-64(%rbp), %edx
	movq	-304(%rbp), %r8
	movq	-56(%rbp), %r9
	movb	-57(%rbp), %r10b
	andb	$1, %r10b
	movl	%edx, -660(%rbp)        # 4-byte Spill
	movl	%ecx, %edx
	movl	-660(%rbp), %ecx        # 4-byte Reload
	movzbl	%r10b, %r11d
	movl	%r11d, (%rsp)
	callq	display_mode_element
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB121_101:                            # %if.end.318
	jmp	.LBB121_163
.LBB121_102:                            # %if.else.319
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$98, %edi
	movq	-288(%rbp), %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-672(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB121_108
# BB#103:                               # %if.then.323
	testb	$1, -57(%rbp)
	je	.LBB121_105
# BB#104:                               # %if.then.325
	jmp	.LBB121_166
.LBB121_105:                            # %if.end.326
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB121_107
# BB#106:                               # %if.then.334
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	-64(%rbp), %ecx
	movq	-48(%rbp), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	subq	$3, %rdx
	movq	(%rdx), %r8
	movq	-48(%rbp), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %r9
	movb	-57(%rbp), %r10b
	andb	$1, %r10b
	movl	%eax, %edx
	movzbl	%r10b, %eax
	movl	%eax, (%rsp)
	callq	display_mode_element
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB121_107:                            # %if.end.351
	jmp	.LBB121_162
.LBB121_108:                            # %if.else.352
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-288(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB121_121
# BB#109:                               # %if.then.357
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-288(%rbp), %rdi
	callq	Fboundp
	movq	%rax, -296(%rbp)
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB121_111
# BB#110:                               # %if.then.366
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_165
.LBB121_111:                            # %if.end.367
                                        #   in Loop: Header=BB121_1 Depth=1
	xorl	%edi, %edi
	movq	-296(%rbp), %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-680(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB121_115
# BB#112:                               # %if.then.371
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-288(%rbp), %rdi
	callq	Fsymbol_value
	xorl	%edi, %edi
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-688(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB121_114
# BB#113:                               # %if.then.376
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB121_1
.LBB121_114:                            # %if.end.379
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_115
.LBB121_115:                            # %if.end.380
                                        #   in Loop: Header=BB121_1 Depth=1
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-696(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB121_117
# BB#116:                               # %if.then.387
	jmp	.LBB121_166
.LBB121_117:                            # %if.else.388
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB121_119
# BB#118:                               # %if.then.393
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_165
.LBB121_119:                            # %if.end.394
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_120
.LBB121_120:                            # %if.end.395
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB121_1
.LBB121_121:                            # %if.else.398
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-288(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB121_142
# BB#122:                               # %if.then.404
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-288(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -308(%rbp)
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -308(%rbp)
	jge	.LBB121_130
# BB#123:                               # %if.then.411
                                        #   in Loop: Header=BB121_1 Depth=1
	cmpl	$0, -36(%rbp)
	jg	.LBB121_125
# BB#124:                               # %if.then.414
                                        #   in Loop: Header=BB121_1 Depth=1
	xorl	%eax, %eax
	subl	-308(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB121_129
.LBB121_125:                            # %if.else.416
                                        #   in Loop: Header=BB121_1 Depth=1
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	subl	-308(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB121_127
# BB#126:                               # %cond.true.420
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -700(%rbp)        # 4-byte Spill
	jmp	.LBB121_128
.LBB121_127:                            # %cond.false.421
                                        #   in Loop: Header=BB121_1 Depth=1
	xorl	%eax, %eax
	subl	-308(%rbp), %eax
	movl	%eax, -700(%rbp)        # 4-byte Spill
.LBB121_128:                            # %cond.end.423
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-700(%rbp), %eax        # 4-byte Reload
	movl	%eax, -36(%rbp)
.LBB121_129:                            # %if.end.425
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_141
.LBB121_130:                            # %if.else.426
                                        #   in Loop: Header=BB121_1 Depth=1
	cmpl	$0, -308(%rbp)
	jle	.LBB121_140
# BB#131:                               # %if.then.429
                                        #   in Loop: Header=BB121_1 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB121_136
# BB#132:                               # %if.then.432
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB121_134
# BB#133:                               # %cond.true.435
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -704(%rbp)        # 4-byte Spill
	jmp	.LBB121_135
.LBB121_134:                            # %cond.false.436
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-308(%rbp), %eax
	movl	%eax, -704(%rbp)        # 4-byte Spill
.LBB121_135:                            # %cond.end.437
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-704(%rbp), %eax        # 4-byte Reload
	movl	%eax, -308(%rbp)
.LBB121_136:                            # %if.end.439
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-308(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jle	.LBB121_138
# BB#137:                               # %cond.true.442
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-308(%rbp), %eax
	movl	%eax, -708(%rbp)        # 4-byte Spill
	jmp	.LBB121_139
.LBB121_138:                            # %cond.false.443
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -708(%rbp)        # 4-byte Spill
.LBB121_139:                            # %cond.end.444
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-708(%rbp), %eax        # 4-byte Reload
	movl	%eax, -32(%rbp)
.LBB121_140:                            # %if.end.446
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_141
.LBB121_141:                            # %if.end.447
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_1
.LBB121_142:                            # %if.else.448
	movq	-288(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB121_144
# BB#143:                               # %lor.lhs.false.451
	movq	-288(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB121_159
.LBB121_144:                            # %if.then.456
	movq	-48(%rbp), %rax
	movq	%rax, -320(%rbp)
	movl	$0, -324(%rbp)
.LBB121_145:                            # %while.cond.457
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -709(%rbp)         # 1-byte Spill
	jne	.LBB121_149
# BB#146:                               # %land.rhs.462
                                        #   in Loop: Header=BB121_145 Depth=1
	movb	$1, %al
	cmpl	$0, -36(%rbp)
	movb	%al, -710(%rbp)         # 1-byte Spill
	jle	.LBB121_148
# BB#147:                               # %lor.rhs.465
                                        #   in Loop: Header=BB121_145 Depth=1
	movl	-64(%rbp), %eax
	cmpl	-36(%rbp), %eax
	setl	%cl
	movb	%cl, -710(%rbp)         # 1-byte Spill
.LBB121_148:                            # %lor.end.468
                                        #   in Loop: Header=BB121_145 Depth=1
	movb	-710(%rbp), %al         # 1-byte Reload
	movb	%al, -709(%rbp)         # 1-byte Spill
.LBB121_149:                            # %land.end.469
                                        #   in Loop: Header=BB121_145 Depth=1
	movb	-709(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB121_150
	jmp	.LBB121_158
.LBB121_150:                            # %while.body.470
                                        #   in Loop: Header=BB121_145 Depth=1
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	movq	%rdi, -720(%rbp)        # 8-byte Spill
	movl	%esi, -724(%rbp)        # 4-byte Spill
	je	.LBB121_152
# BB#151:                               # %cond.true.478
                                        #   in Loop: Header=BB121_145 Depth=1
	movl	-32(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -728(%rbp)        # 4-byte Spill
	jmp	.LBB121_153
.LBB121_152:                            # %cond.false.480
                                        #   in Loop: Header=BB121_145 Depth=1
	xorl	%eax, %eax
	movl	%eax, -728(%rbp)        # 4-byte Spill
	jmp	.LBB121_153
.LBB121_153:                            # %cond.end.481
                                        #   in Loop: Header=BB121_145 Depth=1
	movl	-728(%rbp), %eax        # 4-byte Reload
	movl	-36(%rbp), %ecx
	subl	-64(%rbp), %ecx
	movq	-48(%rbp), %rdx
	subq	$3, %rdx
	movq	(%rdx), %r8
	movq	-56(%rbp), %r9
	movb	-57(%rbp), %sil
	andb	$1, %sil
	movq	-720(%rbp), %rdi        # 8-byte Reload
	movl	-724(%rbp), %r10d       # 4-byte Reload
	movb	%sil, -729(%rbp)        # 1-byte Spill
	movl	%r10d, %esi
	movl	%eax, %edx
	movb	-729(%rbp), %r11b       # 1-byte Reload
	movzbl	%r11b, %eax
	movl	%eax, (%rsp)
	callq	display_mode_element
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-48(%rbp), %rdi
	subq	$3, %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -48(%rbp)
	movl	-324(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -324(%rbp)
	movl	-324(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB121_155
# BB#154:                               # %if.then.496
                                        #   in Loop: Header=BB121_145 Depth=1
	movq	-320(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -320(%rbp)
.LBB121_155:                            # %if.end.500
                                        #   in Loop: Header=BB121_145 Depth=1
	movq	-320(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB121_157
# BB#156:                               # %if.then.503
	jmp	.LBB121_158
.LBB121_157:                            # %if.end.504
                                        #   in Loop: Header=BB121_145 Depth=1
	jmp	.LBB121_145
.LBB121_158:                            # %while.end.505
	jmp	.LBB121_159
.LBB121_159:                            # %if.end.506
	jmp	.LBB121_160
.LBB121_160:                            # %if.end.507
	jmp	.LBB121_161
.LBB121_161:                            # %if.end.508
	jmp	.LBB121_162
.LBB121_162:                            # %if.end.509
	jmp	.LBB121_163
.LBB121_163:                            # %if.end.510
	jmp	.LBB121_166
.LBB121_164:                            # %sw.default
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_165
.LBB121_165:                            # %invalid
                                        #   in Loop: Header=BB121_1 Depth=1
	movabsq	$.L.str.143, %rdi
	callq	build_string
	movq	%rax, -48(%rbp)
	jmp	.LBB121_1
.LBB121_166:                            # %sw.epilog.512
	cmpl	$0, -32(%rbp)
	jle	.LBB121_173
# BB#167:                               # %land.lhs.true.515
	movl	-64(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB121_173
# BB#168:                               # %if.then.518
	movl	mode_line_target(%rip), %eax
	testl	%eax, %eax
	movl	%eax, -736(%rbp)        # 4-byte Spill
	je	.LBB121_171
	jmp	.LBB121_182
.LBB121_182:                            # %if.then.518
	movl	-736(%rbp), %eax        # 4-byte Reload
	decl	%eax
	subl	$2, %eax
	movl	%eax, -740(%rbp)        # 4-byte Spill
	jb	.LBB121_169
	jmp	.LBB121_183
.LBB121_183:                            # %if.then.518
	movl	-736(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -744(%rbp)        # 4-byte Spill
	je	.LBB121_170
	jmp	.LBB121_172
.LBB121_169:                            # %sw.bb.519
	movabsq	$.L.str, %rdi
	xorl	%edx, %edx
	movl	-32(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, %esi
	callq	store_mode_line_noprop
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_172
.LBB121_170:                            # %sw.bb.523
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	-32(%rbp), %ecx
	subl	-64(%rbp), %ecx
	movq	%rax, -752(%rbp)        # 8-byte Spill
	movl	%ecx, -756(%rbp)        # 4-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str, %rdi
	xorl	%ecx, %ecx
	movq	-752(%rbp), %rsi        # 8-byte Reload
	movl	%ecx, %edx
	movl	-756(%rbp), %r8d        # 4-byte Reload
	movl	%ecx, -760(%rbp)        # 4-byte Spill
	movl	%r8d, %ecx
	movl	-760(%rbp), %r8d        # 4-byte Reload
	movq	%rax, %r9
	callq	store_mode_line_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB121_172
.LBB121_171:                            # %sw.bb.529
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str, %rdi
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movq	-24(%rbp), %r9
	movl	-32(%rbp), %esi
	subl	-64(%rbp), %esi
	movq	-768(%rbp), %r8         # 8-byte Reload
	movl	%esi, -772(%rbp)        # 4-byte Spill
	movq	%r8, %rsi
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-784(%rbp), %rax        # 8-byte Reload
	movl	%ecx, -788(%rbp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r8
	movl	-772(%rbp), %r10d       # 4-byte Reload
	movl	%r10d, (%rsp)
	movl	$0, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	$0, 24(%rsp)
	callq	display_string
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB121_172:                            # %sw.epilog.535
	jmp	.LBB121_173
.LBB121_173:                            # %if.end.536
	movl	-64(%rbp), %eax
	addq	$816, %rsp              # imm = 0x330
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end121:
	.size	display_mode_element, .Lfunc_end121-display_mode_element
	.cfi_endproc

	.globl	invisible_prop
	.align	16, 0x90
	.type	invisible_prop,@function
invisible_prop:                         # @invisible_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp374:
	.cfi_def_cfa_offset 16
.Ltmp375:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp376:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rsi, -32(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB122_9
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB122_4
# BB#3:                                 # %if.then
	movl	$1, -4(%rbp)
	jmp	.LBB122_25
.LBB122_4:                              # %if.end
                                        #   in Loop: Header=BB122_1 Depth=1
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB122_7
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB122_1 Depth=1
	movq	-16(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	$3, %rcx
	cmpq	(%rcx), %rax
	jne	.LBB122_7
# BB#6:                                 # %if.then.12
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	$1, %ecx
	movq	-72(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -4(%rbp)
	jmp	.LBB122_25
.LBB122_7:                              # %if.end.16
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_8
.LBB122_8:                              # %for.inc
                                        #   in Loop: Header=BB122_1 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB122_1
.LBB122_9:                              # %for.end
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB122_24
# BB#10:                                # %if.then.24
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB122_11:                             # %for.cond.25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_13 Depth 2
	movq	-40(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB122_23
# BB#12:                                # %for.body.30
                                        #   in Loop: Header=BB122_11 Depth=1
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB122_13:                             # %for.cond.33
                                        #   Parent Loop BB122_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB122_21
# BB#14:                                # %for.body.38
                                        #   in Loop: Header=BB122_13 Depth=2
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB122_16
# BB#15:                                # %if.then.44
	movl	$1, -4(%rbp)
	jmp	.LBB122_25
.LBB122_16:                             # %if.end.45
                                        #   in Loop: Header=BB122_13 Depth=2
	movq	-64(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB122_19
# BB#17:                                # %land.lhs.true.50
                                        #   in Loop: Header=BB122_13 Depth=2
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rcx
	subq	$3, %rcx
	cmpq	(%rcx), %rax
	jne	.LBB122_19
# BB#18:                                # %if.then.55
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	$1, %ecx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -4(%rbp)
	jmp	.LBB122_25
.LBB122_19:                             # %if.end.63
                                        #   in Loop: Header=BB122_13 Depth=2
	jmp	.LBB122_20
.LBB122_20:                             # %for.inc.64
                                        #   in Loop: Header=BB122_13 Depth=2
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB122_13
.LBB122_21:                             # %for.end.68
                                        #   in Loop: Header=BB122_11 Depth=1
	jmp	.LBB122_22
.LBB122_22:                             # %for.inc.69
                                        #   in Loop: Header=BB122_11 Depth=1
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB122_11
.LBB122_23:                             # %for.end.73
	jmp	.LBB122_24
.LBB122_24:                             # %if.end.74
	movl	$0, -4(%rbp)
.LBB122_25:                             # %return
	movl	-4(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end122:
	.size	invisible_prop, .Lfunc_end122-invisible_prop
	.cfi_endproc

	.globl	Finvisible_p
	.align	16, 0x90
	.type	Finvisible_p,@function
Finvisible_p:                           # @Finvisible_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp377:
	.cfi_def_cfa_offset 16
.Ltmp378:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp379:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB123_3
# BB#1:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB123_4
# BB#2:                                 # %land.lhs.true
	movq	-8(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB123_4
.LBB123_3:                              # %cond.true
	movl	$574, %edi              # imm = 0x23E
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB123_5
.LBB123_4:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB123_5:                              # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -16(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB123_7
# BB#6:                                 # %cond.true.11
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -68(%rbp)         # 4-byte Spill
	jmp	.LBB123_8
.LBB123_7:                              # %cond.false.15
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -68(%rbp)         # 4-byte Spill
.LBB123_8:                              # %cond.end.18
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB123_10
# BB#9:                                 # %cond.true.22
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB123_14
.LBB123_10:                             # %cond.false.24
	cmpl	$1, -20(%rbp)
	jne	.LBB123_12
# BB#11:                                # %cond.true.27
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB123_13
.LBB123_12:                             # %cond.false.29
	movslq	-20(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB123_13:                             # %cond.end.31
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB123_14:                             # %cond.end.33
	movq	-80(%rbp), %rax         # 8-byte Reload
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end123:
	.size	Finvisible_p, .Lfunc_end123-Finvisible_p
	.cfi_endproc

	.globl	get_font_ascent_descent
	.align	16, 0x90
	.type	get_font_ascent_descent,@function
get_font_ascent_descent:                # @get_font_ascent_descent
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp380:
	.cfi_def_cfa_offset 16
.Ltmp381:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp382:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	%eax, %esi
	callq	normal_char_ascent_descent
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end124:
	.size	get_font_ascent_descent, .Lfunc_end124-get_font_ascent_descent
	.cfi_endproc

	.align	16, 0x90
	.type	normal_char_ascent_descent,@function
normal_char_ascent_descent:             # @normal_char_ascent_descent
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp383:
	.cfi_def_cfa_offset 16
.Ltmp384:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp385:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movl	168(%rcx), %esi
	movq	-24(%rbp), %rcx
	movl	%esi, (%rcx)
	movq	-8(%rbp), %rcx
	movl	172(%rcx), %esi
	movq	-32(%rbp), %rcx
	movl	%esi, (%rcx)
	movq	-8(%rbp), %rcx
	cmpl	$0, 152(%rcx)
	jle	.LBB125_12
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movl	168(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	172(%rax), %ecx
	movq	-8(%rbp), %rax
	imull	$3, 152(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB125_12
# BB#2:                                 # %if.then
	cmpl	$0, -12(%rbp)
	jl	.LBB125_4
# BB#3:                                 # %cond.true
	movl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)         # 4-byte Spill
	jmp	.LBB125_5
.LBB125_4:                              # %cond.false
	movl	$123, %eax
	movl	%eax, -52(%rbp)         # 4-byte Spill
	jmp	.LBB125_5
.LBB125_5:                              # %cond.end
	movl	-52(%rbp), %eax         # 4-byte Reload
	leaq	-40(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movl	%eax, %edi
	callq	get_char_glyph_code
	testb	$1, %al
	jne	.LBB125_6
	jmp	.LBB125_11
.LBB125_6:                              # %if.then.8
	leaq	-40(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	get_per_char_metric
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movswl	4(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB125_9
# BB#7:                                 # %land.lhs.true.12
	movq	-48(%rbp), %rax
	movswl	2(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB125_9
# BB#8:                                 # %land.lhs.true.16
	movq	-48(%rbp), %rax
	movswl	(%rax), %ecx
	cmpl	$0, %ecx
	je	.LBB125_10
.LBB125_9:                              # %if.then.20
	movq	-48(%rbp), %rax
	movswl	6(%rax), %ecx
	addl	$1, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	movswl	8(%rax), %ecx
	addl	$1, %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
.LBB125_10:                             # %if.end
	jmp	.LBB125_11
.LBB125_11:                             # %if.end.27
	jmp	.LBB125_12
.LBB125_12:                             # %if.end.28
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end125:
	.size	normal_char_ascent_descent, .Lfunc_end125-normal_char_ascent_descent
	.cfi_endproc

	.globl	x_get_glyph_overhangs
	.align	16, 0x90
	.type	x_get_glyph_overhangs,@function
x_get_glyph_overhangs:                  # @x_get_glyph_overhangs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp386:
	.cfi_def_cfa_offset 16
.Ltmp387:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp388:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-24(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %eax
	andl	$7, %eax
	cmpl	$0, %eax
	jne	.LBB126_10
# BB#1:                                 # %if.then
	leaq	-40(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	get_glyph_face_and_encoding
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB126_9
# BB#2:                                 # %if.then.1
	leaq	-40(%rbp), %rsi
	movq	-48(%rbp), %rax
	movq	224(%rax), %rdi
	callq	get_per_char_metric
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB126_8
# BB#3:                                 # %if.then.5
	movq	-56(%rbp), %rax
	movswl	2(%rax), %ecx
	movq	-56(%rbp), %rax
	movswl	4(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB126_5
# BB#4:                                 # %if.then.9
	movq	-56(%rbp), %rax
	movswl	2(%rax), %ecx
	movq	-56(%rbp), %rax
	movswl	4(%rax), %edx
	subl	%edx, %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
.LBB126_5:                              # %if.end
	movq	-56(%rbp), %rax
	movswl	(%rax), %ecx
	cmpl	$0, %ecx
	jge	.LBB126_7
# BB#6:                                 # %if.then.17
	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	movswl	(%rcx), %edx
	subl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB126_7:                              # %if.end.21
	jmp	.LBB126_8
.LBB126_8:                              # %if.end.22
	jmp	.LBB126_9
.LBB126_9:                              # %if.end.23
	jmp	.LBB126_24
.LBB126_10:                             # %if.else
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$1, %ecx
	jne	.LBB126_23
# BB#11:                                # %if.then.29
	movq	-8(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB126_17
# BB#12:                                # %if.then.33
	movq	-8(%rbp), %rax
	movl	40(%rax), %ecx
	shrl	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	composition_table, %rdx
	movq	(%rdx,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movswl	12(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	4(%rax), %esi
	cmpl	%esi, %ecx
	jle	.LBB126_14
# BB#13:                                # %if.then.43
	movq	-64(%rbp), %rax
	movswl	12(%rax), %ecx
	movq	-64(%rbp), %rax
	movswl	4(%rax), %edx
	subl	%edx, %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
.LBB126_14:                             # %if.end.49
	movq	-64(%rbp), %rax
	movswl	10(%rax), %ecx
	cmpl	$0, %ecx
	jge	.LBB126_16
# BB#15:                                # %if.then.54
	xorl	%eax, %eax
	movq	-64(%rbp), %rcx
	movswl	10(%rcx), %edx
	subl	%edx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB126_16:                             # %if.end.58
	jmp	.LBB126_22
.LBB126_17:                             # %if.else.59
	movq	-8(%rbp), %rax
	movl	40(%rax), %ecx
	shrl	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edi
	callq	composition_gstring_from_id
	leaq	-88(%rbp), %rcx
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	-8(%rbp), %rax
	movslq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	36(%rax), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	callq	composition_gstring_width
	movswl	-86(%rbp), %r8d
	movswl	-84(%rbp), %r9d
	cmpl	%r9d, %r8d
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jle	.LBB126_19
# BB#18:                                # %if.then.78
	movswl	-86(%rbp), %eax
	movswl	-84(%rbp), %ecx
	subl	%ecx, %eax
	movq	-32(%rbp), %rdx
	movl	%eax, (%rdx)
.LBB126_19:                             # %if.end.84
	movswl	-88(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB126_21
# BB#20:                                # %if.then.89
	xorl	%eax, %eax
	movswl	-88(%rbp), %ecx
	subl	%ecx, %eax
	movq	-24(%rbp), %rdx
	movl	%eax, (%rdx)
.LBB126_21:                             # %if.end.93
	jmp	.LBB126_22
.LBB126_22:                             # %if.end.94
	jmp	.LBB126_23
.LBB126_23:                             # %if.end.95
	jmp	.LBB126_24
.LBB126_24:                             # %if.end.96
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end126:
	.size	x_get_glyph_overhangs, .Lfunc_end126-x_get_glyph_overhangs
	.cfi_endproc

	.align	16, 0x90
	.type	get_glyph_face_and_encoding,@function
get_glyph_face_and_encoding:            # @get_glyph_face_and_encoding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp389:
	.cfi_def_cfa_offset 16
.Ltmp390:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp391:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$0, -36(%rbp)
	testb	$1, %al
	jne	.LBB127_1
	jmp	.LBB127_2
.LBB127_1:                              # %cond.true
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB127_3
	jmp	.LBB127_4
.LBB127_2:                              # %cond.false
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	movl	%ecx, %ecx
	movl	%ecx, %eax
	addq	$0, %rax
	movq	-8(%rbp), %rdx
	movq	160(%rdx), %rdx
	movslq	32(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rax
	jae	.LBB127_4
.LBB127_3:                              # %cond.true.12
	movq	-16(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-8(%rbp), %rdx
	movq	160(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rax,8), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB127_5
.LBB127_4:                              # %cond.false.17
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jmp	.LBB127_5
.LBB127_5:                              # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	prepare_face_for_display
	movq	-32(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB127_15
# BB#6:                                 # %if.then
	movq	-16(%rbp), %rax
	cmpl	$4194175, 40(%rax)      # imm = 0x3FFF7F
	jbe	.LBB127_11
# BB#7:                                 # %if.then.20
	movq	-16(%rbp), %rax
	cmpl	$4194175, 40(%rax)      # imm = 0x3FFF7F
	jbe	.LBB127_9
# BB#8:                                 # %cond.true.25
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	subl	$4194048, %ecx          # imm = 0x3FFF00
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	jmp	.LBB127_10
.LBB127_9:                              # %cond.false.28
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$255, %ecx
	movl	%ecx, -52(%rbp)         # 4-byte Spill
.LBB127_10:                             # %cond.end.31
	movl	-52(%rbp), %eax         # 4-byte Reload
	movl	%eax, -36(%rbp)
	jmp	.LBB127_12
.LBB127_11:                             # %if.else
	movq	-32(%rbp), %rax
	movq	224(%rax), %rax
	movq	208(%rax), %rax
	movq	96(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	224(%rcx), %rdi
	movq	-16(%rbp), %rcx
	movl	40(%rcx), %esi
	callq	*%rax
	movl	%eax, -36(%rbp)
.LBB127_12:                             # %if.end
	cmpl	$-1, -36(%rbp)
	jne	.LBB127_14
# BB#13:                                # %if.then.39
	movl	$0, -36(%rbp)
.LBB127_14:                             # %if.end.40
	jmp	.LBB127_15
.LBB127_15:                             # %if.end.41
	movl	-36(%rbp), %eax
	shrl	$8, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movb	%cl, (%rdx)
	movl	-36(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movb	%cl, 1(%rdx)
	movq	-32(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end127:
	.size	get_glyph_face_and_encoding, .Lfunc_end127-get_glyph_face_and_encoding
	.cfi_endproc

	.align	16, 0x90
	.type	get_per_char_metric,@function
get_per_char_metric:                    # @get_per_char_metric
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp392:
	.cfi_def_cfa_offset 16
.Ltmp393:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp394:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB128_2
# BB#1:                                 # %if.then
	movq	$0, -8(%rbp)
	jmp	.LBB128_5
.LBB128_2:                              # %if.end
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	shll	$8, %ecx
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %edx
	orl	%edx, %ecx
	movl	%ecx, -28(%rbp)
	cmpl	$-1, -28(%rbp)
	jne	.LBB128_4
# BB#3:                                 # %if.then.3
	movq	$0, -8(%rbp)
	jmp	.LBB128_5
.LBB128_4:                              # %if.end.4
	leaq	-28(%rbp), %rsi
	movl	$1, %edx
	movabsq	$get_per_char_metric.metrics, %rcx
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movq	104(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	movabsq	$get_per_char_metric.metrics, %rax
	movq	%rax, -8(%rbp)
.LBB128_5:                              # %return
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end128:
	.size	get_per_char_metric, .Lfunc_end128-get_per_char_metric
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI129_0:
	.quad	-4616189618054758400    # double -1
.LCPI129_1:
	.quad	4636737291354636288     # double 100
	.text
	.globl	produce_stretch_glyph
	.align	16, 0x90
	.type	produce_stretch_glyph,@function
produce_stretch_glyph:                  # @produce_stretch_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp395:
	.cfi_def_cfa_offset 16
.Ltmp396:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp397:
	.cfi_def_cfa_register %rbp
	subq	$5152, %rsp             # imm = 0x1420
	movq	%rdi, -8(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -32(%rbp)
	movl	$-1, -36(%rbp)
	movb	$0, -37(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movb	$0, -61(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB129_10
# BB#1:                                 # %if.then
	movb	$1, %al
	testb	$1, %al
	jne	.LBB129_2
	jmp	.LBB129_3
.LBB129_2:                              # %cond.true
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB129_4
	jmp	.LBB129_5
.LBB129_3:                              # %cond.false
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB129_5
.LBB129_4:                              # %cond.true.13
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	jmp	.LBB129_6
.LBB129_5:                              # %cond.false.17
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4920(%rbp)       # 8-byte Spill
	jmp	.LBB129_6
.LBB129_6:                              # %cond.end
	movq	-4920(%rbp), %rax       # 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB129_8
# BB#7:                                 # %cond.true.19
	movq	-72(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	jmp	.LBB129_9
.LBB129_8:                              # %cond.false.21
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
.LBB129_9:                              # %cond.end.24
	movq	-4928(%rbp), %rax       # 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-72(%rbp), %rsi
	callq	prepare_face_for_display
.LBB129_10:                             # %if.end
	movl	$139, %edi
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -4936(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4936(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4944(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB129_11
	jmp	.LBB129_13
.LBB129_11:                             # %land.lhs.true
	leaq	-48(%rbp), %rdi
	movl	$1, %r8d
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	calc_pixel_width_or_height
	testb	$1, %al
	jne	.LBB129_12
	jmp	.LBB129_13
.LBB129_12:                             # %if.then.33
	movb	$1, -37(%rbp)
	cvttsd2si	-48(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB129_68
.LBB129_13:                             # %if.else
	movl	$106, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_14
	jmp	.LBB129_15
.LBB129_14:                             # %cond.true.39
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -4960(%rbp)      # 8-byte Spill
	jmp	.LBB129_16
.LBB129_15:                             # %cond.false.41
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -4960(%rbp)      # 8-byte Spill
	jmp	.LBB129_16
.LBB129_16:                             # %cond.end.42
	movsd	-4960(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB129_50
# BB#17:                                # %if.then.46
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB129_19
# BB#18:                                # %cond.true.49
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -4968(%rbp)       # 8-byte Spill
	jmp	.LBB129_20
.LBB129_19:                             # %cond.false.51
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4968(%rbp)       # 8-byte Spill
	jmp	.LBB129_20
.LBB129_20:                             # %cond.end.52
	movq	-4968(%rbp), %rax       # 8-byte Reload
	movl	$4800, %ecx             # imm = 0x12C0
	movl	%ecx, %edx
	leaq	-4872(%rbp), %rsi
	movq	-8(%rbp), %rdi
	addq	320(%rdi), %rax
	movq	current_buffer, %rdi
	movq	720(%rdi), %rdi
	addq	(%rdi), %rax
	addq	$-1, %rax
	movq	%rax, -4880(%rbp)
	movq	-8(%rbp), %rax
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	memcpy
	movq	-8(%rbp), %rax
	movb	88(%rax), %r8b
	andb	$1, %r8b
	testb	$1, %r8b
	je	.LBB129_31
# BB#21:                                # %if.then.63
	movq	-4880(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB129_23
# BB#22:                                # %cond.true.67
	movl	$1, -2744(%rbp)
	movq	-4880(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -4972(%rbp)       # 4-byte Spill
	jmp	.LBB129_30
.LBB129_23:                             # %cond.false.70
	movq	-4880(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB129_25
# BB#24:                                # %cond.true.75
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movl	$2, -2744(%rbp)
	movq	-4880(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-4880(%rbp), %rdx
	movzbl	1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-4880(%rbp), %rdx
	movzbl	(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	addl	%eax, %esi
	movl	%esi, -4976(%rbp)       # 4-byte Spill
	jmp	.LBB129_29
.LBB129_25:                             # %cond.false.89
	movq	-4880(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB129_27
# BB#26:                                # %cond.true.94
	movl	$3, -2744(%rbp)
	movq	-4880(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-4880(%rbp), %rax
	movzbl	1(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-4880(%rbp), %rax
	movzbl	2(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -4980(%rbp)       # 4-byte Spill
	jmp	.LBB129_28
.LBB129_27:                             # %cond.false.109
	xorl	%eax, %eax
	movl	%eax, %esi
	leaq	-4872(%rbp), %rcx
	movq	-4880(%rbp), %rdi
	addq	$2128, %rcx             # imm = 0x850
	movq	%rcx, %rdx
	callq	string_char
	movl	%eax, -4980(%rbp)       # 4-byte Spill
.LBB129_28:                             # %cond.end.112
	movl	-4980(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4976(%rbp)       # 4-byte Spill
.LBB129_29:                             # %cond.end.114
	movl	-4976(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4972(%rbp)       # 4-byte Spill
.LBB129_30:                             # %cond.end.116
	movl	-4972(%rbp), %eax       # 4-byte Reload
	movl	%eax, -2664(%rbp)
	movl	%eax, -2748(%rbp)
	jmp	.LBB129_36
.LBB129_31:                             # %if.else.118
	movb	$1, %al
	movq	-4880(%rbp), %rcx
	movzbl	(%rcx), %edx
	movl	%edx, -2664(%rbp)
	movl	%edx, -2748(%rbp)
	movl	$1, -2744(%rbp)
	testb	$1, %al
	jne	.LBB129_32
	jmp	.LBB129_33
.LBB129_32:                             # %cond.true.123
	movl	-2748(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB129_35
	jmp	.LBB129_34
.LBB129_33:                             # %cond.false.128
	movslq	-2748(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jb	.LBB129_35
.LBB129_34:                             # %if.then.134
	movl	-2748(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -2664(%rbp)
.LBB129_35:                             # %if.end.138
	jmp	.LBB129_36
.LBB129_36:                             # %if.end.139
	movq	$0, -2520(%rbp)
	movl	$0, -2768(%rbp)
# BB#37:                                # %do.body
	cmpq	$0, -2520(%rbp)
	je	.LBB129_40
# BB#38:                                # %land.lhs.true.143
	movl	-2416(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB129_40
# BB#39:                                # %if.then.149
	cmpl	$2, -104(%rbp)
	sete	%al
	movq	-2520(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB129_40:                             # %if.end.156
	movq	-4856(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB129_42
# BB#41:                                # %if.then.160
	leaq	-4872(%rbp), %rdi
	movq	-4856(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	callq	*8(%rax)
	jmp	.LBB129_43
.LBB129_42:                             # %if.else.164
	leaq	-4872(%rbp), %rdi
	callq	produce_glyphs
.LBB129_43:                             # %if.end.165
	cmpq	$0, -2520(%rbp)
	je	.LBB129_45
# BB#44:                                # %if.then.169
	movb	$1, globals+3391
.LBB129_45:                             # %if.end.170
	jmp	.LBB129_46
.LBB129_46:                             # %do.end
	movq	-16(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_47
	jmp	.LBB129_48
.LBB129_47:                             # %cond.true.173
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -4992(%rbp)      # 8-byte Spill
	jmp	.LBB129_49
.LBB129_48:                             # %cond.false.175
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -4992(%rbp)      # 8-byte Spill
	jmp	.LBB129_49
.LBB129_49:                             # %cond.end.176
	movsd	-4992(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cvtsi2sdl	-2504(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB129_67
.LBB129_50:                             # %if.else.180
	movl	$7, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5000(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5008(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB129_51
	jmp	.LBB129_65
.LBB129_51:                             # %land.lhs.true.187
	leaq	-48(%rbp), %rdi
	movl	$1, %r8d
	leaq	-36(%rbp), %r9
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	calc_pixel_width_or_height
	testb	$1, %al
	jne	.LBB129_52
	jmp	.LBB129_65
.LBB129_52:                             # %if.then.190
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB129_54
# BB#53:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB129_58
.LBB129_54:                             # %if.then.199
	cmpl	$0, -36(%rbp)
	jge	.LBB129_56
# BB#55:                                # %cond.true.202
	xorl	%eax, %eax
	movl	%eax, -5012(%rbp)       # 4-byte Spill
	jmp	.LBB129_57
.LBB129_56:                             # %cond.false.203
	movl	$1, %esi
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdi
	movl	%eax, -5016(%rbp)       # 4-byte Spill
	callq	window_box_left_offset
	movl	-5016(%rbp), %esi       # 4-byte Reload
	subl	%eax, %esi
	movl	%esi, -5012(%rbp)       # 4-byte Spill
.LBB129_57:                             # %cond.end.206
	movl	-5012(%rbp), %eax       # 4-byte Reload
	movl	%eax, -36(%rbp)
	jmp	.LBB129_61
.LBB129_58:                             # %if.else.208
	cmpl	$0, -36(%rbp)
	jge	.LBB129_60
# BB#59:                                # %if.then.211
	movl	$1, %esi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_left_offset
	movl	%eax, -36(%rbp)
.LBB129_60:                             # %if.end.214
	jmp	.LBB129_61
.LBB129_61:                             # %if.end.215
	xorl	%eax, %eax
	cvttsd2si	-48(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	2404(%rdx), %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_63
# BB#62:                                # %cond.true.221
	xorl	%eax, %eax
	movl	%eax, -5020(%rbp)       # 4-byte Spill
	jmp	.LBB129_64
.LBB129_63:                             # %cond.false.222
	cvttsd2si	-48(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	2404(%rcx), %eax
	movl	%eax, -5020(%rbp)       # 4-byte Spill
.LBB129_64:                             # %cond.end.227
	movl	-5020(%rbp), %eax       # 4-byte Reload
	movl	%eax, -28(%rbp)
	movb	$1, -37(%rbp)
	jmp	.LBB129_66
.LBB129_65:                             # %if.else.229
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	364(%rax), %ecx
	movl	%ecx, -28(%rbp)
.LBB129_66:                             # %if.end.231
	jmp	.LBB129_67
.LBB129_67:                             # %if.end.232
	jmp	.LBB129_68
.LBB129_68:                             # %if.end.233
	cmpl	$0, -28(%rbp)
	jg	.LBB129_72
# BB#69:                                # %land.lhs.true.236
	cmpl	$0, -28(%rbp)
	jl	.LBB129_71
# BB#70:                                # %lor.lhs.false.239
	testb	$1, -37(%rbp)
	jne	.LBB129_72
.LBB129_71:                             # %if.then.241
	movl	$1, -28(%rbp)
.LBB129_72:                             # %if.end.242
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB129_118
# BB#73:                                # %if.then.251
	movl	$32, %esi
	movq	-56(%rbp), %rdi
	callq	normal_char_height
	movl	$58, %edi
	movl	%eax, -4884(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -5032(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5032(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5040(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB129_74
	jmp	.LBB129_76
.LBB129_74:                             # %land.lhs.true.259
	leaq	-48(%rbp), %rdi
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	calc_pixel_width_or_height
	testb	$1, %al
	jne	.LBB129_75
	jmp	.LBB129_76
.LBB129_75:                             # %if.then.262
	cvttsd2si	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movb	$1, -61(%rbp)
	jmp	.LBB129_86
.LBB129_76:                             # %if.else.264
	movl	$105, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5048(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_77
	jmp	.LBB129_78
.LBB129_77:                             # %cond.true.269
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -5056(%rbp)      # 8-byte Spill
	jmp	.LBB129_79
.LBB129_78:                             # %cond.false.271
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -5056(%rbp)      # 8-byte Spill
	jmp	.LBB129_79
.LBB129_79:                             # %cond.end.272
	movsd	-5056(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB129_84
# BB#80:                                # %if.then.276
	cvtsi2sdl	-4884(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -5064(%rbp)      # 8-byte Spill
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_81
	jmp	.LBB129_82
.LBB129_81:                             # %cond.true.280
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -5072(%rbp)      # 8-byte Spill
	jmp	.LBB129_83
.LBB129_82:                             # %cond.false.282
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -5072(%rbp)      # 8-byte Spill
	jmp	.LBB129_83
.LBB129_83:                             # %cond.end.283
	movsd	-5072(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	-5064(%rbp), %xmm1      # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB129_85
.LBB129_84:                             # %if.else.287
	movl	-4884(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB129_85:                             # %if.end.288
	jmp	.LBB129_86
.LBB129_86:                             # %if.end.289
	cmpl	$0, -32(%rbp)
	jg	.LBB129_90
# BB#87:                                # %land.lhs.true.292
	cmpl	$0, -32(%rbp)
	jl	.LBB129_89
# BB#88:                                # %lor.lhs.false.295
	testb	$1, -61(%rbp)
	jne	.LBB129_90
.LBB129_89:                             # %if.then.297
	movl	$1, -32(%rbp)
.LBB129_90:                             # %if.end.298
	movl	$9, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -5080(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5080(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_91
	jmp	.LBB129_92
.LBB129_91:                             # %cond.true.303
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -5088(%rbp)      # 8-byte Spill
	jmp	.LBB129_93
.LBB129_92:                             # %cond.false.305
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -5088(%rbp)      # 8-byte Spill
	jmp	.LBB129_93
.LBB129_93:                             # %cond.end.306
	movsd	-5088(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	xorl	%eax, %eax
	movb	%al, %cl
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	movb	%cl, -5089(%rbp)        # 1-byte Spill
	jbe	.LBB129_98
# BB#94:                                # %land.rhs
	movq	-16(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_95
	jmp	.LBB129_96
.LBB129_95:                             # %cond.true.312
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -5104(%rbp)      # 8-byte Spill
	jmp	.LBB129_97
.LBB129_96:                             # %cond.false.314
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -5104(%rbp)      # 8-byte Spill
	jmp	.LBB129_97
.LBB129_97:                             # %cond.end.315
	movsd	-5104(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	.LCPI129_1, %xmm1       # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	setae	%al
	movb	%al, -5089(%rbp)        # 1-byte Spill
.LBB129_98:                             # %land.end
	movb	-5089(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB129_99
	jmp	.LBB129_103
.LBB129_99:                             # %if.then.319
	cvtsi2sdl	-32(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -5112(%rbp)      # 8-byte Spill
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB129_100
	jmp	.LBB129_101
.LBB129_100:                            # %cond.true.323
	movq	-16(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -5120(%rbp)      # 8-byte Spill
	jmp	.LBB129_102
.LBB129_101:                            # %cond.false.325
	movsd	.LCPI129_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -5120(%rbp)      # 8-byte Spill
	jmp	.LBB129_102
.LBB129_102:                            # %cond.end.326
	movsd	-5120(%rbp), %xmm0      # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	.LCPI129_1, %xmm1       # xmm1 = mem[0],zero
	movsd	-5112(%rbp), %xmm2      # 8-byte Reload
                                        # xmm2 = mem[0],zero
	mulsd	%xmm0, %xmm2
	divsd	%xmm1, %xmm2
	cvttsd2si	%xmm2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB129_117
.LBB129_103:                            # %if.else.330
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -5128(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5128(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB129_115
# BB#104:                               # %land.lhs.true.334
	leaq	-48(%rbp), %rdi
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	calc_pixel_width_or_height
	testb	$1, %al
	jne	.LBB129_105
	jmp	.LBB129_115
.LBB129_105:                            # %if.then.337
	xorl	%eax, %eax
	cvttsd2si	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_107
# BB#106:                               # %cond.true.341
	xorl	%eax, %eax
	movl	%eax, -5132(%rbp)       # 4-byte Spill
	jmp	.LBB129_108
.LBB129_107:                            # %cond.false.342
	cvttsd2si	-48(%rbp), %eax
	movl	%eax, -5132(%rbp)       # 4-byte Spill
.LBB129_108:                            # %cond.end.344
	movl	-5132(%rbp), %eax       # 4-byte Reload
	cmpl	-32(%rbp), %eax
	jge	.LBB129_113
# BB#109:                               # %cond.true.348
	xorl	%eax, %eax
	cvttsd2si	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_111
# BB#110:                               # %cond.true.352
	xorl	%eax, %eax
	movl	%eax, -5136(%rbp)       # 4-byte Spill
	jmp	.LBB129_112
.LBB129_111:                            # %cond.false.353
	cvttsd2si	-48(%rbp), %eax
	movl	%eax, -5136(%rbp)       # 4-byte Spill
.LBB129_112:                            # %cond.end.355
	movl	-5136(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5140(%rbp)       # 4-byte Spill
	jmp	.LBB129_114
.LBB129_113:                            # %cond.false.357
	movl	-32(%rbp), %eax
	movl	%eax, -5140(%rbp)       # 4-byte Spill
.LBB129_114:                            # %cond.end.358
	movl	-5140(%rbp), %eax       # 4-byte Reload
	movl	%eax, -60(%rbp)
	jmp	.LBB129_116
.LBB129_115:                            # %if.else.360
	movl	-32(%rbp), %eax
	movq	-56(%rbp), %rcx
	imull	168(%rcx), %eax
	movq	-56(%rbp), %rcx
	cltd
	idivl	156(%rcx)
	movl	%eax, -60(%rbp)
.LBB129_116:                            # %if.end.365
	jmp	.LBB129_117
.LBB129_117:                            # %if.end.366
	jmp	.LBB129_119
.LBB129_118:                            # %if.else.367
	movl	$1, -32(%rbp)
.LBB129_119:                            # %if.end.368
	cmpl	$0, -28(%rbp)
	jle	.LBB129_123
# BB#120:                               # %land.lhs.true.371
	movq	-8(%rbp), %rax
	cmpl	$0, 2116(%rax)
	je	.LBB129_123
# BB#121:                               # %land.lhs.true.374
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	addl	-28(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jle	.LBB129_123
# BB#122:                               # %if.then.379
	movq	-8(%rbp), %rax
	movl	2320(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2404(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	-28(%rbp), %esi
	subl	%ecx, %esi
	movl	%esi, -28(%rbp)
.LBB129_123:                            # %if.end.392
	cmpl	$0, -28(%rbp)
	jle	.LBB129_135
# BB#124:                               # %land.lhs.true.395
	cmpl	$0, -32(%rbp)
	jle	.LBB129_135
# BB#125:                               # %land.lhs.true.398
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB129_135
# BB#126:                               # %if.then.401
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	movq	%rax, -4896(%rbp)
	movq	-8(%rbp), %rax
	movl	2088(%rax), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rax
	movq	-8(%rbp), %rdx
	addq	$648, %rdx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rdx
	movq	(%rdx), %rax
	movq	%rax, -4904(%rbp)
	movl	-28(%rbp), %ecx
	movl	%ecx, -4908(%rbp)
	movq	-4904(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB129_128
# BB#127:                               # %if.then.408
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	%rax, -4904(%rbp)
.LBB129_128:                            # %if.end.410
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB129_130
# BB#129:                               # %if.then.419
	movq	-8(%rbp), %rdi
	movq	-4904(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-60(%rbp), %r8d
	callq	append_stretch_glyph
	jmp	.LBB129_134
.LBB129_130:                            # %if.else.420
	movq	-4904(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-8(%rbp), %rax
	movl	$32, 2208(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2128(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2368(%rax)
.LBB129_131:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4908(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -4908(%rbp)
	cmpl	$0, %eax
	je	.LBB129_133
# BB#132:                               # %while.body
                                        #   in Loop: Header=BB129_131 Depth=1
	movq	-8(%rbp), %rdi
	callq	tty_append_glyph
	jmp	.LBB129_131
.LBB129_133:                            # %while.end
	movq	-4896(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
.LBB129_134:                            # %if.end.427
	jmp	.LBB129_135
.LBB129_135:                            # %if.end.428
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	cmpl	$2, %eax
	jne	.LBB129_139
# BB#136:                               # %if.then.438
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-60(%rbp), %eax
	movq	-8(%rbp), %rdx
	movl	%eax, 2388(%rdx)
	movq	-8(%rbp), %rdx
	movl	%eax, 2372(%rdx)
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rdx
	subl	2372(%rdx), %eax
	movq	-8(%rbp), %rdx
	movl	%eax, 2392(%rdx)
	movq	-8(%rbp), %rdx
	movl	%eax, 2376(%rdx)
	cmpl	$0, -28(%rbp)
	movb	%cl, -5141(%rbp)        # 1-byte Spill
	jle	.LBB129_138
# BB#137:                               # %land.rhs.444
	cmpl	$0, -32(%rbp)
	setg	%al
	movb	%al, -5141(%rbp)        # 1-byte Spill
.LBB129_138:                            # %land.end.447
	movb	-5141(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movq	-8(%rbp), %rdx
	movl	%ecx, 2364(%rdx)
	movq	-8(%rbp), %rdi
	callq	take_vertical_position_into_account
	jmp	.LBB129_140
.LBB129_139:                            # %if.else.448
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2364(%rcx)
.LBB129_140:                            # %if.end.450
	addq	$5152, %rsp             # imm = 0x1420
	popq	%rbp
	retq
.Lfunc_end129:
	.size	produce_stretch_glyph, .Lfunc_end129-produce_stretch_glyph
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI130_0:
	.quad	4612901990326777938     # double 2.54
.LCPI130_1:
	.quad	4627842682090579558     # double 25.399999999999999
.LCPI130_2:
	.quad	4607182418800017408     # double 1
.LCPI130_3:
	.quad	4636737291354636288     # double 100
	.text
	.align	16, 0x90
	.type	calc_pixel_width_or_height,@function
calc_pixel_width_or_height:             # @calc_pixel_width_or_height
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp398:
	.cfi_def_cfa_offset 16
.Ltmp399:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp400:
	.cfi_def_cfa_register %rbp
	subq	$816, %rsp              # imm = 0x330
	movb	%r8b, %al
	xorl	%r8d, %r8d
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	andb	$1, %al
	movb	%al, -41(%rbp)
	movq	%r9, -56(%rbp)
	movq	-32(%rbp), %rcx
	movl	%r8d, %edi
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_2
# BB#1:                                 # %if.then
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_2:                              # %if.end
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB130_191
# BB#3:                                 # %if.then.3
	movq	-32(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SCHARS
	cmpq	$2, %rax
	jne	.LBB130_24
# BB#4:                                 # %if.then.8
	movq	-32(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SSDATA
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$105, %ecx
	jne	.LBB130_7
# BB#5:                                 # %land.lhs.true
	movq	-72(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$110, %ecx
	jne	.LBB130_7
# BB#6:                                 # %if.then.18
	movsd	.LCPI130_2, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -64(%rbp)
	jmp	.LBB130_16
.LBB130_7:                              # %if.else
	movq	-72(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$109, %ecx
	jne	.LBB130_10
# BB#8:                                 # %land.lhs.true.23
	movq	-72(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$109, %ecx
	jne	.LBB130_10
# BB#9:                                 # %if.then.28
	movsd	.LCPI130_1, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -64(%rbp)
	jmp	.LBB130_15
.LBB130_10:                             # %if.else.29
	movq	-72(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$99, %ecx
	jne	.LBB130_13
# BB#11:                                # %land.lhs.true.34
	movq	-72(%rbp), %rax
	movsbl	1(%rax), %ecx
	cmpl	$109, %ecx
	jne	.LBB130_13
# BB#12:                                # %if.then.39
	movsd	.LCPI130_0, %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -64(%rbp)
	jmp	.LBB130_14
.LBB130_13:                             # %if.else.40
	xorps	%xmm0, %xmm0
	movsd	%xmm0, -64(%rbp)
.LBB130_14:                             # %if.end.41
	jmp	.LBB130_15
.LBB130_15:                             # %if.end.42
	jmp	.LBB130_16
.LBB130_16:                             # %if.end.43
	xorps	%xmm0, %xmm0
	movsd	-64(%rbp), %xmm1        # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB130_23
# BB#17:                                # %if.then.46
	testb	$1, -41(%rbp)
	je	.LBB130_19
# BB#18:                                # %cond.true
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	movsd	56(%rax), %xmm0         # xmm0 = mem[0],zero
	movsd	%xmm0, -160(%rbp)       # 8-byte Spill
	jmp	.LBB130_20
.LBB130_19:                             # %cond.false
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	movsd	64(%rax), %xmm0         # xmm0 = mem[0],zero
	movsd	%xmm0, -160(%rbp)       # 8-byte Spill
.LBB130_20:                             # %cond.end
	movsd	-160(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	xorps	%xmm1, %xmm1
	movsd	%xmm0, -80(%rbp)
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	ucomisd	%xmm1, %xmm0
	jbe	.LBB130_22
# BB#21:                                # %if.then.54
	movsd	-80(%rbp), %xmm0        # xmm0 = mem[0],zero
	divsd	-64(%rbp), %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_22:                             # %if.end.55
	movb	$0, -1(%rbp)
	jmp	.LBB130_238
.LBB130_23:                             # %if.end.56
	jmp	.LBB130_24
.LBB130_24:                             # %if.end.57
	movl	$515, %edi              # imm = 0x203
	movq	-32(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_29
# BB#25:                                # %if.then.61
	cmpq	$0, -40(%rbp)
	je	.LBB130_27
# BB#26:                                # %cond.true.63
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movq	-40(%rbp), %rdi
	callq	normal_char_height
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB130_28
.LBB130_27:                             # %cond.false.65
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -172(%rbp)        # 4-byte Spill
.LBB130_28:                             # %cond.end.67
	movl	-172(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_29:                             # %if.end.70
	movl	$1017, %edi             # imm = 0x3F9
	movq	-32(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_34
# BB#30:                                # %if.then.74
	cmpq	$0, -40(%rbp)
	je	.LBB130_32
# BB#31:                                # %cond.true.76
	movq	-40(%rbp), %rax
	movl	148(%rax), %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
	jmp	.LBB130_33
.LBB130_32:                             # %cond.false.77
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	364(%rax), %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
.LBB130_33:                             # %cond.end.79
	movl	-188(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_34:                             # %if.end.82
	movl	$910, %edi              # imm = 0x38E
	movq	-32(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_88
# BB#35:                                # %if.then.86
	testb	$1, -41(%rbp)
	je	.LBB130_37
# BB#36:                                # %cond.true.89
	movl	$1, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_width
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB130_87
.LBB130_37:                             # %cond.false.91
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	244(%rax), %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	addl	260(%rax), %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -208(%rbp)        # 4-byte Spill
	movl	%edx, -212(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -216(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-216(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-212(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB130_39
# BB#38:                                # %land.lhs.true.108
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB130_41
.LBB130_39:                             # %lor.lhs.false
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB130_41
# BB#40:                                # %lor.lhs.false.124
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_42
.LBB130_41:                             # %cond.true.127
	xorl	%eax, %eax
	movl	%eax, -228(%rbp)        # 4-byte Spill
	jmp	.LBB130_43
.LBB130_42:                             # %cond.false.128
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -228(%rbp)        # 4-byte Spill
.LBB130_43:                             # %cond.end.132
	movl	-228(%rbp), %eax        # 4-byte Reload
	movl	-208(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -232(%rbp)        # 4-byte Spill
	jne	.LBB130_46
# BB#44:                                # %lor.lhs.false.142
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_47
# BB#45:                                # %land.lhs.true.148
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB130_47
.LBB130_46:                             # %cond.true.157
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB130_52
	jmp	.LBB130_56
.LBB130_47:                             # %cond.false.158
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_49
# BB#48:                                # %cond.true.163
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB130_52
	jmp	.LBB130_56
.LBB130_49:                             # %cond.false.172
	movl	$213, %edi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_51
# BB#50:                                # %cond.true.178
	movb	$1, %al
	testb	$1, %al
	jne	.LBB130_52
	jmp	.LBB130_56
.LBB130_51:                             # %cond.false.179
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB130_52
	jmp	.LBB130_56
.LBB130_52:                             # %cond.true.180
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB130_54
# BB#53:                                # %cond.true.184
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -252(%rbp)        # 4-byte Spill
	jmp	.LBB130_55
.LBB130_54:                             # %cond.false.187
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -252(%rbp)        # 4-byte Spill
.LBB130_55:                             # %cond.end.191
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB130_57
.LBB130_56:                             # %cond.false.193
	xorl	%eax, %eax
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB130_57
.LBB130_57:                             # %cond.end.194
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	-232(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -260(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB130_58
	jmp	.LBB130_63
.LBB130_58:                             # %cond.true.200
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB130_85
# BB#59:                                # %land.lhs.true.206
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB130_85
# BB#60:                                # %land.lhs.true.213
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB130_85
# BB#61:                                # %land.lhs.true.222
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB130_85
# BB#62:                                # %land.lhs.true.229
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB130_64
	jmp	.LBB130_85
.LBB130_63:                             # %cond.false.238
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB130_64
	jmp	.LBB130_85
.LBB130_64:                             # %cond.true.239
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB130_66
# BB#65:                                # %cond.true.243
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -276(%rbp)        # 4-byte Spill
	jmp	.LBB130_84
.LBB130_66:                             # %cond.false.246
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB130_69
# BB#67:                                # %land.lhs.true.249
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB130_69
# BB#68:                                # %cond.true.253
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB130_70
	jmp	.LBB130_75
.LBB130_69:                             # %cond.false.261
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB130_70
	jmp	.LBB130_75
.LBB130_70:                             # %cond.true.262
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB130_73
# BB#71:                                # %land.lhs.true.266
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB130_73
# BB#72:                                # %cond.true.271
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -280(%rbp)        # 4-byte Spill
	jmp	.LBB130_74
.LBB130_73:                             # %cond.false.282
	xorl	%eax, %eax
	movl	%eax, -280(%rbp)        # 4-byte Spill
	jmp	.LBB130_74
.LBB130_74:                             # %cond.end.283
	movl	-280(%rbp), %eax        # 4-byte Reload
	movl	%eax, -284(%rbp)        # 4-byte Spill
	jmp	.LBB130_83
.LBB130_75:                             # %cond.false.285
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movb	%al, -297(%rbp)         # 1-byte Spill
	je	.LBB130_82
# BB#76:                                # %lor.lhs.false.290
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	selected_window, %rdi
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-312(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -297(%rbp)         # 1-byte Spill
	je	.LBB130_82
# BB#77:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -313(%rbp)         # 1-byte Spill
	jle	.LBB130_81
# BB#78:                                # %land.lhs.true.297
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-328(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -313(%rbp)         # 1-byte Spill
	je	.LBB130_81
# BB#79:                                # %land.lhs.true.301
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -336(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-336(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -313(%rbp)         # 1-byte Spill
	jne	.LBB130_81
# BB#80:                                # %land.rhs
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-344(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -313(%rbp)         # 1-byte Spill
.LBB130_81:                             # %land.end
	movb	-313(%rbp), %al         # 1-byte Reload
	movb	%al, -297(%rbp)         # 1-byte Spill
.LBB130_82:                             # %lor.end
	movb	-297(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-296(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -284(%rbp)        # 4-byte Spill
.LBB130_83:                             # %cond.end.312
	movl	-284(%rbp), %eax        # 4-byte Reload
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -276(%rbp)        # 4-byte Spill
.LBB130_84:                             # %cond.end.316
	movl	-276(%rbp), %eax        # 4-byte Reload
	movl	%eax, -348(%rbp)        # 4-byte Spill
	jmp	.LBB130_86
.LBB130_85:                             # %cond.false.318
	xorl	%eax, %eax
	movl	%eax, -348(%rbp)        # 4-byte Spill
	jmp	.LBB130_86
.LBB130_86:                             # %cond.end.319
	movl	-348(%rbp), %eax        # 4-byte Reload
	movl	-260(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -204(%rbp)        # 4-byte Spill
.LBB130_87:                             # %cond.end.322
	movl	-204(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_88:                             # %if.end.325
	cmpq	$0, -56(%rbp)
	je	.LBB130_146
# BB#89:                                # %land.lhs.true.327
	movq	-56(%rbp), %rax
	cmpl	$0, (%rax)
	jge	.LBB130_146
# BB#90:                                # %if.then.330
	movl	$607, %edi              # imm = 0x25F
	xorps	%xmm0, %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movq	-32(%rbp), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-360(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_92
# BB#91:                                # %if.then.334
	movl	$1, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_left_offset
	movq	-56(%rbp), %rdi
	movl	%eax, (%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_92:                             # %if.end.337
	movl	$811, %edi              # imm = 0x32B
	movq	-32(%rbp), %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-368(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_94
# BB#93:                                # %if.then.341
	movl	$1, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_right_offset
	movq	-56(%rbp), %rdi
	movl	%eax, (%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_94:                             # %if.end.344
	movl	$251, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-376(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_96
# BB#95:                                # %if.then.348
	movl	$1, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_left_offset
	movl	$1, %esi
	movq	-24(%rbp), %rdi
	movq	8(%rdi), %rdi
	movl	%eax, -380(%rbp)        # 4-byte Spill
	callq	window_box_width
	movl	$2, %esi
	cltd
	idivl	%esi
	movl	-380(%rbp), %esi        # 4-byte Reload
	addl	%eax, %esi
	movq	-56(%rbp), %rdi
	movl	%esi, (%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_96:                             # %if.end.355
	movl	$608, %edi              # imm = 0x260
	movq	-32(%rbp), %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-392(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_116
# BB#97:                                # %if.then.359
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_114
# BB#98:                                # %cond.true.366
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_100
# BB#99:                                # %cond.true.374
	xorl	%eax, %eax
	movl	%eax, -396(%rbp)        # 4-byte Spill
	jmp	.LBB130_107
.LBB130_100:                            # %cond.false.375
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-408(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_102
# BB#101:                               # %cond.true.380
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -412(%rbp)        # 4-byte Spill
	jmp	.LBB130_106
.LBB130_102:                            # %cond.false.389
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-424(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_104
# BB#103:                               # %cond.true.395
	movl	$1, %eax
	movl	%eax, -428(%rbp)        # 4-byte Spill
	jmp	.LBB130_105
.LBB130_104:                            # %cond.false.396
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-440(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -428(%rbp)        # 4-byte Spill
.LBB130_105:                            # %cond.end.403
	movl	-428(%rbp), %eax        # 4-byte Reload
	movl	%eax, -412(%rbp)        # 4-byte Spill
.LBB130_106:                            # %cond.end.405
	movl	-412(%rbp), %eax        # 4-byte Reload
	movl	%eax, -396(%rbp)        # 4-byte Spill
.LBB130_107:                            # %cond.end.407
	movl	-396(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB130_112
# BB#108:                               # %cond.true.411
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB130_110
# BB#109:                               # %cond.true.415
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -444(%rbp)        # 4-byte Spill
	jmp	.LBB130_111
.LBB130_110:                            # %cond.false.418
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -444(%rbp)        # 4-byte Spill
.LBB130_111:                            # %cond.end.422
	movl	-444(%rbp), %eax        # 4-byte Reload
	movl	%eax, -448(%rbp)        # 4-byte Spill
	jmp	.LBB130_113
.LBB130_112:                            # %cond.false.424
	xorl	%eax, %eax
	movl	%eax, -448(%rbp)        # 4-byte Spill
	jmp	.LBB130_113
.LBB130_113:                            # %cond.end.425
	movl	-448(%rbp), %eax        # 4-byte Reload
	movl	%eax, -452(%rbp)        # 4-byte Spill
	jmp	.LBB130_115
.LBB130_114:                            # %cond.false.427
	xorl	%esi, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_right_offset
	movl	%eax, -452(%rbp)        # 4-byte Spill
.LBB130_115:                            # %cond.end.430
	movl	-452(%rbp), %eax        # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_116:                            # %if.end.432
	movl	$814, %edi              # imm = 0x32E
	movq	-32(%rbp), %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-464(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_121
# BB#117:                               # %if.then.436
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_119
# BB#118:                               # %cond.true.444
	movl	$2, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_right_offset
	movl	%eax, -468(%rbp)        # 4-byte Spill
	jmp	.LBB130_120
.LBB130_119:                            # %cond.false.447
	movl	$1, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_right_offset
	movl	%eax, -468(%rbp)        # 4-byte Spill
.LBB130_120:                            # %cond.end.450
	movl	-468(%rbp), %eax        # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_121:                            # %if.end.452
	movl	$609, %edi              # imm = 0x261
	movq	-32(%rbp), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-480(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_123
# BB#122:                               # %if.then.456
	xorl	%esi, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_left_offset
	movq	-56(%rbp), %rdi
	movl	%eax, (%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_123:                            # %if.end.459
	movl	$815, %edi              # imm = 0x32F
	movq	-32(%rbp), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_125
# BB#124:                               # %if.then.463
	movl	$2, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_left_offset
	movq	-56(%rbp), %rdi
	movl	%eax, (%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_125:                            # %if.end.466
	movl	$830, %edi              # imm = 0x33E
	movq	-32(%rbp), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-496(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_145
# BB#126:                               # %if.then.470
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_128
# BB#127:                               # %cond.true.478
	xorl	%eax, %eax
	movl	%eax, -500(%rbp)        # 4-byte Spill
	jmp	.LBB130_135
.LBB130_128:                            # %cond.false.479
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-512(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_130
# BB#129:                               # %cond.true.485
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -516(%rbp)        # 4-byte Spill
	jmp	.LBB130_134
.LBB130_130:                            # %cond.false.494
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-528(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_132
# BB#131:                               # %cond.true.500
	movl	$1, %eax
	movl	%eax, -532(%rbp)        # 4-byte Spill
	jmp	.LBB130_133
.LBB130_132:                            # %cond.false.501
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-544(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -532(%rbp)        # 4-byte Spill
.LBB130_133:                            # %cond.end.508
	movl	-532(%rbp), %eax        # 4-byte Reload
	movl	%eax, -516(%rbp)        # 4-byte Spill
.LBB130_134:                            # %cond.end.510
	movl	-516(%rbp), %eax        # 4-byte Reload
	movl	%eax, -500(%rbp)        # 4-byte Spill
.LBB130_135:                            # %cond.end.512
	movl	-500(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB130_137
# BB#136:                               # %cond.true.516
	xorl	%eax, %eax
	movl	%eax, -548(%rbp)        # 4-byte Spill
	jmp	.LBB130_144
.LBB130_137:                            # %cond.false.517
	movl	$2, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_right_offset
	movq	-24(%rbp), %rdi
	movq	8(%rdi), %rdi
	movw	468(%rdi), %cx
	shrw	$12, %cx
	andw	$1, %cx
	testw	$1, %cx
	movl	%eax, -552(%rbp)        # 4-byte Spill
	je	.LBB130_142
# BB#138:                               # %cond.true.527
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB130_140
# BB#139:                               # %cond.true.531
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -556(%rbp)        # 4-byte Spill
	jmp	.LBB130_141
.LBB130_140:                            # %cond.false.534
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -556(%rbp)        # 4-byte Spill
.LBB130_141:                            # %cond.end.539
	movl	-556(%rbp), %eax        # 4-byte Reload
	movl	%eax, -560(%rbp)        # 4-byte Spill
	jmp	.LBB130_143
.LBB130_142:                            # %cond.false.541
	xorl	%eax, %eax
	movl	%eax, -560(%rbp)        # 4-byte Spill
	jmp	.LBB130_143
.LBB130_143:                            # %cond.end.542
	movl	-560(%rbp), %eax        # 4-byte Reload
	movl	-552(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -548(%rbp)        # 4-byte Spill
.LBB130_144:                            # %cond.end.545
	movl	-548(%rbp), %eax        # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_145:                            # %if.end.547
	jmp	.LBB130_188
.LBB130_146:                            # %if.else.548
	movl	$608, %edi              # imm = 0x260
	movq	-32(%rbp), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-568(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_151
# BB#147:                               # %if.then.552
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB130_149
# BB#148:                               # %cond.true.556
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -572(%rbp)        # 4-byte Spill
	jmp	.LBB130_150
.LBB130_149:                            # %cond.false.559
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -572(%rbp)        # 4-byte Spill
.LBB130_150:                            # %cond.end.564
	movl	-572(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_151:                            # %if.end.567
	movl	$814, %edi              # imm = 0x32E
	movq	-32(%rbp), %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-584(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_156
# BB#152:                               # %if.then.571
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB130_154
# BB#153:                               # %cond.true.576
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -588(%rbp)        # 4-byte Spill
	jmp	.LBB130_155
.LBB130_154:                            # %cond.false.579
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -588(%rbp)        # 4-byte Spill
.LBB130_155:                            # %cond.end.584
	movl	-588(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_156:                            # %if.end.587
	movl	$609, %edi              # imm = 0x261
	movq	-32(%rbp), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-600(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_158
# BB#157:                               # %if.then.591
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cvtsi2sdl	%ecx, %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_158:                            # %if.end.598
	movl	$815, %edi              # imm = 0x32F
	movq	-32(%rbp), %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-608(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_160
# BB#159:                               # %if.then.602
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cvtsi2sdl	%ecx, %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_160:                            # %if.end.610
	movl	$830, %edi              # imm = 0x33E
	movq	-32(%rbp), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-616(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_187
# BB#161:                               # %if.then.614
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_163
# BB#162:                               # %cond.true.622
	xorl	%eax, %eax
	movl	%eax, -620(%rbp)        # 4-byte Spill
	jmp	.LBB130_170
.LBB130_163:                            # %cond.false.623
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-632(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_165
# BB#164:                               # %cond.true.629
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -636(%rbp)        # 4-byte Spill
	jmp	.LBB130_169
.LBB130_165:                            # %cond.false.638
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-648(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_167
# BB#166:                               # %cond.true.644
	movl	$1, %eax
	movl	%eax, -652(%rbp)        # 4-byte Spill
	jmp	.LBB130_168
.LBB130_167:                            # %cond.false.645
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-664(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -652(%rbp)        # 4-byte Spill
.LBB130_168:                            # %cond.end.652
	movl	-652(%rbp), %eax        # 4-byte Reload
	movl	%eax, -636(%rbp)        # 4-byte Spill
.LBB130_169:                            # %cond.end.654
	movl	-636(%rbp), %eax        # 4-byte Reload
	movl	%eax, -620(%rbp)        # 4-byte Spill
.LBB130_170:                            # %cond.end.656
	movl	-620(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB130_181
# BB#171:                               # %lor.lhs.false.660
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB130_173
# BB#172:                               # %cond.true.668
	xorl	%eax, %eax
	movl	%eax, -668(%rbp)        # 4-byte Spill
	jmp	.LBB130_180
.LBB130_173:                            # %cond.false.669
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-680(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_175
# BB#174:                               # %cond.true.675
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -684(%rbp)        # 4-byte Spill
	jmp	.LBB130_179
.LBB130_175:                            # %cond.false.684
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-696(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_177
# BB#176:                               # %cond.true.690
	movl	$1, %eax
	movl	%eax, -700(%rbp)        # 4-byte Spill
	jmp	.LBB130_178
.LBB130_177:                            # %cond.false.691
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-712(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -700(%rbp)        # 4-byte Spill
.LBB130_178:                            # %cond.end.698
	movl	-700(%rbp), %eax        # 4-byte Reload
	movl	%eax, -684(%rbp)        # 4-byte Spill
.LBB130_179:                            # %cond.end.700
	movl	-684(%rbp), %eax        # 4-byte Reload
	movl	%eax, -668(%rbp)        # 4-byte Spill
.LBB130_180:                            # %cond.end.702
	movl	-668(%rbp), %eax        # 4-byte Reload
	cmpl	$2, %eax
	jne	.LBB130_185
.LBB130_181:                            # %cond.true.706
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB130_183
# BB#182:                               # %cond.true.711
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -716(%rbp)        # 4-byte Spill
	jmp	.LBB130_184
.LBB130_183:                            # %cond.false.714
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -716(%rbp)        # 4-byte Spill
.LBB130_184:                            # %cond.end.719
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	%eax, -720(%rbp)        # 4-byte Spill
	jmp	.LBB130_186
.LBB130_185:                            # %cond.false.721
	xorl	%eax, %eax
	movl	%eax, -720(%rbp)        # 4-byte Spill
	jmp	.LBB130_186
.LBB130_186:                            # %cond.end.722
	movl	-720(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_187:                            # %if.end.725
	jmp	.LBB130_188
.LBB130_188:                            # %if.end.726
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rsi
	callq	buffer_local_value
	movl	$957, %edi              # imm = 0x3BD
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -728(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-728(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB130_190
# BB#189:                               # %if.then.733
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
.LBB130_190:                            # %if.end.735
	jmp	.LBB130_191
.LBB130_191:                            # %if.end.736
	movq	-32(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB130_192
	jmp	.LBB130_196
.LBB130_192:                            # %if.then.738
	testb	$1, -41(%rbp)
	je	.LBB130_194
# BB#193:                               # %cond.true.741
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	364(%rax), %ecx
	movl	%ecx, -732(%rbp)        # 4-byte Spill
	jmp	.LBB130_195
.LBB130_194:                            # %cond.false.744
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -732(%rbp)        # 4-byte Spill
.LBB130_195:                            # %cond.end.747
	movl	-732(%rbp), %eax        # 4-byte Reload
	movl	%eax, -84(%rbp)
	movq	-32(%rbp), %rdi
	callq	XFLOATINT
	cvtsi2sdl	-84(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, (%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_196:                            # %if.end.752
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB130_237
# BB#197:                               # %if.then.757
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-96(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB130_230
# BB#198:                               # %if.then.766
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB130_208
# BB#199:                               # %land.lhs.true.774
	movq	-32(%rbp), %rdi
	callq	valid_image_p
	testb	$1, %al
	jne	.LBB130_200
	jmp	.LBB130_208
.LBB130_200:                            # %if.then.777
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	lookup_image
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	jl	.LBB130_203
# BB#201:                               # %land.lhs.true.782
	movq	-112(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB130_203
# BB#202:                               # %cond.true.786
	movq	-112(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	jmp	.LBB130_204
.LBB130_203:                            # %cond.false.791
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	jmp	.LBB130_204
.LBB130_204:                            # %cond.end.792
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB130_206
# BB#205:                               # %cond.true.796
	movq	-120(%rbp), %rax
	movl	92(%rax), %ecx
	movl	%ecx, -748(%rbp)        # 4-byte Spill
	jmp	.LBB130_207
.LBB130_206:                            # %cond.false.797
	movq	-120(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, -748(%rbp)        # 4-byte Spill
.LBB130_207:                            # %cond.end.799
	movl	-748(%rbp), %eax        # 4-byte Reload
	cvtsi2sdl	%eax, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_208:                            # %if.end.802
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB130_211
# BB#209:                               # %land.lhs.true.811
	movq	-32(%rbp), %rdi
	callq	valid_xwidget_spec_p
	testb	$1, %al
	jne	.LBB130_210
	jmp	.LBB130_211
.LBB130_210:                            # %if.then.814
	movsd	.LCPI130_3, %xmm0       # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_211:                            # %if.end.815
	movl	$752, %edi              # imm = 0x2F0
	movq	-96(%rbp), %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-760(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB130_213
# BB#212:                               # %lor.lhs.false.819
	movl	$668, %edi              # imm = 0x29C
	movq	-96(%rbp), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-768(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_227
.LBB130_213:                            # %if.then.823
	xorps	%xmm0, %xmm0
	movb	$1, -121(%rbp)
	movsd	%xmm0, -64(%rbp)
.LBB130_214:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB130_224
# BB#215:                               # %while.body
                                        #   in Loop: Header=BB130_214 Depth=1
	leaq	-136(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdx
	movq	-40(%rbp), %rcx
	movb	-41(%rbp), %r8b
	movq	-56(%rbp), %r9
	andb	$1, %r8b
	movzbl	%r8b, %r8d
	callq	calc_pixel_width_or_height
	testb	$1, %al
	jne	.LBB130_217
# BB#216:                               # %if.then.832
	movb	$0, -1(%rbp)
	jmp	.LBB130_238
.LBB130_217:                            # %if.end.833
                                        #   in Loop: Header=BB130_214 Depth=1
	testb	$1, -121(%rbp)
	je	.LBB130_222
# BB#218:                               # %if.then.835
                                        #   in Loop: Header=BB130_214 Depth=1
	movl	$752, %edi              # imm = 0x2F0
	movq	-96(%rbp), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-776(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_220
# BB#219:                               # %cond.true.839
                                        #   in Loop: Header=BB130_214 Depth=1
	movsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	movsd	%xmm0, -784(%rbp)       # 8-byte Spill
	jmp	.LBB130_221
.LBB130_220:                            # %cond.false.840
                                        #   in Loop: Header=BB130_214 Depth=1
	movsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	movd	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	xorq	%rcx, %rax
	movd	%rax, %xmm0
	movsd	%xmm0, -784(%rbp)       # 8-byte Spill
.LBB130_221:                            # %cond.end.842
                                        #   in Loop: Header=BB130_214 Depth=1
	movsd	-784(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movsd	%xmm0, -64(%rbp)
	movb	$0, -121(%rbp)
	jmp	.LBB130_223
.LBB130_222:                            # %if.else.844
                                        #   in Loop: Header=BB130_214 Depth=1
	movsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	addsd	-64(%rbp), %xmm0
	movsd	%xmm0, -64(%rbp)
.LBB130_223:                            # %if.end.846
                                        #   in Loop: Header=BB130_214 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB130_214
.LBB130_224:                            # %while.end
	movl	$668, %edi              # imm = 0x29C
	movq	-96(%rbp), %rax
	movq	%rax, -792(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-792(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_226
# BB#225:                               # %if.then.853
	movsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	movd	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	xorq	%rcx, %rax
	movd	%rax, %xmm0
	movsd	%xmm0, -64(%rbp)
.LBB130_226:                            # %if.end.855
	movsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_227:                            # %if.end.856
	movq	-96(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rsi
	callq	buffer_local_value
	movl	$957, %edi              # imm = 0x3BD
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-800(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB130_229
# BB#228:                               # %if.then.863
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)
.LBB130_229:                            # %if.end.865
	jmp	.LBB130_230
.LBB130_230:                            # %if.end.866
	movq	-96(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB130_231
	jmp	.LBB130_236
.LBB130_231:                            # %if.then.868
	movq	-96(%rbp), %rdi
	callq	XFLOATINT
	xorl	%edi, %edi
	movsd	%xmm0, -64(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-808(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB130_233
# BB#232:                               # %if.then.873
	movsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_233:                            # %if.end.874
	leaq	-144(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movb	-41(%rbp), %al
	movq	-56(%rbp), %r9
	andb	$1, %al
	movzbl	%al, %r8d
	callq	calc_pixel_width_or_height
	testb	$1, %al
	jne	.LBB130_234
	jmp	.LBB130_235
.LBB130_234:                            # %if.then.877
	movsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	mulsd	-144(%rbp), %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB130_238
.LBB130_235:                            # %if.end.879
	movb	$0, -1(%rbp)
	jmp	.LBB130_238
.LBB130_236:                            # %if.end.880
	movb	$0, -1(%rbp)
	jmp	.LBB130_238
.LBB130_237:                            # %if.end.881
	movb	$0, -1(%rbp)
.LBB130_238:                            # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$816, %rsp              # imm = 0x330
	popq	%rbp
	retq
.Lfunc_end130:
	.size	calc_pixel_width_or_height, .Lfunc_end130-calc_pixel_width_or_height
	.cfi_endproc

	.align	16, 0x90
	.type	append_stretch_glyph,@function
append_stretch_glyph:                   # @append_stretch_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp401:
	.cfi_def_cfa_offset 16
.Ltmp402:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp403:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -28(%rbp)
	movq	-8(%rbp), %rsi
	movl	2360(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-44(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movq	2352(%rdi), %rdi
	movq	(%rdi,%rsi,8), %rsi
	movslq	-44(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	32(%rax,%rdi,2), %ecx
	movslq	%ecx, %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rsi
	movq	-8(%rbp), %rdi
	movq	2352(%rdi), %rdi
	cmpq	(%rdi,%rsi,8), %rax
	jae	.LBB131_18
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB131_10
# BB#2:                                 # %land.lhs.true
	cmpl	$1, -44(%rbp)
	jne	.LBB131_10
# BB#3:                                 # %if.then.14
	movq	-40(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -56(%rbp)
.LBB131_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	cmpq	(%rdx,%rcx,8), %rax
	jb	.LBB131_7
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB131_4 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-56(%rbp), %rcx
	addq	$48, %rcx
	movq	-56(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB131_4 Depth=1
	movq	-56(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB131_4
.LBB131_7:                              # %for.end
	movslq	-44(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	2404(%rax), %edx
	movq	-8(%rbp), %rax
	cmpl	2316(%rax), %edx
	jge	.LBB131_9
# BB#8:                                 # %if.then.29
	movq	-8(%rbp), %rax
	movl	2316(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2404(%rax), %ecx
	movl	-20(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -20(%rbp)
.LBB131_9:                              # %if.end
	jmp	.LBB131_10
.LBB131_10:                             # %if.end.33
	movq	$-1, %rdi
	movl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	2296(%rcx), %rcx
	movq	-40(%rbp), %rsi
	movq	%rcx, (%rsi)
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	%rcx, 8(%rsi)
	movslq	-20(%rbp), %rsi
	callq	clip_to_bounds
	movw	%ax, %r8w
	movq	-40(%rbp), %rax
	movw	%r8w, 16(%rax)
	movl	-28(%rbp), %r9d
	movw	%r9w, %r8w
	movq	-40(%rbp), %rax
	movw	%r8w, 18(%rax)
	movl	-24(%rbp), %r9d
	subl	-28(%rbp), %r9d
	movw	%r9w, %r8w
	movq	-40(%rbp), %rax
	movw	%r8w, 20(%rax)
	movq	-8(%rbp), %rax
	movw	2272(%rax), %r8w
	movq	-40(%rbp), %rax
	movw	%r8w, 22(%rax)
	movq	-40(%rbp), %rax
	movl	24(%rax), %r9d
	andl	$-8, %r9d
	orl	$4, %r9d
	movl	%r9d, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %r10b
	shrb	$6, %r10b
	andb	$1, %r10b
	movq	-40(%rbp), %rax
	andb	$1, %r10b
	movzbl	%r10b, %r9d
	movl	24(%rax), %r11d
	shll	$9, %r9d
	andl	$-513, %r11d            # imm = 0xFFFFFFFFFFFFFDFF
	orl	%r9d, %r11d
	movl	%r11d, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %r10b
	andb	$1, %r10b
	movq	-40(%rbp), %rax
	andb	$1, %r10b
	movzbl	%r10b, %r9d
	movl	24(%rax), %r11d
	shll	$3, %r9d
	andl	$-9, %r11d
	orl	%r9d, %r11d
	movl	%r11d, 24(%rax)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB131_13
# BB#11:                                # %land.lhs.true.70
	cmpl	$1, -44(%rbp)
	jne	.LBB131_13
# BB#12:                                # %if.then.73
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	jmp	.LBB131_14
.LBB131_13:                             # %if.else
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
.LBB131_14:                             # %if.end.118
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-65, %ecx
	movl	%ecx, 24(%rax)
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-129, %ecx
	movl	%ecx, 24(%rax)
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-257, %ecx             # imm = 0xFFFFFFFFFFFFFEFF
	movl	%ecx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	28(%rax), %edx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	andl	$-1048576, %edx         # imm = 0xFFFFFFFFFFF00000
	orl	%ecx, %edx
	movl	%edx, 28(%rax)
	movl	-28(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	40(%rax), %edx
	andl	$65535, %ecx            # imm = 0xFFFF
	shll	$16, %ecx
	andl	$65535, %edx            # imm = 0xFFFF
	orl	%ecx, %edx
	movl	%edx, 40(%rax)
	movl	-24(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	40(%rax), %edx
	andl	$65535, %ecx            # imm = 0xFFFF
	andl	$-65536, %edx           # imm = 0xFFFFFFFFFFFF0000
	orl	%ecx, %edx
	movl	%edx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	null_glyph_slice, %rsi
	movq	%rsi, 32(%rax)
	movq	-40(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$-7340033, %ecx         # imm = 0xFFFFFFFFFF8FFFFF
	movl	%ecx, 28(%rax)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB131_16
# BB#15:                                # %if.then.146
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	24(%rax), %edx
	andl	$127, %ecx
	shll	$10, %ecx
	andl	$-130049, %edx          # imm = 0xFFFFFFFFFFFE03FF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	2504(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	24(%rax), %edx
	andl	$7, %ecx
	shll	$17, %ecx
	andl	$-917505, %edx          # imm = 0xFFFFFFFFFFF1FFFF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	jmp	.LBB131_17
.LBB131_16:                             # %if.else.161
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-130049, %ecx          # imm = 0xFFFFFFFFFFFE03FF
	movl	%ecx, 24(%rax)
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-917505, %ecx          # imm = 0xFFFFFFFFFFF1FFFF
	movl	%ecx, 24(%rax)
.LBB131_17:                             # %if.end.168
	movslq	-44(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movw	32(%rcx,%rax,2), %dx
	addw	$1, %dx
	movw	%dx, 32(%rcx,%rax,2)
	jmp	.LBB131_22
.LBB131_18:                             # %if.else.173
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB131_21
# BB#19:                                # %land.lhs.true.178
	movslq	-44(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movl	-44(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	cmpq	(%rsi,%rcx,8), %rax
	jae	.LBB131_21
# BB#20:                                # %if.then.190
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	348(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 348(%rax)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rdx
	andq	$-65, %rdx
	orq	$64, %rdx
	movq	%rdx, 208(%rax)
.LBB131_21:                             # %if.end.197
	jmp	.LBB131_22
.LBB131_22:                             # %if.end.198
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end131:
	.size	append_stretch_glyph, .Lfunc_end131-append_stretch_glyph
	.cfi_endproc

	.align	16, 0x90
	.type	take_vertical_position_into_account,@function
take_vertical_position_into_account:    # @take_vertical_position_into_account
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp404:
	.cfi_def_cfa_offset 16
.Ltmp405:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp406:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpw	$0, 2272(%rdi)
	je	.LBB132_5
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movswl	2272(%rax), %ecx
	cmpl	$0, %ecx
	jge	.LBB132_3
# BB#2:                                 # %if.then.3
	movq	-8(%rbp), %rax
	movswl	2272(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2372(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 2372(%rax)
	jmp	.LBB132_4
.LBB132_3:                              # %if.else
	movq	-8(%rbp), %rax
	movswl	2272(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, 2376(%rax)
.LBB132_4:                              # %if.end
	jmp	.LBB132_5
.LBB132_5:                              # %if.end.8
	popq	%rbp
	retq
.Lfunc_end132:
	.size	take_vertical_position_into_account, .Lfunc_end132-take_vertical_position_into_account
	.cfi_endproc

	.globl	x_produce_glyphs
	.align	16, 0x90
	.type	x_produce_glyphs,@function
x_produce_glyphs:                       # @x_produce_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp407:
	.cfi_def_cfa_offset 16
.Ltmp408:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp409:
	.cfi_def_cfa_register %rbp
	subq	$768, %rsp              # imm = 0x300
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	2328(%rdi), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rdi
	movw	2112(%rdi), %cx
	andw	$-129, %cx
	movw	%cx, 2112(%rdi)
	movq	-8(%rbp), %rdi
	cmpl	$0, 2104(%rdi)
	jne	.LBB133_167
# BB#1:                                 # %if.then
	movb	$1, %al
	testb	$1, %al
	jne	.LBB133_2
	jmp	.LBB133_3
.LBB133_2:                              # %cond.true
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB133_4
	jmp	.LBB133_5
.LBB133_3:                              # %cond.false
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB133_5
.LBB133_4:                              # %cond.true.13
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	jmp	.LBB133_6
.LBB133_5:                              # %cond.false.17
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	jmp	.LBB133_6
.LBB133_6:                              # %cond.end
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	$0, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB133_11
# BB#7:                                 # %if.then.21
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	movq	-8(%rbp), %rsi
	callq	lookup_glyphless_char_display
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rax
	movq	%rdi, -376(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB133_8
	jmp	.LBB133_9
.LBB133_8:                              # %cond.true.24
	movq	-56(%rbp), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	jmp	.LBB133_10
.LBB133_9:                              # %cond.false.25
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -384(%rbp)        # 8-byte Spill
.LBB133_10:                             # %cond.end.27
	movq	-384(%rbp), %rax        # 8-byte Reload
	movl	$1, %esi
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	produce_glyphless_glyph
	jmp	.LBB133_378
.LBB133_11:                             # %if.end
	movq	-32(%rbp), %rax
	movl	188(%rax), %ecx
	movl	%ecx, -44(%rbp)
	movq	-32(%rbp), %rax
	testb	$1, 184(%rax)
	je	.LBB133_13
# BB#12:                                # %if.then.29
	movl	$2, %eax
	movq	-32(%rbp), %rcx
	movl	172(%rcx), %edx
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %esi
	movq	-32(%rbp), %rcx
	subl	156(%rcx), %esi
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %edi
	movq	-32(%rbp), %rcx
	cmpl	156(%rcx), %edi
	setg	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edi
	addl	%edi, %esi
	movl	%eax, -388(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -392(%rbp)        # 4-byte Spill
	cltd
	movl	-388(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	movl	-392(%rbp), %edi        # 4-byte Reload
	addl	%eax, %edi
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	movq	232(%rcx), %rcx
	movl	172(%rcx), %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	subl	240(%rcx), %eax
	subl	%eax, %edi
	subl	-44(%rbp), %edi
	movl	%edi, -44(%rbp)
.LBB133_13:                             # %if.end.48
	movq	-8(%rbp), %rax
	cmpl	$10, 2208(%rax)
	je	.LBB133_85
# BB#14:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$9, 2208(%rax)
	je	.LBB133_85
# BB#15:                                # %if.then.54
	movq	-8(%rbp), %rax
	movl	$1, 2364(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 2336(%rax)
	jl	.LBB133_17
# BB#16:                                # %if.then.57
	movq	-8(%rbp), %rax
	movl	2336(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	2340(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
	movq	-8(%rbp), %rax
	movl	2344(%rax), %ecx
	movl	%ecx, -44(%rbp)
	jmp	.LBB133_18
.LBB133_17:                             # %if.else
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	addl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-32(%rbp), %rax
	movl	172(%rax), %ecx
	subl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
.LBB133_18:                             # %if.end.66
	leaq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movl	2208(%rax), %edi
	movq	-32(%rbp), %rsi
	callq	get_char_glyph_code
	testb	$1, %al
	jne	.LBB133_19
	jmp	.LBB133_24
.LBB133_19:                             # %if.then.69
	leaq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdi
	callq	get_per_char_metric
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movswl	4(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB133_23
# BB#20:                                # %land.lhs.true.74
	movq	-40(%rbp), %rax
	movswl	2(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB133_23
# BB#21:                                # %land.lhs.true.78
	movq	-40(%rbp), %rax
	movswl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB133_23
# BB#22:                                # %if.then.82
	movq	$0, -40(%rbp)
.LBB133_23:                             # %if.end.83
	jmp	.LBB133_24
.LBB133_24:                             # %if.end.84
	cmpq	$0, -40(%rbp)
	je	.LBB133_35
# BB#25:                                # %if.then.86
	movq	-40(%rbp), %rax
	movswl	6(%rax), %ecx
	addl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2388(%rax)
	movq	-40(%rbp), %rax
	movswl	8(%rax), %ecx
	subl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-40(%rbp), %rax
	movswl	4(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2368(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 2336(%rax)
	jge	.LBB133_34
# BB#26:                                # %if.then.98
	movq	-32(%rbp), %rax
	cmpl	$0, 152(%rax)
	jle	.LBB133_33
# BB#27:                                # %land.lhs.true.101
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	movq	-32(%rbp), %rax
	addl	172(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	$3, 152(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_33
# BB#28:                                # %if.then.108
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	2392(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 2372(%rax)
	jge	.LBB133_30
# BB#29:                                # %if.then.116
	movq	-8(%rbp), %rax
	movl	$0, 2372(%rax)
.LBB133_30:                             # %if.end.118
	movq	-8(%rbp), %rax
	cmpl	$0, 2376(%rax)
	jge	.LBB133_32
# BB#31:                                # %if.then.122
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
.LBB133_32:                             # %if.end.124
	jmp	.LBB133_33
.LBB133_33:                             # %if.end.125
	jmp	.LBB133_34
.LBB133_34:                             # %if.end.126
	jmp	.LBB133_36
.LBB133_35:                             # %if.else.127
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-129, %cx
	orw	$128, %cx
	movw	%cx, 2112(%rax)
	movq	-8(%rbp), %rax
	movl	2372(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2388(%rax)
	movq	-8(%rbp), %rax
	movl	2376(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2392(%rax)
	movq	-32(%rbp), %rax
	movl	160(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2368(%rax)
.LBB133_36:                             # %if.end.136
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$10, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_51
# BB#37:                                # %if.then.139
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2384(%rax), %ecx
	jle	.LBB133_39
# BB#38:                                # %if.then.143
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %ecx
	movl	%ecx, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
.LBB133_39:                             # %if.end.151
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2380(%rax), %ecx
	jle	.LBB133_44
# BB#40:                                # %if.then.155
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2376(%rax), %edx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %edx
	movq	-8(%rbp), %rax
	subl	2380(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB133_42
# BB#41:                                # %cond.true.164
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -396(%rbp)        # 4-byte Spill
	jmp	.LBB133_43
.LBB133_42:                             # %cond.false.166
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2380(%rax), %ecx
	movl	%ecx, -396(%rbp)        # 4-byte Spill
.LBB133_43:                             # %cond.end.172
	movl	-396(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2376(%rcx)
	movq	-8(%rbp), %rcx
	movl	2380(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2372(%rcx)
.LBB133_44:                             # %if.end.177
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2372(%rax), %ecx
	jge	.LBB133_46
# BB#45:                                # %cond.true.182
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movl	%ecx, -400(%rbp)        # 4-byte Spill
	jmp	.LBB133_47
.LBB133_46:                             # %cond.false.184
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movl	%ecx, -400(%rbp)        # 4-byte Spill
.LBB133_47:                             # %cond.end.186
	movl	-400(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2388(%rcx)
	movq	-8(%rbp), %rcx
	movl	2392(%rcx), %eax
	movq	-8(%rbp), %rcx
	cmpl	2376(%rcx), %eax
	jge	.LBB133_49
# BB#48:                                # %cond.true.193
	movq	-8(%rbp), %rax
	movl	2392(%rax), %ecx
	movl	%ecx, -404(%rbp)        # 4-byte Spill
	jmp	.LBB133_50
.LBB133_49:                             # %cond.false.195
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movl	%ecx, -404(%rbp)        # 4-byte Spill
.LBB133_50:                             # %cond.end.197
	movl	-404(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2392(%rcx)
	movl	$0, -12(%rbp)
.LBB133_51:                             # %if.end.200
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	cmpl	$32, 2208(%rdx)
	movb	%cl, -405(%rbp)         # 1-byte Spill
	jne	.LBB133_53
# BB#52:                                # %land.rhs
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	2264(%rax), %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-416(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -405(%rbp)         # 1-byte Spill
.LBB133_53:                             # %land.end
	movb	-405(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -57(%rbp)
	testb	$1, -57(%rbp)
	je	.LBB133_55
# BB#54:                                # %if.then.209
	movq	-8(%rbp), %rax
	movq	2264(%rax), %rdi
	callq	XFLOATINT
	movq	-8(%rbp), %rax
	cvtsi2sdl	2368(%rax), %xmm1
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %ecx
	movl	%ecx, 2368(%rax)
.LBB133_55:                             # %if.end.216
	movq	-24(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB133_64
# BB#56:                                # %if.then.221
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movl	%ecx, -64(%rbp)
	cmpl	$0, -64(%rbp)
	jle	.LBB133_58
# BB#57:                                # %if.then.224
	movl	-64(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2372(%rcx), %eax
	movl	%eax, 2372(%rcx)
	movl	-64(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2376(%rcx), %eax
	movl	%eax, 2376(%rcx)
	jmp	.LBB133_59
.LBB133_58:                             # %if.else.229
	xorl	%eax, %eax
	subl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB133_59:                             # %if.end.231
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_61
# BB#60:                                # %if.then.236
	movl	-64(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB133_61:                             # %if.end.239
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_63
# BB#62:                                # %if.then.244
	movl	-64(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB133_63:                             # %if.end.247
	jmp	.LBB133_64
.LBB133_64:                             # %if.end.248
	movq	-24(%rbp), %rax
	movl	240(%rax), %ecx
	shrl	$5, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB133_66
# BB#65:                                # %if.then.253
	movq	globals+3216, %rax
	movq	-8(%rbp), %rcx
	movslq	2372(%rcx), %rdx
	addq	%rax, %rdx
	movl	%edx, %esi
	movl	%esi, 2372(%rcx)
.LBB133_66:                             # %if.end.258
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$10, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_72
# BB#67:                                # %if.then.264
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2380(%rax), %ecx
	jle	.LBB133_69
# BB#68:                                # %if.then.269
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
.LBB133_69:                             # %if.end.272
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2384(%rax), %ecx
	jle	.LBB133_71
# BB#70:                                # %if.then.277
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
.LBB133_71:                             # %if.end.280
	jmp	.LBB133_72
.LBB133_72:                             # %if.end.281
	movq	-8(%rbp), %rdi
	callq	take_vertical_position_into_account
	movq	-8(%rbp), %rdi
	cmpq	$0, 2352(%rdi)
	je	.LBB133_81
# BB#73:                                # %if.then.283
	testb	$1, -57(%rbp)
	je	.LBB133_75
# BB#74:                                # %if.then.285
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	168(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	movl	%ecx, %eax
	cltd
	movq	-424(%rbp), %rsi        # 8-byte Reload
	idivl	156(%rsi)
	movl	%eax, -68(%rbp)
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %r8
	movq	2288(%r8), %rsi
	movq	-8(%rbp), %r8
	movl	2368(%r8), %eax
	movq	-8(%rbp), %r8
	movl	2372(%r8), %ecx
	movq	-8(%rbp), %r8
	addl	2376(%r8), %ecx
	movl	-68(%rbp), %r8d
	movl	%eax, %edx
	callq	append_stretch_glyph
	jmp	.LBB133_76
.LBB133_75:                             # %if.else.298
	movq	-8(%rbp), %rdi
	callq	append_glyph
.LBB133_76:                             # %if.end.299
	cmpq	$0, -40(%rbp)
	je	.LBB133_80
# BB#77:                                # %land.lhs.true.301
	movq	-40(%rbp), %rax
	movswl	(%rax), %ecx
	cmpl	$0, %ecx
	jl	.LBB133_79
# BB#78:                                # %lor.lhs.false
	movq	-40(%rbp), %rax
	movswl	2(%rax), %ecx
	movq	-40(%rbp), %rax
	movswl	4(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_80
.LBB133_79:                             # %if.then.312
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rcx
	andq	$-262145, %rcx          # imm = 0xFFFFFFFFFFFBFFFF
	orq	$262144, %rcx           # imm = 0x40000
	movq	%rcx, 236(%rax)
.LBB133_80:                             # %if.end.317
	jmp	.LBB133_81
.LBB133_81:                             # %if.end.318
	testb	$1, -57(%rbp)
	jne	.LBB133_84
# BB#82:                                # %land.lhs.true.320
	movq	-8(%rbp), %rax
	cmpl	$0, 2368(%rax)
	jne	.LBB133_84
# BB#83:                                # %if.then.324
	movq	-8(%rbp), %rax
	movl	$1, 2368(%rax)
.LBB133_84:                             # %if.end.326
	jmp	.LBB133_157
.LBB133_85:                             # %if.else.327
	movq	-8(%rbp), %rax
	cmpl	$10, 2208(%rax)
	jne	.LBB133_131
# BB#86:                                # %if.then.331
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$621, %edi              # imm = 0x26D
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movl	$-1, 2336(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2368(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2364(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, -432(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-432(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	get_it_property
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB133_90
# BB#87:                                # %land.lhs.true.342
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB133_90
# BB#88:                                # %land.lhs.true.348
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-440(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB133_90
# BB#89:                                # %if.then.358
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
.LBB133_90:                             # %if.end.365
	movl	$1, %r8d
	movq	-8(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-44(%rbp), %ecx
	callq	calc_line_height_property
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 2336(%rax)
	jl	.LBB133_92
# BB#91:                                # %if.then.370
	movq	-8(%rbp), %rax
	movl	2336(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	2340(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
	movq	-8(%rbp), %rax
	movl	2344(%rax), %ecx
	movl	%ecx, -44(%rbp)
	jmp	.LBB133_99
.LBB133_92:                             # %if.else.376
	movq	-32(%rbp), %rax
	cmpl	$0, 152(%rax)
	jle	.LBB133_97
# BB#93:                                # %land.lhs.true.380
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	movq	-32(%rbp), %rax
	addl	172(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	$3, 152(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_97
# BB#94:                                # %if.then.388
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	152(%rcx), %edx
	addl	-44(%rbp), %edx
	subl	$1, %edx
	movq	-8(%rbp), %rcx
	movl	%edx, 2372(%rcx)
	subl	-44(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2376(%rcx)
	movq	-8(%rbp), %rcx
	cmpl	$0, 2376(%rcx)
	jge	.LBB133_96
# BB#95:                                # %if.then.399
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
.LBB133_96:                             # %if.end.401
	jmp	.LBB133_98
.LBB133_97:                             # %if.else.402
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	addl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-32(%rbp), %rax
	movl	172(%rax), %ecx
	subl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
.LBB133_98:                             # %if.end.409
	jmp	.LBB133_99
.LBB133_99:                             # %if.end.410
	movl	$901, %edi              # imm = 0x385
	movq	-80(%rbp), %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-448(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB133_114
# BB#100:                               # %if.then.414
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2384(%rax), %ecx
	jle	.LBB133_102
# BB#101:                               # %if.then.419
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %ecx
	movl	%ecx, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
.LBB133_102:                            # %if.end.427
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2380(%rax), %ecx
	jle	.LBB133_107
# BB#103:                               # %if.then.432
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2376(%rax), %edx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %edx
	movq	-8(%rbp), %rax
	subl	2380(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB133_105
# BB#104:                               # %cond.true.441
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -452(%rbp)        # 4-byte Spill
	jmp	.LBB133_106
.LBB133_105:                            # %cond.false.443
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	subl	2380(%rax), %ecx
	movl	%ecx, -452(%rbp)        # 4-byte Spill
.LBB133_106:                            # %cond.end.449
	movl	-452(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2376(%rcx)
	movq	-8(%rbp), %rcx
	movl	2380(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2372(%rcx)
.LBB133_107:                            # %if.end.454
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2372(%rax), %ecx
	jge	.LBB133_109
# BB#108:                               # %cond.true.459
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movl	%ecx, -456(%rbp)        # 4-byte Spill
	jmp	.LBB133_110
.LBB133_109:                            # %cond.false.461
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movl	%ecx, -456(%rbp)        # 4-byte Spill
.LBB133_110:                            # %cond.end.463
	movl	-456(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2388(%rcx)
	movq	-8(%rbp), %rcx
	movl	2392(%rcx), %eax
	movq	-8(%rbp), %rcx
	cmpl	2376(%rcx), %eax
	jge	.LBB133_112
# BB#111:                               # %cond.true.470
	movq	-8(%rbp), %rax
	movl	2392(%rax), %ecx
	movl	%ecx, -460(%rbp)        # 4-byte Spill
	jmp	.LBB133_113
.LBB133_112:                            # %cond.false.472
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movl	%ecx, -460(%rbp)        # 4-byte Spill
.LBB133_113:                            # %cond.end.474
	movl	-460(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2392(%rcx)
	movq	-8(%rbp), %rcx
	movw	2112(%rcx), %dx
	andw	$-1025, %dx             # imm = 0xFFFFFFFFFFFFFBFF
	orw	$1024, %dx              # imm = 0x400
	movw	%dx, 2112(%rcx)
	movl	$0, -12(%rbp)
	jmp	.LBB133_130
.LBB133_114:                            # %if.else.481
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2388(%rax)
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 2380(%rax)
	jg	.LBB133_116
# BB#115:                               # %lor.lhs.false.489
	movq	-8(%rbp), %rax
	cmpl	$0, 2384(%rax)
	jle	.LBB133_119
.LBB133_116:                            # %land.lhs.true.493
	movq	-24(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB133_119
# BB#117:                               # %land.lhs.true.499
	movq	-24(%rbp), %rax
	cmpl	$0, 236(%rax)
	jle	.LBB133_119
# BB#118:                               # %if.then.503
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %ecx
	movl	%ecx, 2372(%rax)
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, 2376(%rax)
.LBB133_119:                            # %if.end.510
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-472(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB133_122
# BB#120:                               # %land.lhs.true.514
	movq	-80(%rbp), %rax
	sarq	$2, %rax
	movq	-8(%rbp), %rcx
	movl	2372(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	2376(%rcx), %edx
	movslq	%edx, %rcx
	cmpq	%rcx, %rax
	jle	.LBB133_122
# BB#121:                               # %if.then.521
	movq	-80(%rbp), %rax
	sarq	$2, %rax
	movq	-8(%rbp), %rcx
	movslq	2376(%rcx), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2372(%rax)
.LBB133_122:                            # %if.end.528
	xorl	%edi, %edi
	movq	-88(%rbp), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-480(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB133_124
# BB#123:                               # %if.then.532
	xorl	%r8d, %r8d
	movq	-8(%rbp), %rdi
	movq	-88(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-44(%rbp), %ecx
	callq	calc_line_height_property
	movq	%rax, -96(%rbp)
	jmp	.LBB133_125
.LBB133_124:                            # %if.else.534
	movl	$623, %edi              # imm = 0x26F
	movq	-8(%rbp), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	get_it_property
	xorl	%r8d, %r8d
	movq	%rax, -96(%rbp)
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movl	-44(%rbp), %ecx
	callq	calc_line_height_property
	movq	%rax, -96(%rbp)
.LBB133_125:                            # %if.end.538
	movq	-96(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB133_129
# BB#126:                               # %if.then.544
	xorl	%edi, %edi
	movq	-96(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-496(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB133_128
# BB#127:                               # %if.then.550
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2392(%rax), %ecx
	movl	-12(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -12(%rbp)
.LBB133_128:                            # %if.end.555
	jmp	.LBB133_129
.LBB133_129:                            # %if.end.556
	jmp	.LBB133_130
.LBB133_130:                            # %if.end.557
	jmp	.LBB133_156
.LBB133_131:                            # %if.else.558
	movq	-32(%rbp), %rax
	cmpl	$0, 160(%rax)
	jle	.LBB133_154
# BB#132:                               # %if.then.562
	movq	-8(%rbp), %rax
	movswl	2274(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	160(%rax), %ecx
	movl	%ecx, -100(%rbp)
	movq	-8(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2408(%rax), %ecx
	movl	%ecx, -104(%rbp)
	movl	-104(%rbp), %ecx
	addl	$1, %ecx
	addl	-100(%rbp), %ecx
	subl	$1, %ecx
	movl	%ecx, %eax
	cltd
	idivl	-100(%rbp)
	imull	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-108(%rbp), %eax
	subl	-104(%rbp), %eax
	movq	-32(%rbp), %rsi
	cmpl	160(%rsi), %eax
	jge	.LBB133_134
# BB#133:                               # %if.then.578
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB133_134:                            # %if.end.580
	movl	-108(%rbp), %eax
	subl	-104(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movq	-8(%rbp), %rcx
	movl	$1, 2364(%rcx)
	movq	-32(%rbp), %rcx
	cmpl	$0, 152(%rcx)
	jle	.LBB133_150
# BB#135:                               # %land.lhs.true.587
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	movq	-32(%rbp), %rax
	addl	172(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	$3, 152(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_150
# BB#136:                               # %if.then.595
	movl	$32, %edi
	leaq	-16(%rbp), %rdx
	movq	-32(%rbp), %rsi
	callq	get_char_glyph_code
	testb	$1, %al
	jne	.LBB133_137
	jmp	.LBB133_142
.LBB133_137:                            # %if.then.597
	leaq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdi
	callq	get_per_char_metric
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movswl	4(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB133_141
# BB#138:                               # %land.lhs.true.603
	movq	-40(%rbp), %rax
	movswl	2(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB133_141
# BB#139:                               # %land.lhs.true.608
	movq	-40(%rbp), %rax
	movswl	(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB133_141
# BB#140:                               # %if.then.613
	movq	$0, -40(%rbp)
.LBB133_141:                            # %if.end.614
	jmp	.LBB133_142
.LBB133_142:                            # %if.end.615
	cmpq	$0, -40(%rbp)
	je	.LBB133_144
# BB#143:                               # %if.then.617
	movq	-40(%rbp), %rax
	movswl	6(%rax), %ecx
	addl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-40(%rbp), %rax
	movswl	8(%rax), %ecx
	subl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
	jmp	.LBB133_145
.LBB133_144:                            # %if.else.626
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	152(%rcx), %edx
	addl	-44(%rbp), %edx
	subl	$1, %edx
	movq	-8(%rbp), %rcx
	movl	%edx, 2372(%rcx)
	subl	-44(%rbp), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2376(%rcx)
.LBB133_145:                            # %if.end.634
	movq	-8(%rbp), %rax
	cmpl	$0, 2372(%rax)
	jge	.LBB133_147
# BB#146:                               # %if.then.638
	movq	-8(%rbp), %rax
	movl	$0, 2372(%rax)
.LBB133_147:                            # %if.end.640
	movq	-8(%rbp), %rax
	cmpl	$0, 2376(%rax)
	jge	.LBB133_149
# BB#148:                               # %if.then.644
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
.LBB133_149:                            # %if.end.646
	jmp	.LBB133_151
.LBB133_150:                            # %if.else.647
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	addl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-32(%rbp), %rax
	movl	172(%rax), %ecx
	subl	-44(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
.LBB133_151:                            # %if.end.654
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2388(%rax)
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB133_153
# BB#152:                               # %if.then.661
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	2368(%rax), %edx
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	2372(%rax), %r8d
	callq	append_stretch_glyph
.LBB133_153:                            # %if.end.668
	jmp	.LBB133_155
.LBB133_154:                            # %if.else.669
	movq	-8(%rbp), %rax
	movl	$0, 2368(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2364(%rax)
.LBB133_155:                            # %if.end.672
	jmp	.LBB133_156
.LBB133_156:                            # %if.end.673
	jmp	.LBB133_157
.LBB133_157:                            # %if.end.674
	movq	-32(%rbp), %rax
	cmpl	$0, 152(%rax)
	jle	.LBB133_166
# BB#158:                               # %land.lhs.true.678
	movq	-32(%rbp), %rax
	movl	168(%rax), %ecx
	movq	-32(%rbp), %rax
	addl	172(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	$3, 152(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_166
# BB#159:                               # %if.then.686
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %rdx
	leaq	-116(%rbp), %rcx
	movq	-32(%rbp), %rdi
	callq	normal_char_ascent_descent
	movq	-8(%rbp), %rcx
	movl	2380(%rcx), %esi
	cmpl	-112(%rbp), %esi
	jle	.LBB133_161
# BB#160:                               # %cond.true.690
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -500(%rbp)        # 4-byte Spill
	jmp	.LBB133_162
.LBB133_161:                            # %cond.false.692
	movl	-112(%rbp), %eax
	movl	%eax, -500(%rbp)        # 4-byte Spill
.LBB133_162:                            # %cond.end.693
	movl	-500(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2380(%rcx)
	movq	-8(%rbp), %rcx
	movl	2384(%rcx), %eax
	cmpl	-116(%rbp), %eax
	jle	.LBB133_164
# BB#163:                               # %cond.true.699
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -504(%rbp)        # 4-byte Spill
	jmp	.LBB133_165
.LBB133_164:                            # %cond.false.701
	movl	-116(%rbp), %eax
	movl	%eax, -504(%rbp)        # 4-byte Spill
.LBB133_165:                            # %cond.end.702
	movl	-504(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2384(%rcx)
.LBB133_166:                            # %if.end.705
	jmp	.LBB133_377
.LBB133_167:                            # %if.else.706
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB133_335
# BB#168:                               # %land.lhs.true.710
	movq	-8(%rbp), %rax
	cmpl	$0, 2152(%rax)
	jge	.LBB133_335
# BB#169:                               # %if.then.713
	movb	$1, %al
	testb	$1, %al
	jne	.LBB133_170
	jmp	.LBB133_171
.LBB133_170:                            # %cond.true.715
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB133_172
	jmp	.LBB133_173
.LBB133_171:                            # %cond.false.724
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB133_173
.LBB133_172:                            # %cond.true.735
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	jmp	.LBB133_174
.LBB133_173:                            # %cond.false.742
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	jmp	.LBB133_174
.LBB133_174:                            # %cond.end.743
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	%rax, -128(%rbp)
	movq	-8(%rbp), %rax
	movq	2144(%rax), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	(%rax), %edx
	movl	%edx, -148(%rbp)
	movq	-128(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 2364(%rax)
	movq	-144(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB133_176
# BB#175:                               # %lor.lhs.false.755
	movq	-144(%rbp), %rax
	movq	32(%rax), %rax
	movq	-160(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB133_312
.LBB133_176:                            # %if.then.759
	movq	-144(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -148(%rbp)
.LBB133_177:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -148(%rbp)
	jle	.LBB133_185
# BB#178:                               # %for.body
                                        #   in Loop: Header=BB133_177 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$3, 20(%rax)
	jne	.LBB133_180
# BB#179:                               # %cond.true.774
                                        #   in Loop: Header=BB133_177 Depth=1
	movl	-148(%rbp), %eax
	subl	$1, %eax
	shll	$1, %eax
	movl	%eax, -516(%rbp)        # 4-byte Spill
	jmp	.LBB133_181
.LBB133_180:                            # %cond.false.777
                                        #   in Loop: Header=BB133_177 Depth=1
	movl	-148(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -516(%rbp)        # 4-byte Spill
.LBB133_181:                            # %cond.end.779
                                        #   in Loop: Header=BB133_177 Depth=1
	movl	-516(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	24(%rdx), %rdx
	shlq	$1, %rdx
	movq	composition_hash_table, %rdi
	movq	%rcx, -528(%rbp)        # 8-byte Spill
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	72(%rax), %rdi
	callq	XVECTOR
	movq	-536(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	callq	XVECTOR
	movq	-528(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movl	%esi, -216(%rbp)
	cmpl	$9, %esi
	je	.LBB133_183
# BB#182:                               # %if.then.793
	jmp	.LBB133_185
.LBB133_183:                            # %if.end.794
                                        #   in Loop: Header=BB133_177 Depth=1
	jmp	.LBB133_184
.LBB133_184:                            # %for.inc
                                        #   in Loop: Header=BB133_177 Depth=1
	movl	-148(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB133_177
.LBB133_185:                            # %for.end
	movl	-148(%rbp), %eax
	movq	-144(%rbp), %rcx
	cmpl	(%rcx), %eax
	setl	%dl
	andb	$1, %dl
	movb	%dl, -241(%rbp)
	movl	$0, -200(%rbp)
.LBB133_186:                            # %for.cond.799
                                        # =>This Inner Loop Header: Depth=1
	movl	-200(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB133_194
# BB#187:                               # %for.body.802
                                        #   in Loop: Header=BB133_186 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$3, 20(%rax)
	jne	.LBB133_189
# BB#188:                               # %cond.true.806
                                        #   in Loop: Header=BB133_186 Depth=1
	movl	-200(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -540(%rbp)        # 4-byte Spill
	jmp	.LBB133_190
.LBB133_189:                            # %cond.false.808
                                        #   in Loop: Header=BB133_186 Depth=1
	movl	-200(%rbp), %eax
	movl	%eax, -540(%rbp)        # 4-byte Spill
.LBB133_190:                            # %cond.end.809
                                        #   in Loop: Header=BB133_186 Depth=1
	movl	-540(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	24(%rdx), %rdx
	shlq	$1, %rdx
	movq	composition_hash_table, %rdi
	movq	%rcx, -552(%rbp)        # 8-byte Spill
	movq	%rdx, -560(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	72(%rax), %rdi
	callq	XVECTOR
	movq	-560(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	callq	XVECTOR
	movq	-552(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movl	%esi, -216(%rbp)
	cmpl	$9, %esi
	je	.LBB133_192
# BB#191:                               # %if.then.826
	jmp	.LBB133_194
.LBB133_192:                            # %if.end.827
                                        #   in Loop: Header=BB133_186 Depth=1
	movl	-200(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	40(%rdx), %rdx
	movw	$0, (%rdx,%rcx,2)
	movl	-200(%rbp), %eax
	shll	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	40(%rdx), %rdx
	movw	$0, (%rdx,%rcx,2)
# BB#193:                               # %for.inc.836
                                        #   in Loop: Header=BB133_186 Depth=1
	movl	-200(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -200(%rbp)
	jmp	.LBB133_186
.LBB133_194:                            # %for.end.837
	cmpl	$0, -200(%rbp)
	setg	%al
	andb	$1, %al
	movb	%al, -242(%rbp)
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB133_195
	jmp	.LBB133_196
.LBB133_195:                            # %cond.true.843
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	jmp	.LBB133_197
.LBB133_196:                            # %cond.false.844
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
.LBB133_197:                            # %cond.end.848
	movq	-568(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)
	cmpq	$0, -160(%rbp)
	sete	%cl
	andb	$1, %cl
	movb	%cl, -243(%rbp)
	testb	$1, -243(%rbp)
	je	.LBB133_199
# BB#198:                               # %if.then.854
	movq	-128(%rbp), %rax
	movq	264(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -160(%rbp)
.LBB133_199:                            # %if.end.856
	movq	-160(%rbp), %rax
	movl	188(%rax), %ecx
	movl	%ecx, -132(%rbp)
	movq	-160(%rbp), %rax
	testb	$1, 184(%rax)
	je	.LBB133_201
# BB#200:                               # %if.then.860
	movl	$2, %eax
	movq	-160(%rbp), %rcx
	movl	172(%rcx), %edx
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %esi
	movq	-160(%rbp), %rcx
	subl	156(%rcx), %esi
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %edi
	movq	-160(%rbp), %rcx
	cmpl	156(%rcx), %edi
	setg	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edi
	addl	%edi, %esi
	movl	%eax, -572(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -576(%rbp)        # 4-byte Spill
	cltd
	movl	-572(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	movl	-576(%rbp), %edi        # 4-byte Reload
	addl	%eax, %edi
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	movq	232(%rcx), %rcx
	movl	172(%rcx), %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	subl	240(%rcx), %eax
	subl	%eax, %edi
	subl	-132(%rbp), %edi
	movl	%edi, -132(%rbp)
.LBB133_201:                            # %if.end.886
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	leaq	-164(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	movq	-160(%rbp), %rdi
	callq	normal_char_ascent_descent
	movl	-132(%rbp), %esi
	addl	-164(%rbp), %esi
	movl	%esi, -164(%rbp)
	movl	-132(%rbp), %esi
	movl	-168(%rbp), %eax
	subl	%esi, %eax
	movl	%eax, -168(%rbp)
	movl	-164(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -172(%rbp)
	movq	-160(%rbp), %rcx
	movq	-144(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	movq	$0, -232(%rbp)
	testb	$1, -243(%rbp)
	jne	.LBB133_203
# BB#202:                               # %if.then.892
	leaq	-224(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movl	-216(%rbp), %esi
	movq	-8(%rbp), %rax
	movl	2108(%rax), %edx
	callq	get_char_face_and_encoding
	leaq	-224(%rbp), %rsi
	movq	-160(%rbp), %rdi
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	get_per_char_metric
	movq	%rax, -232(%rbp)
.LBB133_203:                            # %if.end.897
	cmpq	$0, -232(%rbp)
	je	.LBB133_208
# BB#204:                               # %if.then.899
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	jle	.LBB133_206
# BB#205:                               # %cond.true.903
	movq	-232(%rbp), %rax
	movswl	4(%rax), %ecx
	movl	%ecx, -588(%rbp)        # 4-byte Spill
	jmp	.LBB133_207
.LBB133_206:                            # %cond.false.906
	xorl	%eax, %eax
	movl	%eax, -588(%rbp)        # 4-byte Spill
	jmp	.LBB133_207
.LBB133_207:                            # %cond.end.907
	movl	-588(%rbp), %eax        # 4-byte Reload
	movl	%eax, -204(%rbp)
	movq	-232(%rbp), %rcx
	movswl	6(%rcx), %eax
	movl	%eax, -208(%rbp)
	movq	-232(%rbp), %rcx
	movswl	8(%rcx), %eax
	movl	%eax, -212(%rbp)
	movq	-232(%rbp), %rcx
	movswl	(%rcx), %eax
	movl	%eax, -192(%rbp)
	movq	-232(%rbp), %rcx
	movswl	2(%rcx), %eax
	movl	%eax, -196(%rbp)
	jmp	.LBB133_212
.LBB133_208:                            # %if.else.917
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	jle	.LBB133_210
# BB#209:                               # %cond.true.921
	movq	-160(%rbp), %rax
	movl	160(%rax), %ecx
	movl	%ecx, -592(%rbp)        # 4-byte Spill
	jmp	.LBB133_211
.LBB133_210:                            # %cond.false.923
	xorl	%eax, %eax
	movl	%eax, -592(%rbp)        # 4-byte Spill
	jmp	.LBB133_211
.LBB133_211:                            # %cond.end.924
	movl	-592(%rbp), %eax        # 4-byte Reload
	movl	%eax, -204(%rbp)
	movq	-160(%rbp), %rcx
	movl	168(%rcx), %eax
	movl	%eax, -208(%rbp)
	movq	-160(%rbp), %rcx
	movl	172(%rcx), %eax
	movl	%eax, -212(%rbp)
	movl	$0, -192(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB133_212:                            # %if.end.928
	xorl	%eax, %eax
	movl	-204(%rbp), %ecx
	movl	%ecx, -180(%rbp)
	movl	$0, -176(%rbp)
	subl	-212(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	-208(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -188(%rbp)
	testb	$1, -243(%rbp)
	jne	.LBB133_217
# BB#213:                               # %land.lhs.true.933
	movq	-160(%rbp), %rax
	cmpl	$0, 196(%rax)
	je	.LBB133_217
# BB#214:                               # %land.lhs.true.935
	movq	globals+2544, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB133_215
	jmp	.LBB133_217
.LBB133_215:                            # %land.lhs.true.938
	movq	globals+2544, %rdi
	movq	-8(%rbp), %rax
	movslq	2208(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rsi
	callq	Faref
	xorl	%edi, %edi
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-600(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB133_217
# BB#216:                               # %if.then.946
	movq	-160(%rbp), %rax
	movl	196(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -188(%rbp)
.LBB133_217:                            # %if.end.949
	movl	-200(%rbp), %eax
	shll	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	40(%rdx), %rdx
	movw	$0, (%rdx,%rcx,2)
	movl	-132(%rbp), %eax
	movw	%ax, %si
	movl	-200(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	40(%rdx), %rdx
	movw	%si, (%rdx,%rcx,2)
	movl	-192(%rbp), %eax
	movw	%ax, %si
	movq	-144(%rbp), %rcx
	movw	%si, 10(%rcx)
	movl	-196(%rbp), %eax
	movw	%ax, %si
	movq	-144(%rbp), %rcx
	movw	%si, 12(%rcx)
	movl	-200(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -200(%rbp)
.LBB133_218:                            # %for.cond.965
                                        # =>This Inner Loop Header: Depth=1
	movl	-200(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB133_291
# BB#219:                               # %for.body.968
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$3, 20(%rax)
	jne	.LBB133_221
# BB#220:                               # %cond.true.973
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-200(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -604(%rbp)        # 4-byte Spill
	jmp	.LBB133_222
.LBB133_221:                            # %cond.false.975
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-200(%rbp), %eax
	movl	%eax, -604(%rbp)        # 4-byte Spill
.LBB133_222:                            # %cond.end.976
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-604(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	24(%rdx), %rdx
	shlq	$1, %rdx
	movq	composition_hash_table, %rdi
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%rdx, -624(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	72(%rax), %rdi
	callq	XVECTOR
	movq	-624(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	callq	XVECTOR
	movq	-616(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movl	%esi, -264(%rbp)
	cmpl	$9, -264(%rbp)
	jne	.LBB133_224
# BB#223:                               # %if.then.994
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$32, -264(%rbp)
.LBB133_224:                            # %if.end.995
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-128(%rbp), %rsi
	movl	-264(%rbp), %edx
	movq	-240(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	632(%rax), %r8
	callq	face_for_char
	movb	$1, %r9b
	movl	%eax, -268(%rbp)
	testb	$1, %r9b
	jne	.LBB133_225
	jmp	.LBB133_226
.LBB133_225:                            # %cond.true.999
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-268(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB133_227
	jmp	.LBB133_228
.LBB133_226:                            # %cond.false.1007
                                        #   in Loop: Header=BB133_218 Depth=1
	movslq	-268(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB133_228
.LBB133_227:                            # %cond.true.1017
                                        #   in Loop: Header=BB133_218 Depth=1
	movslq	-268(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	jmp	.LBB133_229
.LBB133_228:                            # %cond.false.1023
                                        #   in Loop: Header=BB133_218 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	jmp	.LBB133_229
.LBB133_229:                            # %cond.end.1024
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -160(%rbp)
	cmpq	$0, -160(%rbp)
	jne	.LBB133_231
# BB#230:                               # %if.then.1029
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	$0, -232(%rbp)
	jmp	.LBB133_232
.LBB133_231:                            # %if.else.1030
                                        #   in Loop: Header=BB133_218 Depth=1
	leaq	-224(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movl	-264(%rbp), %esi
	movl	-268(%rbp), %edx
	callq	get_char_face_and_encoding
	leaq	-224(%rbp), %rsi
	movq	-160(%rbp), %rdi
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	get_per_char_metric
	movq	%rax, -232(%rbp)
.LBB133_232:                            # %if.end.1034
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpq	$0, -232(%rbp)
	jne	.LBB133_234
# BB#233:                               # %if.then.1036
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-200(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	40(%rdx), %rdx
	movw	$0, (%rdx,%rcx,2)
	movl	-200(%rbp), %eax
	shll	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	40(%rdx), %rdx
	movw	$0, (%rdx,%rcx,2)
	jmp	.LBB133_289
.LBB133_234:                            # %if.else.1046
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	-232(%rbp), %rax
	movswl	4(%rax), %ecx
	movl	%ecx, -204(%rbp)
	movq	-232(%rbp), %rax
	movswl	6(%rax), %ecx
	movl	%ecx, -208(%rbp)
	movq	-232(%rbp), %rax
	movswl	8(%rax), %ecx
	movl	%ecx, -212(%rbp)
	movq	-232(%rbp), %rax
	movswl	(%rax), %ecx
	movl	%ecx, -192(%rbp)
	movq	-232(%rbp), %rax
	movswl	2(%rax), %ecx
	movl	%ecx, -196(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$3, 20(%rax)
	je	.LBB133_245
# BB#235:                               # %if.then.1060
                                        #   in Loop: Header=BB133_218 Depth=1
	xorl	%eax, %eax
	movl	$2, %ecx
	movl	-176(%rbp), %edx
	addl	-180(%rbp), %edx
	subl	-204(%rbp), %edx
	movl	%eax, -644(%rbp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%eax, -248(%rbp)
	movl	-644(%rbp), %eax        # 4-byte Reload
	subl	-212(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -256(%rbp)
	movq	-160(%rbp), %rsi
	cmpl	$0, 192(%rsi)
	je	.LBB133_244
# BB#236:                               # %land.lhs.true.1067
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	globals+1032, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB133_237
	jmp	.LBB133_238
.LBB133_237:                            # %lor.lhs.false.1069
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	globals+1032, %rdi
	movslq	-264(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rsi
	callq	Faref
	xorl	%edi, %edi
	movq	%rax, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-656(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB133_244
.LBB133_238:                            # %if.then.1077
                                        #   in Loop: Header=BB133_218 Depth=1
	xorl	%eax, %eax
	subl	-212(%rbp), %eax
	movq	-160(%rbp), %rcx
	cmpl	192(%rcx), %eax
	jl	.LBB133_240
# BB#239:                               # %if.then.1082
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
	jmp	.LBB133_243
.LBB133_240:                            # %if.else.1084
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpl	$0, -208(%rbp)
	jg	.LBB133_242
# BB#241:                               # %if.then.1087
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-184(%rbp), %eax
	subl	$1, %eax
	subl	-208(%rbp), %eax
	subl	-212(%rbp), %eax
	movl	%eax, -256(%rbp)
.LBB133_242:                            # %if.end.1091
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_243
.LBB133_243:                            # %if.end.1092
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_244
.LBB133_244:                            # %if.end.1093
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_274
.LBB133_245:                            # %if.else.1094
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-200(%rbp), %eax
	shll	$1, %eax
	subl	$1, %eax
	movslq	%eax, %rcx
	movq	-144(%rbp), %rdx
	movq	24(%rdx), %rdx
	shlq	$1, %rdx
	movq	composition_hash_table, %rdi
	movq	%rcx, -664(%rbp)        # 8-byte Spill
	movq	%rdx, -672(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	72(%rax), %rdi
	callq	XVECTOR
	movq	-672(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	callq	XVECTOR
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	8(%rax,%rcx,8), %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movl	%esi, -284(%rbp)
# BB#246:                               # %do.body
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-284(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -312(%rbp)
	movl	-284(%rbp), %eax
	sarl	$8, %eax
	andl	$255, %eax
	movl	%eax, -316(%rbp)
# BB#247:                               # %do.body.1113
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$12, %eax
	movl	-284(%rbp), %ecx
	andl	$255, %ecx
	movl	%ecx, -284(%rbp)
	movl	-284(%rbp), %ecx
	movl	%eax, -676(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-676(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -288(%rbp)
	cmpl	$12, -288(%rbp)
	jle	.LBB133_249
# BB#248:                               # %if.then.1118
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$11, -288(%rbp)
.LBB133_249:                            # %if.end.1119
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$12, %eax
	movl	-284(%rbp), %ecx
	movl	%eax, -680(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-680(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%edx, -292(%rbp)
# BB#250:                               # %do.end
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_251
.LBB133_251:                            # %do.end.1120
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$3, %eax
	movl	-288(%rbp), %ecx
	movl	%eax, -684(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-684(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%edx, -296(%rbp)
	movl	-292(%rbp), %edx
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%edx, -304(%rbp)
	movl	-288(%rbp), %edx
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%eax, -300(%rbp)
	movl	-292(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -308(%rbp)
	cmpl	$0, -312(%rbp)
	je	.LBB133_253
# BB#252:                               # %if.then.1126
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$256, %eax              # imm = 0x100
	movl	-172(%rbp), %ecx
	movl	-312(%rbp), %edx
	subl	$128, %edx
	imull	%edx, %ecx
	movl	%eax, -688(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-688(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -312(%rbp)
.LBB133_253:                            # %if.end.1130
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpl	$0, -316(%rbp)
	je	.LBB133_255
# BB#254:                               # %if.then.1132
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$256, %eax              # imm = 0x100
	movl	-172(%rbp), %ecx
	movl	-316(%rbp), %edx
	subl	$128, %edx
	imull	%edx, %ecx
	movl	%eax, -692(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-692(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -316(%rbp)
.LBB133_255:                            # %if.end.1136
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$2, %eax
	movl	-176(%rbp), %ecx
	movl	-296(%rbp), %edx
	movl	-180(%rbp), %esi
	subl	-176(%rbp), %esi
	imull	%esi, %edx
	movl	%eax, -696(%rbp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-696(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	addl	%eax, %ecx
	movl	-304(%rbp), %eax
	imull	-204(%rbp), %eax
	cltd
	idivl	%esi
	subl	%eax, %ecx
	addl	-312(%rbp), %ecx
	movl	%ecx, -248(%rbp)
	cmpl	$0, -300(%rbp)
	jne	.LBB133_257
# BB#256:                               # %cond.true.1147
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-188(%rbp), %eax
	movl	%eax, -700(%rbp)        # 4-byte Spill
	jmp	.LBB133_264
.LBB133_257:                            # %cond.false.1148
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpl	$1, -300(%rbp)
	jne	.LBB133_259
# BB#258:                               # %cond.true.1151
                                        #   in Loop: Header=BB133_218 Depth=1
	xorl	%eax, %eax
	movl	%eax, -704(%rbp)        # 4-byte Spill
	jmp	.LBB133_263
.LBB133_259:                            # %cond.false.1152
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpl	$2, -300(%rbp)
	jne	.LBB133_261
# BB#260:                               # %cond.true.1155
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-184(%rbp), %eax
	movl	%eax, -708(%rbp)        # 4-byte Spill
	jmp	.LBB133_262
.LBB133_261:                            # %cond.false.1156
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$2, %eax
	movl	-188(%rbp), %ecx
	addl	-184(%rbp), %ecx
	movl	%eax, -712(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-712(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -708(%rbp)        # 4-byte Spill
.LBB133_262:                            # %cond.end.1159
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-708(%rbp), %eax        # 4-byte Reload
	movl	%eax, -704(%rbp)        # 4-byte Spill
.LBB133_263:                            # %cond.end.1161
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-704(%rbp), %eax        # 4-byte Reload
	movl	%eax, -700(%rbp)        # 4-byte Spill
.LBB133_264:                            # %cond.end.1163
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-700(%rbp), %eax        # 4-byte Reload
	cmpl	$0, -308(%rbp)
	movl	%eax, -716(%rbp)        # 4-byte Spill
	jne	.LBB133_266
# BB#265:                               # %cond.true.1167
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-208(%rbp), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -720(%rbp)        # 4-byte Spill
	jmp	.LBB133_273
.LBB133_266:                            # %cond.false.1169
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpl	$1, -308(%rbp)
	jne	.LBB133_268
# BB#267:                               # %cond.true.1172
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-212(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -724(%rbp)        # 4-byte Spill
	jmp	.LBB133_272
.LBB133_268:                            # %cond.false.1174
                                        #   in Loop: Header=BB133_218 Depth=1
	cmpl	$2, -308(%rbp)
	jne	.LBB133_270
# BB#269:                               # %cond.true.1177
                                        #   in Loop: Header=BB133_218 Depth=1
	xorl	%eax, %eax
	movl	%eax, -728(%rbp)        # 4-byte Spill
	jmp	.LBB133_271
.LBB133_270:                            # %cond.false.1178
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	$2, %eax
	movl	-208(%rbp), %ecx
	addl	-212(%rbp), %ecx
	movl	%eax, -732(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-732(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -728(%rbp)        # 4-byte Spill
.LBB133_271:                            # %cond.end.1181
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-728(%rbp), %eax        # 4-byte Reload
	movl	%eax, -724(%rbp)        # 4-byte Spill
.LBB133_272:                            # %cond.end.1183
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-724(%rbp), %eax        # 4-byte Reload
	movl	%eax, -720(%rbp)        # 4-byte Spill
.LBB133_273:                            # %cond.end.1185
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-720(%rbp), %eax        # 4-byte Reload
	movl	-716(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	addl	-316(%rbp), %ecx
	movl	%ecx, -256(%rbp)
.LBB133_274:                            # %if.end.1189
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-248(%rbp), %eax
	movw	%ax, %cx
	movl	-200(%rbp), %eax
	shll	$1, %eax
	movslq	%eax, %rdx
	movq	-144(%rbp), %rsi
	movq	40(%rsi), %rsi
	movw	%cx, (%rsi,%rdx,2)
	movl	-256(%rbp), %eax
	addl	-212(%rbp), %eax
	movw	%ax, %cx
	movl	-200(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-144(%rbp), %rsi
	movq	40(%rsi), %rsi
	movw	%cx, (%rsi,%rdx,2)
	cmpl	$0, -204(%rbp)
	jle	.LBB133_280
# BB#275:                               # %if.then.1204
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-248(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-248(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB133_277
# BB#276:                               # %if.then.1208
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-248(%rbp), %eax
	movl	%eax, -176(%rbp)
.LBB133_277:                            # %if.end.1209
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-252(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jle	.LBB133_279
# BB#278:                               # %if.then.1212
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-252(%rbp), %eax
	movl	%eax, -180(%rbp)
.LBB133_279:                            # %if.end.1213
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_280
.LBB133_280:                            # %if.end.1214
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-256(%rbp), %eax
	addl	-212(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -260(%rbp)
	movl	-260(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jle	.LBB133_282
# BB#281:                               # %if.then.1219
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-260(%rbp), %eax
	movl	%eax, -188(%rbp)
.LBB133_282:                            # %if.end.1220
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-256(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB133_284
# BB#283:                               # %if.then.1223
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-256(%rbp), %eax
	movl	%eax, -184(%rbp)
.LBB133_284:                            # %if.end.1224
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	-144(%rbp), %rax
	movswl	10(%rax), %ecx
	movl	-248(%rbp), %edx
	addl	-192(%rbp), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_286
# BB#285:                               # %if.then.1230
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-248(%rbp), %eax
	addl	-192(%rbp), %eax
	movw	%ax, %cx
	movq	-144(%rbp), %rdx
	movw	%cx, 10(%rdx)
.LBB133_286:                            # %if.end.1234
                                        #   in Loop: Header=BB133_218 Depth=1
	movq	-144(%rbp), %rax
	movswl	12(%rax), %ecx
	movl	-248(%rbp), %edx
	addl	-196(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB133_288
# BB#287:                               # %if.then.1240
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-248(%rbp), %eax
	addl	-196(%rbp), %eax
	movw	%ax, %cx
	movq	-144(%rbp), %rdx
	movw	%cx, 12(%rdx)
.LBB133_288:                            # %if.end.1244
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_289
.LBB133_289:                            # %if.end.1245
                                        #   in Loop: Header=BB133_218 Depth=1
	jmp	.LBB133_290
.LBB133_290:                            # %for.inc.1246
                                        #   in Loop: Header=BB133_218 Depth=1
	movl	-200(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -200(%rbp)
	jmp	.LBB133_218
.LBB133_291:                            # %for.end.1248
	cmpl	$0, -176(%rbp)
	jge	.LBB133_297
# BB#292:                               # %if.then.1251
	movl	$0, -200(%rbp)
.LBB133_293:                            # %for.cond.1252
                                        # =>This Inner Loop Header: Depth=1
	movl	-200(%rbp), %eax
	movq	-144(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB133_296
# BB#294:                               # %for.body.1256
                                        #   in Loop: Header=BB133_293 Depth=1
	movl	-176(%rbp), %eax
	movl	-200(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rdx
	movq	-144(%rbp), %rsi
	movq	40(%rsi), %rsi
	movswl	(%rsi,%rdx,2), %ecx
	subl	%eax, %ecx
	movw	%cx, %di
	movw	%di, (%rsi,%rdx,2)
# BB#295:                               # %for.inc.1264
                                        #   in Loop: Header=BB133_293 Depth=1
	movl	-200(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -200(%rbp)
	jmp	.LBB133_293
.LBB133_296:                            # %for.end.1266
	movl	-176(%rbp), %eax
	movl	-180(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -180(%rbp)
	movl	-176(%rbp), %eax
	movq	-144(%rbp), %rdx
	movswl	10(%rdx), %ecx
	subl	%eax, %ecx
	movw	%cx, %si
	movw	%si, 10(%rdx)
	movl	-176(%rbp), %eax
	movq	-144(%rbp), %rdx
	movswl	12(%rdx), %ecx
	subl	%eax, %ecx
	movw	%cx, %si
	movw	%si, 12(%rdx)
.LBB133_297:                            # %if.end.1276
	testb	$1, -242(%rbp)
	je	.LBB133_304
# BB#298:                               # %land.lhs.true.1279
	movq	-144(%rbp), %rax
	movswl	10(%rax), %ecx
	cmpl	$0, %ecx
	jge	.LBB133_304
# BB#299:                               # %if.then.1284
	movl	$0, -200(%rbp)
.LBB133_300:                            # %for.cond.1285
                                        # =>This Inner Loop Header: Depth=1
	movl	-200(%rbp), %eax
	movq	-144(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB133_303
# BB#301:                               # %for.body.1289
                                        #   in Loop: Header=BB133_300 Depth=1
	movq	-144(%rbp), %rax
	movswl	10(%rax), %ecx
	movl	-200(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rax
	movq	-144(%rbp), %rsi
	movq	40(%rsi), %rsi
	movswl	(%rsi,%rax,2), %edx
	subl	%ecx, %edx
	movw	%dx, %di
	movw	%di, (%rsi,%rax,2)
# BB#302:                               # %for.inc.1299
                                        #   in Loop: Header=BB133_300 Depth=1
	movl	-200(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -200(%rbp)
	jmp	.LBB133_300
.LBB133_303:                            # %for.end.1301
	movq	-144(%rbp), %rax
	movswl	10(%rax), %ecx
	movl	-180(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -180(%rbp)
	movq	-144(%rbp), %rax
	movswl	10(%rax), %ecx
	movq	-144(%rbp), %rax
	movswl	12(%rax), %edx
	subl	%ecx, %edx
	movw	%dx, %si
	movw	%si, 12(%rax)
	movq	-144(%rbp), %rax
	movw	$0, 10(%rax)
.LBB133_304:                            # %if.end.1312
	testb	$1, -241(%rbp)
	je	.LBB133_307
# BB#305:                               # %land.lhs.true.1315
	movl	-180(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	12(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB133_307
# BB#306:                               # %if.then.1320
	movq	-144(%rbp), %rax
	movswl	12(%rax), %ecx
	movl	%ecx, -180(%rbp)
.LBB133_307:                            # %if.end.1323
	xorl	%eax, %eax
	movl	-180(%rbp), %ecx
	movw	%cx, %dx
	movq	-144(%rbp), %rsi
	movw	%dx, 4(%rsi)
	movl	-188(%rbp), %ecx
	movw	%cx, %dx
	movq	-144(%rbp), %rsi
	movw	%dx, 6(%rsi)
	subl	-184(%rbp), %eax
	movw	%ax, %dx
	movq	-144(%rbp), %rsi
	movw	%dx, 8(%rsi)
	movq	-144(%rbp), %rsi
	movswl	6(%rsi), %eax
	cmpl	-164(%rbp), %eax
	jge	.LBB133_309
# BB#308:                               # %if.then.1335
	movl	-164(%rbp), %eax
	movw	%ax, %cx
	movq	-144(%rbp), %rdx
	movw	%cx, 6(%rdx)
.LBB133_309:                            # %if.end.1338
	movq	-144(%rbp), %rax
	movswl	8(%rax), %ecx
	cmpl	-168(%rbp), %ecx
	jge	.LBB133_311
# BB#310:                               # %if.then.1343
	movl	-168(%rbp), %eax
	movw	%ax, %cx
	movq	-144(%rbp), %rdx
	movw	%cx, 8(%rdx)
.LBB133_311:                            # %if.end.1346
	jmp	.LBB133_312
.LBB133_312:                            # %if.end.1347
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB133_316
# BB#313:                               # %land.lhs.true.1350
	movq	-144(%rbp), %rax
	movswl	10(%rax), %ecx
	cmpl	$0, %ecx
	jl	.LBB133_315
# BB#314:                               # %lor.lhs.false.1355
	movq	-144(%rbp), %rax
	movswl	12(%rax), %ecx
	movq	-144(%rbp), %rax
	movswl	4(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB133_316
.LBB133_315:                            # %if.then.1362
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rcx
	andq	$-262145, %rcx          # imm = 0xFFFFFFFFFFFBFFFF
	orq	$262144, %rcx           # imm = 0x40000
	movq	%rcx, 236(%rax)
.LBB133_316:                            # %if.end.1368
	movq	-144(%rbp), %rax
	movswl	4(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2368(%rax)
	movq	-144(%rbp), %rax
	movswl	6(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2388(%rax)
	movq	-8(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-144(%rbp), %rax
	movswl	8(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-8(%rbp), %rax
	movl	%ecx, 2376(%rax)
	movq	-128(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB133_325
# BB#317:                               # %if.then.1385
	movq	-128(%rbp), %rax
	movl	236(%rax), %ecx
	movl	%ecx, -320(%rbp)
	cmpl	$0, -320(%rbp)
	jle	.LBB133_319
# BB#318:                               # %if.then.1390
	movl	-320(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2372(%rcx), %eax
	movl	%eax, 2372(%rcx)
	movl	-320(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2376(%rcx), %eax
	movl	%eax, 2376(%rcx)
	jmp	.LBB133_320
.LBB133_319:                            # %if.else.1395
	xorl	%eax, %eax
	subl	-320(%rbp), %eax
	movl	%eax, -320(%rbp)
.LBB133_320:                            # %if.end.1397
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_322
# BB#321:                               # %if.then.1403
	movl	-320(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB133_322:                            # %if.end.1406
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_324
# BB#323:                               # %if.then.1412
	movl	-320(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB133_324:                            # %if.end.1415
	jmp	.LBB133_325
.LBB133_325:                            # %if.end.1416
	movq	-128(%rbp), %rax
	movl	240(%rax), %ecx
	shrl	$5, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB133_327
# BB#326:                               # %if.then.1422
	movq	globals+3216, %rax
	movq	-8(%rbp), %rcx
	movslq	2372(%rcx), %rdx
	addq	%rax, %rdx
	movl	%edx, %esi
	movl	%esi, 2372(%rcx)
.LBB133_327:                            # %if.end.1427
	movq	-8(%rbp), %rdi
	callq	take_vertical_position_into_account
	movq	-8(%rbp), %rdi
	cmpl	$0, 2372(%rdi)
	jge	.LBB133_329
# BB#328:                               # %if.then.1431
	movq	-8(%rbp), %rax
	movl	$0, 2372(%rax)
.LBB133_329:                            # %if.end.1433
	movq	-8(%rbp), %rax
	cmpl	$0, 2376(%rax)
	jge	.LBB133_331
# BB#330:                               # %if.then.1437
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
.LBB133_331:                            # %if.end.1439
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB133_334
# BB#332:                               # %land.lhs.true.1442
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	jle	.LBB133_334
# BB#333:                               # %if.then.1446
	movq	-8(%rbp), %rdi
	callq	append_composite_glyph
.LBB133_334:                            # %if.end.1447
	jmp	.LBB133_376
.LBB133_335:                            # %if.else.1448
	movq	-8(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB133_363
# BB#336:                               # %if.then.1452
	movb	$1, %al
	testb	$1, %al
	jne	.LBB133_337
	jmp	.LBB133_338
.LBB133_337:                            # %cond.true.1454
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB133_339
	jmp	.LBB133_340
.LBB133_338:                            # %cond.false.1463
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB133_340
.LBB133_339:                            # %cond.true.1474
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	jmp	.LBB133_341
.LBB133_340:                            # %cond.false.1481
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	jmp	.LBB133_341
.LBB133_341:                            # %cond.end.1482
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rax, -328(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 2364(%rax)
	movq	-8(%rbp), %rax
	movq	2144(%rax), %rdi
	callq	composition_gstring_from_id
	leaq	-352(%rbp), %rcx
	movq	%rax, -336(%rbp)
	movq	-336(%rbp), %rdi
	movq	-8(%rbp), %rax
	movslq	2192(%rax), %rsi
	movq	-8(%rbp), %rax
	movslq	2196(%rax), %rdx
	callq	composition_gstring_width
	movq	-8(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movq	-8(%rbp), %rcx
	cmpq	$0, 2352(%rcx)
	je	.LBB133_345
# BB#342:                               # %land.lhs.true.1496
	movswl	-352(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB133_344
# BB#343:                               # %lor.lhs.false.1501
	movswl	-350(%rbp), %eax
	movswl	-348(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB133_345
.LBB133_344:                            # %if.then.1508
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rcx
	andq	$-262145, %rcx          # imm = 0xFFFFFFFFFFFBFFFF
	orq	$262144, %rcx           # imm = 0x40000
	movq	%rcx, 236(%rax)
.LBB133_345:                            # %if.end.1514
	movswl	-346(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2388(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 2372(%rcx)
	movswl	-344(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2392(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 2376(%rcx)
	movq	-328(%rbp), %rcx
	movl	240(%rcx), %eax
	andl	$3, %eax
	cmpl	$0, %eax
	je	.LBB133_354
# BB#346:                               # %if.then.1528
	movq	-328(%rbp), %rax
	movl	236(%rax), %ecx
	movl	%ecx, -356(%rbp)
	cmpl	$0, -356(%rbp)
	jle	.LBB133_348
# BB#347:                               # %if.then.1533
	movl	-356(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2372(%rcx), %eax
	movl	%eax, 2372(%rcx)
	movl	-356(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2376(%rcx), %eax
	movl	%eax, 2376(%rcx)
	jmp	.LBB133_349
.LBB133_348:                            # %if.else.1538
	xorl	%eax, %eax
	subl	-356(%rbp), %eax
	movl	%eax, -356(%rbp)
.LBB133_349:                            # %if.end.1540
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_351
# BB#350:                               # %if.then.1546
	movl	-356(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB133_351:                            # %if.end.1549
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB133_353
# BB#352:                               # %if.then.1555
	movl	-356(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB133_353:                            # %if.end.1558
	jmp	.LBB133_354
.LBB133_354:                            # %if.end.1559
	movq	-328(%rbp), %rax
	movl	240(%rax), %ecx
	shrl	$5, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB133_356
# BB#355:                               # %if.then.1565
	movq	globals+3216, %rax
	movq	-8(%rbp), %rcx
	movslq	2372(%rcx), %rdx
	addq	%rax, %rdx
	movl	%edx, %esi
	movl	%esi, 2372(%rcx)
.LBB133_356:                            # %if.end.1570
	movq	-8(%rbp), %rdi
	callq	take_vertical_position_into_account
	movq	-8(%rbp), %rdi
	cmpl	$0, 2372(%rdi)
	jge	.LBB133_358
# BB#357:                               # %if.then.1574
	movq	-8(%rbp), %rax
	movl	$0, 2372(%rax)
.LBB133_358:                            # %if.end.1576
	movq	-8(%rbp), %rax
	cmpl	$0, 2376(%rax)
	jge	.LBB133_360
# BB#359:                               # %if.then.1580
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
.LBB133_360:                            # %if.end.1582
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB133_362
# BB#361:                               # %if.then.1585
	movq	-8(%rbp), %rdi
	callq	append_composite_glyph
.LBB133_362:                            # %if.end.1586
	jmp	.LBB133_375
.LBB133_363:                            # %if.else.1587
	movq	-8(%rbp), %rax
	cmpl	$2, 2104(%rax)
	jne	.LBB133_365
# BB#364:                               # %if.then.1591
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%esi, %esi
	movq	-752(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	produce_glyphless_glyph
	jmp	.LBB133_374
.LBB133_365:                            # %if.else.1593
	movq	-8(%rbp), %rax
	cmpl	$3, 2104(%rax)
	jne	.LBB133_367
# BB#366:                               # %if.then.1597
	movq	-8(%rbp), %rdi
	callq	produce_image_glyph
	jmp	.LBB133_373
.LBB133_367:                            # %if.else.1598
	movq	-8(%rbp), %rax
	cmpl	$4, 2104(%rax)
	jne	.LBB133_369
# BB#368:                               # %if.then.1602
	movq	-8(%rbp), %rdi
	callq	produce_stretch_glyph
	jmp	.LBB133_372
.LBB133_369:                            # %if.else.1603
	movq	-8(%rbp), %rax
	cmpl	$8, 2104(%rax)
	jne	.LBB133_371
# BB#370:                               # %if.then.1607
	movq	-8(%rbp), %rdi
	callq	produce_xwidget_glyph
.LBB133_371:                            # %if.end.1608
	jmp	.LBB133_372
.LBB133_372:                            # %if.end.1609
	jmp	.LBB133_373
.LBB133_373:                            # %if.end.1610
	jmp	.LBB133_374
.LBB133_374:                            # %if.end.1611
	jmp	.LBB133_375
.LBB133_375:                            # %if.end.1612
	jmp	.LBB133_376
.LBB133_376:                            # %if.end.1613
	jmp	.LBB133_377
.LBB133_377:                            # %if.end.1614
	jmp	.LBB133_378
.LBB133_378:                            # %done
	movq	-8(%rbp), %rax
	cmpl	$1, 2360(%rax)
	jne	.LBB133_380
# BB#379:                               # %if.then.1617
	movq	-8(%rbp), %rax
	movl	2368(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2404(%rax), %ecx
	movl	%ecx, 2404(%rax)
.LBB133_380:                            # %if.end.1621
	cmpl	$0, -12(%rbp)
	jle	.LBB133_384
# BB#381:                               # %if.then.1624
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	2376(%rcx), %eax
	movl	%eax, 2376(%rcx)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2332(%rcx), %eax
	jle	.LBB133_383
# BB#382:                               # %if.then.1629
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 2332(%rcx)
.LBB133_383:                            # %if.end.1631
	jmp	.LBB133_384
.LBB133_384:                            # %if.end.1632
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2372(%rax), %ecx
	jle	.LBB133_386
# BB#385:                               # %cond.true.1637
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movl	%ecx, -756(%rbp)        # 4-byte Spill
	jmp	.LBB133_387
.LBB133_386:                            # %cond.false.1639
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movl	%ecx, -756(%rbp)        # 4-byte Spill
.LBB133_387:                            # %cond.end.1641
	movl	-756(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2380(%rcx)
	movq	-8(%rbp), %rcx
	movl	2384(%rcx), %eax
	movq	-8(%rbp), %rcx
	cmpl	2376(%rcx), %eax
	jle	.LBB133_389
# BB#388:                               # %cond.true.1648
	movq	-8(%rbp), %rax
	movl	2384(%rax), %ecx
	movl	%ecx, -760(%rbp)        # 4-byte Spill
	jmp	.LBB133_390
.LBB133_389:                            # %cond.false.1650
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movl	%ecx, -760(%rbp)        # 4-byte Spill
.LBB133_390:                            # %cond.end.1652
	movl	-760(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2384(%rcx)
	movq	-8(%rbp), %rcx
	movl	2396(%rcx), %eax
	movq	-8(%rbp), %rcx
	cmpl	2388(%rcx), %eax
	jle	.LBB133_392
# BB#391:                               # %cond.true.1658
	movq	-8(%rbp), %rax
	movl	2396(%rax), %ecx
	movl	%ecx, -764(%rbp)        # 4-byte Spill
	jmp	.LBB133_393
.LBB133_392:                            # %cond.false.1660
	movq	-8(%rbp), %rax
	movl	2388(%rax), %ecx
	movl	%ecx, -764(%rbp)        # 4-byte Spill
.LBB133_393:                            # %cond.end.1662
	movl	-764(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2396(%rcx)
	movq	-8(%rbp), %rcx
	movl	2400(%rcx), %eax
	movq	-8(%rbp), %rcx
	cmpl	2392(%rcx), %eax
	jle	.LBB133_395
# BB#394:                               # %cond.true.1668
	movq	-8(%rbp), %rax
	movl	2400(%rax), %ecx
	movl	%ecx, -768(%rbp)        # 4-byte Spill
	jmp	.LBB133_396
.LBB133_395:                            # %cond.false.1670
	movq	-8(%rbp), %rax
	movl	2392(%rax), %ecx
	movl	%ecx, -768(%rbp)        # 4-byte Spill
.LBB133_396:                            # %cond.end.1672
	movl	-768(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2400(%rcx)
	addq	$768, %rsp              # imm = 0x300
	popq	%rbp
	retq
.Lfunc_end133:
	.size	x_produce_glyphs, .Lfunc_end133-x_produce_glyphs
	.cfi_endproc

	.align	16, 0x90
	.type	produce_glyphless_glyph,@function
produce_glyphless_glyph:                # @produce_glyphless_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp410:
	.cfi_def_cfa_offset 16
.Ltmp411:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp412:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$320, %rsp              # imm = 0x140
.Ltmp413:
	.cfi_offset %rbx, -32
.Ltmp414:
	.cfi_offset %r14, -24
	movb	%sil, %al
	movb	$1, %cl
	movq	%rdi, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	%rdx, -40(%rbp)
	testb	$1, %cl
	jne	.LBB134_1
	jmp	.LBB134_2
.LBB134_1:                              # %cond.true
	movq	-24(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB134_3
	jmp	.LBB134_4
.LBB134_2:                              # %cond.false
	movq	-24(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB134_4
.LBB134_3:                              # %cond.true.12
	movq	-24(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jmp	.LBB134_5
.LBB134_4:                              # %cond.false.16
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB134_5
.LBB134_5:                              # %cond.end
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	264(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB134_7
# BB#6:                                 # %cond.true.18
	movq	-56(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB134_8
.LBB134_7:                              # %cond.false.20
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB134_8:                              # %cond.end.23
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	movq	-24(%rbp), %rax
	addq	$2372, %rax             # imm = 0x944
	movq	-24(%rbp), %rcx
	addq	$2376, %rcx             # imm = 0x948
	movq	%rax, %rdx
	callq	normal_char_ascent_descent
	movq	-64(%rbp), %rax
	movl	188(%rax), %esi
	movq	-24(%rbp), %rax
	addl	2372(%rax), %esi
	movl	%esi, 2372(%rax)
	movq	-64(%rbp), %rax
	movl	188(%rax), %esi
	movq	-24(%rbp), %rax
	movl	2376(%rax), %r8d
	subl	%esi, %r8d
	movl	%r8d, 2376(%rax)
	movq	-24(%rbp), %rax
	movl	2372(%rax), %esi
	movq	-24(%rbp), %rax
	addl	2376(%rax), %esi
	movl	%esi, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	164(%rax), %esi
	movl	%esi, -68(%rbp)
	movq	-24(%rbp), %rdi
	callq	merge_glyphless_glyph_face
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rcx
	cmpl	$0, 2212(%rcx)
	jne	.LBB134_10
# BB#9:                                 # %if.then
	movq	-24(%rbp), %rax
	movl	$1, 2368(%rax)
	movl	$0, -92(%rbp)
	movw	$0, -88(%rbp)
	movw	$0, -86(%rbp)
	movw	$0, -84(%rbp)
	movw	$0, -82(%rbp)
	jmp	.LBB134_75
.LBB134_10:                             # %if.else
	movq	-24(%rbp), %rax
	cmpl	$1, 2212(%rax)
	jne	.LBB134_34
# BB#11:                                # %if.then.37
	movb	$1, %al
	testb	$1, %al
	jne	.LBB134_12
	jmp	.LBB134_13
.LBB134_12:                             # %cond.true.38
	movq	-24(%rbp), %rax
	movl	2124(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	jb	.LBB134_14
	jmp	.LBB134_27
.LBB134_13:                             # %cond.false.42
	movq	-24(%rbp), %rax
	movslq	2124(%rax), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB134_27
.LBB134_14:                             # %cond.true.48
	movq	-24(%rbp), %rax
	cmpl	$32, 2124(%rax)
	jge	.LBB134_22
# BB#15:                                # %cond.true.52
	movq	-24(%rbp), %rax
	cmpl	$9, 2124(%rax)
	jne	.LBB134_17
# BB#16:                                # %cond.true.56
	movq	current_buffer, %rax
	movq	152(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rdi
	callq	sanitize_tab_width
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB134_21
.LBB134_17:                             # %cond.false.58
	movq	-24(%rbp), %rax
	cmpl	$10, 2124(%rax)
	jne	.LBB134_19
# BB#18:                                # %cond.true.62
	xorl	%eax, %eax
	movl	%eax, -208(%rbp)        # 4-byte Spill
	jmp	.LBB134_20
.LBB134_19:                             # %cond.false.63
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	232(%rax), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	$4, %ecx
	movq	-216(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -208(%rbp)        # 4-byte Spill
.LBB134_20:                             # %cond.end.68
	movl	-208(%rbp), %eax        # 4-byte Reload
	movl	%eax, -204(%rbp)        # 4-byte Spill
.LBB134_21:                             # %cond.end.70
	movl	-204(%rbp), %eax        # 4-byte Reload
	movl	%eax, -220(%rbp)        # 4-byte Spill
	jmp	.LBB134_26
.LBB134_22:                             # %cond.false.72
	movq	-24(%rbp), %rax
	cmpl	$127, 2124(%rax)
	jge	.LBB134_24
# BB#23:                                # %cond.true.76
	movl	$1, %eax
	movl	%eax, -224(%rbp)        # 4-byte Spill
	jmp	.LBB134_25
.LBB134_24:                             # %cond.false.77
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	232(%rax), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	$4, %ecx
	movq	-232(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -224(%rbp)        # 4-byte Spill
.LBB134_25:                             # %cond.end.83
	movl	-224(%rbp), %eax        # 4-byte Reload
	movl	%eax, -220(%rbp)        # 4-byte Spill
.LBB134_26:                             # %cond.end.85
	movl	-220(%rbp), %eax        # 4-byte Reload
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB134_28
.LBB134_27:                             # %cond.false.87
	movq	globals+224, %rdi
	movq	-24(%rbp), %rax
	movl	2124(%rax), %esi
	callq	CHAR_TABLE_REF
	sarq	$2, %rax
	movq	%rax, %rdi
	callq	sanitize_char_width
	movl	%eax, -236(%rbp)        # 4-byte Spill
.LBB134_28:                             # %cond.end.92
	movl	-236(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB134_30
# BB#29:                                # %if.then.96
	movl	$1, -76(%rbp)
	jmp	.LBB134_33
.LBB134_30:                             # %if.else.97
	cmpl	$4, -76(%rbp)
	jle	.LBB134_32
# BB#31:                                # %if.then.100
	movl	$4, -76(%rbp)
.LBB134_32:                             # %if.end
	jmp	.LBB134_33
.LBB134_33:                             # %if.end.101
	movl	-68(%rbp), %eax
	imull	-76(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movl	$0, -92(%rbp)
	movw	$0, -88(%rbp)
	movw	$0, -86(%rbp)
	movw	$0, -84(%rbp)
	movw	$0, -82(%rbp)
	jmp	.LBB134_74
.LBB134_34:                             # %if.else.103
	movb	$1, %al
	testb	$1, %al
	jne	.LBB134_35
	jmp	.LBB134_36
.LBB134_35:                             # %cond.true.106
	movl	-44(%rbp), %eax
	addl	$0, %eax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB134_37
	jmp	.LBB134_38
.LBB134_36:                             # %cond.false.114
	movslq	-44(%rbp), %rax
	addq	$0, %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB134_38
.LBB134_37:                             # %cond.true.124
	movslq	-44(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB134_39
.LBB134_38:                             # %cond.false.130
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	jmp	.LBB134_39
.LBB134_39:                             # %cond.end.131
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB134_41
# BB#40:                                # %cond.true.135
	movq	-56(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	jmp	.LBB134_42
.LBB134_41:                             # %cond.false.137
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
.LBB134_42:                             # %cond.end.142
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-56(%rbp), %rsi
	callq	prepare_face_for_display
	movq	-24(%rbp), %rax
	cmpl	$2, 2212(%rax)
	jne	.LBB134_52
# BB#43:                                # %if.then.148
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB134_46
# BB#44:                                # %land.lhs.true
	movq	globals+952, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB134_45
	jmp	.LBB134_46
.LBB134_45:                             # %if.then.152
	movq	globals+952, %rdi
	movq	-24(%rbp), %rax
	movl	2124(%rax), %esi
	callq	CHAR_TABLE_REF
	movq	%rax, -40(%rbp)
.LBB134_46:                             # %if.end.155
	movq	-40(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB134_48
# BB#47:                                # %if.then.159
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB134_48:                             # %if.end.161
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB134_49
	jmp	.LBB134_50
.LBB134_49:                             # %cond.true.164
	movq	-40(%rbp), %rdi
	callq	SSDATA
	movq	%rax, -264(%rbp)        # 8-byte Spill
	jmp	.LBB134_51
.LBB134_50:                             # %cond.false.166
	movabsq	$.L.str, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	jmp	.LBB134_51
.LBB134_51:                             # %cond.end.167
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)
	jmp	.LBB134_53
.LBB134_52:                             # %if.else.169
	movabsq	$.L.str.160, %rsi
	movl	$6, %eax
	movl	$4, %ecx
	leaq	-99(%rbp), %rdi
	movq	-24(%rbp), %rdx
	cmpl	$65536, 2124(%rdx)      # imm = 0x10000
	cmovll	%ecx, %eax
	movq	-24(%rbp), %rdx
	movl	2124(%rdx), %ecx
	addl	$0, %ecx
	movl	%eax, %edx
	movb	$0, %al
	callq	sprintf
	leaq	-99(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movl	%eax, -268(%rbp)        # 4-byte Spill
.LBB134_53:                             # %if.end.178
	movl	$0, -92(%rbp)
.LBB134_54:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movslq	-92(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movsbl	(%rsi,%rdx), %eax
	cmpl	$0, %eax
	movb	%cl, -269(%rbp)         # 1-byte Spill
	je	.LBB134_59
# BB#55:                                # %land.lhs.true.183
                                        #   in Loop: Header=BB134_54 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB134_56
	jmp	.LBB134_57
.LBB134_56:                             # %cond.true.184
                                        #   in Loop: Header=BB134_54 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movslq	-92(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movsbl	(%rsi,%rdx), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	movb	%cl, -269(%rbp)         # 1-byte Spill
	jb	.LBB134_58
	jmp	.LBB134_59
.LBB134_57:                             # %cond.false.191
                                        #   in Loop: Header=BB134_54 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movslq	-92(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movsbq	(%rsi,%rdx), %rdx
	addq	$0, %rdx
	cmpq	$128, %rdx
	movb	%cl, -269(%rbp)         # 1-byte Spill
	jae	.LBB134_59
.LBB134_58:                             # %land.rhs
                                        #   in Loop: Header=BB134_54 Depth=1
	cmpl	$6, -92(%rbp)
	setl	%al
	movb	%al, -269(%rbp)         # 1-byte Spill
.LBB134_59:                             # %land.end
                                        #   in Loop: Header=BB134_54 Depth=1
	movb	-269(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB134_60
	jmp	.LBB134_62
.LBB134_60:                             # %for.body
                                        #   in Loop: Header=BB134_54 Depth=1
	movq	-64(%rbp), %rax
	movq	208(%rax), %rax
	movq	96(%rax), %rax
	movq	-64(%rbp), %rdi
	movslq	-92(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movsbl	(%rdx,%rcx), %esi
	callq	*%rax
	movslq	-92(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# BB#61:                                # %for.inc
                                        #   in Loop: Header=BB134_54 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB134_54
.LBB134_62:                             # %for.end
	leaq	-168(%rbp), %rcx
	leaq	-144(%rbp), %rsi
	movl	$2, %eax
	movl	-92(%rbp), %edx
	addl	$1, %edx
	movl	%eax, -276(%rbp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-276(%rbp), %edi        # 4-byte Reload
	idivl	%edi
	movl	%eax, -148(%rbp)
	movq	-64(%rbp), %r8
	movq	208(%r8), %r8
	movq	104(%r8), %r8
	movq	-64(%rbp), %rdi
	movl	-148(%rbp), %eax
	movl	%eax, %edx
	callq	*%r8
	leaq	-184(%rbp), %rcx
	leaq	-144(%rbp), %rsi
	movq	-64(%rbp), %rdi
	movq	208(%rdi), %rdi
	movq	104(%rdi), %rdi
	movq	-64(%rbp), %r8
	movslq	-148(%rbp), %r9
	shlq	$2, %r9
	addq	%r9, %rsi
	movl	-92(%rbp), %eax
	subl	-148(%rbp), %eax
	movq	%rdi, -288(%rbp)        # 8-byte Spill
	movq	%r8, %rdi
	movl	%eax, %edx
	movq	-288(%rbp), %r8         # 8-byte Reload
	callq	*%r8
	movswl	-164(%rbp), %eax
	movswl	-180(%rbp), %edx
	cmpl	%edx, %eax
	jle	.LBB134_64
# BB#63:                                # %cond.true.219
	movswl	-164(%rbp), %eax
	movl	%eax, -292(%rbp)        # 4-byte Spill
	jmp	.LBB134_65
.LBB134_64:                             # %cond.false.222
	movswl	-180(%rbp), %eax
	movl	%eax, -292(%rbp)        # 4-byte Spill
.LBB134_65:                             # %cond.end.225
	movl	-292(%rbp), %eax        # 4-byte Reload
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movw	$2, -84(%rbp)
	movw	$2, -82(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.LBB134_67
# BB#66:                                # %if.then.230
	movl	-68(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movl	-68(%rbp), %eax
	subl	$2, %eax
	movswl	-180(%rbp), %edx
	subl	%edx, %eax
	movw	%ax, %si
	movw	%si, -86(%rbp)
	jmp	.LBB134_71
.LBB134_67:                             # %if.else.237
	movl	-76(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 2368(%rcx)
	movswl	-164(%rbp), %eax
	movswl	-180(%rbp), %edx
	cmpl	%edx, %eax
	jl	.LBB134_69
# BB#68:                                # %if.then.245
	movl	$2, %eax
	movl	-76(%rbp), %ecx
	movswl	-180(%rbp), %edx
	subl	%edx, %ecx
	movl	%eax, -296(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-296(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movw	%ax, %si
	movw	%si, -86(%rbp)
	jmp	.LBB134_70
.LBB134_69:                             # %if.else.251
	movl	$2, %eax
	movw	$0, -86(%rbp)
	movl	-76(%rbp), %ecx
	movswl	-164(%rbp), %edx
	subl	%edx, %ecx
	movl	%eax, -300(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-300(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movw	%ax, %si
	movw	%si, -82(%rbp)
.LBB134_70:                             # %if.end.257
	jmp	.LBB134_71
.LBB134_71:                             # %if.end.258
	movl	$2, %eax
	xorl	%ecx, %ecx
	movswl	-162(%rbp), %edx
	movswl	-160(%rbp), %esi
	addl	%esi, %edx
	movswl	-178(%rbp), %esi
	addl	%esi, %edx
	movswl	-176(%rbp), %esi
	addl	%esi, %edx
	addl	$5, %edx
	movl	%edx, -80(%rbp)
	movq	-24(%rbp), %rdi
	movl	2376(%rdi), %edx
	movl	-72(%rbp), %esi
	addl	-80(%rbp), %esi
	addl	$1, %esi
	movl	%eax, -304(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -308(%rbp)        # 4-byte Spill
	cltd
	movl	-304(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	movl	-308(%rbp), %r8d        # 4-byte Reload
	subl	%eax, %r8d
	subl	%r8d, %ecx
	movl	%ecx, -152(%rbp)
	movq	-24(%rbp), %rdi
	movl	2376(%rdi), %eax
	movl	-72(%rbp), %ecx
	subl	-80(%rbp), %ecx
	movl	%eax, -312(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	-312(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -156(%rbp)
	movl	-156(%rbp), %eax
	subl	$2, %eax
	movswl	-176(%rbp), %ecx
	subl	%ecx, %eax
	movw	%ax, %r9w
	movw	%r9w, -88(%rbp)
	movswl	-88(%rbp), %eax
	movswl	-178(%rbp), %ecx
	subl	%ecx, %eax
	subl	$1, %eax
	movswl	-160(%rbp), %ecx
	subl	%ecx, %eax
	movw	%ax, %r9w
	movw	%r9w, -84(%rbp)
	movl	-80(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jle	.LBB134_73
# BB#72:                                # %if.then.297
	movl	-152(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 2372(%rcx)
	movl	-156(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 2376(%rcx)
.LBB134_73:                             # %if.end.300
	jmp	.LBB134_74
.LBB134_74:                             # %if.end.301
	jmp	.LBB134_75
.LBB134_75:                             # %if.end.302
	movq	-24(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 2388(%rax)
	movq	-24(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-24(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB134_77
# BB#76:                                # %if.then.306
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movb	-25(%rbp), %al
	movl	-92(%rbp), %ecx
	movw	-82(%rbp), %dx
	movw	-84(%rbp), %r8w
	movw	-86(%rbp), %r9w
	andb	$1, %al
	movzbl	%al, %r10d
	movw	%dx, -314(%rbp)         # 2-byte Spill
	movl	%r10d, %edx
	movw	-314(%rbp), %r11w       # 2-byte Reload
	movswl	%r11w, %r10d
	movw	%r8w, -316(%rbp)        # 2-byte Spill
	movl	%r10d, %r8d
	movw	-316(%rbp), %bx         # 2-byte Reload
	movswl	%bx, %r10d
	movw	%r9w, -318(%rbp)        # 2-byte Spill
	movl	%r10d, %r9d
	movw	-318(%rbp), %r14w       # 2-byte Reload
	movswl	%r14w, %r10d
	movl	%r10d, (%rsp)
	movswl	-88(%rbp), %r10d
	movl	%r10d, 8(%rsp)
	callq	append_glyphless_glyph
.LBB134_77:                             # %if.end.308
	movq	-24(%rbp), %rax
	movl	$1, 2364(%rax)
	movq	-24(%rbp), %rdi
	callq	take_vertical_position_into_account
	addq	$320, %rsp              # imm = 0x140
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end134:
	.size	produce_glyphless_glyph, .Lfunc_end134-produce_glyphless_glyph
	.cfi_endproc

	.align	16, 0x90
	.type	get_char_glyph_code,@function
get_char_glyph_code:                    # @get_char_glyph_code
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp415:
	.cfi_def_cfa_offset 16
.Ltmp416:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp417:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	cmpl	$4194175, -8(%rbp)      # imm = 0x3FFF7F
	jle	.LBB135_5
# BB#1:                                 # %if.then
	cmpl	$4194175, -8(%rbp)      # imm = 0x3FFF7F
	jle	.LBB135_3
# BB#2:                                 # %cond.true
	movl	-8(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -32(%rbp)         # 4-byte Spill
	jmp	.LBB135_4
.LBB135_3:                              # %cond.false
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -32(%rbp)         # 4-byte Spill
.LBB135_4:                              # %cond.end
	movl	-32(%rbp), %eax         # 4-byte Reload
	movl	%eax, -28(%rbp)
	jmp	.LBB135_6
.LBB135_5:                              # %if.else
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	movq	96(%rax), %rax
	movq	-16(%rbp), %rdi
	movl	-8(%rbp), %esi
	callq	*%rax
	movl	%eax, -28(%rbp)
.LBB135_6:                              # %if.end
	cmpl	$-1, -28(%rbp)
	jne	.LBB135_8
# BB#7:                                 # %if.then.3
	movb	$0, -1(%rbp)
	jmp	.LBB135_9
.LBB135_8:                              # %if.end.4
	movl	-28(%rbp), %eax
	shrl	$8, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movb	%cl, (%rdx)
	movl	-28(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movb	%cl, 1(%rdx)
	movb	$1, -1(%rbp)
.LBB135_9:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end135:
	.size	get_char_glyph_code, .Lfunc_end135-get_char_glyph_code
	.cfi_endproc

	.align	16, 0x90
	.type	append_glyph,@function
append_glyph:                           # @append_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp418:
	.cfi_def_cfa_offset 16
.Ltmp419:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp420:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	2360(%rdi), %eax
	movl	%eax, -20(%rbp)
	movslq	-20(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movslq	-20(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	movswl	32(%rdx,%rdi,2), %eax
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rdi
	movq	2352(%rdi), %rdi
	cmpq	(%rdi,%rdx,8), %rcx
	jae	.LBB136_21
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB136_8
# BB#2:                                 # %land.lhs.true
	cmpl	$1, -20(%rbp)
	jne	.LBB136_8
# BB#3:                                 # %if.then.14
	movq	-16(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -32(%rbp)
.LBB136_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	cmpq	(%rdx,%rcx,8), %rax
	jb	.LBB136_7
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB136_4 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$48, %rcx
	movq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB136_4 Depth=1
	movq	-32(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB136_4
.LBB136_7:                              # %for.end
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -16(%rbp)
.LBB136_8:                              # %if.end
	movq	-8(%rbp), %rax
	movq	2296(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	cmpl	$0, 2368(%rax)
	jle	.LBB136_10
# BB#9:                                 # %if.then.31
	movq	-8(%rbp), %rax
	movl	2368(%rax), %ecx
	movw	%cx, %dx
	movq	-16(%rbp), %rax
	movw	%dx, 16(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-129, %ecx
	movl	%ecx, 24(%rax)
	jmp	.LBB136_11
.LBB136_10:                             # %if.else
	movq	-16(%rbp), %rax
	movw	$1, 16(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-129, %ecx
	orl	$128, %ecx
	movl	%ecx, 24(%rax)
.LBB136_11:                             # %if.end.41
	movq	-8(%rbp), %rax
	movl	2372(%rax), %ecx
	movw	%cx, %dx
	movq	-16(%rbp), %rax
	movw	%dx, 18(%rax)
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movw	%cx, %dx
	movq	-16(%rbp), %rax
	movw	%dx, 20(%rax)
	movq	-8(%rbp), %rax
	movw	2272(%rax), %dx
	movq	-16(%rbp), %rax
	movw	%dx, 22(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-8, %ecx
	movl	%ecx, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	shrb	$6, %sil
	andb	$1, %sil
	movq	-16(%rbp), %rax
	andb	$1, %sil
	movzbl	%sil, %ecx
	movl	24(%rax), %edi
	shll	$9, %ecx
	andl	$-513, %edi             # imm = 0xFFFFFFFFFFFFFDFF
	orl	%ecx, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	andb	$1, %sil
	movq	-16(%rbp), %rax
	andb	$1, %sil
	movzbl	%sil, %ecx
	movl	24(%rax), %edi
	shll	$3, %ecx
	andl	$-9, %edi
	orl	%ecx, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB136_14
# BB#12:                                # %land.lhs.true.74
	cmpl	$1, -20(%rbp)
	jne	.LBB136_14
# BB#13:                                # %if.then.77
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	jmp	.LBB136_15
.LBB136_14:                             # %if.else.98
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
.LBB136_15:                             # %if.end.123
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movl	2388(%rcx), %edx
	movq	-8(%rbp), %rcx
	cmpl	2372(%rcx), %edx
	movb	%al, -33(%rbp)          # 1-byte Spill
	jg	.LBB136_17
# BB#16:                                # %lor.rhs
	movq	-8(%rbp), %rax
	movl	2392(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2376(%rax), %ecx
	setg	%dl
	movb	%dl, -33(%rbp)          # 1-byte Spill
.LBB136_17:                             # %lor.end
	movb	-33(%rbp), %al          # 1-byte Reload
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	24(%rcx), %esi
	shll	$6, %edx
	andl	$-65, %esi
	orl	%edx, %esi
	movl	%esi, 24(%rcx)
	movq	-8(%rbp), %rcx
	movw	2112(%rcx), %di
	shrw	$7, %di
	andw	$1, %di
	movb	%dil, %al
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	24(%rcx), %esi
	shll	$8, %edx
	andl	$-257, %esi             # imm = 0xFFFFFFFFFFFFFEFF
	orl	%edx, %esi
	movl	%esi, 24(%rcx)
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %edx
	movq	-16(%rbp), %rcx
	movl	28(%rcx), %esi
	andl	$1048575, %edx          # imm = 0xFFFFF
	andl	$-1048576, %esi         # imm = 0xFFFFFFFFFFF00000
	orl	%edx, %esi
	movl	%esi, 28(%rcx)
	movq	-8(%rbp), %rcx
	movl	2208(%rcx), %edx
	movq	-16(%rbp), %rcx
	movl	%edx, 40(%rcx)
	movq	-16(%rbp), %rcx
	movq	null_glyph_slice, %r8
	movq	%r8, 32(%rcx)
	movq	-16(%rbp), %rcx
	movl	28(%rcx), %edx
	andl	$-7340033, %edx         # imm = 0xFFFFFFFFFF8FFFFF
	movl	%edx, 28(%rcx)
	movq	-8(%rbp), %rcx
	movl	2456(%rcx), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB136_19
# BB#18:                                # %if.then.157
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	andl	$127, %ecx
	shll	$10, %ecx
	andl	$-130049, %edx          # imm = 0xFFFFFFFFFFFE03FF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	2504(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	andl	$7, %ecx
	shll	$17, %ecx
	andl	$-917505, %edx          # imm = 0xFFFFFFFFFFF1FFFF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	jmp	.LBB136_20
.LBB136_19:                             # %if.else.172
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-130049, %ecx          # imm = 0xFFFFFFFFFFFE03FF
	movl	%ecx, 24(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-917505, %ecx          # imm = 0xFFFFFFFFFFF1FFFF
	movl	%ecx, 24(%rax)
.LBB136_20:                             # %if.end.179
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movw	32(%rcx,%rax,2), %dx
	addw	$1, %dx
	movw	%dx, 32(%rcx,%rax,2)
	jmp	.LBB136_25
.LBB136_21:                             # %if.else.184
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB136_24
# BB#22:                                # %land.lhs.true.189
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	cmpq	(%rsi,%rcx,8), %rax
	jae	.LBB136_24
# BB#23:                                # %if.then.201
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	348(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 348(%rax)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rdx
	andq	$-65, %rdx
	orq	$64, %rdx
	movq	%rdx, 208(%rax)
.LBB136_24:                             # %if.end.208
	jmp	.LBB136_25
.LBB136_25:                             # %if.end.209
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end136:
	.size	append_glyph, .Lfunc_end136-append_glyph
	.cfi_endproc

	.align	16, 0x90
	.type	get_it_property,@function
get_it_property:                        # @get_it_property
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp421:
	.cfi_def_cfa_offset 16
.Ltmp422:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp423:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	2288(%rsi), %rsi
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB137_1
	jmp	.LBB137_2
.LBB137_1:                              # %if.then
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB137_6
.LBB137_2:                              # %if.else
	movq	-40(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB137_3
	jmp	.LBB137_4
.LBB137_3:                              # %if.then.3
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB137_5
.LBB137_4:                              # %if.else.8
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB137_7
.LBB137_5:                              # %if.end
	jmp	.LBB137_6
.LBB137_6:                              # %if.end.10
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	Fget_char_property
	movq	%rax, -8(%rbp)
.LBB137_7:                              # %return
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end137:
	.size	get_it_property, .Lfunc_end137-get_it_property
	.cfi_endproc

	.align	16, 0x90
	.type	calc_line_height_property,@function
calc_line_height_property:              # @calc_line_height_property
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp424:
	.cfi_def_cfa_offset 16
.Ltmp425:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp426:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movb	%r8b, %al
	xorl	%r8d, %r8d
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	andb	$1, %al
	movb	%al, -37(%rbp)
	movl	%r8d, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB138_4
# BB#1:                                 # %lor.lhs.false
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	je	.LBB138_4
# BB#2:                                 # %lor.lhs.false.5
	testb	$1, -37(%rbp)
	je	.LBB138_5
# BB#3:                                 # %land.lhs.true
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB138_5
.LBB138_4:                              # %if.then
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB138_37
.LBB138_5:                              # %if.end
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB138_11
# BB#6:                                 # %if.then.14
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB138_8
# BB#7:                                 # %if.then.17
	movq	$6, -24(%rbp)
.LBB138_8:                              # %if.end.18
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB138_10
# BB#9:                                 # %if.then.22
	movq	-16(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, -60(%rbp)
	jmp	.LBB138_31
.LBB138_10:                             # %if.end.25
	jmp	.LBB138_11
.LBB138_11:                             # %if.end.26
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB138_13
# BB#12:                                # %if.then.30
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movl	240(%rax), %ecx
	movl	%ecx, -36(%rbp)
	jmp	.LBB138_28
.LBB138_13:                             # %if.else
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB138_15
# BB#14:                                # %if.then.38
	movb	$0, -37(%rbp)
	jmp	.LBB138_27
.LBB138_15:                             # %if.else.39
	xorl	%edx, %edx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-48(%rbp), %rsi
	callq	lookup_named_face
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	jge	.LBB138_17
# BB#16:                                # %if.then.44
	movq	$-2, -8(%rbp)
	jmp	.LBB138_37
.LBB138_17:                             # %if.end.45
	movb	$1, %al
	testb	$1, %al
	jne	.LBB138_18
	jmp	.LBB138_19
.LBB138_18:                             # %cond.true
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB138_20
	jmp	.LBB138_21
.LBB138_19:                             # %cond.false
	movslq	-64(%rbp), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB138_21
.LBB138_20:                             # %cond.true.60
	movslq	-64(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB138_22
.LBB138_21:                             # %cond.false.63
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB138_22
.LBB138_22:                             # %cond.end
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB138_24
# BB#23:                                # %if.then.67
	movq	$-2, -8(%rbp)
	jmp	.LBB138_37
.LBB138_24:                             # %if.end.68
	movq	-32(%rbp), %rax
	movl	188(%rax), %ecx
	movl	%ecx, -36(%rbp)
	movq	-32(%rbp), %rax
	testb	$1, 184(%rax)
	je	.LBB138_26
# BB#25:                                # %if.then.71
	movl	$2, %eax
	movq	-32(%rbp), %rcx
	movl	172(%rcx), %edx
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %esi
	movq	-32(%rbp), %rcx
	subl	156(%rcx), %esi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %edi
	movq	-32(%rbp), %rcx
	cmpl	156(%rcx), %edi
	setg	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edi
	addl	%edi, %esi
	movl	%eax, -124(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -128(%rbp)        # 4-byte Spill
	cltd
	movl	-124(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	movl	-128(%rbp), %edi        # 4-byte Reload
	addl	%eax, %edi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	movq	232(%rcx), %rcx
	movl	172(%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	subl	240(%rcx), %eax
	subl	%eax, %edi
	subl	-36(%rbp), %edi
	movl	%edi, -36(%rbp)
.LBB138_26:                             # %if.end.95
	jmp	.LBB138_27
.LBB138_27:                             # %if.end.96
	jmp	.LBB138_28
.LBB138_28:                             # %if.end.97
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	leaq	-52(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdi
	callq	normal_char_ascent_descent
	testb	$1, -37(%rbp)
	je	.LBB138_30
# BB#29:                                # %if.then.99
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2336(%rcx)
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2340(%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2344(%rcx)
.LBB138_30:                             # %if.end.100
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB138_31:                             # %scale
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB138_33
# BB#32:                                # %if.then.106
	movq	-24(%rbp), %rdi
	callq	XFLOAT_DATA
	cvtsi2sdl	-60(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB138_36
.LBB138_33:                             # %if.else.110
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB138_35
# BB#34:                                # %if.then.116
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movslq	-60(%rbp), %rcx
	imulq	%rax, %rcx
	movl	%ecx, %edx
	movl	%edx, -60(%rbp)
.LBB138_35:                             # %if.end.120
	jmp	.LBB138_36
.LBB138_36:                             # %if.end.121
	movslq	-60(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
.LBB138_37:                             # %return
	movq	-8(%rbp), %rax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end138:
	.size	calc_line_height_property, .Lfunc_end138-calc_line_height_property
	.cfi_endproc

	.align	16, 0x90
	.type	get_char_face_and_encoding,@function
get_char_face_and_encoding:             # @get_char_face_and_encoding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp427:
	.cfi_def_cfa_offset 16
.Ltmp428:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp429:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%r8b, %al
	movb	$1, %r9b
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	%rcx, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	testb	$1, %r9b
	jne	.LBB139_1
	jmp	.LBB139_2
.LBB139_1:                              # %cond.true
	movl	-16(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB139_3
	jmp	.LBB139_4
.LBB139_2:                              # %cond.false
	movslq	-16(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB139_4
.LBB139_3:                              # %cond.true.9
	movslq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB139_5
.LBB139_4:                              # %cond.false.11
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	jmp	.LBB139_5
.LBB139_5:                              # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	-40(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB139_9
# BB#6:                                 # %if.then
	movq	-40(%rbp), %rax
	movq	224(%rax), %rax
	movq	208(%rax), %rax
	movq	96(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	224(%rcx), %rdi
	movl	-12(%rbp), %esi
	callq	*%rax
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB139_8
# BB#7:                                 # %if.then.16
	movl	$0, -44(%rbp)
.LBB139_8:                              # %if.end
	jmp	.LBB139_9
.LBB139_9:                              # %if.end.17
	movl	-44(%rbp), %eax
	shrl	$8, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movb	%cl, (%rdx)
	movl	-44(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movb	%cl, 1(%rdx)
	testb	$1, -25(%rbp)
	je	.LBB139_11
# BB#10:                                # %if.then.21
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	prepare_face_for_display
.LBB139_11:                             # %if.end.22
	movq	-40(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end139:
	.size	get_char_face_and_encoding, .Lfunc_end139-get_char_face_and_encoding
	.cfi_endproc

	.align	16, 0x90
	.type	append_composite_glyph,@function
append_composite_glyph:                 # @append_composite_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp430:
	.cfi_def_cfa_offset 16
.Ltmp431:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp432:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	2360(%rdi), %eax
	movl	%eax, -20(%rbp)
	movslq	-20(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movslq	-20(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	movswl	32(%rdx,%rdi,2), %eax
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rdi
	movq	2352(%rdi), %rdi
	cmpq	(%rdi,%rdx,8), %rcx
	jae	.LBB140_20
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB140_8
# BB#2:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$1, 2360(%rax)
	jne	.LBB140_8
# BB#3:                                 # %if.then.15
	movq	-16(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -32(%rbp)
.LBB140_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movslq	2360(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	cmpq	(%rdx,%rcx,8), %rax
	jb	.LBB140_7
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB140_4 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$48, %rcx
	movq	-32(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB140_4 Depth=1
	movq	-32(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB140_4
.LBB140_7:                              # %for.end
	movq	-8(%rbp), %rax
	movslq	2360(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -16(%rbp)
.LBB140_8:                              # %if.end
	movq	-8(%rbp), %rax
	movq	2176(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	2368(%rax), %edx
	movw	%dx, %si
	movq	-16(%rbp), %rax
	movw	%si, 16(%rax)
	movq	-8(%rbp), %rax
	movl	2372(%rax), %edx
	movw	%dx, %si
	movq	-16(%rbp), %rax
	movw	%si, 18(%rax)
	movq	-8(%rbp), %rax
	movl	2376(%rax), %edx
	movw	%dx, %si
	movq	-16(%rbp), %rax
	movw	%si, 20(%rax)
	movq	-8(%rbp), %rax
	movw	2272(%rax), %si
	movq	-16(%rbp), %rax
	movw	%si, 22(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	andl	$-8, %edx
	orl	$1, %edx
	movl	%edx, 24(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 2152(%rax)
	jge	.LBB140_10
# BB#9:                                 # %if.then.44
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 40(%rax)
	movq	-8(%rbp), %rax
	movq	2144(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	40(%rax), %edx
	andl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	shll	$1, %ecx
	andl	$1, %edx
	orl	%ecx, %edx
	movl	%edx, 40(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 32(%rax)
	jmp	.LBB140_11
.LBB140_10:                             # %if.else
	movq	-16(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$-2, %ecx
	orl	$1, %ecx
	movl	%ecx, 40(%rax)
	movq	-8(%rbp), %rax
	movq	2144(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	40(%rax), %edx
	andl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	shll	$1, %ecx
	andl	$1, %edx
	orl	%ecx, %edx
	movl	%edx, 40(%rax)
	movq	-8(%rbp), %rax
	movl	2192(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 32(%rax)
	movq	-8(%rbp), %rax
	movl	2196(%rax), %ecx
	subl	$1, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 36(%rax)
.LBB140_11:                             # %if.end.83
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$6, %cl
	andb	$1, %cl
	movq	-16(%rbp), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	24(%rax), %esi
	shll	$9, %edx
	andl	$-513, %esi             # imm = 0xFFFFFFFFFFFFFDFF
	orl	%edx, %esi
	movl	%esi, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	movq	-16(%rbp), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	24(%rax), %esi
	shll	$3, %edx
	andl	$-9, %esi
	orl	%edx, %esi
	movl	%esi, 24(%rax)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB140_14
# BB#12:                                # %land.lhs.true.110
	cmpl	$1, -20(%rbp)
	jne	.LBB140_14
# BB#13:                                # %if.then.113
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	jmp	.LBB140_15
.LBB140_14:                             # %if.else.134
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
.LBB140_15:                             # %if.end.159
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movl	2388(%rcx), %edx
	movq	-8(%rbp), %rcx
	cmpl	2372(%rcx), %edx
	movb	%al, -33(%rbp)          # 1-byte Spill
	jg	.LBB140_17
# BB#16:                                # %lor.rhs
	movq	-8(%rbp), %rax
	movl	2392(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	2376(%rax), %ecx
	setg	%dl
	movb	%dl, -33(%rbp)          # 1-byte Spill
.LBB140_17:                             # %lor.end
	movb	-33(%rbp), %al          # 1-byte Reload
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	24(%rcx), %esi
	shll	$6, %edx
	andl	$-65, %esi
	orl	%edx, %esi
	movl	%esi, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	andl	$-129, %edx
	movl	%edx, 24(%rcx)
	movq	-16(%rbp), %rcx
	movl	24(%rcx), %edx
	andl	$-257, %edx             # imm = 0xFFFFFFFFFFFFFEFF
	movl	%edx, 24(%rcx)
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %edx
	movq	-16(%rbp), %rcx
	movl	28(%rcx), %esi
	andl	$1048575, %edx          # imm = 0xFFFFF
	andl	$-1048576, %esi         # imm = 0xFFFFFFFFFFF00000
	orl	%edx, %esi
	movl	%esi, 28(%rcx)
	movq	-16(%rbp), %rcx
	movl	28(%rcx), %edx
	andl	$-7340033, %edx         # imm = 0xFFFFFFFFFF8FFFFF
	movl	%edx, 28(%rcx)
	movq	-8(%rbp), %rcx
	movl	2456(%rcx), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB140_19
# BB#18:                                # %if.then.187
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	andl	$127, %ecx
	shll	$10, %ecx
	andl	$-130049, %edx          # imm = 0xFFFFFFFFFFFE03FF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	2504(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	andl	$7, %ecx
	shll	$17, %ecx
	andl	$-917505, %edx          # imm = 0xFFFFFFFFFFF1FFFF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
.LBB140_19:                             # %if.end.202
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movw	32(%rcx,%rax,2), %dx
	addw	$1, %dx
	movw	%dx, 32(%rcx,%rax,2)
	jmp	.LBB140_24
.LBB140_20:                             # %if.else.207
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB140_23
# BB#21:                                # %land.lhs.true.212
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	cmpq	(%rsi,%rcx,8), %rax
	jae	.LBB140_23
# BB#22:                                # %if.then.224
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	348(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 348(%rax)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rdx
	andq	$-65, %rdx
	orq	$64, %rdx
	movq	%rdx, 208(%rax)
.LBB140_23:                             # %if.end.231
	jmp	.LBB140_24
.LBB140_24:                             # %if.end.232
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end140:
	.size	append_composite_glyph, .Lfunc_end140-append_composite_glyph
	.cfi_endproc

	.align	16, 0x90
	.type	produce_image_glyph,@function
produce_image_glyph:                    # @produce_image_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp433:
	.cfi_def_cfa_offset 16
.Ltmp434:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp435:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	testb	$1, %al
	jne	.LBB141_1
	jmp	.LBB141_2
.LBB141_1:                              # %cond.true
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB141_3
	jmp	.LBB141_4
.LBB141_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB141_4
.LBB141_3:                              # %cond.true.11
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB141_5
.LBB141_4:                              # %cond.false.15
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	jmp	.LBB141_5
.LBB141_5:                              # %cond.end
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	prepare_face_for_display
	movq	-8(%rbp), %rax
	cmpq	$0, 2216(%rax)
	jge	.LBB141_7
# BB#6:                                 # %if.then
	movq	-8(%rbp), %rax
	movl	$0, 2388(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2372(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2392(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2368(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 2364(%rax)
	jmp	.LBB141_96
.LBB141_7:                              # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 2216(%rax)
	jl	.LBB141_10
# BB#8:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	2216(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB141_10
# BB#9:                                 # %cond.true.27
	movq	-8(%rbp), %rax
	movq	2216(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB141_11
.LBB141_10:                             # %cond.false.33
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	jmp	.LBB141_11
.LBB141_11:                             # %cond.end.34
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-16(%rbp), %rsi
	callq	prepare_image_for_display
	movabsq	$-4294901761, %rax      # imm = 0xFFFFFFFF0000FFFF
	andq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	andq	$-65536, %rax           # imm = 0xFFFFFFFFFFFF0000
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rsi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$32, %rax
	movabsq	$-281470681743361, %rdi # imm = 0xFFFF0000FFFFFFFF
	andq	%rdi, %rsi
	orq	%rax, %rsi
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rsi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$48, %rax
	movabsq	$281474976710655, %rdi  # imm = 0xFFFFFFFFFFFF
	andq	%rdi, %rsi
	orq	%rax, %rsi
	movq	%rsi, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	2232(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB141_13
# BB#12:                                # %if.then.52
	movq	-8(%rbp), %rax
	movq	2232(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	andq	$-65536, %rdx           # imm = 0xFFFFFFFFFFFF0000
	orq	%rax, %rdx
	movq	%rdx, -40(%rbp)
	jmp	.LBB141_16
.LBB141_13:                             # %if.else
	movq	-8(%rbp), %rax
	movq	2232(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB141_15
# BB#14:                                # %if.then.67
	movq	-8(%rbp), %rax
	movq	2232(%rax), %rdi
	callq	XFLOAT_DATA
	movq	-16(%rbp), %rax
	cvtsi2sdl	92(%rax), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdi
	andq	$65535, %rax            # imm = 0xFFFF
	andq	$-65536, %rdi           # imm = 0xFFFFFFFFFFFF0000
	orq	%rax, %rdi
	movq	%rdi, -40(%rbp)
.LBB141_15:                             # %if.end.78
	jmp	.LBB141_16
.LBB141_16:                             # %if.end.79
	movq	-8(%rbp), %rax
	movq	2240(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB141_18
# BB#17:                                # %if.then.86
	movq	-8(%rbp), %rax
	movq	2240(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$16, %rax
	movabsq	$-4294901761, %rsi      # imm = 0xFFFFFFFF0000FFFF
	andq	%rsi, %rdx
	orq	%rax, %rdx
	movq	%rdx, -40(%rbp)
	jmp	.LBB141_21
.LBB141_18:                             # %if.else.97
	movq	-8(%rbp), %rax
	movq	2240(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB141_20
# BB#19:                                # %if.then.104
	movq	-8(%rbp), %rax
	movq	2240(%rax), %rdi
	callq	XFLOAT_DATA
	movq	-16(%rbp), %rax
	cvtsi2sdl	96(%rax), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$16, %rax
	movabsq	$-4294901761, %rdx      # imm = 0xFFFFFFFF0000FFFF
	andq	%rdx, %rdi
	orq	%rax, %rdi
	movq	%rdi, -40(%rbp)
.LBB141_20:                             # %if.end.118
	jmp	.LBB141_21
.LBB141_21:                             # %if.end.119
	movq	-8(%rbp), %rax
	movq	2248(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB141_23
# BB#22:                                # %if.then.127
	movq	-8(%rbp), %rax
	movq	2248(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$32, %rax
	movabsq	$-281470681743361, %rsi # imm = 0xFFFF0000FFFFFFFF
	andq	%rsi, %rdx
	orq	%rax, %rdx
	movq	%rdx, -40(%rbp)
	jmp	.LBB141_26
.LBB141_23:                             # %if.else.138
	movq	-8(%rbp), %rax
	movq	2248(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB141_25
# BB#24:                                # %if.then.145
	movq	-8(%rbp), %rax
	movq	2248(%rax), %rdi
	callq	XFLOAT_DATA
	movq	-16(%rbp), %rax
	cvtsi2sdl	92(%rax), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$32, %rax
	movabsq	$-281470681743361, %rdx # imm = 0xFFFF0000FFFFFFFF
	andq	%rdx, %rdi
	orq	%rax, %rdi
	movq	%rdi, -40(%rbp)
.LBB141_25:                             # %if.end.159
	jmp	.LBB141_26
.LBB141_26:                             # %if.end.160
	movq	-8(%rbp), %rax
	movq	2256(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB141_28
# BB#27:                                # %if.then.168
	movq	-8(%rbp), %rax
	movq	2256(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$48, %rax
	movabsq	$281474976710655, %rsi  # imm = 0xFFFFFFFFFFFF
	andq	%rsi, %rdx
	orq	%rax, %rdx
	movq	%rdx, -40(%rbp)
	jmp	.LBB141_31
.LBB141_28:                             # %if.else.179
	movq	-8(%rbp), %rax
	movq	2256(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB141_30
# BB#29:                                # %if.then.186
	movq	-8(%rbp), %rax
	movq	2256(%rax), %rdi
	callq	XFLOAT_DATA
	movq	-16(%rbp), %rax
	cvtsi2sdl	96(%rax), %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %rax
	movl	%eax, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$48, %rax
	movabsq	$281474976710655, %rdx  # imm = 0xFFFFFFFFFFFF
	andq	%rdx, %rdi
	orq	%rax, %rdi
	movq	%rdi, -40(%rbp)
.LBB141_30:                             # %if.end.200
	jmp	.LBB141_31
.LBB141_31:                             # %if.end.201
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	cmpl	92(%rax), %ecx
	jl	.LBB141_33
# BB#32:                                # %if.then.207
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	andq	$-65536, %rdx           # imm = 0xFFFFFFFFFFFF0000
	orq	%rax, %rdx
	movq	%rdx, -40(%rbp)
.LBB141_33:                             # %if.end.214
	movq	-40(%rbp), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	cmpl	96(%rax), %ecx
	jl	.LBB141_35
# BB#34:                                # %if.then.221
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rdx
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$16, %rax
	movabsq	$-4294901761, %rsi      # imm = 0xFFFFFFFF0000FFFF
	andq	%rsi, %rdx
	orq	%rax, %rdx
	movq	%rdx, -40(%rbp)
.LBB141_35:                             # %if.end.229
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	cmpl	92(%rax), %ecx
	jl	.LBB141_37
# BB#36:                                # %if.then.241
	movq	-16(%rbp), %rax
	movl	92(%rax), %ecx
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %edx
	subl	%edx, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rsi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$32, %rax
	movabsq	$-281470681743361, %rdi # imm = 0xFFFF0000FFFFFFFF
	andq	%rdi, %rsi
	orq	%rax, %rsi
	movq	%rsi, -40(%rbp)
.LBB141_37:                             # %if.end.252
	movq	-40(%rbp), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-40(%rbp), %rax
	shrq	$48, %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	cmpl	96(%rax), %ecx
	jle	.LBB141_39
# BB#38:                                # %if.then.264
	movq	-16(%rbp), %rax
	movl	96(%rax), %ecx
	movq	-40(%rbp), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %edx
	subl	%edx, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-40(%rbp), %rsi
	andq	$65535, %rax            # imm = 0xFFFF
	shlq	$48, %rax
	movabsq	$281474976710655, %rdi  # imm = 0xFFFFFFFFFFFF
	andq	%rdi, %rsi
	orq	%rax, %rsi
	movq	%rsi, -40(%rbp)
.LBB141_39:                             # %if.end.277
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB141_41
# BB#40:                                # %lor.lhs.false
	movq	-40(%rbp), %rax
	shrq	$48, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB141_42
.LBB141_41:                             # %if.then.289
	jmp	.LBB141_96
.LBB141_42:                             # %if.end.290
	leaq	-40(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	image_ascent
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rdx
	movl	%eax, 2388(%rdx)
	movq	-8(%rbp), %rdx
	movl	%eax, 2372(%rdx)
	movq	-40(%rbp), %rdx
	shrq	$48, %rdx
	movl	%edx, %eax
	subl	-28(%rbp), %eax
	movq	-8(%rbp), %rdx
	movl	%eax, 2376(%rdx)
	movq	-40(%rbp), %rdx
	shrq	$16, %rdx
	andq	$65535, %rdx            # imm = 0xFFFF
	movl	%edx, %eax
	cmpl	$0, %eax
	jne	.LBB141_44
# BB#43:                                # %if.then.305
	movq	-16(%rbp), %rax
	movl	144(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, 2376(%rax)
.LBB141_44:                             # %if.end.308
	movq	-40(%rbp), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-40(%rbp), %rax
	shrq	$48, %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	cmpl	96(%rax), %ecx
	jne	.LBB141_46
# BB#45:                                # %if.then.320
	movq	-16(%rbp), %rax
	movl	144(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, 2376(%rax)
.LBB141_46:                             # %if.end.324
	movq	-8(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2368(%rax)
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB141_48
# BB#47:                                # %if.then.337
	movq	-16(%rbp), %rax
	movl	140(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2368(%rax), %ecx
	movl	%ecx, 2368(%rax)
.LBB141_48:                             # %if.end.340
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	cmpl	92(%rax), %ecx
	jne	.LBB141_50
# BB#49:                                # %if.then.352
	movq	-16(%rbp), %rax
	movl	140(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2368(%rax), %ecx
	movl	%ecx, 2368(%rax)
.LBB141_50:                             # %if.end.356
	movq	-8(%rbp), %rax
	cmpl	$0, 2376(%rax)
	jge	.LBB141_52
# BB#51:                                # %if.then.360
	movq	-8(%rbp), %rax
	movl	$0, 2376(%rax)
.LBB141_52:                             # %if.end.362
	movq	-8(%rbp), %rax
	movl	$1, 2364(%rax)
	movq	-24(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB141_72
# BB#53:                                # %if.then.368
	movq	-24(%rbp), %rax
	cmpl	$0, 236(%rax)
	jle	.LBB141_59
# BB#54:                                # %if.then.371
	movq	-40(%rbp), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB141_56
# BB#55:                                # %if.then.378
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2372(%rax), %ecx
	movl	%ecx, 2372(%rax)
.LBB141_56:                             # %if.end.382
	movq	-40(%rbp), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-40(%rbp), %rax
	shrq	$48, %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	cmpl	96(%rax), %ecx
	jne	.LBB141_58
# BB#57:                                # %if.then.394
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2376(%rax), %ecx
	movl	%ecx, 2376(%rax)
.LBB141_58:                             # %if.end.398
	jmp	.LBB141_59
.LBB141_59:                             # %if.end.399
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB141_65
# BB#60:                                # %land.lhs.true.405
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB141_65
# BB#61:                                # %if.then.411
	movq	-24(%rbp), %rax
	cmpl	$0, 236(%rax)
	jge	.LBB141_63
# BB#62:                                # %cond.true.415
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	subl	236(%rcx), %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB141_64
.LBB141_63:                             # %cond.false.418
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
.LBB141_64:                             # %cond.end.420
	movl	-84(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB141_65:                             # %if.end.424
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB141_71
# BB#66:                                # %land.lhs.true.430
	movq	-40(%rbp), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	cmpl	92(%rax), %ecx
	jne	.LBB141_71
# BB#67:                                # %if.then.442
	movq	-24(%rbp), %rax
	cmpl	$0, 236(%rax)
	jge	.LBB141_69
# BB#68:                                # %cond.true.446
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	subl	236(%rcx), %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB141_70
.LBB141_69:                             # %cond.false.449
	movq	-24(%rbp), %rax
	movl	236(%rax), %ecx
	movl	%ecx, -88(%rbp)         # 4-byte Spill
.LBB141_70:                             # %cond.end.451
	movl	-88(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	addl	2368(%rcx), %eax
	movl	%eax, 2368(%rcx)
.LBB141_71:                             # %if.end.455
	jmp	.LBB141_72
.LBB141_72:                             # %if.end.456
	movq	-8(%rbp), %rdi
	callq	take_vertical_position_into_account
	movq	-8(%rbp), %rdi
	movl	2368(%rdi), %eax
	movq	-8(%rbp), %rdi
	movl	2320(%rdi), %ecx
	movq	-8(%rbp), %rdi
	subl	2404(%rdi), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jle	.LBB141_76
# BB#73:                                # %land.lhs.true.462
	movq	-8(%rbp), %rax
	cmpl	$0, 2444(%rax)
	je	.LBB141_75
# BB#74:                                # %lor.lhs.false.465
	movl	$4, %eax
	movq	-8(%rbp), %rcx
	movl	2368(%rcx), %edx
	movq	-8(%rbp), %rcx
	movl	2320(%rcx), %esi
	movl	%eax, -92(%rbp)         # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -96(%rbp)         # 4-byte Spill
	cltd
	movl	-92(%rbp), %esi         # 4-byte Reload
	idivl	%esi
	movl	-96(%rbp), %edi         # 4-byte Reload
	cmpl	%eax, %edi
	jle	.LBB141_76
.LBB141_75:                             # %if.then.470
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	2368(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 2368(%rcx)
	movl	-32(%rbp), %eax
	movq	-40(%rbp), %rcx
	shrq	$32, %rcx
	andq	$65535, %rcx            # imm = 0xFFFF
	movl	%ecx, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	-40(%rbp), %rsi
	andq	$65535, %rcx            # imm = 0xFFFF
	shlq	$32, %rcx
	movabsq	$-281470681743361, %rdi # imm = 0xFFFF0000FFFFFFFF
	andq	%rdi, %rsi
	orq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB141_76:                             # %if.end.484
	movq	-8(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB141_96
# BB#77:                                # %if.then.485
	movq	-8(%rbp), %rax
	movl	2360(%rax), %ecx
	movl	%ecx, -52(%rbp)
	movslq	-52(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	movq	(%rdx,%rax,8), %rax
	movslq	-52(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movswl	32(%rsi,%rdx,2), %ecx
	movslq	%ecx, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB141_83
# BB#78:                                # %if.then.500
	movq	-48(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
.LBB141_79:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	movslq	2360(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	cmpq	(%rdx,%rcx,8), %rax
	jb	.LBB141_82
# BB#80:                                # %for.body
                                        #   in Loop: Header=BB141_79 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-64(%rbp), %rcx
	addq	$48, %rcx
	movq	-64(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#81:                                # %for.inc
                                        #   in Loop: Header=BB141_79 Depth=1
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB141_79
.LBB141_82:                             # %for.end
	movq	-8(%rbp), %rax
	movslq	2360(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -48(%rbp)
.LBB141_83:                             # %if.end.515
	movq	-48(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	cmpq	(%rsi,%rdx,8), %rax
	jae	.LBB141_91
# BB#84:                                # %if.then.523
	movq	$-1, %rdi
	movl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, %edx
	movq	-8(%rbp), %rcx
	movq	2296(%rcx), %rcx
	movq	-48(%rbp), %rsi
	movq	%rcx, (%rsi)
	movq	-8(%rbp), %rcx
	movq	2288(%rcx), %rcx
	movq	-48(%rbp), %rsi
	movq	%rcx, 8(%rsi)
	movq	-8(%rbp), %rcx
	movslq	2368(%rcx), %rsi
	callq	clip_to_bounds
	movw	%ax, %r8w
	movq	-48(%rbp), %rax
	movw	%r8w, 16(%rax)
	movl	-28(%rbp), %r9d
	movw	%r9w, %r8w
	movq	-48(%rbp), %rax
	movw	%r8w, 18(%rax)
	movq	-8(%rbp), %rax
	movl	2376(%rax), %r9d
	movw	%r9w, %r8w
	movq	-48(%rbp), %rax
	movw	%r8w, 20(%rax)
	movq	-8(%rbp), %rax
	movw	2272(%rax), %r8w
	movq	-48(%rbp), %rax
	movw	%r8w, 22(%rax)
	movq	-48(%rbp), %rax
	movl	24(%rax), %r9d
	andl	$-8, %r9d
	orl	$3, %r9d
	movl	%r9d, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %r10b
	shrb	$6, %r10b
	andb	$1, %r10b
	movq	-48(%rbp), %rax
	andb	$1, %r10b
	movzbl	%r10b, %r9d
	movl	24(%rax), %r11d
	shll	$9, %r9d
	andl	$-513, %r11d            # imm = 0xFFFFFFFFFFFFFDFF
	orl	%r9d, %r11d
	movl	%r11d, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %r10b
	andb	$1, %r10b
	movq	-48(%rbp), %rax
	andb	$1, %r10b
	movzbl	%r10b, %r9d
	movl	24(%rax), %r11d
	shll	$3, %r9d
	andl	$-9, %r11d
	orl	%r9d, %r11d
	movl	%r11d, 24(%rax)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB141_87
# BB#85:                                # %land.lhs.true.568
	cmpl	$1, -52(%rbp)
	jne	.LBB141_87
# BB#86:                                # %if.then.571
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-48(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-48(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	jmp	.LBB141_88
.LBB141_87:                             # %if.else.594
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-48(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-48(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
.LBB141_88:                             # %if.end.619
	movq	-48(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-65, %ecx
	movl	%ecx, 24(%rax)
	movq	-48(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-129, %ecx
	movl	%ecx, 24(%rax)
	movq	-48(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$-257, %ecx             # imm = 0xFFFFFFFFFFFFFEFF
	movl	%ecx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-48(%rbp), %rax
	movl	28(%rax), %edx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	andl	$-1048576, %edx         # imm = 0xFFFFFFFFFFF00000
	orl	%ecx, %edx
	movl	%edx, 28(%rax)
	movq	-16(%rbp), %rax
	movq	184(%rax), %rax
	movl	%eax, %ecx
	movq	-48(%rbp), %rax
	movl	%ecx, 40(%rax)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rsi
	movq	%rsi, 32(%rax)
	movq	-48(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$-7340033, %ecx         # imm = 0xFFFFFFFFFF8FFFFF
	movl	%ecx, 28(%rax)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB141_90
# BB#89:                                # %if.then.641
	movq	-8(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-48(%rbp), %rax
	movl	24(%rax), %edx
	andl	$127, %ecx
	shll	$10, %ecx
	andl	$-130049, %edx          # imm = 0xFFFFFFFFFFFE03FF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	2504(%rax), %ecx
	movq	-48(%rbp), %rax
	movl	24(%rax), %edx
	andl	$7, %ecx
	shll	$17, %ecx
	andl	$-917505, %edx          # imm = 0xFFFFFFFFFFF1FFFF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
.LBB141_90:                             # %if.end.656
	movslq	-52(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movw	32(%rcx,%rax,2), %dx
	addw	$1, %dx
	movw	%dx, 32(%rcx,%rax,2)
	jmp	.LBB141_95
.LBB141_91:                             # %if.else.661
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB141_94
# BB#92:                                # %land.lhs.true.667
	movslq	-52(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movl	-52(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	cmpq	(%rsi,%rcx,8), %rax
	jae	.LBB141_94
# BB#93:                                # %if.then.679
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	348(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 348(%rax)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rdx
	andq	$-65, %rdx
	orq	$64, %rdx
	movq	%rdx, 208(%rax)
.LBB141_94:                             # %if.end.686
	jmp	.LBB141_95
.LBB141_95:                             # %if.end.687
	jmp	.LBB141_96
.LBB141_96:                             # %if.end.688
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end141:
	.size	produce_image_glyph, .Lfunc_end141-produce_image_glyph
	.cfi_endproc

	.align	16, 0x90
	.type	produce_xwidget_glyph,@function
produce_xwidget_glyph:                  # @produce_xwidget_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp436:
	.cfi_def_cfa_offset 16
.Ltmp437:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp438:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
.Lfunc_end142:
	.size	produce_xwidget_glyph, .Lfunc_end142-produce_xwidget_glyph
	.cfi_endproc

	.globl	x_write_glyphs
	.align	16, 0x90
	.type	x_write_glyphs,@function
x_write_glyphs:                         # @x_write_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp439:
	.cfi_def_cfa_offset 16
.Ltmp440:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp441:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	-8(%rbp), %rdx
	movl	376(%rdx), %ecx
	movl	%ecx, -44(%rbp)
	movq	-16(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$34, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	jne	.LBB143_3
# BB#1:                                 # %land.lhs.true
	cmpl	$0, -44(%rbp)
	jge	.LBB143_3
# BB#2:                                 # %if.then
	movl	$0, -44(%rbp)
.LBB143_3:                              # %if.end
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB143_6
# BB#4:                                 # %land.lhs.true.7
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jl	.LBB143_6
# BB#5:                                 # %if.then.10
	movq	-16(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -44(%rbp)
.LBB143_6:                              # %if.end.14
	callq	block_input
	xorl	%eax, %eax
	movl	$48, %ecx
	movl	%ecx, %edx
	movq	-24(%rbp), %rsi
	movslq	-28(%rbp), %rdi
	movq	-16(%rbp), %r8
	movq	(%r8,%rdi,8), %rdi
	subq	%rdi, %rsi
	movl	%eax, -48(%rbp)         # 4-byte Spill
	movq	%rsi, %rax
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	cqto
	movq	-56(%rbp), %rsi         # 8-byte Reload
	idivq	%rsi
	movl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	384(%rax), %esi
	movq	-16(%rbp), %rax
	movl	-28(%rbp), %ecx
	movslq	-40(%rbp), %r8
	movl	-40(%rbp), %r9d
	addl	-32(%rbp), %r9d
	movslq	%r9d, %r9
	movq	%rax, %rdx
	movl	$0, (%rsp)
	movl	$0, 8(%rsp)
	callq	draw_glyphs
	movl	%eax, -36(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB143_12
# BB#7:                                 # %land.lhs.true.22
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB143_12
# BB#8:                                 # %land.lhs.true.28
	movq	-8(%rbp), %rax
	movl	380(%rax), %ecx
	movq	-8(%rbp), %rax
	cmpl	396(%rax), %ecx
	jne	.LBB143_12
# BB#9:                                 # %land.lhs.true.34
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.LBB143_12
# BB#10:                                # %land.lhs.true.37
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_12
# BB#11:                                # %if.then.41
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-129, %cx
	movw	%cx, 468(%rax)
.LBB143_12:                             # %if.end.45
	callq	unblock_input
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	addl	392(%rcx), %eax
	movl	%eax, 392(%rcx)
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 384(%rcx)
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end143:
	.size	x_write_glyphs, .Lfunc_end143-x_write_glyphs
	.cfi_endproc

	.align	16, 0x90
	.type	draw_glyphs,@function
draw_glyphs:                            # @draw_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp442:
	.cfi_def_cfa_offset 16
.Ltmp443:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp444:
	.cfi_def_cfa_register %rbp
	subq	$1024, %rsp             # imm = 0x400
	movl	24(%rbp), %eax
	movl	16(%rbp), %r10d
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movl	%r10d, -52(%rbp)
	movl	%eax, -56(%rbp)
	movq	$0, -88(%rbp)
	movq	$0, -96(%rbp)
	movl	$0, -116(%rbp)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	%rdx, -128(%rbp)
	movq	-48(%rbp), %rdx
	movslq	-28(%rbp), %rdi
	movq	-24(%rbp), %r8
	movswq	32(%r8,%rdi,2), %rdi
	cmpq	%rdi, %rdx
	jge	.LBB144_2
# BB#1:                                 # %cond.true
	movq	-48(%rbp), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	jmp	.LBB144_3
.LBB144_2:                              # %cond.false
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	movswq	32(%rcx,%rax,2), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
.LBB144_3:                              # %cond.end
	movq	-768(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edi
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	clip_to_bounds
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB144_12
# BB#4:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	240(%rax), %ecx
	movl	%ecx, -116(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	movl	%ecx, -772(%rbp)        # 4-byte Spill
	je	.LBB144_10
# BB#5:                                 # %cond.true.19
	movq	-8(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -776(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -780(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-780(%rbp), %ecx        # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-776(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB144_7
# BB#6:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB144_8
.LBB144_7:                              # %cond.true.39
	xorl	%eax, %eax
	movl	%eax, -784(%rbp)        # 4-byte Spill
	jmp	.LBB144_9
.LBB144_8:                              # %cond.false.40
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -784(%rbp)        # 4-byte Spill
.LBB144_9:                              # %cond.end.43
	movl	-784(%rbp), %eax        # 4-byte Reload
	movl	%eax, -788(%rbp)        # 4-byte Spill
	jmp	.LBB144_11
.LBB144_10:                             # %cond.false.45
	xorl	%eax, %eax
	movl	%eax, -788(%rbp)        # 4-byte Spill
	jmp	.LBB144_11
.LBB144_11:                             # %cond.end.46
	movl	-788(%rbp), %eax        # 4-byte Reload
	movl	-772(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	jmp	.LBB144_13
.LBB144_12:                             # %if.else
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	window_box_left
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	%eax, -792(%rbp)        # 4-byte Spill
	callq	window_box_width
	movl	-792(%rbp), %esi        # 4-byte Reload
	addl	%eax, %esi
	movl	%esi, -112(%rbp)
.LBB144_13:                             # %if.end
	movl	-116(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movq	$16384, -136(%rbp)      # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -144(%rbp)
	movb	$0, -145(%rbp)
# BB#14:                                # %do.body
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
.LBB144_15:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_46 Depth 2
	movslq	-100(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jge	.LBB144_67
# BB#16:                                # %while.body
                                        #   in Loop: Header=BB144_15 Depth=1
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movslq	-100(%rbp), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -160(%rbp)
	movl	24(%rax,%rcx), %esi
	movl	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edi
	andl	$7, %edi
	andl	$7, %esi
	movl	%esi, %eax
	subl	$5, %edi
	movq	%rax, -800(%rbp)        # 8-byte Spill
	movl	%edi, -804(%rbp)        # 4-byte Spill
	ja	.LBB144_63
# BB#422:                               # %while.body
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	.LJTI144_4(,%rax,8), %rcx
	jmpq	*%rcx
.LBB144_17:                             # %sw.bb
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_18
.LBB144_18:                             # %do.body.62
                                        #   in Loop: Header=BB144_15 Depth=1
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -164(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#19:                                # %do.body.71
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-48(%rbp), %rax
	movslq	-100(%rbp), %rcx
	subq	%rcx, %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_21
# BB#20:                                # %if.then.77
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-48(%rbp), %rax
	movslq	-100(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-48(%rbp), %rax
	movslq	-100(%rbp), %rcx
	subq	%rcx, %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -176(%rbp)
	jmp	.LBB144_22
.LBB144_21:                             # %if.else.84
                                        #   in Loop: Header=BB144_15 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -176(%rbp)
	movb	$1, -145(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_22:                             # %if.end.88
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_23
.LBB144_23:                             # %do.end
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-80(%rbp), %rdi
	movq	-176(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-52(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-164(%rbp), %esi
	movl	-100(%rbp), %edx
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_glyph_string
	movl	%eax, -100(%rbp)
# BB#24:                                # %do.end.92
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_64
.LBB144_25:                             # %sw.bb.93
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-160(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB144_34
# BB#26:                                # %if.then.98
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_27
.LBB144_27:                             # %do.body.99
                                        #   in Loop: Header=BB144_15 Depth=1
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -180(%rbp)
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	40(%rcx,%rax), %esi
	shrl	%esi
	movl	%esi, %edi
	callq	composition_gstring_from_id
	movq	%rax, -200(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#28:                                # %do.body.121
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-200(%rbp), %rdi
	callq	ASIZE
	subq	$2, %rax
	movq	-136(%rbp), %rdi
	shrq	$1, %rdi
	shrq	$0, %rdi
	cmpq	%rdi, %rax
	ja	.LBB144_30
# BB#29:                                # %if.then.128
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-200(%rbp), %rdi
	callq	ASIZE
	leaq	-4(%rax,%rax), %rax
	movq	-136(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -136(%rbp)
	movq	-200(%rbp), %rdi
	callq	ASIZE
	leaq	11(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rdi
	subq	%rax, %rdi
	movq	%rdi, %rsp
	movq	%rdi, -192(%rbp)
	jmp	.LBB144_31
.LBB144_30:                             # %if.else.136
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-200(%rbp), %rdi
	callq	ASIZE
	movl	$2, %ecx
	movl	%ecx, %esi
	subq	$2, %rax
	movq	%rax, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -192(%rbp)
	movb	$1, -145(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_31:                             # %if.end.140
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_32
.LBB144_32:                             # %do.end.141
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-80(%rbp), %rdi
	movq	-192(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-52(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-180(%rbp), %esi
	movl	-100(%rbp), %edx
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_gstring_glyph_string
	movl	%eax, -100(%rbp)
# BB#33:                                # %do.end.145
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_52
.LBB144_34:                             # %if.else.146
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_35
.LBB144_35:                             # %do.body.147
                                        #   in Loop: Header=BB144_15 Depth=1
	movb	$1, %al
	movslq	-100(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rsi
	imulq	$48, %rcx, %rcx
	addq	(%rsi,%rdx,8), %rcx
	movl	28(%rcx), %edi
	andl	$1048575, %edi          # imm = 0xFFFFF
	movl	%edi, -204(%rbp)
	testb	$1, %al
	jne	.LBB144_36
	jmp	.LBB144_37
.LBB144_36:                             # %cond.true.157
                                        #   in Loop: Header=BB144_15 Depth=1
	movl	-204(%rbp), %eax
	addl	$0, %eax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB144_38
	jmp	.LBB144_39
.LBB144_37:                             # %cond.false.163
                                        #   in Loop: Header=BB144_15 Depth=1
	movslq	-204(%rbp), %rax
	addq	$0, %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB144_39
.LBB144_38:                             # %cond.true.172
                                        #   in Loop: Header=BB144_15 Depth=1
	movslq	-204(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	jmp	.LBB144_40
.LBB144_39:                             # %cond.false.176
                                        #   in Loop: Header=BB144_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	jmp	.LBB144_40
.LBB144_40:                             # %cond.end.177
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	40(%rax), %esi
	shrl	$1, %esi
	movl	%esi, %esi
	movl	%esi, %eax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -232(%rbp)
	movq	$0, -248(%rbp)
# BB#41:                                # %do.body.192
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-232(%rbp), %rax
	movslq	(%rax), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_43
# BB#42:                                # %if.then.198
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-232(%rbp), %rax
	movslq	(%rax), %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-232(%rbp), %rax
	movslq	(%rax), %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -240(%rbp)
	jmp	.LBB144_44
.LBB144_43:                             # %if.else.206
                                        #   in Loop: Header=BB144_15 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-232(%rbp), %rcx
	movslq	(%rcx), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -240(%rbp)
	movb	$1, -145(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_44:                             # %if.end.210
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_45
.LBB144_45:                             # %do.end.211
                                        #   in Loop: Header=BB144_15 Depth=1
	movl	$0, -252(%rbp)
.LBB144_46:                             # %for.cond
                                        #   Parent Loop BB144_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-252(%rbp), %eax
	movq	-232(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB144_50
# BB#47:                                # %for.body
                                        #   in Loop: Header=BB144_46 Depth=2
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-240(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-52(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-232(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movl	-252(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, 128(%rax)
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	cmpl	$0, -252(%rbp)
	jne	.LBB144_49
# BB#48:                                # %if.then.219
                                        #   in Loop: Header=BB144_46 Depth=2
	movq	-80(%rbp), %rax
	movq	%rax, -248(%rbp)
.LBB144_49:                             # %if.end.220
                                        #   in Loop: Header=BB144_46 Depth=2
	movq	-80(%rbp), %rdi
	movq	-216(%rbp), %rsi
	movl	-56(%rbp), %edx
	callq	fill_composite_glyph_string
	movl	%eax, -252(%rbp)
	jmp	.LBB144_46
.LBB144_50:                             # %for.end
                                        #   in Loop: Header=BB144_15 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movq	-248(%rbp), %rcx
	movq	%rcx, -80(%rbp)
# BB#51:                                # %do.end.222
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_52
.LBB144_52:                             # %if.end.223
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_64
.LBB144_53:                             # %sw.bb.224
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_54
.LBB144_54:                             # %do.body.225
                                        #   in Loop: Header=BB144_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-52(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	movl	-100(%rbp), %esi
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	%eax, %edx
	callq	fill_stretch_glyph_string
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movl	%eax, -100(%rbp)
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#55:                                # %do.end.229
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_64
.LBB144_56:                             # %sw.bb.230
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_57
.LBB144_57:                             # %do.body.231
                                        #   in Loop: Header=BB144_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-52(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	callq	fill_image_glyph_string
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#58:                                # %do.end.234
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_64
.LBB144_59:                             # %sw.bb.235
.LBB144_60:                             # %sw.bb.236
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_61
.LBB144_61:                             # %do.body.237
                                        #   in Loop: Header=BB144_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movslq	-100(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rdi
	movq	(%rdi,%rdx,8), %rdx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movl	28(%rdx,%rcx), %eax
	andl	$1048575, %eax          # imm = 0xFFFFF
	movl	%eax, -256(%rbp)
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-52(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-256(%rbp), %esi
	movl	-100(%rbp), %edx
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_glyphless_glyph_string
	movl	%eax, -100(%rbp)
# BB#62:                                # %do.end.250
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_64
.LBB144_63:                             # %sw.default
	callq	emacs_abort
.LBB144_64:                             # %sw.epilog
                                        #   in Loop: Header=BB144_15 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_66
# BB#65:                                # %if.then.251
                                        #   in Loop: Header=BB144_15 Depth=1
	movq	-80(%rbp), %rdi
	movl	-100(%rbp), %esi
	movl	-112(%rbp), %edx
	callq	set_glyph_string_background_width
	movq	-80(%rbp), %rdi
	movl	12(%rdi), %edx
	addl	-12(%rbp), %edx
	movl	%edx, -12(%rbp)
.LBB144_66:                             # %if.end.253
                                        #   in Loop: Header=BB144_15 Depth=1
	jmp	.LBB144_15
.LBB144_67:                             # %while.end
	jmp	.LBB144_68
.LBB144_68:                             # %do.end.254
	cmpq	$0, -72(%rbp)
	je	.LBB144_70
# BB#69:                                # %if.then.256
	movq	-72(%rbp), %rax
	movl	(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	16(%rax), %ecx
	movl	%ecx, -108(%rbp)
	jmp	.LBB144_71
.LBB144_70:                             # %if.else.259
	movl	-12(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB144_71:                             # %if.end.260
	cmpq	$0, -64(%rbp)
	je	.LBB144_375
# BB#72:                                # %land.lhs.true
	cmpl	$0, -56(%rbp)
	jne	.LBB144_375
# BB#73:                                # %land.lhs.true.263
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$18, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB144_375
# BB#74:                                # %if.then.269
	movq	-128(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB144_76
# BB#75:                                # %cond.true.276
	movq	-128(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
	jmp	.LBB144_77
.LBB144_76:                             # %cond.false.278
	movq	-128(%rbp), %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
.LBB144_77:                             # %cond.end.282
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)
	movb	$0, -289(%rbp)
	movl	$0, -296(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB144_91
# BB#78:                                # %land.lhs.true.286
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$25, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB144_91
# BB#79:                                # %land.lhs.true.292
	movq	-280(%rbp), %rax
	cmpl	$0, (%rax)
	jl	.LBB144_91
# BB#80:                                # %land.lhs.true.295
	movq	-280(%rbp), %rax
	cmpl	$0, 12(%rax)
	jl	.LBB144_91
# BB#81:                                # %if.then.298
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rax
	movq	-280(%rbp), %rcx
	movslq	(%rcx), %rcx
	cmpq	%rcx, %rax
	jl	.LBB144_90
# BB#82:                                # %land.lhs.true.303
	movq	-304(%rbp), %rax
	movq	-280(%rbp), %rcx
	movslq	12(%rcx), %rcx
	cmpq	%rcx, %rax
	jg	.LBB144_90
# BB#83:                                # %if.then.308
	movb	$1, -289(%rbp)
	movq	-304(%rbp), %rax
	movq	-280(%rbp), %rcx
	movslq	(%rcx), %rcx
	cmpq	%rcx, %rax
	jne	.LBB144_85
# BB#84:                                # %cond.true.313
	movq	-280(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -828(%rbp)        # 4-byte Spill
	jmp	.LBB144_86
.LBB144_85:                             # %cond.false.314
	xorl	%eax, %eax
	movl	%eax, -828(%rbp)        # 4-byte Spill
	jmp	.LBB144_86
.LBB144_86:                             # %cond.end.315
	movl	-828(%rbp), %eax        # 4-byte Reload
	movl	%eax, -284(%rbp)
	movq	-304(%rbp), %rcx
	movq	-280(%rbp), %rdx
	movslq	12(%rdx), %rdx
	cmpq	%rdx, %rcx
	jne	.LBB144_88
# BB#87:                                # %cond.true.321
	movq	-280(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, -832(%rbp)        # 4-byte Spill
	jmp	.LBB144_89
.LBB144_88:                             # %cond.false.322
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -832(%rbp)        # 4-byte Spill
.LBB144_89:                             # %cond.end.326
	movl	-832(%rbp), %eax        # 4-byte Reload
	movl	%eax, -288(%rbp)
.LBB144_90:                             # %if.end.328
	jmp	.LBB144_91
.LBB144_91:                             # %if.end.329
	movq	-128(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	cmpq	$0, 128(%rax)
	je	.LBB144_97
# BB#92:                                # %if.then.331
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB144_93:                             # %for.cond.332
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_96
# BB#94:                                # %for.body.334
                                        #   in Loop: Header=BB144_93 Depth=1
	movq	-128(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	128(%rax), %rax
	movq	-80(%rbp), %rdi
	callq	*%rax
# BB#95:                                # %for.inc
                                        #   in Loop: Header=BB144_93 Depth=1
	movq	-80(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB144_93
.LBB144_96:                             # %for.end.338
	jmp	.LBB144_97
.LBB144_97:                             # %if.end.339
	movq	-64(%rbp), %rdi
	callq	left_overwritten
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	jl	.LBB144_163
# BB#98:                                # %if.then.343
	testb	$1, -289(%rbp)
	je	.LBB144_102
# BB#99:                                # %land.lhs.true.346
	movslq	-284(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB144_102
# BB#100:                               # %land.lhs.true.350
	movl	-288(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jle	.LBB144_102
# BB#101:                               # %if.then.353
	movl	$3, -308(%rbp)
	jmp	.LBB144_103
.LBB144_102:                            # %if.else.354
	movl	$0, -308(%rbp)
.LBB144_103:                            # %if.end.355
	movl	-52(%rbp), %eax
	cmpl	-308(%rbp), %eax
	je	.LBB144_105
# BB#104:                               # %if.then.358
	movq	-64(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB144_105:                            # %if.end.359
	movl	-100(%rbp), %eax
	movl	%eax, -104(%rbp)
# BB#106:                               # %do.body.360
	movq	$0, -272(%rbp)
	movq	$0, -264(%rbp)
.LBB144_107:                            # %while.cond.361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_138 Depth 2
	movslq	-104(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB144_159
# BB#108:                               # %while.body.365
                                        #   in Loop: Header=BB144_107 Depth=1
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movslq	-104(%rbp), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -320(%rbp)
	movl	24(%rax,%rcx), %esi
	movl	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edi
	andl	$7, %edi
	andl	$7, %esi
	movl	%esi, %eax
	subl	$5, %edi
	movq	%rax, -840(%rbp)        # 8-byte Spill
	movl	%edi, -844(%rbp)        # 4-byte Spill
	ja	.LBB144_155
# BB#421:                               # %while.body.365
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	.LJTI144_3(,%rax,8), %rcx
	jmpq	*%rcx
.LBB144_109:                            # %sw.bb.375
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_110
.LBB144_110:                            # %do.body.376
                                        #   in Loop: Header=BB144_107 Depth=1
	movslq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -324(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#111:                               # %do.body.387
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-40(%rbp), %rax
	movslq	-104(%rbp), %rcx
	subq	%rcx, %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_113
# BB#112:                               # %if.then.394
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-40(%rbp), %rax
	movslq	-104(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-40(%rbp), %rax
	movslq	-104(%rbp), %rcx
	subq	%rcx, %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -336(%rbp)
	jmp	.LBB144_114
.LBB144_113:                            # %if.else.402
                                        #   in Loop: Header=BB144_107 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -336(%rbp)
	movb	$1, -145(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_114:                            # %if.end.406
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_115
.LBB144_115:                            # %do.end.407
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-80(%rbp), %rdi
	movq	-336(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-104(%rbp), %r9d
	movl	-308(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-324(%rbp), %esi
	movl	-104(%rbp), %edx
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_glyph_string
	movl	%eax, -104(%rbp)
# BB#116:                               # %do.end.411
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_156
.LBB144_117:                            # %sw.bb.412
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-320(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB144_126
# BB#118:                               # %if.then.418
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_119
.LBB144_119:                            # %do.body.419
                                        #   in Loop: Header=BB144_107 Depth=1
	movslq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -340(%rbp)
	movslq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	40(%rcx,%rax), %esi
	shrl	%esi
	movl	%esi, %edi
	callq	composition_gstring_from_id
	movq	%rax, -360(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#120:                               # %do.body.442
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-360(%rbp), %rdi
	callq	ASIZE
	subq	$2, %rax
	movq	-136(%rbp), %rdi
	shrq	$1, %rdi
	shrq	$0, %rdi
	cmpq	%rdi, %rax
	ja	.LBB144_122
# BB#121:                               # %if.then.449
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-360(%rbp), %rdi
	callq	ASIZE
	leaq	-4(%rax,%rax), %rax
	movq	-136(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -136(%rbp)
	movq	-360(%rbp), %rdi
	callq	ASIZE
	leaq	11(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rdi
	subq	%rax, %rdi
	movq	%rdi, %rsp
	movq	%rdi, -352(%rbp)
	jmp	.LBB144_123
.LBB144_122:                            # %if.else.457
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-360(%rbp), %rdi
	callq	ASIZE
	movl	$2, %ecx
	movl	%ecx, %esi
	subq	$2, %rax
	movq	%rax, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -352(%rbp)
	movb	$1, -145(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_123:                            # %if.end.461
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_124
.LBB144_124:                            # %do.end.462
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-80(%rbp), %rdi
	movq	-352(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-104(%rbp), %r9d
	movl	-308(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-340(%rbp), %esi
	movl	-104(%rbp), %edx
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_gstring_glyph_string
	movl	%eax, -104(%rbp)
# BB#125:                               # %do.end.466
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_144
.LBB144_126:                            # %if.else.467
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_127
.LBB144_127:                            # %do.body.468
                                        #   in Loop: Header=BB144_107 Depth=1
	movb	$1, %al
	movslq	-104(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rsi
	imulq	$48, %rcx, %rcx
	addq	(%rsi,%rdx,8), %rcx
	movl	28(%rcx), %edi
	andl	$1048575, %edi          # imm = 0xFFFFF
	movl	%edi, -364(%rbp)
	testb	$1, %al
	jne	.LBB144_128
	jmp	.LBB144_129
.LBB144_128:                            # %cond.true.479
                                        #   in Loop: Header=BB144_107 Depth=1
	movl	-364(%rbp), %eax
	addl	$0, %eax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB144_130
	jmp	.LBB144_131
.LBB144_129:                            # %cond.false.486
                                        #   in Loop: Header=BB144_107 Depth=1
	movslq	-364(%rbp), %rax
	addq	$0, %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB144_131
.LBB144_130:                            # %cond.true.495
                                        #   in Loop: Header=BB144_107 Depth=1
	movslq	-364(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	jmp	.LBB144_132
.LBB144_131:                            # %cond.false.500
                                        #   in Loop: Header=BB144_107 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -856(%rbp)        # 8-byte Spill
	jmp	.LBB144_132
.LBB144_132:                            # %cond.end.501
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-856(%rbp), %rax        # 8-byte Reload
	movq	%rax, -376(%rbp)
	movslq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	40(%rax), %esi
	shrl	$1, %esi
	movl	%esi, %esi
	movl	%esi, %eax
	movq	%rax, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -392(%rbp)
	movq	$0, -408(%rbp)
# BB#133:                               # %do.body.519
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-392(%rbp), %rax
	movslq	(%rax), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_135
# BB#134:                               # %if.then.526
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-392(%rbp), %rax
	movslq	(%rax), %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-392(%rbp), %rax
	movslq	(%rax), %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -400(%rbp)
	jmp	.LBB144_136
.LBB144_135:                            # %if.else.534
                                        #   in Loop: Header=BB144_107 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-392(%rbp), %rcx
	movslq	(%rcx), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -400(%rbp)
	movb	$1, -145(%rbp)
	movq	-400(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_136:                            # %if.end.538
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_137
.LBB144_137:                            # %do.end.539
                                        #   in Loop: Header=BB144_107 Depth=1
	movl	$0, -412(%rbp)
.LBB144_138:                            # %for.cond.540
                                        #   Parent Loop BB144_107 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-412(%rbp), %eax
	movq	-392(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB144_142
# BB#139:                               # %for.body.544
                                        #   in Loop: Header=BB144_138 Depth=2
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-400(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-104(%rbp), %r9d
	movl	-308(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-392(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movl	-412(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, 128(%rax)
	movl	-296(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	cmpl	$0, -412(%rbp)
	jne	.LBB144_141
# BB#140:                               # %if.then.550
                                        #   in Loop: Header=BB144_138 Depth=2
	movq	-80(%rbp), %rax
	movq	%rax, -408(%rbp)
.LBB144_141:                            # %if.end.551
                                        #   in Loop: Header=BB144_138 Depth=2
	movq	-80(%rbp), %rdi
	movq	-376(%rbp), %rsi
	movl	-56(%rbp), %edx
	callq	fill_composite_glyph_string
	movl	%eax, -412(%rbp)
	jmp	.LBB144_138
.LBB144_142:                            # %for.end.553
                                        #   in Loop: Header=BB144_107 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movq	-408(%rbp), %rcx
	movq	%rcx, -80(%rbp)
# BB#143:                               # %do.end.555
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_144
.LBB144_144:                            # %if.end.556
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_156
.LBB144_145:                            # %sw.bb.557
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_146
.LBB144_146:                            # %do.body.558
                                        #   in Loop: Header=BB144_107 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-104(%rbp), %r9d
	movl	-308(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	movl	-104(%rbp), %esi
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	%eax, %edx
	callq	fill_stretch_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movl	%eax, -104(%rbp)
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#147:                               # %do.end.562
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_156
.LBB144_148:                            # %sw.bb.563
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_149
.LBB144_149:                            # %do.body.564
                                        #   in Loop: Header=BB144_107 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-104(%rbp), %r9d
	movl	-308(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	callq	fill_image_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#150:                               # %do.end.567
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_156
.LBB144_151:                            # %sw.bb.568
.LBB144_152:                            # %sw.bb.569
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_153
.LBB144_153:                            # %do.body.570
                                        #   in Loop: Header=BB144_107 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movslq	-104(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rdi
	movq	(%rdi,%rdx,8), %rdx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movl	28(%rdx,%rcx), %eax
	andl	$1048575, %eax          # imm = 0xFFFFF
	movl	%eax, -416(%rbp)
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-104(%rbp), %r9d
	movl	-308(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-416(%rbp), %esi
	movl	-104(%rbp), %edx
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_glyphless_glyph_string
	movl	%eax, -104(%rbp)
# BB#154:                               # %do.end.583
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_156
.LBB144_155:                            # %sw.default.584
	callq	emacs_abort
.LBB144_156:                            # %sw.epilog.585
                                        #   in Loop: Header=BB144_107 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_158
# BB#157:                               # %if.then.587
                                        #   in Loop: Header=BB144_107 Depth=1
	movq	-80(%rbp), %rdi
	movl	-104(%rbp), %esi
	movl	-112(%rbp), %edx
	callq	set_glyph_string_background_width
	movq	-80(%rbp), %rdi
	movl	12(%rdi), %edx
	addl	-296(%rbp), %edx
	movl	%edx, -296(%rbp)
.LBB144_158:                            # %if.end.590
                                        #   in Loop: Header=BB144_107 Depth=1
	jmp	.LBB144_107
.LBB144_159:                            # %while.end.591
	jmp	.LBB144_160
.LBB144_160:                            # %do.end.592
	movl	$1, %edx
	movslq	-100(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-272(%rbp), %rdi
	movq	-64(%rbp), %rax
	movl	(%rax), %esi
	callq	compute_overhangs_and_x
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rcx
	callq	prepend_glyph_string_lists
	cmpq	$0, -88(%rbp)
	jne	.LBB144_162
# BB#161:                               # %if.then.597
	movq	-64(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB144_162:                            # %if.end.598
	jmp	.LBB144_163
.LBB144_163:                            # %if.end.599
	movq	-64(%rbp), %rdi
	callq	left_overwriting
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	jl	.LBB144_232
# BB#164:                               # %if.then.603
	testb	$1, -289(%rbp)
	je	.LBB144_168
# BB#165:                               # %land.lhs.true.607
	movslq	-284(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB144_168
# BB#166:                               # %land.lhs.true.611
	movl	-288(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jle	.LBB144_168
# BB#167:                               # %if.then.614
	movl	$3, -420(%rbp)
	jmp	.LBB144_169
.LBB144_168:                            # %if.else.615
	movl	$0, -420(%rbp)
.LBB144_169:                            # %if.end.616
	movl	-52(%rbp), %eax
	cmpl	-420(%rbp), %eax
	je	.LBB144_171
# BB#170:                               # %lor.lhs.false.619
	cmpq	$0, -88(%rbp)
	jne	.LBB144_172
.LBB144_171:                            # %if.then.622
	movq	-64(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB144_172:                            # %if.end.623
	jmp	.LBB144_173
.LBB144_173:                            # %do.body.624
	movq	$0, -272(%rbp)
	movq	$0, -264(%rbp)
.LBB144_174:                            # %while.cond.625
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_205 Depth 2
	movslq	-100(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB144_226
# BB#175:                               # %while.body.629
                                        #   in Loop: Header=BB144_174 Depth=1
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movslq	-100(%rbp), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -432(%rbp)
	movl	24(%rax,%rcx), %esi
	movl	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edi
	andl	$7, %edi
	andl	$7, %esi
	movl	%esi, %eax
	subl	$5, %edi
	movq	%rax, -864(%rbp)        # 8-byte Spill
	movl	%edi, -868(%rbp)        # 4-byte Spill
	ja	.LBB144_222
# BB#420:                               # %while.body.629
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	.LJTI144_2(,%rax,8), %rcx
	jmpq	*%rcx
.LBB144_176:                            # %sw.bb.639
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_177
.LBB144_177:                            # %do.body.640
                                        #   in Loop: Header=BB144_174 Depth=1
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -436(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#178:                               # %do.body.651
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-40(%rbp), %rax
	movslq	-100(%rbp), %rcx
	subq	%rcx, %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_180
# BB#179:                               # %if.then.658
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-40(%rbp), %rax
	movslq	-100(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-40(%rbp), %rax
	movslq	-100(%rbp), %rcx
	subq	%rcx, %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -448(%rbp)
	jmp	.LBB144_181
.LBB144_180:                            # %if.else.666
                                        #   in Loop: Header=BB144_174 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -448(%rbp)
	movb	$1, -145(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_181:                            # %if.end.670
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_182
.LBB144_182:                            # %do.end.671
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-80(%rbp), %rdi
	movq	-448(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-420(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-436(%rbp), %esi
	movl	-100(%rbp), %edx
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_glyph_string
	movl	%eax, -100(%rbp)
# BB#183:                               # %do.end.675
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_223
.LBB144_184:                            # %sw.bb.676
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-432(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB144_193
# BB#185:                               # %if.then.682
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_186
.LBB144_186:                            # %do.body.683
                                        #   in Loop: Header=BB144_174 Depth=1
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -452(%rbp)
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	40(%rcx,%rax), %esi
	shrl	%esi
	movl	%esi, %edi
	callq	composition_gstring_from_id
	movq	%rax, -472(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#187:                               # %do.body.706
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-472(%rbp), %rdi
	callq	ASIZE
	subq	$2, %rax
	movq	-136(%rbp), %rdi
	shrq	$1, %rdi
	shrq	$0, %rdi
	cmpq	%rdi, %rax
	ja	.LBB144_189
# BB#188:                               # %if.then.713
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-472(%rbp), %rdi
	callq	ASIZE
	leaq	-4(%rax,%rax), %rax
	movq	-136(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -136(%rbp)
	movq	-472(%rbp), %rdi
	callq	ASIZE
	leaq	11(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rdi
	subq	%rax, %rdi
	movq	%rdi, %rsp
	movq	%rdi, -464(%rbp)
	jmp	.LBB144_190
.LBB144_189:                            # %if.else.721
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-472(%rbp), %rdi
	callq	ASIZE
	movl	$2, %ecx
	movl	%ecx, %esi
	subq	$2, %rax
	movq	%rax, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -464(%rbp)
	movb	$1, -145(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_190:                            # %if.end.725
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_191
.LBB144_191:                            # %do.end.726
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-80(%rbp), %rdi
	movq	-464(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-420(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-452(%rbp), %esi
	movl	-100(%rbp), %edx
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_gstring_glyph_string
	movl	%eax, -100(%rbp)
# BB#192:                               # %do.end.730
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_211
.LBB144_193:                            # %if.else.731
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_194
.LBB144_194:                            # %do.body.732
                                        #   in Loop: Header=BB144_174 Depth=1
	movb	$1, %al
	movslq	-100(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rsi
	imulq	$48, %rcx, %rcx
	addq	(%rsi,%rdx,8), %rcx
	movl	28(%rcx), %edi
	andl	$1048575, %edi          # imm = 0xFFFFF
	movl	%edi, -476(%rbp)
	testb	$1, %al
	jne	.LBB144_195
	jmp	.LBB144_196
.LBB144_195:                            # %cond.true.743
                                        #   in Loop: Header=BB144_174 Depth=1
	movl	-476(%rbp), %eax
	addl	$0, %eax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB144_197
	jmp	.LBB144_198
.LBB144_196:                            # %cond.false.750
                                        #   in Loop: Header=BB144_174 Depth=1
	movslq	-476(%rbp), %rax
	addq	$0, %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB144_198
.LBB144_197:                            # %cond.true.759
                                        #   in Loop: Header=BB144_174 Depth=1
	movslq	-476(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	jmp	.LBB144_199
.LBB144_198:                            # %cond.false.764
                                        #   in Loop: Header=BB144_174 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -880(%rbp)        # 8-byte Spill
	jmp	.LBB144_199
.LBB144_199:                            # %cond.end.765
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-880(%rbp), %rax        # 8-byte Reload
	movq	%rax, -488(%rbp)
	movslq	-100(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	40(%rax), %esi
	shrl	$1, %esi
	movl	%esi, %esi
	movl	%esi, %eax
	movq	%rax, -496(%rbp)
	movq	-496(%rbp), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -504(%rbp)
	movq	$0, -520(%rbp)
# BB#200:                               # %do.body.783
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-504(%rbp), %rax
	movslq	(%rax), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_202
# BB#201:                               # %if.then.790
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-504(%rbp), %rax
	movslq	(%rax), %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-504(%rbp), %rax
	movslq	(%rax), %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -512(%rbp)
	jmp	.LBB144_203
.LBB144_202:                            # %if.else.798
                                        #   in Loop: Header=BB144_174 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-504(%rbp), %rcx
	movslq	(%rcx), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -512(%rbp)
	movb	$1, -145(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_203:                            # %if.end.802
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_204
.LBB144_204:                            # %do.end.803
                                        #   in Loop: Header=BB144_174 Depth=1
	movl	$0, -524(%rbp)
.LBB144_205:                            # %for.cond.804
                                        #   Parent Loop BB144_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-524(%rbp), %eax
	movq	-504(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB144_209
# BB#206:                               # %for.body.808
                                        #   in Loop: Header=BB144_205 Depth=2
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-512(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-420(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-504(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movl	-524(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, 128(%rax)
	movl	-296(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	cmpl	$0, -524(%rbp)
	jne	.LBB144_208
# BB#207:                               # %if.then.814
                                        #   in Loop: Header=BB144_205 Depth=2
	movq	-80(%rbp), %rax
	movq	%rax, -520(%rbp)
.LBB144_208:                            # %if.end.815
                                        #   in Loop: Header=BB144_205 Depth=2
	movq	-80(%rbp), %rdi
	movq	-488(%rbp), %rsi
	movl	-56(%rbp), %edx
	callq	fill_composite_glyph_string
	movl	%eax, -524(%rbp)
	jmp	.LBB144_205
.LBB144_209:                            # %for.end.817
                                        #   in Loop: Header=BB144_174 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movq	-520(%rbp), %rcx
	movq	%rcx, -80(%rbp)
# BB#210:                               # %do.end.819
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_211
.LBB144_211:                            # %if.end.820
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_223
.LBB144_212:                            # %sw.bb.821
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_213
.LBB144_213:                            # %do.body.822
                                        #   in Loop: Header=BB144_174 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-420(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	movl	-100(%rbp), %esi
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	%eax, %edx
	callq	fill_stretch_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movl	%eax, -100(%rbp)
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#214:                               # %do.end.826
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_223
.LBB144_215:                            # %sw.bb.827
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_216
.LBB144_216:                            # %do.body.828
                                        #   in Loop: Header=BB144_174 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-420(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	callq	fill_image_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#217:                               # %do.end.831
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_223
.LBB144_218:                            # %sw.bb.832
.LBB144_219:                            # %sw.bb.833
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_220
.LBB144_220:                            # %do.body.834
                                        #   in Loop: Header=BB144_174 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movslq	-100(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rdi
	movq	(%rdi,%rdx,8), %rdx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movl	28(%rdx,%rcx), %eax
	andl	$1048575, %eax          # imm = 0xFFFFF
	movl	%eax, -528(%rbp)
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movl	-100(%rbp), %r9d
	movl	-420(%rbp), %eax
	subq	$16, %rsp
	movl	%eax, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-296(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-528(%rbp), %esi
	movl	-100(%rbp), %edx
	movq	-40(%rbp), %rcx
	movl	%ecx, %eax
	movl	-56(%rbp), %r8d
	movl	%eax, %ecx
	callq	fill_glyphless_glyph_string
	movl	%eax, -100(%rbp)
# BB#221:                               # %do.end.847
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_223
.LBB144_222:                            # %sw.default.848
	callq	emacs_abort
.LBB144_223:                            # %sw.epilog.849
                                        #   in Loop: Header=BB144_174 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_225
# BB#224:                               # %if.then.851
                                        #   in Loop: Header=BB144_174 Depth=1
	movq	-80(%rbp), %rdi
	movl	-100(%rbp), %esi
	movl	-112(%rbp), %edx
	callq	set_glyph_string_background_width
	movq	-80(%rbp), %rdi
	movl	12(%rdi), %edx
	addl	-296(%rbp), %edx
	movl	%edx, -296(%rbp)
.LBB144_225:                            # %if.end.854
                                        #   in Loop: Header=BB144_174 Depth=1
	jmp	.LBB144_174
.LBB144_226:                            # %while.end.855
	jmp	.LBB144_227
.LBB144_227:                            # %do.end.856
	movq	-264(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB144_228:                            # %for.cond.857
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_231
# BB#229:                               # %for.body.859
                                        #   in Loop: Header=BB144_228 Depth=1
	movq	-80(%rbp), %rax
	movb	136(%rax), %cl
	andb	$-3, %cl
	orb	$2, %cl
	movb	%cl, 136(%rax)
# BB#230:                               # %for.inc.862
                                        #   in Loop: Header=BB144_228 Depth=1
	movq	-80(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB144_228
.LBB144_231:                            # %for.end.864
	movl	$1, %edx
	movq	-272(%rbp), %rdi
	movq	-64(%rbp), %rax
	movl	(%rax), %esi
	callq	compute_overhangs_and_x
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rcx
	callq	prepend_glyph_string_lists
.LBB144_232:                            # %if.end.866
	movq	-72(%rbp), %rdi
	callq	right_overwritten
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	jl	.LBB144_298
# BB#233:                               # %if.then.870
	testb	$1, -289(%rbp)
	je	.LBB144_237
# BB#234:                               # %land.lhs.true.874
	movl	-284(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB144_237
# BB#235:                               # %land.lhs.true.877
	movslq	-288(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jle	.LBB144_237
# BB#236:                               # %if.then.881
	movl	$3, -532(%rbp)
	jmp	.LBB144_238
.LBB144_237:                            # %if.else.882
	movl	$0, -532(%rbp)
.LBB144_238:                            # %if.end.883
	movl	-52(%rbp), %eax
	cmpl	-532(%rbp), %eax
	je	.LBB144_240
# BB#239:                               # %if.then.886
	movq	-72(%rbp), %rax
	movq	%rax, -96(%rbp)
.LBB144_240:                            # %if.end.887
	jmp	.LBB144_241
.LBB144_241:                            # %do.body.888
	movq	$0, -272(%rbp)
	movq	$0, -264(%rbp)
.LBB144_242:                            # %while.cond.889
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_273 Depth 2
	movq	-48(%rbp), %rax
	movslq	-100(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB144_294
# BB#243:                               # %while.body.893
                                        #   in Loop: Header=BB144_242 Depth=1
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	-48(%rbp), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -544(%rbp)
	movl	24(%rax,%rcx), %esi
	movl	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edi
	andl	$7, %edi
	andl	$7, %esi
	movl	%esi, %eax
	subl	$5, %edi
	movq	%rax, -888(%rbp)        # 8-byte Spill
	movl	%edi, -892(%rbp)        # 4-byte Spill
	ja	.LBB144_290
# BB#419:                               # %while.body.893
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	.LJTI144_1(,%rax,8), %rcx
	jmpq	*%rcx
.LBB144_244:                            # %sw.bb.902
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_245
.LBB144_245:                            # %do.body.903
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -548(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#246:                               # %do.body.913
                                        #   in Loop: Header=BB144_242 Depth=1
	movslq	-100(%rbp), %rax
	subq	-48(%rbp), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_248
# BB#247:                               # %if.then.920
                                        #   in Loop: Header=BB144_242 Depth=1
	movslq	-100(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movslq	-100(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rcx, %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -560(%rbp)
	jmp	.LBB144_249
.LBB144_248:                            # %if.else.928
                                        #   in Loop: Header=BB144_242 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movslq	-100(%rbp), %rcx
	subq	-48(%rbp), %rcx
	movq	%rcx, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -560(%rbp)
	movb	$1, -145(%rbp)
	movq	-560(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_249:                            # %if.end.932
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_250
.LBB144_250:                            # %do.end.933
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-80(%rbp), %rdi
	movq	-560(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %rax
	movl	%eax, %r9d
	movl	-532(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	movq	-80(%rbp), %rdi
	movl	-548(%rbp), %esi
	movq	-48(%rbp), %rax
	movl	%eax, %r8d
	movl	-100(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	%r8d, %edx
	movl	%r9d, %r8d
	callq	fill_glyph_string
	movslq	%eax, %rdi
	movq	%rdi, -48(%rbp)
# BB#251:                               # %do.end.939
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_291
.LBB144_252:                            # %sw.bb.940
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-544(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB144_261
# BB#253:                               # %if.then.946
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_254
.LBB144_254:                            # %do.body.947
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -564(%rbp)
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	40(%rcx,%rax), %esi
	shrl	%esi
	movl	%esi, %edi
	callq	composition_gstring_from_id
	movq	%rax, -584(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#255:                               # %do.body.968
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-584(%rbp), %rdi
	callq	ASIZE
	subq	$2, %rax
	movq	-136(%rbp), %rdi
	shrq	$1, %rdi
	shrq	$0, %rdi
	cmpq	%rdi, %rax
	ja	.LBB144_257
# BB#256:                               # %if.then.975
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-584(%rbp), %rdi
	callq	ASIZE
	leaq	-4(%rax,%rax), %rax
	movq	-136(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -136(%rbp)
	movq	-584(%rbp), %rdi
	callq	ASIZE
	leaq	11(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rdi
	subq	%rax, %rdi
	movq	%rdi, %rsp
	movq	%rdi, -576(%rbp)
	jmp	.LBB144_258
.LBB144_257:                            # %if.else.983
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-584(%rbp), %rdi
	callq	ASIZE
	movl	$2, %ecx
	movl	%ecx, %esi
	subq	$2, %rax
	movq	%rax, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -576(%rbp)
	movb	$1, -145(%rbp)
	movq	-576(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_258:                            # %if.end.987
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_259
.LBB144_259:                            # %do.end.988
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-80(%rbp), %rdi
	movq	-576(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %rax
	movl	%eax, %r9d
	movl	-532(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	movq	-80(%rbp), %rdi
	movl	-564(%rbp), %esi
	movq	-48(%rbp), %rax
	movl	%eax, %r8d
	movl	-100(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	%r8d, %edx
	movl	%r9d, %r8d
	callq	fill_gstring_glyph_string
	movslq	%eax, %rdi
	movq	%rdi, -48(%rbp)
# BB#260:                               # %do.end.994
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_279
.LBB144_261:                            # %if.else.995
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_262
.LBB144_262:                            # %do.body.996
                                        #   in Loop: Header=BB144_242 Depth=1
	movb	$1, %al
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rsi
	imulq	$48, %rcx, %rcx
	addq	(%rsi,%rdx,8), %rcx
	movl	28(%rcx), %edi
	andl	$1048575, %edi          # imm = 0xFFFFF
	movl	%edi, -588(%rbp)
	testb	$1, %al
	jne	.LBB144_263
	jmp	.LBB144_264
.LBB144_263:                            # %cond.true.1006
                                        #   in Loop: Header=BB144_242 Depth=1
	movl	-588(%rbp), %eax
	addl	$0, %eax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB144_265
	jmp	.LBB144_266
.LBB144_264:                            # %cond.false.1013
                                        #   in Loop: Header=BB144_242 Depth=1
	movslq	-588(%rbp), %rax
	addq	$0, %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB144_266
.LBB144_265:                            # %cond.true.1022
                                        #   in Loop: Header=BB144_242 Depth=1
	movslq	-588(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	jmp	.LBB144_267
.LBB144_266:                            # %cond.false.1027
                                        #   in Loop: Header=BB144_242 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -904(%rbp)        # 8-byte Spill
	jmp	.LBB144_267
.LBB144_267:                            # %cond.end.1028
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, -600(%rbp)
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	40(%rax), %esi
	shrl	$1, %esi
	movl	%esi, %esi
	movl	%esi, %eax
	movq	%rax, -608(%rbp)
	movq	-608(%rbp), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -616(%rbp)
	movq	$0, -632(%rbp)
# BB#268:                               # %do.body.1045
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-616(%rbp), %rax
	movslq	(%rax), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_270
# BB#269:                               # %if.then.1052
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-616(%rbp), %rax
	movslq	(%rax), %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-616(%rbp), %rax
	movslq	(%rax), %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -624(%rbp)
	jmp	.LBB144_271
.LBB144_270:                            # %if.else.1060
                                        #   in Loop: Header=BB144_242 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-616(%rbp), %rcx
	movslq	(%rcx), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -624(%rbp)
	movb	$1, -145(%rbp)
	movq	-624(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_271:                            # %if.end.1064
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_272
.LBB144_272:                            # %do.end.1065
                                        #   in Loop: Header=BB144_242 Depth=1
	movl	$0, -636(%rbp)
.LBB144_273:                            # %for.cond.1066
                                        #   Parent Loop BB144_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-636(%rbp), %eax
	movq	-616(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB144_277
# BB#274:                               # %for.body.1070
                                        #   in Loop: Header=BB144_273 Depth=2
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-624(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %rax
	movl	%eax, %r9d
	movl	-532(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-616(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movl	-636(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, 128(%rax)
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	cmpl	$0, -636(%rbp)
	jne	.LBB144_276
# BB#275:                               # %if.then.1077
                                        #   in Loop: Header=BB144_273 Depth=2
	movq	-80(%rbp), %rax
	movq	%rax, -632(%rbp)
.LBB144_276:                            # %if.end.1078
                                        #   in Loop: Header=BB144_273 Depth=2
	movq	-80(%rbp), %rdi
	movq	-600(%rbp), %rsi
	movl	-56(%rbp), %edx
	callq	fill_composite_glyph_string
	movl	%eax, -636(%rbp)
	jmp	.LBB144_273
.LBB144_277:                            # %for.end.1080
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-632(%rbp), %rax
	movq	%rax, -80(%rbp)
# BB#278:                               # %do.end.1082
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_279
.LBB144_279:                            # %if.end.1083
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_291
.LBB144_280:                            # %sw.bb.1084
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_281
.LBB144_281:                            # %do.body.1085
                                        #   in Loop: Header=BB144_242 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %r9
	movl	%r9d, %eax
	movl	-532(%rbp), %r10d
	subq	$16, %rsp
	movl	%eax, %r9d
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-100(%rbp), %edx
	movl	%eax, %esi
	callq	fill_stretch_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movslq	%eax, %rcx
	movq	%rcx, -48(%rbp)
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#282:                               # %do.end.1091
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_291
.LBB144_283:                            # %sw.bb.1092
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_284
.LBB144_284:                            # %do.body.1093
                                        #   in Loop: Header=BB144_242 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %r9
	movl	%r9d, %eax
	movl	-532(%rbp), %r10d
	subq	$16, %rsp
	movl	%eax, %r9d
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	callq	fill_image_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-48(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#285:                               # %do.end.1097
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_291
.LBB144_286:                            # %sw.bb.1098
.LBB144_287:                            # %sw.bb.1099
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_288
.LBB144_288:                            # %do.body.1100
                                        #   in Loop: Header=BB144_242 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rdi
	movq	(%rdi,%rdx,8), %rdx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movl	28(%rdx,%rcx), %eax
	andl	$1048575, %eax          # imm = 0xFFFFF
	movl	%eax, -640(%rbp)
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %r9
	movl	%r9d, %eax
	movl	-532(%rbp), %r10d
	subq	$16, %rsp
	movl	%eax, %r9d
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-640(%rbp), %esi
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-100(%rbp), %ecx
	movl	-56(%rbp), %r8d
	movl	%eax, %edx
	callq	fill_glyphless_glyph_string
	movslq	%eax, %rdi
	movq	%rdi, -48(%rbp)
# BB#289:                               # %do.end.1114
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_291
.LBB144_290:                            # %sw.default.1115
	callq	emacs_abort
.LBB144_291:                            # %sw.epilog.1116
                                        #   in Loop: Header=BB144_242 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_293
# BB#292:                               # %if.then.1118
                                        #   in Loop: Header=BB144_242 Depth=1
	movq	-80(%rbp), %rdi
	movq	-48(%rbp), %rax
	movl	%eax, %ecx
	movl	-112(%rbp), %edx
	movl	%ecx, %esi
	callq	set_glyph_string_background_width
	movq	-80(%rbp), %rax
	movl	12(%rax), %ecx
	addl	-12(%rbp), %ecx
	movl	%ecx, -12(%rbp)
.LBB144_293:                            # %if.end.1122
                                        #   in Loop: Header=BB144_242 Depth=1
	jmp	.LBB144_242
.LBB144_294:                            # %while.end.1123
	jmp	.LBB144_295
.LBB144_295:                            # %do.end.1124
	xorl	%edx, %edx
	movq	-264(%rbp), %rdi
	movq	-72(%rbp), %rax
	movl	(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	12(%rax), %ecx
	movl	%ecx, %esi
	callq	compute_overhangs_and_x
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rcx
	callq	append_glyph_string_lists
	cmpq	$0, -96(%rbp)
	jne	.LBB144_297
# BB#296:                               # %if.then.1130
	movq	-72(%rbp), %rax
	movq	%rax, -96(%rbp)
.LBB144_297:                            # %if.end.1131
	jmp	.LBB144_298
.LBB144_298:                            # %if.end.1132
	movq	-72(%rbp), %rdi
	callq	right_overwriting
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	jl	.LBB144_367
# BB#299:                               # %if.then.1136
	testb	$1, -289(%rbp)
	je	.LBB144_303
# BB#300:                               # %land.lhs.true.1140
	movl	-284(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB144_303
# BB#301:                               # %land.lhs.true.1143
	movslq	-288(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jle	.LBB144_303
# BB#302:                               # %if.then.1147
	movl	$3, -644(%rbp)
	jmp	.LBB144_304
.LBB144_303:                            # %if.else.1148
	movl	$0, -644(%rbp)
.LBB144_304:                            # %if.end.1149
	movl	-52(%rbp), %eax
	cmpl	-644(%rbp), %eax
	je	.LBB144_306
# BB#305:                               # %lor.lhs.false.1152
	cmpq	$0, -96(%rbp)
	jne	.LBB144_307
.LBB144_306:                            # %if.then.1155
	movq	-72(%rbp), %rax
	movq	%rax, -96(%rbp)
.LBB144_307:                            # %if.end.1156
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
# BB#308:                               # %do.body.1158
	movq	$0, -272(%rbp)
	movq	$0, -264(%rbp)
.LBB144_309:                            # %while.cond.1159
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_340 Depth 2
	movq	-48(%rbp), %rax
	movslq	-100(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB144_361
# BB#310:                               # %while.body.1163
                                        #   in Loop: Header=BB144_309 Depth=1
	movslq	-28(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	-48(%rbp), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movq	%rdx, -656(%rbp)
	movl	24(%rax,%rcx), %esi
	movl	%esi, %eax
	movl	%eax, %esi
	movl	%esi, %edi
	andl	$7, %edi
	andl	$7, %esi
	movl	%esi, %eax
	subl	$5, %edi
	movq	%rax, -912(%rbp)        # 8-byte Spill
	movl	%edi, -916(%rbp)        # 4-byte Spill
	ja	.LBB144_357
# BB#418:                               # %while.body.1163
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	.LJTI144_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB144_311:                            # %sw.bb.1172
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_312
.LBB144_312:                            # %do.body.1173
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -660(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#313:                               # %do.body.1183
                                        #   in Loop: Header=BB144_309 Depth=1
	movslq	-100(%rbp), %rax
	subq	-48(%rbp), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_315
# BB#314:                               # %if.then.1190
                                        #   in Loop: Header=BB144_309 Depth=1
	movslq	-100(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movslq	-100(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rcx, %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -672(%rbp)
	jmp	.LBB144_316
.LBB144_315:                            # %if.else.1198
                                        #   in Loop: Header=BB144_309 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movslq	-100(%rbp), %rcx
	subq	-48(%rbp), %rcx
	movq	%rcx, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -672(%rbp)
	movb	$1, -145(%rbp)
	movq	-672(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_316:                            # %if.end.1202
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_317
.LBB144_317:                            # %do.end.1203
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-80(%rbp), %rdi
	movq	-672(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %rax
	movl	%eax, %r9d
	movl	-644(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	movq	-80(%rbp), %rdi
	movl	-660(%rbp), %esi
	movq	-48(%rbp), %rax
	movl	%eax, %r8d
	movl	-100(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	%r8d, %edx
	movl	%r9d, %r8d
	callq	fill_glyph_string
	movslq	%eax, %rdi
	movq	%rdi, -48(%rbp)
# BB#318:                               # %do.end.1209
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_358
.LBB144_319:                            # %sw.bb.1210
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-656(%rbp), %rax
	movl	40(%rax), %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB144_328
# BB#320:                               # %if.then.1216
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_321
.LBB144_321:                            # %do.body.1217
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	28(%rcx,%rax), %esi
	andl	$1048575, %esi          # imm = 0xFFFFF
	movl	%esi, -676(%rbp)
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	(%rax,%rax,2), %rax
	shlq	$4, %rax
	movl	40(%rcx,%rax), %esi
	shrl	%esi
	movl	%esi, %edi
	callq	composition_gstring_from_id
	movq	%rax, -696(%rbp)
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
# BB#322:                               # %do.body.1238
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-696(%rbp), %rdi
	callq	ASIZE
	subq	$2, %rax
	movq	-136(%rbp), %rdi
	shrq	$1, %rdi
	shrq	$0, %rdi
	cmpq	%rdi, %rax
	ja	.LBB144_324
# BB#323:                               # %if.then.1245
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-696(%rbp), %rdi
	callq	ASIZE
	leaq	-4(%rax,%rax), %rax
	movq	-136(%rbp), %rdi
	subq	%rax, %rdi
	movq	%rdi, -136(%rbp)
	movq	-696(%rbp), %rdi
	callq	ASIZE
	leaq	11(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rdi
	subq	%rax, %rdi
	movq	%rdi, %rsp
	movq	%rdi, -688(%rbp)
	jmp	.LBB144_325
.LBB144_324:                            # %if.else.1253
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-696(%rbp), %rdi
	callq	ASIZE
	movl	$2, %ecx
	movl	%ecx, %esi
	subq	$2, %rax
	movq	%rax, %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -688(%rbp)
	movb	$1, -145(%rbp)
	movq	-688(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_325:                            # %if.end.1257
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_326
.LBB144_326:                            # %do.end.1258
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-80(%rbp), %rdi
	movq	-688(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %rax
	movl	%eax, %r9d
	movl	-644(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	movq	-80(%rbp), %rdi
	movl	-676(%rbp), %esi
	movq	-48(%rbp), %rax
	movl	%eax, %r8d
	movl	-100(%rbp), %ecx
	movl	-56(%rbp), %r9d
	movl	%r8d, %edx
	movl	%r9d, %r8d
	callq	fill_gstring_glyph_string
	movslq	%eax, %rdi
	movq	%rdi, -48(%rbp)
# BB#327:                               # %do.end.1264
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_346
.LBB144_328:                            # %if.else.1265
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_329
.LBB144_329:                            # %do.body.1266
                                        #   in Loop: Header=BB144_309 Depth=1
	movb	$1, %al
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rsi
	imulq	$48, %rcx, %rcx
	addq	(%rsi,%rdx,8), %rcx
	movl	28(%rcx), %edi
	andl	$1048575, %edi          # imm = 0xFFFFF
	movl	%edi, -700(%rbp)
	testb	$1, %al
	jne	.LBB144_330
	jmp	.LBB144_331
.LBB144_330:                            # %cond.true.1276
                                        #   in Loop: Header=BB144_309 Depth=1
	movl	-700(%rbp), %eax
	addl	$0, %eax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB144_332
	jmp	.LBB144_333
.LBB144_331:                            # %cond.false.1283
                                        #   in Loop: Header=BB144_309 Depth=1
	movslq	-700(%rbp), %rax
	addq	$0, %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB144_333
.LBB144_332:                            # %cond.true.1292
                                        #   in Loop: Header=BB144_309 Depth=1
	movslq	-700(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	jmp	.LBB144_334
.LBB144_333:                            # %cond.false.1297
                                        #   in Loop: Header=BB144_309 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	jmp	.LBB144_334
.LBB144_334:                            # %cond.end.1298
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	%rax, -712(%rbp)
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	-24(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	40(%rax), %esi
	shrl	$1, %esi
	movl	%esi, %esi
	movl	%esi, %eax
	movq	%rax, -720(%rbp)
	movq	-720(%rbp), %rax
	movq	composition_table, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -728(%rbp)
	movq	$0, -744(%rbp)
# BB#335:                               # %do.body.1315
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-728(%rbp), %rax
	movslq	(%rax), %rax
	movq	-136(%rbp), %rcx
	shrq	$1, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB144_337
# BB#336:                               # %if.then.1322
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-728(%rbp), %rax
	movslq	(%rax), %rax
	addq	%rax, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-728(%rbp), %rax
	movslq	(%rax), %rax
	leaq	15(%rax,%rax), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -736(%rbp)
	jmp	.LBB144_338
.LBB144_337:                            # %if.else.1330
                                        #   in Loop: Header=BB144_309 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-728(%rbp), %rcx
	movslq	(%rcx), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -736(%rbp)
	movb	$1, -145(%rbp)
	movq	-736(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB144_338:                            # %if.end.1334
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_339
.LBB144_339:                            # %do.end.1335
                                        #   in Loop: Header=BB144_309 Depth=1
	movl	$0, -748(%rbp)
.LBB144_340:                            # %for.cond.1336
                                        #   Parent Loop BB144_309 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-748(%rbp), %eax
	movq	-728(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB144_344
# BB#341:                               # %for.body.1340
                                        #   in Loop: Header=BB144_340 Depth=2
	movq	%rsp, %rax
	addq	$-256, %rax
	movq	%rax, %rsp
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-736(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %rax
	movl	%eax, %r9d
	movl	-644(%rbp), %r10d
	subq	$16, %rsp
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-728(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 112(%rcx)
	movl	-748(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, 128(%rax)
	movl	-12(%rbp), %r8d
	movq	-80(%rbp), %rax
	movl	%r8d, (%rax)
	cmpl	$0, -748(%rbp)
	jne	.LBB144_343
# BB#342:                               # %if.then.1347
                                        #   in Loop: Header=BB144_340 Depth=2
	movq	-80(%rbp), %rax
	movq	%rax, -744(%rbp)
.LBB144_343:                            # %if.end.1348
                                        #   in Loop: Header=BB144_340 Depth=2
	movq	-80(%rbp), %rdi
	movq	-712(%rbp), %rsi
	movl	-56(%rbp), %edx
	callq	fill_composite_glyph_string
	movl	%eax, -748(%rbp)
	jmp	.LBB144_340
.LBB144_344:                            # %for.end.1350
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-744(%rbp), %rax
	movq	%rax, -80(%rbp)
# BB#345:                               # %do.end.1352
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_346
.LBB144_346:                            # %if.end.1353
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_358
.LBB144_347:                            # %sw.bb.1354
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_348
.LBB144_348:                            # %do.body.1355
                                        #   in Loop: Header=BB144_309 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %r9
	movl	%r9d, %eax
	movl	-644(%rbp), %r10d
	subq	$16, %rsp
	movl	%eax, %r9d
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-100(%rbp), %edx
	movl	%eax, %esi
	callq	fill_stretch_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movslq	%eax, %rcx
	movq	%rcx, -48(%rbp)
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#349:                               # %do.end.1361
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_358
.LBB144_350:                            # %sw.bb.1362
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_351
.LBB144_351:                            # %do.body.1363
                                        #   in Loop: Header=BB144_309 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %r9
	movl	%r9d, %eax
	movl	-644(%rbp), %r10d
	subq	$16, %rsp
	movl	%eax, %r9d
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	movq	-80(%rbp), %rdi
	callq	fill_image_glyph_string
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movq	-48(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
# BB#352:                               # %do.end.1367
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_358
.LBB144_353:                            # %sw.bb.1368
.LBB144_354:                            # %sw.bb.1369
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_355
.LBB144_355:                            # %do.body.1370
                                        #   in Loop: Header=BB144_309 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rcx
	movslq	-28(%rbp), %rdx
	movq	-24(%rbp), %rdi
	movq	(%rdi,%rdx,8), %rdx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	movl	28(%rdx,%rcx), %eax
	andl	$1048575, %eax          # imm = 0xFFFFF
	movl	%eax, -752(%rbp)
	movq	%rsp, %rcx
	addq	$-256, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	-28(%rbp), %r8d
	movq	-48(%rbp), %r9
	movl	%r9d, %eax
	movl	-644(%rbp), %r10d
	subq	$16, %rsp
	movl	%eax, %r9d
	movl	%r10d, (%rsp)
	callq	init_glyph_string
	addq	$16, %rsp
	leaq	-264(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	append_glyph_string
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rdi
	movl	-752(%rbp), %esi
	movq	-48(%rbp), %rcx
	movl	%ecx, %eax
	movl	-100(%rbp), %ecx
	movl	-56(%rbp), %r8d
	movl	%eax, %edx
	callq	fill_glyphless_glyph_string
	movslq	%eax, %rdi
	movq	%rdi, -48(%rbp)
# BB#356:                               # %do.end.1384
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_358
.LBB144_357:                            # %sw.default.1385
	callq	emacs_abort
.LBB144_358:                            # %sw.epilog.1386
                                        #   in Loop: Header=BB144_309 Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_360
# BB#359:                               # %if.then.1388
                                        #   in Loop: Header=BB144_309 Depth=1
	movq	-80(%rbp), %rdi
	movq	-48(%rbp), %rax
	movl	%eax, %ecx
	movl	-112(%rbp), %edx
	movl	%ecx, %esi
	callq	set_glyph_string_background_width
	movq	-80(%rbp), %rax
	movl	12(%rax), %ecx
	addl	-12(%rbp), %ecx
	movl	%ecx, -12(%rbp)
.LBB144_360:                            # %if.end.1392
                                        #   in Loop: Header=BB144_309 Depth=1
	jmp	.LBB144_309
.LBB144_361:                            # %while.end.1393
	jmp	.LBB144_362
.LBB144_362:                            # %do.end.1394
	movq	-264(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB144_363:                            # %for.cond.1395
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_366
# BB#364:                               # %for.body.1397
                                        #   in Loop: Header=BB144_363 Depth=1
	movq	-80(%rbp), %rax
	movb	136(%rax), %cl
	andb	$-3, %cl
	orb	$2, %cl
	movb	%cl, 136(%rax)
# BB#365:                               # %for.inc.1402
                                        #   in Loop: Header=BB144_363 Depth=1
	movq	-80(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB144_363
.LBB144_366:                            # %for.end.1404
	xorl	%edx, %edx
	movq	-264(%rbp), %rdi
	movq	-72(%rbp), %rax
	movl	(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	12(%rax), %ecx
	movl	%ecx, %esi
	callq	compute_overhangs_and_x
	leaq	-64(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rcx
	callq	append_glyph_string_lists
.LBB144_367:                            # %if.end.1408
	cmpq	$0, -88(%rbp)
	jne	.LBB144_369
# BB#368:                               # %lor.lhs.false.1410
	cmpq	$0, -96(%rbp)
	je	.LBB144_374
.LBB144_369:                            # %if.then.1412
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB144_370:                            # %for.cond.1413
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_373
# BB#371:                               # %for.body.1415
                                        #   in Loop: Header=BB144_370 Depth=1
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 184(%rcx)
	movq	-96(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 192(%rcx)
# BB#372:                               # %for.inc.1418
                                        #   in Loop: Header=BB144_370 Depth=1
	movq	-80(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB144_370
.LBB144_373:                            # %for.end.1420
	jmp	.LBB144_374
.LBB144_374:                            # %if.end.1421
	jmp	.LBB144_375
.LBB144_375:                            # %if.end.1422
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB144_376:                            # %for.cond.1423
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -80(%rbp)
	je	.LBB144_379
# BB#377:                               # %for.body.1425
                                        #   in Loop: Header=BB144_376 Depth=1
	movq	-128(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	136(%rax), %rax
	movq	-80(%rbp), %rdi
	callq	*%rax
# BB#378:                               # %for.inc.1428
                                        #   in Loop: Header=BB144_376 Depth=1
	movq	-80(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB144_376
.LBB144_379:                            # %for.end.1430
	cmpl	$1, -28(%rbp)
	jne	.LBB144_395
# BB#380:                               # %land.lhs.true.1433
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB144_395
# BB#381:                               # %land.lhs.true.1439
	cmpl	$0, -56(%rbp)
	jne	.LBB144_395
# BB#382:                               # %if.then.1441
	cmpq	$0, -88(%rbp)
	je	.LBB144_384
# BB#383:                               # %cond.true.1443
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -932(%rbp)        # 4-byte Spill
	jmp	.LBB144_388
.LBB144_384:                            # %cond.false.1445
	cmpq	$0, -64(%rbp)
	je	.LBB144_386
# BB#385:                               # %cond.true.1447
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -936(%rbp)        # 4-byte Spill
	jmp	.LBB144_387
.LBB144_386:                            # %cond.false.1449
	movl	-12(%rbp), %eax
	movl	%eax, -936(%rbp)        # 4-byte Spill
.LBB144_387:                            # %cond.end.1450
	movl	-936(%rbp), %eax        # 4-byte Reload
	movl	%eax, -932(%rbp)        # 4-byte Spill
.LBB144_388:                            # %cond.end.1452
	movl	-932(%rbp), %eax        # 4-byte Reload
	movl	%eax, -756(%rbp)
	cmpq	$0, -96(%rbp)
	je	.LBB144_390
# BB#389:                               # %cond.true.1455
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	movq	-96(%rbp), %rax
	addl	16(%rax), %ecx
	movl	%ecx, -940(%rbp)        # 4-byte Spill
	jmp	.LBB144_394
.LBB144_390:                            # %cond.false.1459
	cmpq	$0, -72(%rbp)
	je	.LBB144_392
# BB#391:                               # %cond.true.1461
	movq	-72(%rbp), %rax
	movl	(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	16(%rax), %ecx
	movl	%ecx, -944(%rbp)        # 4-byte Spill
	jmp	.LBB144_393
.LBB144_392:                            # %cond.false.1465
	movl	-12(%rbp), %eax
	movl	%eax, -944(%rbp)        # 4-byte Spill
.LBB144_393:                            # %cond.end.1466
	movl	-944(%rbp), %eax        # 4-byte Reload
	movl	%eax, -940(%rbp)        # 4-byte Spill
.LBB144_394:                            # %cond.end.1468
	movl	-940(%rbp), %eax        # 4-byte Reload
	movl	$1, %esi
	movl	%eax, -760(%rbp)
	movl	-116(%rbp), %eax
	movl	-756(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -756(%rbp)
	movl	-116(%rbp), %eax
	movl	-760(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -760(%rbp)
	movq	-8(%rbp), %rdi
	movl	-756(%rbp), %edx
	movl	-760(%rbp), %ecx
	movq	-24(%rbp), %r8
	movl	48(%r8), %r8d
	movq	-24(%rbp), %r9
	movl	48(%r9), %eax
	movq	-24(%rbp), %r9
	addl	60(%r9), %eax
	movl	%eax, %r9d
	callq	notice_overwritten_cursor
.LBB144_395:                            # %if.end.1474
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB144_412
# BB#396:                               # %if.then.1480
	movl	-108(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-8(%rbp), %rcx
	movl	240(%rcx), %esi
	movq	-8(%rbp), %rcx
	movw	468(%rcx), %di
	shrw	$11, %di
	andw	$1, %di
	testw	$1, %di
	movl	%eax, -948(%rbp)        # 4-byte Spill
	movl	%edx, -952(%rbp)        # 4-byte Spill
	movl	%esi, -956(%rbp)        # 4-byte Spill
	je	.LBB144_398
# BB#397:                               # %cond.true.1490
	xorl	%eax, %eax
	movl	%eax, -960(%rbp)        # 4-byte Spill
	jmp	.LBB144_405
.LBB144_398:                            # %cond.false.1491
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-968(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB144_400
# BB#399:                               # %cond.true.1495
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -972(%rbp)        # 4-byte Spill
	jmp	.LBB144_404
.LBB144_400:                            # %cond.false.1503
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-984(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB144_402
# BB#401:                               # %cond.true.1508
	movl	$1, %eax
	movl	%eax, -988(%rbp)        # 4-byte Spill
	jmp	.LBB144_403
.LBB144_402:                            # %cond.false.1509
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -1000(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-1000(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -988(%rbp)        # 4-byte Spill
.LBB144_403:                            # %cond.end.1515
	movl	-988(%rbp), %eax        # 4-byte Reload
	movl	%eax, -972(%rbp)        # 4-byte Spill
.LBB144_404:                            # %cond.end.1517
	movl	-972(%rbp), %eax        # 4-byte Reload
	movl	%eax, -960(%rbp)        # 4-byte Spill
.LBB144_405:                            # %cond.end.1519
	movl	-960(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB144_410
# BB#406:                               # %cond.true.1523
	movq	-8(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB144_408
# BB#407:                               # %cond.true.1526
	movq	-8(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -1004(%rbp)       # 4-byte Spill
	jmp	.LBB144_409
.LBB144_408:                            # %cond.false.1528
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -1004(%rbp)       # 4-byte Spill
.LBB144_409:                            # %cond.end.1531
	movl	-1004(%rbp), %eax       # 4-byte Reload
	movl	%eax, -1008(%rbp)       # 4-byte Spill
	jmp	.LBB144_411
.LBB144_410:                            # %cond.false.1533
	xorl	%eax, %eax
	movl	%eax, -1008(%rbp)       # 4-byte Spill
	jmp	.LBB144_411
.LBB144_411:                            # %cond.end.1534
	movl	-1008(%rbp), %eax       # 4-byte Reload
	movl	-956(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	-952(%rbp), %eax        # 4-byte Reload
	addl	%ecx, %eax
	movl	-948(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	jmp	.LBB144_413
.LBB144_412:                            # %if.else.1539
	movl	-116(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -108(%rbp)
.LBB144_413:                            # %if.end.1541
	jmp	.LBB144_414
.LBB144_414:                            # %do.body.1542
	testb	$1, -145(%rbp)
	je	.LBB144_416
# BB#415:                               # %if.then.1544
	xorl	%edi, %edi
	movb	$0, -145(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1016(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -1024(%rbp)       # 8-byte Spill
.LBB144_416:                            # %if.end.1547
	jmp	.LBB144_417
.LBB144_417:                            # %do.end.1548
	movl	-108(%rbp), %eax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end144:
	.size	draw_glyphs, .Lfunc_end144-draw_glyphs
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI144_0:
	.quad	.LBB144_311
	.quad	.LBB144_319
	.quad	.LBB144_354
	.quad	.LBB144_350
	.quad	.LBB144_347
	.quad	.LBB144_353
.LJTI144_1:
	.quad	.LBB144_244
	.quad	.LBB144_252
	.quad	.LBB144_287
	.quad	.LBB144_283
	.quad	.LBB144_280
	.quad	.LBB144_286
.LJTI144_2:
	.quad	.LBB144_176
	.quad	.LBB144_184
	.quad	.LBB144_219
	.quad	.LBB144_215
	.quad	.LBB144_212
	.quad	.LBB144_218
.LJTI144_3:
	.quad	.LBB144_109
	.quad	.LBB144_117
	.quad	.LBB144_152
	.quad	.LBB144_148
	.quad	.LBB144_145
	.quad	.LBB144_151
.LJTI144_4:
	.quad	.LBB144_17
	.quad	.LBB144_25
	.quad	.LBB144_60
	.quad	.LBB144_56
	.quad	.LBB144_53
	.quad	.LBB144_59

	.text
	.globl	x_insert_glyphs
	.align	16, 0x90
	.type	x_insert_glyphs,@function
x_insert_glyphs:                        # @x_insert_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp445:
	.cfi_def_cfa_offset 16
.Ltmp446:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp447:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
.Ltmp448:
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -40(%rbp)
	callq	block_input
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	%rdx, -48(%rbp)
	movq	-24(%rbp), %rdx
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rdx
	movl	60(%rdx), %ecx
	movl	%ecx, -52(%rbp)
	movl	$0, -56(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rdx, -80(%rbp)
.LBB145_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-80(%rbp), %rax
	movq	-32(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	cmpq	%rcx, %rax
	jae	.LBB145_4
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB145_1 Depth=1
	movq	-80(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-56(%rbp), %ecx
	movl	%ecx, -56(%rbp)
# BB#3:                                 # %for.inc
                                        #   in Loop: Header=BB145_1 Depth=1
	movq	-80(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB145_1
.LBB145_4:                              # %for.end
	movq	-16(%rbp), %rdi
	movl	-36(%rbp), %esi
	callq	window_box_width
	movq	-16(%rbp), %rdi
	subl	384(%rdi), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rdi
	movl	-36(%rbp), %esi
	callq	window_box_left
	movq	-16(%rbp), %rdi
	addl	384(%rdi), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rdi
	movl	388(%rdi), %eax
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movl	332(%rdi), %esi
	movq	-16(%rbp), %rdi
	addl	244(%rdi), %esi
	addl	%esi, %eax
	movl	%eax, -88(%rbp)
	movq	-48(%rbp), %rdi
	movq	376(%rdi), %rdi
	movq	112(%rdi), %rdi
	movq	184(%rdi), %rdi
	movq	-48(%rbp), %rcx
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movl	%eax, %ecx
	movq	-104(%rbp), %r10        # 8-byte Reload
	callq	*%r10
	xorl	%eax, %eax
	movl	$48, %ecx
	movl	%ecx, %edi
	movq	-32(%rbp), %r10
	movslq	-36(%rbp), %r11
	movq	-72(%rbp), %rbx
	movq	(%rbx,%r11,8), %r11
	subq	%r11, %r10
	movl	%eax, -108(%rbp)        # 4-byte Spill
	movq	%r10, %rax
	cqto
	idivq	%rdi
	movq	%rax, -96(%rbp)
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movl	384(%rax), %esi
	movq	-72(%rbp), %rax
	movl	-36(%rbp), %ecx
	movq	-96(%rbp), %r8
	movq	-96(%rbp), %r10
	movslq	-40(%rbp), %r11
	addq	%r11, %r10
	movq	%rax, %rdx
	movq	%r10, %r9
	movl	$0, (%rsp)
	movl	$0, 8(%rsp)
	callq	draw_glyphs
	movl	-40(%rbp), %ecx
	movq	-16(%rbp), %rdx
	addl	392(%rdx), %ecx
	movl	%ecx, 392(%rdx)
	movl	-56(%rbp), %ecx
	movq	-16(%rbp), %rdx
	addl	384(%rdx), %ecx
	movl	%ecx, 384(%rdx)
	movl	%eax, -112(%rbp)        # 4-byte Spill
	callq	unblock_input
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end145:
	.size	x_insert_glyphs, .Lfunc_end145-x_insert_glyphs
	.cfi_endproc

	.globl	x_clear_end_of_line
	.align	16, 0x90
	.type	x_clear_end_of_line,@function
x_clear_end_of_line:                    # @x_clear_end_of_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp449:
	.cfi_def_cfa_offset 16
.Ltmp450:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp451:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	$5, %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	236(%rsi), %rsi
	shrq	$19, %rsi
	andq	$1, %rsi
	testq	$1, %rsi
	je	.LBB146_9
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movl	256(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	movl	%ecx, -64(%rbp)         # 4-byte Spill
	je	.LBB146_7
# BB#2:                                 # %cond.true
	movq	-8(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -68(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -72(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-72(%rbp), %ecx         # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-68(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB146_4
# BB#3:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB146_5
.LBB146_4:                              # %cond.true.18
	xorl	%eax, %eax
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB146_6
.LBB146_5:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
.LBB146_6:                              # %cond.end
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB146_8
.LBB146_7:                              # %cond.false.21
	xorl	%eax, %eax
	movl	%eax, -80(%rbp)         # 4-byte Spill
	jmp	.LBB146_8
.LBB146_8:                              # %cond.end.22
	movl	-80(%rbp), %eax         # 4-byte Reload
	movl	-64(%rbp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	.LBB146_10
.LBB146_9:                              # %if.else
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	window_box_width
	movl	%eax, -36(%rbp)
.LBB146_10:                             # %if.end
	movq	-8(%rbp), %rdi
	callq	window_text_bottom_y
	movl	%eax, -44(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB146_12
# BB#11:                                # %if.then.28
	jmp	.LBB146_94
.LBB146_12:                             # %if.else.29
	cmpl	$0, -24(%rbp)
	jge	.LBB146_14
# BB#13:                                # %if.then.31
	movl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB146_18
.LBB146_14:                             # %if.else.32
	movl	-24(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB146_16
# BB#15:                                # %cond.true.34
	movl	-24(%rbp), %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB146_17
.LBB146_16:                             # %cond.false.35
	movl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB146_17:                             # %cond.end.36
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -24(%rbp)
.LBB146_18:                             # %if.end.38
	jmp	.LBB146_19
.LBB146_19:                             # %if.end.39
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	388(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB146_21
# BB#20:                                # %cond.true.42
	movl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB146_22
.LBB146_21:                             # %cond.false.43
	movq	-8(%rbp), %rax
	movl	388(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	60(%rax), %ecx
	movl	%ecx, -88(%rbp)         # 4-byte Spill
.LBB146_22:                             # %cond.end.48
	movl	-88(%rbp), %eax         # 4-byte Reload
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$19, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	jne	.LBB146_24
# BB#23:                                # %if.then.55
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-8(%rbp), %rax
	movl	384(%rax), %edx
	movq	-16(%rbp), %rax
	movl	48(%rax), %r8d
	movq	-16(%rbp), %rax
	movl	48(%rax), %r9d
	movq	-16(%rbp), %rax
	addl	60(%rax), %r9d
	callq	notice_overwritten_cursor
.LBB146_24:                             # %if.end.61
	movq	-8(%rbp), %rax
	movl	384(%rax), %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB146_56
# BB#25:                                # %if.then.69
	movl	-48(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-8(%rbp), %rcx
	movl	240(%rcx), %esi
	movq	-8(%rbp), %rcx
	movw	468(%rcx), %di
	shrw	$11, %di
	andw	$1, %di
	testw	$1, %di
	movl	%eax, -92(%rbp)         # 4-byte Spill
	movl	%edx, -96(%rbp)         # 4-byte Spill
	movl	%esi, -100(%rbp)        # 4-byte Spill
	je	.LBB146_27
# BB#26:                                # %cond.true.77
	xorl	%eax, %eax
	movl	%eax, -104(%rbp)        # 4-byte Spill
	jmp	.LBB146_34
.LBB146_27:                             # %cond.false.78
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB146_29
# BB#28:                                # %cond.true.81
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -116(%rbp)        # 4-byte Spill
	jmp	.LBB146_33
.LBB146_29:                             # %cond.false.89
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB146_31
# BB#30:                                # %cond.true.93
	movl	$1, %eax
	movl	%eax, -132(%rbp)        # 4-byte Spill
	jmp	.LBB146_32
.LBB146_31:                             # %cond.false.94
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-144(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -132(%rbp)        # 4-byte Spill
.LBB146_32:                             # %cond.end.99
	movl	-132(%rbp), %eax        # 4-byte Reload
	movl	%eax, -116(%rbp)        # 4-byte Spill
.LBB146_33:                             # %cond.end.101
	movl	-116(%rbp), %eax        # 4-byte Reload
	movl	%eax, -104(%rbp)        # 4-byte Spill
.LBB146_34:                             # %cond.end.103
	movl	-104(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB146_39
# BB#35:                                # %cond.true.106
	movq	-8(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB146_37
# BB#36:                                # %cond.true.108
	movq	-8(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
	jmp	.LBB146_38
.LBB146_37:                             # %cond.false.110
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
.LBB146_38:                             # %cond.end.113
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB146_40
.LBB146_39:                             # %cond.false.115
	xorl	%eax, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB146_40
.LBB146_40:                             # %cond.end.116
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	-100(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	-96(%rbp), %eax         # 4-byte Reload
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx         # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -48(%rbp)
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movl	332(%rdx), %ecx
	movq	-8(%rbp), %rdx
	movl	240(%rdx), %esi
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %di
	shrw	$11, %di
	andw	$1, %di
	testw	$1, %di
	movl	%eax, -156(%rbp)        # 4-byte Spill
	movl	%ecx, -160(%rbp)        # 4-byte Spill
	movl	%esi, -164(%rbp)        # 4-byte Spill
	je	.LBB146_42
# BB#41:                                # %cond.true.130
	xorl	%eax, %eax
	movl	%eax, -168(%rbp)        # 4-byte Spill
	jmp	.LBB146_49
.LBB146_42:                             # %cond.false.131
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB146_44
# BB#43:                                # %cond.true.135
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -180(%rbp)        # 4-byte Spill
	jmp	.LBB146_48
.LBB146_44:                             # %cond.false.143
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB146_46
# BB#45:                                # %cond.true.147
	movl	$1, %eax
	movl	%eax, -196(%rbp)        # 4-byte Spill
	jmp	.LBB146_47
.LBB146_46:                             # %cond.false.148
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-208(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -196(%rbp)        # 4-byte Spill
.LBB146_47:                             # %cond.end.153
	movl	-196(%rbp), %eax        # 4-byte Reload
	movl	%eax, -180(%rbp)        # 4-byte Spill
.LBB146_48:                             # %cond.end.155
	movl	-180(%rbp), %eax        # 4-byte Reload
	movl	%eax, -168(%rbp)        # 4-byte Spill
.LBB146_49:                             # %cond.end.157
	movl	-168(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB146_54
# BB#50:                                # %cond.true.160
	movq	-8(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB146_52
# BB#51:                                # %cond.true.163
	movq	-8(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
	jmp	.LBB146_53
.LBB146_52:                             # %cond.false.165
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
.LBB146_53:                             # %cond.end.169
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	%eax, -216(%rbp)        # 4-byte Spill
	jmp	.LBB146_55
.LBB146_54:                             # %cond.false.171
	xorl	%eax, %eax
	movl	%eax, -216(%rbp)        # 4-byte Spill
	jmp	.LBB146_55
.LBB146_55:                             # %cond.end.172
	movl	-216(%rbp), %eax        # 4-byte Reload
	movl	-164(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	-160(%rbp), %eax        # 4-byte Reload
	addl	%ecx, %eax
	movl	-156(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -24(%rbp)
	jmp	.LBB146_57
.LBB146_56:                             # %if.else.177
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %esi
	callq	window_box_left
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-60(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB146_57:                             # %if.end.181
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB146_58
	jmp	.LBB146_72
.LBB146_58:                             # %cond.true.183
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB146_87
# BB#59:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB146_87
# BB#60:                                # %land.lhs.true.193
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB146_87
# BB#61:                                # %land.lhs.true.200
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB146_87
# BB#62:                                # %land.lhs.true.205
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -228(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB146_63
	jmp	.LBB146_68
.LBB146_63:                             # %cond.true.208
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB146_70
# BB#64:                                # %land.lhs.true.213
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB146_70
# BB#65:                                # %land.lhs.true.219
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB146_70
# BB#66:                                # %land.lhs.true.227
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB146_70
# BB#67:                                # %land.lhs.true.232
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB146_69
	jmp	.LBB146_70
.LBB146_68:                             # %cond.false.237
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB146_69
	jmp	.LBB146_70
.LBB146_69:                             # %cond.true.238
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -244(%rbp)        # 4-byte Spill
	jmp	.LBB146_71
.LBB146_70:                             # %cond.false.242
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -244(%rbp)        # 4-byte Spill
.LBB146_71:                             # %cond.end.246
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	-228(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB146_73
	jmp	.LBB146_87
.LBB146_72:                             # %cond.false.249
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB146_73
	jmp	.LBB146_87
.LBB146_73:                             # %cond.true.250
	movq	-8(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB146_75
# BB#74:                                # %cond.true.252
	movq	-8(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -248(%rbp)        # 4-byte Spill
	jmp	.LBB146_86
.LBB146_75:                             # %cond.false.254
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB146_78
# BB#76:                                # %land.lhs.true.255
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB146_78
# BB#77:                                # %cond.true.258
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB146_79
	jmp	.LBB146_84
.LBB146_78:                             # %cond.false.263
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB146_79
	jmp	.LBB146_84
.LBB146_79:                             # %cond.true.264
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB146_82
# BB#80:                                # %land.lhs.true.267
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB146_82
# BB#81:                                # %cond.true.271
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -252(%rbp)        # 4-byte Spill
	jmp	.LBB146_83
.LBB146_82:                             # %cond.false.275
	xorl	%eax, %eax
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB146_83
.LBB146_83:                             # %cond.end.276
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB146_85
.LBB146_84:                             # %cond.false.278
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -256(%rbp)        # 4-byte Spill
.LBB146_85:                             # %cond.end.282
	movl	-256(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -248(%rbp)        # 4-byte Spill
.LBB146_86:                             # %cond.end.285
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB146_88
.LBB146_87:                             # %cond.false.287
	xorl	%eax, %eax
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB146_88
.LBB146_88:                             # %cond.end.288
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	388(%rcx), %eax
	jle	.LBB146_90
# BB#89:                                # %cond.true.293
	movl	-40(%rbp), %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
	jmp	.LBB146_91
.LBB146_90:                             # %cond.false.294
	movq	-8(%rbp), %rax
	movl	388(%rax), %ecx
	movl	%ecx, -264(%rbp)        # 4-byte Spill
.LBB146_91:                             # %cond.end.297
	movl	-264(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	244(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	244(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jle	.LBB146_94
# BB#92:                                # %land.lhs.true.311
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jle	.LBB146_94
# BB#93:                                # %if.then.313
	callq	block_input
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	152(%rax), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-24(%rbp), %ecx
	subl	-48(%rbp), %ecx
	movl	-56(%rbp), %r8d
	subl	-52(%rbp), %r8d
	callq	*%rax
	callq	unblock_input
.LBB146_94:                             # %if.end.316
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end146:
	.size	x_clear_end_of_line, .Lfunc_end146-x_clear_end_of_line
	.cfi_endproc

	.align	16, 0x90
	.type	notice_overwritten_cursor,@function
notice_overwritten_cursor:              # @notice_overwritten_cursor
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp452:
	.cfi_def_cfa_offset 16
.Ltmp453:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp454:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -28(%rbp)
	movq	-8(%rbp), %rdi
	movw	468(%rdi), %ax
	shrw	$7, %ax
	andw	$1, %ax
	testw	$1, %ax
	jne	.LBB147_2
# BB#1:                                 # %if.then
	jmp	.LBB147_22
.LBB147_2:                              # %if.end
	cmpl	$1, -12(%rbp)
	je	.LBB147_4
# BB#3:                                 # %if.then.1
	jmp	.LBB147_22
.LBB147_4:                              # %if.end.2
	movq	-8(%rbp), %rax
	cmpl	$0, 380(%rax)
	jl	.LBB147_9
# BB#5:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movl	380(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %ecx
	jge	.LBB147_9
# BB#6:                                 # %lor.lhs.false.7
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movslq	380(%rsi), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -56(%rbp)
	movq	-56(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -57(%rbp)          # 1-byte Spill
	je	.LBB147_8
# BB#7:                                 # %land.rhs
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	movb	%al, %cl
	movb	%cl, -57(%rbp)          # 1-byte Spill
.LBB147_8:                              # %land.end
	movb	-57(%rbp), %al          # 1-byte Reload
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB147_9
	jmp	.LBB147_10
.LBB147_9:                              # %if.then.19
	jmp	.LBB147_22
.LBB147_10:                             # %if.end.20
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$28, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB147_12
# BB#11:                                # %if.then.25
	movq	-56(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-268435457, %rcx       # imm = 0xFFFFFFFFEFFFFFFF
	movq	%rcx, 236(%rax)
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	movb	%al, %dl
	andb	$1, %dl
	movzbl	%dl, %edx
	callq	draw_fringe_bitmap
	movq	-8(%rbp), %rax
	movw	468(%rax), %r8w
	andw	$-129, %r8w
	movw	%r8w, 468(%rax)
	jmp	.LBB147_22
.LBB147_12:                             # %if.end.36
	movq	-8(%rbp), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -32(%rbp)
	movl	-32(%rbp), %ecx
	movq	-8(%rbp), %rax
	addl	408(%rax), %ecx
	movl	%ecx, -36(%rbp)
	movl	-16(%rbp), %ecx
	cmpl	-32(%rbp), %ecx
	jg	.LBB147_15
# BB#13:                                # %lor.lhs.false.40
	cmpl	$0, -20(%rbp)
	jl	.LBB147_16
# BB#14:                                # %land.lhs.true
	movl	-20(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB147_16
.LBB147_15:                             # %if.then.45
	jmp	.LBB147_22
.LBB147_16:                             # %if.end.46
	movq	-8(%rbp), %rax
	movl	372(%rax), %ecx
	movl	%ecx, -40(%rbp)
	movl	-40(%rbp), %ecx
	movq	-8(%rbp), %rax
	addl	416(%rax), %ecx
	movl	%ecx, -44(%rbp)
	movl	-24(%rbp), %ecx
	cmpl	-40(%rbp), %ecx
	jl	.LBB147_18
# BB#17:                                # %lor.lhs.false.51
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.LBB147_21
.LBB147_18:                             # %land.lhs.true.54
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB147_20
# BB#19:                                # %lor.lhs.false.57
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.LBB147_21
.LBB147_20:                             # %if.then.60
	jmp	.LBB147_22
.LBB147_21:                             # %if.end.61
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-129, %cx
	movw	%cx, 468(%rax)
.LBB147_22:                             # %return
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end147:
	.size	notice_overwritten_cursor, .Lfunc_end147-notice_overwritten_cursor
	.cfi_endproc

	.globl	set_frame_cursor_types
	.align	16, 0x90
	.type	set_frame_cursor_types,@function
set_frame_cursor_types:                 # @set_frame_cursor_types
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp455:
	.cfi_def_cfa_offset 16
.Ltmp456:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp457:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	leaq	-20(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$1, -20(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rax, %rsi
	callq	get_specified_cursor_type
	movq	-8(%rbp), %rsi
	movl	%eax, 404(%rsi)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rsi
	movl	%eax, 408(%rsi)
	movq	-16(%rbp), %rdi
	movq	globals+120, %rsi
	callq	Fassoc
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB148_2
# BB#1:                                 # %if.then
	leaq	-20(%rbp), %rsi
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rdi
	callq	get_specified_cursor_type
	movq	-8(%rbp), %rsi
	movl	%eax, 412(%rsi)
	movl	-20(%rbp), %eax
	movq	-8(%rbp), %rsi
	movl	%eax, 416(%rsi)
	jmp	.LBB148_3
.LBB148_2:                              # %if.else
	movq	-8(%rbp), %rax
	movl	$-2, 412(%rax)
.LBB148_3:                              # %if.end
	movq	-8(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-129, %rcx
	orq	$128, %rcx
	movq	%rcx, 208(%rax)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end148:
	.size	set_frame_cursor_types, .Lfunc_end148-set_frame_cursor_types
	.cfi_endproc

	.align	16, 0x90
	.type	get_specified_cursor_type,@function
get_specified_cursor_type:              # @get_specified_cursor_type
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp458:
	.cfi_def_cfa_offset 16
.Ltmp459:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp460:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movl	%eax, %edi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB149_2
# BB#1:                                 # %if.then
	movl	$-1, -4(%rbp)
	jmp	.LBB149_19
.LBB149_2:                              # %if.end
	movl	$218, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB149_4
# BB#3:                                 # %if.then.3
	movl	$0, -4(%rbp)
	jmp	.LBB149_19
.LBB149_4:                              # %if.end.4
	movl	$521, %edi              # imm = 0x209
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB149_6
# BB#5:                                 # %if.then.7
	movl	$1, -4(%rbp)
	jmp	.LBB149_19
.LBB149_6:                              # %if.end.8
	movl	$196, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB149_8
# BB#7:                                 # %if.then.11
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movl	$2, -4(%rbp)
	jmp	.LBB149_19
.LBB149_8:                              # %if.end.12
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB149_12
# BB#9:                                 # %land.lhs.true
	movl	$196, %edi
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB149_12
# BB#10:                                # %land.lhs.true.18
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rsi
	callq	RANGED_INTEGERP
	testb	$1, %al
	jne	.LBB149_11
	jmp	.LBB149_12
.LBB149_11:                             # %if.then.22
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, (%rax)
	movl	$2, -4(%rbp)
	jmp	.LBB149_19
.LBB149_12:                             # %if.end.27
	movl	$512, %edi              # imm = 0x200
	movq	-16(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB149_14
# BB#13:                                # %if.then.31
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movl	$3, -4(%rbp)
	jmp	.LBB149_19
.LBB149_14:                             # %if.end.32
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB149_18
# BB#15:                                # %land.lhs.true.37
	movl	$512, %edi              # imm = 0x200
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB149_18
# BB#16:                                # %land.lhs.true.43
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rsi
	callq	RANGED_INTEGERP
	testb	$1, %al
	jne	.LBB149_17
	jmp	.LBB149_18
.LBB149_17:                             # %if.then.49
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, (%rax)
	movl	$3, -4(%rbp)
	jmp	.LBB149_19
.LBB149_18:                             # %if.end.55
	movl	$1, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB149_19:                             # %return
	movl	-4(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end149:
	.size	get_specified_cursor_type, .Lfunc_end149-get_specified_cursor_type
	.cfi_endproc

	.globl	x_fix_overlapping_area
	.align	16, 0x90
	.type	x_fix_overlapping_area,@function
x_fix_overlapping_area:                 # @x_fix_overlapping_area
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp461:
	.cfi_def_cfa_offset 16
.Ltmp462:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp463:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	callq	block_input
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
.LBB150_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_4 Depth 2
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movswl	32(%rdx,%rcx,2), %esi
	cmpl	%esi, %eax
	jge	.LBB150_11
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB150_1 Depth=1
	movslq	-28(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	-16(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	24(%rax), %esi
	shrl	$6, %esi
	andl	$1, %esi
	testl	$1, %esi
	je	.LBB150_9
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB150_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB150_4:                              # %do.body
                                        #   Parent Loop BB150_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-28(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	-16(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movswl	16(%rax), %esi
	addl	-32(%rbp), %esi
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
# BB#5:                                 # %do.cond
                                        #   in Loop: Header=BB150_4 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movswl	32(%rsi,%rdx,2), %edi
	cmpl	%edi, %eax
	movb	%cl, -41(%rbp)          # 1-byte Spill
	jge	.LBB150_7
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB150_4 Depth=2
	movslq	-28(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	-16(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movl	24(%rax), %esi
	shrl	$6, %esi
	andl	$1, %esi
	movb	%sil, %dil
	movb	%dil, -41(%rbp)         # 1-byte Spill
.LBB150_7:                              # %land.end
                                        #   in Loop: Header=BB150_4 Depth=2
	movb	-41(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB150_4
# BB#8:                                 # %do.end
                                        #   in Loop: Header=BB150_1 Depth=1
	xorl	%eax, %eax
	movq	-8(%rbp), %rdi
	movl	-40(%rbp), %esi
	movq	-16(%rbp), %rdx
	movl	-20(%rbp), %ecx
	movslq	-36(%rbp), %r8
	movslq	-28(%rbp), %r9
	movl	-24(%rbp), %r10d
	movl	$0, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%eax, -48(%rbp)         # 4-byte Spill
	callq	draw_glyphs
	movl	%eax, -52(%rbp)         # 4-byte Spill
	jmp	.LBB150_10
.LBB150_9:                              # %if.else
                                        #   in Loop: Header=BB150_1 Depth=1
	movslq	-28(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	-16(%rbp), %rdx
	imulq	$48, %rax, %rax
	addq	(%rdx,%rcx,8), %rax
	movswl	16(%rax), %esi
	addl	-32(%rbp), %esi
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
.LBB150_10:                             # %if.end
                                        #   in Loop: Header=BB150_1 Depth=1
	jmp	.LBB150_1
.LBB150_11:                             # %for.end
	callq	unblock_input
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end150:
	.size	x_fix_overlapping_area, .Lfunc_end150-x_fix_overlapping_area
	.cfi_endproc

	.globl	draw_phys_cursor_glyph
	.align	16, 0x90
	.type	draw_phys_cursor_glyph,@function
draw_phys_cursor_glyph:                 # @draw_phys_cursor_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp464:
	.cfi_def_cfa_offset 16
.Ltmp465:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp466:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$80, %rsp
.Ltmp467:
	.cfi_offset %rbx, -32
.Ltmp468:
	.cfi_offset %r14, -24
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movq	-32(%rbp), %rsi
	movq	236(%rsi), %rsi
	shrq	$34, %rsi
	andq	$1, %rsi
	testq	$1, %rsi
	je	.LBB151_2
# BB#1:                                 # %cond.true
	movq	-24(%rbp), %rax
	cmpl	$0, 376(%rax)
	jge	.LBB151_3
	jmp	.LBB151_22
.LBB151_2:                              # %cond.false
	movq	-24(%rbp), %rax
	movl	376(%rax), %ecx
	movq	-32(%rbp), %rax
	movswl	34(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB151_22
.LBB151_3:                              # %if.then
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -37(%rbp)
	movq	-24(%rbp), %rax
	movl	376(%rax), %esi
	movl	%esi, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB151_6
# BB#4:                                 # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jge	.LBB151_6
# BB#5:                                 # %if.then.19
	movl	$0, -48(%rbp)
.LBB151_6:                              # %if.end
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB151_9
# BB#7:                                 # %land.lhs.true.26
	movl	-48(%rbp), %eax
	movq	-32(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jl	.LBB151_9
# BB#8:                                 # %if.then.32
	movq	-32(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -48(%rbp)
.LBB151_9:                              # %if.end.36
	movq	-24(%rbp), %rax
	movl	368(%rax), %esi
	movq	-32(%rbp), %rdx
	movslq	-48(%rbp), %rcx
	movl	%ecx, %edi
	incl	%edi
	movslq	%edi, %r9
	movl	-36(%rbp), %edi
	movq	%rsp, %r8
	movl	%edi, (%r8)
	movl	$0, 8(%r8)
	movl	$1, %edi
	movl	%edi, -52(%rbp)         # 4-byte Spill
	movq	%rax, %rdi
	movl	-52(%rbp), %r10d        # 4-byte Reload
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movl	%r10d, %ecx
	movq	-64(%rbp), %r8          # 8-byte Reload
	callq	draw_glyphs
	movl	%eax, -44(%rbp)
	movzbl	-37(%rbp), %eax
	movw	%ax, %r11w
	movb	%r11b, %bl
	movq	-24(%rbp), %rdx
	andl	$1, %eax
	movw	%ax, %r11w
	movw	468(%rdx), %r14w
	shlw	$7, %r11w
	andw	$-129, %r14w
	orw	%r11w, %r14w
	movw	%r14w, 468(%rdx)
	cmpl	$2, -36(%rbp)
	movb	%bl, -65(%rbp)          # 1-byte Spill
	jne	.LBB151_11
# BB#10:                                # %if.then.46
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	subl	368(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 408(%rcx)
	jmp	.LBB151_21
.LBB151_11:                             # %if.else
	cmpl	$0, -36(%rbp)
	jne	.LBB151_20
# BB#12:                                # %land.lhs.true.52
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$21, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB151_20
# BB#13:                                # %if.then.58
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rcx
	subl	368(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 408(%rcx)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	192(%rdx), %rdx
	cmpq	8(%rdx), %rcx
	jbe	.LBB151_16
# BB#14:                                # %land.lhs.true.65
	movq	-32(%rbp), %rax
	movl	-188(%rax), %ecx
	movq	-32(%rbp), %rax
	subl	-192(%rax), %ecx
	movq	-32(%rbp), %rax
	movl	-196(%rax), %edx
	movq	-32(%rbp), %rax
	subl	-200(%rax), %edx
	cmpl	%edx, %ecx
	jle	.LBB151_16
# BB#15:                                # %if.then.73
	movl	$1, %edx
	movl	$4, %ecx
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, %rsi
	callq	x_fix_overlapping_area
.LBB151_16:                             # %if.end.75
	movq	-32(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-32(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-24(%rbp), %rdi
	movl	%ecx, -72(%rbp)         # 4-byte Spill
	callq	window_text_bottom_y
	movl	-72(%rbp), %ecx         # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB151_19
# BB#17:                                # %land.lhs.true.81
	movq	-32(%rbp), %rax
	movl	320(%rax), %ecx
	movq	-32(%rbp), %rax
	cmpl	312(%rax), %ecx
	jle	.LBB151_19
# BB#18:                                # %if.then.88
	movl	$1, %edx
	movl	$4, %ecx
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, %rsi
	callq	x_fix_overlapping_area
.LBB151_19:                             # %if.end.90
	jmp	.LBB151_20
.LBB151_20:                             # %if.end.91
	jmp	.LBB151_21
.LBB151_21:                             # %if.end.92
	jmp	.LBB151_22
.LBB151_22:                             # %if.end.93
	addq	$80, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
.Lfunc_end151:
	.size	draw_phys_cursor_glyph, .Lfunc_end151-draw_phys_cursor_glyph
	.cfi_endproc

	.globl	erase_phys_cursor
	.align	16, 0x90
	.type	erase_phys_cursor,@function
erase_phys_cursor:                      # @erase_phys_cursor
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp469:
	.cfi_def_cfa_offset 16
.Ltmp470:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp471:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB152_2
# BB#1:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB152_3
.LBB152_2:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB152_3:                              # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	376(%rax), %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	380(%rax), %ecx
	movl	%ecx, -32(%rbp)
	movb	$0, -33(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$-1, 404(%rax)
	jne	.LBB152_5
# BB#4:                                 # %if.then
	jmp	.LBB152_80
.LBB152_5:                              # %if.end
	movl	-32(%rbp), %eax
	movq	-48(%rbp), %rcx
	cmpl	24(%rcx), %eax
	jl	.LBB152_7
# BB#6:                                 # %if.then.9
	jmp	.LBB152_80
.LBB152_7:                              # %if.end.10
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB152_9
# BB#8:                                 # %if.then.15
	jmp	.LBB152_80
.LBB152_9:                              # %if.end.16
	movq	-56(%rbp), %rax
	movl	72(%rax), %ecx
	movq	-8(%rbp), %rdi
	movl	%ecx, -100(%rbp)        # 4-byte Spill
	callq	window_text_bottom_y
	movq	-56(%rbp), %rdi
	subl	48(%rdi), %eax
	movl	-100(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jge	.LBB152_11
# BB#10:                                # %cond.true.19
	movq	-56(%rbp), %rax
	movl	72(%rax), %ecx
	movl	%ecx, -104(%rbp)        # 4-byte Spill
	jmp	.LBB152_12
.LBB152_11:                             # %cond.false.21
	movq	-8(%rbp), %rdi
	callq	window_text_bottom_y
	movq	-56(%rbp), %rdi
	subl	48(%rdi), %eax
	movl	%eax, -104(%rbp)        # 4-byte Spill
.LBB152_12:                             # %cond.end.25
	movl	-104(%rbp), %eax        # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	-56(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jg	.LBB152_14
# BB#13:                                # %if.then.30
	jmp	.LBB152_80
.LBB152_14:                             # %if.end.31
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$28, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB152_16
# BB#15:                                # %if.then.36
	movq	-56(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-268435457, %rcx       # imm = 0xFFFFFFFFEFFFFFFF
	movq	%rcx, 236(%rax)
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	movb	%al, %dl
	andb	$1, %dl
	movzbl	%dl, %edx
	callq	draw_fringe_bitmap
	jmp	.LBB152_80
.LBB152_16:                             # %if.end.44
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB152_18
# BB#17:                                # %cond.true.51
	movq	-8(%rbp), %rax
	cmpl	$0, 376(%rax)
	jl	.LBB152_19
	jmp	.LBB152_20
.LBB152_18:                             # %cond.false.56
	movq	-8(%rbp), %rax
	movl	376(%rax), %ecx
	movq	-56(%rbp), %rax
	movswl	34(%rax), %edx
	cmpl	%edx, %ecx
	jl	.LBB152_20
.LBB152_19:                             # %if.then.62
	jmp	.LBB152_80
.LBB152_20:                             # %if.end.63
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB152_23
# BB#21:                                # %land.lhs.true
	cmpl	$0, -28(%rbp)
	jge	.LBB152_23
# BB#22:                                # %if.then.71
	movl	$0, -28(%rbp)
.LBB152_23:                             # %if.end.72
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB152_26
# BB#24:                                # %land.lhs.true.79
	movl	-28(%rbp), %eax
	movq	-56(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jl	.LBB152_26
# BB#25:                                # %if.then.85
	movq	-56(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -28(%rbp)
.LBB152_26:                             # %if.end.90
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB152_31
# BB#27:                                # %land.lhs.true.94
	movq	-8(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	coords_in_mouse_face_p
	testb	$1, %al
	jne	.LBB152_28
	jmp	.LBB152_31
.LBB152_28:                             # %land.lhs.true.97
	movq	-56(%rbp), %rax
	movswl	34(%rax), %ecx
	cmpl	-28(%rbp), %ecx
	jle	.LBB152_31
# BB#29:                                # %land.lhs.true.103
	cmpl	$0, -28(%rbp)
	jl	.LBB152_31
# BB#30:                                # %if.then.106
	movb	$1, -33(%rbp)
.LBB152_31:                             # %if.end.107
	movq	-8(%rbp), %rax
	cmpl	$1, 404(%rax)
	jne	.LBB152_76
# BB#32:                                # %if.then.111
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB152_33
	jmp	.LBB152_47
.LBB152_33:                             # %cond.true.116
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB152_62
# BB#34:                                # %land.lhs.true.120
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB152_62
# BB#35:                                # %land.lhs.true.125
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB152_62
# BB#36:                                # %land.lhs.true.133
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB152_62
# BB#37:                                # %land.lhs.true.139
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB152_38
	jmp	.LBB152_43
.LBB152_38:                             # %cond.true.143
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB152_45
# BB#39:                                # %land.lhs.true.148
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB152_45
# BB#40:                                # %land.lhs.true.154
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB152_45
# BB#41:                                # %land.lhs.true.163
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB152_45
# BB#42:                                # %land.lhs.true.169
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB152_44
	jmp	.LBB152_45
.LBB152_43:                             # %cond.false.175
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB152_44
	jmp	.LBB152_45
.LBB152_44:                             # %cond.true.176
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB152_46
.LBB152_45:                             # %cond.false.180
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
.LBB152_46:                             # %cond.end.184
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	-124(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB152_48
	jmp	.LBB152_62
.LBB152_47:                             # %cond.false.188
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB152_48
	jmp	.LBB152_62
.LBB152_48:                             # %cond.true.189
	movq	-8(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB152_50
# BB#49:                                # %cond.true.193
	movq	-8(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -144(%rbp)        # 4-byte Spill
	jmp	.LBB152_61
.LBB152_50:                             # %cond.false.195
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB152_53
# BB#51:                                # %land.lhs.true.197
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB152_53
# BB#52:                                # %cond.true.201
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB152_54
	jmp	.LBB152_59
.LBB152_53:                             # %cond.false.205
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB152_54
	jmp	.LBB152_59
.LBB152_54:                             # %cond.true.206
	movq	-8(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB152_57
# BB#55:                                # %land.lhs.true.209
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB152_57
# BB#56:                                # %cond.true.213
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -148(%rbp)        # 4-byte Spill
	jmp	.LBB152_58
.LBB152_57:                             # %cond.false.217
	xorl	%eax, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB152_58
.LBB152_58:                             # %cond.end.218
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB152_60
.LBB152_59:                             # %cond.false.220
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB152_60:                             # %cond.end.224
	movl	-152(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -144(%rbp)        # 4-byte Spill
.LBB152_61:                             # %cond.end.227
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB152_63
.LBB152_62:                             # %cond.false.229
	xorl	%eax, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB152_63
.LBB152_63:                             # %cond.end.230
	movl	-156(%rbp), %eax        # 4-byte Reload
	movl	%eax, -80(%rbp)
	movq	-8(%rbp), %rdi
	callq	get_phys_cursor_glyph
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.LBB152_65
# BB#64:                                # %if.then.235
	jmp	.LBB152_80
.LBB152_65:                             # %if.end.236
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	%ecx, -84(%rbp)
	movq	-8(%rbp), %rax
	movl	368(%rax), %ecx
	movl	%ecx, -72(%rbp)
	cmpl	$0, -72(%rbp)
	jge	.LBB152_67
# BB#66:                                # %if.then.242
	movl	-72(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -72(%rbp)
.LBB152_67:                             # %if.end.243
	movl	$1, %esi
	movl	-84(%rbp), %eax
	movq	-8(%rbp), %rdi
	movl	%eax, -160(%rbp)        # 4-byte Spill
	callq	window_box_width
	subl	-72(%rbp), %eax
	movl	-160(%rbp), %esi        # 4-byte Reload
	cmpl	%eax, %esi
	jge	.LBB152_69
# BB#68:                                # %cond.true.248
	movl	-84(%rbp), %eax
	movl	%eax, -164(%rbp)        # 4-byte Spill
	jmp	.LBB152_70
.LBB152_69:                             # %cond.false.249
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	window_box_width
	subl	-72(%rbp), %eax
	movl	%eax, -164(%rbp)        # 4-byte Spill
.LBB152_70:                             # %cond.end.252
	movl	-164(%rbp), %eax        # 4-byte Reload
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	48(%rcx), %eax
	jle	.LBB152_72
# BB#71:                                # %cond.true.257
	movl	-80(%rbp), %eax
	movl	%eax, -168(%rbp)        # 4-byte Spill
	jmp	.LBB152_73
.LBB152_72:                             # %cond.false.258
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -168(%rbp)        # 4-byte Spill
.LBB152_73:                             # %cond.end.260
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	$1, %esi
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %edx
	movq	-8(%rbp), %rcx
	addl	244(%rcx), %edx
	addl	%edx, %eax
	movl	%eax, -76(%rbp)
	movq	-8(%rbp), %rdi
	callq	window_box_left
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	cmpl	$0, -84(%rbp)
	jle	.LBB152_75
# BB#74:                                # %if.then.270
	movq	-16(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	152(%rax), %rax
	movq	-16(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-56(%rbp), %r8
	movl	72(%r8), %r8d
	callq	*%rax
.LBB152_75:                             # %if.end.272
	jmp	.LBB152_76
.LBB152_76:                             # %if.end.273
	testb	$1, -33(%rbp)
	je	.LBB152_78
# BB#77:                                # %if.then.275
	movl	$3, -68(%rbp)
	jmp	.LBB152_79
.LBB152_78:                             # %if.else
	movl	$0, -68(%rbp)
.LBB152_79:                             # %if.end.276
	movq	-8(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movl	-68(%rbp), %edx
	callq	draw_phys_cursor_glyph
.LBB152_80:                             # %mark_cursor_off
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-129, %cx
	movw	%cx, 468(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 404(%rax)
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end152:
	.size	erase_phys_cursor, .Lfunc_end152-erase_phys_cursor
	.cfi_endproc

	.align	16, 0x90
	.type	coords_in_mouse_face_p,@function
coords_in_mouse_face_p:                 # @coords_in_mouse_face_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp472:
	.cfi_def_cfa_offset 16
.Ltmp473:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp474:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %edx
	cmpl	$2, %edx
	jne	.LBB153_2
# BB#1:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB153_3
.LBB153_2:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB153_3:                              # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB153_4
	jmp	.LBB153_5
.LBB153_4:                              # %land.lhs.true
	movq	-32(%rbp), %rax
	movq	24(%rax), %rdi
	callq	XWINDOW
	cmpq	-16(%rbp), %rax
	je	.LBB153_6
.LBB153_5:                              # %if.then
	movb	$0, -1(%rbp)
	jmp	.LBB153_38
.LBB153_6:                              # %if.end
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	jl	.LBB153_8
# BB#7:                                 # %lor.lhs.false
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jle	.LBB153_9
.LBB153_8:                              # %if.then.13
	movb	$0, -1(%rbp)
	jmp	.LBB153_38
.LBB153_9:                              # %if.end.14
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB153_12
# BB#10:                                # %land.lhs.true.17
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB153_12
# BB#11:                                # %if.then.20
	movb	$1, -1(%rbp)
	jmp	.LBB153_38
.LBB153_12:                             # %if.end.21
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB153_25
# BB#13:                                # %if.then.26
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	movq	-32(%rbp), %rax
	cmpl	12(%rax), %ecx
	jne	.LBB153_18
# BB#14:                                # %if.then.30
	movq	-32(%rbp), %rax
	movl	4(%rax), %ecx
	cmpl	-20(%rbp), %ecx
	jg	.LBB153_17
# BB#15:                                # %land.lhs.true.32
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB153_17
# BB#16:                                # %if.then.34
	movb	$1, -1(%rbp)
	jmp	.LBB153_38
.LBB153_17:                             # %if.end.35
	jmp	.LBB153_24
.LBB153_18:                             # %if.else
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	jne	.LBB153_20
# BB#19:                                # %land.lhs.true.38
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB153_22
.LBB153_20:                             # %lor.lhs.false.41
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jne	.LBB153_23
# BB#21:                                # %land.lhs.true.44
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB153_23
.LBB153_22:                             # %if.then.47
	movb	$1, -1(%rbp)
	jmp	.LBB153_38
.LBB153_23:                             # %if.end.48
	jmp	.LBB153_24
.LBB153_24:                             # %if.end.49
	jmp	.LBB153_37
.LBB153_25:                             # %if.else.50
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	movq	-32(%rbp), %rax
	cmpl	12(%rax), %ecx
	jne	.LBB153_30
# BB#26:                                # %if.then.54
	movq	-32(%rbp), %rax
	movl	16(%rax), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB153_29
# BB#27:                                # %land.lhs.true.57
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jg	.LBB153_29
# BB#28:                                # %if.then.60
	movb	$1, -1(%rbp)
	jmp	.LBB153_38
.LBB153_29:                             # %if.end.61
	jmp	.LBB153_36
.LBB153_30:                             # %if.else.62
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	jne	.LBB153_32
# BB#31:                                # %land.lhs.true.65
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB153_34
.LBB153_32:                             # %lor.lhs.false.68
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jne	.LBB153_35
# BB#33:                                # %land.lhs.true.71
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jle	.LBB153_35
.LBB153_34:                             # %if.then.74
	movb	$1, -1(%rbp)
	jmp	.LBB153_38
.LBB153_35:                             # %if.end.75
	jmp	.LBB153_36
.LBB153_36:                             # %if.end.76
	jmp	.LBB153_37
.LBB153_37:                             # %if.end.77
	movb	$0, -1(%rbp)
.LBB153_38:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end153:
	.size	coords_in_mouse_face_p, .Lfunc_end153-coords_in_mouse_face_p
	.cfi_endproc

	.globl	display_and_set_cursor
	.align	16, 0x90
	.type	display_and_set_cursor,@function
display_and_set_cursor:                 # @display_and_set_cursor
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp475:
	.cfi_def_cfa_offset 16
.Ltmp476:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp477:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
.Ltmp478:
	.cfi_offset %rbx, -24
	movb	%sil, %al
	movq	%rdi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -36(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$10, %rdi
	andq	$3, %rdi
	movl	%edi, %ecx
	cmpl	$0, %ecx
	je	.LBB154_4
# BB#1:                                 # %lor.lhs.false
	movq	-48(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB154_4
# BB#2:                                 # %lor.lhs.false.5
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB154_4
# BB#3:                                 # %lor.lhs.false.6
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB154_5
.LBB154_4:                              # %if.then
	jmp	.LBB154_27
.LBB154_5:                              # %if.end
	testb	$1, -17(%rbp)
	jne	.LBB154_8
# BB#6:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB154_8
# BB#7:                                 # %if.then.14
	jmp	.LBB154_27
.LBB154_8:                              # %if.end.15
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB154_10
# BB#9:                                 # %if.then.21
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-129, %cx
	movw	%cx, 468(%rax)
	jmp	.LBB154_27
.LBB154_10:                             # %if.end.25
	movq	$0, -80(%rbp)
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$27, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB154_13
# BB#11:                                # %lor.lhs.false.30
	xorl	%eax, %eax
	cmpl	-24(%rbp), %eax
	jg	.LBB154_14
# BB#12:                                # %land.lhs.true.32
	movl	-24(%rbp), %eax
	movq	-72(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB154_14
.LBB154_13:                             # %if.then.35
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
.LBB154_14:                             # %if.end.39
	leaq	-56(%rbp), %rdx
	leaq	-57(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	-80(%rbp), %rsi
	callq	get_window_cursor_type
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rcx
	movw	468(%rcx), %r8w
	shrw	$7, %r8w
	andw	$1, %r8w
	testw	$1, %r8w
	je	.LBB154_24
# BB#15:                                # %land.lhs.true.46
	testb	$1, -17(%rbp)
	je	.LBB154_23
# BB#16:                                # %lor.lhs.false.48
	movq	-16(%rbp), %rax
	movl	368(%rax), %ecx
	cmpl	-32(%rbp), %ecx
	jne	.LBB154_23
# BB#17:                                # %lor.lhs.false.52
	movq	-16(%rbp), %rax
	movl	372(%rax), %ecx
	cmpl	-36(%rbp), %ecx
	jne	.LBB154_23
# BB#18:                                # %lor.lhs.false.57
	cmpl	$0, -24(%rbp)
	jl	.LBB154_23
# BB#19:                                # %lor.lhs.false.60
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	404(%rcx), %eax
	jne	.LBB154_23
# BB#20:                                # %lor.lhs.false.63
	cmpl	$2, -52(%rbp)
	je	.LBB154_22
# BB#21:                                # %lor.lhs.false.66
	cmpl	$3, -52(%rbp)
	jne	.LBB154_24
.LBB154_22:                             # %land.lhs.true.69
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	408(%rcx), %eax
	je	.LBB154_24
.LBB154_23:                             # %if.then.72
	movq	-16(%rbp), %rdi
	callq	erase_phys_cursor
.LBB154_24:                             # %if.end.73
	testb	$1, -17(%rbp)
	je	.LBB154_26
# BB#25:                                # %if.then.75
	movq	-72(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 412(%rax)
	movq	-72(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 416(%rax)
	movl	-32(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 368(%rax)
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 372(%rax)
	movl	-24(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 376(%rax)
	movl	-28(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 380(%rax)
.LBB154_26:                             # %if.end.85
	movq	-48(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	160(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-52(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movb	-17(%rbp), %r10b
	movb	-57(%rbp), %r11b
	andb	$1, %r10b
	andb	$1, %r11b
	movzbl	%r10b, %ebx
	movl	%ebx, (%rsp)
	movzbl	%r11b, %ebx
	movl	%ebx, 8(%rsp)
	callq	*%rax
.LBB154_27:                             # %return
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end154:
	.size	display_and_set_cursor, .Lfunc_end154-display_and_set_cursor
	.cfi_endproc

	.align	16, 0x90
	.type	get_window_cursor_type,@function
get_window_cursor_type:                 # @get_window_cursor_type
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp479:
	.cfi_def_cfa_offset 16
.Ltmp480:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp481:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	%rcx, -48(%rbp)
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	callq	XBUFFER
	movq	%rax, -56(%rbp)
	movl	$-2, -60(%rbp)
	movb	$0, -73(%rbp)
	movq	-40(%rbp), %rax
	movb	$1, (%rax)
	testb	$1, globals+3371
	je	.LBB155_10
# BB#1:                                 # %land.lhs.true
	movq	-48(%rbp), %rax
	movq	56(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB155_2
	jmp	.LBB155_10
.LBB155_2:                              # %land.lhs.true.2
	movq	-48(%rbp), %rax
	movq	56(%rax), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB155_10
# BB#3:                                 # %land.lhs.true.7
	movq	-48(%rbp), %rax
	movq	56(%rax), %rax
	cmpq	echo_area_window, %rax
	jne	.LBB155_10
# BB#4:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	echo_area_window, %rdi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB155_9
# BB#5:                                 # %if.then.12
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB155_7
# BB#6:                                 # %lor.lhs.false
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB155_8
.LBB155_7:                              # %if.then.18
	movq	-48(%rbp), %rax
	movl	408(%rax), %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	movl	404(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB155_67
.LBB155_8:                              # %if.else
	movq	-56(%rbp), %rax
	movq	552(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	get_specified_cursor_type
	movl	%eax, -4(%rbp)
	jmp	.LBB155_67
.LBB155_9:                              # %if.end
	movq	-40(%rbp), %rax
	movb	$0, (%rax)
	movb	$1, -73(%rbp)
	jmp	.LBB155_17
.LBB155_10:                             # %if.else.21
	movq	-16(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	48(%rcx), %rdi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB155_12
# BB#11:                                # %lor.lhs.false.24
	movq	-48(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	384(%rcx), %rcx
	movq	424(%rcx), %rcx
	cmpq	616(%rcx), %rax
	je	.LBB155_16
.LBB155_12:                             # %if.then.26
	movq	-40(%rbp), %rax
	movb	$0, (%rax)
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB155_15
# BB#13:                                # %land.lhs.true.27
	cmpq	$0, minibuf_level
	jne	.LBB155_15
# BB#14:                                # %if.then.29
	movl	$-1, -4(%rbp)
	jmp	.LBB155_67
.LBB155_15:                             # %if.end.30
	movb	$1, -73(%rbp)
.LBB155_16:                             # %if.end.31
	jmp	.LBB155_17
.LBB155_17:                             # %if.end.32
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB155_19
# BB#18:                                # %if.then.36
	movl	$-1, -4(%rbp)
	jmp	.LBB155_67
.LBB155_19:                             # %if.end.37
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB155_21
# BB#20:                                # %if.then.41
	movq	-48(%rbp), %rax
	movl	404(%rax), %ecx
	movl	%ecx, -60(%rbp)
	movq	-48(%rbp), %rax
	movl	408(%rax), %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
	jmp	.LBB155_22
.LBB155_21:                             # %if.else.44
	movq	-56(%rbp), %rax
	movq	552(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	get_specified_cursor_type
	movl	%eax, -60(%rbp)
.LBB155_22:                             # %if.end.47
	testb	$1, -73(%rbp)
	je	.LBB155_32
# BB#23:                                # %if.then.49
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	568(%rax), %rax
	movq	%rax, -72(%rbp)
	callq	builtin_lisp_symbol
	cmpq	-72(%rbp), %rax
	je	.LBB155_25
# BB#24:                                # %if.then.52
	movq	-72(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	get_specified_cursor_type
	movl	%eax, -4(%rbp)
	jmp	.LBB155_67
.LBB155_25:                             # %if.end.54
	cmpl	$0, -60(%rbp)
	jne	.LBB155_27
# BB#26:                                # %if.then.56
	movl	$1, -60(%rbp)
	jmp	.LBB155_31
.LBB155_27:                             # %if.else.57
	cmpl	$2, -60(%rbp)
	jne	.LBB155_30
# BB#28:                                # %land.lhs.true.59
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jle	.LBB155_30
# BB#29:                                # %if.then.61
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, (%rax)
.LBB155_30:                             # %if.end.62
	jmp	.LBB155_31
.LBB155_31:                             # %if.end.63
	movl	-60(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_67
.LBB155_32:                             # %if.end.64
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$8, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB155_62
# BB#33:                                # %if.then.68
	cmpq	$0, -24(%rbp)
	je	.LBB155_36
# BB#34:                                # %land.lhs.true.70
	movq	-24(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$5, %ecx
	jne	.LBB155_36
# BB#35:                                # %if.then.74
	movl	$-1, -4(%rbp)
	jmp	.LBB155_67
.LBB155_36:                             # %if.end.75
	cmpq	$0, -24(%rbp)
	je	.LBB155_61
# BB#37:                                # %land.lhs.true.77
	movq	-24(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$3, %ecx
	jne	.LBB155_61
# BB#38:                                # %if.then.82
	cmpl	$0, -60(%rbp)
	jne	.LBB155_57
# BB#39:                                # %if.then.84
	movq	-24(%rbp), %rax
	cmpl	$0, 40(%rax)
	jl	.LBB155_42
# BB#40:                                # %land.lhs.true.86
	movq	-24(%rbp), %rax
	movslq	40(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB155_42
# BB#41:                                # %cond.true
	movq	-24(%rbp), %rax
	movslq	40(%rax), %rax
	movq	-48(%rbp), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB155_43
.LBB155_42:                             # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	jmp	.LBB155_43
.LBB155_43:                             # %cond.end
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	je	.LBB155_56
# BB#44:                                # %land.lhs.true.97
	movq	-88(%rbp), %rax
	movq	120(%rax), %rdi
	callq	IMAGEP
	testb	$1, %al
	jne	.LBB155_45
	jmp	.LBB155_56
.LBB155_45:                             # %if.then.100
	movq	-88(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB155_54
# BB#46:                                # %lor.lhs.false.102
	movl	$32, %eax
	movq	-88(%rbp), %rcx
	movl	92(%rcx), %edx
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpl	364(%rcx), %eax
	movl	%edx, -148(%rbp)        # 4-byte Spill
	jle	.LBB155_48
# BB#47:                                # %cond.true.108
	movl	$32, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB155_49
.LBB155_48:                             # %cond.false.109
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	364(%rax), %ecx
	movl	%ecx, -152(%rbp)        # 4-byte Spill
.LBB155_49:                             # %cond.end.113
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	-148(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB155_54
# BB#50:                                # %lor.lhs.false.117
	movl	$32, %eax
	movq	-88(%rbp), %rcx
	movl	96(%rcx), %edx
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpl	368(%rcx), %eax
	movl	%edx, -156(%rbp)        # 4-byte Spill
	jle	.LBB155_52
# BB#51:                                # %cond.true.122
	movl	$32, %eax
	movl	%eax, -160(%rbp)        # 4-byte Spill
	jmp	.LBB155_53
.LBB155_52:                             # %cond.false.123
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -160(%rbp)        # 4-byte Spill
.LBB155_53:                             # %cond.end.127
	movl	-160(%rbp), %eax        # 4-byte Reload
	movl	-156(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jle	.LBB155_55
.LBB155_54:                             # %if.then.131
	movl	$1, -60(%rbp)
.LBB155_55:                             # %if.end.132
	jmp	.LBB155_56
.LBB155_56:                             # %if.end.133
	jmp	.LBB155_60
.LBB155_57:                             # %if.else.134
	cmpl	$-1, -60(%rbp)
	je	.LBB155_59
# BB#58:                                # %if.then.137
	movl	$1, -60(%rbp)
.LBB155_59:                             # %if.end.138
	jmp	.LBB155_60
.LBB155_60:                             # %if.end.139
	jmp	.LBB155_61
.LBB155_61:                             # %if.end.140
	movl	-60(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_67
.LBB155_62:                             # %if.end.141
	movq	-56(%rbp), %rax
	movq	552(%rax), %rdi
	movq	globals+120, %rsi
	callq	Fassoc
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB155_63
	jmp	.LBB155_64
.LBB155_63:                             # %if.then.147
	movq	-72(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	get_specified_cursor_type
	movl	%eax, -4(%rbp)
	jmp	.LBB155_67
.LBB155_64:                             # %if.end.151
	movq	-48(%rbp), %rax
	cmpl	$-2, 412(%rax)
	je	.LBB155_66
# BB#65:                                # %if.then.154
	movq	-48(%rbp), %rax
	movl	416(%rax), %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	movl	412(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB155_67
.LBB155_66:                             # %if.end.156
	movl	$-1, -4(%rbp)
.LBB155_67:                             # %return
	movl	-4(%rbp), %eax
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end155:
	.size	get_window_cursor_type, .Lfunc_end155-get_window_cursor_type
	.cfi_endproc

	.globl	x_update_cursor
	.align	16, 0x90
	.type	x_update_cursor,@function
x_update_cursor:                        # @x_update_cursor
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp482:
	.cfi_def_cfa_offset 16
.Ltmp483:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp484:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	40(%rdi), %rdi
	callq	XWINDOW
	movb	-9(%rbp), %cl
	andb	$1, %cl
	movq	%rax, %rdi
	movzbl	%cl, %esi
	callq	update_cursor_in_window_tree
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end156:
	.size	x_update_cursor, .Lfunc_end156-x_update_cursor
	.cfi_endproc

	.align	16, 0x90
	.type	update_cursor_in_window_tree,@function
update_cursor_in_window_tree:           # @update_cursor_in_window_tree
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp485:
	.cfi_def_cfa_offset 16
.Ltmp486:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp487:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
.LBB157_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB157_9
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB157_1 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB157_3
	jmp	.LBB157_4
.LBB157_3:                              # %if.then
                                        #   in Loop: Header=BB157_1 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XWINDOW
	movb	-9(%rbp), %cl
	andb	$1, %cl
	movq	%rax, %rdi
	movzbl	%cl, %esi
	callq	update_cursor_in_window_tree
	jmp	.LBB157_5
.LBB157_4:                              # %if.else
                                        #   in Loop: Header=BB157_1 Depth=1
	movq	-8(%rbp), %rdi
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	update_window_cursor
.LBB157_5:                              # %if.end
                                        #   in Loop: Header=BB157_1 Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB157_7
# BB#6:                                 # %cond.true
                                        #   in Loop: Header=BB157_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jmp	.LBB157_8
.LBB157_7:                              # %cond.false
                                        #   in Loop: Header=BB157_1 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	XWINDOW
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB157_8:                              # %cond.end
                                        #   in Loop: Header=BB157_1 Depth=1
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, -8(%rbp)
	jmp	.LBB157_1
.LBB157_9:                              # %while.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end157:
	.size	update_cursor_in_window_tree, .Lfunc_end157-update_cursor_in_window_tree
	.cfi_endproc

	.globl	x_clear_cursor
	.align	16, 0x90
	.type	x_clear_cursor,@function
x_clear_cursor:                         # @x_clear_cursor
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp488:
	.cfi_def_cfa_offset 16
.Ltmp489:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp490:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	208(%rdi), %rdi
	shrq	$10, %rdi
	andq	$3, %rdi
	movl	%edi, %eax
	cmpl	$0, %eax
	je	.LBB158_3
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB158_3
# BB#2:                                 # %if.then
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	update_window_cursor
.LBB158_3:                              # %if.end
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end158:
	.size	x_clear_cursor, .Lfunc_end158-x_clear_cursor
	.cfi_endproc

	.align	16, 0x90
	.type	update_window_cursor,@function
update_window_cursor:                   # @update_window_cursor
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp491:
	.cfi_def_cfa_offset 16
.Ltmp492:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp493:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 192(%rdi)
	je	.LBB159_11
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movl	376(%rax), %ecx
	movl	%ecx, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	380(%rax), %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %ecx
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %ecx
	jge	.LBB159_3
# BB#2:                                 # %lor.lhs.false
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB159_4
.LBB159_3:                              # %if.then.7
	jmp	.LBB159_11
.LBB159_4:                              # %if.end
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB159_7
# BB#5:                                 # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jge	.LBB159_7
# BB#6:                                 # %if.then.10
	movl	$0, -16(%rbp)
.LBB159_7:                              # %if.end.11
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB159_10
# BB#8:                                 # %land.lhs.true.17
	movl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jl	.LBB159_10
# BB#9:                                 # %if.then.20
	movq	-32(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -16(%rbp)
.LBB159_10:                             # %if.end.24
	callq	block_input
	movq	-8(%rbp), %rdi
	movb	-9(%rbp), %al
	movl	-16(%rbp), %edx
	movl	-20(%rbp), %ecx
	movq	-8(%rbp), %rsi
	movl	368(%rsi), %r8d
	movq	-8(%rbp), %rsi
	movl	372(%rsi), %r9d
	andb	$1, %al
	movzbl	%al, %esi
	callq	display_and_set_cursor
	callq	unblock_input
.LBB159_11:                             # %if.end.28
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end159:
	.size	update_window_cursor, .Lfunc_end159-update_window_cursor
	.cfi_endproc

	.globl	clear_mouse_face
	.align	16, 0x90
	.type	clear_mouse_face,@function
clear_mouse_face:                       # @clear_mouse_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp494:
	.cfi_def_cfa_offset 16
.Ltmp495:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp496:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movb	64(%rdi), %dl
	shrb	$2, %dl
	andb	$1, %dl
	testb	$1, %dl
	movb	%cl, -10(%rbp)          # 1-byte Spill
	jne	.LBB160_2
# BB#1:                                 # %land.rhs
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -10(%rbp)          # 1-byte Spill
.LBB160_2:                              # %land.end
	movb	-10(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -9(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB160_4
# BB#3:                                 # %if.then
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	show_mouse_face
.LBB160_4:                              # %if.end
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movl	$-1, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, (%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 16(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, 12(%rax)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	%rax, 24(%rcx)
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movb	-9(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end160:
	.size	clear_mouse_face, .Lfunc_end160-clear_mouse_face
	.cfi_endproc

	.align	16, 0x90
	.type	show_mouse_face,@function
show_mouse_face:                        # @show_mouse_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp497:
	.cfi_def_cfa_offset 16
.Ltmp498:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp499:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	24(%rdi), %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB161_55
# BB#1:                                 # %land.lhs.true
	cmpl	$3, -12(%rbp)
	jne	.LBB161_3
# BB#2:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movb	64(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB161_55
.LBB161_3:                              # %land.lhs.true.2
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %ecx
	jge	.LBB161_55
# BB#4:                                 # %if.then
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -33(%rbp)
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rsi
	movslq	12(%rsi), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rax
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB161_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -81(%rbp)          # 1-byte Spill
	ja	.LBB161_7
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	movb	%al, %cl
	movb	%cl, -81(%rbp)          # 1-byte Spill
.LBB161_7:                              # %land.end
                                        #   in Loop: Header=BB161_5 Depth=1
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB161_8
	jmp	.LBB161_44
.LBB161_8:                              # %for.body
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB161_16
# BB#9:                                 # %if.then.22
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB161_11
# BB#10:                                # %if.then.27
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -68(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -76(%rbp)
	jmp	.LBB161_15
.LBB161_11:                             # %if.else
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB161_13
# BB#12:                                # %if.then.29
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, -68(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, -76(%rbp)
	jmp	.LBB161_14
.LBB161_13:                             # %if.else.30
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	$0, -68(%rbp)
	movl	$0, -76(%rbp)
.LBB161_14:                             # %if.end
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_15
.LBB161_15:                             # %if.end.31
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_21
.LBB161_16:                             # %if.else.32
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB161_19
# BB#17:                                # %land.lhs.true.38
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB161_19
# BB#18:                                # %if.then.40
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, -68(%rbp)
	movq	-8(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, -76(%rbp)
	jmp	.LBB161_20
.LBB161_19:                             # %if.else.43
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	$0, -68(%rbp)
	movl	$0, -76(%rbp)
.LBB161_20:                             # %if.end.44
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_21
.LBB161_21:                             # %if.end.45
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB161_31
# BB#22:                                # %if.then.47
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB161_24
# BB#23:                                # %if.then.53
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, -72(%rbp)
	jmp	.LBB161_30
.LBB161_24:                             # %if.else.55
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB161_26
# BB#25:                                # %if.then.57
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -72(%rbp)
	jmp	.LBB161_29
.LBB161_26:                             # %if.else.59
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -72(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB161_28
# BB#27:                                # %if.then.62
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-65537, %rcx           # imm = 0xFFFFFFFFFFFEFFFF
	orq	$65536, %rcx            # imm = 0x10000
	movq	%rcx, 236(%rax)
.LBB161_28:                             # %if.end.65
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_29
.LBB161_29:                             # %if.end.66
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_30
.LBB161_30:                             # %if.end.67
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_38
.LBB161_31:                             # %if.else.68
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB161_34
# BB#32:                                # %land.lhs.true.75
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB161_34
# BB#33:                                # %if.then.78
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -72(%rbp)
	jmp	.LBB161_37
.LBB161_34:                             # %if.else.80
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -72(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.LBB161_36
# BB#35:                                # %if.then.86
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-65537, %rcx           # imm = 0xFFFFFFFFFFFEFFFF
	orq	$65536, %rcx            # imm = 0x10000
	movq	%rcx, 236(%rax)
.LBB161_36:                             # %if.end.91
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_37
.LBB161_37:                             # %if.end.92
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_38
.LBB161_38:                             # %if.end.93
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jle	.LBB161_42
# BB#39:                                # %if.then.96
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-24(%rbp), %rdi
	movl	-76(%rbp), %esi
	movq	-48(%rbp), %rdx
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-12(%rbp), %r9d
	callq	draw_row_with_mouse_face
	movb	$1, %al
	cmpl	$3, -12(%rbp)
	movb	%al, -82(%rbp)          # 1-byte Spill
	je	.LBB161_41
# BB#40:                                # %lor.rhs
                                        #   in Loop: Header=BB161_5 Depth=1
	cmpl	$4, -12(%rbp)
	sete	%al
	movb	%al, -82(%rbp)          # 1-byte Spill
.LBB161_41:                             # %lor.end
                                        #   in Loop: Header=BB161_5 Depth=1
	movb	-82(%rbp), %al          # 1-byte Reload
	movq	-48(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$25, %rsi
	andq	$-33554433, %rdi        # imm = 0xFFFFFFFFFDFFFFFF
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB161_42:                             # %if.end.104
                                        #   in Loop: Header=BB161_5 Depth=1
	jmp	.LBB161_43
.LBB161_43:                             # %for.inc
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-48(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -48(%rbp)
	jmp	.LBB161_5
.LBB161_44:                             # %for.end
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB161_54
# BB#45:                                # %land.lhs.true.111
	testb	$1, -33(%rbp)
	je	.LBB161_54
# BB#46:                                # %land.lhs.true.114
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB161_54
# BB#47:                                # %if.then.120
	movq	-24(%rbp), %rax
	movl	376(%rax), %ecx
	movl	%ecx, -80(%rbp)
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB161_50
# BB#48:                                # %land.lhs.true.127
	cmpl	$0, -80(%rbp)
	jge	.LBB161_50
# BB#49:                                # %if.then.130
	movl	$0, -80(%rbp)
.LBB161_50:                             # %if.end.131
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB161_53
# BB#51:                                # %land.lhs.true.138
	movl	-80(%rbp), %eax
	movq	-48(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jl	.LBB161_53
# BB#52:                                # %if.then.144
	movq	-48(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -80(%rbp)
.LBB161_53:                             # %if.end.149
	callq	block_input
	movl	$1, %esi
	movq	-24(%rbp), %rdi
	movl	-80(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	380(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	368(%rax), %r8d
	movq	-24(%rbp), %rax
	movl	372(%rax), %r9d
	callq	display_and_set_cursor
	callq	unblock_input
.LBB161_54:                             # %if.end.153
	jmp	.LBB161_55
.LBB161_55:                             # %if.end.154
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB161_61
# BB#56:                                # %land.lhs.true.162
	xorl	%edi, %edi
	movq	globals+2944, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB161_61
# BB#57:                                # %if.then.166
	cmpl	$3, -12(%rbp)
	jne	.LBB161_59
# BB#58:                                # %if.then.169
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	144(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	384(%rcx), %rcx
	movq	320(%rcx), %rsi
	callq	*%rax
	jmp	.LBB161_60
.LBB161_59:                             # %if.else.171
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	144(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	384(%rcx), %rcx
	movq	304(%rcx), %rsi
	callq	*%rax
.LBB161_60:                             # %if.end.177
	jmp	.LBB161_61
.LBB161_61:                             # %if.end.178
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end161:
	.size	show_mouse_face, .Lfunc_end161-show_mouse_face
	.cfi_endproc

	.globl	cursor_in_mouse_face_p
	.align	16, 0x90
	.type	cursor_in_mouse_face_p,@function
cursor_in_mouse_face_p:                 # @cursor_in_mouse_face_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp500:
	.cfi_def_cfa_offset 16
.Ltmp501:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp502:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	376(%rdi), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	380(%rdi), %eax
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	192(%rdi), %rdi
	movq	8(%rdi), %rdi
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$34, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	jne	.LBB162_3
# BB#1:                                 # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jge	.LBB162_3
# BB#2:                                 # %if.then
	movl	$0, -12(%rbp)
.LBB162_3:                              # %if.end
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB162_6
# BB#4:                                 # %land.lhs.true.9
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jl	.LBB162_6
# BB#5:                                 # %if.then.12
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -12(%rbp)
.LBB162_6:                              # %if.end.16
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	coords_in_mouse_face_p
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end162:
	.size	cursor_in_mouse_face_p, .Lfunc_end162-cursor_in_mouse_face_p
	.cfi_endproc

	.globl	find_hot_spot
	.align	16, 0x90
	.type	find_hot_spot,@function
find_hot_spot:                          # @find_hot_spot
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp503:
	.cfi_def_cfa_offset 16
.Ltmp504:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp505:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
.LBB163_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB163_6
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB163_5
# BB#3:                                 # %land.lhs.true
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	on_hot_spot_p
	testb	$1, %al
	jne	.LBB163_4
	jmp	.LBB163_5
.LBB163_4:                              # %if.then
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB163_7
.LBB163_5:                              # %if.end
                                        #   in Loop: Header=BB163_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB163_1
.LBB163_6:                              # %while.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB163_7:                              # %return
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end163:
	.size	find_hot_spot, .Lfunc_end163-find_hot_spot
	.cfi_endproc

	.align	16, 0x90
	.type	on_hot_spot_p,@function
on_hot_spot_p:                          # @on_hot_spot_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp506:
	.cfi_def_cfa_offset 16
.Ltmp507:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp508:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	-16(%rbp), %rdi
	andq	$7, %rdi
	movl	%edi, %edx
	cmpl	$3, %edx
	je	.LBB164_2
# BB#1:                                 # %if.then
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_2:                              # %if.end
	movl	$797, %edi              # imm = 0x31D
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB164_26
# BB#3:                                 # %if.then.4
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB164_5
# BB#4:                                 # %if.then.10
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_5:                              # %if.end.11
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB164_7
# BB#6:                                 # %if.then.18
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_7:                              # %if.end.19
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB164_9
# BB#8:                                 # %if.then.27
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_9:                              # %if.end.28
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	subq	$3, %rdx
	movq	(%rdx), %rdx
	subq	$3, %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	movb	%cl, -177(%rbp)         # 1-byte Spill
	jne	.LBB164_11
# BB#10:                                # %land.rhs
	movslq	-20(%rbp), %rax
	movq	-40(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	setge	%dl
	movb	%dl, -177(%rbp)         # 1-byte Spill
.LBB164_11:                             # %land.end
	movb	-177(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB164_13
# BB#12:                                # %if.then.41
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_13:                             # %if.end.42
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	subq	$3, %rdx
	movq	(%rdx), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	movb	%cl, -178(%rbp)         # 1-byte Spill
	jne	.LBB164_15
# BB#14:                                # %land.rhs.53
	movslq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	setge	%dl
	movb	%dl, -178(%rbp)         # 1-byte Spill
.LBB164_15:                             # %land.end.58
	movb	-178(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB164_17
# BB#16:                                # %if.then.59
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_17:                             # %if.end.60
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	subq	$3, %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	movb	%cl, -179(%rbp)         # 1-byte Spill
	jne	.LBB164_19
# BB#18:                                # %land.rhs.71
	movslq	-20(%rbp), %rax
	movq	-40(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	setle	%dl
	movb	%dl, -179(%rbp)         # 1-byte Spill
.LBB164_19:                             # %land.end.76
	movb	-179(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB164_21
# BB#20:                                # %if.then.77
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_21:                             # %if.end.78
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	movb	%cl, -180(%rbp)         # 1-byte Spill
	jne	.LBB164_23
# BB#22:                                # %land.rhs.90
	movslq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	setle	%dl
	movb	%dl, -180(%rbp)         # 1-byte Spill
.LBB164_23:                             # %land.end.95
	movb	-180(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB164_25
# BB#24:                                # %if.then.96
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_25:                             # %if.end.97
	movb	$1, -1(%rbp)
	jmp	.LBB164_66
.LBB164_26:                             # %if.else
	movl	$264, %edi              # imm = 0x108
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB164_34
# BB#27:                                # %if.then.103
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB164_33
# BB#28:                                # %land.lhs.true
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB164_33
# BB#29:                                # %land.lhs.true.117
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB164_30
	jmp	.LBB164_33
.LBB164_30:                             # %land.lhs.true.123
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB164_33
# BB#31:                                # %land.lhs.true.133
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB164_33
# BB#32:                                # %if.then.144
	movq	-56(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -80(%rbp)
	movq	-64(%rbp), %rdi
	sarq	$2, %rdi
	movslq	-20(%rbp), %rax
	subq	%rax, %rdi
	cvtsi2sdq	%rdi, %xmm0
	movsd	%xmm0, -88(%rbp)
	movq	-72(%rbp), %rax
	sarq	$2, %rax
	movslq	-24(%rbp), %rdi
	subq	%rdi, %rax
	cvtsi2sdq	%rax, %xmm0
	movsd	%xmm0, -96(%rbp)
	movsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	mulsd	-88(%rbp), %xmm0
	movsd	-96(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-96(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	-80(%rbp), %xmm1        # xmm1 = mem[0],zero
	mulsd	-80(%rbp), %xmm1
	ucomisd	%xmm0, %xmm1
	setae	%cl
	andb	$1, %cl
	movb	%cl, -1(%rbp)
	jmp	.LBB164_66
.LBB164_33:                             # %if.end.158
	jmp	.LBB164_64
.LBB164_34:                             # %if.else.159
	movl	$759, %edi              # imm = 0x2F7
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB164_63
# BB#35:                                # %if.then.165
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB164_36
	jmp	.LBB164_62
.LBB164_36:                             # %if.then.170
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rdi
	callq	XVECTOR
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -112(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movb	$0, -129(%rbp)
	cmpq	$6, -120(%rbp)
	jl	.LBB164_38
# BB#37:                                # %lor.lhs.false
	movq	-120(%rbp), %rax
	andq	$1, %rax
	cmpq	$0, %rax
	je	.LBB164_39
.LBB164_38:                             # %if.then.178
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_39:                             # %if.end.179
	movq	-120(%rbp), %rax
	subq	$2, %rax
	movq	-112(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	sete	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	jne	.LBB164_41
# BB#40:                                # %lor.lhs.false.186
	movq	-120(%rbp), %rax
	subq	$1, %rax
	movq	-112(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movq	-144(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	sete	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	jne	.LBB164_41
	jmp	.LBB164_42
.LBB164_41:                             # %if.then.195
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_42:                             # %if.end.196
	movq	-144(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -156(%rbp)
	movq	-152(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -160(%rbp)
	movq	$0, -128(%rbp)
.LBB164_43:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-128(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jge	.LBB164_61
# BB#44:                                # %for.body
                                        #   in Loop: Header=BB164_43 Depth=1
	movl	-156(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-160(%rbp), %eax
	movl	%eax, -168(%rbp)
	movq	-128(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	andq	$7, %rcx
	movl	%ecx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	sete	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	jne	.LBB164_46
# BB#45:                                # %lor.lhs.false.210
                                        #   in Loop: Header=BB164_43 Depth=1
	movq	-128(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	8(%rcx,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	sete	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	jne	.LBB164_46
	jmp	.LBB164_47
.LBB164_46:                             # %if.then.219
	movb	$0, -1(%rbp)
	jmp	.LBB164_66
.LBB164_47:                             # %if.end.220
                                        #   in Loop: Header=BB164_43 Depth=1
	movq	-144(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -156(%rbp)
	movq	-152(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -160(%rbp)
	movl	-156(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jl	.LBB164_51
# BB#48:                                # %if.then.227
                                        #   in Loop: Header=BB164_43 Depth=1
	movl	-164(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.LBB164_50
# BB#49:                                # %if.then.230
                                        #   in Loop: Header=BB164_43 Depth=1
	jmp	.LBB164_60
.LBB164_50:                             # %if.end.231
                                        #   in Loop: Header=BB164_43 Depth=1
	jmp	.LBB164_54
.LBB164_51:                             # %if.else.232
                                        #   in Loop: Header=BB164_43 Depth=1
	movl	-164(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB164_53
# BB#52:                                # %if.then.235
                                        #   in Loop: Header=BB164_43 Depth=1
	jmp	.LBB164_60
.LBB164_53:                             # %if.end.236
                                        #   in Loop: Header=BB164_43 Depth=1
	jmp	.LBB164_54
.LBB164_54:                             # %if.end.237
                                        #   in Loop: Header=BB164_43 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jle	.LBB164_57
# BB#55:                                # %land.lhs.true.240
                                        #   in Loop: Header=BB164_43 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-168(%rbp), %eax
	jle	.LBB164_57
# BB#56:                                # %if.then.243
                                        #   in Loop: Header=BB164_43 Depth=1
	jmp	.LBB164_60
.LBB164_57:                             # %if.end.244
                                        #   in Loop: Header=BB164_43 Depth=1
	movl	-24(%rbp), %eax
	movl	-160(%rbp), %ecx
	movl	-168(%rbp), %edx
	subl	-160(%rbp), %edx
	movl	-20(%rbp), %esi
	subl	-156(%rbp), %esi
	imull	%esi, %edx
	movl	-164(%rbp), %esi
	subl	-156(%rbp), %esi
	movl	%eax, -204(%rbp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	-204(%rbp), %eax        # 4-byte Reload
	cmpl	%ecx, %eax
	jge	.LBB164_59
# BB#58:                                # %if.then.252
                                        #   in Loop: Header=BB164_43 Depth=1
	movb	-129(%rbp), %al
	xorb	$-1, %al
	andb	$1, %al
	movb	%al, -129(%rbp)
.LBB164_59:                             # %if.end.255
                                        #   in Loop: Header=BB164_43 Depth=1
	jmp	.LBB164_60
.LBB164_60:                             # %for.inc
                                        #   in Loop: Header=BB164_43 Depth=1
	movq	-128(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB164_43
.LBB164_61:                             # %for.end
	movb	-129(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB164_66
.LBB164_62:                             # %if.end.258
	jmp	.LBB164_63
.LBB164_63:                             # %if.end.259
	jmp	.LBB164_64
.LBB164_64:                             # %if.end.260
	jmp	.LBB164_65
.LBB164_65:                             # %if.end.261
	movb	$0, -1(%rbp)
.LBB164_66:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end164:
	.size	on_hot_spot_p, .Lfunc_end164-on_hot_spot_p
	.cfi_endproc

	.globl	Flookup_image_map
	.align	16, 0x90
	.type	Flookup_image_map,@function
Flookup_image_map:                      # @Flookup_image_map
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp509:
	.cfi_def_cfa_offset 16
.Ltmp510:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp511:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rdx
	movl	%eax, %edi
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB165_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB165_9
.LBB165_2:                              # %if.end
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB165_4
# BB#3:                                 # %cond.true
	jmp	.LBB165_5
.LBB165_4:                              # %cond.false
	movl	$559, %edi              # imm = 0x22F
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB165_5:                              # %cond.end
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB165_7
# BB#6:                                 # %cond.true.11
	jmp	.LBB165_8
.LBB165_7:                              # %cond.false.12
	movl	$559, %edi              # imm = 0x22F
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB165_8:                              # %cond.end.14
	movq	$-2147483648, %rdi      # imm = 0xFFFFFFFF80000000
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %rsi
	sarq	$2, %rsi
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	clip_to_bounds
	movq	$-2147483648, %rdi      # imm = 0xFFFFFFFF80000000
	movl	$2147483647, %r8d       # imm = 0x7FFFFFFF
	movl	%r8d, %edx
	movl	%eax, %r8d
	movq	-32(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	movl	%r8d, -68(%rbp)         # 4-byte Spill
	callq	clip_to_bounds
	movl	%eax, %r8d
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%r8d, %edx
	callq	find_hot_spot
	movq	%rax, -8(%rbp)
.LBB165_9:                              # %return
	movq	-8(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end165:
	.size	Flookup_image_map, .Lfunc_end165-Flookup_image_map
	.cfi_endproc

	.globl	note_mouse_highlight
	.align	16, 0x90
	.type	note_mouse_highlight,@function
note_mouse_highlight:                   # @note_mouse_highlight
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp512:
	.cfi_def_cfa_offset 16
.Ltmp513:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp514:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1144, %rsp             # imm = 0x478
.Ltmp515:
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %edx
	cmpl	$2, %edx
	jne	.LBB166_2
# BB#1:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	jmp	.LBB166_3
.LBB166_2:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
.LBB166_3:                              # %cond.end
	movq	-480(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -64(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -72(%rbp)
	callq	popup_activated
	cmpl	$0, %eax
	je	.LBB166_5
# BB#4:                                 # %if.then
	jmp	.LBB166_231
.LBB166_5:                              # %if.end
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB166_7
# BB#6:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$21, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB166_8
.LBB166_7:                              # %if.then.13
	jmp	.LBB166_231
.LBB166_8:                              # %if.end.14
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 60(%rcx)
	movq	-16(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	%rcx, 48(%rdx)
	movq	-32(%rbp), %rcx
	movb	64(%rcx), %sil
	shrb	$1, %sil
	andb	$1, %sil
	testb	$1, %sil
	je	.LBB166_10
# BB#9:                                 # %if.then.19
	jmp	.LBB166_231
.LBB166_10:                             # %if.end.20
	leaq	-36(%rbp), %rcx
	movl	$1, %r8d
	movq	-16(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	window_from_coordinates
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jne	.LBB166_16
# BB#11:                                # %lor.lhs.false.23
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_17
# BB#12:                                # %land.lhs.true
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-496(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_17
# BB#13:                                # %land.lhs.true.29
	cmpl	$1, -36(%rbp)
	je	.LBB166_17
# BB#14:                                # %land.lhs.true.31
	cmpl	$2, -36(%rbp)
	je	.LBB166_17
# BB#15:                                # %land.lhs.true.33
	cmpl	$4, -36(%rbp)
	je	.LBB166_17
.LBB166_16:                             # %if.then.35
	movq	-32(%rbp), %rdi
	callq	clear_mouse_face
	movb	%al, -497(%rbp)         # 1-byte Spill
.LBB166_17:                             # %if.end.37
	movq	-48(%rbp), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB166_19
# BB#18:                                # %if.then.39
	jmp	.LBB166_231
.LBB166_19:                             # %if.end.40
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, help_echo_string
	movq	-48(%rbp), %rdi
	callq	XWINDOW
	leaq	-20(%rbp), %rsi
	leaq	-24(%rbp), %rdx
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	frame_to_window_pixel_xy
	cmpl	$2, -36(%rbp)
	je	.LBB166_23
# BB#20:                                # %lor.lhs.false.44
	cmpl	$4, -36(%rbp)
	je	.LBB166_23
# BB#21:                                # %lor.lhs.false.46
	cmpl	$7, -36(%rbp)
	je	.LBB166_23
# BB#22:                                # %lor.lhs.false.48
	cmpl	$8, -36(%rbp)
	jne	.LBB166_27
.LBB166_23:                             # %if.then.50
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movl	-36(%rbp), %ecx
	callq	note_mode_line_or_margin_highlight
	cmpl	$7, -36(%rbp)
	je	.LBB166_25
# BB#24:                                # %lor.lhs.false.52
	cmpl	$8, -36(%rbp)
	jne	.LBB166_26
.LBB166_25:                             # %if.then.54
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB166_229
.LBB166_26:                             # %if.else
	jmp	.LBB166_231
.LBB166_27:                             # %if.end.57
	cmpl	$3, -36(%rbp)
	jne	.LBB166_29
# BB#28:                                # %if.then.59
	movabsq	$.L.str.7, %rdi
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	336(%rax), %rax
	movq	%rax, -64(%rbp)
	callq	build_string
	movq	%rax, help_echo_string
	jmp	.LBB166_47
.LBB166_29:                             # %if.else.63
	cmpl	$11, -36(%rbp)
	jne	.LBB166_31
# BB#30:                                # %if.then.65
	movabsq	$.L.str.7, %rdi
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	336(%rax), %rax
	movq	%rax, -64(%rbp)
	callq	build_string
	movq	%rax, help_echo_string
	jmp	.LBB166_46
.LBB166_31:                             # %if.else.70
	cmpl	$12, -36(%rbp)
	jne	.LBB166_38
# BB#32:                                # %if.then.72
	movq	-56(%rbp), %rax
	movl	244(%rax), %ecx
	movq	-56(%rbp), %rax
	addl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -504(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -508(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-508(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-504(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB166_35
# BB#33:                                # %lor.lhs.false.82
	cmpq	$0, minibuf_level
	jne	.LBB166_35
# BB#34:                                # %lor.lhs.false.84
	xorl	%edi, %edi
	movq	globals+2040, %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-520(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_36
.LBB166_35:                             # %if.then.87
	movabsq	$.L.str.7, %rdi
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	344(%rax), %rax
	movq	%rax, -64(%rbp)
	callq	build_string
	movq	%rax, help_echo_string
	jmp	.LBB166_37
.LBB166_36:                             # %if.else.91
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB166_37:                             # %if.end.95
	jmp	.LBB166_45
.LBB166_38:                             # %if.else.96
	cmpl	$5, -36(%rbp)
	je	.LBB166_42
# BB#39:                                # %lor.lhs.false.98
	cmpl	$6, -36(%rbp)
	je	.LBB166_42
# BB#40:                                # %lor.lhs.false.100
	cmpl	$9, -36(%rbp)
	je	.LBB166_42
# BB#41:                                # %lor.lhs.false.102
	cmpl	$10, -36(%rbp)
	jne	.LBB166_43
.LBB166_42:                             # %if.then.104
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB166_44
.LBB166_43:                             # %if.else.108
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	296(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB166_44:                             # %if.end.111
	jmp	.LBB166_45
.LBB166_45:                             # %if.end.112
	jmp	.LBB166_46
.LBB166_46:                             # %if.end.113
	jmp	.LBB166_47
.LBB166_47:                             # %if.end.114
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -80(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB166_228
# BB#48:                                # %land.lhs.true.117
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB166_228
# BB#49:                                # %land.lhs.true.122
	movq	-56(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB166_228
# BB#50:                                # %if.then.124
	xorl	%edi, %edi
	movl	$3, -100(%rbp)
	callq	builtin_lisp_symbol
	leaq	-84(%rbp), %rcx
	leaq	-88(%rbp), %r8
	leaq	-92(%rbp), %r9
	leaq	-96(%rbp), %rdx
	leaq	-100(%rbp), %rsi
	movq	%rax, -136(%rbp)
	movq	$0, -152(%rbp)
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %r10d
	movl	-24(%rbp), %r11d
	subq	$16, %rsp
	movq	%rsi, -528(%rbp)        # 8-byte Spill
	movl	%r10d, %esi
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	movl	%r11d, %edx
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-528(%rbp), %rbx        # 8-byte Reload
	movq	%rbx, 8(%rsp)
	callq	x_y_to_hpos_vpos
	addq	$16, %rsp
	movq	%rax, -120(%rbp)
	cmpq	$0, -120(%rbp)
	je	.LBB166_73
# BB#51:                                # %land.lhs.true.128
	movq	-120(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$3, %ecx
	jne	.LBB166_73
# BB#52:                                # %if.then.132
	movq	-120(%rbp), %rax
	cmpl	$0, 40(%rax)
	jl	.LBB166_55
# BB#53:                                # %land.lhs.true.134
	movq	-120(%rbp), %rax
	movslq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB166_55
# BB#54:                                # %cond.true.139
	movq	-120(%rbp), %rax
	movslq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	jmp	.LBB166_56
.LBB166_55:                             # %cond.false.144
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -544(%rbp)        # 8-byte Spill
	jmp	.LBB166_56
.LBB166_56:                             # %cond.end.145
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)
	cmpq	$0, -208(%rbp)
	je	.LBB166_72
# BB#57:                                # %land.lhs.true.149
	movq	-208(%rbp), %rax
	movq	120(%rax), %rdi
	callq	IMAGEP
	testb	$1, %al
	jne	.LBB166_58
	jmp	.LBB166_72
.LBB166_58:                             # %if.then.152
	movl	$79, %edi
	movq	-208(%rbp), %rax
	movq	120(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-560(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB166_59
	jmp	.LBB166_69
.LBB166_59:                             # %land.lhs.true.161
	movq	-216(%rbp), %rdi
	movq	-120(%rbp), %rax
	movq	32(%rax), %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %ecx
	addl	-92(%rbp), %ecx
	movq	-120(%rbp), %rax
	movq	32(%rax), %rax
	shrq	$16, %rax
	andq	$65535, %rax            # imm = 0xFFFF
	movl	%eax, %edx
	addl	-96(%rbp), %edx
	movl	%ecx, %esi
	callq	find_hot_spot
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB166_69
# BB#60:                                # %land.lhs.true.178
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB166_69
# BB#61:                                # %if.then.186
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB166_68
# BB#62:                                # %land.lhs.true.194
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB166_68
# BB#63:                                # %if.then.200
	movl	$757, %edi              # imm = 0x2F5
	movq	-232(%rbp), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-568(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-576(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB166_65
# BB#64:                                # %if.then.206
	movl	$504, %edi              # imm = 0x1F8
	callq	builtin_lisp_symbol
	movq	%rax, -72(%rbp)
.LBB166_65:                             # %if.end.208
	movl	$516, %edi              # imm = 0x204
	movq	-232(%rbp), %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-584(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, help_echo_string
	movq	help_echo_string, %rax
	movq	%rax, -592(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-592(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB166_67
# BB#66:                                # %if.then.214
	movq	-48(%rbp), %rax
	movq	%rax, help_echo_window
	movq	-120(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, help_echo_object
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, help_echo_pos
.LBB166_67:                             # %if.end.216
	jmp	.LBB166_68
.LBB166_68:                             # %if.end.217
	jmp	.LBB166_69
.LBB166_69:                             # %if.end.218
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-600(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_71
# BB#70:                                # %if.then.222
	movl	$93, %edi
	movq	-208(%rbp), %rax
	movq	120(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	movq	%rax, -72(%rbp)
.LBB166_71:                             # %if.end.229
	jmp	.LBB166_72
.LBB166_72:                             # %if.end.230
	jmp	.LBB166_73
.LBB166_73:                             # %if.end.231
	cmpq	$0, -120(%rbp)
	je	.LBB166_81
# BB#74:                                # %lor.lhs.false.234
	cmpl	$1, -100(%rbp)
	jne	.LBB166_81
# BB#75:                                # %lor.lhs.false.237
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB166_81
# BB#76:                                # %lor.lhs.false.242
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-616(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_81
# BB#77:                                # %lor.lhs.false.247
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB166_90
# BB#78:                                # %land.lhs.true.257
	movq	-120(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	cmpq	8(%rcx), %rax
	jne	.LBB166_90
# BB#79:                                # %land.lhs.true.265
	movq	-120(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$4, %ecx
	jne	.LBB166_90
# BB#80:                                # %land.lhs.true.271
	movq	-120(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$9, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB166_90
.LBB166_81:                             # %if.then.277
	movq	-32(%rbp), %rdi
	callq	clear_mouse_face
	testb	$1, %al
	jne	.LBB166_82
	jmp	.LBB166_83
.LBB166_82:                             # %if.then.279
	movq	$0, -64(%rbp)
.LBB166_83:                             # %if.end.280
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB166_89
# BB#84:                                # %land.lhs.true.288
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-624(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_89
# BB#85:                                # %if.then.292
	cmpl	$1, -100(%rbp)
	je	.LBB166_87
# BB#86:                                # %if.then.295
	movq	-16(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB166_88
.LBB166_87:                             # %if.else.299
	movq	globals+2600, %rax
	movq	%rax, -72(%rbp)
.LBB166_88:                             # %if.end.300
	jmp	.LBB166_89
.LBB166_89:                             # %if.end.301
	jmp	.LBB166_229
.LBB166_90:                             # %if.end.302
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-120(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_93
# BB#91:                                # %land.lhs.true.306
	movq	-128(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB166_93
# BB#92:                                # %if.then.308
	jmp	.LBB166_229
.LBB166_93:                             # %if.end.309
	movq	-128(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB166_94
	jmp	.LBB166_96
.LBB166_94:                             # %land.lhs.true.312
	movq	-112(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	720(%rcx), %rcx
	cmpq	16(%rcx), %rax
	jle	.LBB166_96
# BB#95:                                # %if.then.315
	jmp	.LBB166_229
.LBB166_96:                             # %if.end.316
	movq	current_buffer, %rax
	movq	%rax, -176(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, current_buffer
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	current_buffer, %rax
	movq	$1, 752(%rax)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	%rax, 768(%rcx)
	movq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -144(%rbp)
	movq	$16384, -240(%rbp)      # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -248(%rbp)
	movb	$0, -249(%rbp)
	movq	-128(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB166_97
	jmp	.LBB166_112
.LBB166_97:                             # %if.then.324
	jmp	.LBB166_98
.LBB166_98:                             # %do.body
	movq	$40, -264(%rbp)
# BB#99:                                # %do.body.325
	movq	-264(%rbp), %rax
	movq	-240(%rbp), %rcx
	shrq	$3, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB166_101
# BB#100:                               # %if.then.329
	movq	-264(%rbp), %rax
	shlq	$3, %rax
	movq	-240(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -240(%rbp)
	movq	-264(%rbp), %rax
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -152(%rbp)
	jmp	.LBB166_102
.LBB166_101:                            # %if.else.332
	movl	$8, %eax
	movl	%eax, %esi
	movq	-264(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -152(%rbp)
	movb	$1, -249(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB166_102:                            # %if.end.334
	jmp	.LBB166_103
.LBB166_103:                            # %do.end
	xorl	%esi, %esi
	leaq	-152(%rbp), %rdx
	leaq	-264(%rbp), %rcx
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	-112(%rbp), %r8
	subq	$16, %rsp
	movq	%rdi, -632(%rbp)        # 8-byte Spill
	movq	%r8, %rdi
	movq	-632(%rbp), %r8         # 8-byte Reload
	movq	-632(%rbp), %r9         # 8-byte Reload
	movl	$0, (%rsp)
	callq	overlays_at
	addq	$16, %rsp
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	cmpq	-264(%rbp), %rax
	jle	.LBB166_110
# BB#104:                               # %if.then.338
	movq	-168(%rbp), %rax
	movq	%rax, -264(%rbp)
# BB#105:                               # %do.body.339
	movq	-264(%rbp), %rax
	movq	-240(%rbp), %rcx
	shrq	$3, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB166_107
# BB#106:                               # %if.then.344
	movq	-264(%rbp), %rax
	shlq	$3, %rax
	movq	-240(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -240(%rbp)
	movq	-264(%rbp), %rax
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -152(%rbp)
	jmp	.LBB166_108
.LBB166_107:                            # %if.else.348
	movl	$8, %eax
	movl	%eax, %esi
	movq	-264(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -152(%rbp)
	movb	$1, -249(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB166_108:                            # %if.end.350
	jmp	.LBB166_109
.LBB166_109:                            # %do.end.351
	xorl	%esi, %esi
	leaq	-152(%rbp), %rdx
	leaq	-264(%rbp), %rcx
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	-112(%rbp), %r8
	subq	$16, %rsp
	movq	%rdi, -640(%rbp)        # 8-byte Spill
	movq	%r8, %rdi
	movq	-640(%rbp), %r8         # 8-byte Reload
	movq	-640(%rbp), %r9         # 8-byte Reload
	movl	$0, (%rsp)
	callq	overlays_at
	addq	$16, %rsp
	movq	%rax, -168(%rbp)
.LBB166_110:                            # %if.end.353
	jmp	.LBB166_111
.LBB166_111:                            # %do.end.354
	movq	-152(%rbp), %rdi
	movq	-168(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	sort_overlays
	movq	%rax, -168(%rbp)
	jmp	.LBB166_113
.LBB166_112:                            # %if.else.356
	movq	$0, -168(%rbp)
.LBB166_113:                            # %if.end.357
	xorl	%edi, %edi
	movq	globals+1616, %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-648(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_115
# BB#114:                               # %if.then.361
	movq	-32(%rbp), %rdi
	callq	clear_mouse_face
	movb	%al, -649(%rbp)         # 1-byte Spill
	jmp	.LBB166_171
.LBB166_115:                            # %if.end.363
	movq	-56(%rbp), %rdi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	callq	coords_in_mouse_face_p
	andb	$1, %al
	movb	%al, -193(%rbp)
	testb	$1, -193(%rbp)
	je	.LBB166_117
# BB#116:                               # %if.then.366
	movq	$0, -64(%rbp)
.LBB166_117:                            # %if.end.367
	testb	$1, -193(%rbp)
	je	.LBB166_120
# BB#118:                               # %lor.lhs.false.369
	movq	-32(%rbp), %rax
	movq	40(%rax), %rdi
	callq	OVERLAYP
	testb	$1, %al
	jne	.LBB166_119
	jmp	.LBB166_170
.LBB166_119:                            # %land.lhs.true.372
	movq	-32(%rbp), %rax
	movq	40(%rax), %rdi
	callq	mouse_face_overlay_overlaps
	testb	$1, %al
	jne	.LBB166_120
	jmp	.LBB166_170
.LBB166_120:                            # %if.then.376
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -272(%rbp)
	movq	-168(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -160(%rbp)
.LBB166_121:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -160(%rbp)
	movb	%cl, -650(%rbp)         # 1-byte Spill
	jl	.LBB166_123
# BB#122:                               # %land.rhs
                                        #   in Loop: Header=BB166_121 Depth=1
	xorl	%edi, %edi
	movq	-272(%rbp), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-664(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -650(%rbp)         # 1-byte Spill
.LBB166_123:                            # %land.end
                                        #   in Loop: Header=BB166_121 Depth=1
	movb	-650(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB166_124
	jmp	.LBB166_128
.LBB166_124:                            # %for.body
                                        #   in Loop: Header=BB166_121 Depth=1
	movl	$687, %edi              # imm = 0x2AF
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-672(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	xorl	%edi, %edi
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-680(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_126
# BB#125:                               # %if.then.390
                                        #   in Loop: Header=BB166_121 Depth=1
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -272(%rbp)
.LBB166_126:                            # %if.end.392
                                        #   in Loop: Header=BB166_121 Depth=1
	jmp	.LBB166_127
.LBB166_127:                            # %for.inc
                                        #   in Loop: Header=BB166_121 Depth=1
	movq	-160(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB166_121
.LBB166_128:                            # %for.end
	xorl	%edi, %edi
	movq	-272(%rbp), %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-688(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_131
# BB#129:                               # %land.lhs.true.396
	movq	-272(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB166_131
# BB#130:                               # %if.then.400
	jmp	.LBB166_171
.LBB166_131:                            # %if.end.401
	movq	-272(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-32(%rbp), %rdi
	callq	clear_mouse_face
	testb	$1, %al
	jne	.LBB166_132
	jmp	.LBB166_133
.LBB166_132:                            # %if.then.404
	movq	$0, -64(%rbp)
.LBB166_133:                            # %if.end.405
	xorl	%edi, %edi
	movq	-272(%rbp), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-696(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_135
# BB#134:                               # %if.then.409
	movl	$687, %edi              # imm = 0x2AF
	movq	-144(%rbp), %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx
	movq	-704(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -136(%rbp)
.LBB166_135:                            # %if.end.412
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-712(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_142
# BB#136:                               # %land.lhs.true.416
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_137
	jmp	.LBB166_142
.LBB166_137:                            # %if.then.419
	movl	$687, %edi              # imm = 0x2AF
	movq	-112(%rbp), %rax
	addq	$1, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-128(%rbp), %rdx
	movq	%rax, -728(%rbp)        # 8-byte Spill
	movq	%rdx, -736(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-720(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-736(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	Fprevious_single_property_change
	movl	$687, %edi              # imm = 0x2AF
	movq	%rax, -280(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-128(%rbp), %rdx
	movq	%rax, -752(%rbp)        # 8-byte Spill
	movq	%rdx, -760(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-744(%rbp), %rdi        # 8-byte Reload
	movq	-752(%rbp), %rsi        # 8-byte Reload
	movq	-760(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_property_change
	xorl	%edi, %edi
	movq	%rax, -288(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-768(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_139
# BB#138:                               # %if.then.432
	movq	$2, -280(%rbp)
.LBB166_139:                            # %if.end.433
	xorl	%edi, %edi
	movq	-288(%rbp), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-776(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_141
# BB#140:                               # %if.then.437
	movq	-128(%rbp), %rdi
	callq	SCHARS
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -288(%rbp)
.LBB166_141:                            # %if.end.441
	movq	-56(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-128(%rbp), %rdx
	movq	-280(%rbp), %rax
	sarq	$2, %rax
	movq	-288(%rbp), %rcx
	sarq	$2, %rcx
	movq	%rcx, -784(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-784(%rbp), %r8         # 8-byte Reload
	callq	mouse_face_from_string_pos
	xorl	%r9d, %r9d
	movl	%r9d, %ecx
	leaq	-296(%rbp), %r8
	movl	$1, %r9d
	movq	-32(%rbp), %rax
	movb	64(%rax), %r10b
	andb	$-2, %r10b
	movb	%r10b, 64(%rax)
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-56(%rbp), %rdi
	movq	-128(%rbp), %rsi
	movq	-112(%rbp), %rdx
	movq	-120(%rbp), %rax
	movl	28(%rax), %r11d
	andl	$1048575, %r11d         # imm = 0xFFFFF
	subq	$16, %rsp
	movl	%r9d, -788(%rbp)        # 4-byte Spill
	movl	%r11d, %r9d
	movl	$1, (%rsp)
	callq	face_at_string_position
	addq	$16, %rsp
	movl	$3, %esi
	movq	-32(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-32(%rbp), %rdi
	callq	show_mouse_face
	movq	$0, -64(%rbp)
	jmp	.LBB166_169
.LBB166_142:                            # %if.else.449
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_143
	jmp	.LBB166_146
.LBB166_143:                            # %if.then.451
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rax
	movq	176(%rax), %rax
	movq	%rax, -328(%rbp)
	movq	-128(%rbp), %rdi
	movq	-328(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	jle	.LBB166_145
# BB#144:                               # %if.then.460
	movl	$687, %edi              # imm = 0x2AF
	movq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-272(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	80(%rdx), %rdx
	movq	-800(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	get_char_property_and_overlay
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -312(%rbp)
.LBB166_145:                            # %if.end.467
	jmp	.LBB166_147
.LBB166_146:                            # %if.else.468
	xorl	%edi, %edi
	movq	-128(%rbp), %rax
	movq	%rax, -304(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -312(%rbp)
.LBB166_147:                            # %if.end.470
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-808(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_168
# BB#148:                               # %if.then.474
	movq	-304(%rbp), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-816(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_150
# BB#149:                               # %cond.true.479
	movq	-56(%rbp), %rax
	movq	88(%rax), %rdi
	callq	Fmarker_position
	movq	%rax, -824(%rbp)        # 8-byte Spill
	jmp	.LBB166_151
.LBB166_150:                            # %cond.false.482
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -824(%rbp)        # 8-byte Spill
.LBB166_151:                            # %cond.end.484
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	%rax, -368(%rbp)
	movq	-304(%rbp), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-832(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_153
# BB#152:                               # %cond.true.491
	movq	-304(%rbp), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	-56(%rbp), %rdi
	subq	456(%rdi), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	jmp	.LBB166_154
.LBB166_153:                            # %cond.false.498
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -840(%rbp)        # 8-byte Spill
.LBB166_154:                            # %cond.end.500
	movq	-840(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -376(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-848(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_156
# BB#155:                               # %if.then.505
	movl	$687, %edi              # imm = 0x2AF
	movq	-112(%rbp), %rax
	addq	$1, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rdx
	movq	-368(%rbp), %rcx
	movq	-856(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fprevious_single_property_change
	movl	$687, %edi              # imm = 0x2AF
	movq	%rax, -336(%rbp)
	movq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rdx
	movq	-376(%rbp), %rcx
	movq	-864(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fnext_single_property_change
	xorl	%edi, %edi
	movq	%rax, -344(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -360(%rbp)
	movq	%rax, -352(%rbp)
	jmp	.LBB166_161
.LBB166_156:                            # %if.else.516
	movq	-272(%rbp), %rdi
	callq	Foverlay_start
	movq	%rax, -336(%rbp)
	movq	-272(%rbp), %rdi
	callq	Foverlay_end
	movl	$199, %edi
	movq	%rax, -344(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movl	$168, %edi
	movq	%rax, -352(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-880(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -360(%rbp)
	movq	-352(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_158
# BB#157:                               # %if.then.524
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -352(%rbp)
.LBB166_158:                            # %if.end.526
	movq	-360(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_160
# BB#159:                               # %if.then.528
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -360(%rbp)
.LBB166_160:                            # %if.end.530
	jmp	.LBB166_161
.LBB166_161:                            # %if.end.531
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rsi
	movq	-112(%rbp), %rdx
	movq	-336(%rbp), %rcx
	movq	%rcx, -888(%rbp)        # 8-byte Spill
	movq	%rax, -896(%rbp)        # 8-byte Spill
	movq	%rsi, -904(%rbp)        # 8-byte Spill
	movq	%rdx, -912(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-888(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_163
# BB#162:                               # %cond.true.535
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, -920(%rbp)        # 8-byte Spill
	jmp	.LBB166_164
.LBB166_163:                            # %cond.false.536
	movq	-336(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
.LBB166_164:                            # %cond.end.538
	movq	-920(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	-344(%rbp), %rcx
	movq	%rax, -928(%rbp)        # 8-byte Spill
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-936(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_166
# BB#165:                               # %cond.true.543
	movq	-304(%rbp), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	jmp	.LBB166_167
.LBB166_166:                            # %cond.false.547
	movq	-344(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
.LBB166_167:                            # %cond.end.549
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	-352(%rbp), %r9
	movq	-360(%rbp), %rcx
	movq	-312(%rbp), %rdx
	subq	$16, %rsp
	movq	-896(%rbp), %rdi        # 8-byte Reload
	movq	-904(%rbp), %rsi        # 8-byte Reload
	movq	-912(%rbp), %r8         # 8-byte Reload
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	-928(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -960(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%rax, %r8
	movq	-960(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%rax, 8(%rsp)
	callq	mouse_face_from_buffer_pos
	addq	$16, %rsp
	movq	$0, -64(%rbp)
.LBB166_168:                            # %if.end.551
	jmp	.LBB166_169
.LBB166_169:                            # %if.end.552
	jmp	.LBB166_170
.LBB166_170:                            # %if.end.553
	jmp	.LBB166_171
.LBB166_171:                            # %check_help_echo
	xorl	%edi, %edi
	movq	help_echo_string, %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-968(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_199
# BB#172:                               # %if.then.557
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -392(%rbp)
	movq	%rax, -384(%rbp)
	movq	-168(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -160(%rbp)
.LBB166_173:                            # %for.cond.561
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -160(%rbp)
	movb	%cl, -969(%rbp)         # 1-byte Spill
	jl	.LBB166_175
# BB#174:                               # %land.rhs.564
                                        #   in Loop: Header=BB166_173 Depth=1
	xorl	%edi, %edi
	movq	-384(%rbp), %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-984(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -969(%rbp)         # 1-byte Spill
.LBB166_175:                            # %land.end.568
                                        #   in Loop: Header=BB166_173 Depth=1
	movb	-969(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB166_176
	jmp	.LBB166_178
.LBB166_176:                            # %for.body.569
                                        #   in Loop: Header=BB166_173 Depth=1
	movl	$516, %edi              # imm = 0x204
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-992(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -384(%rbp)
# BB#177:                               # %for.inc.573
                                        #   in Loop: Header=BB166_173 Depth=1
	movq	-160(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB166_173
.LBB166_178:                            # %for.end.575
	xorl	%edi, %edi
	movq	-384(%rbp), %rax
	movq	%rax, -1000(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1000(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_180
# BB#179:                               # %if.then.579
	movq	-384(%rbp), %rax
	movq	%rax, help_echo_string
	movq	-48(%rbp), %rax
	movq	%rax, help_echo_window
	movq	-392(%rbp), %rax
	movq	%rax, help_echo_object
	movq	-112(%rbp), %rax
	movq	%rax, help_echo_pos
	jmp	.LBB166_198
.LBB166_180:                            # %if.else.580
	movq	-120(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -400(%rbp)
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -408(%rbp)
	movq	-400(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_181
	jmp	.LBB166_190
.LBB166_181:                            # %land.lhs.true.586
	cmpq	$0, -408(%rbp)
	jl	.LBB166_190
# BB#182:                               # %land.lhs.true.589
	movq	-408(%rbp), %rax
	movq	-400(%rbp), %rdi
	movq	%rax, -1008(%rbp)       # 8-byte Spill
	callq	SCHARS
	movq	-1008(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jge	.LBB166_190
# BB#183:                               # %if.then.593
	movl	$516, %edi              # imm = 0x204
	movq	-408(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-400(%rbp), %rdx
	movq	-1016(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	xorl	%edi, %edi
	movq	%rax, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, -1024(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB166_189
# BB#184:                               # %if.then.601
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -416(%rbp)
	movq	-416(%rbp), %rax
	movq	176(%rax), %rax
	movq	%rax, -424(%rbp)
	movq	-400(%rbp), %rdi
	movq	-424(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -432(%rbp)
	cmpq	$0, -432(%rbp)
	jle	.LBB166_188
# BB#185:                               # %if.then.613
	movl	$516, %edi              # imm = 0x204
	movq	-432(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx
	movq	80(%rcx), %rdx
	movq	-1032(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, -1040(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1040(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_187
# BB#186:                               # %if.then.622
	movq	-432(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-56(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -400(%rbp)
.LBB166_187:                            # %if.end.624
	jmp	.LBB166_188
.LBB166_188:                            # %if.end.625
	jmp	.LBB166_189
.LBB166_189:                            # %if.end.626
	jmp	.LBB166_195
.LBB166_190:                            # %if.else.627
	movq	-400(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB166_191
	jmp	.LBB166_194
.LBB166_191:                            # %land.lhs.true.630
	movq	-408(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jl	.LBB166_194
# BB#192:                               # %land.lhs.true.634
	movq	-408(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB166_194
# BB#193:                               # %if.then.638
	movl	$516, %edi              # imm = 0x204
	movq	-408(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-400(%rbp), %rdx
	movq	-1048(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -384(%rbp)
.LBB166_194:                            # %if.end.643
	jmp	.LBB166_195
.LBB166_195:                            # %if.end.644
	xorl	%edi, %edi
	movq	-384(%rbp), %rax
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1056(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB166_197
# BB#196:                               # %if.then.648
	movq	-384(%rbp), %rax
	movq	%rax, help_echo_string
	movq	-48(%rbp), %rax
	movq	%rax, help_echo_window
	movq	-400(%rbp), %rax
	movq	%rax, help_echo_object
	movq	-408(%rbp), %rax
	movq	%rax, help_echo_pos
.LBB166_197:                            # %if.end.649
	jmp	.LBB166_198
.LBB166_198:                            # %if.end.650
	jmp	.LBB166_199
.LBB166_199:                            # %if.end.651
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB166_223
# BB#200:                               # %land.lhs.true.659
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -1064(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1064(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_223
# BB#201:                               # %if.then.663
	movq	-168(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -160(%rbp)
.LBB166_202:                            # %for.cond.665
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -160(%rbp)
	movb	%cl, -1065(%rbp)        # 1-byte Spill
	jl	.LBB166_204
# BB#203:                               # %land.rhs.668
                                        #   in Loop: Header=BB166_202 Depth=1
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1080(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -1065(%rbp)        # 1-byte Spill
.LBB166_204:                            # %land.end.672
                                        #   in Loop: Header=BB166_202 Depth=1
	movb	-1065(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB166_205
	jmp	.LBB166_207
.LBB166_205:                            # %for.body.673
                                        #   in Loop: Header=BB166_202 Depth=1
	movl	$757, %edi              # imm = 0x2F5
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1088(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -72(%rbp)
# BB#206:                               # %for.inc.677
                                        #   in Loop: Header=BB166_202 Depth=1
	movq	-160(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB166_202
.LBB166_207:                            # %for.end.679
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1096(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB166_222
# BB#208:                               # %if.then.683
	movq	-120(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -440(%rbp)
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -448(%rbp)
	movq	-440(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB166_209
	jmp	.LBB166_216
.LBB166_209:                            # %land.lhs.true.690
	cmpq	$0, -448(%rbp)
	jl	.LBB166_216
# BB#210:                               # %land.lhs.true.693
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdi
	movq	%rax, -1104(%rbp)       # 8-byte Spill
	callq	SCHARS
	movq	-1104(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jge	.LBB166_216
# BB#211:                               # %if.then.697
	movl	$757, %edi              # imm = 0x2F5
	movq	-448(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -1112(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-440(%rbp), %rdx
	movq	-1112(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -1120(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1120(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB166_215
# BB#212:                               # %if.then.705
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movq	176(%rax), %rax
	movq	%rax, -464(%rbp)
	movq	-440(%rbp), %rdi
	movq	-464(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -472(%rbp)
	cmpq	$0, -472(%rbp)
	jle	.LBB166_214
# BB#213:                               # %if.then.718
	movl	$757, %edi              # imm = 0x2F5
	movq	-472(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -1128(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx
	movq	80(%rcx), %rdx
	movq	-1128(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	movq	%rax, -72(%rbp)
.LBB166_214:                            # %if.end.724
	jmp	.LBB166_215
.LBB166_215:                            # %if.end.725
	jmp	.LBB166_221
.LBB166_216:                            # %if.else.726
	movq	-440(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB166_217
	jmp	.LBB166_220
.LBB166_217:                            # %land.lhs.true.729
	movq	-448(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jl	.LBB166_220
# BB#218:                               # %land.lhs.true.733
	movq	-448(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB166_220
# BB#219:                               # %if.then.737
	movl	$757, %edi              # imm = 0x2F5
	movq	-448(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -1136(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-440(%rbp), %rdx
	movq	-1136(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -72(%rbp)
.LBB166_220:                            # %if.end.742
	jmp	.LBB166_221
.LBB166_221:                            # %if.end.743
	jmp	.LBB166_222
.LBB166_222:                            # %if.end.744
	jmp	.LBB166_223
.LBB166_223:                            # %if.end.745
	movq	-184(%rbp), %rax
	movq	current_buffer, %rcx
	movq	%rax, 752(%rcx)
	movq	-192(%rbp), %rax
	movq	current_buffer, %rcx
	movq	%rax, 768(%rcx)
	movq	-176(%rbp), %rax
	movq	%rax, current_buffer
# BB#224:                               # %do.body.748
	testb	$1, -249(%rbp)
	je	.LBB166_226
# BB#225:                               # %if.then.750
	xorl	%edi, %edi
	movb	$0, -249(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -1144(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -1152(%rbp)       # 8-byte Spill
.LBB166_226:                            # %if.end.753
	jmp	.LBB166_227
.LBB166_227:                            # %do.end.754
	jmp	.LBB166_228
.LBB166_228:                            # %if.end.755
	jmp	.LBB166_229
.LBB166_229:                            # %set_cursor
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB166_231
# BB#230:                               # %if.then.763
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-72(%rbp), %rdx
	callq	define_frame_cursor1
.LBB166_231:                            # %if.end.764
	leaq	-8(%rbp), %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end166:
	.size	note_mouse_highlight, .Lfunc_end166-note_mouse_highlight
	.cfi_endproc

	.align	16, 0x90
	.type	frame_to_window_pixel_xy,@function
frame_to_window_pixel_xy:               # @frame_to_window_pixel_xy
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp516:
	.cfi_def_cfa_offset 16
.Ltmp517:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp518:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %ax
	shrw	$11, %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB167_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	332(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %edx
	movq	-8(%rbp), %rax
	addl	244(%rax), %edx
	subl	%edx, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, (%rax)
	jmp	.LBB167_3
.LBB167_2:                              # %if.else
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	240(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %edx
	movq	-8(%rbp), %rax
	addl	244(%rax), %edx
	subl	%edx, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, (%rax)
.LBB167_3:                              # %if.end
	popq	%rbp
	retq
.Lfunc_end167:
	.size	frame_to_window_pixel_xy, .Lfunc_end167-frame_to_window_pixel_xy
	.cfi_endproc

	.align	16, 0x90
	.type	note_mode_line_or_margin_highlight,@function
note_mode_line_or_margin_highlight:     # @note_mode_line_or_margin_highlight
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp519:
	.cfi_def_cfa_offset 16
.Ltmp520:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp521:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$744, %rsp              # imm = 0x2E8
.Ltmp522:
	.cfi_offset %rbx, -40
.Ltmp523:
	.cfi_offset %r14, -32
.Ltmp524:
	.cfi_offset %r15, -24
	movq	%rdi, -32(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB168_2
# BB#1:                                 # %cond.true
	movq	-64(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	jmp	.LBB168_3
.LBB168_2:                              # %cond.false
	movq	-64(%rbp), %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
.LBB168_3:                              # %cond.end
	movq	-344(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	$0, -88(%rbp)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -96(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %edi
	movl	%edi, -164(%rbp)
	movq	$0, -176(%rbp)
	movq	$0, -184(%rbp)
	cmpl	$2, -44(%rbp)
	je	.LBB168_5
# BB#4:                                 # %lor.lhs.false
	cmpl	$4, -44(%rbp)
	jne	.LBB168_20
.LBB168_5:                              # %if.then
	leaq	-36(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-120(%rbp), %r8
	leaq	-136(%rbp), %r9
	leaq	-100(%rbp), %rax
	leaq	-104(%rbp), %rsi
	leaq	-108(%rbp), %rdi
	leaq	-112(%rbp), %r10
	movq	-56(%rbp), %r11
	movl	-44(%rbp), %ebx
	movq	%rdi, -352(%rbp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -360(%rbp)        # 8-byte Spill
	movl	%ebx, %esi
	movq	%rax, (%rsp)
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	%rax, 8(%rsp)
	movq	-352(%rbp), %r11        # 8-byte Reload
	movq	%r11, 16(%rsp)
	movq	%r10, 24(%rsp)
	callq	mode_line_string
	movq	%rax, -128(%rbp)
	cmpl	$2, -44(%rbp)
	jne	.LBB168_7
# BB#6:                                 # %cond.true.11
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	addq	$-256, %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	jmp	.LBB168_8
.LBB168_7:                              # %cond.false.14
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
.LBB168_8:                              # %cond.end.17
	movq	-368(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB168_19
# BB#9:                                 # %land.lhs.true
	movq	-192(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB168_19
# BB#10:                                # %if.then.27
	movq	-192(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	-192(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -208(%rbp)
	movl	-164(%rbp), %edx
	movl	%edx, -196(%rbp)
.LBB168_11:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-176(%rbp), %rdx
	cmpq	-208(%rbp), %rdx
	movb	%cl, -369(%rbp)         # 1-byte Spill
	jae	.LBB168_13
# BB#12:                                # %land.rhs
                                        #   in Loop: Header=BB168_11 Depth=1
	movl	-196(%rbp), %eax
	movq	-176(%rbp), %rcx
	movswl	16(%rcx), %edx
	cmpl	%edx, %eax
	setge	%sil
	movb	%sil, -369(%rbp)        # 1-byte Spill
.LBB168_13:                             # %land.end
                                        #   in Loop: Header=BB168_11 Depth=1
	movb	-369(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB168_14
	jmp	.LBB168_16
.LBB168_14:                             # %for.body
                                        #   in Loop: Header=BB168_11 Depth=1
	movq	-176(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-196(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -196(%rbp)
# BB#15:                                # %for.inc
                                        #   in Loop: Header=BB168_11 Depth=1
	movq	-176(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB168_11
.LBB168_16:                             # %for.end
	movq	-176(%rbp), %rax
	cmpq	-208(%rbp), %rax
	jb	.LBB168_18
# BB#17:                                # %if.then.41
	movq	$0, -176(%rbp)
.LBB168_18:                             # %if.end
	jmp	.LBB168_19
.LBB168_19:                             # %if.end.42
	jmp	.LBB168_36
.LBB168_20:                             # %if.else
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB168_22
# BB#21:                                # %cond.true.48
	xorl	%eax, %eax
	movl	%eax, -376(%rbp)        # 4-byte Spill
	jmp	.LBB168_29
.LBB168_22:                             # %cond.false.49
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-384(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_24
# BB#23:                                # %cond.true.53
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -388(%rbp)        # 4-byte Spill
	jmp	.LBB168_28
.LBB168_24:                             # %cond.false.61
	movl	$607, %edi              # imm = 0x25F
	movq	-56(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-400(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_26
# BB#25:                                # %cond.true.66
	movl	$1, %eax
	movl	%eax, -404(%rbp)        # 4-byte Spill
	jmp	.LBB168_27
.LBB168_26:                             # %cond.false.67
	movl	$811, %edi              # imm = 0x32B
	movq	-56(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -404(%rbp)        # 4-byte Spill
.LBB168_27:                             # %cond.end.73
	movl	-404(%rbp), %eax        # 4-byte Reload
	movl	%eax, -388(%rbp)        # 4-byte Spill
.LBB168_28:                             # %cond.end.75
	movl	-388(%rbp), %eax        # 4-byte Reload
	movl	%eax, -376(%rbp)        # 4-byte Spill
.LBB168_29:                             # %cond.end.77
	movl	-376(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	jne	.LBB168_34
# BB#30:                                # %cond.true.81
	movq	-56(%rbp), %rax
	cmpl	$0, 436(%rax)
	jl	.LBB168_32
# BB#31:                                # %cond.true.84
	movq	-56(%rbp), %rax
	movl	436(%rax), %ecx
	movl	%ecx, -420(%rbp)        # 4-byte Spill
	jmp	.LBB168_33
.LBB168_32:                             # %cond.false.86
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	420(%rax), %ecx
	movl	%ecx, -420(%rbp)        # 4-byte Spill
.LBB168_33:                             # %cond.end.89
	movl	-420(%rbp), %eax        # 4-byte Reload
	movl	%eax, -424(%rbp)        # 4-byte Spill
	jmp	.LBB168_35
.LBB168_34:                             # %cond.false.91
	xorl	%eax, %eax
	movl	%eax, -424(%rbp)        # 4-byte Spill
	jmp	.LBB168_35
.LBB168_35:                             # %cond.end.92
	movl	-424(%rbp), %eax        # 4-byte Reload
	leaq	-36(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-120(%rbp), %r8
	leaq	-136(%rbp), %r9
	leaq	-100(%rbp), %rsi
	leaq	-104(%rbp), %rdi
	leaq	-108(%rbp), %r10
	leaq	-112(%rbp), %r11
	movl	-36(%rbp), %ebx
	subl	%eax, %ebx
	movl	%ebx, -36(%rbp)
	movq	-56(%rbp), %r14
	movl	-44(%rbp), %eax
	movq	%rdi, -432(%rbp)        # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movl	%eax, %esi
	movq	-440(%rbp), %r14        # 8-byte Reload
	movq	%r14, (%rsp)
	movq	-432(%rbp), %r15        # 8-byte Reload
	movq	%r15, 8(%rsp)
	movq	%r10, 16(%rsp)
	movq	%r11, 24(%rsp)
	callq	marginal_area_string
	movq	%rax, -128(%rbp)
.LBB168_36:                             # %if.end.96
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -152(%rbp)
	movq	-136(%rbp), %rdi
	callq	IMAGEP
	testb	$1, %al
	jne	.LBB168_37
	jmp	.LBB168_51
.LBB168_37:                             # %if.then.99
	movl	$79, %edi
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-448(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-456(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	testb	$1, %cl
	jne	.LBB168_38
	jmp	.LBB168_48
.LBB168_38:                             # %land.lhs.true.106
	movq	-216(%rbp), %rdi
	movl	-100(%rbp), %esi
	movl	-104(%rbp), %edx
	callq	find_hot_spot
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$3, %edx
	jne	.LBB168_48
# BB#39:                                # %land.lhs.true.111
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB168_48
# BB#40:                                # %if.then.119
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB168_47
# BB#41:                                # %land.lhs.true.127
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB168_47
# BB#42:                                # %if.then.133
	movl	$757, %edi              # imm = 0x2F5
	movq	-232(%rbp), %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-464(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-472(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB168_44
# BB#43:                                # %if.then.139
	movl	$504, %edi              # imm = 0x1F8
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)
.LBB168_44:                             # %if.end.141
	movl	$516, %edi              # imm = 0x204
	movq	-232(%rbp), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-480(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB168_46
# BB#45:                                # %if.then.147
	movl	$5, %esi
	movq	-152(%rbp), %rax
	movq	%rax, help_echo_string
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, help_echo_window
	movq	-56(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, help_echo_object
	movq	-120(%rbp), %rax
	movq	%rax, help_echo_pos
.LBB168_46:                             # %if.end.149
	jmp	.LBB168_47
.LBB168_47:                             # %if.end.150
	jmp	.LBB168_48
.LBB168_48:                             # %if.end.151
	xorl	%edi, %edi
	movq	-96(%rbp), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-496(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_50
# BB#49:                                # %if.then.155
	movl	$93, %edi
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-504(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	movq	%rax, -96(%rbp)
.LBB168_50:                             # %if.end.161
	jmp	.LBB168_51
.LBB168_51:                             # %if.end.162
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB168_52
	jmp	.LBB168_53
.LBB168_52:                             # %if.then.164
	movq	-120(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -144(%rbp)
.LBB168_53:                             # %if.end.165
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB168_55
# BB#54:                                # %lor.lhs.false.168
	cmpl	$2, -44(%rbp)
	jne	.LBB168_88
.LBB168_55:                             # %if.then.171
	xorl	%edi, %edi
	movq	-152(%rbp), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-512(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_66
# BB#56:                                # %if.then.175
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB168_57
	jmp	.LBB168_58
.LBB168_57:                             # %if.then.177
	movl	$516, %edi              # imm = 0x204
	movq	-144(%rbp), %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx
	movq	-520(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -152(%rbp)
.LBB168_58:                             # %if.end.180
	xorl	%edi, %edi
	movq	-152(%rbp), %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-528(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB168_60
# BB#59:                                # %if.then.184
	movl	$5, %esi
	movq	-152(%rbp), %rax
	movq	%rax, help_echo_string
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, help_echo_window
	movq	-128(%rbp), %rax
	movq	%rax, help_echo_object
	movq	-120(%rbp), %rax
	movq	%rax, help_echo_pos
	jmp	.LBB168_65
.LBB168_60:                             # %if.else.186
	cmpl	$2, -44(%rbp)
	jne	.LBB168_64
# BB#61:                                # %if.then.189
	movl	$673, %edi              # imm = 0x2A1
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx
	movq	80(%rcx), %rsi
	movq	%rax, %rdi
	callq	buffer_local_value
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB168_62
	jmp	.LBB168_63
.LBB168_62:                             # %if.then.194
	movl	$5, %esi
	movq	-240(%rbp), %rax
	movq	%rax, help_echo_string
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	xorl	%edi, %edi
	movq	%rax, help_echo_window
	callq	builtin_lisp_symbol
	movq	%rax, help_echo_object
	movq	$-1, help_echo_pos
.LBB168_63:                             # %if.end.197
	jmp	.LBB168_64
.LBB168_64:                             # %if.end.198
	jmp	.LBB168_65
.LBB168_65:                             # %if.end.199
	jmp	.LBB168_66
.LBB168_66:                             # %if.end.200
	movq	-64(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB168_87
# BB#67:                                # %if.then.208
	movq	-56(%rbp), %rax
	movl	244(%rax), %ecx
	movq	-56(%rbp), %rax
	addl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -532(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -536(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movb	$1, %dl
	movl	-536(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-532(%rbp), %esi        # 4-byte Reload
	cmpl	%ecx, %esi
	movb	%dl, -537(%rbp)         # 1-byte Spill
	jne	.LBB168_70
# BB#68:                                # %lor.lhs.false.222
	movb	$1, %al
	cmpq	$0, minibuf_level
	movb	%al, -537(%rbp)         # 1-byte Spill
	jne	.LBB168_70
# BB#69:                                # %lor.rhs
	xorl	%edi, %edi
	movq	globals+2040, %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-552(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -537(%rbp)         # 1-byte Spill
.LBB168_70:                             # %lor.end
	movb	-537(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -241(%rbp)
	movq	-64(%rbp), %rcx
	movq	384(%rcx), %rcx
	movq	424(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB168_71
	jmp	.LBB168_83
.LBB168_71:                             # %if.then.230
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-560(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_73
# BB#72:                                # %if.then.236
	movl	$757, %edi              # imm = 0x2F5
	movq	-144(%rbp), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx
	movq	-568(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -96(%rbp)
.LBB168_73:                             # %if.end.239
	xorl	%edi, %edi
	movq	-96(%rbp), %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-576(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_82
# BB#74:                                # %land.lhs.true.243
	cmpl	$2, -44(%rbp)
	je	.LBB168_76
# BB#75:                                # %lor.lhs.false.246
	cmpl	$4, -44(%rbp)
	jne	.LBB168_82
.LBB168_76:                             # %if.then.249
	movl	$633, %edi              # imm = 0x279
	movq	-144(%rbp), %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx
	movq	-584(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	xorl	%ecx, %ecx
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rdi
	movl	%ecx, %esi
	movl	%ecx, %edx
	callq	get_keymap
	xorl	%edi, %edi
	movq	%rax, -592(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-592(%rbp), %r8         # 8-byte Reload
	cmpq	%rax, %r8
	jne	.LBB168_78
# BB#77:                                # %if.then.256
	movl	$589, %edi              # imm = 0x24D
	movq	-144(%rbp), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -256(%rbp)
.LBB168_78:                             # %if.end.259
	xorl	%eax, %eax
	movq	-256(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	get_keymap
	xorl	%edi, %edi
	movq	%rax, -608(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-608(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_81
# BB#79:                                # %land.lhs.true.264
	testb	$1, -241(%rbp)
	je	.LBB168_81
# BB#80:                                # %if.then.267
	movq	-80(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -88(%rbp)
.LBB168_81:                             # %if.end.268
	jmp	.LBB168_82
.LBB168_82:                             # %if.end.269
	jmp	.LBB168_86
.LBB168_83:                             # %if.else.270
	testb	$1, -241(%rbp)
	je	.LBB168_85
# BB#84:                                # %if.then.272
	movq	-64(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	movq	120(%rax), %rax
	movq	%rax, -88(%rbp)
.LBB168_85:                             # %if.end.277
	jmp	.LBB168_86
.LBB168_86:                             # %if.end.278
	jmp	.LBB168_87
.LBB168_87:                             # %if.end.279
	jmp	.LBB168_88
.LBB168_88:                             # %if.end.280
	movb	$0, -257(%rbp)
	movq	-128(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB168_89
	jmp	.LBB168_141
.LBB168_89:                             # %if.then.282
	movl	$687, %edi              # imm = 0x2AF
	movq	-144(%rbp), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx
	movq	-616(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	xorl	%edi, %edi
	movq	%rax, -160(%rbp)
	movq	globals+1616, %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-624(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB168_140
# BB#90:                                # %land.lhs.true.288
	xorl	%edi, %edi
	movq	-160(%rbp), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-632(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB168_140
# BB#91:                                # %land.lhs.true.292
	cmpl	$2, -44(%rbp)
	je	.LBB168_93
# BB#92:                                # %lor.lhs.false.295
	cmpl	$4, -44(%rbp)
	jne	.LBB168_140
.LBB168_93:                             # %land.lhs.true.298
	cmpq	$0, -176(%rbp)
	je	.LBB168_140
# BB#94:                                # %if.then.300
	movl	$687, %edi              # imm = 0x2AF
	movq	-120(%rbp), %rax
	addq	$1, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-128(%rbp), %rdx
	movq	%rax, -648(%rbp)        # 8-byte Spill
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-640(%rbp), %rdi        # 8-byte Reload
	movq	-648(%rbp), %rsi        # 8-byte Reload
	movq	-656(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	Fprevious_single_property_change
	xorl	%edi, %edi
	movq	%rax, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-664(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_96
# BB#95:                                # %if.then.310
	movq	$0, -312(%rbp)
	jmp	.LBB168_97
.LBB168_96:                             # %if.else.311
	movq	-272(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -312(%rbp)
.LBB168_97:                             # %if.end.312
	movl	$687, %edi              # imm = 0x2AF
	movq	-144(%rbp), %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-128(%rbp), %rdx
	movq	%rax, -680(%rbp)        # 8-byte Spill
	movq	%rdx, -688(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-672(%rbp), %rdi        # 8-byte Reload
	movq	-680(%rbp), %rsi        # 8-byte Reload
	movq	-688(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_property_change
	xorl	%edi, %edi
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-696(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_99
# BB#98:                                # %if.then.319
	movq	-128(%rbp), %rdi
	callq	SCHARS
	movq	%rax, -320(%rbp)
	jmp	.LBB168_100
.LBB168_99:                             # %if.else.321
	movq	-280(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -320(%rbp)
.LBB168_100:                            # %if.end.323
	movq	-184(%rbp), %rax
	movq	%rax, -288(%rbp)
.LBB168_101:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-288(%rbp), %rdx
	cmpq	-176(%rbp), %rdx
	movb	%cl, -697(%rbp)         # 1-byte Spill
	jae	.LBB168_106
# BB#102:                               # %land.rhs.326
                                        #   in Loop: Header=BB168_101 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-288(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	-176(%rbp), %rsi
	cmpq	8(%rsi), %rdx
	movb	%cl, -698(%rbp)         # 1-byte Spill
	jne	.LBB168_105
# BB#103:                               # %land.lhs.true.331
                                        #   in Loop: Header=BB168_101 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-312(%rbp), %rdx
	movq	-288(%rbp), %rsi
	cmpq	(%rsi), %rdx
	movb	%cl, -698(%rbp)         # 1-byte Spill
	jg	.LBB168_105
# BB#104:                               # %land.rhs.335
                                        #   in Loop: Header=BB168_101 Depth=1
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-320(%rbp), %rax
	setl	%cl
	movb	%cl, -698(%rbp)         # 1-byte Spill
.LBB168_105:                            # %land.end.339
                                        #   in Loop: Header=BB168_101 Depth=1
	movb	-698(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -697(%rbp)         # 1-byte Spill
.LBB168_106:                            # %land.end.341
                                        #   in Loop: Header=BB168_101 Depth=1
	movb	-697(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB168_107
	jmp	.LBB168_108
.LBB168_107:                            # %while.body
                                        #   in Loop: Header=BB168_101 Depth=1
	movq	-288(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -288(%rbp)
	jmp	.LBB168_101
.LBB168_108:                            # %while.end
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-176(%rbp), %rdx
	movq	-288(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movl	%edi, -292(%rbp)
	movq	-192(%rbp), %rax
	movq	8(%rax), %rax
	movq	-192(%rbp), %rcx
	movswl	34(%rcx), %edi
	movslq	%edi, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -288(%rbp)
.LBB168_109:                            # %for.cond.352
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-288(%rbp), %rdx
	cmpq	-176(%rbp), %rdx
	movb	%cl, -699(%rbp)         # 1-byte Spill
	jbe	.LBB168_114
# BB#110:                               # %land.rhs.355
                                        #   in Loop: Header=BB168_109 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-288(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	-176(%rbp), %rsi
	cmpq	8(%rsi), %rdx
	movb	%cl, -700(%rbp)         # 1-byte Spill
	jne	.LBB168_113
# BB#111:                               # %land.lhs.true.360
                                        #   in Loop: Header=BB168_109 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-312(%rbp), %rdx
	movq	-288(%rbp), %rsi
	cmpq	(%rsi), %rdx
	movb	%cl, -700(%rbp)         # 1-byte Spill
	jg	.LBB168_113
# BB#112:                               # %land.rhs.364
                                        #   in Loop: Header=BB168_109 Depth=1
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-320(%rbp), %rax
	setl	%cl
	movb	%cl, -700(%rbp)         # 1-byte Spill
.LBB168_113:                            # %land.end.368
                                        #   in Loop: Header=BB168_109 Depth=1
	movb	-700(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -699(%rbp)         # 1-byte Spill
.LBB168_114:                            # %land.end.370
                                        #   in Loop: Header=BB168_109 Depth=1
	movb	-699(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB168_115
	jmp	.LBB168_117
.LBB168_115:                            # %for.body.371
                                        #   in Loop: Header=BB168_109 Depth=1
	jmp	.LBB168_116
.LBB168_116:                            # %for.inc.372
                                        #   in Loop: Header=BB168_109 Depth=1
	movq	-288(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -288(%rbp)
	jmp	.LBB168_109
.LBB168_117:                            # %for.end.374
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$48, %eax
	movl	%eax, %edx
	movslq	-292(%rbp), %rsi
	movq	-288(%rbp), %rdi
	movq	-176(%rbp), %r8
	subq	%r8, %rdi
	movq	%rdi, %rax
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	cqto
	movq	-712(%rbp), %rdi        # 8-byte Reload
	idivq	%rdi
	addq	%rax, %rsi
	addq	$1, %rsi
	movl	%esi, %r9d
	movl	%r9d, -296(%rbp)
	movl	$0, -300(%rbp)
	movq	-176(%rbp), %rax
	movslq	-292(%rbp), %rsi
	subq	%rsi, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -288(%rbp)
.LBB168_118:                            # %for.cond.385
                                        # =>This Inner Loop Header: Depth=1
	movq	-288(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	.LBB168_121
# BB#119:                               # %for.body.388
                                        #   in Loop: Header=BB168_118 Depth=1
	movq	-288(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-300(%rbp), %ecx
	movl	%ecx, -300(%rbp)
# BB#120:                               # %for.inc.392
                                        #   in Loop: Header=BB168_118 Depth=1
	movq	-288(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -288(%rbp)
	jmp	.LBB168_118
.LBB168_121:                            # %for.end.394
	movl	-36(%rbp), %eax
	subl	-292(%rbp), %eax
	movl	%eax, -336(%rbp)
	cmpl	$2, -44(%rbp)
	jne	.LBB168_123
# BB#122:                               # %cond.true.398
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movl	24(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -716(%rbp)        # 4-byte Spill
	jmp	.LBB168_124
.LBB168_123:                            # %cond.false.402
	xorl	%eax, %eax
	movl	%eax, -716(%rbp)        # 4-byte Spill
	jmp	.LBB168_124
.LBB168_124:                            # %cond.end.403
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	%eax, -332(%rbp)
	movq	-32(%rbp), %rcx
	movq	-72(%rbp), %rdx
	cmpq	24(%rdx), %rcx
	jne	.LBB168_132
# BB#125:                               # %land.lhs.true.407
	movq	-192(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB168_128
# BB#126:                               # %cond.true.412
	movq	-72(%rbp), %rax
	movl	4(%rax), %ecx
	cmpl	-336(%rbp), %ecx
	jg	.LBB168_132
# BB#127:                               # %land.lhs.true.415
	movl	-336(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jl	.LBB168_130
	jmp	.LBB168_132
.LBB168_128:                            # %cond.false.418
	movq	-72(%rbp), %rax
	movl	16(%rax), %ecx
	cmpl	-336(%rbp), %ecx
	jg	.LBB168_132
# BB#129:                               # %land.lhs.true.422
	movl	-336(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB168_132
.LBB168_130:                            # %land.lhs.true.426
	movq	-72(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	-332(%rbp), %ecx
	jne	.LBB168_132
# BB#131:                               # %if.then.429
	jmp	.LBB168_147
.LBB168_132:                            # %if.end.430
	movq	-72(%rbp), %rdi
	callq	clear_mouse_face
	testb	$1, %al
	jne	.LBB168_133
	jmp	.LBB168_134
.LBB168_133:                            # %if.then.432
	movq	$0, -88(%rbp)
.LBB168_134:                            # %if.end.433
	movq	-192(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB168_136
# BB#135:                               # %if.then.439
	movl	-336(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-164(%rbp), %eax
	movl	-300(%rbp), %edx
	addl	-100(%rbp), %edx
	subl	%edx, %eax
	movq	-72(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-336(%rbp), %eax
	addl	-296(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-72(%rbp), %rcx
	movl	$0, 20(%rcx)
	jmp	.LBB168_137
.LBB168_136:                            # %if.else.445
	movl	-336(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movl	-164(%rbp), %eax
	movl	-300(%rbp), %edx
	addl	-100(%rbp), %edx
	subl	%edx, %eax
	movq	-72(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movl	-336(%rbp), %eax
	addl	-296(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-72(%rbp), %rcx
	movl	$0, 8(%rcx)
.LBB168_137:                            # %if.end.453
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	-328(%rbp), %r8
	movl	$1, %eax
	movl	-332(%rbp), %edx
	movq	-72(%rbp), %rsi
	movl	%edx, (%rsi)
	movq	-72(%rbp), %rsi
	movl	(%rsi), %edx
	movq	-72(%rbp), %rsi
	movl	%edx, 12(%rsi)
	movq	-72(%rbp), %rsi
	movb	64(%rsi), %dil
	andb	$-2, %dil
	movb	%dil, 64(%rsi)
	movq	-32(%rbp), %rsi
	movq	-72(%rbp), %r9
	movq	%rsi, 24(%r9)
	movq	-56(%rbp), %rdi
	movq	-128(%rbp), %rsi
	movq	-120(%rbp), %rdx
	movq	-176(%rbp), %r9
	movl	28(%r9), %r10d
	andl	$1048575, %r10d         # imm = 0xFFFFF
	movl	%r10d, %r9d
	movl	$1, (%rsp)
	movl	%eax, -720(%rbp)        # 4-byte Spill
	callq	face_at_string_position
	movl	$3, %esi
	movq	-72(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-72(%rbp), %rdi
	callq	show_mouse_face
	xorl	%edi, %edi
	movb	$1, -257(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-728(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB168_139
# BB#138:                               # %if.then.465
	movl	$504, %edi              # imm = 0x1F8
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)
.LBB168_139:                            # %if.end.467
	jmp	.LBB168_140
.LBB168_140:                            # %if.end.468
	jmp	.LBB168_141
.LBB168_141:                            # %if.end.469
	cmpl	$2, -44(%rbp)
	je	.LBB168_143
# BB#142:                               # %lor.lhs.false.472
	cmpl	$4, -44(%rbp)
	jne	.LBB168_145
.LBB168_143:                            # %land.lhs.true.475
	testb	$1, -257(%rbp)
	jne	.LBB168_145
# BB#144:                               # %if.then.477
	movq	-72(%rbp), %rdi
	callq	clear_mouse_face
	movb	%al, -729(%rbp)         # 1-byte Spill
.LBB168_145:                            # %if.end.479
	movq	-64(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB168_147
# BB#146:                               # %if.then.487
	movq	-64(%rbp), %rdi
	movq	-88(%rbp), %rsi
	movq	-96(%rbp), %rdx
	callq	define_frame_cursor1
.LBB168_147:                            # %if.end.488
	addq	$744, %rsp              # imm = 0x2E8
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end168:
	.size	note_mode_line_or_margin_highlight, .Lfunc_end168-note_mode_line_or_margin_highlight
	.cfi_endproc

	.align	16, 0x90
	.type	x_y_to_hpos_vpos,@function
x_y_to_hpos_vpos:                       # @x_y_to_hpos_vpos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp525:
	.cfi_def_cfa_offset 16
.Ltmp526:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp527:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	24(%rbp), %rax
	movq	16(%rbp), %r10
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	%r10, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -96(%rbp)
.LBB169_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB169_9
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB169_1 Depth=1
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB169_4
# BB#3:                                 # %if.then
	movq	$0, -8(%rbp)
	jmp	.LBB169_33
.LBB169_4:                              # %if.end
                                        #   in Loop: Header=BB169_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-88(%rbp), %rcx
	cmpl	48(%rcx), %eax
	jl	.LBB169_7
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB169_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	48(%rcx), %edx
	movq	-88(%rbp), %rcx
	addl	60(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB169_7
# BB#6:                                 # %if.then.6
	jmp	.LBB169_9
.LBB169_7:                              # %if.end.7
                                        #   in Loop: Header=BB169_1 Depth=1
	jmp	.LBB169_8
.LBB169_8:                              # %for.inc
                                        #   in Loop: Header=BB169_1 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB169_1
.LBB169_9:                              # %for.end
	movl	-96(%rbp), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rcx
	movl	$0, (%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jne	.LBB169_11
# BB#10:                                # %if.then.11
	movq	$0, -8(%rbp)
	jmp	.LBB169_33
.LBB169_11:                             # %if.end.12
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB169_13
# BB#12:                                # %if.then.17
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movl	$0, -92(%rbp)
	jmp	.LBB169_23
.LBB169_13:                             # %if.else
	movl	$1, %esi
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rdi
	movl	%eax, -100(%rbp)        # 4-byte Spill
	callq	window_box_left_offset
	movl	-100(%rbp), %esi        # 4-byte Reload
	cmpl	%eax, %esi
	jge	.LBB169_15
# BB#14:                                # %if.then.19
	xorl	%esi, %esi
	movq	-64(%rbp), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rdi
	callq	window_box_left_offset
	movl	%eax, -92(%rbp)
	jmp	.LBB169_22
.LBB169_15:                             # %if.else.21
	movl	$1, %esi
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rdi
	movl	%eax, -104(%rbp)        # 4-byte Spill
	callq	window_box_right_offset
	movl	-104(%rbp), %esi        # 4-byte Reload
	cmpl	%eax, %esi
	jge	.LBB169_20
# BB#16:                                # %if.then.24
	movl	$1, %esi
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	-16(%rbp), %rdi
	callq	window_box_left_offset
	movq	-88(%rbp), %rdi
	cmpl	$0, 44(%rdi)
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jge	.LBB169_18
# BB#17:                                # %cond.true
	movq	-88(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, -112(%rbp)        # 4-byte Spill
	jmp	.LBB169_19
.LBB169_18:                             # %cond.false
	xorl	%eax, %eax
	movl	%eax, -112(%rbp)        # 4-byte Spill
	jmp	.LBB169_19
.LBB169_19:                             # %cond.end
	movl	-112(%rbp), %eax        # 4-byte Reload
	movl	-108(%rbp), %ecx        # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	jmp	.LBB169_21
.LBB169_20:                             # %if.else.30
	movl	$2, %esi
	movq	-64(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rdi
	callq	window_box_left_offset
	movl	%eax, -92(%rbp)
.LBB169_21:                             # %if.end.32
	jmp	.LBB169_22
.LBB169_22:                             # %if.end.33
	jmp	.LBB169_23
.LBB169_23:                             # %if.end.34
	movq	-64(%rbp), %rax
	movslq	(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	movq	-88(%rbp), %rdx
	movswl	32(%rdx,%rcx,2), %esi
	movslq	%esi, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movl	-92(%rbp), %esi
	movl	-20(%rbp), %edi
	subl	%esi, %edi
	movl	%edi, -20(%rbp)
.LBB169_24:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-80(%rbp), %rdx
	movb	%cl, -113(%rbp)         # 1-byte Spill
	jae	.LBB169_26
# BB#25:                                # %land.rhs
                                        #   in Loop: Header=BB169_24 Depth=1
	movl	-20(%rbp), %eax
	movq	-72(%rbp), %rcx
	movswl	16(%rcx), %edx
	cmpl	%edx, %eax
	setge	%sil
	movb	%sil, -113(%rbp)        # 1-byte Spill
.LBB169_26:                             # %land.end
                                        #   in Loop: Header=BB169_24 Depth=1
	movb	-113(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB169_27
	jmp	.LBB169_28
.LBB169_27:                             # %while.body
                                        #   in Loop: Header=BB169_24 Depth=1
	movq	-72(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-20(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -20(%rbp)
	movq	-72(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB169_24
.LBB169_28:                             # %while.end
	movq	-72(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jne	.LBB169_30
# BB#29:                                # %if.then.49
	movq	$0, -8(%rbp)
	jmp	.LBB169_33
.LBB169_30:                             # %if.end.50
	cmpq	$0, -48(%rbp)
	je	.LBB169_32
# BB#31:                                # %if.then.51
	movl	-20(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	48(%rcx), %edx
	movq	-88(%rbp), %rcx
	addl	56(%rcx), %edx
	movq	-72(%rbp), %rcx
	movswl	18(%rcx), %esi
	subl	%esi, %edx
	subl	%edx, %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB169_32:                             # %if.end.58
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movslq	(%rsi), %rsi
	movq	-88(%rbp), %rdi
	movq	(%rdi,%rsi,8), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %r8d
	movq	-32(%rbp), %rax
	movl	%r8d, (%rax)
	movq	-72(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB169_33:                             # %return
	movq	-8(%rbp), %rax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end169:
	.size	x_y_to_hpos_vpos, .Lfunc_end169-x_y_to_hpos_vpos
	.cfi_endproc

	.align	16, 0x90
	.type	mouse_face_from_string_pos,@function
mouse_face_from_string_pos:             # @mouse_face_from_string_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp528:
	.cfi_def_cfa_offset 16
.Ltmp529:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp530:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rdi
	callq	window_text_bottom_y
	movl	%eax, -44(%rbp)
	movb	$0, -77(%rbp)
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB170_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB170_3
.LBB170_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB170_3:                              # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -56(%rbp)
.LBB170_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_18 Depth 2
                                        #     Child Loop BB170_23 Depth 2
                                        #     Child Loop BB170_9 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -97(%rbp)          # 1-byte Spill
	je	.LBB170_6
# BB#5:                                 # %land.rhs
                                        #   in Loop: Header=BB170_4 Depth=1
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	cmpl	-44(%rbp), %ecx
	setl	%dl
	movb	%dl, -97(%rbp)          # 1-byte Spill
.LBB170_6:                              # %land.end
                                        #   in Loop: Header=BB170_4 Depth=1
	movb	-97(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB170_7
	jmp	.LBB170_34
.LBB170_7:                              # %for.body
                                        #   in Loop: Header=BB170_4 Depth=1
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB170_17
# BB#8:                                 # %if.then
                                        #   in Loop: Header=BB170_4 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-56(%rbp), %rax
	movl	44(%rax), %edx
	movl	%edx, -76(%rbp)
.LBB170_9:                              # %for.cond.15
                                        #   Parent Loop BB170_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB170_16
# BB#10:                                # %for.body.18
                                        #   in Loop: Header=BB170_9 Depth=2
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB170_14
# BB#11:                                # %land.lhs.true
                                        #   in Loop: Header=BB170_9 Depth=2
	movq	-32(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	(%rcx), %rax
	jg	.LBB170_14
# BB#12:                                # %land.lhs.true.24
                                        #   in Loop: Header=BB170_9 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB170_14
# BB#13:                                # %if.then.28
                                        #   in Loop: Header=BB170_4 Depth=1
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	192(%rsi), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	sarq	$8, %rdx
	movl	%edx, %eax
	movq	-16(%rbp), %rdx
	movl	%eax, (%rdx)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 4(%rax)
	movl	-76(%rbp), %edi
	movq	-16(%rbp), %rax
	movl	%edi, 8(%rax)
	movb	$1, -77(%rbp)
	jmp	.LBB170_16
.LBB170_14:                             # %if.end
                                        #   in Loop: Header=BB170_9 Depth=2
	jmp	.LBB170_15
.LBB170_15:                             # %for.inc
                                        #   in Loop: Header=BB170_9 Depth=2
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB170_9
.LBB170_16:                             # %for.end
                                        #   in Loop: Header=BB170_4 Depth=1
	jmp	.LBB170_30
.LBB170_17:                             # %if.else
                                        #   in Loop: Header=BB170_4 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
.LBB170_18:                             # %for.cond.47
                                        #   Parent Loop BB170_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jbe	.LBB170_29
# BB#19:                                # %for.body.50
                                        #   in Loop: Header=BB170_18 Depth=2
	movq	-64(%rbp), %rax
	movq	-40(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB170_27
# BB#20:                                # %land.lhs.true.55
                                        #   in Loop: Header=BB170_18 Depth=2
	movq	-32(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	-48(%rcx), %rax
	jg	.LBB170_27
# BB#21:                                # %land.lhs.true.60
                                        #   in Loop: Header=BB170_18 Depth=2
	movq	-64(%rbp), %rax
	movq	-48(%rax), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB170_27
# BB#22:                                # %if.then.65
                                        #   in Loop: Header=BB170_4 Depth=1
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	192(%rsi), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	sarq	$8, %rdx
	movl	%edx, %eax
	movq	-16(%rbp), %rdx
	movl	%eax, (%rdx)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 4(%rax)
	movq	-56(%rbp), %rax
	movl	44(%rax), %edi
	movl	%edi, -76(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
.LBB170_23:                             # %for.cond.85
                                        #   Parent Loop BB170_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-88(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB170_26
# BB#24:                                # %for.body.88
                                        #   in Loop: Header=BB170_23 Depth=2
	movq	-88(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
# BB#25:                                # %for.inc.92
                                        #   in Loop: Header=BB170_23 Depth=2
	movq	-88(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB170_23
.LBB170_26:                             # %for.end.94
                                        #   in Loop: Header=BB170_4 Depth=1
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movb	$1, -77(%rbp)
	jmp	.LBB170_29
.LBB170_27:                             # %if.end.96
                                        #   in Loop: Header=BB170_18 Depth=2
	jmp	.LBB170_28
.LBB170_28:                             # %for.inc.97
                                        #   in Loop: Header=BB170_18 Depth=2
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB170_18
.LBB170_29:                             # %for.end.99
                                        #   in Loop: Header=BB170_4 Depth=1
	jmp	.LBB170_30
.LBB170_30:                             # %if.end.100
                                        #   in Loop: Header=BB170_4 Depth=1
	testb	$1, -77(%rbp)
	je	.LBB170_32
# BB#31:                                # %if.then.101
	jmp	.LBB170_34
.LBB170_32:                             # %if.end.102
                                        #   in Loop: Header=BB170_4 Depth=1
	jmp	.LBB170_33
.LBB170_33:                             # %for.inc.103
                                        #   in Loop: Header=BB170_4 Depth=1
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
	jmp	.LBB170_4
.LBB170_34:                             # %for.end.105
	testb	$1, -77(%rbp)
	jne	.LBB170_36
# BB#35:                                # %if.then.107
	jmp	.LBB170_75
.LBB170_36:                             # %if.end.108
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
.LBB170_37:                             # %for.cond.110
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_41 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -98(%rbp)          # 1-byte Spill
	je	.LBB170_39
# BB#38:                                # %land.rhs.117
                                        #   in Loop: Header=BB170_37 Depth=1
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	cmpl	-44(%rbp), %ecx
	setl	%dl
	movb	%dl, -98(%rbp)          # 1-byte Spill
.LBB170_39:                             # %land.end.121
                                        #   in Loop: Header=BB170_37 Depth=1
	movb	-98(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB170_40
	jmp	.LBB170_52
.LBB170_40:                             # %for.body.122
                                        #   in Loop: Header=BB170_37 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movb	$0, -77(%rbp)
.LBB170_41:                             # %for.cond.130
                                        #   Parent Loop BB170_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB170_48
# BB#42:                                # %for.body.133
                                        #   in Loop: Header=BB170_41 Depth=2
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB170_46
# BB#43:                                # %land.lhs.true.137
                                        #   in Loop: Header=BB170_41 Depth=2
	movq	-32(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	(%rcx), %rax
	jg	.LBB170_46
# BB#44:                                # %land.lhs.true.141
                                        #   in Loop: Header=BB170_41 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB170_46
# BB#45:                                # %if.then.145
                                        #   in Loop: Header=BB170_37 Depth=1
	movb	$1, -77(%rbp)
	jmp	.LBB170_48
.LBB170_46:                             # %if.end.146
                                        #   in Loop: Header=BB170_41 Depth=2
	jmp	.LBB170_47
.LBB170_47:                             # %for.inc.147
                                        #   in Loop: Header=BB170_41 Depth=2
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB170_41
.LBB170_48:                             # %for.end.149
                                        #   in Loop: Header=BB170_37 Depth=1
	testb	$1, -77(%rbp)
	jne	.LBB170_50
# BB#49:                                # %if.then.151
	jmp	.LBB170_52
.LBB170_50:                             # %if.end.152
                                        #   in Loop: Header=BB170_37 Depth=1
	jmp	.LBB170_51
.LBB170_51:                             # %for.inc.153
                                        #   in Loop: Header=BB170_37 Depth=1
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
	jmp	.LBB170_37
.LBB170_52:                             # %for.end.155
	movq	-56(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB170_66
# BB#53:                                # %if.then.169
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
.LBB170_54:                             # %for.cond.177
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jbe	.LBB170_61
# BB#55:                                # %for.body.180
                                        #   in Loop: Header=BB170_54 Depth=1
	movq	-72(%rbp), %rax
	movq	-40(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB170_59
# BB#56:                                # %land.lhs.true.185
                                        #   in Loop: Header=BB170_54 Depth=1
	movq	-32(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	-48(%rcx), %rax
	jg	.LBB170_59
# BB#57:                                # %land.lhs.true.190
                                        #   in Loop: Header=BB170_54 Depth=1
	movq	-72(%rbp), %rax
	movq	-48(%rax), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB170_59
# BB#58:                                # %if.then.195
	jmp	.LBB170_61
.LBB170_59:                             # %if.end.196
                                        #   in Loop: Header=BB170_54 Depth=1
	jmp	.LBB170_60
.LBB170_60:                             # %for.inc.197
                                        #   in Loop: Header=BB170_54 Depth=1
	movq	-72(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB170_54
.LBB170_61:                             # %for.end.199
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 16(%rax)
	movq	-56(%rbp), %rax
	movl	44(%rax), %edi
	movl	%edi, -76(%rbp)
.LBB170_62:                             # %for.cond.206
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB170_65
# BB#63:                                # %for.body.209
                                        #   in Loop: Header=BB170_62 Depth=1
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
# BB#64:                                # %for.inc.213
                                        #   in Loop: Header=BB170_62 Depth=1
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB170_62
.LBB170_65:                             # %for.end.215
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	jmp	.LBB170_75
.LBB170_66:                             # %if.else.216
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movl	44(%rax), %edx
	movl	%edx, -76(%rbp)
.LBB170_67:                             # %for.cond.225
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB170_74
# BB#68:                                # %for.body.228
                                        #   in Loop: Header=BB170_67 Depth=1
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB170_72
# BB#69:                                # %land.lhs.true.232
                                        #   in Loop: Header=BB170_67 Depth=1
	movq	-32(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	(%rcx), %rax
	jg	.LBB170_72
# BB#70:                                # %land.lhs.true.236
                                        #   in Loop: Header=BB170_67 Depth=1
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB170_72
# BB#71:                                # %if.then.240
	jmp	.LBB170_74
.LBB170_72:                             # %if.end.241
                                        #   in Loop: Header=BB170_67 Depth=1
	movq	-72(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
# BB#73:                                # %for.inc.245
                                        #   in Loop: Header=BB170_67 Depth=1
	movq	-72(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB170_67
.LBB170_74:                             # %for.end.247
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 16(%rax)
	movl	-76(%rbp), %edi
	movq	-16(%rbp), %rax
	movl	%edi, 20(%rax)
.LBB170_75:                             # %if.end.257
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end170:
	.size	mouse_face_from_string_pos, .Lfunc_end170-mouse_face_from_string_pos
	.cfi_endproc

	.align	16, 0x90
	.type	string_buffer_position,@function
string_buffer_position:                 # @string_buffer_position
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp531:
	.cfi_def_cfa_offset 16
.Ltmp532:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp533:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%ecx, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$1000, -20(%rbp)        # imm = 0x3E8
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-16(%rbp), %rax
	addq	$1000, %rax             # imm = 0x3E8
	movq	%rax, %rdx
	callq	string_buffer_position_lim
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB171_2
# BB#1:                                 # %if.then
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-16(%rbp), %rax
	subq	$1000, %rax             # imm = 0x3E8
	movq	%rax, %rdx
	callq	string_buffer_position_lim
	movq	%rax, -32(%rbp)
.LBB171_2:                              # %if.end
	movq	-32(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end171:
	.size	string_buffer_position, .Lfunc_end171-string_buffer_position
	.cfi_endproc

	.align	16, 0x90
	.type	mouse_face_from_buffer_pos,@function
mouse_face_from_buffer_pos:             # @mouse_face_from_buffer_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp534:
	.cfi_def_cfa_offset 16
.Ltmp535:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp536:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              # imm = 0x180
	movq	24(%rbp), %rax
	movq	16(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	%r10, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB172_2
# BB#1:                                 # %cond.true
	movq	-72(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jmp	.LBB172_3
.LBB172_2:                              # %cond.false
	movq	-72(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
.LBB172_3:                              # %cond.end
	movq	-192(%rbp), %rax        # 8-byte Reload
	leaq	-88(%rbp), %r8
	leaq	-96(%rbp), %r9
	movq	%rax, -80(%rbp)
	movq	-72(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-64(%rbp), %rcx
	callq	rows_from_pos_range
	cmpq	$0, -88(%rbp)
	jne	.LBB172_5
# BB#4:                                 # %if.then
	movq	-72(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	464(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
.LBB172_5:                              # %if.end
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB172_7
# BB#6:                                 # %lor.lhs.false
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB172_23
.LBB172_7:                              # %if.then.12
	jmp	.LBB172_8
.LBB172_8:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_13 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-88(%rbp), %rdx
	addq	$-256, %rdx
	movq	%rdx, -144(%rbp)
	movq	-144(%rbp), %rdx
	cmpq	-80(%rbp), %rdx
	movb	%cl, -209(%rbp)         # 1-byte Spill
	jb	.LBB172_11
# BB#9:                                 # %land.lhs.true
                                        #   in Loop: Header=BB172_8 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-144(%rbp), %rdx
	movq	192(%rdx), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -209(%rbp)         # 1-byte Spill
	jne	.LBB172_11
# BB#10:                                # %land.rhs
                                        #   in Loop: Header=BB172_8 Depth=1
	movq	-144(%rbp), %rax
	movswl	34(%rax), %ecx
	cmpl	$0, %ecx
	setg	%dl
	movb	%dl, -209(%rbp)         # 1-byte Spill
.LBB172_11:                             # %land.end
                                        #   in Loop: Header=BB172_8 Depth=1
	movb	-209(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_12
	jmp	.LBB172_22
.LBB172_12:                             # %while.body
                                        #   in Loop: Header=BB172_8 Depth=1
	movq	-144(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	-144(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
.LBB172_13:                             # %while.cond.24
                                        #   Parent Loop BB172_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	addq	$-48, %rdx
	movq	%rdx, -104(%rbp)
	cmpq	-152(%rbp), %rdx
	movb	%cl, -210(%rbp)         # 1-byte Spill
	jb	.LBB172_15
# BB#14:                                # %land.rhs.27
                                        #   in Loop: Header=BB172_13 Depth=2
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -210(%rbp)         # 1-byte Spill
.LBB172_15:                             # %land.end.31
                                        #   in Loop: Header=BB172_13 Depth=2
	movb	-210(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_16
	jmp	.LBB172_17
.LBB172_16:                             # %while.body.32
                                        #   in Loop: Header=BB172_13 Depth=2
	jmp	.LBB172_13
.LBB172_17:                             # %while.end
                                        #   in Loop: Header=BB172_8 Depth=1
	movq	-104(%rbp), %rax
	cmpq	-152(%rbp), %rax
	jb	.LBB172_20
# BB#18:                                # %lor.lhs.false.35
                                        #   in Loop: Header=BB172_8 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-48(%rbp), %rax
	je	.LBB172_21
# BB#19:                                # %lor.lhs.false.39
                                        #   in Loop: Header=BB172_8 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-64(%rbp), %rax
	je	.LBB172_21
.LBB172_20:                             # %if.then.43
	jmp	.LBB172_22
.LBB172_21:                             # %if.end.44
                                        #   in Loop: Header=BB172_8 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB172_8
.LBB172_22:                             # %while.end.45
	jmp	.LBB172_23
.LBB172_23:                             # %if.end.46
	cmpq	$0, -96(%rbp)
	jne	.LBB172_25
# BB#24:                                # %if.then.49
	movq	-72(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	464(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-16(%rbp), %rax
	movb	64(%rax), %dl
	andb	$-2, %dl
	orb	$1, %dl
	movb	%dl, 64(%rax)
	jmp	.LBB172_35
.LBB172_25:                             # %if.else
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB172_34
# BB#26:                                # %if.then.60
	movq	-72(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	464(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-96(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -160(%rbp)
.LBB172_27:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-160(%rbp), %rdx
	cmpq	-168(%rbp), %rdx
	movb	%cl, -233(%rbp)         # 1-byte Spill
	ja	.LBB172_30
# BB#28:                                # %land.lhs.true.69
                                        #   in Loop: Header=BB172_27 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-160(%rbp), %rdx
	movswl	34(%rdx), %eax
	cmpl	$0, %eax
	movb	%cl, -233(%rbp)         # 1-byte Spill
	jle	.LBB172_30
# BB#29:                                # %land.rhs.75
                                        #   in Loop: Header=BB172_27 Depth=1
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	cmpq	-56(%rbp), %rax
	sete	%cl
	movb	%cl, -233(%rbp)         # 1-byte Spill
.LBB172_30:                             # %land.end.81
                                        #   in Loop: Header=BB172_27 Depth=1
	movb	-233(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_31
	jmp	.LBB172_33
.LBB172_31:                             # %for.body
                                        #   in Loop: Header=BB172_27 Depth=1
	movq	-160(%rbp), %rax
	movq	%rax, -96(%rbp)
# BB#32:                                # %for.inc
                                        #   in Loop: Header=BB172_27 Depth=1
	movq	-160(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -160(%rbp)
	jmp	.LBB172_27
.LBB172_33:                             # %for.end
	jmp	.LBB172_34
.LBB172_34:                             # %if.end.83
	jmp	.LBB172_35
.LBB172_35:                             # %if.end.84
	movq	-88(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-96(%rbp), %rax
	cmpl	48(%rax), %ecx
	jle	.LBB172_37
# BB#36:                                # %if.then.88
	movq	-96(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB172_37:                             # %if.end.89
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-88(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB172_73
# BB#38:                                # %if.then.104
	movq	-88(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	-88(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-88(%rbp), %rax
	movl	44(%rax), %edx
	movl	%edx, -132(%rbp)
	movq	-88(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB172_47
# BB#39:                                # %if.then.117
	jmp	.LBB172_40
.LBB172_40:                             # %for.cond.118
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	cmpq	-112(%rbp), %rdx
	movb	%cl, -234(%rbp)         # 1-byte Spill
	jae	.LBB172_43
# BB#41:                                # %land.lhs.true.121
                                        #   in Loop: Header=BB172_40 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-248(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -234(%rbp)         # 1-byte Spill
	jne	.LBB172_43
# BB#42:                                # %land.rhs.126
                                        #   in Loop: Header=BB172_40 Depth=1
	movq	-104(%rbp), %rax
	cmpq	$0, (%rax)
	setl	%cl
	movb	%cl, -234(%rbp)         # 1-byte Spill
.LBB172_43:                             # %land.end.130
                                        #   in Loop: Header=BB172_40 Depth=1
	movb	-234(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_44
	jmp	.LBB172_46
.LBB172_44:                             # %for.body.131
                                        #   in Loop: Header=BB172_40 Depth=1
	movq	-104(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
# BB#45:                                # %for.inc.133
                                        #   in Loop: Header=BB172_40 Depth=1
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB172_40
.LBB172_46:                             # %for.end.135
	jmp	.LBB172_47
.LBB172_47:                             # %if.end.136
	jmp	.LBB172_48
.LBB172_48:                             # %for.cond.137
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	cmpq	-112(%rbp), %rdx
	movb	%cl, -249(%rbp)         # 1-byte Spill
	jae	.LBB172_56
# BB#49:                                # %land.lhs.true.140
                                        #   in Loop: Header=BB172_48 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-264(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -249(%rbp)         # 1-byte Spill
	je	.LBB172_56
# BB#50:                                # %land.lhs.true.145
                                        #   in Loop: Header=BB172_48 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	8(%rdx), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -249(%rbp)         # 1-byte Spill
	je	.LBB172_56
# BB#51:                                # %land.rhs.149
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -265(%rbp)         # 1-byte Spill
	jne	.LBB172_52
	jmp	.LBB172_55
.LBB172_52:                             # %land.rhs.153
                                        #   in Loop: Header=BB172_48 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	(%rdx), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -266(%rbp)         # 1-byte Spill
	jl	.LBB172_54
# BB#53:                                # %land.rhs.157
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	setl	%cl
	movb	%cl, -266(%rbp)         # 1-byte Spill
.LBB172_54:                             # %land.end.161
                                        #   in Loop: Header=BB172_48 Depth=1
	movb	-266(%rbp), %al         # 1-byte Reload
	movb	%al, -265(%rbp)         # 1-byte Spill
.LBB172_55:                             # %land.end.162
                                        #   in Loop: Header=BB172_48 Depth=1
	movb	-265(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -249(%rbp)         # 1-byte Spill
.LBB172_56:                             # %land.end.163
                                        #   in Loop: Header=BB172_48 Depth=1
	movb	-249(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_57
	jmp	.LBB172_72
.LBB172_57:                             # %for.body.164
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB172_63
# BB#58:                                # %if.then.168
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_61
# BB#59:                                # %lor.lhs.false.170
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_62
# BB#60:                                # %land.lhs.true.173
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_62
.LBB172_61:                             # %if.then.176
	jmp	.LBB172_72
.LBB172_62:                             # %if.end.177
                                        #   in Loop: Header=BB172_48 Depth=1
	jmp	.LBB172_70
.LBB172_63:                             # %if.else.178
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB172_69
# BB#64:                                # %if.then.182
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_67
# BB#65:                                # %lor.lhs.false.185
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_68
# BB#66:                                # %land.lhs.true.188
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_68
.LBB172_67:                             # %if.then.191
	jmp	.LBB172_72
.LBB172_68:                             # %if.end.192
                                        #   in Loop: Header=BB172_48 Depth=1
	jmp	.LBB172_69
.LBB172_69:                             # %if.end.193
                                        #   in Loop: Header=BB172_48 Depth=1
	jmp	.LBB172_70
.LBB172_70:                             # %if.end.194
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-104(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
# BB#71:                                # %for.inc.198
                                        #   in Loop: Header=BB172_48 Depth=1
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB172_48
.LBB172_72:                             # %for.end.200
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movq	-104(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 4(%rax)
	jmp	.LBB172_112
.LBB172_73:                             # %if.else.208
	movq	-88(%rbp), %rax
	movq	8(%rax), %rax
	addq	$-48, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	-88(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-88(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB172_82
# BB#74:                                # %if.then.222
	jmp	.LBB172_75
.LBB172_75:                             # %for.cond.223
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	cmpq	-112(%rbp), %rdx
	movb	%cl, -267(%rbp)         # 1-byte Spill
	jbe	.LBB172_78
# BB#76:                                # %land.lhs.true.226
                                        #   in Loop: Header=BB172_75 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-280(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -267(%rbp)         # 1-byte Spill
	jne	.LBB172_78
# BB#77:                                # %land.rhs.231
                                        #   in Loop: Header=BB172_75 Depth=1
	movq	-104(%rbp), %rax
	cmpq	$0, (%rax)
	setl	%cl
	movb	%cl, -267(%rbp)         # 1-byte Spill
.LBB172_78:                             # %land.end.235
                                        #   in Loop: Header=BB172_75 Depth=1
	movb	-267(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_79
	jmp	.LBB172_81
.LBB172_79:                             # %for.body.236
                                        #   in Loop: Header=BB172_75 Depth=1
	jmp	.LBB172_80
.LBB172_80:                             # %for.inc.237
                                        #   in Loop: Header=BB172_75 Depth=1
	movq	-104(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB172_75
.LBB172_81:                             # %for.end.239
	jmp	.LBB172_82
.LBB172_82:                             # %if.end.240
	jmp	.LBB172_83
.LBB172_83:                             # %for.cond.241
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	cmpq	-112(%rbp), %rdx
	movb	%cl, -281(%rbp)         # 1-byte Spill
	jbe	.LBB172_91
# BB#84:                                # %land.lhs.true.244
                                        #   in Loop: Header=BB172_83 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-296(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -281(%rbp)         # 1-byte Spill
	je	.LBB172_91
# BB#85:                                # %land.lhs.true.249
                                        #   in Loop: Header=BB172_83 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	8(%rdx), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -281(%rbp)         # 1-byte Spill
	je	.LBB172_91
# BB#86:                                # %land.rhs.253
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -297(%rbp)         # 1-byte Spill
	jne	.LBB172_87
	jmp	.LBB172_90
.LBB172_87:                             # %land.rhs.257
                                        #   in Loop: Header=BB172_83 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	(%rdx), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -298(%rbp)         # 1-byte Spill
	jl	.LBB172_89
# BB#88:                                # %land.rhs.261
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	setl	%cl
	movb	%cl, -298(%rbp)         # 1-byte Spill
.LBB172_89:                             # %land.end.265
                                        #   in Loop: Header=BB172_83 Depth=1
	movb	-298(%rbp), %al         # 1-byte Reload
	movb	%al, -297(%rbp)         # 1-byte Spill
.LBB172_90:                             # %land.end.266
                                        #   in Loop: Header=BB172_83 Depth=1
	movb	-297(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -281(%rbp)         # 1-byte Spill
.LBB172_91:                             # %land.end.268
                                        #   in Loop: Header=BB172_83 Depth=1
	movb	-281(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_92
	jmp	.LBB172_107
.LBB172_92:                             # %for.body.269
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB172_98
# BB#93:                                # %if.then.273
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_96
# BB#94:                                # %lor.lhs.false.276
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_97
# BB#95:                                # %land.lhs.true.279
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_97
.LBB172_96:                             # %if.then.282
	jmp	.LBB172_107
.LBB172_97:                             # %if.end.283
                                        #   in Loop: Header=BB172_83 Depth=1
	jmp	.LBB172_105
.LBB172_98:                             # %if.else.284
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB172_104
# BB#99:                                # %if.then.288
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_102
# BB#100:                               # %lor.lhs.false.291
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_103
# BB#101:                               # %land.lhs.true.294
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_103
.LBB172_102:                            # %if.then.297
	jmp	.LBB172_107
.LBB172_103:                            # %if.end.298
                                        #   in Loop: Header=BB172_83 Depth=1
	jmp	.LBB172_104
.LBB172_104:                            # %if.end.299
                                        #   in Loop: Header=BB172_83 Depth=1
	jmp	.LBB172_105
.LBB172_105:                            # %if.end.300
                                        #   in Loop: Header=BB172_83 Depth=1
	jmp	.LBB172_106
.LBB172_106:                            # %for.inc.301
                                        #   in Loop: Header=BB172_83 Depth=1
	movq	-104(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB172_83
.LBB172_107:                            # %for.end.303
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-88(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	-88(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, -132(%rbp)
.LBB172_108:                            # %for.cond.308
                                        # =>This Inner Loop Header: Depth=1
	movq	-184(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jae	.LBB172_111
# BB#109:                               # %for.body.311
                                        #   in Loop: Header=BB172_108 Depth=1
	movq	-184(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
# BB#110:                               # %for.inc.315
                                        #   in Loop: Header=BB172_108 Depth=1
	movq	-184(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -184(%rbp)
	jmp	.LBB172_108
.LBB172_111:                            # %for.end.317
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movq	-104(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 4(%rax)
.LBB172_112:                            # %if.end.327
	movq	-96(%rbp), %rax
	cmpq	-88(%rbp), %rax
	je	.LBB172_117
# BB#113:                               # %if.then.330
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB172_115
# BB#114:                               # %if.then.336
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-96(%rbp), %rax
	movl	44(%rax), %edx
	movl	%edx, -132(%rbp)
	jmp	.LBB172_116
.LBB172_115:                            # %if.else.345
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	addq	$-48, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	-96(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
.LBB172_116:                            # %if.end.354
	jmp	.LBB172_117
.LBB172_117:                            # %if.end.355
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB172_153
# BB#118:                               # %if.then.361
	jmp	.LBB172_119
.LBB172_119:                            # %while.cond.362
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	cmpq	-104(%rbp), %rdx
	movb	%cl, -299(%rbp)         # 1-byte Spill
	jbe	.LBB172_121
# BB#120:                               # %land.rhs.365
                                        #   in Loop: Header=BB172_119 Depth=1
	xorl	%edi, %edi
	movq	-112(%rbp), %rax
	movq	-40(%rax), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-312(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -299(%rbp)         # 1-byte Spill
.LBB172_121:                            # %land.end.371
                                        #   in Loop: Header=BB172_119 Depth=1
	movb	-299(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_122
	jmp	.LBB172_123
.LBB172_122:                            # %while.body.372
                                        #   in Loop: Header=BB172_119 Depth=1
	movq	-112(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB172_119
.LBB172_123:                            # %while.end.374
	movq	-112(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -112(%rbp)
.LBB172_124:                            # %for.cond.376
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	cmpq	-104(%rbp), %rdx
	movb	%cl, -313(%rbp)         # 1-byte Spill
	jbe	.LBB172_132
# BB#125:                               # %land.lhs.true.379
                                        #   in Loop: Header=BB172_124 Depth=1
	xorl	%edi, %edi
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-328(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -313(%rbp)         # 1-byte Spill
	je	.LBB172_132
# BB#126:                               # %land.lhs.true.384
                                        #   in Loop: Header=BB172_124 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	8(%rdx), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -313(%rbp)         # 1-byte Spill
	je	.LBB172_132
# BB#127:                               # %land.rhs.388
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-112(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -329(%rbp)         # 1-byte Spill
	jne	.LBB172_128
	jmp	.LBB172_131
.LBB172_128:                            # %land.rhs.392
                                        #   in Loop: Header=BB172_124 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	(%rdx), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -330(%rbp)         # 1-byte Spill
	jl	.LBB172_130
# BB#129:                               # %land.rhs.396
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	setl	%cl
	movb	%cl, -330(%rbp)         # 1-byte Spill
.LBB172_130:                            # %land.end.400
                                        #   in Loop: Header=BB172_124 Depth=1
	movb	-330(%rbp), %al         # 1-byte Reload
	movb	%al, -329(%rbp)         # 1-byte Spill
.LBB172_131:                            # %land.end.401
                                        #   in Loop: Header=BB172_124 Depth=1
	movb	-329(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -313(%rbp)         # 1-byte Spill
.LBB172_132:                            # %land.end.403
                                        #   in Loop: Header=BB172_124 Depth=1
	movb	-313(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_133
	jmp	.LBB172_148
.LBB172_133:                            # %for.body.404
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB172_139
# BB#134:                               # %if.then.408
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_137
# BB#135:                               # %lor.lhs.false.411
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_138
# BB#136:                               # %land.lhs.true.414
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_138
.LBB172_137:                            # %if.then.417
	jmp	.LBB172_148
.LBB172_138:                            # %if.end.418
                                        #   in Loop: Header=BB172_124 Depth=1
	jmp	.LBB172_146
.LBB172_139:                            # %if.else.419
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB172_145
# BB#140:                               # %if.then.423
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_143
# BB#141:                               # %lor.lhs.false.426
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_144
# BB#142:                               # %land.lhs.true.429
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_144
.LBB172_143:                            # %if.then.432
	jmp	.LBB172_148
.LBB172_144:                            # %if.end.433
                                        #   in Loop: Header=BB172_124 Depth=1
	jmp	.LBB172_145
.LBB172_145:                            # %if.end.434
                                        #   in Loop: Header=BB172_124 Depth=1
	jmp	.LBB172_146
.LBB172_146:                            # %if.end.435
                                        #   in Loop: Header=BB172_124 Depth=1
	jmp	.LBB172_147
.LBB172_147:                            # %for.inc.436
                                        #   in Loop: Header=BB172_124 Depth=1
	movq	-112(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB172_124
.LBB172_148:                            # %for.end.438
	jmp	.LBB172_149
.LBB172_149:                            # %for.cond.439
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	cmpq	-112(%rbp), %rax
	ja	.LBB172_152
# BB#150:                               # %for.body.442
                                        #   in Loop: Header=BB172_149 Depth=1
	movq	-104(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
# BB#151:                               # %for.inc.446
                                        #   in Loop: Header=BB172_149 Depth=1
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB172_149
.LBB172_152:                            # %for.end.448
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 20(%rdx)
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 16(%rax)
	jmp	.LBB172_189
.LBB172_153:                            # %if.else.456
	movq	-96(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, -132(%rbp)
	movq	-112(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -112(%rbp)
.LBB172_154:                            # %while.cond.459
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	cmpq	-104(%rbp), %rdx
	movb	%cl, -331(%rbp)         # 1-byte Spill
	jae	.LBB172_156
# BB#155:                               # %land.rhs.462
                                        #   in Loop: Header=BB172_154 Depth=1
	xorl	%edi, %edi
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-344(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -331(%rbp)         # 1-byte Spill
.LBB172_156:                            # %land.end.467
                                        #   in Loop: Header=BB172_154 Depth=1
	movb	-331(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_157
	jmp	.LBB172_158
.LBB172_157:                            # %while.body.468
                                        #   in Loop: Header=BB172_154 Depth=1
	movq	-112(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movq	-112(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB172_154
.LBB172_158:                            # %while.end.473
	jmp	.LBB172_159
.LBB172_159:                            # %for.cond.474
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	cmpq	-104(%rbp), %rdx
	movb	%cl, -345(%rbp)         # 1-byte Spill
	jae	.LBB172_167
# BB#160:                               # %land.lhs.true.477
                                        #   in Loop: Header=BB172_159 Depth=1
	xorl	%edi, %edi
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-360(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -345(%rbp)         # 1-byte Spill
	je	.LBB172_167
# BB#161:                               # %land.lhs.true.482
                                        #   in Loop: Header=BB172_159 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	8(%rdx), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -345(%rbp)         # 1-byte Spill
	je	.LBB172_167
# BB#162:                               # %land.rhs.486
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-112(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -361(%rbp)         # 1-byte Spill
	jne	.LBB172_163
	jmp	.LBB172_166
.LBB172_163:                            # %land.rhs.490
                                        #   in Loop: Header=BB172_159 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	(%rdx), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -362(%rbp)         # 1-byte Spill
	jl	.LBB172_165
# BB#164:                               # %land.rhs.494
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	setl	%cl
	movb	%cl, -362(%rbp)         # 1-byte Spill
.LBB172_165:                            # %land.end.498
                                        #   in Loop: Header=BB172_159 Depth=1
	movb	-362(%rbp), %al         # 1-byte Reload
	movb	%al, -361(%rbp)         # 1-byte Spill
.LBB172_166:                            # %land.end.499
                                        #   in Loop: Header=BB172_159 Depth=1
	movb	-361(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -345(%rbp)         # 1-byte Spill
.LBB172_167:                            # %land.end.501
                                        #   in Loop: Header=BB172_159 Depth=1
	movb	-345(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB172_168
	jmp	.LBB172_183
.LBB172_168:                            # %for.body.502
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB172_174
# BB#169:                               # %if.then.506
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_172
# BB#170:                               # %lor.lhs.false.509
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_173
# BB#171:                               # %land.lhs.true.512
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_173
.LBB172_172:                            # %if.then.515
	jmp	.LBB172_183
.LBB172_173:                            # %if.end.516
                                        #   in Loop: Header=BB172_159 Depth=1
	jmp	.LBB172_181
.LBB172_174:                            # %if.else.517
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB172_180
# BB#175:                               # %if.then.521
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-56(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	string_buffer_position
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	je	.LBB172_178
# BB#176:                               # %lor.lhs.false.524
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_179
# BB#177:                               # %land.lhs.true.527
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-128(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB172_179
.LBB172_178:                            # %if.then.530
	jmp	.LBB172_183
.LBB172_179:                            # %if.end.531
                                        #   in Loop: Header=BB172_159 Depth=1
	jmp	.LBB172_180
.LBB172_180:                            # %if.end.532
                                        #   in Loop: Header=BB172_159 Depth=1
	jmp	.LBB172_181
.LBB172_181:                            # %if.end.533
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-112(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
# BB#182:                               # %for.inc.537
                                        #   in Loop: Header=BB172_159 Depth=1
	movq	-112(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB172_159
.LBB172_183:                            # %for.end.539
	movq	-112(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jne	.LBB172_188
# BB#184:                               # %land.lhs.true.542
	movq	-112(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB172_185
	jmp	.LBB172_188
.LBB172_185:                            # %land.lhs.true.546
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-32(%rbp), %rax
	jl	.LBB172_187
# BB#186:                               # %lor.lhs.false.550
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-40(%rbp), %rax
	jl	.LBB172_188
.LBB172_187:                            # %if.then.554
	movq	-112(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-132(%rbp), %ecx
	movl	%ecx, -132(%rbp)
	movq	-112(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -112(%rbp)
.LBB172_188:                            # %if.end.559
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-132(%rbp), %eax
	movq	-16(%rbp), %rdx
	movl	%eax, 20(%rdx)
	movq	-112(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 16(%rax)
.LBB172_189:                            # %if.end.569
	leaq	-120(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 24(%rdx)
	movq	-72(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-24(%rbp), %rcx
	addq	$1, %rcx
	movq	-16(%rbp), %rdx
	movb	64(%rdx), %r8b
	shrb	$2, %r8b
	andb	$1, %r8b
	xorb	$-1, %r8b
	movzbl	%r8b, %r9d
	andl	$1, %r9d
	leaq	-120(%rbp), %rdx
	movl	$-1, %r10d
	movl	%r9d, %r8d
	movl	%r10d, %r9d
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	face_at_buffer_position
	movl	$3, %esi
	movq	-16(%rbp), %rcx
	movl	%eax, 32(%rcx)
	movq	-16(%rbp), %rdi
	callq	show_mouse_face
	addq	$384, %rsp              # imm = 0x180
	popq	%rbp
	retq
.Lfunc_end172:
	.size	mouse_face_from_buffer_pos, .Lfunc_end172-mouse_face_from_buffer_pos
	.cfi_endproc

	.align	16, 0x90
	.type	define_frame_cursor1,@function
define_frame_cursor1:                   # @define_frame_cursor1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp537:
	.cfi_def_cfa_offset 16
.Ltmp538:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp539:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$354, %eax              # imm = 0x162
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	globals+2944, %rdx
	movl	%eax, %edi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB173_2
# BB#1:                                 # %if.then
	jmp	.LBB173_30
.LBB173_2:                              # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB173_28
# BB#3:                                 # %if.then.3
	movl	$180, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB173_5
# BB#4:                                 # %if.then.6
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_27
.LBB173_5:                              # %if.else
	movl	$504, %edi              # imm = 0x1F8
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB173_7
# BB#6:                                 # %if.then.9
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	320(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_26
.LBB173_7:                              # %if.else.12
	movl	$910, %edi              # imm = 0x38E
	movq	-24(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB173_9
# BB#8:                                 # %if.then.15
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	296(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_25
.LBB173_9:                              # %if.else.18
	movabsq	$.L.str.161, %rdi
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	intern
	movq	-72(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB173_11
# BB#10:                                # %if.then.21
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	336(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_24
.LBB173_11:                             # %if.else.24
	movabsq	$.L.str.162, %rdi
	movq	-24(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	intern
	movq	-80(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB173_13
# BB#12:                                # %if.then.27
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	344(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_23
.LBB173_13:                             # %if.else.30
	movabsq	$.L.str.163, %rdi
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	intern
	movq	-88(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB173_15
# BB#14:                                # %if.then.33
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	movq	120(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_22
.LBB173_15:                             # %if.else.36
	movabsq	$.L.str.164, %rdi
	movq	-24(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	intern
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB173_17
# BB#16:                                # %if.then.39
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	328(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_21
.LBB173_17:                             # %if.else.42
	movl	$675, %edi              # imm = 0x2A3
	movq	-24(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB173_19
# BB#18:                                # %if.then.45
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	312(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB173_20
.LBB173_19:                             # %if.else.48
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	304(%rax), %rax
	movq	%rax, -16(%rbp)
.LBB173_20:                             # %if.end.52
	jmp	.LBB173_21
.LBB173_21:                             # %if.end.53
	jmp	.LBB173_22
.LBB173_22:                             # %if.end.54
	jmp	.LBB173_23
.LBB173_23:                             # %if.end.55
	jmp	.LBB173_24
.LBB173_24:                             # %if.end.56
	jmp	.LBB173_25
.LBB173_25:                             # %if.end.57
	jmp	.LBB173_26
.LBB173_26:                             # %if.end.58
	jmp	.LBB173_27
.LBB173_27:                             # %if.end.59
	jmp	.LBB173_28
.LBB173_28:                             # %if.end.60
	cmpq	$0, -16(%rbp)
	je	.LBB173_30
# BB#29:                                # %if.then.62
	movq	-8(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	144(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	*%rax
.LBB173_30:                             # %if.end.63
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end173:
	.size	define_frame_cursor1, .Lfunc_end173-define_frame_cursor1
	.cfi_endproc

	.globl	x_clear_window_mouse_face
	.align	16, 0x90
	.type	x_clear_window_mouse_face,@function
x_clear_window_mouse_face:              # @x_clear_window_mouse_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp540:
	.cfi_def_cfa_offset 16
.Ltmp541:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp542:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB174_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB174_3
.LBB174_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB174_3:                              # %cond.end
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	%rax, -16(%rbp)
	callq	block_input
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rdi
	cmpq	24(%rdi), %rax
	jne	.LBB174_5
# BB#4:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	clear_mouse_face
	movb	%al, -33(%rbp)          # 1-byte Spill
.LBB174_5:                              # %if.end
	callq	unblock_input
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end174:
	.size	x_clear_window_mouse_face, .Lfunc_end174-x_clear_window_mouse_face
	.cfi_endproc

	.globl	cancel_mouse_face
	.align	16, 0x90
	.type	cancel_mouse_face,@function
cancel_mouse_face:                      # @cancel_mouse_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp543:
	.cfi_def_cfa_offset 16
.Ltmp544:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp545:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB175_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB175_3
.LBB175_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB175_3:                              # %cond.end
	movq	-32(%rbp), %rax         # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB175_6
# BB#4:                                 # %land.lhs.true
	movq	-16(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpq	-8(%rbp), %rax
	jne	.LBB175_6
# BB#5:                                 # %if.then
	movq	-24(%rbp), %rdi
	callq	reset_mouse_highlight
.LBB175_6:                              # %if.end
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end175:
	.size	cancel_mouse_face, .Lfunc_end175-cancel_mouse_face
	.cfi_endproc

	.globl	x_draw_vertical_border
	.align	16, 0x90
	.type	x_draw_vertical_border,@function
x_draw_vertical_border:                 # @x_draw_vertical_border
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp546:
	.cfi_def_cfa_offset 16
.Ltmp547:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp548:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$30, %rdi
	andq	$3, %rdi
	movl	%edi, %eax
	cmpl	$0, %eax
	jne	.LBB176_2
# BB#1:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$0, 336(%rax)
	je	.LBB176_3
.LBB176_2:                              # %if.then
	jmp	.LBB176_37
.LBB176_3:                              # %if.end
	movq	-8(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -56(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-56(%rbp), %ecx         # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-52(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB176_20
# BB#4:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB176_6
# BB#5:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	jmp	.LBB176_13
.LBB176_6:                              # %cond.false
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB176_8
# BB#7:                                 # %cond.true.18
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	jmp	.LBB176_12
.LBB176_8:                              # %cond.false.26
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB176_10
# BB#9:                                 # %cond.true.30
	movl	$1, %eax
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB176_11
.LBB176_10:                             # %cond.false.31
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-104(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -92(%rbp)         # 4-byte Spill
.LBB176_11:                             # %cond.end
	movl	-92(%rbp), %eax         # 4-byte Reload
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB176_12:                             # %cond.end.36
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -60(%rbp)         # 4-byte Spill
.LBB176_13:                             # %cond.end.38
	movl	-60(%rbp), %eax         # 4-byte Reload
	cmpl	$2, %eax
	je	.LBB176_20
# BB#14:                                # %if.then.41
	leaq	-20(%rbp), %rsi
	leaq	-28(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	leaq	-32(%rbp), %r8
	movq	-8(%rbp), %rdi
	callq	window_box_edges
	movl	-32(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 420(%rcx)
	jl	.LBB176_16
# BB#15:                                # %cond.true.44
	movq	-8(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -108(%rbp)        # 4-byte Spill
	jmp	.LBB176_17
.LBB176_16:                             # %cond.false.46
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -108(%rbp)        # 4-byte Spill
.LBB176_17:                             # %cond.end.50
	movl	-108(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB176_19
# BB#18:                                # %if.then.53
	movl	-24(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB176_19:                             # %if.end.55
	movq	-16(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	168(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	callq	*%rax
.LBB176_20:                             # %if.end.56
	movq	-8(%rbp), %rax
	cmpl	$0, 240(%rax)
	je	.LBB176_37
# BB#21:                                # %land.lhs.true.59
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB176_23
# BB#22:                                # %cond.true.65
	xorl	%eax, %eax
	movl	%eax, -112(%rbp)        # 4-byte Spill
	jmp	.LBB176_30
.LBB176_23:                             # %cond.false.66
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB176_25
# BB#24:                                # %cond.true.70
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	jmp	.LBB176_29
.LBB176_25:                             # %cond.false.78
	movl	$607, %edi              # imm = 0x25F
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB176_27
# BB#26:                                # %cond.true.82
	movl	$1, %eax
	movl	%eax, -140(%rbp)        # 4-byte Spill
	jmp	.LBB176_28
.LBB176_27:                             # %cond.false.83
	movl	$811, %edi              # imm = 0x32B
	movq	-8(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-152(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -140(%rbp)        # 4-byte Spill
.LBB176_28:                             # %cond.end.88
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, -124(%rbp)        # 4-byte Spill
.LBB176_29:                             # %cond.end.90
	movl	-124(%rbp), %eax        # 4-byte Reload
	movl	%eax, -112(%rbp)        # 4-byte Spill
.LBB176_30:                             # %cond.end.92
	movl	-112(%rbp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB176_37
# BB#31:                                # %if.then.95
	leaq	-36(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-48(%rbp), %r8
	movq	-8(%rbp), %rdi
	callq	window_box_edges
	movl	-48(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -48(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 420(%rcx)
	jl	.LBB176_33
# BB#32:                                # %cond.true.103
	movq	-8(%rbp), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -156(%rbp)        # 4-byte Spill
	jmp	.LBB176_34
.LBB176_33:                             # %cond.false.105
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -156(%rbp)        # 4-byte Spill
.LBB176_34:                             # %cond.end.109
	movl	-156(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB176_36
# BB#35:                                # %if.then.112
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB176_36:                             # %if.end.114
	movq	-16(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	168(%rax), %rax
	movq	-8(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-48(%rbp), %ecx
	callq	*%rax
.LBB176_37:                             # %if.end.118
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end176:
	.size	x_draw_vertical_border, .Lfunc_end176-x_draw_vertical_border
	.cfi_endproc

	.align	16, 0x90
	.type	window_box_edges,@function
window_box_edges:                       # @window_box_edges
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp549:
	.cfi_def_cfa_offset 16
.Ltmp550:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp551:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %r8
	movq	-40(%rbp), %r9
	movl	%eax, %esi
	callq	window_box
	movq	-16(%rbp), %rcx
	movl	(%rcx), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rcx
	movl	(%rcx), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end177:
	.size	window_box_edges, .Lfunc_end177-window_box_edges
	.cfi_endproc

	.globl	x_draw_right_divider
	.align	16, 0x90
	.type	x_draw_right_divider,@function
x_draw_right_divider:                   # @x_draw_right_divider
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp552:
	.cfi_def_cfa_offset 16
.Ltmp553:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp554:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movw	468(%rdi), %ax
	andw	$1, %ax
	testw	$1, %ax
	jne	.LBB178_2
# BB#1:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB178_3
.LBB178_2:                              # %if.then
	jmp	.LBB178_19
.LBB178_3:                              # %if.else
	movq	-8(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -36(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -40(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-40(%rbp), %ecx         # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-36(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB178_5
# BB#4:                                 # %lor.lhs.false.13
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB178_6
.LBB178_5:                              # %cond.true
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB178_7
	jmp	.LBB178_18
.LBB178_6:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 336(%rax)
	je	.LBB178_18
.LBB178_7:                              # %if.then.20
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	240(%rax), %edx
	movq	-8(%rbp), %rax
	addl	256(%rax), %edx
	addl	%edx, %ecx
	movq	-8(%rbp), %rax
	movl	240(%rax), %edx
	movq	-8(%rbp), %rax
	addl	256(%rax), %edx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -44(%rbp)         # 4-byte Spill
	movl	%edx, -48(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-52(%rbp), %ecx         # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-48(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB178_9
# BB#8:                                 # %lor.lhs.false.42
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB178_10
.LBB178_9:                              # %cond.true.47
	xorl	%eax, %eax
	movl	%eax, -56(%rbp)         # 4-byte Spill
	jmp	.LBB178_11
.LBB178_10:                             # %cond.false.48
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	336(%rax), %ecx
	movl	%ecx, -56(%rbp)         # 4-byte Spill
.LBB178_11:                             # %cond.end
	movl	-56(%rbp), %eax         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movl	332(%rdx), %eax
	movq	-8(%rbp), %rdx
	movl	240(%rdx), %ecx
	movq	-8(%rbp), %rdx
	addl	256(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movl	332(%rdx), %eax
	movq	-8(%rbp), %rdx
	addl	244(%rdx), %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movl	332(%rdx), %eax
	movq	-8(%rbp), %rdx
	movl	244(%rdx), %ecx
	movq	-8(%rbp), %rdx
	addl	260(%rdx), %ecx
	addl	%ecx, %eax
	movq	-8(%rbp), %rdx
	movl	244(%rdx), %ecx
	movq	-8(%rbp), %rdx
	addl	260(%rdx), %ecx
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	40(%rdx), %rdi
	movl	%eax, -60(%rbp)         # 4-byte Spill
	movl	%ecx, -64(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -68(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-68(%rbp), %ecx         # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-64(%rbp), %esi         # 4-byte Reload
	cmpl	%ecx, %esi
	jne	.LBB178_13
# BB#12:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB178_15
.LBB178_13:                             # %lor.lhs.false.91
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB178_15
# BB#14:                                # %lor.lhs.false.96
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB178_16
.LBB178_15:                             # %cond.true.102
	xorl	%eax, %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB178_17
.LBB178_16:                             # %cond.false.103
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
.LBB178_17:                             # %cond.end.106
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	-60(%rbp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rdx
	movq	376(%rdx), %rdx
	movq	112(%rdx), %rdx
	movq	176(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	movl	%eax, %edx
	movq	-96(%rbp), %r9          # 8-byte Reload
	callq	*%r9
.LBB178_18:                             # %if.end
	jmp	.LBB178_19
.LBB178_19:                             # %if.end.109
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end178:
	.size	x_draw_right_divider, .Lfunc_end178-x_draw_right_divider
	.cfi_endproc

	.globl	expose_frame
	.align	16, 0x90
	.type	expose_frame,@function
expose_frame:                           # @expose_frame
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp555:
	.cfi_def_cfa_offset 16
.Ltmp556:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp557:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movb	$0, -33(%rbp)
	movq	-8(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$13, %rdi
	andq	$1, %rdi
	testq	$1, %rdi
	je	.LBB179_2
# BB#1:                                 # %if.then
	jmp	.LBB179_17
.LBB179_2:                              # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 160(%rax)
	je	.LBB179_4
# BB#3:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	160(%rax), %rax
	cmpl	$15, 32(%rax)
	jge	.LBB179_5
.LBB179_4:                              # %if.then.3
	jmp	.LBB179_17
.LBB179_5:                              # %if.end.4
	cmpl	$0, -20(%rbp)
	je	.LBB179_7
# BB#6:                                 # %lor.lhs.false.6
	cmpl	$0, -24(%rbp)
	jne	.LBB179_8
.LBB179_7:                              # %if.then.8
	movw	$0, -30(%rbp)
	movw	$0, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	288(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	292(%rax), %ecx
	movw	%cx, %dx
	movw	%dx, -26(%rbp)
	jmp	.LBB179_9
.LBB179_8:                              # %if.else
	movl	-12(%rbp), %eax
	movw	%ax, %cx
	movw	%cx, -32(%rbp)
	movl	-16(%rbp), %eax
	movw	%ax, %cx
	movw	%cx, -30(%rbp)
	movl	-20(%rbp), %eax
	movw	%ax, %cx
	movw	%cx, -28(%rbp)
	movl	-24(%rbp), %eax
	movw	%ax, %cx
	movw	%cx, -26(%rbp)
.LBB179_9:                              # %if.end.20
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	leaq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	expose_window_tree
	andb	$1, %al
	movb	%al, -33(%rbp)
	testb	$1, -33(%rbp)
	je	.LBB179_17
# BB#10:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB179_17
# BB#11:                                # %if.then.28
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB179_13
# BB#12:                                # %cond.true
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	424(%rax), %rax
	addq	$184, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB179_14
.LBB179_13:                             # %cond.false
	movq	-8(%rbp), %rax
	movq	384(%rax), %rax
	movq	(%rax), %rax
	addq	$104, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB179_14:                             # %cond.end
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	-48(%rbp), %rcx
	cmpq	48(%rcx), %rax
	jne	.LBB179_16
# BB#15:                                # %if.then.41
	movq	-48(%rbp), %rax
	movl	56(%rax), %ecx
	movl	%ecx, -52(%rbp)
	movq	-48(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -56(%rbp)
	movq	-48(%rbp), %rdi
	callq	clear_mouse_face
	movq	-8(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movb	%al, -65(%rbp)          # 1-byte Spill
	callq	note_mouse_highlight
.LBB179_16:                             # %if.end.43
	jmp	.LBB179_17
.LBB179_17:                             # %if.end.44
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end179:
	.size	expose_frame, .Lfunc_end179-expose_frame
	.cfi_endproc

	.align	16, 0x90
	.type	expose_window_tree,@function
expose_window_tree:                     # @expose_window_tree
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp558:
	.cfi_def_cfa_offset 16
.Ltmp559:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp560:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	$5, %rsi
	movq	%rsi, -24(%rbp)
	movb	$0, -25(%rbp)
.LBB180_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -8(%rbp)
	movb	%cl, -26(%rbp)          # 1-byte Spill
	je	.LBB180_3
# BB#2:                                 # %land.rhs
                                        #   in Loop: Header=BB180_1 Depth=1
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	%cl, -26(%rbp)          # 1-byte Spill
.LBB180_3:                              # %land.end
                                        #   in Loop: Header=BB180_1 Depth=1
	movb	-26(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB180_4
	jmp	.LBB180_11
.LBB180_4:                              # %while.body
                                        #   in Loop: Header=BB180_1 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB180_5
	jmp	.LBB180_6
.LBB180_5:                              # %cond.true
                                        #   in Loop: Header=BB180_1 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XWINDOW
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	expose_window_tree
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -32(%rbp)         # 4-byte Spill
	jmp	.LBB180_7
.LBB180_6:                              # %cond.false
                                        #   in Loop: Header=BB180_1 Depth=1
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	expose_window
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -32(%rbp)         # 4-byte Spill
.LBB180_7:                              # %cond.end
                                        #   in Loop: Header=BB180_1 Depth=1
	movl	-32(%rbp), %eax         # 4-byte Reload
	xorl	%edi, %edi
	movb	-25(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	orl	%eax, %edx
	cmpl	$0, %edx
	setne	%cl
	andb	$1, %cl
	movb	%cl, -25(%rbp)
	movq	-8(%rbp), %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB180_9
# BB#8:                                 # %cond.true.11
                                        #   in Loop: Header=BB180_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jmp	.LBB180_10
.LBB180_9:                              # %cond.false.12
                                        #   in Loop: Header=BB180_1 Depth=1
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	XWINDOW
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB180_10:                             # %cond.end.15
                                        #   in Loop: Header=BB180_1 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -8(%rbp)
	jmp	.LBB180_1
.LBB180_11:                             # %while.end
	movb	-25(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end180:
	.size	expose_window_tree, .Lfunc_end180-expose_window_tree
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI181_0:
	.quad	4634766966517661696     # double 72
.LCPI181_1:
	.quad	4598175219545276416     # double 0.25
	.text
	.globl	syms_of_xdisp
	.align	16, 0x90
	.type	syms_of_xdisp,@function
syms_of_xdisp:                          # @syms_of_xdisp
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp561:
	.cfi_def_cfa_offset 16
.Ltmp562:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp563:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$Vwith_echo_area_save_vector, %rdi
	movq	%rax, Vwith_echo_area_save_vector
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$Vmessage_stack, %rdi
	movq	%rax, Vmessage_stack
	callq	staticpro
# BB#1:                                 # %do.body
	movabsq	$syms_of_xdisp.b_fwd, %rdi
	movabsq	$.L.str.8, %rsi
	movabsq	$globals, %rax
	addq	$3395, %rax             # imm = 0xD43
	movq	%rax, %rdx
	callq	defvar_bool
# BB#2:                                 # %do.end
	movb	$0, globals+3395
	callq	Fmake_marker
	movabsq	$message_dolog_marker1, %rdi
	movq	%rax, message_dolog_marker1
	callq	staticpro
	callq	Fmake_marker
	movabsq	$message_dolog_marker2, %rdi
	movq	%rax, message_dolog_marker2
	callq	staticpro
	callq	Fmake_marker
	movabsq	$message_dolog_marker3, %rdi
	movq	%rax, message_dolog_marker3
	callq	staticpro
	movabsq	$Stool_bar_height, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Slookup_image_map, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sline_pixel_height, %rdi
	callq	defsubr
	movabsq	$Sformat_mode_line, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sinvisible_p, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scurrent_bidi_paragraph_direction, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Swindow_text_pixel_size, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Smove_point_visually, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sbidi_find_overridden_directionality, %rax
	movq	%rax, %rdi
	callq	defsubr
	movl	$372, %edi              # imm = 0x174
	callq	builtin_lisp_symbol
	movl	$1007, %edi             # imm = 0x3EF
	movq	%rax, -8(%rbp)          # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rdi          # 8-byte Reload
	movq	%rax, %rsi
	callq	list2
	movq	%rax, %rdi
	callq	list1
	movabsq	$list_of_error, %rdi
	movq	%rax, list_of_error
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$echo_buffer, %rdi
	movq	%rax, echo_buffer+8
	movq	%rax, echo_buffer
	callq	staticpro
	movabsq	$echo_buffer, %rax
	addq	$8, %rax
	movq	%rax, %rdi
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$echo_area_buffer, %rdi
	movq	%rax, echo_area_buffer+8
	movq	%rax, echo_area_buffer
	callq	staticpro
	movabsq	$echo_area_buffer, %rax
	addq	$8, %rax
	movq	%rax, %rdi
	callq	staticpro
	movabsq	$.L.str.9, %rdi
	callq	build_pure_c_string
	movabsq	$Vmessages_buffer_name, %rdi
	movq	%rax, Vmessages_buffer_name
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$mode_line_proptrans_alist, %rdi
	movq	%rax, mode_line_proptrans_alist
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$mode_line_string_list, %rdi
	movq	%rax, mode_line_string_list
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$mode_line_string_face, %rdi
	movq	%rax, mode_line_string_face
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$mode_line_string_face_prop, %rdi
	movq	%rax, mode_line_string_face_prop
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$Vmode_line_unwind_vector, %rdi
	movq	%rax, Vmode_line_unwind_vector
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$help_echo_string, %rdi
	movq	%rax, help_echo_string
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$help_echo_object, %rdi
	movq	%rax, help_echo_object
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$help_echo_window, %rdi
	movq	%rax, help_echo_window
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$previous_help_echo_string, %rdi
	movq	%rax, previous_help_echo_string
	callq	staticpro
	movabsq	$Sbidi_resolved_levels, %rax
	movq	$-1, help_echo_pos
	movq	%rax, %rdi
	callq	defsubr
# BB#3:                                 # %do.body.21
	movabsq	$syms_of_xdisp.b_fwd.10, %rdi
	movabsq	$.L.str.11, %rsi
	movabsq	$globals, %rax
	addq	$3447, %rax             # imm = 0xD77
	movq	%rax, %rdx
	callq	defvar_bool
# BB#4:                                 # %do.end.22
	movb	$0, globals+3447
# BB#5:                                 # %do.body.23
	movabsq	$syms_of_xdisp.o_fwd, %rdi
	movabsq	$.L.str.12, %rsi
	movabsq	$globals, %rax
	addq	$2168, %rax             # imm = 0x878
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#6:                                 # %do.end.24
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2168
# BB#7:                                 # %do.body.26
	movabsq	$syms_of_xdisp.o_fwd.13, %rdi
	movabsq	$.L.str.14, %rsi
	movabsq	$globals, %rax
	addq	$1648, %rax             # imm = 0x670
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#8:                                 # %do.end.27
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, globals+1648
# BB#9:                                 # %do.body.29
	movabsq	$syms_of_xdisp.o_fwd.15, %rdi
	movabsq	$.L.str.16, %rsi
	movabsq	$globals, %rax
	addq	$2600, %rax             # imm = 0xA28
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#10:                                # %do.end.30
	movl	$180, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2600
# BB#11:                                # %do.body.32
	movabsq	$syms_of_xdisp.o_fwd.17, %rdi
	movabsq	$.L.str.18, %rsi
	movabsq	$globals, %rax
	addq	$1120, %rax             # imm = 0x460
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#12:                                # %do.end.33
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1120
# BB#13:                                # %do.body.35
	movabsq	$syms_of_xdisp.o_fwd.19, %rdi
	movabsq	$.L.str.20, %rsi
	movabsq	$globals, %rax
	addq	$936, %rax              # imm = 0x3A8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#14:                                # %do.end.36
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+936
# BB#15:                                # %do.body.38
	movabsq	$syms_of_xdisp.o_fwd.21, %rdi
	movabsq	$.L.str.22, %rsi
	movabsq	$globals, %rax
	addq	$1704, %rax             # imm = 0x6A8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#16:                                # %do.end.39
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1704
# BB#17:                                # %do.body.41
	movabsq	$syms_of_xdisp.o_fwd.23, %rdi
	movabsq	$.L.str.24, %rsi
	movabsq	$globals, %rax
	addq	$1712, %rax             # imm = 0x6B0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#18:                                # %do.end.42
	movabsq	$.L.str.25, %rdi
	callq	build_pure_c_string
	movq	%rax, globals+1712
# BB#19:                                # %do.body.44
	movabsq	$syms_of_xdisp.o_fwd.26, %rdi
	movabsq	$.L.str.27, %rsi
	movabsq	$globals, %rax
	addq	$1720, %rax             # imm = 0x6B8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#20:                                # %do.end.45
	movabsq	$.L.str.22, %rdi
	callq	intern_c_string
	movq	%rax, %rdi
	callq	list1
	movq	%rax, globals+1720
# BB#21:                                # %do.body.48
	movabsq	$syms_of_xdisp.i_fwd, %rdi
	movabsq	$.L.str.28, %rsi
	movabsq	$globals, %rax
	addq	$3080, %rax             # imm = 0xC08
	movq	%rax, %rdx
	callq	defvar_int
# BB#22:                                # %do.end.49
	jmp	.LBB181_23
.LBB181_23:                             # %do.body.50
	movabsq	$syms_of_xdisp.i_fwd.29, %rdi
	movabsq	$.L.str.30, %rsi
	movabsq	$globals, %rax
	addq	$3256, %rax             # imm = 0xCB8
	movq	%rax, %rdx
	callq	defvar_int
# BB#24:                                # %do.end.51
	movq	$0, globals+3256
# BB#25:                                # %do.body.52
	movabsq	$syms_of_xdisp.i_fwd.31, %rdi
	movabsq	$.L.str.32, %rsi
	movabsq	$globals, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movq	%rax, %rdx
	callq	defvar_int
# BB#26:                                # %do.end.53
	movq	$0, globals+3264
# BB#27:                                # %do.body.54
	movabsq	$syms_of_xdisp.o_fwd.33, %rdi
	movabsq	$.L.str.34, %rsi
	movabsq	$globals, %rax
	addq	$568, %rax              # imm = 0x238
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#28:                                # %do.end.55
	movsd	.LCPI181_0, %xmm0       # xmm0 = mem[0],zero
	callq	make_float
	movq	%rax, globals+568
# BB#29:                                # %do.body.57
	movabsq	$syms_of_xdisp.o_fwd.35, %rdi
	movabsq	$.L.str.36, %rsi
	movabsq	$globals, %rax
	addq	$2472, %rax             # imm = 0x9A8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#30:                                # %do.end.58
	movq	$202, globals+2472
# BB#31:                                # %do.body.59
	movabsq	$syms_of_xdisp.o_fwd.37, %rdi
	movabsq	$.L.str.38, %rsi
	movabsq	$globals, %rax
	addq	$1272, %rax             # imm = 0x4F8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#32:                                # %do.end.60
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1272
# BB#33:                                # %do.body.62
	movabsq	$syms_of_xdisp.i_fwd.39, %rdi
	movabsq	$.L.str.40, %rsi
	movabsq	$globals, %rax
	addq	$3160, %rax             # imm = 0xC58
	movq	%rax, %rdx
	callq	defvar_int
# BB#34:                                # %do.end.63
	movq	$200, globals+3160
# BB#35:                                # %do.body.64
	movabsq	$syms_of_xdisp.b_fwd.41, %rdi
	movabsq	$.L.str.42, %rsi
	movabsq	$globals, %rax
	addq	$3384, %rax             # imm = 0xD38
	movq	%rax, %rdx
	callq	defvar_bool
# BB#36:                                # %do.end.65
	movb	$0, globals+3384
# BB#37:                                # %do.body.66
	movabsq	$syms_of_xdisp.b_fwd.43, %rdi
	movabsq	$.L.str.44, %rsi
	movabsq	$globals, %rax
	addq	$3415, %rax             # imm = 0xD57
	movq	%rax, %rdx
	callq	defvar_bool
# BB#38:                                # %do.end.67
	jmp	.LBB181_39
.LBB181_39:                             # %do.body.68
	movabsq	$syms_of_xdisp.o_fwd.45, %rdi
	movabsq	$.L.str.46, %rsi
	movabsq	$globals, %rax
	addq	$888, %rax              # imm = 0x378
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#40:                                # %do.end.69
	jmp	.LBB181_41
.LBB181_41:                             # %do.body.70
	movabsq	$syms_of_xdisp.o_fwd.47, %rdi
	movabsq	$.L.str.48, %rsi
	movabsq	$globals, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#42:                                # %do.end.71
	movabsq	$.L.str.44, %rdi
	callq	intern_c_string
	movabsq	$.L.str.49, %rdi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	build_pure_c_string
	movabsq	$.L.str.50, %rdi
	movq	empty_unibyte_string, %rdx
	movq	%rax, -24(%rbp)         # 8-byte Spill
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	callq	intern_c_string
	movabsq	$.L.str.51, %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	build_pure_c_string
	movabsq	$.L.str.52, %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	intern_c_string
	movl	$1, %edi
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	-32(%rbp), %rdx         # 8-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	movq	-48(%rbp), %r8          # 8-byte Reload
	movq	%rax, %r9
	movb	$0, %al
	callq	listn
	movl	$1, %edi
	movl	$3, %r10d
	movl	%r10d, %esi
	movq	-16(%rbp), %rdx         # 8-byte Reload
	movq	-24(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	movb	$0, %al
	callq	listn
	movq	%rax, globals+888
	movq	%rax, globals+1024
# BB#43:                                # %do.body.79
	movabsq	$syms_of_xdisp.o_fwd.53, %rdi
	movabsq	$.L.str.54, %rsi
	movabsq	$globals, %rax
	addq	$1440, %rax             # imm = 0x5A0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#44:                                # %do.end.80
	movq	$4002, globals+1440     # imm = 0xFA2
# BB#45:                                # %do.body.81
	movabsq	$syms_of_xdisp.o_fwd.55, %rdi
	movabsq	$.L.str.56, %rsi
	movabsq	$globals, %rax
	addq	$2664, %rax             # imm = 0xA68
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#46:                                # %do.end.82
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2664
# BB#47:                                # %do.body.84
	movabsq	$syms_of_xdisp.o_fwd.57, %rdi
	movabsq	$.L.str.58, %rsi
	movabsq	$globals, %rax
	addq	$2656, %rax             # imm = 0xA60
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#48:                                # %do.end.85
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2656
# BB#49:                                # %do.body.87
	movabsq	$syms_of_xdisp.o_fwd.59, %rdi
	movabsq	$.L.str.60, %rsi
	movabsq	$globals, %rax
	addq	$2680, %rax             # imm = 0xA78
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#50:                                # %do.end.88
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2680
# BB#51:                                # %do.body.90
	movabsq	$syms_of_xdisp.o_fwd.61, %rdi
	movabsq	$.L.str.62, %rsi
	movabsq	$globals, %rax
	addq	$2024, %rax             # imm = 0x7E8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#52:                                # %do.end.91
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2024
# BB#53:                                # %do.body.93
	movabsq	$syms_of_xdisp.o_fwd.63, %rdi
	movabsq	$.L.str.64, %rsi
	movabsq	$globals, %rax
	addq	$1608, %rax             # imm = 0x648
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#54:                                # %do.end.94
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1608
# BB#55:                                # %do.body.96
	movabsq	$syms_of_xdisp.o_fwd.65, %rdi
	movabsq	$.L.str.66, %rsi
	movabsq	$globals, %rax
	addq	$64, %rax
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#56:                                # %do.end.97
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, globals+64
# BB#57:                                # %do.body.99
	movabsq	$syms_of_xdisp.b_fwd.67, %rdi
	movabsq	$.L.str.68, %rsi
	movabsq	$globals, %rax
	addq	$3362, %rax             # imm = 0xD22
	movq	%rax, %rdx
	callq	defvar_bool
# BB#58:                                # %do.end.100
	movb	$1, globals+3362
# BB#59:                                # %do.body.101
	movabsq	$syms_of_xdisp.b_fwd.69, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$globals, %rax
	addq	$3408, %rax             # imm = 0xD50
	movq	%rax, %rdx
	callq	defvar_bool
# BB#60:                                # %do.end.102
	movb	$1, globals+3408
# BB#61:                                # %do.body.103
	movabsq	$syms_of_xdisp.o_fwd.71, %rdi
	movabsq	$.L.str.72, %rsi
	movabsq	$globals, %rax
	addq	$2392, %rax             # imm = 0x958
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#62:                                # %do.end.104
	movl	$563, %edi              # imm = 0x233
	callq	builtin_lisp_symbol
	movq	%rax, globals+2392
# BB#63:                                # %do.body.106
	movabsq	$syms_of_xdisp.o_fwd.73, %rdi
	movabsq	$.L.str.74, %rsi
	movabsq	$globals, %rax
	addq	$2400, %rax             # imm = 0x960
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#64:                                # %do.end.107
	movq	$18, globals+2400
# BB#65:                                # %do.body.108
	movabsq	$syms_of_xdisp.i_fwd.75, %rdi
	movabsq	$.L.str.76, %rsi
	movabsq	$globals, %rax
	addq	$3304, %rax             # imm = 0xCE8
	movq	%rax, %rdx
	callq	defvar_int
# BB#66:                                # %do.end.109
	movq	$1, globals+3304
# BB#67:                                # %do.body.110
	movabsq	$syms_of_xdisp.o_fwd.77, %rdi
	movabsq	$.L.str.78, %rsi
	movabsq	$globals, %rax
	addq	$2424, %rax             # imm = 0x978
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#68:                                # %do.end.111
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2424
# BB#69:                                # %do.body.113
	movabsq	$syms_of_xdisp.i_fwd.79, %rdi
	movabsq	$.L.str.80, %rsi
	movabsq	$globals, %rax
	addq	$3312, %rax             # imm = 0xCF0
	movq	%rax, %rdx
	callq	defvar_int
# BB#70:                                # %do.end.114
	movq	$14, globals+3312
# BB#71:                                # %do.body.115
	movabsq	$syms_of_xdisp.o_fwd.81, %rdi
	movabsq	$.L.str.82, %rsi
	movabsq	$globals, %rax
	addq	$864, %rax              # imm = 0x360
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#72:                                # %do.end.116
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$447, %edi              # imm = 0x1BF
	movq	%rax, globals+864
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fmake_variable_buffer_local
	movq	%rax, -56(%rbp)         # 8-byte Spill
# BB#73:                                # %do.body.120
	movabsq	$syms_of_xdisp.b_fwd.83, %rdi
	movabsq	$.L.str.84, %rsi
	movabsq	$globals, %rax
	addq	$3432, %rax             # imm = 0xD68
	movq	%rax, %rdx
	callq	defvar_bool
# BB#74:                                # %do.end.121
	movb	$0, globals+3432
# BB#75:                                # %do.body.122
	movabsq	$syms_of_xdisp.o_fwd.85, %rdi
	movabsq	$.L.str.86, %rsi
	movabsq	$globals, %rax
	addq	$1384, %rax             # imm = 0x568
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#76:                                # %do.end.123
	movsd	.LCPI181_1, %xmm0       # xmm0 = mem[0],zero
	callq	make_float
	movq	%rax, globals+1384
# BB#77:                                # %do.body.125
	movabsq	$syms_of_xdisp.o_fwd.87, %rdi
	movabsq	$.L.str.88, %rsi
	movabsq	$globals, %rax
	addq	$2040, %rax             # imm = 0x7F8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#78:                                # %do.end.126
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2040
# BB#79:                                # %do.body.128
	movabsq	$syms_of_xdisp.o_fwd.89, %rdi
	movabsq	$.L.str.90, %rsi
	movabsq	$globals, %rax
	addq	$120, %rax
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#80:                                # %do.end.129
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+120
# BB#81:                                # %do.body.131
	movabsq	$syms_of_xdisp.b_fwd.91, %rdi
	movabsq	$.L.str.92, %rsi
	movabsq	$globals, %rax
	addq	$3364, %rax             # imm = 0xD24
	movq	%rax, %rdx
	callq	defvar_bool
# BB#82:                                # %do.end.132
	movb	$1, globals+3364
# BB#83:                                # %do.body.133
	movabsq	$syms_of_xdisp.i_fwd.93, %rdi
	movabsq	$.L.str.94, %rsi
	movabsq	$globals, %rax
	addq	$3136, %rax             # imm = 0xC40
	movq	%rax, %rdx
	callq	defvar_int
# BB#84:                                # %do.end.134
	movq	$5, globals+3136
# BB#85:                                # %do.body.135
	movabsq	$syms_of_xdisp.o_fwd.95, %rdi
	movabsq	$.L.str.96, %rsi
	movabsq	$globals, %rax
	addq	$1016, %rax             # imm = 0x3F8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#86:                                # %do.end.136
	movq	$2, globals+1016
# BB#87:                                # %do.body.137
	movabsq	$syms_of_xdisp.b_fwd.97, %rdi
	movabsq	$.L.str.98, %rsi
	movabsq	$globals, %rax
	addq	$3410, %rax             # imm = 0xD52
	movq	%rax, %rdx
	callq	defvar_bool
# BB#88:                                # %do.end.138
	movb	$0, globals+3410
# BB#89:                                # %do.body.139
	movabsq	$syms_of_xdisp.o_fwd.99, %rdi
	movabsq	$.L.str.100, %rsi
	movabsq	$globals, %rax
	addq	$1424, %rax             # imm = 0x590
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#90:                                # %do.end.140
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1424
# BB#91:                                # %do.body.142
	movabsq	$syms_of_xdisp.o_fwd.101, %rdi
	movabsq	$.L.str.102, %rsi
	movabsq	$globals, %rax
	addq	$1432, %rax             # imm = 0x598
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#92:                                # %do.end.143
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1432
# BB#93:                                # %do.body.145
	movabsq	$syms_of_xdisp.b_fwd.103, %rdi
	movabsq	$.L.str.104, %rsi
	movabsq	$globals, %rax
	addq	$3394, %rax             # imm = 0xD42
	movq	%rax, %rdx
	callq	defvar_bool
# BB#94:                                # %do.end.146
	movb	$0, globals+3394
# BB#95:                                # %do.body.147
	movabsq	$syms_of_xdisp.o_fwd.105, %rdi
	movabsq	$.L.str.106, %rsi
	movabsq	$globals, %rax
	addq	$2704, %rax             # imm = 0xA90
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#96:                                # %do.end.148
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$1039, %edi             # imm = 0x40F
	movq	%rax, globals+2704
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fmake_variable_buffer_local
	movq	%rax, -64(%rbp)         # 8-byte Spill
# BB#97:                                # %do.body.152
	movabsq	$syms_of_xdisp.o_fwd.107, %rdi
	movabsq	$.L.str.108, %rsi
	movabsq	$globals, %rax
	addq	$1280, %rax             # imm = 0x500
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#98:                                # %do.end.153
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$622, %edi              # imm = 0x26E
	movq	%rax, globals+1280
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fmake_variable_buffer_local
	movq	%rax, -72(%rbp)         # 8-byte Spill
# BB#99:                                # %do.body.157
	movabsq	$syms_of_xdisp.b_fwd.109, %rdi
	movabsq	$.L.str.110, %rsi
	movabsq	$globals, %rax
	addq	$3390, %rax             # imm = 0xD3E
	movq	%rax, %rdx
	callq	defvar_bool
# BB#100:                               # %do.end.158
	movb	$0, globals+3390
# BB#101:                               # %do.body.159
	movabsq	$syms_of_xdisp.b_fwd.111, %rdi
	movabsq	$.L.str.112, %rsi
	movabsq	$globals, %rax
	addq	$3391, %rax             # imm = 0xD3F
	movq	%rax, %rdx
	callq	defvar_bool
# BB#102:                               # %do.end.160
	movb	$0, globals+3391
# BB#103:                               # %do.body.161
	movabsq	$syms_of_xdisp.b_fwd.113, %rdi
	movabsq	$.L.str.114, %rsi
	movabsq	$globals, %rax
	addq	$3388, %rax             # imm = 0xD3C
	movq	%rax, %rdx
	callq	defvar_bool
# BB#104:                               # %do.end.162
	movb	$0, globals+3388
# BB#105:                               # %do.body.163
	movabsq	$syms_of_xdisp.i_fwd.115, %rdi
	movabsq	$.L.str.116, %rsi
	movabsq	$globals, %rax
	addq	$3216, %rax             # imm = 0xC90
	movq	%rax, %rdx
	callq	defvar_int
# BB#106:                               # %do.end.164
	movq	$2, globals+3216
# BB#107:                               # %do.body.165
	movabsq	$syms_of_xdisp.i_fwd.117, %rdi
	movabsq	$.L.str.118, %rsi
	movabsq	$globals, %rax
	addq	$3320, %rax             # imm = 0xCF8
	movq	%rax, %rdx
	callq	defvar_int
# BB#108:                               # %do.end.166
	movq	$1, globals+3320
# BB#109:                               # %do.body.167
	movabsq	$syms_of_xdisp.b_fwd.119, %rdi
	movabsq	$.L.str.120, %rsi
	movabsq	$globals, %rax
	addq	$3378, %rax             # imm = 0xD32
	movq	%rax, %rdx
	callq	defvar_bool
# BB#110:                               # %do.end.168
	movb	$1, globals+3378
# BB#111:                               # %do.body.169
	movabsq	$syms_of_xdisp.o_fwd.121, %rdi
	movabsq	$.L.str.122, %rsi
	movabsq	$globals, %rax
	addq	$1008, %rax             # imm = 0x3F0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#112:                               # %do.end.170
	movq	$6, globals+1008
	movq	$0, hourglass_atimer
	movb	$0, hourglass_shown_p
# BB#113:                               # %do.body.171
	movabsq	$syms_of_xdisp.o_fwd.123, %rdi
	movabsq	$.L.str.124, %rsi
	movabsq	$globals, %rax
	addq	$1784, %rax             # imm = 0x6F8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#114:                               # %do.end.172
	movabsq	$.L.str.125, %rdi
	callq	intern
	movl	$491, %edi              # imm = 0x1EB
	movq	%rax, globals+1784
	callq	builtin_lisp_symbol
	movl	$258, %edi              # imm = 0x102
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$6, %edi
	movl	%edi, %edx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movq	%rax, -88(%rbp)         # 8-byte Spill
# BB#115:                               # %do.body.177
	movabsq	$syms_of_xdisp.o_fwd.126, %rdi
	movabsq	$.L.str.127, %rsi
	movabsq	$globals, %rax
	addq	$952, %rax              # imm = 0x3B8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#116:                               # %do.end.178
	movl	$491, %edi              # imm = 0x1EB
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fmake_char_table
	movl	$363, %edi              # imm = 0x16B
	movq	%rax, globals+952
	movq	globals+952, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	%edi, %esi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fset_char_table_extra_slot
	movq	%rax, -112(%rbp)        # 8-byte Spill
# BB#117:                               # %do.body.184
	movabsq	$syms_of_xdisp.o_fwd.128, %rdi
	movabsq	$.L.str.129, %rsi
	movabsq	$globals, %rax
	addq	$448, %rax              # imm = 0x1C0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#118:                               # %do.end.185
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+448
# BB#119:                               # %do.body.187
	movabsq	$syms_of_xdisp.o_fwd.130, %rdi
	movabsq	$.L.str.131, %rsi
	movabsq	$globals, %rax
	addq	$2000, %rax             # imm = 0x7D0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#120:                               # %do.end.188
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	callq	Fmake_hash_table
	movq	%rax, globals+2000
# BB#121:                               # %do.body.190
	movabsq	$syms_of_xdisp.o_fwd.132, %rdi
	movabsq	$.L.str.133, %rsi
	movabsq	$globals, %rax
	addq	$2008, %rax             # imm = 0x7D8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#122:                               # %do.end.191
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	callq	Fmake_hash_table
	movq	%rax, globals+2008
# BB#123:                               # %do.body.193
	movabsq	$syms_of_xdisp.o_fwd.134, %rdi
	movabsq	$.L.str.135, %rsi
	movabsq	$globals, %rax
	addq	$2016, %rax             # imm = 0x7E0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#124:                               # %do.end.194
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2016
# BB#125:                               # %do.body.196
	movabsq	$syms_of_xdisp.b_fwd.136, %rdi
	movabsq	$.L.str.137, %rsi
	movabsq	$globals, %rax
	addq	$3426, %rax             # imm = 0xD62
	movq	%rax, %rdx
	callq	defvar_bool
# BB#126:                               # %do.end.197
	movb	$1, globals+3426
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end181:
	.size	syms_of_xdisp, .Lfunc_end181-syms_of_xdisp
	.cfi_endproc

	.globl	init_xdisp
	.align	16, 0x90
	.type	init_xdisp,@function
init_xdisp:                             # @init_xdisp
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp564:
	.cfi_def_cfa_offset 16
.Ltmp565:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp566:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	$0, this_line_start_pos
	testb	$1, noninteractive
	jne	.LBB182_6
# BB#1:                                 # %if.then
	movq	minibuf_window, %rdi
	callq	XWINDOW
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movabsq	$scratch_glyphs, %rdi
	movq	%rdi, %rcx
	addq	$4800, %rcx             # imm = 0x12C0
	movq	%rax, -40(%rbp)
	movq	minibuf_window, %rax
	movq	%rax, echo_area_window
	movq	-24(%rbp), %rax
	movl	356(%rax), %edx
	movq	-24(%rbp), %rax
	addl	216(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 252(%rax)
	movq	-40(%rbp), %rax
	movl	252(%rax), %edx
	movq	-24(%rbp), %rax
	imull	368(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 244(%rax)
	movq	-24(%rbp), %rax
	movl	272(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 264(%rax)
	movq	-40(%rbp), %rax
	movl	264(%rax), %edx
	movq	-24(%rbp), %rax
	imull	364(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 256(%rax)
	movq	-24(%rbp), %rax
	movl	284(%rax), %edx
	subl	$1, %edx
	movq	-24(%rbp), %rax
	movl	356(%rax), %esi
	movq	-24(%rbp), %rax
	addl	216(%rax), %esi
	subl	%esi, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 268(%rax)
	movq	-40(%rbp), %rax
	movl	268(%rax), %edx
	movq	-24(%rbp), %rax
	imull	368(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 260(%rax)
	movq	-24(%rbp), %rax
	movl	284(%rax), %edx
	subl	$1, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 252(%rax)
	movq	-8(%rbp), %rax
	movl	252(%rax), %edx
	movq	-24(%rbp), %rax
	imull	368(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 244(%rax)
	movq	-24(%rbp), %rax
	movl	272(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 264(%rax)
	movq	-8(%rbp), %rax
	movl	264(%rax), %edx
	movq	-24(%rbp), %rax
	imull	364(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 256(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 268(%rax)
	movq	-8(%rbp), %rax
	movl	268(%rax), %edx
	movq	-24(%rbp), %rax
	imull	368(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 260(%rax)
	movq	%rdi, scratch_glyph_row+8
	movq	%rcx, scratch_glyph_row+16
	movl	$0, -44(%rbp)
.LBB182_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -44(%rbp)
	jge	.LBB182_5
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB182_2 Depth=1
	movslq	-44(%rbp), %rax
	movq	$186, default_invis_vector(,%rax,8)
# BB#4:                                 # %for.inc
                                        #   in Loop: Header=BB182_2 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB182_2
.LBB182_5:                              # %for.end
	jmp	.LBB182_6
.LBB182_6:                              # %if.end
	movl	$100, -48(%rbp)
	movslq	-48(%rbp), %rdi
	callq	xmalloc
	movq	%rax, mode_line_noprop_buf
	movq	mode_line_noprop_buf, %rax
	movslq	-48(%rbp), %rdi
	addq	%rdi, %rax
	movq	%rax, mode_line_noprop_buf_end
	movq	mode_line_noprop_buf, %rax
	movq	%rax, mode_line_noprop_ptr
	movl	$0, mode_line_target
	movb	$0, help_echo_showing_p
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end182:
	.size	init_xdisp, .Lfunc_end182-init_xdisp
	.cfi_endproc

	.globl	start_hourglass
	.align	16, 0x90
	.type	start_hourglass,@function
start_hourglass:                        # @start_hourglass
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp567:
	.cfi_def_cfa_offset 16
.Ltmp568:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp569:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	callq	cancel_hourglass
	movq	globals+1008, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB183_6
# BB#1:                                 # %land.lhs.true
	movq	globals+1008, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jle	.LBB183_6
# BB#2:                                 # %if.then
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	globals+1008, %rcx
	sarq	$2, %rcx
	cmpq	%rax, %rcx
	jge	.LBB183_4
# BB#3:                                 # %cond.true
	movq	globals+1008, %rax
	sarq	$2, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB183_5
.LBB183_4:                              # %cond.false
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB183_5
.LBB183_5:                              # %cond.end
	movq	-72(%rbp), %rax         # 8-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	make_timespec
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB183_11
.LBB183_6:                              # %if.else
	movq	globals+1008, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$7, %ecx
	jne	.LBB183_9
# BB#7:                                 # %land.lhs.true.13
	movq	globals+1008, %rdi
	callq	XFLOAT_DATA
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB183_9
# BB#8:                                 # %if.then.17
	movq	globals+1008, %rdi
	callq	XFLOAT_DATA
	callq	dtotimespec
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB183_10
.LBB183_9:                              # %if.else.21
	movl	$1, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movl	%eax, %esi
	callq	make_timespec
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB183_10:                             # %if.end
	jmp	.LBB183_11
.LBB183_11:                             # %if.end.24
	movl	$1, %edi
	movabsq	$show_hourglass, %rcx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rdx
	callq	start_atimer
	movq	%rax, hourglass_atimer
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end183:
	.size	start_hourglass, .Lfunc_end183-start_hourglass
	.cfi_endproc

	.globl	cancel_hourglass
	.align	16, 0x90
	.type	cancel_hourglass,@function
cancel_hourglass:                       # @cancel_hourglass
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp570:
	.cfi_def_cfa_offset 16
.Ltmp571:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp572:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	cmpq	$0, hourglass_atimer
	je	.LBB184_2
# BB#1:                                 # %if.then
	movq	hourglass_atimer, %rdi
	callq	cancel_atimer
	movq	$0, hourglass_atimer
.LBB184_2:                              # %if.end
	testb	$1, hourglass_shown_p
	je	.LBB184_14
# BB#3:                                 # %if.then.2
	callq	block_input
	movq	Vframe_list, %rax
	movq	%rax, -8(%rbp)
.LBB184_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -25(%rbp)          # 1-byte Spill
	jne	.LBB184_6
# BB#5:                                 # %land.rhs
                                        #   in Loop: Header=BB184_4 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -16(%rbp)
	movb	%al, -25(%rbp)          # 1-byte Spill
.LBB184_6:                              # %land.end
                                        #   in Loop: Header=BB184_4 Depth=1
	movb	-25(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB184_7
	jmp	.LBB184_13
.LBB184_7:                              # %for.body
                                        #   in Loop: Header=BB184_4 Depth=1
	movq	-16(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, 376(%rax)
	je	.LBB184_11
# BB#8:                                 # %land.lhs.true
                                        #   in Loop: Header=BB184_4 Depth=1
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB184_11
# BB#9:                                 # %land.lhs.true.9
                                        #   in Loop: Header=BB184_4 Depth=1
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	cmpq	$0, 200(%rax)
	je	.LBB184_11
# BB#10:                                # %if.then.13
                                        #   in Loop: Header=BB184_4 Depth=1
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	200(%rax), %rax
	movq	-24(%rbp), %rdi
	callq	*%rax
.LBB184_11:                             # %if.end.18
                                        #   in Loop: Header=BB184_4 Depth=1
	jmp	.LBB184_12
.LBB184_12:                             # %for.inc
                                        #   in Loop: Header=BB184_4 Depth=1
	movq	-8(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB184_4
.LBB184_13:                             # %for.end
	movb	$0, hourglass_shown_p
	callq	unblock_input
.LBB184_14:                             # %if.end.20
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end184:
	.size	cancel_hourglass, .Lfunc_end184-cancel_hourglass
	.cfi_endproc

	.align	16, 0x90
	.type	show_hourglass,@function
show_hourglass:                         # @show_hourglass
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp573:
	.cfi_def_cfa_offset 16
.Ltmp574:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp575:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	$0, hourglass_atimer
	testb	$1, hourglass_shown_p
	jne	.LBB185_12
# BB#1:                                 # %if.then
	callq	block_input
	movq	Vframe_list, %rax
	movq	%rax, -16(%rbp)
.LBB185_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -33(%rbp)          # 1-byte Spill
	jne	.LBB185_4
# BB#3:                                 # %land.rhs
                                        #   in Loop: Header=BB185_2 Depth=1
	movb	$1, %al
	movq	-16(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -24(%rbp)
	movb	%al, -33(%rbp)          # 1-byte Spill
.LBB185_4:                              # %land.end
                                        #   in Loop: Header=BB185_2 Depth=1
	movb	-33(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB185_5
	jmp	.LBB185_11
.LBB185_5:                              # %for.body
                                        #   in Loop: Header=BB185_2 Depth=1
	movq	-24(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	cmpq	$0, 376(%rax)
	je	.LBB185_9
# BB#6:                                 # %land.lhs.true
                                        #   in Loop: Header=BB185_2 Depth=1
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB185_9
# BB#7:                                 # %land.lhs.true.7
                                        #   in Loop: Header=BB185_2 Depth=1
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB185_9
# BB#8:                                 # %if.then.11
                                        #   in Loop: Header=BB185_2 Depth=1
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	192(%rax), %rax
	movq	-32(%rbp), %rdi
	callq	*%rax
.LBB185_9:                              # %if.end
                                        #   in Loop: Header=BB185_2 Depth=1
	jmp	.LBB185_10
.LBB185_10:                             # %for.inc
                                        #   in Loop: Header=BB185_2 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB185_2
.LBB185_11:                             # %for.end
	movb	$1, hourglass_shown_p
	callq	unblock_input
.LBB185_12:                             # %if.end.17
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end185:
	.size	show_hourglass, .Lfunc_end185-show_hourglass
	.cfi_endproc

	.align	16, 0x90
	.type	safe_eval_handler,@function
safe_eval_handler:                      # @safe_eval_handler
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp576:
	.cfi_def_cfa_offset 16
.Ltmp577:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp578:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	Flist
	movabsq	$.L.str.138, %rdi
	movq	-8(%rbp), %rdx
	movq	%rax, %rsi
	movb	$0, %al
	callq	add_to_log
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end186:
	.size	safe_eval_handler, .Lfunc_end186-safe_eval_handler
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI187_0:
	.quad	-9223372036854775808    # 0x8000000000000000
	.quad	-9223372036854775808    # 0x8000000000000000
	.text
	.align	16, 0x90
	.type	handle_single_display_spec,@function
handle_single_display_spec:             # @handle_single_display_spec
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp579:
	.cfi_def_cfa_offset 16
.Ltmp580:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp581:
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movb	24(%rbp), %al
	movl	16(%rbp), %r10d
	movl	$901, %r11d             # imm = 0x385
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movl	%r10d, -60(%rbp)
	andb	$1, %al
	movb	%al, -61(%rbp)
	movq	-48(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, -104(%rbp)
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	%r11d, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edi
	cmpl	$3, %edi
	jne	.LBB187_5
# BB#1:                                 # %land.lhs.true
	movl	$1014, %edi             # imm = 0x3F6
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_5
# BB#2:                                 # %if.then
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB187_4
# BB#3:                                 # %if.then.10
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_4:                              # %if.end
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB187_5:                              # %if.end.16
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB187_10
# BB#6:                                 # %land.lhs.true.20
	movl	$901, %edi              # imm = 0x385
	movq	-72(%rbp), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB187_10
# BB#7:                                 # %if.then.24
	callq	SPECPDL_INDEX
	xorl	%edi, %edi
	movq	%rax, -112(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_9
# BB#8:                                 # %if.then.29
	movl	$5, %esi
	movq	current_buffer, %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -32(%rbp)
.LBB187_9:                              # %if.end.31
	movl	$712, %edi              # imm = 0x2C8
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	specbind
	movl	$761, %edi              # imm = 0x2F9
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rsi
	movq	(%rsi), %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movq	%rax, %rdi
	callq	specbind
	movl	$226, %edi
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movq	%rax, %rdi
	callq	specbind
	movq	-72(%rbp), %rdi
	callq	safe_eval
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB187_10:                             # %if.end.40
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_12
# BB#11:                                # %if.then.44
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_12:                             # %if.end.45
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_53
# BB#13:                                # %land.lhs.true.50
	movl	$515, %edi              # imm = 0x203
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-296(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_53
# BB#14:                                # %land.lhs.true.56
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_53
# BB#15:                                # %if.then.64
	cmpq	$0, -16(%rbp)
	je	.LBB187_52
# BB#16:                                # %if.then.65
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB187_18
# BB#17:                                # %if.then.68
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_18:                             # %if.end.69
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2280(%rcx)
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB187_51
# BB#19:                                # %if.then.79
	movb	$1, %al
	testb	$1, %al
	jne	.LBB187_20
	jmp	.LBB187_21
.LBB187_20:                             # %cond.true
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB187_22
	jmp	.LBB187_23
.LBB187_21:                             # %cond.false
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB187_23
.LBB187_22:                             # %cond.true.95
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	jmp	.LBB187_24
.LBB187_23:                             # %cond.false.99
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	jmp	.LBB187_24
.LBB187_24:                             # %cond.end
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)
	movl	$-1, -124(%rbp)
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_32
# BB#25:                                # %land.lhs.true.105
	movl	$752, %edi              # imm = 0x2F0
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-320(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB187_27
# BB#26:                                # %lor.lhs.false
	movl	$668, %edi              # imm = 0x29C
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-328(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_32
.LBB187_27:                             # %land.lhs.true.118
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_32
# BB#28:                                # %land.lhs.true.127
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	movq	2280(%rcx), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rsi
	callq	RANGED_INTEGERP
	testb	$1, %al
	jne	.LBB187_29
	jmp	.LBB187_32
.LBB187_29:                             # %if.then.136
	movl	$752, %edi              # imm = 0x2F0
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -128(%rbp)
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-336(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB187_31
# BB#30:                                # %if.then.150
	xorl	%eax, %eax
	subl	-128(%rbp), %eax
	movl	%eax, -128(%rbp)
.LBB187_31:                             # %if.end.152
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	2108(%rax), %esi
	movl	-128(%rbp), %edx
	callq	smaller_face
	movq	-16(%rbp), %rdi
	movl	%eax, 2108(%rdi)
	jmp	.LBB187_48
.LBB187_32:                             # %if.else
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rdi
	callq	FUNCTIONP
	testb	$1, %al
	jne	.LBB187_33
	jmp	.LBB187_36
.LBB187_33:                             # %if.then.159
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rdi
	movq	-120(%rbp), %rax
	movq	32(%rax), %rsi
	callq	safe_call1
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB187_34
	jmp	.LBB187_35
.LBB187_34:                             # %if.then.164
	movq	-136(%rbp), %rdi
	callq	XFLOATINT
	cvttsd2si	%xmm0, %eax
	movl	%eax, -124(%rbp)
.LBB187_35:                             # %if.end.167
	jmp	.LBB187_47
.LBB187_36:                             # %if.else.168
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB187_37
	jmp	.LBB187_43
.LBB187_37:                             # %if.then.171
	movb	$1, %al
	testb	$1, %al
	jne	.LBB187_38
	jmp	.LBB187_39
.LBB187_38:                             # %cond.true.173
	xorl	%esi, %esi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	addl	$0, %eax
	movq	-16(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	160(%rdi), %rdi
	movl	32(%rdi), %esi
	addl	$0, %esi
	cmpl	%esi, %eax
	jb	.LBB187_40
	jmp	.LBB187_41
.LBB187_39:                             # %cond.false.183
	xorl	%esi, %esi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	movslq	%eax, %rdi
	addq	$0, %rdi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rdi
	jae	.LBB187_41
.LBB187_40:                             # %cond.true.195
	xorl	%esi, %esi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	movslq	%eax, %rdi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	jmp	.LBB187_42
.LBB187_41:                             # %cond.false.203
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	jmp	.LBB187_42
.LBB187_42:                             # %cond.end.204
	movq	-344(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rdi
	callq	XFLOATINT
	movq	-144(%rbp), %rax
	movq	32(%rax), %rax
	sarq	$2, %rax
	cvtsi2sdq	%rax, %xmm1
	mulsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %ecx
	movl	%ecx, -124(%rbp)
	jmp	.LBB187_46
.LBB187_43:                             # %if.else.213
	callq	SPECPDL_INDEX
	movl	$515, %edi              # imm = 0x203
	movq	%rax, -152(%rbp)
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx
	movq	32(%rcx), %rsi
	movq	%rax, %rdi
	callq	specbind
	movq	-16(%rbp), %rax
	movq	2280(%rax), %rdi
	callq	safe_eval
	xorl	%edi, %edi
	movq	%rax, -88(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-352(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-88(%rbp), %rdi
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB187_44
	jmp	.LBB187_45
.LBB187_44:                             # %if.then.224
	movq	-88(%rbp), %rdi
	callq	XFLOATINT
	cvttsd2si	%xmm0, %eax
	movl	%eax, -124(%rbp)
.LBB187_45:                             # %if.end.227
	jmp	.LBB187_46
.LBB187_46:                             # %if.end.228
	jmp	.LBB187_47
.LBB187_47:                             # %if.end.229
	jmp	.LBB187_48
.LBB187_48:                             # %if.end.230
	cmpl	$0, -124(%rbp)
	jle	.LBB187_50
# BB#49:                                # %if.then.233
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-16(%rbp), %rax
	movl	2108(%rax), %esi
	movl	-124(%rbp), %edx
	callq	face_with_height
	movq	-16(%rbp), %rdi
	movl	%eax, 2108(%rdi)
.LBB187_50:                             # %if.end.238
	jmp	.LBB187_51
.LBB187_51:                             # %if.end.239
	jmp	.LBB187_52
.LBB187_52:                             # %if.end.240
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_53:                             # %if.end.241
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_64
# BB#54:                                # %land.lhs.true.246
	movl	$869, %edi              # imm = 0x365
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-368(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_64
# BB#55:                                # %land.lhs.true.252
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_64
# BB#56:                                # %if.then.260
	cmpq	$0, -16(%rbp)
	je	.LBB187_63
# BB#57:                                # %if.then.262
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB187_59
# BB#58:                                # %if.then.271
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_59:                             # %if.end.272
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB187_60
	jmp	.LBB187_62
.LBB187_60:                             # %land.lhs.true.280
	movq	-88(%rbp), %rdi
	callq	XFLOATINT
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	.LBB187_62
# BB#61:                                # %if.then.284
	movq	-88(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2264(%rcx)
.LBB187_62:                             # %if.end.285
	jmp	.LBB187_63
.LBB187_63:                             # %if.end.286
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_64:                             # %if.end.287
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_79
# BB#65:                                # %land.lhs.true.292
	movl	$865, %edi              # imm = 0x361
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-376(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_79
# BB#66:                                # %if.then.298
	cmpq	$0, -16(%rbp)
	je	.LBB187_78
# BB#67:                                # %if.then.300
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB187_69
# BB#68:                                # %if.then.309
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_69:                             # %if.end.310
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_77
# BB#70:                                # %if.then.318
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2232(%rcx)
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$3, %edx
	jne	.LBB187_76
# BB#71:                                # %if.then.328
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2240(%rcx)
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$3, %edx
	jne	.LBB187_75
# BB#72:                                # %if.then.339
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2248(%rcx)
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$3, %edx
	jne	.LBB187_74
# BB#73:                                # %if.then.350
	movq	-160(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2256(%rcx)
.LBB187_74:                             # %if.end.355
	jmp	.LBB187_75
.LBB187_75:                             # %if.end.356
	jmp	.LBB187_76
.LBB187_76:                             # %if.end.357
	jmp	.LBB187_77
.LBB187_77:                             # %if.end.358
	jmp	.LBB187_78
.LBB187_78:                             # %if.end.359
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_79:                             # %if.end.360
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_94
# BB#80:                                # %land.lhs.true.365
	movl	$784, %edi              # imm = 0x310
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-384(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_94
# BB#81:                                # %land.lhs.true.371
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_94
# BB#82:                                # %if.then.379
	cmpq	$0, -16(%rbp)
	je	.LBB187_93
# BB#83:                                # %if.then.381
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB187_85
# BB#84:                                # %if.then.390
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_85:                             # %if.end.391
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB187_86
	jmp	.LBB187_92
.LBB187_86:                             # %if.then.398
	movb	$1, %al
	testb	$1, %al
	jne	.LBB187_87
	jmp	.LBB187_88
.LBB187_87:                             # %cond.true.400
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB187_89
	jmp	.LBB187_90
.LBB187_88:                             # %cond.false.409
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB187_90
.LBB187_89:                             # %cond.true.420
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	jmp	.LBB187_91
.LBB187_90:                             # %cond.false.427
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -392(%rbp)        # 8-byte Spill
	jmp	.LBB187_91
.LBB187_91:                             # %cond.end.428
	movq	-392(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	-88(%rbp), %rdi
	callq	XFLOATINT
	movq	-168(%rbp), %rax
	movq	224(%rax), %rdi
	movl	$-1, %esi
	movsd	%xmm0, -400(%rbp)       # 8-byte Spill
	callq	normal_char_height
	cvtsi2sdl	%eax, %xmm0
	movsd	-400(%rbp), %xmm1       # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	movapd	.LCPI187_0(%rip), %xmm0 # xmm0 = [9223372036854775808,9223372036854775808]
	xorpd	%xmm0, %xmm1
	movaps	%xmm1, %xmm0
	cvttsd2si	%xmm1, %eax
	movw	%ax, %cx
	movq	-16(%rbp), %rdi
	movw	%cx, 2272(%rdi)
	movsd	%xmm0, -408(%rbp)       # 8-byte Spill
.LBB187_92:                             # %if.end.436
	jmp	.LBB187_93
.LBB187_93:                             # %if.end.437
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_94:                             # %if.end.438
	cmpq	$0, -16(%rbp)
	je	.LBB187_97
# BB#95:                                # %land.lhs.true.440
	movq	-16(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB187_97
# BB#96:                                # %if.then.446
	movl	$0, -4(%rbp)
	jmp	.LBB187_209
.LBB187_97:                             # %if.end.447
	cmpq	$0, -16(%rbp)
	je	.LBB187_107
# BB#98:                                # %if.then.449
	movq	-48(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, -104(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	display_prop_end
	xorl	%edi, %edi
	movq	%rax, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	-184(%rbp), %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-176(%rbp), %rax
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-424(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB187_106
# BB#99:                                # %if.then.454
	movq	-40(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB187_102
# BB#100:                               # %land.lhs.true.460
	movq	-40(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB187_102
# BB#101:                               # %cond.true.466
	movq	-40(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rdi
	callq	marker_position
	movq	%rax, -432(%rbp)        # 8-byte Spill
	jmp	.LBB187_103
.LBB187_102:                            # %cond.false.470
	callq	emacs_abort
.LBB187_103:                            # %cond.end.471
	movq	-432(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rcx
	movq	-48(%rbp), %rdx
	cmpq	(%rdx), %rcx
	jle	.LBB187_105
# BB#104:                               # %if.then.476
	movq	-192(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	current_buffer, %rdi
	movq	-192(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	-48(%rbp), %rcx
	movq	%rax, 8(%rcx)
.LBB187_105:                            # %if.end.479
	jmp	.LBB187_106
.LBB187_106:                            # %if.end.480
	jmp	.LBB187_107
.LBB187_107:                            # %if.end.481
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -88(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB187_109
# BB#108:                               # %if.then.484
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
.LBB187_109:                            # %if.end.486
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_141
# BB#110:                               # %land.lhs.true.491
	movl	$608, %edi              # imm = 0x260
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-440(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB187_112
# BB#111:                               # %lor.lhs.false.497
	movl	$814, %edi              # imm = 0x32E
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-448(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_141
.LBB187_112:                            # %land.lhs.true.503
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_141
# BB#113:                               # %if.then.511
	cmpq	$0, -16(%rbp)
	je	.LBB187_119
# BB#114:                               # %if.then.513
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB187_118
# BB#115:                               # %if.then.522
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB187_117
# BB#116:                               # %if.then.527
	movq	-16(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 2296(%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 2304(%rax)
	movq	-16(%rbp), %rdi
	callq	iterate_out_of_display_property
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	2296(%rcx), %rdx
	movq	%rdx, (%rax)
	movq	2304(%rcx), %rcx
	movq	%rcx, 8(%rax)
.LBB187_117:                            # %if.end.530
	movl	$1, -4(%rbp)
	jmp	.LBB187_209
.LBB187_118:                            # %if.end.531
	jmp	.LBB187_122
.LBB187_119:                            # %if.else.532
	testb	$1, -61(%rbp)
	jne	.LBB187_121
# BB#120:                               # %if.then.534
	movl	$1, -4(%rbp)
	jmp	.LBB187_209
.LBB187_121:                            # %if.end.535
	jmp	.LBB187_122
.LBB187_122:                            # %if.end.536
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB187_124
# BB#123:                               # %lor.lhs.false.546
	movq	-88(%rbp), %rdi
	callq	lookup_fringe_bitmap
	movl	%eax, -196(%rbp)
	cmpl	$0, %eax
	jne	.LBB187_128
.LBB187_124:                            # %if.then.549
	cmpq	$0, -16(%rbp)
	je	.LBB187_127
# BB#125:                               # %land.lhs.true.551
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB187_127
# BB#126:                               # %if.then.558
	movq	-16(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 2296(%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 2304(%rax)
	movq	-16(%rbp), %rdi
	callq	iterate_out_of_display_property
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	2296(%rcx), %rdx
	movq	%rdx, (%rax)
	movq	2304(%rcx), %rcx
	movq	%rcx, 8(%rax)
.LBB187_127:                            # %if.end.561
	movl	$1, -4(%rbp)
	jmp	.LBB187_209
.LBB187_128:                            # %if.end.562
	cmpq	$0, -16(%rbp)
	je	.LBB187_140
# BB#129:                               # %if.then.564
	xorl	%esi, %esi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	movl	%eax, -200(%rbp)
	movq	-24(%rbp), %rdi
	subq	$3, %rdi
	movq	8(%rdi), %rdi
	subq	$3, %rdi
	movq	8(%rdi), %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$3, %eax
	jne	.LBB187_133
# BB#130:                               # %if.then.578
	movl	$4, %edx
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-208(%rbp), %rsi
	callq	lookup_derived_face
	movl	%eax, -212(%rbp)
	cmpl	$0, -212(%rbp)
	jl	.LBB187_132
# BB#131:                               # %if.then.591
	movl	-212(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB187_132:                            # %if.end.592
	jmp	.LBB187_133
.LBB187_133:                            # %if.end.593
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	push_it
	xorl	%edi, %edi
	movq	-16(%rbp), %rsi
	movl	$1, 2360(%rsi)
	movq	-16(%rbp), %rsi
	movl	$3, 2104(%rsi)
	movq	-16(%rbp), %rsi
	movq	$-1, 2216(%rsi)
	movq	-16(%rbp), %rsi
	movq	-104(%rbp), %rax
	movq	%rax, 2296(%rsi)
	movq	-96(%rbp), %rax
	movq	%rax, 2304(%rsi)
	movq	-32(%rbp), %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-456(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB187_135
# BB#134:                               # %cond.true.598
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	jmp	.LBB187_136
.LBB187_135:                            # %cond.false.599
	movq	-32(%rbp), %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
.LBB187_136:                            # %cond.end.600
	movq	-464(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-16(%rbp), %rax
	movl	$4, 24(%rax)
	callq	builtin_lisp_symbol
	movl	$608, %edi              # imm = 0x260
	movq	-16(%rbp), %rcx
	movq	%rax, 640(%rcx)
	movl	-200(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2108(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %sil
	andb	$-17, %sil
	orb	$16, %sil
	movb	%sil, 88(%rax)
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-472(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_138
# BB#137:                               # %if.then.612
	movl	-196(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	2448(%rcx), %rsi
	andq	$65535, %rdx            # imm = 0xFFFF
	andq	$-65536, %rsi           # imm = 0xFFFFFFFFFFFF0000
	orq	%rdx, %rsi
	movq	%rsi, 2448(%rcx)
	movl	-200(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	2448(%rcx), %rsi
	andq	$1048575, %rdx          # imm = 0xFFFFF
	shlq	$32, %rdx
	movabsq	$-4503595332403201, %rdi # imm = 0xFFF00000FFFFFFFF
	andq	%rdi, %rsi
	orq	%rdx, %rsi
	movq	%rsi, 2448(%rcx)
	jmp	.LBB187_139
.LBB187_138:                            # %if.else.621
	movl	-196(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	movq	2448(%rcx), %rsi
	andq	$65535, %rdx            # imm = 0xFFFF
	shlq	$16, %rdx
	movabsq	$-4294901761, %rdi      # imm = 0xFFFFFFFF0000FFFF
	andq	%rdi, %rsi
	orq	%rdx, %rsi
	movq	%rsi, 2448(%rcx)
	movl	-200(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	2456(%rcx), %r8d
	andl	$1048575, %eax          # imm = 0xFFFFF
	andl	$-1048576, %r8d         # imm = 0xFFFFFFFFFFF00000
	orl	%eax, %r8d
	movl	%r8d, 2456(%rcx)
.LBB187_139:                            # %if.end.632
	jmp	.LBB187_140
.LBB187_140:                            # %if.end.633
	movl	$1, -4(%rbp)
	jmp	.LBB187_209
.LBB187_141:                            # %if.end.634
	movl	$957, %edi              # imm = 0x3BD
	callq	builtin_lisp_symbol
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edi
	cmpl	$3, %edi
	jne	.LBB187_155
# BB#142:                               # %land.lhs.true.640
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_155
# BB#143:                               # %if.then.647
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_145
# BB#144:                               # %if.then.656
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
.LBB187_145:                            # %if.end.659
	movl	$643, %edi              # imm = 0x283
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-480(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_154
# BB#146:                               # %land.lhs.true.667
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_148
# BB#147:                               # %cond.true.675
	movq	-224(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	jmp	.LBB187_149
.LBB187_148:                            # %cond.false.678
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -488(%rbp)        # 8-byte Spill
.LBB187_149:                            # %cond.end.680
	movq	-488(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movb	$1, %cl
	movq	-496(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -497(%rbp)         # 1-byte Spill
	je	.LBB187_152
# BB#150:                               # %lor.lhs.false.685
	movl	$609, %edi              # imm = 0x261
	movq	-224(%rbp), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movb	$1, %cl
	movq	-512(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -497(%rbp)         # 1-byte Spill
	je	.LBB187_152
# BB#151:                               # %lor.rhs
	movl	$815, %edi              # imm = 0x32F
	movq	-224(%rbp), %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-520(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -497(%rbp)         # 1-byte Spill
.LBB187_152:                            # %lor.end
	movb	-497(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB187_153
	jmp	.LBB187_154
.LBB187_153:                            # %if.then.692
	movq	-224(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB187_154:                            # %if.end.693
	jmp	.LBB187_155
.LBB187_155:                            # %if.end.694
	movl	$957, %edi              # imm = 0x3BD
	movq	-80(%rbp), %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-528(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_157
# BB#156:                               # %if.then.698
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -80(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB187_157:                            # %if.end.700
	movq	-88(%rbp), %rdi
	callq	STRINGP
	movb	$1, %cl
	testb	$1, %al
	movb	%cl, -529(%rbp)         # 1-byte Spill
	jne	.LBB187_169
# BB#158:                               # %lor.lhs.false.703
	cmpq	$0, -16(%rbp)
	je	.LBB187_160
# BB#159:                               # %cond.true.705
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB187_161
	jmp	.LBB187_162
.LBB187_160:                            # %cond.false.714
	testb	$1, -61(%rbp)
	je	.LBB187_162
.LBB187_161:                            # %land.lhs.true.717
	movq	-88(%rbp), %rdi
	callq	valid_image_p
	movb	$1, %cl
	testb	$1, %al
	movb	%cl, -529(%rbp)         # 1-byte Spill
	jne	.LBB187_169
.LBB187_162:                            # %lor.lhs.false.720
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_164
# BB#163:                               # %land.lhs.true.725
	movl	$868, %edi              # imm = 0x364
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movb	$1, %cl
	movq	-544(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -529(%rbp)         # 1-byte Spill
	je	.LBB187_169
.LBB187_164:                            # %lor.rhs.731
	cmpq	$0, -16(%rbp)
	je	.LBB187_166
# BB#165:                               # %cond.true.733
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	208(%rdx), %rdx
	shrq	$23, %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$2, %eax
	movb	%cl, -545(%rbp)         # 1-byte Spill
	je	.LBB187_167
	jmp	.LBB187_168
.LBB187_166:                            # %cond.false.742
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, -61(%rbp)
	movb	%cl, -545(%rbp)         # 1-byte Spill
	je	.LBB187_168
.LBB187_167:                            # %land.rhs
	movq	-88(%rbp), %rdi
	callq	valid_xwidget_spec_p
	movb	%al, -545(%rbp)         # 1-byte Spill
.LBB187_168:                            # %land.end
	movb	-545(%rbp), %al         # 1-byte Reload
	movb	%al, -529(%rbp)         # 1-byte Spill
.LBB187_169:                            # %lor.end.747
	movb	-529(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -225(%rbp)
	testb	$1, -225(%rbp)
	je	.LBB187_208
# BB#170:                               # %land.lhs.true.751
	cmpl	$0, -60(%rbp)
	jne	.LBB187_208
# BB#171:                               # %if.then.754
	movl	$1, -232(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.LBB187_177
# BB#172:                               # %if.then.757
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_176
# BB#173:                               # %land.lhs.true.762
	movl	$868, %edi              # imm = 0x364
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-560(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_176
# BB#174:                               # %land.lhs.true.768
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-568(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_176
# BB#175:                               # %if.then.772
	movl	$2, -232(%rbp)
.LBB187_176:                            # %if.end.773
	movl	-232(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_209
.LBB187_177:                            # %if.end.774
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	push_it
	xorl	%edi, %edi
	movq	-40(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	%rsi, 640(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-17, %cl
	orb	$16, %cl
	movb	%cl, 88(%rax)
	movq	-80(%rbp), %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-576(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB187_179
# BB#178:                               # %if.then.783
	movq	-16(%rbp), %rax
	movl	$1, 2360(%rax)
	jmp	.LBB187_183
.LBB187_179:                            # %if.else.785
	movl	$609, %edi              # imm = 0x261
	movq	-80(%rbp), %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-584(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_181
# BB#180:                               # %if.then.789
	movq	-16(%rbp), %rax
	movl	$0, 2360(%rax)
	jmp	.LBB187_182
.LBB187_181:                            # %if.else.791
	movq	-16(%rbp), %rax
	movl	$2, 2360(%rax)
.LBB187_182:                            # %if.end.793
	jmp	.LBB187_183
.LBB187_183:                            # %if.end.794
	movq	-88(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB187_184
	jmp	.LBB187_193
.LBB187_184:                            # %if.then.796
	movq	-88(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 632(%rcx)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRING_MULTIBYTE
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movb	88(%rcx), %dl
	andb	$-2, %dl
	orb	%al, %dl
	movb	%dl, 88(%rcx)
	movq	-16(%rbp), %rcx
	movq	$-1, 328(%rcx)
	movq	-16(%rbp), %rcx
	movq	$0, 344(%rcx)
	movq	-16(%rbp), %rcx
	movq	$0, 336(%rcx)
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	SCHARS
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %dl
	andb	$-5, %dl
	orb	$4, %dl
	movb	%dl, 88(%rax)
	movq	-32(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB187_185
	jmp	.LBB187_186
.LBB187_185:                            # %if.then.817
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 8(%rax)
.LBB187_186:                            # %if.end.818
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB187_189
# BB#187:                               # %land.lhs.true.825
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB187_189
# BB#188:                               # %if.then.828
	movq	-16(%rbp), %rax
	movl	4768(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 4792(%rax)
	jmp	.LBB187_190
.LBB187_189:                            # %if.else.831
	movq	-16(%rbp), %rax
	movl	$1, 4792(%rax)
.LBB187_190:                            # %if.end.833
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB187_192
# BB#191:                               # %if.then.839
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	632(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4720(%rsi)
	movq	-16(%rbp), %rdx
	movq	$0, 4728(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4736(%rsi)
	movq	-56(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4744(%rsi)
	movq	-16(%rbp), %rdx
	movb	4752(%rdx), %dil
	andb	$-2, %dil
	orb	$1, %dil
	movb	%dil, 4752(%rdx)
	movq	-16(%rbp), %rdx
	movb	88(%rdx), %dil
	andb	$1, %dil
	xorb	$-1, %dil
	movq	-16(%rbp), %rdx
	andb	$1, %dil
	movb	4752(%rdx), %r8b
	shlb	$1, %dil
	andb	$-3, %r8b
	orb	%dil, %r8b
	movb	%r8b, 4752(%rdx)
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4760(%rsi)
	movq	-16(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	208(%rdx), %rdx
	shrq	$23, %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$2, %eax
	sete	%dil
	movq	-16(%rbp), %rdx
	addq	$2464, %rdx             # imm = 0x9A0
	movzbl	%dil, %eax
	andl	$1, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %esi
	movq	%rsi, %rdi
	movq	%rdx, -592(%rbp)        # 8-byte Spill
	movl	%eax, %edx
	movq	-592(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	callq	bidi_init_it
.LBB187_192:                            # %if.end.879
	jmp	.LBB187_207
.LBB187_193:                            # %if.else.880
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB187_196
# BB#194:                               # %land.lhs.true.885
	movl	$868, %edi              # imm = 0x364
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-608(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_196
# BB#195:                               # %if.then.891
	movq	-16(%rbp), %rax
	movl	$5, 24(%rax)
	movq	-88(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	%rdx, 2296(%rcx)
	movq	-96(%rbp), %rdx
	movq	%rdx, 2304(%rcx)
	movq	2296(%rcx), %rdx
	movq	%rdx, (%rax)
	movq	2304(%rcx), %rcx
	movq	%rcx, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$1, 2360(%rax)
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	addl	$1, %edi
	movl	%edi, -232(%rbp)
	jmp	.LBB187_206
.LBB187_196:                            # %if.else.899
	movq	-88(%rbp), %rdi
	callq	valid_xwidget_spec_p
	testb	$1, %al
	jne	.LBB187_197
	jmp	.LBB187_201
.LBB187_197:                            # %if.then.901
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movl	$8, 2104(%rax)
	movq	-16(%rbp), %rax
	movl	$6, 24(%rax)
	movq	-16(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, 2296(%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 2304(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-616(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB187_199
# BB#198:                               # %cond.true.908
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
	jmp	.LBB187_200
.LBB187_199:                            # %cond.false.911
	movq	-32(%rbp), %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
.LBB187_200:                            # %cond.end.912
	movq	-624(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-88(%rbp), %rdi
	callq	lookup_xwidget
	movq	-16(%rbp), %rcx
	movq	%rax, 2224(%rcx)
	jmp	.LBB187_205
.LBB187_201:                            # %if.else.916
	movq	-16(%rbp), %rax
	movl	$3, 2104(%rax)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-88(%rbp), %rsi
	callq	lookup_image
	xorl	%edi, %edi
	movq	-16(%rbp), %rsi
	movq	%rax, 2216(%rsi)
	movq	-16(%rbp), %rax
	movq	-104(%rbp), %rsi
	movq	%rsi, 2296(%rax)
	movq	-96(%rbp), %rsi
	movq	%rsi, 2304(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-632(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB187_203
# BB#202:                               # %cond.true.925
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	jmp	.LBB187_204
.LBB187_203:                            # %cond.false.928
	movq	-32(%rbp), %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
.LBB187_204:                            # %cond.end.929
	movq	-640(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-16(%rbp), %rax
	movl	$4, 24(%rax)
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 8(%rax)
.LBB187_205:                            # %if.end.933
	jmp	.LBB187_206
.LBB187_206:                            # %if.end.934
	jmp	.LBB187_207
.LBB187_207:                            # %if.end.935
	movl	-232(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_209
.LBB187_208:                            # %if.end.936
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-96(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movl	$0, -4(%rbp)
.LBB187_209:                            # %return
	movl	-4(%rbp), %eax
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	retq
.Lfunc_end187:
	.size	handle_single_display_spec, .Lfunc_end187-handle_single_display_spec
	.cfi_endproc

	.align	16, 0x90
	.type	display_prop_end,@function
display_prop_end:                       # @display_prop_end
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp582:
	.cfi_def_cfa_offset 16
.Ltmp583:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp584:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$344, %eax              # imm = 0x158
	movq	%rdx, -32(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-32(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movl	%eax, %edi
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-48(%rbp), %rdx
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_char_property_change
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB188_1
	jmp	.LBB188_2
.LBB188_1:                              # %if.then
	leaq	-72(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	632(%rax), %rcx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	compute_string_pos
	jmp	.LBB188_3
.LBB188_2:                              # %if.else
	movq	current_buffer, %rdi
	movq	-56(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -64(%rbp)
.LBB188_3:                              # %if.end
	movups	-72(%rbp), %xmm0
	movaps	%xmm0, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end188:
	.size	display_prop_end, .Lfunc_end188-display_prop_end
	.cfi_endproc

	.align	16, 0x90
	.type	iterate_out_of_display_property,@function
iterate_out_of_display_property:        # @iterate_out_of_display_property
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp585:
	.cfi_def_cfa_offset 16
.Ltmp586:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp587:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	xorb	$-1, %al
	andb	$1, %al
	movb	%al, -9(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB189_2
# BB#1:                                 # %cond.true
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB189_3
.LBB189_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB189_3:                              # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB189_5
# BB#4:                                 # %cond.true.2
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB189_6
.LBB189_5:                              # %cond.false.3
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jmp	.LBB189_6
.LBB189_6:                              # %cond.end.4
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB189_9
# BB#7:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB189_9
# BB#8:                                 # %if.then
	movl	$1, %edx
	movq	-8(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
.LBB189_9:                              # %if.end
	jmp	.LBB189_10
.LBB189_10:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	2472(%rdx), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -49(%rbp)          # 1-byte Spill
	jl	.LBB189_14
# BB#11:                                # %land.lhs.true.11
                                        #   in Loop: Header=BB189_10 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	40(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	2472(%rsi), %rdx
	movb	%cl, -49(%rbp)          # 1-byte Spill
	jg	.LBB189_14
# BB#12:                                # %land.lhs.true.15
                                        #   in Loop: Header=BB189_10 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	2472(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	2296(%rsi), %rdx
	movb	%cl, -49(%rbp)          # 1-byte Spill
	jge	.LBB189_14
# BB#13:                                # %land.rhs
                                        #   in Loop: Header=BB189_10 Depth=1
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-24(%rbp), %rax
	setl	%cl
	movb	%cl, -49(%rbp)          # 1-byte Spill
.LBB189_14:                             # %land.end
                                        #   in Loop: Header=BB189_10 Depth=1
	movb	-49(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB189_15
	jmp	.LBB189_16
.LBB189_15:                             # %while.body
                                        #   in Loop: Header=BB189_10 Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	jmp	.LBB189_10
.LBB189_16:                             # %while.end
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	2296(%rcx), %rax
	jle	.LBB189_18
# BB#17:                                # %if.then.29
	movq	-8(%rbp), %rax
	movq	2296(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
.LBB189_18:                             # %if.end.33
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	2296(%rcx), %rax
	je	.LBB189_20
# BB#19:                                # %if.then.39
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2296(%rcx)
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2304(%rcx)
.LBB189_20:                             # %if.end.47
	testb	$1, -9(%rbp)
	je	.LBB189_22
# BB#21:                                # %if.then.49
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2296(%rcx), %rdx
	movq	%rdx, 312(%rax)
	movq	2304(%rcx), %rcx
	movq	%rcx, 320(%rax)
	jmp	.LBB189_23
.LBB189_22:                             # %if.else
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2296(%rcx), %rdx
	movq	%rdx, 336(%rax)
	movq	2304(%rcx), %rcx
	movq	%rcx, 344(%rax)
.LBB189_23:                             # %if.end.53
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end189:
	.size	iterate_out_of_display_property, .Lfunc_end189-iterate_out_of_display_property
	.cfi_endproc

	.align	16, 0x90
	.type	push_it,@function
push_it:                                # @push_it
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp588:
	.cfi_def_cfa_offset 16
.Ltmp589:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp590:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movslq	2088(%rsi), %rdi
	leaq	(%rdi,%rdi,8), %rdi
	shlq	$5, %rdi
	leaq	648(%rsi,%rdi), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, 672(%rsi,%rdi)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-24(%rbp), %rsi
	movq	%rax, 32(%rsi)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-24(%rbp), %rsi
	movq	%rax, 40(%rsi)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rsi
	movq	2200(%rsi), %rdi
	movq	%rdi, 112(%rax)
	movups	2136(%rsi), %xmm0
	movups	2152(%rsi), %xmm1
	movups	2168(%rsi), %xmm2
	movups	2184(%rsi), %xmm3
	movups	%xmm3, 96(%rax)
	movups	%xmm2, 80(%rax)
	movups	%xmm1, 64(%rax)
	movups	%xmm0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 120(%rax)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	-24(%rbp), %rsi
	movq	%rax, (%rsi)
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, 252(%rax)
	movq	-8(%rbp), %rax
	movq	640(%rax), %rax
	movq	-24(%rbp), %rsi
	movq	%rax, 240(%rsi)
	movq	-24(%rbp), %rax
	movl	252(%rax), %ecx
	movl	%ecx, %eax
	movq	%rax, %rsi
	subq	$6, %rsi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	ja	.LBB190_5
# BB#12:                                # %entry
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	.LJTI190_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB190_1:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 128(%rcx)
	movq	-8(%rbp), %rax
	movq	2216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 168(%rcx)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2232(%rcx), %rdx
	movq	%rdx, 136(%rax)
	movq	2240(%rcx), %rdx
	movq	%rdx, 144(%rax)
	movq	2248(%rcx), %rdx
	movq	%rdx, 152(%rax)
	movq	2256(%rcx), %rcx
	movq	%rcx, 160(%rax)
	jmp	.LBB190_6
.LBB190_2:                              # %sw.bb.17
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 128(%rcx)
	jmp	.LBB190_6
.LBB190_3:                              # %sw.bb.21
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 128(%rcx)
	jmp	.LBB190_6
.LBB190_4:                              # %sw.bb.25
	jmp	.LBB190_6
.LBB190_5:                              # %sw.default
	callq	emacs_abort
.LBB190_6:                              # %sw.epilog
	movq	-24(%rbp), %rax
	addq	$176, %rax
	cmpq	$0, -16(%rbp)
	movq	%rax, -48(%rbp)         # 8-byte Spill
	je	.LBB190_8
# BB#7:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	8(%rax), %rax
	movq	%rax, 8(%rdx)
	jmp	.LBB190_9
.LBB190_8:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	2296(%rax), %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	2304(%rax), %rax
	movq	%rax, 8(%rdx)
.LBB190_9:                              # %cond.end
	movl	$48, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$192, %rcx
	movq	-8(%rbp), %rsi
	addq	$312, %rsi              # imm = 0x138
	movq	%rcx, %rdi
	callq	memcpy
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, 16(%rdx)
	movq	-8(%rbp), %rcx
	movq	72(%rcx), %rcx
	movl	%ecx, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rcx
	movl	2360(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 248(%rcx)
	movq	-8(%rbp), %rcx
	movb	88(%rcx), %r8b
	andb	$1, %r8b
	movq	-24(%rbp), %rcx
	andb	$1, %r8b
	movb	260(%rcx), %r9b
	andb	$-2, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 260(%rcx)
	movq	-8(%rbp), %rcx
	movb	88(%rcx), %r8b
	shrb	$6, %r8b
	andb	$1, %r8b
	movq	-24(%rbp), %rcx
	andb	$1, %r8b
	movb	260(%rcx), %r9b
	shlb	$4, %r8b
	andb	$-17, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 260(%rcx)
	movq	-8(%rbp), %rcx
	movq	2264(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, 272(%rdx)
	movq	-8(%rbp), %rcx
	movq	2280(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movq	%rcx, 280(%rdx)
	movq	-8(%rbp), %rcx
	movw	2272(%rcx), %r10w
	movq	-24(%rbp), %rcx
	movw	%r10w, 268(%rcx)
	movq	-8(%rbp), %rcx
	movb	88(%rcx), %r8b
	shrb	$2, %r8b
	andb	$1, %r8b
	movq	-24(%rbp), %rcx
	andb	$1, %r8b
	movb	260(%rcx), %r9b
	shlb	$1, %r8b
	andb	$-3, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 260(%rcx)
	movq	-8(%rbp), %rcx
	movb	88(%rcx), %r8b
	shrb	$3, %r8b
	andb	$1, %r8b
	movq	-24(%rbp), %rcx
	andb	$1, %r8b
	movb	260(%rcx), %r9b
	shlb	$2, %r8b
	andb	$-5, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 260(%rcx)
	movq	-24(%rbp), %rcx
	movb	260(%rcx), %r8b
	andb	$-9, %r8b
	movb	%r8b, 260(%rcx)
	movq	-8(%rbp), %rcx
	movl	2116(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 264(%rcx)
	movq	-8(%rbp), %rcx
	movl	2456(%rcx), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %r8b
	movq	-24(%rbp), %rcx
	andb	$1, %r8b
	movb	260(%rcx), %r9b
	shlb	$5, %r8b
	andb	$-33, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 260(%rcx)
	movq	-8(%rbp), %rcx
	movl	4792(%rcx), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 256(%rcx)
	movq	-8(%rbp), %rcx
	movb	88(%rcx), %r8b
	shrb	$4, %r8b
	andb	$1, %r8b
	movq	-24(%rbp), %rcx
	andb	$1, %r8b
	movb	260(%rcx), %r9b
	shlb	$6, %r8b
	andb	$-65, %r9b
	orb	%r8b, %r9b
	movb	%r9b, 260(%rcx)
	movq	-8(%rbp), %rcx
	movl	2088(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 2088(%rcx)
	movq	-8(%rbp), %rcx
	movl	2456(%rcx), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB190_11
# BB#10:                                # %if.then
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_push_it
.LBB190_11:                             # %if.end
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end190:
	.size	push_it, .Lfunc_end190-push_it
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI190_0:
	.quad	.LBB190_4
	.quad	.LBB190_4
	.quad	.LBB190_4
	.quad	.LBB190_4
	.quad	.LBB190_1
	.quad	.LBB190_2
	.quad	.LBB190_3

	.text
	.align	16, 0x90
	.type	compute_string_pos,@function
compute_string_pos:                     # @compute_string_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp591:
	.cfi_def_cfa_offset 16
.Ltmp592:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp593:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB191_1
	jmp	.LBB191_2
.LBB191_1:                              # %if.then
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	subq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	string_pos_nchars_ahead
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, 8(%rcx)
	jmp	.LBB191_3
.LBB191_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 8(%rcx)
.LBB191_3:                              # %if.end
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end191:
	.size	compute_string_pos, .Lfunc_end191-compute_string_pos
	.cfi_endproc

	.align	16, 0x90
	.type	string_pos_nchars_ahead,@function
string_pos_nchars_ahead:                # @string_pos_nchars_ahead
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp594:
	.cfi_def_cfa_offset 16
.Ltmp595:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp596:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-40(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB192_1
	jmp	.LBB192_5
.LBB192_1:                              # %if.then
	movq	-40(%rbp), %rdi
	callq	SDATA
	addq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB192_2:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB192_4
# BB#3:                                 # %while.body
                                        #   in Loop: Header=BB192_2 Depth=1
	leaq	-60(%rbp), %rsi
	movq	-56(%rbp), %rdi
	callq	string_char_and_length
	movl	-60(%rbp), %ecx
	movq	-56(%rbp), %rsi
	movslq	%ecx, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -56(%rbp)
	movq	-32(%rbp), %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movslq	-60(%rbp), %rsi
	addq	-24(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movl	%eax, -64(%rbp)         # 4-byte Spill
	jmp	.LBB192_2
.LBB192_4:                              # %while.end
	jmp	.LBB192_6
.LBB192_5:                              # %if.else
	movq	-32(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB192_6:                              # %if.end
	movups	-32(%rbp), %xmm0
	movaps	%xmm0, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end192:
	.size	string_pos_nchars_ahead, .Lfunc_end192-string_pos_nchars_ahead
	.cfi_endproc

	.align	16, 0x90
	.type	back_to_previous_line_start,@function
back_to_previous_line_start:            # @back_to_previous_line_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp597:
	.cfi_def_cfa_offset 16
.Ltmp598:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp599:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	320(%rdi), %rdi
	movq	%rdi, -24(%rbp)
# BB#1:                                 # %do.body
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -16(%rbp)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB193_3
# BB#2:                                 # %if.then
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB193_12
.LBB193_3:                              # %if.else
	jmp	.LBB193_4
.LBB193_4:                              # %do.body.4
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB193_6
# BB#5:                                 # %if.then.7
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	addq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB193_7
.LBB193_6:                              # %if.else.10
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	addq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB193_7:                              # %if.end
	jmp	.LBB193_8
.LBB193_8:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	setne	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB193_9
	jmp	.LBB193_10
.LBB193_9:                              # %while.body
                                        #   in Loop: Header=BB193_8 Depth=1
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB193_8
.LBB193_10:                             # %while.end
	jmp	.LBB193_11
.LBB193_11:                             # %do.end
	jmp	.LBB193_12
.LBB193_12:                             # %if.end.20
	jmp	.LBB193_13
.LBB193_13:                             # %do.end.21
	movq	$-1, %rdx
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-8(%rbp), %rax
	addq	$312, %rax              # imm = 0x138
	addq	$8, %rax
	movq	%rax, %rcx
	callq	find_newline_no_quit
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end193:
	.size	back_to_previous_line_start, .Lfunc_end193-back_to_previous_line_start
	.cfi_endproc

	.align	16, 0x90
	.type	handle_display_prop,@function
handle_display_prop:                    # @handle_display_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp600:
	.cfi_def_cfa_offset 16
.Ltmp601:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp602:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
.Ltmp603:
	.cfi_offset %rbx, -24
	movq	%rdi, -24(%rbp)
	movl	$0, -68(%rbp)
	movq	-24(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB194_1
	jmp	.LBB194_2
.LBB194_1:                              # %if.then
	movq	-24(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	addq	$312, %rax              # imm = 0x138
	addq	$24, %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB194_3
.LBB194_2:                              # %if.else
	movl	$5, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	addq	$312, %rax              # imm = 0x138
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB194_3:                              # %if.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-24(%rbp), %rcx
	movq	%rax, 2256(%rcx)
	movq	-24(%rbp), %rcx
	movq	%rax, 2248(%rcx)
	movq	-24(%rbp), %rcx
	movq	%rax, 2240(%rcx)
	movq	-24(%rbp), %rcx
	movq	%rax, 2232(%rcx)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-24(%rbp), %rcx
	movq	%rax, 2264(%rcx)
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx
	movq	%rax, 2280(%rcx)
	movq	-24(%rbp), %rax
	movw	$0, 2272(%rax)
	movq	-24(%rbp), %rax
	movb	88(%rax), %dl
	shrb	$2, %dl
	andb	$1, %dl
	testb	$1, %dl
	jne	.LBB194_5
# BB#4:                                 # %if.then.13
	movq	-24(%rbp), %rax
	movl	$1, 2360(%rax)
.LBB194_5:                              # %if.end.14
	movl	$344, %edi              # imm = 0x158
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	get_char_property_and_overlay
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB194_7
# BB#6:                                 # %if.then.19
	movl	$0, -12(%rbp)
	jmp	.LBB194_10
.LBB194_7:                              # %if.end.20
	movq	-24(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB194_9
# BB#8:                                 # %if.then.23
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB194_9:                              # %if.end.25
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %r8
	movq	-64(%rbp), %r9
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %r10d
	cmpl	$2, %r10d
	sete	%r11b
	movzbl	%r11b, %r10d
	andl	$1, %r10d
	movq	%rsp, %rax
	movl	%r10d, (%rax)
	callq	handle_display_spec
	xorl	%r10d, %r10d
	movl	$3, %ebx
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	cmovnel	%ebx, %r10d
	movl	%r10d, -12(%rbp)
.LBB194_10:                             # %return
	movl	-12(%rbp), %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end194:
	.size	handle_display_prop, .Lfunc_end194-handle_display_prop
	.cfi_endproc

	.align	16, 0x90
	.type	handle_stop,@function
handle_stop:                            # @handle_stop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp604:
	.cfi_def_cfa_offset 16
.Ltmp605:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp606:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	$0, 104(%rdi)
	movq	-8(%rbp), %rdi
	movl	$-1, 352(%rdi)
	movq	-8(%rbp), %rdi
	movw	2112(%rdi), %ax
	shrw	$6, %ax
	andw	$1, %ax
	movb	%al, %cl
	xorb	$-1, %cl
	andb	$1, %cl
	movb	%cl, -13(%rbp)
	movq	-8(%rbp), %rdi
	movb	88(%rdi), %cl
	andb	$-33, %cl
	movb	%cl, 88(%rdi)
	movq	-8(%rbp), %rdi
	movw	2112(%rdi), %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB195_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 128(%rax)
.LBB195_2:                              # %if.end
	jmp	.LBB195_3
.LBB195_3:                              # %do.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_4 Depth 2
	movabsq	$it_props, %rax
	movl	$0, -12(%rbp)
	movq	%rax, -24(%rbp)
.LBB195_4:                              # %for.cond
                                        #   Parent Loop BB195_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB195_30
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB195_4 Depth=2
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movl	%eax, -12(%rbp)
	cmpl	$1, -12(%rbp)
	jne	.LBB195_7
# BB#6:                                 # %if.then.7
                                        #   in Loop: Header=BB195_3 Depth=1
	jmp	.LBB195_30
.LBB195_7:                              # %if.else
                                        #   in Loop: Header=BB195_4 Depth=2
	cmpl	$3, -12(%rbp)
	jne	.LBB195_24
# BB#8:                                 # %if.then.9
                                        #   in Loop: Header=BB195_3 Depth=1
	testb	$1, -13(%rbp)
	je	.LBB195_12
# BB#9:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 2088(%rax)
	jg	.LBB195_12
# BB#10:                                # %lor.lhs.false.12
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	jge	.LBB195_18
# BB#11:                                # %land.lhs.true
                                        #   in Loop: Header=BB195_3 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	xorl	%edx, %edx
	movq	-8(%rbp), %rdi
	callq	get_overlay_strings_1
	testb	$1, %al
	jne	.LBB195_18
.LBB195_12:                             # %if.then.16
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB195_14
# BB#13:                                # %if.then.22
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	setup_for_ellipsis
.LBB195_14:                             # %if.end.23
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB195_15
	jmp	.LBB195_17
.LBB195_15:                             # %land.lhs.true.25
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	jne	.LBB195_17
# BB#16:                                # %if.then.29
	movq	-8(%rbp), %rdi
	callq	pop_it
.LBB195_17:                             # %if.end.30
	jmp	.LBB195_42
.LBB195_18:                             # %if.else.31
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB195_19
	jmp	.LBB195_21
.LBB195_19:                             # %land.lhs.true.34
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	jne	.LBB195_21
# BB#20:                                # %if.then.38
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	pop_it
	jmp	.LBB195_22
.LBB195_21:                             # %if.else.39
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-5, %cl
	movb	%cl, 88(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-17, %cl
	movb	%cl, 88(%rax)
	movb	$0, -13(%rbp)
.LBB195_22:                             # %if.end.44
                                        #   in Loop: Header=BB195_3 Depth=1
	jmp	.LBB195_23
.LBB195_23:                             # %if.end.45
                                        #   in Loop: Header=BB195_3 Depth=1
	movl	$1, -12(%rbp)
	jmp	.LBB195_30
.LBB195_24:                             # %if.else.46
                                        #   in Loop: Header=BB195_4 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB195_26
# BB#25:                                # %if.then.48
                                        #   in Loop: Header=BB195_4 Depth=2
	movb	$0, -13(%rbp)
.LBB195_26:                             # %if.end.49
                                        #   in Loop: Header=BB195_4 Depth=2
	jmp	.LBB195_27
.LBB195_27:                             # %if.end.50
                                        #   in Loop: Header=BB195_4 Depth=2
	jmp	.LBB195_28
.LBB195_28:                             # %if.end.51
                                        #   in Loop: Header=BB195_4 Depth=2
	jmp	.LBB195_29
.LBB195_29:                             # %for.inc
                                        #   in Loop: Header=BB195_4 Depth=2
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB195_4
.LBB195_30:                             # %for.end
                                        #   in Loop: Header=BB195_3 Depth=1
	cmpl	$1, -12(%rbp)
	je	.LBB195_36
# BB#31:                                # %if.then.53
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$1, 24(%rax)
	jne	.LBB195_33
# BB#32:                                # %if.then.55
                                        #   in Loop: Header=BB195_3 Depth=1
	movb	$0, -13(%rbp)
.LBB195_33:                             # %if.end.56
                                        #   in Loop: Header=BB195_3 Depth=1
	testb	$1, -13(%rbp)
	je	.LBB195_35
# BB#34:                                # %if.then.58
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	handle_overlay_change
	movl	%eax, -12(%rbp)
.LBB195_35:                             # %if.end.60
                                        #   in Loop: Header=BB195_3 Depth=1
	jmp	.LBB195_36
.LBB195_36:                             # %if.end.61
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB195_38
# BB#37:                                # %if.then.67
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	setup_for_ellipsis
	jmp	.LBB195_40
.LBB195_38:                             # %if.end.68
                                        #   in Loop: Header=BB195_3 Depth=1
	jmp	.LBB195_39
.LBB195_39:                             # %do.cond
                                        #   in Loop: Header=BB195_3 Depth=1
	cmpl	$1, -12(%rbp)
	je	.LBB195_3
.LBB195_40:                             # %do.end
	cmpl	$0, -12(%rbp)
	jne	.LBB195_42
# BB#41:                                # %if.then.71
	movq	-8(%rbp), %rdi
	callq	compute_stop_pos
.LBB195_42:                             # %if.end.72
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end195:
	.size	handle_stop, .Lfunc_end195-handle_stop
	.cfi_endproc

	.align	16, 0x90
	.type	get_overlay_strings_1,@function
get_overlay_strings_1:                  # @get_overlay_strings_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp607:
	.cfi_def_cfa_offset 16
.Ltmp608:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp609:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	-16(%rbp), %rsi
	movq	$0, 328(%rsi)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	load_overlay_strings
	movq	-16(%rbp), %rsi
	cmpq	$0, 360(%rsi)
	je	.LBB196_17
# BB#1:                                 # %if.then
	testb	$1, -25(%rbp)
	je	.LBB196_3
# BB#2:                                 # %if.then.2
	movq	-16(%rbp), %rdi
	callq	compute_stop_pos
.LBB196_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB196_6
# BB#4:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB196_5
	jmp	.LBB196_6
.LBB196_5:                              # %land.lhs.true.3
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	je	.LBB196_7
.LBB196_6:                              # %if.then.7
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	push_it
.LBB196_7:                              # %if.end.8
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	$0, 344(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 336(%rax)
	movq	-16(%rbp), %rax
	movq	376(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 632(%rcx)
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	movq	%rax, 640(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRING_MULTIBYTE
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movb	88(%rcx), %dl
	andb	$-2, %dl
	orb	%al, %dl
	movb	%dl, 88(%rcx)
	movq	-16(%rbp), %rcx
	movl	$2, 24(%rcx)
	movq	-16(%rbp), %rcx
	movb	88(%rcx), %al
	andb	$-17, %al
	movb	%al, 88(%rcx)
	movq	-16(%rbp), %rcx
	movl	2456(%rcx), %esi
	shrl	$20, %esi
	andl	$1, %esi
	testl	$1, %esi
	je	.LBB196_10
# BB#8:                                 # %land.lhs.true.29
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB196_10
# BB#9:                                 # %if.then.30
	movq	-16(%rbp), %rax
	movl	4768(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 4792(%rax)
	jmp	.LBB196_11
.LBB196_10:                             # %if.else
	movq	-16(%rbp), %rax
	movl	$1, 4792(%rax)
.LBB196_11:                             # %if.end.34
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB196_16
# BB#12:                                # %if.then.40
	cmpq	$0, -24(%rbp)
	jle	.LBB196_14
# BB#13:                                # %cond.true
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB196_15
.LBB196_14:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB196_15:                             # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4720(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 4728(%rax)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	xorl	%edx, %edx
	movl	%edx, %ecx
	movq	-16(%rbp), %rdi
	movq	%rax, 4736(%rdi)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, 4744(%rdi)
	movq	-16(%rbp), %rax
	movb	88(%rax), %sil
	shrb	$2, %sil
	andb	$1, %sil
	movq	-16(%rbp), %rax
	andb	$1, %sil
	movb	4752(%rax), %r8b
	andb	$-2, %r8b
	orb	%sil, %r8b
	movb	%r8b, 4752(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %sil
	andb	$1, %sil
	xorb	$-1, %sil
	movq	-16(%rbp), %rax
	andb	$1, %sil
	movb	4752(%rax), %r8b
	shlb	$1, %sil
	andb	$-3, %r8b
	orb	%sil, %r8b
	movb	%r8b, 4752(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, 4760(%rdi)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$2, %edx
	sete	%sil
	movq	-16(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%sil, %edx
	andl	$1, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %edi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	movq	%rax, %rcx
	callq	bidi_init_it
.LBB196_16:                             # %if.end.84
	movb	$1, -1(%rbp)
	jmp	.LBB196_18
.LBB196_17:                             # %if.end.85
	movq	-16(%rbp), %rax
	movq	$-1, 328(%rax)
	movb	$0, -1(%rbp)
.LBB196_18:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end196:
	.size	get_overlay_strings_1, .Lfunc_end196-get_overlay_strings_1
	.cfi_endproc

	.align	16, 0x90
	.type	setup_for_ellipsis,@function
setup_for_ellipsis:                     # @setup_for_ellipsis
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp610:
	.cfi_def_cfa_offset 16
.Ltmp611:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp612:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$0, 96(%rdi)
	je	.LBB197_3
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	584(%rax), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB197_2
	jmp	.LBB197_3
.LBB197_2:                              # %if.then
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	584(%rax), %rdi
	callq	XVECTOR
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 104(%rdi)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	-24(%rbp), %rdi
	movq	(%rdi), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 112(%rdi)
	jmp	.LBB197_4
.LBB197_3:                              # %if.else
	movabsq	$default_invis_vector, %rax
	movq	%rax, %rcx
	addq	$24, %rcx
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-8(%rbp), %rax
	movq	%rcx, 112(%rax)
.LBB197_4:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 120(%rcx)
	movq	-8(%rbp), %rcx
	movl	$0, 352(%rcx)
	movq	-8(%rbp), %rcx
	movl	$-1, 124(%rcx)
	movq	-8(%rbp), %rcx
	cmpl	$0, 128(%rcx)
	jl	.LBB197_6
# BB#5:                                 # %if.then.10
	movq	-8(%rbp), %rax
	movl	128(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2108(%rax)
.LBB197_6:                              # %if.end.12
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jne	.LBB197_8
# BB#7:                                 # %if.then.14
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-65, %cx
	movw	%cx, 2112(%rax)
.LBB197_8:                              # %if.end.15
	movq	-8(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-33, %cl
	orb	$32, %cl
	movb	%cl, 88(%rax)
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end197:
	.size	setup_for_ellipsis, .Lfunc_end197-setup_for_ellipsis
	.cfi_endproc

	.align	16, 0x90
	.type	pop_it,@function
pop_it:                                 # @pop_it
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp613:
	.cfi_def_cfa_offset 16
.Ltmp614:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp615:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movl	$48, %ecx
	movl	%ecx, %edx
	movl	$72, %ecx
	movl	%ecx, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movb	88(%rdi), %r8b
	shrb	$4, %r8b
	andb	$1, %r8b
	andb	$1, %r8b
	movb	%r8b, -17(%rbp)
	movq	-8(%rbp), %rdi
	movq	312(%rdi), %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdi
	movl	2088(%rdi), %ecx
	addl	$-1, %ecx
	movl	%ecx, 2088(%rdi)
	movq	-8(%rbp), %rdi
	addq	$648, %rdi              # imm = 0x288
	movq	-8(%rbp), %r9
	movslq	2088(%r9), %r9
	imulq	$288, %r9, %r9          # imm = 0x120
	addq	%r9, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	24(%rdi), %rdi
	movq	-8(%rbp), %r9
	movq	%rdi, 32(%r9)
	movq	-16(%rbp), %rdi
	movq	32(%rdi), %rdi
	movq	-8(%rbp), %r9
	movq	%rdi, 40(%r9)
	movq	-16(%rbp), %rdi
	movq	40(%rdi), %rdi
	movq	-8(%rbp), %r9
	movq	%rdi, 48(%r9)
	movq	-8(%rbp), %rdi
	addq	$2136, %rdi             # imm = 0x858
	movq	-16(%rbp), %r9
	addq	$48, %r9
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	-48(%rbp), %r9          # 8-byte Reload
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%r9, %rdx
	movl	%eax, -60(%rbp)         # 4-byte Spill
	callq	memcpy
	movq	-16(%rbp), %rdx
	movl	120(%rdx), %eax
	movq	-8(%rbp), %rdx
	movl	%eax, 2108(%rdx)
	movq	-8(%rbp), %rdx
	addq	$312, %rdx              # imm = 0x138
	movq	-16(%rbp), %rsi
	addq	$192, %rsi
	movq	%rdx, %rdi
	movq	-56(%rbp), %rdx         # 8-byte Reload
	callq	memcpy
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	176(%rsi), %rdi
	movq	%rdi, 2296(%rdx)
	movq	184(%rsi), %rsi
	movq	%rsi, 2304(%rdx)
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 632(%rsi)
	movq	-16(%rbp), %rdx
	movq	240(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 640(%rsi)
	movq	-8(%rbp), %rdx
	movq	632(%rdx), %rdx
	movl	-60(%rbp), %edi         # 4-byte Reload
	movq	%rdx, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB198_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	$-1, 336(%rax)
	movq	-8(%rbp), %rax
	movq	$-1, 344(%rax)
.LBB198_2:                              # %if.end
	movq	-16(%rbp), %rax
	movl	252(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 24(%rax)
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, %eax
	movq	%rax, %rdx
	subq	$6, %rdx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	ja	.LBB198_23
# BB#35:                                # %if.end
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	.LJTI198_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB198_3:                              # %sw.bb
	movq	-16(%rbp), %rax
	movq	168(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2216(%rcx)
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	136(%rcx), %rdx
	movq	%rdx, 2232(%rax)
	movq	144(%rcx), %rdx
	movq	%rdx, 2240(%rax)
	movq	152(%rcx), %rdx
	movq	%rdx, 2248(%rax)
	movq	160(%rcx), %rcx
	movq	%rcx, 2256(%rax)
	jmp	.LBB198_24
.LBB198_4:                              # %sw.bb.26
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	jmp	.LBB198_24
.LBB198_5:                              # %sw.bb.30
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	jmp	.LBB198_24
.LBB198_6:                              # %sw.bb.34
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	jmp	.LBB198_24
.LBB198_7:                              # %sw.bb.36
	movb	$1, %al
	testb	$1, %al
	jne	.LBB198_8
	jmp	.LBB198_9
.LBB198_8:                              # %cond.true
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB198_10
	jmp	.LBB198_11
.LBB198_9:                              # %cond.false
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB198_11
.LBB198_10:                             # %cond.true.49
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB198_12
.LBB198_11:                             # %cond.false.53
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	jmp	.LBB198_12
.LBB198_12:                             # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB198_14
# BB#13:                                # %if.then.54
	movq	-40(%rbp), %rax
	movb	240(%rax), %cl
	testb	$3, %cl
	setne	%cl
	movq	-8(%rbp), %rax
	movzbl	%cl, %edx
	movw	%dx, %si
	movw	2112(%rax), %di
	shlw	$2, %si
	andw	$-5, %di
	orw	%si, %di
	movw	%di, 2112(%rax)
.LBB198_14:                             # %if.end.62
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	jmp	.LBB198_24
.LBB198_15:                             # %sw.bb.65
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB198_17
# BB#16:                                # %if.then.67
	movq	-8(%rbp), %rax
	movl	$3, 24(%rax)
	jmp	.LBB198_21
.LBB198_17:                             # %if.else
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB198_18
	jmp	.LBB198_19
.LBB198_18:                             # %if.then.71
	movq	-8(%rbp), %rax
	movl	$2, 24(%rax)
	jmp	.LBB198_20
.LBB198_19:                             # %if.else.73
	movq	-8(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2288(%rcx)
.LBB198_20:                             # %if.end.78
	jmp	.LBB198_21
.LBB198_21:                             # %if.end.79
	jmp	.LBB198_24
.LBB198_22:                             # %sw.bb.80
	jmp	.LBB198_24
.LBB198_23:                             # %sw.default
	callq	emacs_abort
.LBB198_24:                             # %sw.epilog
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movslq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rax
	movl	248(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2360(%rax)
	movq	-16(%rbp), %rax
	movb	260(%rax), %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	88(%rax), %dil
	andb	$-2, %dil
	orb	%sil, %dil
	movb	%dil, 88(%rax)
	movq	-16(%rbp), %rax
	movb	260(%rax), %sil
	shrb	$4, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	88(%rax), %dil
	shlb	$6, %sil
	andb	$-65, %dil
	orb	%sil, %dil
	movb	%dil, 88(%rax)
	movq	-16(%rbp), %rax
	movq	272(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2264(%rcx)
	movq	-16(%rbp), %rax
	movq	280(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2280(%rcx)
	movq	-16(%rbp), %rax
	movw	268(%rax), %r8w
	movq	-8(%rbp), %rax
	movw	%r8w, 2272(%rax)
	movq	-16(%rbp), %rax
	movb	260(%rax), %sil
	shrb	$1, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	88(%rax), %dil
	shlb	$2, %sil
	andb	$-5, %dil
	orb	%sil, %dil
	movb	%dil, 88(%rax)
	movq	-16(%rbp), %rax
	movb	260(%rax), %sil
	shrb	$2, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	88(%rax), %dil
	shlb	$3, %sil
	andb	$-9, %dil
	orb	%sil, %dil
	movb	%dil, 88(%rax)
	movq	-16(%rbp), %rax
	movl	264(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2116(%rax)
	movq	-16(%rbp), %rax
	movb	260(%rax), %sil
	shrb	$5, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movzbl	%sil, %edx
	movl	2456(%rax), %r9d
	shll	$20, %edx
	andl	$-1048577, %r9d         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%edx, %r9d
	movl	%r9d, 2456(%rax)
	movq	-16(%rbp), %rax
	movl	256(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 4792(%rax)
	movq	-16(%rbp), %rax
	movb	260(%rax), %sil
	shrb	$6, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	88(%rax), %dil
	shlb	$4, %sil
	andb	$-17, %dil
	orb	%sil, %dil
	movb	%dil, 88(%rax)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB198_30
# BB#25:                                # %if.then.155
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_pop_it
	testb	$1, -17(%rbp)
	je	.LBB198_29
# BB#26:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB198_28
# BB#27:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, 24(%rax)
	jne	.LBB198_29
.LBB198_28:                             # %if.then.164
	movq	-8(%rbp), %rdi
	callq	iterate_out_of_display_property
.LBB198_29:                             # %if.end.165
	jmp	.LBB198_30
.LBB198_30:                             # %if.end.166
	testb	$1, -17(%rbp)
	je	.LBB198_34
# BB#31:                                # %land.lhs.true.169
	movq	-8(%rbp), %rax
	cmpl	$0, 2088(%rax)
	jne	.LBB198_34
# BB#32:                                # %land.lhs.true.173
	movq	-8(%rbp), %rax
	movq	2296(%rax), %rax
	cmpq	-32(%rbp), %rax
	je	.LBB198_34
# BB#33:                                # %if.then.178
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-65, %cx
	movw	%cx, 2112(%rax)
.LBB198_34:                             # %if.end.181
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end198:
	.size	pop_it, .Lfunc_end198-pop_it
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI198_0:
	.quad	.LBB198_6
	.quad	.LBB198_15
	.quad	.LBB198_7
	.quad	.LBB198_22
	.quad	.LBB198_3
	.quad	.LBB198_5
	.quad	.LBB198_4

	.text
	.align	16, 0x90
	.type	handle_overlay_change,@function
handle_overlay_change:                  # @handle_overlay_change
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp616:
	.cfi_def_cfa_offset 16
.Ltmp617:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp618:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB199_3
# BB#1:                                 # %land.lhs.true
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	get_overlay_strings
	testb	$1, %al
	jne	.LBB199_2
	jmp	.LBB199_3
.LBB199_2:                              # %if.then
	movl	$1, -4(%rbp)
	jmp	.LBB199_4
.LBB199_3:                              # %if.else
	movl	$0, -4(%rbp)
.LBB199_4:                              # %return
	movl	-4(%rbp), %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end199:
	.size	handle_overlay_change, .Lfunc_end199-handle_overlay_change
	.cfi_endproc

	.align	16, 0x90
	.type	compute_stop_pos,@function
compute_stop_pos:                       # @compute_stop_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp619:
	.cfi_def_cfa_offset 16
.Ltmp620:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp621:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB200_1
	jmp	.LBB200_2
.LBB200_1:                              # %if.then
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, -32(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB200_7
.LBB200_2:                              # %if.else
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jle	.LBB200_4
# BB#3:                                 # %if.then.8
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
.LBB200_4:                              # %if.end
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rdi
	callq	next_overlay_change
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	32(%rcx), %rax
	jge	.LBB200_6
# BB#5:                                 # %if.then.22
	movq	-72(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
.LBB200_6:                              # %if.end.24
	movl	$5, %esi
	movq	current_buffer, %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	addq	$100, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -40(%rbp)
.LBB200_7:                              # %if.end.30
	leaq	-48(%rbp), %rax
	xorl	%ecx, %ecx
	movq	-56(%rbp), %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movq	-32(%rbp), %rdi
	movq	%rax, %rsi
	movq	%rax, %rdx
	callq	validate_interval_range
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.LBB200_41
# BB#8:                                 # %if.then.34
	movabsq	$it_props, %rax
	movq	%rax, -136(%rbp)
.LBB200_9:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-136(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB200_12
# BB#10:                                # %for.body
                                        #   in Loop: Header=BB200_9 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	movq	-136(%rbp), %rax
	movswl	(%rax), %ecx
	movq	%rdi, -160(%rbp)        # 8-byte Spill
	movl	%ecx, %edi
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	textget
	movq	-136(%rbp), %rsi
	movl	4(%rsi), %ecx
	movl	%ecx, %esi
	movq	%rax, -128(%rbp,%rsi,8)
# BB#11:                                # %for.inc
                                        #   in Loop: Header=BB200_9 Depth=1
	movq	-136(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB200_9
.LBB200_12:                             # %for.end
	movq	-16(%rbp), %rdi
	callq	next_interval
	movq	%rax, -24(%rbp)
.LBB200_13:                             # %for.cond.39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_19 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -24(%rbp)
	movb	%cl, -161(%rbp)         # 1-byte Spill
	je	.LBB200_17
# BB#14:                                # %land.rhs
                                        #   in Loop: Header=BB200_13 Depth=1
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movb	$1, %cl
	movq	-176(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -177(%rbp)         # 1-byte Spill
	je	.LBB200_16
# BB#15:                                # %lor.rhs
                                        #   in Loop: Header=BB200_13 Depth=1
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movq	-24(%rbp), %rcx
	cmpq	8(%rcx), %rax
	setg	%dl
	movb	%dl, -177(%rbp)         # 1-byte Spill
.LBB200_16:                             # %lor.end
                                        #   in Loop: Header=BB200_13 Depth=1
	movb	-177(%rbp), %al         # 1-byte Reload
	movb	%al, -161(%rbp)         # 1-byte Spill
.LBB200_17:                             # %land.end
                                        #   in Loop: Header=BB200_13 Depth=1
	movb	-161(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB200_18
	jmp	.LBB200_28
.LBB200_18:                             # %for.body.47
                                        #   in Loop: Header=BB200_13 Depth=1
	movabsq	$it_props, %rax
	movq	%rax, -136(%rbp)
.LBB200_19:                             # %for.cond.48
                                        #   Parent Loop BB200_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-136(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB200_24
# BB#20:                                # %for.body.51
                                        #   in Loop: Header=BB200_19 Depth=2
	movq	-24(%rbp), %rax
	movq	48(%rax), %rdi
	movq	-136(%rbp), %rax
	movswl	(%rax), %ecx
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	movl	%ecx, %edi
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	textget
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, %eax
	movq	-128(%rbp,%rax,8), %rax
	cmpq	-144(%rbp), %rax
	je	.LBB200_22
# BB#21:                                # %if.then.62
                                        #   in Loop: Header=BB200_13 Depth=1
	jmp	.LBB200_24
.LBB200_22:                             # %if.end.63
                                        #   in Loop: Header=BB200_19 Depth=2
	jmp	.LBB200_23
.LBB200_23:                             # %for.inc.64
                                        #   in Loop: Header=BB200_19 Depth=2
	movq	-136(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB200_19
.LBB200_24:                             # %for.end.66
                                        #   in Loop: Header=BB200_13 Depth=1
	movq	-136(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB200_26
# BB#25:                                # %if.then.69
	jmp	.LBB200_28
.LBB200_26:                             # %if.end.70
                                        #   in Loop: Header=BB200_13 Depth=1
	jmp	.LBB200_27
.LBB200_27:                             # %for.inc.71
                                        #   in Loop: Header=BB200_13 Depth=1
	movq	-24(%rbp), %rdi
	callq	next_interval
	movq	%rax, -24(%rbp)
	jmp	.LBB200_13
.LBB200_28:                             # %for.end.73
	cmpq	$0, -24(%rbp)
	je	.LBB200_40
# BB#29:                                # %if.then.75
	movq	-40(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB200_35
# BB#30:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB200_35
# BB#31:                                # %if.then.84
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movq	-8(%rbp), %rcx
	cmpq	32(%rcx), %rax
	jge	.LBB200_33
# BB#32:                                # %cond.true
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB200_34
.LBB200_33:                             # %cond.false
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB200_34:                             # %cond.end
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
	jmp	.LBB200_39
.LBB200_35:                             # %if.else.92
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-24(%rbp), %rcx
	cmpq	8(%rcx), %rax
	jge	.LBB200_37
# BB#36:                                # %cond.true.97
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB200_38
.LBB200_37:                             # %cond.false.99
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB200_38:                             # %cond.end.101
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 32(%rcx)
.LBB200_39:                             # %if.end.104
	jmp	.LBB200_40
.LBB200_40:                             # %if.end.105
	jmp	.LBB200_41
.LBB200_41:                             # %if.end.106
	movq	-8(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jge	.LBB200_46
# BB#42:                                # %if.then.109
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB200_45
# BB#43:                                # %land.lhs.true.112
	movq	-8(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB200_45
# BB#44:                                # %if.then.115
	movq	$-1, -152(%rbp)
.LBB200_45:                             # %if.end.116
	movq	-8(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movq	-152(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %r8
	movq	%rax, %rdi
	callq	composition_compute_stop_pos
.LBB200_46:                             # %if.end.119
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end200:
	.size	compute_stop_pos, .Lfunc_end200-compute_stop_pos
	.cfi_endproc

	.align	16, 0x90
	.type	handle_fontified_prop,@function
handle_fontified_prop:                  # @handle_fontified_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp622:
	.cfi_def_cfa_offset 16
.Ltmp623:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp624:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movl	$0, -36(%rbp)
	movq	globals+1392, %rdi
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB201_2
# BB#1:                                 # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_38
.LBB201_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB201_37
# BB#3:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB201_37
# BB#4:                                 # %land.lhs.true.3
	xorl	%edi, %edi
	movq	globals+864, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB201_37
# BB#5:                                 # %land.lhs.true.6
	xorl	%edi, %edi
	movq	Vrun_hooks, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB201_37
# BB#6:                                 # %land.lhs.true.9
	movl	$448, %edi              # imm = 0x1C0
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-152(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -153(%rbp)         # 1-byte Spill
	jne	.LBB201_8
# BB#7:                                 # %land.rhs
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	16(%rcx), %rax
	setl	%dl
	movb	%dl, -153(%rbp)         # 1-byte Spill
.LBB201_8:                              # %land.end
	movb	-153(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB201_9
	jmp	.LBB201_37
.LBB201_9:                              # %if.then.20
	callq	SPECPDL_INDEX
	movl	$447, %edi              # imm = 0x1BF
	movq	%rax, -48(%rbp)
	movq	current_buffer, %rax
	movq	%rax, -64(%rbp)
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	andb	$1, %cl
	movb	%cl, -81(%rbp)
	movq	globals+864, %rax
	movq	%rax, -56(%rbp)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$3, %edx
	jne	.LBB201_11
# BB#10:                                # %lor.lhs.false
	movl	$598, %edi              # imm = 0x256
	movq	-56(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB201_12
.LBB201_11:                             # %if.then.31
	movq	-56(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	safe_call1
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB201_26
.LBB201_12:                             # %if.else
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)
.LBB201_13:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB201_16 Depth 2
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB201_25
# BB#14:                                # %for.body
                                        #   in Loop: Header=BB201_13 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB201_22
# BB#15:                                # %if.then.43
                                        #   in Loop: Header=BB201_13 Depth=1
	movl	$447, %edi              # imm = 0x1BF
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fdefault_value
	movq	%rax, -96(%rbp)
.LBB201_16:                             # %for.cond.46
                                        #   Parent Loop BB201_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-96(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB201_21
# BB#17:                                # %for.body.51
                                        #   in Loop: Header=BB201_16 Depth=2
	movl	$901, %edi              # imm = 0x385
	movq	-96(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB201_19
# BB#18:                                # %if.then.57
                                        #   in Loop: Header=BB201_16 Depth=2
	movq	-104(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	safe_call1
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB201_19:                             # %if.end.59
                                        #   in Loop: Header=BB201_16 Depth=2
	jmp	.LBB201_20
.LBB201_20:                             # %for.inc
                                        #   in Loop: Header=BB201_16 Depth=2
	movq	-96(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB201_16
.LBB201_21:                             # %for.end
                                        #   in Loop: Header=BB201_13 Depth=1
	jmp	.LBB201_23
.LBB201_22:                             # %if.else.61
                                        #   in Loop: Header=BB201_13 Depth=1
	movq	-104(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	safe_call1
	movq	%rax, -216(%rbp)        # 8-byte Spill
.LBB201_23:                             # %if.end.63
                                        #   in Loop: Header=BB201_13 Depth=1
	jmp	.LBB201_24
.LBB201_24:                             # %for.inc.64
                                        #   in Loop: Header=BB201_13 Depth=1
	movq	-56(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB201_13
.LBB201_25:                             # %for.end.68
	jmp	.LBB201_26
.LBB201_26:                             # %if.end.69
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-64(%rbp), %rsi
	cmpq	current_buffer, %rsi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jne	.LBB201_31
# BB#27:                                # %if.then.74
	movq	-72(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jne	.LBB201_30
# BB#28:                                # %land.lhs.true.78
	movq	-80(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jne	.LBB201_30
# BB#29:                                # %if.then.82
	movb	-81(%rbp), %al
	movq	current_buffer, %rcx
	andb	$1, %al
	movb	936(%rcx), %dl
	shlb	$1, %al
	andb	$-3, %dl
	orb	%al, %dl
	movb	%dl, 936(%rcx)
.LBB201_30:                             # %if.end.87
	jmp	.LBB201_34
.LBB201_31:                             # %if.else.88
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB201_33
# BB#32:                                # %if.then.92
	movq	-64(%rbp), %rdi
	callq	set_buffer_internal_1
.LBB201_33:                             # %if.end.93
	jmp	.LBB201_34
.LBB201_34:                             # %if.end.94
	movl	$448, %edi              # imm = 0x1C0
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	-256(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB201_36
# BB#35:                                # %if.then.102
	movl	$1, -36(%rbp)
.LBB201_36:                             # %if.end.103
	jmp	.LBB201_37
.LBB201_37:                             # %if.end.104
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB201_38:                             # %return
	movl	-4(%rbp), %eax
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end201:
	.size	handle_fontified_prop, .Lfunc_end201-handle_fontified_prop
	.cfi_endproc

	.align	16, 0x90
	.type	handle_face_prop,@function
handle_face_prop:                       # @handle_face_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp625:
	.cfi_def_cfa_offset 16
.Ltmp626:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp627:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB202_26
# BB#1:                                 # %if.then
	leaq	-24(%rbp), %rdx
	xorl	%r8d, %r8d
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	addq	$100, %rax
	movq	-8(%rbp), %rcx
	movl	2120(%rcx), %r9d
	movq	%rax, %rcx
	callq	face_at_buffer_position
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2108(%rcx), %eax
	je	.LBB202_25
# BB#2:                                 # %if.then.5
	movb	$1, %al
	testb	$1, %al
	jne	.LBB202_3
	jmp	.LBB202_4
.LBB202_3:                              # %cond.true
	movl	-12(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB202_5
	jmp	.LBB202_6
.LBB202_4:                              # %cond.false
	movslq	-12(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB202_6
.LBB202_5:                              # %cond.true.17
	movslq	-12(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB202_7
.LBB202_6:                              # %cond.false.20
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	jmp	.LBB202_7
.LBB202_7:                              # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -32(%rbp)
	testb	$1, %cl
	jne	.LBB202_8
	jmp	.LBB202_9
.LBB202_8:                              # %cond.true.21
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB202_10
	jmp	.LBB202_11
.LBB202_9:                              # %cond.false.30
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB202_11
.LBB202_10:                             # %cond.true.41
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB202_12
.LBB202_11:                             # %cond.false.48
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	jmp	.LBB202_12
.LBB202_12:                             # %cond.end.49
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB202_20
# BB#13:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpq	$1, 312(%rax)
	jle	.LBB202_20
# BB#14:                                # %if.then.56
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	face_before_or_after_it_pos
	movb	$1, %cl
	movl	%eax, -44(%rbp)
	testb	$1, %cl
	jne	.LBB202_15
	jmp	.LBB202_16
.LBB202_15:                             # %cond.true.58
	movl	-44(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB202_17
	jmp	.LBB202_18
.LBB202_16:                             # %cond.false.66
	movslq	-44(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB202_18
.LBB202_17:                             # %cond.true.76
	movslq	-44(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB202_19
.LBB202_18:                             # %cond.false.82
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	jmp	.LBB202_19
.LBB202_19:                             # %cond.end.83
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -40(%rbp)
.LBB202_20:                             # %if.end
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	240(%rdx), %eax
	andl	$3, %eax
	cmpl	$0, %eax
	movb	%cl, -113(%rbp)         # 1-byte Spill
	je	.LBB202_24
# BB#21:                                # %land.rhs
	movb	$1, %al
	cmpq	$0, -40(%rbp)
	movb	%al, -114(%rbp)         # 1-byte Spill
	je	.LBB202_23
# BB#22:                                # %lor.rhs
	movq	-40(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	setne	%dl
	xorb	$-1, %dl
	movb	%dl, -114(%rbp)         # 1-byte Spill
.LBB202_23:                             # %lor.end
	movb	-114(%rbp), %al         # 1-byte Reload
	movb	%al, -113(%rbp)         # 1-byte Spill
.LBB202_24:                             # %land.end
	movb	-113(%rbp), %al         # 1-byte Reload
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movzwl	2112(%rcx), %esi
	shll	$3, %edx
	andl	$65527, %esi            # imm = 0xFFF7
	orl	%edx, %esi
	movw	%si, %di
	movw	%di, 2112(%rcx)
	movq	-32(%rbp), %rcx
	movb	240(%rcx), %al
	testb	$3, %al
	setne	%al
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	movw	%dx, %di
	movw	2112(%rcx), %r8w
	shlw	$2, %di
	andw	$-5, %r8w
	orw	%di, %r8w
	movw	%r8w, 2112(%rcx)
.LBB202_25:                             # %if.end.107
	jmp	.LBB202_68
.LBB202_26:                             # %if.else
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB202_28
# BB#27:                                # %cond.true.112
	movl	$16, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	328(%rdx), %rax
	cqto
	idivq	%rcx
	movq	-8(%rbp), %rcx
	movq	504(%rcx,%rdx,8), %rcx
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jmp	.LBB202_29
.LBB202_28:                             # %cond.false.116
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB202_29:                             # %cond.end.118
	movq	-128(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB202_42
# BB#30:                                # %if.then.123
	movq	-8(%rbp), %rax
	movl	2088(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -60(%rbp)
.LBB202_31:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -60(%rbp)
	jl	.LBB202_41
# BB#32:                                # %for.body
                                        #   in Loop: Header=BB202_31 Depth=1
	movslq	-60(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	$648, %rcx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rcx
	cmpq	$0, 208(%rcx)
	jl	.LBB202_34
# BB#33:                                # %if.then.132
                                        #   in Loop: Header=BB202_31 Depth=1
	movl	$16, %eax
	movl	%eax, %ecx
	movslq	-60(%rbp), %rdx
	movq	-8(%rbp), %rsi
	addq	$648, %rsi              # imm = 0x288
	imulq	$288, %rdx, %rdx        # imm = 0x120
	addq	%rdx, %rsi
	movq	208(%rsi), %rax
	cqto
	idivq	%rcx
	movq	-8(%rbp), %rcx
	movq	504(%rcx,%rdx,8), %rcx
	movq	%rcx, -72(%rbp)
	jmp	.LBB202_37
.LBB202_34:                             # %if.else.141
                                        #   in Loop: Header=BB202_31 Depth=1
	xorl	%edi, %edi
	movslq	-60(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	$648, %rcx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rcx
	movq	240(%rcx), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB202_36
# BB#35:                                # %if.then.149
                                        #   in Loop: Header=BB202_31 Depth=1
	movslq	-60(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	$648, %rcx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rcx
	movq	240(%rcx), %rax
	movq	%rax, -72(%rbp)
.LBB202_36:                             # %if.end.154
                                        #   in Loop: Header=BB202_31 Depth=1
	jmp	.LBB202_37
.LBB202_37:                             # %if.end.155
                                        #   in Loop: Header=BB202_31 Depth=1
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB202_39
# BB#38:                                # %if.then.159
	jmp	.LBB202_41
.LBB202_39:                             # %if.end.160
                                        #   in Loop: Header=BB202_31 Depth=1
	jmp	.LBB202_40
.LBB202_40:                             # %for.inc
                                        #   in Loop: Header=BB202_31 Depth=1
	movl	-60(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB202_31
.LBB202_41:                             # %for.end
	jmp	.LBB202_42
.LBB202_42:                             # %if.end.161
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB202_44
# BB#43:                                # %if.then.165
	leaq	-24(%rbp), %rdx
	xorl	%r8d, %r8d
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	addq	$100, %rax
	movq	-72(%rbp), %r9
	movq	%rax, %rcx
	callq	face_for_overlay_string
	movl	%eax, -48(%rbp)
	jmp	.LBB202_51
.LBB202_44:                             # %if.else.178
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$3, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB202_49
# BB#45:                                # %cond.true.182
	xorl	%edi, %edi
	movq	globals+728, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB202_47
# BB#46:                                # %cond.true.186
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB202_48
.LBB202_47:                             # %cond.false.189
	xorl	%eax, %eax
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB202_48
.LBB202_48:                             # %cond.end.190
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, -176(%rbp)        # 4-byte Spill
	jmp	.LBB202_50
.LBB202_49:                             # %cond.false.192
	movq	-8(%rbp), %rdi
	callq	underlying_face_id
	movl	%eax, -176(%rbp)        # 4-byte Spill
.LBB202_50:                             # %cond.end.194
	movl	-176(%rbp), %eax        # 4-byte Reload
	movl	%eax, -48(%rbp)
.LBB202_51:                             # %if.end.196
	leaq	-24(%rbp), %r8
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rdi
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rsi
	movq	-8(%rbp), %rcx
	movq	336(%rcx), %rdx
	movq	-56(%rbp), %rcx
	movl	-48(%rbp), %r9d
	movl	$0, (%rsp)
	movl	%eax, -180(%rbp)        # 4-byte Spill
	callq	face_at_string_position
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	2108(%rcx), %eax
	je	.LBB202_67
# BB#52:                                # %if.then.205
	movb	$1, %al
	testb	$1, %al
	jne	.LBB202_53
	jmp	.LBB202_54
.LBB202_53:                             # %cond.true.207
	movl	-12(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB202_55
	jmp	.LBB202_56
.LBB202_54:                             # %cond.false.215
	movslq	-12(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB202_56
.LBB202_55:                             # %cond.true.225
	movslq	-12(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jmp	.LBB202_57
.LBB202_56:                             # %cond.false.231
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB202_57
.LBB202_57:                             # %cond.end.232
	movq	-192(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -80(%rbp)
	testb	$1, %cl
	jne	.LBB202_58
	jmp	.LBB202_59
.LBB202_58:                             # %cond.true.235
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB202_60
	jmp	.LBB202_61
.LBB202_59:                             # %cond.false.244
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB202_61
.LBB202_60:                             # %cond.true.255
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB202_62
.LBB202_61:                             # %cond.false.262
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB202_62
.LBB202_62:                             # %cond.end.263
	movq	-200(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	movb	%dl, -201(%rbp)         # 1-byte Spill
	je	.LBB202_66
# BB#63:                                # %land.rhs.269
	movb	$1, %al
	cmpq	$0, -88(%rbp)
	movb	%al, -202(%rbp)         # 1-byte Spill
	je	.LBB202_65
# BB#64:                                # %lor.rhs.272
	movq	-88(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	setne	%dl
	xorb	$-1, %dl
	movb	%dl, -202(%rbp)         # 1-byte Spill
.LBB202_65:                             # %lor.end.278
	movb	-202(%rbp), %al         # 1-byte Reload
	movb	%al, -201(%rbp)         # 1-byte Spill
.LBB202_66:                             # %land.end.279
	movb	-201(%rbp), %al         # 1-byte Reload
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movzwl	2112(%rcx), %esi
	shll	$3, %edx
	andl	$65527, %esi            # imm = 0xFFF7
	orl	%edx, %esi
	movw	%si, %di
	movw	%di, 2112(%rcx)
	movq	-80(%rbp), %rcx
	movb	240(%rcx), %al
	testb	$3, %al
	setne	%al
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	movw	%dx, %di
	movw	2112(%rcx), %r8w
	shlw	$2, %di
	andw	$-5, %r8w
	orw	%di, %r8w
	movw	%r8w, 2112(%rcx)
.LBB202_67:                             # %if.end.299
	jmp	.LBB202_68
.LBB202_68:                             # %if.end.300
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movl	%ecx, 2108(%rdx)
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end202:
	.size	handle_face_prop, .Lfunc_end202-handle_face_prop
	.cfi_endproc

	.align	16, 0x90
	.type	handle_invisible_prop,@function
handle_invisible_prop:                  # @handle_invisible_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp628:
	.cfi_def_cfa_offset 16
.Ltmp629:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp630:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              # imm = 0x180
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB203_1
	jmp	.LBB203_43
.LBB203_1:                              # %if.then
	movl	$574, %edi              # imm = 0x23E
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdx
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB203_3
# BB#2:                                 # %cond.true
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -212(%rbp)        # 4-byte Spill
	jmp	.LBB203_4
.LBB203_3:                              # %cond.false
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -212(%rbp)        # 4-byte Spill
.LBB203_4:                              # %cond.end
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB203_42
# BB#5:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jge	.LBB203_42
# BB#6:                                 # %if.then.15
	cmpl	$2, -16(%rbp)
	sete	%al
	andb	$1, %al
	movb	%al, -41(%rbp)
	movl	$1, -12(%rbp)
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	SCHARS
	movq	%rax, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -40(%rbp)
.LBB203_7:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	-32(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdx
	movq	-40(%rbp), %rcx
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fnext_single_property_change
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %r8d
	andl	$-5, %r8d
	cmpl	$2, %r8d
	jne	.LBB203_14
# BB#8:                                 # %if.then.27
                                        #   in Loop: Header=BB203_7 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	-32(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdx
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB203_10
# BB#9:                                 # %cond.true.35
                                        #   in Loop: Header=BB203_7 Depth=1
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -252(%rbp)        # 4-byte Spill
	jmp	.LBB203_11
.LBB203_10:                             # %cond.false.41
                                        #   in Loop: Header=BB203_7 Depth=1
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -252(%rbp)        # 4-byte Spill
.LBB203_11:                             # %cond.end.44
                                        #   in Loop: Header=BB203_7 Depth=1
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -16(%rbp)
	cmpl	$2, -16(%rbp)
	jne	.LBB203_13
# BB#12:                                # %if.then.48
                                        #   in Loop: Header=BB203_7 Depth=1
	movb	$1, -41(%rbp)
.LBB203_13:                             # %if.end
                                        #   in Loop: Header=BB203_7 Depth=1
	jmp	.LBB203_15
.LBB203_14:                             # %if.else
                                        #   in Loop: Header=BB203_7 Depth=1
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB203_15:                             # %if.end.49
                                        #   in Loop: Header=BB203_7 Depth=1
	jmp	.LBB203_16
.LBB203_16:                             # %do.cond
                                        #   in Loop: Header=BB203_7 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$0, -16(%rbp)
	movb	%cl, -253(%rbp)         # 1-byte Spill
	je	.LBB203_18
# BB#17:                                # %land.rhs
                                        #   in Loop: Header=BB203_7 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	setl	%cl
	movb	%cl, -253(%rbp)         # 1-byte Spill
.LBB203_18:                             # %land.end
                                        #   in Loop: Header=BB203_7 Depth=1
	movb	-253(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB203_7
# BB#19:                                # %do.end
	testb	$1, -41(%rbp)
	je	.LBB203_21
# BB#20:                                # %if.then.54
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-33, %cl
	orb	$32, %cl
	movb	%cl, 88(%rax)
.LBB203_21:                             # %if.end.55
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jge	.LBB203_36
# BB#22:                                # %if.then.58
	movq	-8(%rbp), %rax
	movq	336(%rax), %rcx
	movq	%rcx, -80(%rbp)
	movq	344(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB203_34
# BB#23:                                # %if.then.64
	movq	-8(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB203_26
# BB#24:                                # %land.lhs.true.69
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	SCHARS
	movq	-264(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jge	.LBB203_26
# BB#25:                                # %if.then.76
	movl	$1, %edx
	movq	-8(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
.LBB203_26:                             # %if.end.78
	jmp	.LBB203_27
.LBB203_27:                             # %do.body.79
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#28:                                # %do.cond.81
                                        #   in Loop: Header=BB203_27 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-88(%rbp), %rdx
	movq	-8(%rbp), %rsi
	cmpq	2472(%rsi), %rdx
	movb	%cl, -265(%rbp)         # 1-byte Spill
	jg	.LBB203_30
# BB#29:                                # %land.rhs.86
                                        #   in Loop: Header=BB203_27 Depth=1
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-64(%rbp), %rax
	setl	%cl
	movb	%cl, -265(%rbp)         # 1-byte Spill
.LBB203_30:                             # %land.end.91
                                        #   in Loop: Header=BB203_27 Depth=1
	movb	-265(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB203_27
# BB#31:                                # %do.end.92
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 344(%rcx)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-64(%rbp), %rax
	jl	.LBB203_33
# BB#32:                                # %if.then.106
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
.LBB203_33:                             # %if.end.107
	jmp	.LBB203_35
.LBB203_34:                             # %if.else.108
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
	movq	-8(%rbp), %rax
	addq	$312, %rax              # imm = 0x138
	addq	$24, %rax
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rcx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rdx
	movq	%rax, %rdi
	callq	compute_string_pos
.LBB203_35:                             # %if.end.115
	jmp	.LBB203_41
.LBB203_36:                             # %if.else.116
	movq	-8(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB203_39
# BB#37:                                # %land.lhs.true.120
	testb	$1, -41(%rbp)
	jne	.LBB203_39
# BB#38:                                # %if.then.122
	movq	-8(%rbp), %rdi
	callq	next_overlay_string
	movl	$2, -12(%rbp)
	jmp	.LBB203_40
.LBB203_39:                             # %if.else.123
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	-8(%rbp), %rdi
	movq	%rax, 336(%rdi)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SBYTES
	movq	-8(%rbp), %rdi
	movq	%rax, 344(%rdi)
.LBB203_40:                             # %if.end.134
	jmp	.LBB203_41
.LBB203_41:                             # %if.end.135
	jmp	.LBB203_42
.LBB203_42:                             # %if.end.136
	jmp	.LBB203_105
.LBB203_43:                             # %if.else.137
	movl	$574, %edi              # imm = 0x23E
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-136(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	get_char_property_and_overlay
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB203_45
# BB#44:                                # %cond.true.150
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-296(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -300(%rbp)        # 4-byte Spill
	jmp	.LBB203_46
.LBB203_45:                             # %cond.false.156
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -300(%rbp)        # 4-byte Spill
.LBB203_46:                             # %cond.end.159
	movl	-300(%rbp), %eax        # 4-byte Reload
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB203_104
# BB#47:                                # %land.lhs.true.163
	movq	-112(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jge	.LBB203_104
# BB#48:                                # %if.then.167
	cmpl	$2, -16(%rbp)
	sete	%al
	andb	$1, %al
	movb	%al, -137(%rbp)
	movl	$1, -12(%rbp)
.LBB203_49:                             # %do.body.172
                                        # =>This Inner Loop Header: Depth=1
	leaq	-104(%rbp), %rsi
	movq	-120(%rbp), %rdi
	movq	current_buffer, %rax
	movq	768(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	callq	skip_invisible
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB203_51
# BB#50:                                # %lor.lhs.false
                                        #   in Loop: Header=BB203_49 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jl	.LBB203_52
.LBB203_51:                             # %if.then.180
                                        #   in Loop: Header=BB203_49 Depth=1
	movl	$0, -16(%rbp)
	jmp	.LBB203_56
.LBB203_52:                             # %if.else.181
                                        #   in Loop: Header=BB203_49 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	-96(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-312(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-320(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB203_54
# BB#53:                                # %cond.true.191
                                        #   in Loop: Header=BB203_49 Depth=1
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-328(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -332(%rbp)        # 4-byte Spill
	jmp	.LBB203_55
.LBB203_54:                             # %cond.false.197
                                        #   in Loop: Header=BB203_49 Depth=1
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -332(%rbp)        # 4-byte Spill
.LBB203_55:                             # %cond.end.200
                                        #   in Loop: Header=BB203_49 Depth=1
	movl	-332(%rbp), %eax        # 4-byte Reload
	movl	%eax, -16(%rbp)
.LBB203_56:                             # %if.end.202
                                        #   in Loop: Header=BB203_49 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB203_58
# BB#57:                                # %if.then.205
                                        #   in Loop: Header=BB203_49 Depth=1
	movq	-104(%rbp), %rax
	movq	%rax, -120(%rbp)
.LBB203_58:                             # %if.end.206
                                        #   in Loop: Header=BB203_49 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB203_60
# BB#59:                                # %if.then.209
                                        #   in Loop: Header=BB203_49 Depth=1
	movb	$1, -137(%rbp)
.LBB203_60:                             # %if.end.210
                                        #   in Loop: Header=BB203_49 Depth=1
	jmp	.LBB203_61
.LBB203_61:                             # %do.cond.211
                                        #   in Loop: Header=BB203_49 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB203_49
# BB#62:                                # %do.end.214
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB203_90
# BB#63:                                # %if.then.220
	movq	current_buffer, %rdi
	movq	-96(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movb	$1, %cl
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	current_buffer, %rsi
	cmpq	776(%rsi), %rax
	movb	%cl, -333(%rbp)         # 1-byte Spill
	je	.LBB203_68
# BB#64:                                # %lor.rhs
	movq	-152(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB203_66
# BB#65:                                # %cond.true.226
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	jmp	.LBB203_67
.LBB203_66:                             # %cond.false.228
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	jmp	.LBB203_67
.LBB203_67:                             # %cond.end.229
	movq	-344(%rbp), %rax        # 8-byte Reload
	addq	-152(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	sete	%sil
	movb	%sil, -333(%rbp)        # 1-byte Spill
.LBB203_68:                             # %lor.end
	movb	-333(%rbp), %al         # 1-byte Reload
	movb	$1, %cl
	andb	$1, %al
	movb	%al, -153(%rbp)
	movq	-96(%rbp), %rdx
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rdx
	movb	%cl, -345(%rbp)         # 1-byte Spill
	jle	.LBB203_73
# BB#69:                                # %lor.rhs.240
	movq	-152(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB203_71
# BB#70:                                # %cond.true.245
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	jmp	.LBB203_72
.LBB203_71:                             # %cond.false.248
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	jmp	.LBB203_72
.LBB203_72:                             # %cond.end.249
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	-152(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	sete	%sil
	movb	%sil, -345(%rbp)        # 1-byte Spill
.LBB203_73:                             # %lor.end.260
	movb	-345(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -154(%rbp)
	testb	$1, -153(%rbp)
	jne	.LBB203_75
# BB#74:                                # %lor.lhs.false.264
	testb	$1, -154(%rbp)
	je	.LBB203_78
.LBB203_75:                             # %if.then.267
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rax
	movl	4768(%rax), %edx
	movl	%edx, -180(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -168(%rbp)
	movq	-8(%rbp), %rdi
	movq	-176(%rbp), %rsi
	movq	-168(%rbp), %rdx
	callq	reseat_1
	testb	$1, -153(%rbp)
	je	.LBB203_77
# BB#76:                                # %if.then.272
	movl	$10, %eax
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-8(%rbp), %rdx
	movb	4784(%rdx), %sil
	andb	$-2, %sil
	movb	%sil, 4784(%rdx)
	movl	-180(%rbp), %edi
	movq	-8(%rbp), %rdx
	movl	%edi, 4768(%rdx)
	movq	-152(%rbp), %rdx
	movq	current_buffer, %r8
	cmpq	776(%r8), %rdx
	cmovel	%ecx, %eax
	movq	-8(%rbp), %rdx
	movl	%eax, 2480(%rdx)
	movq	-8(%rbp), %rdx
	movq	$1, 2488(%rdx)
	movq	-8(%rbp), %rdx
	movq	$1, 2496(%rdx)
.LBB203_77:                             # %if.end.286
	jmp	.LBB203_89
.LBB203_78:                             # %if.else.287
	movq	-8(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB203_81
# BB#79:                                # %land.lhs.true.294
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB203_81
# BB#80:                                # %if.then.300
	movl	$1, %edx
	movq	-8(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
.LBB203_81:                             # %if.end.303
	jmp	.LBB203_82
.LBB203_82:                             # %do.body.304
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#83:                                # %do.cond.306
                                        #   in Loop: Header=BB203_82 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	2472(%rsi), %rdx
	movb	%cl, -361(%rbp)         # 1-byte Spill
	jg	.LBB203_85
# BB#84:                                # %land.rhs.311
                                        #   in Loop: Header=BB203_82 Depth=1
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-96(%rbp), %rax
	setl	%cl
	movb	%cl, -361(%rbp)         # 1-byte Spill
.LBB203_85:                             # %land.end.316
                                        #   in Loop: Header=BB203_82 Depth=1
	movb	-361(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB203_82
# BB#86:                                # %do.end.317
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 320(%rcx)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-96(%rbp), %rax
	jl	.LBB203_88
# BB#87:                                # %if.then.333
	movq	-96(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
.LBB203_88:                             # %if.end.335
	jmp	.LBB203_89
.LBB203_89:                             # %if.end.336
	jmp	.LBB203_91
.LBB203_90:                             # %if.else.337
	movq	-96(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	current_buffer, %rdi
	movq	-96(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	-8(%rbp), %rcx
	movq	%rax, 320(%rcx)
.LBB203_91:                             # %if.end.345
	testb	$1, -137(%rbp)
	je	.LBB203_95
# BB#92:                                # %if.then.347
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB203_94
# BB#93:                                # %if.then.349
	movq	-96(%rbp), %rax
	subq	$1, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2296(%rcx)
	movq	current_buffer, %rdi
	movq	-8(%rbp), %rax
	movq	2296(%rax), %rsi
	callq	buf_charpos_to_bytepos
	movq	-8(%rbp), %rcx
	movq	%rax, 2304(%rcx)
.LBB203_94:                             # %if.end.357
	jmp	.LBB203_95
.LBB203_95:                             # %if.end.358
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-376(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB203_100
# BB#96:                                # %land.lhs.true.362
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	32(%rax), %rsi
	callq	get_overlay_strings
	testb	$1, %al
	jne	.LBB203_97
	jmp	.LBB203_100
.LBB203_97:                             # %if.then.366
	movl	$1, -12(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 2088(%rax)
	jle	.LBB203_99
# BB#98:                                # %if.then.369
	movb	-137(%rbp), %al
	movq	-8(%rbp), %rcx
	movl	2088(%rcx), %edx
	subl	$1, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	addq	$648, %rsi              # imm = 0x288
	imulq	$288, %rcx, %rcx        # imm = 0x120
	addq	%rcx, %rsi
	andb	$1, %al
	movb	260(%rsi), %dil
	shlb	$3, %al
	andb	$-9, %dil
	orb	%al, %dil
	movb	%dil, 260(%rsi)
	movq	-8(%rbp), %rcx
	movl	2088(%rcx), %edx
	subl	$1, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	addq	$648, %rsi              # imm = 0x288
	imulq	$288, %rcx, %rcx        # imm = 0x120
	addq	%rcx, %rsi
	movq	192(%rsi), %rcx
	movq	-8(%rbp), %rsi
	movl	2088(%rsi), %edx
	subl	$1, %edx
	movslq	%edx, %rsi
	movq	-8(%rbp), %r8
	addq	$648, %r8               # imm = 0x288
	imulq	$288, %rsi, %rsi        # imm = 0x120
	addq	%rsi, %r8
	movq	%rcx, 24(%r8)
.LBB203_99:                             # %if.end.392
	jmp	.LBB203_103
.LBB203_100:                            # %if.else.393
	testb	$1, -137(%rbp)
	je	.LBB203_102
# BB#101:                               # %if.then.395
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-33, %cl
	orb	$32, %cl
	movb	%cl, 88(%rax)
	movl	$3, -12(%rbp)
.LBB203_102:                            # %if.end.400
	jmp	.LBB203_103
.LBB203_103:                            # %if.end.401
	jmp	.LBB203_104
.LBB203_104:                            # %if.end.402
	jmp	.LBB203_105
.LBB203_105:                            # %if.end.403
	movl	-12(%rbp), %eax
	addq	$384, %rsp              # imm = 0x180
	popq	%rbp
	retq
.Lfunc_end203:
	.size	handle_invisible_prop, .Lfunc_end203-handle_invisible_prop
	.cfi_endproc

	.align	16, 0x90
	.type	handle_composition_prop,@function
handle_composition_prop:                # @handle_composition_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp631:
	.cfi_def_cfa_offset 16
.Ltmp632:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp633:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB204_1
	jmp	.LBB204_11
.LBB204_1:                              # %if.then
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	344(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	SDATA
	addq	-48(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB204_3
# BB#2:                                 # %cond.true
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	jmp	.LBB204_10
.LBB204_3:                              # %cond.false
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB204_5
# BB#4:                                 # %cond.true.12
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-72(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-72(%rbp), %rdx
	movzbl	1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-72(%rbp), %rdx
	movzbl	(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	addl	%eax, %esi
	movl	%esi, -80(%rbp)         # 4-byte Spill
	jmp	.LBB204_9
.LBB204_5:                              # %cond.false.22
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB204_7
# BB#6:                                 # %cond.true.27
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-72(%rbp), %rax
	movzbl	1(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-72(%rbp), %rax
	movzbl	2(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB204_8
.LBB204_7:                              # %cond.false.41
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	string_char
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB204_8:                              # %cond.end
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -80(%rbp)         # 4-byte Spill
.LBB204_9:                              # %cond.end.44
	movl	-80(%rbp), %eax         # 4-byte Reload
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB204_10:                             # %cond.end.46
	movl	-76(%rbp), %eax         # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 2124(%rcx)
	jmp	.LBB204_18
.LBB204_11:                             # %if.else
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -48(%rbp)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB204_13
# BB#12:                                # %cond.true.58
	movq	-48(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -100(%rbp)        # 4-byte Spill
	jmp	.LBB204_17
.LBB204_13:                             # %cond.false.60
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB204_15
# BB#14:                                # %cond.true.63
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB204_16
.LBB204_15:                             # %cond.false.65
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	jmp	.LBB204_16
.LBB204_16:                             # %cond.end.66
	movq	-112(%rbp), %rax        # 8-byte Reload
	addq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -100(%rbp)        # 4-byte Spill
.LBB204_17:                             # %cond.end.73
	movl	-100(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 2124(%rcx)
.LBB204_18:                             # %if.end
	movq	$-1, %rsi
	leaq	-56(%rbp), %rdx
	leaq	-64(%rbp), %rcx
	leaq	-24(%rbp), %r8
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %r9
	callq	find_composition
	testb	$1, %al
	jne	.LBB204_19
	jmp	.LBB204_36
.LBB204_19:                             # %land.lhs.true
	movq	-56(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	composition_valid_p
	testb	$1, %al
	jne	.LBB204_20
	jmp	.LBB204_36
.LBB204_20:                             # %land.lhs.true.80
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB204_23
# BB#21:                                # %lor.lhs.false
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-56(%rbp), %rax
	jle	.LBB204_23
# BB#22:                                # %lor.lhs.false.87
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-64(%rbp), %rax
	jl	.LBB204_36
.LBB204_23:                             # %if.then.92
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB204_25
# BB#24:                                # %if.then.95
	movl	$0, -4(%rbp)
	jmp	.LBB204_37
.LBB204_25:                             # %if.end.96
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	je	.LBB204_30
# BB#26:                                # %if.then.99
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB204_27
	jmp	.LBB204_28
.LBB204_27:                             # %if.then.102
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-56(%rbp), %rsi
	callq	string_char_to_byte
	movq	%rax, -48(%rbp)
	jmp	.LBB204_29
.LBB204_28:                             # %if.else.105
	movq	current_buffer, %rdi
	movq	-56(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -48(%rbp)
.LBB204_29:                             # %if.end.107
	jmp	.LBB204_30
.LBB204_30:                             # %if.end.108
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %r8
	movq	%rax, %rdx
	callq	get_composition_id
	movq	-16(%rbp), %rcx
	movq	%rax, 2144(%rcx)
	movq	-16(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jl	.LBB204_35
# BB#31:                                # %if.then.114
	movq	-16(%rbp), %rax
	movl	$-1, 2152(%rax)
	movq	-24(%rbp), %rdi
	callq	composition_registered_p
	testb	$1, %al
	jne	.LBB204_32
	jmp	.LBB204_33
.LBB204_32:                             # %cond.true.118
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB204_34
.LBB204_33:                             # %cond.false.121
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB204_34:                             # %cond.end.127
	movq	-120(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2184(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 2168(%rax)
.LBB204_35:                             # %if.end.132
	jmp	.LBB204_36
.LBB204_36:                             # %if.end.133
	movl	$0, -4(%rbp)
.LBB204_37:                             # %return
	movl	-4(%rbp), %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end204:
	.size	handle_composition_prop, .Lfunc_end204-handle_composition_prop
	.cfi_endproc

	.align	16, 0x90
	.type	face_before_or_after_it_pos,@function
face_before_or_after_it_pos:            # @face_before_or_after_it_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp634:
	.cfi_def_cfa_offset 16
.Ltmp635:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp636:
	.cfi_def_cfa_register %rbp
	subq	$5120, %rsp             # imm = 0x1400
	movb	%sil, %al
	movq	%rdi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	$0, -4848(%rbp)
	movq	-16(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB205_1
	jmp	.LBB205_49
.LBB205_1:                              # %if.then
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	callq	SCHARS
	movq	-4976(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jge	.LBB205_4
# BB#2:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpq	$0, 336(%rax)
	jne	.LBB205_5
# BB#3:                                 # %land.lhs.true
	testb	$1, -17(%rbp)
	je	.LBB205_5
.LBB205_4:                              # %if.then.8
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB205_123
.LBB205_5:                              # %if.end
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB205_13
# BB#6:                                 # %if.then.10
	testb	$1, -17(%rbp)
	je	.LBB205_8
# BB#7:                                 # %if.then.12
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	subq	$1, %rax
	movq	%rax, -4864(%rbp)
	jmp	.LBB205_12
.LBB205_8:                              # %if.else
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB205_10
# BB#9:                                 # %if.then.17
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	2184(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -4864(%rbp)
	jmp	.LBB205_11
.LBB205_10:                             # %if.else.21
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	addq	$1, %rax
	movq	%rax, -4864(%rbp)
.LBB205_11:                             # %if.end.26
	jmp	.LBB205_12
.LBB205_12:                             # %if.end.27
	jmp	.LBB205_38
.LBB205_13:                             # %if.else.28
	testb	$1, -17(%rbp)
	je	.LBB205_30
# BB#14:                                # %if.then.30
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2316(%rax), %ecx
	jg	.LBB205_16
# BB#15:                                # %if.then.33
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB205_123
.LBB205_16:                             # %if.end.35
	jmp	.LBB205_17
.LBB205_17:                             # %do.body
	cmpq	$0, -4848(%rbp)
	je	.LBB205_19
# BB#18:                                # %if.then.37
	movl	$1, %esi
	movq	-4848(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB205_19:                             # %if.end.38
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4840(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4848(%rbp)
# BB#20:                                # %do.end
	xorl	%eax, %eax
	movl	%eax, %ecx
	leaq	-4840(%rbp), %rdx
	movq	$0, -4504(%rbp)
	movq	-4824(%rbp), %rsi
	movq	208(%rsi), %rsi
	shrq	$23, %rsi
	andq	$7, %rsi
	movl	%esi, %eax
	cmpl	$2, %eax
	sete	%dil
	addq	$2464, %rdx             # imm = 0x9A0
	movzbl	%dil, %eax
	andl	$1, %eax
	xorl	%r8d, %r8d
	movl	%r8d, %esi
	movq	%rsi, %rdi
	movq	%rdx, -4984(%rbp)       # 8-byte Spill
	movl	%eax, %edx
	movq	-4984(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -4992(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	callq	bidi_init_it
.LBB205_21:                             # %do.body.49
                                        # =>This Inner Loop Header: Depth=1
	movq	-4504(%rbp), %rax
	movq	%rax, -4864(%rbp)
	movq	-4864(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	callq	SCHARS
	movq	-5000(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB205_23
# BB#22:                                # %if.then.57
	jmp	.LBB205_25
.LBB205_23:                             # %if.end.58
                                        #   in Loop: Header=BB205_21 Depth=1
	leaq	-4840(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#24:                                # %do.cond
                                        #   in Loop: Header=BB205_21 Depth=1
	movq	-4504(%rbp), %rax
	movq	-16(%rbp), %rcx
	cmpq	336(%rcx), %rax
	jne	.LBB205_21
.LBB205_25:                             # %do.end.68
	jmp	.LBB205_26
.LBB205_26:                             # %do.body.69
	movq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB205_28
# BB#27:                                # %if.then.72
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB205_28:                             # %if.end.73
	xorl	%esi, %esi
	movq	-4848(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4848(%rbp)
# BB#29:                                # %do.end.75
	jmp	.LBB205_37
.LBB205_30:                             # %if.else.76
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB205_32
# BB#31:                                # %cond.true
	movq	-16(%rbp), %rax
	movl	2184(%rax), %ecx
	movl	%ecx, -5004(%rbp)       # 4-byte Spill
	jmp	.LBB205_33
.LBB205_32:                             # %cond.false
	movl	$1, %eax
	movl	%eax, -5004(%rbp)       # 4-byte Spill
	jmp	.LBB205_33
.LBB205_33:                             # %cond.end
	movl	-5004(%rbp), %eax       # 4-byte Reload
	movl	$4800, %ecx             # imm = 0x12C0
	movl	%ecx, %edx
	leaq	-4840(%rbp), %rsi
	movl	%eax, -4872(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -5016(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	-5016(%rbp), %rsi       # 8-byte Reload
	callq	memcpy
.LBB205_34:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4872(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -4872(%rbp)
	cmpl	$0, %eax
	je	.LBB205_36
# BB#35:                                # %while.body
                                        #   in Loop: Header=BB205_34 Depth=1
	leaq	-4840(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	jmp	.LBB205_34
.LBB205_36:                             # %while.end
	movq	-2368(%rbp), %rax
	movq	%rax, -4864(%rbp)
.LBB205_37:                             # %if.end.86
	jmp	.LBB205_38
.LBB205_38:                             # %if.end.87
	movq	-16(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB205_40
# BB#39:                                # %if.then.91
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4856(%rbp)
	jmp	.LBB205_41
.LBB205_40:                             # %if.else.94
	movq	$0, -4856(%rbp)
.LBB205_41:                             # %if.end.95
	movq	-16(%rbp), %rdi
	callq	underlying_face_id
	leaq	-40(%rbp), %r8
	xorl	%ecx, %ecx
	movl	%eax, -4868(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	-16(%rbp), %rdx
	movq	632(%rdx), %rsi
	movq	-4864(%rbp), %rdx
	movq	-4856(%rbp), %r9
	movl	-4868(%rbp), %eax
	movl	%ecx, -5020(%rbp)       # 4-byte Spill
	movq	%r9, %rcx
	movl	%eax, %r9d
	movl	$0, (%rsp)
	callq	face_at_string_position
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB205_42
	jmp	.LBB205_48
.LBB205_42:                             # %if.then.101
	movq	-4864(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	632(%rax), %rsi
	callq	string_pos
	movq	%rax, -4888(%rbp)
	movq	%rdx, -4880(%rbp)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SDATA
	movb	$1, %cl
	addq	-4880(%rbp), %rax
	movq	%rax, -4896(%rbp)
	testb	$1, %cl
	jne	.LBB205_43
	jmp	.LBB205_44
.LBB205_43:                             # %cond.true.106
	movl	-24(%rbp), %eax
	addl	$0, %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB205_45
	jmp	.LBB205_46
.LBB205_44:                             # %cond.false.112
	movslq	-24(%rbp), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB205_46
.LBB205_45:                             # %cond.true.122
	movslq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	jmp	.LBB205_47
.LBB205_46:                             # %cond.false.125
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5032(%rbp)       # 8-byte Spill
	jmp	.LBB205_47
.LBB205_47:                             # %cond.end.126
	movq	-5032(%rbp), %rax       # 8-byte Reload
	leaq	-4904(%rbp), %rsi
	movq	%rax, -4912(%rbp)
	movq	-4896(%rbp), %rdi
	callq	string_char_and_length
	movl	%eax, -4900(%rbp)
	movq	-16(%rbp), %rsi
	movq	16(%rsi), %rdi
	movq	-4912(%rbp), %rsi
	movl	-4900(%rbp), %edx
	movq	-4864(%rbp), %rcx
	movq	-16(%rbp), %r8
	movq	632(%r8), %r8
	callq	face_for_char
	movl	%eax, -24(%rbp)
.LBB205_48:                             # %if.end.132
	jmp	.LBB205_122
.LBB205_49:                             # %if.else.133
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jl	.LBB205_51
# BB#50:                                # %land.lhs.true.140
	testb	$1, -17(%rbp)
	je	.LBB205_53
.LBB205_51:                             # %lor.lhs.false.142
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jg	.LBB205_54
# BB#52:                                # %land.lhs.true.148
	testb	$1, -17(%rbp)
	je	.LBB205_54
.LBB205_53:                             # %if.then.151
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB205_123
.LBB205_54:                             # %if.end.153
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	addq	$100, %rax
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	312(%rax), %rdx
	movq	%rdx, -4928(%rbp)
	movq	320(%rax), %rax
	movq	%rax, -4920(%rbp)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB205_94
# BB#55:                                # %if.then.166
	testb	$1, -17(%rbp)
	je	.LBB205_70
# BB#56:                                # %if.then.168
	jmp	.LBB205_57
.LBB205_57:                             # %do.body.169
	movq	-4928(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB205_67
# BB#58:                                # %if.then.175
	jmp	.LBB205_59
.LBB205_59:                             # %do.body.176
	movq	-4920(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4920(%rbp)
	movq	-4920(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB205_61
# BB#60:                                # %if.then.182
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	addq	-4920(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4936(%rbp)
	jmp	.LBB205_62
.LBB205_61:                             # %if.else.187
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	addq	-4920(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4936(%rbp)
.LBB205_62:                             # %if.end.195
	jmp	.LBB205_63
.LBB205_63:                             # %while.cond.196
                                        # =>This Inner Loop Header: Depth=1
	movq	-4936(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	setne	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB205_64
	jmp	.LBB205_65
.LBB205_64:                             # %while.body.200
                                        #   in Loop: Header=BB205_63 Depth=1
	movq	-4936(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4936(%rbp)
	movq	-4920(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4920(%rbp)
	jmp	.LBB205_63
.LBB205_65:                             # %while.end.203
	jmp	.LBB205_66
.LBB205_66:                             # %do.end.205
	jmp	.LBB205_68
.LBB205_67:                             # %if.else.206
	movq	-4920(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -4920(%rbp)
.LBB205_68:                             # %if.end.209
	jmp	.LBB205_69
.LBB205_69:                             # %do.end.211
	jmp	.LBB205_93
.LBB205_70:                             # %if.else.212
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB205_72
# BB#71:                                # %if.then.216
	movq	-16(%rbp), %rax
	movslq	2184(%rax), %rax
	addq	-4928(%rbp), %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movslq	2128(%rax), %rax
	addq	-4920(%rbp), %rax
	movq	%rax, -4920(%rbp)
	jmp	.LBB205_92
.LBB205_72:                             # %if.else.226
	jmp	.LBB205_73
.LBB205_73:                             # %do.body.227
	movq	-4928(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4928(%rbp)
	movq	-16(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB205_89
# BB#74:                                # %if.then.233
	jmp	.LBB205_75
.LBB205_75:                             # %do.body.234
	movq	-4920(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB205_77
# BB#76:                                # %cond.true.241
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	jmp	.LBB205_78
.LBB205_77:                             # %cond.false.244
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5040(%rbp)       # 8-byte Spill
	jmp	.LBB205_78
.LBB205_78:                             # %cond.end.245
	movq	-5040(%rbp), %rax       # 8-byte Reload
	addq	-4920(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -4944(%rbp)
	movq	-4944(%rbp), %rax
	movzbl	(%rax), %edx
	andl	$128, %edx
	cmpl	$0, %edx
	jne	.LBB205_80
# BB#79:                                # %cond.true.256
	movl	$1, %eax
	movl	%eax, -5044(%rbp)       # 4-byte Spill
	jmp	.LBB205_87
.LBB205_80:                             # %cond.false.257
	movq	-4944(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB205_82
# BB#81:                                # %cond.true.261
	movl	$2, %eax
	movl	%eax, -5048(%rbp)       # 4-byte Spill
	jmp	.LBB205_86
.LBB205_82:                             # %cond.false.262
	movq	-4944(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB205_84
# BB#83:                                # %cond.true.266
	movl	$3, %eax
	movl	%eax, -5052(%rbp)       # 4-byte Spill
	jmp	.LBB205_85
.LBB205_84:                             # %cond.false.267
	movl	$5, %eax
	movl	$4, %ecx
	movq	-4944(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$8, %esi
	cmpl	$0, %esi
	setne	%dil
	xorb	$-1, %dil
	testb	$1, %dil
	cmovnel	%ecx, %eax
	movl	%eax, -5052(%rbp)       # 4-byte Spill
.LBB205_85:                             # %cond.end.273
	movl	-5052(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5048(%rbp)       # 4-byte Spill
.LBB205_86:                             # %cond.end.275
	movl	-5048(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5044(%rbp)       # 4-byte Spill
.LBB205_87:                             # %cond.end.277
	movl	-5044(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	addq	-4920(%rbp), %rcx
	movq	%rcx, -4920(%rbp)
# BB#88:                                # %do.end.283
	jmp	.LBB205_90
.LBB205_89:                             # %if.else.284
	movq	-4920(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4920(%rbp)
.LBB205_90:                             # %if.end.287
	jmp	.LBB205_91
.LBB205_91:                             # %do.end.289
	jmp	.LBB205_92
.LBB205_92:                             # %if.end.290
	jmp	.LBB205_93
.LBB205_93:                             # %if.end.291
	jmp	.LBB205_114
.LBB205_94:                             # %if.else.292
	testb	$1, -17(%rbp)
	je	.LBB205_106
# BB#95:                                # %if.then.294
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2316(%rax), %ecx
	jg	.LBB205_97
# BB#96:                                # %if.then.300
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	movl	%ecx, -4(%rbp)
	jmp	.LBB205_123
.LBB205_97:                             # %if.end.302
	jmp	.LBB205_98
.LBB205_98:                             # %do.body.303
	cmpq	$0, -4848(%rbp)
	je	.LBB205_100
# BB#99:                                # %if.then.305
	movl	$1, %esi
	movq	-4848(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB205_100:                            # %if.end.306
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4840(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -4848(%rbp)
# BB#101:                               # %do.end.309
	leaq	-4840(%rbp), %rdi
	xorl	%esi, %esi
	movl	-2436(%rbp), %eax
	movl	%eax, -4948(%rbp)
	callq	move_it_vertically_backward
	leaq	-4840(%rbp), %rdi
	movl	$1, %ecx
	movq	current_buffer, %rdx
	movq	768(%rdx), %rsi
	movl	-4948(%rbp), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	move_it_in_display_line
	movq	-4528(%rbp), %rsi
	movq	%rsi, -4928(%rbp)
	movq	-4520(%rbp), %rsi
	movq	%rsi, -4920(%rbp)
# BB#102:                               # %do.body.315
	movq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB205_104
# BB#103:                               # %if.then.318
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
.LBB205_104:                            # %if.end.319
	xorl	%esi, %esi
	movq	-4848(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -4848(%rbp)
# BB#105:                               # %do.end.321
	jmp	.LBB205_113
.LBB205_106:                            # %if.else.322
	movq	-16(%rbp), %rax
	cmpl	$1, 2104(%rax)
	jne	.LBB205_108
# BB#107:                               # %cond.true.327
	movq	-16(%rbp), %rax
	movl	2184(%rax), %ecx
	movl	%ecx, -5056(%rbp)       # 4-byte Spill
	jmp	.LBB205_109
.LBB205_108:                            # %cond.false.330
	movl	$1, %eax
	movl	%eax, -5056(%rbp)       # 4-byte Spill
	jmp	.LBB205_109
.LBB205_109:                            # %cond.end.331
	movl	-5056(%rbp), %eax       # 4-byte Reload
	movl	$4800, %ecx             # imm = 0x12C0
	movl	%ecx, %edx
	leaq	-4840(%rbp), %rsi
	movl	%eax, -4952(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -5064(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	-5064(%rbp), %rsi       # 8-byte Reload
	callq	memcpy
.LBB205_110:                            # %while.cond.333
                                        # =>This Inner Loop Header: Depth=1
	movl	-4952(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -4952(%rbp)
	cmpl	$0, %eax
	je	.LBB205_112
# BB#111:                               # %while.body.336
                                        #   in Loop: Header=BB205_110 Depth=1
	leaq	-4840(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	jmp	.LBB205_110
.LBB205_112:                            # %while.end.338
	movq	-2368(%rbp), %rax
	movq	%rax, -4928(%rbp)
	movq	-2376(%rbp), %rax
	movq	%rax, -4920(%rbp)
.LBB205_113:                            # %if.end.345
	jmp	.LBB205_114
.LBB205_114:                            # %if.end.346
	leaq	-40(%rbp), %rdx
	xorl	%r8d, %r8d
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-4928(%rbp), %rsi
	movslq	-28(%rbp), %rcx
	callq	face_at_buffer_position
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rcx
	movb	88(%rcx), %r10b
	andb	$1, %r10b
	testb	$1, %r10b
	je	.LBB205_121
# BB#115:                               # %if.then.355
	movq	-4920(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movb	$1, %cl
	movl	%eax, -4956(%rbp)
	testb	$1, %cl
	jne	.LBB205_116
	jmp	.LBB205_117
.LBB205_116:                            # %cond.true.360
	movl	-24(%rbp), %eax
	addl	$0, %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB205_118
	jmp	.LBB205_119
.LBB205_117:                            # %cond.false.368
	movslq	-24(%rbp), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB205_119
.LBB205_118:                            # %cond.true.378
	movslq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -5072(%rbp)       # 8-byte Spill
	jmp	.LBB205_120
.LBB205_119:                            # %cond.false.384
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5072(%rbp)       # 8-byte Spill
	jmp	.LBB205_120
.LBB205_120:                            # %cond.end.385
	movq	-5072(%rbp), %rax       # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -4968(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	-4968(%rbp), %rsi
	movl	-4956(%rbp), %edx
	movq	-4928(%rbp), %rcx
	movq	%rcx, -5080(%rbp)       # 8-byte Spill
	movq	%rax, -5088(%rbp)       # 8-byte Spill
	movq	%rsi, -5096(%rbp)       # 8-byte Spill
	movl	%edx, -5100(%rbp)       # 4-byte Spill
	callq	builtin_lisp_symbol
	movq	-5088(%rbp), %rdi       # 8-byte Reload
	movq	-5096(%rbp), %rsi       # 8-byte Reload
	movl	-5100(%rbp), %edx       # 4-byte Reload
	movq	-5080(%rbp), %rcx       # 8-byte Reload
	movq	%rax, %r8
	callq	face_for_char
	movl	%eax, -24(%rbp)
.LBB205_121:                            # %if.end.391
	jmp	.LBB205_122
.LBB205_122:                            # %if.end.392
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB205_123:                            # %return
	movl	-4(%rbp), %eax
	addq	$5120, %rsp             # imm = 0x1400
	popq	%rbp
	retq
.Lfunc_end205:
	.size	face_before_or_after_it_pos, .Lfunc_end205-face_before_or_after_it_pos
	.cfi_endproc

	.align	16, 0x90
	.type	underlying_face_id,@function
underlying_face_id:                     # @underlying_face_id
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp637:
	.cfi_def_cfa_offset 16
.Ltmp638:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp639:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	2120(%rdi), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	2088(%rdi), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -16(%rbp)
	jl	.LBB206_6
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	xorl	%edi, %edi
	movslq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	$648, %rcx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rcx
	movq	(%rcx), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB206_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB206_1 Depth=1
	movslq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	$648, %rcx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rcx
	movl	120(%rcx), %edx
	movl	%edx, -12(%rbp)
.LBB206_4:                              # %if.end
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_5
.LBB206_5:                              # %for.inc
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_1
.LBB206_6:                              # %for.end
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end206:
	.size	underlying_face_id, .Lfunc_end206-underlying_face_id
	.cfi_endproc

	.align	16, 0x90
	.type	string_pos,@function
string_pos:                             # @string_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp640:
	.cfi_def_cfa_offset 16
.Ltmp641:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp642:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rsi, -48(%rbp)
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	string_char_to_byte
	movq	%rax, -40(%rbp)
	movups	-48(%rbp), %xmm0
	movaps	%xmm0, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end207:
	.size	string_pos, .Lfunc_end207-string_pos
	.cfi_endproc

	.align	16, 0x90
	.type	next_overlay_string,@function
next_overlay_string:                    # @next_overlay_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp643:
	.cfi_def_cfa_offset 16
.Ltmp644:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp645:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	328(%rdi), %rax
	addq	$1, %rax
	movq	%rax, 328(%rdi)
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movq	-8(%rbp), %rdi
	cmpq	360(%rdi), %rax
	jne	.LBB208_10
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movl	2088(%rax), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rax
	movq	-8(%rbp), %rdx
	addq	$648, %rdx              # imm = 0x288
	imulq	$288, %rax, %rax        # imm = 0x120
	addq	%rax, %rdx
	movb	260(%rdx), %sil
	shrb	$3, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	88(%rax), %dil
	shlb	$5, %sil
	andb	$-33, %dil
	orb	%sil, %dil
	movb	%dil, 88(%rax)
	movq	-8(%rbp), %rdi
	callq	pop_it
	movq	-8(%rbp), %rax
	movq	$-1, 328(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 360(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 2088(%rax)
	jle	.LBB208_5
# BB#2:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB208_3
	jmp	.LBB208_5
.LBB208_3:                              # %land.lhs.true.10
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	jne	.LBB208_5
# BB#4:                                 # %if.then.14
	movq	-8(%rbp), %rdi
	callq	pop_it
.LBB208_5:                              # %if.end
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-65, %cx
	orw	$64, %cx
	movw	%cx, 2112(%rax)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB208_9
# BB#6:                                 # %land.lhs.true.21
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jl	.LBB208_9
# BB#7:                                 # %land.lhs.true.24
	movq	-8(%rbp), %rax
	movq	368(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jl	.LBB208_9
# BB#8:                                 # %if.then.27
	movq	-8(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-33, %cx
	orw	$32, %cx
	movw	%cx, 2112(%rax)
.LBB208_9:                              # %if.end.31
	movq	-8(%rbp), %rax
	movq	$-1, 368(%rax)
	jmp	.LBB208_18
.LBB208_10:                             # %if.else
	movl	$16, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	328(%rdx), %rax
	cqto
	idivq	%rcx
	movl	%edx, %esi
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rcx
	cmpq	$0, 328(%rcx)
	je	.LBB208_13
# BB#11:                                # %land.lhs.true.38
	cmpl	$0, -12(%rbp)
	jne	.LBB208_13
# BB#12:                                # %if.then.41
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	368(%rax), %rsi
	callq	load_overlay_strings
.LBB208_13:                             # %if.end.43
	movslq	-12(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	376(%rcx,%rax,8), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 632(%rcx)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRING_MULTIBYTE
	movq	-8(%rbp), %rcx
	andb	$1, %al
	movb	88(%rcx), %dl
	andb	$-2, %dl
	orb	%al, %dl
	movb	%dl, 88(%rcx)
	movq	-8(%rbp), %rcx
	movq	$0, 336(%rcx)
	movq	-8(%rbp), %rcx
	movq	$0, 344(%rcx)
	movq	-8(%rbp), %rcx
	movl	$2, 24(%rcx)
	movq	-8(%rbp), %rcx
	movq	$0, 32(%rcx)
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	SCHARS
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 2136(%rax)
	jl	.LBB208_15
# BB#14:                                # %if.then.62
	movq	-8(%rbp), %rax
	movq	$0, 2136(%rax)
.LBB208_15:                             # %if.end.65
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB208_17
# BB#16:                                # %if.then.70
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 4720(%rcx)
	movq	-8(%rbp), %rax
	movq	$0, 4728(%rax)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	xorl	%edx, %edx
	movl	%edx, %ecx
	movq	-8(%rbp), %rdi
	movq	%rax, 4736(%rdi)
	movq	-8(%rbp), %rax
	movq	368(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 4744(%rdi)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	shrb	$2, %sil
	andb	$1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	4752(%rax), %r8b
	andb	$-2, %r8b
	orb	%sil, %r8b
	movb	%r8b, 4752(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %sil
	andb	$1, %sil
	xorb	$-1, %sil
	movq	-8(%rbp), %rax
	andb	$1, %sil
	movb	4752(%rax), %r8b
	shlb	$1, %sil
	andb	$-3, %r8b
	orb	%sil, %r8b
	movb	%r8b, 4752(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 4760(%rdi)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$2, %edx
	sete	%sil
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%sil, %edx
	andl	$1, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %edi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	movq	%rax, %rcx
	callq	bidi_init_it
.LBB208_17:                             # %if.end.112
	jmp	.LBB208_18
.LBB208_18:                             # %if.end.113
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end208:
	.size	next_overlay_string, .Lfunc_end208-next_overlay_string
	.cfi_endproc

	.align	16, 0x90
	.type	get_overlay_strings,@function
get_overlay_strings:                    # @get_overlay_strings
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp646:
	.cfi_def_cfa_offset 16
.Ltmp647:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp648:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movl	$1, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, 632(%rsi)
	movq	-8(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	get_overlay_strings_1
	movq	-8(%rbp), %rdi
	movb	%al, -17(%rbp)          # 1-byte Spill
	callq	CHECK_IT
	movq	-8(%rbp), %rsi
	movq	632(%rsi), %rdi
	callq	STRINGP
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end209:
	.size	get_overlay_strings, .Lfunc_end209-get_overlay_strings
	.cfi_endproc

	.align	16, 0x90
	.type	load_overlay_strings,@function
load_overlay_strings:                   # @load_overlay_strings
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp649:
	.cfi_def_cfa_offset 16
.Ltmp650:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp651:
	.cfi_def_cfa_register %rbp
	subq	$1104, %rsp             # imm = 0x450
	leaq	-752(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	$0, -80(%rbp)
	movq	$20, -760(%rbp)
	movq	%rax, -768(%rbp)
	movq	$16384, -776(%rbp)      # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -784(%rbp)
	movb	$0, -785(%rbp)
	cmpq	$0, -16(%rbp)
	jg	.LBB210_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -16(%rbp)
.LBB210_2:                              # %if.end
	movq	current_buffer, %rax
	movq	944(%rax), %rax
	movq	%rax, -56(%rbp)
.LBB210_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -56(%rbp)
	je	.LBB210_61
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$1, %esi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rax
	andq	$7, %rax
	movl	%eax, %esi
	cmpl	$1, %esi
	jne	.LBB210_7
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB210_7
# BB#6:                                 # %cond.true
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rdi
	callq	marker_position
	movq	%rax, -864(%rbp)        # 8-byte Spill
	jmp	.LBB210_8
.LBB210_7:                              # %cond.false
	callq	emacs_abort
.LBB210_8:                              # %cond.end
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB210_11
# BB#9:                                 # %land.lhs.true.21
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB210_11
# BB#10:                                # %cond.true.27
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rdi
	callq	marker_position
	movq	%rax, -872(%rbp)        # 8-byte Spill
	jmp	.LBB210_12
.LBB210_11:                             # %cond.false.31
	callq	emacs_abort
.LBB210_12:                             # %cond.end.32
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rcx
	cmpq	-16(%rbp), %rcx
	jge	.LBB210_14
# BB#13:                                # %if.then.36
	jmp	.LBB210_61
.LBB210_14:                             # %if.end.37
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_17
# BB#15:                                # %land.lhs.true.40
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_17
# BB#16:                                # %if.then.43
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_60
.LBB210_17:                             # %if.end.44
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$1018, %edi             # imm = 0x3FA
	movq	-24(%rbp), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-880(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB210_18
	jmp	.LBB210_20
.LBB210_18:                             # %land.lhs.true.49
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	-8(%rbp), %rdi
	cmpq	8(%rdi), %rax
	je	.LBB210_20
# BB#19:                                # %if.then.53
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_60
.LBB210_20:                             # %if.end.54
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	-24(%rbp), %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-888(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -48(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-896(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB210_22
# BB#21:                                # %cond.true.60
                                        #   in Loop: Header=BB210_3 Depth=1
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-904(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -908(%rbp)        # 4-byte Spill
	jmp	.LBB210_23
.LBB210_22:                             # %cond.false.64
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-48(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -908(%rbp)        # 4-byte Spill
.LBB210_23:                             # %cond.end.67
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	-908(%rbp), %eax        # 4-byte Reload
	movl	%eax, -100(%rbp)
	movq	-64(%rbp), %rcx
	cmpq	-16(%rbp), %rcx
	je	.LBB210_26
# BB#24:                                # %lor.lhs.false
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB210_41
# BB#25:                                # %land.lhs.true.73
                                        #   in Loop: Header=BB210_3 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB210_41
.LBB210_26:                             # %land.lhs.true.76
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$199, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-920(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB210_27
	jmp	.LBB210_41
.LBB210_27:                             # %land.lhs.true.81
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-40(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	je	.LBB210_41
# BB#28:                                # %if.then.84
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_29
.LBB210_29:                             # %do.body
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-80(%rbp), %rax
	cmpq	-760(%rbp), %rax
	jne	.LBB210_36
# BB#30:                                # %if.then.87
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-768(%rbp), %rax
	movq	%rax, -808(%rbp)
# BB#31:                                # %do.body.88
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-760(%rbp), %rax
	movq	-776(%rbp), %rcx
	shrq	$5, %rcx
	shrq	$1, %rcx
	cmpq	%rcx, %rax
	ja	.LBB210_33
# BB#32:                                # %if.then.92
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	-776(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -776(%rbp)
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -768(%rbp)
	jmp	.LBB210_34
.LBB210_33:                             # %if.else
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$64, %eax
	movl	%eax, %esi
	movq	-760(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -768(%rbp)
	movb	$1, -785(%rbp)
	movq	-768(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB210_34:                             # %if.end.95
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_35
.LBB210_35:                             # %do.end
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-768(%rbp), %rax
	movq	-808(%rbp), %rcx
	movq	-760(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-760(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -760(%rbp)
.LBB210_36:                             # %if.end.98
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$773, %edi              # imm = 0x305
	movq	-40(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-928(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -800(%rbp)
	movq	-800(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	jne	.LBB210_38
# BB#37:                                # %cond.true.108
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-800(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -936(%rbp)        # 8-byte Spill
	jmp	.LBB210_39
.LBB210_38:                             # %cond.false.109
                                        #   in Loop: Header=BB210_3 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	jmp	.LBB210_39
.LBB210_39:                             # %cond.end.110
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-936(%rbp), %rax        # 8-byte Reload
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-80(%rbp), %rax
	shlq	$5, %rax
	addq	-768(%rbp), %rax
	movb	$0, 24(%rax)
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
# BB#40:                                # %do.end.115
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_41
.LBB210_41:                             # %if.end.116
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_44
# BB#42:                                # %lor.lhs.false.119
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB210_59
# BB#43:                                # %land.lhs.true.122
                                        #   in Loop: Header=BB210_3 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB210_59
.LBB210_44:                             # %land.lhs.true.125
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$168, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-944(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB210_45
	jmp	.LBB210_59
.LBB210_45:                             # %land.lhs.true.130
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-40(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	je	.LBB210_59
# BB#46:                                # %if.then.133
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_47
.LBB210_47:                             # %do.body.134
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-80(%rbp), %rax
	cmpq	-760(%rbp), %rax
	jne	.LBB210_54
# BB#48:                                # %if.then.138
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-768(%rbp), %rax
	movq	%rax, -824(%rbp)
# BB#49:                                # %do.body.140
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-760(%rbp), %rax
	movq	-776(%rbp), %rcx
	shrq	$5, %rcx
	shrq	$1, %rcx
	cmpq	%rcx, %rax
	ja	.LBB210_51
# BB#50:                                # %if.then.145
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	-776(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -776(%rbp)
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -768(%rbp)
	jmp	.LBB210_52
.LBB210_51:                             # %if.else.149
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$64, %eax
	movl	%eax, %esi
	movq	-760(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -768(%rbp)
	movb	$1, -785(%rbp)
	movq	-768(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB210_52:                             # %if.end.151
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_53
.LBB210_53:                             # %do.end.152
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-768(%rbp), %rax
	movq	-824(%rbp), %rcx
	movq	-760(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-760(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -760(%rbp)
.LBB210_54:                             # %if.end.155
                                        #   in Loop: Header=BB210_3 Depth=1
	movl	$773, %edi              # imm = 0x305
	movq	-40(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -952(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-952(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -816(%rbp)
	movq	-816(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	jne	.LBB210_56
# BB#55:                                # %cond.true.167
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-816(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -960(%rbp)        # 8-byte Spill
	jmp	.LBB210_57
.LBB210_56:                             # %cond.false.169
                                        #   in Loop: Header=BB210_3 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -960(%rbp)        # 8-byte Spill
	jmp	.LBB210_57
.LBB210_57:                             # %cond.end.170
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-960(%rbp), %rax        # 8-byte Reload
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-80(%rbp), %rax
	shlq	$5, %rax
	addq	-768(%rbp), %rax
	movb	$1, 24(%rax)
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
# BB#58:                                # %do.end.177
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_59
.LBB210_59:                             # %if.end.178
                                        #   in Loop: Header=BB210_3 Depth=1
	jmp	.LBB210_60
.LBB210_60:                             # %for.inc
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB210_3
.LBB210_61:                             # %for.end
	movq	current_buffer, %rax
	movq	952(%rax), %rax
	movq	%rax, -56(%rbp)
.LBB210_62:                             # %for.cond.179
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -56(%rbp)
	je	.LBB210_120
# BB#63:                                # %for.body.181
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$1, %esi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rax
	andq	$7, %rax
	movl	%eax, %esi
	cmpl	$1, %esi
	jne	.LBB210_66
# BB#64:                                # %land.lhs.true.189
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB210_66
# BB#65:                                # %cond.true.195
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	16(%rax), %rdi
	callq	marker_position
	movq	%rax, -968(%rbp)        # 8-byte Spill
	jmp	.LBB210_67
.LBB210_66:                             # %cond.false.199
	callq	emacs_abort
.LBB210_67:                             # %cond.end.200
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB210_70
# BB#68:                                # %land.lhs.true.208
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB210_70
# BB#69:                                # %cond.true.214
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-24(%rbp), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rdi
	callq	marker_position
	movq	%rax, -976(%rbp)        # 8-byte Spill
	jmp	.LBB210_71
.LBB210_70:                             # %cond.false.218
	callq	emacs_abort
.LBB210_71:                             # %cond.end.219
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-976(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-64(%rbp), %rcx
	cmpq	-16(%rbp), %rcx
	jle	.LBB210_73
# BB#72:                                # %if.then.223
	jmp	.LBB210_120
.LBB210_73:                             # %if.end.224
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_76
# BB#74:                                # %land.lhs.true.227
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_76
# BB#75:                                # %if.then.230
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_119
.LBB210_76:                             # %if.end.231
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$1018, %edi             # imm = 0x3FA
	movq	-24(%rbp), %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB210_77
	jmp	.LBB210_79
.LBB210_77:                             # %land.lhs.true.236
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	-8(%rbp), %rdi
	cmpq	8(%rdi), %rax
	je	.LBB210_79
# BB#78:                                # %if.then.241
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_119
.LBB210_79:                             # %if.end.242
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	-24(%rbp), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-992(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -48(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -1000(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1000(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB210_81
# BB#80:                                # %cond.true.249
                                        #   in Loop: Header=BB210_62 Depth=1
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -1008(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1008(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -1012(%rbp)       # 4-byte Spill
	jmp	.LBB210_82
.LBB210_81:                             # %cond.false.255
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-48(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -1012(%rbp)       # 4-byte Spill
.LBB210_82:                             # %cond.end.258
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	-1012(%rbp), %eax       # 4-byte Reload
	movl	%eax, -100(%rbp)
	movq	-64(%rbp), %rcx
	cmpq	-16(%rbp), %rcx
	je	.LBB210_85
# BB#83:                                # %lor.lhs.false.262
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB210_100
# BB#84:                                # %land.lhs.true.265
                                        #   in Loop: Header=BB210_62 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB210_100
.LBB210_85:                             # %land.lhs.true.268
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$199, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -1024(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1024(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB210_86
	jmp	.LBB210_100
.LBB210_86:                             # %land.lhs.true.273
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-40(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	je	.LBB210_100
# BB#87:                                # %if.then.276
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_88
.LBB210_88:                             # %do.body.277
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-80(%rbp), %rax
	cmpq	-760(%rbp), %rax
	jne	.LBB210_95
# BB#89:                                # %if.then.281
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-768(%rbp), %rax
	movq	%rax, -840(%rbp)
# BB#90:                                # %do.body.283
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-760(%rbp), %rax
	movq	-776(%rbp), %rcx
	shrq	$5, %rcx
	shrq	$1, %rcx
	cmpq	%rcx, %rax
	ja	.LBB210_92
# BB#91:                                # %if.then.288
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	-776(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -776(%rbp)
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -768(%rbp)
	jmp	.LBB210_93
.LBB210_92:                             # %if.else.292
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$64, %eax
	movl	%eax, %esi
	movq	-760(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -768(%rbp)
	movb	$1, -785(%rbp)
	movq	-768(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB210_93:                             # %if.end.294
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_94
.LBB210_94:                             # %do.end.295
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-768(%rbp), %rax
	movq	-840(%rbp), %rcx
	movq	-760(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-760(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -760(%rbp)
.LBB210_95:                             # %if.end.298
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$773, %edi              # imm = 0x305
	movq	-40(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1032(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -832(%rbp)
	movq	-832(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	jne	.LBB210_97
# BB#96:                                # %cond.true.310
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-832(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -1040(%rbp)       # 8-byte Spill
	jmp	.LBB210_98
.LBB210_97:                             # %cond.false.312
                                        #   in Loop: Header=BB210_62 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -1040(%rbp)       # 8-byte Spill
	jmp	.LBB210_98
.LBB210_98:                             # %cond.end.313
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-1040(%rbp), %rax       # 8-byte Reload
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-80(%rbp), %rax
	shlq	$5, %rax
	addq	-768(%rbp), %rax
	movb	$0, 24(%rax)
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
# BB#99:                                # %do.end.320
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_100
.LBB210_100:                            # %if.end.321
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB210_103
# BB#101:                               # %lor.lhs.false.324
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB210_118
# BB#102:                               # %land.lhs.true.327
                                        #   in Loop: Header=BB210_62 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB210_118
.LBB210_103:                            # %land.lhs.true.330
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$168, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1048(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB210_104
	jmp	.LBB210_118
.LBB210_104:                            # %land.lhs.true.335
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-40(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	je	.LBB210_118
# BB#105:                               # %if.then.338
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_106
.LBB210_106:                            # %do.body.339
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-80(%rbp), %rax
	cmpq	-760(%rbp), %rax
	jne	.LBB210_113
# BB#107:                               # %if.then.343
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-768(%rbp), %rax
	movq	%rax, -856(%rbp)
# BB#108:                               # %do.body.345
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-760(%rbp), %rax
	movq	-776(%rbp), %rcx
	shrq	$5, %rcx
	shrq	$1, %rcx
	cmpq	%rcx, %rax
	ja	.LBB210_110
# BB#109:                               # %if.then.350
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	-776(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -776(%rbp)
	movq	-760(%rbp), %rax
	shlq	$6, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -768(%rbp)
	jmp	.LBB210_111
.LBB210_110:                            # %if.else.354
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$64, %eax
	movl	%eax, %esi
	movq	-760(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -768(%rbp)
	movb	$1, -785(%rbp)
	movq	-768(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB210_111:                            # %if.end.356
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_112
.LBB210_112:                            # %do.end.357
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-768(%rbp), %rax
	movq	-856(%rbp), %rcx
	movq	-760(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-760(%rbp), %rax
	shlq	$1, %rax
	movq	%rax, -760(%rbp)
.LBB210_113:                            # %if.end.360
                                        #   in Loop: Header=BB210_62 Depth=1
	movl	$773, %edi              # imm = 0x305
	movq	-40(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Foverlay_get
	movq	%rax, -848(%rbp)
	movq	-848(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	andl	$-5, %edx
	cmpl	$2, %edx
	jne	.LBB210_115
# BB#114:                               # %cond.true.372
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-848(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -1064(%rbp)       # 8-byte Spill
	jmp	.LBB210_116
.LBB210_115:                            # %cond.false.374
                                        #   in Loop: Header=BB210_62 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	jmp	.LBB210_116
.LBB210_116:                            # %cond.end.375
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	-80(%rbp), %rcx
	shlq	$5, %rcx
	addq	-768(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-80(%rbp), %rax
	shlq	$5, %rax
	addq	-768(%rbp), %rax
	movb	$1, 24(%rax)
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
# BB#117:                               # %do.end.382
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_118
.LBB210_118:                            # %if.end.383
                                        #   in Loop: Header=BB210_62 Depth=1
	jmp	.LBB210_119
.LBB210_119:                            # %for.inc.384
                                        #   in Loop: Header=BB210_62 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB210_62
.LBB210_120:                            # %for.end.386
	cmpq	$1, -80(%rbp)
	jle	.LBB210_122
# BB#121:                               # %if.then.389
	movl	$32, %eax
	movl	%eax, %edx
	movabsq	$compare_overlay_entries, %rcx
	movq	-768(%rbp), %rsi
	movq	-80(%rbp), %rdi
	movq	%rdi, -1072(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	-1072(%rbp), %rsi       # 8-byte Reload
	callq	qsort
.LBB210_122:                            # %if.end.390
	movq	-80(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 360(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 368(%rcx)
	movq	$0, -88(%rbp)
	movq	-8(%rbp), %rax
	movq	328(%rax), %rax
	movq	%rax, -96(%rbp)
.LBB210_123:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$16, -88(%rbp)
	movb	%cl, -1073(%rbp)        # 1-byte Spill
	jge	.LBB210_125
# BB#124:                               # %land.rhs
                                        #   in Loop: Header=BB210_123 Depth=1
	movq	-96(%rbp), %rax
	cmpq	-80(%rbp), %rax
	setl	%cl
	movb	%cl, -1073(%rbp)        # 1-byte Spill
.LBB210_125:                            # %land.end
                                        #   in Loop: Header=BB210_123 Depth=1
	movb	-1073(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB210_126
	jmp	.LBB210_127
.LBB210_126:                            # %while.body
                                        #   in Loop: Header=BB210_123 Depth=1
	movq	-96(%rbp), %rax
	shlq	$5, %rax
	addq	-768(%rbp), %rax
	movq	8(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rax, 376(%rdx,%rcx,8)
	movq	-96(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -96(%rbp)
	shlq	$5, %rax
	addq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -88(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rax, 504(%rdx,%rcx,8)
	jmp	.LBB210_123
.LBB210_127:                            # %while.end
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
# BB#128:                               # %do.body.404
	testb	$1, -785(%rbp)
	je	.LBB210_130
# BB#129:                               # %if.then.406
	xorl	%edi, %edi
	movb	$0, -785(%rbp)
	movq	-784(%rbp), %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1088(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -1096(%rbp)       # 8-byte Spill
.LBB210_130:                            # %if.end.409
	jmp	.LBB210_131
.LBB210_131:                            # %do.end.410
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end210:
	.size	load_overlay_strings, .Lfunc_end210-load_overlay_strings
	.cfi_endproc

	.align	16, 0x90
	.type	compare_overlay_entries,@function
compare_overlay_entries:                # @compare_overlay_entries
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp652:
	.cfi_def_cfa_offset 16
.Ltmp653:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp654:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rsi
	movb	24(%rsi), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movq	-32(%rbp), %rsi
	movb	24(%rsi), %al
	andb	$1, %al
	movzbl	%al, %edx
	cmpl	%edx, %ecx
	je	.LBB211_5
# BB#1:                                 # %if.then
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	cmpq	(%rcx), %rax
	jne	.LBB211_3
# BB#2:                                 # %if.then.8
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	movq	-24(%rbp), %rdx
	movb	24(%rdx), %sil
	testb	$1, %sil
	cmovnel	%ecx, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_4
.LBB211_3:                              # %if.else
	movl	$1, %eax
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-24(%rbp), %rdx
	movb	24(%rdx), %sil
	testb	$1, %sil
	cmovnel	%ecx, %eax
	movl	%eax, -36(%rbp)
.LBB211_4:                              # %if.end
	jmp	.LBB211_12
.LBB211_5:                              # %if.else.16
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rcx
	cmpq	16(%rcx), %rax
	je	.LBB211_10
# BB#6:                                 # %if.then.20
	movq	-24(%rbp), %rax
	testb	$1, 24(%rax)
	je	.LBB211_8
# BB#7:                                 # %if.then.23
	movl	$1, %eax
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-32(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	-24(%rbp), %rsi
	cmpq	16(%rsi), %rdx
	cmovll	%ecx, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_9
.LBB211_8:                              # %if.else.29
	movl	$1, %eax
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-24(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	-32(%rbp), %rsi
	cmpq	16(%rsi), %rdx
	cmovll	%ecx, %eax
	movl	%eax, -36(%rbp)
.LBB211_9:                              # %if.end.35
	jmp	.LBB211_11
.LBB211_10:                             # %if.else.36
	movl	$0, -36(%rbp)
.LBB211_11:                             # %if.end.37
	jmp	.LBB211_12
.LBB211_12:                             # %if.end.38
	movl	-36(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end211:
	.size	compare_overlay_entries, .Lfunc_end211-compare_overlay_entries
	.cfi_endproc

	.align	16, 0x90
	.type	next_overlay_change,@function
next_overlay_change:                    # @next_overlay_change
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp655:
	.cfi_def_cfa_offset 16
.Ltmp656:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp657:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	$16384, -48(%rbp)       # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -56(%rbp)
	movb	$0, -57(%rbp)
# BB#1:                                 # %do.body
	movq	$40, -72(%rbp)
# BB#2:                                 # %do.body.1
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rcx
	shrq	$3, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB212_4
# BB#3:                                 # %if.then
	movq	-72(%rbp), %rax
	shlq	$3, %rax
	movq	-48(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -48(%rbp)
	movq	-72(%rbp), %rax
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -40(%rbp)
	jmp	.LBB212_5
.LBB212_4:                              # %if.else
	movl	$8, %eax
	movl	%eax, %esi
	movq	-72(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -40(%rbp)
	movb	$1, -57(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB212_5:                              # %if.end
	jmp	.LBB212_6
.LBB212_6:                              # %do.end
	xorl	%esi, %esi
	leaq	-40(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-32(%rbp), %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movl	$1, %eax
	movq	-8(%rbp), %rdi
	subq	$16, %rsp
	movl	$1, (%rsp)
	movl	%eax, -92(%rbp)         # 4-byte Spill
	callq	overlays_at
	addq	$16, %rsp
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jle	.LBB212_13
# BB#7:                                 # %if.then.7
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)
# BB#8:                                 # %do.body.8
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rcx
	shrq	$3, %rcx
	shrq	$0, %rcx
	cmpq	%rcx, %rax
	ja	.LBB212_10
# BB#9:                                 # %if.then.12
	movq	-72(%rbp), %rax
	shlq	$3, %rax
	movq	-48(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -48(%rbp)
	movq	-72(%rbp), %rax
	leaq	15(,%rax,8), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -40(%rbp)
	jmp	.LBB212_11
.LBB212_10:                             # %if.else.16
	movl	$8, %eax
	movl	%eax, %esi
	movq	-72(%rbp), %rdi
	callq	xnmalloc
	movabsq	$xfree, %rdi
	movq	%rax, -40(%rbp)
	movb	$1, -57(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	callq	record_unwind_protect_ptr
.LBB212_11:                             # %if.end.18
	jmp	.LBB212_12
.LBB212_12:                             # %do.end.19
	xorl	%esi, %esi
	leaq	-40(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-32(%rbp), %r8
	xorl	%eax, %eax
	movl	%eax, %r9d
	movl	$1, %eax
	movq	-8(%rbp), %rdi
	subq	$16, %rsp
	movl	$1, (%rsp)
	movl	%eax, -96(%rbp)         # 4-byte Spill
	callq	overlays_at
	addq	$16, %rsp
	movq	%rax, -24(%rbp)
.LBB212_13:                             # %if.end.21
	jmp	.LBB212_14
.LBB212_14:                             # %do.end.22
	movq	$0, -16(%rbp)
.LBB212_15:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB212_25
# BB#16:                                # %for.body
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	(%rcx,%rax,8), %rdi
	callq	XOVERLAY
	movq	24(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$1, %edx
	jne	.LBB212_19
# BB#17:                                # %land.lhs.true
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-80(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB212_19
# BB#18:                                # %cond.true
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-80(%rbp), %rdi
	callq	marker_position
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB212_20
.LBB212_19:                             # %cond.false
	callq	emacs_abort
.LBB212_20:                             # %cond.end
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rcx
	cmpq	-88(%rbp), %rcx
	jge	.LBB212_22
# BB#21:                                # %cond.true.33
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB212_23
.LBB212_22:                             # %cond.false.34
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB212_23:                             # %cond.end.35
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -32(%rbp)
# BB#24:                                # %for.inc
                                        #   in Loop: Header=BB212_15 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB212_15
.LBB212_25:                             # %for.end
	jmp	.LBB212_26
.LBB212_26:                             # %do.body.37
	testb	$1, -57(%rbp)
	je	.LBB212_28
# BB#27:                                # %if.then.38
	xorl	%edi, %edi
	movb	$0, -57(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB212_28:                             # %if.end.41
	jmp	.LBB212_29
.LBB212_29:                             # %do.end.42
	movq	-32(%rbp), %rax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end212:
	.size	next_overlay_change, .Lfunc_end212-next_overlay_change
	.cfi_endproc

	.align	16, 0x90
	.type	merge_escape_glyph_face,@function
merge_escape_glyph_face:                # @merge_escape_glyph_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp658:
	.cfi_def_cfa_offset 16
.Ltmp659:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp660:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	cmpq	last_escape_glyph_frame, %rdi
	jne	.LBB213_3
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	cmpl	last_escape_glyph_face_id, %ecx
	jne	.LBB213_3
# BB#2:                                 # %if.then
	movl	last_escape_glyph_merged_face_id, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_4
.LBB213_3:                              # %if.else
	movl	$375, %edi              # imm = 0x177
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movq	-8(%rbp), %rcx
	movl	2108(%rcx), %ecx
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, last_escape_glyph_frame
	movq	-8(%rbp), %rsi
	movl	2108(%rsi), %eax
	movl	%eax, last_escape_glyph_face_id
	movl	-12(%rbp), %eax
	movl	%eax, last_escape_glyph_merged_face_id
.LBB213_4:                              # %if.end
	movl	-12(%rbp), %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end213:
	.size	merge_escape_glyph_face, .Lfunc_end213-merge_escape_glyph_face
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_buffer,@function
next_element_from_buffer:               # @next_element_from_buffer
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp661:
	.cfi_def_cfa_offset 16
.Ltmp662:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp663:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)
	movb	$1, -17(%rbp)
	movq	-16(%rbp), %rdi
	movl	2456(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB214_3
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB214_3
# BB#2:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	get_visually_first_element
	movq	-16(%rbp), %rdi
	movq	312(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, 2296(%rax)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, 2304(%rdi)
.LBB214_3:                              # %if.end
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	32(%rcx), %rax
	jl	.LBB214_22
# BB#4:                                 # %if.then.12
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jl	.LBB214_12
# BB#5:                                 # %if.then.17
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$5, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB214_7
# BB#6:                                 # %if.then.22
	movb	$0, -18(%rbp)
	jmp	.LBB214_8
.LBB214_7:                              # %if.else
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rcx
	movw	2112(%rcx), %dx
	andw	$-33, %dx
	orw	$32, %dx
	movw	%dx, 2112(%rcx)
	movq	-16(%rbp), %rdi
	callq	get_overlay_strings
	andb	$1, %al
	movb	%al, -18(%rbp)
.LBB214_8:                              # %if.end.26
	testb	$1, -18(%rbp)
	je	.LBB214_10
# BB#9:                                 # %if.then.27
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movb	%al, -17(%rbp)
	jmp	.LBB214_11
.LBB214_10:                             # %if.else.30
	movq	-16(%rbp), %rax
	movl	$5, 2104(%rax)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 2296(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 2304(%rax)
	movb	$0, -17(%rbp)
.LBB214_11:                             # %if.end.34
	jmp	.LBB214_21
.LBB214_12:                             # %if.else.35
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB214_16
# BB#13:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-16(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	je	.LBB214_16
# BB#14:                                # %lor.lhs.false.47
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	32(%rcx), %rax
	je	.LBB214_16
# BB#15:                                # %if.then.54
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	32(%rax), %rsi
	callq	handle_stop_backwards
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-65, %cx
	movw	%cx, 2112(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	movl	%edx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB214_80
.LBB214_16:                             # %if.else.62
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB214_20
# BB#17:                                # %if.then.68
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movsbl	2516(%rax), %edx
	movq	-16(%rbp), %rax
	movzbl	2682(%rax), %esi
	cmpl	%esi, %edx
	jne	.LBB214_19
# BB#18:                                # %if.then.80
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
.LBB214_19:                             # %if.end.82
	jmp	.LBB214_20
.LBB214_20:                             # %if.end.83
	movq	-16(%rbp), %rdi
	callq	handle_stop
	movq	-16(%rbp), %rdi
	movw	2112(%rdi), %ax
	andw	$-65, %ax
	movw	%ax, 2112(%rdi)
	movq	-16(%rbp), %rdi
	movl	24(%rdi), %ecx
	movl	%ecx, %edi
	movq	get_next_element(,%rdi,8), %rdi
	movq	-16(%rbp), %rdx
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	-48(%rbp), %rdx         # 8-byte Reload
	callq	*%rdx
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB214_80
.LBB214_21:                             # %if.end.91
	jmp	.LBB214_79
.LBB214_22:                             # %if.else.92
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB214_30
# BB#23:                                # %land.lhs.true.99
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	40(%rcx), %rax
	jge	.LBB214_30
# BB#24:                                # %land.lhs.true.106
	movq	-16(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-16(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	je	.LBB214_30
# BB#25:                                # %if.then.117
	movq	-16(%rbp), %rax
	cmpq	$0, 48(%rax)
	jle	.LBB214_27
# BB#26:                                # %lor.lhs.false.121
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	48(%rcx), %rax
	jge	.LBB214_28
.LBB214_27:                             # %if.then.128
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rdi
	callq	compute_stop_pos_backwards
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rsi
	callq	handle_stop_backwards
	jmp	.LBB214_29
.LBB214_28:                             # %if.else.131
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rsi
	callq	handle_stop_backwards
.LBB214_29:                             # %if.end.133
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-65, %cx
	movw	%cx, 2112(%rax)
	movq	-16(%rbp), %rax
	movl	24(%rax), %edx
	movl	%edx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB214_80
.LBB214_30:                             # %if.else.141
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-65, %cx
	movw	%cx, 2112(%rax)
	movq	-16(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB214_34
# BB#31:                                # %land.lhs.true.146
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB214_34
# BB#32:                                # %land.lhs.true.148
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	80(%rcx), %rax
	jl	.LBB214_34
# BB#33:                                # %if.then.155
	movq	-16(%rbp), %rdi
	callq	run_redisplay_end_trigger_hook
.LBB214_34:                             # %if.end.156
	movq	-16(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB214_36
# BB#35:                                # %cond.true
	movq	$-1, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB214_37
.LBB214_36:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB214_37:                             # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jge	.LBB214_45
# BB#38:                                # %lor.lhs.false.163
	movq	-16(%rbp), %rax
	movq	2136(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jne	.LBB214_47
# BB#39:                                # %land.lhs.true.170
	movb	$1, %al
	movq	-16(%rbp), %rcx
	addq	$2136, %rcx             # imm = 0x858
	movq	-16(%rbp), %rdx
	movq	312(%rdx), %rsi
	movq	-16(%rbp), %rdx
	movq	320(%rdx), %rdx
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %r8
	movq	8(%r8), %r8
	testb	$1, %al
	movq	%r8, -64(%rbp)          # 8-byte Spill
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	jne	.LBB214_40
	jmp	.LBB214_41
.LBB214_40:                             # %cond.true.178
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB214_42
	jmp	.LBB214_43
.LBB214_41:                             # %cond.false.182
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB214_43
.LBB214_42:                             # %cond.true.193
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB214_44
.LBB214_43:                             # %cond.false.199
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	jmp	.LBB214_44
.LBB214_44:                             # %cond.end.200
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rcx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	-96(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-64(%rbp), %r8          # 8-byte Reload
	movq	%rax, %r9
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	composition_reseat_it
	testb	$1, %al
	jne	.LBB214_45
	jmp	.LBB214_47
.LBB214_45:                             # %land.lhs.true.204
	movq	-16(%rbp), %rdi
	callq	next_element_from_composition
	testb	$1, %al
	jne	.LBB214_46
	jmp	.LBB214_47
.LBB214_46:                             # %if.then.207
	movb	$1, -1(%rbp)
	jmp	.LBB214_80
.LBB214_47:                             # %if.end.208
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB214_49
# BB#48:                                # %cond.true.214
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB214_50
.LBB214_49:                             # %cond.false.216
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB214_50
.LBB214_50:                             # %cond.end.217
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB214_64
# BB#51:                                # %land.lhs.true.229
	movb	$1, %al
	testb	$1, %al
	jne	.LBB214_52
	jmp	.LBB214_53
.LBB214_52:                             # %cond.true.230
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	jb	.LBB214_64
	jmp	.LBB214_54
.LBB214_53:                             # %cond.false.235
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, %eax
	addq	$0, %rax
	cmpq	$128, %rax
	jb	.LBB214_64
.LBB214_54:                             # %if.then.240
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB214_56
# BB#55:                                # %cond.true.244
	movq	-16(%rbp), %rax
	movl	$1, 2128(%rax)
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	jmp	.LBB214_63
.LBB214_56:                             # %cond.false.247
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB214_58
# BB#57:                                # %cond.true.252
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-16(%rbp), %rdx
	movl	$2, 2128(%rdx)
	movq	-32(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-32(%rbp), %rdx
	movzbl	1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-32(%rbp), %rdx
	movzbl	(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	addl	%eax, %esi
	movl	%esi, -128(%rbp)        # 4-byte Spill
	jmp	.LBB214_62
.LBB214_58:                             # %cond.false.266
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB214_60
# BB#59:                                # %cond.true.271
	movq	-16(%rbp), %rax
	movl	$3, 2128(%rax)
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-32(%rbp), %rax
	movzbl	1(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-32(%rbp), %rax
	movzbl	2(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -132(%rbp)        # 4-byte Spill
	jmp	.LBB214_61
.LBB214_60:                             # %cond.false.286
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	movq	-16(%rbp), %rcx
	addq	$2128, %rcx             # imm = 0x850
	movq	%rcx, %rdx
	callq	string_char
	movl	%eax, -132(%rbp)        # 4-byte Spill
.LBB214_61:                             # %cond.end.289
	movl	-132(%rbp), %eax        # 4-byte Reload
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB214_62:                             # %cond.end.291
	movl	-128(%rbp), %eax        # 4-byte Reload
	movl	%eax, -124(%rbp)        # 4-byte Spill
.LBB214_63:                             # %cond.end.293
	movl	-124(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 2124(%rcx)
	jmp	.LBB214_65
.LBB214_64:                             # %if.else.295
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2124(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 2128(%rax)
.LBB214_65:                             # %if.end.299
	movq	-16(%rbp), %rax
	movl	$0, 2104(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 2296(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 2304(%rax)
	movq	-16(%rbp), %rax
	cmpq	$0, 2096(%rax)
	je	.LBB214_77
# BB#66:                                # %if.then.306
	movq	-16(%rbp), %rax
	cmpl	$10, 2124(%rax)
	jne	.LBB214_72
# BB#67:                                # %if.then.310
	movq	-16(%rbp), %rax
	cmpq	$0, 2096(%rax)
	jle	.LBB214_71
# BB#68:                                # %land.lhs.true.314
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	addq	$1, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB214_71
# BB#69:                                # %land.lhs.true.321
	movq	-16(%rbp), %rax
	movq	312(%rax), %rax
	addq	$1, %rax
	movq	-16(%rbp), %rcx
	movq	320(%rcx), %rcx
	addq	$1, %rcx
	movq	-16(%rbp), %rdx
	movq	2096(%rdx), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	indented_beyond_p
	testb	$1, %al
	jne	.LBB214_70
	jmp	.LBB214_71
.LBB214_70:                             # %if.then.333
	movq	-16(%rbp), %rdi
	callq	next_element_from_ellipsis
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdi
	movl	$-1, 120(%rdi)
.LBB214_71:                             # %if.end.336
	jmp	.LBB214_76
.LBB214_72:                             # %if.else.337
	movq	-16(%rbp), %rax
	cmpl	$13, 2124(%rax)
	jne	.LBB214_75
# BB#73:                                # %land.lhs.true.341
	movq	-16(%rbp), %rax
	cmpq	$-1, 2096(%rax)
	jne	.LBB214_75
# BB#74:                                # %if.then.345
	movq	-16(%rbp), %rdi
	callq	next_element_from_ellipsis
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdi
	movl	$-1, 120(%rdi)
.LBB214_75:                             # %if.end.349
	jmp	.LBB214_76
.LBB214_76:                             # %if.end.350
	jmp	.LBB214_77
.LBB214_77:                             # %if.end.351
	jmp	.LBB214_78
.LBB214_78:                             # %if.end.352
	jmp	.LBB214_79
.LBB214_79:                             # %if.end.353
	movb	-17(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB214_80:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end214:
	.size	next_element_from_buffer, .Lfunc_end214-next_element_from_buffer
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_display_vector,@function
next_element_from_display_vector:       # @next_element_from_display_vector
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp664:
	.cfi_def_cfa_offset 16
.Ltmp665:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp666:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	2108(%rdi), %eax
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rdi
	movl	128(%rdi), %eax
	movq	-8(%rbp), %rdi
	movl	%eax, 2108(%rdi)
	movq	-8(%rbp), %rdi
	movslq	352(%rdi), %rdi
	movq	-8(%rbp), %rcx
	movq	104(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	GLYPH_CODE_P
	testb	$1, %al
	jne	.LBB215_1
	jmp	.LBB215_53
.LBB215_1:                              # %if.then
	movq	-16(%rbp), %rdi
	callq	GLYPH_CODE_CHAR
	movq	-8(%rbp), %rdi
	movl	%eax, 2124(%rdi)
	movq	-8(%rbp), %rdi
	cmpl	$127, 2124(%rdi)
	jg	.LBB215_3
# BB#2:                                 # %cond.true
	movl	$1, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	jmp	.LBB215_13
.LBB215_3:                              # %cond.false
	movq	-8(%rbp), %rax
	cmpl	$2047, 2124(%rax)       # imm = 0x7FF
	jg	.LBB215_5
# BB#4:                                 # %cond.true.6
	movl	$2, %eax
	movl	%eax, -64(%rbp)         # 4-byte Spill
	jmp	.LBB215_12
.LBB215_5:                              # %cond.false.7
	movq	-8(%rbp), %rax
	cmpl	$65535, 2124(%rax)      # imm = 0xFFFF
	jg	.LBB215_7
# BB#6:                                 # %cond.true.10
	movl	$3, %eax
	movl	%eax, -68(%rbp)         # 4-byte Spill
	jmp	.LBB215_11
.LBB215_7:                              # %cond.false.11
	movq	-8(%rbp), %rax
	cmpl	$2097151, 2124(%rax)    # imm = 0x1FFFFF
	jg	.LBB215_9
# BB#8:                                 # %cond.true.14
	movl	$4, %eax
	movl	%eax, -72(%rbp)         # 4-byte Spill
	jmp	.LBB215_10
.LBB215_9:                              # %cond.false.15
	movl	$2, %eax
	movl	$5, %ecx
	movq	-8(%rbp), %rdx
	cmpl	$4194175, 2124(%rdx)    # imm = 0x3FFF7F
	cmovlel	%ecx, %eax
	movl	%eax, -72(%rbp)         # 4-byte Spill
.LBB215_10:                             # %cond.end
	movl	-72(%rbp), %eax         # 4-byte Reload
	movl	%eax, -68(%rbp)         # 4-byte Spill
.LBB215_11:                             # %cond.end.19
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, -64(%rbp)         # 4-byte Spill
.LBB215_12:                             # %cond.end.21
	movl	-64(%rbp), %eax         # 4-byte Reload
	movl	%eax, -60(%rbp)         # 4-byte Spill
.LBB215_13:                             # %cond.end.23
	movl	-60(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	movl	%eax, 2128(%rcx)
	movq	-8(%rbp), %rcx
	cmpl	$0, 124(%rcx)
	jl	.LBB215_15
# BB#14:                                # %if.then.26
	movq	-8(%rbp), %rax
	movl	124(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2108(%rax)
	jmp	.LBB215_18
.LBB215_15:                             # %if.else
	movq	-16(%rbp), %rdi
	callq	GLYPH_CODE_FACE
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jle	.LBB215_17
# BB#16:                                # %if.then.31
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	-52(%rbp), %edx
	movq	-8(%rbp), %rcx
	movl	128(%rcx), %ecx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movq	-8(%rbp), %rsi
	movl	%eax, 2108(%rsi)
.LBB215_17:                             # %if.end
	jmp	.LBB215_18
.LBB215_18:                             # %if.end.36
	movb	$1, %al
	testb	$1, %al
	jne	.LBB215_19
	jmp	.LBB215_20
.LBB215_19:                             # %cond.true.37
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB215_21
	jmp	.LBB215_22
.LBB215_20:                             # %cond.false.42
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB215_22
.LBB215_21:                             # %cond.true.52
	movq	-8(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB215_23
.LBB215_22:                             # %cond.false.58
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	jmp	.LBB215_23
.LBB215_23:                             # %cond.end.59
	movq	-88(%rbp), %rax         # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -32(%rbp)
	testb	$1, %cl
	jne	.LBB215_24
	jmp	.LBB215_25
.LBB215_24:                             # %cond.true.61
	movl	-20(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB215_26
	jmp	.LBB215_27
.LBB215_25:                             # %cond.false.69
	movslq	-20(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB215_27
.LBB215_26:                             # %cond.true.79
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB215_28
.LBB215_27:                             # %cond.false.85
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	jmp	.LBB215_28
.LBB215_28:                             # %cond.end.86
	movq	-96(%rbp), %rax         # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	movb	%dl, -97(%rbp)          # 1-byte Spill
	je	.LBB215_33
# BB#29:                                # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	240(%rdx), %eax
	andl	$3, %eax
	cmpl	$0, %eax
	movb	%cl, -97(%rbp)          # 1-byte Spill
	je	.LBB215_33
# BB#30:                                # %land.rhs
	movb	$1, %al
	cmpq	$0, -40(%rbp)
	movb	%al, -98(%rbp)          # 1-byte Spill
	je	.LBB215_32
# BB#31:                                # %lor.rhs
	movq	-40(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	sete	%dl
	movb	%dl, -98(%rbp)          # 1-byte Spill
.LBB215_32:                             # %lor.end
	movb	-98(%rbp), %al          # 1-byte Reload
	movb	%al, -97(%rbp)          # 1-byte Spill
.LBB215_33:                             # %land.end
	movb	-97(%rbp), %al          # 1-byte Reload
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movw	%dx, %si
	movw	2112(%rcx), %di
	shlw	$3, %si
	andw	$-9, %di
	orw	%si, %di
	movw	%di, 2112(%rcx)
	movq	-8(%rbp), %rcx
	movl	128(%rcx), %edx
	movl	%edx, -24(%rbp)
	movq	-8(%rbp), %rcx
	movslq	352(%rcx), %rcx
	movq	-8(%rbp), %r8
	movq	112(%r8), %r8
	movq	-8(%rbp), %r9
	movq	104(%r9), %r9
	subq	%r9, %r8
	sarq	$3, %r8
	subq	$1, %r8
	cmpq	%r8, %rcx
	jge	.LBB215_40
# BB#34:                                # %if.then.106
	movq	-8(%rbp), %rax
	cmpl	$0, 124(%rax)
	jl	.LBB215_36
# BB#35:                                # %if.then.110
	movq	-8(%rbp), %rax
	movl	124(%rax), %ecx
	movl	%ecx, -24(%rbp)
	jmp	.LBB215_39
.LBB215_36:                             # %if.else.112
	movq	-8(%rbp), %rax
	movl	352(%rax), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rax
	movq	-8(%rbp), %rdx
	movq	104(%rdx), %rdx
	movq	(%rdx,%rax,8), %rdi
	callq	GLYPH_CODE_FACE
	movl	%eax, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jle	.LBB215_38
# BB#37:                                # %if.then.123
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	-56(%rbp), %edx
	movq	-8(%rbp), %rcx
	movl	128(%rcx), %ecx
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	merge_faces
	movl	%eax, -24(%rbp)
.LBB215_38:                             # %if.end.128
	jmp	.LBB215_39
.LBB215_39:                             # %if.end.129
	jmp	.LBB215_40
.LBB215_40:                             # %if.end.130
	movb	$1, %al
	testb	$1, %al
	jne	.LBB215_41
	jmp	.LBB215_42
.LBB215_41:                             # %cond.true.131
	movl	-24(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB215_43
	jmp	.LBB215_44
.LBB215_42:                             # %cond.false.139
	movslq	-24(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB215_44
.LBB215_43:                             # %cond.true.149
	movslq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB215_45
.LBB215_44:                             # %cond.false.155
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB215_45
.LBB215_45:                             # %cond.end.156
	movq	-120(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -48(%rbp)
	cmpq	$0, -32(%rbp)
	movb	%dl, -121(%rbp)         # 1-byte Spill
	je	.LBB215_50
# BB#46:                                # %land.lhs.true.159
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	240(%rdx), %eax
	andl	$3, %eax
	cmpl	$0, %eax
	movb	%cl, -121(%rbp)         # 1-byte Spill
	je	.LBB215_50
# BB#47:                                # %land.rhs.165
	movb	$1, %al
	cmpq	$0, -48(%rbp)
	movb	%al, -122(%rbp)         # 1-byte Spill
	je	.LBB215_49
# BB#48:                                # %lor.rhs.167
	movq	-48(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	sete	%dl
	movb	%dl, -122(%rbp)         # 1-byte Spill
.LBB215_49:                             # %lor.end.173
	movb	-122(%rbp), %al         # 1-byte Reload
	movb	%al, -121(%rbp)         # 1-byte Spill
.LBB215_50:                             # %land.end.174
	movb	-121(%rbp), %al         # 1-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-8(%rbp), %rsi
	movzbl	%al, %ecx
	andl	$1, %ecx
	movw	%cx, %di
	movw	2112(%rsi), %r8w
	shlw	$4, %di
	andw	$-17, %r8w
	orw	%di, %r8w
	movw	%r8w, 2112(%rsi)
	cmpq	$0, -32(%rbp)
	movb	%dl, -123(%rbp)         # 1-byte Spill
	je	.LBB215_52
# BB#51:                                # %land.rhs.182
	movq	-32(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	setne	%dl
	movb	%dl, -123(%rbp)         # 1-byte Spill
.LBB215_52:                             # %land.end.188
	movb	-123(%rbp), %al         # 1-byte Reload
	movq	-8(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movw	%dx, %si
	movw	2112(%rcx), %di
	shlw	$2, %si
	andw	$-5, %di
	orw	%si, %di
	movw	%di, 2112(%rcx)
	jmp	.LBB215_54
.LBB215_53:                             # %if.else.195
	movq	-8(%rbp), %rax
	movl	$32, 2124(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2128(%rax)
.LBB215_54:                             # %if.end.198
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movl	$0, 2104(%rcx)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end215:
	.size	next_element_from_display_vector, .Lfunc_end215-next_element_from_display_vector
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_string,@function
next_element_from_string:               # @next_element_from_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp667:
	.cfi_def_cfa_offset 16
.Ltmp668:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp669:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	336(%rdi), %rax
	movq	%rax, -32(%rbp)
	movq	344(%rdi), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB216_3
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB216_3
# BB#2:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	get_visually_first_element
	movq	-16(%rbp), %rdi
	movq	336(%rdi), %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rdi
	movq	344(%rdi), %rdi
	movq	%rdi, -24(%rbp)
.LBB216_3:                              # %if.end
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jge	.LBB216_23
# BB#4:                                 # %if.then.13
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	32(%rcx), %rax
	jl	.LBB216_14
# BB#5:                                 # %if.then.18
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB216_9
# BB#6:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-16(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	je	.LBB216_9
# BB#7:                                 # %lor.lhs.false.29
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	32(%rcx), %rax
	je	.LBB216_9
# BB#8:                                 # %if.then.36
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	32(%rax), %rsi
	callq	handle_stop_backwards
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB216_70
.LBB216_9:                              # %if.else
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB216_13
# BB#10:                                # %if.then.44
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movsbl	2516(%rax), %edx
	movq	-16(%rbp), %rax
	movzbl	2682(%rax), %esi
	cmpl	%esi, %edx
	jne	.LBB216_12
# BB#11:                                # %if.then.56
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
.LBB216_12:                             # %if.end.58
	jmp	.LBB216_13
.LBB216_13:                             # %if.end.59
	movq	-16(%rbp), %rdi
	callq	handle_stop
	movq	-16(%rbp), %rdi
	movl	24(%rdi), %eax
	movl	%eax, %edi
	movq	get_next_element(,%rdi,8), %rdi
	movq	-16(%rbp), %rcx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	-56(%rbp), %rcx         # 8-byte Reload
	callq	*%rcx
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB216_70
.LBB216_14:                             # %if.else.64
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB216_21
# BB#15:                                # %land.lhs.true.71
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	40(%rcx), %rax
	jge	.LBB216_21
# BB#16:                                # %land.lhs.true.78
	movq	-16(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-16(%rbp), %rax
	movzbl	2682(%rax), %edx
	cmpl	%edx, %ecx
	je	.LBB216_21
# BB#17:                                # %if.then.89
	movq	-16(%rbp), %rax
	cmpq	$0, 48(%rax)
	jle	.LBB216_19
# BB#18:                                # %lor.lhs.false.93
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	48(%rcx), %rax
	jge	.LBB216_20
.LBB216_19:                             # %if.then.100
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
.LBB216_20:                             # %if.end.102
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rsi
	callq	handle_stop_backwards
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB216_70
.LBB216_21:                             # %if.end.108
	jmp	.LBB216_22
.LBB216_22:                             # %if.end.109
	jmp	.LBB216_23
.LBB216_23:                             # %if.end.110
	movq	-16(%rbp), %rax
	cmpq	$0, 328(%rax)
	jl	.LBB216_45
# BB#24:                                # %if.then.114
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	SCHARS
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB216_26
# BB#25:                                # %if.then.121
	movq	-16(%rbp), %rax
	movl	$5, 2104(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB216_70
.LBB216_26:                             # %if.else.122
	movq	-16(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jge	.LBB216_37
# BB#27:                                # %lor.lhs.false.125
	movq	-16(%rbp), %rax
	movq	2136(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	336(%rcx), %rax
	jne	.LBB216_39
# BB#28:                                # %land.lhs.true.132
	movq	-16(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-16(%rbp), %rcx
	movq	336(%rcx), %rsi
	movq	-16(%rbp), %rcx
	movq	344(%rcx), %rdx
	movq	-16(%rbp), %rcx
	cmpl	$0, 2648(%rcx)
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	jge	.LBB216_30
# BB#29:                                # %cond.true
	movq	$-1, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB216_31
.LBB216_30:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB216_31:                             # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movb	$1, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %r8
	testb	$1, %cl
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%r8, -112(%rbp)         # 8-byte Spill
	jne	.LBB216_32
	jmp	.LBB216_33
.LBB216_32:                             # %cond.true.145
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB216_34
	jmp	.LBB216_35
.LBB216_33:                             # %cond.false.149
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB216_35
.LBB216_34:                             # %cond.true.160
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB216_36
.LBB216_35:                             # %cond.false.166
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB216_36
.LBB216_36:                             # %cond.end.167
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rcx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	-88(%rbp), %rdx         # 8-byte Reload
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-112(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	composition_reseat_it
	testb	$1, %al
	jne	.LBB216_37
	jmp	.LBB216_39
.LBB216_37:                             # %land.lhs.true.172
	movq	-16(%rbp), %rdi
	callq	next_element_from_composition
	testb	$1, %al
	jne	.LBB216_38
	jmp	.LBB216_39
.LBB216_38:                             # %if.then.175
	movb	$1, -1(%rbp)
	jmp	.LBB216_70
.LBB216_39:                             # %if.else.176
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB216_40
	jmp	.LBB216_41
.LBB216_40:                             # %if.then.179
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SDATA
	movq	-16(%rbp), %rdi
	addq	344(%rdi), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	addq	$2128, %rax             # imm = 0x850
	movq	%rax, %rsi
	callq	string_char_and_length
	movq	-16(%rbp), %rsi
	movl	%eax, 2124(%rsi)
	jmp	.LBB216_42
.LBB216_41:                             # %if.else.186
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	movq	-16(%rbp), %rsi
	movl	%ecx, 2124(%rsi)
	movq	-16(%rbp), %rsi
	movl	$1, 2128(%rsi)
.LBB216_42:                             # %if.end.195
	jmp	.LBB216_43
.LBB216_43:                             # %if.end.196
	jmp	.LBB216_44
.LBB216_44:                             # %if.end.197
	jmp	.LBB216_69
.LBB216_45:                             # %if.else.198
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jl	.LBB216_47
# BB#46:                                # %if.then.205
	movq	-16(%rbp), %rax
	movl	$5, 2104(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB216_70
.LBB216_47:                             # %if.else.207
	movq	-16(%rbp), %rax
	movq	336(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	72(%rcx), %rax
	jl	.LBB216_49
# BB#48:                                # %if.then.213
	movq	-16(%rbp), %rax
	movl	$32, 2124(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 2128(%rax)
	movq	$-1, -24(%rbp)
	movq	$-1, -32(%rbp)
	jmp	.LBB216_67
.LBB216_49:                             # %if.else.218
	movq	-16(%rbp), %rax
	cmpq	$0, 2144(%rax)
	jge	.LBB216_60
# BB#50:                                # %lor.lhs.false.223
	movq	-16(%rbp), %rax
	movq	2136(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	336(%rcx), %rax
	jne	.LBB216_62
# BB#51:                                # %land.lhs.true.231
	movq	-16(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-16(%rbp), %rcx
	movq	336(%rcx), %rsi
	movq	-16(%rbp), %rcx
	movq	344(%rcx), %rdx
	movq	-16(%rbp), %rcx
	cmpl	$0, 2648(%rcx)
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movq	%rdx, -152(%rbp)        # 8-byte Spill
	jge	.LBB216_53
# BB#52:                                # %cond.true.243
	movq	$-1, %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB216_54
.LBB216_53:                             # %cond.false.244
	movq	-16(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB216_54:                             # %cond.end.246
	movq	-160(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %r8
	testb	$1, %cl
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	%r8, -176(%rbp)         # 8-byte Spill
	jne	.LBB216_55
	jmp	.LBB216_56
.LBB216_55:                             # %cond.true.249
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB216_57
	jmp	.LBB216_58
.LBB216_56:                             # %cond.false.258
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB216_58
.LBB216_57:                             # %cond.true.269
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB216_59
.LBB216_58:                             # %cond.false.276
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	jmp	.LBB216_59
.LBB216_59:                             # %cond.end.277
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rcx
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-168(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-176(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	composition_reseat_it
	testb	$1, %al
	jne	.LBB216_60
	jmp	.LBB216_62
.LBB216_60:                             # %land.lhs.true.282
	movq	-16(%rbp), %rdi
	callq	next_element_from_composition
	testb	$1, %al
	jne	.LBB216_61
	jmp	.LBB216_62
.LBB216_61:                             # %if.then.285
	movb	$1, -1(%rbp)
	jmp	.LBB216_70
.LBB216_62:                             # %if.else.286
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB216_63
	jmp	.LBB216_64
.LBB216_63:                             # %if.then.289
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SDATA
	movq	-16(%rbp), %rdi
	addq	344(%rdi), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rax
	addq	$2128, %rax             # imm = 0x850
	movq	%rax, %rsi
	callq	string_char_and_length
	movq	-16(%rbp), %rsi
	movl	%eax, 2124(%rsi)
	jmp	.LBB216_65
.LBB216_64:                             # %if.else.300
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	callq	SREF
	movzbl	%al, %ecx
	movq	-16(%rbp), %rsi
	movl	%ecx, 2124(%rsi)
	movq	-16(%rbp), %rsi
	movl	$1, 2128(%rsi)
.LBB216_65:                             # %if.end.309
	jmp	.LBB216_66
.LBB216_66:                             # %if.end.310
	jmp	.LBB216_67
.LBB216_67:                             # %if.end.311
	jmp	.LBB216_68
.LBB216_68:                             # %if.end.312
	jmp	.LBB216_69
.LBB216_69:                             # %if.end.313
	movq	-16(%rbp), %rax
	movl	$0, 2104(%rax)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rcx, 2296(%rax)
	movq	-24(%rbp), %rcx
	movq	%rcx, 2304(%rax)
	movb	$1, -1(%rbp)
.LBB216_70:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end216:
	.size	next_element_from_string, .Lfunc_end216-next_element_from_string
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_c_string,@function
next_element_from_c_string:             # @next_element_from_c_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp670:
	.cfi_def_cfa_offset 16
.Ltmp671:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp672:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movb	$1, -9(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, 2104(%rdi)
	movq	-8(%rbp), %rdi
	movq	$0, 2296(%rdi)
	movq	-8(%rbp), %rdi
	movq	$0, 2304(%rdi)
	movq	-8(%rbp), %rdi
	movq	$2, 2288(%rdi)
	movq	-8(%rbp), %rdi
	movl	2456(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB217_3
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB217_3
# BB#2:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	get_visually_first_element
.LBB217_3:                              # %if.end
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jl	.LBB217_5
# BB#4:                                 # %if.then.6
	movq	-8(%rbp), %rax
	movl	$5, 2104(%rax)
	movb	$0, -9(%rbp)
	jmp	.LBB217_12
.LBB217_5:                              # %if.else
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	72(%rcx), %rax
	jl	.LBB217_7
# BB#6:                                 # %if.then.12
	movq	-8(%rbp), %rax
	movl	$32, 2124(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2128(%rax)
	movq	-8(%rbp), %rax
	movq	$-1, 2296(%rax)
	movq	-8(%rbp), %rax
	movq	$-1, 2304(%rax)
	jmp	.LBB217_11
.LBB217_7:                              # %if.else.17
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB217_9
# BB#8:                                 # %if.then.21
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	-8(%rbp), %rcx
	addq	$2128, %rcx             # imm = 0x850
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	string_char_and_length
	movq	-8(%rbp), %rcx
	movl	%eax, 2124(%rcx)
	jmp	.LBB217_10
.LBB217_9:                              # %if.else.27
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 2124(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 2128(%rax)
.LBB217_10:                             # %if.end.34
	jmp	.LBB217_11
.LBB217_11:                             # %if.end.35
	jmp	.LBB217_12
.LBB217_12:                             # %if.end.36
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end217:
	.size	next_element_from_c_string, .Lfunc_end217-next_element_from_c_string
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_image,@function
next_element_from_image:                # @next_element_from_image
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp673:
	.cfi_def_cfa_offset 16
.Ltmp674:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp675:
	.cfi_def_cfa_register %rbp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$3, 2104(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end218:
	.size	next_element_from_image, .Lfunc_end218-next_element_from_image
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_stretch,@function
next_element_from_stretch:              # @next_element_from_stretch
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp676:
	.cfi_def_cfa_offset 16
.Ltmp677:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp678:
	.cfi_def_cfa_register %rbp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$4, 2104(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end219:
	.size	next_element_from_stretch, .Lfunc_end219-next_element_from_stretch
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_xwidget,@function
next_element_from_xwidget:              # @next_element_from_xwidget
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp679:
	.cfi_def_cfa_offset 16
.Ltmp680:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp681:
	.cfi_def_cfa_register %rbp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$8, 2104(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end220:
	.size	next_element_from_xwidget, .Lfunc_end220-next_element_from_xwidget
	.cfi_endproc

	.align	16, 0x90
	.type	get_visually_first_element,@function
get_visually_first_element:             # @get_visually_first_element
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp682:
	.cfi_def_cfa_offset 16
.Ltmp683:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp684:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	movb	$1, %cl
	testb	$1, %al
	movb	%cl, -65(%rbp)          # 1-byte Spill
	jne	.LBB221_2
# BB#1:                                 # %lor.rhs
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	setne	%cl
	movb	%cl, -65(%rbp)          # 1-byte Spill
.LBB221_2:                              # %lor.end
	movb	-65(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -9(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB221_4
# BB#3:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	4736(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB221_5
.LBB221_4:                              # %cond.false
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB221_5:                              # %cond.end
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB221_7
# BB#6:                                 # %cond.true.4
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	jmp	.LBB221_8
.LBB221_7:                              # %cond.false.5
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB221_8:                              # %cond.end.6
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB221_9
	jmp	.LBB221_10
.LBB221_9:                              # %if.then
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2472(%rcx)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2464(%rcx)
	jmp	.LBB221_11
.LBB221_10:                             # %if.else
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2472(%rcx)
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 2464(%rcx)
.LBB221_11:                             # %if.end
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB221_13
# BB#12:                                # %if.then.27
	movq	-8(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 4784(%rax)
	jmp	.LBB221_40
.LBB221_13:                             # %if.else.29
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-32(%rbp), %rax
	je	.LBB221_29
# BB#14:                                # %lor.lhs.false
	testb	$1, -9(%rbp)
	jne	.LBB221_30
# BB#15:                                # %land.lhs.true
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB221_17
# BB#16:                                # %cond.true.36
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	subq	$1, %rax
	movq	%rax, %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -100(%rbp)        # 4-byte Spill
	jmp	.LBB221_21
.LBB221_17:                             # %cond.false.40
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB221_19
# BB#18:                                # %cond.true.45
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB221_20
.LBB221_19:                             # %cond.false.47
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	jmp	.LBB221_20
.LBB221_20:                             # %cond.end.48
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	2464(%rcx), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -100(%rbp)        # 4-byte Spill
.LBB221_21:                             # %cond.end.55
	movl	-100(%rbp), %eax        # 4-byte Reload
	cmpl	$10, %eax
	je	.LBB221_29
# BB#22:                                # %lor.lhs.false.59
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB221_24
# BB#23:                                # %cond.true.64
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -124(%rbp)        # 4-byte Spill
	jmp	.LBB221_28
.LBB221_24:                             # %cond.false.68
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB221_26
# BB#25:                                # %cond.true.75
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB221_27
.LBB221_26:                             # %cond.false.78
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB221_27
.LBB221_27:                             # %cond.end.79
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	addq	2464(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -124(%rbp)        # 4-byte Spill
.LBB221_28:                             # %cond.end.89
	movl	-124(%rbp), %eax        # 4-byte Reload
	cmpl	$10, %eax
	jne	.LBB221_30
.LBB221_29:                             # %if.then.93
	movl	$1, %edx
	movq	-8(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	jmp	.LBB221_39
.LBB221_30:                             # %if.else.96
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	%rax, -40(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB221_32
# BB#31:                                # %if.then.100
	movq	-8(%rbp), %rax
	movq	$0, 2464(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 2472(%rax)
	jmp	.LBB221_33
.LBB221_32:                             # %if.else.105
	movq	$-1, %rdx
	movq	-8(%rbp), %rax
	movq	312(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	320(%rax), %rsi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rcx
	callq	find_newline_no_quit
	movq	-8(%rbp), %rcx
	movq	%rax, 2472(%rcx)
.LBB221_33:                             # %if.end.117
	movl	$1, %edx
	movq	-8(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
.LBB221_34:                             # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#35:                                # %do.cond
                                        #   in Loop: Header=BB221_34 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	2464(%rdx), %rdx
	cmpq	-40(%rbp), %rdx
	movb	%cl, -137(%rbp)         # 1-byte Spill
	je	.LBB221_37
# BB#36:                                # %land.rhs
                                        #   in Loop: Header=BB221_34 Depth=1
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-24(%rbp), %rax
	setl	%cl
	movb	%cl, -137(%rbp)         # 1-byte Spill
.LBB221_37:                             # %land.end
                                        #   in Loop: Header=BB221_34 Depth=1
	movb	-137(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB221_34
# BB#38:                                # %do.end
	jmp	.LBB221_39
.LBB221_39:                             # %if.end.129
	jmp	.LBB221_40
.LBB221_40:                             # %if.end.130
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB221_41
	jmp	.LBB221_42
.LBB221_41:                             # %if.then.133
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 336(%rcx)
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 344(%rcx)
	jmp	.LBB221_43
.LBB221_42:                             # %if.else.144
	movq	-8(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	-8(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 320(%rcx)
.LBB221_43:                             # %if.end.155
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB221_45
# BB#44:                                # %lor.lhs.false.159
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	jne	.LBB221_53
.LBB221_45:                             # %if.then.162
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB221_46
	jmp	.LBB221_49
.LBB221_46:                             # %if.then.167
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rdi
	cmpq	56(%rdi), %rax
	jle	.LBB221_48
# BB#47:                                # %if.then.172
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -48(%rbp)
.LBB221_48:                             # %if.end.174
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	344(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB221_50
.LBB221_49:                             # %if.else.181
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB221_50:                             # %if.end.189
	movq	-8(%rbp), %rax
	cmpl	$0, 2648(%rax)
	jge	.LBB221_52
# BB#51:                                # %if.then.193
	movq	$-1, -48(%rbp)
.LBB221_52:                             # %if.end.194
	movq	-8(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	632(%rdi), %r8
	movq	%rax, %rdi
	callq	composition_compute_stop_pos
.LBB221_53:                             # %if.end.196
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end221:
	.size	get_visually_first_element, .Lfunc_end221-get_visually_first_element
	.cfi_endproc

	.align	16, 0x90
	.type	handle_stop_backwards,@function
handle_stop_backwards:                  # @handle_stop_backwards
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp685:
	.cfi_def_cfa_offset 16
.Ltmp686:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp687:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	632(%rsi), %rdi
	callq	STRINGP
	xorb	$-1, %al
	andb	$1, %al
	movb	%al, -17(%rbp)
	testb	$1, -17(%rbp)
	je	.LBB222_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB222_3
.LBB222_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB222_3:                              # %cond.end
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	$48, %ecx
	movl	%ecx, %edx
	leaq	-80(%rbp), %rsi
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	addq	$312, %rax              # imm = 0x138
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	memcpy
	movq	-8(%rbp), %rax
	movq	2296(%rax), %rdx
	movq	%rdx, -96(%rbp)
	movq	2304(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %ecx
	andl	$-1048577, %ecx         # imm = 0xFFFFFFFFFFEFFFFF
	movl	%ecx, 2456(%rax)
.LBB222_4:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	testb	$1, -17(%rbp)
	je	.LBB222_6
# BB#5:                                 # %if.then
                                        #   in Loop: Header=BB222_4 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	current_buffer, %rdi
	movq	-16(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	xorl	%ecx, %ecx
	movq	%rax, -104(%rbp)
	movq	-8(%rbp), %rdi
	movq	-112(%rbp), %rsi
	movq	-104(%rbp), %rdx
	callq	reseat_1
	jmp	.LBB222_7
.LBB222_6:                              # %if.else
                                        #   in Loop: Header=BB222_4 Depth=1
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rsi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	string_pos
	movq	%rax, -136(%rbp)
	movq	%rdx, -128(%rbp)
	movq	-136(%rbp), %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	%rax, 336(%rcx)
	movq	-128(%rbp), %rax
	movq	%rax, 344(%rcx)
.LBB222_7:                              # %if.end
                                        #   in Loop: Header=BB222_4 Depth=1
	movq	-8(%rbp), %rdi
	callq	compute_stop_pos
	movq	-8(%rbp), %rdi
	movq	32(%rdi), %rdi
	movq	-8(%rbp), %rax
	cmpq	40(%rax), %rdi
	jg	.LBB222_9
# BB#8:                                 # %if.then.13
	callq	emacs_abort
.LBB222_9:                              # %if.end.14
                                        #   in Loop: Header=BB222_4 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
# BB#10:                                # %do.cond
                                        #   in Loop: Header=BB222_4 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jle	.LBB222_4
# BB#11:                                # %do.end
	movl	$48, %eax
	movl	%eax, %edx
	leaq	-80(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movl	2456(%rsi), %eax
	andl	$-1048577, %eax         # imm = 0xFFFFFFFFFFEFFFFF
	orl	$1048576, %eax          # imm = 0x100000
	movl	%eax, 2456(%rsi)
	movq	-8(%rbp), %rsi
	addq	$312, %rsi              # imm = 0x138
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-8(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	%rdx, 2296(%rcx)
	movq	-88(%rbp), %rdx
	movq	%rdx, 2304(%rcx)
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	%rcx, -120(%rbp)
	movq	-8(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	movq	-8(%rbp), %rdi
	callq	handle_stop
	movq	-120(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end222:
	.size	handle_stop_backwards, .Lfunc_end222-handle_stop_backwards
	.cfi_endproc

	.align	16, 0x90
	.type	compute_stop_pos_backwards,@function
compute_stop_pos_backwards:             # @compute_stop_pos_backwards
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp688:
	.cfi_def_cfa_offset 16
.Ltmp689:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp690:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$48, %eax
	movl	%eax, %edx
	leaq	-80(%rbp), %rcx
	movq	%rdi, -8(%rbp)
	movl	$1000, -12(%rbp)        # imm = 0x3E8
	movq	-8(%rbp), %rdi
	addq	$312, %rdi              # imm = 0x138
	movq	%rdi, -136(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	-136(%rbp), %rsi        # 8-byte Reload
	callq	memcpy
	movq	-8(%rbp), %rcx
	movq	2296(%rcx), %rdx
	movq	%rdx, -96(%rbp)
	movq	2304(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	%rcx, -120(%rbp)
	movq	-8(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rcx, -128(%rbp)
	movq	-8(%rbp), %rcx
	movl	2456(%rcx), %eax
	andl	$-1048577, %eax         # imm = 0xFFFFFFFFFFEFFFFF
	movl	%eax, 2456(%rcx)
.LBB223_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	addq	$1, %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB223_3
# BB#2:                                 # %cond.true
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-104(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB223_4
.LBB223_3:                              # %cond.false
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB223_4:                              # %cond.end
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-104(%rbp), %rax
	subq	$1000, %rax             # imm = 0x3E8
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB223_6
# BB#5:                                 # %cond.true.8
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-104(%rbp), %rax
	subq	$1000, %rax             # imm = 0x3E8
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB223_7
.LBB223_6:                              # %cond.false.10
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB223_7:                              # %cond.end.12
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	current_buffer, %rdi
	movq	-104(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	reseat_1
	movq	-8(%rbp), %rdi
	callq	compute_stop_pos
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	cmpq	-104(%rbp), %rax
	jg	.LBB223_9
# BB#8:                                 # %if.then
	callq	emacs_abort
.LBB223_9:                              # %if.end
                                        #   in Loop: Header=BB223_1 Depth=1
	jmp	.LBB223_10
.LBB223_10:                             # %do.cond
                                        #   in Loop: Header=BB223_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rdx
	movb	%cl, -153(%rbp)         # 1-byte Spill
	jle	.LBB223_12
# BB#11:                                # %land.rhs
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	56(%rcx), %rax
	setge	%dl
	movb	%dl, -153(%rbp)         # 1-byte Spill
.LBB223_12:                             # %land.end
                                        #   in Loop: Header=BB223_1 Depth=1
	movb	-153(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB223_1
# BB#13:                                # %do.end
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	cmpq	-112(%rbp), %rax
	jg	.LBB223_15
# BB#14:                                # %if.then.24
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	jmp	.LBB223_16
.LBB223_15:                             # %if.else
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
.LBB223_16:                             # %if.end.28
	movl	$48, %eax
	movl	%eax, %edx
	leaq	-80(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movl	2456(%rsi), %eax
	andl	$-1048577, %eax         # imm = 0xFFFFFFFFFFEFFFFF
	orl	$1048576, %eax          # imm = 0x100000
	movl	%eax, 2456(%rsi)
	movq	-8(%rbp), %rsi
	addq	$312, %rsi              # imm = 0x138
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	movq	-8(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	%rdx, 2296(%rcx)
	movq	-88(%rbp), %rdx
	movq	%rdx, 2304(%rcx)
	movq	-120(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	movq	-128(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 56(%rdx)
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end223:
	.size	compute_stop_pos_backwards, .Lfunc_end223-compute_stop_pos_backwards
	.cfi_endproc

	.align	16, 0x90
	.type	run_redisplay_end_trigger_hook,@function
run_redisplay_end_trigger_hook:         # @run_redisplay_end_trigger_hook
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp691:
	.cfi_def_cfa_offset 16
.Ltmp692:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp693:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	80(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	$0, 80(%rdi)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	wset_redisplay_end_trigger
	movl	$799, %edi              # imm = 0x31F
	callq	builtin_lisp_symbol
	movl	$3, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-40(%rbp), %rsi
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -24(%rbp)
	callq	Frun_hook_with_args
	movq	-8(%rbp), %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	handle_face_prop
	movl	%eax, -60(%rbp)         # 4-byte Spill
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end224:
	.size	run_redisplay_end_trigger_hook, .Lfunc_end224-run_redisplay_end_trigger_hook
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_composition,@function
next_element_from_composition:          # @next_element_from_composition
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp694:
	.cfi_def_cfa_offset 16
.Ltmp695:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp696:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movl	$1, 2104(%rdi)
	movq	-16(%rbp), %rdi
	movl	2188(%rdi), %eax
	movq	-16(%rbp), %rdi
	movl	%eax, 2128(%rdi)
	movq	-16(%rbp), %rdi
	movq	632(%rdi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB225_1
	jmp	.LBB225_4
.LBB225_1:                              # %if.then
	movq	-16(%rbp), %rax
	cmpl	$0, 2124(%rax)
	jge	.LBB225_3
# BB#2:                                 # %if.then.1
	movq	-16(%rbp), %rax
	movslq	2184(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	336(%rcx), %rax
	movq	%rax, 336(%rcx)
	movq	-16(%rbp), %rax
	movslq	2188(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	344(%rcx), %rax
	movq	%rax, 344(%rcx)
	movb	$0, -1(%rbp)
	jmp	.LBB225_15
.LBB225_3:                              # %if.end
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	336(%rcx), %rdx
	movq	%rdx, 2296(%rax)
	movq	344(%rcx), %rcx
	movq	%rcx, 2304(%rax)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-16(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-16(%rbp), %rcx
	movq	336(%rcx), %rsi
	movq	-16(%rbp), %rcx
	movq	344(%rcx), %rdx
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rcx
	movq	%rax, %rdi
	callq	composition_update_it
	movq	-16(%rbp), %rcx
	movl	%eax, 2124(%rcx)
	jmp	.LBB225_14
.LBB225_4:                              # %if.else
	movq	-16(%rbp), %rax
	cmpl	$0, 2124(%rax)
	jge	.LBB225_13
# BB#5:                                 # %if.then.25
	movq	-16(%rbp), %rax
	movslq	2184(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	312(%rcx), %rax
	movq	%rax, 312(%rcx)
	movq	-16(%rbp), %rax
	movslq	2188(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	320(%rcx), %rax
	movq	%rax, 320(%rcx)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB225_12
# BB#6:                                 # %if.then.39
	movq	-16(%rbp), %rax
	movb	4784(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB225_8
# BB#7:                                 # %if.then.44
	xorl	%edx, %edx
	movq	-16(%rbp), %rax
	movl	4792(%rax), %edi
	movq	-16(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rsi
	callq	bidi_paragraph_init
.LBB225_8:                              # %if.end.46
	jmp	.LBB225_9
.LBB225_9:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	2472(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jge	.LBB225_11
# BB#10:                                # %while.body
                                        #   in Loop: Header=BB225_9 Depth=1
	movq	-16(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
	jmp	.LBB225_9
.LBB225_11:                             # %while.end
	jmp	.LBB225_12
.LBB225_12:                             # %if.end.55
	movb	$0, -1(%rbp)
	jmp	.LBB225_15
.LBB225_13:                             # %if.end.56
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 2296(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 2304(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-16(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-16(%rbp), %rcx
	movq	312(%rcx), %rsi
	movq	-16(%rbp), %rcx
	movq	320(%rcx), %rdx
	movq	%rdx, -24(%rbp)         # 8-byte Spill
	movq	%rax, -32(%rbp)         # 8-byte Spill
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	composition_update_it
	movq	-16(%rbp), %rcx
	movl	%eax, 2124(%rcx)
.LBB225_14:                             # %if.end.71
	movb	$1, -1(%rbp)
.LBB225_15:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end225:
	.size	next_element_from_composition, .Lfunc_end225-next_element_from_composition
	.cfi_endproc

	.align	16, 0x90
	.type	next_element_from_ellipsis,@function
next_element_from_ellipsis:             # @next_element_from_ellipsis
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp697:
	.cfi_def_cfa_offset 16
.Ltmp698:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp699:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movw	2112(%rdi), %ax
	andw	$1, %ax
	testw	$1, %ax
	je	.LBB226_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	2128(%rax), %esi
	callq	setup_for_ellipsis
	jmp	.LBB226_3
.LBB226_2:                              # %if.else
	movl	$1, %esi
	movq	-8(%rbp), %rax
	movl	2108(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 128(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 2288(%rdx)
	movq	-8(%rbp), %rdi
	callq	reseat_at_next_visible_line_start
	movq	-8(%rbp), %rax
	movw	2112(%rax), %r8w
	andw	$-513, %r8w             # imm = 0xFFFFFFFFFFFFFDFF
	orw	$512, %r8w              # imm = 0x200
	movw	%r8w, 2112(%rax)
.LBB226_3:                              # %if.end
	movq	-8(%rbp), %rax
	movl	24(%rax), %ecx
	movl	%ecx, %eax
	movq	get_next_element(,%rax,8), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end226:
	.size	next_element_from_ellipsis, .Lfunc_end226-next_element_from_ellipsis
	.cfi_endproc

	.align	16, 0x90
	.type	handle_line_prefix,@function
handle_line_prefix:                     # @handle_line_prefix
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp700:
	.cfi_def_cfa_offset 16
.Ltmp701:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp702:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 2408(%rdi)
	jle	.LBB227_4
# BB#1:                                 # %if.then
	movl	$1039, %edi             # imm = 0x40F
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	get_it_property
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB227_3
# BB#2:                                 # %if.then.4
	movq	globals+2704, %rax
	movq	%rax, -16(%rbp)
.LBB227_3:                              # %if.end
	jmp	.LBB227_7
.LBB227_4:                              # %if.else
	movl	$622, %edi              # imm = 0x26E
	movq	-8(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	get_it_property
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB227_6
# BB#5:                                 # %if.then.9
	movq	globals+1280, %rax
	movq	%rax, -16(%rbp)
.LBB227_6:                              # %if.end.10
	jmp	.LBB227_7
.LBB227_7:                              # %if.end.11
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB227_10
# BB#8:                                 # %land.lhs.true
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	push_prefix_prop
	testb	$1, %al
	jne	.LBB227_9
	jmp	.LBB227_10
.LBB227_9:                              # %if.then.15
	movq	-8(%rbp), %rax
	movl	$0, 2116(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	andb	$-65, %cl
	orb	$64, %cl
	movb	%cl, 88(%rax)
.LBB227_10:                             # %if.end.16
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end227:
	.size	handle_line_prefix, .Lfunc_end227-handle_line_prefix
	.cfi_endproc

	.align	16, 0x90
	.type	push_prefix_prop,@function
push_prefix_prop:                       # @push_prefix_prop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp703:
	.cfi_def_cfa_offset 16
.Ltmp704:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp705:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	632(%rsi), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB228_1
	jmp	.LBB228_2
.LBB228_1:                              # %cond.true
	movq	-16(%rbp), %rax
	movq	336(%rax), %rcx
	movq	%rcx, -40(%rbp)
	movq	344(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB228_3
.LBB228_2:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	312(%rax), %rcx
	movq	%rcx, -40(%rbp)
	movq	320(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB228_3:                              # %cond.end
	leaq	-40(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	push_it
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB228_4
	jmp	.LBB228_13
.LBB228_4:                              # %if.then
	movq	-24(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	jne	.LBB228_6
# BB#5:                                 # %if.then.5
	movq	-16(%rbp), %rdi
	callq	pop_it
	movb	$0, -1(%rbp)
	jmp	.LBB228_22
.LBB228_6:                              # %if.end
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 632(%rcx)
	movq	-16(%rbp), %rax
	movb	88(%rax), %dl
	andb	$-9, %dl
	orb	$8, %dl
	movb	%dl, 88(%rax)
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRING_MULTIBYTE
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movb	88(%rcx), %dl
	andb	$-2, %dl
	orb	%al, %dl
	movb	%dl, 88(%rcx)
	movq	-16(%rbp), %rcx
	movq	$-1, 328(%rcx)
	movq	-16(%rbp), %rcx
	movq	$0, 344(%rcx)
	movq	-16(%rbp), %rcx
	movq	$0, 336(%rcx)
	movq	-16(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	SCHARS
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, 24(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %esi
	shrl	$20, %esi
	andl	$1, %esi
	testl	$1, %esi
	je	.LBB228_9
# BB#7:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	jne	.LBB228_9
# BB#8:                                 # %if.then.22
	movq	-16(%rbp), %rax
	movl	4768(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 4792(%rax)
	jmp	.LBB228_10
.LBB228_9:                              # %if.else
	movq	-16(%rbp), %rax
	movl	$1, 4792(%rax)
.LBB228_10:                             # %if.end.26
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB228_12
# BB#11:                                # %if.then.32
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	632(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4720(%rsi)
	movq	-16(%rbp), %rdx
	movq	$0, 4728(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4736(%rsi)
	movq	-16(%rbp), %rdx
	movq	312(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4744(%rsi)
	movq	-16(%rbp), %rdx
	movb	88(%rdx), %dil
	shrb	$2, %dil
	andb	$1, %dil
	movq	-16(%rbp), %rdx
	andb	$1, %dil
	movb	4752(%rdx), %r8b
	andb	$-2, %r8b
	orb	%dil, %r8b
	movb	%r8b, 4752(%rdx)
	movq	-16(%rbp), %rdx
	movb	88(%rdx), %dil
	andb	$1, %dil
	xorb	$-1, %dil
	movq	-16(%rbp), %rdx
	andb	$1, %dil
	movb	4752(%rdx), %r8b
	shlb	$1, %dil
	andb	$-3, %r8b
	orb	%dil, %r8b
	movb	%r8b, 4752(%rdx)
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 4760(%rsi)
	movq	-16(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	208(%rdx), %rdx
	shrq	$23, %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$2, %eax
	sete	%dil
	movq	-16(%rbp), %rdx
	addq	$2464, %rdx             # imm = 0x9A0
	movzbl	%dil, %eax
	andl	$1, %eax
	xorl	%r9d, %r9d
	movl	%r9d, %esi
	movq	%rsi, %rdi
	movq	%rdx, -48(%rbp)         # 8-byte Spill
	movl	%eax, %edx
	movq	-48(%rbp), %r10         # 8-byte Reload
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	%r10, %rcx
	callq	bidi_init_it
.LBB228_12:                             # %if.end.74
	jmp	.LBB228_21
.LBB228_13:                             # %if.else.75
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB228_16
# BB#14:                                # %land.lhs.true.78
	movl	$868, %edi              # imm = 0x364
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB228_16
# BB#15:                                # %if.then.82
	movq	-16(%rbp), %rax
	movl	$5, 24(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	jmp	.LBB228_20
.LBB228_16:                             # %if.else.84
	movq	-24(%rbp), %rdi
	callq	IMAGEP
	testb	$1, %al
	jne	.LBB228_17
	jmp	.LBB228_18
.LBB228_17:                             # %if.then.86
	movq	-16(%rbp), %rax
	movl	$3, 2104(%rax)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	lookup_image
	movq	-16(%rbp), %rsi
	movq	%rax, 2216(%rsi)
	movq	-16(%rbp), %rax
	movl	$4, 24(%rax)
	jmp	.LBB228_19
.LBB228_18:                             # %if.else.90
	movq	-16(%rbp), %rdi
	callq	pop_it
	movb	$0, -1(%rbp)
	jmp	.LBB228_22
.LBB228_19:                             # %if.end.91
	jmp	.LBB228_20
.LBB228_20:                             # %if.end.92
	jmp	.LBB228_21
.LBB228_21:                             # %if.end.93
	movb	$1, -1(%rbp)
.LBB228_22:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end228:
	.size	push_prefix_prop, .Lfunc_end228-push_prefix_prop
	.cfi_endproc

	.align	16, 0x90
	.type	forward_to_next_line_start,@function
forward_to_next_line_start:             # @forward_to_next_line_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp706:
	.cfi_def_cfa_offset 16
.Ltmp707:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp708:
	.cfi_def_cfa_register %rbp
	subq	$2464, %rsp             # imm = 0x9A0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movb	$0, -41(%rbp)
	movl	$500, -52(%rbp)         # imm = 0x1F4
	movq	-16(%rbp), %rdx
	cmpl	$0, 2104(%rdx)
	jne	.LBB229_7
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	cmpl	$10, 2124(%rax)
	jne	.LBB229_7
# BB#2:                                 # %land.lhs.true.2
	movq	-16(%rbp), %rax
	movq	2296(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jne	.LBB229_7
# BB#3:                                 # %if.then
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB229_6
# BB#4:                                 # %land.lhs.true.5
	cmpq	$0, -32(%rbp)
	je	.LBB229_6
# BB#5:                                 # %if.then.6
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rsi
	addq	$2464, %rsi             # imm = 0x9A0
	movq	%rcx, %rdi
	callq	memcpy
.LBB229_6:                              # %if.end
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
	movq	-16(%rbp), %rdi
	movl	$0, 2124(%rdi)
	movb	$1, -1(%rbp)
	jmp	.LBB229_54
.LBB229_7:                              # %if.end.8
	movq	-16(%rbp), %rax
	movq	2096(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	$0, 2096(%rax)
	movl	$0, -48(%rbp)
.LBB229_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, -41(%rbp)
	movb	%cl, -2417(%rbp)        # 1-byte Spill
	jne	.LBB229_10
# BB#9:                                 # %land.rhs
                                        #   in Loop: Header=BB229_8 Depth=1
	cmpl	$500, -48(%rbp)         # imm = 0x1F4
	setl	%al
	movb	%al, -2417(%rbp)        # 1-byte Spill
.LBB229_10:                             # %land.end
                                        #   in Loop: Header=BB229_8 Depth=1
	movb	-2417(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB229_11
	jmp	.LBB229_21
.LBB229_11:                             # %for.body
                                        #   in Loop: Header=BB229_8 Depth=1
	movq	-16(%rbp), %rdi
	callq	get_next_display_element
	testb	$1, %al
	jne	.LBB229_13
# BB#12:                                # %if.then.12
	movb	$0, -1(%rbp)
	jmp	.LBB229_54
.LBB229_13:                             # %if.end.13
                                        #   in Loop: Header=BB229_8 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	cmpl	$0, 2104(%rdx)
	movb	%cl, -2418(%rbp)        # 1-byte Spill
	jne	.LBB229_15
# BB#14:                                # %land.rhs.16
                                        #   in Loop: Header=BB229_8 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$10, 2124(%rax)
	sete	%cl
	movb	%cl, -2418(%rbp)        # 1-byte Spill
.LBB229_15:                             # %land.end.19
                                        #   in Loop: Header=BB229_8 Depth=1
	movb	-2418(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -41(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB229_19
# BB#16:                                # %land.lhs.true.21
                                        #   in Loop: Header=BB229_8 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB229_19
# BB#17:                                # %land.lhs.true.27
                                        #   in Loop: Header=BB229_8 Depth=1
	cmpq	$0, -32(%rbp)
	je	.LBB229_19
# BB#18:                                # %if.then.29
                                        #   in Loop: Header=BB229_8 Depth=1
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rsi
	addq	$2464, %rsi             # imm = 0x9A0
	movq	%rcx, %rdi
	callq	memcpy
.LBB229_19:                             # %if.end.31
                                        #   in Loop: Header=BB229_8 Depth=1
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
# BB#20:                                # %for.inc
                                        #   in Loop: Header=BB229_8 Depth=1
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	STRINGP
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	addl	-48(%rbp), %ecx
	movl	%ecx, -48(%rbp)
	jmp	.LBB229_8
.LBB229_21:                             # %for.end
	testb	$1, -41(%rbp)
	jne	.LBB229_53
# BB#22:                                # %if.then.34
	movl	$1, %eax
	movl	%eax, %edx
	leaq	-64(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	312(%rsi), %rsi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	320(%rsi), %rsi
	callq	find_newline_no_quit
	movq	%rax, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	cmpq	-80(%rbp), %rax
	jge	.LBB229_25
# BB#23:                                # %lor.lhs.false
	movl	$344, %edi              # imm = 0x158
	movq	-72(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -2432(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -2440(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-2432(%rbp), %rdi       # 8-byte Reload
	movq	-2440(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	callq	Fnext_single_property_change
	xorl	%edi, %edi
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -2448(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-2448(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB229_36
# BB#24:                                # %land.lhs.true.52
	movq	-72(%rbp), %rdi
	callq	next_overlay_change
	movq	current_buffer, %rdi
	cmpq	768(%rdi), %rax
	jne	.LBB229_36
.LBB229_25:                             # %if.then.55
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB229_27
# BB#26:                                # %if.then.61
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	-64(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 320(%rcx)
	jmp	.LBB229_35
.LBB229_27:                             # %if.else
	movq	-16(%rbp), %rax
	movq	2656(%rax), %rax
	cmpq	-80(%rbp), %rax
	jge	.LBB229_29
# BB#28:                                # %if.then.70
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2656(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 2664(%rax)
.LBB229_29:                             # %if.end.74
	jmp	.LBB229_30
.LBB229_30:                             # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	leaq	-2416(%rbp), %rcx
	movq	-16(%rbp), %rsi
	addq	$2464, %rsi             # imm = 0x9A0
	movq	%rcx, %rdi
	callq	memcpy
	movq	-16(%rbp), %rcx
	addq	$2464, %rcx             # imm = 0x9A0
	movq	%rcx, %rdi
	callq	bidi_move_to_visually_next
# BB#31:                                # %do.cond
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	-16(%rbp), %rax
	movq	2472(%rax), %rax
	cmpq	-80(%rbp), %rax
	jne	.LBB229_30
# BB#32:                                # %do.end
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	-16(%rbp), %rax
	movq	2464(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 320(%rcx)
	cmpq	$0, -32(%rbp)
	je	.LBB229_34
# BB#33:                                # %if.then.89
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	leaq	-2416(%rbp), %rcx
	movq	-32(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
.LBB229_34:                             # %if.end.90
	jmp	.LBB229_35
.LBB229_35:                             # %if.end.91
	movb	$1, -41(%rbp)
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
	jmp	.LBB229_52
.LBB229_36:                             # %if.else.92
	jmp	.LBB229_37
.LBB229_37:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rdi
	callq	get_next_display_element
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -2449(%rbp)        # 1-byte Spill
	jne	.LBB229_38
	jmp	.LBB229_39
.LBB229_38:                             # %land.rhs.94
                                        #   in Loop: Header=BB229_37 Depth=1
	movb	-41(%rbp), %al
	xorb	$-1, %al
	movb	%al, -2449(%rbp)        # 1-byte Spill
.LBB229_39:                             # %land.end.98
                                        #   in Loop: Header=BB229_37 Depth=1
	movb	-2449(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB229_40
	jmp	.LBB229_51
.LBB229_40:                             # %while.body
                                        #   in Loop: Header=BB229_37 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	cmpl	$0, 2104(%rdx)
	movb	%cl, -2450(%rbp)        # 1-byte Spill
	jne	.LBB229_46
# BB#41:                                # %land.rhs.101
                                        #   in Loop: Header=BB229_37 Depth=1
	movb	$1, %al
	movq	-16(%rbp), %rcx
	cmpl	$10, 2124(%rcx)
	movb	%al, -2451(%rbp)        # 1-byte Spill
	je	.LBB229_45
# BB#42:                                # %lor.rhs
                                        #   in Loop: Header=BB229_37 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	cmpl	$13, 2124(%rdx)
	movb	%cl, -2452(%rbp)        # 1-byte Spill
	jne	.LBB229_44
# BB#43:                                # %land.rhs.106
                                        #   in Loop: Header=BB229_37 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2096(%rax)
	setne	%cl
	movb	%cl, -2452(%rbp)        # 1-byte Spill
.LBB229_44:                             # %land.end.109
                                        #   in Loop: Header=BB229_37 Depth=1
	movb	-2452(%rbp), %al        # 1-byte Reload
	movb	%al, -2451(%rbp)        # 1-byte Spill
.LBB229_45:                             # %lor.end
                                        #   in Loop: Header=BB229_37 Depth=1
	movb	-2451(%rbp), %al        # 1-byte Reload
	movb	%al, -2450(%rbp)        # 1-byte Spill
.LBB229_46:                             # %land.end.110
                                        #   in Loop: Header=BB229_37 Depth=1
	movb	-2450(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movb	%al, -41(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB229_50
# BB#47:                                # %land.lhs.true.113
                                        #   in Loop: Header=BB229_37 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB229_50
# BB#48:                                # %land.lhs.true.119
                                        #   in Loop: Header=BB229_37 Depth=1
	cmpq	$0, -32(%rbp)
	je	.LBB229_50
# BB#49:                                # %if.then.121
                                        #   in Loop: Header=BB229_37 Depth=1
	movl	$2328, %eax             # imm = 0x918
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rsi
	addq	$2464, %rsi             # imm = 0x9A0
	movq	%rcx, %rdi
	callq	memcpy
.LBB229_50:                             # %if.end.123
                                        #   in Loop: Header=BB229_37 Depth=1
	xorl	%esi, %esi
	movq	-16(%rbp), %rdi
	callq	set_iterator_to_next
	jmp	.LBB229_37
.LBB229_51:                             # %while.end
	jmp	.LBB229_52
.LBB229_52:                             # %if.end.124
	jmp	.LBB229_53
.LBB229_53:                             # %if.end.125
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2096(%rcx)
	movb	-41(%rbp), %dl
	andb	$1, %dl
	movb	%dl, -1(%rbp)
.LBB229_54:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$2464, %rsp             # imm = 0x9A0
	popq	%rbp
	retq
.Lfunc_end229:
	.size	forward_to_next_line_start, .Lfunc_end229-forward_to_next_line_start
	.cfi_endproc

	.align	16, 0x90
	.type	unwind_with_echo_area_buffer,@function
unwind_with_echo_area_buffer:           # @unwind_with_echo_area_buffer
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp709:
	.cfi_def_cfa_offset 16
.Ltmp710:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp711:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, globals+416
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, windows_or_buffers_changed
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB230_1
	jmp	.LBB230_2
.LBB230_1:                              # %if.then
	movl	$3, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	XWINDOW
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	wset_buffer
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	-16(%rbp), %rax
	movq	96(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	AREF
	movl	$6, %ecx
	movl	%ecx, %esi
	sarq	$2, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	AREF
	sarq	$2, %rax
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	set_marker_both
	movl	$7, %r8d
	movl	%r8d, %esi
	movq	-16(%rbp), %rcx
	movq	104(%rcx), %rdi
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	AREF
	movl	$8, %r8d
	movl	%r8d, %esi
	sarq	$2, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	AREF
	sarq	$2, %rax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	-80(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	set_marker_both
	movl	$9, %r8d
	movl	%r8d, %esi
	movq	-16(%rbp), %rcx
	movq	88(%rcx), %rdi
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	callq	AREF
	movl	$10, %r8d
	movl	%r8d, %esi
	sarq	$2, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	AREF
	sarq	$2, %rax
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	-112(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	set_marker_both
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB230_2:                              # %if.end
	movq	-8(%rbp), %rax
	movq	%rax, Vwith_echo_area_save_vector
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end230:
	.size	unwind_with_echo_area_buffer, .Lfunc_end230-unwind_with_echo_area_buffer
	.cfi_endproc

	.align	16, 0x90
	.type	with_echo_area_buffer_unwind_data,@function
with_echo_area_buffer_unwind_data:      # @with_echo_area_buffer_unwind_data
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp712:
	.cfi_def_cfa_offset 16
.Ltmp713:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp714:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movl	$0, -12(%rbp)
	movq	Vwith_echo_area_save_vector, %rdi
	movq	%rdi, -24(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, Vwith_echo_area_save_vector
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB231_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$46, %edi
                                        # kill: RDI<def> EDI<kill>
	movq	%rax, %rsi
	callq	Fmake_vector
	movq	%rax, -24(%rbp)
.LBB231_2:                              # %if.end
	movl	$5, %esi
	movq	current_buffer, %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	globals+416, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movslq	windows_or_buffers_changed, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB231_4
# BB#3:                                 # %if.then.10
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	marker_position
	shlq	$2, %rax
	addq	$2, %rax
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	callq	marker_byte_position
	shlq	$2, %rax
	addq	$2, %rax
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	callq	marker_position
	shlq	$2, %rax
	addq	$2, %rax
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rdi, -104(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	callq	marker_byte_position
	shlq	$2, %rax
	addq	$2, %rax
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	callq	marker_position
	shlq	$2, %rax
	addq	$2, %rax
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	movq	-24(%rbp), %rdi
	movslq	-12(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rdi, -136(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	callq	marker_byte_position
	shlq	$2, %rax
	addq	$2, %rax
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB231_9
.LBB231_4:                              # %if.else
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -36(%rbp)
.LBB231_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB231_8
# BB#6:                                 # %for.body
                                        #   in Loop: Header=BB231_5 Depth=1
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rsi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
# BB#7:                                 # %for.inc
                                        #   in Loop: Header=BB231_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB231_5
.LBB231_8:                              # %for.end
	jmp	.LBB231_9
.LBB231_9:                              # %if.end.56
	movq	-24(%rbp), %rax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end231:
	.size	with_echo_area_buffer_unwind_data, .Lfunc_end231-with_echo_area_buffer_unwind_data
	.cfi_endproc

	.align	16, 0x90
	.type	set_message_1,@function
set_message_1:                          # @set_message_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp715:
	.cfi_def_cfa_offset 16
.Ltmp716:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp717:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movb	message_enable_multibyte, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movq	current_buffer, %rsi
	movq	312(%rsi), %rsi
	movl	%eax, %edi
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movl	%edx, -28(%rbp)         # 4-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	-28(%rbp), %edi         # 4-byte Reload
	cmpl	%edx, %edi
	je	.LBB232_5
# BB#1:                                 # %if.then
	testb	$1, message_enable_multibyte
	je	.LBB232_3
# BB#2:                                 # %cond.true
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB232_4
.LBB232_3:                              # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB232_4:                              # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rdi
	callq	Fset_buffer_multibyte
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB232_5:                              # %if.end
	movq	current_buffer, %rdi
	testb	$1, globals+3410
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	je	.LBB232_7
# BB#6:                                 # %cond.true.11
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB232_8
.LBB232_7:                              # %cond.false.13
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB232_8:                              # %cond.end.15
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_truncate_lines
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	240(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB232_10
# BB#9:                                 # %if.then.20
	movl	$610, %edi              # imm = 0x262
	movq	current_buffer, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_bidi_paragraph_direction
.LBB232_10:                             # %if.end.22
	movl	$1, %eax
	movl	%eax, %ecx
	movq	current_buffer, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	temp_set_point_both
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rcx
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	callq	SCHARS
	movq	-16(%rbp), %rdi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	SBYTES
	xorl	%r8d, %r8d
	movl	%r8d, %ecx
	movl	$1, %r9d
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	movq	-96(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	insert_from_string
	xorl	%r9d, %r9d
	movb	%r9b, %r10b
	andb	$1, %r10b
	movzbl	%r10b, %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end232:
	.size	set_message_1, .Lfunc_end232-set_message_1
	.cfi_endproc

	.align	16, 0x90
	.type	clear_garbaged_frames,@function
clear_garbaged_frames:                  # @clear_garbaged_frames
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp718:
	.cfi_def_cfa_offset 16
.Ltmp719:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp720:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	testb	$1, frame_garbaged
	je	.LBB233_20
# BB#1:                                 # %if.then
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB233_2
	jmp	.LBB233_4
.LBB233_2:                              # %land.lhs.true
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB233_4
# BB#3:                                 # %cond.true
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB233_5
.LBB233_4:                              # %cond.false
	callq	emacs_abort
.LBB233_5:                              # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	Vframe_list, %rcx
	movq	%rcx, -8(%rbp)
.LBB233_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -41(%rbp)          # 1-byte Spill
	jne	.LBB233_8
# BB#7:                                 # %land.rhs
                                        #   in Loop: Header=BB233_6 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -16(%rbp)
	movb	%al, -41(%rbp)          # 1-byte Spill
.LBB233_8:                              # %land.end
                                        #   in Loop: Header=BB233_6 Depth=1
	movb	-41(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB233_9
	jmp	.LBB233_19
.LBB233_9:                              # %for.body
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-16(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB233_17
# BB#10:                                # %land.lhs.true.7
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB233_17
# BB#11:                                # %if.then.13
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$1, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB233_15
# BB#12:                                # %land.lhs.true.19
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB233_14
# BB#13:                                # %land.lhs.true.22
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB233_15
.LBB233_14:                             # %if.then.29
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rdi
	callq	redraw_frame
	jmp	.LBB233_16
.LBB233_15:                             # %if.else
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rdi
	callq	clear_current_matrices
.LBB233_16:                             # %if.end
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-32(%rbp), %rdi
	callq	fset_redisplay
	movq	-32(%rbp), %rdi
	movq	208(%rdi), %rax
	andq	$-8193, %rax            # imm = 0xFFFFFFFFFFFFDFFF
	movq	%rax, 208(%rdi)
	movq	-32(%rbp), %rax
	movq	208(%rax), %rdi
	andq	$-3, %rdi
	movq	%rdi, 208(%rax)
.LBB233_17:                             # %if.end.36
                                        #   in Loop: Header=BB233_6 Depth=1
	jmp	.LBB233_18
.LBB233_18:                             # %for.inc
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-8(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB233_6
.LBB233_19:                             # %for.end
	movb	$0, frame_garbaged
.LBB233_20:                             # %if.end.38
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end233:
	.size	clear_garbaged_frames, .Lfunc_end233-clear_garbaged_frames
	.cfi_endproc

	.align	16, 0x90
	.type	display_echo_area,@function
display_echo_area:                      # @display_echo_area
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp721:
	.cfi_def_cfa_offset 16
.Ltmp722:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp723:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	callq	inhibit_garbage_collection
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movb	display_last_displayed_message_p, %cl
	andb	$1, %cl
	movb	%cl, -25(%rbp)
	movb	-25(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %eax
	movq	echo_area_buffer(,%rax,8), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rax
	movb	display_last_displayed_message_p, %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	movq	-8(%rbp), %rcx
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$display_echo_area_1, %rdx
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %esi         # 4-byte Reload
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	%rax, %r8
	callq	with_echo_area_buffer
	andb	$1, %al
	movb	%al, -10(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB234_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movb	-25(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edi
	movl	%edi, %edx
	movq	%rax, echo_area_buffer(,%rdx,8)
.LBB234_2:                              # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movb	-10(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movl	%edx, %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end234:
	.size	display_echo_area, .Lfunc_end234-display_echo_area
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_mode_lines,@function
redisplay_mode_lines:                   # @redisplay_mode_lines
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp724:
	.cfi_def_cfa_offset 16
.Ltmp725:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp726:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movl	$0, -16(%rbp)
.LBB235_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB235_2
	jmp	.LBB235_14
.LBB235_2:                              # %while.body
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB235_3
	jmp	.LBB235_4
.LBB235_3:                              # %if.then
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movb	-9(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	callq	redisplay_mode_lines
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB235_13
.LBB235_4:                              # %if.else
                                        #   in Loop: Header=BB235_1 Depth=1
	testb	$1, -9(%rbp)
	jne	.LBB235_7
# BB#5:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB235_7
# BB#6:                                 # %lor.lhs.false.6
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-20(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB235_12
.LBB235_7:                              # %if.then.13
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	current_buffer, %rax
	movq	%rax, -48(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	movq	-8(%rbp), %rax
	cmpq	selected_window, %rax
	je	.LBB235_9
# BB#8:                                 # %if.then.19
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	marker_position
	movq	current_buffer, %rdi
	movq	768(%rdi), %rdx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	clip_to_bounds
	movq	%rax, -64(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rdi
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	marker_byte_position
	movq	current_buffer, %rdx
	movq	776(%rdx), %rdx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	clip_to_bounds
	movq	%rax, -56(%rbp)
	movq	current_buffer, %rdi
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	temp_set_point_both
.LBB235_9:                              # %if.end
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movq	-24(%rbp), %rdi
	callq	display_mode_lines
	cmpl	$0, %eax
	je	.LBB235_11
# BB#10:                                # %if.then.32
                                        #   in Loop: Header=BB235_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB235_11:                             # %if.end.33
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-48(%rbp), %rdi
	callq	set_buffer_internal_1
	movq	current_buffer, %rdi
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	temp_set_point_both
.LBB235_12:                             # %if.end.36
                                        #   in Loop: Header=BB235_1 Depth=1
	jmp	.LBB235_13
.LBB235_13:                             # %if.end.37
                                        #   in Loop: Header=BB235_1 Depth=1
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB235_1
.LBB235_14:                             # %while.end
	movl	-16(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end235:
	.size	redisplay_mode_lines, .Lfunc_end235-redisplay_mode_lines
	.cfi_endproc

	.align	16, 0x90
	.type	display_echo_area_1,@function
display_echo_area_1:                    # @display_echo_area_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp727:
	.cfi_def_cfa_offset 16
.Ltmp728:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp729:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	callq	forget_escape_and_glyphless_faces
	xorl	%esi, %esi
	movq	-32(%rbp), %rdi
	callq	resize_mini_window
	andb	$1, %al
	movb	%al, -57(%rbp)
	movq	-32(%rbp), %rdi
	movq	88(%rdi), %rdi
	callq	marker_position
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$5, %esi
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	try_window
	movb	-57(%rbp), %r8b
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	movl	%eax, -64(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end236:
	.size	display_echo_area_1, .Lfunc_end236-display_echo_area_1
	.cfi_endproc

	.align	16, 0x90
	.type	display_mode_lines,@function
display_mode_lines:                     # @display_mode_lines
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp730:
	.cfi_def_cfa_offset 16
.Ltmp731:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp732:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$5, %esi
	movq	%rdi, -8(%rbp)
	movq	selected_window, %rdi
	movq	%rdi, -16(%rbp)
	movq	selected_frame, %rdi
	movq	%rdi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	subq	$5, %rdi
	movq	48(%rdi), %rdi
	movq	%rdi, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	-32(%rbp), %rdi
	movq	%rdi, selected_frame
	movq	-8(%rbp), %rdi
	callq	make_lisp_ptr
	movq	%rax, selected_window
	movq	selected_window, %rax
	movq	-32(%rbp), %rdi
	subq	$5, %rdi
	movq	%rax, 48(%rdi)
	movb	$0, line_number_displayed
	movq	-8(%rbp), %rax
	movq	$-1, 336(%rax)
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB237_1
	jmp	.LBB237_6
.LBB237_1:                              # %cond.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB237_15
# BB#2:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB237_15
# BB#3:                                 # %land.lhs.true.7
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB237_15
# BB#4:                                 # %land.lhs.true.14
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB237_15
# BB#5:                                 # %land.lhs.true.18
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB237_7
	jmp	.LBB237_15
.LBB237_6:                              # %cond.false
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB237_7
	jmp	.LBB237_15
.LBB237_7:                              # %if.then
	movq	-16(%rbp), %rdi
	callq	XWINDOW
	movb	$1, %cl
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rdi
	testb	$1, globals+3413
	movq	%rdi, -72(%rbp)         # 8-byte Spill
	movb	%cl, -73(%rbp)          # 1-byte Spill
	je	.LBB237_14
# BB#8:                                 # %lor.lhs.false
	movq	-56(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-88(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -73(%rbp)          # 1-byte Spill
	je	.LBB237_14
# BB#9:                                 # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -89(%rbp)          # 1-byte Spill
	jle	.LBB237_13
# BB#10:                                # %land.lhs.true.26
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-104(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -89(%rbp)          # 1-byte Spill
	je	.LBB237_13
# BB#11:                                # %land.lhs.true.29
	movq	-56(%rbp), %rax
	movq	minibuf_window, %rdi
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-112(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -89(%rbp)          # 1-byte Spill
	jne	.LBB237_13
# BB#12:                                # %land.rhs
	movq	-8(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-120(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -89(%rbp)          # 1-byte Spill
.LBB237_13:                             # %land.end
	movb	-89(%rbp), %al          # 1-byte Reload
	movb	%al, -73(%rbp)          # 1-byte Spill
.LBB237_14:                             # %lor.end
	movb	-73(%rbp), %al          # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	current_buffer, %rsi
	movq	96(%rsi), %rdx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movl	%ecx, %esi
	callq	display_mode_line
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -44(%rbp)
	movl	%eax, -124(%rbp)        # 4-byte Spill
.LBB237_15:                             # %if.end
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB237_16
	jmp	.LBB237_30
.LBB237_16:                             # %cond.true.38
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB237_32
# BB#17:                                # %land.lhs.true.43
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB237_32
# BB#18:                                # %land.lhs.true.49
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB237_32
# BB#19:                                # %land.lhs.true.57
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB237_32
# BB#20:                                # %land.lhs.true.62
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB237_21
	jmp	.LBB237_26
.LBB237_21:                             # %cond.true.66
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB237_28
# BB#22:                                # %land.lhs.true.71
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB237_28
# BB#23:                                # %land.lhs.true.77
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB237_28
# BB#24:                                # %land.lhs.true.85
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB237_28
# BB#25:                                # %land.lhs.true.91
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB237_27
	jmp	.LBB237_28
.LBB237_26:                             # %cond.false.97
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB237_27
	jmp	.LBB237_28
.LBB237_27:                             # %cond.true.98
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -156(%rbp)        # 4-byte Spill
	jmp	.LBB237_29
.LBB237_28:                             # %cond.false.102
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -156(%rbp)        # 4-byte Spill
.LBB237_29:                             # %cond.end
	movl	-156(%rbp), %eax        # 4-byte Reload
	movl	-140(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB237_31
	jmp	.LBB237_32
.LBB237_30:                             # %cond.false.108
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB237_31
	jmp	.LBB237_32
.LBB237_31:                             # %if.then.109
	movl	$5, %esi
	movq	-8(%rbp), %rdi
	movq	current_buffer, %rax
	movq	104(%rax), %rdx
	callq	display_mode_line
	movl	-44(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -44(%rbp)
	movl	%eax, -160(%rbp)        # 4-byte Spill
.LBB237_32:                             # %if.end.113
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	subq	$5, %rcx
	movq	%rax, 48(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, selected_frame
	movq	-16(%rbp), %rax
	movq	%rax, selected_window
	cmpl	$0, -44(%rbp)
	jle	.LBB237_34
# BB#33:                                # %if.then.117
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-1025, %cx             # imm = 0xFFFFFFFFFFFFFBFF
	orw	$1024, %cx              # imm = 0x400
	movw	%cx, 468(%rax)
.LBB237_34:                             # %if.end.120
	movl	-44(%rbp), %eax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end237:
	.size	display_mode_lines, .Lfunc_end237-display_mode_lines
	.cfi_endproc

	.align	16, 0x90
	.type	unwind_redisplay,@function
unwind_redisplay:                       # @unwind_redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp733:
	.cfi_def_cfa_offset 16
.Ltmp734:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp735:
	.cfi_def_cfa_register %rbp
	movb	$0, redisplaying_p
	popq	%rbp
	retq
.Lfunc_end238:
	.size	unwind_redisplay, .Lfunc_end238-unwind_redisplay
	.cfi_endproc

	.align	16, 0x90
	.type	prepare_menu_bars,@function
prepare_menu_bars:                      # @prepare_menu_bars
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp736:
	.cfi_def_cfa_offset 16
.Ltmp737:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp738:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movb	$1, %al
	cmpl	$0, windows_or_buffers_changed
	movb	%al, -145(%rbp)         # 1-byte Spill
	jne	.LBB239_2
# BB#1:                                 # %lor.rhs
	cmpl	$0, update_mode_lines
	setne	%al
	movb	%al, -145(%rbp)         # 1-byte Spill
.LBB239_2:                              # %lor.end
	movb	-145(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -1(%rbp)
	cmpl	$0, windows_or_buffers_changed
	je	.LBB239_4
# BB#3:                                 # %lor.lhs.false
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$2, windows_or_buffers_changed
	movb	%cl, -146(%rbp)         # 1-byte Spill
	jne	.LBB239_7
.LBB239_4:                              # %land.rhs
	movb	$1, %al
	cmpl	$0, update_mode_lines
	movb	%al, -147(%rbp)         # 1-byte Spill
	je	.LBB239_6
# BB#5:                                 # %lor.rhs.4
	cmpl	$2, update_mode_lines
	sete	%al
	movb	%al, -147(%rbp)         # 1-byte Spill
.LBB239_6:                              # %lor.end.6
	movb	-147(%rbp), %al         # 1-byte Reload
	movb	%al, -146(%rbp)         # 1-byte Spill
.LBB239_7:                              # %land.end
	movb	-146(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -2(%rbp)
	movq	tip_frame, %rcx
	movq	%rcx, -16(%rbp)
	movq	globals+1784, %rdi
	callq	FUNCTIONP
	testb	$1, %al
	jne	.LBB239_8
	jmp	.LBB239_23
.LBB239_8:                              # %if.then
	testb	$1, -1(%rbp)
	je	.LBB239_10
# BB#9:                                 # %cond.true
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB239_11
.LBB239_10:                             # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB239_11:                             # %cond.end
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
	testb	$1, -1(%rbp)
	je	.LBB239_22
# BB#12:                                # %land.lhs.true
	testb	$1, -2(%rbp)
	je	.LBB239_22
# BB#13:                                # %if.then.13
	callq	window_list
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
.LBB239_14:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB239_21
# BB#15:                                # %for.body
                                        #   in Loop: Header=BB239_14 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$14, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB239_18
# BB#16:                                # %lor.lhs.false.20
                                        #   in Loop: Header=BB239_14 Depth=1
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB239_18
# BB#17:                                # %lor.lhs.false.28
                                        #   in Loop: Header=BB239_14 Depth=1
	movq	-48(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB239_19
.LBB239_18:                             # %if.then.36
                                        #   in Loop: Header=BB239_14 Depth=1
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	Fcons
	movq	%rax, -24(%rbp)
.LBB239_19:                             # %if.end
                                        #   in Loop: Header=BB239_14 Depth=1
	jmp	.LBB239_20
.LBB239_20:                             # %for.inc
                                        #   in Loop: Header=BB239_14 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB239_14
.LBB239_21:                             # %for.end
	jmp	.LBB239_22
.LBB239_22:                             # %if.end.39
	movl	$1, %edi
	movq	globals+1784, %rsi
	movq	-24(%rbp), %rdx
	movb	$0, %al
	callq	safe__call1
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB239_23:                             # %if.end.41
	testb	$1, -1(%rbp)
	je	.LBB239_42
# BB#24:                                # %if.then.43
	movq	Vframe_list, %rax
	movq	%rax, -56(%rbp)
.LBB239_25:                             # %for.cond.45
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -169(%rbp)         # 1-byte Spill
	jne	.LBB239_27
# BB#26:                                # %land.rhs.50
                                        #   in Loop: Header=BB239_25 Depth=1
	movb	$1, %al
	movq	-56(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -64(%rbp)
	movb	%al, -169(%rbp)         # 1-byte Spill
.LBB239_27:                             # %land.end.53
                                        #   in Loop: Header=BB239_25 Depth=1
	movb	-169(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB239_28
	jmp	.LBB239_41
.LBB239_28:                             # %for.body.54
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-64(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	48(%rax), %rdi
	callq	XWINDOW
	movq	%rax, -80(%rbp)
	testb	$1, -2(%rbp)
	je	.LBB239_33
# BB#29:                                # %land.lhs.true.60
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-72(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB239_33
# BB#30:                                # %land.lhs.true.66
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-80(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$14, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB239_33
# BB#31:                                # %land.lhs.true.72
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-80(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB239_33
# BB#32:                                # %if.then.81
                                        #   in Loop: Header=BB239_25 Depth=1
	jmp	.LBB239_40
.LBB239_33:                             # %if.end.82
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB239_39
# BB#34:                                # %land.lhs.true.85
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-72(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB239_38
# BB#35:                                # %lor.lhs.false.91
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-72(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB239_38
# BB#36:                                # %lor.lhs.false.98
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-72(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB239_39
# BB#37:                                # %land.lhs.true.106
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-72(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB239_39
.LBB239_38:                             # %if.then.113
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-64(%rbp), %rdi
	callq	x_consider_frame_title
.LBB239_39:                             # %if.end.114
                                        #   in Loop: Header=BB239_25 Depth=1
	jmp	.LBB239_40
.LBB239_40:                             # %for.inc.115
                                        #   in Loop: Header=BB239_25 Depth=1
	movq	-56(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB239_25
.LBB239_41:                             # %for.end.119
	jmp	.LBB239_42
.LBB239_42:                             # %if.end.120
	testb	$1, -1(%rbp)
	je	.LBB239_64
# BB#43:                                # %if.then.122
	callq	SPECPDL_INDEX
	movq	%rax, -104(%rbp)
	movb	$0, -105(%rbp)
	callq	record_unwind_save_match_data
	movq	Vframe_list, %rax
	movq	%rax, -88(%rbp)
.LBB239_44:                             # %for.cond.126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_56 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-88(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -170(%rbp)         # 1-byte Spill
	jne	.LBB239_46
# BB#45:                                # %land.rhs.131
                                        #   in Loop: Header=BB239_44 Depth=1
	movb	$1, %al
	movq	-88(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movb	%al, -170(%rbp)         # 1-byte Spill
.LBB239_46:                             # %land.end.134
                                        #   in Loop: Header=BB239_44 Depth=1
	movb	-170(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB239_47
	jmp	.LBB239_63
.LBB239_47:                             # %for.body.135
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-96(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	48(%rax), %rdi
	callq	XWINDOW
	movq	%rax, -128(%rbp)
	movq	-96(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB239_49
# BB#48:                                # %if.then.143
                                        #   in Loop: Header=BB239_44 Depth=1
	jmp	.LBB239_62
.LBB239_49:                             # %if.end.144
                                        #   in Loop: Header=BB239_44 Depth=1
	testb	$1, -2(%rbp)
	je	.LBB239_54
# BB#50:                                # %land.lhs.true.147
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-120(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB239_54
# BB#51:                                # %land.lhs.true.153
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-128(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$14, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB239_54
# BB#52:                                # %land.lhs.true.159
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-128(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB239_54
# BB#53:                                # %if.then.168
                                        #   in Loop: Header=BB239_44 Depth=1
	jmp	.LBB239_62
.LBB239_54:                             # %if.end.169
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-120(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$19, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB239_61
# BB#55:                                # %if.then.174
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-120(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-524289, %rcx          # imm = 0xFFFFFFFFFFF7FFFF
	movq	%rcx, 208(%rax)
	movq	globals+2664, %rax
	movq	%rax, -136(%rbp)
.LBB239_56:                             # %while.cond
                                        #   Parent Loop BB239_44 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-136(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB239_60
# BB#57:                                # %while.body
                                        #   in Loop: Header=BB239_56 Depth=2
	movl	$901, %edi              # imm = 0x385
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB239_59
# BB#58:                                # %if.then.187
                                        #   in Loop: Header=BB239_56 Depth=2
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	-96(%rbp), %rsi
	callq	call1
	movq	%rax, -192(%rbp)        # 8-byte Spill
.LBB239_59:                             # %if.end.191
                                        #   in Loop: Header=BB239_56 Depth=2
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB239_56
.LBB239_60:                             # %while.end
                                        #   in Loop: Header=BB239_44 Depth=1
	jmp	.LBB239_61
.LBB239_61:                             # %if.end.195
                                        #   in Loop: Header=BB239_44 Depth=1
	xorl	%esi, %esi
	movq	-120(%rbp), %rdi
	movb	-105(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edx
	callq	update_menu_bar
	xorl	%esi, %esi
	andb	$1, %al
	movb	%al, -105(%rbp)
	movq	-120(%rbp), %rdi
	callq	update_tool_bar
.LBB239_62:                             # %for.inc.199
                                        #   in Loop: Header=BB239_44 Depth=1
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB239_44
.LBB239_63:                             # %for.end.203
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB239_69
.LBB239_64:                             # %if.else
	movq	selected_frame, %rdi
	callq	FRAMEP
	testb	$1, %al
	jne	.LBB239_65
	jmp	.LBB239_67
.LBB239_65:                             # %land.lhs.true.208
	movq	selected_frame, %rax
	subq	$5, %rax
	cmpq	$0, 376(%rax)
	je	.LBB239_67
# BB#66:                                # %cond.true.212
	movq	selected_frame, %rax
	subq	$5, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB239_68
.LBB239_67:                             # %cond.false.214
	callq	emacs_abort
.LBB239_68:                             # %cond.end.215
	movl	$1, %esi
	xorl	%edx, %edx
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rdi
	callq	update_menu_bar
	movl	$1, %esi
	movq	-144(%rbp), %rdi
	movb	%al, -217(%rbp)         # 1-byte Spill
	callq	update_tool_bar
.LBB239_69:                             # %if.end.218
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end239:
	.size	prepare_menu_bars, .Lfunc_end239-prepare_menu_bars
	.cfi_endproc

	.align	16, 0x90
	.type	reconsider_clip_changes,@function
reconsider_clip_changes:                # @reconsider_clip_changes
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp739:
	.cfi_def_cfa_offset 16
.Ltmp740:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp741:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	80(%rdi), %rdi
	callq	XBUFFER
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB240_18
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB240_18
# BB#2:                                 # %land.lhs.true.5
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	80(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB240_18
# BB#3:                                 # %land.lhs.true.6
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	96(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jne	.LBB240_5
# BB#4:                                 # %cond.true
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB240_9
.LBB240_5:                              # %cond.false
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB240_7
# BB#6:                                 # %cond.true.12
	movq	-16(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB240_8
.LBB240_7:                              # %cond.false.14
	movq	-16(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB240_8:                              # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB240_9:                              # %cond.end.17
	movq	-40(%rbp), %rax         # 8-byte Reload
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB240_18
# BB#10:                                # %land.lhs.true.20
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	88(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jne	.LBB240_12
# BB#11:                                # %cond.true.23
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB240_16
.LBB240_12:                             # %cond.false.25
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB240_14
# BB#13:                                # %cond.true.28
	movq	-16(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB240_15
.LBB240_14:                             # %cond.false.30
	movq	-16(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB240_15:                             # %cond.end.33
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB240_16:                             # %cond.end.35
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB240_18
# BB#17:                                # %if.then
	movq	-16(%rbp), %rax
	movb	936(%rax), %cl
	andb	$-3, %cl
	movb	%cl, 936(%rax)
.LBB240_18:                             # %if.end
	movq	-16(%rbp), %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB240_28
# BB#19:                                # %land.lhs.true.46
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB240_28
# BB#20:                                # %if.then.52
	movq	-8(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	XWINDOW
	movq	-96(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB240_22
# BB#21:                                # %cond.true.55
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB240_23
.LBB240_22:                             # %cond.false.57
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	marker_position
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB240_23:                             # %cond.end.59
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	80(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB240_25
# BB#24:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	312(%rcx), %rax
	je	.LBB240_27
.LBB240_25:                             # %land.lhs.true.65
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	80(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	312(%rax), %rsi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	callq	check_point_in_composition
	testb	$1, %al
	jne	.LBB240_26
	jmp	.LBB240_27
.LBB240_26:                             # %if.then.70
	movq	-16(%rbp), %rax
	movb	936(%rax), %cl
	andb	$-3, %cl
	orb	$2, %cl
	movb	%cl, 936(%rax)
.LBB240_27:                             # %if.end.74
	jmp	.LBB240_28
.LBB240_28:                             # %if.end.75
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end240:
	.size	reconsider_clip_changes, .Lfunc_end240-reconsider_clip_changes
	.cfi_endproc

	.align	16, 0x90
	.type	mode_line_update_needed,@function
mode_line_update_needed:                # @mode_line_update_needed
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp742:
	.cfi_def_cfa_offset 16
.Ltmp743:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp744:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	$-1, 336(%rdi)
	movb	%cl, -9(%rbp)           # 1-byte Spill
	je	.LBB241_4
# BB#1:                                 # %land.lhs.true
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jne	.LBB241_3
# BB#2:                                 # %land.lhs.true.2
	movq	-8(%rbp), %rdi
	callq	window_outdated
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -9(%rbp)           # 1-byte Spill
	jne	.LBB241_3
	jmp	.LBB241_4
.LBB241_3:                              # %land.rhs
	movq	-8(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	current_column
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	setne	%dl
	movb	%dl, -9(%rbp)           # 1-byte Spill
.LBB241_4:                              # %land.end
	movb	-9(%rbp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end241:
	.size	mode_line_update_needed, .Lfunc_end241-mode_line_update_needed
	.cfi_endproc

	.align	16, 0x90
	.type	overlay_arrows_changed_p,@function
overlay_arrows_changed_p:               # @overlay_arrows_changed_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp745:
	.cfi_def_cfa_offset 16
.Ltmp746:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp747:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	globals+1720, %rax
	movq	%rax, -16(%rbp)
.LBB242_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB242_16
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB242_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_15
.LBB242_4:                              # %if.end
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	find_symbol_value
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB242_6
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	je	.LBB242_7
.LBB242_6:                              # %if.then.13
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_15
.LBB242_7:                              # %if.end.14
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB242_10
# BB#8:                                 # %land.lhs.true.19
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB242_10
# BB#9:                                 # %cond.true
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	Fmarker_position
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB242_11
.LBB242_10:                             # %cond.false
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB242_11:                             # %cond.end
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-48(%rbp), %rax         # 8-byte Reload
	movl	$602, %edi              # imm = 0x25A
	movq	-24(%rbp), %rcx
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB242_13
# BB#12:                                # %lor.lhs.false
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	overlay_arrow_string_or_property
	movl	$603, %edi              # imm = 0x25B
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB242_14
.LBB242_13:                             # %if.then.33
	movb	$1, -1(%rbp)
	jmp	.LBB242_17
.LBB242_14:                             # %if.end.34
                                        #   in Loop: Header=BB242_1 Depth=1
	jmp	.LBB242_15
.LBB242_15:                             # %for.inc
                                        #   in Loop: Header=BB242_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB242_1
.LBB242_16:                             # %for.end
	movb	$0, -1(%rbp)
.LBB242_17:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end242:
	.size	overlay_arrows_changed_p, .Lfunc_end242-overlay_arrows_changed_p
	.cfi_endproc

	.align	16, 0x90
	.type	text_outside_line_unchanged_p,@function
text_outside_line_unchanged_p:          # @text_outside_line_unchanged_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp748:
	.cfi_def_cfa_offset 16
.Ltmp749:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp750:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$1, -25(%rbp)
	movq	-8(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB243_1
	jmp	.LBB243_26
.LBB243_1:                              # %if.then
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB243_3
# BB#2:                                 # %lor.lhs.false
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	subq	8(%rcx), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB243_4
.LBB243_3:                              # %if.then.5
	movb	$0, -25(%rbp)
.LBB243_4:                              # %if.end
	testb	$1, -25(%rbp)
	je	.LBB243_8
# BB#5:                                 # %land.lhs.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	movq	-16(%rbp), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	jl	.LBB243_7
# BB#6:                                 # %lor.lhs.false.9
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	96(%rax), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB243_8
.LBB243_7:                              # %if.then.12
	movb	$0, -25(%rbp)
.LBB243_8:                              # %if.end.13
	testb	$1, -25(%rbp)
	je	.LBB243_14
# BB#9:                                 # %land.lhs.true.15
	movq	current_buffer, %rax
	movq	256(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB243_14
# BB#10:                                # %land.lhs.true.19
	movq	current_buffer, %rax
	movq	256(%rax), %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jle	.LBB243_14
# BB#11:                                # %land.lhs.true.23
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB243_13
# BB#12:                                # %lor.lhs.false.28
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB243_14
.LBB243_13:                             # %if.then.33
	movb	$0, -25(%rbp)
.LBB243_14:                             # %if.end.34
	testb	$1, -25(%rbp)
	je	.LBB243_22
# BB#15:                                # %if.then.36
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	addq	$1, %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB243_18
# BB#16:                                # %land.lhs.true.41
	movq	-16(%rbp), %rdi
	callq	overlay_touches_p
	testb	$1, %al
	jne	.LBB243_17
	jmp	.LBB243_18
.LBB243_17:                             # %if.then.44
	movb	$0, -25(%rbp)
.LBB243_18:                             # %if.end.45
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	96(%rax), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB243_21
# BB#19:                                # %land.lhs.true.50
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	-24(%rbp), %rax
	movq	%rax, %rdi
	callq	overlay_touches_p
	testb	$1, %al
	jne	.LBB243_20
	jmp	.LBB243_21
.LBB243_20:                             # %if.then.56
	movb	$0, -25(%rbp)
.LBB243_21:                             # %if.end.57
	jmp	.LBB243_22
.LBB243_22:                             # %if.end.58
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB243_25
# BB#23:                                # %land.lhs.true.63
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	248(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB243_25
# BB#24:                                # %if.then.69
	movb	$0, -25(%rbp)
.LBB243_25:                             # %if.end.70
	jmp	.LBB243_26
.LBB243_26:                             # %if.end.71
	movb	-25(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end243:
	.size	text_outside_line_unchanged_p, .Lfunc_end243-text_outside_line_unchanged_p
	.cfi_endproc

	.align	16, 0x90
	.type	set_cursor_from_row,@function
set_cursor_from_row:                    # @set_cursor_from_row
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp751:
	.cfi_def_cfa_offset 16
.Ltmp752:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp753:
	.cfi_def_cfa_register %rbp
	subq	$672, %rsp              # imm = 0x2A0
	movl	16(%rbp), %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movl	%r9d, -52(%rbp)
	movl	%eax, -56(%rbp)
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movswl	34(%rdx), %eax
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -72(%rbp)
	movq	$0, -80(%rbp)
	movq	-24(%rbp), %rcx
	movq	176(%rcx), %rcx
	addq	-40(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	movq	-24(%rbp), %rcx
	movl	44(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	subq	-40(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-24(%rbp), %rcx
	movq	176(%rcx), %rcx
	addq	-40(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	addq	-40(%rbp), %rcx
	movq	%rcx, -120(%rbp)
	movq	-64(%rbp), %rcx
	addq	$-48, %rcx
	movq	%rcx, -128(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movb	$0, -145(%rbp)
	movb	$0, -146(%rbp)
	movq	-112(%rbp), %rcx
	movq	%rcx, -160(%rbp)
	movq	-120(%rbp), %rcx
	movq	%rcx, -168(%rbp)
	movq	$0, -176(%rbp)
	movb	$0, -177(%rbp)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB244_2
# BB#1:                                 # %if.then
	movb	$0, -1(%rbp)
	jmp	.LBB244_313
.LBB244_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_38
# BB#3:                                 # %if.then.14
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB244_17
# BB#4:                                 # %if.then.19
	jmp	.LBB244_5
.LBB244_5:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-72(%rbp), %rdx
	movb	%cl, -369(%rbp)         # 1-byte Spill
	jae	.LBB244_8
# BB#6:                                 # %land.lhs.true
                                        #   in Loop: Header=BB244_5 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-384(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -369(%rbp)         # 1-byte Spill
	jne	.LBB244_8
# BB#7:                                 # %land.rhs
                                        #   in Loop: Header=BB244_5 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	setl	%cl
	movb	%cl, -369(%rbp)         # 1-byte Spill
.LBB244_8:                              # %land.end
                                        #   in Loop: Header=BB244_5 Depth=1
	movb	-369(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_9
	jmp	.LBB244_10
.LBB244_9:                              # %while.body
                                        #   in Loop: Header=BB244_5 Depth=1
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB244_5
.LBB244_10:                             # %while.end
	jmp	.LBB244_11
.LBB244_11:                             # %while.cond.28
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -385(%rbp)         # 1-byte Spill
	jbe	.LBB244_14
# BB#12:                                # %land.lhs.true.31
                                        #   in Loop: Header=BB244_11 Depth=1
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	-40(%rax), %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-400(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -385(%rbp)         # 1-byte Spill
	jne	.LBB244_14
# BB#13:                                # %land.rhs.37
                                        #   in Loop: Header=BB244_11 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, -48(%rax)
	setle	%cl
	movb	%cl, -385(%rbp)         # 1-byte Spill
.LBB244_14:                             # %land.end.42
                                        #   in Loop: Header=BB244_11 Depth=1
	movb	-385(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_15
	jmp	.LBB244_16
.LBB244_15:                             # %while.body.43
                                        #   in Loop: Header=BB244_11 Depth=1
	movq	-72(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB244_11
.LBB244_16:                             # %while.end.45
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -128(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB244_37
.LBB244_17:                             # %if.else
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -72(%rbp)
	movq	%rax, -144(%rbp)
	movq	-24(%rbp), %rax
	movswl	34(%rax), %ecx
	subl	$1, %ecx
	movq	-64(%rbp), %rax
	movslq	%ecx, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
.LBB244_18:                             # %while.cond.54
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rsi
	addq	$48, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -401(%rbp)         # 1-byte Spill
	jbe	.LBB244_21
# BB#19:                                # %land.lhs.true.58
                                        #   in Loop: Header=BB244_18 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-416(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -401(%rbp)         # 1-byte Spill
	jne	.LBB244_21
# BB#20:                                # %land.rhs.63
                                        #   in Loop: Header=BB244_18 Depth=1
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	setl	%cl
	movb	%cl, -401(%rbp)         # 1-byte Spill
.LBB244_21:                             # %land.end.67
                                        #   in Loop: Header=BB244_18 Depth=1
	movb	-401(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_22
	jmp	.LBB244_23
.LBB244_22:                             # %while.body.68
                                        #   in Loop: Header=BB244_18 Depth=1
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-92(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -92(%rbp)
	jmp	.LBB244_18
.LBB244_23:                             # %while.end.73
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-424(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB244_26
# BB#24:                                # %land.lhs.true.78
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jge	.LBB244_26
# BB#25:                                # %if.then.82
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
.LBB244_26:                             # %if.end.84
	movq	-72(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -192(%rbp)
.LBB244_27:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-192(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB244_30
# BB#28:                                # %for.body
                                        #   in Loop: Header=BB244_27 Depth=1
	movq	-192(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
# BB#29:                                # %for.inc
                                        #   in Loop: Header=BB244_27 Depth=1
	movq	-192(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -192(%rbp)
	jmp	.LBB244_27
.LBB244_30:                             # %for.end
	jmp	.LBB244_31
.LBB244_31:                             # %while.cond.92
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -425(%rbp)         # 1-byte Spill
	jae	.LBB244_34
# BB#32:                                # %land.lhs.true.95
                                        #   in Loop: Header=BB244_31 Depth=1
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-440(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -425(%rbp)         # 1-byte Spill
	jne	.LBB244_34
# BB#33:                                # %land.rhs.101
                                        #   in Loop: Header=BB244_31 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, 48(%rax)
	setle	%cl
	movb	%cl, -425(%rbp)         # 1-byte Spill
.LBB244_34:                             # %land.end.106
                                        #   in Loop: Header=BB244_31 Depth=1
	movb	-425(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_35
	jmp	.LBB244_36
.LBB244_35:                             # %while.body.107
                                        #   in Loop: Header=BB244_31 Depth=1
	movq	-72(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB244_31
.LBB244_36:                             # %while.end.109
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -128(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -136(%rbp)
.LBB244_37:                             # %if.end.111
	jmp	.LBB244_45
.LBB244_38:                             # %if.else.112
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_44
# BB#39:                                # %if.then.118
	movq	-72(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB244_43
# BB#40:                                # %land.lhs.true.127
	movq	-16(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -444(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -448(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-448(%rbp), %ecx        # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-444(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB244_43
# BB#41:                                # %land.lhs.true.142
	movq	-80(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rcx
	addq	$-48, %rcx
	cmpq	%rcx, %rax
	jne	.LBB244_43
# BB#42:                                # %if.then.148
	movq	-80(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
.LBB244_43:                             # %if.end.150
	movl	$-1, -92(%rbp)
.LBB244_44:                             # %if.end.151
	jmp	.LBB244_45
.LBB244_45:                             # %if.end.152
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB244_84
# BB#46:                                # %if.then.158
	jmp	.LBB244_47
.LBB244_47:                             # %while.cond.159
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-72(%rbp), %rdx
	movb	%cl, -449(%rbp)         # 1-byte Spill
	jae	.LBB244_49
# BB#48:                                # %land.rhs.162
                                        #   in Loop: Header=BB244_47 Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-464(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -449(%rbp)         # 1-byte Spill
.LBB244_49:                             # %land.end.167
                                        #   in Loop: Header=BB244_47 Depth=1
	movb	-449(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_50
	jmp	.LBB244_83
.LBB244_50:                             # %while.body.168
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB244_51
	jmp	.LBB244_70
.LBB244_51:                             # %if.then.171
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	subq	-104(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-160(%rbp), %rax
	jle	.LBB244_53
# BB#52:                                # %if.then.177
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
.LBB244_53:                             # %if.end.179
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-168(%rbp), %rax
	jge	.LBB244_55
# BB#54:                                # %if.then.183
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB244_55:                             # %if.end.185
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$9, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB244_66
# BB#56:                                # %if.then.190
                                        #   in Loop: Header=BB244_47 Depth=1
	cmpq	$0, -200(%rbp)
	jne	.LBB244_58
# BB#57:                                # %if.then.193
	movb	$0, -145(%rbp)
	jmp	.LBB244_83
.LBB244_58:                             # %if.end.194
                                        #   in Loop: Header=BB244_47 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	cmpq	-200(%rbp), %rcx
	jle	.LBB244_61
# BB#59:                                # %land.lhs.true.197
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-200(%rbp), %rax
	movq	-112(%rbp), %rcx
	subq	-104(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB244_61
# BB#60:                                # %if.then.201
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB244_65
.LBB244_61:                             # %if.else.203
                                        #   in Loop: Header=BB244_47 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	cmpq	-200(%rbp), %rcx
	jge	.LBB244_64
# BB#62:                                # %land.lhs.true.206
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-200(%rbp), %rax
	movq	-120(%rbp), %rcx
	subq	-104(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB244_64
# BB#63:                                # %if.then.210
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -136(%rbp)
.LBB244_64:                             # %if.end.212
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_65
.LBB244_65:                             # %if.end.213
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_69
.LBB244_66:                             # %if.else.214
                                        #   in Loop: Header=BB244_47 Depth=1
	cmpq	$0, -200(%rbp)
	jne	.LBB244_68
# BB#67:                                # %if.then.217
                                        #   in Loop: Header=BB244_47 Depth=1
	movb	$1, -145(%rbp)
.LBB244_68:                             # %if.end.218
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_69
.LBB244_69:                             # %if.end.219
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_82
.LBB244_70:                             # %if.else.220
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB244_71
	jmp	.LBB244_81
.LBB244_71:                             # %if.then.223
                                        #   in Loop: Header=BB244_47 Depth=1
	movl	$306, %edi              # imm = 0x132
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-480(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB244_75
# BB#72:                                # %if.then.232
                                        #   in Loop: Header=BB244_47 Depth=1
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-112(%rbp), %rsi
	movq	-120(%rbp), %rdx
	callq	string_buffer_position_lim
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jl	.LBB244_74
# BB#73:                                # %if.then.237
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-224(%rbp), %rax
	movq	%rax, -160(%rbp)
.LBB244_74:                             # %if.end.238
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_75
.LBB244_75:                             # %if.end.239
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-208(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB244_80
# BB#76:                                # %if.then.244
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-160(%rbp), %rax
	movq	-208(%rbp), %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-160(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jg	.LBB244_79
# BB#77:                                # %land.lhs.true.248
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-176(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jl	.LBB244_79
# BB#78:                                # %if.then.251
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB244_83
.LBB244_79:                             # %if.end.252
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_80
.LBB244_80:                             # %if.end.253
                                        #   in Loop: Header=BB244_47 Depth=1
	movb	$1, -146(%rbp)
.LBB244_81:                             # %if.end.254
                                        #   in Loop: Header=BB244_47 Depth=1
	jmp	.LBB244_82
.LBB244_82:                             # %if.end.255
                                        #   in Loop: Header=BB244_47 Depth=1
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB244_47
.LBB244_83:                             # %while.end.260
	jmp	.LBB244_124
.LBB244_84:                             # %if.else.261
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jbe	.LBB244_123
# BB#85:                                # %if.then.264
	jmp	.LBB244_86
.LBB244_86:                             # %while.cond.265
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB244_87
	jmp	.LBB244_122
.LBB244_87:                             # %while.body.271
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB244_88
	jmp	.LBB244_107
.LBB244_88:                             # %if.then.274
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	subq	-104(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-160(%rbp), %rax
	jle	.LBB244_90
# BB#89:                                # %if.then.281
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
.LBB244_90:                             # %if.end.283
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-168(%rbp), %rax
	jge	.LBB244_92
# BB#91:                                # %if.then.287
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB244_92:                             # %if.end.289
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$9, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB244_103
# BB#93:                                # %if.then.295
                                        #   in Loop: Header=BB244_86 Depth=1
	cmpq	$0, -232(%rbp)
	jne	.LBB244_95
# BB#94:                                # %if.then.298
	movb	$0, -145(%rbp)
	jmp	.LBB244_122
.LBB244_95:                             # %if.end.299
                                        #   in Loop: Header=BB244_86 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	cmpq	-232(%rbp), %rcx
	jle	.LBB244_98
# BB#96:                                # %land.lhs.true.302
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-232(%rbp), %rax
	movq	-112(%rbp), %rcx
	subq	-104(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB244_98
# BB#97:                                # %if.then.306
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB244_102
.LBB244_98:                             # %if.else.308
                                        #   in Loop: Header=BB244_86 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	cmpq	-232(%rbp), %rcx
	jge	.LBB244_101
# BB#99:                                # %land.lhs.true.311
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-232(%rbp), %rax
	movq	-120(%rbp), %rcx
	subq	-104(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB244_101
# BB#100:                               # %if.then.315
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -136(%rbp)
.LBB244_101:                            # %if.end.317
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_102
.LBB244_102:                            # %if.end.318
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_106
.LBB244_103:                            # %if.else.319
                                        #   in Loop: Header=BB244_86 Depth=1
	cmpq	$0, -232(%rbp)
	jne	.LBB244_105
# BB#104:                               # %if.then.322
                                        #   in Loop: Header=BB244_86 Depth=1
	movb	$1, -145(%rbp)
.LBB244_105:                            # %if.end.323
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_106
.LBB244_106:                            # %if.end.324
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_119
.LBB244_107:                            # %if.else.325
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB244_108
	jmp	.LBB244_118
.LBB244_108:                            # %if.then.328
                                        #   in Loop: Header=BB244_86 Depth=1
	movl	$306, %edi              # imm = 0x132
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	-496(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-504(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB244_112
# BB#109:                               # %if.then.340
                                        #   in Loop: Header=BB244_86 Depth=1
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-112(%rbp), %rsi
	movq	-120(%rbp), %rdx
	callq	string_buffer_position_lim
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jl	.LBB244_111
# BB#110:                               # %if.then.346
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-256(%rbp), %rax
	movq	%rax, -160(%rbp)
.LBB244_111:                            # %if.end.347
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_112
.LBB244_112:                            # %if.end.348
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-240(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB244_117
# BB#113:                               # %if.then.354
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-160(%rbp), %rax
	movq	-240(%rbp), %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-160(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jg	.LBB244_116
# BB#114:                               # %land.lhs.true.359
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-176(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jl	.LBB244_116
# BB#115:                               # %if.then.362
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB244_122
.LBB244_116:                            # %if.end.363
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_117
.LBB244_117:                            # %if.end.364
                                        #   in Loop: Header=BB244_86 Depth=1
	movb	$1, -146(%rbp)
.LBB244_118:                            # %if.end.365
                                        #   in Loop: Header=BB244_86 Depth=1
	jmp	.LBB244_119
.LBB244_119:                            # %if.end.366
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jne	.LBB244_121
# BB#120:                               # %if.then.370
	movl	-92(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB244_122
.LBB244_121:                            # %if.end.371
                                        #   in Loop: Header=BB244_86 Depth=1
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-92(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -92(%rbp)
	jmp	.LBB244_86
.LBB244_122:                            # %while.end.375
	jmp	.LBB244_123
.LBB244_123:                            # %if.end.376
	jmp	.LBB244_124
.LBB244_124:                            # %if.end.377
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_126
# BB#125:                               # %cond.true
	movq	-64(%rbp), %rax
	cmpq	-144(%rbp), %rax
	ja	.LBB244_127
	jmp	.LBB244_129
.LBB244_126:                            # %cond.false
	movq	-64(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jae	.LBB244_129
.LBB244_127:                            # %land.lhs.true.388
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB244_128
	jmp	.LBB244_129
.LBB244_128:                            # %land.lhs.true.392
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-104(%rbp), %rax
	je	.LBB244_246
.LBB244_129:                            # %land.lhs.true.396
	movq	-160(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jg	.LBB244_131
# BB#130:                               # %land.lhs.true.399
	movq	-104(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jle	.LBB244_246
.LBB244_131:                            # %if.then.402
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_133
# BB#132:                               # %cond.true.409
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-144(%rbp), %rdx
	movb	%cl, -505(%rbp)         # 1-byte Spill
	ja	.LBB244_134
	jmp	.LBB244_139
.LBB244_133:                            # %cond.false.412
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-144(%rbp), %rdx
	movb	%cl, -505(%rbp)         # 1-byte Spill
	jae	.LBB244_139
.LBB244_134:                            # %land.lhs.true.415
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-520(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -505(%rbp)         # 1-byte Spill
	jne	.LBB244_139
# BB#135:                               # %land.lhs.true.420
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	$0, (%rdx)
	movb	%cl, -505(%rbp)         # 1-byte Spill
	jle	.LBB244_139
# BB#136:                               # %land.rhs.424
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$13, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	movb	%al, -521(%rbp)         # 1-byte Spill
	jne	.LBB244_138
# BB#137:                               # %lor.rhs
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	movb	%al, %cl
	movb	%cl, -521(%rbp)         # 1-byte Spill
.LBB244_138:                            # %lor.end
	movb	-521(%rbp), %al         # 1-byte Reload
	xorb	$-1, %al
	movb	%al, -505(%rbp)         # 1-byte Spill
.LBB244_139:                            # %land.end.436
	movb	-505(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -257(%rbp)
	movq	-24(%rbp), %rcx
	movq	236(%rcx), %rcx
	shrq	$29, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB244_155
# BB#140:                               # %land.lhs.true.442
	movq	-120(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jne	.LBB244_155
# BB#141:                               # %if.then.445
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB244_148
# BB#142:                               # %if.then.451
	movq	-64(%rbp), %rax
	movq	-48(%rax), %rax
	movq	%rax, -272(%rbp)
.LBB244_143:                            # %while.cond.454
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	movq	-24(%rbp), %rsi
	cmpq	8(%rsi), %rdx
	movb	%cl, -522(%rbp)         # 1-byte Spill
	jbe	.LBB244_145
# BB#144:                               # %land.rhs.459
                                        #   in Loop: Header=BB244_143 Depth=1
	movq	-64(%rbp), %rax
	movq	-48(%rax), %rax
	cmpq	-272(%rbp), %rax
	sete	%cl
	movb	%cl, -522(%rbp)         # 1-byte Spill
.LBB244_145:                            # %land.end.464
                                        #   in Loop: Header=BB244_143 Depth=1
	movb	-522(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_146
	jmp	.LBB244_147
.LBB244_146:                            # %while.body.465
                                        #   in Loop: Header=BB244_143 Depth=1
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-92(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -92(%rbp)
	jmp	.LBB244_143
.LBB244_147:                            # %while.end.470
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB244_154
.LBB244_148:                            # %if.else.475
	movq	-64(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -272(%rbp)
.LBB244_149:                            # %while.cond.478
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	8(%rsi), %rsi
	movq	-24(%rbp), %rdi
	movswl	34(%rdi), %eax
	movslq	%eax, %rdi
	imulq	$48, %rdi, %rdi
	addq	%rdi, %rsi
	addq	$-48, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -523(%rbp)         # 1-byte Spill
	jae	.LBB244_151
# BB#150:                               # %land.rhs.489
                                        #   in Loop: Header=BB244_149 Depth=1
	movq	-64(%rbp), %rax
	movq	48(%rax), %rax
	cmpq	-272(%rbp), %rax
	sete	%cl
	movb	%cl, -523(%rbp)         # 1-byte Spill
.LBB244_151:                            # %land.end.494
                                        #   in Loop: Header=BB244_149 Depth=1
	movb	-523(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_152
	jmp	.LBB244_153
.LBB244_152:                            # %while.body.495
                                        #   in Loop: Header=BB244_149 Depth=1
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
	jmp	.LBB244_149
.LBB244_153:                            # %while.end.500
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-92(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -92(%rbp)
	movq	-64(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -64(%rbp)
.LBB244_154:                            # %if.end.505
	jmp	.LBB244_245
.LBB244_155:                            # %if.else.506
	testb	$1, -145(%rbp)
	je	.LBB244_157
# BB#156:                               # %if.then.507
	movq	-136(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$-1, -92(%rbp)
	jmp	.LBB244_244
.LBB244_157:                            # %if.else.508
	testb	$1, -146(%rbp)
	je	.LBB244_231
# BB#158:                               # %if.then.510
	movl	$1, %eax
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movq	-24(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$34, %rdx
	andq	$1, %rdx
	movb	%dl, %sil
	testb	$1, %sil
	cmovnel	%ecx, %eax
	movl	%eax, -276(%rbp)
	movq	-112(%rbp), %rdx
	movq	%rdx, -304(%rbp)
	movl	$-1, -92(%rbp)
	movq	-24(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$26, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	je	.LBB244_160
# BB#159:                               # %if.then.521
	movq	-72(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -120(%rbp)
.LBB244_160:                            # %if.end.525
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB244_168
# BB#161:                               # %if.then.531
	movq	-128(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jae	.LBB244_163
# BB#162:                               # %cond.true.534
	movq	-128(%rbp), %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	jmp	.LBB244_164
.LBB244_163:                            # %cond.false.535
	movq	-136(%rbp), %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
.LBB244_164:                            # %cond.end
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, -288(%rbp)
	movq	-128(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jbe	.LBB244_166
# BB#165:                               # %cond.true.539
	movq	-128(%rbp), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	jmp	.LBB244_167
.LBB244_166:                            # %cond.false.540
	movq	-136(%rbp), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
.LBB244_167:                            # %cond.end.541
	movq	-544(%rbp), %rax        # 8-byte Reload
	movq	%rax, -296(%rbp)
	jmp	.LBB244_175
.LBB244_168:                            # %if.else.543
	movq	-128(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jbe	.LBB244_170
# BB#169:                               # %cond.true.546
	movq	-128(%rbp), %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	jmp	.LBB244_171
.LBB244_170:                            # %cond.false.547
	movq	-136(%rbp), %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
.LBB244_171:                            # %cond.end.548
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, -288(%rbp)
	movq	-128(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jae	.LBB244_173
# BB#172:                               # %cond.true.552
	movq	-128(%rbp), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	jmp	.LBB244_174
.LBB244_173:                            # %cond.false.553
	movq	-136(%rbp), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
.LBB244_174:                            # %cond.end.554
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, -296(%rbp)
.LBB244_175:                            # %if.end.556
	movq	-288(%rbp), %rax
	movslq	-276(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
.LBB244_176:                            # %for.cond.559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB244_190 Depth 2
                                        #     Child Loop BB244_211 Depth 2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_178
# BB#177:                               # %cond.true.566
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-296(%rbp), %rax
	seta	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, -564(%rbp)        # 4-byte Spill
	jmp	.LBB244_179
.LBB244_178:                            # %cond.false.569
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-296(%rbp), %rax
	setb	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, -564(%rbp)        # 4-byte Spill
.LBB244_179:                            # %cond.end.572
                                        #   in Loop: Header=BB244_176 Depth=1
	movl	-564(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB244_220
# BB#180:                               # %for.body.575
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB244_181
	jmp	.LBB244_218
.LBB244_181:                            # %if.then.578
                                        #   in Loop: Header=BB244_176 Depth=1
	xorl	%ecx, %ecx
	movq	-120(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	192(%rsi), %rsi
	addq	-40(%rbp), %rsi
	cmpq	%rsi, %rdx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	movslq	%r8d, %rdx
	addq	%rdx, %rax
	movq	%rax, -328(%rbp)
	movb	$0, -177(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rdi
	movq	-304(%rbp), %rsi
	movq	-328(%rbp), %rdx
	callq	string_buffer_position_lim
	movq	%rax, -320(%rbp)
	cmpq	$0, -320(%rbp)
	je	.LBB244_183
# BB#182:                               # %lor.lhs.false
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-304(%rbp), %rax
	cmpq	-320(%rbp), %rax
	jg	.LBB244_210
.LBB244_183:                            # %if.then.592
                                        #   in Loop: Header=BB244_176 Depth=1
	cmpq	$0, -320(%rbp)
	je	.LBB244_187
# BB#184:                               # %lor.lhs.false.595
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	cmpq	-104(%rbp), %rax
	je	.LBB244_187
# BB#185:                               # %lor.lhs.false.598
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	subq	-104(%rbp), %rax
	cmpq	$0, %rax
	jle	.LBB244_207
# BB#186:                               # %land.lhs.true.602
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jge	.LBB244_207
.LBB244_187:                            # %if.then.605
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -336(%rbp)
	cmpq	$0, -320(%rbp)
	je	.LBB244_189
# BB#188:                               # %if.then.608
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	movb	$1, -177(%rbp)
.LBB244_189:                            # %if.end.609
                                        #   in Loop: Header=BB244_176 Depth=1
	jmp	.LBB244_190
.LBB244_190:                            # %for.cond.610
                                        #   Parent Loop BB244_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_192
# BB#191:                               # %cond.true.617
                                        #   in Loop: Header=BB244_190 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-296(%rbp), %rdx
	movb	%cl, -565(%rbp)         # 1-byte Spill
	ja	.LBB244_193
	jmp	.LBB244_194
.LBB244_192:                            # %cond.false.620
                                        #   in Loop: Header=BB244_190 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-296(%rbp), %rdx
	movb	%cl, -565(%rbp)         # 1-byte Spill
	jae	.LBB244_194
.LBB244_193:                            # %land.rhs.623
                                        #   in Loop: Header=BB244_190 Depth=2
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-312(%rbp), %rax
	sete	%cl
	movb	%cl, -565(%rbp)         # 1-byte Spill
.LBB244_194:                            # %land.end.627
                                        #   in Loop: Header=BB244_190 Depth=2
	movb	-565(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_195
	jmp	.LBB244_202
.LBB244_195:                            # %for.body.628
                                        #   in Loop: Header=BB244_190 Depth=2
	movl	$306, %edi              # imm = 0x132
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -352(%rbp)
	movq	-352(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	-576(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-584(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB244_197
# BB#196:                               # %if.then.638
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB244_202
.LBB244_197:                            # %if.end.639
                                        #   in Loop: Header=BB244_190 Depth=2
	cmpq	$0, -320(%rbp)
	je	.LBB244_200
# BB#198:                               # %land.lhs.true.641
                                        #   in Loop: Header=BB244_190 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-336(%rbp), %rax
	jge	.LBB244_200
# BB#199:                               # %if.then.645
                                        #   in Loop: Header=BB244_190 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -336(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB244_200:                            # %if.end.647
                                        #   in Loop: Header=BB244_190 Depth=2
	jmp	.LBB244_201
.LBB244_201:                            # %for.inc.648
                                        #   in Loop: Header=BB244_190 Depth=2
	movl	-276(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -64(%rbp)
	jmp	.LBB244_190
.LBB244_202:                            # %for.end.651
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	cmpq	-104(%rbp), %rax
	je	.LBB244_205
# BB#203:                               # %lor.lhs.false.654
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	subq	-104(%rbp), %rax
	cmpq	$0, %rax
	jle	.LBB244_206
# BB#204:                               # %land.lhs.true.658
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jge	.LBB244_206
.LBB244_205:                            # %if.then.661
	jmp	.LBB244_247
.LBB244_206:                            # %if.end.662
                                        #   in Loop: Header=BB244_176 Depth=1
	jmp	.LBB244_207
.LBB244_207:                            # %if.end.663
                                        #   in Loop: Header=BB244_176 Depth=1
	cmpq	$0, -320(%rbp)
	je	.LBB244_209
# BB#208:                               # %if.then.665
                                        #   in Loop: Header=BB244_176 Depth=1
	movq	-320(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -304(%rbp)
.LBB244_209:                            # %if.end.667
                                        #   in Loop: Header=BB244_176 Depth=1
	jmp	.LBB244_210
.LBB244_210:                            # %if.end.668
                                        #   in Loop: Header=BB244_176 Depth=1
	jmp	.LBB244_211
.LBB244_211:                            # %while.cond.669
                                        #   Parent Loop BB244_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_213
# BB#212:                               # %cond.true.676
                                        #   in Loop: Header=BB244_211 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-296(%rbp), %rdx
	movb	%cl, -585(%rbp)         # 1-byte Spill
	ja	.LBB244_214
	jmp	.LBB244_215
.LBB244_213:                            # %cond.false.679
                                        #   in Loop: Header=BB244_211 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-296(%rbp), %rdx
	movb	%cl, -585(%rbp)         # 1-byte Spill
	jae	.LBB244_215
.LBB244_214:                            # %land.rhs.682
                                        #   in Loop: Header=BB244_211 Depth=2
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-312(%rbp), %rax
	sete	%cl
	movb	%cl, -585(%rbp)         # 1-byte Spill
.LBB244_215:                            # %land.end.686
                                        #   in Loop: Header=BB244_211 Depth=2
	movb	-585(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB244_216
	jmp	.LBB244_217
.LBB244_216:                            # %while.body.687
                                        #   in Loop: Header=BB244_211 Depth=2
	movl	-276(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -64(%rbp)
	jmp	.LBB244_211
.LBB244_217:                            # %while.end.690
                                        #   in Loop: Header=BB244_176 Depth=1
	jmp	.LBB244_219
.LBB244_218:                            # %if.else.691
                                        #   in Loop: Header=BB244_176 Depth=1
	movl	-276(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	%eax, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -64(%rbp)
.LBB244_219:                            # %if.end.694
                                        #   in Loop: Header=BB244_176 Depth=1
	jmp	.LBB244_176
.LBB244_220:                            # %for.end.695
	cmpq	$0, -80(%rbp)
	jne	.LBB244_230
# BB#221:                               # %land.lhs.true.698
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_223
# BB#222:                               # %cond.true.705
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jbe	.LBB244_224
	jmp	.LBB244_230
.LBB244_223:                            # %cond.false.708
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jb	.LBB244_230
.LBB244_224:                            # %land.lhs.true.711
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_226
# BB#225:                               # %cond.true.718
	movq	-72(%rbp), %rax
	cmpq	-144(%rbp), %rax
	ja	.LBB244_227
	jmp	.LBB244_230
.LBB244_226:                            # %cond.false.721
	movq	-72(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jae	.LBB244_230
.LBB244_227:                            # %land.lhs.true.724
	movq	-72(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB244_228
	jmp	.LBB244_230
.LBB244_228:                            # %land.lhs.true.728
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_230
# BB#229:                               # %if.then.735
	movb	$0, -1(%rbp)
	jmp	.LBB244_313
.LBB244_230:                            # %if.end.736
	jmp	.LBB244_243
.LBB244_231:                            # %if.else.737
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$11, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_234
# BB#232:                               # %land.lhs.true.743
	movq	-104(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jge	.LBB244_234
# BB#233:                               # %if.then.746
	movq	-128(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$-1, -92(%rbp)
	jmp	.LBB244_242
.LBB244_234:                            # %if.else.747
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_236
# BB#235:                               # %land.lhs.true.754
	movq	-104(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jg	.LBB244_240
.LBB244_236:                            # %lor.lhs.false.757
	testb	$1, -257(%rbp)
	jne	.LBB244_241
# BB#237:                               # %land.lhs.true.759
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_239
# BB#238:                               # %cond.true.766
	movq	-136(%rbp), %rax
	cmpq	-144(%rbp), %rax
	ja	.LBB244_240
	jmp	.LBB244_241
.LBB244_239:                            # %cond.false.769
	movq	-136(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jae	.LBB244_241
.LBB244_240:                            # %if.then.772
	movq	-136(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$-1, -92(%rbp)
.LBB244_241:                            # %if.end.773
	jmp	.LBB244_242
.LBB244_242:                            # %if.end.774
	jmp	.LBB244_243
.LBB244_243:                            # %if.end.775
	jmp	.LBB244_244
.LBB244_244:                            # %if.end.776
	jmp	.LBB244_245
.LBB244_245:                            # %if.end.777
	jmp	.LBB244_246
.LBB244_246:                            # %if.end.778
	jmp	.LBB244_247
.LBB244_247:                            # %compute_x
	cmpq	$0, -80(%rbp)
	je	.LBB244_249
# BB#248:                               # %if.then.781
	movq	-80(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB244_260
.LBB244_249:                            # %if.else.782
	movq	-64(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jne	.LBB244_259
# BB#250:                               # %land.lhs.true.785
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB244_259
# BB#251:                               # %land.lhs.true.788
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_253
# BB#252:                               # %cond.true.795
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	jmp	.LBB244_254
.LBB244_253:                            # %cond.false.804
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
.LBB244_254:                            # %cond.end.807
	movq	-600(%rbp), %rax        # 8-byte Reload
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB244_255
	jmp	.LBB244_259
.LBB244_255:                            # %if.then.812
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_257
# BB#256:                               # %cond.true.819
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	jmp	.LBB244_258
.LBB244_257:                            # %cond.false.828
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
.LBB244_258:                            # %cond.end.831
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
.LBB244_259:                            # %if.end.833
	jmp	.LBB244_260
.LBB244_260:                            # %if.end.834
	cmpl	$0, -92(%rbp)
	jge	.LBB244_268
# BB#261:                               # %if.then.837
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -360(%rbp)
	movq	-24(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, -92(%rbp)
.LBB244_262:                            # %for.cond.842
                                        # =>This Inner Loop Header: Depth=1
	movq	-360(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB244_267
# BB#263:                               # %for.body.845
                                        #   in Loop: Header=BB244_262 Depth=1
	movq	-360(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movswl	34(%rdx), %esi
	movslq	%esi, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	cmpq	%rcx, %rax
	jb	.LBB244_265
# BB#264:                               # %if.then.855
	callq	emacs_abort
.LBB244_265:                            # %if.end.856
                                        #   in Loop: Header=BB244_262 Depth=1
	movq	-360(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-92(%rbp), %ecx
	movl	%ecx, -92(%rbp)
# BB#266:                               # %for.inc.860
                                        #   in Loop: Header=BB244_262 Depth=1
	movq	-360(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -360(%rbp)
	jmp	.LBB244_262
.LBB244_267:                            # %for.end.862
	jmp	.LBB244_268
.LBB244_268:                            # %if.end.863
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jl	.LBB244_305
# BB#269:                               # %land.lhs.true.867
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpq	-24(%rbp), %rax
	je	.LBB244_305
# BB#270:                               # %land.lhs.true.874
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	176(%rax), %rax
	cmpq	-104(%rbp), %rax
	jg	.LBB244_305
# BB#271:                               # %land.lhs.true.884
	movq	-104(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	364(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB244_305
# BB#272:                               # %land.lhs.true.894
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	callq	cursor_row_p
	testb	$1, %al
	jne	.LBB244_273
	jmp	.LBB244_305
.LBB244_273:                            # %if.then.902
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	360(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -368(%rbp)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB244_275
# BB#274:                               # %cond.true.919
	movq	-64(%rbp), %rax
	cmpq	-144(%rbp), %rax
	ja	.LBB244_277
	jmp	.LBB244_276
.LBB244_275:                            # %cond.false.922
	movq	-64(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jb	.LBB244_277
.LBB244_276:                            # %if.then.925
	movb	$0, -1(%rbp)
	jmp	.LBB244_313
.LBB244_277:                            # %if.end.926
	movq	-16(%rbp), %rax
	cmpl	$0, 360(%rax)
	jl	.LBB244_296
# BB#278:                               # %land.lhs.true.931
	movq	-16(%rbp), %rax
	movl	360(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdx
	movslq	364(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movswl	34(%rax), %esi
	cmpl	%esi, %ecx
	jge	.LBB244_296
# BB#279:                               # %land.lhs.true.944
	movq	-368(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB244_280
	jmp	.LBB244_289
.LBB244_280:                            # %land.lhs.true.948
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-104(%rbp), %rax
	je	.LBB244_295
# BB#281:                               # %lor.lhs.false.952
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB244_282
	jmp	.LBB244_289
.LBB244_282:                            # %land.lhs.true.956
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	subq	-104(%rbp), %rax
	cmpq	$0, %rax
	jge	.LBB244_284
# BB#283:                               # %cond.true.961
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-368(%rbp), %rdx
	movq	(%rdx), %rdx
	subq	-104(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	jmp	.LBB244_285
.LBB244_284:                            # %cond.false.965
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	subq	-104(%rbp), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
.LBB244_285:                            # %cond.end.968
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	subq	-104(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rax, -624(%rbp)        # 8-byte Spill
	jge	.LBB244_287
# BB#286:                               # %cond.true.974
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-64(%rbp), %rdx
	movq	(%rdx), %rdx
	subq	-104(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	jmp	.LBB244_288
.LBB244_287:                            # %cond.false.978
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	subq	-104(%rbp), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
.LBB244_288:                            # %cond.end.981
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	-624(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB244_295
.LBB244_289:                            # %lor.lhs.false.985
	movq	-368(%rbp), %rax
	movq	8(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB244_290
	jmp	.LBB244_296
.LBB244_290:                            # %land.lhs.true.989
	movl	$306, %edi              # imm = 0x132
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-368(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	-640(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-648(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB244_295
# BB#291:                               # %lor.lhs.false.999
	movq	-368(%rbp), %rax
	movq	8(%rax), %rax
	movq	-64(%rbp), %rcx
	cmpq	8(%rcx), %rax
	jne	.LBB244_293
# BB#292:                               # %land.lhs.true.1004
	testb	$1, -177(%rbp)
	jne	.LBB244_295
.LBB244_293:                            # %lor.lhs.false.1007
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-656(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB244_296
# BB#294:                               # %land.lhs.true.1012
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-104(%rbp), %rax
	je	.LBB244_296
.LBB244_295:                            # %if.then.1016
	movb	$0, -1(%rbp)
	jmp	.LBB244_313
.LBB244_296:                            # %if.end.1017
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB244_297
	jmp	.LBB244_298
.LBB244_297:                            # %land.lhs.true.1021
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-104(%rbp), %rax
	je	.LBB244_304
.LBB244_298:                            # %lor.lhs.false.1025
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB244_302
# BB#299:                               # %land.lhs.true.1031
	xorl	%edi, %edi
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-664(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB244_302
# BB#300:                               # %land.lhs.true.1036
	movq	-64(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.LBB244_302
# BB#301:                               # %land.lhs.true.1040
	movq	-104(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	je	.LBB244_304
.LBB244_302:                            # %land.lhs.true.1046
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	192(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movslq	364(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	subq	176(%rcx), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	-24(%rbp), %rdx
	subq	176(%rdx), %rcx
	cmpq	%rcx, %rax
	jge	.LBB244_304
# BB#303:                               # %if.then.1069
	movb	$0, -1(%rbp)
	jmp	.LBB244_313
.LBB244_304:                            # %if.end.1070
	jmp	.LBB244_305
.LBB244_305:                            # %if.end.1071
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-64(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 360(%rax)
	movl	-92(%rbp), %edi
	movq	-16(%rbp), %rax
	movl	%edi, 352(%rax)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movslq	-56(%rbp), %rcx
	addq	%rcx, %rax
	movl	%eax, %edi
	movq	-16(%rbp), %rax
	movl	%edi, 364(%rax)
	movq	-24(%rbp), %rax
	movl	48(%rax), %edi
	addl	-52(%rbp), %edi
	movq	-16(%rbp), %rax
	movl	%edi, 356(%rax)
	movq	-16(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -672(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-672(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB244_312
# BB#306:                               # %if.then.1095
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB244_310
# BB#307:                               # %land.lhs.true.1101
	movq	-24(%rbp), %rax
	cmpl	$0, 244(%rax)
	jg	.LBB244_310
# BB#308:                               # %land.lhs.true.1104
	movq	-24(%rbp), %rax
	cmpl	$0, 44(%rax)
	jne	.LBB244_310
# BB#309:                               # %if.then.1108
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, this_line_buffer
	movq	-24(%rbp), %rax
	movq	176(%rax), %rax
	addq	-40(%rbp), %rax
	movq	%rax, this_line_start_pos
	movq	-24(%rbp), %rax
	movq	184(%rax), %rax
	addq	-48(%rbp), %rax
	movq	%rax, this_line_start_pos+8
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	192(%rdi), %rdi
	addq	-40(%rbp), %rdi
	subq	%rdi, %rax
	movq	%rax, this_line_end_pos
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	200(%rdi), %rdi
	addq	-48(%rbp), %rdi
	subq	%rdi, %rax
	movq	%rax, this_line_end_pos+8
	movq	-16(%rbp), %rax
	movl	356(%rax), %ecx
	movl	%ecx, this_line_y
	movq	-24(%rbp), %rax
	movl	60(%rax), %ecx
	movl	%ecx, this_line_pixel_height
	movq	-16(%rbp), %rax
	movl	364(%rax), %ecx
	movl	%ecx, this_line_vpos
	movq	-24(%rbp), %rax
	movl	44(%rax), %ecx
	movl	%ecx, this_line_start_x
	jmp	.LBB244_311
.LBB244_310:                            # %if.else.1129
	movq	$0, this_line_start_pos
.LBB244_311:                            # %if.end.1130
	jmp	.LBB244_312
.LBB244_312:                            # %if.end.1131
	movb	$1, -1(%rbp)
.LBB244_313:                            # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$672, %rsp              # imm = 0x2A0
	popq	%rbp
	retq
.Lfunc_end244:
	.size	set_cursor_from_row, .Lfunc_end244-set_cursor_from_row
	.cfi_endproc

	.align	16, 0x90
	.type	cursor_row_fully_visible_p,@function
cursor_row_fully_visible_p:             # @cursor_row_fully_visible_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp754:
	.cfi_def_cfa_offset 16
.Ltmp755:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp756:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	movb	%dl, %al
	movb	%sil, %cl
	movq	%rdi, -16(%rbp)
	andb	$1, %cl
	movb	%cl, -17(%rbp)
	andb	$1, %al
	movb	%al, -18(%rbp)
	testb	$1, globals+3408
	jne	.LBB245_2
# BB#1:                                 # %if.then
	movb	$1, -1(%rbp)
	jmp	.LBB245_99
.LBB245_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB245_4
# BB#3:                                 # %if.then.2
	movb	$1, -1(%rbp)
	jmp	.LBB245_99
.LBB245_4:                              # %if.end.3
	testb	$1, -18(%rbp)
	je	.LBB245_6
# BB#5:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB245_7
.LBB245_6:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB245_7:                              # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	60(%rax), %edx
	movq	-40(%rbp), %rax
	cmpl	72(%rax), %edx
	je	.LBB245_90
# BB#8:                                 # %land.lhs.true
	movq	-40(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB245_9
	jmp	.LBB245_23
.LBB245_9:                              # %cond.true.8
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_38
# BB#10:                                # %land.lhs.true.9
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_38
# BB#11:                                # %land.lhs.true.13
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB245_38
# BB#12:                                # %land.lhs.true.18
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB245_38
# BB#13:                                # %land.lhs.true.23
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB245_14
	jmp	.LBB245_19
.LBB245_14:                             # %cond.true.26
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_21
# BB#15:                                # %land.lhs.true.31
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_21
# BB#16:                                # %land.lhs.true.37
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB245_21
# BB#17:                                # %land.lhs.true.45
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB245_21
# BB#18:                                # %land.lhs.true.50
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB245_20
	jmp	.LBB245_21
.LBB245_19:                             # %cond.false.55
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_20
	jmp	.LBB245_21
.LBB245_20:                             # %cond.true.56
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
	jmp	.LBB245_22
.LBB245_21:                             # %cond.false.60
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -92(%rbp)         # 4-byte Spill
.LBB245_22:                             # %cond.end.64
	movl	-92(%rbp), %eax         # 4-byte Reload
	movl	-76(%rbp), %ecx         # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB245_24
	jmp	.LBB245_38
.LBB245_23:                             # %cond.false.67
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_24
	jmp	.LBB245_38
.LBB245_24:                             # %cond.true.68
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB245_26
# BB#25:                                # %cond.true.70
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -96(%rbp)         # 4-byte Spill
	jmp	.LBB245_37
.LBB245_26:                             # %cond.false.72
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB245_29
# BB#27:                                # %land.lhs.true.75
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB245_29
# BB#28:                                # %cond.true.79
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB245_30
	jmp	.LBB245_35
.LBB245_29:                             # %cond.false.84
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_30
	jmp	.LBB245_35
.LBB245_30:                             # %cond.true.85
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB245_33
# BB#31:                                # %land.lhs.true.88
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB245_33
# BB#32:                                # %cond.true.92
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -100(%rbp)        # 4-byte Spill
	jmp	.LBB245_34
.LBB245_33:                             # %cond.false.96
	xorl	%eax, %eax
	movl	%eax, -100(%rbp)        # 4-byte Spill
	jmp	.LBB245_34
.LBB245_34:                             # %cond.end.97
	movl	-100(%rbp), %eax        # 4-byte Reload
	movl	%eax, -104(%rbp)        # 4-byte Spill
	jmp	.LBB245_36
.LBB245_35:                             # %cond.false.99
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -104(%rbp)        # 4-byte Spill
.LBB245_36:                             # %cond.end.103
	movl	-104(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB245_37:                             # %cond.end.106
	movl	-96(%rbp), %eax         # 4-byte Reload
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB245_39
.LBB245_38:                             # %cond.false.108
	xorl	%eax, %eax
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB245_39
.LBB245_39:                             # %cond.end.109
	movl	-108(%rbp), %eax        # 4-byte Reload
	movl	-60(%rbp), %ecx         # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB245_91
# BB#40:                                # %lor.lhs.false
	movq	-40(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-40(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-40(%rbp), %rax
	subl	76(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	260(%rax), %edx
	movq	-16(%rbp), %rax
	movl	244(%rax), %esi
	movq	-16(%rbp), %rax
	addl	260(%rax), %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -112(%rbp)        # 4-byte Spill
	movl	%edx, -116(%rbp)        # 4-byte Spill
	movl	%esi, -120(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-124(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-120(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB245_42
# BB#41:                                # %land.lhs.true.129
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB245_44
.LBB245_42:                             # %lor.lhs.false.136
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB245_44
# BB#43:                                # %lor.lhs.false.141
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB245_45
.LBB245_44:                             # %cond.true.147
	xorl	%eax, %eax
	movl	%eax, -140(%rbp)        # 4-byte Spill
	jmp	.LBB245_46
.LBB245_45:                             # %cond.false.148
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
.LBB245_46:                             # %cond.end.151
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	-116(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -144(%rbp)        # 4-byte Spill
	jne	.LBB245_49
# BB#47:                                # %lor.lhs.false.159
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB245_50
# BB#48:                                # %land.lhs.true.164
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB245_50
.LBB245_49:                             # %cond.true.170
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_55
	jmp	.LBB245_59
.LBB245_50:                             # %cond.false.171
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB245_52
# BB#51:                                # %cond.true.174
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB245_55
	jmp	.LBB245_59
.LBB245_52:                             # %cond.false.181
	movl	$213, %edi
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB245_54
# BB#53:                                # %cond.true.185
	movb	$1, %al
	testb	$1, %al
	jne	.LBB245_55
	jmp	.LBB245_59
.LBB245_54:                             # %cond.false.186
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_55
	jmp	.LBB245_59
.LBB245_55:                             # %cond.true.187
	movq	-16(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB245_57
# BB#56:                                # %cond.true.189
	movq	-16(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -164(%rbp)        # 4-byte Spill
	jmp	.LBB245_58
.LBB245_57:                             # %cond.false.191
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -164(%rbp)        # 4-byte Spill
.LBB245_58:                             # %cond.end.194
	movl	-164(%rbp), %eax        # 4-byte Reload
	movl	%eax, -168(%rbp)        # 4-byte Spill
	jmp	.LBB245_60
.LBB245_59:                             # %cond.false.196
	xorl	%eax, %eax
	movl	%eax, -168(%rbp)        # 4-byte Spill
	jmp	.LBB245_60
.LBB245_60:                             # %cond.end.197
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	-144(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -172(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB245_61
	jmp	.LBB245_66
.LBB245_61:                             # %cond.true.202
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_88
# BB#62:                                # %land.lhs.true.207
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_88
# BB#63:                                # %land.lhs.true.213
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB245_88
# BB#64:                                # %land.lhs.true.221
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB245_88
# BB#65:                                # %land.lhs.true.227
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB245_67
	jmp	.LBB245_88
.LBB245_66:                             # %cond.false.233
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_67
	jmp	.LBB245_88
.LBB245_67:                             # %cond.true.234
	movq	-16(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB245_69
# BB#68:                                # %cond.true.236
	movq	-16(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
	jmp	.LBB245_87
.LBB245_69:                             # %cond.false.238
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB245_72
# BB#70:                                # %land.lhs.true.241
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB245_72
# BB#71:                                # %cond.true.245
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB245_73
	jmp	.LBB245_78
.LBB245_72:                             # %cond.false.254
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB245_73
	jmp	.LBB245_78
.LBB245_73:                             # %cond.true.255
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB245_76
# BB#74:                                # %land.lhs.true.258
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB245_76
# BB#75:                                # %cond.true.262
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -192(%rbp)        # 4-byte Spill
	jmp	.LBB245_77
.LBB245_76:                             # %cond.false.271
	xorl	%eax, %eax
	movl	%eax, -192(%rbp)        # 4-byte Spill
	jmp	.LBB245_77
.LBB245_77:                             # %cond.end.272
	movl	-192(%rbp), %eax        # 4-byte Reload
	movl	%eax, -196(%rbp)        # 4-byte Spill
	jmp	.LBB245_86
.LBB245_78:                             # %cond.false.274
	movb	$1, %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movb	%al, -209(%rbp)         # 1-byte Spill
	je	.LBB245_85
# BB#79:                                # %lor.lhs.false.278
	movq	-16(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-224(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -209(%rbp)         # 1-byte Spill
	je	.LBB245_85
# BB#80:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -225(%rbp)         # 1-byte Spill
	jle	.LBB245_84
# BB#81:                                # %land.lhs.true.282
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-240(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -225(%rbp)         # 1-byte Spill
	je	.LBB245_84
# BB#82:                                # %land.lhs.true.285
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-248(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -225(%rbp)         # 1-byte Spill
	jne	.LBB245_84
# BB#83:                                # %land.rhs
	movq	-16(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-256(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -225(%rbp)         # 1-byte Spill
.LBB245_84:                             # %land.end
	movb	-225(%rbp), %al         # 1-byte Reload
	movb	%al, -209(%rbp)         # 1-byte Spill
.LBB245_85:                             # %lor.end
	movb	-209(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -196(%rbp)        # 4-byte Spill
.LBB245_86:                             # %cond.end.293
	movl	-196(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -188(%rbp)        # 4-byte Spill
.LBB245_87:                             # %cond.end.296
	movl	-188(%rbp), %eax        # 4-byte Reload
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB245_89
.LBB245_88:                             # %cond.false.298
	xorl	%eax, %eax
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB245_89
.LBB245_89:                             # %cond.end.299
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	-172(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	-112(%rbp), %eax        # 4-byte Reload
	cmpl	%ecx, %eax
	jg	.LBB245_91
.LBB245_90:                             # %if.then.303
	movb	$1, -1(%rbp)
	jmp	.LBB245_99
.LBB245_91:                             # %if.end.304
	movq	-16(%rbp), %rdi
	callq	window_box_height
	movl	%eax, -44(%rbp)
	movq	-40(%rbp), %rdi
	movl	60(%rdi), %eax
	cmpl	-44(%rbp), %eax
	jl	.LBB245_98
# BB#92:                                # %if.then.308
	testb	$1, -17(%rbp)
	je	.LBB245_96
# BB#93:                                # %lor.lhs.false.310
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB245_96
# BB#94:                                # %lor.lhs.false.315
	movq	-16(%rbp), %rax
	cmpl	$0, 472(%rax)
	jne	.LBB245_96
# BB#95:                                # %lor.lhs.false.317
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jne	.LBB245_97
.LBB245_96:                             # %if.then.321
	movb	$1, -1(%rbp)
	jmp	.LBB245_99
.LBB245_97:                             # %if.end.322
	jmp	.LBB245_98
.LBB245_98:                             # %if.end.323
	movb	$0, -1(%rbp)
.LBB245_99:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end245:
	.size	cursor_row_fully_visible_p, .Lfunc_end245-cursor_row_fully_visible_p
	.cfi_endproc

	.align	16, 0x90
	.type	propagate_buffer_redisplay,@function
propagate_buffer_redisplay:             # @propagate_buffer_redisplay
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp757:
	.cfi_def_cfa_offset 16
.Ltmp758:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp759:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	callq	window_list
	movq	%rax, -8(%rbp)
.LBB246_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB246_6
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB246_1 Depth=1
	movq	-8(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	XWINDOW
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB246_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB246_1 Depth=1
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-16385, %cx            # imm = 0xFFFFFFFFFFFFBFFF
	orw	$16384, %cx             # imm = 0x4000
	movw	%cx, 468(%rax)
.LBB246_4:                              # %if.end
                                        #   in Loop: Header=BB246_1 Depth=1
	jmp	.LBB246_5
.LBB246_5:                              # %for.inc
                                        #   in Loop: Header=BB246_1 Depth=1
	movq	-8(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB246_1
.LBB246_6:                              # %for.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end246:
	.size	propagate_buffer_redisplay, .Lfunc_end246-propagate_buffer_redisplay
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_windows,@function
redisplay_windows:                      # @redisplay_windows
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp760:
	.cfi_def_cfa_offset 16
.Ltmp761:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp762:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
.LBB247_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB247_2
	jmp	.LBB247_8
.LBB247_2:                              # %while.body
                                        #   in Loop: Header=BB247_1 Depth=1
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB247_3
	jmp	.LBB247_4
.LBB247_3:                              # %if.then
                                        #   in Loop: Header=BB247_1 Depth=1
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	redisplay_windows
	jmp	.LBB247_7
.LBB247_4:                              # %if.else
                                        #   in Loop: Header=BB247_1 Depth=1
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB247_5
	jmp	.LBB247_6
.LBB247_5:                              # %if.then.6
                                        #   in Loop: Header=BB247_1 Depth=1
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movabsq	$redisplay_window_0, %rdi
	movabsq	$redisplay_window_error, %rcx
	movq	%rax, displayed_buffer
	movq	-8(%rbp), %rsi
	movq	list_of_error, %rdx
	callq	internal_condition_case_1
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB247_6:                              # %if.end
                                        #   in Loop: Header=BB247_1 Depth=1
	jmp	.LBB247_7
.LBB247_7:                              # %if.end.10
                                        #   in Loop: Header=BB247_1 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB247_1
.LBB247_8:                              # %while.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end247:
	.size	redisplay_windows, .Lfunc_end247-redisplay_windows
	.cfi_endproc

	.align	16, 0x90
	.type	hscroll_windows,@function
hscroll_windows:                        # @hscroll_windows
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp763:
	.cfi_def_cfa_offset 16
.Ltmp764:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp765:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	hscroll_window_tree
	andb	$1, %al
	movb	%al, -9(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB248_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	clear_desired_matrices
.LBB248_2:                              # %if.end
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end248:
	.size	hscroll_windows, .Lfunc_end248-hscroll_windows
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_window_1,@function
redisplay_window_1:                     # @redisplay_window_1
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp766:
	.cfi_def_cfa_offset 16
.Ltmp767:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp768:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	displayed_buffer, %rdi
	movq	888(%rdi), %rdi
	movq	displayed_buffer, %rax
	movq	720(%rax), %rax
	cmpq	48(%rax), %rdi
	jge	.LBB249_2
# BB#1:                                 # %if.then
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	redisplay_window
.LBB249_2:                              # %if.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end249:
	.size	redisplay_window_1, .Lfunc_end249-redisplay_window_1
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_window_error,@function
redisplay_window_error:                 # @redisplay_window_error
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp769:
	.cfi_def_cfa_offset 16
.Ltmp770:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp771:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	displayed_buffer, %rdi
	movq	720(%rdi), %rdi
	movq	48(%rdi), %rdi
	movq	displayed_buffer, %rcx
	movq	%rdi, 888(%rcx)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end250:
	.size	redisplay_window_error, .Lfunc_end250-redisplay_window_error
	.cfi_endproc

	.align	16, 0x90
	.type	x_consider_frame_title,@function
x_consider_frame_title:                 # @x_consider_frame_title
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp772:
	.cfi_def_cfa_offset 16
.Ltmp773:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp774:
	.cfi_def_cfa_register %rbp
	subq	$4992, %rsp             # imm = 0x1380
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	je	.LBB251_3
# BB#1:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	cmpq	56(%rcx), %rax
	je	.LBB251_3
# BB#2:                                 # %lor.lhs.false.2
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$18, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB251_25
.LBB251_3:                              # %land.lhs.true
	movl	$927, %edi              # imm = 0x39F
	movq	-8(%rbp), %rax
	movq	%rax, -4888(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4888(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fframe_parameter
	xorl	%edi, %edi
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4896(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB251_25
# BB#4:                                 # %if.then
	callq	SPECPDL_INDEX
	movq	%rax, -4872(%rbp)
	movq	Vframe_list, %rax
	movq	%rax, -24(%rbp)
.LBB251_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -4897(%rbp)        # 1-byte Spill
	jne	.LBB251_7
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB251_5 Depth=1
	movb	$1, %al
	movq	-24(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -32(%rbp)
	movb	%al, -4897(%rbp)        # 1-byte Spill
.LBB251_7:                              # %land.end
                                        #   in Loop: Header=BB251_5 Depth=1
	movb	-4897(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB251_8
	jmp	.LBB251_17
.LBB251_8:                              # %for.body
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-32(%rbp), %rax
	subq	$5, %rax
	movq	%rax, -4880(%rbp)
	movq	-4880(%rbp), %rax
	cmpq	-16(%rbp), %rax
	je	.LBB251_15
# BB#9:                                 # %land.lhs.true.17
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-4880(%rbp), %rax
	movq	376(%rax), %rax
	movq	72(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	376(%rcx), %rcx
	cmpq	72(%rcx), %rax
	jne	.LBB251_15
# BB#10:                                # %land.lhs.true.22
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-4880(%rbp), %rax
	movq	40(%rax), %rax
	movq	-4880(%rbp), %rcx
	cmpq	56(%rcx), %rax
	je	.LBB251_15
# BB#11:                                # %land.lhs.true.27
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-32(%rbp), %rax
	cmpq	tip_frame, %rax
	je	.LBB251_15
# BB#12:                                # %land.lhs.true.30
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-4880(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$10, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB251_14
# BB#13:                                # %lor.lhs.false.35
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-4880(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB251_15
.LBB251_14:                             # %if.then.41
	jmp	.LBB251_17
.LBB251_15:                             # %if.end
                                        #   in Loop: Header=BB251_5 Depth=1
	jmp	.LBB251_16
.LBB251_16:                             # %for.inc
                                        #   in Loop: Header=BB251_5 Depth=1
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB251_5
.LBB251_17:                             # %for.end
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$3, %edx
	sete	%sil
	andb	$1, %sil
	movb	%sil, globals+3415
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rsi
	movq	selected_window, %rdx
	callq	format_mode_line_unwind_data
	movabsq	$unwind_format_mode_line, %rdi
	movq	%rax, %rsi
	callq	record_unwind_protect
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4912(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fselect_window
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdi
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB251_19
# BB#18:                                # %cond.true
	movq	globals+1024, %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	jmp	.LBB251_20
.LBB251_19:                             # %cond.false
	movq	globals+888, %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
.LBB251_20:                             # %cond.end
	movq	-4928(%rbp), %rax       # 8-byte Reload
	movq	%rax, -40(%rbp)
	movl	$1, mode_line_target
	movq	mode_line_noprop_ptr, %rax
	movq	mode_line_noprop_buf, %rcx
	subq	%rcx, %rax
	subq	$0, %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	XWINDOW
	leaq	-4864(%rbp), %rdi
	movq	$-1, %rcx
	xorl	%edx, %edx
	movl	%edx, %r8d
	xorl	%r9d, %r9d
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	init_iterator
	xorl	%edi, %edi
	movq	-40(%rbp), %r8
	movq	%r8, -4936(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	leaq	-4864(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4294967295, %r9d       # imm = 0xFFFFFFFF
	movl	%r9d, %edx
	movl	%r9d, %ecx
	movq	-4936(%rbp), %r8        # 8-byte Reload
	movq	%rax, %r9
	movl	$0, (%rsp)
	callq	display_mode_element
	xorl	%edi, %edi
	movq	mode_line_noprop_ptr, %r8
	movq	mode_line_noprop_buf, %r9
	subq	%r9, %r8
	subq	-48(%rbp), %r8
	movq	%r8, -64(%rbp)
	movq	mode_line_noprop_buf, %r8
	addq	-48(%rbp), %r8
	movq	%r8, -56(%rbp)
	movq	-4872(%rbp), %r8
	movl	%eax, -4940(%rbp)       # 4-byte Spill
	movq	%r8, -4952(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rdi
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	callq	STRINGP
	testb	$1, %al
	jne	.LBB251_21
	jmp	.LBB251_23
.LBB251_21:                             # %lor.lhs.false.71
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	SBYTES
	cmpq	-64(%rbp), %rax
	jne	.LBB251_23
# BB#22:                                # %lor.lhs.false.76
	movq	-56(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rdi, -4968(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	callq	SDATA
	movq	-64(%rbp), %rdx
	movq	-4968(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	memcmp
	cmpl	$0, %eax
	je	.LBB251_24
.LBB251_23:                             # %if.then.82
	movq	-16(%rbp), %rdi
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rsi
	movq	%rdi, -4976(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	callq	make_string
	xorl	%edi, %edi
	movq	%rax, -4984(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4976(%rbp), %rdi       # 8-byte Reload
	movq	-4984(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	callq	x_implicitly_set_name
.LBB251_24:                             # %if.end.85
	jmp	.LBB251_25
.LBB251_25:                             # %if.end.86
	addq	$4992, %rsp             # imm = 0x1380
	popq	%rbp
	retq
.Lfunc_end251:
	.size	x_consider_frame_title, .Lfunc_end251-x_consider_frame_title
	.cfi_endproc

	.align	16, 0x90
	.type	update_menu_bar,@function
update_menu_bar:                        # @update_menu_bar
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp775:
	.cfi_def_cfa_offset 16
.Ltmp776:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp777:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movb	%dl, %al
	movb	%sil, %cl
	movq	%rdi, -16(%rbp)
	andb	$1, %cl
	movb	%cl, -17(%rbp)
	andb	$1, %al
	movb	%al, -18(%rbp)
	testb	$1, globals+3394
	je	.LBB252_2
# BB#1:                                 # %if.then
	movb	-18(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB252_22
.LBB252_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB252_4
# BB#3:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$9, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB252_5
	jmp	.LBB252_21
.LBB252_4:                              # %cond.false
	movq	-16(%rbp), %rax
	cmpl	$0, 356(%rax)
	jle	.LBB252_21
.LBB252_5:                              # %if.then.8
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB252_8
# BB#6:                                 # %lor.lhs.false
	cmpl	$0, update_mode_lines
	jne	.LBB252_8
# BB#7:                                 # %lor.lhs.false.11
	movq	-40(%rbp), %rdi
	callq	window_buffer_changed
	testb	$1, %al
	jne	.LBB252_8
	jmp	.LBB252_20
.LBB252_8:                              # %if.then.13
	movq	current_buffer, %rax
	movq	%rax, -48(%rbp)
	callq	SPECPDL_INDEX
	movl	$543, %edi              # imm = 0x21F
	movq	%rax, -56(%rbp)
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	testb	$1, -17(%rbp)
	je	.LBB252_10
# BB#9:                                 # %if.then.19
	callq	record_unwind_save_match_data
.LBB252_10:                             # %if.end.20
	xorl	%edi, %edi
	movq	globals+1736, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB252_12
# BB#11:                                # %if.then.23
	movl	$735, %edi              # imm = 0x2DF
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movl	$734, %edi              # imm = 0x2DE
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
.LBB252_12:                             # %if.end.28
	testb	$1, -18(%rbp)
	jne	.LBB252_16
# BB#13:                                # %if.then.30
	movl	$160, %edi
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	safe_run_hooks
	xorl	%edi, %edi
	movq	globals+1352, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB252_15
# BB#14:                                # %if.then.34
	movl	$795, %edi              # imm = 0x31B
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	call0
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB252_15:                             # %if.end.37
	movl	$655, %edi              # imm = 0x28F
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	safe_run_hooks
	movb	$1, -18(%rbp)
.LBB252_16:                             # %if.end.39
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, globals+1432
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rdi, -112(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	menu_bar_items
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	fset_menu_bar_items
	movq	-16(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB252_18
# BB#17:                                # %if.then.48
	xorl	%eax, %eax
	movq	-16(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	set_frame_menubar
	jmp	.LBB252_19
.LBB252_18:                             # %if.else
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rax)
.LBB252_19:                             # %if.end.51
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-48(%rbp), %rdi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	set_buffer_internal_1
.LBB252_20:                             # %if.end.54
	jmp	.LBB252_21
.LBB252_21:                             # %if.end.55
	movb	-18(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB252_22:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end252:
	.size	update_menu_bar, .Lfunc_end252-update_menu_bar
	.cfi_endproc

	.align	16, 0x90
	.type	update_tool_bar,@function
update_tool_bar:                        # @update_tool_bar
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp778:
	.cfi_def_cfa_offset 16
.Ltmp779:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp780:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$5, %rdi
	andq	$1, %rdi
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -10(%rbp)
	testb	$1, -10(%rbp)
	je	.LBB253_14
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -32(%rbp)
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB253_5
# BB#2:                                 # %lor.lhs.false
	movq	-32(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$2, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB253_5
# BB#3:                                 # %lor.lhs.false.7
	cmpl	$0, update_mode_lines
	jne	.LBB253_5
# BB#4:                                 # %lor.lhs.false.9
	movq	-32(%rbp), %rdi
	callq	window_buffer_changed
	testb	$1, %al
	jne	.LBB253_5
	jmp	.LBB253_13
.LBB253_5:                              # %if.then.11
	movq	current_buffer, %rax
	movq	%rax, -40(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	testb	$1, -9(%rbp)
	je	.LBB253_7
# BB#6:                                 # %if.then.15
	callq	record_unwind_save_match_data
.LBB253_7:                              # %if.end
	xorl	%edi, %edi
	movq	globals+1736, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB253_9
# BB#8:                                 # %if.then.17
	movl	$735, %edi              # imm = 0x2DF
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movl	$734, %edi              # imm = 0x2DE
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
.LBB253_9:                              # %if.end.22
	movabsq	$fast_set_selected_frame, %rdi
	movq	selected_frame, %rsi
	callq	record_unwind_protect
	movl	$5, %esi
	movq	-8(%rbp), %rdi
	callq	make_lisp_ptr
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	fast_set_selected_frame
	movq	-8(%rbp), %rax
	movq	136(%rax), %rdi
	callq	Fcopy_sequence
	leaq	-68(%rbp), %rsi
	movq	%rax, %rdi
	callq	tool_bar_items
	movq	%rax, -64(%rbp)
	movl	-68(%rbp), %ecx
	movq	-8(%rbp), %rax
	cmpl	228(%rax), %ecx
	jne	.LBB253_11
# BB#10:                                # %lor.lhs.false.27
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	136(%rax), %rsi
	callq	Fequal
	xorl	%edi, %edi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB253_12
.LBB253_11:                             # %if.then.32
	callq	block_input
	movq	-8(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	fset_tool_bar_items
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rsi
	movl	%eax, 228(%rsi)
	movq	-32(%rbp), %rsi
	movw	468(%rsi), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rsi)
	callq	unblock_input
.LBB253_12:                             # %if.end.37
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-40(%rbp), %rdi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	set_buffer_internal_1
.LBB253_13:                             # %if.end.40
	jmp	.LBB253_14
.LBB253_14:                             # %if.end.41
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end253:
	.size	update_tool_bar, .Lfunc_end253-update_tool_bar
	.cfi_endproc

	.align	16, 0x90
	.type	window_buffer_changed,@function
window_buffer_changed:                  # @window_buffer_changed
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp781:
	.cfi_def_cfa_offset 16
.Ltmp782:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp783:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	80(%rdi), %rdi
	callq	XBUFFER
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	720(%rax), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	720(%rdi), %rdi
	cmpq	48(%rdi), %rax
	setl	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movq	-8(%rbp), %rax
	movw	468(%rax), %si
	shrw	$3, %si
	andw	$1, %si
	movb	%sil, %cl
	andb	$1, %cl
	movzbl	%cl, %r8d
	cmpl	%r8d, %edx
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end254:
	.size	window_buffer_changed, .Lfunc_end254-window_buffer_changed
	.cfi_endproc

	.align	16, 0x90
	.type	fast_set_selected_frame,@function
fast_set_selected_frame:                # @fast_set_selected_frame
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp784:
	.cfi_def_cfa_offset 16
.Ltmp785:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp786:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	selected_frame, %rdi
	cmpq	-8(%rbp), %rdi
	je	.LBB255_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	%rax, selected_frame
	movq	-8(%rbp), %rax
	subq	$5, %rax
	movq	48(%rax), %rax
	movq	%rax, selected_window
.LBB255_2:                              # %if.end
	popq	%rbp
	retq
.Lfunc_end255:
	.size	fast_set_selected_frame, .Lfunc_end255-fast_set_selected_frame
	.cfi_endproc

	.align	16, 0x90
	.type	check_point_in_composition,@function
check_point_in_composition:             # @check_point_in_composition
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp787:
	.cfi_def_cfa_offset 16
.Ltmp788:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp789:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	$5, %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdi
	movl	%eax, %esi
	callq	make_lisp_ptr
	movq	%rax, -72(%rbp)
	movq	-16(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jne	.LBB256_25
# BB#1:                                 # %if.then
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB256_3
# BB#2:                                 # %if.then.2
	movb	$0, -1(%rbp)
	jmp	.LBB256_44
.LBB256_3:                              # %if.end
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jne	.LBB256_5
# BB#4:                                 # %cond.true
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jmp	.LBB256_9
.LBB256_5:                              # %cond.false
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB256_7
# BB#6:                                 # %cond.true.6
	movq	-32(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB256_8
.LBB256_7:                              # %cond.false.8
	movq	-32(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB256_8:                              # %cond.end
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB256_9:                              # %cond.end.11
	movq	-88(%rbp), %rax         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jle	.LBB256_24
# BB#10:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jne	.LBB256_12
# BB#11:                                # %cond.true.15
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB256_16
.LBB256_12:                             # %cond.false.16
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB256_14
# BB#13:                                # %cond.true.19
	movq	-32(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB256_15
.LBB256_14:                             # %cond.false.21
	movq	-32(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB256_15:                             # %cond.end.24
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB256_16:                             # %cond.end.26
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jge	.LBB256_24
# BB#17:                                # %land.lhs.true.29
	movq	$-1, %rsi
	leaq	-48(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-64(%rbp), %r8
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %r9
	callq	find_composition
	testb	$1, %al
	jne	.LBB256_18
	jmp	.LBB256_24
.LBB256_18:                             # %land.lhs.true.31
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	composition_valid_p
	testb	$1, %al
	jne	.LBB256_19
	jmp	.LBB256_24
.LBB256_19:                             # %land.lhs.true.33
	movq	-48(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB256_24
# BB#20:                                # %land.lhs.true.35
	movq	-56(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jle	.LBB256_24
# BB#21:                                # %if.then.37
	movb	$1, %al
	movq	-40(%rbp), %rcx
	cmpq	-48(%rbp), %rcx
	movb	%al, -137(%rbp)         # 1-byte Spill
	jle	.LBB256_23
# BB#22:                                # %lor.rhs
	movq	-40(%rbp), %rax
	cmpq	-56(%rbp), %rax
	setge	%cl
	movb	%cl, -137(%rbp)         # 1-byte Spill
.LBB256_23:                             # %lor.end
	movb	-137(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB256_44
.LBB256_24:                             # %if.end.40
	jmp	.LBB256_25
.LBB256_25:                             # %if.end.41
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jne	.LBB256_27
# BB#26:                                # %cond.true.43
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB256_31
.LBB256_27:                             # %cond.false.45
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB256_29
# BB#28:                                # %cond.true.49
	movq	-32(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB256_30
.LBB256_29:                             # %cond.false.51
	movq	-32(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB256_30:                             # %cond.end.54
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB256_31:                             # %cond.end.56
	movq	-160(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-152(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	movb	%dl, -177(%rbp)         # 1-byte Spill
	jle	.LBB256_43
# BB#32:                                # %land.lhs.true.59
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jne	.LBB256_34
# BB#33:                                # %cond.true.61
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB256_38
.LBB256_34:                             # %cond.false.63
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB256_36
# BB#35:                                # %cond.true.67
	movq	-32(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB256_37
.LBB256_36:                             # %cond.false.69
	movq	-32(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -216(%rbp)        # 8-byte Spill
.LBB256_37:                             # %cond.end.72
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB256_38:                             # %cond.end.74
	movq	-200(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-192(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	movb	%dl, -177(%rbp)         # 1-byte Spill
	jge	.LBB256_43
# BB#39:                                # %land.lhs.true.77
	movq	$-1, %rsi
	leaq	-48(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-64(%rbp), %r8
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %r9
	callq	find_composition
	xorl	%r10d, %r10d
	movb	%r10b, %r11b
	testb	$1, %al
	movb	%r11b, -177(%rbp)       # 1-byte Spill
	jne	.LBB256_40
	jmp	.LBB256_43
.LBB256_40:                             # %land.lhs.true.79
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	callq	composition_valid_p
	xorl	%ecx, %ecx
	movb	%cl, %r8b
	testb	$1, %al
	movb	%r8b, -177(%rbp)        # 1-byte Spill
	jne	.LBB256_41
	jmp	.LBB256_43
.LBB256_41:                             # %land.lhs.true.81
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	cmpq	-40(%rbp), %rdx
	movb	%cl, -177(%rbp)         # 1-byte Spill
	jge	.LBB256_43
# BB#42:                                # %land.rhs
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	setg	%cl
	movb	%cl, -177(%rbp)         # 1-byte Spill
.LBB256_43:                             # %land.end
	movb	-177(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB256_44:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end256:
	.size	check_point_in_composition, .Lfunc_end256-check_point_in_composition
	.cfi_endproc

	.align	16, 0x90
	.type	overlay_arrow_string_or_property,@function
overlay_arrow_string_or_property:       # @overlay_arrow_string_or_property
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp790:
	.cfi_def_cfa_offset 16
.Ltmp791:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp792:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$732, %eax              # imm = 0x2DC
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB257_1
	jmp	.LBB257_2
.LBB257_1:                              # %if.then
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB257_3
.LBB257_2:                              # %if.end
	movq	globals+1712, %rax
	movq	%rax, -8(%rbp)
.LBB257_3:                              # %return
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end257:
	.size	overlay_arrow_string_or_property, .Lfunc_end257-overlay_arrow_string_or_property
	.cfi_endproc

	.align	16, 0x90
	.type	string_buffer_position_lim,@function
string_buffer_position_lim:             # @string_buffer_position_lim
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp793:
	.cfi_def_cfa_offset 16
.Ltmp794:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp795:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movb	%cl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movb	$0, -57(%rbp)
	movq	-16(%rbp), %rdx
	movq	current_buffer, %rsi
	cmpq	752(%rsi), %rdx
	jle	.LBB258_2
# BB#1:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB258_3
.LBB258_2:                              # %cond.false
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB258_3:                              # %cond.end
	movq	-72(%rbp), %rax         # 8-byte Reload
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -25(%rbp)
	jne	.LBB258_17
# BB#4:                                 # %if.then
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB258_6
# BB#5:                                 # %cond.true.3
	movq	-24(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB258_7
.LBB258_6:                              # %cond.false.4
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB258_7:                              # %cond.end.6
	movq	-80(%rbp), %rax         # 8-byte Reload
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -40(%rbp)
.LBB258_8:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, -57(%rbp)
	movb	%cl, -81(%rbp)          # 1-byte Spill
	jne	.LBB258_10
# BB#9:                                 # %land.rhs
                                        #   in Loop: Header=BB258_8 Depth=1
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	sete	%cl
	xorb	$-1, %cl
	movb	%cl, -81(%rbp)          # 1-byte Spill
.LBB258_10:                             # %land.end
                                        #   in Loop: Header=BB258_8 Depth=1
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB258_11
	jmp	.LBB258_16
.LBB258_11:                             # %while.body
                                        #   in Loop: Header=BB258_8 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-56(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB258_14
# BB#12:                                # %land.lhs.true
                                        #   in Loop: Header=BB258_8 Depth=1
	movq	-48(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	display_prop_string_p
	testb	$1, %al
	jne	.LBB258_13
	jmp	.LBB258_14
.LBB258_13:                             # %if.then.17
                                        #   in Loop: Header=BB258_8 Depth=1
	movb	$1, -57(%rbp)
	jmp	.LBB258_15
.LBB258_14:                             # %if.else
                                        #   in Loop: Header=BB258_8 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-56(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fnext_single_char_property_change
	movq	%rax, -56(%rbp)
.LBB258_15:                             # %if.end
                                        #   in Loop: Header=BB258_8 Depth=1
	jmp	.LBB258_8
.LBB258_16:                             # %while.end
	jmp	.LBB258_30
.LBB258_17:                             # %if.else.21
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB258_19
# BB#18:                                # %cond.true.24
	movq	-24(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB258_20
.LBB258_19:                             # %cond.false.25
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB258_20:                             # %cond.end.27
	movq	-136(%rbp), %rax        # 8-byte Reload
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -40(%rbp)
.LBB258_21:                             # %while.cond.31
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, -57(%rbp)
	movb	%cl, -137(%rbp)         # 1-byte Spill
	jne	.LBB258_23
# BB#22:                                # %land.rhs.33
                                        #   in Loop: Header=BB258_21 Depth=1
	movq	-56(%rbp), %rax
	cmpq	-40(%rbp), %rax
	sete	%cl
	xorb	$-1, %cl
	movb	%cl, -137(%rbp)         # 1-byte Spill
.LBB258_23:                             # %land.end.36
                                        #   in Loop: Header=BB258_21 Depth=1
	movb	-137(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB258_24
	jmp	.LBB258_29
.LBB258_24:                             # %while.body.37
                                        #   in Loop: Header=BB258_21 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-56(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-160(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fget_char_property
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB258_27
# BB#25:                                # %land.lhs.true.43
                                        #   in Loop: Header=BB258_21 Depth=1
	movq	-48(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	display_prop_string_p
	testb	$1, %al
	jne	.LBB258_26
	jmp	.LBB258_27
.LBB258_26:                             # %if.then.45
                                        #   in Loop: Header=BB258_21 Depth=1
	movb	$1, -57(%rbp)
	jmp	.LBB258_28
.LBB258_27:                             # %if.else.46
                                        #   in Loop: Header=BB258_21 Depth=1
	movl	$344, %edi              # imm = 0x158
	movq	-56(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx
	movq	-176(%rbp), %rdi        # 8-byte Reload
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fprevious_single_char_property_change
	movq	%rax, -56(%rbp)
.LBB258_28:                             # %if.end.50
                                        #   in Loop: Header=BB258_21 Depth=1
	jmp	.LBB258_21
.LBB258_29:                             # %while.end.51
	jmp	.LBB258_30
.LBB258_30:                             # %if.end.52
	testb	$1, -57(%rbp)
	je	.LBB258_32
# BB#31:                                # %cond.true.54
	movq	-56(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jmp	.LBB258_33
.LBB258_32:                             # %cond.false.55
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB258_33
.LBB258_33:                             # %cond.end.56
	movq	-192(%rbp), %rax        # 8-byte Reload
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end258:
	.size	string_buffer_position_lim, .Lfunc_end258-string_buffer_position_lim
	.cfi_endproc

	.align	16, 0x90
	.type	cursor_row_p,@function
cursor_row_p:                           # @cursor_row_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp796:
	.cfi_def_cfa_offset 16
.Ltmp797:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp798:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, %rsi
	callq	row_for_charpos_p
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end259:
	.size	cursor_row_p, .Lfunc_end259-cursor_row_p
	.cfi_endproc

	.align	16, 0x90
	.type	display_prop_string_p,@function
display_prop_string_p:                  # @display_prop_string_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp799:
	.cfi_def_cfa_offset 16
.Ltmp800:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp801:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	andq	$7, %rsi
	movl	%esi, %eax
	cmpl	$3, %eax
	jne	.LBB260_10
# BB#1:                                 # %land.lhs.true
	movl	$1014, %edi             # imm = 0x3F6
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB260_10
# BB#2:                                 # %land.lhs.true.4
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB260_4
# BB#3:                                 # %land.lhs.true.11
	movl	$643, %edi              # imm = 0x283
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	subq	$3, %rcx
	cmpq	(%rcx), %rax
	je	.LBB260_10
.LBB260_4:                              # %if.then
	jmp	.LBB260_5
.LBB260_5:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB260_9
# BB#6:                                 # %while.body
                                        #   in Loop: Header=BB260_5 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	single_display_spec_string_p
	testb	$1, %al
	jne	.LBB260_7
	jmp	.LBB260_8
.LBB260_7:                              # %if.then.26
	movb	$1, -1(%rbp)
	jmp	.LBB260_21
.LBB260_8:                              # %if.end
                                        #   in Loop: Header=BB260_5 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB260_5
.LBB260_9:                              # %while.end
	jmp	.LBB260_20
.LBB260_10:                             # %if.else
	movq	-16(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB260_11
	jmp	.LBB260_18
.LBB260_11:                             # %if.then.29
	movq	$0, -32(%rbp)
.LBB260_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	ASIZE
	movq	-48(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jge	.LBB260_17
# BB#13:                                # %for.body
                                        #   in Loop: Header=BB260_12 Depth=1
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	AREF
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	single_display_spec_string_p
	testb	$1, %al
	jne	.LBB260_14
	jmp	.LBB260_15
.LBB260_14:                             # %if.then.35
	movb	$1, -1(%rbp)
	jmp	.LBB260_21
.LBB260_15:                             # %if.end.36
                                        #   in Loop: Header=BB260_12 Depth=1
	jmp	.LBB260_16
.LBB260_16:                             # %for.inc
                                        #   in Loop: Header=BB260_12 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB260_12
.LBB260_17:                             # %for.end
	jmp	.LBB260_19
.LBB260_18:                             # %if.else.37
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	single_display_spec_string_p
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB260_21
.LBB260_19:                             # %if.end.39
	jmp	.LBB260_20
.LBB260_20:                             # %if.end.40
	movb	$0, -1(%rbp)
.LBB260_21:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end260:
	.size	display_prop_string_p, .Lfunc_end260-display_prop_string_p
	.cfi_endproc

	.align	16, 0x90
	.type	single_display_spec_string_p,@function
single_display_spec_string_p:           # @single_display_spec_string_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp802:
	.cfi_def_cfa_offset 16
.Ltmp803:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp804:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	cmpq	-16(%rbp), %rsi
	jne	.LBB261_2
# BB#1:                                 # %if.then
	movb	$1, -1(%rbp)
	jmp	.LBB261_20
.LBB261_2:                              # %if.end
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB261_7
# BB#3:                                 # %land.lhs.true
	movl	$1014, %edi             # imm = 0x3F6
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB261_7
# BB#4:                                 # %if.then.5
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB261_6
# BB#5:                                 # %if.then.11
	movb	$0, -1(%rbp)
	jmp	.LBB261_20
.LBB261_6:                              # %if.end.12
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
.LBB261_7:                              # %if.end.16
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB261_15
# BB#8:                                 # %if.then.21
	movl	$643, %edi              # imm = 0x283
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB261_14
# BB#9:                                 # %if.then.27
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB261_11
# BB#10:                                # %if.then.35
	movb	$0, -1(%rbp)
	jmp	.LBB261_20
.LBB261_11:                             # %if.end.36
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB261_13
# BB#12:                                # %if.then.44
	movb	$0, -1(%rbp)
	jmp	.LBB261_20
.LBB261_13:                             # %if.end.45
	jmp	.LBB261_14
.LBB261_14:                             # %if.end.46
	jmp	.LBB261_15
.LBB261_15:                             # %if.end.47
	movb	$1, %al
	movq	-16(%rbp), %rcx
	cmpq	-24(%rbp), %rcx
	movb	%al, -41(%rbp)          # 1-byte Spill
	je	.LBB261_19
# BB#16:                                # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	movb	%cl, -42(%rbp)          # 1-byte Spill
	jne	.LBB261_18
# BB#17:                                # %land.rhs
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	cmpq	-24(%rbp), %rax
	sete	%cl
	movb	%cl, -42(%rbp)          # 1-byte Spill
.LBB261_18:                             # %land.end
	movb	-42(%rbp), %al          # 1-byte Reload
	movb	%al, -41(%rbp)          # 1-byte Spill
.LBB261_19:                             # %lor.end
	movb	-41(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB261_20:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end261:
	.size	single_display_spec_string_p, .Lfunc_end261-single_display_spec_string_p
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_window_0,@function
redisplay_window_0:                     # @redisplay_window_0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp805:
	.cfi_def_cfa_offset 16
.Ltmp806:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp807:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	displayed_buffer, %rdi
	movq	888(%rdi), %rdi
	movq	displayed_buffer, %rax
	movq	720(%rax), %rax
	cmpq	48(%rax), %rdi
	jge	.LBB262_2
# BB#1:                                 # %if.then
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	redisplay_window
.LBB262_2:                              # %if.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end262:
	.size	redisplay_window_0, .Lfunc_end262-redisplay_window_0
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_window,@function
redisplay_window:                       # @redisplay_window
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp808:
	.cfi_def_cfa_offset 16
.Ltmp809:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp810:
	.cfi_def_cfa_register %rbp
	subq	$11536, %rsp            # imm = 0x2D10
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rax
	movq	%rax, -48(%rbp)
	movb	$0, -4905(%rbp)
	movb	$0, -4906(%rbp)
	movb	$0, -4907(%rbp)
	movb	$0, -4908(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -4920(%rbp)
	movl	$-1, -4928(%rbp)
	movb	$0, -4929(%rbp)
	movq	$0, -4968(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -64(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	jne	.LBB263_18
# BB#1:                                 # %land.lhs.true
	cmpl	$0, windows_or_buffers_changed
	je	.LBB263_3
# BB#2:                                 # %lor.lhs.false
	cmpl	$2, windows_or_buffers_changed
	jne	.LBB263_18
.LBB263_3:                              # %land.lhs.true.5
	cmpl	$0, update_mode_lines
	je	.LBB263_5
# BB#4:                                 # %lor.lhs.false.7
	cmpl	$2, update_mode_lines
	jne	.LBB263_18
.LBB263_5:                              # %land.lhs.true.9
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$14, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_18
# BB#6:                                 # %land.lhs.true.10
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$2, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_18
# BB#7:                                 # %land.lhs.true.16
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$40, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB263_18
# BB#8:                                 # %land.lhs.true.21
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB263_18
# BB#9:                                 # %land.lhs.true.27
	movq	-40(%rbp), %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB263_18
# BB#10:                                # %land.lhs.true.33
	movq	-40(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB263_12
# BB#11:                                # %cond.true
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -10104(%rbp)      # 8-byte Spill
	jmp	.LBB263_16
.LBB263_12:                             # %cond.false
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -10112(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10112(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_14
# BB#13:                                # %cond.true.39
	movq	-40(%rbp), %rax
	movq	736(%rax), %rax
	movq	%rax, -10120(%rbp)      # 8-byte Spill
	jmp	.LBB263_15
.LBB263_14:                             # %cond.false.41
	movq	-40(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -10120(%rbp)      # 8-byte Spill
.LBB263_15:                             # %cond.end
	movq	-10120(%rbp), %rax      # 8-byte Reload
	movq	%rax, -10104(%rbp)      # 8-byte Spill
.LBB263_16:                             # %cond.end.44
	movq	-10104(%rbp), %rax      # 8-byte Reload
	movq	-24(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jne	.LBB263_18
# BB#17:                                # %if.then
	jmp	.LBB263_707
.LBB263_18:                             # %if.end
	jmp	.LBB263_19
.LBB263_19:                             # %restart
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	reconsider_clip_changes
	movq	-24(%rbp), %rdi
	callq	default_line_pixel_height
	movb	$1, %cl
	movl	%eax, -4956(%rbp)
	movq	-24(%rbp), %rdi
	movw	468(%rdi), %dx
	shrw	$2, %dx
	andw	$1, %dx
	testw	$1, %dx
	movb	%cl, -10121(%rbp)       # 1-byte Spill
	jne	.LBB263_23
# BB#20:                                # %lor.lhs.false.53
                                        #   in Loop: Header=BB263_19 Depth=1
	movb	$1, %al
	cmpl	$0, update_mode_lines
	movb	%al, -10121(%rbp)       # 1-byte Spill
	jne	.LBB263_23
# BB#21:                                # %lor.lhs.false.55
                                        #   in Loop: Header=BB263_19 Depth=1
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movb	936(%rcx), %dl
	shrb	$1, %dl
	andb	$1, %dl
	testb	$1, %dl
	movb	%al, -10121(%rbp)       # 1-byte Spill
	jne	.LBB263_23
# BB#22:                                # %lor.rhs
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-40(%rbp), %rax
	movb	936(%rax), %cl
	andb	$1, %cl
	movb	%cl, -10121(%rbp)       # 1-byte Spill
.LBB263_23:                             # %lor.end
                                        #   in Loop: Header=BB263_19 Depth=1
	movb	-10121(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movb	%al, -97(%rbp)
	testb	$1, -9(%rbp)
	jne	.LBB263_25
# BB#24:                                # %if.then.65
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-1025, %cx             # imm = 0xFFFFFFFFFFFFFBFF
	orw	$1024, %cx              # imm = 0x400
	movw	%cx, 468(%rax)
.LBB263_25:                             # %if.end.68
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_42
# BB#26:                                # %if.then.72
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movq	echo_area_window, %rdi
	movq	%rax, -10136(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-10136(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB263_31
# BB#27:                                # %land.lhs.true.75
                                        #   in Loop: Header=BB263_19 Depth=1
	xorl	%edi, %edi
	movq	echo_area_buffer, %rax
	movq	%rax, -10144(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_31
# BB#28:                                # %if.then.78
	testb	$1, -97(%rbp)
	je	.LBB263_30
# BB#29:                                # %if.then.80
	jmp	.LBB263_599
.LBB263_30:                             # %if.else
	jmp	.LBB263_635
.LBB263_31:                             # %if.else.81
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movq	minibuf_window, %rdi
	movq	%rax, -10152(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-10152(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB263_33
# BB#32:                                # %lor.lhs.false.84
                                        #   in Loop: Header=BB263_19 Depth=1
	cmpq	$0, minibuf_level
	jne	.LBB263_40
.LBB263_33:                             # %land.lhs.true.86
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	cmpq	$1, 16(%rax)
	jne	.LBB263_40
# BB#34:                                # %land.lhs.true.91
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movq	Vminibuffer_list, %rsi
	callq	Fmemq
	xorl	%edi, %edi
	movq	%rax, -10160(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10160(%rbp), %rsi      # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB263_40
# BB#35:                                # %if.then.96
	movq	-24(%rbp), %rdi
	callq	window_text_bottom_y
	movl	%eax, -4972(%rbp)
	movl	$0, -4988(%rbp)
	movq	-24(%rbp), %rdi
	movq	200(%rdi), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -4984(%rbp)
.LBB263_36:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4988(%rbp), %eax
	cmpl	-4972(%rbp), %eax
	jge	.LBB263_39
# BB#37:                                # %for.body
                                        #   in Loop: Header=BB263_36 Depth=1
	movq	-24(%rbp), %rdi
	movq	-4984(%rbp), %rsi
	movl	-4988(%rbp), %edx
	callq	blank_row
# BB#38:                                # %for.inc
                                        #   in Loop: Header=BB263_36 Depth=1
	movq	-4984(%rbp), %rax
	movl	60(%rax), %ecx
	addl	-4988(%rbp), %ecx
	movl	%ecx, -4988(%rbp)
	movq	-4984(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4984(%rbp)
	jmp	.LBB263_36
.LBB263_39:                             # %for.end
	jmp	.LBB263_635
.LBB263_40:                             # %if.end.100
                                        #   in Loop: Header=BB263_19 Depth=1
	jmp	.LBB263_41
.LBB263_41:                             # %if.end.101
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
.LBB263_42:                             # %if.end.103
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal_1
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rax
	movw	468(%rax), %si
	shrw	$13, %si
	andw	$1, %si
	testw	$1, %si
	movb	%dl, -10161(%rbp)       # 1-byte Spill
	je	.LBB263_46
# BB#43:                                # %land.lhs.true.110
                                        #   in Loop: Header=BB263_19 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	current_buffer, %rdx
	movb	936(%rdx), %sil
	shrb	$1, %sil
	andb	$1, %sil
	testb	$1, %sil
	movb	%cl, -10161(%rbp)       # 1-byte Spill
	jne	.LBB263_46
# BB#44:                                # %land.lhs.true.116
                                        #   in Loop: Header=BB263_19 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	current_buffer, %rdx
	movb	936(%rdx), %sil
	andb	$1, %sil
	testb	$1, %sil
	movb	%cl, -10161(%rbp)       # 1-byte Spill
	jne	.LBB263_46
# BB#45:                                # %land.rhs
                                        #   in Loop: Header=BB263_19 Depth=1
	movq	-24(%rbp), %rdi
	callq	window_outdated
	xorb	$-1, %al
	movb	%al, -10161(%rbp)       # 1-byte Spill
.LBB263_46:                             # %land.end
                                        #   in Loop: Header=BB263_19 Depth=1
	movb	-10161(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movb	%al, -4905(%rbp)
	testb	$1, -4905(%rbp)
	jne	.LBB263_49
# BB#47:                                # %land.lhs.true.124
                                        #   in Loop: Header=BB263_19 Depth=1
	xorl	%edi, %edi
	movq	globals+2680, %rax
	movq	%rax, -10176(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10176(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_49
# BB#48:                                # %if.then.127
                                        #   in Loop: Header=BB263_19 Depth=1
	movl	$1035, %edi             # imm = 0x40B
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	safe_run_hooks
	jmp	.LBB263_19
.LBB263_49:                             # %if.end.129
	movl	$545, %edi              # imm = 0x221
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -4944(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	96(%rax), %rax
	movq	%rax, -4952(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -80(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -72(%rbp)
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -10184(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10184(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rax
	movw	468(%rax), %r8w
	shrw	$13, %r8w
	andw	$1, %r8w
	testw	$1, %r8w
	movb	%dl, -10185(%rbp)       # 1-byte Spill
	je	.LBB263_52
# BB#50:                                # %land.lhs.true.147
	xorl	%eax, %eax
	movb	%al, %cl
	movq	current_buffer, %rdx
	movb	936(%rdx), %sil
	shrb	$1, %sil
	andb	$1, %sil
	testb	$1, %sil
	movb	%cl, -10185(%rbp)       # 1-byte Spill
	jne	.LBB263_52
# BB#51:                                # %land.rhs.153
	movq	-24(%rbp), %rdi
	callq	window_outdated
	xorb	$-1, %al
	movb	%al, -10185(%rbp)       # 1-byte Spill
.LBB263_52:                             # %land.end.156
	movb	-10185(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movb	%al, -4907(%rbp)
	cmpl	$0, windows_or_buffers_changed
	je	.LBB263_56
# BB#53:                                # %if.then.159
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	XMARKER
	movq	8(%rax), %rax
	cmpq	current_buffer, %rax
	jne	.LBB263_55
# BB#54:                                # %if.then.163
	movq	-24(%rbp), %rdi
	callq	compute_window_start_on_continuation_line
	movb	%al, -10186(%rbp)       # 1-byte Spill
.LBB263_55:                             # %if.end.165
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	movb	$0, -4905(%rbp)
.LBB263_56:                             # %if.end.169
	movq	-24(%rbp), %rdi
	callq	CHECK_WINDOW_END
	movq	current_buffer, %rdi
	movq	720(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	cmpq	32(%rax), %rdi
	jne	.LBB263_59
# BB#57:                                # %land.lhs.true.174
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	je	.LBB263_59
# BB#58:                                # %if.then.178
	callq	emacs_abort
.LBB263_59:                             # %if.end.179
	movq	-72(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jge	.LBB263_61
# BB#60:                                # %if.then.183
	callq	emacs_abort
.LBB263_61:                             # %if.end.184
	movq	-24(%rbp), %rdi
	callq	mode_line_update_needed
	testb	$1, %al
	jne	.LBB263_62
	jmp	.LBB263_63
.LBB263_62:                             # %if.then.186
	movb	$1, -97(%rbp)
.LBB263_63:                             # %if.end.187
	movq	-8(%rbp), %rax
	cmpq	selected_window, %rax
	je	.LBB263_70
# BB#64:                                # %if.then.189
	movq	-24(%rbp), %rax
	movq	96(%rax), %rdi
	callq	marker_position
	movq	%rax, -5000(%rbp)
	movq	-24(%rbp), %rax
	movq	96(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -5008(%rbp)
	movq	-5000(%rbp), %rax
	movq	current_buffer, %rdi
	cmpq	752(%rdi), %rax
	jge	.LBB263_66
# BB#65:                                # %if.then.194
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -5000(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -5008(%rbp)
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, -10200(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	current_buffer, %rcx
	movq	752(%rcx), %rdx
	movq	current_buffer, %rcx
	movq	760(%rcx), %rcx
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	movq	%rax, -10208(%rbp)      # 8-byte Spill
	jmp	.LBB263_69
.LBB263_66:                             # %if.else.201
	movq	-5000(%rbp), %rax
	movq	current_buffer, %rcx
	movq	768(%rcx), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	jle	.LBB263_68
# BB#67:                                # %if.then.204
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -5000(%rbp)
	movq	current_buffer, %rax
	movq	776(%rax), %rax
	movq	%rax, -5008(%rbp)
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, -10216(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	current_buffer, %rcx
	movq	768(%rcx), %rdx
	movq	current_buffer, %rcx
	movq	776(%rcx), %rcx
	movq	-10216(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	movq	%rax, -10224(%rbp)      # 8-byte Spill
.LBB263_68:                             # %if.end.211
	jmp	.LBB263_69
.LBB263_69:                             # %if.end.212
	movq	current_buffer, %rdi
	movq	-5000(%rbp), %rsi
	movq	-5008(%rbp), %rdx
	callq	temp_set_point_both
.LBB263_70:                             # %if.end.213
	movq	current_buffer, %rax
	cmpq	$0, 920(%rax)
	jne	.LBB263_73
# BB#71:                                # %lor.lhs.false.215
	movq	current_buffer, %rax
	cmpq	$0, 784(%rax)
	je	.LBB263_78
# BB#72:                                # %land.lhs.true.217
	movq	current_buffer, %rax
	movq	784(%rax), %rax
	cmpq	$0, 920(%rax)
	je	.LBB263_78
.LBB263_73:                             # %if.then.221
	callq	buffer_display_table
	movq	%rax, -5016(%rbp)
	movq	-5016(%rbp), %rdi
	movq	current_buffer, %rax
	movq	352(%rax), %rax
	movq	%rdi, -10232(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	callq	XVECTOR
	movq	-10232(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	disptab_matches_widthtab
	testb	$1, %al
	jne	.LBB263_77
# BB#74:                                # %if.then.225
	movq	current_buffer, %rax
	movq	%rax, -5024(%rbp)
	movq	-5024(%rbp), %rax
	cmpq	$0, 784(%rax)
	je	.LBB263_76
# BB#75:                                # %if.then.228
	movq	-5024(%rbp), %rax
	movq	784(%rax), %rax
	movq	%rax, -5024(%rbp)
.LBB263_76:                             # %if.end.230
	movl	$1, %eax
	movl	%eax, %edx
	movq	-5024(%rbp), %rdi
	movq	-5024(%rbp), %rcx
	movq	920(%rcx), %rsi
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rcx
	callq	invalidate_region_cache
	movq	current_buffer, %rdi
	movq	-5016(%rbp), %rsi
	callq	recompute_width_table
.LBB263_77:                             # %if.end.234
	jmp	.LBB263_78
.LBB263_78:                             # %if.end.235
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	XMARKER
	movq	8(%rax), %rax
	cmpq	current_buffer, %rax
	je	.LBB263_80
# BB#79:                                # %if.then.240
	jmp	.LBB263_266
.LBB263_80:                             # %if.end.241
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -88(%rbp)
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$6, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_82
# BB#81:                                # %lor.lhs.false.252
	movq	-24(%rbp), %rdi
	callq	window_frozen_p
	testb	$1, %al
	jne	.LBB263_82
	jmp	.LBB263_95
.LBB263_82:                             # %land.lhs.true.254
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jl	.LBB263_95
# BB#83:                                # %land.lhs.true.258
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jg	.LBB263_95
# BB#84:                                # %if.then.262
	leaq	-4904(%rbp), %rdi
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-65, %cx
	movw	%cx, 468(%rax)
	movq	-24(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	callq	start_display
	leaq	-4904(%rbp), %rdi
	xorl	%edx, %edx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$11, %r9d
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movl	-2580(%rbp), %ecx
	movq	%rax, %rsi
	callq	move_it_to
	movq	-4592(%rbp), %rsi
	movq	%rsi, -5032(%rbp)
	cmpl	$0, -2472(%rbp)
	movl	%eax, -10236(%rbp)      # 4-byte Spill
	je	.LBB263_86
# BB#85:                                # %lor.lhs.false.271
	leaq	-4904(%rbp), %rdi
	callq	line_bottom_y
	cmpl	-2580(%rbp), %eax
	jge	.LBB263_94
.LBB263_86:                             # %land.lhs.true.275
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$5, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_94
# BB#87:                                # %if.then.280
	movq	-5032(%rbp), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jne	.LBB263_89
# BB#88:                                # %if.then.284
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-33, %cx
	orw	$32, %cx
	movw	%cx, 468(%rax)
	jmp	.LBB263_93
.LBB263_89:                             # %if.else.289
	movq	-5032(%rbp), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jle	.LBB263_92
# BB#90:                                # %land.lhs.true.293
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jg	.LBB263_92
# BB#91:                                # %if.then.298
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-33, %cx
	orw	$32, %cx
	movw	%cx, 468(%rax)
.LBB263_92:                             # %if.end.303
	jmp	.LBB263_93
.LBB263_93:                             # %if.end.304
	jmp	.LBB263_94
.LBB263_94:                             # %if.end.305
	jmp	.LBB263_95
.LBB263_95:                             # %if.end.306
	jmp	.LBB263_96
.LBB263_96:                             # %force_start.307
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$5, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_191
# BB#97:                                # %if.then.313
	movl	$-1, -5036(%rbp)
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-33, %cx
	movw	%cx, 468(%rax)
	movq	-24(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	testb	$1, -4907(%rbp)
	jne	.LBB263_99
# BB#98:                                # %if.then.321
	movq	-24(%rbp), %rax
	movq	$0, 320(%rax)
.LBB263_99:                             # %if.end.322
	testb	$1, -97(%rbp)
	je	.LBB263_101
# BB#100:                               # %lor.lhs.false.324
	xorl	%edi, %edi
	movq	globals+2656, %rax
	movq	%rax, -10248(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10248(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_102
.LBB263_101:                            # %if.then.327
	movb	$1, -97(%rbp)
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rax)
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	run_window_scroll_functions
	movq	%rax, -5056(%rbp)
	movq	%rdx, -5048(%rbp)
	movq	-5056(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-5048(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB263_102:                            # %if.end.333
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jge	.LBB263_104
# BB#103:                               # %if.then.337
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB263_107
.LBB263_104:                            # %if.else.342
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jle	.LBB263_106
# BB#105:                               # %if.then.346
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	current_buffer, %rax
	movq	776(%rax), %rax
	movq	%rax, -88(%rbp)
.LBB263_106:                            # %if.end.351
	jmp	.LBB263_107
.LBB263_107:                            # %if.end.352
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	try_window
	cmpl	$0, %eax
	jne	.LBB263_109
# BB#108:                               # %if.then.355
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-33, %cx
	orw	$32, %cx
	movw	%cx, 468(%rax)
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	jmp	.LBB263_634
.LBB263_109:                            # %if.end.361
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB263_122
# BB#110:                               # %if.then.363
	movl	$574, %edi              # imm = 0x23E
	movq	$0, -5064(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -10256(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -10264(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %ecx
	movq	-10256(%rbp), %rdi      # 8-byte Reload
	movq	-10264(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	callq	get_char_property_and_overlay
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -5072(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -10272(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10272(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_112
# BB#111:                               # %cond.true.372
	xorl	%edi, %edi
	movq	-5072(%rbp), %rax
	movq	%rax, -10280(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10280(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -10284(%rbp)      # 4-byte Spill
	jmp	.LBB263_113
.LBB263_112:                            # %cond.false.376
	movq	-5072(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -10284(%rbp)      # 4-byte Spill
.LBB263_113:                            # %cond.end.379
	movl	-10284(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB263_118
# BB#114:                               # %if.then.382
	movl	$574, %edi              # imm = 0x23E
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -10296(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -10304(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -10312(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10296(%rbp), %rdi      # 8-byte Reload
	movq	-10304(%rbp), %rsi      # 8-byte Reload
	movq	-10312(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_char_property_change
	movq	%rax, -5088(%rbp)
	movq	-5088(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB263_115
	jmp	.LBB263_116
.LBB263_115:                            # %if.then.392
	movq	-5088(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -5080(%rbp)
	jmp	.LBB263_117
.LBB263_116:                            # %if.else.393
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -5080(%rbp)
.LBB263_117:                            # %if.end.395
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r8d, %r8d
	movq	-24(%rbp), %rdi
	movq	-5080(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	200(%rdx), %rdx
	movq	8(%rdx), %rdx
	callq	row_containing_pos
	movq	%rax, -5064(%rbp)
.LBB263_118:                            # %if.end.399
	cmpq	$0, -5064(%rbp)
	je	.LBB263_120
# BB#119:                               # %if.then.401
	movq	-5064(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-5064(%rbp), %rax
	addl	60(%rax), %ecx
	movl	%ecx, -5036(%rbp)
	jmp	.LBB263_121
.LBB263_120:                            # %if.else.405
	movq	-24(%rbp), %rdi
	callq	window_box_height
	movl	$2, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -5036(%rbp)
.LBB263_121:                            # %if.end.407
	jmp	.LBB263_122
.LBB263_122:                            # %if.end.408
	xorl	%eax, %eax
	movq	-24(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB263_126
# BB#123:                               # %if.then.410
	movq	-24(%rbp), %rdi
	callq	window_box_height
	movl	%eax, -5036(%rbp)
	movl	-5036(%rbp), %eax
	movq	-24(%rbp), %rdi
	cmpl	356(%rdi), %eax
	jl	.LBB263_125
# BB#124:                               # %if.then.415
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	jmp	.LBB263_250
.LBB263_125:                            # %if.end.419
	jmp	.LBB263_169
.LBB263_126:                            # %if.else.420
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jl	.LBB263_168
# BB#127:                               # %if.then.424
	movl	$4, %eax
	movq	-24(%rbp), %rcx
	movl	268(%rcx), %edx
	movq	-32(%rbp), %rcx
	imull	368(%rcx), %edx
	movl	%eax, -10316(%rbp)      # 4-byte Spill
	movl	%edx, %eax
	cltd
	idivl	-4956(%rbp)
	movl	%eax, -5092(%rbp)
	movq	globals+3264, %rcx
	movl	-5092(%rbp), %eax
	cltd
	movl	-10316(%rbp), %esi      # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB263_129
# BB#128:                               # %cond.true.429
	movq	globals+3264, %rax
	movq	%rax, -10328(%rbp)      # 8-byte Spill
	jmp	.LBB263_130
.LBB263_129:                            # %cond.false.430
	movl	$4, %eax
	movl	-5092(%rbp), %ecx
	movl	%eax, -10332(%rbp)      # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-10332(%rbp), %ecx      # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -10328(%rbp)      # 8-byte Spill
.LBB263_130:                            # %cond.end.433
	movq	-10328(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -5096(%rbp)
	movl	-5096(%rbp), %ecx
	imull	-4956(%rbp), %ecx
	movl	%ecx, -5100(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_131
	jmp	.LBB263_146
.LBB263_131:                            # %cond.true.440
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -10333(%rbp)       # 1-byte Spill
	jne	.LBB263_145
# BB#132:                               # %land.lhs.true.445
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -10333(%rbp)       # 1-byte Spill
	jne	.LBB263_145
# BB#133:                               # %land.lhs.true.450
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -10333(%rbp)       # 1-byte Spill
	je	.LBB263_145
# BB#134:                               # %land.lhs.true.458
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -10344(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-10344(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -10333(%rbp)       # 1-byte Spill
	je	.LBB263_145
# BB#135:                               # %land.rhs.464
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -10348(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_136
	jmp	.LBB263_141
.LBB263_136:                            # %cond.true.468
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_143
# BB#137:                               # %land.lhs.true.473
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_143
# BB#138:                               # %land.lhs.true.479
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_143
# BB#139:                               # %land.lhs.true.488
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10360(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10360(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_143
# BB#140:                               # %land.lhs.true.494
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_142
	jmp	.LBB263_143
.LBB263_141:                            # %cond.false.501
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_142
	jmp	.LBB263_143
.LBB263_142:                            # %cond.true.502
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -10364(%rbp)      # 4-byte Spill
	jmp	.LBB263_144
.LBB263_143:                            # %cond.false.507
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -10364(%rbp)      # 4-byte Spill
.LBB263_144:                            # %cond.end.511
	movl	-10364(%rbp), %eax      # 4-byte Reload
	movl	-10348(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -10333(%rbp)       # 1-byte Spill
.LBB263_145:                            # %land.end.515
	movb	-10333(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -10368(%rbp)      # 4-byte Spill
	jmp	.LBB263_147
.LBB263_146:                            # %cond.false.516
	xorl	%eax, %eax
	movl	%eax, -10368(%rbp)      # 4-byte Spill
	jmp	.LBB263_147
.LBB263_147:                            # %cond.end.517
	movl	-10368(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	andb	$1, %cl
	movb	%cl, -5101(%rbp)
	movq	-24(%rbp), %rdx
	movl	364(%rdx), %eax
	movl	-5096(%rbp), %esi
	movb	-5101(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edi
	addl	%edi, %esi
	cmpl	%esi, %eax
	jge	.LBB263_149
# BB#148:                               # %if.then.528
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	jmp	.LBB263_250
.LBB263_149:                            # %if.else.532
	movq	-24(%rbp), %rdi
	callq	window_box_height
	movl	%eax, -5108(%rbp)
	testb	$1, -5101(%rbp)
	je	.LBB263_164
# BB#150:                               # %if.then.535
	movq	-24(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB263_152
# BB#151:                               # %cond.true.538
	movq	-24(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -10372(%rbp)      # 4-byte Spill
	jmp	.LBB263_163
.LBB263_152:                            # %cond.false.540
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_155
# BB#153:                               # %land.lhs.true.542
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_155
# BB#154:                               # %cond.true.546
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB263_156
	jmp	.LBB263_161
.LBB263_155:                            # %cond.false.551
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_156
	jmp	.LBB263_161
.LBB263_156:                            # %cond.true.552
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_159
# BB#157:                               # %land.lhs.true.555
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_159
# BB#158:                               # %cond.true.559
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -10376(%rbp)      # 4-byte Spill
	jmp	.LBB263_160
.LBB263_159:                            # %cond.false.563
	xorl	%eax, %eax
	movl	%eax, -10376(%rbp)      # 4-byte Spill
	jmp	.LBB263_160
.LBB263_160:                            # %cond.end.564
	movl	-10376(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10380(%rbp)      # 4-byte Spill
	jmp	.LBB263_162
.LBB263_161:                            # %cond.false.566
	movl	$5, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -10380(%rbp)      # 4-byte Spill
.LBB263_162:                            # %cond.end.570
	movl	-10380(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -10372(%rbp)      # 4-byte Spill
.LBB263_163:                            # %cond.end.573
	movl	-10372(%rbp), %eax      # 4-byte Reload
	addl	-5108(%rbp), %eax
	movl	%eax, -5108(%rbp)
.LBB263_164:                            # %if.end.576
	movq	-24(%rbp), %rax
	movl	356(%rax), %ecx
	movl	-5108(%rbp), %edx
	subl	-5100(%rbp), %edx
	cmpl	%edx, %ecx
	jl	.LBB263_166
# BB#165:                               # %if.then.582
	movq	-24(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	jmp	.LBB263_250
.LBB263_166:                            # %if.end.586
	jmp	.LBB263_167
.LBB263_167:                            # %if.end.587
	jmp	.LBB263_168
.LBB263_168:                            # %if.end.588
	jmp	.LBB263_169
.LBB263_169:                            # %if.end.589
	cmpl	$0, -5036(%rbp)
	jl	.LBB263_187
# BB#170:                               # %if.then.592
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_172
# BB#171:                               # %cond.true.601
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -10392(%rbp)      # 8-byte Spill
	jmp	.LBB263_173
.LBB263_172:                            # %cond.false.604
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -10392(%rbp)      # 8-byte Spill
.LBB263_173:                            # %cond.end.607
	movq	-10392(%rbp), %rax      # 8-byte Reload
	movq	%rax, -5120(%rbp)
.LBB263_174:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-5120(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-5120(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-5036(%rbp), %ecx
	jge	.LBB263_176
# BB#175:                               # %while.body
                                        #   in Loop: Header=BB263_174 Depth=1
	movq	-5120(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5120(%rbp)
	jmp	.LBB263_174
.LBB263_176:                            # %while.end
	movq	current_buffer, %rdi
	movq	-5120(%rbp), %rax
	movq	176(%rax), %rsi
	movq	-5120(%rbp), %rax
	movq	184(%rax), %rdx
	callq	temp_set_point_both
	movq	-24(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -10400(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-10400(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB263_178
# BB#177:                               # %if.then.621
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, -10408(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	current_buffer, %rdx
	movq	744(%rdx), %rdx
	addq	$0, %rdx
	movq	-10408(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	movq	%rdx, -10416(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-10416(%rbp), %rcx      # 8-byte Reload
	callq	set_marker_both
	movq	%rax, -10424(%rbp)      # 8-byte Spill
	jmp	.LBB263_181
.LBB263_178:                            # %if.else.629
	movq	current_buffer, %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB263_180
# BB#179:                               # %if.then.632
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -64(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -56(%rbp)
.LBB263_180:                            # %if.end.639
	jmp	.LBB263_181
.LBB263_181:                            # %if.end.640
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-24(%rbp), %rdi
	movq	-5120(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	200(%rdx), %rdx
	movq	%rcx, -10432(%rbp)      # 8-byte Spill
	movq	-10432(%rbp), %r8       # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	movq	-24(%rbp), %rcx
	movw	468(%rcx), %r10w
	andw	$-16385, %r10w          # imm = 0xFFFFFFFFFFFFBFFF
	movw	%r10w, 468(%rcx)
	movq	-24(%rbp), %rcx
	movq	80(%rcx), %rdi
	movb	%al, -10433(%rbp)       # 1-byte Spill
	callq	XBUFFER
	xorl	%edi, %edi
	movq	720(%rax), %rax
	movb	136(%rax), %r11b
	andb	$-3, %r11b
	movb	%r11b, 136(%rax)
	movq	globals+1784, %rsi
	movq	-8(%rbp), %rax
	movq	%rax, -10448(%rbp)      # 8-byte Spill
	movq	%rsi, -10456(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10448(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movl	$1, %edi
	movq	-10456(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movb	$0, %al
	callq	safe__call1
	movq	-24(%rbp), %rcx
	movw	468(%rcx), %r10w
	shrw	$14, %r10w
	andw	$1, %r10w
	testw	$1, %r10w
	movq	%rax, -10464(%rbp)      # 8-byte Spill
	jne	.LBB263_183
# BB#182:                               # %lor.lhs.false.661
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB263_186
.LBB263_183:                            # %if.then.671
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	try_window
	cmpl	$0, %eax
	jne	.LBB263_185
# BB#184:                               # %if.then.675
	jmp	.LBB263_634
.LBB263_185:                            # %if.end.676
	jmp	.LBB263_186
.LBB263_186:                            # %if.end.677
	jmp	.LBB263_187
.LBB263_187:                            # %if.end.678
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jl	.LBB263_189
# BB#188:                               # %lor.lhs.false.683
	xorl	%eax, %eax
	movq	-24(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB263_190
.LBB263_189:                            # %if.then.685
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	jmp	.LBB263_250
.LBB263_190:                            # %if.end.687
	jmp	.LBB263_481
.LBB263_191:                            # %if.end.688
                                        #   in Loop: Header=BB263_96 Depth=1
	testb	$1, -4905(%rbp)
	je	.LBB263_197
# BB#192:                               # %land.lhs.true.691
                                        #   in Loop: Header=BB263_96 Depth=1
	leaq	-4908(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	try_cursor_movement
	movl	%eax, -4924(%rbp)
	cmpl	$1, -4924(%rbp)
	je	.LBB263_197
# BB#193:                               # %if.then.695
	movl	-4924(%rbp), %eax
	testl	%eax, %eax
	movl	%eax, -10468(%rbp)      # 4-byte Spill
	je	.LBB263_194
	jmp	.LBB263_708
.LBB263_708:                            # %if.then.695
	movl	-10468(%rbp), %eax      # 4-byte Reload
	subl	$2, %eax
	movl	%eax, -10472(%rbp)      # 4-byte Spill
	je	.LBB263_195
	jmp	.LBB263_196
.LBB263_194:                            # %sw.bb
	movb	$1, -4906(%rbp)
	jmp	.LBB263_481
.LBB263_195:                            # %sw.bb.696
	jmp	.LBB263_250
.LBB263_196:                            # %sw.default
	callq	emacs_abort
.LBB263_197:                            # %if.else.697
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_204
# BB#198:                               # %land.lhs.true.703
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB263_204
# BB#199:                               # %lor.lhs.false.708
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-88(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB263_201
# BB#200:                               # %cond.true.714
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -10480(%rbp)      # 8-byte Spill
	jmp	.LBB263_202
.LBB263_201:                            # %cond.false.716
                                        #   in Loop: Header=BB263_96 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -10480(%rbp)      # 8-byte Spill
	jmp	.LBB263_202
.LBB263_202:                            # %cond.end.717
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-10480(%rbp), %rax      # 8-byte Reload
	movq	-88(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	je	.LBB263_204
# BB#203:                               # %if.then.728
	jmp	.LBB263_266
.LBB263_204:                            # %if.else.729
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rdi
	callq	try_window_id
	movl	%eax, -104(%rbp)
	cmpl	$0, %eax
	je	.LBB263_210
# BB#205:                               # %if.then.733
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_207
# BB#206:                               # %if.then.738
	jmp	.LBB263_634
.LBB263_207:                            # %if.end.739
	cmpl	$0, -104(%rbp)
	jle	.LBB263_209
# BB#208:                               # %if.then.742
	jmp	.LBB263_481
.LBB263_209:                            # %if.end.743
	jmp	.LBB263_247
.LBB263_210:                            # %if.else.744
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jl	.LBB263_246
# BB#211:                               # %land.lhs.true.749
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jg	.LBB263_246
# BB#212:                               # %land.lhs.true.754
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-96(%rbp), %rax
	jl	.LBB263_246
# BB#213:                               # %land.lhs.true.760
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jl	.LBB263_216
# BB#214:                               # %lor.lhs.false.765
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	je	.LBB263_216
# BB#215:                               # %lor.lhs.false.770
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rdi
	callq	window_outdated
	testb	$1, %al
	jne	.LBB263_246
.LBB263_216:                            # %if.then.772
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_226
# BB#217:                               # %land.lhs.true.778
                                        #   in Loop: Header=BB263_96 Depth=1
	xorl	%edi, %edi
	movq	globals+2944, %rax
	movq	%rax, -10488(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10488(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_226
# BB#218:                               # %land.lhs.true.782
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB263_226
# BB#219:                               # %land.lhs.true.787
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	-4944(%rbp), %rcx
	addq	$1, %rcx
	cmpq	%rcx, %rax
	jle	.LBB263_226
# BB#220:                               # %land.lhs.true.792
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rcx
	subq	-4952(%rbp), %rcx
	cmpq	%rcx, %rax
	jg	.LBB263_226
# BB#221:                               # %land.lhs.true.799
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	XMARKER
	movq	8(%rax), %rax
	cmpq	current_buffer, %rax
	jne	.LBB263_226
# BB#222:                               # %land.lhs.true.805
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rdi
	callq	compute_window_start_on_continuation_line
	testb	$1, %al
	jne	.LBB263_223
	jmp	.LBB263_226
.LBB263_223:                            # %land.lhs.true.808
                                        #   in Loop: Header=BB263_96 Depth=1
	leaq	-5124(%rbp), %rdx
	leaq	-5128(%rbp), %rcx
	leaq	-5140(%rbp), %r8
	leaq	-5144(%rbp), %r9
	leaq	-5132(%rbp), %rax
	leaq	-5136(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movq	current_buffer, %r10
	movq	736(%r10), %r10
	addq	$0, %r10
	movq	%rsi, -10496(%rbp)      # 8-byte Spill
	movq	%r10, %rsi
	movq	%rax, (%rsp)
	movq	-10496(%rbp), %rax      # 8-byte Reload
	movq	%rax, 8(%rsp)
	callq	pos_visible_p
	testb	$1, %al
	jne	.LBB263_224
	jmp	.LBB263_226
.LBB263_224:                            # %land.lhs.true.813
                                        #   in Loop: Header=BB263_96 Depth=1
	cmpl	$0, -5140(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %ecx
	cmpl	$0, -5144(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %edx
	cmpl	%edx, %ecx
	jne	.LBB263_226
# BB#225:                               # %if.then.820
                                        #   in Loop: Header=BB263_96 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-33, %cx
	orw	$32, %cx
	movw	%cx, 468(%rax)
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -88(%rbp)
	jmp	.LBB263_96
.LBB263_226:                            # %if.end.831
	testb	$1, -4905(%rbp)
	je	.LBB263_230
# BB#227:                               # %lor.lhs.false.833
	xorl	%edi, %edi
	movq	globals+2656, %rax
	movq	%rax, -10504(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10504(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_230
# BB#228:                               # %lor.lhs.false.837
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_230
# BB#229:                               # %lor.lhs.false.843
	movq	-24(%rbp), %rdi
	callq	try_window_reusing_current_matrix
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -4906(%rbp)
	testb	$1, %al
	jne	.LBB263_233
.LBB263_230:                            # %if.then.846
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	try_window
	cmpl	$0, %eax
	jge	.LBB263_232
# BB#231:                               # %if.then.850
	jmp	.LBB263_250
.LBB263_232:                            # %if.end.851
	jmp	.LBB263_233
.LBB263_233:                            # %if.end.852
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_235
# BB#234:                               # %if.then.858
	jmp	.LBB263_634
.LBB263_235:                            # %if.end.859
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jl	.LBB263_244
# BB#236:                               # %if.then.864
	testb	$1, -9(%rbp)
	je	.LBB263_239
# BB#237:                               # %lor.lhs.false.866
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB263_239
# BB#238:                               # %lor.lhs.false.873
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	cmpq	-96(%rbp), %rax
	jge	.LBB263_240
.LBB263_239:                            # %if.then.879
	movq	-24(%rbp), %rax
	movq	$0, 320(%rax)
.LBB263_240:                            # %if.end.881
	movl	$1, %esi
	xorl	%edx, %edx
	movq	-24(%rbp), %rdi
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB263_242
# BB#241:                               # %if.then.883
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movb	$1, -4929(%rbp)
	jmp	.LBB263_243
.LBB263_242:                            # %if.else.885
	jmp	.LBB263_481
.LBB263_243:                            # %if.end.886
	jmp	.LBB263_245
.LBB263_244:                            # %if.else.887
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
.LBB263_245:                            # %if.end.889
	jmp	.LBB263_246
.LBB263_246:                            # %if.end.890
	jmp	.LBB263_247
.LBB263_247:                            # %if.end.891
	jmp	.LBB263_248
.LBB263_248:                            # %if.end.892
	jmp	.LBB263_249
.LBB263_249:                            # %if.end.893
	jmp	.LBB263_250
.LBB263_250:                            # %try_to_scroll
	testb	$1, -97(%rbp)
	jne	.LBB263_252
# BB#251:                               # %if.then.895
	movb	$1, -97(%rbp)
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-5, %cx
	orw	$4, %cx
	movw	%cx, 468(%rax)
.LBB263_252:                            # %if.end.900
	cmpq	$0, globals+3256
	jne	.LBB263_257
# BB#253:                               # %lor.lhs.false.902
	cmpq	$0, globals+3080
	jne	.LBB263_257
# BB#254:                               # %lor.lhs.false.904
	testb	$1, -4908(%rbp)
	jne	.LBB263_257
# BB#255:                               # %lor.lhs.false.907
	movq	current_buffer, %rax
	movq	536(%rax), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB263_257
# BB#256:                               # %lor.lhs.false.910
	movq	current_buffer, %rax
	movq	544(%rax), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB263_257
	jmp	.LBB263_265
.LBB263_257:                            # %land.lhs.true.913
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jl	.LBB263_265
# BB#258:                               # %land.lhs.true.918
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jg	.LBB263_265
# BB#259:                               # %if.then.923
	movq	-8(%rbp), %rdi
	movq	globals+3256(%rip), %rdx
	movq	globals+3080(%rip), %rcx
	movzbl	-4929(%rbp), %eax
	movzbl	-4908(%rbp), %esi
	movzbl	-9(%rbp), %r8d
	andl	$1, %r8d
	andl	$1, %esi
	andl	$1, %eax
	movl	%esi, -10508(%rbp)      # 4-byte Spill
	movl	%r8d, %esi
	movl	-10508(%rbp), %r8d      # 4-byte Reload
	movl	%eax, %r9d
	callq	try_scrolling
	movl	%eax, -5148(%rbp)
	movl	%eax, %esi
	testl	%eax, %eax
	movl	%esi, -10512(%rbp)      # 4-byte Spill
	je	.LBB263_260
	jmp	.LBB263_709
.LBB263_709:                            # %if.then.923
	movl	-10512(%rbp), %eax      # 4-byte Reload
	subl	$1, %eax
	movl	%eax, -10516(%rbp)      # 4-byte Spill
	je	.LBB263_262
	jmp	.LBB263_710
.LBB263_710:                            # %if.then.923
	movl	-10512(%rbp), %eax      # 4-byte Reload
	subl	$2, %eax
	movl	%eax, -10520(%rbp)      # 4-byte Spill
	je	.LBB263_261
	jmp	.LBB263_263
.LBB263_260:                            # %sw.bb.928
	jmp	.LBB263_481
.LBB263_261:                            # %sw.bb.929
	jmp	.LBB263_634
.LBB263_262:                            # %sw.bb.930
	jmp	.LBB263_264
.LBB263_263:                            # %sw.default.931
	callq	emacs_abort
.LBB263_264:                            # %sw.epilog
	jmp	.LBB263_265
.LBB263_265:                            # %if.end.932
	jmp	.LBB263_266
.LBB263_266:                            # %recenter
                                        # =>This Inner Loop Header: Depth=1
	testb	$1, -4907(%rbp)
	jne	.LBB263_268
# BB#267:                               # %if.then.934
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	$0, 320(%rax)
.LBB263_268:                            # %if.end.936
                                        #   in Loop: Header=BB263_266 Depth=1
	leaq	-4904(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movq	-24(%rbp), %rsi
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	current_buffer, %rdx
	movq	744(%rdx), %rdx
	addq	$0, %rdx
	movq	%rdx, -10528(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-10528(%rbp), %rcx      # 8-byte Reload
	callq	init_iterator
	movl	-2580(%rbp), %eax
	movl	%eax, -2472(%rbp)
	cmpl	$0, -4928(%rbp)
	jge	.LBB263_421
# BB#269:                               # %if.then.945
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	268(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	368(%rax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	-4956(%rbp)
	movl	%eax, -5152(%rbp)
	cmpq	$0, globals+3264
	jle	.LBB263_274
# BB#270:                               # %cond.true.954
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$4, %eax
	movq	globals+3264, %rcx
	movl	-5152(%rbp), %edx
	movl	%eax, -10532(%rbp)      # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-10532(%rbp), %esi      # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB263_272
# BB#271:                               # %cond.true.959
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	globals+3264, %rax
	movq	%rax, -10544(%rbp)      # 8-byte Spill
	jmp	.LBB263_273
.LBB263_272:                            # %cond.false.960
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$4, %eax
	movl	-5152(%rbp), %ecx
	movl	%eax, -10548(%rbp)      # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-10548(%rbp), %ecx      # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -10544(%rbp)      # 8-byte Spill
.LBB263_273:                            # %cond.end.963
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10544(%rbp), %rax      # 8-byte Reload
	movq	%rax, -10560(%rbp)      # 8-byte Spill
	jmp	.LBB263_275
.LBB263_274:                            # %cond.false.965
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -10560(%rbp)      # 8-byte Spill
	jmp	.LBB263_275
.LBB263_275:                            # %cond.end.966
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -5156(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -5168(%rbp)
	cmpl	$0, -5156(%rbp)
	je	.LBB263_285
# BB#276:                               # %land.lhs.true.971
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	cmpq	-96(%rbp), %rax
	jg	.LBB263_285
# BB#277:                               # %land.lhs.true.976
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-96(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jg	.LBB263_285
# BB#278:                               # %if.then.981
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	$0, -9992(%rbp)
# BB#279:                               # %do.body
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpq	$0, -9992(%rbp)
	je	.LBB263_281
# BB#280:                               # %if.then.983
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$1, %esi
	movq	-9992(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB263_281:                            # %if.end.984
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4904(%rbp), %rcx
	leaq	-9984(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -9992(%rbp)
# BB#282:                               # %do.end
                                        #   in Loop: Header=BB263_266 Depth=1
	leaq	-9984(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	callq	start_display
	leaq	-9984(%rbp), %rdi
	movl	-5156(%rbp), %eax
	imull	-4956(%rbp), %eax
	movl	%eax, %esi
	callq	move_it_vertically
	movq	-9672(%rbp), %rcx
	movq	%rcx, -5168(%rbp)
# BB#283:                               # %do.body.990
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%esi, %esi
	movq	-9992(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -9992(%rbp)
# BB#284:                               # %do.end.991
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_285
.LBB263_285:                            # %if.end.992
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-5168(%rbp), %rax
	setg	%cl
	andb	$1, %cl
	movb	%cl, -5177(%rbp)
	testb	$1, -5177(%rbp)
	je	.LBB263_287
# BB#286:                               # %cond.true.1000
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	536(%rax), %rax
	movq	%rax, -10568(%rbp)      # 8-byte Spill
	jmp	.LBB263_288
.LBB263_287:                            # %cond.false.1002
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	544(%rax), %rax
	movq	%rax, -10568(%rbp)      # 8-byte Spill
.LBB263_288:                            # %cond.end.1004
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10568(%rbp), %rax      # 8-byte Reload
	movq	%rax, -5176(%rbp)
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_419
# BB#289:                               # %land.lhs.true.1010
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpq	$100, globals+3256
	jg	.LBB263_291
# BB#290:                               # %lor.lhs.false.1013
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-5176(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB263_291
	jmp	.LBB263_419
.LBB263_291:                            # %if.then.1016
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$0, -9996(%rbp)
	cmpq	$0, globals+3256
	jne	.LBB263_380
# BB#292:                               # %land.lhs.true.1018
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-5176(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB263_293
	jmp	.LBB263_380
.LBB263_293:                            # %if.then.1021
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-5176(%rbp), %rdi
	callq	XFLOATINT
	movsd	%xmm0, -10008(%rbp)
	movsd	-10008(%rbp), %xmm0     # xmm0 = mem[0],zero
	movq	-24(%rbp), %rdi
	movl	260(%rdi), %eax
	movq	-24(%rbp), %rdi
	movl	244(%rdi), %ecx
	movq	-24(%rbp), %rdi
	addl	260(%rdi), %ecx
	movq	-24(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	40(%rdi), %rdi
	movsd	%xmm0, -10576(%rbp)     # 8-byte Spill
	movl	%eax, -10580(%rbp)      # 4-byte Spill
	movl	%ecx, -10584(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -10588(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	-10588(%rbp), %ecx      # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-10584(%rbp), %edx      # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB263_295
# BB#294:                               # %land.lhs.true.1038
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -10600(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10600(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_297
.LBB263_295:                            # %lor.lhs.false.1046
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB263_297
# BB#296:                               # %lor.lhs.false.1052
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_298
.LBB263_297:                            # %cond.true.1059
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10604(%rbp)      # 4-byte Spill
	jmp	.LBB263_299
.LBB263_298:                            # %cond.false.1060
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -10604(%rbp)      # 4-byte Spill
.LBB263_299:                            # %cond.end.1063
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10604(%rbp), %eax      # 4-byte Reload
	movl	-10580(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -10608(%rbp)      # 4-byte Spill
	jne	.LBB263_302
# BB#300:                               # %lor.lhs.false.1072
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_303
# BB#301:                               # %land.lhs.true.1078
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB263_303
.LBB263_302:                            # %cond.true.1085
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_308
	jmp	.LBB263_312
.LBB263_303:                            # %cond.false.1086
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -10616(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10616(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_305
# BB#304:                               # %cond.true.1090
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB263_308
	jmp	.LBB263_312
.LBB263_305:                            # %cond.false.1098
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$213, %edi
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -10624(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10624(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_307
# BB#306:                               # %cond.true.1103
                                        #   in Loop: Header=BB263_266 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB263_308
	jmp	.LBB263_312
.LBB263_307:                            # %cond.false.1104
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_308
	jmp	.LBB263_312
.LBB263_308:                            # %cond.true.1105
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB263_310
# BB#309:                               # %cond.true.1108
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -10628(%rbp)      # 4-byte Spill
	jmp	.LBB263_311
.LBB263_310:                            # %cond.false.1110
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -10628(%rbp)      # 4-byte Spill
.LBB263_311:                            # %cond.end.1113
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10628(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10632(%rbp)      # 4-byte Spill
	jmp	.LBB263_313
.LBB263_312:                            # %cond.false.1115
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10632(%rbp)      # 4-byte Spill
	jmp	.LBB263_313
.LBB263_313:                            # %cond.end.1116
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10632(%rbp), %eax      # 4-byte Reload
	movl	-10608(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -10636(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_314
	jmp	.LBB263_319
.LBB263_314:                            # %cond.true.1122
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_341
# BB#315:                               # %land.lhs.true.1127
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_341
# BB#316:                               # %land.lhs.true.1133
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_341
# BB#317:                               # %land.lhs.true.1142
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10648(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10648(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_341
# BB#318:                               # %land.lhs.true.1149
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_320
	jmp	.LBB263_341
.LBB263_319:                            # %cond.false.1156
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_320
	jmp	.LBB263_341
.LBB263_320:                            # %cond.true.1157
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB263_322
# BB#321:                               # %cond.true.1160
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -10652(%rbp)      # 4-byte Spill
	jmp	.LBB263_340
.LBB263_322:                            # %cond.false.1162
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_325
# BB#323:                               # %land.lhs.true.1165
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_325
# BB#324:                               # %cond.true.1169
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB263_326
	jmp	.LBB263_331
.LBB263_325:                            # %cond.false.1177
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_326
	jmp	.LBB263_331
.LBB263_326:                            # %cond.true.1178
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_329
# BB#327:                               # %land.lhs.true.1181
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_329
# BB#328:                               # %cond.true.1185
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -10656(%rbp)      # 4-byte Spill
	jmp	.LBB263_330
.LBB263_329:                            # %cond.false.1194
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10656(%rbp)      # 4-byte Spill
	jmp	.LBB263_330
.LBB263_330:                            # %cond.end.1195
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10656(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10660(%rbp)      # 4-byte Spill
	jmp	.LBB263_339
.LBB263_331:                            # %cond.false.1197
                                        #   in Loop: Header=BB263_266 Depth=1
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -10672(%rbp)      # 8-byte Spill
	movb	%al, -10673(%rbp)       # 1-byte Spill
	je	.LBB263_338
# BB#332:                               # %lor.lhs.false.1201
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -10688(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-10688(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -10673(%rbp)       # 1-byte Spill
	je	.LBB263_338
# BB#333:                               # %lor.rhs.1205
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -10689(%rbp)       # 1-byte Spill
	jle	.LBB263_337
# BB#334:                               # %land.lhs.true.1208
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -10704(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-10704(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -10689(%rbp)       # 1-byte Spill
	je	.LBB263_337
# BB#335:                               # %land.lhs.true.1212
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -10712(%rbp)      # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-10712(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -10689(%rbp)       # 1-byte Spill
	jne	.LBB263_337
# BB#336:                               # %land.rhs.1217
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -10720(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-10720(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -10689(%rbp)       # 1-byte Spill
.LBB263_337:                            # %land.end.1221
                                        #   in Loop: Header=BB263_266 Depth=1
	movb	-10689(%rbp), %al       # 1-byte Reload
	movb	%al, -10673(%rbp)       # 1-byte Spill
.LBB263_338:                            # %lor.end.1223
                                        #   in Loop: Header=BB263_266 Depth=1
	movb	-10673(%rbp), %al       # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-10672(%rbp), %rdi      # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -10660(%rbp)      # 4-byte Spill
.LBB263_339:                            # %cond.end.1226
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10660(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -10652(%rbp)      # 4-byte Spill
.LBB263_340:                            # %cond.end.1229
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10652(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10724(%rbp)      # 4-byte Spill
	jmp	.LBB263_342
.LBB263_341:                            # %cond.false.1231
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10724(%rbp)      # 4-byte Spill
	jmp	.LBB263_342
.LBB263_342:                            # %cond.end.1232
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10724(%rbp), %eax      # 4-byte Reload
	movl	-10636(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -10728(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_343
	jmp	.LBB263_357
.LBB263_343:                            # %cond.true.1238
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_372
# BB#344:                               # %land.lhs.true.1243
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_372
# BB#345:                               # %land.lhs.true.1249
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_372
# BB#346:                               # %land.lhs.true.1258
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -10736(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10736(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_372
# BB#347:                               # %land.lhs.true.1265
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -10740(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_348
	jmp	.LBB263_353
.LBB263_348:                            # %cond.true.1270
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_355
# BB#349:                               # %land.lhs.true.1275
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_355
# BB#350:                               # %land.lhs.true.1281
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_355
# BB#351:                               # %land.lhs.true.1290
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10752(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10752(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_355
# BB#352:                               # %land.lhs.true.1297
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_354
	jmp	.LBB263_355
.LBB263_353:                            # %cond.false.1304
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_354
	jmp	.LBB263_355
.LBB263_354:                            # %cond.true.1305
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -10756(%rbp)      # 4-byte Spill
	jmp	.LBB263_356
.LBB263_355:                            # %cond.false.1310
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -10756(%rbp)      # 4-byte Spill
.LBB263_356:                            # %cond.end.1314
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10756(%rbp), %eax      # 4-byte Reload
	movl	-10740(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB263_358
	jmp	.LBB263_372
.LBB263_357:                            # %cond.false.1318
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_358
	jmp	.LBB263_372
.LBB263_358:                            # %cond.true.1319
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB263_360
# BB#359:                               # %cond.true.1323
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -10760(%rbp)      # 4-byte Spill
	jmp	.LBB263_371
.LBB263_360:                            # %cond.false.1325
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_363
# BB#361:                               # %land.lhs.true.1328
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_363
# BB#362:                               # %cond.true.1332
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB263_364
	jmp	.LBB263_369
.LBB263_363:                            # %cond.false.1337
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_364
	jmp	.LBB263_369
.LBB263_364:                            # %cond.true.1338
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_367
# BB#365:                               # %land.lhs.true.1341
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_367
# BB#366:                               # %cond.true.1345
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -10764(%rbp)      # 4-byte Spill
	jmp	.LBB263_368
.LBB263_367:                            # %cond.false.1349
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10764(%rbp)      # 4-byte Spill
	jmp	.LBB263_368
.LBB263_368:                            # %cond.end.1350
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10764(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10768(%rbp)      # 4-byte Spill
	jmp	.LBB263_370
.LBB263_369:                            # %cond.false.1352
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$5, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -10768(%rbp)      # 4-byte Spill
.LBB263_370:                            # %cond.end.1356
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10768(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -10760(%rbp)      # 4-byte Spill
.LBB263_371:                            # %cond.end.1359
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10760(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10772(%rbp)      # 4-byte Spill
	jmp	.LBB263_373
.LBB263_372:                            # %cond.false.1361
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10772(%rbp)      # 4-byte Spill
	jmp	.LBB263_373
.LBB263_373:                            # %cond.end.1362
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10772(%rbp), %eax      # 4-byte Reload
	movl	-10728(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	cvtsi2sdl	%ecx, %xmm0
	movsd	-10576(%rbp), %xmm1     # 8-byte Reload
                                        # xmm1 = mem[0],zero
	mulsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -9996(%rbp)
	cmpl	$0, -9996(%rbp)
	jne	.LBB263_376
# BB#374:                               # %land.lhs.true.1370
                                        #   in Loop: Header=BB263_266 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-10008(%rbp), %xmm1     # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB263_376
# BB#375:                               # %if.then.1373
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$1, -9996(%rbp)
.LBB263_376:                            # %if.end.1374
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpl	$0, -9996(%rbp)
	je	.LBB263_379
# BB#377:                               # %land.lhs.true.1376
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpl	$0, -5156(%rbp)
	jle	.LBB263_379
# BB#378:                               # %if.then.1379
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-5156(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -5156(%rbp)
.LBB263_379:                            # %if.end.1381
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_380
.LBB263_380:                            # %if.end.1382
                                        #   in Loop: Header=BB263_266 Depth=1
	testb	$1, -5177(%rbp)
	je	.LBB263_417
# BB#381:                               # %if.then.1384
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-2580(%rbp), %eax
	movl	%eax, -4928(%rbp)
	cmpl	$0, -9996(%rbp)
	je	.LBB263_383
# BB#382:                               # %if.then.1387
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-9996(%rbp), %eax
	movl	-4928(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -4928(%rbp)
.LBB263_383:                            # %if.end.1389
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-4956(%rbp), %eax
	movl	-5156(%rbp), %ecx
	addl	$1, %ecx
	movb	-4929(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	addl	%esi, %ecx
	imull	%ecx, %eax
	movq	-24(%rbp), %rdi
	movq	80(%rdi), %rdi
	movl	%eax, -10776(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_384
	jmp	.LBB263_398
.LBB263_384:                            # %cond.true.1398
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_413
# BB#385:                               # %land.lhs.true.1403
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_413
# BB#386:                               # %land.lhs.true.1409
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_413
# BB#387:                               # %land.lhs.true.1418
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -10784(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10784(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_413
# BB#388:                               # %land.lhs.true.1425
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -10788(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_389
	jmp	.LBB263_394
.LBB263_389:                            # %cond.true.1430
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_396
# BB#390:                               # %land.lhs.true.1435
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_396
# BB#391:                               # %land.lhs.true.1441
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_396
# BB#392:                               # %land.lhs.true.1450
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10800(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10800(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_396
# BB#393:                               # %land.lhs.true.1457
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_395
	jmp	.LBB263_396
.LBB263_394:                            # %cond.false.1464
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_395
	jmp	.LBB263_396
.LBB263_395:                            # %cond.true.1465
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -10804(%rbp)      # 4-byte Spill
	jmp	.LBB263_397
.LBB263_396:                            # %cond.false.1470
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -10804(%rbp)      # 4-byte Spill
.LBB263_397:                            # %cond.end.1474
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10804(%rbp), %eax      # 4-byte Reload
	movl	-10788(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB263_399
	jmp	.LBB263_413
.LBB263_398:                            # %cond.false.1478
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_399
	jmp	.LBB263_413
.LBB263_399:                            # %cond.true.1479
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB263_401
# BB#400:                               # %cond.true.1483
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -10808(%rbp)      # 4-byte Spill
	jmp	.LBB263_412
.LBB263_401:                            # %cond.false.1485
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_404
# BB#402:                               # %land.lhs.true.1488
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_404
# BB#403:                               # %cond.true.1492
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB263_405
	jmp	.LBB263_410
.LBB263_404:                            # %cond.false.1497
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_405
	jmp	.LBB263_410
.LBB263_405:                            # %cond.true.1498
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_408
# BB#406:                               # %land.lhs.true.1501
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_408
# BB#407:                               # %cond.true.1505
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -10812(%rbp)      # 4-byte Spill
	jmp	.LBB263_409
.LBB263_408:                            # %cond.false.1509
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10812(%rbp)      # 4-byte Spill
	jmp	.LBB263_409
.LBB263_409:                            # %cond.end.1510
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10812(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10816(%rbp)      # 4-byte Spill
	jmp	.LBB263_411
.LBB263_410:                            # %cond.false.1512
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$5, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -10816(%rbp)      # 4-byte Spill
.LBB263_411:                            # %cond.end.1516
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10816(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -10808(%rbp)      # 4-byte Spill
.LBB263_412:                            # %cond.end.1519
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10808(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10820(%rbp)      # 4-byte Spill
	jmp	.LBB263_414
.LBB263_413:                            # %cond.false.1521
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10820(%rbp)      # 4-byte Spill
	jmp	.LBB263_414
.LBB263_414:                            # %cond.end.1522
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10820(%rbp), %eax      # 4-byte Reload
	movl	-10776(%rbp), %ecx      # 4-byte Reload
	addl	%eax, %ecx
	movl	-4928(%rbp), %eax
	subl	%ecx, %eax
	movl	%eax, -4928(%rbp)
	movl	-4928(%rbp), %eax
	movl	-5156(%rbp), %ecx
	imull	-4956(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB263_416
# BB#415:                               # %if.then.1529
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-5156(%rbp), %eax
	imull	-4956(%rbp), %eax
	movl	%eax, -4928(%rbp)
.LBB263_416:                            # %if.end.1531
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_418
.LBB263_417:                            # %if.else.1532
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-5156(%rbp), %eax
	imull	-4956(%rbp), %eax
	addl	-9996(%rbp), %eax
	movl	%eax, -4928(%rbp)
.LBB263_418:                            # %if.end.1535
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_420
.LBB263_419:                            # %if.else.1536
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rdi
	callq	window_box_height
	movl	$2, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -4928(%rbp)
.LBB263_420:                            # %if.end.1539
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_421
.LBB263_421:                            # %if.end.1540
                                        #   in Loop: Header=BB263_266 Depth=1
	leaq	-4904(%rbp), %rdi
	movl	-4928(%rbp), %esi
	callq	move_it_vertically_backward
	cmpl	$0, -2472(%rbp)
	jg	.LBB263_423
# BB#422:                               # %if.then.1544
                                        #   in Loop: Header=BB263_266 Depth=1
	leaq	-4904(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movq	-24(%rbp), %rsi
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	current_buffer, %rdx
	movq	744(%rdx), %rdx
	addq	$0, %rdx
	movq	%rdx, -10832(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-10832(%rbp), %rcx      # 8-byte Reload
	callq	init_iterator
	leaq	-4904(%rbp), %rdi
	xorl	%esi, %esi
	callq	move_it_vertically_backward
	movl	$0, -2472(%rbp)
.LBB263_423:                            # %if.end.1550
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%edi, %edi
	movl	$0, -2460(%rbp)
	movl	$0, -2500(%rbp)
	movq	-24(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -10840(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4592(%rbp), %rdx
	movq	-4584(%rbp), %rcx
	movq	-10840(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	movq	-8(%rbp), %rdi
	movq	-4592(%rbp), %rsi
	movq	-4584(%rbp), %rdx
	movq	%rax, -10848(%rbp)      # 8-byte Spill
	callq	run_window_scroll_functions
	movq	%rax, -10024(%rbp)
	movq	%rdx, -10016(%rbp)
	movq	-10024(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-10016(%rbp), %rax
	movq	%rax, -88(%rbp)
	callq	bidi_shelve_cache
	movq	%rax, -4968(%rbp)
	movb	$0, -10025(%rbp)
	testb	$1, -4905(%rbp)
	je	.LBB263_430
# BB#424:                               # %lor.lhs.false.1566
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB263_430
# BB#425:                               # %lor.lhs.false.1568
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$7, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB263_430
# BB#426:                               # %lor.lhs.false.1574
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%edi, %edi
	movq	globals+2656, %rax
	movq	%rax, -10856(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10856(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_430
# BB#427:                               # %lor.lhs.false.1578
                                        #   in Loop: Header=BB263_266 Depth=1
	testb	$1, -9(%rbp)
	je	.LBB263_430
# BB#428:                               # %lor.lhs.false.1580
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_430
# BB#429:                               # %lor.lhs.false.1586
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rdi
	callq	try_window_reusing_current_matrix
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -4906(%rbp)
	testb	$1, %al
	jne	.LBB263_431
.LBB263_430:                            # %if.then.1589
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	try_window
	cmpl	$1, %eax
	sete	%r8b
	andb	$1, %r8b
	movb	%r8b, -10025(%rbp)
.LBB263_431:                            # %if.end.1594
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%esi, %esi
	movq	-4968(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	-32(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$6, %rdi
	andq	$1, %rdi
	testq	$1, %rdi
	je	.LBB263_433
# BB#432:                               # %if.then.1600
	jmp	.LBB263_634
.LBB263_433:                            # %if.end.1601
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB263_442
# BB#434:                               # %if.then.1606
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_437
# BB#435:                               # %land.lhs.true.1613
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	-24(%rbp), %rdx
	subq	456(%rdx), %rcx
	cmpq	%rcx, %rax
	jl	.LBB263_437
# BB#436:                               # %if.then.1621
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	leaq	-4904(%rbp), %rdi
	movl	$1, %ecx
	movl	%ecx, %esi
	callq	move_it_by_lines
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-4592(%rbp), %rsi
	movq	-4584(%rbp), %rdx
	callq	try_window
	movl	%eax, -10860(%rbp)      # 4-byte Spill
	jmp	.LBB263_441
.LBB263_437:                            # %if.else.1626
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-4592(%rbp), %rax
	jge	.LBB263_439
# BB#438:                               # %if.then.1634
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	leaq	-4904(%rbp), %rdi
	movq	$-1, %rsi
	callq	move_it_by_lines
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-4592(%rbp), %rsi
	movq	-4584(%rbp), %rdx
	callq	try_window
	movl	%eax, -10864(%rbp)      # 4-byte Spill
	jmp	.LBB263_440
.LBB263_439:                            # %if.else.1639
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_440
.LBB263_440:                            # %if.end.1640
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_441
.LBB263_441:                            # %if.end.1641
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_442
.LBB263_442:                            # %if.end.1642
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB263_461
# BB#443:                               # %if.then.1647
                                        #   in Loop: Header=BB263_266 Depth=1
	testb	$1, -10025(%rbp)
	je	.LBB263_445
# BB#444:                               # %cond.true.1650
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	%rax, -10872(%rbp)      # 8-byte Spill
	jmp	.LBB263_446
.LBB263_445:                            # %cond.false.1652
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	%rax, -10872(%rbp)      # 8-byte Spill
.LBB263_446:                            # %cond.end.1654
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10872(%rbp), %rax      # 8-byte Reload
	xorl	%ecx, %ecx
                                        # kill: RCX<def> ECX<kill>
	xorl	%r8d, %r8d
	movq	%rax, -10040(%rbp)
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-10040(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	%rax, %rsi
	callq	row_containing_pos
	movq	%rax, -10048(%rbp)
	cmpq	$0, -10048(%rbp)
	jne	.LBB263_456
# BB#447:                               # %if.then.1662
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -10880(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -10888(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %ecx
	movq	-10880(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	callq	get_char_property_and_overlay
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -10056(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -10896(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10896(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_449
# BB#448:                               # %cond.true.1674
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%edi, %edi
	movq	-10056(%rbp), %rax
	movq	%rax, -10904(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10904(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -10908(%rbp)      # 4-byte Spill
	jmp	.LBB263_450
.LBB263_449:                            # %cond.false.1680
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10056(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -10908(%rbp)      # 4-byte Spill
.LBB263_450:                            # %cond.end.1683
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10908(%rbp), %eax      # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB263_455
# BB#451:                               # %if.then.1687
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$574, %edi              # imm = 0x23E
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -10920(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -10928(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -10936(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10920(%rbp), %rdi      # 8-byte Reload
	movq	-10928(%rbp), %rsi      # 8-byte Reload
	movq	-10936(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	Fnext_single_char_property_change
	movq	%rax, -10072(%rbp)
	movq	-10072(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB263_452
	jmp	.LBB263_453
.LBB263_452:                            # %if.then.1697
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10072(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -10064(%rbp)
	jmp	.LBB263_454
.LBB263_453:                            # %if.else.1699
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -10064(%rbp)
.LBB263_454:                            # %if.end.1701
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r8d, %r8d
	movq	-24(%rbp), %rdi
	movq	-10064(%rbp), %rsi
	movq	-10040(%rbp), %rdx
	movq	8(%rdx), %rdx
	callq	row_containing_pos
	movq	%rax, -10048(%rbp)
.LBB263_455:                            # %if.end.1704
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_456
.LBB263_456:                            # %if.end.1705
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpq	$0, -10048(%rbp)
	jne	.LBB263_460
# BB#457:                               # %if.then.1707
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10040(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -10048(%rbp)
	movq	-10048(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_459
# BB#458:                               # %if.then.1714
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10048(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -10048(%rbp)
.LBB263_459:                            # %if.end.1716
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_460
.LBB263_460:                            # %if.end.1717
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-24(%rbp), %rdi
	movq	-10048(%rbp), %rsi
	movq	-10040(%rbp), %rdx
	movq	%rcx, -10944(%rbp)      # 8-byte Spill
	movq	-10944(%rbp), %r8       # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -10945(%rbp)       # 1-byte Spill
.LBB263_461:                            # %if.end.1719
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rdi
	movl	%eax, %esi
	movl	%eax, %edx
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB263_480
# BB#462:                               # %if.then.1721
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, 472(%rax)
	je	.LBB263_464
# BB#463:                               # %if.then.1724
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	jmp	.LBB263_266
.LBB263_464:                            # %if.end.1727
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpq	$100, globals+3256
	jle	.LBB263_477
# BB#465:                               # %if.then.1730
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movl	268(%rax), %ecx
	movq	-32(%rbp), %rax
	imull	368(%rax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	-4956(%rbp)
	movl	%eax, -10076(%rbp)
	cmpq	$0, globals+3264
	jle	.LBB263_470
# BB#466:                               # %cond.true.1739
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$4, %eax
	movq	globals+3264, %rcx
	movl	-10076(%rbp), %edx
	movl	%eax, -10952(%rbp)      # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-10952(%rbp), %esi      # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB263_468
# BB#467:                               # %cond.true.1744
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	globals+3264, %rax
	movq	%rax, -10960(%rbp)      # 8-byte Spill
	jmp	.LBB263_469
.LBB263_468:                            # %cond.false.1745
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	$4, %eax
	movl	-10076(%rbp), %ecx
	movl	%eax, -10964(%rbp)      # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-10964(%rbp), %ecx      # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -10960(%rbp)      # 8-byte Spill
.LBB263_469:                            # %cond.end.1748
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10960(%rbp), %rax      # 8-byte Reload
	movq	%rax, -10976(%rbp)      # 8-byte Spill
	jmp	.LBB263_471
.LBB263_470:                            # %cond.false.1750
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -10976(%rbp)      # 8-byte Spill
	jmp	.LBB263_471
.LBB263_471:                            # %cond.end.1751
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-10976(%rbp), %rax      # 8-byte Reload
	movl	$2, %ecx
	movl	%eax, %edx
	movl	%edx, -10080(%rbp)
	movq	-24(%rbp), %rax
	movl	364(%rax), %edx
	movl	-10076(%rbp), %eax
	movl	%edx, -10980(%rbp)      # 4-byte Spill
	cltd
	idivl	%ecx
	movl	-10980(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	setge	%sil
	andb	$1, %sil
	movb	%sil, -10081(%rbp)
	testb	$1, -10081(%rbp)
	je	.LBB263_473
# BB#472:                               # %cond.true.1762
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10080(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -10984(%rbp)      # 4-byte Spill
	jmp	.LBB263_474
.LBB263_473:                            # %cond.false.1764
                                        #   in Loop: Header=BB263_266 Depth=1
	xorl	%eax, %eax
	movl	-10080(%rbp), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -10984(%rbp)      # 4-byte Spill
.LBB263_474:                            # %cond.end.1767
                                        #   in Loop: Header=BB263_266 Depth=1
	movl	-10984(%rbp), %eax      # 4-byte Reload
	leaq	-4904(%rbp), %rdi
	movslq	%eax, %rsi
	callq	move_it_by_lines
	movq	-24(%rbp), %rsi
	movq	200(%rsi), %rdi
	callq	clear_glyph_matrix
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-4592(%rbp), %rsi
	movq	-4584(%rbp), %rdx
	callq	try_window
	movl	$1, %ecx
	cmpl	%eax, %ecx
	jne	.LBB263_476
# BB#475:                               # %if.then.1776
	jmp	.LBB263_481
.LBB263_476:                            # %if.end.1777
                                        #   in Loop: Header=BB263_266 Depth=1
	jmp	.LBB263_477
.LBB263_477:                            # %if.end.1778
                                        #   in Loop: Header=BB263_266 Depth=1
	cmpl	$0, -4928(%rbp)
	jne	.LBB263_479
# BB#478:                               # %if.then.1781
	jmp	.LBB263_481
.LBB263_479:                            # %if.end.1782
                                        #   in Loop: Header=BB263_266 Depth=1
	movq	-24(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$0, -4928(%rbp)
	jmp	.LBB263_266
.LBB263_480:                            # %if.end.1784
	jmp	.LBB263_481
.LBB263_481:                            # %done
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movb	$1, %cl
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rax
	movq	current_buffer, %rdi
	cmpq	752(%rdi), %rax
	movb	%cl, -10985(%rbp)       # 1-byte Spill
	je	.LBB263_486
# BB#482:                               # %lor.rhs.1795
	movq	-88(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB263_484
# BB#483:                               # %cond.true.1802
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -11000(%rbp)      # 8-byte Spill
	jmp	.LBB263_485
.LBB263_484:                            # %cond.false.1805
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -11000(%rbp)      # 8-byte Spill
	jmp	.LBB263_485
.LBB263_485:                            # %cond.end.1806
	movq	-11000(%rbp), %rax      # 8-byte Reload
	movq	-88(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	sete	%sil
	movb	%sil, -10985(%rbp)      # 1-byte Spill
.LBB263_486:                            # %lor.end.1818
	movb	-10985(%rbp), %al       # 1-byte Reload
	movq	-24(%rbp), %rcx
	movzbl	%al, %edx
	andl	$1, %edx
	movw	%dx, %si
	movw	468(%rcx), %di
	shlw	$4, %si
	andw	$-17, %di
	orw	%si, %di
	movw	%di, 468(%rcx)
	testb	$1, -97(%rbp)
	jne	.LBB263_493
# BB#487:                               # %lor.lhs.false.1826
	testb	$1, -9(%rbp)
	jne	.LBB263_490
# BB#488:                               # %land.lhs.true.1828
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB263_490
# BB#489:                               # %land.lhs.true.1835
	movq	-24(%rbp), %rax
	movl	256(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -11004(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	-11004(%rbp), %ecx      # 4-byte Reload
	cmpl	256(%rax), %ecx
	jne	.LBB263_493
.LBB263_490:                            # %lor.lhs.false.1843
	movq	-24(%rbp), %rax
	cmpq	$0, 328(%rax)
	jg	.LBB263_493
# BB#491:                               # %lor.lhs.false.1846
	movq	-24(%rbp), %rax
	cmpq	$-1, 336(%rax)
	je	.LBB263_595
# BB#492:                               # %land.lhs.true.1849
	movq	-24(%rbp), %rax
	movq	336(%rax), %rax
	movq	%rax, -11016(%rbp)      # 8-byte Spill
	callq	current_column
	movq	-11016(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_595
.LBB263_493:                            # %land.lhs.true.1854
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_494
	jmp	.LBB263_499
.LBB263_494:                            # %cond.true.1858
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_500
# BB#495:                               # %land.lhs.true.1863
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_500
# BB#496:                               # %land.lhs.true.1869
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_500
# BB#497:                               # %land.lhs.true.1878
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -11024(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11024(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_500
# BB#498:                               # %land.lhs.true.1885
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_516
	jmp	.LBB263_500
.LBB263_499:                            # %cond.false.1892
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_516
	jmp	.LBB263_500
.LBB263_500:                            # %lor.lhs.false.1893
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_501
	jmp	.LBB263_515
.LBB263_501:                            # %cond.true.1897
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_595
# BB#502:                               # %land.lhs.true.1902
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_595
# BB#503:                               # %land.lhs.true.1908
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_595
# BB#504:                               # %land.lhs.true.1917
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -11032(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11032(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_595
# BB#505:                               # %land.lhs.true.1924
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -11036(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_506
	jmp	.LBB263_511
.LBB263_506:                            # %cond.true.1929
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_513
# BB#507:                               # %land.lhs.true.1934
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_513
# BB#508:                               # %land.lhs.true.1940
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_513
# BB#509:                               # %land.lhs.true.1949
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -11048(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11048(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_513
# BB#510:                               # %land.lhs.true.1956
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_512
	jmp	.LBB263_513
.LBB263_511:                            # %cond.false.1963
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_512
	jmp	.LBB263_513
.LBB263_512:                            # %cond.true.1964
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -11052(%rbp)      # 4-byte Spill
	jmp	.LBB263_514
.LBB263_513:                            # %cond.false.1969
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -11052(%rbp)      # 4-byte Spill
.LBB263_514:                            # %cond.end.1973
	movl	-11052(%rbp), %eax      # 4-byte Reload
	movl	-11036(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB263_516
	jmp	.LBB263_595
.LBB263_515:                            # %cond.false.1977
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_516
	jmp	.LBB263_595
.LBB263_516:                            # %if.then.1978
	movq	-24(%rbp), %rdi
	callq	display_mode_lines
	movq	-24(%rbp), %rdi
	movq	80(%rdi), %rdi
	movl	%eax, -11056(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_517
	jmp	.LBB263_522
.LBB263_517:                            # %cond.true.1983
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_553
# BB#518:                               # %land.lhs.true.1988
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_553
# BB#519:                               # %land.lhs.true.1994
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_553
# BB#520:                               # %land.lhs.true.2003
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -11064(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11064(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_553
# BB#521:                               # %land.lhs.true.2010
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_523
	jmp	.LBB263_553
.LBB263_522:                            # %cond.false.2017
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_523
	jmp	.LBB263_553
.LBB263_523:                            # %land.lhs.true.2018
	movq	-24(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB263_525
# BB#524:                               # %cond.true.2022
	movq	-24(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -11068(%rbp)      # 4-byte Spill
	jmp	.LBB263_543
.LBB263_525:                            # %cond.false.2024
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_528
# BB#526:                               # %land.lhs.true.2027
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_528
# BB#527:                               # %cond.true.2031
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB263_529
	jmp	.LBB263_534
.LBB263_528:                            # %cond.false.2041
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_529
	jmp	.LBB263_534
.LBB263_529:                            # %cond.true.2042
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_532
# BB#530:                               # %land.lhs.true.2045
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_532
# BB#531:                               # %cond.true.2049
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -11072(%rbp)      # 4-byte Spill
	jmp	.LBB263_533
.LBB263_532:                            # %cond.false.2058
	xorl	%eax, %eax
	movl	%eax, -11072(%rbp)      # 4-byte Spill
	jmp	.LBB263_533
.LBB263_533:                            # %cond.end.2059
	movl	-11072(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11076(%rbp)      # 4-byte Spill
	jmp	.LBB263_542
.LBB263_534:                            # %cond.false.2061
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -11088(%rbp)      # 8-byte Spill
	movb	%al, -11089(%rbp)       # 1-byte Spill
	je	.LBB263_541
# BB#535:                               # %lor.lhs.false.2065
	movq	-24(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -11104(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-11104(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -11089(%rbp)       # 1-byte Spill
	je	.LBB263_541
# BB#536:                               # %lor.rhs.2069
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -11105(%rbp)       # 1-byte Spill
	jle	.LBB263_540
# BB#537:                               # %land.lhs.true.2072
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -11120(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-11120(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -11105(%rbp)       # 1-byte Spill
	je	.LBB263_540
# BB#538:                               # %land.lhs.true.2076
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -11128(%rbp)      # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-11128(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -11105(%rbp)       # 1-byte Spill
	jne	.LBB263_540
# BB#539:                               # %land.rhs.2081
	movq	-24(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -11136(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-11136(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -11105(%rbp)       # 1-byte Spill
.LBB263_540:                            # %land.end.2085
	movb	-11105(%rbp), %al       # 1-byte Reload
	movb	%al, -11089(%rbp)       # 1-byte Spill
.LBB263_541:                            # %lor.end.2087
	movb	-11089(%rbp), %al       # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-11088(%rbp), %rdi      # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -11076(%rbp)      # 4-byte Spill
.LBB263_542:                            # %cond.end.2090
	movl	-11076(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -11068(%rbp)      # 4-byte Spill
.LBB263_543:                            # %cond.end.2093
	movl	-11068(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	cmpq	$0, 200(%rcx)
	movl	%eax, -11140(%rbp)      # 4-byte Spill
	je	.LBB263_546
# BB#544:                               # %land.lhs.true.2097
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_546
# BB#545:                               # %cond.true.2101
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	200(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -11144(%rbp)      # 4-byte Spill
	jmp	.LBB263_547
.LBB263_546:                            # %cond.false.2110
	xorl	%eax, %eax
	movl	%eax, -11144(%rbp)      # 4-byte Spill
	jmp	.LBB263_547
.LBB263_547:                            # %cond.end.2111
	movl	-11144(%rbp), %eax      # 4-byte Reload
	movl	-11140(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	je	.LBB263_553
# BB#548:                               # %if.then.2115
	movq	-32(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-65, %rcx
	orq	$64, %rcx
	movq	%rcx, 208(%rax)
	movq	-24(%rbp), %rax
	movl	$-1, 444(%rax)
	movq	-24(%rbp), %rax
	cmpq	$0, 200(%rax)
	je	.LBB263_551
# BB#549:                               # %land.lhs.true.2123
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_551
# BB#550:                               # %cond.true.2127
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	200(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -11148(%rbp)      # 4-byte Spill
	jmp	.LBB263_552
.LBB263_551:                            # %cond.false.2136
	xorl	%eax, %eax
	movl	%eax, -11148(%rbp)      # 4-byte Spill
	jmp	.LBB263_552
.LBB263_552:                            # %cond.end.2137
	movl	-11148(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	-24(%rbp), %rdx
	movq	192(%rdx), %rdx
	movslq	24(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movl	%eax, -196(%rcx)
.LBB263_553:                            # %if.end.2147
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_554
	jmp	.LBB263_568
.LBB263_554:                            # %cond.true.2151
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_592
# BB#555:                               # %land.lhs.true.2156
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_592
# BB#556:                               # %land.lhs.true.2162
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_592
# BB#557:                               # %land.lhs.true.2171
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -11160(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11160(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_592
# BB#558:                               # %land.lhs.true.2178
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -11164(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB263_559
	jmp	.LBB263_564
.LBB263_559:                            # %cond.true.2183
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_566
# BB#560:                               # %land.lhs.true.2188
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_566
# BB#561:                               # %land.lhs.true.2194
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_566
# BB#562:                               # %land.lhs.true.2203
	movq	-24(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -11176(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11176(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_566
# BB#563:                               # %land.lhs.true.2210
	movq	-24(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB263_565
	jmp	.LBB263_566
.LBB263_564:                            # %cond.false.2217
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_565
	jmp	.LBB263_566
.LBB263_565:                            # %cond.true.2218
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -11180(%rbp)      # 4-byte Spill
	jmp	.LBB263_567
.LBB263_566:                            # %cond.false.2223
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -11180(%rbp)      # 4-byte Spill
.LBB263_567:                            # %cond.end.2227
	movl	-11180(%rbp), %eax      # 4-byte Reload
	movl	-11164(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB263_569
	jmp	.LBB263_592
.LBB263_568:                            # %cond.false.2231
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_569
	jmp	.LBB263_592
.LBB263_569:                            # %land.lhs.true.2232
	movq	-24(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB263_571
# BB#570:                               # %cond.true.2236
	movq	-24(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -11184(%rbp)      # 4-byte Spill
	jmp	.LBB263_582
.LBB263_571:                            # %cond.false.2238
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_574
# BB#572:                               # %land.lhs.true.2241
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_574
# BB#573:                               # %cond.true.2245
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB263_575
	jmp	.LBB263_580
.LBB263_574:                            # %cond.false.2250
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_575
	jmp	.LBB263_580
.LBB263_575:                            # %cond.true.2251
	movq	-24(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB263_578
# BB#576:                               # %land.lhs.true.2254
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_578
# BB#577:                               # %cond.true.2258
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -11188(%rbp)      # 4-byte Spill
	jmp	.LBB263_579
.LBB263_578:                            # %cond.false.2262
	xorl	%eax, %eax
	movl	%eax, -11188(%rbp)      # 4-byte Spill
	jmp	.LBB263_579
.LBB263_579:                            # %cond.end.2263
	movl	-11188(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11192(%rbp)      # 4-byte Spill
	jmp	.LBB263_581
.LBB263_580:                            # %cond.false.2265
	movl	$5, %esi
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -11192(%rbp)      # 4-byte Spill
.LBB263_581:                            # %cond.end.2269
	movl	-11192(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -11184(%rbp)      # 4-byte Spill
.LBB263_582:                            # %cond.end.2272
	movl	-11184(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	cmpq	$0, 200(%rcx)
	movl	%eax, -11196(%rbp)      # 4-byte Spill
	je	.LBB263_585
# BB#583:                               # %land.lhs.true.2276
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_585
# BB#584:                               # %cond.true.2280
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -11200(%rbp)      # 4-byte Spill
	jmp	.LBB263_586
.LBB263_585:                            # %cond.false.2284
	xorl	%eax, %eax
	movl	%eax, -11200(%rbp)      # 4-byte Spill
	jmp	.LBB263_586
.LBB263_586:                            # %cond.end.2285
	movl	-11200(%rbp), %eax      # 4-byte Reload
	movl	-11196(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	je	.LBB263_592
# BB#587:                               # %if.then.2289
	movq	-32(%rbp), %rax
	movq	208(%rax), %rcx
	andq	$-65, %rcx
	orq	$64, %rcx
	movq	%rcx, 208(%rax)
	movq	-24(%rbp), %rax
	movl	$-1, 448(%rax)
	movq	-24(%rbp), %rax
	cmpq	$0, 200(%rax)
	je	.LBB263_590
# BB#588:                               # %land.lhs.true.2297
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB263_590
# BB#589:                               # %cond.true.2301
	movq	-24(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -11204(%rbp)      # 4-byte Spill
	jmp	.LBB263_591
.LBB263_590:                            # %cond.false.2305
	xorl	%eax, %eax
	movl	%eax, -11204(%rbp)      # 4-byte Spill
	jmp	.LBB263_591
.LBB263_591:                            # %cond.end.2306
	movl	-11204(%rbp), %eax      # 4-byte Reload
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	%eax, 60(%rcx)
.LBB263_592:                            # %if.end.2311
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_594
# BB#593:                               # %if.then.2317
	jmp	.LBB263_634
.LBB263_594:                            # %if.end.2318
	jmp	.LBB263_595
.LBB263_595:                            # %if.end.2319
	testb	$1, line_number_displayed
	jne	.LBB263_598
# BB#596:                               # %land.lhs.true.2321
	movq	-24(%rbp), %rax
	cmpq	$-1, 328(%rax)
	je	.LBB263_598
# BB#597:                               # %if.then.2325
	movq	-24(%rbp), %rax
	movq	$0, 328(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 320(%rax)
.LBB263_598:                            # %if.end.2328
	jmp	.LBB263_599
.LBB263_599:                            # %finish_menu_bars
	testb	$1, -97(%rbp)
	je	.LBB263_611
# BB#600:                               # %land.lhs.true.2331
	movq	-32(%rbp), %rax
	movq	48(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	.LBB263_611
# BB#601:                               # %if.then.2334
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB263_603
# BB#602:                               # %if.then.2342
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$9, %rax
	andq	$1, %rax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -10082(%rbp)
	jmp	.LBB263_604
.LBB263_603:                            # %if.else.2348
	movq	-32(%rbp), %rax
	cmpl	$0, 356(%rax)
	setg	%cl
	andb	$1, %cl
	movb	%cl, -10082(%rbp)
.LBB263_604:                            # %if.end.2352
	testb	$1, -10082(%rbp)
	je	.LBB263_606
# BB#605:                               # %if.then.2354
	movq	-24(%rbp), %rdi
	callq	display_menu_bar
.LBB263_606:                            # %if.end.2355
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB263_610
# BB#607:                               # %if.then.2363
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$5, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB263_609
# BB#608:                               # %if.then.2368
	movq	-32(%rbp), %rdi
	callq	redisplay_tool_bar
	movb	%al, -11205(%rbp)       # 1-byte Spill
.LBB263_609:                            # %if.end.2370
	jmp	.LBB263_610
.LBB263_610:                            # %if.end.2371
	callq	SPECPDL_INDEX
	movl	$548, %edi              # imm = 0x224
	movq	%rax, -10096(%rbp)
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -11216(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11216(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdi
	callq	x_consider_frame_title
	xorl	%edi, %edi
	movq	-10096(%rbp), %rax
	movq	%rax, -11224(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11224(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -11232(%rbp)      # 8-byte Spill
.LBB263_611:                            # %if.end.2378
	movq	-32(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB263_626
# BB#612:                               # %land.lhs.true.2386
	movb	$1, %al
	movq	-24(%rbp), %rdi
	testb	$1, -9(%rbp)
	movq	%rdi, -11240(%rbp)      # 8-byte Spill
	movb	%al, -11241(%rbp)       # 1-byte Spill
	jne	.LBB263_616
# BB#613:                               # %lor.lhs.false.2389
	testb	$1, -4906(%rbp)
	jne	.LBB263_615
# BB#614:                               # %land.lhs.true.2391
	movb	$1, %al
	testb	$1, overlay_arrow_seen
	movb	%al, -11241(%rbp)       # 1-byte Spill
	je	.LBB263_616
.LBB263_615:                            # %lor.rhs.2393
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movb	%dl, -11241(%rbp)       # 1-byte Spill
.LBB263_616:                            # %lor.end.2400
	movb	-11241(%rbp), %al       # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movq	-11240(%rbp), %rdi      # 8-byte Reload
	movl	%ecx, %esi
	callq	update_window_fringes
	testb	$1, %al
	jne	.LBB263_617
	jmp	.LBB263_626
.LBB263_617:                            # %if.then.2403
	movq	-32(%rbp), %rdi
	callq	update_begin
	callq	block_input
	movl	$1, %esi
	movq	-24(%rbp), %rdi
	callq	draw_window_fringes
	testb	$1, %al
	jne	.LBB263_618
	jmp	.LBB263_625
.LBB263_618:                            # %if.then.2405
	movq	-24(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-24(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -11248(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -11252(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	-11252(%rbp), %ecx      # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-11248(%rbp), %edx      # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB263_620
# BB#619:                               # %lor.lhs.false.2421
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_621
.LBB263_620:                            # %cond.true.2427
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_622
	jmp	.LBB263_623
.LBB263_621:                            # %cond.false.2428
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 336(%rax)
	je	.LBB263_623
.LBB263_622:                            # %if.then.2432
	movq	-24(%rbp), %rdi
	callq	x_draw_right_divider
	jmp	.LBB263_624
.LBB263_623:                            # %if.else.2433
	movq	-24(%rbp), %rdi
	callq	x_draw_vertical_border
.LBB263_624:                            # %if.end.2434
	jmp	.LBB263_625
.LBB263_625:                            # %if.end.2435
	callq	unblock_input
	movq	-32(%rbp), %rdi
	callq	update_end
.LBB263_626:                            # %if.end.2436
	movq	-24(%rbp), %rax
	movl	244(%rax), %ecx
	movq	-24(%rbp), %rax
	addl	260(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -11256(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -11260(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	-11260(%rbp), %ecx      # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-11256(%rbp), %edx      # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB263_628
# BB#627:                               # %land.lhs.true.2453
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -11272(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11272(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB263_630
.LBB263_628:                            # %lor.lhs.false.2462
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB263_630
# BB#629:                               # %lor.lhs.false.2469
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_631
.LBB263_630:                            # %cond.true.2476
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_632
	jmp	.LBB263_633
.LBB263_631:                            # %cond.false.2477
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 340(%rax)
	je	.LBB263_633
.LBB263_632:                            # %if.then.2482
	movq	-24(%rbp), %rdi
	callq	x_draw_bottom_divider
.LBB263_633:                            # %if.end.2483
	jmp	.LBB263_634
.LBB263_634:                            # %need_larger_matrices
	jmp	.LBB263_635
.LBB263_635:                            # %finish_scroll_bars
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_637
# BB#636:                               # %cond.true.2490
	xorl	%eax, %eax
	movl	%eax, -11276(%rbp)      # 4-byte Spill
	jmp	.LBB263_644
.LBB263_637:                            # %cond.false.2491
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11288(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11288(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_639
# BB#638:                               # %cond.true.2495
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -11292(%rbp)      # 4-byte Spill
	jmp	.LBB263_643
.LBB263_639:                            # %cond.false.2503
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11304(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11304(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_641
# BB#640:                               # %cond.true.2508
	movl	$1, %eax
	movl	%eax, -11308(%rbp)      # 4-byte Spill
	jmp	.LBB263_642
.LBB263_641:                            # %cond.false.2509
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11320(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-11320(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -11308(%rbp)      # 4-byte Spill
.LBB263_642:                            # %cond.end.2515
	movl	-11308(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11292(%rbp)      # 4-byte Spill
.LBB263_643:                            # %cond.end.2517
	movl	-11292(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11276(%rbp)      # 4-byte Spill
.LBB263_644:                            # %cond.end.2519
	movl	-11276(%rbp), %eax      # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB263_664
# BB#645:                               # %lor.lhs.false.2523
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_647
# BB#646:                               # %cond.true.2530
	xorl	%eax, %eax
	movl	%eax, -11324(%rbp)      # 4-byte Spill
	jmp	.LBB263_654
.LBB263_647:                            # %cond.false.2531
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11336(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11336(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_649
# BB#648:                               # %cond.true.2536
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -11340(%rbp)      # 4-byte Spill
	jmp	.LBB263_653
.LBB263_649:                            # %cond.false.2544
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11352(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11352(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_651
# BB#650:                               # %cond.true.2549
	movl	$1, %eax
	movl	%eax, -11356(%rbp)      # 4-byte Spill
	jmp	.LBB263_652
.LBB263_651:                            # %cond.false.2550
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11368(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-11368(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -11356(%rbp)      # 4-byte Spill
.LBB263_652:                            # %cond.end.2556
	movl	-11356(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11340(%rbp)      # 4-byte Spill
.LBB263_653:                            # %cond.end.2558
	movl	-11340(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11324(%rbp)      # 4-byte Spill
.LBB263_654:                            # %cond.end.2560
	movl	-11324(%rbp), %eax      # 4-byte Reload
	cmpl	$2, %eax
	je	.LBB263_664
# BB#655:                               # %lor.lhs.false.2564
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_658
# BB#656:                               # %lor.lhs.false.2571
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_659
# BB#657:                               # %land.lhs.true.2577
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB263_659
.LBB263_658:                            # %cond.true.2584
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_664
	jmp	.LBB263_698
.LBB263_659:                            # %cond.false.2585
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -11376(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11376(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_661
# BB#660:                               # %cond.true.2590
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB263_664
	jmp	.LBB263_698
.LBB263_661:                            # %cond.false.2599
	movl	$213, %edi
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -11384(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11384(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_663
# BB#662:                               # %cond.true.2604
	movb	$1, %al
	testb	$1, %al
	jne	.LBB263_664
	jmp	.LBB263_698
.LBB263_663:                            # %cond.false.2605
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_664
	jmp	.LBB263_698
.LBB263_664:                            # %if.then.2606
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_666
# BB#665:                               # %cond.true.2613
	xorl	%eax, %eax
	movl	%eax, -11388(%rbp)      # 4-byte Spill
	jmp	.LBB263_673
.LBB263_666:                            # %cond.false.2614
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11400(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11400(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_668
# BB#667:                               # %cond.true.2619
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -11404(%rbp)      # 4-byte Spill
	jmp	.LBB263_672
.LBB263_668:                            # %cond.false.2627
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11416(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11416(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_670
# BB#669:                               # %cond.true.2632
	movl	$1, %eax
	movl	%eax, -11420(%rbp)      # 4-byte Spill
	jmp	.LBB263_671
.LBB263_670:                            # %cond.false.2633
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11432(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-11432(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -11420(%rbp)      # 4-byte Spill
.LBB263_671:                            # %cond.end.2639
	movl	-11420(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11404(%rbp)      # 4-byte Spill
.LBB263_672:                            # %cond.end.2641
	movl	-11404(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11388(%rbp)      # 4-byte Spill
.LBB263_673:                            # %cond.end.2643
	movl	-11388(%rbp), %eax      # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB263_684
# BB#674:                               # %lor.lhs.false.2647
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_676
# BB#675:                               # %cond.true.2654
	xorl	%eax, %eax
	movl	%eax, -11436(%rbp)      # 4-byte Spill
	jmp	.LBB263_683
.LBB263_676:                            # %cond.false.2655
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11448(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11448(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_678
# BB#677:                               # %cond.true.2660
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$30, %rax
	andq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -11452(%rbp)      # 4-byte Spill
	jmp	.LBB263_682
.LBB263_678:                            # %cond.false.2668
	movl	$607, %edi              # imm = 0x25F
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11464(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11464(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_680
# BB#679:                               # %cond.true.2673
	movl	$1, %eax
	movl	%eax, -11468(%rbp)      # 4-byte Spill
	jmp	.LBB263_681
.LBB263_680:                            # %cond.false.2674
	movl	$811, %edi              # imm = 0x32B
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -11480(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	$2, %ecx
	movq	-11480(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -11468(%rbp)      # 4-byte Spill
.LBB263_681:                            # %cond.end.2680
	movl	-11468(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11452(%rbp)      # 4-byte Spill
.LBB263_682:                            # %cond.end.2682
	movl	-11452(%rbp), %eax      # 4-byte Reload
	movl	%eax, -11436(%rbp)      # 4-byte Spill
.LBB263_683:                            # %cond.end.2684
	movl	-11436(%rbp), %eax      # 4-byte Reload
	cmpl	$2, %eax
	jne	.LBB263_685
.LBB263_684:                            # %if.then.2688
	movq	-24(%rbp), %rdi
	callq	set_vertical_scroll_bar
.LBB263_685:                            # %if.end.2689
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB263_688
# BB#686:                               # %lor.lhs.false.2696
	movq	-24(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB263_689
# BB#687:                               # %land.lhs.true.2702
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB263_689
.LBB263_688:                            # %cond.true.2709
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_694
	jmp	.LBB263_695
.LBB263_689:                            # %cond.false.2710
	movl	$901, %edi              # imm = 0x385
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -11488(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11488(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_691
# BB#690:                               # %cond.true.2715
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB263_694
	jmp	.LBB263_695
.LBB263_691:                            # %cond.false.2724
	movl	$213, %edi
	movq	-24(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -11496(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11496(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB263_693
# BB#692:                               # %cond.true.2729
	movb	$1, %al
	testb	$1, %al
	jne	.LBB263_694
	jmp	.LBB263_695
.LBB263_693:                            # %cond.false.2730
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB263_694
	jmp	.LBB263_695
.LBB263_694:                            # %if.then.2731
	movq	-24(%rbp), %rdi
	callq	set_horizontal_scroll_bar
.LBB263_695:                            # %if.end.2732
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 320(%rax)
	je	.LBB263_697
# BB#696:                               # %if.then.2734
	movq	-32(%rbp), %rax
	movq	376(%rax), %rax
	movq	320(%rax), %rax
	movq	-24(%rbp), %rdi
	callq	*%rax
.LBB263_697:                            # %if.end.2737
	jmp	.LBB263_698
.LBB263_698:                            # %if.end.2738
	movq	-80(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jge	.LBB263_700
# BB#699:                               # %if.then.2743
	movq	current_buffer, %rdi
	movq	current_buffer, %rax
	movq	752(%rax), %rsi
	movq	current_buffer, %rax
	movq	760(%rax), %rdx
	callq	temp_set_point_both
	jmp	.LBB263_704
.LBB263_700:                            # %if.else.2746
	movq	-80(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jle	.LBB263_702
# BB#701:                               # %if.then.2751
	movq	current_buffer, %rdi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rdx
	callq	temp_set_point_both
	jmp	.LBB263_703
.LBB263_702:                            # %if.else.2756
	movq	current_buffer, %rdi
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rdx
	callq	temp_set_point_both
.LBB263_703:                            # %if.end.2759
	jmp	.LBB263_704
.LBB263_704:                            # %if.end.2760
	movq	-48(%rbp), %rdi
	callq	set_buffer_internal_1
	movq	-64(%rbp), %rdi
	movq	current_buffer, %rax
	cmpq	768(%rax), %rdi
	jg	.LBB263_706
# BB#705:                               # %if.then.2765
	movq	current_buffer, %rdi
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rdx
	callq	temp_set_point_both
.LBB263_706:                            # %if.end.2768
	xorl	%edi, %edi
	movq	-4920(%rbp), %rax
	movq	%rax, -11504(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-11504(%rbp), %rdi      # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -11512(%rbp)      # 8-byte Spill
.LBB263_707:                            # %return
	addq	$11536, %rsp            # imm = 0x2D10
	popq	%rbp
	retq
.Lfunc_end263:
	.size	redisplay_window, .Lfunc_end263-redisplay_window
	.cfi_endproc

	.align	16, 0x90
	.type	compute_window_start_on_continuation_line,@function
compute_window_start_on_continuation_line: # @compute_window_start_on_continuation_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp811:
	.cfi_def_cfa_offset 16
.Ltmp812:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp813:
	.cfi_def_cfa_register %rbp
	subq	$4960, %rsp             # imm = 0x1360
	movq	%rdi, -8(%rbp)
	movb	$0, -41(%rbp)
	movq	-8(%rbp), %rdi
	movq	88(%rdi), %rdi
	callq	marker_position
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	current_buffer, %rdi
	cmpq	752(%rdi), %rax
	jle	.LBB264_39
# BB#1:                                 # %land.lhs.true
	movq	-32(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB264_3
# BB#2:                                 # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -4872(%rbp)       # 8-byte Spill
	jmp	.LBB264_4
.LBB264_3:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -4872(%rbp)       # 8-byte Spill
	jmp	.LBB264_4
.LBB264_4:                              # %cond.end
	movq	-4872(%rbp), %rax       # 8-byte Reload
	movq	-32(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	je	.LBB264_39
# BB#5:                                 # %if.then
	movq	-40(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jge	.LBB264_7
# BB#6:                                 # %if.then.17
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB264_10
.LBB264_7:                              # %if.else
	movq	-40(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jle	.LBB264_9
# BB#8:                                 # %if.then.24
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rax
	movq	776(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB264_9:                              # %if.end
	jmp	.LBB264_10
.LBB264_10:                             # %if.end.28
	movq	-8(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -4880(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB264_11
	jmp	.LBB264_26
.LBB264_11:                             # %cond.true.31
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -4881(%rbp)        # 1-byte Spill
	jne	.LBB264_25
# BB#12:                                # %land.lhs.true.32
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -4881(%rbp)        # 1-byte Spill
	jne	.LBB264_25
# BB#13:                                # %land.lhs.true.36
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -4881(%rbp)        # 1-byte Spill
	je	.LBB264_25
# BB#14:                                # %land.lhs.true.43
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-4896(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -4881(%rbp)        # 1-byte Spill
	je	.LBB264_25
# BB#15:                                # %land.rhs
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -4900(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB264_16
	jmp	.LBB264_21
.LBB264_16:                             # %cond.true.52
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB264_23
# BB#17:                                # %land.lhs.true.57
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB264_23
# BB#18:                                # %land.lhs.true.63
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB264_23
# BB#19:                                # %land.lhs.true.72
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4912(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB264_23
# BB#20:                                # %land.lhs.true.78
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB264_22
	jmp	.LBB264_23
.LBB264_21:                             # %cond.false.84
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB264_22
	jmp	.LBB264_23
.LBB264_22:                             # %cond.true.85
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -4916(%rbp)       # 4-byte Spill
	jmp	.LBB264_24
.LBB264_23:                             # %cond.false.89
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -4916(%rbp)       # 4-byte Spill
.LBB264_24:                             # %cond.end.93
	movl	-4916(%rbp), %eax       # 4-byte Reload
	movl	-4900(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -4881(%rbp)        # 1-byte Spill
.LBB264_25:                             # %land.end
	movb	-4881(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -4920(%rbp)       # 4-byte Spill
	jmp	.LBB264_27
.LBB264_26:                             # %cond.false.97
	xorl	%eax, %eax
	movl	%eax, -4920(%rbp)       # 4-byte Spill
	jmp	.LBB264_27
.LBB264_27:                             # %cond.end.98
	movl	-4920(%rbp), %eax       # 4-byte Reload
	leaq	-4848(%rbp), %rdi
	xorl	%r9d, %r9d
	movslq	%eax, %rcx
	shlq	$8, %rcx
	movq	-4880(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	movq	%rdx, -4856(%rbp)
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-4856(%rbp), %r8
	callq	init_iterator
	leaq	-4848(%rbp), %rdi
	callq	reseat_at_previous_visible_line_start
	movq	-40(%rbp), %rcx
	subq	-4536(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	268(%rdx), %eax
	movq	-8(%rbp), %rdx
	imull	264(%rdx), %eax
	movslq	%eax, %rdx
	cmpq	%rdx, %rcx
	jge	.LBB264_38
# BB#28:                                # %if.then.111
	movq	-4536(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-4528(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$10000000, -4860(%rbp)  # imm = 0x989680
.LBB264_29:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	subq	-4536(%rbp), %rax
	cmpq	$0, %rax
	jge	.LBB264_31
# BB#30:                                # %cond.true.121
                                        #   in Loop: Header=BB264_29 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-40(%rbp), %rdx
	subq	-4536(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, -4928(%rbp)       # 8-byte Spill
	jmp	.LBB264_32
.LBB264_31:                             # %cond.false.128
                                        #   in Loop: Header=BB264_29 Depth=1
	movq	-40(%rbp), %rax
	subq	-4536(%rbp), %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
.LBB264_32:                             # %cond.end.134
                                        #   in Loop: Header=BB264_29 Depth=1
	movq	-4928(%rbp), %rax       # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -4864(%rbp)
	movl	-4864(%rbp), %ecx
	cmpl	-4860(%rbp), %ecx
	jge	.LBB264_37
# BB#33:                                # %while.body
                                        #   in Loop: Header=BB264_29 Depth=1
	movl	-4864(%rbp), %eax
	movl	%eax, -4860(%rbp)
	movq	-4536(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-4528(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	cmpl	$1, -2732(%rbp)
	jne	.LBB264_35
# BB#34:                                # %if.then.143
                                        #   in Loop: Header=BB264_29 Depth=1
	leaq	-4848(%rbp), %rdi
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$11, %r9d
	movq	current_buffer, %rax
	movq	768(%rax), %rsi
	movl	-2528(%rbp), %edx
	movl	-2416(%rbp), %ecx
	callq	move_it_to
	leaq	-4848(%rbp), %rdi
	xorl	%edx, %edx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$11, %r9d
	movq	current_buffer, %rsi
	movq	768(%rsi), %rsi
	movl	-2416(%rbp), %ecx
	addl	-2468(%rbp), %ecx
	addl	-2464(%rbp), %ecx
	movl	%eax, -4932(%rbp)       # 4-byte Spill
	callq	move_it_to
	movl	%eax, -4936(%rbp)       # 4-byte Spill
	jmp	.LBB264_36
.LBB264_35:                             # %if.else.151
                                        #   in Loop: Header=BB264_29 Depth=1
	leaq	-4848(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
.LBB264_36:                             # %if.end.152
                                        #   in Loop: Header=BB264_29 Depth=1
	jmp	.LBB264_29
.LBB264_37:                             # %while.end
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-4944(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	movb	$1, -41(%rbp)
	movq	%rax, -4952(%rbp)       # 8-byte Spill
.LBB264_38:                             # %if.end.158
	jmp	.LBB264_39
.LBB264_39:                             # %if.end.159
	movb	-41(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$4960, %rsp             # imm = 0x1360
	popq	%rbp
	retq
.Lfunc_end264:
	.size	compute_window_start_on_continuation_line, .Lfunc_end264-compute_window_start_on_continuation_line
	.cfi_endproc

	.align	16, 0x90
	.type	CHECK_WINDOW_END,@function
CHECK_WINDOW_END:                       # @CHECK_WINDOW_END
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp814:
	.cfi_def_cfa_offset 16
.Ltmp815:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp816:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
.Lfunc_end265:
	.size	CHECK_WINDOW_END, .Lfunc_end265-CHECK_WINDOW_END
	.cfi_endproc

	.align	16, 0x90
	.type	window_frozen_p,@function
window_frozen_p:                        # @window_frozen_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp817:
	.cfi_def_cfa_offset 16
.Ltmp818:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp819:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	208(%rdi), %rdi
	shrq	$22, %rdi
	andq	$1, %rdi
	testq	$1, %rdi
	je	.LBB266_9
# BB#1:                                 # %if.then
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB266_3
# BB#2:                                 # %if.then.4
	movb	$0, -1(%rbp)
	jmp	.LBB266_10
.LBB266_3:                              # %if.else
	movq	-24(%rbp), %rax
	cmpq	selected_window, %rax
	jne	.LBB266_5
# BB#4:                                 # %if.then.5
	movb	$0, -1(%rbp)
	jmp	.LBB266_10
.LBB266_5:                              # %if.else.6
	movq	selected_window, %rdi
	callq	XWINDOW
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB266_8
# BB#6:                                 # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpq	globals+1448, %rax
	jne	.LBB266_8
# BB#7:                                 # %if.then.13
	movb	$0, -1(%rbp)
	jmp	.LBB266_10
.LBB266_8:                              # %if.else.14
	movb	$1, -1(%rbp)
	jmp	.LBB266_10
.LBB266_9:                              # %if.end
	movb	$0, -1(%rbp)
.LBB266_10:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end266:
	.size	window_frozen_p, .Lfunc_end266-window_frozen_p
	.cfi_endproc

	.align	16, 0x90
	.type	run_window_scroll_functions,@function
run_window_scroll_functions:            # @run_window_scroll_functions
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp820:
	.cfi_def_cfa_offset 16
.Ltmp821:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp822:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	set_marker_both
	xorl	%edi, %edi
	movq	globals+2656, %rcx
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB267_2
# BB#1:                                 # %if.then
	movl	$1033, %edi             # imm = 0x409
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	run_hook_with_args_2
	movq	-48(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
.LBB267_2:                              # %if.end
	movups	-32(%rbp), %xmm0
	movaps	%xmm0, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end267:
	.size	run_window_scroll_functions, .Lfunc_end267-run_window_scroll_functions
	.cfi_endproc

	.align	16, 0x90
	.type	try_cursor_movement,@function
try_cursor_movement:                    # @try_cursor_movement
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp823:
	.cfi_def_cfa_offset 16
.Ltmp824:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp825:
	.cfi_def_cfa_register %rbp
	subq	$512, %rsp              # imm = 0x200
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -48(%rbp)
	movl	$1, -52(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB268_289
# BB#1:                                 # %land.lhs.true
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB268_289
# BB#2:                                 # %land.lhs.true.1
	cmpl	$0, update_mode_lines
	jne	.LBB268_289
# BB#3:                                 # %land.lhs.true.2
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB268_289
# BB#4:                                 # %land.lhs.true.4
	movq	-48(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$7, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_289
# BB#5:                                 # %land.lhs.true.9
	xorl	%edi, %edi
	movq	globals+2168, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB268_289
# BB#6:                                 # %land.lhs.true.12
	movq	-24(%rbp), %rax
	cmpq	minibuf_window, %rax
	je	.LBB268_289
# BB#7:                                 # %land.lhs.true.14
	movq	-48(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB268_9
# BB#8:                                 # %lor.lhs.false
	callq	overlay_arrow_in_current_buffer_p
	testb	$1, %al
	jne	.LBB268_289
.LBB268_9:                              # %if.then
	movq	$0, -72(%rbp)
	movq	-40(%rbp), %rdi
	callq	default_line_pixel_height
	movl	%eax, -76(%rbp)
	movq	-40(%rbp), %rdi
	movl	268(%rdi), %eax
	movq	-48(%rbp), %rdi
	imull	368(%rdi), %eax
	cltd
	idivl	-76(%rbp)
	movl	%eax, -80(%rbp)
	cmpq	$0, globals+3264
	jle	.LBB268_14
# BB#10:                                # %if.then.23
	movl	$4, %eax
	movq	globals+3264, %rcx
	movl	-80(%rbp), %edx
	movl	%eax, -140(%rbp)        # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-140(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB268_12
# BB#11:                                # %cond.true
	movq	globals+3264, %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB268_13
.LBB268_12:                             # %cond.false
	movl	$4, %eax
	movl	-80(%rbp), %ecx
	movl	%eax, -156(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-156(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
.LBB268_13:                             # %cond.end
	movq	-152(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -56(%rbp)
	movl	-76(%rbp), %ecx
	imull	-56(%rbp), %ecx
	movl	%ecx, -56(%rbp)
	jmp	.LBB268_15
.LBB268_14:                             # %if.else
	movl	$0, -56(%rbp)
.LBB268_15:                             # %if.end
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rcx
	movq	80(%rcx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB268_16
	jmp	.LBB268_30
.LBB268_16:                             # %cond.true.33
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_45
# BB#17:                                # %land.lhs.true.37
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_45
# BB#18:                                # %land.lhs.true.42
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_45
# BB#19:                                # %land.lhs.true.50
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_45
# BB#20:                                # %land.lhs.true.56
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -172(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB268_21
	jmp	.LBB268_26
.LBB268_21:                             # %cond.true.60
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_28
# BB#22:                                # %land.lhs.true.65
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_28
# BB#23:                                # %land.lhs.true.71
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_28
# BB#24:                                # %land.lhs.true.80
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_28
# BB#25:                                # %land.lhs.true.86
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB268_27
	jmp	.LBB268_28
.LBB268_26:                             # %cond.false.93
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_27
	jmp	.LBB268_28
.LBB268_27:                             # %cond.true.94
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
	jmp	.LBB268_29
.LBB268_28:                             # %cond.false.99
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
.LBB268_29:                             # %cond.end.103
	movl	-188(%rbp), %eax        # 4-byte Reload
	movl	-172(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB268_31
	jmp	.LBB268_45
.LBB268_30:                             # %cond.false.107
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_31
	jmp	.LBB268_45
.LBB268_31:                             # %if.then.108
	movq	-40(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB268_33
# BB#32:                                # %cond.true.111
	movq	-40(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -192(%rbp)        # 4-byte Spill
	jmp	.LBB268_44
.LBB268_33:                             # %cond.false.113
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB268_36
# BB#34:                                # %land.lhs.true.115
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB268_36
# BB#35:                                # %cond.true.118
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB268_37
	jmp	.LBB268_42
.LBB268_36:                             # %cond.false.122
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_37
	jmp	.LBB268_42
.LBB268_37:                             # %cond.true.123
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB268_40
# BB#38:                                # %land.lhs.true.126
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB268_40
# BB#39:                                # %cond.true.130
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -196(%rbp)        # 4-byte Spill
	jmp	.LBB268_41
.LBB268_40:                             # %cond.false.134
	xorl	%eax, %eax
	movl	%eax, -196(%rbp)        # 4-byte Spill
	jmp	.LBB268_41
.LBB268_41:                             # %cond.end.135
	movl	-196(%rbp), %eax        # 4-byte Reload
	movl	%eax, -200(%rbp)        # 4-byte Spill
	jmp	.LBB268_43
.LBB268_42:                             # %cond.false.137
	movl	$5, %esi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -200(%rbp)        # 4-byte Spill
.LBB268_43:                             # %cond.end.141
	movl	-200(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -192(%rbp)        # 4-byte Spill
.LBB268_44:                             # %cond.end.144
	movl	-192(%rbp), %eax        # 4-byte Reload
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB268_45:                             # %if.end.147
	movq	-40(%rbp), %rax
	cmpl	$0, 400(%rax)
	jl	.LBB268_47
# BB#46:                                # %lor.lhs.false.150
	movq	-40(%rbp), %rax
	movl	400(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %ecx
	jl	.LBB268_48
.LBB268_47:                             # %if.then.155
	movl	$2, -52(%rbp)
	jmp	.LBB268_53
.LBB268_48:                             # %if.else.156
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movslq	400(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_50
# BB#49:                                # %if.then.164
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
.LBB268_50:                             # %if.end.165
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_52
# BB#51:                                # %if.then.170
	movl	$2, -52(%rbp)
.LBB268_52:                             # %if.end.171
	jmp	.LBB268_53
.LBB268_53:                             # %if.end.172
	cmpl	$1, -52(%rbp)
	jne	.LBB268_288
# BB#54:                                # %if.then.175
	movb	$0, -81(%rbp)
	movb	$0, -82(%rbp)
	movq	-40(%rbp), %rdi
	callq	window_text_bottom_y
	subl	-56(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	current_buffer, %rdi
	movq	736(%rdi), %rdi
	addq	$0, %rdi
	movq	-40(%rbp), %rcx
	cmpq	312(%rcx), %rdi
	jle	.LBB268_78
# BB#55:                                # %if.then.182
	jmp	.LBB268_56
.LBB268_56:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -201(%rbp)         # 1-byte Spill
	jge	.LBB268_58
# BB#57:                                # %land.rhs
                                        #   in Loop: Header=BB268_56 Depth=1
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-88(%rbp), %ecx
	setl	%dl
	movb	%dl, -201(%rbp)         # 1-byte Spill
.LBB268_58:                             # %land.end
                                        #   in Loop: Header=BB268_56 Depth=1
	movb	-201(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB268_59
	jmp	.LBB268_60
.LBB268_59:                             # %while.body
                                        #   in Loop: Header=BB268_56 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
	jmp	.LBB268_56
.LBB268_60:                             # %while.end
	jmp	.LBB268_61
.LBB268_61:                             # %while.cond.193
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movl	48(%rdx), %eax
	movq	-72(%rbp), %rdx
	addl	60(%rdx), %eax
	cmpl	-88(%rbp), %eax
	movb	%cl, -202(%rbp)         # 1-byte Spill
	jge	.LBB268_66
# BB#62:                                # %land.lhs.true.199
                                        #   in Loop: Header=BB268_61 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -202(%rbp)         # 1-byte Spill
	jne	.LBB268_66
# BB#63:                                # %land.lhs.true.206
                                        #   in Loop: Header=BB268_61 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	192(%rsi), %rsi
	movq	8(%rsi), %rsi
	movq	-40(%rbp), %rdi
	movq	192(%rdi), %rdi
	movslq	24(%rdi), %rdi
	shlq	$8, %rdi
	addq	%rdi, %rsi
	addq	$-256, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -202(%rbp)         # 1-byte Spill
	jae	.LBB268_66
# BB#64:                                # %land.lhs.true.216
                                        #   in Loop: Header=BB268_61 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	432(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -202(%rbp)         # 1-byte Spill
	jne	.LBB268_66
# BB#65:                                # %land.rhs.223
                                        #   in Loop: Header=BB268_61 Depth=1
	movq	-72(%rbp), %rdi
	callq	cursor_row_p
	xorb	$-1, %al
	movb	%al, -202(%rbp)         # 1-byte Spill
.LBB268_66:                             # %land.end.225
                                        #   in Loop: Header=BB268_61 Depth=1
	movb	-202(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB268_67
	jmp	.LBB268_68
.LBB268_67:                             # %while.body.226
                                        #   in Loop: Header=BB268_61 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
	jmp	.LBB268_61
.LBB268_68:                             # %while.end.228
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-88(%rbp), %ecx
	jg	.LBB268_76
# BB#69:                                # %lor.lhs.false.234
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB268_76
# BB#70:                                # %lor.lhs.false.241
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-88(%rbp), %ecx
	jne	.LBB268_77
# BB#71:                                # %land.lhs.true.247
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB268_77
# BB#72:                                # %land.lhs.true.254
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_77
# BB#73:                                # %land.lhs.true.259
	movq	-72(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB268_77
# BB#74:                                # %lor.lhs.false.262
	movq	-72(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB268_77
# BB#75:                                # %lor.lhs.false.266
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_77
.LBB268_76:                             # %if.then.272
	movb	$1, -81(%rbp)
.LBB268_77:                             # %if.end.273
	jmp	.LBB268_111
.LBB268_78:                             # %if.else.274
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-40(%rbp), %rcx
	cmpq	312(%rcx), %rax
	jge	.LBB268_109
# BB#79:                                # %if.then.280
	jmp	.LBB268_80
.LBB268_80:                             # %while.cond.281
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$20, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -203(%rbp)         # 1-byte Spill
	jne	.LBB268_92
# BB#81:                                # %land.lhs.true.287
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-72(%rbp), %rax
	movq	176(%rax), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jg	.LBB268_89
# BB#82:                                # %lor.lhs.false.294
                                        #   in Loop: Header=BB268_80 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	176(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -203(%rbp)         # 1-byte Spill
	jne	.LBB268_92
# BB#83:                                # %land.lhs.true.301
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-72(%rbp), %rax
	cmpl	$0, 120(%rax)
	jg	.LBB268_89
# BB#84:                                # %lor.lhs.false.305
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$23, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_89
# BB#85:                                # %lor.lhs.false.311
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, 96(%rax)
	jl	.LBB268_87
# BB#86:                                # %land.lhs.true.316
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, 104(%rax)
	jg	.LBB268_89
.LBB268_87:                             # %lor.lhs.false.321
                                        #   in Loop: Header=BB268_80 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	192(%rsi), %rsi
	cmpq	8(%rsi), %rdx
	movb	%cl, -203(%rbp)         # 1-byte Spill
	jbe	.LBB268_92
# BB#88:                                # %land.lhs.true.326
                                        #   in Loop: Header=BB268_80 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	-20(%rdx), %rdx
	shrq	$26, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -203(%rbp)         # 1-byte Spill
	je	.LBB268_92
.LBB268_89:                             # %land.rhs.333
                                        #   in Loop: Header=BB268_80 Depth=1
	movb	$1, %al
	movq	-72(%rbp), %rcx
	movl	48(%rcx), %edx
	cmpl	-60(%rbp), %edx
	movb	%al, -204(%rbp)         # 1-byte Spill
	jg	.LBB268_91
# BB#90:                                # %lor.rhs
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	sete	%dl
	movb	%dl, -204(%rbp)         # 1-byte Spill
.LBB268_91:                             # %lor.end
                                        #   in Loop: Header=BB268_80 Depth=1
	movb	-204(%rbp), %al         # 1-byte Reload
	movb	%al, -203(%rbp)         # 1-byte Spill
.LBB268_92:                             # %land.end.340
                                        #   in Loop: Header=BB268_80 Depth=1
	movb	-203(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB268_93
	jmp	.LBB268_94
.LBB268_93:                             # %while.body.341
                                        #   in Loop: Header=BB268_80 Depth=1
	movq	-72(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB268_80
.LBB268_94:                             # %while.end.343
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jb	.LBB268_96
# BB#95:                                # %lor.lhs.false.348
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_99
.LBB268_96:                             # %if.then.355
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_98
# BB#97:                                # %if.then.363
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
.LBB268_98:                             # %if.end.365
	jmp	.LBB268_99
.LBB268_99:                             # %if.end.366
	jmp	.LBB268_100
.LBB268_100:                            # %while.cond.367
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movl	48(%rdx), %eax
	movq	-72(%rbp), %rdx
	addl	60(%rdx), %eax
	cmpl	-88(%rbp), %eax
	movb	%cl, -205(%rbp)         # 1-byte Spill
	jge	.LBB268_103
# BB#101:                               # %land.lhs.true.373
                                        #   in Loop: Header=BB268_100 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -205(%rbp)         # 1-byte Spill
	jne	.LBB268_103
# BB#102:                               # %land.rhs.380
                                        #   in Loop: Header=BB268_100 Depth=1
	movq	-72(%rbp), %rdi
	callq	cursor_row_p
	xorb	$-1, %al
	movb	%al, -205(%rbp)         # 1-byte Spill
.LBB268_103:                            # %land.end.383
                                        #   in Loop: Header=BB268_100 Depth=1
	movb	-205(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB268_104
	jmp	.LBB268_105
.LBB268_104:                            # %while.body.384
                                        #   in Loop: Header=BB268_100 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
	jmp	.LBB268_100
.LBB268_105:                            # %while.end.386
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	cmpl	-60(%rbp), %ecx
	jge	.LBB268_108
# BB#106:                               # %land.lhs.true.390
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	je	.LBB268_108
# BB#107:                               # %if.then.395
	movb	$1, -81(%rbp)
.LBB268_108:                            # %if.end.396
	jmp	.LBB268_110
.LBB268_109:                            # %if.else.397
	movl	$0, -52(%rbp)
.LBB268_110:                            # %if.end.398
	jmp	.LBB268_111
.LBB268_111:                            # %if.end.399
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-72(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jl	.LBB268_113
# BB#112:                               # %lor.lhs.false.406
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jle	.LBB268_114
.LBB268_113:                            # %if.then.413
	movl	$2, -52(%rbp)
	movb	$1, -82(%rbp)
	jmp	.LBB268_127
.LBB268_114:                            # %if.else.414
	cmpl	$0, -52(%rbp)
	je	.LBB268_126
# BB#115:                               # %land.lhs.true.417
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_126
# BB#116:                               # %if.then.423
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_118
# BB#117:                               # %cond.true.432
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jmp	.LBB268_119
.LBB268_118:                            # %cond.false.436
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB268_119:                            # %cond.end.439
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, -96(%rbp)
.LBB268_120:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	cmpl	$0, 244(%rax)
	jle	.LBB268_125
# BB#121:                               # %for.body
                                        #   in Loop: Header=BB268_120 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-96(%rbp), %rax
	ja	.LBB268_123
# BB#122:                               # %if.then.445
	movl	$2, -52(%rbp)
	jmp	.LBB268_125
.LBB268_123:                            # %if.end.446
                                        #   in Loop: Header=BB268_120 Depth=1
	jmp	.LBB268_124
.LBB268_124:                            # %for.inc
                                        #   in Loop: Header=BB268_120 Depth=1
	movq	-72(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB268_120
.LBB268_125:                            # %for.end
	jmp	.LBB268_126
.LBB268_126:                            # %if.end.448
	jmp	.LBB268_127
.LBB268_127:                            # %if.end.449
	testb	$1, -82(%rbp)
	je	.LBB268_129
# BB#128:                               # %if.then.451
	jmp	.LBB268_287
.LBB268_129:                            # %if.else.452
	cmpl	$0, -52(%rbp)
	je	.LBB268_229
# BB#130:                               # %land.lhs.true.455
	movq	-72(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-72(%rbp), %rax
	cmpl	72(%rax), %ecx
	je	.LBB268_229
# BB#131:                               # %land.lhs.true.459
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -228(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB268_132
	jmp	.LBB268_146
.LBB268_132:                            # %cond.true.464
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_161
# BB#133:                               # %land.lhs.true.469
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_161
# BB#134:                               # %land.lhs.true.475
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_161
# BB#135:                               # %land.lhs.true.484
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_161
# BB#136:                               # %land.lhs.true.491
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -244(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB268_137
	jmp	.LBB268_142
.LBB268_137:                            # %cond.true.496
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_144
# BB#138:                               # %land.lhs.true.501
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_144
# BB#139:                               # %land.lhs.true.507
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_144
# BB#140:                               # %land.lhs.true.516
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_144
# BB#141:                               # %land.lhs.true.523
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB268_143
	jmp	.LBB268_144
.LBB268_142:                            # %cond.false.530
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_143
	jmp	.LBB268_144
.LBB268_143:                            # %cond.true.531
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
	jmp	.LBB268_145
.LBB268_144:                            # %cond.false.536
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
.LBB268_145:                            # %cond.end.540
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	-244(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB268_147
	jmp	.LBB268_161
.LBB268_146:                            # %cond.false.544
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_147
	jmp	.LBB268_161
.LBB268_147:                            # %cond.true.545
	movq	-40(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB268_149
# BB#148:                               # %cond.true.549
	movq	-40(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -264(%rbp)        # 4-byte Spill
	jmp	.LBB268_160
.LBB268_149:                            # %cond.false.551
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB268_152
# BB#150:                               # %land.lhs.true.554
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB268_152
# BB#151:                               # %cond.true.558
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB268_153
	jmp	.LBB268_158
.LBB268_152:                            # %cond.false.563
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_153
	jmp	.LBB268_158
.LBB268_153:                            # %cond.true.564
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB268_156
# BB#154:                               # %land.lhs.true.567
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB268_156
# BB#155:                               # %cond.true.571
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -268(%rbp)        # 4-byte Spill
	jmp	.LBB268_157
.LBB268_156:                            # %cond.false.575
	xorl	%eax, %eax
	movl	%eax, -268(%rbp)        # 4-byte Spill
	jmp	.LBB268_157
.LBB268_157:                            # %cond.end.576
	movl	-268(%rbp), %eax        # 4-byte Reload
	movl	%eax, -272(%rbp)        # 4-byte Spill
	jmp	.LBB268_159
.LBB268_158:                            # %cond.false.578
	movl	$5, %esi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -272(%rbp)        # 4-byte Spill
.LBB268_159:                            # %cond.end.582
	movl	-272(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -264(%rbp)        # 4-byte Spill
.LBB268_160:                            # %cond.end.585
	movl	-264(%rbp), %eax        # 4-byte Reload
	movl	%eax, -276(%rbp)        # 4-byte Spill
	jmp	.LBB268_162
.LBB268_161:                            # %cond.false.587
	xorl	%eax, %eax
	movl	%eax, -276(%rbp)        # 4-byte Spill
	jmp	.LBB268_162
.LBB268_162:                            # %cond.end.588
	movl	-276(%rbp), %eax        # 4-byte Reload
	movl	-228(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB268_213
# BB#163:                               # %lor.lhs.false.592
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-72(%rbp), %rax
	subl	76(%rax), %ecx
	movq	-40(%rbp), %rax
	movl	260(%rax), %edx
	movq	-40(%rbp), %rax
	movl	244(%rax), %esi
	movq	-40(%rbp), %rax
	addl	260(%rax), %esi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -280(%rbp)        # 4-byte Spill
	movl	%edx, -284(%rbp)        # 4-byte Spill
	movl	%esi, -288(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -292(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-292(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-288(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB268_165
# BB#164:                               # %land.lhs.true.612
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_167
.LBB268_165:                            # %lor.lhs.false.620
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB268_167
# BB#166:                               # %lor.lhs.false.626
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB268_168
.LBB268_167:                            # %cond.true.633
	xorl	%eax, %eax
	movl	%eax, -308(%rbp)        # 4-byte Spill
	jmp	.LBB268_169
.LBB268_168:                            # %cond.false.634
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -308(%rbp)        # 4-byte Spill
.LBB268_169:                            # %cond.end.637
	movl	-308(%rbp), %eax        # 4-byte Reload
	movl	-284(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -312(%rbp)        # 4-byte Spill
	jne	.LBB268_172
# BB#170:                               # %lor.lhs.false.646
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB268_173
# BB#171:                               # %land.lhs.true.652
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB268_173
.LBB268_172:                            # %cond.true.659
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_178
	jmp	.LBB268_182
.LBB268_173:                            # %cond.false.660
	movl	$901, %edi              # imm = 0x385
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-320(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB268_175
# BB#174:                               # %cond.true.664
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_178
	jmp	.LBB268_182
.LBB268_175:                            # %cond.false.672
	movl	$213, %edi
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-328(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB268_177
# BB#176:                               # %cond.true.677
	movb	$1, %al
	testb	$1, %al
	jne	.LBB268_178
	jmp	.LBB268_182
.LBB268_177:                            # %cond.false.678
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_178
	jmp	.LBB268_182
.LBB268_178:                            # %cond.true.679
	movq	-40(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB268_180
# BB#179:                               # %cond.true.682
	movq	-40(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -332(%rbp)        # 4-byte Spill
	jmp	.LBB268_181
.LBB268_180:                            # %cond.false.684
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -332(%rbp)        # 4-byte Spill
.LBB268_181:                            # %cond.end.687
	movl	-332(%rbp), %eax        # 4-byte Reload
	movl	%eax, -336(%rbp)        # 4-byte Spill
	jmp	.LBB268_183
.LBB268_182:                            # %cond.false.689
	xorl	%eax, %eax
	movl	%eax, -336(%rbp)        # 4-byte Spill
	jmp	.LBB268_183
.LBB268_183:                            # %cond.end.690
	movl	-336(%rbp), %eax        # 4-byte Reload
	movl	-312(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -340(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB268_184
	jmp	.LBB268_189
.LBB268_184:                            # %cond.true.696
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_211
# BB#185:                               # %land.lhs.true.701
	movq	-40(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB268_211
# BB#186:                               # %land.lhs.true.707
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_211
# BB#187:                               # %land.lhs.true.716
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-352(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_211
# BB#188:                               # %land.lhs.true.723
	movq	-40(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB268_190
	jmp	.LBB268_211
.LBB268_189:                            # %cond.false.730
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_190
	jmp	.LBB268_211
.LBB268_190:                            # %cond.true.731
	movq	-40(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB268_192
# BB#191:                               # %cond.true.734
	movq	-40(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -356(%rbp)        # 4-byte Spill
	jmp	.LBB268_210
.LBB268_192:                            # %cond.false.736
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB268_195
# BB#193:                               # %land.lhs.true.739
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB268_195
# BB#194:                               # %cond.true.743
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB268_196
	jmp	.LBB268_201
.LBB268_195:                            # %cond.false.753
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB268_196
	jmp	.LBB268_201
.LBB268_196:                            # %cond.true.754
	movq	-40(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB268_199
# BB#197:                               # %land.lhs.true.757
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB268_199
# BB#198:                               # %cond.true.761
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -360(%rbp)        # 4-byte Spill
	jmp	.LBB268_200
.LBB268_199:                            # %cond.false.770
	xorl	%eax, %eax
	movl	%eax, -360(%rbp)        # 4-byte Spill
	jmp	.LBB268_200
.LBB268_200:                            # %cond.end.771
	movl	-360(%rbp), %eax        # 4-byte Reload
	movl	%eax, -364(%rbp)        # 4-byte Spill
	jmp	.LBB268_209
.LBB268_201:                            # %cond.false.773
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	movb	%al, -377(%rbp)         # 1-byte Spill
	je	.LBB268_208
# BB#202:                               # %lor.lhs.false.777
	movq	-40(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-392(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -377(%rbp)         # 1-byte Spill
	je	.LBB268_208
# BB#203:                               # %lor.rhs.781
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -393(%rbp)         # 1-byte Spill
	jle	.LBB268_207
# BB#204:                               # %land.lhs.true.784
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-408(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -393(%rbp)         # 1-byte Spill
	je	.LBB268_207
# BB#205:                               # %land.lhs.true.788
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-416(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -393(%rbp)         # 1-byte Spill
	jne	.LBB268_207
# BB#206:                               # %land.rhs.793
	movq	-40(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-424(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -393(%rbp)         # 1-byte Spill
.LBB268_207:                            # %land.end.797
	movb	-393(%rbp), %al         # 1-byte Reload
	movb	%al, -377(%rbp)         # 1-byte Spill
.LBB268_208:                            # %lor.end.798
	movb	-377(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -364(%rbp)        # 4-byte Spill
.LBB268_209:                            # %cond.end.801
	movl	-364(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -356(%rbp)        # 4-byte Spill
.LBB268_210:                            # %cond.end.804
	movl	-356(%rbp), %eax        # 4-byte Reload
	movl	%eax, -428(%rbp)        # 4-byte Spill
	jmp	.LBB268_212
.LBB268_211:                            # %cond.false.806
	xorl	%eax, %eax
	movl	%eax, -428(%rbp)        # 4-byte Spill
	jmp	.LBB268_212
.LBB268_212:                            # %cond.end.807
	movl	-428(%rbp), %eax        # 4-byte Reload
	movl	-340(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	-280(%rbp), %eax        # 4-byte Reload
	cmpl	%ecx, %eax
	jle	.LBB268_229
.LBB268_213:                            # %land.lhs.true.812
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_229
# BB#214:                               # %land.lhs.true.818
	testb	$1, globals+3408
	je	.LBB268_229
# BB#215:                               # %if.then.821
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB268_221
# BB#216:                               # %land.lhs.true.828
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_221
# BB#217:                               # %land.lhs.true.834
	movq	-72(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB268_221
# BB#218:                               # %lor.lhs.false.839
	movq	-72(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB268_221
# BB#219:                               # %lor.lhs.false.844
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB268_221
# BB#220:                               # %if.then.851
	movl	$2, -52(%rbp)
	jmp	.LBB268_228
.LBB268_221:                            # %if.else.852
	movq	-72(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-40(%rbp), %rdi
	movl	%ecx, -432(%rbp)        # 4-byte Spill
	callq	window_box_height
	movl	-432(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jle	.LBB268_223
# BB#222:                               # %if.then.857
	movq	-32(%rbp), %rax
	movb	$1, (%rax)
	movl	$2, -52(%rbp)
	jmp	.LBB268_227
.LBB268_223:                            # %if.else.858
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	movq	-440(%rbp), %r8         # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	xorl	%esi, %esi
	movl	$1, %edx
	movq	-40(%rbp), %rdi
	movb	%al, -441(%rbp)         # 1-byte Spill
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB268_225
# BB#224:                               # %if.then.862
	movl	$2, -52(%rbp)
	jmp	.LBB268_226
.LBB268_225:                            # %if.else.863
	movl	$0, -52(%rbp)
.LBB268_226:                            # %if.end.864
	jmp	.LBB268_227
.LBB268_227:                            # %if.end.865
	jmp	.LBB268_228
.LBB268_228:                            # %if.end.866
	jmp	.LBB268_286
.LBB268_229:                            # %if.else.867
	testb	$1, -81(%rbp)
	je	.LBB268_231
# BB#230:                               # %if.then.869
	movl	$2, -52(%rbp)
	jmp	.LBB268_285
.LBB268_231:                            # %if.else.870
	cmpl	$0, -52(%rbp)
	je	.LBB268_275
# BB#232:                               # %land.lhs.true.873
	movq	-40(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-456(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB268_275
# BB#233:                               # %if.then.880
	movb	$0, -97(%rbp)
.LBB268_234:                            # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movb	$0, -98(%rbp)
	movb	$0, -99(%rbp)
	movq	-72(%rbp), %rax
	movq	176(%rax), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jg	.LBB268_238
# BB#235:                               # %land.lhs.true.887
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB268_238
# BB#236:                               # %land.lhs.true.894
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-72(%rbp), %rdi
	callq	cursor_row_p
	testb	$1, %al
	jne	.LBB268_237
	jmp	.LBB268_238
.LBB268_237:                            # %if.then.897
                                        #   in Loop: Header=BB268_234 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rcx, -464(%rbp)        # 8-byte Spill
	movq	-464(%rbp), %r8         # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	andb	$1, %al
	movzbl	%al, %r9d
	movb	-97(%rbp), %al
	andb	$1, %al
	movzbl	%al, %r10d
	orl	%r9d, %r10d
	cmpl	$0, %r10d
	setne	%al
	andb	$1, %al
	movb	%al, -97(%rbp)
.LBB268_238:                            # %if.end.904
                                        #   in Loop: Header=BB268_234 Depth=1
	testb	$1, -97(%rbp)
	je	.LBB268_256
# BB#239:                               # %if.then.906
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	movb	%al, %dl
	andb	$1, %dl
	movb	%dl, -98(%rbp)
	testb	$1, -98(%rbp)
	jne	.LBB268_252
# BB#240:                               # %land.lhs.true.918
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-40(%rbp), %rax
	cmpl	$0, 360(%rax)
	jl	.LBB268_252
# BB#241:                               # %land.lhs.true.922
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-40(%rbp), %rax
	movl	360(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rdx
	movslq	364(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movswl	34(%rax), %esi
	cmpl	%esi, %ecx
	jge	.LBB268_252
# BB#242:                               # %if.then.934
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rcx
	movslq	360(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-112(%rbp), %rax
	movq	192(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB268_243
	jmp	.LBB268_244
.LBB268_243:                            # %land.lhs.true.950
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	$1, %al
	movq	-120(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rcx
	movb	%al, -465(%rbp)         # 1-byte Spill
	je	.LBB268_251
.LBB268_244:                            # %lor.rhs.956
                                        #   in Loop: Header=BB268_234 Depth=1
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-480(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -481(%rbp)         # 1-byte Spill
	jne	.LBB268_250
# BB#245:                               # %land.rhs.961
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	$1, %al
	movq	-120(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rcx
	movb	%al, -482(%rbp)         # 1-byte Spill
	je	.LBB268_249
# BB#246:                               # %lor.rhs.967
                                        #   in Loop: Header=BB268_234 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-120(%rbp), %rdx
	cmpq	$0, (%rdx)
	movb	%cl, -483(%rbp)         # 1-byte Spill
	jne	.LBB268_248
# BB#247:                               # %land.rhs.971
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-128(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	sete	%dl
	movb	%dl, -483(%rbp)         # 1-byte Spill
.LBB268_248:                            # %land.end.977
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	-483(%rbp), %al         # 1-byte Reload
	movb	%al, -482(%rbp)         # 1-byte Spill
.LBB268_249:                            # %lor.end.978
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	-482(%rbp), %al         # 1-byte Reload
	movb	%al, -481(%rbp)         # 1-byte Spill
.LBB268_250:                            # %land.end.979
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	-481(%rbp), %al         # 1-byte Reload
	movb	%al, -465(%rbp)         # 1-byte Spill
.LBB268_251:                            # %lor.end.980
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	-465(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -99(%rbp)
.LBB268_252:                            # %if.end.982
                                        #   in Loop: Header=BB268_234 Depth=1
	testb	$1, -98(%rbp)
	jne	.LBB268_254
# BB#253:                               # %lor.lhs.false.985
                                        #   in Loop: Header=BB268_234 Depth=1
	testb	$1, -99(%rbp)
	je	.LBB268_255
.LBB268_254:                            # %if.then.988
	movl	$0, -52(%rbp)
	jmp	.LBB268_266
.LBB268_255:                            # %if.end.989
                                        #   in Loop: Header=BB268_234 Depth=1
	jmp	.LBB268_256
.LBB268_256:                            # %if.end.990
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-88(%rbp), %ecx
	jne	.LBB268_258
# BB#257:                               # %if.then.996
	jmp	.LBB268_266
.LBB268_258:                            # %if.end.997
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
# BB#259:                               # %do.cond
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-72(%rbp), %rax
	cmpl	$0, 244(%rax)
	jg	.LBB268_261
# BB#260:                               # %lor.lhs.false.1002
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_262
.LBB268_261:                            # %land.lhs.true.1008
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	$1, %al
	movq	-72(%rbp), %rcx
	movl	48(%rcx), %edx
	movq	-72(%rbp), %rcx
	addl	60(%rcx), %edx
	cmpl	-88(%rbp), %edx
	movb	%al, -484(%rbp)         # 1-byte Spill
	jle	.LBB268_265
.LBB268_262:                            # %lor.rhs.1014
                                        #   in Loop: Header=BB268_234 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	176(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -485(%rbp)         # 1-byte Spill
	jne	.LBB268_264
# BB#263:                               # %land.rhs.1021
                                        #   in Loop: Header=BB268_234 Depth=1
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-88(%rbp), %ecx
	setl	%dl
	movb	%dl, -485(%rbp)         # 1-byte Spill
.LBB268_264:                            # %land.end.1027
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	-485(%rbp), %al         # 1-byte Reload
	movb	%al, -484(%rbp)         # 1-byte Spill
.LBB268_265:                            # %lor.end.1028
                                        #   in Loop: Header=BB268_234 Depth=1
	movb	-484(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB268_234
.LBB268_266:                            # %do.end
	cmpl	$0, -52(%rbp)
	je	.LBB268_271
# BB#267:                               # %land.lhs.true.1031
	testb	$1, -97(%rbp)
	je	.LBB268_270
# BB#268:                               # %land.lhs.true.1034
	movq	-72(%rbp), %rax
	cmpl	$0, 244(%rax)
	jg	.LBB268_270
# BB#269:                               # %land.lhs.true.1038
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB268_271
.LBB268_270:                            # %if.then.1044
	movl	$2, -52(%rbp)
	jmp	.LBB268_274
.LBB268_271:                            # %if.else.1045
	testb	$1, -97(%rbp)
	je	.LBB268_273
# BB#272:                               # %if.then.1047
	movl	$0, -52(%rbp)
.LBB268_273:                            # %if.end.1048
	jmp	.LBB268_274
.LBB268_274:                            # %if.end.1049
	jmp	.LBB268_284
.LBB268_275:                            # %if.else.1050
	jmp	.LBB268_276
.LBB268_276:                            # %do.body.1051
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-40(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rcx, -496(%rbp)        # 8-byte Spill
	movq	-496(%rbp), %r8         # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	testb	$1, %al
	jne	.LBB268_277
	jmp	.LBB268_278
.LBB268_277:                            # %if.then.1054
	movl	$0, -52(%rbp)
	jmp	.LBB268_283
.LBB268_278:                            # %if.end.1055
                                        #   in Loop: Header=BB268_276 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
# BB#279:                               # %do.cond.1057
                                        #   in Loop: Header=BB268_276 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movl	48(%rdx), %eax
	movq	-72(%rbp), %rdx
	addl	60(%rdx), %eax
	cmpl	-88(%rbp), %eax
	movb	%cl, -497(%rbp)         # 1-byte Spill
	jge	.LBB268_282
# BB#280:                               # %land.lhs.true.1063
                                        #   in Loop: Header=BB268_276 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	176(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -497(%rbp)         # 1-byte Spill
	jne	.LBB268_282
# BB#281:                               # %land.rhs.1070
                                        #   in Loop: Header=BB268_276 Depth=1
	movq	-72(%rbp), %rdi
	callq	cursor_row_p
	movb	%al, -497(%rbp)         # 1-byte Spill
.LBB268_282:                            # %land.end.1073
                                        #   in Loop: Header=BB268_276 Depth=1
	movb	-497(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB268_276
.LBB268_283:                            # %do.end.1074
	jmp	.LBB268_284
.LBB268_284:                            # %if.end.1075
	jmp	.LBB268_285
.LBB268_285:                            # %if.end.1076
	jmp	.LBB268_286
.LBB268_286:                            # %if.end.1077
	jmp	.LBB268_287
.LBB268_287:                            # %if.end.1078
	jmp	.LBB268_288
.LBB268_288:                            # %if.end.1079
	jmp	.LBB268_289
.LBB268_289:                            # %if.end.1080
	movl	-52(%rbp), %eax
	addq	$512, %rsp              # imm = 0x200
	popq	%rbp
	retq
.Lfunc_end268:
	.size	try_cursor_movement, .Lfunc_end268-try_cursor_movement
	.cfi_endproc

	.align	16, 0x90
	.type	try_window_id,@function
try_window_id:                          # @try_window_id
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp826:
	.cfi_def_cfa_offset 16
.Ltmp827:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp828:
	.cfi_def_cfa_register %rbp
	subq	$5600, %rsp             # imm = 0x15E0
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	192(%rdi), %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rdi
	movq	200(%rdi), %rdi
	movq	%rdi, -40(%rbp)
	movq	$0, -4888(%rbp)
	movq	$0, -4896(%rbp)
	movl	$0, -4956(%rbp)
	movq	-16(%rbp), %rdi
	movq	88(%rdi), %rdi
	callq	marker_position
	movq	%rax, -4992(%rbp)
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -4984(%rbp)
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB269_2
# BB#1:                                 # %if.then
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_2:                              # %if.end
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB269_4
# BB#3:                                 # %lor.lhs.false
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$7, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_5
.LBB269_4:                              # %if.then.9
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_5:                              # %if.end.10
	movq	-16(%rbp), %rax
	movq	304(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	72(%rcx), %rax
	je	.LBB269_7
# BB#6:                                 # %if.then.11
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_7:                              # %if.end.12
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB269_9
# BB#8:                                 # %lor.lhs.false.17
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB269_10
.LBB269_9:                              # %if.then.21
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_10:                             # %if.end.22
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB269_18
# BB#11:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	je	.LBB269_13
# BB#12:                                # %lor.lhs.false.34
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB269_14
.LBB269_13:                             # %cond.true
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -5136(%rbp)       # 8-byte Spill
	jmp	.LBB269_15
.LBB269_14:                             # %cond.false
	callq	emacs_abort
.LBB269_15:                             # %cond.end
	movq	-5136(%rbp), %rax       # 8-byte Reload
	movb	8788(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB269_17
# BB#16:                                # %lor.lhs.false.45
	movq	-16(%rbp), %rax
	movl	256(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -5140(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-5140(%rbp), %ecx       # 4-byte Reload
	cmpl	256(%rax), %ecx
	je	.LBB269_18
.LBB269_17:                             # %if.then.51
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_18:                             # %if.end.52
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-4992(%rbp), %rax
	jge	.LBB269_20
# BB#19:                                # %if.then.55
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_20:                             # %if.end.56
	movq	-16(%rbp), %rax
	cmpq	$0, 296(%rax)
	jne	.LBB269_22
# BB#21:                                # %if.then.58
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_22:                             # %if.end.59
	movq	-16(%rbp), %rax
	cmpq	$0, 272(%rax)
	je	.LBB269_24
# BB#23:                                # %if.then.61
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_24:                             # %if.end.62
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB269_26
# BB#25:                                # %if.then.67
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_26:                             # %if.end.68
	xorl	%edi, %edi
	movq	globals+2168, %rax
	movq	%rax, -5152(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5152(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB269_28
# BB#27:                                # %if.then.71
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_28:                             # %if.end.72
	callq	overlay_arrows_changed_p
	testb	$1, %al
	jne	.LBB269_29
	jmp	.LBB269_30
.LBB269_29:                             # %if.then.74
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_30:                             # %if.end.75
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	224(%rax), %rax
	movq	%rax, -5160(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5160(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB269_32
# BB#31:                                # %if.then.79
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_32:                             # %if.end.80
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -5168(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5168(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB269_35
# BB#33:                                # %land.lhs.true.85
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	248(%rax), %rax
	movq	%rax, -5176(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5176(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB269_35
# BB#34:                                # %if.then.90
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_35:                             # %if.end.91
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	560(%rax), %rax
	movq	%rax, -5184(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5184(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB269_37
# BB#36:                                # %if.then.96
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_37:                             # %if.end.97
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	64(%rcx), %rax
	jg	.LBB269_39
# BB#38:                                # %lor.lhs.false.101
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	96(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	32(%rcx), %rax
	jle	.LBB269_44
.LBB269_39:                             # %if.then.107
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	88(%rcx), %rax
	jge	.LBB269_41
# BB#40:                                # %if.then.113
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	%rax, 88(%rcx)
.LBB269_41:                             # %if.end.119
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	subq	8(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	96(%rcx), %rax
	jge	.LBB269_43
# BB#42:                                # %if.then.127
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	subq	8(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	%rax, 96(%rcx)
.LBB269_43:                             # %if.end.135
	jmp	.LBB269_44
.LBB269_44:                             # %if.end.136
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	addq	$1, %rax
	movq	%rax, -5000(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	subq	96(%rcx), %rax
	movq	%rax, -5008(%rbp)
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	464(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_76
# BB#45:                                # %land.lhs.true.150
	movq	-5008(%rbp), %rax
	cmpq	-4992(%rbp), %rax
	jge	.LBB269_47
# BB#46:                                # %land.lhs.true.153
	movq	-4992(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	je	.LBB269_52
.LBB269_47:                             # %lor.lhs.false.156
	movq	-5008(%rbp), %rax
	movq	-4992(%rbp), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	jge	.LBB269_76
# BB#48:                                # %land.lhs.true.160
	movq	-4984(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB269_50
# BB#49:                                # %cond.true.165
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -5192(%rbp)       # 8-byte Spill
	jmp	.LBB269_51
.LBB269_50:                             # %cond.false.167
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5192(%rbp)       # 8-byte Spill
	jmp	.LBB269_51
.LBB269_51:                             # %cond.end.168
	movq	-5192(%rbp), %rax       # 8-byte Reload
	movq	-4984(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	cmpl	$10, %edx
	jne	.LBB269_76
.LBB269_52:                             # %if.then.178
	movq	-64(%rbp), %rax
	movq	192(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	456(%rcx), %rax
	movq	%rax, -5016(%rbp)
	movq	-64(%rbp), %rax
	movq	200(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -5032(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	-5016(%rbp), %rax
	movq	%rax, -5024(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	subq	-5032(%rbp), %rax
	movq	%rax, -5040(%rbp)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-64(%rbp), %rcx
	movq	192(%rcx), %rcx
	addq	-5024(%rbp), %rcx
	cmpq	%rcx, %rax
	jl	.LBB269_54
# BB#53:                                # %if.then.197
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_54:                             # %if.end.198
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_56
# BB#55:                                # %cond.true.205
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5200(%rbp)       # 8-byte Spill
	jmp	.LBB269_57
.LBB269_56:                             # %cond.false.208
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5200(%rbp)       # 8-byte Spill
.LBB269_57:                             # %cond.end.210
	movq	-5200(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5048(%rbp)
	movq	-4992(%rbp), %rax
	movq	-5048(%rbp), %rcx
	movq	176(%rcx), %rcx
	addq	-5024(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB269_75
# BB#58:                                # %land.lhs.true.217
	movq	-4984(%rbp), %rax
	movq	-5048(%rbp), %rcx
	movq	184(%rcx), %rcx
	addq	-5040(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB269_75
# BB#59:                                # %land.lhs.true.224
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-64(%rbp), %rcx
	movq	176(%rcx), %rcx
	addq	-5024(%rbp), %rcx
	cmpq	%rcx, %rax
	jl	.LBB269_61
# BB#60:                                # %land.lhs.true.232
	movq	-64(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-16(%rbp), %rdi
	movl	%ecx, -5204(%rbp)       # 4-byte Spill
	callq	window_text_bottom_y
	movl	-5204(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB269_75
.LBB269_61:                             # %if.then.237
	cmpq	$0, -5024(%rbp)
	jne	.LBB269_63
# BB#62:                                # %lor.lhs.false.239
	cmpq	$0, -5040(%rbp)
	je	.LBB269_72
.LBB269_63:                             # %if.then.241
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -5216(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB269_64
	jmp	.LBB269_70
.LBB269_64:                             # %cond.true.248
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5217(%rbp)        # 1-byte Spill
	jne	.LBB269_69
# BB#65:                                # %land.lhs.true.253
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5217(%rbp)        # 1-byte Spill
	jne	.LBB269_69
# BB#66:                                # %land.lhs.true.258
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5217(%rbp)        # 1-byte Spill
	je	.LBB269_69
# BB#67:                                # %land.lhs.true.266
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5232(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5232(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5217(%rbp)        # 1-byte Spill
	je	.LBB269_69
# BB#68:                                # %land.rhs
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -5217(%rbp)        # 1-byte Spill
.LBB269_69:                             # %land.end
	movb	-5217(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5236(%rbp)       # 4-byte Spill
	jmp	.LBB269_71
.LBB269_70:                             # %cond.false.276
	xorl	%eax, %eax
	movl	%eax, -5236(%rbp)       # 4-byte Spill
	jmp	.LBB269_71
.LBB269_71:                             # %cond.end.277
	movl	-5236(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-5216(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -5056(%rbp)
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdi
	movq	-5048(%rbp), %rdx
	movq	-32(%rbp), %r8
	movq	8(%r8), %r8
	subq	%r8, %rdx
	sarq	$8, %rdx
	movl	%edx, %eax
	movq	-5056(%rbp), %rdx
	movq	-32(%rbp), %r8
	movq	8(%r8), %r8
	subq	%r8, %rdx
	sarq	$8, %rdx
	movl	%edx, %ecx
	movq	-5024(%rbp), %rdx
	movq	-5040(%rbp), %r8
	movl	%eax, %esi
	movq	%rdx, -5248(%rbp)       # 8-byte Spill
	movl	%ecx, %edx
	movq	-5248(%rbp), %rcx       # 8-byte Reload
	callq	increment_matrix_positions
.LBB269_72:                             # %if.end.292
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r8d, %r8d
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movq	-5048(%rbp), %rsi
	movq	%rsi, -5256(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-5256(%rbp), %rdx       # 8-byte Reload
	callq	row_containing_pos
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB269_74
# BB#73:                                # %if.then.297
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	%rcx, -5264(%rbp)       # 8-byte Spill
	movq	-5264(%rbp), %r8        # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -5265(%rbp)        # 1-byte Spill
.LBB269_74:                             # %if.end.299
	movl	$1, -4(%rbp)
	jmp	.LBB269_317
.LBB269_75:                             # %if.end.300
	jmp	.LBB269_76
.LBB269_76:                             # %if.end.301
	movq	-5000(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jl	.LBB269_92
# BB#77:                                # %land.lhs.true.306
	movq	-32(%rbp), %rax
	movq	96(%rax), %rax
	movq	-64(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB269_79
# BB#78:                                # %lor.lhs.false.311
	movq	-5000(%rbp), %rax
	cmpq	-5008(%rbp), %rax
	jne	.LBB269_92
.LBB269_79:                             # %if.then.314
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-64(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jl	.LBB269_81
# BB#80:                                # %if.then.322
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_81:                             # %if.end.323
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_83
# BB#82:                                # %cond.true.331
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5280(%rbp)       # 8-byte Spill
	jmp	.LBB269_84
.LBB269_83:                             # %cond.false.334
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5280(%rbp)       # 8-byte Spill
.LBB269_84:                             # %cond.end.336
	movq	-5280(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5064(%rbp)
	movq	-4992(%rbp), %rax
	movq	-5064(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jne	.LBB269_91
# BB#85:                                # %land.lhs.true.343
	movq	-4984(%rbp), %rax
	movq	-5064(%rbp), %rcx
	cmpq	184(%rcx), %rax
	jne	.LBB269_91
# BB#86:                                # %land.lhs.true.349
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-64(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jl	.LBB269_88
# BB#87:                                # %land.lhs.true.356
	movq	-64(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-16(%rbp), %rdi
	movl	%ecx, -5284(%rbp)       # 4-byte Spill
	callq	window_text_bottom_y
	movl	-5284(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB269_91
.LBB269_88:                             # %if.then.363
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r8d, %r8d
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	-64(%rbp), %rsi
	subq	192(%rsi), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 456(%rsi)
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	32(%rdx), %rdx
	movq	-64(%rbp), %rsi
	subq	200(%rsi), %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 480(%rsi)
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movq	-5064(%rbp), %rsi
	movq	%rsi, -5296(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-5296(%rbp), %rdx       # 8-byte Reload
	callq	row_containing_pos
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB269_90
# BB#89:                                # %if.then.380
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	%rcx, -5304(%rbp)       # 8-byte Spill
	movq	-5304(%rbp), %r8        # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -5305(%rbp)        # 1-byte Spill
.LBB269_90:                             # %if.end.382
	movl	$2, -4(%rbp)
	jmp	.LBB269_317
.LBB269_91:                             # %if.end.383
	jmp	.LBB269_92
.LBB269_92:                             # %if.end.384
	movq	-4992(%rbp), %rax
	cmpq	-5000(%rbp), %rax
	jl	.LBB269_95
# BB#93:                                # %land.lhs.true.388
	movq	-4992(%rbp), %rax
	cmpq	-5008(%rbp), %rax
	jg	.LBB269_95
# BB#94:                                # %if.then.392
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_95:                             # %if.end.393
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_97
# BB#96:                                # %cond.true.401
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5320(%rbp)       # 8-byte Spill
	jmp	.LBB269_98
.LBB269_97:                             # %cond.false.404
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5320(%rbp)       # 8-byte Spill
.LBB269_98:                             # %cond.end.406
	movq	-5320(%rbp), %rax       # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-4992(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jne	.LBB269_100
# BB#99:                                # %land.lhs.true.413
	movq	-4984(%rbp), %rax
	movq	-64(%rbp), %rcx
	cmpq	184(%rcx), %rax
	je	.LBB269_101
.LBB269_100:                            # %if.then.419
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_101:                            # %if.end.420
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	464(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	176(%rax), %rax
	movq	-64(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB269_103
# BB#102:                               # %if.then.431
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_103:                            # %if.end.432
	movq	-16(%rbp), %rdi
	callq	find_last_unchanged_at_beg_row
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB269_119
# BB#104:                               # %if.then.435
	jmp	.LBB269_105
.LBB269_105:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB269_109
# BB#106:                               # %lor.lhs.false.438
                                        #   in Loop: Header=BB269_105 Depth=1
	movq	-48(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB269_109
# BB#107:                               # %lor.lhs.false.442
                                        #   in Loop: Header=BB269_105 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB269_109
# BB#108:                               # %lor.lhs.false.448
                                        #   in Loop: Header=BB269_105 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$26, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5321(%rbp)        # 1-byte Spill
	je	.LBB269_110
.LBB269_109:                            # %land.rhs.454
                                        #   in Loop: Header=BB269_105 Depth=1
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	cmpq	8(%rcx), %rax
	seta	%dl
	movb	%dl, -5321(%rbp)        # 1-byte Spill
.LBB269_110:                            # %land.end.459
                                        #   in Loop: Header=BB269_105 Depth=1
	movb	-5321(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB269_111
	jmp	.LBB269_112
.LBB269_111:                            # %while.body
                                        #   in Loop: Header=BB269_105 Depth=1
	movq	-48(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB269_105
.LBB269_112:                            # %while.end
	movq	-48(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB269_115
# BB#113:                               # %lor.lhs.false.465
	movq	-48(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB269_115
# BB#114:                               # %lor.lhs.false.470
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_116
.LBB269_115:                            # %if.then.477
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_116:                            # %if.end.478
	leaq	-4880(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	init_to_row_end
	testb	$1, %al
	jne	.LBB269_118
# BB#117:                               # %if.then.480
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_118:                            # %if.end.481
	movq	-4568(%rbp), %rax
	movq	%rax, -4928(%rbp)
	movq	-4560(%rbp), %rax
	movq	%rax, -4920(%rbp)
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	addq	$1, %rax
	movl	%eax, %edx
	movl	%edx, -2440(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-2440(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -2528(%rbp)
	movq	-48(%rbp), %rax
	movl	48(%rax), %edx
	movq	-48(%rbp), %rax
	addl	60(%rax), %edx
	movl	%edx, -2448(%rbp)
	jmp	.LBB269_120
.LBB269_119:                            # %if.else
	leaq	-4880(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4992(%rbp), %rdx
	movq	-4984(%rbp), %rcx
	callq	start_display
	movl	-2444(%rbp), %eax
	movl	%eax, -2440(%rbp)
	movq	-4568(%rbp), %rcx
	movq	%rcx, -4928(%rbp)
	movq	-4560(%rbp), %rcx
	movq	%rcx, -4920(%rbp)
.LBB269_120:                            # %if.end.499
	leaq	-4888(%rbp), %rsi
	leaq	-4896(%rbp), %rdx
	movq	-16(%rbp), %rdi
	callq	find_first_unchanged_at_end_row
	movq	%rax, -56(%rbp)
	movq	$0, -4904(%rbp)
	cmpq	$0, -56(%rbp)
	je	.LBB269_132
# BB#121:                               # %if.then.502
	jmp	.LBB269_122
.LBB269_122:                            # %while.cond.503
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	cmpl	$0, 244(%rdx)
	movb	%cl, -5322(%rbp)        # 1-byte Spill
	jle	.LBB269_125
# BB#123:                               # %land.lhs.true.506
                                        #   in Loop: Header=BB269_122 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5322(%rbp)        # 1-byte Spill
	je	.LBB269_125
# BB#124:                               # %land.rhs.513
                                        #   in Loop: Header=BB269_122 Depth=1
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-56(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-2556(%rbp), %ecx
	setl	%dl
	movb	%dl, -5322(%rbp)        # 1-byte Spill
.LBB269_125:                            # %land.end.519
                                        #   in Loop: Header=BB269_122 Depth=1
	movb	-5322(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB269_126
	jmp	.LBB269_127
.LBB269_126:                            # %while.body.521
                                        #   in Loop: Header=BB269_122 Depth=1
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
	jmp	.LBB269_122
.LBB269_127:                            # %while.end.523
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_129
# BB#128:                               # %lor.lhs.false.529
	movq	-56(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-56(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-2556(%rbp), %ecx
	jl	.LBB269_130
.LBB269_129:                            # %if.then.536
	movq	$0, -56(%rbp)
	jmp	.LBB269_131
.LBB269_130:                            # %if.else.537
	movq	-56(%rbp), %rax
	movq	176(%rax), %rax
	addq	-4888(%rbp), %rax
	movq	%rax, -4904(%rbp)
	movq	-56(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movl	%eax, %edx
	movl	%edx, -4956(%rbp)
.LBB269_131:                            # %if.end.547
	jmp	.LBB269_135
.LBB269_132:                            # %if.else.548
	cmpq	$0, -48(%rbp)
	jne	.LBB269_134
# BB#133:                               # %if.then.551
	movl	$0, -4(%rbp)
	jmp	.LBB269_317
.LBB269_134:                            # %if.end.552
	jmp	.LBB269_135
.LBB269_135:                            # %if.end.553
	movq	-16(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	$0, -4968(%rbp)
	movb	$0, overlay_arrow_seen
	movl	-2448(%rbp), %ecx
	cmpl	-2556(%rbp), %ecx
	jge	.LBB269_140
# BB#136:                               # %land.lhs.true.559
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB269_140
# BB#137:                               # %land.lhs.true.564
	cmpq	$0, -56(%rbp)
	je	.LBB269_139
# BB#138:                               # %lor.lhs.false.567
	movq	-4568(%rbp), %rax
	cmpq	-4904(%rbp), %rax
	jge	.LBB269_140
.LBB269_139:                            # %if.then.573
	movq	-2528(%rbp), %rax
	movabsq	$-17179869185, %rcx     # imm = 0xFFFFFFFBFFFFFFFF
	andq	236(%rax), %rcx
	movq	%rcx, 236(%rax)
.LBB269_140:                            # %if.end.577
	jmp	.LBB269_141
.LBB269_141:                            # %while.cond.578
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-2448(%rbp), %eax
	cmpl	-2556(%rbp), %eax
	movb	%cl, -5323(%rbp)        # 1-byte Spill
	jge	.LBB269_146
# BB#142:                               # %land.lhs.true.583
                                        #   in Loop: Header=BB269_141 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	208(%rdx), %rdx
	shrq	$6, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5323(%rbp)        # 1-byte Spill
	jne	.LBB269_146
# BB#143:                               # %land.rhs.589
                                        #   in Loop: Header=BB269_141 Depth=1
	movb	$1, %al
	cmpq	$0, -56(%rbp)
	movb	%al, -5324(%rbp)        # 1-byte Spill
	je	.LBB269_145
# BB#144:                               # %lor.rhs
                                        #   in Loop: Header=BB269_141 Depth=1
	movq	-4568(%rbp), %rax
	cmpq	-4904(%rbp), %rax
	setl	%cl
	movb	%cl, -5324(%rbp)        # 1-byte Spill
.LBB269_145:                            # %lor.end
                                        #   in Loop: Header=BB269_141 Depth=1
	movb	-5324(%rbp), %al        # 1-byte Reload
	movb	%al, -5323(%rbp)        # 1-byte Spill
.LBB269_146:                            # %land.end.597
                                        #   in Loop: Header=BB269_141 Depth=1
	movb	-5323(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB269_147
	jmp	.LBB269_150
.LBB269_147:                            # %while.body.599
                                        #   in Loop: Header=BB269_141 Depth=1
	leaq	-4880(%rbp), %rdi
	callq	display_line
	testb	$1, %al
	jne	.LBB269_148
	jmp	.LBB269_149
.LBB269_148:                            # %if.then.601
                                        #   in Loop: Header=BB269_141 Depth=1
	movq	-2528(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -4968(%rbp)
.LBB269_149:                            # %if.end.604
                                        #   in Loop: Header=BB269_141 Depth=1
	jmp	.LBB269_141
.LBB269_150:                            # %while.end.605
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_152
# BB#151:                               # %if.then.611
	movl	$-1, -4(%rbp)
	jmp	.LBB269_317
.LBB269_152:                            # %if.end.612
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$13, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB269_154
# BB#153:                               # %if.then.618
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$-1, -4(%rbp)
	jmp	.LBB269_317
.LBB269_154:                            # %if.end.620
	cmpq	$0, -56(%rbp)
	je	.LBB269_160
# BB#155:                               # %land.lhs.true.622
	movl	-2448(%rbp), %eax
	cmpl	-2556(%rbp), %eax
	jge	.LBB269_160
# BB#156:                               # %if.then.627
	movslq	-2440(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	%rdx, %rcx
	sarq	$8, %rcx
	subq	%rcx, %rax
	movl	%eax, %esi
	movl	%esi, -4908(%rbp)
	movl	-2448(%rbp), %esi
	movq	-56(%rbp), %rax
	subl	48(%rax), %esi
	movl	%esi, -4912(%rbp)
	movq	-56(%rbp), %rax
	movl	48(%rax), %esi
	movl	%esi, -4948(%rbp)
	movl	-4948(%rbp), %esi
	addl	-4912(%rbp), %esi
	movl	%esi, -4952(%rbp)
	movl	-2556(%rbp), %esi
	movl	-4948(%rbp), %edi
	cmpl	-4952(%rbp), %edi
	movl	%esi, -5328(%rbp)       # 4-byte Spill
	jle	.LBB269_158
# BB#157:                               # %cond.true.649
	movl	-4948(%rbp), %eax
	movl	%eax, -5332(%rbp)       # 4-byte Spill
	jmp	.LBB269_159
.LBB269_158:                            # %cond.false.651
	movl	-4952(%rbp), %eax
	movl	%eax, -5332(%rbp)       # 4-byte Spill
.LBB269_159:                            # %cond.end.653
	movl	-5332(%rbp), %eax       # 4-byte Reload
	movl	-5328(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -4936(%rbp)
	jmp	.LBB269_161
.LBB269_160:                            # %if.else.657
	movl	$0, -4936(%rbp)
	movl	$0, -4952(%rbp)
	movl	$0, -4948(%rbp)
	movl	$0, -4912(%rbp)
	movl	$0, -4908(%rbp)
	movq	$0, -4896(%rbp)
	movq	$0, -4888(%rbp)
	movq	$0, -56(%rbp)
.LBB269_161:                            # %if.end.661
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB269_178
# BB#162:                               # %if.then.666
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-4928(%rbp), %rax
	jge	.LBB269_170
# BB#163:                               # %land.lhs.true.672
	cmpq	$0, -48(%rbp)
	je	.LBB269_170
# BB#164:                               # %if.then.674
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	movq	%rdi, -5344(%rbp)       # 8-byte Spill
	movq	%rax, -5352(%rbp)       # 8-byte Spill
	je	.LBB269_166
# BB#165:                               # %cond.true.685
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5360(%rbp)       # 8-byte Spill
	jmp	.LBB269_167
.LBB269_166:                            # %cond.false.689
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -5360(%rbp)       # 8-byte Spill
.LBB269_167:                            # %cond.end.692
	movq	-5360(%rbp), %rax       # 8-byte Reload
	xorl	%r8d, %r8d
	movq	-48(%rbp), %rcx
	addq	$256, %rcx              # imm = 0x100
	movq	-5344(%rbp), %rdi       # 8-byte Reload
	movq	-5352(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	callq	row_containing_pos
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB269_169
# BB#168:                               # %if.then.697
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rcx, -5368(%rbp)       # 8-byte Spill
	movq	-5368(%rbp), %r8        # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -5369(%rbp)        # 1-byte Spill
.LBB269_169:                            # %if.end.700
	jmp	.LBB269_175
.LBB269_170:                            # %if.else.701
	cmpq	$0, -56(%rbp)
	je	.LBB269_174
# BB#171:                               # %if.then.703
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r8d, %r8d
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	subq	-4888(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	%rsi, -5384(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-5384(%rbp), %rdx       # 8-byte Reload
	callq	row_containing_pos
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB269_173
# BB#172:                               # %if.then.709
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	192(%rax), %rdx
	movq	-4888(%rbp), %rcx
	movq	-4896(%rbp), %r8
	movl	-4912(%rbp), %r9d
	movl	-4908(%rbp), %r10d
	movl	%r10d, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -5385(%rbp)        # 1-byte Spill
.LBB269_173:                            # %if.end.712
	jmp	.LBB269_174
.LBB269_174:                            # %if.end.713
	jmp	.LBB269_175
.LBB269_175:                            # %if.end.714
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB269_177
# BB#176:                               # %if.then.719
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$-1, -4(%rbp)
	jmp	.LBB269_317
.LBB269_177:                            # %if.end.721
	jmp	.LBB269_178
.LBB269_178:                            # %if.end.722
	movq	-16(%rbp), %rdi
	callq	default_line_pixel_height
	movl	$4, %ecx
	movl	%eax, -5076(%rbp)
	movq	-16(%rbp), %rdi
	movl	268(%rdi), %eax
	movq	-4864(%rbp), %rdi
	imull	368(%rdi), %eax
	cltd
	idivl	-5076(%rbp)
	movl	%eax, -5080(%rbp)
	movq	globals+3264, %rdi
	movl	-5080(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%eax, %rsi
	cmpq	%rsi, %rdi
	jge	.LBB269_180
# BB#179:                               # %cond.true.730
	movq	globals+3264, %rax
	movq	%rax, -5400(%rbp)       # 8-byte Spill
	jmp	.LBB269_181
.LBB269_180:                            # %cond.false.731
	movl	$4, %eax
	movl	-5080(%rbp), %ecx
	movl	%eax, -5404(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-5404(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -5400(%rbp)       # 8-byte Spill
.LBB269_181:                            # %cond.end.734
	movq	-5400(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	cmpq	%rax, %rdx
	jle	.LBB269_183
# BB#182:                               # %cond.true.738
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -5416(%rbp)       # 8-byte Spill
	jmp	.LBB269_187
.LBB269_183:                            # %cond.false.739
	movl	$4, %eax
	movq	globals+3264, %rcx
	movl	-5080(%rbp), %edx
	movl	%eax, -5420(%rbp)       # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-5420(%rbp), %esi       # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB269_185
# BB#184:                               # %cond.true.744
	movq	globals+3264, %rax
	movq	%rax, -5432(%rbp)       # 8-byte Spill
	jmp	.LBB269_186
.LBB269_185:                            # %cond.false.745
	movl	$4, %eax
	movl	-5080(%rbp), %ecx
	movl	%eax, -5436(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-5436(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -5432(%rbp)       # 8-byte Spill
.LBB269_186:                            # %cond.end.748
	movq	-5432(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5416(%rbp)       # 8-byte Spill
.LBB269_187:                            # %cond.end.750
	movq	-5416(%rbp), %rax       # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -5068(%rbp)
	movl	-5076(%rbp), %ecx
	imull	-5068(%rbp), %ecx
	movl	%ecx, -5068(%rbp)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdx
	movslq	364(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5072(%rbp)
	movq	-16(%rbp), %rax
	movl	356(%rax), %ecx
	cmpl	-5068(%rbp), %ecx
	jge	.LBB269_189
# BB#188:                               # %land.lhs.true.765
	movq	-4992(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jg	.LBB269_193
.LBB269_189:                            # %lor.lhs.false.770
	movq	-16(%rbp), %rax
	movl	356(%rax), %ecx
	testb	$1, globals+3408
	movl	%ecx, -5440(%rbp)       # 4-byte Spill
	je	.LBB269_191
# BB#190:                               # %cond.true.775
	movl	-5072(%rbp), %eax
	addl	-5068(%rbp), %eax
	movl	%eax, -5444(%rbp)       # 4-byte Spill
	jmp	.LBB269_192
.LBB269_191:                            # %cond.false.777
	movl	$1, %eax
	movl	%eax, -5444(%rbp)       # 4-byte Spill
	jmp	.LBB269_192
.LBB269_192:                            # %cond.end.778
	movl	-5444(%rbp), %eax       # 4-byte Reload
	movl	-5440(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	cmpl	-2556(%rbp), %ecx
	jle	.LBB269_194
.LBB269_193:                            # %if.then.784
	movq	-16(%rbp), %rax
	movl	$-1, 364(%rax)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$-1, -4(%rbp)
	jmp	.LBB269_317
.LBB269_194:                            # %if.end.788
	cmpl	$0, -4912(%rbp)
	je	.LBB269_234
# BB#195:                               # %land.lhs.true.790
	cmpl	$0, -4936(%rbp)
	je	.LBB269_234
# BB#196:                               # %if.then.793
	movq	-24(%rbp), %rdi
	callq	update_begin
	movq	-24(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB269_198
# BB#197:                               # %if.then.801
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	80(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	leaq	-4952(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rdi
	movl	%ecx, %esi
	movl	%ecx, %edx
	callq	*%rax
	jmp	.LBB269_233
.LBB269_198:                            # %if.else.809
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movl	%eax, %edx
	movl	%edx, -5084(%rbp)
	movq	-16(%rbp), %rax
	movl	252(%rax), %edx
	addl	-5084(%rbp), %edx
	movl	%edx, -5088(%rbp)
	movq	-16(%rbp), %rax
	movl	252(%rax), %edx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%edx, -5448(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB269_199
	jmp	.LBB269_214
.LBB269_199:                            # %cond.true.823
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5449(%rbp)        # 1-byte Spill
	jne	.LBB269_213
# BB#200:                               # %land.lhs.true.828
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5449(%rbp)        # 1-byte Spill
	jne	.LBB269_213
# BB#201:                               # %land.lhs.true.834
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5449(%rbp)        # 1-byte Spill
	je	.LBB269_213
# BB#202:                               # %land.lhs.true.843
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5464(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5464(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5449(%rbp)        # 1-byte Spill
	je	.LBB269_213
# BB#203:                               # %land.rhs.849
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5468(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB269_204
	jmp	.LBB269_209
.LBB269_204:                            # %cond.true.854
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB269_211
# BB#205:                               # %land.lhs.true.859
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB269_211
# BB#206:                               # %land.lhs.true.865
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_211
# BB#207:                               # %land.lhs.true.874
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5480(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5480(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB269_211
# BB#208:                               # %land.lhs.true.881
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB269_210
	jmp	.LBB269_211
.LBB269_209:                            # %cond.false.888
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB269_210
	jmp	.LBB269_211
.LBB269_210:                            # %cond.true.889
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5484(%rbp)       # 4-byte Spill
	jmp	.LBB269_212
.LBB269_211:                            # %cond.false.894
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5484(%rbp)       # 4-byte Spill
.LBB269_212:                            # %cond.end.898
	movl	-5484(%rbp), %eax       # 4-byte Reload
	movl	-5468(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -5449(%rbp)        # 1-byte Spill
.LBB269_213:                            # %land.end.902
	movb	-5449(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5488(%rbp)       # 4-byte Spill
	jmp	.LBB269_215
.LBB269_214:                            # %cond.false.904
	xorl	%eax, %eax
	movl	%eax, -5488(%rbp)       # 4-byte Spill
	jmp	.LBB269_215
.LBB269_215:                            # %cond.end.905
	movl	-5488(%rbp), %eax       # 4-byte Reload
	movl	-5448(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	movq	-16(%rbp), %rdi
	movl	%ecx, -5492(%rbp)       # 4-byte Spill
	callq	window_internal_height
	movl	-5492(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -5092(%rbp)
	cmpl	$0, -4908(%rbp)
	jle	.LBB269_223
# BB#216:                               # %if.then.912
	movq	-24(%rbp), %rdi
	movl	-5092(%rbp), %esi
	callq	set_terminal_window
	movq	-24(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %esi
	cmpl	$1, %esi
	je	.LBB269_218
# BB#217:                               # %lor.lhs.false.920
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB269_219
.LBB269_218:                            # %cond.true.928
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -5504(%rbp)       # 8-byte Spill
	jmp	.LBB269_220
.LBB269_219:                            # %cond.false.932
	callq	emacs_abort
.LBB269_220:                            # %cond.end.933
	movq	-5504(%rbp), %rax       # 8-byte Reload
	movb	8788(%rax), %cl
	shrb	$6, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB269_222
# BB#221:                               # %if.then.939
	xorl	%eax, %eax
	movq	-24(%rbp), %rdi
	movl	-5092(%rbp), %ecx
	subl	-4908(%rbp), %ecx
	subl	-4908(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edx
	callq	ins_del_lines
.LBB269_222:                            # %if.end.942
	movq	-24(%rbp), %rdi
	movl	-5088(%rbp), %esi
	movl	-4908(%rbp), %edx
	callq	ins_del_lines
	jmp	.LBB269_232
.LBB269_223:                            # %if.else.943
	cmpl	$0, -4908(%rbp)
	jge	.LBB269_231
# BB#224:                               # %if.then.946
	movq	-24(%rbp), %rdi
	movl	-5092(%rbp), %esi
	callq	set_terminal_window
	movq	-24(%rbp), %rdi
	movl	-5088(%rbp), %esi
	addl	-4908(%rbp), %esi
	movl	-4908(%rbp), %edx
	callq	ins_del_lines
	movq	-24(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %edx
	cmpl	$1, %edx
	je	.LBB269_226
# BB#225:                               # %lor.lhs.false.955
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB269_227
.LBB269_226:                            # %cond.true.963
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	88(%rax), %rax
	movq	%rax, -5512(%rbp)       # 8-byte Spill
	jmp	.LBB269_228
.LBB269_227:                            # %cond.false.967
	callq	emacs_abort
.LBB269_228:                            # %cond.end.968
	movq	-5512(%rbp), %rax       # 8-byte Reload
	movb	8788(%rax), %cl
	shrb	$6, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB269_230
# BB#229:                               # %if.then.975
	xorl	%eax, %eax
	movq	-24(%rbp), %rdi
	movl	-5092(%rbp), %ecx
	addl	-4908(%rbp), %ecx
	subl	-4908(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edx
	callq	ins_del_lines
.LBB269_230:                            # %if.end.978
	jmp	.LBB269_231
.LBB269_231:                            # %if.end.979
	jmp	.LBB269_232
.LBB269_232:                            # %if.end.980
	xorl	%esi, %esi
	movq	-24(%rbp), %rdi
	callq	set_terminal_window
.LBB269_233:                            # %if.end.981
	movq	-24(%rbp), %rdi
	callq	update_end
.LBB269_234:                            # %if.end.982
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -5520(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB269_235
	jmp	.LBB269_241
.LBB269_235:                            # %cond.true.990
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5521(%rbp)        # 1-byte Spill
	jne	.LBB269_240
# BB#236:                               # %land.lhs.true.995
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5521(%rbp)        # 1-byte Spill
	jne	.LBB269_240
# BB#237:                               # %land.lhs.true.1001
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5521(%rbp)        # 1-byte Spill
	je	.LBB269_240
# BB#238:                               # %land.lhs.true.1010
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5536(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5536(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5521(%rbp)        # 1-byte Spill
	je	.LBB269_240
# BB#239:                               # %land.rhs.1017
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -5521(%rbp)        # 1-byte Spill
.LBB269_240:                            # %land.end.1024
	movb	-5521(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5540(%rbp)       # 4-byte Spill
	jmp	.LBB269_242
.LBB269_241:                            # %cond.false.1026
	xorl	%eax, %eax
	movl	%eax, -5540(%rbp)       # 4-byte Spill
	jmp	.LBB269_242
.LBB269_242:                            # %cond.end.1027
	movl	-5540(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-5520(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	%rdi, %rdx
	sarq	$8, %rdx
	movl	%edx, %eax
	movl	%eax, -76(%rbp)
	cmpl	$0, -4908(%rbp)
	jge	.LBB269_244
# BB#243:                               # %if.then.1042
	movq	-32(%rbp), %rdi
	movl	-4956(%rbp), %eax
	addl	-4908(%rbp), %eax
	movl	-76(%rbp), %edx
	movl	-4908(%rbp), %ecx
	movl	%eax, %esi
	callq	rotate_matrix
	movq	-32(%rbp), %rdi
	movl	-76(%rbp), %eax
	addl	-4908(%rbp), %eax
	movl	-76(%rbp), %edx
	movl	%eax, %esi
	callq	clear_glyph_matrix_rows
	jmp	.LBB269_247
.LBB269_244:                            # %if.else.1045
	cmpl	$0, -4908(%rbp)
	jle	.LBB269_246
# BB#245:                               # %if.then.1048
	movq	-32(%rbp), %rdi
	movl	-4956(%rbp), %esi
	movl	-76(%rbp), %edx
	movl	-4908(%rbp), %ecx
	callq	rotate_matrix
	movq	-32(%rbp), %rdi
	movl	-4956(%rbp), %esi
	movl	-4956(%rbp), %ecx
	addl	-4908(%rbp), %ecx
	movl	%ecx, %edx
	callq	clear_glyph_matrix_rows
.LBB269_246:                            # %if.end.1050
	jmp	.LBB269_247
.LBB269_247:                            # %if.end.1051
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB269_249
# BB#248:                               # %if.then.1059
	movq	-16(%rbp), %rdi
	callq	sync_frame_with_window_matrix_rows
.LBB269_249:                            # %if.end.1060
	cmpq	$0, -4888(%rbp)
	jne	.LBB269_251
# BB#250:                               # %lor.lhs.false.1062
	cmpq	$0, -4896(%rbp)
	je	.LBB269_252
.LBB269_251:                            # %if.then.1064
	movq	-32(%rbp), %rdi
	movl	-4956(%rbp), %eax
	addl	-4908(%rbp), %eax
	movl	-76(%rbp), %edx
	movq	-4888(%rbp), %rcx
	movq	-4896(%rbp), %r8
	movl	%eax, %esi
	callq	increment_matrix_positions
.LBB269_252:                            # %if.end.1066
	cmpl	$0, -4912(%rbp)
	je	.LBB269_254
# BB#253:                               # %if.then.1068
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movl	-4956(%rbp), %eax
	addl	-4908(%rbp), %eax
	movl	-76(%rbp), %ecx
	movl	-4912(%rbp), %r8d
	movl	%eax, %edx
	callq	shift_glyph_matrix
.LBB269_254:                            # %if.end.1070
	cmpq	$0, -56(%rbp)
	je	.LBB269_259
# BB#255:                               # %if.then.1072
	movl	-4908(%rbp), %eax
	movq	-56(%rbp), %rcx
	movslq	%eax, %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movl	48(%rcx), %eax
	cmpl	-2556(%rbp), %eax
	jge	.LBB269_257
# BB#256:                               # %lor.lhs.false.1079
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB269_258
.LBB269_257:                            # %if.then.1085
	movq	$0, -56(%rbp)
.LBB269_258:                            # %if.end.1086
	jmp	.LBB269_259
.LBB269_259:                            # %if.end.1087
	movq	$0, -4976(%rbp)
	cmpl	$0, -4912(%rbp)
	jge	.LBB269_271
# BB#260:                               # %if.then.1090
	movq	-16(%rbp), %rax
	movl	464(%rax), %ecx
	addl	-4908(%rbp), %ecx
	movl	%ecx, -5096(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-5096(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movq	%rax, -5104(%rbp)
	movq	-5104(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-5104(%rbp), %rax
	addl	60(%rax), %ecx
	subl	-4912(%rbp), %ecx
	cmpl	-2556(%rbp), %ecx
	jl	.LBB269_262
# BB#261:                               # %if.then.1103
	leaq	-4880(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-5104(%rbp), %rdx
	callq	init_to_row_start
	movl	-5096(%rbp), %eax
	movl	%eax, -2440(%rbp)
	movq	-5104(%rbp), %rdx
	movl	48(%rdx), %eax
	movl	%eax, -2448(%rbp)
	jmp	.LBB269_263
.LBB269_262:                            # %if.else.1107
	leaq	-4880(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-5104(%rbp), %rdx
	callq	init_to_row_end
	movl	-5096(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -2440(%rbp)
	movq	-5104(%rbp), %rdx
	movl	48(%rdx), %ecx
	movq	-5104(%rbp), %rdx
	addl	60(%rdx), %ecx
	movl	%ecx, -2448(%rbp)
	movq	-5104(%rbp), %rdx
	addq	$256, %rdx              # imm = 0x100
	movq	%rdx, -5104(%rbp)
	movb	%al, -5541(%rbp)        # 1-byte Spill
.LBB269_263:                            # %if.end.1116
	movq	-5104(%rbp), %rax
	movl	244(%rax), %ecx
	movl	%ecx, -2472(%rbp)
	movl	$0, -2476(%rbp)
	movl	$0, -2436(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-2440(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movq	%rax, -2528(%rbp)
.LBB269_264:                            # %while.cond.1124
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-2448(%rbp), %eax
	cmpl	-2556(%rbp), %eax
	movb	%cl, -5542(%rbp)        # 1-byte Spill
	jge	.LBB269_266
# BB#265:                               # %land.rhs.1129
                                        #   in Loop: Header=BB269_264 Depth=1
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	%cl, -5542(%rbp)        # 1-byte Spill
.LBB269_266:                            # %land.end.1135
                                        #   in Loop: Header=BB269_264 Depth=1
	movb	-5542(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB269_267
	jmp	.LBB269_270
.LBB269_267:                            # %while.body.1137
                                        #   in Loop: Header=BB269_264 Depth=1
	leaq	-4880(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movslq	-2440(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
	callq	display_line
	testb	$1, %al
	jne	.LBB269_268
	jmp	.LBB269_269
.LBB269_268:                            # %if.then.1146
                                        #   in Loop: Header=BB269_264 Depth=1
	movq	-2528(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -4976(%rbp)
.LBB269_269:                            # %if.end.1149
                                        #   in Loop: Header=BB269_264 Depth=1
	jmp	.LBB269_264
.LBB269_270:                            # %while.end.1150
	jmp	.LBB269_271
.LBB269_271:                            # %if.end.1151
	cmpq	$0, -56(%rbp)
	je	.LBB269_274
# BB#272:                               # %land.lhs.true.1153
	cmpq	$0, -4976(%rbp)
	jne	.LBB269_274
# BB#273:                               # %if.then.1155
	leaq	-4880(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	192(%rax), %rdi
	movq	-56(%rbp), %rdx
	callq	find_last_row_displaying_text
	movl	$1, %edx
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB269_316
.LBB269_274:                            # %if.else.1158
	cmpq	$0, -4976(%rbp)
	je	.LBB269_276
# BB#275:                               # %if.then.1160
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movq	-4976(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB269_315
.LBB269_276:                            # %if.else.1161
	cmpq	$0, -4968(%rbp)
	je	.LBB269_278
# BB#277:                               # %if.then.1163
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movq	-4968(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB269_314
.LBB269_278:                            # %if.else.1164
	cmpq	$0, -56(%rbp)
	jne	.LBB269_312
# BB#279:                               # %land.lhs.true.1167
	cmpq	$0, -4968(%rbp)
	jne	.LBB269_312
# BB#280:                               # %land.lhs.true.1170
	cmpq	$0, -4976(%rbp)
	jne	.LBB269_312
# BB#281:                               # %if.then.1173
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB269_282
	jmp	.LBB269_297
.LBB269_282:                            # %cond.true.1178
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5543(%rbp)        # 1-byte Spill
	jne	.LBB269_296
# BB#283:                               # %land.lhs.true.1183
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5543(%rbp)        # 1-byte Spill
	jne	.LBB269_296
# BB#284:                               # %land.lhs.true.1189
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5543(%rbp)        # 1-byte Spill
	je	.LBB269_296
# BB#285:                               # %land.lhs.true.1198
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5552(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5552(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5543(%rbp)        # 1-byte Spill
	je	.LBB269_296
# BB#286:                               # %land.rhs.1205
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5556(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB269_287
	jmp	.LBB269_292
.LBB269_287:                            # %cond.true.1210
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB269_294
# BB#288:                               # %land.lhs.true.1215
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB269_294
# BB#289:                               # %land.lhs.true.1221
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_294
# BB#290:                               # %land.lhs.true.1230
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5568(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5568(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB269_294
# BB#291:                               # %land.lhs.true.1237
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB269_293
	jmp	.LBB269_294
.LBB269_292:                            # %cond.false.1244
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB269_293
	jmp	.LBB269_294
.LBB269_293:                            # %cond.true.1245
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5572(%rbp)       # 4-byte Spill
	jmp	.LBB269_295
.LBB269_294:                            # %cond.false.1250
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5572(%rbp)       # 4-byte Spill
.LBB269_295:                            # %cond.end.1254
	movl	-5572(%rbp), %eax       # 4-byte Reload
	movl	-5556(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -5543(%rbp)        # 1-byte Spill
.LBB269_296:                            # %land.end.1258
	movb	-5543(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5576(%rbp)       # 4-byte Spill
	jmp	.LBB269_298
.LBB269_297:                            # %cond.false.1260
	xorl	%eax, %eax
	movl	%eax, -5576(%rbp)       # 4-byte Spill
	jmp	.LBB269_298
.LBB269_298:                            # %cond.end.1261
	movl	-5576(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	andb	$1, %cl
	movb	%cl, -5105(%rbp)
	movq	-16(%rbp), %rdx
	movl	464(%rdx), %eax
	movl	%eax, -5112(%rbp)
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	movslq	-5112(%rbp), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -5120(%rbp)
	movq	-40(%rbp), %rdx
	movq	8(%rdx), %rdx
	movslq	-5112(%rbp), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -5128(%rbp)
	movq	$0, -64(%rbp)
.LBB269_299:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, -64(%rbp)
	movb	%cl, -5577(%rbp)        # 1-byte Spill
	jne	.LBB269_301
# BB#300:                               # %land.rhs.1274
                                        #   in Loop: Header=BB269_299 Depth=1
	movl	-5112(%rbp), %eax
	movb	-5105(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	cmpl	%edx, %eax
	setge	%cl
	movb	%cl, -5577(%rbp)        # 1-byte Spill
.LBB269_301:                            # %land.end.1279
                                        #   in Loop: Header=BB269_299 Depth=1
	movb	-5577(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB269_302
	jmp	.LBB269_311
.LBB269_302:                            # %for.body
                                        #   in Loop: Header=BB269_299 Depth=1
	movq	-5128(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_306
# BB#303:                               # %if.then.1286
                                        #   in Loop: Header=BB269_299 Depth=1
	movq	-5128(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_305
# BB#304:                               # %if.then.1292
                                        #   in Loop: Header=BB269_299 Depth=1
	movq	-5128(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB269_305:                            # %if.end.1293
                                        #   in Loop: Header=BB269_299 Depth=1
	jmp	.LBB269_309
.LBB269_306:                            # %if.else.1294
                                        #   in Loop: Header=BB269_299 Depth=1
	movq	-5120(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB269_308
# BB#307:                               # %if.then.1300
                                        #   in Loop: Header=BB269_299 Depth=1
	movq	-5120(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB269_308:                            # %if.end.1301
                                        #   in Loop: Header=BB269_299 Depth=1
	jmp	.LBB269_309
.LBB269_309:                            # %if.end.1302
                                        #   in Loop: Header=BB269_299 Depth=1
	jmp	.LBB269_310
.LBB269_310:                            # %for.inc
                                        #   in Loop: Header=BB269_299 Depth=1
	movl	-5112(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -5112(%rbp)
	movq	-5120(%rbp), %rcx
	addq	$-256, %rcx
	movq	%rcx, -5120(%rbp)
	movq	-5128(%rbp), %rcx
	addq	$-256, %rcx
	movq	%rcx, -5128(%rbp)
	jmp	.LBB269_299
.LBB269_311:                            # %for.end
	movl	-5112(%rbp), %eax
	addl	$1, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 464(%rcx)
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	-64(%rbp), %rdx
	subq	192(%rdx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 456(%rdx)
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	32(%rcx), %rcx
	movq	-64(%rbp), %rdx
	subq	200(%rdx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 480(%rdx)
	jmp	.LBB269_313
.LBB269_312:                            # %if.else.1319
	callq	emacs_abort
.LBB269_313:                            # %if.end.1320
	jmp	.LBB269_314
.LBB269_314:                            # %if.end.1321
	jmp	.LBB269_315
.LBB269_315:                            # %if.end.1322
	jmp	.LBB269_316
.LBB269_316:                            # %if.end.1323
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movb	72(%rax), %dl
	andb	$-2, %dl
	orb	$1, %dl
	movb	%dl, 72(%rax)
	movl	$3, -4(%rbp)
.LBB269_317:                            # %return
	movl	-4(%rbp), %eax
	addq	$5600, %rsp             # imm = 0x15E0
	popq	%rbp
	retq
.Lfunc_end269:
	.size	try_window_id, .Lfunc_end269-try_window_id
	.cfi_endproc

	.align	16, 0x90
	.type	try_window_reusing_current_matrix,@function
try_window_reusing_current_matrix:      # @try_window_reusing_current_matrix
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp829:
	.cfi_def_cfa_offset 16
.Ltmp830:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp831:
	.cfi_def_cfa_register %rbp
	subq	$5840, %rsp             # imm = 0x16D0
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB270_3
# BB#1:                                 # %lor.lhs.false
	cmpl	$0, windows_or_buffers_changed
	jne	.LBB270_3
# BB#2:                                 # %lor.lhs.false.1
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$7, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_4
.LBB270_3:                              # %if.then
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_4:                              # %if.end
	xorl	%edi, %edi
	movq	globals+2168, %rax
	movq	%rax, -5016(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5016(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_6
# BB#5:                                 # %if.then.7
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_6:                              # %if.end.8
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_7
	jmp	.LBB270_22
.LBB270_7:                              # %cond.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5017(%rbp)        # 1-byte Spill
	jne	.LBB270_21
# BB#8:                                 # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5017(%rbp)        # 1-byte Spill
	jne	.LBB270_21
# BB#9:                                 # %land.lhs.true.17
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5017(%rbp)        # 1-byte Spill
	je	.LBB270_21
# BB#10:                                # %land.lhs.true.24
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5032(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5017(%rbp)        # 1-byte Spill
	je	.LBB270_21
# BB#11:                                # %land.rhs
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5036(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_12
	jmp	.LBB270_17
.LBB270_12:                             # %cond.true.31
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_19
# BB#13:                                # %land.lhs.true.36
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_19
# BB#14:                                # %land.lhs.true.42
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_19
# BB#15:                                # %land.lhs.true.50
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5048(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_19
# BB#16:                                # %land.lhs.true.55
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_18
	jmp	.LBB270_19
.LBB270_17:                             # %cond.false
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_18
	jmp	.LBB270_19
.LBB270_18:                             # %cond.true.60
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5052(%rbp)       # 4-byte Spill
	jmp	.LBB270_20
.LBB270_19:                             # %cond.false.64
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5052(%rbp)       # 4-byte Spill
.LBB270_20:                             # %cond.end
	movl	-5052(%rbp), %eax       # 4-byte Reload
	movl	-5036(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	setg	%dl
	movb	%dl, -5017(%rbp)        # 1-byte Spill
.LBB270_21:                             # %land.end
	movb	-5017(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5056(%rbp)       # 4-byte Spill
	jmp	.LBB270_23
.LBB270_22:                             # %cond.false.69
	xorl	%eax, %eax
	movl	%eax, -5056(%rbp)       # 4-byte Spill
	jmp	.LBB270_23
.LBB270_23:                             # %cond.end.70
	movl	-5056(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	movb	%cl, %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	cmpl	%esi, %eax
	je	.LBB270_25
# BB#24:                                # %if.then.78
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_25:                             # %if.end.79
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_27
# BB#26:                                # %cond.true.88
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5064(%rbp)       # 8-byte Spill
	jmp	.LBB270_28
.LBB270_27:                             # %cond.false.91
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -5064(%rbp)       # 8-byte Spill
.LBB270_28:                             # %cond.end.94
	movq	-5064(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4920(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 472(%rax)
	jne	.LBB270_112
# BB#29:                                # %lor.lhs.false.97
	movq	-4920(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-4920(%rbp), %rax
	cmpl	72(%rax), %ecx
	je	.LBB270_113
# BB#30:                                # %land.lhs.true.100
	movq	-4920(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5068(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_31
	jmp	.LBB270_45
.LBB270_31:                             # %cond.true.104
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_60
# BB#32:                                # %land.lhs.true.109
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_60
# BB#33:                                # %land.lhs.true.115
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_60
# BB#34:                                # %land.lhs.true.124
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5080(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5080(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_60
# BB#35:                                # %land.lhs.true.131
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5084(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_36
	jmp	.LBB270_41
.LBB270_36:                             # %cond.true.136
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_43
# BB#37:                                # %land.lhs.true.141
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_43
# BB#38:                                # %land.lhs.true.147
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_43
# BB#39:                                # %land.lhs.true.156
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5096(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5096(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_43
# BB#40:                                # %land.lhs.true.163
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_42
	jmp	.LBB270_43
.LBB270_41:                             # %cond.false.170
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_42
	jmp	.LBB270_43
.LBB270_42:                             # %cond.true.171
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5100(%rbp)       # 4-byte Spill
	jmp	.LBB270_44
.LBB270_43:                             # %cond.false.176
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5100(%rbp)       # 4-byte Spill
.LBB270_44:                             # %cond.end.180
	movl	-5100(%rbp), %eax       # 4-byte Reload
	movl	-5084(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB270_46
	jmp	.LBB270_60
.LBB270_45:                             # %cond.false.184
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_46
	jmp	.LBB270_60
.LBB270_46:                             # %cond.true.185
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB270_48
# BB#47:                                # %cond.true.188
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5104(%rbp)       # 4-byte Spill
	jmp	.LBB270_59
.LBB270_48:                             # %cond.false.190
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_51
# BB#49:                                # %land.lhs.true.193
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_51
# BB#50:                                # %cond.true.197
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB270_52
	jmp	.LBB270_57
.LBB270_51:                             # %cond.false.202
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_52
	jmp	.LBB270_57
.LBB270_52:                             # %cond.true.203
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_55
# BB#53:                                # %land.lhs.true.206
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_55
# BB#54:                                # %cond.true.210
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5108(%rbp)       # 4-byte Spill
	jmp	.LBB270_56
.LBB270_55:                             # %cond.false.214
	xorl	%eax, %eax
	movl	%eax, -5108(%rbp)       # 4-byte Spill
	jmp	.LBB270_56
.LBB270_56:                             # %cond.end.215
	movl	-5108(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5112(%rbp)       # 4-byte Spill
	jmp	.LBB270_58
.LBB270_57:                             # %cond.false.217
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5112(%rbp)       # 4-byte Spill
.LBB270_58:                             # %cond.end.221
	movl	-5112(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5104(%rbp)       # 4-byte Spill
.LBB270_59:                             # %cond.end.224
	movl	-5104(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5116(%rbp)       # 4-byte Spill
	jmp	.LBB270_61
.LBB270_60:                             # %cond.false.226
	xorl	%eax, %eax
	movl	%eax, -5116(%rbp)       # 4-byte Spill
	jmp	.LBB270_61
.LBB270_61:                             # %cond.end.227
	movl	-5116(%rbp), %eax       # 4-byte Reload
	movl	-5068(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB270_112
# BB#62:                                # %lor.lhs.false.231
	movq	-4920(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4920(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-4920(%rbp), %rax
	subl	76(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	260(%rax), %edx
	movq	-16(%rbp), %rax
	movl	244(%rax), %esi
	movq	-16(%rbp), %rax
	addl	260(%rax), %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -5120(%rbp)       # 4-byte Spill
	movl	%edx, -5124(%rbp)       # 4-byte Spill
	movl	%esi, -5128(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -5132(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-5132(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-5128(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB270_64
# BB#63:                                # %land.lhs.true.250
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -5144(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5144(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_66
.LBB270_64:                             # %lor.lhs.false.258
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB270_66
# BB#65:                                # %lor.lhs.false.264
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB270_67
.LBB270_66:                             # %cond.true.271
	xorl	%eax, %eax
	movl	%eax, -5148(%rbp)       # 4-byte Spill
	jmp	.LBB270_68
.LBB270_67:                             # %cond.false.272
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -5148(%rbp)       # 4-byte Spill
.LBB270_68:                             # %cond.end.275
	movl	-5148(%rbp), %eax       # 4-byte Reload
	movl	-5124(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -5152(%rbp)       # 4-byte Spill
	jne	.LBB270_71
# BB#69:                                # %lor.lhs.false.284
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB270_72
# BB#70:                                # %land.lhs.true.290
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB270_72
.LBB270_71:                             # %cond.true.297
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_77
	jmp	.LBB270_81
.LBB270_72:                             # %cond.false.298
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -5160(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5160(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB270_74
# BB#73:                                # %cond.true.302
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB270_77
	jmp	.LBB270_81
.LBB270_74:                             # %cond.false.310
	movl	$213, %edi
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -5168(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5168(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB270_76
# BB#75:                                # %cond.true.315
	movb	$1, %al
	testb	$1, %al
	jne	.LBB270_77
	jmp	.LBB270_81
.LBB270_76:                             # %cond.false.316
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_77
	jmp	.LBB270_81
.LBB270_77:                             # %cond.true.317
	movq	-16(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB270_79
# BB#78:                                # %cond.true.320
	movq	-16(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -5172(%rbp)       # 4-byte Spill
	jmp	.LBB270_80
.LBB270_79:                             # %cond.false.322
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -5172(%rbp)       # 4-byte Spill
.LBB270_80:                             # %cond.end.325
	movl	-5172(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5176(%rbp)       # 4-byte Spill
	jmp	.LBB270_82
.LBB270_81:                             # %cond.false.327
	xorl	%eax, %eax
	movl	%eax, -5176(%rbp)       # 4-byte Spill
	jmp	.LBB270_82
.LBB270_82:                             # %cond.end.328
	movl	-5176(%rbp), %eax       # 4-byte Reload
	movl	-5152(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -5180(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_83
	jmp	.LBB270_88
.LBB270_83:                             # %cond.true.334
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_110
# BB#84:                                # %land.lhs.true.339
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_110
# BB#85:                                # %land.lhs.true.345
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_110
# BB#86:                                # %land.lhs.true.354
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5192(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5192(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_110
# BB#87:                                # %land.lhs.true.361
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_89
	jmp	.LBB270_110
.LBB270_88:                             # %cond.false.368
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_89
	jmp	.LBB270_110
.LBB270_89:                             # %cond.true.369
	movq	-16(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB270_91
# BB#90:                                # %cond.true.372
	movq	-16(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -5196(%rbp)       # 4-byte Spill
	jmp	.LBB270_109
.LBB270_91:                             # %cond.false.374
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_94
# BB#92:                                # %land.lhs.true.377
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_94
# BB#93:                                # %cond.true.381
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB270_95
	jmp	.LBB270_100
.LBB270_94:                             # %cond.false.389
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_95
	jmp	.LBB270_100
.LBB270_95:                             # %cond.true.390
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_98
# BB#96:                                # %land.lhs.true.393
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_98
# BB#97:                                # %cond.true.397
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -5200(%rbp)       # 4-byte Spill
	jmp	.LBB270_99
.LBB270_98:                             # %cond.false.406
	xorl	%eax, %eax
	movl	%eax, -5200(%rbp)       # 4-byte Spill
	jmp	.LBB270_99
.LBB270_99:                             # %cond.end.407
	movl	-5200(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5204(%rbp)       # 4-byte Spill
	jmp	.LBB270_108
.LBB270_100:                            # %cond.false.409
	movb	$1, %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -5216(%rbp)       # 8-byte Spill
	movb	%al, -5217(%rbp)        # 1-byte Spill
	je	.LBB270_107
# BB#101:                               # %lor.lhs.false.413
	movq	-16(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -5232(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-5232(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -5217(%rbp)        # 1-byte Spill
	je	.LBB270_107
# BB#102:                               # %lor.rhs
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -5233(%rbp)        # 1-byte Spill
	jle	.LBB270_106
# BB#103:                               # %land.lhs.true.419
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -5248(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5248(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5233(%rbp)        # 1-byte Spill
	je	.LBB270_106
# BB#104:                               # %land.lhs.true.423
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -5256(%rbp)       # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-5256(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -5233(%rbp)        # 1-byte Spill
	jne	.LBB270_106
# BB#105:                               # %land.rhs.428
	movq	-16(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -5264(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-5264(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -5233(%rbp)        # 1-byte Spill
.LBB270_106:                            # %land.end.432
	movb	-5233(%rbp), %al        # 1-byte Reload
	movb	%al, -5217(%rbp)        # 1-byte Spill
.LBB270_107:                            # %lor.end
	movb	-5217(%rbp), %al        # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-5216(%rbp), %rdi       # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -5204(%rbp)       # 4-byte Spill
.LBB270_108:                            # %cond.end.436
	movl	-5204(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -5196(%rbp)       # 4-byte Spill
.LBB270_109:                            # %cond.end.439
	movl	-5196(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5268(%rbp)       # 4-byte Spill
	jmp	.LBB270_111
.LBB270_110:                            # %cond.false.441
	xorl	%eax, %eax
	movl	%eax, -5268(%rbp)       # 4-byte Spill
	jmp	.LBB270_111
.LBB270_111:                            # %cond.end.442
	movl	-5268(%rbp), %eax       # 4-byte Reload
	movl	-5180(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	-5120(%rbp), %eax       # 4-byte Reload
	cmpl	%ecx, %eax
	jle	.LBB270_113
.LBB270_112:                            # %if.then.447
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_113:                            # %if.end.448
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -4888(%rbp)
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -4880(%rbp)
	movq	-4920(%rbp), %rax
	movq	176(%rax), %rdi
	movq	%rdi, -4872(%rbp)
	movq	184(%rax), %rax
	movq	%rax, -4864(%rbp)
	movq	-4920(%rbp), %rax
	movq	-16(%rbp), %rdi
	movq	192(%rdi), %rdi
	movq	8(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$8, %rax
	movl	%eax, %ecx
	movl	%ecx, -4924(%rbp)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movq	-4888(%rbp), %rax
	cmpq	-4872(%rbp), %rax
	jg	.LBB270_300
# BB#114:                               # %if.then.460
	movq	-4920(%rbp), %rax
	addq	$80, %rax
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	in_ellipses_for_invisible_text_p
	testb	$1, %al
	jne	.LBB270_115
	jmp	.LBB270_116
.LBB270_115:                            # %if.then.463
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_116:                            # %if.end.464
	leaq	-4832(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4888(%rbp), %rdx
	movq	-4880(%rbp), %rcx
	callq	start_display
	movq	-16(%rbp), %rcx
	movl	$-1, 364(%rcx)
	movq	$0, -4912(%rbp)
	movq	$0, -4904(%rbp)
.LBB270_117:                            # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_121 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-2400(%rbp), %eax
	cmpl	-2508(%rbp), %eax
	movb	%cl, -5269(%rbp)        # 1-byte Spill
	jge	.LBB270_119
# BB#118:                               # %land.rhs.467
                                        #   in Loop: Header=BB270_117 Depth=1
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	%cl, -5269(%rbp)        # 1-byte Spill
.LBB270_119:                            # %land.end.472
                                        #   in Loop: Header=BB270_117 Depth=1
	movb	-5269(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB270_120
	jmp	.LBB270_216
.LBB270_120:                            # %while.body
                                        #   in Loop: Header=BB270_117 Depth=1
	jmp	.LBB270_121
.LBB270_121:                            # %while.cond.474
                                        #   Parent Loop BB270_117 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-4520(%rbp), %rax
	cmpq	-4872(%rbp), %rax
	jle	.LBB270_210
# BB#122:                               # %while.body.479
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-4920(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4920(%rbp)
	movq	-4920(%rbp), %rax
	movq	176(%rax), %rcx
	movq	%rcx, -4872(%rbp)
	movq	184(%rax), %rax
	movq	%rax, -4864(%rbp)
	movq	-4920(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movslq	24(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	addq	$-256, %rcx
	addq	$-256, %rcx
	cmpq	%rcx, %rax
	je	.LBB270_208
# BB#123:                               # %lor.lhs.false.491
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 472(%rax)
	jne	.LBB270_208
# BB#124:                               # %lor.lhs.false.494
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-4920(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-4920(%rbp), %rax
	cmpl	72(%rax), %ecx
	je	.LBB270_207
# BB#125:                               # %land.lhs.true.499
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-4920(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5276(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_126
	jmp	.LBB270_140
.LBB270_126:                            # %cond.true.504
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_155
# BB#127:                               # %land.lhs.true.509
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_155
# BB#128:                               # %land.lhs.true.515
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_155
# BB#129:                               # %land.lhs.true.524
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5288(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5288(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_155
# BB#130:                               # %land.lhs.true.531
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5292(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_131
	jmp	.LBB270_136
.LBB270_131:                            # %cond.true.536
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_138
# BB#132:                               # %land.lhs.true.541
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_138
# BB#133:                               # %land.lhs.true.547
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_138
# BB#134:                               # %land.lhs.true.556
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5304(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5304(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_138
# BB#135:                               # %land.lhs.true.563
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_137
	jmp	.LBB270_138
.LBB270_136:                            # %cond.false.570
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_137
	jmp	.LBB270_138
.LBB270_137:                            # %cond.true.571
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5308(%rbp)       # 4-byte Spill
	jmp	.LBB270_139
.LBB270_138:                            # %cond.false.576
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5308(%rbp)       # 4-byte Spill
.LBB270_139:                            # %cond.end.580
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5308(%rbp), %eax       # 4-byte Reload
	movl	-5292(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB270_141
	jmp	.LBB270_155
.LBB270_140:                            # %cond.false.584
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_141
	jmp	.LBB270_155
.LBB270_141:                            # %cond.true.585
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB270_143
# BB#142:                               # %cond.true.589
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5312(%rbp)       # 4-byte Spill
	jmp	.LBB270_154
.LBB270_143:                            # %cond.false.591
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_146
# BB#144:                               # %land.lhs.true.594
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_146
# BB#145:                               # %cond.true.598
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB270_147
	jmp	.LBB270_152
.LBB270_146:                            # %cond.false.603
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_147
	jmp	.LBB270_152
.LBB270_147:                            # %cond.true.604
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_150
# BB#148:                               # %land.lhs.true.607
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_150
# BB#149:                               # %cond.true.611
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5316(%rbp)       # 4-byte Spill
	jmp	.LBB270_151
.LBB270_150:                            # %cond.false.615
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movl	%eax, -5316(%rbp)       # 4-byte Spill
	jmp	.LBB270_151
.LBB270_151:                            # %cond.end.616
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5316(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5320(%rbp)       # 4-byte Spill
	jmp	.LBB270_153
.LBB270_152:                            # %cond.false.618
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5320(%rbp)       # 4-byte Spill
.LBB270_153:                            # %cond.end.622
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5320(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5312(%rbp)       # 4-byte Spill
.LBB270_154:                            # %cond.end.625
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5312(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5324(%rbp)       # 4-byte Spill
	jmp	.LBB270_156
.LBB270_155:                            # %cond.false.627
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movl	%eax, -5324(%rbp)       # 4-byte Spill
	jmp	.LBB270_156
.LBB270_156:                            # %cond.end.628
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5324(%rbp), %eax       # 4-byte Reload
	movl	-5276(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB270_208
# BB#157:                               # %lor.lhs.false.632
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-4920(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4920(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-4920(%rbp), %rax
	subl	76(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	260(%rax), %edx
	movq	-16(%rbp), %rax
	movl	244(%rax), %esi
	movq	-16(%rbp), %rax
	addl	260(%rax), %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -5328(%rbp)       # 4-byte Spill
	movl	%edx, -5332(%rbp)       # 4-byte Spill
	movl	%esi, -5336(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -5340(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-5340(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-5336(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB270_159
# BB#158:                               # %land.lhs.true.655
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -5352(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_161
.LBB270_159:                            # %lor.lhs.false.664
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB270_161
# BB#160:                               # %lor.lhs.false.671
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB270_162
.LBB270_161:                            # %cond.true.678
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movl	%eax, -5356(%rbp)       # 4-byte Spill
	jmp	.LBB270_163
.LBB270_162:                            # %cond.false.679
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -5356(%rbp)       # 4-byte Spill
.LBB270_163:                            # %cond.end.683
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5356(%rbp), %eax       # 4-byte Reload
	movl	-5332(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -5360(%rbp)       # 4-byte Spill
	jne	.LBB270_166
# BB#164:                               # %lor.lhs.false.692
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB270_167
# BB#165:                               # %land.lhs.true.698
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB270_167
.LBB270_166:                            # %cond.true.705
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_172
	jmp	.LBB270_176
.LBB270_167:                            # %cond.false.706
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	$901, %edi              # imm = 0x385
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -5368(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB270_169
# BB#168:                               # %cond.true.711
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB270_172
	jmp	.LBB270_176
.LBB270_169:                            # %cond.false.720
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	$213, %edi
	movq	-16(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -5376(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5376(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB270_171
# BB#170:                               # %cond.true.725
                                        #   in Loop: Header=BB270_121 Depth=2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB270_172
	jmp	.LBB270_176
.LBB270_171:                            # %cond.false.726
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_172
	jmp	.LBB270_176
.LBB270_172:                            # %cond.true.727
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB270_174
# BB#173:                               # %cond.true.731
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -5380(%rbp)       # 4-byte Spill
	jmp	.LBB270_175
.LBB270_174:                            # %cond.false.733
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -5380(%rbp)       # 4-byte Spill
.LBB270_175:                            # %cond.end.737
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5380(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5384(%rbp)       # 4-byte Spill
	jmp	.LBB270_177
.LBB270_176:                            # %cond.false.739
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movl	%eax, -5384(%rbp)       # 4-byte Spill
	jmp	.LBB270_177
.LBB270_177:                            # %cond.end.740
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5384(%rbp), %eax       # 4-byte Reload
	movl	-5360(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -5388(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_178
	jmp	.LBB270_183
.LBB270_178:                            # %cond.true.746
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_205
# BB#179:                               # %land.lhs.true.751
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_205
# BB#180:                               # %land.lhs.true.757
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_205
# BB#181:                               # %land.lhs.true.766
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5400(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5400(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_205
# BB#182:                               # %land.lhs.true.773
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_184
	jmp	.LBB270_205
.LBB270_183:                            # %cond.false.780
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_184
	jmp	.LBB270_205
.LBB270_184:                            # %cond.true.781
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB270_186
# BB#185:                               # %cond.true.785
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -5404(%rbp)       # 4-byte Spill
	jmp	.LBB270_204
.LBB270_186:                            # %cond.false.787
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_189
# BB#187:                               # %land.lhs.true.790
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_189
# BB#188:                               # %cond.true.794
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB270_190
	jmp	.LBB270_195
.LBB270_189:                            # %cond.false.804
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_190
	jmp	.LBB270_195
.LBB270_190:                            # %cond.true.805
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_193
# BB#191:                               # %land.lhs.true.808
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_193
# BB#192:                               # %cond.true.812
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -5408(%rbp)       # 4-byte Spill
	jmp	.LBB270_194
.LBB270_193:                            # %cond.false.821
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movl	%eax, -5408(%rbp)       # 4-byte Spill
	jmp	.LBB270_194
.LBB270_194:                            # %cond.end.822
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5408(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5412(%rbp)       # 4-byte Spill
	jmp	.LBB270_203
.LBB270_195:                            # %cond.false.824
                                        #   in Loop: Header=BB270_121 Depth=2
	movb	$1, %al
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -5424(%rbp)       # 8-byte Spill
	movb	%al, -5425(%rbp)        # 1-byte Spill
	je	.LBB270_202
# BB#196:                               # %lor.lhs.false.828
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -5440(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-5440(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -5425(%rbp)        # 1-byte Spill
	je	.LBB270_202
# BB#197:                               # %lor.rhs.832
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -5441(%rbp)        # 1-byte Spill
	jle	.LBB270_201
# BB#198:                               # %land.lhs.true.835
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -5456(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5441(%rbp)        # 1-byte Spill
	je	.LBB270_201
# BB#199:                               # %land.lhs.true.839
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -5464(%rbp)       # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-5464(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -5441(%rbp)        # 1-byte Spill
	jne	.LBB270_201
# BB#200:                               # %land.rhs.844
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-16(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -5472(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-5472(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -5441(%rbp)        # 1-byte Spill
.LBB270_201:                            # %land.end.848
                                        #   in Loop: Header=BB270_121 Depth=2
	movb	-5441(%rbp), %al        # 1-byte Reload
	movb	%al, -5425(%rbp)        # 1-byte Spill
.LBB270_202:                            # %lor.end.850
                                        #   in Loop: Header=BB270_121 Depth=2
	movb	-5425(%rbp), %al        # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -5412(%rbp)       # 4-byte Spill
.LBB270_203:                            # %cond.end.853
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5412(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -5404(%rbp)       # 4-byte Spill
.LBB270_204:                            # %cond.end.856
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5404(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5476(%rbp)       # 4-byte Spill
	jmp	.LBB270_206
.LBB270_205:                            # %cond.false.858
                                        #   in Loop: Header=BB270_121 Depth=2
	xorl	%eax, %eax
	movl	%eax, -5476(%rbp)       # 4-byte Spill
	jmp	.LBB270_206
.LBB270_206:                            # %cond.end.859
                                        #   in Loop: Header=BB270_121 Depth=2
	movl	-5476(%rbp), %eax       # 4-byte Reload
	movl	-5388(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	-5328(%rbp), %eax       # 4-byte Reload
	cmpl	%ecx, %eax
	jg	.LBB270_208
.LBB270_207:                            # %lor.lhs.false.864
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-4872(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jne	.LBB270_209
.LBB270_208:                            # %if.then.868
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_209:                            # %if.end.870
                                        #   in Loop: Header=BB270_121 Depth=2
	movq	-4920(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$8, %rax
	movl	%eax, %edx
	movl	%edx, -4924(%rbp)
	jmp	.LBB270_121
.LBB270_210:                            # %while.end
                                        #   in Loop: Header=BB270_117 Depth=1
	movq	-4520(%rbp), %rax
	cmpq	-4872(%rbp), %rax
	jne	.LBB270_213
# BB#211:                               # %land.lhs.true.884
                                        #   in Loop: Header=BB270_117 Depth=1
	cmpl	$0, -4480(%rbp)
	jge	.LBB270_213
# BB#212:                               # %if.then.888
	jmp	.LBB270_216
.LBB270_213:                            # %if.end.889
                                        #   in Loop: Header=BB270_117 Depth=1
	leaq	-4832(%rbp), %rdi
	movq	-2480(%rbp), %rax
	movabsq	$-17179869185, %rcx     # imm = 0xFFFFFFFBFFFFFFFF
	andq	236(%rax), %rcx
	movq	%rcx, 236(%rax)
	callq	display_line
	testb	$1, %al
	jne	.LBB270_214
	jmp	.LBB270_215
.LBB270_214:                            # %if.then.893
                                        #   in Loop: Header=BB270_117 Depth=1
	movq	-2480(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -4904(%rbp)
.LBB270_215:                            # %if.end.896
                                        #   in Loop: Header=BB270_117 Depth=1
	jmp	.LBB270_117
.LBB270_216:                            # %while.end.897
	movl	-2400(%rbp), %eax
	cmpl	-2508(%rbp), %eax
	jge	.LBB270_293
# BB#217:                               # %if.then.902
	movslq	-2392(%rbp), %rax
	movq	-4920(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	236(%rdx), %rdx
	shrq	$20, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movq	%rax, -5488(%rbp)       # 8-byte Spill
	movq	%rcx, -5496(%rbp)       # 8-byte Spill
	je	.LBB270_219
# BB#218:                               # %cond.true.913
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5504(%rbp)       # 8-byte Spill
	jmp	.LBB270_220
.LBB270_219:                            # %cond.false.917
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -5504(%rbp)       # 8-byte Spill
.LBB270_220:                            # %cond.end.920
	movq	-5504(%rbp), %rax       # 8-byte Reload
	movq	-5496(%rbp), %rcx       # 8-byte Reload
	subq	%rax, %rcx
	sarq	$8, %rcx
	movq	-5488(%rbp), %rax       # 8-byte Reload
	subq	%rcx, %rax
	movl	%eax, %edx
	movl	%edx, -4892(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB270_228
# BB#221:                               # %if.then.932
	movl	-2400(%rbp), %eax
	movq	-4920(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -4948(%rbp)
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB270_223
# BB#222:                               # %cond.true.944
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -5512(%rbp)       # 8-byte Spill
	jmp	.LBB270_224
.LBB270_223:                            # %cond.false.948
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -5512(%rbp)       # 8-byte Spill
.LBB270_224:                            # %cond.end.951
	movq	-5512(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rax, -4944(%rbp)
	movq	-16(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-4944(%rbp), %rdx
	movl	-4948(%rbp), %r8d
	movq	%rax, %rsi
	callq	row_containing_pos
	movq	%rax, -4944(%rbp)
	cmpq	$0, -4944(%rbp)
	je	.LBB270_226
# BB#225:                               # %if.then.956
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdi
	movq	-4944(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movl	-4948(%rbp), %r9d
	movl	-4892(%rbp), %eax
	movq	%rcx, -5520(%rbp)       # 8-byte Spill
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movl	%eax, (%rsp)
	callq	set_cursor_from_row
	movb	%al, -5521(%rbp)        # 1-byte Spill
	jmp	.LBB270_227
.LBB270_226:                            # %if.else
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_227:                            # %if.end.960
	jmp	.LBB270_228
.LBB270_228:                            # %if.end.961
	movq	-4920(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -4852(%rbp)
	movl	-2400(%rbp), %ecx
	movl	%ecx, -4856(%rbp)
	movl	-2508(%rbp), %ecx
	subl	-2400(%rbp), %ecx
	movl	%ecx, -4840(%rbp)
	cmpl	$0, -4840(%rbp)
	jle	.LBB270_231
# BB#229:                               # %land.lhs.true.972
	movl	-4852(%rbp), %eax
	cmpl	-4856(%rbp), %eax
	je	.LBB270_231
# BB#230:                               # %if.then.977
	movq	-24(%rbp), %rdi
	callq	update_begin
	movq	-24(%rbp), %rdi
	movq	376(%rdi), %rdi
	movq	112(%rdi), %rdi
	movq	56(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -5536(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-5536(%rbp), %rax       # 8-byte Reload
	callq	*%rax
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	80(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	leaq	-4856(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rdi
	movl	%ecx, %esi
	movl	%ecx, %edx
	callq	*%rax
	movq	-24(%rbp), %rdi
	callq	update_end
.LBB270_231:                            # %if.end.984
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -5544(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_232
	jmp	.LBB270_238
.LBB270_232:                            # %cond.true.994
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5545(%rbp)        # 1-byte Spill
	jne	.LBB270_237
# BB#233:                               # %land.lhs.true.999
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5545(%rbp)        # 1-byte Spill
	jne	.LBB270_237
# BB#234:                               # %land.lhs.true.1005
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5545(%rbp)        # 1-byte Spill
	je	.LBB270_237
# BB#235:                               # %land.lhs.true.1014
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5560(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5560(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5545(%rbp)        # 1-byte Spill
	je	.LBB270_237
# BB#236:                               # %land.rhs.1021
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -5545(%rbp)        # 1-byte Spill
.LBB270_237:                            # %land.end.1028
	movb	-5545(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5564(%rbp)       # 4-byte Spill
	jmp	.LBB270_239
.LBB270_238:                            # %cond.false.1030
	xorl	%eax, %eax
	movl	%eax, -5564(%rbp)       # 4-byte Spill
	jmp	.LBB270_239
.LBB270_239:                            # %cond.end.1031
	movl	-5564(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-5544(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdi
	movl	-4924(%rbp), %esi
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %r8
	movq	192(%r8), %r8
	movq	8(%r8), %r8
	subq	%r8, %rdx
	sarq	$8, %rdx
	movl	%edx, %eax
	movl	-4892(%rbp), %ecx
	movl	%eax, %edx
	callq	rotate_matrix
	movl	$0, -4896(%rbp)
.LBB270_240:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4896(%rbp), %eax
	cmpl	-4892(%rbp), %eax
	jge	.LBB270_243
# BB#241:                               # %for.body
                                        #   in Loop: Header=BB270_240 Depth=1
	movq	-4920(%rbp), %rax
	movslq	-4896(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
# BB#242:                               # %for.inc
                                        #   in Loop: Header=BB270_240 Depth=1
	movl	-4896(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4896(%rbp)
	jmp	.LBB270_240
.LBB270_243:                            # %for.end
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_244
	jmp	.LBB270_258
.LBB270_244:                            # %cond.true.1054
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_273
# BB#245:                               # %land.lhs.true.1059
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_273
# BB#246:                               # %land.lhs.true.1065
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_273
# BB#247:                               # %land.lhs.true.1074
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5576(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5576(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_273
# BB#248:                               # %land.lhs.true.1081
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5580(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_249
	jmp	.LBB270_254
.LBB270_249:                            # %cond.true.1086
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_256
# BB#250:                               # %land.lhs.true.1091
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_256
# BB#251:                               # %land.lhs.true.1097
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_256
# BB#252:                               # %land.lhs.true.1106
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5592(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5592(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_256
# BB#253:                               # %land.lhs.true.1113
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_255
	jmp	.LBB270_256
.LBB270_254:                            # %cond.false.1120
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_255
	jmp	.LBB270_256
.LBB270_255:                            # %cond.true.1121
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5596(%rbp)       # 4-byte Spill
	jmp	.LBB270_257
.LBB270_256:                            # %cond.false.1126
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5596(%rbp)       # 4-byte Spill
.LBB270_257:                            # %cond.end.1130
	movl	-5596(%rbp), %eax       # 4-byte Reload
	movl	-5580(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB270_259
	jmp	.LBB270_273
.LBB270_258:                            # %cond.false.1134
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_259
	jmp	.LBB270_273
.LBB270_259:                            # %cond.true.1135
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB270_261
# BB#260:                               # %cond.true.1139
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5600(%rbp)       # 4-byte Spill
	jmp	.LBB270_272
.LBB270_261:                            # %cond.false.1141
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_264
# BB#262:                               # %land.lhs.true.1144
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_264
# BB#263:                               # %cond.true.1148
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB270_265
	jmp	.LBB270_270
.LBB270_264:                            # %cond.false.1153
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_265
	jmp	.LBB270_270
.LBB270_265:                            # %cond.true.1154
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_268
# BB#266:                               # %land.lhs.true.1157
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_268
# BB#267:                               # %cond.true.1161
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5604(%rbp)       # 4-byte Spill
	jmp	.LBB270_269
.LBB270_268:                            # %cond.false.1165
	xorl	%eax, %eax
	movl	%eax, -5604(%rbp)       # 4-byte Spill
	jmp	.LBB270_269
.LBB270_269:                            # %cond.end.1166
	movl	-5604(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5608(%rbp)       # 4-byte Spill
	jmp	.LBB270_271
.LBB270_270:                            # %cond.false.1168
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5608(%rbp)       # 4-byte Spill
.LBB270_271:                            # %cond.end.1172
	movl	-5608(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5600(%rbp)       # 4-byte Spill
.LBB270_272:                            # %cond.end.1175
	movl	-5600(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5612(%rbp)       # 4-byte Spill
	jmp	.LBB270_274
.LBB270_273:                            # %cond.false.1177
	xorl	%eax, %eax
	movl	%eax, -5612(%rbp)       # 4-byte Spill
	jmp	.LBB270_274
.LBB270_274:                            # %cond.end.1178
	movl	-5612(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4928(%rbp)
	movl	-2508(%rbp), %eax
	movl	%eax, -4932(%rbp)
	movq	-4920(%rbp), %rcx
	movslq	-4892(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -4944(%rbp)
.LBB270_275:                            # %for.cond.1183
                                        # =>This Inner Loop Header: Depth=1
	movq	-4944(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB270_288
# BB#276:                               # %for.body.1186
                                        #   in Loop: Header=BB270_275 Depth=1
	movl	-2400(%rbp), %eax
	movq	-4944(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-4944(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-4944(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	-4944(%rbp), %rcx
	movl	48(%rcx), %eax
	cmpl	-4928(%rbp), %eax
	jge	.LBB270_278
# BB#277:                               # %if.then.1194
                                        #   in Loop: Header=BB270_275 Depth=1
	movl	-4928(%rbp), %eax
	movq	-4944(%rbp), %rcx
	subl	48(%rcx), %eax
	movq	-4944(%rbp), %rcx
	movl	72(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 72(%rcx)
.LBB270_278:                            # %if.end.1199
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4944(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-4932(%rbp), %ecx
	jle	.LBB270_280
# BB#279:                               # %if.then.1205
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4944(%rbp), %rax
	addl	60(%rax), %ecx
	subl	-4932(%rbp), %ecx
	movq	-4944(%rbp), %rax
	movl	72(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 72(%rax)
.LBB270_280:                            # %if.end.1212
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_282
# BB#281:                               # %if.then.1217
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-513, %rcx             # imm = 0xFFFFFFFFFFFFFDFF
	orq	$512, %rcx              # imm = 0x200
	movq	%rcx, 236(%rax)
.LBB270_282:                            # %if.end.1220
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movl	60(%rax), %ecx
	addl	-2400(%rbp), %ecx
	movl	%ecx, -2400(%rbp)
	movq	-4944(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_284
# BB#283:                               # %if.then.1228
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movq	%rax, -4912(%rbp)
.LBB270_284:                            # %if.end.1229
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4944(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-2508(%rbp), %ecx
	jl	.LBB270_286
# BB#285:                               # %if.then.1236
	jmp	.LBB270_288
.LBB270_286:                            # %if.end.1237
                                        #   in Loop: Header=BB270_275 Depth=1
	jmp	.LBB270_287
.LBB270_287:                            # %for.inc.1238
                                        #   in Loop: Header=BB270_275 Depth=1
	movq	-4944(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4944(%rbp)
	jmp	.LBB270_275
.LBB270_288:                            # %for.end.1240
	movq	-4944(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4944(%rbp)
.LBB270_289:                            # %for.cond.1242
                                        # =>This Inner Loop Header: Depth=1
	movq	-4944(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB270_292
# BB#290:                               # %for.body.1245
                                        #   in Loop: Header=BB270_289 Depth=1
	movq	-4944(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1048577, %rcx         # imm = 0xFFFFFFFFFFEFFFFF
	movq	%rcx, 236(%rax)
	movq	-4944(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
# BB#291:                               # %for.inc.1252
                                        #   in Loop: Header=BB270_289 Depth=1
	movq	-4944(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4944(%rbp)
	jmp	.LBB270_289
.LBB270_292:                            # %for.end.1254
	jmp	.LBB270_293
.LBB270_293:                            # %if.end.1255
	cmpq	$0, -4912(%rbp)
	je	.LBB270_295
# BB#294:                               # %if.then.1257
	movl	$1, %edx
	movq	-16(%rbp), %rdi
	movq	-4912(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB270_299
.LBB270_295:                            # %if.else.1258
	cmpq	$0, -4904(%rbp)
	je	.LBB270_297
# BB#296:                               # %if.then.1260
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movq	-4904(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB270_298
.LBB270_297:                            # %if.else.1261
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	current_buffer, %rcx
	subq	776(%rcx), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 480(%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	subq	768(%rcx), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 456(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 464(%rax)
.LBB270_298:                            # %if.end.1266
	jmp	.LBB270_299
.LBB270_299:                            # %if.end.1267
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movb	72(%rax), %dl
	andb	$-2, %dl
	orb	$1, %dl
	movb	%dl, 72(%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB270_481
.LBB270_300:                            # %if.else.1274
	movq	-4888(%rbp), %rax
	cmpq	-4872(%rbp), %rax
	jle	.LBB270_479
# BB#301:                               # %if.then.1279
	movq	-16(%rbp), %rdi
	callq	window_text_bottom_y
	movl	%eax, -4992(%rbp)
	movq	-4920(%rbp), %rdi
	movq	%rdi, -4976(%rbp)
.LBB270_302:                            # %while.cond.1283
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4976(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5613(%rbp)        # 1-byte Spill
	je	.LBB270_305
# BB#303:                               # %land.lhs.true.1290
                                        #   in Loop: Header=BB270_302 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4976(%rbp), %rdx
	movl	48(%rdx), %eax
	movq	-4976(%rbp), %rdx
	addl	60(%rdx), %eax
	cmpl	-4992(%rbp), %eax
	movb	%cl, -5613(%rbp)        # 1-byte Spill
	jge	.LBB270_305
# BB#304:                               # %land.rhs.1296
                                        #   in Loop: Header=BB270_302 Depth=1
	movq	-4976(%rbp), %rax
	movq	176(%rax), %rax
	cmpq	-4888(%rbp), %rax
	setl	%cl
	movb	%cl, -5613(%rbp)        # 1-byte Spill
.LBB270_305:                            # %land.end.1302
                                        #   in Loop: Header=BB270_302 Depth=1
	movb	-5613(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB270_306
	jmp	.LBB270_307
.LBB270_306:                            # %while.body.1304
                                        #   in Loop: Header=BB270_302 Depth=1
	movq	-4976(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4976(%rbp)
	jmp	.LBB270_302
.LBB270_307:                            # %while.end.1306
	movq	-4976(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4976(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-4992(%rbp), %ecx
	jge	.LBB270_310
# BB#308:                               # %lor.lhs.false.1312
	movq	-4976(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_310
# BB#309:                               # %lor.lhs.false.1318
	movq	-4976(%rbp), %rax
	movq	176(%rax), %rax
	cmpq	-4888(%rbp), %rax
	je	.LBB270_311
.LBB270_310:                            # %if.then.1324
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_311:                            # %if.end.1325
	movq	$0, -4960(%rbp)
	movq	-4976(%rbp), %rax
	movq	%rax, -4984(%rbp)
.LBB270_312:                            # %for.cond.1326
                                        # =>This Inner Loop Header: Depth=1
	movq	-4984(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4984(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-4992(%rbp), %ecx
	jge	.LBB270_321
# BB#313:                               # %for.body.1332
                                        #   in Loop: Header=BB270_312 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-4984(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jl	.LBB270_319
# BB#314:                               # %land.lhs.true.1339
                                        #   in Loop: Header=BB270_312 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-4984(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jl	.LBB270_318
# BB#315:                               # %lor.lhs.false.1345
                                        #   in Loop: Header=BB270_312 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-4984(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB270_319
# BB#316:                               # %land.lhs.true.1352
                                        #   in Loop: Header=BB270_312 Depth=1
	movq	-4984(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_319
# BB#317:                               # %land.lhs.true.1358
                                        #   in Loop: Header=BB270_312 Depth=1
	cmpq	$0, -4960(%rbp)
	jne	.LBB270_319
.LBB270_318:                            # %if.then.1361
                                        #   in Loop: Header=BB270_312 Depth=1
	movq	-4984(%rbp), %rax
	movq	%rax, -4960(%rbp)
.LBB270_319:                            # %if.end.1362
                                        #   in Loop: Header=BB270_312 Depth=1
	jmp	.LBB270_320
.LBB270_320:                            # %for.inc.1363
                                        #   in Loop: Header=BB270_312 Depth=1
	movq	-4984(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4984(%rbp)
	jmp	.LBB270_312
.LBB270_321:                            # %for.end.1365
	leaq	-4832(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-4984(%rbp), %rdx
	callq	init_to_row_start
	movq	-4976(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	192(%rsi), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	sarq	$8, %rdx
	movslq	-4924(%rbp), %rsi
	subq	%rsi, %rdx
	movl	%edx, %eax
	movl	%eax, -4892(%rbp)
	movq	-4984(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	192(%rsi), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	sarq	$8, %rdx
	movslq	-4892(%rbp), %rsi
	subq	%rsi, %rdx
	movl	%edx, %eax
	movl	%eax, -2392(%rbp)
	movq	-4984(%rbp), %rdx
	movl	48(%rdx), %eax
	movq	-4976(%rbp), %rdx
	subl	48(%rdx), %eax
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%eax, -5620(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_322
	jmp	.LBB270_336
.LBB270_322:                            # %cond.true.1391
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_351
# BB#323:                               # %land.lhs.true.1396
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_351
# BB#324:                               # %land.lhs.true.1402
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_351
# BB#325:                               # %land.lhs.true.1411
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5632(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5632(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_351
# BB#326:                               # %land.lhs.true.1418
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5636(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_327
	jmp	.LBB270_332
.LBB270_327:                            # %cond.true.1423
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_334
# BB#328:                               # %land.lhs.true.1428
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_334
# BB#329:                               # %land.lhs.true.1434
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_334
# BB#330:                               # %land.lhs.true.1443
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5648(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5648(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_334
# BB#331:                               # %land.lhs.true.1450
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_333
	jmp	.LBB270_334
.LBB270_332:                            # %cond.false.1457
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_333
	jmp	.LBB270_334
.LBB270_333:                            # %cond.true.1458
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5652(%rbp)       # 4-byte Spill
	jmp	.LBB270_335
.LBB270_334:                            # %cond.false.1463
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5652(%rbp)       # 4-byte Spill
.LBB270_335:                            # %cond.end.1467
	movl	-5652(%rbp), %eax       # 4-byte Reload
	movl	-5636(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB270_337
	jmp	.LBB270_351
.LBB270_336:                            # %cond.false.1471
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_337
	jmp	.LBB270_351
.LBB270_337:                            # %cond.true.1472
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB270_339
# BB#338:                               # %cond.true.1476
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5656(%rbp)       # 4-byte Spill
	jmp	.LBB270_350
.LBB270_339:                            # %cond.false.1478
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_342
# BB#340:                               # %land.lhs.true.1481
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_342
# BB#341:                               # %cond.true.1485
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB270_343
	jmp	.LBB270_348
.LBB270_342:                            # %cond.false.1490
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_343
	jmp	.LBB270_348
.LBB270_343:                            # %cond.true.1491
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_346
# BB#344:                               # %land.lhs.true.1494
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_346
# BB#345:                               # %cond.true.1498
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5660(%rbp)       # 4-byte Spill
	jmp	.LBB270_347
.LBB270_346:                            # %cond.false.1502
	xorl	%eax, %eax
	movl	%eax, -5660(%rbp)       # 4-byte Spill
	jmp	.LBB270_347
.LBB270_347:                            # %cond.end.1503
	movl	-5660(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5664(%rbp)       # 4-byte Spill
	jmp	.LBB270_349
.LBB270_348:                            # %cond.false.1505
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5664(%rbp)       # 4-byte Spill
.LBB270_349:                            # %cond.end.1509
	movl	-5664(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5656(%rbp)       # 4-byte Spill
.LBB270_350:                            # %cond.end.1512
	movl	-5656(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5668(%rbp)       # 4-byte Spill
	jmp	.LBB270_352
.LBB270_351:                            # %cond.false.1514
	xorl	%eax, %eax
	movl	%eax, -5668(%rbp)       # 4-byte Spill
	jmp	.LBB270_352
.LBB270_352:                            # %cond.end.1515
	movl	-5668(%rbp), %eax       # 4-byte Reload
	movl	-5620(%rbp), %ecx       # 4-byte Reload
	addl	%eax, %ecx
	movl	%ecx, -2400(%rbp)
	movq	-16(%rbp), %rdx
	movq	200(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-2392(%rbp), %rsi
	shlq	$8, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -2480(%rbp)
	cmpq	$0, -4960(%rbp)
	jne	.LBB270_354
# BB#353:                               # %if.then.1527
	movq	-16(%rbp), %rax
	movl	$-1, 364(%rax)
.LBB270_354:                            # %if.end.1530
	movq	$0, -4904(%rbp)
.LBB270_355:                            # %while.cond.1531
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-2400(%rbp), %eax
	cmpl	-2508(%rbp), %eax
	movb	%cl, -5669(%rbp)        # 1-byte Spill
	jge	.LBB270_357
# BB#356:                               # %land.rhs.1536
                                        #   in Loop: Header=BB270_355 Depth=1
	movq	-24(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	%cl, -5669(%rbp)        # 1-byte Spill
.LBB270_357:                            # %land.end.1543
                                        #   in Loop: Header=BB270_355 Depth=1
	movb	-5669(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB270_358
	jmp	.LBB270_361
.LBB270_358:                            # %while.body.1545
                                        #   in Loop: Header=BB270_355 Depth=1
	leaq	-4832(%rbp), %rdi
	callq	display_line
	testb	$1, %al
	jne	.LBB270_359
	jmp	.LBB270_360
.LBB270_359:                            # %if.then.1547
                                        #   in Loop: Header=BB270_355 Depth=1
	movq	-2480(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -4904(%rbp)
.LBB270_360:                            # %if.end.1550
                                        #   in Loop: Header=BB270_355 Depth=1
	jmp	.LBB270_355
.LBB270_361:                            # %while.end.1551
	cmpq	$0, -4960(%rbp)
	je	.LBB270_363
# BB#362:                               # %if.then.1553
	movl	-4892(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	364(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 364(%rcx)
	movq	-4976(%rbp), %rcx
	movl	48(%rcx), %eax
	movq	-4920(%rbp), %rcx
	subl	48(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	356(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 356(%rcx)
.LBB270_363:                            # %if.end.1563
	movq	-16(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB270_365
# BB#364:                               # %if.then.1568
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_365:                            # %if.end.1570
	movq	-4976(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -4852(%rbp)
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_366
	jmp	.LBB270_380
.LBB270_366:                            # %cond.true.1576
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_395
# BB#367:                               # %land.lhs.true.1581
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_395
# BB#368:                               # %land.lhs.true.1587
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_395
# BB#369:                               # %land.lhs.true.1596
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5680(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_395
# BB#370:                               # %land.lhs.true.1603
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5684(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_371
	jmp	.LBB270_376
.LBB270_371:                            # %cond.true.1608
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_378
# BB#372:                               # %land.lhs.true.1613
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_378
# BB#373:                               # %land.lhs.true.1619
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_378
# BB#374:                               # %land.lhs.true.1628
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5696(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_378
# BB#375:                               # %land.lhs.true.1635
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_377
	jmp	.LBB270_378
.LBB270_376:                            # %cond.false.1642
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_377
	jmp	.LBB270_378
.LBB270_377:                            # %cond.true.1643
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5700(%rbp)       # 4-byte Spill
	jmp	.LBB270_379
.LBB270_378:                            # %cond.false.1648
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5700(%rbp)       # 4-byte Spill
.LBB270_379:                            # %cond.end.1652
	movl	-5700(%rbp), %eax       # 4-byte Reload
	movl	-5684(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB270_381
	jmp	.LBB270_395
.LBB270_380:                            # %cond.false.1656
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_381
	jmp	.LBB270_395
.LBB270_381:                            # %cond.true.1657
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB270_383
# BB#382:                               # %cond.true.1661
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5704(%rbp)       # 4-byte Spill
	jmp	.LBB270_394
.LBB270_383:                            # %cond.false.1663
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_386
# BB#384:                               # %land.lhs.true.1666
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_386
# BB#385:                               # %cond.true.1670
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB270_387
	jmp	.LBB270_392
.LBB270_386:                            # %cond.false.1675
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_387
	jmp	.LBB270_392
.LBB270_387:                            # %cond.true.1676
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_390
# BB#388:                               # %land.lhs.true.1679
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_390
# BB#389:                               # %cond.true.1683
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5708(%rbp)       # 4-byte Spill
	jmp	.LBB270_391
.LBB270_390:                            # %cond.false.1687
	xorl	%eax, %eax
	movl	%eax, -5708(%rbp)       # 4-byte Spill
	jmp	.LBB270_391
.LBB270_391:                            # %cond.end.1688
	movl	-5708(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5712(%rbp)       # 4-byte Spill
	jmp	.LBB270_393
.LBB270_392:                            # %cond.false.1690
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5712(%rbp)       # 4-byte Spill
.LBB270_393:                            # %cond.end.1694
	movl	-5712(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5704(%rbp)       # 4-byte Spill
.LBB270_394:                            # %cond.end.1697
	movl	-5704(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5716(%rbp)       # 4-byte Spill
	jmp	.LBB270_396
.LBB270_395:                            # %cond.false.1699
	xorl	%eax, %eax
	movl	%eax, -5716(%rbp)       # 4-byte Spill
	jmp	.LBB270_396
.LBB270_396:                            # %cond.end.1700
	movl	-5716(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4856(%rbp)
	movl	-2508(%rbp), %eax
	subl	-4852(%rbp), %eax
	movl	%eax, -4840(%rbp)
	movl	-4852(%rbp), %eax
	subl	-4856(%rbp), %eax
	movl	%eax, -4988(%rbp)
	cmpl	$0, -4840(%rbp)
	je	.LBB270_398
# BB#397:                               # %if.then.1712
	movq	-24(%rbp), %rdi
	callq	update_begin
	movq	-24(%rbp), %rdi
	movq	376(%rdi), %rdi
	movq	112(%rdi), %rdi
	movq	56(%rdi), %rdi
	movq	-16(%rbp), %rax
	movq	%rdi, -5728(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-5728(%rbp), %rax       # 8-byte Reload
	callq	*%rax
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	80(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	leaq	-4856(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	64(%rax), %rax
	movq	-16(%rbp), %rdi
	movl	%ecx, %esi
	movl	%ecx, %edx
	callq	*%rax
	movq	-24(%rbp), %rdi
	callq	update_end
.LBB270_398:                            # %if.end.1725
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -5736(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_399
	jmp	.LBB270_405
.LBB270_399:                            # %cond.true.1735
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5737(%rbp)        # 1-byte Spill
	jne	.LBB270_404
# BB#400:                               # %land.lhs.true.1740
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -5737(%rbp)        # 1-byte Spill
	jne	.LBB270_404
# BB#401:                               # %land.lhs.true.1746
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -5737(%rbp)        # 1-byte Spill
	je	.LBB270_404
# BB#402:                               # %land.lhs.true.1755
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5752(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-5752(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -5737(%rbp)        # 1-byte Spill
	je	.LBB270_404
# BB#403:                               # %land.rhs.1762
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -5737(%rbp)        # 1-byte Spill
.LBB270_404:                            # %land.end.1769
	movb	-5737(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -5756(%rbp)       # 4-byte Spill
	jmp	.LBB270_406
.LBB270_405:                            # %cond.false.1771
	xorl	%eax, %eax
	movl	%eax, -5756(%rbp)       # 4-byte Spill
	jmp	.LBB270_406
.LBB270_406:                            # %cond.end.1772
	movl	-5756(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rdx
	movq	80(%rdx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_407
	jmp	.LBB270_421
.LBB270_407:                            # %cond.true.1782
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_436
# BB#408:                               # %land.lhs.true.1787
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_436
# BB#409:                               # %land.lhs.true.1793
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_436
# BB#410:                               # %land.lhs.true.1802
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -5768(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5768(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_436
# BB#411:                               # %land.lhs.true.1809
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -5772(%rbp)       # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB270_412
	jmp	.LBB270_417
.LBB270_412:                            # %cond.true.1814
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_419
# BB#413:                               # %land.lhs.true.1819
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB270_419
# BB#414:                               # %land.lhs.true.1825
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_419
# BB#415:                               # %land.lhs.true.1834
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -5784(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5784(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_419
# BB#416:                               # %land.lhs.true.1841
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB270_418
	jmp	.LBB270_419
.LBB270_417:                            # %cond.false.1848
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_418
	jmp	.LBB270_419
.LBB270_418:                            # %cond.true.1849
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -5788(%rbp)       # 4-byte Spill
	jmp	.LBB270_420
.LBB270_419:                            # %cond.false.1854
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -5788(%rbp)       # 4-byte Spill
.LBB270_420:                            # %cond.end.1858
	movl	-5788(%rbp), %eax       # 4-byte Reload
	movl	-5772(%rbp), %ecx       # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB270_422
	jmp	.LBB270_436
.LBB270_421:                            # %cond.false.1862
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_422
	jmp	.LBB270_436
.LBB270_422:                            # %cond.true.1863
	movq	-16(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB270_424
# BB#423:                               # %cond.true.1867
	movq	-16(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -5792(%rbp)       # 4-byte Spill
	jmp	.LBB270_435
.LBB270_424:                            # %cond.false.1869
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_427
# BB#425:                               # %land.lhs.true.1872
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_427
# BB#426:                               # %cond.true.1876
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB270_428
	jmp	.LBB270_433
.LBB270_427:                            # %cond.false.1881
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB270_428
	jmp	.LBB270_433
.LBB270_428:                            # %cond.true.1882
	movq	-16(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB270_431
# BB#429:                               # %land.lhs.true.1885
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB270_431
# BB#430:                               # %cond.true.1889
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -5796(%rbp)       # 4-byte Spill
	jmp	.LBB270_432
.LBB270_431:                            # %cond.false.1893
	xorl	%eax, %eax
	movl	%eax, -5796(%rbp)       # 4-byte Spill
	jmp	.LBB270_432
.LBB270_432:                            # %cond.end.1894
	movl	-5796(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5800(%rbp)       # 4-byte Spill
	jmp	.LBB270_434
.LBB270_433:                            # %cond.false.1896
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -5800(%rbp)       # 4-byte Spill
.LBB270_434:                            # %cond.end.1900
	movl	-5800(%rbp), %eax       # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -5792(%rbp)       # 4-byte Spill
.LBB270_435:                            # %cond.end.1903
	movl	-5792(%rbp), %eax       # 4-byte Reload
	movl	%eax, -5804(%rbp)       # 4-byte Spill
	jmp	.LBB270_437
.LBB270_436:                            # %cond.false.1905
	xorl	%eax, %eax
	movl	%eax, -5804(%rbp)       # 4-byte Spill
	jmp	.LBB270_437
.LBB270_437:                            # %cond.end.1906
	movl	-5804(%rbp), %eax       # 4-byte Reload
	movl	%eax, -4928(%rbp)
	movl	-2508(%rbp), %eax
	movl	%eax, -4932(%rbp)
	movq	-4976(%rbp), %rcx
	movq	%rcx, -4968(%rbp)
.LBB270_438:                            # %for.cond.1909
                                        # =>This Inner Loop Header: Depth=1
	movq	-4968(%rbp), %rax
	cmpq	-4984(%rbp), %rax
	jae	.LBB270_447
# BB#439:                               # %for.body.1912
                                        #   in Loop: Header=BB270_438 Depth=1
	movl	-4988(%rbp), %eax
	movq	-4968(%rbp), %rcx
	movl	48(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 48(%rcx)
	movq	-4968(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-4968(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	-4968(%rbp), %rcx
	movl	48(%rcx), %eax
	cmpl	-4928(%rbp), %eax
	jge	.LBB270_441
# BB#440:                               # %if.then.1920
                                        #   in Loop: Header=BB270_438 Depth=1
	movl	-4928(%rbp), %eax
	movq	-4968(%rbp), %rcx
	subl	48(%rcx), %eax
	movq	-4968(%rbp), %rcx
	movl	72(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 72(%rcx)
.LBB270_441:                            # %if.end.1925
                                        #   in Loop: Header=BB270_438 Depth=1
	movq	-4968(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4968(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-4932(%rbp), %ecx
	jle	.LBB270_443
# BB#442:                               # %if.then.1931
                                        #   in Loop: Header=BB270_438 Depth=1
	movq	-4968(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-4968(%rbp), %rax
	addl	60(%rax), %ecx
	subl	-4932(%rbp), %ecx
	movq	-4968(%rbp), %rax
	movl	72(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 72(%rax)
.LBB270_443:                            # %if.end.1938
                                        #   in Loop: Header=BB270_438 Depth=1
	movq	-4968(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$8, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB270_445
# BB#444:                               # %if.then.1944
                                        #   in Loop: Header=BB270_438 Depth=1
	movq	-4968(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-513, %rcx             # imm = 0xFFFFFFFFFFFFFDFF
	orq	$512, %rcx              # imm = 0x200
	movq	%rcx, 236(%rax)
.LBB270_445:                            # %if.end.1949
                                        #   in Loop: Header=BB270_438 Depth=1
	jmp	.LBB270_446
.LBB270_446:                            # %for.inc.1950
                                        #   in Loop: Header=BB270_438 Depth=1
	movq	-4968(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4968(%rbp)
	jmp	.LBB270_438
.LBB270_447:                            # %for.end.1952
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rdi
	movl	-4924(%rbp), %esi
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	8(%rdx), %rdx
	subq	%rdx, %rcx
	sarq	$8, %rcx
	movl	%ecx, %r8d
	subl	-4892(%rbp), %eax
	movl	%r8d, %edx
	movl	%eax, %ecx
	callq	rotate_matrix
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	-4892(%rbp), %eax
	movq	-4968(%rbp), %r9
	movslq	%eax, %r10
	subq	%r10, %rdi
	shlq	$8, %rdi
	addq	%rdi, %r9
	movq	%r9, -4968(%rbp)
.LBB270_448:                            # %for.cond.1965
                                        # =>This Inner Loop Header: Depth=1
	movq	-4968(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB270_451
# BB#449:                               # %for.body.1968
                                        #   in Loop: Header=BB270_448 Depth=1
	movq	-4968(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
# BB#450:                               # %for.inc.1972
                                        #   in Loop: Header=BB270_448 Depth=1
	movq	-4968(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4968(%rbp)
	jmp	.LBB270_448
.LBB270_451:                            # %for.end.1974
	cmpq	$0, -4960(%rbp)
	je	.LBB270_475
# BB#452:                               # %if.then.1976
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -4968(%rbp)
.LBB270_453:                            # %for.cond.1983
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4968(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -5805(%rbp)        # 1-byte Spill
	jae	.LBB270_456
# BB#454:                               # %land.lhs.true.1986
                                        #   in Loop: Header=BB270_453 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movq	-4968(%rbp), %rsi
	cmpq	192(%rsi), %rdx
	movb	%cl, -5805(%rbp)        # 1-byte Spill
	jl	.LBB270_456
# BB#455:                               # %land.rhs.1993
                                        #   in Loop: Header=BB270_453 Depth=1
	movq	-4968(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	%cl, -5805(%rbp)        # 1-byte Spill
.LBB270_456:                            # %land.end.2000
                                        #   in Loop: Header=BB270_453 Depth=1
	movb	-5805(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB270_457
	jmp	.LBB270_459
.LBB270_457:                            # %for.body.2002
                                        #   in Loop: Header=BB270_453 Depth=1
	movq	-16(%rbp), %rax
	movl	364(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 364(%rax)
	movq	-4968(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 356(%rax)
# BB#458:                               # %for.inc.2009
                                        #   in Loop: Header=BB270_453 Depth=1
	movq	-4968(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -4968(%rbp)
	jmp	.LBB270_453
.LBB270_459:                            # %for.end.2011
	movq	-4968(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB270_474
# BB#460:                               # %if.then.2014
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	240(%rax), %rax
	movq	%rax, -5816(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5816(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB270_464
# BB#461:                               # %if.then.2020
	xorl	%eax, %eax
	movl	%eax, %ecx
	xorl	%r9d, %r9d
	movq	-16(%rbp), %rdi
	movq	-4968(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	192(%rdx), %rdx
	movq	%rcx, -5824(%rbp)       # 8-byte Spill
	movq	-5824(%rbp), %r8        # 8-byte Reload
	movl	$0, (%rsp)
	callq	set_cursor_from_row
	testb	$1, %al
	jne	.LBB270_463
# BB#462:                               # %if.then.2023
	movq	-16(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movb	$0, -1(%rbp)
	jmp	.LBB270_481
.LBB270_463:                            # %if.end.2025
	jmp	.LBB270_473
.LBB270_464:                            # %if.else.2026
	movq	-4968(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	360(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -5000(%rbp)
	movq	-4968(%rbp), %rax
	movq	8(%rax), %rax
	movq	-4968(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -5008(%rbp)
.LBB270_465:                            # %for.cond.2036
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-5000(%rbp), %rdx
	cmpq	-5008(%rbp), %rdx
	movb	%cl, -5825(%rbp)        # 1-byte Spill
	jae	.LBB270_469
# BB#466:                               # %land.rhs.2039
                                        #   in Loop: Header=BB270_465 Depth=1
	movq	-5000(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	movb	$1, %cl
	testb	$1, %al
	movb	%cl, -5826(%rbp)        # 1-byte Spill
	jne	.LBB270_467
	jmp	.LBB270_468
.LBB270_467:                            # %lor.rhs.2041
                                        #   in Loop: Header=BB270_465 Depth=1
	movq	-5000(%rbp), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	setl	%dl
	movb	%dl, -5826(%rbp)        # 1-byte Spill
.LBB270_468:                            # %lor.end.2047
                                        #   in Loop: Header=BB270_465 Depth=1
	movb	-5826(%rbp), %al        # 1-byte Reload
	movb	%al, -5825(%rbp)        # 1-byte Spill
.LBB270_469:                            # %land.end.2048
                                        #   in Loop: Header=BB270_465 Depth=1
	movb	-5825(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB270_470
	jmp	.LBB270_472
.LBB270_470:                            # %for.body.2050
                                        #   in Loop: Header=BB270_465 Depth=1
	movq	-16(%rbp), %rax
	movl	360(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 360(%rax)
	movq	-5000(%rbp), %rax
	movswl	16(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	352(%rax), %ecx
	movl	%ecx, 352(%rax)
# BB#471:                               # %for.inc.2057
                                        #   in Loop: Header=BB270_465 Depth=1
	movq	-5000(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -5000(%rbp)
	jmp	.LBB270_465
.LBB270_472:                            # %for.end.2059
	jmp	.LBB270_473
.LBB270_473:                            # %if.end.2060
	jmp	.LBB270_474
.LBB270_474:                            # %if.end.2061
	jmp	.LBB270_475
.LBB270_475:                            # %if.end.2062
	cmpq	$0, -4904(%rbp)
	je	.LBB270_477
# BB#476:                               # %if.then.2064
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movq	-4904(%rbp), %rsi
	callq	adjust_window_ends
	jmp	.LBB270_478
.LBB270_477:                            # %if.else.2065
	movl	-4892(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	464(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 464(%rcx)
.LBB270_478:                            # %if.end.2068
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$-8193, %cx             # imm = 0xFFFFFFFFFFFFDFFF
	movw	%cx, 468(%rax)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movb	72(%rax), %dl
	andb	$-2, %dl
	orb	$1, %dl
	movb	%dl, 72(%rax)
	movb	$1, -1(%rbp)
	jmp	.LBB270_481
.LBB270_479:                            # %if.end.2077
	jmp	.LBB270_480
.LBB270_480:                            # %if.end.2078
	movb	$0, -1(%rbp)
.LBB270_481:                            # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$5840, %rsp             # imm = 0x16D0
	popq	%rbp
	retq
.Lfunc_end270:
	.size	try_window_reusing_current_matrix, .Lfunc_end270-try_window_reusing_current_matrix
	.cfi_endproc

	.align	16, 0x90
	.type	try_scrolling,@function
try_scrolling:                          # @try_scrolling
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp832:
	.cfi_def_cfa_offset 16
.Ltmp833:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp834:
	.cfi_def_cfa_register %rbp
	subq	$10432, %rsp            # imm = 0x28C0
	movb	%r9b, %al
	movb	%r8b, %r10b
	movb	%sil, %r11b
	movq	%rdi, -16(%rbp)
	andb	$1, %r11b
	movb	%r11b, -17(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	andb	$1, %r10b
	movb	%r10b, -41(%rbp)
	andb	$1, %al
	movb	%al, -42(%rbp)
	movq	-16(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4916(%rbp)
	movl	$0, -4920(%rbp)
	movb	$0, -4921(%rbp)
	movb	-42(%rbp), %r10b
	andb	$1, %r10b
	movzbl	%r10b, %esi
	movl	%esi, -4928(%rbp)
	movl	$100, -4940(%rbp)
	movq	-56(%rbp), %rdi
	callq	default_line_pixel_height
	movl	%eax, -4944(%rbp)
	movq	-56(%rbp), %rcx
	movl	268(%rcx), %eax
	movq	-64(%rbp), %rcx
	imull	368(%rcx), %eax
	cltd
	idivl	-4944(%rbp)
	movl	%eax, -4948(%rbp)
	movq	-56(%rbp), %rcx
	movq	88(%rcx), %rdi
	callq	marker_position
	movq	%rax, -96(%rbp)
	movq	-56(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -88(%rbp)
	cmpq	$0, globals+3264
	jle	.LBB271_5
# BB#1:                                 # %if.then
	movl	$4, %eax
	movq	globals+3264, %rcx
	movl	-4948(%rbp), %edx
	movl	%eax, -9868(%rbp)       # 4-byte Spill
	movl	%edx, %eax
	cltd
	movl	-9868(%rbp), %esi       # 4-byte Reload
	idivl	%esi
	movslq	%eax, %rdi
	cmpq	%rdi, %rcx
	jge	.LBB271_3
# BB#2:                                 # %cond.true
	movq	globals+3264, %rax
	movq	%rax, -9880(%rbp)       # 8-byte Spill
	jmp	.LBB271_4
.LBB271_3:                              # %cond.false
	movl	$4, %eax
	movl	-4948(%rbp), %ecx
	movl	%eax, -9884(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-9884(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movslq	%eax, %rsi
	movq	%rsi, -9880(%rbp)       # 8-byte Spill
.LBB271_4:                              # %cond.end
	movq	-9880(%rbp), %rax       # 8-byte Reload
	movslq	-4944(%rbp), %rcx
	imulq	%rcx, %rax
	movl	%eax, %edx
	movl	%edx, -4900(%rbp)
	jmp	.LBB271_6
.LBB271_5:                              # %if.else
	movl	$0, -4900(%rbp)
.LBB271_6:                              # %if.end
	movq	-32(%rbp), %rax
	movslq	-4940(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB271_8
# BB#7:                                 # %if.then.20
	movl	-4940(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movq	%rcx, -32(%rbp)
	movl	-4940(%rbp), %eax
	imull	-4944(%rbp), %eax
	movl	%eax, -4904(%rbp)
	jmp	.LBB271_27
.LBB271_8:                              # %if.else.23
	cmpq	$0, -40(%rbp)
	jne	.LBB271_11
# BB#9:                                 # %lor.lhs.false
	cmpq	$0, -32(%rbp)
	jne	.LBB271_11
# BB#10:                                # %lor.lhs.false.26
	testb	$1, -41(%rbp)
	je	.LBB271_21
.LBB271_11:                             # %if.then.29
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	movb	-41(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	%esi, %edi
	cmpq	%rdi, %rcx
	movq	%rax, -9896(%rbp)       # 8-byte Spill
	jle	.LBB271_13
# BB#12:                                # %cond.true.34
	movq	-32(%rbp), %rax
	movq	%rax, -9904(%rbp)       # 8-byte Spill
	jmp	.LBB271_14
.LBB271_13:                             # %cond.false.35
	movb	-41(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	%rdx, -9904(%rbp)       # 8-byte Spill
.LBB271_14:                             # %cond.end.38
	movq	-9904(%rbp), %rax       # 8-byte Reload
	movq	-9896(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jle	.LBB271_16
# BB#15:                                # %cond.true.42
	movq	-40(%rbp), %rax
	movq	%rax, -9912(%rbp)       # 8-byte Spill
	jmp	.LBB271_20
.LBB271_16:                             # %cond.false.43
	movq	-32(%rbp), %rax
	movb	-41(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	cmpq	%rsi, %rax
	jle	.LBB271_18
# BB#17:                                # %cond.true.48
	movq	-32(%rbp), %rax
	movq	%rax, -9920(%rbp)       # 8-byte Spill
	jmp	.LBB271_19
.LBB271_18:                             # %cond.false.49
	movb	-41(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	%rdx, -9920(%rbp)       # 8-byte Spill
.LBB271_19:                             # %cond.end.52
	movq	-9920(%rbp), %rax       # 8-byte Reload
	movq	%rax, -9912(%rbp)       # 8-byte Spill
.LBB271_20:                             # %cond.end.54
	movq	-9912(%rbp), %rax       # 8-byte Reload
	movslq	-4944(%rbp), %rcx
	imulq	%rcx, %rax
	movl	%eax, %edx
	movl	%edx, -4904(%rbp)
	jmp	.LBB271_26
.LBB271_21:                             # %if.else.59
	movq	current_buffer, %rax
	movq	544(%rax), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB271_23
# BB#22:                                # %lor.lhs.false.62
	movq	current_buffer, %rax
	movq	536(%rax), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB271_23
	jmp	.LBB271_24
.LBB271_23:                             # %if.then.65
	imull	$10, -4944(%rbp), %eax
	movl	%eax, -4904(%rbp)
	jmp	.LBB271_25
.LBB271_24:                             # %if.else.67
	movl	$0, -4904(%rbp)
.LBB271_25:                             # %if.end.68
	jmp	.LBB271_26
.LBB271_26:                             # %if.end.69
	jmp	.LBB271_27
.LBB271_27:                             # %if.end.70
	jmp	.LBB271_28
.LBB271_28:                             # %too_near_end
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_152 Depth 2
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-96(%rbp), %rax
	jle	.LBB271_39
# BB#29:                                # %if.then.75
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	callq	start_display
	leaq	-4896(%rbp), %rdi
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	$10, %r9d
	movl	-2572(%rbp), %r8d
	subl	-4900(%rbp), %r8d
	movl	-4944(%rbp), %r10d
	imull	-4928(%rbp), %r10d
	subl	%r10d, %r8d
	movl	%r8d, -4952(%rbp)
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movl	-4952(%rbp), %r8d
	subl	$1, %r8d
	movq	%rcx, %rsi
	movl	%eax, %edx
	movl	%r8d, %ecx
	movl	%eax, %r8d
	callq	move_it_to
	movq	current_buffer, %rsi
	movq	736(%rsi), %rsi
	addq	$0, %rsi
	cmpq	-4584(%rbp), %rsi
	movl	%eax, -9924(%rbp)       # 4-byte Spill
	jle	.LBB271_38
# BB#30:                                # %if.then.89
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	callq	line_bottom_y
	movl	%eax, -4956(%rbp)
	movl	-4904(%rbp), %eax
	imull	$10, -4944(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB271_32
# BB#31:                                # %cond.true.94
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4904(%rbp), %eax
	movl	%eax, -9928(%rbp)       # 4-byte Spill
	jmp	.LBB271_33
.LBB271_32:                             # %cond.false.95
                                        #   in Loop: Header=BB271_28 Depth=1
	imull	$10, -4944(%rbp), %eax
	movl	%eax, -9928(%rbp)       # 4-byte Spill
.LBB271_33:                             # %cond.end.97
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-9928(%rbp), %eax       # 4-byte Reload
	leaq	-4896(%rbp), %rdi
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$10, %r9d
	movl	%eax, -4960(%rbp)
	movl	-2572(%rbp), %eax
	addl	-4960(%rbp), %eax
	movl	%eax, -4964(%rbp)
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movl	-4964(%rbp), %eax
	movq	%rdx, %rsi
	movl	%ecx, %edx
	movl	%ecx, -9932(%rbp)       # 4-byte Spill
	movl	%eax, %ecx
	movl	-9932(%rbp), %r8d       # 4-byte Reload
	callq	move_it_to
	leaq	-4896(%rbp), %rdi
	movl	%eax, -9936(%rbp)       # 4-byte Spill
	callq	line_bottom_y
	subl	-4956(%rbp), %eax
	movl	%eax, -4916(%rbp)
	movl	-4916(%rbp), %eax
	cmpl	-4904(%rbp), %eax
	jle	.LBB271_35
# BB#34:                                # %if.then.108
	movl	$1, -4(%rbp)
	jmp	.LBB271_305
.LBB271_35:                             # %if.end.109
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpl	$0, -4916(%rbp)
	jle	.LBB271_37
# BB#36:                                # %if.then.112
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	$1, -4921(%rbp)
.LBB271_37:                             # %if.end.113
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_38
.LBB271_38:                             # %if.end.114
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_39
.LBB271_39:                             # %if.end.115
                                        #   in Loop: Header=BB271_28 Depth=1
	testb	$1, -4921(%rbp)
	je	.LBB271_166
# BB#40:                                # %if.then.117
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpq	$0, -32(%rbp)
	je	.LBB271_51
# BB#41:                                # %if.then.119
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4916(%rbp), %eax
	cmpl	-4944(%rbp), %eax
	jle	.LBB271_43
# BB#42:                                # %cond.true.122
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4916(%rbp), %eax
	movl	%eax, -9940(%rbp)       # 4-byte Spill
	jmp	.LBB271_44
.LBB271_43:                             # %cond.false.123
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4944(%rbp), %eax
	movl	%eax, -9940(%rbp)       # 4-byte Spill
.LBB271_44:                             # %cond.end.124
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-9940(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	movslq	-4944(%rbp), %rdx
	imulq	-32(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB271_49
# BB#45:                                # %cond.true.131
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4916(%rbp), %eax
	cmpl	-4944(%rbp), %eax
	jle	.LBB271_47
# BB#46:                                # %cond.true.134
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4916(%rbp), %eax
	movl	%eax, -9944(%rbp)       # 4-byte Spill
	jmp	.LBB271_48
.LBB271_47:                             # %cond.false.135
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4944(%rbp), %eax
	movl	%eax, -9944(%rbp)       # 4-byte Spill
.LBB271_48:                             # %cond.end.136
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-9944(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -9952(%rbp)       # 8-byte Spill
	jmp	.LBB271_50
.LBB271_49:                             # %cond.false.139
                                        #   in Loop: Header=BB271_28 Depth=1
	movslq	-4944(%rbp), %rax
	imulq	-32(%rbp), %rax
	movq	%rax, -9952(%rbp)       # 8-byte Spill
.LBB271_50:                             # %cond.end.142
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-9952(%rbp), %rax       # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -4920(%rbp)
	jmp	.LBB271_143
.LBB271_51:                             # %if.else.145
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpq	$0, -40(%rbp)
	jne	.LBB271_53
# BB#52:                                # %lor.lhs.false.147
                                        #   in Loop: Header=BB271_28 Depth=1
	testb	$1, -41(%rbp)
	je	.LBB271_54
.LBB271_53:                             # %if.then.150
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4904(%rbp), %eax
	movl	%eax, -4920(%rbp)
	jmp	.LBB271_142
.LBB271_54:                             # %if.else.151
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	current_buffer, %rax
	movq	536(%rax), %rax
	movq	%rax, -4936(%rbp)
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movl	244(%rax), %edx
	movq	-56(%rbp), %rax
	addl	260(%rax), %edx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -9956(%rbp)       # 4-byte Spill
	movl	%edx, -9960(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -9964(%rbp)       # 4-byte Spill
	callq	XWINDOW
	movl	-9964(%rbp), %ecx       # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-9960(%rbp), %edx       # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB271_56
# BB#55:                                # %land.lhs.true
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -9976(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9976(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_58
.LBB271_56:                             # %lor.lhs.false.174
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB271_58
# BB#57:                                # %lor.lhs.false.180
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB271_59
.LBB271_58:                             # %cond.true.182
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -9980(%rbp)       # 4-byte Spill
	jmp	.LBB271_60
.LBB271_59:                             # %cond.false.183
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -9980(%rbp)       # 4-byte Spill
.LBB271_60:                             # %cond.end.186
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-9980(%rbp), %eax       # 4-byte Reload
	movl	-9956(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -9984(%rbp)       # 4-byte Spill
	jne	.LBB271_63
# BB#61:                                # %lor.lhs.false.195
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB271_64
# BB#62:                                # %land.lhs.true.200
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB271_64
.LBB271_63:                             # %cond.true.207
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_69
	jmp	.LBB271_73
.LBB271_64:                             # %cond.false.208
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -9992(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB271_66
# BB#65:                                # %cond.true.212
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB271_69
	jmp	.LBB271_73
.LBB271_66:                             # %cond.false.220
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$213, %edi
	movq	-56(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -10000(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10000(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB271_68
# BB#67:                                # %cond.true.225
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB271_69
	jmp	.LBB271_73
.LBB271_68:                             # %cond.false.226
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_69
	jmp	.LBB271_73
.LBB271_69:                             # %cond.true.227
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB271_71
# BB#70:                                # %cond.true.230
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -10004(%rbp)      # 4-byte Spill
	jmp	.LBB271_72
.LBB271_71:                             # %cond.false.232
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -10004(%rbp)      # 4-byte Spill
.LBB271_72:                             # %cond.end.235
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10004(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10008(%rbp)      # 4-byte Spill
	jmp	.LBB271_74
.LBB271_73:                             # %cond.false.237
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10008(%rbp)      # 4-byte Spill
	jmp	.LBB271_74
.LBB271_74:                             # %cond.end.238
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10008(%rbp), %eax      # 4-byte Reload
	movl	-9984(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -10012(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB271_75
	jmp	.LBB271_80
.LBB271_75:                             # %cond.true.243
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_102
# BB#76:                                # %land.lhs.true.248
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_102
# BB#77:                                # %land.lhs.true.254
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB271_102
# BB#78:                                # %land.lhs.true.262
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10024(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10024(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_102
# BB#79:                                # %land.lhs.true.268
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB271_81
	jmp	.LBB271_102
.LBB271_80:                             # %cond.false.275
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_81
	jmp	.LBB271_102
.LBB271_81:                             # %cond.true.276
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB271_83
# BB#82:                                # %cond.true.279
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -10028(%rbp)      # 4-byte Spill
	jmp	.LBB271_101
.LBB271_83:                             # %cond.false.281
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_86
# BB#84:                                # %land.lhs.true.283
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_86
# BB#85:                                # %cond.true.286
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB271_87
	jmp	.LBB271_92
.LBB271_86:                             # %cond.false.293
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_87
	jmp	.LBB271_92
.LBB271_87:                             # %cond.true.294
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_90
# BB#88:                                # %land.lhs.true.297
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_90
# BB#89:                                # %cond.true.301
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -10032(%rbp)      # 4-byte Spill
	jmp	.LBB271_91
.LBB271_90:                             # %cond.false.310
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10032(%rbp)      # 4-byte Spill
	jmp	.LBB271_91
.LBB271_91:                             # %cond.end.311
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10032(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10036(%rbp)      # 4-byte Spill
	jmp	.LBB271_100
.LBB271_92:                             # %cond.false.313
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	$1, %al
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -10048(%rbp)      # 8-byte Spill
	movb	%al, -10049(%rbp)       # 1-byte Spill
	je	.LBB271_99
# BB#93:                                # %lor.lhs.false.317
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -10064(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-10064(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -10049(%rbp)       # 1-byte Spill
	je	.LBB271_99
# BB#94:                                # %lor.rhs
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -10065(%rbp)       # 1-byte Spill
	jle	.LBB271_98
# BB#95:                                # %land.lhs.true.323
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -10080(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -10065(%rbp)       # 1-byte Spill
	je	.LBB271_98
# BB#96:                                # %land.lhs.true.327
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -10088(%rbp)      # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-10088(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -10065(%rbp)       # 1-byte Spill
	jne	.LBB271_98
# BB#97:                                # %land.rhs
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -10096(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-10096(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -10065(%rbp)       # 1-byte Spill
.LBB271_98:                             # %land.end
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	-10065(%rbp), %al       # 1-byte Reload
	movb	%al, -10049(%rbp)       # 1-byte Spill
.LBB271_99:                             # %lor.end
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	-10049(%rbp), %al       # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-10048(%rbp), %rdi      # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -10036(%rbp)      # 4-byte Spill
.LBB271_100:                            # %cond.end.337
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10036(%rbp), %eax      # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -10028(%rbp)      # 4-byte Spill
.LBB271_101:                            # %cond.end.340
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10028(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10100(%rbp)      # 4-byte Spill
	jmp	.LBB271_103
.LBB271_102:                            # %cond.false.342
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10100(%rbp)      # 4-byte Spill
	jmp	.LBB271_103
.LBB271_103:                            # %cond.end.343
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10100(%rbp), %eax      # 4-byte Reload
	movl	-10012(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -10104(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB271_104
	jmp	.LBB271_118
.LBB271_104:                            # %cond.true.349
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_133
# BB#105:                               # %land.lhs.true.354
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_133
# BB#106:                               # %land.lhs.true.360
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB271_133
# BB#107:                               # %land.lhs.true.369
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -10112(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10112(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_133
# BB#108:                               # %land.lhs.true.375
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -10116(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB271_109
	jmp	.LBB271_114
.LBB271_109:                            # %cond.true.380
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_116
# BB#110:                               # %land.lhs.true.385
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_116
# BB#111:                               # %land.lhs.true.391
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB271_116
# BB#112:                               # %land.lhs.true.400
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10128(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10128(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_116
# BB#113:                               # %land.lhs.true.407
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB271_115
	jmp	.LBB271_116
.LBB271_114:                            # %cond.false.414
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_115
	jmp	.LBB271_116
.LBB271_115:                            # %cond.true.415
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -10132(%rbp)      # 4-byte Spill
	jmp	.LBB271_117
.LBB271_116:                            # %cond.false.420
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -10132(%rbp)      # 4-byte Spill
.LBB271_117:                            # %cond.end.424
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10132(%rbp), %eax      # 4-byte Reload
	movl	-10116(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB271_119
	jmp	.LBB271_133
.LBB271_118:                            # %cond.false.428
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_119
	jmp	.LBB271_133
.LBB271_119:                            # %cond.true.429
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB271_121
# BB#120:                               # %cond.true.432
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -10136(%rbp)      # 4-byte Spill
	jmp	.LBB271_132
.LBB271_121:                            # %cond.false.434
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_124
# BB#122:                               # %land.lhs.true.437
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_124
# BB#123:                               # %cond.true.441
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB271_125
	jmp	.LBB271_130
.LBB271_124:                            # %cond.false.446
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_125
	jmp	.LBB271_130
.LBB271_125:                            # %cond.true.447
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_128
# BB#126:                               # %land.lhs.true.450
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_128
# BB#127:                               # %cond.true.454
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -10140(%rbp)      # 4-byte Spill
	jmp	.LBB271_129
.LBB271_128:                            # %cond.false.458
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10140(%rbp)      # 4-byte Spill
	jmp	.LBB271_129
.LBB271_129:                            # %cond.end.459
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10140(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10144(%rbp)      # 4-byte Spill
	jmp	.LBB271_131
.LBB271_130:                            # %cond.false.461
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$5, %esi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -10144(%rbp)      # 4-byte Spill
.LBB271_131:                            # %cond.end.465
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10144(%rbp), %eax      # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -10136(%rbp)      # 4-byte Spill
.LBB271_132:                            # %cond.end.468
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10136(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10148(%rbp)      # 4-byte Spill
	jmp	.LBB271_134
.LBB271_133:                            # %cond.false.470
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10148(%rbp)      # 4-byte Spill
	jmp	.LBB271_134
.LBB271_134:                            # %cond.end.471
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10148(%rbp), %eax      # 4-byte Reload
	movl	-10104(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -4912(%rbp)
	movq	-4936(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB271_135
	jmp	.LBB271_141
.LBB271_135:                            # %if.then.475
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-4936(%rbp), %rdi
	callq	XFLOATINT
	cvtsi2sdl	-4912(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, -4976(%rbp)
	cvttsd2si	-4976(%rbp), %eax
	movl	%eax, -4980(%rbp)
	cmpl	$0, -4980(%rbp)
	jne	.LBB271_138
# BB#136:                               # %land.lhs.true.482
                                        #   in Loop: Header=BB271_28 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-4976(%rbp), %xmm1      # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB271_138
# BB#137:                               # %if.then.485
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$1, -4980(%rbp)
.LBB271_138:                            # %if.end.486
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4980(%rbp), %eax
	movl	-4900(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cmpl	-4912(%rbp), %eax
	jle	.LBB271_140
# BB#139:                               # %if.then.491
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4912(%rbp), %eax
	movl	-4900(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -4980(%rbp)
.LBB271_140:                            # %if.end.494
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4916(%rbp), %eax
	addl	-4980(%rbp), %eax
	movl	%eax, -4920(%rbp)
.LBB271_141:                            # %if.end.496
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_142
.LBB271_142:                            # %if.end.497
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_143
.LBB271_143:                            # %if.end.498
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpl	$0, -4920(%rbp)
	jg	.LBB271_145
# BB#144:                               # %if.then.501
	movl	$1, -4(%rbp)
	jmp	.LBB271_305
.LBB271_145:                            # %if.end.502
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	callq	start_display
	movq	-32(%rbp), %rcx
	movslq	-4940(%rbp), %rdx
	cmpq	%rdx, %rcx
	jg	.LBB271_147
# BB#146:                               # %if.then.506
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movl	-4920(%rbp), %esi
	callq	move_it_vertically
	jmp	.LBB271_163
.LBB271_147:                            # %if.else.507
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	$0, -9792(%rbp)
# BB#148:                               # %do.body
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpq	$0, -9792(%rbp)
	je	.LBB271_150
# BB#149:                               # %if.then.509
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$1, %esi
	movq	-9792(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB271_150:                            # %if.end.510
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4896(%rbp), %rcx
	leaq	-9784(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -9792(%rbp)
# BB#151:                               # %do.end
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-9784(%rbp), %rdi
	callq	line_bottom_y
	movl	%eax, -9796(%rbp)
.LBB271_152:                            # %do.body.513
                                        #   Parent Loop BB271_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	jmp	.LBB271_153
.LBB271_153:                            # %do.body.514
                                        #   in Loop: Header=BB271_152 Depth=2
	xorl	%esi, %esi
	movq	-9792(%rbp), %rdi
	callq	bidi_unshelve_cache
	movq	$0, -9792(%rbp)
# BB#154:                               # %do.end.515
                                        #   in Loop: Header=BB271_152 Depth=2
	leaq	-4896(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
# BB#155:                               # %do.body.516
                                        #   in Loop: Header=BB271_152 Depth=2
	cmpq	$0, -9792(%rbp)
	je	.LBB271_157
# BB#156:                               # %if.then.518
                                        #   in Loop: Header=BB271_152 Depth=2
	movl	$1, %esi
	movq	-9792(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB271_157:                            # %if.end.519
                                        #   in Loop: Header=BB271_152 Depth=2
	movl	$4800, %eax             # imm = 0x12C0
	movl	%eax, %edx
	leaq	-4896(%rbp), %rcx
	leaq	-9784(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	memcpy
	callq	bidi_shelve_cache
	movq	%rax, -9792(%rbp)
# BB#158:                               # %do.end.521
                                        #   in Loop: Header=BB271_152 Depth=2
	jmp	.LBB271_159
.LBB271_159:                            # %do.cond
                                        #   in Loop: Header=BB271_152 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4584(%rbp), %rdx
	movq	current_buffer, %rsi
	cmpq	768(%rsi), %rdx
	movb	%cl, -10149(%rbp)       # 1-byte Spill
	jge	.LBB271_161
# BB#160:                               # %land.rhs.527
                                        #   in Loop: Header=BB271_152 Depth=2
	leaq	-9784(%rbp), %rdi
	callq	line_bottom_y
	subl	-9796(%rbp), %eax
	cmpl	-4920(%rbp), %eax
	setl	%cl
	movb	%cl, -10149(%rbp)       # 1-byte Spill
.LBB271_161:                            # %land.end.532
                                        #   in Loop: Header=BB271_152 Depth=2
	movb	-10149(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB271_152
# BB#162:                               # %do.end.533
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$1, %esi
	movq	-9792(%rbp), %rdi
	callq	bidi_unshelve_cache
.LBB271_163:                            # %if.end.534
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-4584(%rbp), %rax
	cmpq	-96(%rbp), %rax
	jne	.LBB271_165
# BB#164:                               # %if.then.541
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movl	$1, %eax
	movl	%eax, %esi
	callq	move_it_by_lines
.LBB271_165:                            # %if.end.542
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-4584(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-4576(%rbp), %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB271_291
.LBB271_166:                            # %if.else.545
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-96(%rbp), %rax
	movq	%rax, -9816(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -9808(%rbp)
	movl	$0, -9820(%rbp)
	cmpl	$0, -4900(%rbp)
	je	.LBB271_171
# BB#167:                               # %if.then.547
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	callq	start_display
	leaq	-4896(%rbp), %rdi
	movl	-2464(%rbp), %eax
	movl	%eax, -9824(%rbp)
	movl	-4900(%rbp), %esi
	callq	move_it_vertically
	movq	-4584(%rbp), %rcx
	movq	%rcx, -9816(%rbp)
	movq	-4576(%rbp), %rcx
	movq	%rcx, -9808(%rbp)
	movq	-4584(%rbp), %rcx
	movq	current_buffer, %rdx
	cmpq	768(%rdx), %rcx
	jne	.LBB271_170
# BB#168:                               # %land.lhs.true.556
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-2464(%rbp), %eax
	subl	-9824(%rbp), %eax
	cmpl	-4900(%rbp), %eax
	jge	.LBB271_170
# BB#169:                               # %if.then.561
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4900(%rbp), %eax
	movl	-2464(%rbp), %ecx
	subl	-9824(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -9820(%rbp)
.LBB271_170:                            # %if.end.565
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_171
.LBB271_171:                            # %if.end.566
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	cmpq	-9816(%rbp), %rax
	jge	.LBB271_290
# BB#172:                               # %if.then.572
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -80(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -72(%rbp)
	movq	-56(%rbp), %rsi
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rcx
	callq	start_display
	movl	-2464(%rbp), %r8d
	movl	%r8d, -9828(%rbp)
	movl	-2572(%rbp), %r8d
	movl	-4904(%rbp), %r9d
	imull	$10, -4944(%rbp), %r10d
	cmpl	%r10d, %r9d
	movl	%r8d, -10156(%rbp)      # 4-byte Spill
	jle	.LBB271_174
# BB#173:                               # %cond.true.585
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4904(%rbp), %eax
	movl	%eax, -10160(%rbp)      # 4-byte Spill
	jmp	.LBB271_175
.LBB271_174:                            # %cond.false.586
                                        #   in Loop: Header=BB271_28 Depth=1
	imull	$10, -4944(%rbp), %eax
	movl	%eax, -10160(%rbp)      # 4-byte Spill
.LBB271_175:                            # %cond.end.588
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10160(%rbp), %eax      # 4-byte Reload
	movl	-10156(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jle	.LBB271_177
# BB#176:                               # %cond.true.592
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-2572(%rbp), %eax
	movl	%eax, -10164(%rbp)      # 4-byte Spill
	jmp	.LBB271_181
.LBB271_177:                            # %cond.false.594
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4904(%rbp), %eax
	imull	$10, -4944(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB271_179
# BB#178:                               # %cond.true.598
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4904(%rbp), %eax
	movl	%eax, -10168(%rbp)      # 4-byte Spill
	jmp	.LBB271_180
.LBB271_179:                            # %cond.false.599
                                        #   in Loop: Header=BB271_28 Depth=1
	imull	$10, -4944(%rbp), %eax
	movl	%eax, -10168(%rbp)      # 4-byte Spill
.LBB271_180:                            # %cond.end.601
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10168(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10164(%rbp)      # 4-byte Spill
.LBB271_181:                            # %cond.end.603
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10164(%rbp), %eax      # 4-byte Reload
	leaq	-4896(%rbp), %rdi
	xorl	%edx, %edx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	movl	$11, %r9d
	movl	%eax, -9832(%rbp)
	movq	-9816(%rbp), %rsi
	movl	-9832(%rbp), %ecx
	callq	move_it_to
	movl	-2464(%rbp), %ecx
	subl	-9828(%rbp), %ecx
	movl	%ecx, -4916(%rbp)
	movl	-4916(%rbp), %ecx
	cmpl	-4904(%rbp), %ecx
	movl	%eax, -10172(%rbp)      # 4-byte Spill
	jg	.LBB271_183
# BB#182:                               # %lor.lhs.false.611
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-4584(%rbp), %rax
	cmpq	-9816(%rbp), %rax
	jge	.LBB271_184
.LBB271_183:                            # %if.then.618
	movl	$1, -4(%rbp)
	jmp	.LBB271_305
.LBB271_184:                            # %if.end.619
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movl	-9820(%rbp), %eax
	addl	-4916(%rbp), %eax
	movl	%eax, -4916(%rbp)
	movq	-56(%rbp), %rsi
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	callq	start_display
	cmpq	$0, -32(%rbp)
	je	.LBB271_195
# BB#185:                               # %if.then.622
                                        #   in Loop: Header=BB271_28 Depth=1
	movslq	-4916(%rbp), %rax
	movslq	-4944(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movb	-41(%rbp), %sil
	andb	$1, %sil
	movzbl	%sil, %edi
	movl	%edi, %r8d
	cmpq	%r8, %rdx
	movq	%rax, -10184(%rbp)      # 8-byte Spill
	movq	%rcx, -10192(%rbp)      # 8-byte Spill
	jle	.LBB271_187
# BB#186:                               # %cond.true.629
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -10200(%rbp)      # 8-byte Spill
	jmp	.LBB271_188
.LBB271_187:                            # %cond.false.630
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	-41(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	%rdx, -10200(%rbp)      # 8-byte Spill
.LBB271_188:                            # %cond.end.633
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-10200(%rbp), %rax      # 8-byte Reload
	movq	-10192(%rbp), %rcx      # 8-byte Reload
	imulq	%rax, %rcx
	movq	-10184(%rbp), %rax      # 8-byte Reload
	cmpq	%rcx, %rax
	jle	.LBB271_190
# BB#189:                               # %cond.true.638
                                        #   in Loop: Header=BB271_28 Depth=1
	movslq	-4916(%rbp), %rax
	movq	%rax, -10208(%rbp)      # 8-byte Spill
	jmp	.LBB271_194
.LBB271_190:                            # %cond.false.640
                                        #   in Loop: Header=BB271_28 Depth=1
	movslq	-4944(%rbp), %rax
	movq	-40(%rbp), %rcx
	movb	-41(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	%esi, %edi
	cmpq	%rdi, %rcx
	movq	%rax, -10216(%rbp)      # 8-byte Spill
	jle	.LBB271_192
# BB#191:                               # %cond.true.646
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -10224(%rbp)      # 8-byte Spill
	jmp	.LBB271_193
.LBB271_192:                            # %cond.false.647
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	-41(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	%rdx, -10224(%rbp)      # 8-byte Spill
.LBB271_193:                            # %cond.end.650
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-10224(%rbp), %rax      # 8-byte Reload
	movq	-10216(%rbp), %rcx      # 8-byte Reload
	imulq	%rax, %rcx
	movq	%rcx, -10208(%rbp)      # 8-byte Spill
.LBB271_194:                            # %cond.end.653
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-10208(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -4920(%rbp)
	jmp	.LBB271_287
.LBB271_195:                            # %if.else.656
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpq	$0, -40(%rbp)
	jne	.LBB271_197
# BB#196:                               # %lor.lhs.false.658
                                        #   in Loop: Header=BB271_28 Depth=1
	testb	$1, -41(%rbp)
	je	.LBB271_198
.LBB271_197:                            # %if.then.661
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4904(%rbp), %eax
	movl	%eax, -4920(%rbp)
	jmp	.LBB271_286
.LBB271_198:                            # %if.else.662
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	current_buffer, %rax
	movq	544(%rax), %rax
	movq	%rax, -4936(%rbp)
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movl	244(%rax), %edx
	movq	-56(%rbp), %rax
	addl	260(%rax), %edx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -10228(%rbp)      # 4-byte Spill
	movl	%edx, -10232(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -10236(%rbp)      # 4-byte Spill
	callq	XWINDOW
	movl	-10236(%rbp), %ecx      # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-10232(%rbp), %edx      # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB271_200
# BB#199:                               # %land.lhs.true.681
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -10248(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10248(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_202
.LBB271_200:                            # %lor.lhs.false.690
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB271_202
# BB#201:                               # %lor.lhs.false.697
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB271_203
.LBB271_202:                            # %cond.true.704
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10252(%rbp)      # 4-byte Spill
	jmp	.LBB271_204
.LBB271_203:                            # %cond.false.705
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -10252(%rbp)      # 4-byte Spill
.LBB271_204:                            # %cond.end.709
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10252(%rbp), %eax      # 4-byte Reload
	movl	-10228(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -10256(%rbp)      # 4-byte Spill
	jne	.LBB271_207
# BB#205:                               # %lor.lhs.false.718
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB271_208
# BB#206:                               # %land.lhs.true.724
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB271_208
.LBB271_207:                            # %cond.true.731
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_213
	jmp	.LBB271_217
.LBB271_208:                            # %cond.false.732
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -10264(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10264(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB271_210
# BB#209:                               # %cond.true.737
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB271_213
	jmp	.LBB271_217
.LBB271_210:                            # %cond.false.746
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$213, %edi
	movq	-56(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -10272(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10272(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB271_212
# BB#211:                               # %cond.true.751
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB271_213
	jmp	.LBB271_217
.LBB271_212:                            # %cond.false.752
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_213
	jmp	.LBB271_217
.LBB271_213:                            # %cond.true.753
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB271_215
# BB#214:                               # %cond.true.757
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -10276(%rbp)      # 4-byte Spill
	jmp	.LBB271_216
.LBB271_215:                            # %cond.false.759
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -10276(%rbp)      # 4-byte Spill
.LBB271_216:                            # %cond.end.763
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10276(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10280(%rbp)      # 4-byte Spill
	jmp	.LBB271_218
.LBB271_217:                            # %cond.false.765
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10280(%rbp)      # 4-byte Spill
	jmp	.LBB271_218
.LBB271_218:                            # %cond.end.766
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10280(%rbp), %eax      # 4-byte Reload
	movl	-10256(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -10284(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB271_219
	jmp	.LBB271_224
.LBB271_219:                            # %cond.true.772
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_246
# BB#220:                               # %land.lhs.true.777
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_246
# BB#221:                               # %land.lhs.true.783
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB271_246
# BB#222:                               # %land.lhs.true.792
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10296(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10296(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_246
# BB#223:                               # %land.lhs.true.799
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB271_225
	jmp	.LBB271_246
.LBB271_224:                            # %cond.false.806
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_225
	jmp	.LBB271_246
.LBB271_225:                            # %cond.true.807
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB271_227
# BB#226:                               # %cond.true.811
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -10300(%rbp)      # 4-byte Spill
	jmp	.LBB271_245
.LBB271_227:                            # %cond.false.813
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_230
# BB#228:                               # %land.lhs.true.816
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_230
# BB#229:                               # %cond.true.820
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB271_231
	jmp	.LBB271_236
.LBB271_230:                            # %cond.false.830
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_231
	jmp	.LBB271_236
.LBB271_231:                            # %cond.true.831
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_234
# BB#232:                               # %land.lhs.true.834
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_234
# BB#233:                               # %cond.true.838
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -10304(%rbp)      # 4-byte Spill
	jmp	.LBB271_235
.LBB271_234:                            # %cond.false.847
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10304(%rbp)      # 4-byte Spill
	jmp	.LBB271_235
.LBB271_235:                            # %cond.end.848
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10304(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10308(%rbp)      # 4-byte Spill
	jmp	.LBB271_244
.LBB271_236:                            # %cond.false.850
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	$1, %al
	movq	-56(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -10320(%rbp)      # 8-byte Spill
	movb	%al, -10321(%rbp)       # 1-byte Spill
	je	.LBB271_243
# BB#237:                               # %lor.lhs.false.854
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -10336(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-10336(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -10321(%rbp)       # 1-byte Spill
	je	.LBB271_243
# BB#238:                               # %lor.rhs.858
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -10337(%rbp)       # 1-byte Spill
	jle	.LBB271_242
# BB#239:                               # %land.lhs.true.861
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -10352(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-10352(%rbp), %rdx      # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -10337(%rbp)       # 1-byte Spill
	je	.LBB271_242
# BB#240:                               # %land.lhs.true.865
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -10360(%rbp)      # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-10360(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -10337(%rbp)       # 1-byte Spill
	jne	.LBB271_242
# BB#241:                               # %land.rhs.870
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -10368(%rbp)      # 8-byte Spill
	callq	XWINDOW
	movq	-10368(%rbp), %rdi      # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -10337(%rbp)       # 1-byte Spill
.LBB271_242:                            # %land.end.874
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	-10337(%rbp), %al       # 1-byte Reload
	movb	%al, -10321(%rbp)       # 1-byte Spill
.LBB271_243:                            # %lor.end.875
                                        #   in Loop: Header=BB271_28 Depth=1
	movb	-10321(%rbp), %al       # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-10320(%rbp), %rdi      # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -10308(%rbp)      # 4-byte Spill
.LBB271_244:                            # %cond.end.878
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10308(%rbp), %eax      # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -10300(%rbp)      # 4-byte Spill
.LBB271_245:                            # %cond.end.881
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10300(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10372(%rbp)      # 4-byte Spill
	jmp	.LBB271_247
.LBB271_246:                            # %cond.false.883
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10372(%rbp)      # 4-byte Spill
	jmp	.LBB271_247
.LBB271_247:                            # %cond.end.884
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10372(%rbp), %eax      # 4-byte Reload
	movl	-10284(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -10376(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB271_248
	jmp	.LBB271_262
.LBB271_248:                            # %cond.true.890
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_277
# BB#249:                               # %land.lhs.true.895
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_277
# BB#250:                               # %land.lhs.true.901
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB271_277
# BB#251:                               # %land.lhs.true.910
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -10384(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10384(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_277
# BB#252:                               # %land.lhs.true.917
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -10388(%rbp)      # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB271_253
	jmp	.LBB271_258
.LBB271_253:                            # %cond.true.922
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_260
# BB#254:                               # %land.lhs.true.927
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB271_260
# BB#255:                               # %land.lhs.true.933
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB271_260
# BB#256:                               # %land.lhs.true.942
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -10400(%rbp)      # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-10400(%rbp), %rcx      # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB271_260
# BB#257:                               # %land.lhs.true.949
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB271_259
	jmp	.LBB271_260
.LBB271_258:                            # %cond.false.956
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_259
	jmp	.LBB271_260
.LBB271_259:                            # %cond.true.957
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -10404(%rbp)      # 4-byte Spill
	jmp	.LBB271_261
.LBB271_260:                            # %cond.false.962
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -10404(%rbp)      # 4-byte Spill
.LBB271_261:                            # %cond.end.966
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10404(%rbp), %eax      # 4-byte Reload
	movl	-10388(%rbp), %ecx      # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB271_263
	jmp	.LBB271_277
.LBB271_262:                            # %cond.false.970
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_263
	jmp	.LBB271_277
.LBB271_263:                            # %cond.true.971
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB271_265
# BB#264:                               # %cond.true.975
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -10408(%rbp)      # 4-byte Spill
	jmp	.LBB271_276
.LBB271_265:                            # %cond.false.977
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_268
# BB#266:                               # %land.lhs.true.980
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_268
# BB#267:                               # %cond.true.984
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB271_269
	jmp	.LBB271_274
.LBB271_268:                            # %cond.false.989
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB271_269
	jmp	.LBB271_274
.LBB271_269:                            # %cond.true.990
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpq	$0, 192(%rax)
	je	.LBB271_272
# BB#270:                               # %land.lhs.true.993
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB271_272
# BB#271:                               # %cond.true.997
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -10412(%rbp)      # 4-byte Spill
	jmp	.LBB271_273
.LBB271_272:                            # %cond.false.1001
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10412(%rbp)      # 4-byte Spill
	jmp	.LBB271_273
.LBB271_273:                            # %cond.end.1002
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10412(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10416(%rbp)      # 4-byte Spill
	jmp	.LBB271_275
.LBB271_274:                            # %cond.false.1004
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$5, %esi
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -10416(%rbp)      # 4-byte Spill
.LBB271_275:                            # %cond.end.1008
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10416(%rbp), %eax      # 4-byte Reload
	movq	-56(%rbp), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -10408(%rbp)      # 4-byte Spill
.LBB271_276:                            # %cond.end.1011
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10408(%rbp), %eax      # 4-byte Reload
	movl	%eax, -10420(%rbp)      # 4-byte Spill
	jmp	.LBB271_278
.LBB271_277:                            # %cond.false.1013
                                        #   in Loop: Header=BB271_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, -10420(%rbp)      # 4-byte Spill
	jmp	.LBB271_278
.LBB271_278:                            # %cond.end.1014
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-10420(%rbp), %eax      # 4-byte Reload
	movl	-10376(%rbp), %ecx      # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -4912(%rbp)
	movq	-4936(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB271_279
	jmp	.LBB271_285
.LBB271_279:                            # %if.then.1018
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-4936(%rbp), %rdi
	callq	XFLOATINT
	cvtsi2sdl	-4912(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, -9840(%rbp)
	cvttsd2si	-9840(%rbp), %eax
	movl	%eax, -9844(%rbp)
	cmpl	$0, -9844(%rbp)
	jne	.LBB271_282
# BB#280:                               # %land.lhs.true.1027
                                        #   in Loop: Header=BB271_28 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-9840(%rbp), %xmm1      # xmm1 = mem[0],zero
	ucomisd	%xmm0, %xmm1
	jbe	.LBB271_282
# BB#281:                               # %if.then.1030
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	$1, -9844(%rbp)
.LBB271_282:                            # %if.end.1031
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-9844(%rbp), %eax
	movl	-4900(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cmpl	-4912(%rbp), %eax
	jle	.LBB271_284
# BB#283:                               # %if.then.1036
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4912(%rbp), %eax
	movl	-4900(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -9844(%rbp)
.LBB271_284:                            # %if.end.1039
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4916(%rbp), %eax
	addl	-9844(%rbp), %eax
	movl	%eax, -4920(%rbp)
.LBB271_285:                            # %if.end.1041
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_286
.LBB271_286:                            # %if.end.1042
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_287
.LBB271_287:                            # %if.end.1043
                                        #   in Loop: Header=BB271_28 Depth=1
	cmpl	$0, -4920(%rbp)
	jg	.LBB271_289
# BB#288:                               # %if.then.1046
	movl	$1, -4(%rbp)
	jmp	.LBB271_305
.LBB271_289:                            # %if.end.1047
                                        #   in Loop: Header=BB271_28 Depth=1
	leaq	-4896(%rbp), %rdi
	movl	-4920(%rbp), %esi
	callq	move_it_vertically_backward
	movq	-4584(%rbp), %rdi
	movq	%rdi, -96(%rbp)
	movq	-4576(%rbp), %rdi
	movq	%rdi, -88(%rbp)
.LBB271_290:                            # %if.end.1050
                                        #   in Loop: Header=BB271_28 Depth=1
	jmp	.LBB271_291
.LBB271_291:                            # %if.end.1051
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-16(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	run_window_scroll_functions
	xorl	%ecx, %ecx
	movq	%rax, -9864(%rbp)
	movq	%rdx, -9856(%rbp)
	movq	-9864(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-9856(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-16(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rdx
	callq	try_window
	cmpl	$0, %eax
	jne	.LBB271_293
# BB#292:                               # %if.then.1055
	movl	$2, -4908(%rbp)
	jmp	.LBB271_304
.LBB271_293:                            # %if.else.1056
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	cmpl	$0, 364(%rax)
	jge	.LBB271_295
# BB#294:                               # %if.then.1059
	movq	-56(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	$1, -4908(%rbp)
	jmp	.LBB271_303
.LBB271_295:                            # %if.else.1060
                                        #   in Loop: Header=BB271_28 Depth=1
	testb	$1, -17(%rbp)
	je	.LBB271_298
# BB#296:                               # %lor.lhs.false.1062
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	current_buffer, %rax
	movb	936(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB271_298
# BB#297:                               # %lor.lhs.false.1068
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	88(%rax), %rax
	cmpq	-96(%rbp), %rax
	jge	.LBB271_299
.LBB271_298:                            # %if.then.1072
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	$0, 320(%rax)
.LBB271_299:                            # %if.end.1073
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rdi
	cmpl	$1, -4928(%rbp)
	setle	%al
	movzbl	%al, %ecx
	andl	$1, %ecx
	xorl	%edx, %edx
	movl	%ecx, %esi
	callq	cursor_row_fully_visible_p
	testb	$1, %al
	jne	.LBB271_302
# BB#300:                               # %land.lhs.true.1077
                                        #   in Loop: Header=BB271_28 Depth=1
	movl	-4928(%rbp), %eax
	movq	-56(%rbp), %rcx
	movq	200(%rcx), %rcx
	movl	24(%rcx), %edx
	subl	$1, %edx
	cmpl	%edx, %eax
	jge	.LBB271_302
# BB#301:                               # %if.then.1083
                                        #   in Loop: Header=BB271_28 Depth=1
	movq	-56(%rbp), %rax
	movq	200(%rax), %rdi
	callq	clear_glyph_matrix
	movl	-4928(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -4928(%rbp)
	jmp	.LBB271_28
.LBB271_302:                            # %if.end.1085
	movl	$0, -4908(%rbp)
.LBB271_303:                            # %if.end.1086
	jmp	.LBB271_304
.LBB271_304:                            # %if.end.1087
	movl	-4908(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB271_305:                            # %return
	movl	-4(%rbp), %eax
	addq	$10432, %rsp            # imm = 0x28C0
	popq	%rbp
	retq
.Lfunc_end271:
	.size	try_scrolling, .Lfunc_end271-try_scrolling
	.cfi_endproc

	.align	16, 0x90
	.type	display_menu_bar,@function
display_menu_bar:                       # @display_menu_bar
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp835:
	.cfi_def_cfa_offset 16
.Ltmp836:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp837:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$4968, %rsp             # imm = 0x1368
.Ltmp838:
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB272_2
# BB#1:                                 # %if.then
	jmp	.LBB272_17
.LBB272_2:                              # %if.end
	leaq	-4824(%rbp), %rdi
	movq	$-1, %rax
	movl	$10, %r9d
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %r8
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	init_iterator
	leaq	-4824(%rbp), %rdi
	movq	$-1, %rax
	movl	$10, %r9d
	movl	$0, -2508(%rbp)
	movq	-24(%rbp), %rcx
	movl	312(%rcx), %r10d
	movl	%r10d, -2504(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %r8
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	init_iterator
	movl	$0, -2508(%rbp)
	movq	-24(%rbp), %rax
	movl	272(%rax), %r9d
	movl	%r9d, -2504(%rbp)
	movl	$1, -32(%rbp)
	movl	$0, -4836(%rbp)
.LBB272_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4836(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	356(%rcx), %eax
	jge	.LBB272_6
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB272_3 Depth=1
	movq	-2472(%rbp), %rax
	movslq	-4836(%rbp), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -4848(%rbp)
	movq	-4848(%rbp), %rdi
	callq	clear_glyph_row
	movq	-4848(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	orq	$1024, %rcx             # imm = 0x400
	movq	%rcx, 236(%rax)
	movq	-4848(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-524289, %rcx          # imm = 0xFFFFFFFFFFF7FFFF
	orq	$524288, %rcx           # imm = 0x80000
	movq	%rcx, 236(%rax)
	movq	-4848(%rbp), %rax
	movabsq	$-17179869185, %rcx     # imm = 0xFFFFFFFBFFFFFFFF
	andq	236(%rax), %rcx
	movq	%rcx, 236(%rax)
# BB#5:                                 # %for.inc
                                        #   in Loop: Header=BB272_3 Depth=1
	movl	-4836(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4836(%rbp)
	jmp	.LBB272_3
.LBB272_6:                              # %for.end
	movq	-4808(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -4832(%rbp)
	movl	$0, -4836(%rbp)
.LBB272_7:                              # %for.cond.14
                                        # =>This Inner Loop Header: Depth=1
	movslq	-4836(%rbp), %rax
	movq	-4832(%rbp), %rdi
	movq	%rax, -4864(%rbp)       # 8-byte Spill
	callq	ASIZE
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jge	.LBB272_14
# BB#8:                                 # %for.body.17
                                        #   in Loop: Header=BB272_7 Depth=1
	movq	-4832(%rbp), %rdi
	movl	-4836(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -4856(%rbp)
	movq	-4856(%rbp), %rax
	movq	%rax, -4872(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4872(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB272_10
# BB#9:                                 # %if.then.23
	jmp	.LBB272_14
.LBB272_10:                             # %if.end.24
                                        #   in Loop: Header=BB272_7 Depth=1
	movq	-4832(%rbp), %rdi
	movl	-4836(%rbp), %eax
	addl	$3, %eax
	movslq	%eax, %rsi
	movslq	-2380(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, %rdx
	callq	ASET
	movl	-2420(%rbp), %eax
	cmpl	-2504(%rbp), %eax
	jge	.LBB272_12
# BB#11:                                # %if.then.32
                                        #   in Loop: Header=BB272_7 Depth=1
	xorl	%edi, %edi
	movq	-4856(%rbp), %rsi
	movq	%rsi, -4880(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4856(%rbp), %rdi
	movq	%rax, -4888(%rbp)       # 8-byte Spill
	callq	SCHARS
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	leaq	-4824(%rbp), %r9
	xorl	%ecx, %ecx
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	addq	$1, %rax
	movl	%eax, %r8d
	movq	%rsi, %rdi
	movq	-4880(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -4896(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-4888(%rbp), %r10       # 8-byte Reload
	movl	%edx, -4900(%rbp)       # 4-byte Spill
	movq	%r10, %rdx
	movq	-4896(%rbp), %r11       # 8-byte Reload
	movl	%ecx, -4904(%rbp)       # 4-byte Spill
	movq	%r11, %rcx
	movl	%r8d, -4908(%rbp)       # 4-byte Spill
	movq	%r11, %r8
	movl	-4908(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, (%rsp)
	movl	$0, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	$-1, 24(%rsp)
	callq	display_string
	movl	%eax, -4912(%rbp)       # 4-byte Spill
.LBB272_12:                             # %if.end.38
                                        #   in Loop: Header=BB272_7 Depth=1
	jmp	.LBB272_13
.LBB272_13:                             # %for.inc.39
                                        #   in Loop: Header=BB272_7 Depth=1
	movl	-4836(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4836(%rbp)
	jmp	.LBB272_7
.LBB272_14:                             # %for.end.41
	movl	-2420(%rbp), %eax
	cmpl	-2504(%rbp), %eax
	jge	.LBB272_16
# BB#15:                                # %if.then.46
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str, %rdi
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	leaq	-4824(%rbp), %r9
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%esi, %esi
	movq	-4920(%rbp), %r8        # 8-byte Reload
	movl	%esi, -4924(%rbp)       # 4-byte Spill
	movq	%r8, %rsi
	movq	%rdx, -4936(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4936(%rbp), %rax       # 8-byte Reload
	movl	%ecx, -4940(%rbp)       # 4-byte Spill
	movq	%rax, %rcx
	movq	%rax, %r8
	movl	$-1, (%rsp)
	movl	$0, 8(%rsp)
	movl	$0, 16(%rsp)
	movl	$-1, 24(%rsp)
	callq	display_string
	movl	%eax, -4944(%rbp)       # 4-byte Spill
.LBB272_16:                             # %if.end.50
	leaq	-4824(%rbp), %rdi
	callq	compute_line_metrics
.LBB272_17:                             # %return
	addq	$4968, %rsp             # imm = 0x1368
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end272:
	.size	display_menu_bar, .Lfunc_end272-display_menu_bar
	.cfi_endproc

	.align	16, 0x90
	.type	redisplay_tool_bar,@function
redisplay_tool_bar:                     # @redisplay_tool_bar
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp839:
	.cfi_def_cfa_offset 16
.Ltmp840:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp841:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movabsq	$-68719476737, %rax     # imm = 0xFFFFFFEFFFFFFFFF
	andq	208(%rdi), %rax
	movabsq	$68719476736, %rcx      # imm = 0x1000000000
	orq	%rcx, %rax
	movq	%rax, 208(%rdi)
	movq	-8(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$5, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB273_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	update_frame_tool_bar
.LBB273_2:                              # %if.end
	xorl	%eax, %eax
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end273:
	.size	redisplay_tool_bar, .Lfunc_end273-redisplay_tool_bar
	.cfi_endproc

	.align	16, 0x90
	.type	x_draw_bottom_divider,@function
x_draw_bottom_divider:                  # @x_draw_bottom_divider
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp842:
	.cfi_def_cfa_offset 16
.Ltmp843:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp844:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movw	468(%rdi), %ax
	andw	$1, %ax
	testw	$1, %ax
	jne	.LBB274_2
# BB#1:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB274_3
.LBB274_2:                              # %if.then
	jmp	.LBB274_17
.LBB274_3:                              # %if.else
	movq	-8(%rbp), %rax
	movl	244(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -36(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -40(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-40(%rbp), %ecx         # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-36(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB274_5
# BB#4:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB274_7
.LBB274_5:                              # %lor.lhs.false.19
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB274_7
# BB#6:                                 # %lor.lhs.false.24
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB274_8
.LBB274_7:                              # %cond.true
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB274_9
	jmp	.LBB274_16
.LBB274_8:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 340(%rax)
	je	.LBB274_16
.LBB274_9:                              # %if.then.32
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	240(%rax), %ecx
	movl	%ecx, -20(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	240(%rax), %edx
	movq	-8(%rbp), %rax
	addl	256(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	244(%rax), %edx
	movq	-8(%rbp), %rax
	addl	260(%rax), %edx
	addl	%edx, %ecx
	movq	-8(%rbp), %rax
	movl	244(%rax), %edx
	movq	-8(%rbp), %rax
	addl	260(%rax), %edx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	movl	%edx, -56(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	callq	XWINDOW
	movl	-60(%rbp), %ecx         # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-56(%rbp), %edx         # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB274_11
# BB#10:                                # %land.lhs.true.64
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB274_13
.LBB274_11:                             # %lor.lhs.false.72
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB274_13
# BB#12:                                # %lor.lhs.false.78
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB274_14
.LBB274_13:                             # %cond.true.84
	xorl	%eax, %eax
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB274_15
.LBB274_14:                             # %cond.false.85
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
.LBB274_15:                             # %cond.end
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	-52(%rbp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movl	332(%rdx), %eax
	movq	-8(%rbp), %rdx
	movl	244(%rdx), %ecx
	movq	-8(%rbp), %rdx
	addl	260(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rdx
	movq	376(%rdx), %rdx
	movq	112(%rdx), %rdx
	movq	176(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	movq	%rdx, -88(%rbp)         # 8-byte Spill
	movl	%eax, %edx
	movq	-88(%rbp), %r9          # 8-byte Reload
	callq	*%r9
.LBB274_16:                             # %if.end
	jmp	.LBB274_17
.LBB274_17:                             # %if.end.97
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end274:
	.size	x_draw_bottom_divider, .Lfunc_end274-x_draw_bottom_divider
	.cfi_endproc

	.align	16, 0x90
	.type	overlay_arrow_in_current_buffer_p,@function
overlay_arrow_in_current_buffer_p:      # @overlay_arrow_in_current_buffer_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp845:
	.cfi_def_cfa_offset 16
.Ltmp846:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp847:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	globals+1720, %rax
	movq	%rax, -16(%rbp)
.LBB275_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB275_10
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB275_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_9
.LBB275_4:                              # %if.end
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	find_symbol_value
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB275_8
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	-32(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB275_8
# BB#6:                                 # %land.lhs.true.13
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	current_buffer, %rax
	movq	-32(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	XMARKER
	movq	-40(%rbp), %rdi         # 8-byte Reload
	cmpq	8(%rax), %rdi
	jne	.LBB275_8
# BB#7:                                 # %if.then.17
	movb	$1, -1(%rbp)
	jmp	.LBB275_11
.LBB275_8:                              # %if.end.18
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_9
.LBB275_9:                              # %for.inc
                                        #   in Loop: Header=BB275_1 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB275_1
.LBB275_10:                             # %for.end
	movb	$0, -1(%rbp)
.LBB275_11:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end275:
	.size	overlay_arrow_in_current_buffer_p, .Lfunc_end275-overlay_arrow_in_current_buffer_p
	.cfi_endproc

	.align	16, 0x90
	.type	find_last_unchanged_at_beg_row,@function
find_last_unchanged_at_beg_row:         # @find_last_unchanged_at_beg_row
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp848:
	.cfi_def_cfa_offset 16
.Ltmp849:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp850:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	current_buffer, %rdi
	movq	720(%rdi), %rdi
	movq	88(%rdi), %rdi
	addq	$1, %rdi
	movq	%rdi, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	-8(%rbp), %rdi
	callq	window_text_bottom_y
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rdi
	movq	192(%rdi), %rdi
	movq	8(%rdi), %rdi
	movq	236(%rdi), %rdi
	shrq	$20, %rdi
	andq	$1, %rdi
	testq	$1, %rdi
	je	.LBB276_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB276_3
.LBB276_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB276_3:                              # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -24(%rbp)
.LBB276_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -49(%rbp)          # 1-byte Spill
	je	.LBB276_6
# BB#5:                                 # %land.rhs
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	176(%rax), %rax
	cmpq	-16(%rbp), %rax
	setl	%cl
	movb	%cl, -49(%rbp)          # 1-byte Spill
.LBB276_6:                              # %land.end
                                        #   in Loop: Header=BB276_4 Depth=1
	movb	-49(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB276_7
	jmp	.LBB276_18
.LBB276_7:                              # %for.body
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB276_14
# BB#8:                                 # %land.lhs.true
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB276_14
# BB#9:                                 # %land.lhs.true.15
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	192(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	.LBB276_12
# BB#10:                                # %land.lhs.true.19
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB276_14
# BB#11:                                # %lor.lhs.false
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$27, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB276_14
.LBB276_12:                             # %land.lhs.true.28
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jg	.LBB276_14
# BB#13:                                # %if.then
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB276_14:                             # %if.end
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-24(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-36(%rbp), %ecx
	jl	.LBB276_16
# BB#15:                                # %if.then.33
	jmp	.LBB276_18
.LBB276_16:                             # %if.end.34
                                        #   in Loop: Header=BB276_4 Depth=1
	jmp	.LBB276_17
.LBB276_17:                             # %for.inc
                                        #   in Loop: Header=BB276_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -24(%rbp)
	jmp	.LBB276_4
.LBB276_18:                             # %for.end
	movq	-32(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end276:
	.size	find_last_unchanged_at_beg_row, .Lfunc_end276-find_last_unchanged_at_beg_row
	.cfi_endproc

	.align	16, 0x90
	.type	init_to_row_end,@function
init_to_row_end:                        # @init_to_row_end
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp851:
	.cfi_def_cfa_offset 16
.Ltmp852:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp853:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movb	$0, -25(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	addq	$128, %rdx
	callq	init_from_display_pos
	testb	$1, %al
	jne	.LBB277_1
	jmp	.LBB277_4
.LBB277_1:                              # %if.then
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB277_3
# BB#2:                                 # %if.then.1
	movq	-24(%rbp), %rax
	movl	244(%rax), %ecx
	movq	-24(%rbp), %rax
	addl	52(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2408(%rax)
.LBB277_3:                              # %if.end
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	movb	$1, -25(%rbp)
.LBB277_4:                              # %if.end.3
	movb	-25(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end277:
	.size	init_to_row_end, .Lfunc_end277-init_to_row_end
	.cfi_endproc

	.align	16, 0x90
	.type	find_first_unchanged_at_end_row,@function
find_first_unchanged_at_end_row:        # @find_first_unchanged_at_end_row
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp854:
	.cfi_def_cfa_offset 16
.Ltmp855:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp856:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	$0, -48(%rbp)
	movq	-32(%rbp), %rdx
	movq	$0, (%rdx)
	movq	-24(%rbp), %rdx
	movq	$0, (%rdx)
	movq	-16(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	96(%rsi), %rdx
	jl	.LBB278_2
# BB#1:                                 # %if.then
	movq	$0, -8(%rbp)
	jmp	.LBB278_17
.LBB278_2:                              # %if.end
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	464(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB278_16
# BB#3:                                 # %if.then.1
	movq	-40(%rbp), %rax
	movq	192(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	456(%rcx), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	200(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB278_5
# BB#4:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB278_6
.LBB278_5:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB278_6:                              # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	-56(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	subq	-64(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	subq	96(%rcx), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	(%rcx), %rax
	movq	%rax, -80(%rbp)
.LBB278_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jbe	.LBB278_15
# BB#8:                                 # %for.body
                                        #   in Loop: Header=BB278_7 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB278_10
# BB#9:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB278_7 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB278_11
.LBB278_10:                             # %if.then.36
	jmp	.LBB278_15
.LBB278_11:                             # %if.end.37
                                        #   in Loop: Header=BB278_7 Depth=1
	movq	-40(%rbp), %rax
	movq	176(%rax), %rax
	cmpq	-80(%rbp), %rax
	jl	.LBB278_13
# BB#12:                                # %if.then.40
                                        #   in Loop: Header=BB278_7 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB278_13:                             # %if.end.41
                                        #   in Loop: Header=BB278_7 Depth=1
	jmp	.LBB278_14
.LBB278_14:                             # %for.inc
                                        #   in Loop: Header=BB278_7 Depth=1
	movq	-40(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB278_7
.LBB278_15:                             # %for.end
	jmp	.LBB278_16
.LBB278_16:                             # %if.end.42
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB278_17:                             # %return
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end278:
	.size	find_first_unchanged_at_end_row, .Lfunc_end278-find_first_unchanged_at_end_row
	.cfi_endproc

	.align	16, 0x90
	.type	sync_frame_with_window_matrix_rows,@function
sync_frame_with_window_matrix_rows:     # @sync_frame_with_window_matrix_rows
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp857:
	.cfi_def_cfa_offset 16
.Ltmp858:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp859:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	192(%rdi), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movslq	24(%rax), %rax
	shlq	$8, %rax
	addq	%rax, %rdi
	movq	%rdi, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	252(%rdi), %rdi
	shlq	$8, %rdi
	addq	%rdi, %rax
	movq	%rax, -40(%rbp)
.LBB279_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB279_5
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	-56(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB279_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rcx
	andq	$-1025, %rcx            # imm = 0xFFFFFFFFFFFFFBFF
	movq	%rcx, 236(%rax)
.LBB279_4:                              # %if.end
                                        #   in Loop: Header=BB279_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -40(%rbp)
	jmp	.LBB279_1
.LBB279_5:                              # %while.end
	popq	%rbp
	retq
.Lfunc_end279:
	.size	sync_frame_with_window_matrix_rows, .Lfunc_end279-sync_frame_with_window_matrix_rows
	.cfi_endproc

	.align	16, 0x90
	.type	init_to_row_start,@function
init_to_row_start:                      # @init_to_row_start
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp860:
	.cfi_def_cfa_offset 16
.Ltmp861:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp862:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	addq	$80, %rdx
	callq	init_from_display_pos
	movl	$48, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	addq	$264, %rsi              # imm = 0x108
	movq	-24(%rbp), %rdi
	addq	$80, %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movb	%al, -33(%rbp)          # 1-byte Spill
	callq	memcpy
	movq	-24(%rbp), %rdx
	movl	244(%rdx), %ecx
	movq	-8(%rbp), %rdx
	movl	%ecx, 2408(%rdx)
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end280:
	.size	init_to_row_start, .Lfunc_end280-init_to_row_start
	.cfi_endproc

	.align	16, 0x90
	.type	find_last_row_displaying_text,@function
find_last_row_displaying_text:          # @find_last_row_displaying_text
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp863:
	.cfi_def_cfa_offset 16
.Ltmp864:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp865:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	$0, -40(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB281_2
# BB#1:                                 # %cond.true
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB281_6
.LBB281_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB281_4
# BB#3:                                 # %cond.true.1
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB281_5
.LBB281_4:                              # %cond.false.3
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB281_5:                              # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB281_6:                              # %cond.end.5
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	%rax, -32(%rbp)
.LBB281_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB281_11
# BB#8:                                 # %while.body
                                        #   in Loop: Header=BB281_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-32(%rbp), %rax
	addl	60(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2324(%rax), %ecx
	jl	.LBB281_10
# BB#9:                                 # %if.then
	jmp	.LBB281_11
.LBB281_10:                             # %if.end
                                        #   in Loop: Header=BB281_7 Depth=1
	movq	-32(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -32(%rbp)
	jmp	.LBB281_7
.LBB281_11:                             # %while.end
	movq	-40(%rbp), %rax
	popq	%rbp
	retq
.Lfunc_end281:
	.size	find_last_row_displaying_text, .Lfunc_end281-find_last_row_displaying_text
	.cfi_endproc

	.align	16, 0x90
	.type	init_from_display_pos,@function
init_from_display_pos:                  # @init_from_display_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp866:
	.cfi_def_cfa_offset 16
.Ltmp867:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp868:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	%rdx, -40(%rbp)
	movb	$0, -45(%rbp)
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	in_ellipses_for_invisible_text_p
	testb	$1, %al
	jne	.LBB282_1
	jmp	.LBB282_2
.LBB282_1:                              # %if.then
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	movq	$0, -40(%rbp)
.LBB282_2:                              # %if.end
	xorl	%eax, %eax
	movl	%eax, %r8d
	xorl	%r9d, %r9d
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-40(%rbp), %rcx
	callq	init_iterator
	movl	$0, -44(%rbp)
.LBB282_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_7 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movslq	-44(%rbp), %rdx
	movq	-8(%rbp), %rsi
	cmpq	360(%rsi), %rdx
	movb	%cl, -81(%rbp)          # 1-byte Spill
	jge	.LBB282_5
# BB#4:                                 # %land.rhs
                                        #   in Loop: Header=BB282_3 Depth=1
	cmpl	$16, -44(%rbp)
	setl	%al
	movb	%al, -81(%rbp)          # 1-byte Spill
.LBB282_5:                              # %land.end
                                        #   in Loop: Header=BB282_3 Depth=1
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB282_6
	jmp	.LBB282_15
.LBB282_6:                              # %for.body
                                        #   in Loop: Header=BB282_3 Depth=1
	movslq	-44(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	376(%rcx,%rax,8), %rdi
	callq	SSDATA
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	376(%rdi,%rcx,8), %rdi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	SBYTES
	movq	-96(%rbp), %rcx         # 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
.LBB282_7:                              # %while.cond
                                        #   Parent Loop BB282_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	cmpq	-64(%rbp), %rdx
	movb	%cl, -97(%rbp)          # 1-byte Spill
	jae	.LBB282_9
# BB#8:                                 # %land.rhs.15
                                        #   in Loop: Header=BB282_7 Depth=2
	movq	-56(%rbp), %rax
	movsbl	(%rax), %ecx
	cmpl	$10, %ecx
	setne	%dl
	movb	%dl, -97(%rbp)          # 1-byte Spill
.LBB282_9:                              # %land.end.19
                                        #   in Loop: Header=BB282_7 Depth=2
	movb	-97(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB282_10
	jmp	.LBB282_11
.LBB282_10:                             # %while.body
                                        #   in Loop: Header=BB282_7 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB282_7
.LBB282_11:                             # %while.end
                                        #   in Loop: Header=BB282_3 Depth=1
	movq	-56(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB282_13
# BB#12:                                # %if.then.22
	movb	$1, -45(%rbp)
	jmp	.LBB282_15
.LBB282_13:                             # %if.end.23
                                        #   in Loop: Header=BB282_3 Depth=1
	jmp	.LBB282_14
.LBB282_14:                             # %for.inc
                                        #   in Loop: Header=BB282_3 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB282_3
.LBB282_15:                             # %for.end
	movq	-24(%rbp), %rax
	cmpq	$0, 16(%rax)
	jl	.LBB282_33
# BB#16:                                # %if.then.26
	movq	-8(%rbp), %rax
	cmpl	$4, 24(%rax)
	jne	.LBB282_18
# BB#17:                                # %if.then.29
	movq	-8(%rbp), %rdi
	callq	pop_it
.LBB282_18:                             # %if.end.30
	movq	-24(%rbp), %rax
	cmpq	$16, 16(%rax)
	jl	.LBB282_23
# BB#19:                                # %if.then.34
	movl	$16, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	16(%rdx), %rax
	cqto
	idivq	%rcx
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 328(%rax)
.LBB282_20:                             # %while.cond.37
                                        # =>This Inner Loop Header: Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -80(%rbp)
	cmpq	$0, %rax
	je	.LBB282_22
# BB#21:                                # %while.body.39
                                        #   in Loop: Header=BB282_20 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	load_overlay_strings
	movq	-8(%rbp), %rsi
	movq	328(%rsi), %rdi
	addq	$16, %rdi
	movq	%rdi, 328(%rsi)
	jmp	.LBB282_20
.LBB282_22:                             # %while.end.42
	jmp	.LBB282_23
.LBB282_23:                             # %if.end.43
	movl	$16, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 328(%rsi)
	movq	-8(%rbp), %rdx
	movq	328(%rdx), %rax
	cqto
	idivq	%rcx
	movl	%edx, %edi
	movl	%edi, -68(%rbp)
	movslq	-68(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	376(%rdx,%rcx,8), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 632(%rdx)
	movq	-8(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	24(%rdx), %rsi
	movq	%rsi, 336(%rcx)
	movq	32(%rdx), %rdx
	movq	%rdx, 344(%rcx)
	movq	-8(%rbp), %rcx
	movl	$2, 24(%rcx)
	movq	-8(%rbp), %rcx
	movq	632(%rcx), %rdi
	callq	SCHARS
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %r8d
	shrl	$20, %r8d
	andl	$1, %r8d
	testl	$1, %r8d
	je	.LBB282_32
# BB#24:                                # %if.then.58
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 4720(%rcx)
	movq	-8(%rbp), %rax
	movq	$0, 4728(%rax)
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	-8(%rbp), %rcx
	movq	%rax, 4736(%rcx)
	movq	-8(%rbp), %rax
	movq	368(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 4744(%rcx)
	movq	-8(%rbp), %rax
	movb	88(%rax), %dl
	shrb	$2, %dl
	andb	$1, %dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movb	4752(%rax), %sil
	andb	$-2, %sil
	orb	%dl, %sil
	movb	%sil, 4752(%rax)
	movq	-8(%rbp), %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	xorb	$-1, %dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movb	4752(%rax), %sil
	shlb	$1, %dl
	andb	$-3, %sil
	orb	%dl, %sil
	movb	%sil, 4752(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 4760(%rcx)
	movq	-8(%rbp), %rax
	movq	336(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	344(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %r8d
	cmpl	$2, %r8d
	sete	%dl
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%dl, %r8d
	andl	$1, %r8d
	movl	%r8d, %edx
	movq	%rax, %rcx
	callq	bidi_init_it
	movq	-24(%rbp), %rax
	cmpq	$0, 24(%rax)
	jne	.LBB282_31
# BB#25:                                # %if.then.108
	movq	-8(%rbp), %rdi
	callq	get_visually_first_element
	movq	-8(%rbp), %rdi
	cmpq	$0, 336(%rdi)
	je	.LBB282_30
# BB#26:                                # %if.then.114
	jmp	.LBB282_27
.LBB282_27:                             # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movq	%rax, %rdi
	callq	bidi_move_to_visually_next
# BB#28:                                # %do.cond
                                        #   in Loop: Header=BB282_27 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 2472(%rax)
	jne	.LBB282_27
# BB#29:                                # %do.end
	jmp	.LBB282_30
.LBB282_30:                             # %if.end.120
	jmp	.LBB282_31
.LBB282_31:                             # %if.end.121
	jmp	.LBB282_32
.LBB282_32:                             # %if.end.122
	jmp	.LBB282_33
.LBB282_33:                             # %if.end.123
	movq	-24(%rbp), %rax
	cmpq	$0, 24(%rax)
	jl	.LBB282_37
# BB#34:                                # %if.then.128
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	24(%rcx), %rdx
	movq	%rdx, 336(%rax)
	movq	32(%rcx), %rcx
	movq	%rcx, 344(%rax)
	movq	-8(%rbp), %rax
	movl	2456(%rax), %esi
	shrl	$20, %esi
	andl	$1, %esi
	testl	$1, %esi
	je	.LBB282_36
# BB#35:                                # %if.then.137
	movq	-8(%rbp), %rax
	movq	336(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	344(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	sete	%dl
	movq	-8(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%dl, %ecx
	andl	$1, %ecx
	movl	%ecx, %edx
	movq	%rax, %rcx
	callq	bidi_init_it
.LBB282_36:                             # %if.end.153
	jmp	.LBB282_37
.LBB282_37:                             # %if.end.154
	movq	-24(%rbp), %rax
	cmpl	$0, 40(%rax)
	jl	.LBB282_41
# BB#38:                                # %if.then.157
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	jne	.LBB282_40
# BB#39:                                # %if.then.160
	movq	-8(%rbp), %rdi
	callq	get_next_display_element
	movb	%al, -98(%rbp)          # 1-byte Spill
.LBB282_40:                             # %if.end.162
	movq	-24(%rbp), %rax
	movl	40(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 352(%rax)
.LBB282_41:                             # %if.end.166
	movq	-8(%rbp), %rdi
	callq	CHECK_IT
	movb	-45(%rbp), %al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end282:
	.size	init_from_display_pos, .Lfunc_end282-init_from_display_pos
	.cfi_endproc

	.align	16, 0x90
	.type	in_ellipses_for_invisible_text_p,@function
in_ellipses_for_invisible_text_p:       # @in_ellipses_for_invisible_text_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp869:
	.cfi_def_cfa_offset 16
.Ltmp870:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp871:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movb	$0, -33(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-8(%rbp), %rsi
	cmpl	$0, 40(%rsi)
	jl	.LBB283_12
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpq	$0, 16(%rax)
	jge	.LBB283_12
# BB#2:                                 # %land.lhs.true.4
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	jge	.LBB283_12
# BB#3:                                 # %land.lhs.true.7
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	752(%rcx), %rax
	jle	.LBB283_12
# BB#4:                                 # %land.lhs.true.9
	movl	$5, %esi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	callq	make_lisp_ptr
	movl	$574, %edi              # imm = 0x23E
	movq	%rax, -32(%rbp)
	movq	-48(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB283_6
# BB#5:                                 # %cond.true
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -76(%rbp)         # 4-byte Spill
	jmp	.LBB283_7
.LBB283_6:                              # %cond.false
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -76(%rbp)         # 4-byte Spill
.LBB283_7:                              # %cond.end
	movl	-76(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB283_12
# BB#8:                                 # %if.then
	movl	$574, %edi              # imm = 0x23E
	movq	-48(%rbp), %rax
	subq	$1, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdx
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_char_property
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	400(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB283_10
# BB#9:                                 # %cond.true.26
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -108(%rbp)        # 4-byte Spill
	jmp	.LBB283_11
.LBB283_10:                             # %cond.false.31
	movq	-24(%rbp), %rdi
	movq	current_buffer, %rax
	movq	400(%rax), %rsi
	callq	invisible_prop
	movl	%eax, -108(%rbp)        # 4-byte Spill
.LBB283_11:                             # %cond.end.34
	movl	-108(%rbp), %eax        # 4-byte Reload
	movl	$2, %ecx
	cmpl	%eax, %ecx
	sete	%dl
	andb	$1, %dl
	movb	%dl, -33(%rbp)
.LBB283_12:                             # %if.end
	movb	-33(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end283:
	.size	in_ellipses_for_invisible_text_p, .Lfunc_end283-in_ellipses_for_invisible_text_p
	.cfi_endproc

	.align	16, 0x90
	.type	compute_line_metrics,@function
compute_line_metrics:                   # @compute_line_metrics
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp872:
	.cfi_def_cfa_offset 16
.Ltmp873:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp874:
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	2352(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$2, %eax
	jne	.LBB284_102
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB284_5
# BB#2:                                 # %if.then.2
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB284_4
# BB#3:                                 # %if.then.4
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	368(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 2400(%rax)
	movq	-8(%rbp), %rax
	movl	%ecx, 2384(%rax)
.LBB284_4:                              # %if.end
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 56(%rax)
	movq	-8(%rbp), %rax
	movl	2380(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2384(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 60(%rax)
	movq	-8(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 64(%rax)
	movq	-8(%rbp), %rax
	movl	2396(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	2400(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 68(%rax)
	movq	-8(%rbp), %rax
	movl	2332(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 76(%rax)
.LBB284_5:                              # %if.end.15
	movq	-16(%rbp), %rax
	movl	44(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 52(%rax)
	movl	$0, -20(%rbp)
.LBB284_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movswl	34(%rcx), %edx
	cmpl	%edx, %eax
	jge	.LBB284_9
# BB#7:                                 # %for.body
                                        #   in Loop: Header=BB284_6 Depth=1
	movslq	-20(%rbp), %rax
	movq	-16(%rbp), %rcx
	imulq	$48, %rax, %rax
	addq	8(%rcx), %rax
	movswl	16(%rax), %edx
	movq	-16(%rbp), %rax
	addl	52(%rax), %edx
	movl	%edx, 52(%rax)
# BB#8:                                 # %for.inc
                                        #   in Loop: Header=BB284_6 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB284_6
.LBB284_9:                              # %for.end
	movb	$1, %al
	movq	-16(%rbp), %rcx
	movl	68(%rcx), %edx
	movq	-16(%rbp), %rcx
	subl	64(%rcx), %edx
	movq	-16(%rbp), %rcx
	movl	60(%rcx), %esi
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %esi
	cmpl	%esi, %edx
	movb	%al, -29(%rbp)          # 1-byte Spill
	jg	.LBB284_11
# BB#10:                                # %lor.rhs
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	56(%rax), %ecx
	setg	%dl
	movb	%dl, -29(%rbp)          # 1-byte Spill
.LBB284_11:                             # %lor.end
	movb	-29(%rbp), %al          # 1-byte Reload
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$24, %rsi
	andq	$-16777217, %rdi        # imm = 0xFFFFFFFFFEFFFFFF
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rsi
	movq	200(%rsi), %rsi
	movq	8(%rsi), %rsi
	movq	236(%rsi), %rsi
	shrq	$20, %rsi
	andq	$1, %rsi
	testq	$1, %rsi
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	je	.LBB284_13
# BB#12:                                # %cond.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB284_14
.LBB284_13:                             # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB284_14:                             # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB284_17
# BB#15:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	56(%rax), %ecx
	jle	.LBB284_17
# BB#16:                                # %if.then.54
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movq	-16(%rbp), %rax
	subl	56(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	60(%rax), %ecx
	movl	%ecx, 60(%rax)
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 56(%rax)
.LBB284_17:                             # %if.end.62
	movq	-16(%rbp), %rax
	movl	60(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 72(%rax)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB284_18
	jmp	.LBB284_32
.LBB284_18:                             # %cond.true.66
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB284_47
# BB#19:                                # %land.lhs.true.71
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB284_47
# BB#20:                                # %land.lhs.true.77
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB284_47
# BB#21:                                # %land.lhs.true.85
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	104(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB284_47
# BB#22:                                # %land.lhs.true.92
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB284_23
	jmp	.LBB284_28
.LBB284_23:                             # %cond.true.98
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB284_30
# BB#24:                                # %land.lhs.true.104
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB284_30
# BB#25:                                # %land.lhs.true.111
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB284_30
# BB#26:                                # %land.lhs.true.121
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB284_30
# BB#27:                                # %land.lhs.true.128
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB284_29
	jmp	.LBB284_30
.LBB284_28:                             # %cond.false.137
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_29
	jmp	.LBB284_30
.LBB284_29:                             # %cond.true.138
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	jmp	.LBB284_31
.LBB284_30:                             # %cond.false.143
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	368(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
.LBB284_31:                             # %cond.end.148
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	-60(%rbp), %ecx         # 4-byte Reload
	cmpl	%eax, %ecx
	jg	.LBB284_33
	jmp	.LBB284_47
.LBB284_32:                             # %cond.false.152
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_33
	jmp	.LBB284_47
.LBB284_33:                             # %cond.true.153
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 448(%rax)
	jl	.LBB284_35
# BB#34:                                # %cond.true.157
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	448(%rax), %ecx
	movl	%ecx, -80(%rbp)         # 4-byte Spill
	jmp	.LBB284_46
.LBB284_35:                             # %cond.false.160
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB284_38
# BB#36:                                # %land.lhs.true.163
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB284_38
# BB#37:                                # %cond.true.168
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	cmpl	$0, 60(%rax)
	jne	.LBB284_39
	jmp	.LBB284_44
.LBB284_38:                             # %cond.false.174
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_39
	jmp	.LBB284_44
.LBB284_39:                             # %cond.true.175
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB284_42
# BB#40:                                # %land.lhs.true.179
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB284_42
# BB#41:                                # %cond.true.184
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movl	60(%rax), %ecx
	movl	%ecx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB284_43
.LBB284_42:                             # %cond.false.189
	xorl	%eax, %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB284_43
.LBB284_43:                             # %cond.end.190
	movl	-84(%rbp), %eax         # 4-byte Reload
	movl	%eax, -88(%rbp)         # 4-byte Spill
	jmp	.LBB284_45
.LBB284_44:                             # %cond.false.192
	movl	$5, %esi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	%rax, %rdi
	callq	estimate_mode_line_height
	movl	%eax, -88(%rbp)         # 4-byte Spill
.LBB284_45:                             # %cond.end.197
	movl	-88(%rbp), %eax         # 4-byte Reload
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	%eax, 448(%rcx)
	movl	%eax, -80(%rbp)         # 4-byte Spill
.LBB284_46:                             # %cond.end.201
	movl	-80(%rbp), %eax         # 4-byte Reload
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB284_48
.LBB284_47:                             # %cond.false.203
	xorl	%eax, %eax
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB284_48
.LBB284_48:                             # %cond.end.204
	movl	-92(%rbp), %eax         # 4-byte Reload
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	260(%rcx), %eax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	244(%rcx), %edx
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	addl	260(%rcx), %edx
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	40(%rcx), %rdi
	movl	%eax, -96(%rbp)         # 4-byte Spill
	movl	%edx, -100(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %edx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%edx, -104(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-104(%rbp), %edx        # 4-byte Reload
	addl	260(%rax), %edx
	movl	-100(%rbp), %esi        # 4-byte Reload
	cmpl	%edx, %esi
	jne	.LBB284_50
# BB#49:                                # %land.lhs.true.226
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB284_52
.LBB284_50:                             # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB284_52
# BB#51:                                # %lor.lhs.false.242
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB284_53
.LBB284_52:                             # %cond.true.250
	xorl	%eax, %eax
	movl	%eax, -116(%rbp)        # 4-byte Spill
	jmp	.LBB284_54
.LBB284_53:                             # %cond.false.251
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	340(%rax), %ecx
	movl	%ecx, -116(%rbp)        # 4-byte Spill
.LBB284_54:                             # %cond.end.255
	movl	-116(%rbp), %eax        # 4-byte Reload
	movl	-96(%rbp), %ecx         # 4-byte Reload
	subl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movl	%ecx, -120(%rbp)        # 4-byte Spill
	jne	.LBB284_57
# BB#55:                                # %lor.lhs.false.265
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB284_58
# BB#56:                                # %land.lhs.true.272
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	jne	.LBB284_58
.LBB284_57:                             # %cond.true.281
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_63
	jmp	.LBB284_67
.LBB284_58:                             # %cond.false.282
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB284_60
# BB#59:                                # %cond.true.287
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$32, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB284_63
	jmp	.LBB284_67
.LBB284_60:                             # %cond.false.296
	movl	$213, %edi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	144(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB284_62
# BB#61:                                # %cond.true.302
	movb	$1, %al
	testb	$1, %al
	jne	.LBB284_63
	jmp	.LBB284_67
.LBB284_62:                             # %cond.false.303
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_63
	jmp	.LBB284_67
.LBB284_63:                             # %cond.true.304
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 440(%rax)
	jl	.LBB284_65
# BB#64:                                # %cond.true.308
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	440(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	jmp	.LBB284_66
.LBB284_65:                             # %cond.false.311
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	428(%rax), %ecx
	movl	%ecx, -140(%rbp)        # 4-byte Spill
.LBB284_66:                             # %cond.end.315
	movl	-140(%rbp), %eax        # 4-byte Reload
	movl	%eax, -144(%rbp)        # 4-byte Spill
	jmp	.LBB284_68
.LBB284_67:                             # %cond.false.317
	xorl	%eax, %eax
	movl	%eax, -144(%rbp)        # 4-byte Spill
	jmp	.LBB284_68
.LBB284_68:                             # %cond.end.318
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	-120(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	80(%rdx), %rdi
	movl	%ecx, -148(%rbp)        # 4-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB284_69
	jmp	.LBB284_74
.LBB284_69:                             # %cond.true.325
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB284_96
# BB#70:                                # %land.lhs.true.331
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB284_96
# BB#71:                                # %land.lhs.true.338
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB284_96
# BB#72:                                # %land.lhs.true.348
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB284_96
# BB#73:                                # %land.lhs.true.356
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB284_75
	jmp	.LBB284_96
.LBB284_74:                             # %cond.false.365
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_75
	jmp	.LBB284_96
.LBB284_75:                             # %cond.true.366
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 444(%rax)
	jl	.LBB284_77
# BB#76:                                # %cond.true.370
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	444(%rax), %ecx
	movl	%ecx, -164(%rbp)        # 4-byte Spill
	jmp	.LBB284_95
.LBB284_77:                             # %cond.false.373
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB284_80
# BB#78:                                # %land.lhs.true.377
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB284_80
# BB#79:                                # %cond.true.382
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	cmpl	$0, -196(%rax)
	jne	.LBB284_81
	jmp	.LBB284_86
.LBB284_80:                             # %cond.false.392
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB284_81
	jmp	.LBB284_86
.LBB284_81:                             # %cond.true.393
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	$0, 192(%rax)
	je	.LBB284_84
# BB#82:                                # %land.lhs.true.397
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	cmpq	$0, 8(%rax)
	je	.LBB284_84
# BB#83:                                # %cond.true.402
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movl	-196(%rax), %edx
	movl	%edx, -168(%rbp)        # 4-byte Spill
	jmp	.LBB284_85
.LBB284_84:                             # %cond.false.413
	xorl	%eax, %eax
	movl	%eax, -168(%rbp)        # 4-byte Spill
	jmp	.LBB284_85
.LBB284_85:                             # %cond.end.414
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB284_94
.LBB284_86:                             # %cond.false.416
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	testb	$1, globals+3413
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	movb	%al, -185(%rbp)         # 1-byte Spill
	je	.LBB284_93
# BB#87:                                # %lor.lhs.false.421
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	selected_window, %rdi
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movb	$1, %cl
	movq	-200(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%cl, -185(%rbp)         # 1-byte Spill
	je	.LBB284_93
# BB#88:                                # %lor.rhs.426
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$0, minibuf_level
	movb	%cl, -201(%rbp)         # 1-byte Spill
	jle	.LBB284_92
# BB#89:                                # %land.lhs.true.429
	xorl	%edi, %edi
	movq	minibuf_selected_window, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-216(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -201(%rbp)         # 1-byte Spill
	je	.LBB284_92
# BB#90:                                # %land.lhs.true.433
	movq	selected_window, %rdi
	callq	XWINDOW
	movq	minibuf_window, %rdi
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	XWINDOW
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-224(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	movb	%dl, -201(%rbp)         # 1-byte Spill
	jne	.LBB284_92
# BB#91:                                # %land.rhs
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	minibuf_selected_window, %rdi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	XWINDOW
	movq	-232(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	sete	%cl
	movb	%cl, -201(%rbp)         # 1-byte Spill
.LBB284_92:                             # %land.end
	movb	-201(%rbp), %al         # 1-byte Reload
	movb	%al, -185(%rbp)         # 1-byte Spill
.LBB284_93:                             # %lor.end.442
	movb	-185(%rbp), %al         # 1-byte Reload
	movl	$2, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movl	%ecx, %esi
	callq	estimate_mode_line_height
	movl	%eax, -172(%rbp)        # 4-byte Spill
.LBB284_94:                             # %cond.end.445
	movl	-172(%rbp), %eax        # 4-byte Reload
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movl	%eax, 444(%rcx)
	movl	%eax, -164(%rbp)        # 4-byte Spill
.LBB284_95:                             # %cond.end.449
	movl	-164(%rbp), %eax        # 4-byte Reload
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB284_97
.LBB284_96:                             # %cond.false.451
	xorl	%eax, %eax
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB284_97
.LBB284_97:                             # %cond.end.452
	movl	-236(%rbp), %eax        # 4-byte Reload
	movl	-148(%rbp), %ecx        # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rdx
	movl	48(%rdx), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB284_99
# BB#98:                                # %if.then.457
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	72(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 72(%rcx)
.LBB284_99:                             # %if.end.462
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-28(%rbp), %ecx
	jle	.LBB284_101
# BB#100:                               # %if.then.468
	movq	-16(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	60(%rax), %ecx
	subl	-28(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	72(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 72(%rax)
.LBB284_101:                            # %if.end.475
	jmp	.LBB284_108
.LBB284_102:                            # %if.else
	movq	-16(%rbp), %rax
	movswl	34(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 52(%rax)
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB284_104
# BB#103:                               # %if.then.484
	movq	-8(%rbp), %rax
	movswl	2314(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	52(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 52(%rax)
	jmp	.LBB284_107
.LBB284_104:                            # %if.else.488
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB284_106
# BB#105:                               # %if.then.493
	movq	-8(%rbp), %rax
	movswl	2312(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	52(%rax), %edx
	subl	%ecx, %edx
	movl	%edx, 52(%rax)
.LBB284_106:                            # %if.end.497
	jmp	.LBB284_107
.LBB284_107:                            # %if.end.498
	movq	-16(%rbp), %rax
	movl	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 72(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 68(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 60(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 76(%rax)
.LBB284_108:                            # %if.end.505
	movq	-16(%rbp), %rdi
	callq	row_hash
	movq	-16(%rbp), %rdi
	movl	%eax, 40(%rdi)
	movq	-8(%rbp), %rdi
	movl	$0, 2384(%rdi)
	movq	-8(%rbp), %rdi
	movl	$0, 2380(%rdi)
	movq	-8(%rbp), %rdi
	movl	$0, 2400(%rdi)
	movq	-8(%rbp), %rdi
	movl	$0, 2396(%rdi)
	addq	$240, %rsp
	popq	%rbp
	retq
.Lfunc_end284:
	.size	compute_line_metrics, .Lfunc_end284-compute_line_metrics
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI285_0:
	.quad	4607182418800017408     # double 1
	.text
	.align	16, 0x90
	.type	hscroll_window_tree,@function
hscroll_window_tree:                    # @hscroll_window_tree
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp875:
	.cfi_def_cfa_offset 16
.Ltmp876:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp877:
	.cfi_def_cfa_register %rbp
	subq	$5120, %rsp             # imm = 0x1400
	xorps	%xmm0, %xmm0
	movq	%rdi, -8(%rbp)
	movb	$0, -9(%rbp)
	movq	globals+1016, %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$7, %eax
	sete	%cl
	andb	$1, %cl
	movb	%cl, -10(%rbp)
	movl	$0, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	testb	$1, -10(%rbp)
	je	.LBB285_4
# BB#1:                                 # %if.then
	movq	globals+1016, %rdi
	callq	XFLOAT_DATA
	xorps	%xmm1, %xmm1
	movsd	%xmm0, -24(%rbp)
	ucomisd	-24(%rbp), %xmm1
	jbe	.LBB285_3
# BB#2:                                 # %if.then.4
	movb	$0, -10(%rbp)
	movl	$0, -16(%rbp)
.LBB285_3:                              # %if.end
	jmp	.LBB285_14
.LBB285_4:                              # %if.else
	movq	globals+1016, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB285_12
# BB#5:                                 # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB285_7
	jmp	.LBB285_6
.LBB285_6:                              # %cond.true
	movq	$-2147483648, %rax      # imm = 0xFFFFFFFF80000000
	movq	globals+1016, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jle	.LBB285_8
	jmp	.LBB285_12
.LBB285_7:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	globals+1016, %rdx
	sarq	$2, %rdx
	cmpq	%rdx, %rcx
	jg	.LBB285_12
.LBB285_8:                              # %land.lhs.true.15
	movq	globals+1016, %rax
	sarq	$2, %rax
	cmpq	$2147483647, %rax       # imm = 0x7FFFFFFF
	jg	.LBB285_12
# BB#9:                                 # %if.then.19
	movq	globals+1016, %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB285_11
# BB#10:                                # %if.then.24
	movl	$0, -16(%rbp)
.LBB285_11:                             # %if.end.25
	jmp	.LBB285_13
.LBB285_12:                             # %if.else.26
	movl	$0, -16(%rbp)
.LBB285_13:                             # %if.end.27
	jmp	.LBB285_14
.LBB285_14:                             # %if.end.28
	jmp	.LBB285_15
.LBB285_15:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB285_16
	jmp	.LBB285_118
.LBB285_16:                             # %while.body
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-8(%rbp), %rdi
	callq	XWINDOW
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	WINDOWP
	testb	$1, %al
	jne	.LBB285_17
	jmp	.LBB285_18
.LBB285_17:                             # %if.then.32
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	hscroll_window_tree
	andb	$1, %al
	movzbl	%al, %ecx
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edx
	orl	%ecx, %edx
	cmpl	$0, %edx
	setne	%al
	andb	$1, %al
	movb	%al, -9(%rbp)
	jmp	.LBB285_117
.LBB285_18:                             # %if.else.40
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$0, 364(%rax)
	jl	.LBB285_116
# BB#19:                                # %if.then.43
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	200(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-32(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB285_20
	jmp	.LBB285_26
.LBB285_20:                             # %cond.true.48
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -4913(%rbp)        # 1-byte Spill
	jne	.LBB285_25
# BB#21:                                # %land.lhs.true.49
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -4913(%rbp)        # 1-byte Spill
	jne	.LBB285_25
# BB#22:                                # %land.lhs.true.53
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -4913(%rbp)        # 1-byte Spill
	je	.LBB285_25
# BB#23:                                # %land.lhs.true.59
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -4913(%rbp)        # 1-byte Spill
	je	.LBB285_25
# BB#24:                                # %land.rhs
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -4913(%rbp)        # 1-byte Spill
.LBB285_25:                             # %land.end
                                        #   in Loop: Header=BB285_15 Depth=1
	movb	-4913(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -4932(%rbp)       # 4-byte Spill
	jmp	.LBB285_27
.LBB285_26:                             # %cond.false.69
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, -4932(%rbp)       # 4-byte Spill
	jmp	.LBB285_27
.LBB285_27:                             # %cond.end
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-4932(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-4912(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -56(%rbp)
	movq	-32(%rbp), %rdx
	movslq	364(%rdx), %rdx
	movq	-56(%rbp), %rdi
	movq	-32(%rbp), %r8
	movq	200(%r8), %r8
	movq	8(%r8), %r8
	subq	%r8, %rdi
	sarq	$8, %rdi
	cmpq	%rdi, %rdx
	jge	.LBB285_29
# BB#28:                                # %if.then.81
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	200(%rax), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB285_30
.LBB285_29:                             # %if.else.88
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-56(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -48(%rbp)
.LBB285_30:                             # %if.end.90
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB285_43
# BB#31:                                # %if.then.95
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	-32(%rbp), %rcx
	movq	80(%rcx), %rdi
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB285_32
	jmp	.LBB285_38
.LBB285_32:                             # %cond.true.104
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -4945(%rbp)        # 1-byte Spill
	jne	.LBB285_37
# BB#33:                                # %land.lhs.true.109
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -4945(%rbp)        # 1-byte Spill
	jne	.LBB285_37
# BB#34:                                # %land.lhs.true.115
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -4945(%rbp)        # 1-byte Spill
	je	.LBB285_37
# BB#35:                                # %land.lhs.true.124
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-4960(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -4945(%rbp)        # 1-byte Spill
	je	.LBB285_37
# BB#36:                                # %land.rhs.131
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -4945(%rbp)        # 1-byte Spill
.LBB285_37:                             # %land.end.138
                                        #   in Loop: Header=BB285_15 Depth=1
	movb	-4945(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -4964(%rbp)       # 4-byte Spill
	jmp	.LBB285_39
.LBB285_38:                             # %cond.false.140
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, -4964(%rbp)       # 4-byte Spill
	jmp	.LBB285_39
.LBB285_39:                             # %cond.end.141
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-4964(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-4944(%rbp), %rdi       # 8-byte Reload
	addq	%rdx, %rdi
	movq	%rdi, -56(%rbp)
	movq	-32(%rbp), %rdx
	movslq	364(%rdx), %rdx
	movq	-56(%rbp), %rdi
	movq	-32(%rbp), %r8
	movq	192(%r8), %r8
	movq	8(%r8), %r8
	subq	%r8, %rdi
	sarq	$8, %rdi
	cmpq	%rdi, %rdx
	jge	.LBB285_41
# BB#40:                                # %if.then.159
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	364(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB285_42
.LBB285_41:                             # %if.else.166
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-56(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -48(%rbp)
.LBB285_42:                             # %if.end.168
                                        #   in Loop: Header=BB285_15 Depth=1
	jmp	.LBB285_43
.LBB285_43:                             # %if.end.169
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	$1, %esi
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -57(%rbp)
	movq	-32(%rbp), %rdi
	callq	window_box_width
	movl	%eax, -40(%rbp)
	movq	globals+3136, %rdi
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movslq	364(%rdx), %rdx
	imulq	%rdx, %rdi
	movl	%edi, %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rdi
	callq	Fwindow_point
	movq	-8(%rbp), %rdi
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	callq	Fwindow_old_point
	movq	-4976(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fequal
	xorl	%edi, %edi
	movq	%rax, -4984(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4984(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB285_45
# BB#44:                                # %if.then.186
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movw	468(%rax), %cx
	andw	$32767, %cx             # imm = 0x7FFF
	movw	%cx, 468(%rax)
.LBB285_45:                             # %if.end.189
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	104(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	selected_window, %rcx
	movq	%rdi, -4992(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-5000(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB285_53
# BB#46:                                # %cond.true.193
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	cmpq	current_buffer, %rax
	jne	.LBB285_48
# BB#47:                                # %cond.true.198
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	jmp	.LBB285_52
.LBB285_48:                             # %cond.false.199
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	360(%rax), %rax
	movq	%rax, -5016(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5016(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB285_50
# BB#49:                                # %cond.true.205
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	736(%rax), %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	jmp	.LBB285_51
.LBB285_50:                             # %cond.false.209
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -5024(%rbp)       # 8-byte Spill
.LBB285_51:                             # %cond.end.214
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-5024(%rbp), %rax       # 8-byte Reload
	movq	%rax, -5008(%rbp)       # 8-byte Spill
.LBB285_52:                             # %cond.end.216
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-5008(%rbp), %rax       # 8-byte Reload
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	jmp	.LBB285_54
.LBB285_53:                             # %cond.false.219
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	96(%rax), %rdi
	callq	Fmarker_position
	movq	%rax, -5032(%rbp)       # 8-byte Spill
.LBB285_54:                             # %cond.end.221
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-5032(%rbp), %rax       # 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	80(%rcx), %rdx
	movq	-4992(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fset_marker
	movl	$187, %edi
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx
	movq	80(%rcx), %rsi
	movq	%rax, %rdi
	callq	Fbuffer_local_value
	xorl	%edi, %edi
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-5048(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB285_115
# BB#55:                                # %land.lhs.true.231
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$15, %cx
	testw	$1, %cx
	jne	.LBB285_115
# BB#56:                                # %land.lhs.true.236
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-48(%rbp), %rax
	cmpq	$1, 80(%rax)
	jl	.LBB285_115
# BB#57:                                # %land.lhs.true.239
                                        #   in Loop: Header=BB285_15 Depth=1
	testb	$1, -57(%rbp)
	jne	.LBB285_63
# BB#58:                                # %land.lhs.true.241
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	cmpq	$0, 272(%rax)
	je	.LBB285_60
# BB#59:                                # %land.lhs.true.243
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	352(%rax), %ecx
	cmpl	-36(%rbp), %ecx
	jle	.LBB285_69
.LBB285_60:                             # %lor.lhs.false
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB285_63
# BB#61:                                # %land.lhs.true.253
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB285_63
# BB#62:                                # %land.lhs.true.259
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	352(%rax), %ecx
	movl	-40(%rbp), %edx
	subl	-36(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB285_69
.LBB285_63:                             # %lor.lhs.false.265
                                        #   in Loop: Header=BB285_15 Depth=1
	testb	$1, -57(%rbp)
	je	.LBB285_115
# BB#64:                                # %land.lhs.true.268
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB285_67
# BB#65:                                # %land.lhs.true.275
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-48(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB285_67
# BB#66:                                # %land.lhs.true.282
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	352(%rax), %ecx
	cmpl	-36(%rbp), %ecx
	jle	.LBB285_69
.LBB285_67:                             # %lor.lhs.false.287
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	cmpq	$0, 272(%rax)
	je	.LBB285_115
# BB#68:                                # %land.lhs.true.290
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	352(%rax), %ecx
	movl	-40(%rbp), %edx
	subl	-36(%rbp), %edx
	cmpl	%edx, %ecx
	jl	.LBB285_115
.LBB285_69:                             # %if.then.296
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	current_buffer, %rax
	movq	%rax, -4880(%rbp)
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, current_buffer
	movq	-32(%rbp), %rax
	movq	selected_window, %rdi
	movq	%rax, -5056(%rbp)       # 8-byte Spill
	callq	XWINDOW
	movq	-5056(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB285_71
# BB#70:                                # %if.then.304
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -4888(%rbp)
	jmp	.LBB285_72
.LBB285_71:                             # %if.else.307
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rdi, -5064(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	callq	marker_position
	movq	current_buffer, %rdi
	movq	768(%rdi), %rdx
	movq	-5064(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	clip_to_bounds
	movq	%rax, -4888(%rbp)
.LBB285_72:                             # %if.end.311
                                        #   in Loop: Header=BB285_15 Depth=1
	leaq	-4864(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	init_to_row_start
	leaq	-4864(%rbp), %rdi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$8, %ecx
	movl	$10000000, -2544(%rbp)  # imm = 0x989680
	movq	-4888(%rbp), %rsi
	callq	move_it_in_display_line_to
	movq	-4880(%rbp), %rsi
	movq	%rsi, current_buffer
	testb	$1, -10(%rbp)
	movl	%eax, -5068(%rbp)       # 4-byte Spill
	jne	.LBB285_90
# BB#73:                                # %land.lhs.true.314
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB285_90
# BB#74:                                # %if.then.317
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-2460(%rbp), %eax
	cmpl	$0, -2760(%rbp)
	movl	%eax, -5072(%rbp)       # 4-byte Spill
	jne	.LBB285_79
# BB#75:                                # %land.lhs.true.320
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpl	$10, -2740(%rbp)
	je	.LBB285_78
# BB#76:                                # %lor.lhs.false.323
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpl	$13, -2740(%rbp)
	jne	.LBB285_79
# BB#77:                                # %land.lhs.true.327
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpq	$0, -2768(%rbp)
	je	.LBB285_79
.LBB285_78:                             # %cond.true.329
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-40(%rbp), %eax
	movq	-4848(%rbp), %rcx
	movl	364(%rcx), %edx
	shll	$2, %edx
	subl	%edx, %eax
	movl	%eax, -5076(%rbp)       # 4-byte Spill
	jmp	.LBB285_80
.LBB285_79:                             # %cond.false.333
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	$2, %eax
	movl	-40(%rbp), %ecx
	movl	%eax, -5080(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-5080(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movl	%eax, -5076(%rbp)       # 4-byte Spill
.LBB285_80:                             # %cond.end.334
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-5076(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movl	-5072(%rbp), %edx       # 4-byte Reload
	subl	%eax, %edx
	cmpl	%edx, %ecx
	jle	.LBB285_82
# BB#81:                                # %cond.true.339
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, -5084(%rbp)       # 4-byte Spill
	jmp	.LBB285_89
.LBB285_82:                             # %cond.false.340
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-2460(%rbp), %eax
	cmpl	$0, -2760(%rbp)
	movl	%eax, -5088(%rbp)       # 4-byte Spill
	jne	.LBB285_87
# BB#83:                                # %land.lhs.true.345
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpl	$10, -2740(%rbp)
	je	.LBB285_86
# BB#84:                                # %lor.lhs.false.349
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpl	$13, -2740(%rbp)
	jne	.LBB285_87
# BB#85:                                # %land.lhs.true.353
                                        #   in Loop: Header=BB285_15 Depth=1
	cmpq	$0, -2768(%rbp)
	je	.LBB285_87
.LBB285_86:                             # %cond.true.356
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-40(%rbp), %eax
	movq	-4848(%rbp), %rcx
	movl	364(%rcx), %edx
	shll	$2, %edx
	subl	%edx, %eax
	movl	%eax, -5092(%rbp)       # 4-byte Spill
	jmp	.LBB285_88
.LBB285_87:                             # %cond.false.361
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	$2, %eax
	movl	-40(%rbp), %ecx
	movl	%eax, -5096(%rbp)       # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-5096(%rbp), %ecx       # 4-byte Reload
	idivl	%ecx
	movl	%eax, -5092(%rbp)       # 4-byte Spill
.LBB285_88:                             # %cond.end.363
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-5092(%rbp), %eax       # 4-byte Reload
	movl	-5088(%rbp), %ecx       # 4-byte Reload
	subl	%eax, %ecx
	movl	%ecx, -5084(%rbp)       # 4-byte Spill
.LBB285_89:                             # %cond.end.366
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-5084(%rbp), %eax       # 4-byte Reload
	movq	-4848(%rbp), %rcx
	cltd
	idivl	364(%rcx)
	movslq	%eax, %rcx
	movq	%rcx, -4872(%rbp)
	jmp	.LBB285_109
.LBB285_90:                             # %if.else.372
                                        #   in Loop: Header=BB285_15 Depth=1
	testb	$1, -57(%rbp)
	jne	.LBB285_92
# BB#91:                                # %land.lhs.true.374
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	352(%rax), %ecx
	movl	-40(%rbp), %edx
	subl	-36(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB285_94
.LBB285_92:                             # %lor.lhs.false.380
                                        #   in Loop: Header=BB285_15 Depth=1
	testb	$1, -57(%rbp)
	je	.LBB285_101
# BB#93:                                # %land.lhs.true.383
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movl	352(%rax), %ecx
	cmpl	-36(%rbp), %ecx
	jg	.LBB285_101
.LBB285_94:                             # %if.then.388
                                        #   in Loop: Header=BB285_15 Depth=1
	testb	$1, -10(%rbp)
	je	.LBB285_96
# BB#95:                                # %if.then.390
                                        #   in Loop: Header=BB285_15 Depth=1
	movsd	.LCPI285_0, %xmm0       # xmm0 = mem[0],zero
	cvtsi2sdl	-40(%rbp), %xmm1
	subsd	-24(%rbp), %xmm0
	mulsd	%xmm0, %xmm1
	cvtsi2sdl	-36(%rbp), %xmm0
	subsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %eax
	movl	%eax, -4892(%rbp)
	jmp	.LBB285_97
.LBB285_96:                             # %if.else.397
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-40(%rbp), %eax
	movl	-16(%rbp), %ecx
	movq	-4848(%rbp), %rdx
	imull	364(%rdx), %ecx
	subl	%ecx, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -4892(%rbp)
.LBB285_97:                             # %if.end.403
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	-2460(%rbp), %ecx
	subl	-4892(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB285_99
# BB#98:                                # %cond.true.408
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, -5100(%rbp)       # 4-byte Spill
	jmp	.LBB285_100
.LBB285_99:                             # %cond.false.409
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-2460(%rbp), %eax
	subl	-4892(%rbp), %eax
	movl	%eax, -5100(%rbp)       # 4-byte Spill
.LBB285_100:                            # %cond.end.412
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-5100(%rbp), %eax       # 4-byte Reload
	movq	-4848(%rbp), %rcx
	cltd
	idivl	364(%rcx)
	movslq	%eax, %rcx
	movq	%rcx, -4872(%rbp)
	jmp	.LBB285_108
.LBB285_101:                            # %if.else.418
                                        #   in Loop: Header=BB285_15 Depth=1
	testb	$1, -10(%rbp)
	je	.LBB285_103
# BB#102:                               # %if.then.420
                                        #   in Loop: Header=BB285_15 Depth=1
	cvtsi2sdl	-40(%rbp), %xmm0
	mulsd	-24(%rbp), %xmm0
	cvtsi2sdl	-36(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	movl	%eax, -4892(%rbp)
	jmp	.LBB285_104
.LBB285_103:                            # %if.else.426
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-16(%rbp), %eax
	movq	-4848(%rbp), %rcx
	imull	364(%rcx), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -4892(%rbp)
.LBB285_104:                            # %if.end.431
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	-2460(%rbp), %ecx
	subl	-4892(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB285_106
# BB#105:                               # %cond.true.436
                                        #   in Loop: Header=BB285_15 Depth=1
	xorl	%eax, %eax
	movl	%eax, -5104(%rbp)       # 4-byte Spill
	jmp	.LBB285_107
.LBB285_106:                            # %cond.false.437
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-2460(%rbp), %eax
	subl	-4892(%rbp), %eax
	movl	%eax, -5104(%rbp)       # 4-byte Spill
.LBB285_107:                            # %cond.end.440
                                        #   in Loop: Header=BB285_15 Depth=1
	movl	-5104(%rbp), %eax       # 4-byte Reload
	movq	-4848(%rbp), %rcx
	cltd
	idivl	364(%rcx)
	movslq	%eax, %rcx
	movq	%rcx, -4872(%rbp)
.LBB285_108:                            # %if.end.446
                                        #   in Loop: Header=BB285_15 Depth=1
	jmp	.LBB285_109
.LBB285_109:                            # %if.end.447
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-4872(%rbp), %rax
	movq	-32(%rbp), %rcx
	cmpq	280(%rcx), %rax
	jle	.LBB285_111
# BB#110:                               # %cond.true.450
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-4872(%rbp), %rax
	movq	%rax, -5112(%rbp)       # 8-byte Spill
	jmp	.LBB285_112
.LBB285_111:                            # %cond.false.451
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	280(%rax), %rax
	movq	%rax, -5112(%rbp)       # 8-byte Spill
.LBB285_112:                            # %cond.end.453
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-5112(%rbp), %rax       # 8-byte Reload
	movq	%rax, -4872(%rbp)
	movq	-32(%rbp), %rax
	movq	272(%rax), %rax
	cmpq	-4872(%rbp), %rax
	je	.LBB285_114
# BB#113:                               # %if.then.458
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -4904(%rbp)
	movq	-4904(%rbp), %rax
	movb	936(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 936(%rax)
	movq	-4872(%rbp), %rax
	movq	-32(%rbp), %rdi
	movq	%rax, 272(%rdi)
	movb	$1, -9(%rbp)
.LBB285_114:                            # %if.end.464
                                        #   in Loop: Header=BB285_15 Depth=1
	jmp	.LBB285_115
.LBB285_115:                            # %if.end.465
                                        #   in Loop: Header=BB285_15 Depth=1
	jmp	.LBB285_116
.LBB285_116:                            # %if.end.466
                                        #   in Loop: Header=BB285_15 Depth=1
	jmp	.LBB285_117
.LBB285_117:                            # %if.end.467
                                        #   in Loop: Header=BB285_15 Depth=1
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB285_15
.LBB285_118:                            # %while.end
	movb	-9(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$5120, %rsp             # imm = 0x1400
	popq	%rbp
	retq
.Lfunc_end285:
	.size	hscroll_window_tree, .Lfunc_end285-hscroll_window_tree
	.cfi_endproc

	.align	16, 0x90
	.type	append_space_for_newline,@function
append_space_for_newline:               # @append_space_for_newline
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp878:
	.cfi_def_cfa_offset 16
.Ltmp879:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp880:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movb	%sil, %al
	movq	%rdi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %esi
	cmpl	$2, %esi
	jne	.LBB286_58
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rax
	movq	-16(%rbp), %rdx
	movq	2352(%rdx), %rdx
	cmpq	16(%rdx), %rax
	jae	.LBB286_57
# BB#2:                                 # %if.then.8
	xorl	%eax, %eax
	movl	$16, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movl	2104(%rsi), %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rsi
	movl	2124(%rsi), %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rsi
	movl	2128(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rsi
	movl	2208(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	2404(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movq	-16(%rbp), %rsi
	movl	2108(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rsi
	movw	2112(%rsi), %di
	shrw	$4, %di
	andw	$1, %di
	movb	%dil, %r8b
	andb	$1, %r8b
	movb	%r8b, -49(%rbp)
	movq	-16(%rbp), %rsi
	movq	2288(%rsi), %rsi
	movq	%rsi, -80(%rbp)
	movq	-16(%rbp), %rsi
	movq	2296(%rsi), %r9
	movq	%r9, -72(%rbp)
	movq	2304(%rsi), %rsi
	movq	%rsi, -64(%rbp)
	movq	-16(%rbp), %rsi
	movl	$0, 2104(%rsi)
	movq	-16(%rbp), %rsi
	addq	$2296, %rsi             # imm = 0x8F8
	movq	%rsi, %rdi
	movl	%eax, %esi
	movl	%eax, -140(%rbp)        # 4-byte Spill
	callq	memset
	movl	-140(%rbp), %edi        # 4-byte Reload
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rdx
	movq	%rax, 2288(%rdx)
	movq	-16(%rbp), %rax
	movl	$32, 2208(%rax)
	movq	-16(%rbp), %rax
	movl	$32, 2124(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 2128(%rax)
	testb	$1, -17(%rbp)
	je	.LBB286_4
# BB#3:                                 # %if.then.20
	xorl	%esi, %esi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdi
	callq	lookup_basic_face
	movq	-16(%rbp), %rdi
	movl	%eax, 2108(%rdi)
	jmp	.LBB286_7
.LBB286_4:                              # %if.else
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$9, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB286_6
# BB#5:                                 # %if.then.28
	movq	-16(%rbp), %rax
	movl	128(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
.LBB286_6:                              # %if.end
	jmp	.LBB286_7
.LBB286_7:                              # %if.end.31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB286_8
	jmp	.LBB286_9
.LBB286_8:                              # %cond.true
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB286_10
	jmp	.LBB286_11
.LBB286_9:                              # %cond.false
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB286_11
.LBB286_10:                             # %cond.true.48
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB286_12
.LBB286_11:                             # %cond.false.53
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	jmp	.LBB286_12
.LBB286_12:                             # %cond.end
	movq	-152(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -88(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	-88(%rbp), %rsi
	movq	%rsi, -160(%rbp)        # 8-byte Spill
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movq	$-1, %rcx
	movq	-168(%rbp), %rdi        # 8-byte Reload
	movq	-160(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %r8
	callq	face_for_char
	movq	-16(%rbp), %rcx
	movl	%eax, 2108(%rcx)
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$34, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB286_15
# BB#13:                                # %land.lhs.true
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	addl	364(%rcx), %eax
	movq	-16(%rbp), %rcx
	cmpl	2320(%rcx), %eax
	jge	.LBB286_15
# BB#14:                                # %if.then.68
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-17, %cx
	movw	%cx, 2112(%rax)
.LBB286_15:                             # %if.end.72
	jmp	.LBB286_16
.LBB286_16:                             # %do.body
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB286_19
# BB#17:                                # %land.lhs.true.76
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB286_19
# BB#18:                                # %if.then.82
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB286_19:                             # %if.end.90
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB286_21
# BB#20:                                # %if.then.94
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	jmp	.LBB286_22
.LBB286_21:                             # %if.else.98
	movq	-16(%rbp), %rdi
	callq	produce_glyphs
.LBB286_22:                             # %if.end.99
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB286_24
# BB#23:                                # %if.then.103
	movb	$1, globals+3391
.LBB286_24:                             # %if.end.104
	jmp	.LBB286_25
.LBB286_25:                             # %do.end
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB286_27
# BB#26:                                # %cond.true.112
	movq	-88(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB286_28
.LBB286_27:                             # %cond.false.114
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB286_28:                             # %cond.end.117
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB286_56
# BB#29:                                # %if.then.121
	movq	-16(%rbp), %rax
	movl	2328(%rax), %ecx
	movl	%ecx, -124(%rbp)
	movq	-104(%rbp), %rax
	movl	188(%rax), %ecx
	movl	%ecx, -128(%rbp)
	movq	-104(%rbp), %rax
	testb	$1, 184(%rax)
	je	.LBB286_31
# BB#30:                                # %if.then.124
	movl	$2, %eax
	movq	-104(%rbp), %rcx
	movl	172(%rcx), %edx
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %esi
	movq	-104(%rbp), %rcx
	subl	156(%rcx), %esi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movl	368(%rcx), %edi
	movq	-104(%rbp), %rcx
	cmpl	156(%rcx), %edi
	setg	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edi
	addl	%edi, %esi
	movl	%eax, -180(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -184(%rbp)        # 4-byte Spill
	cltd
	movl	-180(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	movl	-184(%rbp), %edi        # 4-byte Reload
	addl	%eax, %edi
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	movq	232(%rcx), %rcx
	movl	172(%rcx), %eax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	384(%rcx), %rcx
	subl	240(%rcx), %eax
	subl	%eax, %edi
	subl	-128(%rbp), %edi
	movl	%edi, -128(%rbp)
.LBB286_31:                             # %if.end.146
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 2288(%rcx)
	movq	-104(%rbp), %rdi
	movq	-16(%rbp), %rax
	addq	$2372, %rax             # imm = 0x944
	movq	-16(%rbp), %rcx
	addq	$2376, %rcx             # imm = 0x948
	movq	%rax, %rdx
	callq	normal_char_ascent_descent
	movl	$621, %edi              # imm = 0x26D
	movq	-16(%rbp), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	get_it_property
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %r8d
	cmpl	$3, %r8d
	jne	.LBB286_35
# BB#32:                                # %land.lhs.true.154
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB286_35
# BB#33:                                # %land.lhs.true.160
	xorl	%edi, %edi
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB286_35
# BB#34:                                # %if.then.170
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB286_36
.LBB286_35:                             # %if.else.177
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)
.LBB286_36:                             # %if.end.179
	movl	$1, %r8d
	movq	-16(%rbp), %rdi
	movq	-112(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movl	-128(%rbp), %ecx
	callq	calc_line_height_property
	movq	%rax, -112(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 2336(%rax)
	jl	.LBB286_38
# BB#37:                                # %if.then.183
	movq	-16(%rbp), %rax
	movl	2336(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2372(%rax)
	movq	-16(%rbp), %rax
	movl	2340(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2376(%rax)
	movq	-16(%rbp), %rax
	movl	2344(%rax), %ecx
	movl	%ecx, -128(%rbp)
.LBB286_38:                             # %if.end.187
	movl	$901, %edi              # imm = 0x385
	movq	-112(%rbp), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB286_40
# BB#39:                                # %if.then.191
	movl	$0, -124(%rbp)
	jmp	.LBB286_51
.LBB286_40:                             # %if.else.192
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2388(%rax)
	movq	-16(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2392(%rax)
	movq	-112(%rbp), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB286_43
# BB#41:                                # %land.lhs.true.198
	movq	-112(%rbp), %rax
	sarq	$2, %rax
	movq	-16(%rbp), %rcx
	movl	2372(%rcx), %edx
	movq	-16(%rbp), %rcx
	addl	2376(%rcx), %edx
	movslq	%edx, %rcx
	cmpq	%rcx, %rax
	jle	.LBB286_43
# BB#42:                                # %if.then.205
	movq	-112(%rbp), %rax
	sarq	$2, %rax
	movq	-16(%rbp), %rcx
	movslq	2376(%rcx), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2372(%rax)
.LBB286_43:                             # %if.end.212
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB286_45
# BB#44:                                # %if.then.216
	xorl	%r8d, %r8d
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movl	-128(%rbp), %ecx
	callq	calc_line_height_property
	movq	%rax, -136(%rbp)
	jmp	.LBB286_46
.LBB286_45:                             # %if.else.218
	movl	$623, %edi              # imm = 0x26F
	movq	-16(%rbp), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	get_it_property
	xorl	%r8d, %r8d
	movq	%rax, -136(%rbp)
	movq	-16(%rbp), %rdi
	movq	-136(%rbp), %rsi
	movq	-104(%rbp), %rdx
	movl	-128(%rbp), %ecx
	callq	calc_line_height_property
	movq	%rax, -136(%rbp)
.LBB286_46:                             # %if.end.222
	movq	-136(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB286_50
# BB#47:                                # %if.then.228
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB286_49
# BB#48:                                # %if.then.234
	movq	-16(%rbp), %rax
	movl	2388(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2392(%rax), %ecx
	movl	-124(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -124(%rbp)
.LBB286_49:                             # %if.end.239
	jmp	.LBB286_50
.LBB286_50:                             # %if.end.240
	jmp	.LBB286_51
.LBB286_51:                             # %if.end.241
	cmpl	$0, -124(%rbp)
	jle	.LBB286_55
# BB#52:                                # %if.then.244
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	addl	2376(%rcx), %eax
	movl	%eax, 2376(%rcx)
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	2332(%rcx), %eax
	jle	.LBB286_54
# BB#53:                                # %if.then.249
	movl	-124(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2332(%rcx)
.LBB286_54:                             # %if.end.251
	jmp	.LBB286_55
.LBB286_55:                             # %if.end.252
	movq	-16(%rbp), %rax
	movl	2372(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2380(%rax)
	movq	-16(%rbp), %rax
	movl	2376(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2384(%rax)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movl	$0, 60(%rax)
.LBB286_56:                             # %if.end.257
	movq	-16(%rbp), %rax
	movw	2380(%rax), %cx
	movq	-96(%rbp), %rax
	movw	%cx, 18(%rax)
	movq	-16(%rbp), %rax
	movw	2384(%rax), %cx
	movq	-96(%rbp), %rax
	movw	%cx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 2336(%rax)
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-1025, %cx             # imm = 0xFFFFFFFFFFFFFBFF
	movw	%cx, 2112(%rax)
	movl	-44(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2404(%rax)
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rsi
	movq	%rax, 2288(%rsi)
	movq	-16(%rbp), %rax
	movups	-72(%rbp), %xmm0
	movups	%xmm0, 2296(%rax)
	movl	-28(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2104(%rax)
	movl	-48(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2108(%rax)
	movl	-36(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2128(%rax)
	movl	-32(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2124(%rax)
	movl	-40(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 2208(%rax)
	movzbl	-49(%rbp), %edx
	movw	%dx, %cx
	movb	%cl, %dil
	movq	-16(%rbp), %rax
	andl	$1, %edx
	movw	%dx, %cx
	movw	2112(%rax), %r8w
	shlw	$4, %cx
	andw	$-17, %r8w
	orw	%cx, %r8w
	movw	%r8w, 2112(%rax)
	movb	$1, -1(%rbp)
	movb	%dil, -241(%rbp)        # 1-byte Spill
	jmp	.LBB286_59
.LBB286_57:                             # %if.end.283
	jmp	.LBB286_58
.LBB286_58:                             # %if.end.284
	movb	$0, -1(%rbp)
.LBB286_59:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	retq
.Lfunc_end286:
	.size	append_space_for_newline, .Lfunc_end286-append_space_for_newline
	.cfi_endproc

	.align	16, 0x90
	.type	extend_face_to_end_of_line,@function
extend_face_to_end_of_line:             # @extend_face_to_end_of_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp881:
	.cfi_def_cfa_offset 16
.Ltmp882:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp883:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$296, %rsp              # imm = 0x128
.Ltmp884:
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -40(%rbp)
	movq	-16(%rbp), %rdi
	movl	2404(%rdi), %eax
	movq	-16(%rbp), %rdi
	movl	2320(%rdi), %edx
	movq	-40(%rbp), %rdi
	movq	208(%rdi), %rdi
	shrq	$23, %rdi
	andq	$7, %rdi
	movl	%edi, %esi
	cmpl	$2, %esi
	movl	%edx, -188(%rbp)        # 4-byte Spill
	movl	%eax, -192(%rbp)        # 4-byte Spill
	movb	%cl, -193(%rbp)         # 1-byte Spill
	je	.LBB287_3
# BB#1:                                 # %land.lhs.true
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	movq	2352(%rdx), %rdx
	movq	236(%rdx), %rdx
	shrq	$34, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -193(%rbp)         # 1-byte Spill
	je	.LBB287_3
# BB#2:                                 # %land.rhs
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	%cl, -193(%rbp)         # 1-byte Spill
.LBB287_3:                              # %land.end
	movb	-193(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	-188(%rbp), %edx        # 4-byte Reload
	addl	%ecx, %edx
	movl	-192(%rbp), %ecx        # 4-byte Reload
	cmpl	%edx, %ecx
	jl	.LBB287_7
# BB#4:                                 # %land.lhs.true.12
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jg	.LBB287_7
# BB#5:                                 # %lor.lhs.false
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jg	.LBB287_7
# BB#6:                                 # %if.then
	jmp	.LBB287_148
.LBB287_7:                              # %if.end
	movb	$1, %al
	testb	$1, %al
	jne	.LBB287_8
	jmp	.LBB287_9
.LBB287_8:                              # %cond.true
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	lookup_basic_face
	addl	$0, %eax
	movq	-40(%rbp), %rdi
	movq	160(%rdi), %rdi
	movl	32(%rdi), %esi
	addl	$0, %esi
	cmpl	%esi, %eax
	jb	.LBB287_10
	jmp	.LBB287_11
.LBB287_9:                              # %cond.false
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	lookup_basic_face
	movslq	%eax, %rdi
	addq	$0, %rdi
	movq	-40(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rdi
	jae	.LBB287_11
.LBB287_10:                             # %cond.true.33
	xorl	%esi, %esi
	movq	-40(%rbp), %rdi
	callq	lookup_basic_face
	movslq	%eax, %rdi
	movq	-40(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	jmp	.LBB287_12
.LBB287_11:                             # %cond.false.36
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	jmp	.LBB287_12
.LBB287_12:                             # %cond.end
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$9, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB287_19
# BB#13:                                # %if.then.41
	movb	$1, %al
	testb	$1, %al
	jne	.LBB287_14
	jmp	.LBB287_15
.LBB287_14:                             # %cond.true.42
	movq	-16(%rbp), %rax
	movl	128(%rax), %ecx
	addl	$0, %ecx
	movq	-40(%rbp), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB287_16
	jmp	.LBB287_17
.LBB287_15:                             # %cond.false.49
	movq	-16(%rbp), %rax
	movslq	128(%rax), %rax
	addq	$0, %rax
	movq	-40(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB287_17
.LBB287_16:                             # %cond.true.59
	movq	-16(%rbp), %rax
	movslq	128(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB287_18
.LBB287_17:                             # %cond.false.65
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	jmp	.LBB287_18
.LBB287_18:                             # %cond.end.66
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
	jmp	.LBB287_25
.LBB287_19:                             # %if.else
	movb	$1, %al
	testb	$1, %al
	jne	.LBB287_20
	jmp	.LBB287_21
.LBB287_20:                             # %cond.true.68
	movq	-16(%rbp), %rax
	movl	2108(%rax), %ecx
	addl	$0, %ecx
	movq	-40(%rbp), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB287_22
	jmp	.LBB287_23
.LBB287_21:                             # %cond.false.75
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	addq	$0, %rax
	movq	-40(%rbp), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB287_23
.LBB287_22:                             # %cond.true.85
	movq	-16(%rbp), %rax
	movslq	2108(%rax), %rax
	movq	-40(%rbp), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jmp	.LBB287_24
.LBB287_23:                             # %cond.false.91
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	jmp	.LBB287_24
.LBB287_24:                             # %cond.end.92
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, -24(%rbp)
.LBB287_25:                             # %if.end.94
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB287_32
# BB#26:                                # %land.lhs.true.102
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB287_32
# BB#27:                                # %land.lhs.true.109
	movq	-24(%rbp), %rax
	movl	240(%rax), %ecx
	andl	$3, %ecx
	cmpl	$0, %ecx
	jne	.LBB287_32
# BB#28:                                # %land.lhs.true.114
	movq	-24(%rbp), %rax
	movq	184(%rax), %rax
	movq	-40(%rbp), %rcx
	cmpq	472(%rcx), %rax
	jne	.LBB287_32
# BB#29:                                # %land.lhs.true.117
	movq	-24(%rbp), %rax
	cmpq	$0, 168(%rax)
	jne	.LBB287_32
# BB#30:                                # %land.lhs.true.118
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB287_32
# BB#31:                                # %if.then.125
	jmp	.LBB287_148
.LBB287_32:                             # %if.end.126
	movb	$1, %al
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	236(%rcx), %rdx
	andq	$-65537, %rdx           # imm = 0xFFFFFFFFFFFEFFFF
	orq	$65536, %rdx            # imm = 0x10000
	movq	%rdx, 236(%rcx)
	testb	$1, %al
	jne	.LBB287_33
	jmp	.LBB287_34
.LBB287_33:                             # %cond.true.130
	movq	-16(%rbp), %rax
	movl	2124(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	jb	.LBB287_36
	jmp	.LBB287_35
.LBB287_34:                             # %cond.false.134
	movq	-16(%rbp), %rax
	movslq	2124(%rax), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jb	.LBB287_36
.LBB287_35:                             # %if.then.140
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rsi
	movq	%rsi, -232(%rbp)        # 8-byte Spill
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movq	$-1, %rcx
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movq	-232(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %r8
	callq	face_for_char
	movq	-16(%rbp), %rcx
	movl	%eax, 2108(%rcx)
.LBB287_36:                             # %if.end.144
	movq	-40(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB287_77
# BB#37:                                # %if.then.152
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	34(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB287_39
# BB#38:                                # %if.then.159
	movabsq	$space_glyph, %rax
	movl	$48, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movq	8(%rsi), %rsi
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	memcpy
	movq	-24(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movl	28(%rax), %r8d
	andl	$1048575, %ecx          # imm = 0xFFFFF
	andl	$-1048576, %r8d         # imm = 0xFFFFFFFFFFF00000
	orl	%ecx, %r8d
	movl	%r8d, 28(%rax)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movw	$1, 34(%rax)
.LBB287_39:                             # %if.end.174
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB287_47
# BB#40:                                # %if.then.180
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB287_43
# BB#41:                                # %land.lhs.true.190
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	32(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB287_43
# BB#42:                                # %if.then.197
	movabsq	$space_glyph, %rax
	movl	$48, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movq	(%rsi), %rsi
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	memcpy
	movq	-32(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	(%rax), %rax
	movl	28(%rax), %r8d
	andl	$1048575, %ecx          # imm = 0xFFFFF
	andl	$-1048576, %r8d         # imm = 0xFFFFFFFFFFF00000
	orl	%ecx, %r8d
	movl	%r8d, 28(%rax)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movw	$1, 32(%rax)
.LBB287_43:                             # %if.end.215
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB287_46
# BB#44:                                # %land.lhs.true.225
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	36(%rax), %ecx
	cmpl	$0, %ecx
	jne	.LBB287_46
# BB#45:                                # %if.then.232
	movabsq	$space_glyph, %rax
	movl	$48, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	memcpy
	movq	-32(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	16(%rax), %rax
	movl	28(%rax), %r8d
	andl	$1048575, %ecx          # imm = 0xFFFFF
	andl	$-1048576, %r8d         # imm = 0xFFFFFFFFFFF00000
	orl	%ecx, %r8d
	movl	%r8d, 28(%rax)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movw	$1, 36(%rax)
.LBB287_46:                             # %if.end.250
	jmp	.LBB287_47
.LBB287_47:                             # %if.end.251
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB287_76
# BB#48:                                # %if.then.258
	movq	-24(%rbp), %rax
	cmpq	$0, 224(%rax)
	je	.LBB287_50
# BB#49:                                # %cond.true.261
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB287_51
.LBB287_50:                             # %cond.false.263
	movq	-40(%rbp), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB287_51:                             # %cond.end.265
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movl	$0, -76(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB287_52:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB287_55
# BB#53:                                # %for.body
                                        #   in Loop: Header=BB287_52 Depth=1
	movq	-72(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
# BB#54:                                # %for.inc
                                        #   in Loop: Header=BB287_52 Depth=1
	movq	-72(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB287_52
.LBB287_55:                             # %for.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB287_57
# BB#56:                                # %cond.true.282
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -252(%rbp)        # 4-byte Spill
	jmp	.LBB287_58
.LBB287_57:                             # %cond.false.285
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -252(%rbp)        # 4-byte Spill
.LBB287_58:                             # %cond.end.290
	movl	-252(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rdx
	cmpl	$0, 424(%rdx)
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jl	.LBB287_60
# BB#59:                                # %cond.true.297
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
	jmp	.LBB287_61
.LBB287_60:                             # %cond.false.300
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
.LBB287_61:                             # %cond.end.305
	movl	-260(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	-256(%rbp), %edx        # 4-byte Reload
	cmpl	%eax, %edx
	je	.LBB287_66
# BB#62:                                # %lor.lhs.false.311
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB287_64
# BB#63:                                # %cond.true.316
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -264(%rbp)        # 4-byte Spill
	jmp	.LBB287_65
.LBB287_64:                             # %cond.false.319
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -264(%rbp)        # 4-byte Spill
.LBB287_65:                             # %cond.end.324
	movl	-264(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	je	.LBB287_67
.LBB287_66:                             # %if.then.328
	movl	$1, %esi
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	callq	window_box_width
	movl	%eax, -84(%rbp)
	jmp	.LBB287_68
.LBB287_67:                             # %if.else.331
	movq	-16(%rbp), %rax
	movl	2320(%rax), %ecx
	movq	-16(%rbp), %rax
	subl	2316(%rax), %ecx
	movl	%ecx, -84(%rbp)
.LBB287_68:                             # %if.end.334
	movl	-76(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jle	.LBB287_73
# BB#69:                                # %if.then.338
	xorl	%esi, %esi
	movl	$16, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	movl	2372(%rcx), %eax
	movq	-16(%rbp), %rcx
	addl	2376(%rcx), %eax
	movq	-48(%rbp), %rcx
	imull	168(%rcx), %eax
	movq	-48(%rbp), %rcx
	movq	%rdx, -272(%rbp)        # 8-byte Spill
	cltd
	idivl	156(%rcx)
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rcx
	movq	2296(%rcx), %rdi
	movq	%rdi, -104(%rbp)
	movq	2304(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	-16(%rbp), %rcx
	addq	$2296, %rcx             # imm = 0x8F8
	movq	%rcx, %rdi
	movq	-272(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, %rdx
	callq	memset
	movq	-16(%rbp), %rcx
	movb	88(%rcx), %r8b
	shrb	$6, %r8b
	andb	$1, %r8b
	andb	$1, %r8b
	movb	%r8b, -109(%rbp)
	movq	-16(%rbp), %rcx
	movb	88(%rcx), %r8b
	andb	$-65, %r8b
	orb	$64, %r8b
	movb	%r8b, 88(%rcx)
	movq	-16(%rbp), %rcx
	movl	2108(%rcx), %eax
	movl	%eax, -108(%rbp)
	movq	-16(%rbp), %rcx
	movw	2112(%rcx), %r9w
	shrw	$3, %r9w
	andw	$1, %r9w
	movb	%r9b, %r8b
	andb	$1, %r8b
	movb	%r8b, -110(%rbp)
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$15, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB287_71
# BB#70:                                # %if.then.362
	movq	-32(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
	jmp	.LBB287_72
.LBB287_71:                             # %if.else.365
	movq	-24(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
.LBB287_72:                             # %if.end.368
	movq	-16(%rbp), %rax
	movw	2112(%rax), %cx
	andw	$-9, %cx
	movw	%cx, 2112(%rax)
	movq	-16(%rbp), %rdi
	xorl	%edx, %edx
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movl	%edx, %edi
	callq	builtin_lisp_symbol
	movl	-84(%rbp), %edx
	movq	-16(%rbp), %rsi
	movl	2372(%rsi), %edi
	movl	2376(%rsi), %r8d
	addl	%r8d, %edi
	movl	-80(%rbp), %r8d
	movq	-280(%rbp), %rsi        # 8-byte Reload
	movl	%edi, -284(%rbp)        # 4-byte Spill
	movq	%rsi, %rdi
	movq	%rax, %rsi
	movl	-284(%rbp), %ecx        # 4-byte Reload
	callq	append_stretch_glyph
	movq	-16(%rbp), %rax
	movups	-104(%rbp), %xmm0
	movups	%xmm0, 2296(%rax)
	movb	-109(%rbp), %r9b
	movq	-16(%rbp), %rax
	andb	$1, %r9b
	movb	88(%rax), %r10b
	shlb	$6, %r9b
	andb	$-65, %r10b
	orb	%r9b, %r10b
	movb	%r10b, 88(%rax)
	movl	-108(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
	movzbl	-110(%rbp), %ecx
	movw	%cx, %r11w
	movb	%r11b, %r9b
	movq	-16(%rbp), %rax
	andl	$1, %ecx
	movw	%cx, %r11w
	movw	2112(%rax), %bx
	shlw	$3, %r11w
	andw	$-9, %bx
	orw	%r11w, %bx
	movw	%bx, 2112(%rax)
	movb	%r9b, -285(%rbp)        # 1-byte Spill
.LBB287_73:                             # %if.end.391
	cmpl	$0, -84(%rbp)
	jge	.LBB287_75
# BB#74:                                # %if.then.394
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movl	%eax, 44(%rcx)
.LBB287_75:                             # %if.end.397
	jmp	.LBB287_76
.LBB287_76:                             # %if.end.398
	jmp	.LBB287_148
.LBB287_77:                             # %if.else.399
	xorl	%eax, %eax
	movl	$16, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movl	2404(%rsi), %ecx
	movl	%ecx, -116(%rbp)
	movq	-16(%rbp), %rsi
	movl	2104(%rsi), %ecx
	movl	%ecx, -148(%rbp)
	movq	-16(%rbp), %rsi
	movl	2108(%rsi), %ecx
	movl	%ecx, -152(%rbp)
	movq	-16(%rbp), %rsi
	movq	2288(%rsi), %rsi
	movq	%rsi, -144(%rbp)
	movq	-16(%rbp), %rsi
	movq	2296(%rsi), %rdi
	movq	%rdi, -136(%rbp)
	movq	2304(%rsi), %rsi
	movq	%rsi, -128(%rbp)
	movq	-16(%rbp), %rsi
	movl	$0, 2104(%rsi)
	movq	-16(%rbp), %rsi
	addq	$2296, %rsi             # imm = 0x8F8
	movq	%rsi, %rdi
	movl	%eax, %esi
	movl	%eax, -292(%rbp)        # 4-byte Spill
	callq	memset
	movl	-292(%rbp), %edi        # 4-byte Reload
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rdx
	movq	%rax, 2288(%rdx)
	movq	-16(%rbp), %rax
	movl	$32, 2208(%rax)
	movq	-16(%rbp), %rax
	movl	$32, 2124(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 2128(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB287_99
# BB#78:                                # %land.lhs.true.419
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	32(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB287_99
# BB#79:                                # %land.lhs.true.433
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB287_99
# BB#80:                                # %land.lhs.true.440
	movq	-32(%rbp), %rax
	movq	184(%rax), %rax
	movq	-40(%rbp), %rcx
	cmpq	472(%rcx), %rax
	je	.LBB287_99
# BB#81:                                # %if.then.445
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	32(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 2404(%rax)
.LBB287_82:                             # %for.cond.457
                                        # =>This Inner Loop Header: Depth=1
	movq	-160(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jae	.LBB287_85
# BB#83:                                # %for.body.460
                                        #   in Loop: Header=BB287_82 Depth=1
	movq	-160(%rbp), %rax
	movswl	16(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2404(%rax), %ecx
	movl	%ecx, 2404(%rax)
# BB#84:                                # %for.inc.465
                                        #   in Loop: Header=BB287_82 Depth=1
	movq	-160(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB287_82
.LBB287_85:                             # %for.end.467
	movq	-16(%rbp), %rax
	movl	$0, 2360(%rax)
	movq	-32(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
.LBB287_86:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	32(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	428(%rax), %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB287_98
# BB#87:                                # %while.body
                                        #   in Loop: Header=BB287_86 Depth=1
	jmp	.LBB287_88
.LBB287_88:                             # %do.body
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_91
# BB#89:                                # %land.lhs.true.486
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB287_91
# BB#90:                                # %if.then.492
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB287_91:                             # %if.end.503
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB287_93
# BB#92:                                # %if.then.507
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	jmp	.LBB287_94
.LBB287_93:                             # %if.else.511
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rdi
	callq	produce_glyphs
.LBB287_94:                             # %if.end.512
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_96
# BB#95:                                # %if.then.516
                                        #   in Loop: Header=BB287_86 Depth=1
	movb	$1, globals+3391
.LBB287_96:                             # %if.end.517
                                        #   in Loop: Header=BB287_86 Depth=1
	jmp	.LBB287_97
.LBB287_97:                             # %do.end
                                        #   in Loop: Header=BB287_86 Depth=1
	movq	-16(%rbp), %rax
	movl	2368(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2404(%rax), %ecx
	movl	%ecx, 2404(%rax)
	jmp	.LBB287_86
.LBB287_98:                             # %while.end
	movl	-116(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movq	-16(%rbp), %rcx
	movl	$1, 2360(%rcx)
.LBB287_99:                             # %if.end.523
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB287_101
# BB#100:                               # %if.then.530
	movq	-32(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
	jmp	.LBB287_102
.LBB287_101:                            # %if.else.533
	movq	-24(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
.LBB287_102:                            # %if.end.536
	jmp	.LBB287_103
.LBB287_103:                            # %do.body.537
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_106
# BB#104:                               # %land.lhs.true.541
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB287_106
# BB#105:                               # %if.then.548
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB287_106:                            # %if.end.561
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB287_108
# BB#107:                               # %if.then.567
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	jmp	.LBB287_109
.LBB287_108:                            # %if.else.572
	movq	-16(%rbp), %rdi
	callq	produce_glyphs
.LBB287_109:                            # %if.end.573
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_111
# BB#110:                               # %if.then.577
	movb	$1, globals+3391
.LBB287_111:                            # %if.end.578
	jmp	.LBB287_112
.LBB287_112:                            # %do.end.579
	jmp	.LBB287_113
.LBB287_113:                            # %while.cond.580
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movl	2404(%rax), %ecx
	movq	-16(%rbp), %rax
	cmpl	2320(%rax), %ecx
	jg	.LBB287_125
# BB#114:                               # %while.body.585
                                        #   in Loop: Header=BB287_113 Depth=1
	jmp	.LBB287_115
.LBB287_115:                            # %do.body.586
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_118
# BB#116:                               # %land.lhs.true.590
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB287_118
# BB#117:                               # %if.then.597
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB287_118:                            # %if.end.610
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB287_120
# BB#119:                               # %if.then.616
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	jmp	.LBB287_121
.LBB287_120:                            # %if.else.621
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rdi
	callq	produce_glyphs
.LBB287_121:                            # %if.end.622
                                        #   in Loop: Header=BB287_113 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_123
# BB#122:                               # %if.then.626
                                        #   in Loop: Header=BB287_113 Depth=1
	movb	$1, globals+3391
.LBB287_123:                            # %if.end.627
                                        #   in Loop: Header=BB287_113 Depth=1
	jmp	.LBB287_124
.LBB287_124:                            # %do.end.628
                                        #   in Loop: Header=BB287_113 Depth=1
	jmp	.LBB287_113
.LBB287_125:                            # %while.end.629
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %ecx
	cmpl	$0, %ecx
	jle	.LBB287_147
# BB#126:                               # %land.lhs.true.639
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	36(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB287_147
# BB#127:                               # %land.lhs.true.653
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB287_147
# BB#128:                               # %land.lhs.true.660
	movq	-32(%rbp), %rax
	movq	184(%rax), %rax
	movq	-40(%rbp), %rcx
	cmpq	472(%rcx), %rax
	je	.LBB287_147
# BB#129:                               # %if.then.665
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	36(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
.LBB287_130:                            # %for.cond.677
                                        # =>This Inner Loop Header: Depth=1
	movq	-176(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jae	.LBB287_133
# BB#131:                               # %for.body.680
                                        #   in Loop: Header=BB287_130 Depth=1
	movq	-176(%rbp), %rax
	movswl	16(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2404(%rax), %ecx
	movl	%ecx, 2404(%rax)
# BB#132:                               # %for.inc.685
                                        #   in Loop: Header=BB287_130 Depth=1
	movq	-176(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB287_130
.LBB287_133:                            # %for.end.687
	movq	-16(%rbp), %rax
	movl	$2, 2360(%rax)
	movq	-32(%rbp), %rax
	movl	152(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 2108(%rax)
.LBB287_134:                            # %while.cond.691
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	36(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	432(%rax), %edx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	imull	364(%rax), %edx
	cmpl	%edx, %ecx
	jge	.LBB287_146
# BB#135:                               # %while.body.705
                                        #   in Loop: Header=BB287_134 Depth=1
	jmp	.LBB287_136
.LBB287_136:                            # %do.body.706
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_139
# BB#137:                               # %land.lhs.true.710
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB287_139
# BB#138:                               # %if.then.717
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$2, 4768(%rax)
	sete	%cl
	movq	-16(%rbp), %rax
	movq	2352(%rax), %rax
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %esi
	movq	236(%rax), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rax)
.LBB287_139:                            # %if.end.730
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB287_141
# BB#140:                               # %if.then.736
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdi
	callq	*%rax
	jmp	.LBB287_142
.LBB287_141:                            # %if.else.741
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rdi
	callq	produce_glyphs
.LBB287_142:                            # %if.end.742
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 2352(%rax)
	je	.LBB287_144
# BB#143:                               # %if.then.746
                                        #   in Loop: Header=BB287_134 Depth=1
	movb	$1, globals+3391
.LBB287_144:                            # %if.end.747
                                        #   in Loop: Header=BB287_134 Depth=1
	jmp	.LBB287_145
.LBB287_145:                            # %do.end.748
                                        #   in Loop: Header=BB287_134 Depth=1
	movq	-16(%rbp), %rax
	movl	2368(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	2404(%rax), %ecx
	movl	%ecx, 2404(%rax)
	jmp	.LBB287_134
.LBB287_146:                            # %while.end.752
	movq	-16(%rbp), %rax
	movl	$1, 2360(%rax)
.LBB287_147:                            # %if.end.754
	movl	-116(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2404(%rcx)
	movq	-144(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 2288(%rdx)
	movq	-16(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movq	%rdx, 2296(%rcx)
	movq	-128(%rbp), %rdx
	movq	%rdx, 2304(%rcx)
	movl	-148(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2104(%rcx)
	movl	-152(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 2108(%rcx)
.LBB287_148:                            # %if.end.760
	addq	$296, %rsp              # imm = 0x128
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end287:
	.size	extend_face_to_end_of_line, .Lfunc_end287-extend_face_to_end_of_line
	.cfi_endproc

	.align	16, 0x90
	.type	unproduce_glyphs,@function
unproduce_glyphs:                       # @unproduce_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp885:
	.cfi_def_cfa_offset 16
.Ltmp886:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp887:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %esi
	movq	-8(%rbp), %rdi
	movq	2352(%rdi), %rdi
	movswl	34(%rdi), %eax
	cmpl	%eax, %esi
	jle	.LBB288_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movswl	34(%rax), %ecx
	movl	%ecx, -12(%rbp)
.LBB288_2:                              # %if.end
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
.LBB288_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB288_6
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB288_3 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movslq	%eax, %rcx
	imulq	$48, %rcx, %rcx
	addq	-24(%rbp), %rcx
	movq	-24(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#5:                                 # %for.inc
                                        #   in Loop: Header=BB288_3 Depth=1
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB288_3
.LBB288_6:                              # %for.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end288:
	.size	unproduce_glyphs, .Lfunc_end288-unproduce_glyphs
	.cfi_endproc

	.align	16, 0x90
	.type	insert_left_trunc_glyphs,@function
insert_left_trunc_glyphs:               # @insert_left_trunc_glyphs
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp888:
	.cfi_def_cfa_offset 16
.Ltmp889:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp890:
	.cfi_def_cfa_register %rbp
	subq	$4960, %rsp             # imm = 0x1360
	xorl	%eax, %eax
	movabsq	$scratch_glyph_row, %rcx
	movl	$4800, %edx             # imm = 0x12C0
                                        # kill: RDX<def> EDX<kill>
	leaq	-4808(%rbp), %rsi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -4912(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	-4912(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -4920(%rbp)       # 8-byte Spill
	movl	%eax, -4924(%rbp)       # 4-byte Spill
	callq	memcpy
	movl	$0, -2404(%rbp)
	movl	$0, -2700(%rbp)
	movq	-4920(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -2456(%rbp)
	movl	$1, -2448(%rbp)
	movq	-2456(%rbp), %rdx
	movw	$0, 34(%rdx)
	movq	$-1, -2504(%rbp)
	movq	$-1, -2512(%rbp)
	movl	-4924(%rbp), %edi       # 4-byte Reload
	callq	builtin_lisp_symbol
	leaq	-4808(%rbp), %rdi
	movl	$6, %esi
	movq	%rax, -2520(%rbp)
	callq	produce_special_glyphs
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB289_33
# BB#1:                                 # %if.then
	movq	-2456(%rbp), %rax
	movw	34(%rax), %cx
	movw	%cx, -4842(%rbp)
	movq	-2456(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -4816(%rbp)
	movq	-4816(%rbp), %rax
	movswl	-4842(%rbp), %edx
	movslq	%edx, %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rax
	movq	%rax, -4824(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -4832(%rbp)
	movq	-4832(%rbp), %rax
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movswl	34(%rsi), %edx
	movslq	%edx, %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rax
	movq	%rax, -4840(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %edx
	cmpl	$2, %edx
	jne	.LBB289_17
# BB#2:                                 # %if.then.23
	movl	$0, -4848(%rbp)
	movq	-4832(%rbp), %rax
	movq	%rax, -4856(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movl	$0, 44(%rax)
.LBB289_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4856(%rbp), %rdx
	cmpq	-4840(%rbp), %rdx
	movb	%cl, -4925(%rbp)        # 1-byte Spill
	jae	.LBB289_5
# BB#4:                                 # %land.rhs
                                        #   in Loop: Header=BB289_3 Depth=1
	movl	-4848(%rbp), %eax
	movq	-8(%rbp), %rcx
	movswl	2312(%rcx), %edx
	cmpl	%edx, %eax
	setl	%sil
	movb	%sil, -4925(%rbp)       # 1-byte Spill
.LBB289_5:                              # %land.end
                                        #   in Loop: Header=BB289_3 Depth=1
	movb	-4925(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB289_6
	jmp	.LBB289_7
.LBB289_6:                              # %while.body
                                        #   in Loop: Header=BB289_3 Depth=1
	movq	-4856(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-4848(%rbp), %ecx
	movl	%ecx, -4848(%rbp)
	movq	-4856(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -4856(%rbp)
	jmp	.LBB289_3
.LBB289_7:                              # %while.end
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-4856(%rbp), %rdx
	movq	-4832(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movswq	-4842(%rbp), %rcx
	subq	%rcx, %rax
	cmpq	$0, %rax
	jle	.LBB289_9
# BB#8:                                 # %if.then.35
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-4832(%rbp), %rdx
	movswl	-4842(%rbp), %eax
	movslq	%eax, %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rdx
	movq	-4856(%rbp), %rsi
	movq	-4840(%rbp), %rdi
	movq	-4856(%rbp), %r8
	subq	%r8, %rdi
	movq	%rdi, %rax
	movq	%rdx, -4936(%rbp)       # 8-byte Spill
	cqto
	idivq	%rcx
	imulq	$48, %rax, %rax
	movq	-4936(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rdx
	movq	%rcx, -4944(%rbp)       # 8-byte Spill
	callq	memmove
	movq	-4856(%rbp), %rax
	movq	-4832(%rbp), %rcx
	subq	%rcx, %rax
	cqto
	movq	-4944(%rbp), %rcx       # 8-byte Reload
	idivq	%rcx
	movswq	-4842(%rbp), %rsi
	subq	%rsi, %rax
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movswq	34(%rsi), %rdi
	subq	%rax, %rdi
	movw	%di, %r9w
	movw	%r9w, 34(%rsi)
.LBB289_9:                              # %if.end
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movw	34(%rax), %cx
	movw	%cx, -4858(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB289_16
# BB#10:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 424(%rax)
	jl	.LBB289_12
# BB#11:                                # %cond.true
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -4948(%rbp)       # 4-byte Spill
	jmp	.LBB289_13
.LBB289_12:                             # %cond.false
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -4948(%rbp)       # 4-byte Spill
.LBB289_13:                             # %cond.end
	movl	-4948(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB289_16
# BB#14:                                # %land.lhs.true.74
	movswl	-4858(%rbp), %eax
	subl	$2, %eax
	movslq	%eax, %rcx
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	imulq	$48, %rcx, %rcx
	addq	8(%rdx), %rcx
	movl	24(%rcx), %eax
	andl	$7, %eax
	cmpl	$4, %eax
	jne	.LBB289_16
# BB#15:                                # %if.then.85
	movl	-4848(%rbp), %eax
	movq	-8(%rbp), %rcx
	movswl	2312(%rcx), %edx
	subl	%edx, %eax
	movl	%eax, -4864(%rbp)
	movl	-4864(%rbp), %eax
	movswl	-4858(%rbp), %edx
	subl	$2, %edx
	movslq	%edx, %rcx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	imulq	$48, %rcx, %rcx
	addq	8(%rsi), %rcx
	movswl	16(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, %di
	movw	%di, 16(%rcx)
.LBB289_16:                             # %if.end.100
	jmp	.LBB289_17
.LBB289_17:                             # %if.end.101
	jmp	.LBB289_18
.LBB289_18:                             # %while.cond.102
                                        # =>This Inner Loop Header: Depth=1
	movq	-4816(%rbp), %rax
	cmpq	-4824(%rbp), %rax
	jae	.LBB289_20
# BB#19:                                # %while.body.105
                                        #   in Loop: Header=BB289_18 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-4832(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$48, %rsi
	movq	%rsi, -4832(%rbp)
	movq	-4816(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$48, %rdi
	movq	%rdi, -4816(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB289_18
.LBB289_20:                             # %while.end.108
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB289_30
# BB#21:                                # %if.then.117
	jmp	.LBB289_22
.LBB289_22:                             # %while.cond.118
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_26 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4832(%rbp), %rdx
	cmpq	-4840(%rbp), %rdx
	movb	%cl, -4949(%rbp)        # 1-byte Spill
	jae	.LBB289_24
# BB#23:                                # %land.rhs.121
                                        #   in Loop: Header=BB289_22 Depth=1
	movq	-4832(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	movb	%dl, -4949(%rbp)        # 1-byte Spill
.LBB289_24:                             # %land.end.127
                                        #   in Loop: Header=BB289_22 Depth=1
	movb	-4949(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB289_25
	jmp	.LBB289_29
.LBB289_25:                             # %while.body.128
                                        #   in Loop: Header=BB289_22 Depth=1
	movq	-2456(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -4816(%rbp)
.LBB289_26:                             # %while.cond.132
                                        #   Parent Loop BB289_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-4816(%rbp), %rax
	cmpq	-4824(%rbp), %rax
	jae	.LBB289_28
# BB#27:                                # %while.body.135
                                        #   in Loop: Header=BB289_26 Depth=2
	movl	$48, %eax
	movl	%eax, %edx
	movq	-4832(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$48, %rsi
	movq	%rsi, -4832(%rbp)
	movq	-4816(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$48, %rdi
	movq	%rdi, -4816(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB289_26
.LBB289_28:                             # %while.end.138
                                        #   in Loop: Header=BB289_22 Depth=1
	jmp	.LBB289_22
.LBB289_29:                             # %while.end.139
	jmp	.LBB289_30
.LBB289_30:                             # %if.end.140
	movq	-4832(%rbp), %rax
	cmpq	-4840(%rbp), %rax
	jbe	.LBB289_32
# BB#31:                                # %if.then.143
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-4832(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	2352(%rsi), %rsi
	movq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movw	%ax, %di
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movw	%di, 34(%rax)
.LBB289_32:                             # %if.end.155
	jmp	.LBB289_76
.LBB289_33:                             # %if.else
	movq	-2456(%rbp), %rax
	movw	34(%rax), %cx
	movw	%cx, -4866(%rbp)
	movq	-2456(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -4824(%rbp)
	movq	-4824(%rbp), %rax
	movq	-2456(%rbp), %rdx
	movswl	34(%rdx), %esi
	movslq	%esi, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rax
	addq	$-48, %rax
	movq	%rax, -4816(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -4840(%rbp)
	movq	-4840(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	2352(%rdx), %rdx
	movswl	34(%rdx), %esi
	movslq	%esi, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rax
	addq	$-48, %rax
	movq	%rax, -4832(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %esi
	cmpl	$2, %esi
	jne	.LBB289_49
# BB#34:                                # %if.then.188
	movl	$0, -4872(%rbp)
	movq	-4832(%rbp), %rax
	movq	%rax, -4880(%rbp)
.LBB289_35:                             # %while.cond.191
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4880(%rbp), %rdx
	cmpq	-4840(%rbp), %rdx
	movb	%cl, -4950(%rbp)        # 1-byte Spill
	jb	.LBB289_37
# BB#36:                                # %land.rhs.194
                                        #   in Loop: Header=BB289_35 Depth=1
	movl	-4872(%rbp), %eax
	movq	-8(%rbp), %rcx
	movswl	2312(%rcx), %edx
	cmpl	%edx, %eax
	setl	%sil
	movb	%sil, -4950(%rbp)       # 1-byte Spill
.LBB289_37:                             # %land.end.199
                                        #   in Loop: Header=BB289_35 Depth=1
	movb	-4950(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB289_38
	jmp	.LBB289_39
.LBB289_38:                             # %while.body.200
                                        #   in Loop: Header=BB289_35 Depth=1
	movq	-4880(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-4872(%rbp), %ecx
	movl	%ecx, -4872(%rbp)
	movq	-4880(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -4880(%rbp)
	jmp	.LBB289_35
.LBB289_39:                             # %while.end.205
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-4832(%rbp), %rdx
	movq	-4880(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movswq	-4866(%rbp), %rcx
	subq	%rcx, %rax
	cmpq	$0, %rax
	jle	.LBB289_41
# BB#40:                                # %if.then.214
	movq	-4880(%rbp), %rax
	movswl	-4866(%rbp), %ecx
	movslq	%ecx, %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rax
	movq	%rax, -4832(%rbp)
.LBB289_41:                             # %if.end.218
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB289_48
# BB#42:                                # %land.lhs.true.226
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB289_44
# BB#43:                                # %cond.true.230
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -4956(%rbp)       # 4-byte Spill
	jmp	.LBB289_45
.LBB289_44:                             # %cond.false.233
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -4956(%rbp)       # 4-byte Spill
.LBB289_45:                             # %cond.end.238
	movl	-4956(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB289_48
# BB#46:                                # %land.lhs.true.242
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movl	72(%rax), %ecx
	andl	$7, %ecx
	cmpl	$4, %ecx
	jne	.LBB289_48
# BB#47:                                # %if.then.252
	movl	-4872(%rbp), %eax
	movq	-8(%rbp), %rcx
	movswl	2312(%rcx), %edx
	subl	%edx, %eax
	movl	%eax, -4884(%rbp)
	movl	-4884(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	8(%rcx), %rcx
	movswl	64(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, %si
	movw	%si, 64(%rcx)
.LBB289_48:                             # %if.end.265
	jmp	.LBB289_49
.LBB289_49:                             # %if.end.266
	jmp	.LBB289_50
.LBB289_50:                             # %while.cond.267
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4816(%rbp), %rdx
	cmpq	-4824(%rbp), %rdx
	movb	%cl, -4957(%rbp)        # 1-byte Spill
	jb	.LBB289_52
# BB#51:                                # %land.rhs.270
                                        #   in Loop: Header=BB289_50 Depth=1
	movq	-4832(%rbp), %rax
	cmpq	-4840(%rbp), %rax
	setae	%cl
	movb	%cl, -4957(%rbp)        # 1-byte Spill
.LBB289_52:                             # %land.end.273
                                        #   in Loop: Header=BB289_50 Depth=1
	movb	-4957(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB289_53
	jmp	.LBB289_54
.LBB289_53:                             # %while.body.274
                                        #   in Loop: Header=BB289_50 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-4832(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$-48, %rsi
	movq	%rsi, -4832(%rbp)
	movq	-4816(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$-48, %rdi
	movq	%rdi, -4816(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB289_50
.LBB289_54:                             # %while.end.277
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB289_66
# BB#55:                                # %if.then.286
	jmp	.LBB289_56
.LBB289_56:                             # %while.cond.287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_60 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4832(%rbp), %rdx
	cmpq	-4840(%rbp), %rdx
	movb	%cl, -4958(%rbp)        # 1-byte Spill
	jb	.LBB289_58
# BB#57:                                # %land.rhs.290
                                        #   in Loop: Header=BB289_56 Depth=1
	movq	-4832(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	movb	%dl, -4958(%rbp)        # 1-byte Spill
.LBB289_58:                             # %land.end.297
                                        #   in Loop: Header=BB289_56 Depth=1
	movb	-4958(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB289_59
	jmp	.LBB289_65
.LBB289_59:                             # %while.body.298
                                        #   in Loop: Header=BB289_56 Depth=1
	movq	-2456(%rbp), %rax
	movq	8(%rax), %rax
	movq	-2456(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -4816(%rbp)
.LBB289_60:                             # %while.cond.309
                                        #   Parent Loop BB289_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4816(%rbp), %rdx
	cmpq	-4824(%rbp), %rdx
	movb	%cl, -4959(%rbp)        # 1-byte Spill
	jb	.LBB289_62
# BB#61:                                # %land.rhs.312
                                        #   in Loop: Header=BB289_60 Depth=2
	movq	-4832(%rbp), %rax
	cmpq	-4840(%rbp), %rax
	setae	%cl
	movb	%cl, -4959(%rbp)        # 1-byte Spill
.LBB289_62:                             # %land.end.315
                                        #   in Loop: Header=BB289_60 Depth=2
	movb	-4959(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB289_63
	jmp	.LBB289_64
.LBB289_63:                             # %while.body.316
                                        #   in Loop: Header=BB289_60 Depth=2
	movl	$48, %eax
	movl	%eax, %edx
	movq	-4832(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$-48, %rsi
	movq	%rsi, -4832(%rbp)
	movq	-4816(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$-48, %rdi
	movq	%rdi, -4816(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB289_60
.LBB289_64:                             # %while.end.319
                                        #   in Loop: Header=BB289_56 Depth=1
	jmp	.LBB289_56
.LBB289_65:                             # %while.end.320
	jmp	.LBB289_66
.LBB289_66:                             # %if.end.321
	movq	-4816(%rbp), %rax
	cmpq	-4824(%rbp), %rax
	jb	.LBB289_75
# BB#67:                                # %if.then.324
	movl	$48, %eax
	movl	%eax, %ecx
	movq	-4816(%rbp), %rdx
	movq	-4824(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	addq	$1, %rax
	movl	%eax, %edi
	movl	%edi, -4888(%rbp)
	movq	-8(%rbp), %rax
	movq	2352(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -4896(%rbp)
	movq	-4896(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	34(%rcx), %edi
	movslq	%edi, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -4904(%rbp)
.LBB289_68:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-4904(%rbp), %rax
	cmpq	-4896(%rbp), %rax
	jb	.LBB289_71
# BB#69:                                # %for.body
                                        #   in Loop: Header=BB289_68 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movslq	-4888(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	-4904(%rbp), %rcx
	movq	-4904(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#70:                                # %for.inc
                                        #   in Loop: Header=BB289_68 Depth=1
	movq	-4904(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -4904(%rbp)
	jmp	.LBB289_68
.LBB289_71:                             # %for.end
	jmp	.LBB289_72
.LBB289_72:                             # %while.cond.347
                                        # =>This Inner Loop Header: Depth=1
	movq	-4816(%rbp), %rax
	cmpq	-4824(%rbp), %rax
	jb	.LBB289_74
# BB#73:                                # %while.body.350
                                        #   in Loop: Header=BB289_72 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-4832(%rbp), %rcx
	movq	%rcx, %rsi
	addq	$-48, %rsi
	movq	%rsi, -4832(%rbp)
	movq	-4816(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$-48, %rdi
	movq	%rdi, -4816(%rbp)
	movq	%rcx, %rdi
	callq	memcpy
	jmp	.LBB289_72
.LBB289_74:                             # %while.end.353
	movl	-4888(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movswl	34(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, %si
	movw	%si, 34(%rcx)
.LBB289_75:                             # %if.end.360
	jmp	.LBB289_76
.LBB289_76:                             # %if.end.361
	addq	$4960, %rsp             # imm = 0x1360
	popq	%rbp
	retq
.Lfunc_end289:
	.size	insert_left_trunc_glyphs, .Lfunc_end289-insert_left_trunc_glyphs
	.cfi_endproc

	.align	16, 0x90
	.type	find_row_edges,@function
find_row_edges:                         # @find_row_edges
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp891:
	.cfi_def_cfa_offset 16
.Ltmp892:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp893:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rcx
	movq	current_buffer, %rdx
	cmpq	768(%rdx), %rcx
	jg	.LBB290_3
# BB#1:                                 # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	cmpq	80(%rcx), %rax
	jge	.LBB290_3
# BB#2:                                 # %if.then
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 176(%rcx)
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 184(%rcx)
	jmp	.LBB290_4
.LBB290_3:                              # %if.else
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdx
	movq	%rdx, 176(%rax)
	movq	88(%rcx), %rcx
	movq	%rcx, 184(%rax)
.LBB290_4:                              # %if.end
	cmpq	$0, -40(%rbp)
	jg	.LBB290_6
# BB#5:                                 # %if.then.8
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -48(%rbp)
.LBB290_6:                              # %if.end.14
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB290_8
# BB#7:                                 # %if.then.15
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 192(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 200(%rax)
	jmp	.LBB290_103
.LBB290_8:                              # %if.else.18
	movq	-16(%rbp), %rax
	cmpw	$0, 34(%rax)
	je	.LBB290_101
# BB#9:                                 # %if.then.19
	movb	$0, -49(%rbp)
	movq	-16(%rbp), %rax
	addq	$-256, %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movq	2288(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB290_10
	jmp	.LBB290_39
.LBB290_10:                             # %land.lhs.true.20
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	200(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jbe	.LBB290_39
# BB#11:                                # %land.lhs.true.22
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB290_39
# BB#12:                                # %land.lhs.true.27
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$26, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB290_39
# BB#13:                                # %if.then.32
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB290_26
# BB#14:                                # %if.then.38
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
.LBB290_15:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-80(%rbp), %rdx
	cmpq	-72(%rbp), %rdx
	movb	%cl, -97(%rbp)          # 1-byte Spill
	jbe	.LBB290_18
# BB#16:                                # %land.lhs.true.45
                                        #   in Loop: Header=BB290_15 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	-40(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-112(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -97(%rbp)          # 1-byte Spill
	jne	.LBB290_18
# BB#17:                                # %land.rhs
                                        #   in Loop: Header=BB290_15 Depth=1
	movq	-80(%rbp), %rax
	cmpq	$0, -48(%rax)
	setle	%cl
	movb	%cl, -97(%rbp)          # 1-byte Spill
.LBB290_18:                             # %land.end
                                        #   in Loop: Header=BB290_15 Depth=1
	movb	-97(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB290_19
	jmp	.LBB290_20
.LBB290_19:                             # %while.body
                                        #   in Loop: Header=BB290_15 Depth=1
	movq	-80(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB290_15
.LBB290_20:                             # %while.end
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jbe	.LBB290_24
# BB#21:                                # %if.then.57
	movq	-80(%rbp), %rax
	movq	-40(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	2288(%rcx), %rax
	jne	.LBB290_23
# BB#22:                                # %if.then.63
	movb	$1, -49(%rbp)
.LBB290_23:                             # %if.end.64
	jmp	.LBB290_25
.LBB290_24:                             # %if.else.65
	movb	$1, -49(%rbp)
.LBB290_25:                             # %if.end.66
	jmp	.LBB290_38
.LBB290_26:                             # %if.else.67
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	addq	$-48, %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	-64(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
.LBB290_27:                             # %while.cond.76
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-80(%rbp), %rdx
	cmpq	-72(%rbp), %rdx
	movb	%cl, -113(%rbp)         # 1-byte Spill
	jae	.LBB290_30
# BB#28:                                # %land.lhs.true.79
                                        #   in Loop: Header=BB290_27 Depth=1
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-128(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -113(%rbp)         # 1-byte Spill
	jne	.LBB290_30
# BB#29:                                # %land.rhs.85
                                        #   in Loop: Header=BB290_27 Depth=1
	movq	-80(%rbp), %rax
	cmpq	$0, 48(%rax)
	setle	%cl
	movb	%cl, -113(%rbp)         # 1-byte Spill
.LBB290_30:                             # %land.end.90
                                        #   in Loop: Header=BB290_27 Depth=1
	movb	-113(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB290_31
	jmp	.LBB290_32
.LBB290_31:                             # %while.body.91
                                        #   in Loop: Header=BB290_27 Depth=1
	movq	-80(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB290_27
.LBB290_32:                             # %while.end.93
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB290_36
# BB#33:                                # %if.then.96
	movq	-80(%rbp), %rax
	movq	56(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	2288(%rcx), %rax
	jne	.LBB290_35
# BB#34:                                # %if.then.102
	movb	$1, -49(%rbp)
.LBB290_35:                             # %if.end.103
	jmp	.LBB290_37
.LBB290_36:                             # %if.else.104
	movb	$1, -49(%rbp)
.LBB290_37:                             # %if.end.105
	jmp	.LBB290_38
.LBB290_38:                             # %if.end.106
	jmp	.LBB290_39
.LBB290_39:                             # %if.end.107
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$26, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB290_63
# BB#40:                                # %land.lhs.true.114
	testb	$1, -49(%rbp)
	jne	.LBB290_63
# BB#41:                                # %if.then.116
	movq	-16(%rbp), %rax
	movq	128(%rax), %rax
	cmpq	-40(%rbp), %rax
	jle	.LBB290_62
# BB#42:                                # %if.then.122
	jmp	.LBB290_43
.LBB290_43:                             # %do.body
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB290_45
# BB#44:                                # %if.then.126
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB290_60
.LBB290_45:                             # %if.else.128
	jmp	.LBB290_46
.LBB290_46:                             # %do.body.129
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB290_48
# BB#47:                                # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB290_49
.LBB290_48:                             # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	jmp	.LBB290_49
.LBB290_49:                             # %cond.end
	movq	-144(%rbp), %rax        # 8-byte Reload
	addq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movzbl	(%rax), %edx
	andl	$128, %edx
	cmpl	$0, %edx
	jne	.LBB290_51
# BB#50:                                # %cond.true.138
	movl	$1, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB290_58
.LBB290_51:                             # %cond.false.139
	movq	-88(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB290_53
# BB#52:                                # %cond.true.143
	movl	$2, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB290_57
.LBB290_53:                             # %cond.false.144
	movq	-88(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB290_55
# BB#54:                                # %cond.true.148
	movl	$3, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB290_56
.LBB290_55:                             # %cond.false.149
	movl	$5, %eax
	movl	$4, %ecx
	movq	-88(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$8, %esi
	cmpl	$0, %esi
	setne	%dil
	xorb	$-1, %dil
	testb	$1, %dil
	cmovnel	%ecx, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
.LBB290_56:                             # %cond.end.154
	movl	-156(%rbp), %eax        # 4-byte Reload
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB290_57:                             # %cond.end.156
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	%eax, -148(%rbp)        # 4-byte Spill
.LBB290_58:                             # %cond.end.158
	movl	-148(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	addq	-48(%rbp), %rcx
	movq	%rcx, -48(%rbp)
# BB#59:                                # %do.end
	jmp	.LBB290_60
.LBB290_60:                             # %if.end.162
	jmp	.LBB290_61
.LBB290_61:                             # %do.end.163
	jmp	.LBB290_62
.LBB290_62:                             # %if.end.164
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 192(%rcx)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 200(%rcx)
	jmp	.LBB290_100
.LBB290_63:                             # %if.else.169
	movq	-8(%rbp), %rax
	cmpq	$0, 2416(%rax)
	jle	.LBB290_65
# BB#64:                                # %if.then.173
	movq	-8(%rbp), %rax
	movq	2416(%rax), %rax
	addq	$1, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 192(%rcx)
	movq	-8(%rbp), %rax
	movq	2424(%rax), %rax
	addq	$1, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 200(%rcx)
	jmp	.LBB290_99
.LBB290_65:                             # %if.else.184
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$13, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB290_90
# BB#66:                                # %if.then.189
	movq	-8(%rbp), %rax
	movq	312(%rax), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB290_69
# BB#67:                                # %land.lhs.true.195
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB290_69
# BB#68:                                # %if.then.198
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 192(%rcx)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 200(%rcx)
	jmp	.LBB290_89
.LBB290_69:                             # %if.else.203
	jmp	.LBB290_70
.LBB290_70:                             # %do.body.204
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB290_72
# BB#71:                                # %if.then.210
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB290_87
.LBB290_72:                             # %if.else.212
	jmp	.LBB290_73
.LBB290_73:                             # %do.body.213
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB290_75
# BB#74:                                # %cond.true.219
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB290_76
.LBB290_75:                             # %cond.false.222
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jmp	.LBB290_76
.LBB290_76:                             # %cond.end.223
	movq	-176(%rbp), %rax        # 8-byte Reload
	addq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movzbl	(%rax), %edx
	andl	$128, %edx
	cmpl	$0, %edx
	jne	.LBB290_78
# BB#77:                                # %cond.true.233
	movl	$1, %eax
	movl	%eax, -180(%rbp)        # 4-byte Spill
	jmp	.LBB290_85
.LBB290_78:                             # %cond.false.234
	movq	-96(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB290_80
# BB#79:                                # %cond.true.238
	movl	$2, %eax
	movl	%eax, -184(%rbp)        # 4-byte Spill
	jmp	.LBB290_84
.LBB290_80:                             # %cond.false.239
	movq	-96(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB290_82
# BB#81:                                # %cond.true.243
	movl	$3, %eax
	movl	%eax, -188(%rbp)        # 4-byte Spill
	jmp	.LBB290_83
.LBB290_82:                             # %cond.false.244
	movl	$5, %eax
	movl	$4, %ecx
	movq	-96(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$8, %esi
	cmpl	$0, %esi
	setne	%dil
	xorb	$-1, %dil
	testb	$1, %dil
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)        # 4-byte Spill
.LBB290_83:                             # %cond.end.250
	movl	-188(%rbp), %eax        # 4-byte Reload
	movl	%eax, -184(%rbp)        # 4-byte Spill
.LBB290_84:                             # %cond.end.252
	movl	-184(%rbp), %eax        # 4-byte Reload
	movl	%eax, -180(%rbp)        # 4-byte Spill
.LBB290_85:                             # %cond.end.254
	movl	-180(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	addq	-48(%rbp), %rcx
	movq	%rcx, -48(%rbp)
# BB#86:                                # %do.end.258
	jmp	.LBB290_87
.LBB290_87:                             # %if.end.259
	jmp	.LBB290_88
.LBB290_88:                             # %do.end.260
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 192(%rcx)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 200(%rcx)
.LBB290_89:                             # %if.end.265
	jmp	.LBB290_98
.LBB290_90:                             # %if.else.266
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$12, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB290_92
# BB#91:                                # %if.then.271
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 192(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 200(%rax)
	jmp	.LBB290_97
.LBB290_92:                             # %if.else.275
	movq	-40(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB290_95
# BB#93:                                # %land.lhs.true.278
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	je	.LBB290_95
# BB#94:                                # %if.then.282
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	176(%rcx), %rdx
	movq	%rdx, 192(%rax)
	movq	184(%rcx), %rcx
	movq	%rcx, 200(%rax)
	jmp	.LBB290_96
.LBB290_95:                             # %if.else.285
	callq	emacs_abort
.LBB290_96:                             # %if.end.286
	jmp	.LBB290_97
.LBB290_97:                             # %if.end.287
	jmp	.LBB290_98
.LBB290_98:                             # %if.end.288
	jmp	.LBB290_99
.LBB290_99:                             # %if.end.289
	jmp	.LBB290_100
.LBB290_100:                            # %if.end.290
	jmp	.LBB290_102
.LBB290_101:                            # %if.else.291
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	312(%rcx), %rdx
	movq	%rdx, 192(%rax)
	movq	320(%rcx), %rcx
	movq	%rcx, 200(%rax)
.LBB290_102:                            # %if.end.295
	jmp	.LBB290_103
.LBB290_103:                            # %if.end.296
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end290:
	.size	find_row_edges, .Lfunc_end290-find_row_edges
	.cfi_endproc

	.align	16, 0x90
	.type	overlay_arrow_at_row,@function
overlay_arrow_at_row:                   # @overlay_arrow_at_row
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp894:
	.cfi_def_cfa_offset 16
.Ltmp895:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp896:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	globals+1720, %rsi
	movq	%rsi, -32(%rbp)
.LBB291_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB291_21
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB291_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_20
.LBB291_4:                              # %if.end
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-40(%rbp), %rdi
	callq	find_symbol_value
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB291_19
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-48(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB291_19
# BB#6:                                 # %land.lhs.true.13
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	current_buffer, %rax
	movq	-48(%rbp), %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	XMARKER
	movq	-64(%rbp), %rdi         # 8-byte Reload
	cmpq	8(%rax), %rdi
	jne	.LBB291_19
# BB#7:                                 # %land.lhs.true.17
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-24(%rbp), %rax
	movq	176(%rax), %rax
	movq	-48(%rbp), %rdi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	marker_position
	movq	-72(%rbp), %rdi         # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB291_19
# BB#8:                                 # %if.then.21
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	jne	.LBB291_18
# BB#9:                                 # %land.lhs.true.24
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpl	$0, 420(%rax)
	jl	.LBB291_11
# BB#10:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	420(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	jmp	.LBB291_12
.LBB291_11:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	344(%rax), %ecx
	movl	%ecx, -76(%rbp)         # 4-byte Spill
.LBB291_12:                             # %cond.end
	movl	-76(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jle	.LBB291_18
# BB#13:                                # %if.then.34
	movl	$731, %edi              # imm = 0x2DB
	movq	-40(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB291_17
# BB#14:                                # %if.then.41
	movq	-48(%rbp), %rdi
	callq	lookup_fringe_bitmap
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	je	.LBB291_16
# BB#15:                                # %if.then.45
	movslq	-52(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB291_22
.LBB291_16:                             # %if.end.47
	jmp	.LBB291_17
.LBB291_17:                             # %if.end.48
	movq	$-2, -8(%rbp)
	jmp	.LBB291_22
.LBB291_18:                             # %if.end.49
	movq	-40(%rbp), %rdi
	callq	overlay_arrow_string_or_property
	movq	%rax, -8(%rbp)
	jmp	.LBB291_22
.LBB291_19:                             # %if.end.51
                                        #   in Loop: Header=BB291_1 Depth=1
	jmp	.LBB291_20
.LBB291_20:                             # %for.inc
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB291_1
.LBB291_21:                             # %for.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB291_22:                             # %return
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end291:
	.size	overlay_arrow_at_row, .Lfunc_end291-overlay_arrow_at_row
	.cfi_endproc

	.align	16, 0x90
	.type	get_overlay_arrow_glyph_row,@function
get_overlay_arrow_glyph_row:            # @get_overlay_arrow_glyph_row
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp897:
	.cfi_def_cfa_offset 16
.Ltmp898:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp899:
	.cfi_def_cfa_register %rbp
	subq	$4912, %rsp             # imm = 0x1330
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	$5, %rsi
	movq	%rsi, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	80(%rsi), %rdi
	callq	XBUFFER
	movq	%rax, -32(%rbp)
	movq	current_buffer, %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rdi
	callq	SDATA
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rdi
	callq	SCHARS
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rdi
	callq	set_buffer_temp
	leaq	-4872(%rbp), %rdi
	movq	$-1, %rax
	movabsq	$scratch_glyph_row, %r8
	xorl	%r9d, %r9d
	movq	-8(%rbp), %rsi
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	init_iterator
	xorl	%edi, %edi
	movabsq	$-17179869185, %rax     # imm = 0xFFFFFFFBFFFFFFFF
	andq	scratch_glyph_row+236, %rax
	movq	%rax, scratch_glyph_row+236
	movq	-2520(%rbp), %rax
	movw	$0, 34(%rax)
	movq	$0, -2576(%rbp)
	movq	$0, -2568(%rbp)
	movq	-32(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-4904(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r10b
	xorb	$-1, %r10b
	andb	$1, %r10b
	movb	%r10b, -4873(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB292_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB292_22
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB292_1 Depth=1
	testb	$1, -4873(%rbp)
	je	.LBB292_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB292_1 Depth=1
	leaq	-4872(%rbp), %rax
	movq	-72(%rbp), %rdi
	addq	$2128, %rax             # imm = 0x850
	movq	%rax, %rsi
	callq	string_char_and_length
	movl	%eax, -2664(%rbp)
	movl	%eax, -2748(%rbp)
	jmp	.LBB292_9
.LBB292_4:                              # %if.else
                                        #   in Loop: Header=BB292_1 Depth=1
	movb	$1, %al
	movq	-72(%rbp), %rcx
	movzbl	(%rcx), %edx
	movl	%edx, -2664(%rbp)
	movl	%edx, -2748(%rbp)
	movl	$1, -2744(%rbp)
	testb	$1, %al
	jne	.LBB292_5
	jmp	.LBB292_6
.LBB292_5:                              # %cond.true
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-2748(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB292_8
	jmp	.LBB292_7
.LBB292_6:                              # %cond.false
                                        #   in Loop: Header=BB292_1 Depth=1
	movslq	-2748(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jb	.LBB292_8
.LBB292_7:                              # %if.then.18
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-2748(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -2664(%rbp)
.LBB292_8:                              # %if.end
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_9
.LBB292_9:                              # %if.end.22
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	$397, %edi              # imm = 0x18D
	movl	-2744(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	%eax, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	-48(%rbp), %rdx
	subq	%rdx, %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, -4896(%rbp)
	movq	-4896(%rbp), %rcx
	movq	%rcx, -4912(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rdx
	movq	-4912(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	movq	%rax, -4888(%rbp)
	movq	-24(%rbp), %rdi
	movl	-2664(%rbp), %esi
	movq	-4888(%rbp), %rdx
	callq	compute_char_face
	movl	%eax, -2764(%rbp)
	movq	-2520(%rbp), %rcx
	movswl	34(%rcx), %eax
	movl	%eax, -4880(%rbp)
	movq	$-1, -2576(%rbp)
	movq	$-1, -2568(%rbp)
# BB#10:                                # %do.body
                                        #   in Loop: Header=BB292_1 Depth=1
	cmpq	$0, -2520(%rbp)
	je	.LBB292_13
# BB#11:                                # %land.lhs.true
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-2416(%rbp), %eax
	shrl	$20, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB292_13
# BB#12:                                # %if.then.44
                                        #   in Loop: Header=BB292_1 Depth=1
	cmpl	$2, -104(%rbp)
	sete	%al
	movq	-2520(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	%edx, %esi
	movq	236(%rcx), %rdi
	shlq	$34, %rsi
	movabsq	$-17179869185, %r8      # imm = 0xFFFFFFFBFFFFFFFF
	andq	%r8, %rdi
	orq	%rsi, %rdi
	movq	%rdi, 236(%rcx)
.LBB292_13:                             # %if.end.51
                                        #   in Loop: Header=BB292_1 Depth=1
	movq	-4856(%rbp), %rax
	movq	376(%rax), %rax
	cmpq	$0, 112(%rax)
	je	.LBB292_15
# BB#14:                                # %if.then.55
                                        #   in Loop: Header=BB292_1 Depth=1
	leaq	-4872(%rbp), %rdi
	movq	-4856(%rbp), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	callq	*8(%rax)
	jmp	.LBB292_16
.LBB292_15:                             # %if.else.59
                                        #   in Loop: Header=BB292_1 Depth=1
	leaq	-4872(%rbp), %rdi
	callq	produce_glyphs
.LBB292_16:                             # %if.end.60
                                        #   in Loop: Header=BB292_1 Depth=1
	cmpq	$0, -2520(%rbp)
	je	.LBB292_18
# BB#17:                                # %if.then.64
                                        #   in Loop: Header=BB292_1 Depth=1
	movb	$1, globals+3391
.LBB292_18:                             # %if.end.65
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_19
.LBB292_19:                             # %do.end
                                        #   in Loop: Header=BB292_1 Depth=1
	movl	-2468(%rbp), %eax
	cmpl	-2552(%rbp), %eax
	jle	.LBB292_21
# BB#20:                                # %if.then.68
	movl	-4880(%rbp), %eax
	movw	%ax, %cx
	movq	-2520(%rbp), %rdx
	movw	%cx, 34(%rdx)
	jmp	.LBB292_22
.LBB292_21:                             # %if.end.73
                                        #   in Loop: Header=BB292_1 Depth=1
	jmp	.LBB292_1
.LBB292_22:                             # %while.end
	movq	-40(%rbp), %rdi
	callq	set_buffer_temp
	movq	-2520(%rbp), %rax
	addq	$4912, %rsp             # imm = 0x1330
	popq	%rbp
	retq
.Lfunc_end292:
	.size	get_overlay_arrow_glyph_row, .Lfunc_end292-get_overlay_arrow_glyph_row
	.cfi_endproc

	.align	16, 0x90
	.type	highlight_trailing_whitespace,@function
highlight_trailing_whitespace:          # @highlight_trailing_whitespace
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp900:
	.cfi_def_cfa_offset 16
.Ltmp901:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp902:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movswl	34(%rsi), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB293_53
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB293_3
# BB#2:                                 # %if.then.4
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	addq	$-48, %rax
	movq	%rax, -32(%rbp)
.LBB293_3:                              # %if.end
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB293_11
# BB#4:                                 # %if.then.15
	jmp	.LBB293_5
.LBB293_5:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -45(%rbp)          # 1-byte Spill
	jb	.LBB293_8
# BB#6:                                 # %land.lhs.true
                                        #   in Loop: Header=BB293_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$0, %eax
	movb	%cl, -45(%rbp)          # 1-byte Spill
	jne	.LBB293_8
# BB#7:                                 # %land.rhs
                                        #   in Loop: Header=BB293_5 Depth=1
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -45(%rbp)          # 1-byte Spill
.LBB293_8:                              # %land.end
                                        #   in Loop: Header=BB293_5 Depth=1
	movb	-45(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB293_9
	jmp	.LBB293_10
.LBB293_9:                              # %while.body
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	-40(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB293_5
.LBB293_10:                             # %while.end
	jmp	.LBB293_18
.LBB293_11:                             # %if.else
	jmp	.LBB293_12
.LBB293_12:                             # %while.cond.23
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -57(%rbp)          # 1-byte Spill
	ja	.LBB293_15
# BB#13:                                # %land.lhs.true.26
                                        #   in Loop: Header=BB293_12 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$0, %eax
	movb	%cl, -57(%rbp)          # 1-byte Spill
	jne	.LBB293_15
# BB#14:                                # %land.rhs.32
                                        #   in Loop: Header=BB293_12 Depth=1
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movb	%dl, -57(%rbp)          # 1-byte Spill
.LBB293_15:                             # %land.end.37
                                        #   in Loop: Header=BB293_12 Depth=1
	movb	-57(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB293_16
	jmp	.LBB293_17
.LBB293_16:                             # %while.body.38
                                        #   in Loop: Header=BB293_12 Depth=1
	movq	-40(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB293_12
.LBB293_17:                             # %while.end.40
	jmp	.LBB293_18
.LBB293_18:                             # %if.end.41
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB293_20
# BB#19:                                # %cond.true
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jbe	.LBB293_21
	jmp	.LBB293_52
.LBB293_20:                             # %cond.false
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jb	.LBB293_52
.LBB293_21:                             # %land.lhs.true.52
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB293_22
	jmp	.LBB293_52
.LBB293_22:                             # %land.lhs.true.56
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$4, %ecx
	je	.LBB293_25
# BB#23:                                # %lor.lhs.false
	movq	-40(%rbp), %rax
	movl	24(%rax), %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	jne	.LBB293_52
# BB#24:                                # %land.lhs.true.67
	movq	-40(%rbp), %rax
	cmpl	$32, 40(%rax)
	jne	.LBB293_52
.LBB293_25:                             # %land.lhs.true.70
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	callq	trailing_whitespace_p
	testb	$1, %al
	jne	.LBB293_26
	jmp	.LBB293_52
.LBB293_26:                             # %if.then.73
	movl	$933, %edi              # imm = 0x3A5
	movq	-8(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edx, %edx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	lookup_named_face
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB293_28
# BB#27:                                # %if.then.78
	jmp	.LBB293_53
.LBB293_28:                             # %if.end.79
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB293_40
# BB#29:                                # %if.then.85
	jmp	.LBB293_30
.LBB293_30:                             # %while.cond.86
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -81(%rbp)          # 1-byte Spill
	jb	.LBB293_37
# BB#31:                                # %land.lhs.true.89
                                        #   in Loop: Header=BB293_30 Depth=1
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -81(%rbp)          # 1-byte Spill
	jne	.LBB293_32
	jmp	.LBB293_37
.LBB293_32:                             # %land.rhs.93
                                        #   in Loop: Header=BB293_30 Depth=1
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movl	24(%rcx), %edx
	andl	$7, %edx
	cmpl	$4, %edx
	movb	%al, -82(%rbp)          # 1-byte Spill
	je	.LBB293_36
# BB#33:                                # %lor.rhs
                                        #   in Loop: Header=BB293_30 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$0, %eax
	movb	%cl, -83(%rbp)          # 1-byte Spill
	jne	.LBB293_35
# BB#34:                                # %land.rhs.104
                                        #   in Loop: Header=BB293_30 Depth=1
	movq	-40(%rbp), %rax
	cmpl	$32, 40(%rax)
	sete	%cl
	movb	%cl, -83(%rbp)          # 1-byte Spill
.LBB293_35:                             # %land.end.109
                                        #   in Loop: Header=BB293_30 Depth=1
	movb	-83(%rbp), %al          # 1-byte Reload
	movb	%al, -82(%rbp)          # 1-byte Spill
.LBB293_36:                             # %lor.end
                                        #   in Loop: Header=BB293_30 Depth=1
	movb	-82(%rbp), %al          # 1-byte Reload
	movb	%al, -81(%rbp)          # 1-byte Spill
.LBB293_37:                             # %land.end.110
                                        #   in Loop: Header=BB293_30 Depth=1
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB293_38
	jmp	.LBB293_39
.LBB293_38:                             # %while.body.111
                                        #   in Loop: Header=BB293_30 Depth=1
	movl	-44(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$-48, %rdx
	movq	%rdx, -40(%rbp)
	movl	28(%rcx), %esi
	andl	$1048575, %eax          # imm = 0xFFFFF
	andl	$-1048576, %esi         # imm = 0xFFFFFFFFFFF00000
	orl	%eax, %esi
	movl	%esi, 28(%rcx)
	jmp	.LBB293_30
.LBB293_39:                             # %while.end.116
	jmp	.LBB293_51
.LBB293_40:                             # %if.else.117
	jmp	.LBB293_41
.LBB293_41:                             # %while.cond.118
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -84(%rbp)          # 1-byte Spill
	ja	.LBB293_48
# BB#42:                                # %land.lhs.true.121
                                        #   in Loop: Header=BB293_41 Depth=1
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	xorl	%ecx, %ecx
	movb	%cl, %dl
	testb	$1, %al
	movb	%dl, -84(%rbp)          # 1-byte Spill
	jne	.LBB293_43
	jmp	.LBB293_48
.LBB293_43:                             # %land.rhs.125
                                        #   in Loop: Header=BB293_41 Depth=1
	movb	$1, %al
	movq	-40(%rbp), %rcx
	movl	24(%rcx), %edx
	andl	$7, %edx
	cmpl	$4, %edx
	movb	%al, -85(%rbp)          # 1-byte Spill
	je	.LBB293_47
# BB#44:                                # %lor.rhs.131
                                        #   in Loop: Header=BB293_41 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$0, %eax
	movb	%cl, -86(%rbp)          # 1-byte Spill
	jne	.LBB293_46
# BB#45:                                # %land.rhs.137
                                        #   in Loop: Header=BB293_41 Depth=1
	movq	-40(%rbp), %rax
	cmpl	$32, 40(%rax)
	sete	%cl
	movb	%cl, -86(%rbp)          # 1-byte Spill
.LBB293_46:                             # %land.end.142
                                        #   in Loop: Header=BB293_41 Depth=1
	movb	-86(%rbp), %al          # 1-byte Reload
	movb	%al, -85(%rbp)          # 1-byte Spill
.LBB293_47:                             # %lor.end.143
                                        #   in Loop: Header=BB293_41 Depth=1
	movb	-85(%rbp), %al          # 1-byte Reload
	movb	%al, -84(%rbp)          # 1-byte Spill
.LBB293_48:                             # %land.end.144
                                        #   in Loop: Header=BB293_41 Depth=1
	movb	-84(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB293_49
	jmp	.LBB293_50
.LBB293_49:                             # %while.body.145
                                        #   in Loop: Header=BB293_41 Depth=1
	movl	-44(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$48, %rdx
	movq	%rdx, -40(%rbp)
	movl	28(%rcx), %esi
	andl	$1048575, %eax          # imm = 0xFFFFF
	andl	$-1048576, %esi         # imm = 0xFFFFFFFFFFF00000
	orl	%eax, %esi
	movl	%esi, 28(%rcx)
	jmp	.LBB293_41
.LBB293_50:                             # %while.end.152
	jmp	.LBB293_51
.LBB293_51:                             # %if.end.153
	jmp	.LBB293_52
.LBB293_52:                             # %if.end.154
	jmp	.LBB293_53
.LBB293_53:                             # %if.end.155
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end293:
	.size	highlight_trailing_whitespace, .Lfunc_end293-highlight_trailing_whitespace
	.cfi_endproc

	.align	16, 0x90
	.type	trailing_whitespace_p,@function
trailing_whitespace_p:                  # @trailing_whitespace_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp903:
	.cfi_def_cfa_offset 16
.Ltmp904:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp905:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	current_buffer, %rdi
	movq	-16(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
.LBB294_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	current_buffer, %rsi
	cmpq	776(%rsi), %rdx
	movb	%cl, -29(%rbp)          # 1-byte Spill
	jge	.LBB294_11
# BB#2:                                 # %land.rhs
                                        #   in Loop: Header=BB294_1 Depth=1
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB294_4
# BB#3:                                 # %cond.true
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-24(%rbp), %rdi
	callq	FETCH_MULTIBYTE_CHAR
	movl	%eax, -44(%rbp)         # 4-byte Spill
	jmp	.LBB294_8
.LBB294_4:                              # %cond.false
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB294_6
# BB#5:                                 # %cond.true.5
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB294_7
.LBB294_6:                              # %cond.false.7
                                        #   in Loop: Header=BB294_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	jmp	.LBB294_7
.LBB294_7:                              # %cond.end
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-56(%rbp), %rax         # 8-byte Reload
	addq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movzbl	-1(%rcx,%rax), %edx
	movl	%edx, -44(%rbp)         # 4-byte Spill
.LBB294_8:                              # %cond.end.10
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-44(%rbp), %eax         # 4-byte Reload
	movb	$1, %cl
	movl	%eax, -28(%rbp)
	cmpl	$32, -28(%rbp)
	movb	%cl, -57(%rbp)          # 1-byte Spill
	je	.LBB294_10
# BB#9:                                 # %lor.rhs
                                        #   in Loop: Header=BB294_1 Depth=1
	cmpl	$9, -28(%rbp)
	sete	%al
	movb	%al, -57(%rbp)          # 1-byte Spill
.LBB294_10:                             # %lor.end
                                        #   in Loop: Header=BB294_1 Depth=1
	movb	-57(%rbp), %al          # 1-byte Reload
	movb	%al, -29(%rbp)          # 1-byte Spill
.LBB294_11:                             # %land.end
                                        #   in Loop: Header=BB294_1 Depth=1
	movb	-29(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB294_12
	jmp	.LBB294_13
.LBB294_12:                             # %while.body
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB294_1
.LBB294_13:                             # %while.end
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	cmpq	776(%rcx), %rax
	jge	.LBB294_16
# BB#14:                                # %lor.lhs.false
	cmpl	$10, -28(%rbp)
	je	.LBB294_16
# BB#15:                                # %lor.lhs.false.21
	cmpl	$13, -28(%rbp)
	jne	.LBB294_19
.LBB294_16:                             # %if.then
	movq	-24(%rbp), %rax
	movq	current_buffer, %rcx
	movq	744(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	je	.LBB294_18
# BB#17:                                # %if.then.27
	movb	$1, -1(%rbp)
	jmp	.LBB294_20
.LBB294_18:                             # %if.end
	jmp	.LBB294_19
.LBB294_19:                             # %if.end.28
	movb	$0, -1(%rbp)
.LBB294_20:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end294:
	.size	trailing_whitespace_p, .Lfunc_end294-trailing_whitespace_p
	.cfi_endproc

	.align	16, 0x90
	.type	move_elt_to_front,@function
move_elt_to_front:                      # @move_elt_to_front
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp906:
	.cfi_def_cfa_offset 16
.Ltmp907:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp908:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
.LBB295_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB295_17
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB295_7
# BB#3:                                 # %if.then
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB295_5
# BB#4:                                 # %if.then.7
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB295_6
.LBB295_5:                              # %if.else
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rsi
	callq	Fsetcdr
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB295_6:                              # %if.end
	movq	-32(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	Fsetcdr
	movq	-32(%rbp), %rsi
	movq	%rsi, -8(%rbp)
	movq	%rax, -72(%rbp)         # 8-byte Spill
	jmp	.LBB295_18
.LBB295_7:                              # %if.else.14
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#8:                                 # %if.end.15
                                        #   in Loop: Header=BB295_1 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
# BB#9:                                 # %do.body
                                        #   in Loop: Header=BB295_1 Depth=1
	xorl	%edi, %edi
	movq	globals+1928, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB295_12
# BB#10:                                # %land.lhs.true
                                        #   in Loop: Header=BB295_1 Depth=1
	xorl	%edi, %edi
	movq	globals+1104, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB295_12
# BB#11:                                # %if.then.25
                                        #   in Loop: Header=BB295_1 Depth=1
	callq	process_quit_flag
	jmp	.LBB295_15
.LBB295_12:                             # %if.else.26
                                        #   in Loop: Header=BB295_1 Depth=1
	movb	pending_signals, %al
	testb	$1, %al
	je	.LBB295_14
# BB#13:                                # %if.then.27
                                        #   in Loop: Header=BB295_1 Depth=1
	callq	process_pending_signals
.LBB295_14:                             # %if.end.28
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_15
.LBB295_15:                             # %if.end.29
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_16
.LBB295_16:                             # %do.end
                                        #   in Loop: Header=BB295_1 Depth=1
	jmp	.LBB295_1
.LBB295_17:                             # %while.end
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB295_18:                             # %return
	movq	-8(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end295:
	.size	move_elt_to_front, .Lfunc_end295-move_elt_to_front
	.cfi_endproc

	.align	16, 0x90
	.type	store_mode_line_noprop,@function
store_mode_line_noprop:                 # @store_mode_line_noprop
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp909:
	.cfi_def_cfa_offset 16
.Ltmp910:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp911:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-40(%rbp), %rcx
	leaq	-48(%rbp), %r8
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	%r8, -64(%rbp)          # 8-byte Spill
	callq	strlen
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	-16(%rbp), %edx
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	-64(%rbp), %r8          # 8-byte Reload
	callq	c_string_width
	movslq	-28(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, %edx
	movl	%edx, -28(%rbp)
.LBB296_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -48(%rbp)
	cmpq	$0, %rax
	je	.LBB296_3
# BB#2:                                 # %while.body
                                        #   in Loop: Header=BB296_1 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movsbl	(%rax), %edi
	callq	store_mode_line_noprop_char
	jmp	.LBB296_1
.LBB296_3:                              # %while.end
	jmp	.LBB296_4
.LBB296_4:                              # %while.cond.3
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$0, -12(%rbp)
	movb	%cl, -65(%rbp)          # 1-byte Spill
	jle	.LBB296_6
# BB#5:                                 # %land.rhs
                                        #   in Loop: Header=BB296_4 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%cl
	movb	%cl, -65(%rbp)          # 1-byte Spill
.LBB296_6:                              # %land.end
                                        #   in Loop: Header=BB296_4 Depth=1
	movb	-65(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB296_7
	jmp	.LBB296_8
.LBB296_7:                              # %while.body.7
                                        #   in Loop: Header=BB296_4 Depth=1
	movl	$32, %edi
	callq	store_mode_line_noprop_char
	movl	-28(%rbp), %edi
	addl	$1, %edi
	movl	%edi, -28(%rbp)
	jmp	.LBB296_4
.LBB296_8:                              # %while.end.8
	movl	-28(%rbp), %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end296:
	.size	store_mode_line_noprop, .Lfunc_end296-store_mode_line_noprop
	.cfi_endproc

	.align	16, 0x90
	.type	store_mode_line_string,@function
store_mode_line_string:                 # @store_mode_line_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp912:
	.cfi_def_cfa_offset 16
.Ltmp913:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp914:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -40(%rbp)
	movl	$0, -52(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB297_13
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	strlen
	movq	%rax, -48(%rbp)
	cmpl	$0, -28(%rbp)
	jle	.LBB297_4
# BB#2:                                 # %land.lhs.true
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB297_4
# BB#3:                                 # %if.then.4
	movslq	-28(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB297_4:                              # %if.end
	movq	-8(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	make_string
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB297_6
# BB#5:                                 # %if.then.10
	movq	mode_line_string_face_prop, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB297_12
.LBB297_6:                              # %if.else
	xorl	%edi, %edi
	movq	mode_line_string_face, %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB297_11
# BB#7:                                 # %if.then.14
	movl	$397, %edi              # imm = 0x18D
	movq	-40(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rdi
	callq	Fcopy_sequence
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB297_9
# BB#8:                                 # %if.then.21
	movq	mode_line_string_face, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB297_10
.LBB297_9:                              # %if.else.22
	movq	-64(%rbp), %rdi
	movq	mode_line_string_face, %rsi
	callq	list2
	movq	%rax, -64(%rbp)
.LBB297_10:                             # %if.end.24
	movl	$397, %edi              # imm = 0x18D
	movq	-40(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_put
	movq	%rax, -40(%rbp)
.LBB297_11:                             # %if.end.27
	jmp	.LBB297_12
.LBB297_12:                             # %if.end.28
	movl	$2, %eax
	movl	%eax, %edi
	movq	-48(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rsi, -120(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-120(%rbp), %rcx        # 8-byte Reload
	callq	Fadd_text_properties
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB297_28
.LBB297_13:                             # %if.else.30
	movq	-16(%rbp), %rdi
	callq	Flength
	sarq	$2, %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -28(%rbp)
	jle	.LBB297_16
# BB#14:                                # %land.lhs.true.34
	movq	-48(%rbp), %rax
	movslq	-28(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB297_16
# BB#15:                                # %if.then.38
	movl	$2, %eax
	movl	%eax, %esi
	movslq	-28(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, %rdx
	callq	Fsubstring
	movq	%rax, -16(%rbp)
	movl	$-1, -28(%rbp)
.LBB297_16:                             # %if.end.43
	xorl	%edi, %edi
	movq	mode_line_string_face, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB297_25
# BB#17:                                # %if.then.47
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB297_19
# BB#18:                                # %if.then.52
	movl	$2, %eax
	movl	%eax, %edi
	movq	-16(%rbp), %rsi
	callq	Ftext_properties_at
	movq	%rax, -40(%rbp)
.LBB297_19:                             # %if.end.54
	movl	$397, %edi              # imm = 0x18D
	movq	-40(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fplist_get
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB297_21
# BB#20:                                # %if.then.60
	movq	mode_line_string_face, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB297_22
.LBB297_21:                             # %if.else.61
	movq	-72(%rbp), %rdi
	movq	mode_line_string_face, %rsi
	callq	list2
	movq	%rax, -72(%rbp)
.LBB297_22:                             # %if.end.63
	movl	$397, %edi              # imm = 0x18D
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rsi
	movq	%rax, %rdi
	callq	list2
	movq	%rax, -40(%rbp)
	testb	$1, -17(%rbp)
	je	.LBB297_24
# BB#23:                                # %if.then.66
	movq	-16(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -16(%rbp)
.LBB297_24:                             # %if.end.68
	jmp	.LBB297_25
.LBB297_25:                             # %if.end.69
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB297_27
# BB#26:                                # %if.then.73
	movl	$2, %eax
	movl	%eax, %edi
	movq	-48(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rsi, -176(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-176(%rbp), %rcx        # 8-byte Reload
	callq	Fadd_text_properties
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB297_27:                             # %if.end.77
	jmp	.LBB297_28
.LBB297_28:                             # %if.end.78
	cmpq	$0, -48(%rbp)
	jle	.LBB297_30
# BB#29:                                # %if.then.81
	movq	-16(%rbp), %rdi
	movq	mode_line_string_list, %rsi
	callq	Fcons
	movq	%rax, mode_line_string_list
	movq	-48(%rbp), %rax
	movslq	-52(%rbp), %rsi
	addq	%rax, %rsi
	movl	%esi, %ecx
	movl	%ecx, -52(%rbp)
.LBB297_30:                             # %if.end.86
	movslq	-24(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jle	.LBB297_34
# BB#31:                                # %if.then.90
	movl	$130, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	subq	%rcx, %rdx
	movl	%edx, %eax
	movl	%eax, -24(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, %rdi
	callq	Fmake_string
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB297_33
# BB#32:                                # %if.then.100
	movl	$2, %eax
	movl	%eax, %edi
	movslq	-24(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-200(%rbp), %rcx        # 8-byte Reload
	callq	Fadd_text_properties
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB297_33:                             # %if.end.105
	movq	-16(%rbp), %rdi
	movq	mode_line_string_list, %rsi
	callq	Fcons
	movq	%rax, mode_line_string_list
	movl	-24(%rbp), %ecx
	addl	-52(%rbp), %ecx
	movl	%ecx, -52(%rbp)
.LBB297_34:                             # %if.end.108
	movl	-52(%rbp), %eax
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end297:
	.size	store_mode_line_string, .Lfunc_end297-store_mode_line_string
	.cfi_endproc

	.align	16, 0x90
	.type	decode_mode_spec,@function
decode_mode_spec:                       # @decode_mode_spec
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp915:
	.cfi_def_cfa_offset 16
.Ltmp916:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp917:
	.cfi_def_cfa_register %rbp
	subq	$1280, %rsp             # imm = 0x500
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	232(%rcx), %rcx
	movq	%rcx, -56(%rbp)
	movl	-24(%rbp), %edx
	movq	-48(%rbp), %rcx
	movl	272(%rcx), %esi
	shll	$2, %esi
	cmpl	%esi, %edx
	jge	.LBB298_2
# BB#1:                                 # %cond.true
	movl	-24(%rbp), %eax
	movl	%eax, -340(%rbp)        # 4-byte Spill
	jmp	.LBB298_3
.LBB298_2:                              # %cond.false
	movq	-48(%rbp), %rax
	movl	272(%rax), %ecx
	shll	$2, %ecx
	movl	%ecx, -340(%rbp)        # 4-byte Spill
.LBB298_3:                              # %cond.end
	movl	-340(%rbp), %eax        # 4-byte Reload
	movl	%eax, -60(%rbp)
	movq	current_buffer(%rip), %rcx
	movq	%rcx, -72(%rbp)
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, -344(%rbp)        # 4-byte Spill
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	movl	-344(%rbp), %edi        # 4-byte Reload
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movl	-20(%rbp), %edi
	movl	%edi, %edx
	subl	$37, %edx
	movl	%edi, -348(%rbp)        # 4-byte Spill
	movl	%edx, -352(%rbp)        # 4-byte Spill
	je	.LBB298_17
	jmp	.LBB298_283
.LBB298_283:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$38, %eax
	movl	%eax, -356(%rbp)        # 4-byte Spill
	je	.LBB298_14
	jmp	.LBB298_284
.LBB298_284:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$42, %eax
	movl	%eax, -360(%rbp)        # 4-byte Spill
	je	.LBB298_4
	jmp	.LBB298_285
.LBB298_285:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$43, %eax
	movl	%eax, -364(%rbp)        # 4-byte Spill
	je	.LBB298_9
	jmp	.LBB298_286
.LBB298_286:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$45, %eax
	movl	%eax, -368(%rbp)        # 4-byte Spill
	je	.LBB298_32
	jmp	.LBB298_287
.LBB298_287:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$64, %eax
	movl	%eax, -372(%rbp)        # 4-byte Spill
	je	.LBB298_271
	jmp	.LBB298_288
.LBB298_288:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$70, %eax
	movl	%eax, -376(%rbp)        # 4-byte Spill
	je	.LBB298_50
	jmp	.LBB298_289
.LBB298_289:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$73, %eax
	movl	%eax, -380(%rbp)        # 4-byte Spill
	je	.LBB298_58
	jmp	.LBB298_290
.LBB298_290:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$80, %eax
	movl	%eax, -384(%rbp)        # 4-byte Spill
	je	.LBB298_213
	jmp	.LBB298_291
.LBB298_291:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$90, %eax
	movl	%eax, -388(%rbp)        # 4-byte Spill
	je	.LBB298_276
	jmp	.LBB298_292
.LBB298_292:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$91, %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
	je	.LBB298_18
	jmp	.LBB298_293
.LBB298_293:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$93, %eax
	movl	%eax, -396(%rbp)        # 4-byte Spill
	je	.LBB298_25
	jmp	.LBB298_294
.LBB298_294:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$98, %eax
	movl	%eax, -400(%rbp)        # 4-byte Spill
	je	.LBB298_43
	jmp	.LBB298_295
.LBB298_295:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$99, %eax
	movl	%eax, -404(%rbp)        # 4-byte Spill
	je	.LBB298_44
	jmp	.LBB298_296
.LBB298_296:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$101, %eax
	movl	%eax, -408(%rbp)        # 4-byte Spill
	je	.LBB298_47
	jmp	.LBB298_297
.LBB298_297:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$102, %eax
	movl	%eax, -412(%rbp)        # 4-byte Spill
	je	.LBB298_56
	jmp	.LBB298_298
.LBB298_298:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$105, %eax
	movl	%eax, -416(%rbp)        # 4-byte Spill
	je	.LBB298_57
	jmp	.LBB298_299
.LBB298_299:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$108, %eax
	movl	%eax, -420(%rbp)        # 4-byte Spill
	je	.LBB298_59
	jmp	.LBB298_300
.LBB298_300:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$109, %eax
	movl	%eax, -424(%rbp)        # 4-byte Spill
	je	.LBB298_142
	jmp	.LBB298_301
.LBB298_301:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$110, %eax
	movl	%eax, -428(%rbp)        # 4-byte Spill
	je	.LBB298_143
	jmp	.LBB298_302
.LBB298_302:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$112, %eax
	movl	%eax, -432(%rbp)        # 4-byte Spill
	je	.LBB298_159
	jmp	.LBB298_303
.LBB298_303:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$115, %eax
	movl	%eax, -436(%rbp)        # 4-byte Spill
	je	.LBB298_268
	jmp	.LBB298_304
.LBB298_304:                            # %cond.end
	movl	-348(%rbp), %eax        # 4-byte Reload
	subl	$122, %eax
	movl	%eax, -440(%rbp)        # 4-byte Spill
	je	.LBB298_276
	jmp	.LBB298_279
.LBB298_4:                              # %sw.bb
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-448(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB298_6
# BB#5:                                 # %if.then
	movabsq	$.L.str.144, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_6:                              # %if.end
	movq	-72(%rbp), %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	720(%rcx), %rcx
	cmpq	64(%rcx), %rax
	jle	.LBB298_8
# BB#7:                                 # %if.then.8
	movabsq	$.L.str.145, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_8:                              # %if.end.9
	movabsq	$.L.str.146, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_9:                              # %sw.bb.10
	movq	-72(%rbp), %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	720(%rcx), %rcx
	cmpq	64(%rcx), %rax
	jle	.LBB298_11
# BB#10:                                # %if.then.16
	movabsq	$.L.str.145, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_11:                             # %if.end.17
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-456(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB298_13
# BB#12:                                # %if.then.21
	movabsq	$.L.str.144, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_13:                             # %if.end.22
	movabsq	$.L.str.146, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_14:                             # %sw.bb.23
	movq	-72(%rbp), %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	720(%rcx), %rcx
	cmpq	64(%rcx), %rax
	jle	.LBB298_16
# BB#15:                                # %if.then.29
	movabsq	$.L.str.145, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_16:                             # %if.end.30
	movabsq	$.L.str.146, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_17:                             # %sw.bb.31
	movabsq	$.L.str.144, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_18:                             # %sw.bb.32
	cmpq	$5, command_loop_level
	jle	.LBB298_20
# BB#19:                                # %if.then.34
	movabsq	$.L.str.147, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_20:                             # %if.end.35
	movq	-56(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -76(%rbp)
.LBB298_21:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movslq	-76(%rbp), %rax
	cmpq	command_loop_level, %rax
	jge	.LBB298_24
# BB#22:                                # %for.body
                                        #   in Loop: Header=BB298_21 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -88(%rbp)
	movb	$91, (%rax)
# BB#23:                                # %for.inc
                                        #   in Loop: Header=BB298_21 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB298_21
.LBB298_24:                             # %for.end
	movq	-88(%rbp), %rax
	movb	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_25:                             # %sw.bb.38
	cmpq	$5, command_loop_level
	jle	.LBB298_27
# BB#26:                                # %if.then.43
	movabsq	$.L.str.148, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_27:                             # %if.end.44
	movq	-56(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -92(%rbp)
.LBB298_28:                             # %for.cond.45
                                        # =>This Inner Loop Header: Depth=1
	movslq	-92(%rbp), %rax
	cmpq	command_loop_level, %rax
	jge	.LBB298_31
# BB#29:                                # %for.body.49
                                        #   in Loop: Header=BB298_28 Depth=1
	movq	-104(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -104(%rbp)
	movb	$93, (%rax)
# BB#30:                                # %for.inc.51
                                        #   in Loop: Header=BB298_28 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB298_28
.LBB298_31:                             # %for.end.53
	movq	-104(%rbp), %rax
	movb	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_32:                             # %sw.bb.54
	cmpl	$2, mode_line_target
	je	.LBB298_34
# BB#33:                                # %lor.lhs.false
	cmpl	$3, mode_line_target
	jne	.LBB298_35
.LBB298_34:                             # %if.then.60
	movabsq	$.L.str.149, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_35:                             # %if.end.61
	cmpl	$0, -24(%rbp)
	jle	.LBB298_37
# BB#36:                                # %lor.lhs.false.64
	movslq	-24(%rbp), %rax
	cmpq	$141, %rax
	jbe	.LBB298_42
.LBB298_37:                             # %if.then.68
	movl	$0, -108(%rbp)
.LBB298_38:                             # %for.cond.69
                                        # =>This Inner Loop Header: Depth=1
	movl	-108(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	272(%rcx), %edx
	shll	$2, %edx
	subl	$1, %edx
	cmpl	%edx, %eax
	jge	.LBB298_41
# BB#39:                                # %for.body.75
                                        #   in Loop: Header=BB298_38 Depth=1
	movslq	-108(%rbp), %rax
	movq	-56(%rbp), %rcx
	movb	$45, (%rcx,%rax)
# BB#40:                                # %for.inc.76
                                        #   in Loop: Header=BB298_38 Depth=1
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB298_38
.LBB298_41:                             # %for.end.78
	movslq	-108(%rbp), %rax
	movq	-56(%rbp), %rcx
	movb	$0, (%rcx,%rax)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_42:                             # %if.else
	movabsq	$lots_of_dashes, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_43:                             # %sw.bb.81
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB298_279
.LBB298_44:                             # %sw.bb.82
	cmpl	$1, mode_line_target
	jne	.LBB298_46
# BB#45:                                # %if.then.85
	movabsq	$.L.str, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_46:                             # %if.else.86
	callq	current_column
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 336(%rcx)
	movq	-56(%rbp), %rdi
	movl	-60(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	pint2str
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_47:                             # %sw.bb.88
	xorl	%edi, %edi
	movq	globals+1392, %rax
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-464(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_49
# BB#48:                                # %if.then.92
	movabsq	$.L.str, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_49:                             # %if.else.93
	movabsq	$.L.str.150, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_50:                             # %sw.bb.94
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-472(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB298_52
# BB#51:                                # %if.then.98
	movq	-48(%rbp), %rax
	movq	24(%rax), %rdi
	callq	SSDATA
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_52:                             # %if.end.101
	movq	-48(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$18, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB298_54
# BB#53:                                # %lor.lhs.false.103
	movq	-48(%rbp), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$2, %ecx
	je	.LBB298_55
.LBB298_54:                             # %if.then.110
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdi
	callq	SSDATA
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_55:                             # %if.end.112
	movabsq	$.L.str.151, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_56:                             # %sw.bb.113
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB298_279
.LBB298_57:                             # %sw.bb.114
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	current_buffer, %rcx
	subq	752(%rcx), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rdi
	movl	-60(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	pint2str
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_58:                             # %sw.bb.116
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	current_buffer, %rcx
	subq	752(%rcx), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rdi
	movl	-60(%rbp), %esi
	movq	-136(%rbp), %rdx
	callq	pint2hrstr
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_59:                             # %sw.bb.121
	cmpl	$1, mode_line_target
	jne	.LBB298_61
# BB#60:                                # %if.then.124
	movabsq	$.L.str, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_61:                             # %if.end.125
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -144(%rbp)
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -152(%rbp)
	movq	-16(%rbp), %rax
	movslq	268(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	-16(%rbp), %rax
	cmpq	$-1, 328(%rax)
	jne	.LBB298_63
# BB#62:                                # %if.then.132
	jmp	.LBB298_138
.LBB298_63:                             # %if.end.133
	movq	globals+1272, %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB298_78
# BB#64:                                # %land.lhs.true
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_66
# BB#65:                                # %cond.true.140
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -480(%rbp)        # 8-byte Spill
	jmp	.LBB298_70
.LBB298_66:                             # %cond.false.142
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_68
# BB#67:                                # %cond.true.146
	movq	-72(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	jmp	.LBB298_69
.LBB298_68:                             # %cond.false.148
	movq	-72(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -496(%rbp)        # 8-byte Spill
.LBB298_69:                             # %cond.end.151
	movq	-496(%rbp), %rax        # 8-byte Reload
	movq	%rax, -480(%rbp)        # 8-byte Spill
.LBB298_70:                             # %cond.end.153
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -504(%rbp)        # 8-byte Spill
	jne	.LBB298_72
# BB#71:                                # %cond.true.157
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	jmp	.LBB298_76
.LBB298_72:                             # %cond.false.159
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-520(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_74
# BB#73:                                # %cond.true.163
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	jmp	.LBB298_75
.LBB298_74:                             # %cond.false.165
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -528(%rbp)        # 8-byte Spill
.LBB298_75:                             # %cond.end.168
	movq	-528(%rbp), %rax        # 8-byte Reload
	movq	%rax, -512(%rbp)        # 8-byte Spill
.LBB298_76:                             # %cond.end.170
	movq	-512(%rbp), %rax        # 8-byte Reload
	movq	-504(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	movq	globals+1272, %rax
	sarq	$2, %rax
	cmpq	%rax, %rcx
	jle	.LBB298_78
# BB#77:                                # %if.then.175
	movq	-16(%rbp), %rax
	movq	$0, 328(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 320(%rax)
	jmp	.LBB298_138
.LBB298_78:                             # %if.end.177
	movq	-16(%rbp), %rax
	cmpq	$0, 320(%rax)
	jle	.LBB298_82
# BB#79:                                # %land.lhs.true.181
	movq	-16(%rbp), %rax
	cmpq	$0, 328(%rax)
	jle	.LBB298_82
# BB#80:                                # %land.lhs.true.185
	movq	-16(%rbp), %rax
	movq	328(%rax), %rax
	cmpq	-144(%rbp), %rax
	jg	.LBB298_82
# BB#81:                                # %if.then.189
	movq	-16(%rbp), %rax
	movq	320(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-16(%rbp), %rax
	movq	328(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-72(%rbp), %rdi
	movq	-168(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -176(%rbp)
	jmp	.LBB298_95
.LBB298_82:                             # %if.else.193
	movq	$1, -160(%rbp)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_84
# BB#83:                                # %cond.true.196
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	jmp	.LBB298_88
.LBB298_84:                             # %cond.false.198
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-544(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_86
# BB#85:                                # %cond.true.203
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	jmp	.LBB298_87
.LBB298_86:                             # %cond.false.205
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -552(%rbp)        # 8-byte Spill
.LBB298_87:                             # %cond.end.208
	movq	-552(%rbp), %rax        # 8-byte Reload
	movq	%rax, -536(%rbp)        # 8-byte Spill
.LBB298_88:                             # %cond.end.210
	movq	-536(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_90
# BB#89:                                # %cond.true.214
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	jmp	.LBB298_94
.LBB298_90:                             # %cond.false.215
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-568(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_92
# BB#91:                                # %cond.true.220
	movq	-72(%rbp), %rax
	movq	760(%rax), %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	jmp	.LBB298_93
.LBB298_92:                             # %cond.false.222
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -576(%rbp)        # 8-byte Spill
.LBB298_93:                             # %cond.end.225
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rax, -560(%rbp)        # 8-byte Spill
.LBB298_94:                             # %cond.end.227
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)
.LBB298_95:                             # %if.end.229
	leaq	-208(%rbp), %rcx
	movq	-176(%rbp), %rdi
	movq	-152(%rbp), %rsi
	movq	-144(%rbp), %rdx
	callq	display_count_lines
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	addq	-160(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-144(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -584(%rbp)        # 8-byte Spill
	jne	.LBB298_97
# BB#96:                                # %cond.true.233
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -592(%rbp)        # 8-byte Spill
	jmp	.LBB298_101
.LBB298_97:                             # %cond.false.235
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-600(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_99
# BB#98:                                # %cond.true.240
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	jmp	.LBB298_100
.LBB298_99:                             # %cond.false.242
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -608(%rbp)        # 8-byte Spill
.LBB298_100:                            # %cond.end.245
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%rax, -592(%rbp)        # 8-byte Spill
.LBB298_101:                            # %cond.end.247
	movq	-592(%rbp), %rax        # 8-byte Reload
	movq	-584(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_109
# BB#102:                               # %if.then.251
	movq	-184(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 320(%rcx)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_104
# BB#103:                               # %cond.true.255
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	jmp	.LBB298_108
.LBB298_104:                            # %cond.false.257
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-624(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_106
# BB#105:                               # %cond.true.262
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	jmp	.LBB298_107
.LBB298_106:                            # %cond.false.264
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -632(%rbp)        # 8-byte Spill
.LBB298_107:                            # %cond.end.267
	movq	-632(%rbp), %rax        # 8-byte Reload
	movq	%rax, -616(%rbp)        # 8-byte Spill
.LBB298_108:                            # %cond.end.269
	movq	-616(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	movq	%rax, 328(%rcx)
	jmp	.LBB298_137
.LBB298_109:                            # %if.else.272
	movq	-192(%rbp), %rax
	movq	-200(%rbp), %rcx
	addq	$25, %rcx
	cmpq	%rcx, %rax
	jl	.LBB298_118
# BB#110:                               # %lor.lhs.false.276
	movq	-192(%rbp), %rax
	imulq	$3, -200(%rbp), %rcx
	addq	$50, %rcx
	cmpq	%rcx, %rax
	jg	.LBB298_118
# BB#111:                               # %lor.lhs.false.281
	movq	-168(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -640(%rbp)        # 8-byte Spill
	jne	.LBB298_113
# BB#112:                               # %cond.true.284
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
	jmp	.LBB298_117
.LBB298_113:                            # %cond.false.286
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-656(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_115
# BB#114:                               # %cond.true.291
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	jmp	.LBB298_116
.LBB298_115:                            # %cond.false.293
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -664(%rbp)        # 8-byte Spill
.LBB298_116:                            # %cond.end.296
	movq	-664(%rbp), %rax        # 8-byte Reload
	movq	%rax, -648(%rbp)        # 8-byte Spill
.LBB298_117:                            # %cond.end.298
	movq	-648(%rbp), %rax        # 8-byte Reload
	movq	-640(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_136
.LBB298_118:                            # %if.then.302
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_120
# BB#119:                               # %cond.true.305
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	jmp	.LBB298_124
.LBB298_120:                            # %cond.false.307
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-680(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_122
# BB#121:                               # %cond.true.312
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	jmp	.LBB298_123
.LBB298_122:                            # %cond.false.314
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -688(%rbp)        # 8-byte Spill
.LBB298_123:                            # %cond.end.317
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rax, -672(%rbp)        # 8-byte Spill
.LBB298_124:                            # %cond.end.319
	movq	-672(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_126
# BB#125:                               # %cond.true.323
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	jmp	.LBB298_130
.LBB298_126:                            # %cond.false.325
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-704(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_128
# BB#127:                               # %cond.true.330
	movq	-72(%rbp), %rax
	movq	760(%rax), %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
	jmp	.LBB298_129
.LBB298_128:                            # %cond.false.332
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -712(%rbp)        # 8-byte Spill
.LBB298_129:                            # %cond.end.335
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, -696(%rbp)        # 8-byte Spill
.LBB298_130:                            # %cond.end.337
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)
	movq	-200(%rbp), %rax
	shlq	$1, %rax
	addq	$30, %rax
	imulq	globals+3160, %rax
	movq	%rax, -240(%rbp)
	movq	-144(%rbp), %rax
	subq	-240(%rbp), %rax
	cmpq	-216(%rbp), %rax
	jle	.LBB298_132
# BB#131:                               # %if.then.345
	movq	-144(%rbp), %rax
	subq	-240(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	current_buffer, %rdi
	movq	-216(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -224(%rbp)
.LBB298_132:                            # %if.end.348
	leaq	-232(%rbp), %rcx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-152(%rbp), %rdi
	movq	-224(%rbp), %rsi
	movq	-200(%rbp), %r8
	shlq	$1, %r8
	addq	$30, %r8
	subq	%r8, %rdx
	callq	display_count_lines
	movq	%rax, -192(%rbp)
	movq	-232(%rbp), %rax
	cmpq	-224(%rbp), %rax
	jne	.LBB298_135
# BB#133:                               # %land.lhs.true.355
	movq	-216(%rbp), %rax
	movq	-144(%rbp), %rcx
	subq	-240(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB298_135
# BB#134:                               # %if.then.359
	movq	-16(%rbp), %rax
	movq	$-1, 328(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 320(%rax)
	jmp	.LBB298_138
.LBB298_135:                            # %if.end.362
	movq	-184(%rbp), %rax
	subq	-192(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 320(%rcx)
	movq	current_buffer, %rdi
	movq	-232(%rbp), %rsi
	callq	buf_bytepos_to_charpos
	movq	-16(%rbp), %rcx
	movq	%rax, 328(%rcx)
.LBB298_136:                            # %if.end.367
	jmp	.LBB298_137
.LBB298_137:                            # %if.end.368
	leaq	-208(%rbp), %rcx
	movq	-152(%rbp), %rdi
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rdx
	movq	736(%rdx), %rdx
	addq	$0, %rdx
	movq	%rax, %rsi
	callq	display_count_lines
	movq	%rax, -192(%rbp)
	movb	$1, line_number_displayed
	movq	-56(%rbp), %rdi
	movl	-60(%rbp), %esi
	movq	-184(%rbp), %rax
	addq	-192(%rbp), %rax
	movq	%rax, %rdx
	callq	pint2str
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_138:                            # %no_value
	movq	-56(%rbp), %rax
	movq	%rax, -248(%rbp)
	movl	-60(%rbp), %ecx
	subl	$2, %ecx
	movl	%ecx, -252(%rbp)
.LBB298_139:                            # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-252(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -252(%rbp)
	cmpl	$0, %eax
	jle	.LBB298_141
# BB#140:                               # %while.body
                                        #   in Loop: Header=BB298_139 Depth=1
	movq	-248(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -248(%rbp)
	movb	$32, (%rax)
	jmp	.LBB298_139
.LBB298_141:                            # %while.end
	movq	-248(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -248(%rbp)
	movb	$63, (%rax)
	movq	-248(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -248(%rbp)
	movb	$63, (%rax)
	movq	-248(%rbp), %rax
	movb	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_142:                            # %sw.bb.380
	movq	-72(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB298_279
.LBB298_143:                            # %sw.bb.381
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_145
# BB#144:                               # %cond.true.384
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
	jmp	.LBB298_149
.LBB298_145:                            # %cond.false.386
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -728(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-728(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_147
# BB#146:                               # %cond.true.391
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -736(%rbp)        # 8-byte Spill
	jmp	.LBB298_148
.LBB298_147:                            # %cond.false.393
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -736(%rbp)        # 8-byte Spill
.LBB298_148:                            # %cond.end.396
	movq	-736(%rbp), %rax        # 8-byte Reload
	movq	%rax, -720(%rbp)        # 8-byte Spill
.LBB298_149:                            # %cond.end.398
	movq	-720(%rbp), %rax        # 8-byte Reload
	cmpq	$1, %rax
	jg	.LBB298_157
# BB#150:                               # %lor.lhs.false.402
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_152
# BB#151:                               # %cond.true.405
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	jmp	.LBB298_156
.LBB298_152:                            # %cond.false.407
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-752(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_154
# BB#153:                               # %cond.true.412
	movq	-72(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	jmp	.LBB298_155
.LBB298_154:                            # %cond.false.414
	movq	-72(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -760(%rbp)        # 8-byte Spill
.LBB298_155:                            # %cond.end.417
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, -744(%rbp)        # 8-byte Spill
.LBB298_156:                            # %cond.end.419
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	-72(%rbp), %rcx
	movq	720(%rcx), %rcx
	cmpq	16(%rcx), %rax
	jge	.LBB298_158
.LBB298_157:                            # %if.then.424
	movabsq	$.L.str.152, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_158:                            # %if.end.425
	jmp	.LBB298_279
.LBB298_159:                            # %sw.bb.426
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -264(%rbp)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_161
# BB#160:                               # %cond.true.431
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	jmp	.LBB298_165
.LBB298_161:                            # %cond.false.433
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-776(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_163
# BB#162:                               # %cond.true.438
	movq	-72(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
	jmp	.LBB298_164
.LBB298_163:                            # %cond.false.440
	movq	-72(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -784(%rbp)        # 8-byte Spill
.LBB298_164:                            # %cond.end.443
	movq	-784(%rbp), %rax        # 8-byte Reload
	movq	%rax, -768(%rbp)        # 8-byte Spill
.LBB298_165:                            # %cond.end.445
	movq	-768(%rbp), %rax        # 8-byte Reload
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -792(%rbp)        # 8-byte Spill
	jne	.LBB298_167
# BB#166:                               # %cond.true.449
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	jmp	.LBB298_171
.LBB298_167:                            # %cond.false.451
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-808(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_169
# BB#168:                               # %cond.true.456
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	jmp	.LBB298_170
.LBB298_169:                            # %cond.false.458
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -816(%rbp)        # 8-byte Spill
.LBB298_170:                            # %cond.end.461
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, -800(%rbp)        # 8-byte Spill
.LBB298_171:                            # %cond.end.463
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	-792(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	movq	%rcx, -272(%rbp)
	movq	-16(%rbp), %rax
	movq	456(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	-72(%rbp), %rdx
	cmpq	current_buffer, %rdx
	movq	%rax, -824(%rbp)        # 8-byte Spill
	movq	%rcx, -832(%rbp)        # 8-byte Spill
	jne	.LBB298_173
# BB#172:                               # %cond.true.470
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	jmp	.LBB298_177
.LBB298_173:                            # %cond.false.472
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-848(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_175
# BB#174:                               # %cond.true.477
	movq	-72(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	jmp	.LBB298_176
.LBB298_175:                            # %cond.false.479
	movq	-72(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -856(%rbp)        # 8-byte Spill
.LBB298_176:                            # %cond.end.482
	movq	-856(%rbp), %rax        # 8-byte Reload
	movq	%rax, -840(%rbp)        # 8-byte Spill
.LBB298_177:                            # %cond.end.484
	movq	-840(%rbp), %rax        # 8-byte Reload
	movq	-832(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	movq	-824(%rbp), %rax        # 8-byte Reload
	cmpq	%rcx, %rax
	jg	.LBB298_187
# BB#178:                               # %if.then.489
	movq	-264(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -864(%rbp)        # 8-byte Spill
	jne	.LBB298_180
# BB#179:                               # %cond.true.492
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	jmp	.LBB298_184
.LBB298_180:                            # %cond.false.494
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-880(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_182
# BB#181:                               # %cond.true.499
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	jmp	.LBB298_183
.LBB298_182:                            # %cond.false.501
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -888(%rbp)        # 8-byte Spill
.LBB298_183:                            # %cond.end.504
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rax, -872(%rbp)        # 8-byte Spill
.LBB298_184:                            # %cond.end.506
	movq	-872(%rbp), %rax        # 8-byte Reload
	movq	-864(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jg	.LBB298_186
# BB#185:                               # %if.then.510
	movabsq	$.L.str.153, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_186:                            # %if.else.511
	movabsq	$.L.str.154, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_187:                            # %if.else.512
	movq	-264(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -896(%rbp)        # 8-byte Spill
	jne	.LBB298_189
# BB#188:                               # %cond.true.515
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	jmp	.LBB298_193
.LBB298_189:                            # %cond.false.517
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-912(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_191
# BB#190:                               # %cond.true.522
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	jmp	.LBB298_192
.LBB298_191:                            # %cond.false.524
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -920(%rbp)        # 8-byte Spill
.LBB298_192:                            # %cond.end.527
	movq	-920(%rbp), %rax        # 8-byte Reload
	movq	%rax, -904(%rbp)        # 8-byte Spill
.LBB298_193:                            # %cond.end.529
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	-896(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jg	.LBB298_195
# BB#194:                               # %if.then.533
	movabsq	$.L.str.155, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_195:                            # %if.else.534
	cmpq	$1000000, -272(%rbp)    # imm = 0xF4240
	jle	.LBB298_203
# BB#196:                               # %if.then.537
	movq	-264(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -928(%rbp)        # 8-byte Spill
	jne	.LBB298_198
# BB#197:                               # %cond.true.540
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -936(%rbp)        # 8-byte Spill
	jmp	.LBB298_202
.LBB298_198:                            # %cond.false.542
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-944(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_200
# BB#199:                               # %cond.true.547
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -952(%rbp)        # 8-byte Spill
	jmp	.LBB298_201
.LBB298_200:                            # %cond.false.549
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -952(%rbp)        # 8-byte Spill
.LBB298_201:                            # %cond.end.552
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%rax, -936(%rbp)        # 8-byte Spill
.LBB298_202:                            # %cond.end.554
	movq	-936(%rbp), %rax        # 8-byte Reload
	movl	$100, %ecx
	movl	%ecx, %edx
	movq	-928(%rbp), %rsi        # 8-byte Reload
	subq	%rax, %rsi
	movq	-272(%rbp), %rax
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	cqto
	movq	-960(%rbp), %rdi        # 8-byte Reload
	idivq	%rdi
	addq	%rax, %rsi
	subq	$1, %rsi
	movq	-272(%rbp), %rax
	cqto
	idivq	%rdi
	movq	%rax, -968(%rbp)        # 8-byte Spill
	movq	%rsi, %rax
	cqto
	movq	-968(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	%rax, -272(%rbp)
	jmp	.LBB298_210
.LBB298_203:                            # %if.else.561
	movq	-264(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -976(%rbp)        # 8-byte Spill
	jne	.LBB298_205
# BB#204:                               # %cond.true.564
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	jmp	.LBB298_209
.LBB298_205:                            # %cond.false.566
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-992(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_207
# BB#206:                               # %cond.true.571
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -1000(%rbp)       # 8-byte Spill
	jmp	.LBB298_208
.LBB298_207:                            # %cond.false.573
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -1000(%rbp)       # 8-byte Spill
.LBB298_208:                            # %cond.end.576
	movq	-1000(%rbp), %rax       # 8-byte Reload
	movq	%rax, -984(%rbp)        # 8-byte Spill
.LBB298_209:                            # %cond.end.578
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	-976(%rbp), %rcx        # 8-byte Reload
	subq	%rax, %rcx
	imulq	$100, %rcx, %rax
	addq	-272(%rbp), %rax
	subq	$1, %rax
	cqto
	idivq	-272(%rbp)
	movq	%rax, -272(%rbp)
.LBB298_210:                            # %if.end.585
	cmpq	$100, -272(%rbp)
	jne	.LBB298_212
# BB#211:                               # %if.then.588
	movq	$99, -272(%rbp)
.LBB298_212:                            # %if.end.589
	movabsq	$.L.str.156, %rsi
	movq	-56(%rbp), %rdi
	movq	-272(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movq	-56(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, -1004(%rbp)       # 4-byte Spill
	jmp	.LBB298_282
.LBB298_213:                            # %sw.bb.591
	movq	-16(%rbp), %rax
	movq	88(%rax), %rdi
	callq	marker_position
	movq	%rax, -280(%rbp)
	movq	-72(%rbp), %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	-16(%rbp), %rdi
	subq	456(%rdi), %rax
	movq	%rax, -288(%rbp)
	movq	-72(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB298_215
# BB#214:                               # %cond.true.601
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	jmp	.LBB298_219
.LBB298_215:                            # %cond.false.603
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -1024(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1024(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_217
# BB#216:                               # %cond.true.608
	movq	-72(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	jmp	.LBB298_218
.LBB298_217:                            # %cond.false.610
	movq	-72(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -1032(%rbp)       # 8-byte Spill
.LBB298_218:                            # %cond.end.613
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1016(%rbp)       # 8-byte Spill
.LBB298_219:                            # %cond.end.615
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -1040(%rbp)       # 8-byte Spill
	jne	.LBB298_221
# BB#220:                               # %cond.true.619
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	jmp	.LBB298_225
.LBB298_221:                            # %cond.false.621
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1056(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_223
# BB#222:                               # %cond.true.626
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -1064(%rbp)       # 8-byte Spill
	jmp	.LBB298_224
.LBB298_223:                            # %cond.false.628
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -1064(%rbp)       # 8-byte Spill
.LBB298_224:                            # %cond.end.631
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1048(%rbp)       # 8-byte Spill
.LBB298_225:                            # %cond.end.633
	movq	-1048(%rbp), %rax       # 8-byte Reload
	movq	-1040(%rbp), %rcx       # 8-byte Reload
	subq	%rax, %rcx
	movq	%rcx, -296(%rbp)
	movq	-288(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	jne	.LBB298_227
# BB#226:                               # %cond.true.638
	movq	current_buffer, %rax
	movq	768(%rax), %rax
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	jmp	.LBB298_231
.LBB298_227:                            # %cond.false.640
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1088(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_229
# BB#228:                               # %cond.true.645
	movq	-72(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	jmp	.LBB298_230
.LBB298_229:                            # %cond.false.647
	movq	-72(%rbp), %rax
	movq	376(%rax), %rdi
	callq	marker_position
	movq	%rax, -1096(%rbp)       # 8-byte Spill
.LBB298_230:                            # %cond.end.650
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1080(%rbp)       # 8-byte Spill
.LBB298_231:                            # %cond.end.652
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	-1072(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB298_241
# BB#232:                               # %if.then.656
	movq	-280(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -1104(%rbp)       # 8-byte Spill
	jne	.LBB298_234
# BB#233:                               # %cond.true.659
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -1112(%rbp)       # 8-byte Spill
	jmp	.LBB298_238
.LBB298_234:                            # %cond.false.661
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -1120(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_236
# BB#235:                               # %cond.true.666
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -1128(%rbp)       # 8-byte Spill
	jmp	.LBB298_237
.LBB298_236:                            # %cond.false.668
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -1128(%rbp)       # 8-byte Spill
.LBB298_237:                            # %cond.end.671
	movq	-1128(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1112(%rbp)       # 8-byte Spill
.LBB298_238:                            # %cond.end.673
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movq	-1104(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jg	.LBB298_240
# BB#239:                               # %if.then.677
	movabsq	$.L.str.153, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_240:                            # %if.else.678
	movabsq	$.L.str.154, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_241:                            # %if.else.679
	cmpq	$1000000, -296(%rbp)    # imm = 0xF4240
	jle	.LBB298_249
# BB#242:                               # %if.then.682
	movq	-288(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -1136(%rbp)       # 8-byte Spill
	jne	.LBB298_244
# BB#243:                               # %cond.true.685
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -1144(%rbp)       # 8-byte Spill
	jmp	.LBB298_248
.LBB298_244:                            # %cond.false.687
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -1152(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1152(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_246
# BB#245:                               # %cond.true.692
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -1160(%rbp)       # 8-byte Spill
	jmp	.LBB298_247
.LBB298_246:                            # %cond.false.694
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -1160(%rbp)       # 8-byte Spill
.LBB298_247:                            # %cond.end.697
	movq	-1160(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1144(%rbp)       # 8-byte Spill
.LBB298_248:                            # %cond.end.699
	movq	-1144(%rbp), %rax       # 8-byte Reload
	movl	$100, %ecx
	movl	%ecx, %edx
	movq	-1136(%rbp), %rsi       # 8-byte Reload
	subq	%rax, %rsi
	movq	-296(%rbp), %rax
	movq	%rdx, -1168(%rbp)       # 8-byte Spill
	cqto
	movq	-1168(%rbp), %rdi       # 8-byte Reload
	idivq	%rdi
	addq	%rax, %rsi
	subq	$1, %rsi
	movq	-296(%rbp), %rax
	cqto
	idivq	%rdi
	movq	%rax, -1176(%rbp)       # 8-byte Spill
	movq	%rsi, %rax
	cqto
	movq	-1176(%rbp), %rsi       # 8-byte Reload
	idivq	%rsi
	movq	%rax, -296(%rbp)
	jmp	.LBB298_256
.LBB298_249:                            # %if.else.707
	movq	-288(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -1184(%rbp)       # 8-byte Spill
	jne	.LBB298_251
# BB#250:                               # %cond.true.710
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -1192(%rbp)       # 8-byte Spill
	jmp	.LBB298_255
.LBB298_251:                            # %cond.false.712
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -1200(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1200(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_253
# BB#252:                               # %cond.true.717
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -1208(%rbp)       # 8-byte Spill
	jmp	.LBB298_254
.LBB298_253:                            # %cond.false.719
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -1208(%rbp)       # 8-byte Spill
.LBB298_254:                            # %cond.end.722
	movq	-1208(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1192(%rbp)       # 8-byte Spill
.LBB298_255:                            # %cond.end.724
	movq	-1192(%rbp), %rax       # 8-byte Reload
	movq	-1184(%rbp), %rcx       # 8-byte Reload
	subq	%rax, %rcx
	imulq	$100, %rcx, %rax
	addq	-296(%rbp), %rax
	subq	$1, %rax
	cqto
	idivq	-296(%rbp)
	movq	%rax, -296(%rbp)
.LBB298_256:                            # %if.end.731
	cmpq	$100, -296(%rbp)
	jne	.LBB298_258
# BB#257:                               # %if.then.734
	movq	$99, -296(%rbp)
.LBB298_258:                            # %if.end.735
	movq	-280(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	current_buffer, %rcx
	movq	%rax, -1216(%rbp)       # 8-byte Spill
	jne	.LBB298_260
# BB#259:                               # %cond.true.738
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	%rax, -1224(%rbp)       # 8-byte Spill
	jmp	.LBB298_264
.LBB298_260:                            # %cond.false.740
	xorl	%edi, %edi
	movq	-72(%rbp), %rax
	movq	368(%rax), %rax
	movq	%rax, -1232(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_262
# BB#261:                               # %cond.true.745
	movq	-72(%rbp), %rax
	movq	752(%rax), %rax
	movq	%rax, -1240(%rbp)       # 8-byte Spill
	jmp	.LBB298_263
.LBB298_262:                            # %cond.false.747
	movq	-72(%rbp), %rax
	movq	368(%rax), %rdi
	callq	marker_position
	movq	%rax, -1240(%rbp)       # 8-byte Spill
.LBB298_263:                            # %cond.end.750
	movq	-1240(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1224(%rbp)       # 8-byte Spill
.LBB298_264:                            # %cond.end.752
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	-1216(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jg	.LBB298_266
# BB#265:                               # %if.then.756
	movabsq	$.L.str.157, %rsi
	movq	-56(%rbp), %rdi
	movq	-296(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movl	%eax, -1244(%rbp)       # 4-byte Spill
	jmp	.LBB298_267
.LBB298_266:                            # %if.else.758
	movabsq	$.L.str.156, %rsi
	movq	-56(%rbp), %rdi
	movq	-296(%rbp), %rdx
	movb	$0, %al
	callq	sprintf
	movl	%eax, -1248(%rbp)       # 4-byte Spill
.LBB298_267:                            # %if.end.760
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_268:                            # %sw.bb.761
	callq	Fcurrent_buffer
	movq	%rax, %rdi
	callq	Fget_buffer_process
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -1256(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1256(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB298_270
# BB#269:                               # %if.then.767
	movabsq	$.L.str.158, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_270:                            # %if.end.768
	movq	-40(%rbp), %rdi
	callq	Fprocess_status
	movq	%rax, %rdi
	callq	Fsymbol_name
	movq	%rax, -40(%rbp)
	jmp	.LBB298_279
.LBB298_271:                            # %sw.bb.771
	callq	inhibit_garbage_collection
	xorl	%edi, %edi
	movq	%rax, -304(%rbp)
	movq	current_buffer, %rax
	movq	24(%rax), %rax
	movq	%rax, -312(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -320(%rbp)
	movq	-312(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB298_272
	jmp	.LBB298_273
.LBB298_272:                            # %if.then.775
	movabsq	$.L.str.159, %rdi
	callq	intern
	movq	-312(%rbp), %rsi
	movq	%rax, %rdi
	callq	call1
	movq	%rax, -320(%rbp)
.LBB298_273:                            # %if.end.778
	xorl	%edi, %edi
	movq	-304(%rbp), %rax
	movq	%rax, -1264(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1264(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	xorl	%edi, %edi
	movq	-320(%rbp), %rsi
	movq	%rax, -1272(%rbp)       # 8-byte Spill
	movq	%rsi, -1280(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1280(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB298_275
# BB#274:                               # %if.then.784
	movabsq	$.L.str.146, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_275:                            # %if.else.785
	movabsq	$.L.str.51, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_276:                            # %sw.bb.786
	cmpl	$90, -20(%rbp)
	sete	%al
	andb	$1, %al
	movb	%al, -321(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rcx, -336(%rbp)
	movq	-48(%rbp), %rcx
	movq	208(%rcx), %rcx
	shrq	$23, %rcx
	andq	$7, %rcx
	movl	%ecx, %edx
	cmpl	$2, %edx
	je	.LBB298_278
# BB#277:                               # %if.then.797
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-48(%rbp), %rdi
	movq	376(%rdi), %rdi
	movq	104(%rdi), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	xorl	%edx, %edx
	movq	-336(%rbp), %rsi
	movq	%rax, %rdi
	callq	decode_mode_spec_coding
	movq	%rax, -336(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-48(%rbp), %rsi
	movq	376(%rsi), %rsi
	movq	96(%rsi), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	xorl	%edx, %edx
	movq	-336(%rbp), %rsi
	movq	%rax, %rdi
	callq	decode_mode_spec_coding
	movq	%rax, -336(%rbp)
.LBB298_278:                            # %if.end.806
	movq	-72(%rbp), %rax
	movq	320(%rax), %rdi
	movq	-336(%rbp), %rsi
	movb	-321(%rbp), %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	callq	decode_mode_spec_coding
	movq	%rax, -336(%rbp)
	movq	-336(%rbp), %rax
	movb	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_279:                            # %sw.epilog
	movq	-40(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB298_280
	jmp	.LBB298_281
.LBB298_280:                            # %if.then.809
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rdi
	callq	SSDATA
	movq	%rax, -8(%rbp)
	jmp	.LBB298_282
.LBB298_281:                            # %if.else.811
	movabsq	$.L.str, %rax
	movq	%rax, -8(%rbp)
.LBB298_282:                            # %return
	movq	-8(%rbp), %rax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbp
	retq
.Lfunc_end298:
	.size	decode_mode_spec, .Lfunc_end298-decode_mode_spec
	.cfi_endproc

	.align	16, 0x90
	.type	safe__eval,@function
safe__eval:                             # @safe__eval
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp918:
	.cfi_def_cfa_offset 16
.Ltmp919:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp920:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dil, %al
	movl	$378, %edi              # imm = 0x17A
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	movb	%al, -17(%rbp)          # 1-byte Spill
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rdx
	movb	-17(%rbp), %cl          # 1-byte Reload
	andb	$1, %cl
	movzbl	%cl, %edi
	movq	%rax, %rsi
	movb	$0, %al
	callq	safe__call1
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end299:
	.size	safe__eval, .Lfunc_end299-safe__eval
	.cfi_endproc

	.align	16, 0x90
	.type	store_mode_line_noprop_char,@function
store_mode_line_noprop_char:            # @store_mode_line_noprop_char
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp921:
	.cfi_def_cfa_offset 16
.Ltmp922:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp923:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	%dil, %al
	movb	%al, -1(%rbp)
	movq	mode_line_noprop_ptr, %rcx
	cmpq	mode_line_noprop_buf_end, %rcx
	jne	.LBB300_2
# BB#1:                                 # %if.then
	leaq	-24(%rbp), %rsi
	movl	$1, %eax
	movl	%eax, %ecx
	movabsq	$2305843009213693951, %rdx # imm = 0x1FFFFFFFFFFFFFFF
	movq	mode_line_noprop_ptr, %rdi
	movq	mode_line_noprop_buf, %r8
	subq	%r8, %rdi
	subq	$0, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)
	movq	mode_line_noprop_buf, %rdi
	movq	%rdx, -32(%rbp)         # 8-byte Spill
	movq	%rcx, %rdx
	movq	-32(%rbp), %r8          # 8-byte Reload
	movq	%rcx, -40(%rbp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	-40(%rbp), %r8          # 8-byte Reload
	callq	xpalloc
	movq	%rax, mode_line_noprop_buf
	movq	mode_line_noprop_buf, %rax
	addq	-24(%rbp), %rax
	movq	%rax, mode_line_noprop_buf_end
	movq	mode_line_noprop_buf, %rax
	addq	-16(%rbp), %rax
	movq	%rax, mode_line_noprop_ptr
.LBB300_2:                              # %if.end
	movb	-1(%rbp), %al
	movq	mode_line_noprop_ptr, %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, mode_line_noprop_ptr
	movb	%al, (%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end300:
	.size	store_mode_line_noprop_char, .Lfunc_end300-store_mode_line_noprop_char
	.cfi_endproc

	.align	16, 0x90
	.type	pint2str,@function
pint2str:                               # @pint2str
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp924:
	.cfi_def_cfa_offset 16
.Ltmp925:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp926:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jg	.LBB301_2
# BB#1:                                 # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$48, (%rax)
	jmp	.LBB301_6
.LBB301_2:                              # %if.else
	jmp	.LBB301_3
.LBB301_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	jle	.LBB301_5
# BB#4:                                 # %while.body
                                        #   in Loop: Header=BB301_3 Depth=1
	movl	$10, %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rax
	cqto
	idivq	%rcx
	addq	$48, %rdx
	movb	%dl, %sil
	movq	-32(%rbp), %rdx
	movq	%rdx, %rdi
	addq	$1, %rdi
	movq	%rdi, -32(%rbp)
	movb	%sil, (%rdx)
	movq	-24(%rbp), %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movq	%rax, -24(%rbp)
	jmp	.LBB301_3
.LBB301_5:                              # %while.end
	jmp	.LBB301_6
.LBB301_6:                              # %if.end
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movl	-12(%rbp), %esi
	subl	%edx, %esi
	movl	%esi, -12(%rbp)
.LBB301_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jle	.LBB301_10
# BB#8:                                 # %for.body
                                        #   in Loop: Header=BB301_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$32, (%rax)
# BB#9:                                 # %for.inc
                                        #   in Loop: Header=BB301_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB301_7
.LBB301_10:                             # %for.end
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$0, (%rax)
.LBB301_11:                             # %while.cond.8
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jbe	.LBB301_13
# BB#12:                                # %while.body.11
                                        #   in Loop: Header=BB301_11 Depth=1
	movq	-8(%rbp), %rax
	movsbq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movb	(%rax), %cl
	movq	-8(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -8(%rbp)
	movb	%cl, (%rax)
	movq	-24(%rbp), %rax
	movb	%al, %cl
	movq	-32(%rbp), %rax
	movq	%rax, %rdx
	addq	$-1, %rdx
	movq	%rdx, -32(%rbp)
	movb	%cl, (%rax)
	jmp	.LBB301_11
.LBB301_13:                             # %while.end.16
	popq	%rbp
	retq
.Lfunc_end301:
	.size	pint2str, .Lfunc_end301-pint2str
	.cfi_endproc

	.align	16, 0x90
	.type	pint2hrstr,@function
pint2hrstr:                             # @pint2hrstr
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp927:
	.cfi_def_cfa_offset 16
.Ltmp928:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp929:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movl	$0, -36(%rbp)
	movl	$-1, -40(%rbp)
	movl	$0, -44(%rbp)
	cmpq	$1000, -32(%rbp)        # imm = 0x3E8
	jl	.LBB302_21
# BB#1:                                 # %if.then
	jmp	.LBB302_2
.LBB302_2:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	movl	$1000, %eax             # imm = 0x3E8
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	cqto
	idivq	%rcx
	movl	%edx, %esi
	movl	%esi, -36(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movq	%rax, -32(%rbp)
	movl	-44(%rbp), %esi
	addl	$1, %esi
	movl	%esi, -44(%rbp)
# BB#3:                                 # %do.cond
                                        #   in Loop: Header=BB302_2 Depth=1
	cmpq	$1000, -32(%rbp)        # imm = 0x3E8
	jge	.LBB302_2
# BB#4:                                 # %do.end
	cmpq	$9, -32(%rbp)
	jg	.LBB302_14
# BB#5:                                 # %if.then.5
	movl	$100, %eax
	movl	-36(%rbp), %ecx
	movl	%eax, -72(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-72(%rbp), %ecx         # 4-byte Reload
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	cmpl	$50, %edx
	jl	.LBB302_13
# BB#6:                                 # %if.then.10
	cmpl	$9, -40(%rbp)
	jge	.LBB302_8
# BB#7:                                 # %if.then.13
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB302_12
.LBB302_8:                              # %if.else
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	cmpq	$10, -32(%rbp)
	jne	.LBB302_10
# BB#9:                                 # %if.then.18
	movl	$-1, -40(%rbp)
	jmp	.LBB302_11
.LBB302_10:                             # %if.else.19
	movl	$0, -40(%rbp)
.LBB302_11:                             # %if.end
	jmp	.LBB302_12
.LBB302_12:                             # %if.end.20
	jmp	.LBB302_13
.LBB302_13:                             # %if.end.21
	jmp	.LBB302_20
.LBB302_14:                             # %if.else.22
	cmpl	$500, -36(%rbp)         # imm = 0x1F4
	jl	.LBB302_19
# BB#15:                                # %if.then.25
	cmpq	$999, -32(%rbp)         # imm = 0x3E7
	jge	.LBB302_17
# BB#16:                                # %if.then.28
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB302_18
.LBB302_17:                             # %if.else.30
	movq	$1, -32(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -40(%rbp)
.LBB302_18:                             # %if.end.32
	jmp	.LBB302_19
.LBB302_19:                             # %if.end.33
	jmp	.LBB302_20
.LBB302_20:                             # %if.end.34
	jmp	.LBB302_21
.LBB302_21:                             # %if.end.35
	cmpl	$-1, -40(%rbp)
	jne	.LBB302_27
# BB#22:                                # %land.lhs.true
	cmpq	$99, -32(%rbp)
	jg	.LBB302_27
# BB#23:                                # %if.then.40
	cmpq	$9, -32(%rbp)
	jg	.LBB302_25
# BB#24:                                # %if.then.43
	movl	$1, -48(%rbp)
	jmp	.LBB302_26
.LBB302_25:                             # %if.else.44
	movl	$2, -48(%rbp)
.LBB302_26:                             # %if.end.45
	jmp	.LBB302_28
.LBB302_27:                             # %if.else.46
	movl	$3, -48(%rbp)
.LBB302_28:                             # %if.end.47
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %ecx
	cmpl	-48(%rbp), %ecx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jle	.LBB302_30
# BB#29:                                # %cond.true
	movl	-12(%rbp), %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB302_31
.LBB302_30:                             # %cond.false
	movl	-48(%rbp), %eax
	movl	%eax, -84(%rbp)         # 4-byte Spill
.LBB302_31:                             # %cond.end
	movl	-84(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	-80(%rbp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	%rdx, -56(%rbp)
	movq	%rdx, -64(%rbp)
	movslq	-44(%rbp), %rcx
	movb	power_letter(,%rcx), %sil
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -56(%rbp)
	movb	%sil, (%rcx)
	movq	-56(%rbp), %rcx
	movb	$0, (%rcx)
	cmpl	$0, -40(%rbp)
	jl	.LBB302_33
# BB#32:                                # %if.then.52
	movl	-40(%rbp), %eax
	addl	$48, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$-1, %rsi
	movq	%rsi, -64(%rbp)
	movb	%cl, -1(%rdx)
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$-1, %rsi
	movq	%rsi, -64(%rbp)
	movb	$46, -1(%rdx)
.LBB302_33:                             # %if.end.56
	jmp	.LBB302_34
.LBB302_34:                             # %do.body.57
                                        # =>This Inner Loop Header: Depth=1
	movl	$10, %eax
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	cqto
	idivq	%rcx
	movl	%edx, %esi
	movl	%esi, -68(%rbp)
	movl	-68(%rbp), %esi
	addl	$48, %esi
	movb	%sil, %dil
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$-1, %rdx
	movq	%rdx, -64(%rbp)
	movb	%dil, -1(%rcx)
# BB#35:                                # %do.cond.63
                                        #   in Loop: Header=BB302_34 Depth=1
	movl	$10, %eax
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB302_34
# BB#36:                                # %do.end.67
	jmp	.LBB302_37
.LBB302_37:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jae	.LBB302_39
# BB#38:                                # %while.body
                                        #   in Loop: Header=BB302_37 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -64(%rbp)
	movb	$32, -1(%rax)
	jmp	.LBB302_37
.LBB302_39:                             # %while.end
	popq	%rbp
	retq
.Lfunc_end302:
	.size	pint2hrstr, .Lfunc_end302-pint2hrstr
	.cfi_endproc

	.align	16, 0x90
	.type	display_count_lines,@function
display_count_lines:                    # @display_count_lines
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp930:
	.cfi_def_cfa_offset 16
.Ltmp931:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp932:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	current_buffer, %rcx
	movq	256(%rcx), %rcx
	movl	%eax, %edi
	movq	%rcx, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %r8b
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	movb	%r8b, -97(%rbp)         # 1-byte Spill
	je	.LBB303_2
# BB#1:                                 # %land.rhs
	movq	current_buffer, %rax
	movq	256(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -97(%rbp)          # 1-byte Spill
.LBB303_2:                              # %land.end
	movb	-97(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -81(%rbp)
	cmpq	$0, -32(%rbp)
	jle	.LBB303_38
# BB#3:                                 # %if.then
	jmp	.LBB303_4
.LBB303_4:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_19 Depth 2
                                        #       Child Loop BB303_21 Depth 3
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB303_37
# BB#5:                                 # %while.body
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB303_8
# BB#6:                                 # %land.lhs.true
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	movq	current_buffer, %rcx
	cmpq	768(%rcx), %rax
	jge	.LBB303_8
# BB#7:                                 # %cond.true
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB303_9
.LBB303_8:                              # %cond.false
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	current_buffer, %rax
	movq	776(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB303_9:                              # %cond.end
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-112(%rbp), %rax        # 8-byte Reload
	subq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	subq	$1, %rax
	cmpq	-64(%rbp), %rax
	jge	.LBB303_11
# BB#10:                                # %cond.true.19
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-24(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB303_12
.LBB303_11:                             # %cond.false.21
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB303_12:                             # %cond.end.22
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB303_14
# BB#13:                                # %cond.true.28
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB303_15
.LBB303_14:                             # %cond.false.30
                                        #   in Loop: Header=BB303_4 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jmp	.LBB303_15
.LBB303_15:                             # %cond.end.31
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-128(%rbp), %rax        # 8-byte Reload
	addq	-64(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB303_17
# BB#16:                                # %cond.true.40
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB303_18
.LBB303_17:                             # %cond.false.43
                                        #   in Loop: Header=BB303_4 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB303_18
.LBB303_18:                             # %cond.end.44
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	addq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB303_19:                             # %do.body
                                        #   Parent Loop BB303_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_21 Depth 3
	testb	$1, -81(%rbp)
	je	.LBB303_29
# BB#20:                                # %if.then.51
                                        #   in Loop: Header=BB303_19 Depth=2
	jmp	.LBB303_21
.LBB303_21:                             # %while.cond.52
                                        #   Parent Loop BB303_4 Depth=1
                                        #     Parent Loop BB303_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movzbl	(%rdx), %eax
	cmpl	$10, %eax
	movb	%cl, -137(%rbp)         # 1-byte Spill
	je	.LBB303_24
# BB#22:                                # %land.lhs.true.56
                                        #   in Loop: Header=BB303_21 Depth=3
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movzbl	(%rdx), %eax
	cmpl	$13, %eax
	movb	%cl, -137(%rbp)         # 1-byte Spill
	je	.LBB303_24
# BB#23:                                # %land.rhs.60
                                        #   in Loop: Header=BB303_21 Depth=3
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	cmpq	-72(%rbp), %rax
	setne	%cl
	movb	%cl, -137(%rbp)         # 1-byte Spill
.LBB303_24:                             # %land.end.63
                                        #   in Loop: Header=BB303_21 Depth=3
	movb	-137(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB303_25
	jmp	.LBB303_26
.LBB303_25:                             # %while.body.64
                                        #   in Loop: Header=BB303_21 Depth=3
	jmp	.LBB303_21
.LBB303_26:                             # %while.end
                                        #   in Loop: Header=BB303_19 Depth=2
	movq	-48(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jne	.LBB303_28
# BB#27:                                # %if.then.67
                                        #   in Loop: Header=BB303_4 Depth=1
	jmp	.LBB303_36
.LBB303_28:                             # %if.end
                                        #   in Loop: Header=BB303_19 Depth=2
	jmp	.LBB303_32
.LBB303_29:                             # %if.else
                                        #   in Loop: Header=BB303_19 Depth=2
	movq	-48(%rbp), %rdi
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rcx
	subq	%rcx, %rax
	movl	$10, %esi
	movq	%rax, %rdx
	callq	memchr
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.LBB303_31
# BB#30:                                # %if.then.70
                                        #   in Loop: Header=BB303_4 Depth=1
	jmp	.LBB303_36
.LBB303_31:                             # %if.end.71
                                        #   in Loop: Header=BB303_19 Depth=2
	jmp	.LBB303_32
.LBB303_32:                             # %if.end.72
                                        #   in Loop: Header=BB303_19 Depth=2
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB303_34
# BB#33:                                # %if.then.76
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	%rcx, %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-80(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB303_75
.LBB303_34:                             # %if.end.81
                                        #   in Loop: Header=BB303_19 Depth=2
	jmp	.LBB303_35
.LBB303_35:                             # %do.cond
                                        #   in Loop: Header=BB303_19 Depth=2
	movq	-48(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jb	.LBB303_19
.LBB303_36:                             # %do.end
                                        #   in Loop: Header=BB303_4 Depth=1
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	%rcx, %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB303_4
.LBB303_37:                             # %while.end.88
	jmp	.LBB303_72
.LBB303_38:                             # %if.else.89
	jmp	.LBB303_39
.LBB303_39:                             # %while.cond.90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_54 Depth 2
                                        #       Child Loop BB303_56 Depth 3
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jle	.LBB303_71
# BB#40:                                # %while.body.93
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jg	.LBB303_43
# BB#41:                                # %land.lhs.true.98
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	jg	.LBB303_43
# BB#42:                                # %cond.true.104
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB303_44
.LBB303_43:                             # %cond.false.107
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB303_44:                             # %cond.end.108
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jle	.LBB303_46
# BB#45:                                # %cond.true.112
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	jmp	.LBB303_47
.LBB303_46:                             # %cond.false.113
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB303_47:                             # %cond.end.114
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB303_49
# BB#48:                                # %cond.true.120
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB303_50
.LBB303_49:                             # %cond.false.123
                                        #   in Loop: Header=BB303_39 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	jmp	.LBB303_50
.LBB303_50:                             # %cond.end.124
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-168(%rbp), %rax        # 8-byte Reload
	addq	-64(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -72(%rbp)
	movq	-16(%rbp), %rax
	subq	$1, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB303_52
# BB#51:                                # %cond.true.136
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB303_53
.LBB303_52:                             # %cond.false.139
                                        #   in Loop: Header=BB303_39 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jmp	.LBB303_53
.LBB303_53:                             # %cond.end.140
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	-16(%rbp), %rcx
	subq	$1, %rcx
	addq	%rcx, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB303_54:                             # %while.body.150
                                        #   Parent Loop BB303_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB303_56 Depth 3
	testb	$1, -81(%rbp)
	je	.LBB303_64
# BB#55:                                # %if.then.152
                                        #   in Loop: Header=BB303_54 Depth=2
	jmp	.LBB303_56
.LBB303_56:                             # %while.cond.153
                                        #   Parent Loop BB303_39 Depth=1
                                        #     Parent Loop BB303_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	addq	$-1, %rdx
	movq	%rdx, -48(%rbp)
	cmpq	-72(%rbp), %rdx
	movb	%cl, -177(%rbp)         # 1-byte Spill
	jb	.LBB303_59
# BB#57:                                # %land.lhs.true.157
                                        #   in Loop: Header=BB303_56 Depth=3
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movzbl	(%rdx), %eax
	cmpl	$10, %eax
	movb	%cl, -177(%rbp)         # 1-byte Spill
	je	.LBB303_59
# BB#58:                                # %land.rhs.161
                                        #   in Loop: Header=BB303_56 Depth=3
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$13, %ecx
	setne	%dl
	movb	%dl, -177(%rbp)         # 1-byte Spill
.LBB303_59:                             # %land.end.165
                                        #   in Loop: Header=BB303_56 Depth=3
	movb	-177(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB303_60
	jmp	.LBB303_61
.LBB303_60:                             # %while.body.166
                                        #   in Loop: Header=BB303_56 Depth=3
	jmp	.LBB303_56
.LBB303_61:                             # %while.end.167
                                        #   in Loop: Header=BB303_54 Depth=2
	movq	-48(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB303_63
# BB#62:                                # %if.then.170
                                        #   in Loop: Header=BB303_39 Depth=1
	jmp	.LBB303_70
.LBB303_63:                             # %if.end.171
                                        #   in Loop: Header=BB303_54 Depth=2
	jmp	.LBB303_67
.LBB303_64:                             # %if.else.172
                                        #   in Loop: Header=BB303_54 Depth=2
	movl	$10, %esi
	movq	-72(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	callq	memrchr
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.LBB303_66
# BB#65:                                # %if.then.178
                                        #   in Loop: Header=BB303_39 Depth=1
	jmp	.LBB303_70
.LBB303_66:                             # %if.end.179
                                        #   in Loop: Header=BB303_54 Depth=2
	jmp	.LBB303_67
.LBB303_67:                             # %if.end.180
                                        #   in Loop: Header=BB303_54 Depth=2
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, %rax
	jne	.LBB303_69
# BB#68:                                # %if.then.183
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-48(%rbp), %rdx
	movq	-56(%rbp), %rsi
	subq	%rsi, %rdx
	addq	$1, %rdx
	addq	-16(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	%rdx, (%rsi)
	subq	-80(%rbp), %rcx
	subq	$1, %rcx
	movq	%rcx, -8(%rbp)
	jmp	.LBB303_75
.LBB303_69:                             # %if.end.191
                                        #   in Loop: Header=BB303_54 Depth=2
	jmp	.LBB303_54
.LBB303_70:                             # %while.end.192
                                        #   in Loop: Header=BB303_39 Depth=1
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	%rcx, %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB303_39
.LBB303_71:                             # %while.end.197
	jmp	.LBB303_72
.LBB303_72:                             # %if.end.198
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	cmpq	$0, -32(%rbp)
	jge	.LBB303_74
# BB#73:                                # %if.then.201
	xorl	%eax, %eax
	movl	%eax, %ecx
	subq	-80(%rbp), %rcx
	addq	-32(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	jmp	.LBB303_75
.LBB303_74:                             # %if.end.204
	movq	-80(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB303_75:                             # %return
	movq	-8(%rbp), %rax
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end303:
	.size	display_count_lines, .Lfunc_end303-display_count_lines
	.cfi_endproc

	.align	16, 0x90
	.type	decode_mode_spec_coding,@function
decode_mode_spec_coding:                # @decode_mode_spec_coding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp933:
	.cfi_def_cfa_offset 16
.Ltmp934:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp935:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movb	%dl, %al
	xorl	%edx, %edx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	andb	$1, %al
	movb	%al, -25(%rbp)
	movq	current_buffer, %rsi
	movq	312(%rsi), %rsi
	movl	%edx, %edi
	movq	%rsi, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-104(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movb	%cl, -41(%rbp)
	movq	-16(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -72(%rbp)
	movq	-40(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB304_4
# BB#1:                                 # %if.then
	movl	$32, %eax
	movl	$45, %ecx
	movb	-41(%rbp), %dl
	testb	$1, %dl
	cmovnel	%ecx, %eax
	movb	%al, %dl
	movq	-24(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$1, %rdi
	movq	%rdi, -24(%rbp)
	movb	%dl, (%rsi)
	testb	$1, -25(%rbp)
	je	.LBB304_3
# BB#2:                                 # %if.then.7
	movq	globals+2968, %rax
	movq	%rax, -72(%rbp)
.LBB304_3:                              # %if.end
	jmp	.LBB304_22
.LBB304_4:                              # %if.else
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, -80(%rbp)
	movq	-40(%rbp), %rdi
	callq	AREF
	movq	%rax, -88(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB304_6
# BB#5:                                 # %cond.true
	movl	$2, %eax
	movl	%eax, %esi
	movq	-80(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB304_7
.LBB304_6:                              # %cond.false
	movl	$32, %eax
	movl	%eax, %ecx
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jmp	.LBB304_7
.LBB304_7:                              # %cond.end
	movq	-128(%rbp), %rax        # 8-byte Reload
	movb	%al, %cl
	movq	-24(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movb	%cl, (%rax)
	testb	$1, -25(%rbp)
	je	.LBB304_21
# BB#8:                                 # %if.then.17
	xorl	%edi, %edi
	movq	-88(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB304_10
# BB#9:                                 # %if.then.21
	movq	globals+2968, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB304_20
.LBB304_10:                             # %if.else.22
	movq	-88(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB304_11
	jmp	.LBB304_12
.LBB304_11:                             # %if.then.24
	movq	globals+2968, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB304_19
.LBB304_12:                             # %if.else.25
	movl	$973, %edi              # imm = 0x3CD
	movq	-88(%rbp), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB304_14
# BB#13:                                # %cond.true.29
	movq	globals+2976, %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB304_18
.LBB304_14:                             # %cond.false.30
	movl	$351, %edi              # imm = 0x15F
	movq	-88(%rbp), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB304_16
# BB#15:                                # %cond.true.34
	movq	globals+2952, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB304_17
.LBB304_16:                             # %cond.false.35
	movq	globals+2960, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB304_17:                             # %cond.end.36
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB304_18:                             # %cond.end.38
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, -72(%rbp)
.LBB304_19:                             # %if.end.40
	jmp	.LBB304_20
.LBB304_20:                             # %if.end.41
	jmp	.LBB304_21
.LBB304_21:                             # %if.end.42
	jmp	.LBB304_22
.LBB304_22:                             # %if.end.43
	testb	$1, -25(%rbp)
	je	.LBB304_46
# BB#23:                                # %if.then.45
	movq	-72(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB304_24
	jmp	.LBB304_25
.LBB304_24:                             # %if.then.47
	movq	-72(%rbp), %rdi
	callq	SDATA
	movq	%rax, -56(%rbp)
	movq	-72(%rbp), %rdi
	callq	SBYTES
	movl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	jmp	.LBB304_45
.LBB304_25:                             # %if.else.51
	movq	-72(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB304_26
	jmp	.LBB304_43
.LBB304_26:                             # %land.lhs.true
	movq	-72(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB304_43
# BB#27:                                # %if.then.57
	movb	$1, %al
	movq	-72(%rbp), %rcx
	sarq	$2, %rcx
	movl	%ecx, %edx
	movl	%edx, -92(%rbp)
	movq	-24(%rbp), %rcx
	testb	$1, %al
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jne	.LBB304_28
	jmp	.LBB304_29
.LBB304_28:                             # %cond.true.60
	movl	-92(%rbp), %eax
	addl	$0, %eax
	cmpl	$127, %eax
	jbe	.LBB304_30
	jmp	.LBB304_31
.LBB304_29:                             # %cond.false.63
	movslq	-92(%rbp), %rax
	addq	$0, %rax
	cmpq	$127, %rax
	ja	.LBB304_31
.LBB304_30:                             # %cond.true.68
	movl	$1, %eax
	movl	-92(%rbp), %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rsi
	movb	%dl, (%rsi)
	movl	%eax, -180(%rbp)        # 4-byte Spill
	jmp	.LBB304_42
.LBB304_31:                             # %cond.false.70
	movb	$1, %al
	testb	$1, %al
	jne	.LBB304_32
	jmp	.LBB304_33
.LBB304_32:                             # %cond.true.71
	movl	-92(%rbp), %eax
	addl	$0, %eax
	cmpl	$2047, %eax             # imm = 0x7FF
	jbe	.LBB304_34
	jmp	.LBB304_35
.LBB304_33:                             # %cond.false.75
	movslq	-92(%rbp), %rax
	addq	$0, %rax
	cmpq	$2047, %rax             # imm = 0x7FF
	ja	.LBB304_35
.LBB304_34:                             # %cond.true.80
	movl	$2, %eax
	movl	-92(%rbp), %ecx
	sarl	$6, %ecx
	orl	$192, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rsi
	movb	%dl, (%rsi)
	movl	-92(%rbp), %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rsi
	movb	%dl, 1(%rsi)
	movl	%eax, -184(%rbp)        # 4-byte Spill
	jmp	.LBB304_41
.LBB304_35:                             # %cond.false.87
	movb	$1, %al
	testb	$1, %al
	jne	.LBB304_36
	jmp	.LBB304_37
.LBB304_36:                             # %cond.true.88
	movl	-92(%rbp), %eax
	addl	$0, %eax
	cmpl	$65535, %eax            # imm = 0xFFFF
	jbe	.LBB304_38
	jmp	.LBB304_39
.LBB304_37:                             # %cond.false.92
	movslq	-92(%rbp), %rax
	addq	$0, %rax
	cmpq	$65535, %rax            # imm = 0xFFFF
	ja	.LBB304_39
.LBB304_38:                             # %cond.true.97
	movl	$3, %eax
	movl	-92(%rbp), %ecx
	sarl	$12, %ecx
	orl	$224, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rsi
	movb	%dl, (%rsi)
	movl	-92(%rbp), %ecx
	sarl	$6, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rsi
	movb	%dl, 1(%rsi)
	movl	-92(%rbp), %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rsi
	movb	%dl, 2(%rsi)
	movl	%eax, -188(%rbp)        # 4-byte Spill
	jmp	.LBB304_40
.LBB304_39:                             # %cond.false.111
	movl	-92(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	char_string
	movl	%eax, -188(%rbp)        # 4-byte Spill
.LBB304_40:                             # %cond.end.113
	movl	-188(%rbp), %eax        # 4-byte Reload
	movl	%eax, -184(%rbp)        # 4-byte Spill
.LBB304_41:                             # %cond.end.115
	movl	-184(%rbp), %eax        # 4-byte Reload
	movl	%eax, -180(%rbp)        # 4-byte Spill
.LBB304_42:                             # %cond.end.117
	movl	-180(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	-176(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	%rdx, -8(%rbp)
	jmp	.LBB304_47
.LBB304_43:                             # %if.else.119
	movabsq	$invalid_eol_type, %rax
	movq	%rax, -56(%rbp)
	movl	$11, -60(%rbp)
# BB#44:                                # %if.end.120
	jmp	.LBB304_45
.LBB304_45:                             # %if.end.121
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rdx
	callq	memcpy
	movl	-60(%rbp), %eax
	movq	-24(%rbp), %rdx
	movslq	%eax, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -24(%rbp)
.LBB304_46:                             # %if.end.125
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB304_47:                             # %return
	movq	-8(%rbp), %rax
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end304:
	.size	decode_mode_spec_coding, .Lfunc_end304-decode_mode_spec_coding
	.cfi_endproc

	.align	16, 0x90
	.type	reseat_to_string,@function
reseat_to_string:                       # @reseat_to_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp936:
	.cfi_def_cfa_offset 16
.Ltmp937:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp938:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
.Ltmp939:
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$48, %r11d
	movl	%r11d, %ebx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movl	%r9d, -52(%rbp)
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rcx
	movq	$-1, 32(%rcx)
	movq	-16(%rbp), %rcx
	addq	$312, %rcx              # imm = 0x138
	movq	%rcx, %rdi
	movl	%r10d, %esi
	movq	%rbx, %rdx
	callq	memset
	movq	-16(%rbp), %rcx
	movq	$-1, 328(%rcx)
	movq	-16(%rbp), %rcx
	movl	$-1, 352(%rcx)
	cmpl	$0, -56(%rbp)
	jl	.LBB305_2
# BB#1:                                 # %if.then
	cmpl	$0, -56(%rbp)
	setg	%al
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movb	88(%rcx), %dl
	andb	$-2, %dl
	orb	%al, %dl
	movb	%dl, 88(%rcx)
.LBB305_2:                              # %if.end
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, globals+3426
	movb	%cl, -97(%rbp)          # 1-byte Spill
	jne	.LBB305_4
# BB#3:                                 # %land.rhs
	xorl	%edi, %edi
	movq	buffer_defaults+240, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movb	%dl, -97(%rbp)          # 1-byte Spill
.LBB305_4:                              # %land.end
	movb	-97(%rbp), %al          # 1-byte Reload
	movq	-16(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	2456(%rcx), %esi
	shll	$20, %edx
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%edx, %esi
	movl	%esi, 2456(%rcx)
	cmpq	$0, -24(%rbp)
	jne	.LBB305_8
# BB#5:                                 # %if.then.11
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 632(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-32(%rbp), %rdi
	callq	SCHARS
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, 24(%rax)
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	string_pos
	movq	%rax, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movq	-72(%rbp), %rax
	movq	-120(%rbp), %rcx        # 8-byte Reload
	movq	%rax, 336(%rcx)
	movq	-64(%rbp), %rax
	movq	%rax, 344(%rcx)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %r8d
	shrl	$20, %r8d
	andl	$1, %r8d
	testl	$1, %r8d
	je	.LBB305_7
# BB#6:                                 # %if.then.20
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4720(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 4728(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4736(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 4744(%rax)
	movq	-16(%rbp), %rax
	movb	4752(%rax), %dl
	andb	$-2, %dl
	movb	%dl, 4752(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	xorb	$-1, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movb	4752(%rax), %sil
	shlb	$1, %dl
	andb	$-3, %sil
	orb	%dl, %sil
	movb	%sil, 4752(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4760(%rcx)
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	344(%rax), %rsi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %r8d
	cmpl	$2, %r8d
	sete	%dl
	movq	-16(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%dl, %r8d
	andl	$1, %r8d
	movl	%r8d, %edx
	movq	%rax, %rcx
	callq	bidi_init_it
.LBB305_7:                              # %if.end.56
	jmp	.LBB305_14
.LBB305_8:                              # %if.else
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	movq	%rax, 632(%rcx)
	movq	-16(%rbp), %rax
	movq	$-1, 344(%rax)
	movq	-16(%rbp), %rax
	movq	$-1, 336(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB305_10
# BB#9:                                 # %if.then.70
	movl	$1, %edx
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	c_string_pos
	movl	$1, %esi
	movq	%rax, -88(%rbp)
	movq	%rdx, -80(%rbp)
	movq	-88(%rbp), %rax
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	%rax, 312(%rdx)
	movq	-80(%rbp), %rax
	movq	%rax, 320(%rdx)
	movq	-24(%rbp), %rdi
	callq	number_of_chars
	movq	-16(%rbp), %rdx
	movq	%rax, 72(%rdx)
	movq	-16(%rbp), %rdx
	movq	%rax, 56(%rdx)
	jmp	.LBB305_11
.LBB305_10:                             # %if.else.77
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 320(%rcx)
	movq	-16(%rbp), %rcx
	movq	%rax, 312(%rcx)
	movq	-24(%rbp), %rdi
	callq	strlen
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
.LBB305_11:                             # %if.end.87
	movq	-16(%rbp), %rax
	movl	2456(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB305_13
# BB#12:                                # %if.then.93
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	movq	%rax, 4720(%rcx)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4728(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4736(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 4744(%rax)
	movq	-16(%rbp), %rax
	movb	4752(%rax), %dl
	andb	$-2, %dl
	movb	%dl, 4752(%rax)
	movq	-16(%rbp), %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	xorb	$-1, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movb	4752(%rax), %sil
	shlb	$1, %dl
	andb	$-3, %sil
	orb	%dl, %sil
	movb	%sil, 4752(%rax)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4760(%rcx)
	movq	-40(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	320(%rax), %rsi
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$23, %rax
	andq	$7, %rax
	movl	%eax, %r8d
	cmpl	$2, %r8d
	sete	%dl
	movq	-16(%rbp), %rax
	addq	$2464, %rax             # imm = 0x9A0
	movzbl	%dl, %r8d
	andl	$1, %r8d
	movl	%r8d, %edx
	movq	%rax, %rcx
	callq	bidi_init_it
.LBB305_13:                             # %if.end.140
	movq	-16(%rbp), %rax
	movl	$3, 24(%rax)
.LBB305_14:                             # %if.end.142
	cmpq	$0, -48(%rbp)
	jle	.LBB305_19
# BB#15:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	subq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jle	.LBB305_19
# BB#16:                                # %if.then.146
	movq	-40(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB305_18
# BB#17:                                # %if.then.154
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 4736(%rcx)
.LBB305_18:                             # %if.end.159
	jmp	.LBB305_19
.LBB305_19:                             # %if.end.160
	cmpl	$0, -52(%rbp)
	jge	.LBB305_21
# BB#20:                                # %if.then.162
	movl	$10000000, -52(%rbp)    # imm = 0x989680
.LBB305_21:                             # %if.end.163
	movslq	-52(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	subq	-40(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB305_23
# BB#22:                                # %if.then.168
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
.LBB305_23:                             # %if.end.172
	movq	globals+2200, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB305_24
	jmp	.LBB305_27
.LBB305_24:                             # %land.lhs.true.175
	movq	globals+2200, %rdi
	callq	XCHAR_TABLE
	movl	$346, %edi              # imm = 0x15A
	movq	24(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB305_27
# BB#25:                                # %land.lhs.true.180
	movq	globals+2200, %rdi
	callq	XCHAR_TABLE
	movq	%rax, %rdi
	callq	CHAR_TABLE_EXTRA_SLOTS
	cmpl	$6, %eax
	jne	.LBB305_27
# BB#26:                                # %if.then.185
	movq	globals+2200, %rdi
	callq	XCHAR_TABLE
	movq	-16(%rbp), %rdi
	movq	%rax, 96(%rdi)
.LBB305_27:                             # %if.end.187
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movl	2456(%rax), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB305_29
# BB#28:                                # %if.then.194
	movq	-16(%rbp), %rax
	movb	4784(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 4784(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4768(%rax)
	movq	-16(%rbp), %rax
	movq	$-1, 2656(%rax)
.LBB305_29:                             # %if.end.201
	cmpq	$0, -24(%rbp)
	jne	.LBB305_34
# BB#30:                                # %land.lhs.true.204
	movq	-16(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB305_34
# BB#31:                                # %if.then.210
	movq	-16(%rbp), %rax
	movq	632(%rax), %rdi
	callq	SCHARS
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	-16(%rbp), %rdi
	cmpq	56(%rdi), %rax
	jle	.LBB305_33
# BB#32:                                # %if.then.216
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -96(%rbp)
.LBB305_33:                             # %if.end.218
	movq	$-1, %rdx
	movq	-16(%rbp), %rax
	addq	$2136, %rax             # imm = 0x858
	movq	-40(%rbp), %rsi
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdi
	movq	632(%rdi), %r8
	movq	%rax, %rdi
	callq	composition_compute_stop_pos
.LBB305_34:                             # %if.end.220
	movq	-16(%rbp), %rdi
	callq	CHECK_IT
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end305:
	.size	reseat_to_string, .Lfunc_end305-reseat_to_string
	.cfi_endproc

	.align	16, 0x90
	.type	c_string_pos,@function
c_string_pos:                           # @c_string_pos
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp940:
	.cfi_def_cfa_offset 16
.Ltmp941:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp942:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%dl, %al
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	andb	$1, %al
	movb	%al, -33(%rbp)
	testb	$1, -33(%rbp)
	je	.LBB306_5
# BB#1:                                 # %if.then
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
.LBB306_2:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	cmpq	$0, %rax
	je	.LBB306_4
# BB#3:                                 # %while.body
                                        #   in Loop: Header=BB306_2 Depth=1
	leaq	-60(%rbp), %rsi
	movq	-32(%rbp), %rdi
	callq	string_char_and_length
	movl	-60(%rbp), %ecx
	movq	-32(%rbp), %rsi
	movslq	%ecx, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -32(%rbp)
	movq	-56(%rbp), %rsi
	addq	$1, %rsi
	movq	%rsi, -56(%rbp)
	movslq	-60(%rbp), %rsi
	addq	-48(%rbp), %rsi
	movq	%rsi, -48(%rbp)
	movl	%eax, -64(%rbp)         # 4-byte Spill
	jmp	.LBB306_2
.LBB306_4:                              # %while.end
	jmp	.LBB306_6
.LBB306_5:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB306_6:                              # %if.end
	movups	-56(%rbp), %xmm0
	movaps	%xmm0, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end306:
	.size	c_string_pos, .Lfunc_end306-c_string_pos
	.cfi_endproc

	.align	16, 0x90
	.type	number_of_chars,@function
number_of_chars:                        # @number_of_chars
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp943:
	.cfi_def_cfa_offset 16
.Ltmp944:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp945:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	andb	$1, %al
	movb	%al, -9(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB307_6
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	strlen
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	$0, -24(%rbp)
.LBB307_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -32(%rbp)
	jle	.LBB307_5
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB307_2 Depth=1
	leaq	-36(%rbp), %rsi
	movq	-48(%rbp), %rdi
	callq	string_char_and_length
	movslq	-36(%rbp), %rsi
	movq	-32(%rbp), %rdi
	subq	%rsi, %rdi
	movq	%rdi, -32(%rbp)
	movl	-36(%rbp), %ecx
	movq	-48(%rbp), %rsi
	movslq	%ecx, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -48(%rbp)
	movl	%eax, -52(%rbp)         # 4-byte Spill
# BB#4:                                 # %for.inc
                                        #   in Loop: Header=BB307_2 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB307_2
.LBB307_5:                              # %for.end
	jmp	.LBB307_7
.LBB307_6:                              # %if.else
	movq	-8(%rbp), %rdi
	callq	strlen
	movq	%rax, -24(%rbp)
.LBB307_7:                              # %if.end
	movq	-24(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end307:
	.size	number_of_chars, .Lfunc_end307-number_of_chars
	.cfi_endproc

	.align	16, 0x90
	.type	append_glyphless_glyph,@function
append_glyphless_glyph:                 # @append_glyphless_glyph
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp946:
	.cfi_def_cfa_offset 16
.Ltmp947:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp948:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
.Ltmp949:
	.cfi_offset %rbx, -56
.Ltmp950:
	.cfi_offset %r12, -48
.Ltmp951:
	.cfi_offset %r13, -40
.Ltmp952:
	.cfi_offset %r14, -32
.Ltmp953:
	.cfi_offset %r15, -24
	movzwl	24(%rbp), %eax
	movw	%ax, %r10w
	movzwl	16(%rbp), %eax
	movw	%ax, %r11w
	movw	%r9w, %bx
	movw	%r8w, %r14w
	movb	%dl, %r15b
	movq	%rdi, -48(%rbp)
	movl	%esi, -52(%rbp)
	andb	$1, %r15b
	movb	%r15b, -53(%rbp)
	movl	%ecx, -60(%rbp)
	movw	%r14w, -62(%rbp)
	movw	%bx, -64(%rbp)
	movw	%r11w, -66(%rbp)
	movw	%r10w, -68(%rbp)
	movq	-48(%rbp), %rdi
	movl	2360(%rdi), %eax
	movl	%eax, -84(%rbp)
	movslq	-84(%rbp), %rdi
	movq	-48(%rbp), %r12
	movq	2352(%r12), %r12
	movq	(%r12,%rdi,8), %rdi
	movslq	-84(%rbp), %r12
	movq	-48(%rbp), %r13
	movq	2352(%r13), %r13
	movswl	32(%r13,%r12,2), %eax
	movslq	%eax, %r12
	imulq	$48, %r12, %r12
	addq	%r12, %rdi
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rdi
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %r12
	movq	-48(%rbp), %r13
	movq	2352(%r13), %r13
	cmpq	(%r13,%r12,8), %rdi
	jae	.LBB308_17
# BB#1:                                 # %if.then
	movq	-48(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB308_8
# BB#2:                                 # %land.lhs.true
	cmpl	$1, -84(%rbp)
	jne	.LBB308_8
# BB#3:                                 # %if.then.14
	movq	-80(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -96(%rbp)
.LBB308_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	2352(%rdx), %rdx
	cmpq	(%rdx,%rcx,8), %rax
	jb	.LBB308_7
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB308_4 Depth=1
	movl	$48, %eax
	movl	%eax, %edx
	movq	-96(%rbp), %rcx
	addq	$48, %rcx
	movq	-96(%rbp), %rsi
	movq	%rcx, %rdi
	callq	memcpy
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB308_4 Depth=1
	movq	-96(%rbp), %rax
	addq	$-48, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB308_4
.LBB308_7:                              # %for.end
	movslq	-84(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -80(%rbp)
.LBB308_8:                              # %if.end
	movq	-48(%rbp), %rax
	movq	2296(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-48(%rbp), %rax
	movq	2288(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-48(%rbp), %rax
	movl	2368(%rax), %edx
	movw	%dx, %si
	movq	-80(%rbp), %rax
	movw	%si, 16(%rax)
	movq	-48(%rbp), %rax
	movl	2372(%rax), %edx
	movw	%dx, %si
	movq	-80(%rbp), %rax
	movw	%si, 18(%rax)
	movq	-48(%rbp), %rax
	movl	2376(%rax), %edx
	movw	%dx, %si
	movq	-80(%rbp), %rax
	movw	%si, 20(%rax)
	movq	-48(%rbp), %rax
	movw	2272(%rax), %si
	movq	-80(%rbp), %rax
	movw	%si, 22(%rax)
	movq	-80(%rbp), %rax
	movl	24(%rax), %edx
	andl	$-8, %edx
	orl	$2, %edx
	movl	%edx, 24(%rax)
	movq	-48(%rbp), %rax
	movl	2212(%rax), %edx
	movq	-80(%rbp), %rax
	movl	40(%rax), %edi
	andl	$3, %edx
	andl	$-4, %edi
	orl	%edx, %edi
	movl	%edi, 40(%rax)
	movb	-53(%rbp), %r8b
	movq	-80(%rbp), %rax
	andb	$1, %r8b
	movzbl	%r8b, %edx
	movl	40(%rax), %edi
	shll	$2, %edx
	andl	$-5, %edi
	orl	%edx, %edi
	movl	%edi, 40(%rax)
	movl	-60(%rbp), %edx
	movq	-80(%rbp), %rax
	movl	40(%rax), %edi
	andl	$15, %edx
	shll	$3, %edx
	andl	$-121, %edi
	orl	%edx, %edi
	movl	%edi, 40(%rax)
	movq	-48(%rbp), %rax
	movl	2124(%rax), %edx
	movq	-80(%rbp), %rax
	movl	40(%rax), %edi
	andl	$33554431, %edx         # imm = 0x1FFFFFF
	shll	$7, %edx
	andl	$127, %edi
	orl	%edx, %edi
	movl	%edi, 40(%rax)
	movw	-62(%rbp), %si
	movq	-80(%rbp), %rax
	movw	%si, 32(%rax)
	movw	-64(%rbp), %si
	movq	-80(%rbp), %rax
	movw	%si, 34(%rax)
	movw	-66(%rbp), %si
	movq	-80(%rbp), %rax
	movw	%si, 36(%rax)
	movw	-68(%rbp), %si
	movq	-80(%rbp), %rax
	movw	%si, 38(%rax)
	movq	-48(%rbp), %rax
	movb	88(%rax), %r8b
	shrb	$6, %r8b
	andb	$1, %r8b
	movq	-80(%rbp), %rax
	andb	$1, %r8b
	movzbl	%r8b, %edx
	movl	24(%rax), %edi
	shll	$9, %edx
	andl	$-513, %edi             # imm = 0xFFFFFFFFFFFFFDFF
	orl	%edx, %edi
	movl	%edi, 24(%rax)
	movq	-48(%rbp), %rax
	movb	88(%rax), %r8b
	andb	$1, %r8b
	movq	-80(%rbp), %rax
	andb	$1, %r8b
	movzbl	%r8b, %edx
	movl	24(%rax), %edi
	shll	$3, %edx
	andl	$-9, %edi
	orl	%edx, %edi
	movl	%edi, 24(%rax)
	movq	-48(%rbp), %rax
	movq	2352(%rax), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB308_11
# BB#9:                                 # %land.lhs.true.100
	cmpl	$1, -84(%rbp)
	jne	.LBB308_11
# BB#10:                                # %if.then.103
	movq	-48(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-80(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-48(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-80(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	jmp	.LBB308_12
.LBB308_11:                             # %if.else
	movq	-48(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$3, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-80(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$4, %esi
	andl	$-17, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
	movq	-48(%rbp), %rax
	movw	2112(%rax), %cx
	shrw	$4, %cx
	andw	$1, %cx
	movb	%cl, %dl
	movq	-80(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	24(%rax), %edi
	shll	$5, %esi
	andl	$-33, %edi
	orl	%esi, %edi
	movl	%edi, 24(%rax)
.LBB308_12:                             # %if.end.148
	movb	$1, %al
	movq	-48(%rbp), %rcx
	movl	2388(%rcx), %edx
	movq	-48(%rbp), %rcx
	cmpl	2372(%rcx), %edx
	movb	%al, -97(%rbp)          # 1-byte Spill
	jg	.LBB308_14
# BB#13:                                # %lor.rhs
	movq	-48(%rbp), %rax
	movl	2392(%rax), %ecx
	movq	-48(%rbp), %rax
	cmpl	2376(%rax), %ecx
	setg	%dl
	movb	%dl, -97(%rbp)          # 1-byte Spill
.LBB308_14:                             # %lor.end
	movb	-97(%rbp), %al          # 1-byte Reload
	movq	-80(%rbp), %rcx
	andb	$1, %al
	movzbl	%al, %edx
	movl	24(%rcx), %esi
	shll	$6, %edx
	andl	$-65, %esi
	orl	%edx, %esi
	movl	%esi, 24(%rcx)
	movq	-80(%rbp), %rcx
	movl	24(%rcx), %edx
	andl	$-129, %edx
	movl	%edx, 24(%rcx)
	movq	-80(%rbp), %rcx
	movl	24(%rcx), %edx
	andl	$-257, %edx             # imm = 0xFFFFFFFFFFFFFEFF
	movl	%edx, 24(%rcx)
	movl	-52(%rbp), %edx
	movq	-80(%rbp), %rcx
	movl	28(%rcx), %esi
	andl	$1048575, %edx          # imm = 0xFFFFF
	andl	$-1048576, %esi         # imm = 0xFFFFFFFFFFF00000
	orl	%edx, %esi
	movl	%esi, 28(%rcx)
	movq	-80(%rbp), %rcx
	movl	28(%rcx), %edx
	andl	$-7340033, %edx         # imm = 0xFFFFFFFFFF8FFFFF
	movl	%edx, 28(%rcx)
	movq	-48(%rbp), %rcx
	movl	2456(%rcx), %edx
	shrl	$20, %edx
	andl	$1, %edx
	testl	$1, %edx
	je	.LBB308_16
# BB#15:                                # %if.then.176
	movq	-48(%rbp), %rax
	movsbl	2516(%rax), %ecx
	movq	-80(%rbp), %rax
	movl	24(%rax), %edx
	andl	$127, %ecx
	shll	$10, %ecx
	andl	$-130049, %edx          # imm = 0xFFFFFFFFFFFE03FF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
	movq	-48(%rbp), %rax
	movl	2504(%rax), %ecx
	movq	-80(%rbp), %rax
	movl	24(%rax), %edx
	andl	$7, %ecx
	shll	$17, %ecx
	andl	$-917505, %edx          # imm = 0xFFFFFFFFFFF1FFFF
	orl	%ecx, %edx
	movl	%edx, 24(%rax)
.LBB308_16:                             # %if.end.191
	movslq	-84(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movw	32(%rcx,%rax,2), %dx
	addw	$1, %dx
	movw	%dx, 32(%rcx,%rax,2)
	jmp	.LBB308_21
.LBB308_17:                             # %if.else.196
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rax
	shrq	$6, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB308_20
# BB#18:                                # %land.lhs.true.201
	movslq	-84(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	2352(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movl	-84(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rcx
	movq	-48(%rbp), %rsi
	movq	2352(%rsi), %rsi
	cmpq	(%rsi,%rcx,8), %rax
	jae	.LBB308_20
# BB#19:                                # %if.then.213
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	348(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 348(%rax)
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	208(%rax), %rdx
	andq	$-65, %rdx
	orq	$64, %rdx
	movq	%rdx, 208(%rax)
.LBB308_20:                             # %if.end.220
	jmp	.LBB308_21
.LBB308_21:                             # %if.end.221
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
.Lfunc_end308:
	.size	append_glyphless_glyph, .Lfunc_end308-append_glyphless_glyph
	.cfi_endproc

	.align	16, 0x90
	.type	init_glyph_string,@function
init_glyph_string:                      # @init_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp954:
	.cfi_def_cfa_offset 16
.Ltmp955:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp956:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
.Ltmp957:
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$248, %r11d
	movl	%r11d, %ebx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -48(%rbp)
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdi
	movl	%r10d, %esi
	movq	%rbx, %rdx
	callq	memset
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 40(%rdx)
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 32(%rdx)
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	384(%rcx), %rcx
	movq	424(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 48(%rdx)
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	384(%rcx), %rcx
	movq	56(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 56(%rdx)
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 80(%rdx)
	movl	-52(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 92(%rcx)
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 64(%rdx)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movslq	-44(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movslq	-48(%rbp), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 152(%rdx)
	movq	-40(%rbp), %rcx
	movl	60(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-40(%rbp), %rcx
	movl	48(%rcx), %eax
	movq	-32(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	movl	332(%rcx), %esi
	movq	-32(%rbp), %rcx
	addl	244(%rcx), %esi
	addl	%esi, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rcx
	movl	4(%rcx), %eax
	movq	-40(%rbp), %rcx
	addl	56(%rcx), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end309:
	.size	init_glyph_string, .Lfunc_end309-init_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	append_glyph_string,@function
append_glyph_string:                    # @append_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp958:
	.cfi_def_cfa_offset 16
.Ltmp959:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp960:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	$0, 240(%rdx)
	movq	-24(%rbp), %rdx
	movq	$0, 232(%rdx)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-24(%rbp), %rcx
	callq	append_glyph_string_lists
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end310:
	.size	append_glyph_string, .Lfunc_end310-append_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	fill_glyph_string,@function
fill_glyph_string:                      # @fill_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp961:
	.cfi_def_cfa_offset 16
.Ltmp962:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp963:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	-24(%rbp), %ecx
	movq	-8(%rbp), %rdi
	movb	%cl, %al
	movb	136(%rdi), %r9b
	andb	$7, %al
	shlb	$4, %al
	andb	$-113, %r9b
	orb	%al, %r9b
	movb	%r9b, 136(%rdi)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %r10
	movq	64(%r10), %r10
	movq	(%r10,%rdi,8), %rdi
	movslq	-16(%rbp), %r10
	imulq	$48, %r10, %r10
	addq	%r10, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %r10
	movq	64(%r10), %r10
	movq	(%r10,%rdi,8), %rdi
	movslq	-20(%rbp), %r10
	imulq	$48, %r10, %r10
	addq	%r10, %rdi
	movq	%rdi, -40(%rbp)
	movq	-32(%rbp), %rdi
	movswl	22(%rdi), %ecx
	movl	%ecx, -44(%rbp)
	movq	-32(%rbp), %rdi
	movl	24(%rdi), %ecx
	shrl	$7, %ecx
	andl	$1, %ecx
	movb	%cl, %al
	movq	-8(%rbp), %rdi
	andb	$1, %al
	movb	136(%rdi), %r9b
	shlb	$7, %al
	andb	$127, %r9b
	orb	%al, %r9b
	movb	%r9b, 136(%rdi)
	movq	-32(%rbp), %rdi
	movl	24(%rdi), %ecx
	shrl	$8, %ecx
	andl	$1, %ecx
	movb	%cl, %al
	andb	$1, %al
	movb	%al, -45(%rbp)
.LBB311_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	cmpq	-40(%rbp), %rdx
	movb	%cl, -46(%rbp)          # 1-byte Spill
	jae	.LBB311_6
# BB#2:                                 # %land.lhs.true
                                        #   in Loop: Header=BB311_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$0, %eax
	movb	%cl, -46(%rbp)          # 1-byte Spill
	jne	.LBB311_6
# BB#3:                                 # %land.lhs.true.26
                                        #   in Loop: Header=BB311_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movswl	22(%rdx), %eax
	cmpl	-44(%rbp), %eax
	movb	%cl, -46(%rbp)          # 1-byte Spill
	jne	.LBB311_6
# BB#4:                                 # %land.lhs.true.31
                                        #   in Loop: Header=BB311_1 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	28(%rdx), %eax
	andl	$1048575, %eax          # imm = 0xFFFFF
	cmpl	-12(%rbp), %eax
	movb	%cl, -46(%rbp)          # 1-byte Spill
	jne	.LBB311_6
# BB#5:                                 # %land.rhs
                                        #   in Loop: Header=BB311_1 Depth=1
	movq	-32(%rbp), %rax
	movl	24(%rax), %ecx
	shrl	$8, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movb	-45(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	cmpl	%esi, %ecx
	sete	%dl
	movb	%dl, -46(%rbp)          # 1-byte Spill
.LBB311_6:                              # %land.end
                                        #   in Loop: Header=BB311_1 Depth=1
	movb	-46(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB311_7
	jmp	.LBB311_10
.LBB311_7:                              # %while.body
                                        #   in Loop: Header=BB311_1 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-32(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	movq	-8(%rbp), %rcx
	movslq	88(%rcx), %rcx
	shlq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	callq	get_glyph_face_and_encoding
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movl	88(%rax), %r8d
	addl	$1, %r8d
	movl	%r8d, 88(%rax)
	movq	-32(%rbp), %rax
	movswl	16(%rax), %r8d
	movq	-8(%rbp), %rax
	addl	12(%rax), %r8d
	movl	%r8d, 12(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$48, %rcx
	movq	%rcx, -32(%rbp)
	movl	24(%rax), %r8d
	shrl	$7, %r8d
	andl	$1, %r8d
	movb	%r8b, %r9b
	andb	$1, %r9b
	movzbl	%r9b, %r8d
	movq	-8(%rbp), %rax
	movb	136(%rax), %r9b
	shrb	$7, %r9b
	andb	$1, %r9b
	movzbl	%r9b, %r10d
	cmpl	%r10d, %r8d
	je	.LBB311_9
# BB#8:                                 # %if.then
	jmp	.LBB311_10
.LBB311_9:                              # %if.end
                                        #   in Loop: Header=BB311_1 Depth=1
	jmp	.LBB311_1
.LBB311_10:                             # %while.end
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	224(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB311_12
# BB#11:                                # %lor.lhs.false
	testb	$1, -45(%rbp)
	je	.LBB311_13
.LBB311_12:                             # %if.then.71
	movq	-8(%rbp), %rax
	movb	136(%rax), %cl
	andb	$-5, %cl
	orb	$4, %cl
	movb	%cl, 136(%rax)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
.LBB311_13:                             # %if.end.78
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rdx
	addl	8(%rdx), %eax
	movl	%eax, 8(%rdx)
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movslq	72(%rsi), %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	movq	(%rdi,%rsi,8), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %r8d
	movl	%r8d, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end311:
	.size	fill_glyph_string, .Lfunc_end311-fill_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	fill_gstring_glyph_string,@function
fill_gstring_glyph_string:              # @fill_gstring_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp964:
	.cfi_def_cfa_offset 16
.Ltmp965:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp966:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	-24(%rbp), %ecx
	movq	-8(%rbp), %rdi
	movb	%cl, %r9b
	movb	136(%rdi), %r10b
	andb	$7, %r9b
	shlb	$4, %r9b
	andb	$-113, %r10b
	orb	%r9b, %r10b
	movb	%r10b, 136(%rdi)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %r11
	movq	64(%r11), %r11
	movq	(%r11,%rdi,8), %rdi
	movslq	-16(%rbp), %r11
	imulq	$48, %r11, %r11
	addq	%r11, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %r11
	movq	64(%r11), %r11
	movq	(%r11,%rdi,8), %rdi
	movslq	-20(%rbp), %r11
	imulq	$48, %r11, %r11
	addq	%r11, %rdi
	movq	%rdi, -40(%rbp)
	movq	-32(%rbp), %rdi
	movl	40(%rdi), %ecx
	shrl	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edi
	movq	-8(%rbp), %r11
	movq	%rdi, 120(%r11)
	movq	-32(%rbp), %rdi
	movl	32(%rdi), %ecx
	movq	-8(%rbp), %rdi
	movl	%ecx, 128(%rdi)
	movq	-32(%rbp), %rdi
	movl	36(%rdi), %ecx
	addl	$1, %ecx
	movq	-8(%rbp), %rdi
	movl	%ecx, 132(%rdi)
	testb	$1, %al
	jne	.LBB312_1
	jmp	.LBB312_2
.LBB312_1:                              # %cond.true
	movl	-12(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB312_3
	jmp	.LBB312_4
.LBB312_2:                              # %cond.false
	movslq	-12(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB312_4
.LBB312_3:                              # %cond.true.25
	movslq	-12(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB312_5
.LBB312_4:                              # %cond.false.30
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	jmp	.LBB312_5
.LBB312_5:                              # %cond.end
	movq	-80(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movq	120(%rax), %rdi
	callq	composition_gstring_from_id
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	AREF
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	XFONT_OBJECT
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
.LBB312_6:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	cmpq	-40(%rbp), %rdx
	movb	%cl, -81(%rbp)          # 1-byte Spill
	jae	.LBB312_10
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB312_6 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	40(%rdx), %eax
	andl	$1, %eax
	testl	$1, %eax
	movb	%cl, -81(%rbp)          # 1-byte Spill
	je	.LBB312_10
# BB#8:                                 # %land.lhs.true.42
                                        #   in Loop: Header=BB312_6 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	40(%rdx), %eax
	shrl	$1, %eax
	movl	%eax, %eax
	movl	%eax, %edx
	movq	-8(%rbp), %rsi
	cmpq	120(%rsi), %rdx
	movb	%cl, -81(%rbp)          # 1-byte Spill
	jne	.LBB312_10
# BB#9:                                 # %land.rhs
                                        #   in Loop: Header=BB312_6 Depth=1
	movq	-8(%rbp), %rax
	movl	132(%rax), %ecx
	movq	-32(%rbp), %rax
	cmpl	32(%rax), %ecx
	sete	%dl
	movb	%dl, -81(%rbp)          # 1-byte Spill
.LBB312_10:                             # %land.end
                                        #   in Loop: Header=BB312_6 Depth=1
	movb	-81(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB312_11
	jmp	.LBB312_12
.LBB312_11:                             # %while.body
                                        #   in Loop: Header=BB312_6 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$48, %rcx
	movq	%rcx, -32(%rbp)
	movl	36(%rax), %edx
	addl	$1, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 132(%rax)
	jmp	.LBB312_6
.LBB312_12:                             # %while.end
	movq	-8(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -52(%rbp)
.LBB312_13:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-52(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	132(%rcx), %eax
	jge	.LBB312_19
# BB#14:                                # %for.body
                                        #   in Loop: Header=BB312_13 Depth=1
	movq	-48(%rbp), %rdi
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rsi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB312_16
# BB#15:                                # %cond.true.74
                                        #   in Loop: Header=BB312_13 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ecx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	jmp	.LBB312_17
.LBB312_16:                             # %cond.false.75
                                        #   in Loop: Header=BB312_13 Depth=1
	movl	$3, %eax
	movl	%eax, %esi
	movq	-64(%rbp), %rdi
	callq	AREF
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	cons_to_unsigned
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB312_17:                             # %cond.end.78
                                        #   in Loop: Header=BB312_13 Depth=1
	movq	-104(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %ecx
	shrl	$8, %ecx
	movb	%cl, %dl
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	movslq	-52(%rbp), %rsi
	movb	%dl, (%rax,%rsi,2)
	movl	-68(%rbp), %ecx
	andl	$255, %ecx
	movb	%cl, %dl
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	movslq	-52(%rbp), %rsi
	movb	%dl, 1(%rax,%rsi,2)
# BB#18:                                # %for.inc
                                        #   in Loop: Header=BB312_13 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB312_13
.LBB312_19:                             # %for.end
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-48(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	128(%rdx), %rsi
	movq	-8(%rbp), %rdx
	movslq	132(%rdx), %rdx
	callq	composition_gstring_width
	movl	$48, %r8d
	movl	%r8d, %ecx
	movq	-8(%rbp), %rdx
	movl	%eax, 12(%rdx)
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movslq	72(%rsi), %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	movq	(%rdi,%rsi,8), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %r8d
	movl	%r8d, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end312:
	.size	fill_gstring_glyph_string, .Lfunc_end312-fill_gstring_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	fill_composite_glyph_string,@function
fill_composite_glyph_string:            # @fill_composite_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp967:
	.cfi_def_cfa_offset 16
.Ltmp968:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp969:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %edx
	movq	-8(%rbp), %rsi
	movb	%dl, %al
	movb	136(%rsi), %cl
	andb	$7, %al
	shlb	$4, %al
	andb	$-113, %cl
	orb	%al, %cl
	movb	%cl, 136(%rsi)
	movq	-8(%rbp), %rsi
	movq	$0, 96(%rsi)
	movq	-8(%rbp), %rsi
	movq	$0, 104(%rsi)
	movq	-8(%rbp), %rsi
	movl	128(%rsi), %edx
	movl	%edx, -24(%rbp)
.LBB313_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movq	112(%rcx), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB313_16
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-8(%rbp), %rax
	movq	112(%rax), %rax
	cmpl	$3, 20(%rax)
	jne	.LBB313_4
# BB#3:                                 # %cond.true
                                        #   in Loop: Header=BB313_1 Depth=1
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -44(%rbp)         # 4-byte Spill
	jmp	.LBB313_5
.LBB313_4:                              # %cond.false
                                        #   in Loop: Header=BB313_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -44(%rbp)         # 4-byte Spill
.LBB313_5:                              # %cond.end
                                        #   in Loop: Header=BB313_1 Depth=1
	movl	-44(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	-8(%rbp), %rdx
	movq	112(%rdx), %rdx
	movq	24(%rdx), %rdx
	shlq	$1, %rdx
	movq	composition_hash_table, %rdi
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	movq	%rdx, -64(%rbp)         # 8-byte Spill
	callq	XHASH_TABLE
	movq	72(%rax), %rdi
	callq	XVECTOR
	movq	-64(%rbp), %rcx         # 8-byte Reload
	movq	8(%rax,%rcx,8), %rdi
	callq	XVECTOR
	movq	-56(%rbp), %rcx         # 8-byte Reload
	movq	8(%rax,%rcx,8), %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movl	%esi, -36(%rbp)
	cmpl	$9, -36(%rbp)
	je	.LBB313_14
# BB#6:                                 # %if.then
                                        #   in Loop: Header=BB313_1 Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	264(%rcx), %rsi
	movl	-36(%rbp), %edx
	movl	%edx, -68(%rbp)         # 4-byte Spill
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	$-1, %rcx
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movl	-68(%rbp), %edx         # 4-byte Reload
	movq	%rax, %r8
	callq	face_for_char
	movl	$1, %r8d
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rdi
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	movq	-8(%rbp), %rcx
	movq	80(%rcx), %rcx
	movslq	-24(%rbp), %r9
	shlq	$1, %r9
	addq	%r9, %rcx
	callq	get_char_face_and_encoding
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB313_13
# BB#7:                                 # %if.then.17
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	jne	.LBB313_9
# BB#8:                                 # %if.then.20
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	224(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	jmp	.LBB313_12
.LBB313_9:                              # %if.else
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	cmpq	-32(%rbp), %rax
	je	.LBB313_11
# BB#10:                                # %if.then.28
	jmp	.LBB313_16
.LBB313_11:                             # %if.end
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_12
.LBB313_12:                             # %if.end.29
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_13
.LBB313_13:                             # %if.end.30
                                        #   in Loop: Header=BB313_1 Depth=1
	jmp	.LBB313_14
.LBB313_14:                             # %if.end.31
                                        #   in Loop: Header=BB313_1 Depth=1
	movq	-8(%rbp), %rax
	movl	88(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 88(%rax)
# BB#15:                                # %for.inc
                                        #   in Loop: Header=BB313_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB313_1
.LBB313_16:                             # %for.end
	movl	-24(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 132(%rcx)
	movq	-8(%rbp), %rcx
	cmpq	$0, 96(%rcx)
	jne	.LBB313_18
# BB#17:                                # %if.then.36
	movq	-16(%rbp), %rax
	movq	264(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	224(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
.LBB313_18:                             # %if.end.42
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movswl	16(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 12(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	jne	.LBB313_20
# BB#19:                                # %if.then.47
	movq	-8(%rbp), %rax
	movb	136(%rax), %cl
	andb	$-5, %cl
	orb	$4, %cl
	movb	%cl, 136(%rax)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
.LBB313_20:                             # %if.end.54
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movswl	22(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	8(%rax), %ecx
	movl	%ecx, 8(%rax)
	movq	-8(%rbp), %rax
	movl	132(%rax), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end313:
	.size	fill_composite_glyph_string, .Lfunc_end313-fill_composite_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	fill_stretch_glyph_string,@function
fill_stretch_glyph_string:              # @fill_stretch_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp970:
	.cfi_def_cfa_offset 16
.Ltmp971:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp972:
	.cfi_def_cfa_register %rbp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %rcx
	movq	64(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movslq	-12(%rbp), %rdi
	imulq	$48, %rdi, %rdi
	addq	%rdi, %rcx
	movq	%rcx, -24(%rbp)
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	movq	(%rdi,%rcx,8), %rcx
	movslq	-16(%rbp), %rdi
	imulq	$48, %rdi, %rdi
	addq	%rdi, %rcx
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rcx
	movl	28(%rcx), %edx
	andl	$1048575, %edx          # imm = 0xFFFFF
	movl	%edx, -40(%rbp)
	testb	$1, %al
	jne	.LBB314_1
	jmp	.LBB314_2
.LBB314_1:                              # %cond.true
	movl	-40(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB314_3
	jmp	.LBB314_4
.LBB314_2:                              # %cond.false
	movslq	-40(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB314_4
.LBB314_3:                              # %cond.true.18
	movslq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jmp	.LBB314_5
.LBB314_4:                              # %cond.false.23
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	jmp	.LBB314_5
.LBB314_5:                              # %cond.end
	movq	-48(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	224(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-24(%rbp), %rax
	movswl	16(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$1, 88(%rax)
	movq	-24(%rbp), %rax
	movswl	22(%rax), %edx
	movl	%edx, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
.LBB314_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -49(%rbp)          # 1-byte Spill
	jae	.LBB314_10
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB314_6 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$4, %eax
	movb	%cl, -49(%rbp)          # 1-byte Spill
	jne	.LBB314_10
# BB#8:                                 # %land.lhs.true.35
                                        #   in Loop: Header=BB314_6 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movswl	22(%rdx), %eax
	cmpl	-36(%rbp), %eax
	movb	%cl, -49(%rbp)          # 1-byte Spill
	jne	.LBB314_10
# BB#9:                                 # %land.rhs
                                        #   in Loop: Header=BB314_6 Depth=1
	movq	-24(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	cmpl	-40(%rbp), %ecx
	sete	%dl
	movb	%dl, -49(%rbp)          # 1-byte Spill
.LBB314_10:                             # %land.end
                                        #   in Loop: Header=BB314_6 Depth=1
	movb	-49(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB314_11
	jmp	.LBB314_13
.LBB314_11:                             # %for.body
                                        #   in Loop: Header=BB314_6 Depth=1
	movq	-24(%rbp), %rax
	movswl	16(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	12(%rax), %ecx
	movl	%ecx, 12(%rax)
# BB#12:                                # %for.inc
                                        #   in Loop: Header=BB314_6 Depth=1
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB314_6
.LBB314_13:                             # %for.end
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rdx
	addl	8(%rdx), %eax
	movl	%eax, 8(%rdx)
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movslq	72(%rsi), %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	movq	(%rdi,%rsi,8), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %r8d
	movl	%r8d, %eax
	popq	%rbp
	retq
.Lfunc_end314:
	.size	fill_stretch_glyph_string, .Lfunc_end314-fill_stretch_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	fill_image_glyph_string,@function
fill_image_glyph_string:                # @fill_image_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp973:
	.cfi_def_cfa_offset 16
.Ltmp974:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp975:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	152(%rdi), %rdi
	cmpl	$0, 40(%rdi)
	jl	.LBB315_3
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movslq	40(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jge	.LBB315_3
# BB#2:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movslq	40(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	376(%rcx), %rcx
	movq	80(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -16(%rbp)         # 8-byte Spill
	jmp	.LBB315_4
.LBB315_3:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -16(%rbp)         # 8-byte Spill
	jmp	.LBB315_4
.LBB315_4:                              # %cond.end
	movq	-16(%rbp), %rax         # 8-byte Reload
	movb	$1, %cl
	movq	-8(%rbp), %rdx
	movq	%rax, 160(%rdx)
	movq	-8(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	movq	32(%rdx), %rdx
	movq	%rdx, 176(%rax)
	testb	$1, %cl
	jne	.LBB315_5
	jmp	.LBB315_6
.LBB315_5:                              # %cond.true.15
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	addl	$0, %ecx
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	160(%rax), %rax
	movl	32(%rax), %edx
	addl	$0, %edx
	cmpl	%edx, %ecx
	jb	.LBB315_7
	jmp	.LBB315_8
.LBB315_6:                              # %cond.false.22
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	movl	%ecx, %ecx
	movl	%ecx, %eax
	addq	$0, %rax
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	movq	160(%rdx), %rdx
	movslq	32(%rdx), %rdx
	addq	$0, %rdx
	cmpq	%rdx, %rax
	jae	.LBB315_8
.LBB315_7:                              # %cond.true.36
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-8(%rbp), %rdx
	movq	32(%rdx), %rdx
	movq	160(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rax,8), %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jmp	.LBB315_9
.LBB315_8:                              # %cond.false.45
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -24(%rbp)         # 8-byte Spill
	jmp	.LBB315_9
.LBB315_9:                              # %cond.end.46
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	224(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movswl	16(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	movswl	22(%rax), %edx
	movq	-8(%rbp), %rax
	addl	8(%rax), %edx
	movl	%edx, 8(%rax)
	popq	%rbp
	retq
.Lfunc_end315:
	.size	fill_image_glyph_string, .Lfunc_end315-fill_image_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	fill_glyphless_glyph_string,@function
fill_glyphless_glyph_string:            # @fill_glyphless_glyph_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp976:
	.cfi_def_cfa_offset 16
.Ltmp977:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp978:
	.cfi_def_cfa_register %rbp
	movb	$1, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	-24(%rbp), %ecx
	movq	-8(%rbp), %rdi
	movb	%cl, %r9b
	movb	136(%rdi), %r10b
	andb	$7, %r9b
	shlb	$4, %r9b
	andb	$-113, %r10b
	orb	%r9b, %r10b
	movb	%r10b, 136(%rdi)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %r11
	movq	64(%r11), %r11
	movq	(%r11,%rdi,8), %rdi
	movslq	-16(%rbp), %r11
	imulq	$48, %r11, %r11
	addq	%r11, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %r11
	movq	64(%r11), %r11
	movq	(%r11,%rdi,8), %rdi
	movslq	-20(%rbp), %r11
	imulq	$48, %r11, %r11
	addq	%r11, %rdi
	movq	%rdi, -40(%rbp)
	movq	-32(%rbp), %rdi
	movswl	22(%rdi), %ecx
	movl	%ecx, -44(%rbp)
	testb	$1, %al
	jne	.LBB316_1
	jmp	.LBB316_2
.LBB316_1:                              # %cond.true
	movl	-12(%rbp), %eax
	addl	$0, %eax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movl	32(%rcx), %edx
	addl	$0, %edx
	cmpl	%edx, %eax
	jb	.LBB316_3
	jmp	.LBB316_4
.LBB316_2:                              # %cond.false
	movslq	-12(%rbp), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movslq	32(%rcx), %rcx
	addq	$0, %rcx
	cmpq	%rcx, %rax
	jae	.LBB316_4
.LBB316_3:                              # %cond.true.20
	movslq	-12(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	32(%rcx), %rcx
	movq	160(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB316_5
.LBB316_4:                              # %cond.false.25
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	jmp	.LBB316_5
.LBB316_5:                              # %cond.end
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 96(%rcx)
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	cmpq	$0, 224(%rax)
	je	.LBB316_7
# BB#6:                                 # %cond.true.27
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	224(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB316_8
.LBB316_7:                              # %cond.false.30
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	384(%rax), %rax
	movq	232(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB316_8:                              # %cond.end.33
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 104(%rcx)
	movq	-8(%rbp), %rax
	movl	$1, 88(%rax)
	movq	-32(%rbp), %rax
	movswl	16(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
.LBB316_9:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	cmpq	-40(%rbp), %rdx
	movb	%cl, -65(%rbp)          # 1-byte Spill
	jae	.LBB316_13
# BB#10:                                # %land.lhs.true
                                        #   in Loop: Header=BB316_9 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movl	24(%rdx), %eax
	andl	$7, %eax
	cmpl	$2, %eax
	movb	%cl, -65(%rbp)          # 1-byte Spill
	jne	.LBB316_13
# BB#11:                                # %land.lhs.true.43
                                        #   in Loop: Header=BB316_9 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movswl	22(%rdx), %eax
	cmpl	-44(%rbp), %eax
	movb	%cl, -65(%rbp)          # 1-byte Spill
	jne	.LBB316_13
# BB#12:                                # %land.rhs
                                        #   in Loop: Header=BB316_9 Depth=1
	movq	-32(%rbp), %rax
	movl	28(%rax), %ecx
	andl	$1048575, %ecx          # imm = 0xFFFFF
	cmpl	-12(%rbp), %ecx
	sete	%dl
	movb	%dl, -65(%rbp)          # 1-byte Spill
.LBB316_13:                             # %land.end
                                        #   in Loop: Header=BB316_9 Depth=1
	movb	-65(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB316_14
	jmp	.LBB316_15
.LBB316_14:                             # %while.body
                                        #   in Loop: Header=BB316_9 Depth=1
	movq	-8(%rbp), %rax
	movl	88(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 88(%rax)
	movq	-32(%rbp), %rax
	movswl	16(%rax), %ecx
	movq	-8(%rbp), %rax
	addl	12(%rax), %ecx
	movl	%ecx, 12(%rax)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB316_9
.LBB316_15:                             # %while.end
	movl	$48, %eax
	movl	%eax, %ecx
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rdx
	addl	8(%rdx), %eax
	movl	%eax, 8(%rdx)
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movslq	72(%rsi), %rsi
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	movq	(%rdi,%rsi,8), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %r8d
	movl	%r8d, %eax
	popq	%rbp
	retq
.Lfunc_end316:
	.size	fill_glyphless_glyph_string, .Lfunc_end316-fill_glyphless_glyph_string
	.cfi_endproc

	.align	16, 0x90
	.type	set_glyph_string_background_width,@function
set_glyph_string_background_width:      # @set_glyph_string_background_width
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp979:
	.cfi_def_cfa_offset 16
.Ltmp980:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp981:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movswl	32(%rax,%rdi,2), %esi
	cmpl	%esi, %edx
	jne	.LBB317_7
# BB#1:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	236(%rax), %rax
	shrq	$16, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB317_5
# BB#2:                                 # %land.lhs.true.4
	movq	-8(%rbp), %rax
	cmpl	$0, 92(%rax)
	je	.LBB317_6
# BB#3:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$4, 92(%rax)
	je	.LBB317_6
# BB#4:                                 # %lor.lhs.false.10
	movq	-8(%rbp), %rax
	cmpl	$5, 92(%rax)
	je	.LBB317_6
.LBB317_5:                              # %lor.lhs.false.14
	movq	-8(%rbp), %rax
	cmpl	$3, 92(%rax)
	jne	.LBB317_7
.LBB317_6:                              # %if.then
	movq	-8(%rbp), %rax
	movb	136(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 136(%rax)
.LBB317_7:                              # %if.end
	movq	-8(%rbp), %rax
	movb	136(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB317_9
# BB#8:                                 # %if.then.24
	movl	-16(%rbp), %eax
	movq	-8(%rbp), %rcx
	subl	(%rcx), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	jmp	.LBB317_10
.LBB317_9:                              # %if.else
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 16(%rax)
.LBB317_10:                             # %if.end.26
	popq	%rbp
	retq
.Lfunc_end317:
	.size	set_glyph_string_background_width, .Lfunc_end317-set_glyph_string_background_width
	.cfi_endproc

	.align	16, 0x90
	.type	left_overwritten,@function
left_overwritten:                       # @left_overwritten
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp982:
	.cfi_def_cfa_offset 16
.Ltmp983:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp984:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 24(%rdi)
	je	.LBB318_8
# BB#1:                                 # %if.then
	movl	$48, %eax
	movl	%eax, %ecx
	movl	$0, -16(%rbp)
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	movq	(%rsi,%rdx,8), %rdx
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	movq	-32(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %edi
	movl	%edi, -36(%rbp)
	movl	-36(%rbp), %edi
	subl	$1, %edi
	movl	%edi, -20(%rbp)
.LBB318_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$0, -20(%rbp)
	movb	%cl, -37(%rbp)          # 1-byte Spill
	jl	.LBB318_4
# BB#3:                                 # %land.rhs
                                        #   in Loop: Header=BB318_2 Depth=1
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	-8(%rbp), %rdx
	subl	24(%rdx), %eax
	cmpl	%eax, %ecx
	setg	%sil
	movb	%sil, -37(%rbp)         # 1-byte Spill
.LBB318_4:                              # %land.end
                                        #   in Loop: Header=BB318_2 Depth=1
	movb	-37(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB318_5
	jmp	.LBB318_7
.LBB318_5:                              # %for.body
                                        #   in Loop: Header=BB318_2 Depth=1
	movslq	-20(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	-32(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-16(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -16(%rbp)
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB318_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_2
.LBB318_7:                              # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_9
.LBB318_8:                              # %if.else
	movl	$-1, -12(%rbp)
.LBB318_9:                              # %if.end
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end318:
	.size	left_overwritten, .Lfunc_end318-left_overwritten
	.cfi_endproc

	.align	16, 0x90
	.type	compute_overhangs_and_x,@function
compute_overhangs_and_x:                # @compute_overhangs_and_x
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp985:
	.cfi_def_cfa_offset 16
.Ltmp986:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp987:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	andb	$1, %al
	movb	%al, -13(%rbp)
	testb	$1, -13(%rbp)
	je	.LBB319_7
# BB#1:                                 # %if.then
	jmp	.LBB319_2
.LBB319_2:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB319_6
# BB#3:                                 # %while.body
                                        #   in Loop: Header=BB319_2 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	cmpq	$0, 128(%rax)
	je	.LBB319_5
# BB#4:                                 # %if.then.3
                                        #   in Loop: Header=BB319_2 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
.LBB319_5:                              # %if.end
                                        #   in Loop: Header=BB319_2 Depth=1
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	movl	-12(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movq	240(%rax), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB319_2
.LBB319_6:                              # %while.end
	jmp	.LBB319_13
.LBB319_7:                              # %if.else
	jmp	.LBB319_8
.LBB319_8:                              # %while.cond.9
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -8(%rbp)
	je	.LBB319_12
# BB#9:                                 # %while.body.11
                                        #   in Loop: Header=BB319_8 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	cmpq	$0, 128(%rax)
	je	.LBB319_11
# BB#10:                                # %if.then.17
                                        #   in Loop: Header=BB319_8 Depth=1
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	376(%rax), %rax
	movq	112(%rax), %rax
	movq	128(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
.LBB319_11:                             # %if.end.22
                                        #   in Loop: Header=BB319_8 Depth=1
	movl	-12(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rcx
	movq	232(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	jmp	.LBB319_8
.LBB319_12:                             # %while.end.25
	jmp	.LBB319_13
.LBB319_13:                             # %if.end.26
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end319:
	.size	compute_overhangs_and_x, .Lfunc_end319-compute_overhangs_and_x
	.cfi_endproc

	.align	16, 0x90
	.type	prepend_glyph_string_lists,@function
prepend_glyph_string_lists:             # @prepend_glyph_string_lists
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp988:
	.cfi_def_cfa_offset 16
.Ltmp989:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp990:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB320_5
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB320_3
# BB#2:                                 # %if.then.2
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 240(%rcx)
	jmp	.LBB320_4
.LBB320_3:                              # %if.else
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB320_4:                              # %if.end
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 232(%rcx)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB320_5:                              # %if.end.3
	popq	%rbp
	retq
.Lfunc_end320:
	.size	prepend_glyph_string_lists, .Lfunc_end320-prepend_glyph_string_lists
	.cfi_endproc

	.align	16, 0x90
	.type	left_overwriting,@function
left_overwriting:                       # @left_overwriting
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp991:
	.cfi_def_cfa_offset 16
.Ltmp992:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp993:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$48, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	movq	(%rdx,%rdi,8), %rdx
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	movq	-32(%rbp), %rdi
	subq	%rdi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movl	%eax, %esi
	movl	%esi, -36(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	-36(%rbp), %esi
	subl	$1, %esi
	movl	%esi, -12(%rbp)
.LBB321_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB321_6
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB321_1 Depth=1
	leaq	-40(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rax
	movq	-8(%rbp), %rsi
	movq	32(%rsi), %rsi
	movq	%rax, %rdi
	callq	x_get_glyph_overhangs
	movl	-20(%rbp), %r8d
	addl	-44(%rbp), %r8d
	cmpl	$0, %r8d
	jle	.LBB321_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB321_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB321_4:                              # %if.end
                                        #   in Loop: Header=BB321_1 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	-32(%rbp), %rax
	movswl	16(%rax), %ecx
	movl	-20(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -20(%rbp)
# BB#5:                                 # %for.inc
                                        #   in Loop: Header=BB321_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB321_1
.LBB321_6:                              # %for.end
	movl	-16(%rbp), %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end321:
	.size	left_overwriting, .Lfunc_end321-left_overwriting
	.cfi_endproc

	.align	16, 0x90
	.type	right_overwritten,@function
right_overwritten:                      # @right_overwritten
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp994:
	.cfi_def_cfa_offset 16
.Ltmp995:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp996:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	$-1, -12(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$0, 28(%rdi)
	je	.LBB322_11
# BB#1:                                 # %if.then
	movl	$48, %eax
	movl	%eax, %ecx
	movl	$0, -16(%rbp)
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	movq	-8(%rbp), %rsi
	movq	64(%rsi), %rsi
	movq	(%rsi,%rdx,8), %rdx
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	movq	-32(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movq	-8(%rbp), %rcx
	movq	152(%rcx), %rcx
	movl	24(%rcx), %edi
	andl	$7, %edi
	cmpl	$1, %edi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	jne	.LBB322_3
# BB#2:                                 # %cond.true
	movl	$1, %eax
	movl	%eax, -52(%rbp)         # 4-byte Spill
	jmp	.LBB322_4
.LBB322_3:                              # %cond.false
	movq	-8(%rbp), %rax
	movl	88(%rax), %ecx
	movl	%ecx, -52(%rbp)         # 4-byte Spill
.LBB322_4:                              # %cond.end
	movl	-52(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	-48(%rbp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movl	%edx, %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	movswl	32(%rdx,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB322_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-20(%rbp), %eax
	cmpl	-40(%rbp), %eax
	movb	%cl, -53(%rbp)          # 1-byte Spill
	jge	.LBB322_7
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB322_5 Depth=1
	movq	-8(%rbp), %rax
	movl	28(%rax), %ecx
	cmpl	-16(%rbp), %ecx
	setg	%dl
	movb	%dl, -53(%rbp)          # 1-byte Spill
.LBB322_7:                              # %land.end
                                        #   in Loop: Header=BB322_5 Depth=1
	movb	-53(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB322_8
	jmp	.LBB322_10
.LBB322_8:                              # %for.body
                                        #   in Loop: Header=BB322_5 Depth=1
	movslq	-20(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	-32(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-16(%rbp), %ecx
	movl	%ecx, -16(%rbp)
# BB#9:                                 # %for.inc
                                        #   in Loop: Header=BB322_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB322_5
.LBB322_10:                             # %for.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB322_11:                             # %if.end
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end322:
	.size	right_overwritten, .Lfunc_end322-right_overwritten
	.cfi_endproc

	.align	16, 0x90
	.type	append_glyph_string_lists,@function
append_glyph_string_lists:              # @append_glyph_string_lists
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp997:
	.cfi_def_cfa_offset 16
.Ltmp998:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp999:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB323_5
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB323_3
# BB#2:                                 # %if.then.2
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rax, 232(%rcx)
	jmp	.LBB323_4
.LBB323_3:                              # %if.else
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB323_4:                              # %if.end
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 240(%rcx)
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB323_5:                              # %if.end.3
	popq	%rbp
	retq
.Lfunc_end323:
	.size	append_glyph_string_lists, .Lfunc_end323-append_glyph_string_lists
	.cfi_endproc

	.align	16, 0x90
	.type	right_overwriting,@function
right_overwriting:                      # @right_overwriting
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1000:
	.cfi_def_cfa_offset 16
.Ltmp1001:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1002:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$48, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movslq	72(%rdi), %rdi
	movq	-8(%rbp), %rdx
	movq	64(%rdx), %rdx
	movswl	32(%rdx,%rdi,2), %eax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movq	64(%rdi), %rdi
	movq	(%rdi,%rdx,8), %rdx
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	152(%rdx), %rdx
	movq	-32(%rbp), %rdi
	subq	%rdi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	movq	-8(%rbp), %rcx
	movq	152(%rcx), %rcx
	movl	24(%rcx), %esi
	andl	$7, %esi
	cmpl	$1, %esi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jne	.LBB324_2
# BB#1:                                 # %cond.true
	movl	$1, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	jmp	.LBB324_3
.LBB324_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movl	88(%rax), %ecx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
.LBB324_3:                              # %cond.end
	movl	-60(%rbp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	-56(%rbp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movl	%edx, %eax
	movl	%eax, -36(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB324_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB324_9
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB324_4 Depth=1
	leaq	-40(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rax
	movq	-8(%rbp), %rsi
	movq	32(%rsi), %rsi
	movq	%rax, %rdi
	callq	x_get_glyph_overhangs
	movl	-20(%rbp), %r8d
	subl	-40(%rbp), %r8d
	cmpl	$0, %r8d
	jge	.LBB324_7
# BB#6:                                 # %if.then
                                        #   in Loop: Header=BB324_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB324_7:                              # %if.end
                                        #   in Loop: Header=BB324_4 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	-32(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-20(%rbp), %ecx
	movl	%ecx, -20(%rbp)
# BB#8:                                 # %for.inc
                                        #   in Loop: Header=BB324_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_4
.LBB324_9:                              # %for.end
	movl	-16(%rbp), %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end324:
	.size	right_overwriting, .Lfunc_end324-right_overwriting
	.cfi_endproc

	.align	16, 0x90
	.type	draw_row_with_mouse_face,@function
draw_row_with_mouse_face:               # @draw_row_with_mouse_face
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1003:
	.cfi_def_cfa_offset 16
.Ltmp1004:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1005:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -36(%rbp)
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$23, %rdx
	andq	$7, %rdx
	movl	%edx, %ecx
	cmpl	$2, %ecx
	jne	.LBB325_2
# BB#1:                                 # %if.then
	movl	$1, %ecx
	xorl	%eax, %eax
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdx
	movslq	-28(%rbp), %r8
	movslq	-32(%rbp), %r9
	movl	-36(%rbp), %r10d
	movl	%r10d, (%rsp)
	movl	$0, 8(%rsp)
	movl	%eax, -40(%rbp)         # 4-byte Spill
	callq	draw_glyphs
	movl	%eax, -44(%rbp)         # 4-byte Spill
.LBB325_2:                              # %if.end
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end325:
	.size	draw_row_with_mouse_face, .Lfunc_end325-draw_row_with_mouse_face
	.cfi_endproc

	.align	16, 0x90
	.type	rows_from_pos_range,@function
rows_from_pos_range:                    # @rows_from_pos_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1006:
	.cfi_def_cfa_offset 16
.Ltmp1007:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1008:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	236(%rcx), %rcx
	shrq	$20, %rcx
	andq	$1, %rcx
	testq	$1, %rcx
	je	.LBB326_2
# BB#1:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB326_3
.LBB326_2:                              # %cond.false
	movq	-8(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB326_3:                              # %cond.end
	movq	-136(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rdi
	callq	window_text_bottom_y
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rdi
	movq	$0, (%rdi)
	movq	-48(%rbp), %rdi
	movq	$0, (%rdi)
.LBB326_4:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-56(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -137(%rbp)         # 1-byte Spill
	jne	.LBB326_14
# BB#5:                                 # %land.rhs
                                        #   in Loop: Header=BB326_4 Depth=1
	movq	-56(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	movslq	24(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	%rcx, -160(%rbp)        # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB326_6
	jmp	.LBB326_12
.LBB326_6:                              # %cond.true.14
                                        #   in Loop: Header=BB326_4 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -161(%rbp)         # 1-byte Spill
	jne	.LBB326_11
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB326_4 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -161(%rbp)         # 1-byte Spill
	jne	.LBB326_11
# BB#8:                                 # %land.lhs.true.22
                                        #   in Loop: Header=BB326_4 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -161(%rbp)         # 1-byte Spill
	je	.LBB326_11
# BB#9:                                 # %land.lhs.true.27
                                        #   in Loop: Header=BB326_4 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-176(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -161(%rbp)         # 1-byte Spill
	je	.LBB326_11
# BB#10:                                # %land.rhs.31
                                        #   in Loop: Header=BB326_4 Depth=1
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -161(%rbp)         # 1-byte Spill
.LBB326_11:                             # %land.end
                                        #   in Loop: Header=BB326_4 Depth=1
	movb	-161(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -180(%rbp)        # 4-byte Spill
	jmp	.LBB326_13
.LBB326_12:                             # %cond.false.35
                                        #   in Loop: Header=BB326_4 Depth=1
	xorl	%eax, %eax
	movl	%eax, -180(%rbp)        # 4-byte Spill
	jmp	.LBB326_13
.LBB326_13:                             # %cond.end.36
                                        #   in Loop: Header=BB326_4 Depth=1
	movl	-180(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-160(%rbp), %rdi        # 8-byte Reload
	addq	%rdx, %rdi
	movq	-152(%rbp), %rdx        # 8-byte Reload
	cmpq	%rdi, %rdx
	setb	%r8b
	movb	%r8b, -137(%rbp)        # 1-byte Spill
.LBB326_14:                             # %land.end.42
                                        #   in Loop: Header=BB326_4 Depth=1
	movb	-137(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB326_15
	jmp	.LBB326_16
.LBB326_15:                             # %while.body
                                        #   in Loop: Header=BB326_4 Depth=1
	movq	-56(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -56(%rbp)
	jmp	.LBB326_4
.LBB326_16:                             # %while.end
	movq	-56(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB326_17:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_35 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -181(%rbp)         # 1-byte Spill
	je	.LBB326_19
# BB#18:                                # %land.rhs.49
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-60(%rbp), %ecx
	setle	%dl
	movb	%dl, -181(%rbp)         # 1-byte Spill
.LBB326_19:                             # %land.end.51
                                        #   in Loop: Header=BB326_17 Depth=1
	movb	-181(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB326_20
	jmp	.LBB326_48
.LBB326_20:                             # %for.body
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jge	.LBB326_22
# BB#21:                                # %land.lhs.true.54
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	176(%rcx), %rax
	jl	.LBB326_46
.LBB326_22:                             # %lor.lhs.false
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB326_28
# BB#23:                                # %lor.lhs.false.60
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-16(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB326_34
# BB#24:                                # %land.lhs.true.64
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_34
# BB#25:                                # %land.lhs.true.69
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB326_34
# BB#26:                                # %lor.lhs.false.72
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB326_34
# BB#27:                                # %lor.lhs.false.75
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_34
.LBB326_28:                             # %land.lhs.true.80
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB326_46
# BB#29:                                # %lor.lhs.false.84
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB326_34
# BB#30:                                # %land.lhs.true.88
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_34
# BB#31:                                # %land.lhs.true.94
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB326_34
# BB#32:                                # %lor.lhs.false.98
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB326_34
# BB#33:                                # %lor.lhs.false.102
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB326_46
.LBB326_34:                             # %if.then
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
.LBB326_35:                             # %while.cond.111
                                        #   Parent Loop BB326_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-80(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jae	.LBB326_43
# BB#36:                                # %while.body.114
                                        #   in Loop: Header=BB326_35 Depth=2
	movq	-80(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB326_38
# BB#37:                                # %lor.lhs.false.117
                                        #   in Loop: Header=BB326_35 Depth=2
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB326_40
.LBB326_38:                             # %land.lhs.true.122
                                        #   in Loop: Header=BB326_35 Depth=2
	movq	-16(%rbp), %rax
	movq	-80(%rbp), %rcx
	cmpq	(%rcx), %rax
	jg	.LBB326_40
# BB#39:                                # %land.lhs.true.126
                                        #   in Loop: Header=BB326_35 Depth=2
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-24(%rbp), %rax
	jl	.LBB326_41
.LBB326_40:                             # %lor.lhs.false.130
                                        #   in Loop: Header=BB326_35 Depth=2
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-32(%rbp), %rax
	jne	.LBB326_42
.LBB326_41:                             # %if.then.134
                                        #   in Loop: Header=BB326_35 Depth=2
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB326_42:                             # %if.end
                                        #   in Loop: Header=BB326_35 Depth=2
	movq	-80(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB326_35
.LBB326_43:                             # %while.end.136
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-40(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB326_45
# BB#44:                                # %if.then.138
	jmp	.LBB326_48
.LBB326_45:                             # %if.end.139
                                        #   in Loop: Header=BB326_17 Depth=1
	jmp	.LBB326_46
.LBB326_46:                             # %if.end.140
                                        #   in Loop: Header=BB326_17 Depth=1
	jmp	.LBB326_47
.LBB326_47:                             # %for.inc
                                        #   in Loop: Header=BB326_17 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
	jmp	.LBB326_17
.LBB326_48:                             # %for.end
	movq	-40(%rbp), %rax
	cmpq	$0, (%rax)
	jne	.LBB326_53
# BB#49:                                # %land.lhs.true.143
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB326_52
# BB#50:                                # %land.lhs.true.150
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	cmpl	-60(%rbp), %ecx
	jge	.LBB326_52
# BB#51:                                # %land.lhs.true.154
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-60(%rbp), %ecx
	jg	.LBB326_53
.LBB326_52:                             # %if.then.160
	movq	-56(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB326_53:                             # %if.end.161
	jmp	.LBB326_54
.LBB326_54:                             # %for.cond.162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB326_83 Depth 2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$10, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -193(%rbp)         # 1-byte Spill
	je	.LBB326_56
# BB#55:                                # %land.rhs.169
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-72(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-72(%rbp), %rax
	addl	60(%rax), %ecx
	cmpl	-60(%rbp), %ecx
	setle	%dl
	movb	%dl, -193(%rbp)         # 1-byte Spill
.LBB326_56:                             # %land.end.175
                                        #   in Loop: Header=BB326_54 Depth=1
	movb	-193(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB326_57
	jmp	.LBB326_107
.LBB326_57:                             # %for.body.177
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	176(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB326_81
# BB#58:                                # %lor.lhs.false.186
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	192(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	-8(%rbp), %rdx
	movq	192(%rdx), %rdx
	movslq	24(%rdx), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movq	80(%rdx), %rdi
	movq	%rax, -208(%rbp)        # 8-byte Spill
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB326_59
	jmp	.LBB326_65
.LBB326_59:                             # %cond.true.196
                                        #   in Loop: Header=BB326_54 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -217(%rbp)         # 1-byte Spill
	jne	.LBB326_64
# BB#60:                                # %land.lhs.true.201
                                        #   in Loop: Header=BB326_54 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%cl, -217(%rbp)         # 1-byte Spill
	jne	.LBB326_64
# BB#61:                                # %land.lhs.true.207
                                        #   in Loop: Header=BB326_54 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	8(%rdx), %rdx
	subq	$5, %rdx
	movq	208(%rdx), %rdx
	shrq	$14, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	movb	%cl, -217(%rbp)         # 1-byte Spill
	je	.LBB326_64
# BB#62:                                # %land.lhs.true.216
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movb	%dil, %cl
	movq	-232(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	movb	%cl, -217(%rbp)         # 1-byte Spill
	je	.LBB326_64
# BB#63:                                # %land.rhs.223
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-8(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	setg	%dl
	movb	%dl, -217(%rbp)         # 1-byte Spill
.LBB326_64:                             # %land.end.230
                                        #   in Loop: Header=BB326_54 Depth=1
	movb	-217(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -236(%rbp)        # 4-byte Spill
	jmp	.LBB326_66
.LBB326_65:                             # %cond.false.232
                                        #   in Loop: Header=BB326_54 Depth=1
	xorl	%eax, %eax
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB326_66
.LBB326_66:                             # %cond.end.233
                                        #   in Loop: Header=BB326_54 Depth=1
	movl	-236(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	xorl	%ecx, %ecx
	movl	$1, %esi
	cmpl	$0, %eax
	cmovnel	%esi, %ecx
	movslq	%ecx, %rdi
	subq	%rdi, %rdx
	shlq	$8, %rdx
	movq	-216(%rbp), %rdi        # 8-byte Reload
	addq	%rdx, %rdi
	movq	-208(%rbp), %rdx        # 8-byte Reload
	cmpq	%rdi, %rdx
	jae	.LBB326_81
# BB#67:                                # %lor.lhs.false.242
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jge	.LBB326_69
# BB#68:                                # %land.lhs.true.245
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-24(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jl	.LBB326_81
.LBB326_69:                             # %lor.lhs.false.248
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-16(%rbp), %rax
	movq	-96(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB326_75
# BB#70:                                # %lor.lhs.false.253
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-16(%rbp), %rax
	movq	-96(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB326_82
# BB#71:                                # %land.lhs.true.258
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_82
# BB#72:                                # %land.lhs.true.264
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB326_82
# BB#73:                                # %lor.lhs.false.269
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB326_82
# BB#74:                                # %lor.lhs.false.274
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_82
.LBB326_75:                             # %land.lhs.true.281
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-24(%rbp), %rax
	movq	-96(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jg	.LBB326_81
# BB#76:                                # %lor.lhs.false.286
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-24(%rbp), %rax
	movq	-96(%rbp), %rcx
	cmpq	192(%rcx), %rax
	jne	.LBB326_82
# BB#77:                                # %land.lhs.true.291
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_82
# BB#78:                                # %land.lhs.true.297
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$0, 168(%rax)
	jg	.LBB326_82
# BB#79:                                # %lor.lhs.false.302
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	cmpq	$0, 144(%rax)
	jge	.LBB326_82
# BB#80:                                # %lor.lhs.false.307
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$22, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_82
.LBB326_81:                             # %if.then.314
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB326_107
.LBB326_82:                             # %if.else
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-112(%rbp), %rax
	movq	-96(%rbp), %rcx
	movswl	34(%rcx), %edx
	movslq	%edx, %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
.LBB326_83:                             # %while.cond.324
                                        #   Parent Loop BB326_54 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jae	.LBB326_99
# BB#84:                                # %while.body.327
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB326_86
# BB#85:                                # %lor.lhs.false.331
                                        #   in Loop: Header=BB326_83 Depth=2
	xorl	%edi, %edi
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB326_96
.LBB326_86:                             # %land.lhs.true.336
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-16(%rbp), %rax
	movq	-112(%rbp), %rcx
	cmpq	(%rcx), %rax
	jg	.LBB326_88
# BB#87:                                # %land.lhs.true.340
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-24(%rbp), %rax
	jl	.LBB326_97
.LBB326_88:                             # %lor.lhs.false.344
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_90
# BB#89:                                # %land.lhs.true.349
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.LBB326_92
.LBB326_90:                             # %lor.lhs.false.352
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$34, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB326_96
# BB#91:                                # %land.lhs.true.359
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	movq	-128(%rbp), %rcx
	addq	$-48, %rcx
	cmpq	%rcx, %rax
	jne	.LBB326_96
.LBB326_92:                             # %land.lhs.true.363
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB326_97
# BB#93:                                # %lor.lhs.false.367
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	cmpq	$-1, (%rax)
	jne	.LBB326_96
# BB#94:                                # %land.lhs.true.371
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-72(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB326_96
# BB#95:                                # %land.lhs.true.377
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-104(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB326_97
.LBB326_96:                             # %lor.lhs.false.380
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	-32(%rbp), %rax
	jne	.LBB326_98
.LBB326_97:                             # %if.then.384
                                        #   in Loop: Header=BB326_54 Depth=1
	jmp	.LBB326_99
.LBB326_98:                             # %if.end.385
                                        #   in Loop: Header=BB326_83 Depth=2
	movq	-112(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB326_83
.LBB326_99:                             # %while.end.387
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.LBB326_101
# BB#100:                               # %if.then.390
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB326_107
.LBB326_101:                            # %if.else.391
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-96(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$15, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB326_103
# BB#102:                               # %if.then.397
	movq	-96(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB326_107
.LBB326_103:                            # %if.end.398
                                        #   in Loop: Header=BB326_54 Depth=1
	jmp	.LBB326_104
.LBB326_104:                            # %if.end.399
                                        #   in Loop: Header=BB326_54 Depth=1
	jmp	.LBB326_105
.LBB326_105:                            # %if.end.400
                                        #   in Loop: Header=BB326_54 Depth=1
	jmp	.LBB326_106
.LBB326_106:                            # %for.inc.401
                                        #   in Loop: Header=BB326_54 Depth=1
	movq	-72(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -72(%rbp)
	jmp	.LBB326_54
.LBB326_107:                            # %for.end.403
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	retq
.Lfunc_end326:
	.size	rows_from_pos_range, .Lfunc_end326-rows_from_pos_range
	.cfi_endproc

	.align	16, 0x90
	.type	expose_window,@function
expose_window:                          # @expose_window
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1009:
	.cfi_def_cfa_offset 16
.Ltmp1010:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1011:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	8(%rsi), %rsi
	subq	$5, %rsi
	movq	%rsi, -32(%rbp)
	movb	$0, -49(%rbp)
	movq	-16(%rbp), %rsi
	cmpq	$0, 192(%rsi)
	jne	.LBB327_2
# BB#1:                                 # %if.then
	movb	$0, -1(%rbp)
	jmp	.LBB327_75
.LBB327_2:                              # %if.end
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$10, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB327_4
# BB#3:                                 # %if.then.1
	movb	$1, frame_garbaged
	movq	-32(%rbp), %rdi
	callq	fset_redisplay
	movq	-32(%rbp), %rdi
	movq	208(%rdi), %rax
	andq	$-8193, %rax            # imm = 0xFFFFFFFFFFFFDFFF
	orq	$8192, %rax             # imm = 0x2000
	movq	%rax, 208(%rdi)
	movb	$0, -1(%rbp)
	jmp	.LBB327_75
.LBB327_4:                              # %if.end.4
	leaq	-40(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	240(%rax), %ecx
	movw	%cx, %di
	movw	%di, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	332(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	244(%rax), %ecx
	movw	%cx, %di
	movw	%di, -38(%rbp)
	movq	-16(%rbp), %rax
	movl	256(%rax), %ecx
	movw	%cx, %di
	movw	%di, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movw	%cx, %di
	movw	%di, -34(%rbp)
	movq	-24(%rbp), %rdi
	callq	x_intersect_rectangles
	testb	$1, %al
	jne	.LBB327_5
	jmp	.LBB327_74
.LBB327_5:                              # %if.then.14
	movq	-16(%rbp), %rdi
	callq	window_text_bottom_y
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movl	332(%rdi), %eax
	movq	-16(%rbp), %rdi
	addl	240(%rdi), %eax
	movswl	-48(%rbp), %ecx
	subl	%eax, %ecx
	movw	%cx, %si
	movw	%si, -48(%rbp)
	movq	-16(%rbp), %rdi
	movq	8(%rdi), %rdi
	subq	$5, %rdi
	movl	332(%rdi), %eax
	movq	-16(%rbp), %rdi
	addl	244(%rdi), %eax
	movswl	-46(%rbp), %ecx
	subl	%eax, %ecx
	movw	%cx, %si
	movw	%si, -46(%rbp)
	movq	-16(%rbp), %rdi
	movw	468(%rdi), %si
	shrw	$11, %si
	andw	$1, %si
	testw	$1, %si
	movb	%dl, -97(%rbp)          # 1-byte Spill
	jne	.LBB327_7
# BB#6:                                 # %land.rhs
	leaq	-48(%rbp), %rsi
	movq	-16(%rbp), %rdi
	callq	phys_cursor_in_rect_p
	movb	%al, -97(%rbp)          # 1-byte Spill
.LBB327_7:                              # %land.end
	movb	-97(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -81(%rbp)
	testb	$1, -81(%rbp)
	je	.LBB327_9
# BB#8:                                 # %if.then.40
	movq	-16(%rbp), %rdi
	callq	x_clear_cursor
.LBB327_9:                              # %if.end.41
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -82(%rbp)
	movswl	-46(%rbp), %esi
	movzwl	-42(%rbp), %edi
	addl	%edi, %esi
	movl	%esi, -88(%rbp)
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB327_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB327_40
# BB#11:                                # %for.body
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -92(%rbp)
	movq	-64(%rbp), %rax
	movl	48(%rax), %ecx
	movq	-64(%rbp), %rax
	addl	60(%rax), %ecx
	movl	%ecx, -96(%rbp)
	movl	-92(%rbp), %ecx
	movswl	-46(%rbp), %edx
	cmpl	%edx, %ecx
	jl	.LBB327_13
# BB#12:                                # %land.lhs.true
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jl	.LBB327_19
.LBB327_13:                             # %lor.lhs.false
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-96(%rbp), %eax
	movswl	-46(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB327_15
# BB#14:                                # %land.lhs.true.72
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jl	.LBB327_19
.LBB327_15:                             # %lor.lhs.false.75
                                        #   in Loop: Header=BB327_10 Depth=1
	movswl	-46(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jl	.LBB327_17
# BB#16:                                # %land.lhs.true.80
                                        #   in Loop: Header=BB327_10 Depth=1
	movswl	-46(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jl	.LBB327_19
.LBB327_17:                             # %lor.lhs.false.85
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jle	.LBB327_27
# BB#18:                                # %land.lhs.true.88
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB327_27
.LBB327_19:                             # %if.then.91
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$24, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB327_24
# BB#20:                                # %land.lhs.true.97
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$20, %rax
	andq	$1, %rax
	testq	$1, %rax
	jne	.LBB327_24
# BB#21:                                # %if.then.102
                                        #   in Loop: Header=BB327_10 Depth=1
	cmpq	$0, -72(%rbp)
	jne	.LBB327_23
# BB#22:                                # %if.then.105
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB327_23:                             # %if.end.106
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB327_24:                             # %if.end.107
                                        #   in Loop: Header=BB327_10 Depth=1
	leaq	-48(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, 248(%rcx)
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	expose_line
	testb	$1, %al
	jne	.LBB327_25
	jmp	.LBB327_26
.LBB327_25:                             # %if.then.109
                                        #   in Loop: Header=BB327_10 Depth=1
	movb	$1, -49(%rbp)
.LBB327_26:                             # %if.end.110
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	$0, 248(%rax)
	jmp	.LBB327_36
.LBB327_27:                             # %if.else
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$24, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB327_35
# BB#28:                                # %if.then.117
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-92(%rbp), %eax
	movswl	-46(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB327_30
# BB#29:                                # %cond.true
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-92(%rbp), %eax
	movq	-64(%rbp), %rcx
	addl	68(%rcx), %eax
	movswl	-46(%rbp), %edx
	cmpl	%edx, %eax
	jg	.LBB327_31
	jmp	.LBB327_34
.LBB327_30:                             # %cond.false
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-92(%rbp), %eax
	movq	-64(%rbp), %rcx
	addl	56(%rcx), %eax
	movq	-64(%rbp), %rcx
	subl	64(%rcx), %eax
	movswl	-46(%rbp), %edx
	movzwl	-42(%rbp), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jge	.LBB327_34
.LBB327_31:                             # %if.then.136
                                        #   in Loop: Header=BB327_10 Depth=1
	cmpq	$0, -72(%rbp)
	jne	.LBB327_33
# BB#32:                                # %if.then.139
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB327_33:                             # %if.end.140
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB327_34:                             # %if.end.141
                                        #   in Loop: Header=BB327_10 Depth=1
	jmp	.LBB327_35
.LBB327_35:                             # %if.end.142
                                        #   in Loop: Header=BB327_10 Depth=1
	jmp	.LBB327_36
.LBB327_36:                             # %if.end.143
                                        #   in Loop: Header=BB327_10 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl	.LBB327_38
# BB#37:                                # %if.then.146
	jmp	.LBB327_40
.LBB327_38:                             # %if.end.147
                                        #   in Loop: Header=BB327_10 Depth=1
	jmp	.LBB327_39
.LBB327_39:                             # %for.inc
                                        #   in Loop: Header=BB327_10 Depth=1
	movq	-64(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -64(%rbp)
	jmp	.LBB327_10
.LBB327_40:                             # %for.end
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB327_41
	jmp	.LBB327_46
.LBB327_41:                             # %cond.true.150
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB327_52
# BB#42:                                # %land.lhs.true.154
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB327_52
# BB#43:                                # %land.lhs.true.160
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	208(%rax), %rax
	shrq	$14, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB327_52
# BB#44:                                # %land.lhs.true.168
	movq	-16(%rbp), %rax
	movq	80(%rax), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	96(%rax), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB327_52
# BB#45:                                # %land.lhs.true.174
	movq	-16(%rbp), %rax
	movl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	368(%rax), %ecx
	jg	.LBB327_47
	jmp	.LBB327_52
.LBB327_46:                             # %cond.false.180
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB327_47
	jmp	.LBB327_52
.LBB327_47:                             # %land.lhs.true.181
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rcx
	movslq	24(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	addq	$-256, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB327_52
# BB#48:                                # %land.lhs.true.192
	movq	-64(%rbp), %rax
	movl	48(%rax), %ecx
	cmpl	-88(%rbp), %ecx
	jge	.LBB327_52
# BB#49:                                # %if.then.196
	leaq	-48(%rbp), %rdx
	movq	-16(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	expose_line
	testb	$1, %al
	jne	.LBB327_50
	jmp	.LBB327_51
.LBB327_50:                             # %if.then.198
	movb	$1, -49(%rbp)
.LBB327_51:                             # %if.end.199
	jmp	.LBB327_52
.LBB327_52:                             # %if.end.200
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB327_73
# BB#53:                                # %if.then.206
	cmpq	$0, -72(%rbp)
	je	.LBB327_55
# BB#54:                                # %if.then.208
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	movq	-24(%rbp), %rcx
	callq	expose_overlaps
.LBB327_55:                             # %if.end.209
	movq	-16(%rbp), %rax
	movl	240(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	256(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -116(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	240(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -120(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-120(%rbp), %ecx        # 4-byte Reload
	addl	256(%rax), %ecx
	movl	-116(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	je	.LBB327_57
# BB#56:                                # %lor.lhs.false.225
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB327_58
.LBB327_57:                             # %cond.true.231
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB327_59
	jmp	.LBB327_60
.LBB327_58:                             # %cond.false.232
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 336(%rax)
	je	.LBB327_60
.LBB327_59:                             # %if.then.236
	movq	-16(%rbp), %rdi
	callq	x_draw_right_divider
	jmp	.LBB327_61
.LBB327_60:                             # %if.else.237
	movq	-16(%rbp), %rdi
	callq	x_draw_vertical_border
.LBB327_61:                             # %if.end.238
	movq	-16(%rbp), %rax
	movl	244(%rax), %ecx
	movq	-16(%rbp), %rax
	addl	260(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	244(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	movl	%ecx, -128(%rbp)        # 4-byte Spill
	callq	XWINDOW
	movl	-128(%rbp), %ecx        # 4-byte Reload
	addl	260(%rax), %ecx
	movl	-124(%rbp), %edx        # 4-byte Reload
	cmpl	%ecx, %edx
	jne	.LBB327_63
# BB#62:                                # %land.lhs.true.255
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movq	40(%rax), %rdi
	callq	XWINDOW
	xorl	%edi, %edi
	movq	16(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB327_65
.LBB327_63:                             # %lor.lhs.false.263
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	8(%rcx), %rcx
	subq	$5, %rcx
	cmpq	40(%rcx), %rax
	je	.LBB327_65
# BB#64:                                # %lor.lhs.false.269
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB327_66
.LBB327_65:                             # %cond.true.276
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB327_67
	jmp	.LBB327_68
.LBB327_66:                             # %cond.false.277
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	cmpl	$0, 340(%rax)
	je	.LBB327_68
.LBB327_67:                             # %if.then.281
	movq	-16(%rbp), %rdi
	callq	x_draw_bottom_divider
.LBB327_68:                             # %if.end.282
	testb	$1, -81(%rbp)
	jne	.LBB327_71
# BB#69:                                # %lor.lhs.false.285
	testb	$1, -82(%rbp)
	je	.LBB327_72
# BB#70:                                # %land.lhs.true.288
	movq	-16(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$7, %cx
	andw	$1, %cx
	testw	$1, %cx
	jne	.LBB327_72
.LBB327_71:                             # %if.then.294
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	update_window_cursor
.LBB327_72:                             # %if.end.295
	jmp	.LBB327_73
.LBB327_73:                             # %if.end.296
	jmp	.LBB327_74
.LBB327_74:                             # %if.end.297
	movb	-49(%rbp), %al
	andb	$1, %al
	movb	%al, -1(%rbp)
.LBB327_75:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end327:
	.size	expose_window, .Lfunc_end327-expose_window
	.cfi_endproc

	.align	16, 0x90
	.type	phys_cursor_in_rect_p,@function
phys_cursor_in_rect_p:                  # @phys_cursor_in_rect_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1012:
	.cfi_def_cfa_offset 16
.Ltmp1013:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1014:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	cmpl	$0, 380(%rsi)
	jl	.LBB328_8
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movl	380(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	cmpl	24(%rax), %ecx
	jge	.LBB328_8
# BB#2:                                 # %land.lhs.true.4
	movq	-16(%rbp), %rax
	movq	192(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	380(%rcx), %rcx
	shlq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$10, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB328_8
# BB#3:                                 # %land.lhs.true.8
	movq	-56(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$28, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB328_8
# BB#4:                                 # %if.then
	movl	$1, %eax
	movl	$2, %ecx
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movw	468(%rdx), %si
	shrw	$12, %si
	andw	$1, %si
	movb	%sil, %r8b
	testb	$1, %r8b
	cmovnel	%ecx, %eax
	movl	%eax, %esi
	callq	window_box_right_offset
	movw	%ax, %r9w
	movw	%r9w, -32(%rbp)
	movq	-56(%rbp), %rdx
	movl	48(%rdx), %eax
	movw	%ax, %r9w
	movw	%r9w, -30(%rbp)
	movq	-16(%rbp), %rdx
	cmpl	$0, 424(%rdx)
	jl	.LBB328_6
# BB#5:                                 # %cond.true
	movq	-16(%rbp), %rax
	movl	424(%rax), %ecx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
	jmp	.LBB328_7
.LBB328_6:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	subq	$5, %rax
	movl	348(%rax), %ecx
	movl	%ecx, -60(%rbp)         # 4-byte Spill
.LBB328_7:                              # %cond.end
	movl	-60(%rbp), %eax         # 4-byte Reload
	leaq	-32(%rbp), %rdi
	leaq	-40(%rbp), %rdx
	movw	%ax, %cx
	movw	%cx, -28(%rbp)
	movq	-56(%rbp), %rsi
	movl	60(%rsi), %eax
	movw	%ax, %cx
	movw	%cx, -26(%rbp)
	movq	-24(%rbp), %rsi
	callq	x_intersect_rectangles
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB328_11
.LBB328_8:                              # %if.end
	movq	-16(%rbp), %rdi
	callq	get_phys_cursor_glyph
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB328_10
# BB#9:                                 # %if.then.29
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	window_box_left_offset
	leaq	-32(%rbp), %rdi
	leaq	-40(%rbp), %rdx
	movq	-16(%rbp), %rcx
	addl	368(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -32(%rbp)
	movq	-16(%rbp), %rcx
	movl	372(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -30(%rbp)
	movq	-48(%rbp), %rcx
	movw	16(%rcx), %r8w
	movw	%r8w, -28(%rbp)
	movq	-16(%rbp), %rcx
	movl	416(%rcx), %eax
	movw	%ax, %r8w
	movw	%r8w, -26(%rbp)
	movq	-24(%rbp), %rsi
	callq	x_intersect_rectangles
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	.LBB328_11
.LBB328_10:                             # %if.end.43
	movb	$0, -1(%rbp)
.LBB328_11:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end328:
	.size	phys_cursor_in_rect_p, .Lfunc_end328-phys_cursor_in_rect_p
	.cfi_endproc

	.align	16, 0x90
	.type	expose_line,@function
expose_line:                            # @expose_line
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1015:
	.cfi_def_cfa_offset 16
.Ltmp1016:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1017:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	236(%rdx), %rdx
	shrq	$20, %rdx
	andq	$1, %rdx
	testq	$1, %rdx
	jne	.LBB329_2
# BB#1:                                 # %lor.lhs.false
	movq	-8(%rbp), %rax
	movw	468(%rax), %cx
	shrw	$11, %cx
	andw	$1, %cx
	testw	$1, %cx
	je	.LBB329_3
.LBB329_2:                              # %if.then
	xorl	%esi, %esi
	movl	$1, %ecx
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	movq	-16(%rbp), %r9
	movswq	34(%r9), %r9
	movl	$0, (%rsp)
	movl	$0, 8(%rsp)
	callq	draw_glyphs
	movl	%eax, -28(%rbp)         # 4-byte Spill
	jmp	.LBB329_10
.LBB329_3:                              # %if.else
	movq	-16(%rbp), %rax
	cmpw	$0, 32(%rax)
	je	.LBB329_5
# BB#4:                                 # %if.then.7
	xorl	%ecx, %ecx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	expose_area
.LBB329_5:                              # %if.end
	movq	-16(%rbp), %rax
	cmpw	$0, 34(%rax)
	je	.LBB329_7
# BB#6:                                 # %if.then.11
	movl	$1, %ecx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	expose_area
.LBB329_7:                              # %if.end.12
	movq	-16(%rbp), %rax
	cmpw	$0, 36(%rax)
	je	.LBB329_9
# BB#8:                                 # %if.then.16
	movl	$2, %ecx
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	callq	expose_area
.LBB329_9:                              # %if.end.17
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	draw_row_fringe_bitmaps
.LBB329_10:                             # %if.end.18
	movq	-16(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$25, %rax
	andq	$1, %rax
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end329:
	.size	expose_line, .Lfunc_end329-expose_line
	.cfi_endproc

	.align	16, 0x90
	.type	expose_overlaps,@function
expose_overlaps:                        # @expose_overlaps
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1018:
	.cfi_def_cfa_offset 16
.Ltmp1019:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1020:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, -40(%rbp)
.LBB330_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-40(%rbp), %rax
	cmpq	-24(%rbp), %rax
	ja	.LBB330_12
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB330_1 Depth=1
	movq	-40(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$24, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB330_10
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB330_1 Depth=1
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, 248(%rcx)
	movq	-40(%rbp), %rax
	cmpw	$0, 32(%rax)
	je	.LBB330_5
# BB#4:                                 # %if.then.1
                                        #   in Loop: Header=BB330_1 Depth=1
	xorl	%edx, %edx
	movl	$3, %ecx
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	x_fix_overlapping_area
.LBB330_5:                              # %if.end
                                        #   in Loop: Header=BB330_1 Depth=1
	movq	-40(%rbp), %rax
	cmpw	$0, 34(%rax)
	je	.LBB330_7
# BB#6:                                 # %if.then.5
                                        #   in Loop: Header=BB330_1 Depth=1
	movl	$1, %edx
	movl	$3, %ecx
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	x_fix_overlapping_area
.LBB330_7:                              # %if.end.6
                                        #   in Loop: Header=BB330_1 Depth=1
	movq	-40(%rbp), %rax
	cmpw	$0, 36(%rax)
	je	.LBB330_9
# BB#8:                                 # %if.then.10
                                        #   in Loop: Header=BB330_1 Depth=1
	movl	$2, %edx
	movl	$3, %ecx
	movq	-8(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	x_fix_overlapping_area
.LBB330_9:                              # %if.end.11
                                        #   in Loop: Header=BB330_1 Depth=1
	movq	-40(%rbp), %rax
	movq	$0, 248(%rax)
.LBB330_10:                             # %if.end.13
                                        #   in Loop: Header=BB330_1 Depth=1
	jmp	.LBB330_11
.LBB330_11:                             # %for.inc
                                        #   in Loop: Header=BB330_1 Depth=1
	movq	-40(%rbp), %rax
	addq	$256, %rax              # imm = 0x100
	movq	%rax, -40(%rbp)
	jmp	.LBB330_1
.LBB330_12:                             # %for.end
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end330:
	.size	expose_overlaps, .Lfunc_end330-expose_overlaps
	.cfi_endproc

	.align	16, 0x90
	.type	expose_area,@function
expose_area:                            # @expose_area
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp1021:
	.cfi_def_cfa_offset 16
.Ltmp1022:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1023:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
.Ltmp1024:
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	movq	%rdx, -48(%rbp)
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	(%rsi,%rdx,8), %rdx
	movslq	-36(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movswl	32(%rdi,%rsi,2), %ecx
	movslq	%ecx, %rsi
	imulq	$48, %rsi, %rsi
	addq	%rsi, %rdx
	movq	%rdx, -56(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB331_3
# BB#1:                                 # %land.lhs.true
	movq	-24(%rbp), %rax
	movq	236(%rax), %rax
	shrq	$16, %rax
	andq	$1, %rax
	testq	$1, %rax
	je	.LBB331_3
# BB#2:                                 # %if.then
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movl	-36(%rbp), %ecx
	movslq	-36(%rbp), %r9
	movq	-24(%rbp), %r10
	movswq	32(%r10,%r9,2), %r9
	movl	$0, (%rsp)
	movl	$0, 8(%rsp)
	callq	draw_glyphs
	movl	%eax, -84(%rbp)         # 4-byte Spill
	jmp	.LBB331_18
.LBB331_3:                              # %if.else
	movq	-16(%rbp), %rdi
	movl	-36(%rbp), %esi
	callq	window_box_left_offset
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB331_5
# BB#4:                                 # %if.then.15
	movq	-24(%rbp), %rax
	movl	44(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
.LBB331_5:                              # %if.end
	jmp	.LBB331_6
.LBB331_6:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	cmpq	-56(%rbp), %rdx
	movb	%cl, -85(%rbp)          # 1-byte Spill
	jae	.LBB331_8
# BB#7:                                 # %land.rhs
                                        #   in Loop: Header=BB331_6 Depth=1
	movl	-76(%rbp), %eax
	movq	-48(%rbp), %rcx
	movswl	16(%rcx), %edx
	addl	%edx, %eax
	movq	-32(%rbp), %rcx
	movswl	(%rcx), %edx
	cmpl	%edx, %eax
	setl	%sil
	movb	%sil, -85(%rbp)         # 1-byte Spill
.LBB331_8:                              # %land.end
                                        #   in Loop: Header=BB331_6 Depth=1
	movb	-85(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB331_9
	jmp	.LBB331_10
.LBB331_9:                              # %while.body
                                        #   in Loop: Header=BB331_6 Depth=1
	movq	-48(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
	movq	-48(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB331_6
.LBB331_10:                             # %while.end
	movq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movq	-32(%rbp), %rax
	movswl	(%rax), %ecx
	movq	-32(%rbp), %rax
	movzwl	4(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
.LBB331_11:                             # %while.cond.32
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-64(%rbp), %rdx
	cmpq	-56(%rbp), %rdx
	movb	%cl, -86(%rbp)          # 1-byte Spill
	jae	.LBB331_13
# BB#12:                                # %land.rhs.35
                                        #   in Loop: Header=BB331_11 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-80(%rbp), %eax
	setl	%cl
	movb	%cl, -86(%rbp)          # 1-byte Spill
.LBB331_13:                             # %land.end.38
                                        #   in Loop: Header=BB331_11 Depth=1
	movb	-86(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB331_14
	jmp	.LBB331_15
.LBB331_14:                             # %while.body.39
                                        #   in Loop: Header=BB331_11 Depth=1
	movq	-64(%rbp), %rax
	movswl	16(%rax), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -76(%rbp)
	movq	-64(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB331_11
.LBB331_15:                             # %while.end.44
	movq	-64(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jbe	.LBB331_17
# BB#16:                                # %if.then.47
	xorl	%eax, %eax
	movl	$48, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rdi
	movl	-68(%rbp), %ecx
	subl	-72(%rbp), %ecx
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %r8d
	movq	-48(%rbp), %r9
	movslq	-36(%rbp), %r10
	movq	-24(%rbp), %r11
	movq	(%r11,%r10,8), %r10
	subq	%r10, %r9
	movl	%eax, -92(%rbp)         # 4-byte Spill
	movq	%r9, %rax
	movq	%rdx, -104(%rbp)        # 8-byte Spill
	cqto
	movq	-104(%rbp), %r9         # 8-byte Reload
	idivq	%r9
	movq	-64(%rbp), %r10
	movslq	-36(%rbp), %r11
	movq	-24(%rbp), %rbx
	movq	(%rbx,%r11,8), %r11
	subq	%r11, %r10
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movq	%r10, %rax
	cqto
	idivq	%r9
	movq	%rsi, -120(%rbp)        # 8-byte Spill
	movl	%ecx, %esi
	movq	-120(%rbp), %r10        # 8-byte Reload
	movq	%r10, %rdx
	movl	%r8d, %ecx
	movq	-112(%rbp), %r8         # 8-byte Reload
	movq	%rax, %r9
	movl	$0, (%rsp)
	movl	$0, 8(%rsp)
	callq	draw_glyphs
	movl	%eax, -124(%rbp)        # 4-byte Spill
.LBB331_17:                             # %if.end.59
	jmp	.LBB331_18
.LBB331_18:                             # %if.end.60
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end331:
	.size	expose_area, .Lfunc_end331-expose_area
	.cfi_endproc

	.type	windows_or_buffers_changed,@object # @windows_or_buffers_changed
	.comm	windows_or_buffers_changed,4,4
	.type	update_mode_lines,@object # @update_mode_lines
	.comm	update_mode_lines,4,4
	.type	last_height,@object     # @last_height
	.local	last_height
	.comm	last_height,4,4
	.type	last_glyphless_glyph_frame,@object # @last_glyphless_glyph_frame
	.local	last_glyphless_glyph_frame
	.comm	last_glyphless_glyph_frame,8,8
	.type	last_glyphless_glyph_face_id,@object # @last_glyphless_glyph_face_id
	.data
	.align	4
last_glyphless_glyph_face_id:
	.long	1048576                 # 0x100000
	.size	last_glyphless_glyph_face_id, 4

	.type	last_glyphless_glyph_merged_face_id,@object # @last_glyphless_glyph_merged_face_id
	.local	last_glyphless_glyph_merged_face_id
	.comm	last_glyphless_glyph_merged_face_id,4,4
	.type	last_escape_glyph_frame,@object # @last_escape_glyph_frame
	.local	last_escape_glyph_frame
	.comm	last_escape_glyph_frame,8,8
	.type	last_escape_glyph_face_id,@object # @last_escape_glyph_face_id
	.align	4
last_escape_glyph_face_id:
	.long	1048576                 # 0x100000
	.size	last_escape_glyph_face_id, 4

	.type	message_log_need_newline,@object # @message_log_need_newline
	.local	message_log_need_newline
	.comm	message_log_need_newline,1,1
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.zero	1
	.size	.L.str, 1

	.type	Vmessages_buffer_name,@object # @Vmessages_buffer_name
	.local	Vmessages_buffer_name
	.comm	Vmessages_buffer_name,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"messages-buffer-mode"
	.size	.L.str.1, 21

	.type	message_dolog_marker1,@object # @message_dolog_marker1
	.local	message_dolog_marker1
	.comm	message_dolog_marker1,8,8
	.type	message_dolog_marker2,@object # @message_dolog_marker2
	.local	message_dolog_marker2
	.comm	message_dolog_marker2,8,8
	.type	message_dolog_marker3,@object # @message_dolog_marker3
	.local	message_dolog_marker3
	.comm	message_dolog_marker3,8,8
	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"\n"
	.size	.L.str.2, 2

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	" [%ld times]"
	.size	.L.str.3, 13

	.type	message_buf_print,@object # @message_buf_print
	.local	message_buf_print
	.comm	message_buf_print,1,1
	.type	echo_area_buffer,@object # @echo_area_buffer
	.comm	echo_area_buffer,16,16
	.type	echo_buffer,@object     # @echo_buffer
	.local	echo_buffer
	.comm	echo_buffer,16,16
	.type	echo_area_window,@object # @echo_area_window
	.comm	echo_area_window,8,8
	.type	Vmessage_stack,@object  # @Vmessage_stack
	.local	Vmessage_stack
	.comm	Vmessage_stack,8,8
	.type	message_cleared_p,@object # @message_cleared_p
	.local	message_cleared_p
	.comm	message_cleared_p,1,1
	.type	display_last_displayed_message_p,@object # @display_last_displayed_message_p
	.local	display_last_displayed_message_p
	.comm	display_last_displayed_message_p,1,1
	.type	overlay_arrow_seen,@object # @overlay_arrow_seen
	.local	overlay_arrow_seen
	.comm	overlay_arrow_seen,1,1
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"[\f\t ]*\n"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	" "
	.size	.L.str.5, 2

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	" >"
	.size	.L.str.6, 3

	.type	mode_line_proptrans_alist,@object # @mode_line_proptrans_alist
	.local	mode_line_proptrans_alist
	.comm	mode_line_proptrans_alist,8,8
	.type	mode_line_target,@object # @mode_line_target
	.local	mode_line_target
	.comm	mode_line_target,4,4
	.type	mode_line_string_face_prop,@object # @mode_line_string_face_prop
	.local	mode_line_string_face_prop
	.comm	mode_line_string_face_prop,8,8
	.type	mode_line_string_list,@object # @mode_line_string_list
	.local	mode_line_string_list
	.comm	mode_line_string_list,8,8
	.type	mode_line_noprop_ptr,@object # @mode_line_noprop_ptr
	.local	mode_line_noprop_ptr
	.comm	mode_line_noprop_ptr,8,8
	.type	mode_line_noprop_buf,@object # @mode_line_noprop_buf
	.local	mode_line_noprop_buf
	.comm	mode_line_noprop_buf,8,8
	.type	mode_line_string_face,@object # @mode_line_string_face
	.local	mode_line_string_face
	.comm	mode_line_string_face,8,8
	.type	help_echo_string,@object # @help_echo_string
	.comm	help_echo_string,8,8
	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"drag-mouse-1: resize"
	.size	.L.str.7, 21

	.type	help_echo_window,@object # @help_echo_window
	.comm	help_echo_window,8,8
	.type	help_echo_object,@object # @help_echo_object
	.comm	help_echo_object,8,8
	.type	help_echo_pos,@object   # @help_echo_pos
	.comm	help_echo_pos,8,8
	.type	Vwith_echo_area_save_vector,@object # @Vwith_echo_area_save_vector
	.local	Vwith_echo_area_save_vector
	.comm	Vwith_echo_area_save_vector,8,8
	.type	syms_of_xdisp.b_fwd,@object # @syms_of_xdisp.b_fwd
	.local	syms_of_xdisp.b_fwd
	.comm	syms_of_xdisp.b_fwd,16,8
	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"inhibit-message"
	.size	.L.str.8, 16

	.type	Sline_pixel_height,@object # @Sline_pixel_height
	.data
	.align	8
Sline_pixel_height:
	.quad	167772160               # 0xa000000
	.quad	Fline_pixel_height
	.short	0                       # 0x0
	.short	0                       # 0x0
	.zero	4
	.quad	.L.str.167
	.quad	0
	.quad	0
	.size	Sline_pixel_height, 48

	.type	list_of_error,@object   # @list_of_error
	.local	list_of_error
	.comm	list_of_error,8,8
	.type	.L.str.9,@object        # @.str.9
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9:
	.asciz	"*Messages*"
	.size	.L.str.9, 11

	.type	Vmode_line_unwind_vector,@object # @Vmode_line_unwind_vector
	.local	Vmode_line_unwind_vector
	.comm	Vmode_line_unwind_vector,8,8
	.type	previous_help_echo_string,@object # @previous_help_echo_string
	.comm	previous_help_echo_string,8,8
	.type	syms_of_xdisp.b_fwd.10,@object # @syms_of_xdisp.b_fwd.10
	.local	syms_of_xdisp.b_fwd.10
	.comm	syms_of_xdisp.b_fwd.10,16,8
	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"x-stretch-cursor"
	.size	.L.str.11, 17

	.type	syms_of_xdisp.o_fwd,@object # @syms_of_xdisp.o_fwd
	.local	syms_of_xdisp.o_fwd
	.comm	syms_of_xdisp.o_fwd,16,8
	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"show-trailing-whitespace"
	.size	.L.str.12, 25

	.type	syms_of_xdisp.o_fwd.13,@object # @syms_of_xdisp.o_fwd.13
	.local	syms_of_xdisp.o_fwd.13
	.comm	syms_of_xdisp.o_fwd.13,16,8
	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"nobreak-char-display"
	.size	.L.str.14, 21

	.type	syms_of_xdisp.o_fwd.15,@object # @syms_of_xdisp.o_fwd.15
	.local	syms_of_xdisp.o_fwd.15
	.comm	syms_of_xdisp.o_fwd.15,16,8
	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"void-text-area-pointer"
	.size	.L.str.16, 23

	.type	syms_of_xdisp.o_fwd.17,@object # @syms_of_xdisp.o_fwd.17
	.local	syms_of_xdisp.o_fwd.17
	.comm	syms_of_xdisp.o_fwd.17,16,8
	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"inhibit-redisplay"
	.size	.L.str.18, 18

	.type	syms_of_xdisp.o_fwd.19,@object # @syms_of_xdisp.o_fwd.19
	.local	syms_of_xdisp.o_fwd.19
	.comm	syms_of_xdisp.o_fwd.19,16,8
	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"global-mode-string"
	.size	.L.str.20, 19

	.type	syms_of_xdisp.o_fwd.21,@object # @syms_of_xdisp.o_fwd.21
	.local	syms_of_xdisp.o_fwd.21
	.comm	syms_of_xdisp.o_fwd.21,16,8
	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"overlay-arrow-position"
	.size	.L.str.22, 23

	.type	syms_of_xdisp.o_fwd.23,@object # @syms_of_xdisp.o_fwd.23
	.local	syms_of_xdisp.o_fwd.23
	.comm	syms_of_xdisp.o_fwd.23,16,8
	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"overlay-arrow-string"
	.size	.L.str.24, 21

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"=>"
	.size	.L.str.25, 3

	.type	syms_of_xdisp.o_fwd.26,@object # @syms_of_xdisp.o_fwd.26
	.local	syms_of_xdisp.o_fwd.26
	.comm	syms_of_xdisp.o_fwd.26,16,8
	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"overlay-arrow-variable-list"
	.size	.L.str.27, 28

	.type	syms_of_xdisp.i_fwd,@object # @syms_of_xdisp.i_fwd
	.local	syms_of_xdisp.i_fwd
	.comm	syms_of_xdisp.i_fwd,16,8
	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"scroll-step"
	.size	.L.str.28, 12

	.type	syms_of_xdisp.i_fwd.29,@object # @syms_of_xdisp.i_fwd.29
	.local	syms_of_xdisp.i_fwd.29
	.comm	syms_of_xdisp.i_fwd.29,16,8
	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"scroll-conservatively"
	.size	.L.str.30, 22

	.type	syms_of_xdisp.i_fwd.31,@object # @syms_of_xdisp.i_fwd.31
	.local	syms_of_xdisp.i_fwd.31
	.comm	syms_of_xdisp.i_fwd.31,16,8
	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"scroll-margin"
	.size	.L.str.32, 14

	.type	syms_of_xdisp.o_fwd.33,@object # @syms_of_xdisp.o_fwd.33
	.local	syms_of_xdisp.o_fwd.33
	.comm	syms_of_xdisp.o_fwd.33,16,8
	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"display-pixels-per-inch"
	.size	.L.str.34, 24

	.type	syms_of_xdisp.o_fwd.35,@object # @syms_of_xdisp.o_fwd.35
	.local	syms_of_xdisp.o_fwd.35
	.comm	syms_of_xdisp.o_fwd.35,16,8
	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"truncate-partial-width-windows"
	.size	.L.str.36, 31

	.type	syms_of_xdisp.o_fwd.37,@object # @syms_of_xdisp.o_fwd.37
	.local	syms_of_xdisp.o_fwd.37
	.comm	syms_of_xdisp.o_fwd.37,16,8
	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"line-number-display-limit"
	.size	.L.str.38, 26

	.type	syms_of_xdisp.i_fwd.39,@object # @syms_of_xdisp.i_fwd.39
	.local	syms_of_xdisp.i_fwd.39
	.comm	syms_of_xdisp.i_fwd.39,16,8
	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"line-number-display-limit-width"
	.size	.L.str.40, 32

	.type	syms_of_xdisp.b_fwd.41,@object # @syms_of_xdisp.b_fwd.41
	.local	syms_of_xdisp.b_fwd.41
	.comm	syms_of_xdisp.b_fwd.41,16,8
	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"highlight-nonselected-windows"
	.size	.L.str.42, 30

	.type	syms_of_xdisp.b_fwd.43,@object # @syms_of_xdisp.b_fwd.43
	.local	syms_of_xdisp.b_fwd.43
	.comm	syms_of_xdisp.b_fwd.43,16,8
	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"multiple-frames"
	.size	.L.str.44, 16

	.type	syms_of_xdisp.o_fwd.45,@object # @syms_of_xdisp.o_fwd.45
	.local	syms_of_xdisp.o_fwd.45
	.comm	syms_of_xdisp.o_fwd.45,16,8
	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"frame-title-format"
	.size	.L.str.46, 19

	.type	syms_of_xdisp.o_fwd.47,@object # @syms_of_xdisp.o_fwd.47
	.local	syms_of_xdisp.o_fwd.47
	.comm	syms_of_xdisp.o_fwd.47,16,8
	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"icon-title-format"
	.size	.L.str.48, 18

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"%b"
	.size	.L.str.49, 3

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"invocation-name"
	.size	.L.str.50, 16

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"@"
	.size	.L.str.51, 2

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"system-name"
	.size	.L.str.52, 12

	.type	syms_of_xdisp.o_fwd.53,@object # @syms_of_xdisp.o_fwd.53
	.local	syms_of_xdisp.o_fwd.53
	.comm	syms_of_xdisp.o_fwd.53,16,8
	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"message-log-max"
	.size	.L.str.54, 16

	.type	syms_of_xdisp.o_fwd.55,@object # @syms_of_xdisp.o_fwd.55
	.local	syms_of_xdisp.o_fwd.55
	.comm	syms_of_xdisp.o_fwd.55,16,8
	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"window-size-change-functions"
	.size	.L.str.56, 29

	.type	syms_of_xdisp.o_fwd.57,@object # @syms_of_xdisp.o_fwd.57
	.local	syms_of_xdisp.o_fwd.57
	.comm	syms_of_xdisp.o_fwd.57,16,8
	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"window-scroll-functions"
	.size	.L.str.58, 24

	.type	syms_of_xdisp.o_fwd.59,@object # @syms_of_xdisp.o_fwd.59
	.local	syms_of_xdisp.o_fwd.59
	.comm	syms_of_xdisp.o_fwd.59,16,8
	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"window-text-change-functions"
	.size	.L.str.60, 29

	.type	syms_of_xdisp.o_fwd.61,@object # @syms_of_xdisp.o_fwd.61
	.local	syms_of_xdisp.o_fwd.61
	.comm	syms_of_xdisp.o_fwd.61,16,8
	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"redisplay-end-trigger-functions"
	.size	.L.str.62, 32

	.type	syms_of_xdisp.o_fwd.63,@object # @syms_of_xdisp.o_fwd.63
	.local	syms_of_xdisp.o_fwd.63
	.comm	syms_of_xdisp.o_fwd.63,16,8
	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"mouse-autoselect-window"
	.size	.L.str.64, 24

	.type	syms_of_xdisp.o_fwd.65,@object # @syms_of_xdisp.o_fwd.65
	.local	syms_of_xdisp.o_fwd.65
	.comm	syms_of_xdisp.o_fwd.65,16,8
	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"auto-resize-tool-bars"
	.size	.L.str.66, 22

	.type	syms_of_xdisp.b_fwd.67,@object # @syms_of_xdisp.b_fwd.67
	.local	syms_of_xdisp.b_fwd.67
	.comm	syms_of_xdisp.b_fwd.67,16,8
	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"auto-raise-tool-bar-buttons"
	.size	.L.str.68, 28

	.type	syms_of_xdisp.b_fwd.69,@object # @syms_of_xdisp.b_fwd.69
	.local	syms_of_xdisp.b_fwd.69
	.comm	syms_of_xdisp.b_fwd.69,16,8
	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"make-cursor-line-fully-visible"
	.size	.L.str.70, 31

	.type	syms_of_xdisp.o_fwd.71,@object # @syms_of_xdisp.o_fwd.71
	.local	syms_of_xdisp.o_fwd.71
	.comm	syms_of_xdisp.o_fwd.71,16,8
	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	"tool-bar-border"
	.size	.L.str.72, 16

	.type	syms_of_xdisp.o_fwd.73,@object # @syms_of_xdisp.o_fwd.73
	.local	syms_of_xdisp.o_fwd.73
	.comm	syms_of_xdisp.o_fwd.73,16,8
	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	"tool-bar-button-margin"
	.size	.L.str.74, 23

	.type	syms_of_xdisp.i_fwd.75,@object # @syms_of_xdisp.i_fwd.75
	.local	syms_of_xdisp.i_fwd.75
	.comm	syms_of_xdisp.i_fwd.75,16,8
	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"tool-bar-button-relief"
	.size	.L.str.76, 23

	.type	syms_of_xdisp.o_fwd.77,@object # @syms_of_xdisp.o_fwd.77
	.local	syms_of_xdisp.o_fwd.77
	.comm	syms_of_xdisp.o_fwd.77,16,8
	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"tool-bar-style"
	.size	.L.str.78, 15

	.type	syms_of_xdisp.i_fwd.79,@object # @syms_of_xdisp.i_fwd.79
	.local	syms_of_xdisp.i_fwd.79
	.comm	syms_of_xdisp.i_fwd.79,16,8
	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	"tool-bar-max-label-size"
	.size	.L.str.80, 24

	.type	syms_of_xdisp.o_fwd.81,@object # @syms_of_xdisp.o_fwd.81
	.local	syms_of_xdisp.o_fwd.81
	.comm	syms_of_xdisp.o_fwd.81,16,8
	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"fontification-functions"
	.size	.L.str.82, 24

	.type	syms_of_xdisp.b_fwd.83,@object # @syms_of_xdisp.b_fwd.83
	.local	syms_of_xdisp.b_fwd.83
	.comm	syms_of_xdisp.b_fwd.83,16,8
	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"unibyte-display-via-language-environment"
	.size	.L.str.84, 41

	.type	syms_of_xdisp.o_fwd.85,@object # @syms_of_xdisp.o_fwd.85
	.local	syms_of_xdisp.o_fwd.85
	.comm	syms_of_xdisp.o_fwd.85,16,8
	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"max-mini-window-height"
	.size	.L.str.86, 23

	.type	syms_of_xdisp.o_fwd.87,@object # @syms_of_xdisp.o_fwd.87
	.local	syms_of_xdisp.o_fwd.87
	.comm	syms_of_xdisp.o_fwd.87,16,8
	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"resize-mini-windows"
	.size	.L.str.88, 20

	.type	syms_of_xdisp.o_fwd.89,@object # @syms_of_xdisp.o_fwd.89
	.local	syms_of_xdisp.o_fwd.89
	.comm	syms_of_xdisp.o_fwd.89,16,8
	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"blink-cursor-alist"
	.size	.L.str.90, 19

	.type	syms_of_xdisp.b_fwd.91,@object # @syms_of_xdisp.b_fwd.91
	.local	syms_of_xdisp.b_fwd.91
	.comm	syms_of_xdisp.b_fwd.91,16,8
	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"auto-hscroll-mode"
	.size	.L.str.92, 18

	.type	syms_of_xdisp.i_fwd.93,@object # @syms_of_xdisp.i_fwd.93
	.local	syms_of_xdisp.i_fwd.93
	.comm	syms_of_xdisp.i_fwd.93,16,8
	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"hscroll-margin"
	.size	.L.str.94, 15

	.type	syms_of_xdisp.o_fwd.95,@object # @syms_of_xdisp.o_fwd.95
	.local	syms_of_xdisp.o_fwd.95
	.comm	syms_of_xdisp.o_fwd.95,16,8
	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"hscroll-step"
	.size	.L.str.96, 13

	.type	syms_of_xdisp.b_fwd.97,@object # @syms_of_xdisp.b_fwd.97
	.local	syms_of_xdisp.b_fwd.97
	.comm	syms_of_xdisp.b_fwd.97,16,8
	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"message-truncate-lines"
	.size	.L.str.98, 23

	.type	syms_of_xdisp.o_fwd.99,@object # @syms_of_xdisp.o_fwd.99
	.local	syms_of_xdisp.o_fwd.99
	.comm	syms_of_xdisp.o_fwd.99,16,8
	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"menu-bar-update-hook"
	.size	.L.str.100, 21

	.type	syms_of_xdisp.o_fwd.101,@object # @syms_of_xdisp.o_fwd.101
	.local	syms_of_xdisp.o_fwd.101
	.comm	syms_of_xdisp.o_fwd.101,16,8
	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"menu-updating-frame"
	.size	.L.str.102, 20

	.type	syms_of_xdisp.b_fwd.103,@object # @syms_of_xdisp.b_fwd.103
	.local	syms_of_xdisp.b_fwd.103
	.comm	syms_of_xdisp.b_fwd.103,16,8
	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"inhibit-menubar-update"
	.size	.L.str.104, 23

	.type	syms_of_xdisp.o_fwd.105,@object # @syms_of_xdisp.o_fwd.105
	.local	syms_of_xdisp.o_fwd.105
	.comm	syms_of_xdisp.o_fwd.105,16,8
	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"wrap-prefix"
	.size	.L.str.106, 12

	.type	syms_of_xdisp.o_fwd.107,@object # @syms_of_xdisp.o_fwd.107
	.local	syms_of_xdisp.o_fwd.107
	.comm	syms_of_xdisp.o_fwd.107,16,8
	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"line-prefix"
	.size	.L.str.108, 12

	.type	syms_of_xdisp.b_fwd.109,@object # @syms_of_xdisp.b_fwd.109
	.local	syms_of_xdisp.b_fwd.109
	.comm	syms_of_xdisp.b_fwd.109,16,8
	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"inhibit-eval-during-redisplay"
	.size	.L.str.110, 30

	.type	syms_of_xdisp.b_fwd.111,@object # @syms_of_xdisp.b_fwd.111
	.local	syms_of_xdisp.b_fwd.111
	.comm	syms_of_xdisp.b_fwd.111,16,8
	.type	.L.str.112,@object      # @.str.112
.L.str.112:
	.asciz	"inhibit-free-realized-faces"
	.size	.L.str.112, 28

	.type	syms_of_xdisp.b_fwd.113,@object # @syms_of_xdisp.b_fwd.113
	.local	syms_of_xdisp.b_fwd.113
	.comm	syms_of_xdisp.b_fwd.113,16,8
	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"inhibit-bidi-mirroring"
	.size	.L.str.114, 23

	.type	syms_of_xdisp.i_fwd.115,@object # @syms_of_xdisp.i_fwd.115
	.local	syms_of_xdisp.i_fwd.115
	.comm	syms_of_xdisp.i_fwd.115,16,8
	.type	.L.str.116,@object      # @.str.116
.L.str.116:
	.asciz	"overline-margin"
	.size	.L.str.116, 16

	.type	syms_of_xdisp.i_fwd.117,@object # @syms_of_xdisp.i_fwd.117
	.local	syms_of_xdisp.i_fwd.117
	.comm	syms_of_xdisp.i_fwd.117,16,8
	.type	.L.str.118,@object      # @.str.118
.L.str.118:
	.asciz	"underline-minimum-offset"
	.size	.L.str.118, 25

	.type	syms_of_xdisp.b_fwd.119,@object # @syms_of_xdisp.b_fwd.119
	.local	syms_of_xdisp.b_fwd.119
	.comm	syms_of_xdisp.b_fwd.119,16,8
	.type	.L.str.120,@object      # @.str.120
.L.str.120:
	.asciz	"display-hourglass"
	.size	.L.str.120, 18

	.type	syms_of_xdisp.o_fwd.121,@object # @syms_of_xdisp.o_fwd.121
	.local	syms_of_xdisp.o_fwd.121
	.comm	syms_of_xdisp.o_fwd.121,16,8
	.type	.L.str.122,@object      # @.str.122
.L.str.122:
	.asciz	"hourglass-delay"
	.size	.L.str.122, 16

	.type	hourglass_atimer,@object # @hourglass_atimer
	.local	hourglass_atimer
	.comm	hourglass_atimer,8,8
	.type	hourglass_shown_p,@object # @hourglass_shown_p
	.local	hourglass_shown_p
	.comm	hourglass_shown_p,1,1
	.type	syms_of_xdisp.o_fwd.123,@object # @syms_of_xdisp.o_fwd.123
	.local	syms_of_xdisp.o_fwd.123
	.comm	syms_of_xdisp.o_fwd.123,16,8
	.type	.L.str.124,@object      # @.str.124
.L.str.124:
	.asciz	"pre-redisplay-function"
	.size	.L.str.124, 23

	.type	.L.str.125,@object      # @.str.125
.L.str.125:
	.asciz	"ignore"
	.size	.L.str.125, 7

	.type	syms_of_xdisp.o_fwd.126,@object # @syms_of_xdisp.o_fwd.126
	.local	syms_of_xdisp.o_fwd.126
	.comm	syms_of_xdisp.o_fwd.126,16,8
	.type	.L.str.127,@object      # @.str.127
.L.str.127:
	.asciz	"glyphless-char-display"
	.size	.L.str.127, 23

	.type	syms_of_xdisp.o_fwd.128,@object # @syms_of_xdisp.o_fwd.128
	.local	syms_of_xdisp.o_fwd.128
	.comm	syms_of_xdisp.o_fwd.128,16,8
	.type	.L.str.129,@object      # @.str.129
.L.str.129:
	.asciz	"debug-on-message"
	.size	.L.str.129, 17

	.type	syms_of_xdisp.o_fwd.130,@object # @syms_of_xdisp.o_fwd.130
	.local	syms_of_xdisp.o_fwd.130
	.comm	syms_of_xdisp.o_fwd.130,16,8
	.type	.L.str.131,@object      # @.str.131
.L.str.131:
	.asciz	"redisplay--all-windows-cause"
	.size	.L.str.131, 29

	.type	syms_of_xdisp.o_fwd.132,@object # @syms_of_xdisp.o_fwd.132
	.local	syms_of_xdisp.o_fwd.132
	.comm	syms_of_xdisp.o_fwd.132,16,8
	.type	.L.str.133,@object      # @.str.133
.L.str.133:
	.asciz	"redisplay--mode-lines-cause"
	.size	.L.str.133, 28

	.type	syms_of_xdisp.o_fwd.134,@object # @syms_of_xdisp.o_fwd.134
	.local	syms_of_xdisp.o_fwd.134
	.comm	syms_of_xdisp.o_fwd.134,16,8
	.type	.L.str.135,@object      # @.str.135
.L.str.135:
	.asciz	"redisplay--variables"
	.size	.L.str.135, 21

	.type	syms_of_xdisp.b_fwd.136,@object # @syms_of_xdisp.b_fwd.136
	.local	syms_of_xdisp.b_fwd.136
	.comm	syms_of_xdisp.b_fwd.136,16,8
	.type	.L.str.137,@object      # @.str.137
.L.str.137:
	.asciz	"redisplay--inhibit-bidi"
	.size	.L.str.137, 24

	.type	this_line_start_pos,@object # @this_line_start_pos
	.local	this_line_start_pos
	.comm	this_line_start_pos,16,8
	.type	scratch_glyphs,@object  # @scratch_glyphs
	.local	scratch_glyphs
	.comm	scratch_glyphs,4800,16
	.type	scratch_glyph_row,@object # @scratch_glyph_row
	.local	scratch_glyph_row
	.comm	scratch_glyph_row,256,8
	.type	default_invis_vector,@object # @default_invis_vector
	.local	default_invis_vector
	.comm	default_invis_vector,24,16
	.type	mode_line_noprop_buf_end,@object # @mode_line_noprop_buf_end
	.local	mode_line_noprop_buf_end
	.comm	mode_line_noprop_buf_end,8,8
	.type	help_echo_showing_p,@object # @help_echo_showing_p
	.comm	help_echo_showing_p,1,1
	.type	noninteractive_need_newline,@object # @noninteractive_need_newline
	.comm	noninteractive_need_newline,1,1
	.type	redisplaying_p,@object  # @redisplaying_p
	.comm	redisplaying_p,1,1
	.type	.L.str.138,@object      # @.str.138
.L.str.138:
	.asciz	"Error during redisplay: %S signaled %S"
	.size	.L.str.138, 39

	.type	it_props,@object        # @it_props
	.data
	.align	16
it_props:
	.short	448                     # 0x1c0
	.zero	2
	.long	0                       # 0x0
	.quad	handle_fontified_prop
	.short	397                     # 0x18d
	.zero	2
	.long	1                       # 0x1
	.quad	handle_face_prop
	.short	344                     # 0x158
	.zero	2
	.long	3                       # 0x3
	.quad	handle_display_prop
	.short	574                     # 0x23e
	.zero	2
	.long	2                       # 0x2
	.quad	handle_invisible_prop
	.short	290                     # 0x122
	.zero	2
	.long	4                       # 0x4
	.quad	handle_composition_prop
	.zero	16
	.size	it_props, 96

	.type	get_next_element,@object # @get_next_element
	.section	.rodata,"a",@progbits
	.align	16
get_next_element:
	.quad	next_element_from_buffer
	.quad	next_element_from_display_vector
	.quad	next_element_from_string
	.quad	next_element_from_c_string
	.quad	next_element_from_image
	.quad	next_element_from_stretch
	.quad	next_element_from_xwidget
	.size	get_next_element, 56

	.type	.L.str.139,@object      # @.str.139
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.139:
	.asciz	"%03o"
	.size	.L.str.139, 5

	.type	last_escape_glyph_merged_face_id,@object # @last_escape_glyph_merged_face_id
	.local	last_escape_glyph_merged_face_id
	.comm	last_escape_glyph_merged_face_id,4,4
	.type	this_line_min_pos,@object # @this_line_min_pos
	.local	this_line_min_pos
	.comm	this_line_min_pos,16,8
	.type	.L.str.140,@object      # @.str.140
.L.str.140:
	.asciz	" times]\n"
	.size	.L.str.140, 9

	.type	.L.str.141,@object      # @.str.141
.L.str.141:
	.asciz	" *Echo Area %d*"
	.size	.L.str.141, 16

	.type	message_enable_multibyte,@object # @message_enable_multibyte
	.local	message_enable_multibyte
	.comm	message_enable_multibyte,1,1
	.type	line_number_displayed,@object # @line_number_displayed
	.local	line_number_displayed
	.comm	line_number_displayed,1,1
	.type	this_line_end_pos,@object # @this_line_end_pos
	.local	this_line_end_pos
	.comm	this_line_end_pos,16,8
	.type	this_line_buffer,@object # @this_line_buffer
	.local	this_line_buffer
	.comm	this_line_buffer,8,8
	.type	this_line_pixel_height,@object # @this_line_pixel_height
	.local	this_line_pixel_height
	.comm	this_line_pixel_height,4,4
	.type	this_line_start_x,@object # @this_line_start_x
	.local	this_line_start_x
	.comm	this_line_start_x,4,4
	.type	this_line_vpos,@object  # @this_line_vpos
	.local	this_line_vpos
	.comm	this_line_vpos,4,4
	.type	this_line_y,@object     # @this_line_y
	.local	this_line_y
	.comm	this_line_y,4,4
	.type	clear_face_cache_count,@object # @clear_face_cache_count
	.local	clear_face_cache_count
	.comm	clear_face_cache_count,4,4
	.type	clear_image_cache_count,@object # @clear_image_cache_count
	.local	clear_image_cache_count
	.comm	clear_image_cache_count,4,4
	.type	displayed_buffer,@object # @displayed_buffer
	.local	displayed_buffer
	.comm	displayed_buffer,8,8
	.type	.L.str.142,@object      # @.str.142
.L.str.142:
	.asciz	"*too-deep*"
	.size	.L.str.142, 11

	.type	.L.str.143,@object      # @.str.143
.L.str.143:
	.asciz	"*invalid*"
	.size	.L.str.143, 10

	.type	.L.str.144,@object      # @.str.144
.L.str.144:
	.asciz	"%"
	.size	.L.str.144, 2

	.type	.L.str.145,@object      # @.str.145
.L.str.145:
	.asciz	"*"
	.size	.L.str.145, 2

	.type	.L.str.146,@object      # @.str.146
.L.str.146:
	.asciz	"-"
	.size	.L.str.146, 2

	.type	.L.str.147,@object      # @.str.147
.L.str.147:
	.asciz	"[[[... "
	.size	.L.str.147, 8

	.type	.L.str.148,@object      # @.str.148
.L.str.148:
	.asciz	" ...]]]"
	.size	.L.str.148, 8

	.type	.L.str.149,@object      # @.str.149
.L.str.149:
	.asciz	"--"
	.size	.L.str.149, 3

	.type	lots_of_dashes,@object  # @lots_of_dashes
	.data
	.align	16
lots_of_dashes:
	.asciz	"--------------------------------------------------------------------------------------------------------------------------------------------"
	.size	lots_of_dashes, 141

	.type	.L.str.150,@object      # @.str.150
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.150:
	.asciz	"!MEM FULL! "
	.size	.L.str.150, 12

	.type	.L.str.151,@object      # @.str.151
.L.str.151:
	.asciz	"Emacs"
	.size	.L.str.151, 6

	.type	.L.str.152,@object      # @.str.152
.L.str.152:
	.asciz	" Narrow"
	.size	.L.str.152, 8

	.type	.L.str.153,@object      # @.str.153
.L.str.153:
	.asciz	"All"
	.size	.L.str.153, 4

	.type	.L.str.154,@object      # @.str.154
.L.str.154:
	.asciz	"Bottom"
	.size	.L.str.154, 7

	.type	.L.str.155,@object      # @.str.155
.L.str.155:
	.asciz	"Top"
	.size	.L.str.155, 4

	.type	.L.str.156,@object      # @.str.156
.L.str.156:
	.asciz	"%2ld%%"
	.size	.L.str.156, 7

	.type	.L.str.157,@object      # @.str.157
.L.str.157:
	.asciz	"Top%2ld%%"
	.size	.L.str.157, 10

	.type	.L.str.158,@object      # @.str.158
.L.str.158:
	.asciz	"no process"
	.size	.L.str.158, 11

	.type	.L.str.159,@object      # @.str.159
.L.str.159:
	.asciz	"file-remote-p"
	.size	.L.str.159, 14

	.type	power_letter,@object    # @power_letter
	.section	.rodata,"a",@progbits
power_letter:
	.ascii	"\000kMGTPEZY"
	.size	power_letter, 9

	.type	invalid_eol_type,@object # @invalid_eol_type
	.data
invalid_eol_type:
	.asciz	"(*invalid*)"
	.size	invalid_eol_type, 12

	.type	get_per_char_metric.metrics,@object # @get_per_char_metric.metrics
	.local	get_per_char_metric.metrics
	.comm	get_per_char_metric.metrics,10,2
	.type	null_glyph_slice,@object # @null_glyph_slice
	.local	null_glyph_slice
	.comm	null_glyph_slice,8,4
	.type	.L.str.160,@object      # @.str.160
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.160:
	.asciz	"%0*X"
	.size	.L.str.160, 5

	.type	.L.str.161,@object      # @.str.161
.L.str.161:
	.asciz	"hdrag"
	.size	.L.str.161, 6

	.type	.L.str.162,@object      # @.str.162
.L.str.162:
	.asciz	"nhdrag"
	.size	.L.str.162, 7

	.type	.L.str.163,@object      # @.str.163
.L.str.163:
	.asciz	"vdrag"
	.size	.L.str.163, 6

	.type	.L.str.164,@object      # @.str.164
.L.str.164:
	.asciz	"hourglass"
	.size	.L.str.164, 10

	.type	.L.str.165,@object      # @.str.165
.L.str.165:
	.asciz	"tool-bar-height"
	.size	.L.str.165, 16

	.type	Stool_bar_height,@object # @Stool_bar_height
	.data
	.align	8
Stool_bar_height:
	.quad	167772160               # 0xa000000
	.quad	Ftool_bar_height
	.short	0                       # 0x0
	.short	2                       # 0x2
	.zero	4
	.quad	.L.str.165
	.quad	0
	.quad	0
	.size	Stool_bar_height, 48

	.type	.L.str.166,@object      # @.str.166
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.166:
	.asciz	"lookup-image-map"
	.size	.L.str.166, 17

	.type	Slookup_image_map,@object # @Slookup_image_map
	.data
	.align	8
Slookup_image_map:
	.quad	167772160               # 0xa000000
	.quad	Flookup_image_map
	.short	3                       # 0x3
	.short	3                       # 0x3
	.zero	4
	.quad	.L.str.166
	.quad	0
	.quad	0
	.size	Slookup_image_map, 48

	.type	.L.str.167,@object      # @.str.167
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.167:
	.asciz	"line-pixel-height"
	.size	.L.str.167, 18

	.type	.L.str.168,@object      # @.str.168
.L.str.168:
	.asciz	"format-mode-line"
	.size	.L.str.168, 17

	.type	Sformat_mode_line,@object # @Sformat_mode_line
	.data
	.align	8
Sformat_mode_line:
	.quad	167772160               # 0xa000000
	.quad	Fformat_mode_line
	.short	1                       # 0x1
	.short	4                       # 0x4
	.zero	4
	.quad	.L.str.168
	.quad	0
	.quad	0
	.size	Sformat_mode_line, 48

	.type	.L.str.169,@object      # @.str.169
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.169:
	.asciz	"invisible-p"
	.size	.L.str.169, 12

	.type	Sinvisible_p,@object    # @Sinvisible_p
	.data
	.align	8
Sinvisible_p:
	.quad	167772160               # 0xa000000
	.quad	Finvisible_p
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.169
	.quad	0
	.quad	0
	.size	Sinvisible_p, 48

	.type	.L.str.170,@object      # @.str.170
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.170:
	.asciz	"current-bidi-paragraph-direction"
	.size	.L.str.170, 33

	.type	Scurrent_bidi_paragraph_direction,@object # @Scurrent_bidi_paragraph_direction
	.data
	.align	8
Scurrent_bidi_paragraph_direction:
	.quad	167772160               # 0xa000000
	.quad	Fcurrent_bidi_paragraph_direction
	.short	0                       # 0x0
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.170
	.quad	0
	.quad	0
	.size	Scurrent_bidi_paragraph_direction, 48

	.type	.L.str.171,@object      # @.str.171
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.171:
	.asciz	"window-text-pixel-size"
	.size	.L.str.171, 23

	.type	Swindow_text_pixel_size,@object # @Swindow_text_pixel_size
	.data
	.align	8
Swindow_text_pixel_size:
	.quad	167772160               # 0xa000000
	.quad	Fwindow_text_pixel_size
	.short	0                       # 0x0
	.short	6                       # 0x6
	.zero	4
	.quad	.L.str.171
	.quad	0
	.quad	0
	.size	Swindow_text_pixel_size, 48

	.type	.L.str.172,@object      # @.str.172
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.172:
	.asciz	"move-point-visually"
	.size	.L.str.172, 20

	.type	Smove_point_visually,@object # @Smove_point_visually
	.data
	.align	8
Smove_point_visually:
	.quad	167772160               # 0xa000000
	.quad	Fmove_point_visually
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.172
	.quad	0
	.quad	0
	.size	Smove_point_visually, 48

	.type	.L.str.173,@object      # @.str.173
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.173:
	.asciz	"bidi-find-overridden-directionality"
	.size	.L.str.173, 36

	.type	Sbidi_find_overridden_directionality,@object # @Sbidi_find_overridden_directionality
	.data
	.align	8
Sbidi_find_overridden_directionality:
	.quad	167772160               # 0xa000000
	.quad	Fbidi_find_overridden_directionality
	.short	2                       # 0x2
	.short	3                       # 0x3
	.zero	4
	.quad	.L.str.173
	.quad	0
	.quad	0
	.size	Sbidi_find_overridden_directionality, 48

	.type	.L.str.174,@object      # @.str.174
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.174:
	.asciz	"bidi-resolved-levels"
	.size	.L.str.174, 21

	.type	Sbidi_resolved_levels,@object # @Sbidi_resolved_levels
	.data
	.align	8
Sbidi_resolved_levels:
	.quad	167772160               # 0xa000000
	.quad	Fbidi_resolved_levels
	.short	0                       # 0x0
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.174
	.quad	0
	.quad	0
	.size	Sbidi_resolved_levels, 48


	.ident	"clang version 3.7.0 (tags/RELEASE_370/final)"
	.section	".note.GNU-stack","",@progbits
