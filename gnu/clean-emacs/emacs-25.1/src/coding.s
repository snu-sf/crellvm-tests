	.text
	.file	"coding.bc"
	.globl	setup_coding_system
	.align	16, 0x90
	.type	setup_coding_system,@function
setup_coding_system:                    # @setup_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp0:
	.cfi_def_cfa_offset 16
.Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp2:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movl	%eax, %edi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB0_2
# BB#1:                                 # %if.then
	movl	$958, %edi              # imm = 0x3BE
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB0_2:                                # %if.end
	jmp	.LBB0_3
.LBB0_3:                                # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-16(%rbp), %rax
	cmpq	$0, (%rax)
	jge	.LBB0_5
# BB#4:                                 # %if.then.6
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
.LBB0_5:                                # %if.end.11
	movq	-16(%rbp), %rax
	cmpq	$0, (%rax)
	jge	.LBB0_7
# BB#6:                                 # %if.then.14
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB0_7:                                # %if.end.16
	jmp	.LBB0_8
.LBB0_8:                                # %do.end
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -24(%rbp)
	testb	$1, globals+3389
	je	.LBB0_10
# BB#9:                                 # %cond.true
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB0_11
.LBB0_10:                               # %cond.false
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB0_11:                               # %cond.end
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-507905, %ecx          # imm = 0xFFFFFFFFFFF83FFF
	movl	%ecx, 8(%rax)
	movq	-32(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB0_12
	jmp	.LBB0_13
.LBB0_12:                               # %if.then.27
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-16384, %ecx           # imm = 0xFFFFFFFFFFFFC000
	orl	$5120, %ecx             # imm = 0x1400
	movl	%ecx, 8(%rax)
	jmp	.LBB0_17
.LBB0_13:                               # %if.else
	movl	$973, %edi              # imm = 0x3CD
	movq	-32(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB0_15
# BB#14:                                # %if.then.32
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-16384, %ecx           # imm = 0xFFFFFFFFFFFFC000
	orl	$3072, %ecx             # imm = 0xC00
	movl	%ecx, 8(%rax)
	jmp	.LBB0_16
.LBB0_15:                               # %if.else.37
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-16384, %ecx           # imm = 0xFFFFFFFFFFFFC000
	movl	%ecx, 8(%rax)
.LBB0_16:                               # %if.end.41
	jmp	.LBB0_17
.LBB0_17:                               # %if.end.42
	movl	$9, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB0_19
# BB#18:                                # %if.then.46
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$1024, %ecx             # imm = 0x400
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_19:                               # %if.end.53
	movl	$10, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB0_21
# BB#20:                                # %if.then.57
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$2048, %ecx             # imm = 0x800
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_21:                               # %if.end.66
	movl	$12, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB0_23
# BB#22:                                # %if.then.70
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$256, %ecx              # imm = 0x100
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_23:                               # %if.end.79
	movl	$15, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	SCHARS
	subq	$1, %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 12(%rax)
	movq	-48(%rbp), %rdi
	callq	SDATA
	movl	$11, %ecx
	movl	%ecx, %esi
	movq	-16(%rbp), %rdi
	movq	%rax, 352(%rdi)
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 588(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 584(%rax)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-4194305, %ecx         # imm = 0xFFFFFFFFFFBFFFFF
	movl	%ecx, 8(%rax)
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$958, %edi              # imm = 0x3BE
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB0_25
# BB#24:                                # %if.then.91
	movl	$27, %eax
	movl	%eax, %esi
	movabsq	$encode_coding_raw_text, %rcx
	movabsq	$decode_coding_raw_text, %rdx
	movq	-16(%rbp), %rdi
	movq	$0, 592(%rdi)
	movq	-16(%rbp), %rdi
	movq	%rdx, 600(%rdi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 608(%rdx)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	andl	$16383, %eax            # imm = 0x3FFF
	orl	$4096, %eax             # imm = 0x1000
	movl	8(%rcx), %r8d
	andl	$16383, %eax            # imm = 0x3FFF
	andl	$-16384, %r8d           # imm = 0xFFFFFFFFFFFFC000
	orl	%eax, %r8d
	movl	%r8d, 8(%rcx)
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	encode_inhibit_flag
	movl	$28, %r8d
	movl	%r8d, %esi
	movq	-16(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	encode_inhibit_flag
	movl	$29, %r8d
	movl	%r8d, %esi
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r9b
	xorb	$-1, %r9b
	movq	-16(%rbp), %rax
	andb	$1, %r9b
	movb	%r9b, 24(%rax)
	jmp	.LBB0_89
.LBB0_25:                               # %if.else.112
	movl	$580, %edi              # imm = 0x244
	movq	-40(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_39
# BB#26:                                # %if.then.116
	movl	$23, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$1, %ecx
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	sarq	$2, %rax
	movl	%eax, %r8d
	movl	%r8d, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	$0, 20(%rax)
	movl	-56(%rbp), %r8d
	andl	$8, %r8d
	cmpl	$0, %r8d
	cmovnel	%edx, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 24(%rax)
	movl	$0, -52(%rbp)
.LBB0_27:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -52(%rbp)
	jge	.LBB0_30
# BB#28:                                # %for.body
                                        #   in Loop: Header=BB0_27 Depth=1
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-52(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movslq	-52(%rbp), %rax
	movq	-16(%rbp), %rsi
	movl	%ecx, 28(%rsi,%rax,4)
# BB#29:                                # %for.inc
                                        #   in Loop: Header=BB0_27 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB0_27
.LBB0_30:                               # %for.end
	movabsq	$encode_coding_iso_2022, %rax
	movabsq	$decode_coding_iso_2022, %rcx
	movabsq	$detect_coding_iso_2022, %rdx
	movq	-16(%rbp), %rsi
	movb	48(%rsi), %dil
	andb	$-2, %dil
	movb	%dil, 48(%rsi)
	movq	-16(%rbp), %rsi
	movb	48(%rsi), %dil
	andb	$-3, %dil
	orb	$2, %dil
	movb	%dil, 48(%rsi)
	movq	-16(%rbp), %rsi
	movq	%rdx, 592(%rsi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 600(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rax, 608(%rcx)
	movl	-56(%rbp), %r8d
	andl	$2048, %r8d             # imm = 0x800
	cmpl	$0, %r8d
	je	.LBB0_32
# BB#31:                                # %if.then.155
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	orl	$16, %ecx
	movl	8(%rax), %edx
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_32:                               # %if.end.164
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$3584, %ecx             # imm = 0xE00
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	movl	-56(%rbp), %ecx
	andl	$8192, %ecx             # imm = 0x2000
	cmpl	$0, %ecx
	je	.LBB0_34
# BB#33:                                # %if.then.175
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$1, %ecx
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_34:                               # %if.end.184
	movl	-56(%rbp), %eax
	andl	$64, %eax
	cmpl	$0, %eax
	je	.LBB0_36
# BB#35:                                # %if.then.187
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$3, %ecx
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_36:                               # %if.end.196
	movl	-56(%rbp), %eax
	andl	$1048576, %eax          # imm = 0x100000
	cmpl	$0, %eax
	je	.LBB0_38
# BB#37:                                # %if.then.199
	movq	-24(%rbp), %rdi
	callq	setup_iso_safe_charsets
	movl	$15, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	SCHARS
	subq	$1, %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 12(%rax)
	movq	-48(%rbp), %rdi
	callq	SDATA
	movq	-16(%rbp), %rsi
	movq	%rax, 352(%rsi)
.LBB0_38:                               # %if.end.207
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rcx
	movl	$0, 52(%rcx)
	movq	-16(%rbp), %rcx
	movl	$4, 56(%rcx)
	movq	-16(%rbp), %rcx
	movl	$0, 44(%rcx)
	movq	-16(%rbp), %rcx
	movb	48(%rcx), %dl
	andb	$-5, %dl
	movb	%dl, 48(%rcx)
	jmp	.LBB0_88
.LBB0_39:                               # %if.else.222
	movl	$261, %edi              # imm = 0x105
	movq	-40(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_41
# BB#40:                                # %if.then.226
	movabsq	$encode_coding_charset, %rax
	movabsq	$decode_coding_charset, %rcx
	movabsq	$detect_coding_charset, %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 592(%rsi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 600(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rax, 608(%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edi
	andl	$16383, %edi            # imm = 0x3FFF
	orl	$3072, %edi             # imm = 0xC00
	movl	8(%rax), %r8d
	andl	$16383, %edi            # imm = 0x3FFF
	andl	$-16384, %r8d           # imm = 0xFFFFFFFFFFFFC000
	orl	%edi, %r8d
	movl	%r8d, 8(%rax)
	jmp	.LBB0_87
.LBB0_41:                               # %if.else.238
	movl	$988, %edi              # imm = 0x3DC
	movq	-40(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_48
# BB#42:                                # %if.then.242
	movl	$24, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB0_44
# BB#43:                                # %cond.true.248
	xorl	%eax, %eax
	movl	%eax, -188(%rbp)        # 4-byte Spill
	jmp	.LBB0_45
.LBB0_44:                               # %cond.false.249
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	movl	$2, %ecx
	movq	-200(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -188(%rbp)        # 4-byte Spill
.LBB0_45:                               # %cond.end.254
	movl	-188(%rbp), %eax        # 4-byte Reload
	movabsq	$encode_coding_utf_8, %rcx
	movabsq	$decode_coding_utf_8, %rdx
	movabsq	$detect_coding_utf_8, %rsi
	movq	-16(%rbp), %rdi
	movl	%eax, 16(%rdi)
	movq	-16(%rbp), %rdi
	movq	%rsi, 592(%rdi)
	movq	-16(%rbp), %rsi
	movq	%rdx, 600(%rsi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 608(%rdx)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	andl	$16383, %eax            # imm = 0x3FFF
	orl	$3072, %eax             # imm = 0xC00
	movl	8(%rcx), %r8d
	andl	$16383, %eax            # imm = 0x3FFF
	andl	$-16384, %r8d           # imm = 0xFFFFFFFFFFFFC000
	orl	%eax, %r8d
	movl	%r8d, 8(%rcx)
	movq	-16(%rbp), %rcx
	cmpl	$0, 16(%rcx)
	jne	.LBB0_47
# BB#46:                                # %if.then.272
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$4096, %ecx             # imm = 0x1000
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_47:                               # %if.end.281
	jmp	.LBB0_86
.LBB0_48:                               # %if.else.282
	movl	$986, %edi              # imm = 0x3DA
	movq	-40(%rbp), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_55
# BB#49:                                # %if.then.286
	movl	$24, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB0_51
# BB#50:                                # %cond.true.292
	xorl	%eax, %eax
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB0_52
.LBB0_51:                               # %cond.false.293
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	movl	$2, %ecx
	movq	-224(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -212(%rbp)        # 4-byte Spill
.LBB0_52:                               # %cond.end.298
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	$25, %ecx
	movl	%ecx, %esi
	movq	-16(%rbp), %rdx
	movl	%eax, 16(%rdx)
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$202, %edi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$encode_coding_utf_16, %rdx
	movabsq	$decode_coding_utf_16, %rsi
	movabsq	$detect_coding_utf_16, %r8
	movl	$1, %ecx
	xorl	%edi, %edi
	movq	-232(%rbp), %r9         # 8-byte Reload
	cmpq	%rax, %r9
	cmovel	%edi, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movq	%r8, 592(%rax)
	movq	-16(%rbp), %rax
	movq	%rsi, 600(%rax)
	movq	-16(%rbp), %rax
	movq	%rdx, 608(%rax)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$3072, %ecx             # imm = 0xC00
	movl	8(%rax), %edi
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edi           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edi
	movl	%edi, 8(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jne	.LBB0_54
# BB#53:                                # %if.then.326
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$4096, %ecx             # imm = 0x1000
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_54:                               # %if.end.335
	jmp	.LBB0_85
.LBB0_55:                               # %if.else.336
	movl	$246, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_57
# BB#56:                                # %if.then.340
	movabsq	$encode_coding_ccl, %rax
	movabsq	$decode_coding_ccl, %rcx
	movabsq	$detect_coding_ccl, %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 592(%rsi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 600(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rax, 608(%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edi
	andl	$16383, %edi            # imm = 0x3FFF
	orl	$3584, %edi             # imm = 0xE00
	movl	8(%rax), %r8d
	andl	$16383, %edi            # imm = 0x3FFF
	andl	$-16384, %r8d           # imm = 0xFFFFFFFFFFFFC000
	orl	%edi, %r8d
	movl	%r8d, 8(%rax)
	jmp	.LBB0_84
.LBB0_57:                               # %if.else.352
	movl	$361, %edi              # imm = 0x169
	movq	-40(%rbp), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_72
# BB#58:                                # %if.then.356
	movl	$26, %eax
	movl	%eax, %esi
	movabsq	$encode_coding_emacs_mule, %rcx
	movabsq	$decode_coding_emacs_mule, %rdx
	movabsq	$detect_coding_emacs_mule, %rdi
	movq	-16(%rbp), %r8
	movq	%rdi, 592(%r8)
	movq	-16(%rbp), %rdi
	movq	%rdx, 600(%rdi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 608(%rdx)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	andl	$16383, %eax            # imm = 0x3FFF
	orl	$3072, %eax             # imm = 0xC00
	movl	8(%rcx), %r9d
	andl	$16383, %eax            # imm = 0x3FFF
	andl	$-16384, %r9d           # imm = 0xFFFFFFFFFFFFC000
	orl	%eax, %r9d
	movl	%r9d, 8(%rcx)
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB0_71
# BB#59:                                # %land.lhs.true
	movl	$4, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	cmpq	Vemacs_mule_charset_list, %rax
	je	.LBB0_71
# BB#60:                                # %if.then.375
	movl	$0, -76(%rbp)
	movq	Vemacs_mule_charset_list, %rax
	movq	%rax, -64(%rbp)
.LBB0_61:                               # %for.cond.378
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB0_66
# BB#62:                                # %for.body.383
                                        #   in Loop: Header=BB0_61 Depth=1
	movslq	-76(%rbp), %rax
	movq	-64(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jge	.LBB0_64
# BB#63:                                # %if.then.389
                                        #   in Loop: Header=BB0_61 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -76(%rbp)
.LBB0_64:                               # %if.end.394
                                        #   in Loop: Header=BB0_61 Depth=1
	jmp	.LBB0_65
.LBB0_65:                               # %for.inc.395
                                        #   in Loop: Header=BB0_61 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB0_61
.LBB0_66:                               # %for.end.397
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	callq	make_uninit_string
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	SDATA
	movl	$255, %esi
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	%rax, %rdi
	callq	memset
	movq	Vemacs_mule_charset_list, %rax
	movq	%rax, -64(%rbp)
.LBB0_67:                               # %for.cond.403
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB0_70
# BB#68:                                # %for.body.408
                                        #   in Loop: Header=BB0_67 Depth=1
	xorl	%edx, %edx
	movq	-72(%rbp), %rdi
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	SSET
# BB#69:                                # %for.inc.412
                                        #   in Loop: Header=BB0_67 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB0_67
.LBB0_70:                               # %for.end.416
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-72(%rbp), %rdi
	callq	SDATA
	movq	-16(%rbp), %rcx
	movq	%rax, 352(%rcx)
.LBB0_71:                               # %if.end.420
	movq	-16(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-16(%rbp), %rax
	movl	$4, 20(%rax)
	jmp	.LBB0_83
.LBB0_72:                               # %if.else.428
	movl	$861, %edi              # imm = 0x35D
	movq	-40(%rbp), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_74
# BB#73:                                # %if.then.432
	movabsq	$encode_coding_sjis, %rax
	movabsq	$decode_coding_sjis, %rcx
	movabsq	$detect_coding_sjis, %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 592(%rsi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 600(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rax, 608(%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edi
	andl	$16383, %edi            # imm = 0x3FFF
	orl	$3072, %edi             # imm = 0xC00
	movl	8(%rax), %r8d
	andl	$16383, %edi            # imm = 0x3FFF
	andl	$-16384, %r8d           # imm = 0xFFFFFFFFFFFFC000
	orl	%edi, %r8d
	movl	%r8d, 8(%rax)
	jmp	.LBB0_82
.LBB0_74:                               # %if.else.444
	movl	$203, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB0_76
# BB#75:                                # %if.then.448
	movabsq	$encode_coding_big5, %rax
	movabsq	$decode_coding_big5, %rcx
	movabsq	$detect_coding_big5, %rdx
	movq	-16(%rbp), %rsi
	movq	%rdx, 592(%rsi)
	movq	-16(%rbp), %rdx
	movq	%rcx, 600(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rax, 608(%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edi
	andl	$16383, %edi            # imm = 0x3FFF
	orl	$3072, %edi             # imm = 0xC00
	movl	8(%rax), %r8d
	andl	$16383, %edi            # imm = 0x3FFF
	andl	$-16384, %r8d           # imm = 0xFFFFFFFFFFFFC000
	orl	%edi, %r8d
	movl	%r8d, 8(%rax)
	jmp	.LBB0_81
.LBB0_76:                               # %if.else.460
	movl	$973, %edi              # imm = 0x3CD
	movabsq	$encode_coding_raw_text, %rax
	movabsq	$decode_coding_raw_text, %rcx
	movq	-16(%rbp), %rdx
	movq	$0, 592(%rdx)
	movq	-16(%rbp), %rdx
	movq	%rcx, 600(%rdx)
	movq	-16(%rbp), %rcx
	movq	%rax, 608(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-280(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB0_80
# BB#77:                                # %if.then.467
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$1024, %ecx             # imm = 0x400
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	movq	-32(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB0_79
# BB#78:                                # %if.then.477
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	orl	$2048, %ecx             # imm = 0x800
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB0_79:                               # %if.end.486
	jmp	.LBB0_80
.LBB0_80:                               # %if.end.487
	jmp	.LBB0_81
.LBB0_81:                               # %if.end.488
	jmp	.LBB0_82
.LBB0_82:                               # %if.end.489
	jmp	.LBB0_83
.LBB0_83:                               # %if.end.490
	jmp	.LBB0_84
.LBB0_84:                               # %if.end.491
	jmp	.LBB0_85
.LBB0_85:                               # %if.end.492
	jmp	.LBB0_86
.LBB0_86:                               # %if.end.493
	jmp	.LBB0_87
.LBB0_87:                               # %if.end.494
	jmp	.LBB0_88
.LBB0_88:                               # %if.end.495
	jmp	.LBB0_89
.LBB0_89:                               # %if.end.496
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	retq
.Lfunc_end0:
	.size	setup_coding_system, .Lfunc_end0-setup_coding_system
	.cfi_endproc

	.globl	Fcheck_coding_system
	.align	16, 0x90
	.type	Fcheck_coding_system,@function
Fcheck_coding_system:                   # @Fcheck_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp3:
	.cfi_def_cfa_offset 16
.Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp5:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$277, %eax              # imm = 0x115
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB1_2
# BB#1:                                 # %if.then
	movl	$277, %edi              # imm = 0x115
	movq	-8(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movq	-16(%rbp), %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	safe_eval
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB1_2:                                # %if.end
	movq	-8(%rbp), %rdi
	callq	Fcoding_system_p
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB1_4
# BB#3:                                 # %if.then.10
	movq	-8(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
.LBB1_4:                                # %if.end.11
	movl	$278, %edi              # imm = 0x116
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	xsignal1
.Lfunc_end1:
	.size	Fcheck_coding_system, .Lfunc_end1-Fcheck_coding_system
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_raw_text,@function
decode_coding_raw_text:                 # @decode_coding_raw_text
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp6:
	.cfi_def_cfa_offset 16
.Ltmp7:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp8:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	testb	$1, globals+3389
	movb	%cl, -10(%rbp)          # 1-byte Spill
	jne	.LBB2_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -10(%rbp)          # 1-byte Spill
.LBB2_2:                                # %land.end
	movb	-10(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %edx
	andl	$-2097153, %edx         # imm = 0xFFFFFFFFFFDFFFFF
	orl	$2097152, %edx          # imm = 0x200000
	movl	%edx, 8(%rcx)
	movq	-8(%rbp), %rcx
	movq	432(%rcx), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, 408(%rsi)
	movq	-8(%rbp), %rcx
	movq	440(%rcx), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, 400(%rsi)
	testb	$1, -9(%rbp)
	je	.LBB2_5
# BB#3:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	440(%rax), %rax
	subq	$1, %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$13, %edx
	jne	.LBB2_5
# BB#4:                                 # %if.then
	movl	$1, %esi
	movq	-8(%rbp), %rax
	movq	408(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, 408(%rax)
	movq	-8(%rbp), %rax
	movq	400(%rax), %rcx
	addq	$-1, %rcx
	movq	%rcx, 400(%rax)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB2_6
.LBB2_5:                                # %if.else
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB2_6:                                # %if.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end2:
	.size	decode_coding_raw_text, .Lfunc_end2-decode_coding_raw_text
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_raw_text,@function
encode_coding_raw_text:                 # @encode_coding_raw_text
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp9:
	.cfi_def_cfa_offset 16
.Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp11:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB3_100
# BB#1:                                 # %if.then
	movl	$10, -64(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB3_73
# BB#2:                                 # %if.then.10
	jmp	.LBB3_3
.LBB3_3:                                # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB3_49 Depth 2
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB3_72
# BB#4:                                 # %while.body
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_5
.LBB3_5:                                # %do.body
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	-40(%rbp), %rax
	movslq	-64(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB3_7
# BB#6:                                 # %if.then.14
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-64(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB3_7:                                # %if.end
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_8
.LBB3_8:                                # %do.end
                                        #   in Loop: Header=BB3_3 Depth=1
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -24(%rbp)
	movl	(%rcx), %esi
	movl	%esi, -60(%rbp)
	testb	$1, %al
	jne	.LBB3_9
	jmp	.LBB3_10
.LBB3_9:                                # %cond.true
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB3_11
	jmp	.LBB3_14
.LBB3_10:                               # %cond.false
                                        #   in Loop: Header=BB3_3 Depth=1
	movslq	-60(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB3_14
.LBB3_11:                               # %if.then.25
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_12
.LBB3_12:                               # %do.body.26
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-60(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#13:                                # %do.end.29
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_71
.LBB3_14:                               # %if.else
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB3_37
# BB#15:                                # %if.then.32
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB3_17
# BB#16:                                # %cond.true.35
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB3_18
.LBB3_17:                               # %cond.false.36
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
.LBB3_18:                               # %cond.end
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, -60(%rbp)
# BB#19:                                # %do.body.37
                                        #   in Loop: Header=BB3_3 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB3_34
# BB#20:                                # %if.then.40
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -76(%rbp)
	cmpl	$128, -76(%rbp)
	jb	.LBB3_22
# BB#21:                                # %if.then.43
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-76(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -76(%rbp)
.LBB3_22:                               # %if.end.45
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_23
.LBB3_23:                               # %do.body.46
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$127, -76(%rbp)
	ja	.LBB3_25
# BB#24:                                # %if.then.49
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-76(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_32
.LBB3_25:                               # %if.else.52
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$2047, -76(%rbp)        # imm = 0x7FF
	ja	.LBB3_27
# BB#26:                                # %if.then.55
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-76(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_31
.LBB3_27:                               # %if.else.62
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$65535, -76(%rbp)       # imm = 0xFFFF
	ja	.LBB3_29
# BB#28:                                # %if.then.65
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-76(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_30
.LBB3_29:                               # %if.else.79
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-76(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB3_30:                               # %if.end.83
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_31
.LBB3_31:                               # %if.end.84
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_32
.LBB3_32:                               # %if.end.85
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_33
.LBB3_33:                               # %do.end.86
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_35
.LBB3_34:                               # %if.else.87
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB3_35:                               # %if.end.90
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_36
.LBB3_36:                               # %do.end.91
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_70
.LBB3_37:                               # %if.else.92
                                        #   in Loop: Header=BB3_3 Depth=1
	leaq	-81(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	%rax, -104(%rbp)
# BB#38:                                # %do.body.94
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$127, -60(%rbp)
	jg	.LBB3_40
# BB#39:                                # %if.then.97
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -104(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_47
.LBB3_40:                               # %if.else.100
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$2047, -60(%rbp)        # imm = 0x7FF
	jg	.LBB3_42
# BB#41:                                # %if.then.103
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -104(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -104(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_46
.LBB3_42:                               # %if.else.112
                                        #   in Loop: Header=BB3_3 Depth=1
	cmpl	$65535, -60(%rbp)       # imm = 0xFFFF
	jg	.LBB3_44
# BB#43:                                # %if.then.115
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %eax
	sarl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -104(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -104(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -104(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_45
.LBB3_44:                               # %if.else.129
                                        #   in Loop: Header=BB3_3 Depth=1
	movl	-60(%rbp), %edi
	movq	-104(%rbp), %rsi
	callq	char_string
	movq	-104(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -104(%rbp)
.LBB3_45:                               # %if.end.133
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_46
.LBB3_46:                               # %if.end.134
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_47
.LBB3_47:                               # %if.end.135
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_48
.LBB3_48:                               # %do.end.136
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_49
.LBB3_49:                               # %do.body.137
                                        #   Parent Loop BB3_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	jmp	.LBB3_50
.LBB3_50:                               # %do.body.138
                                        #   in Loop: Header=BB3_49 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB3_65
# BB#51:                                # %if.then.141
                                        #   in Loop: Header=BB3_49 Depth=2
	movq	-96(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -108(%rbp)
	cmpl	$128, -108(%rbp)
	jb	.LBB3_53
# BB#52:                                # %if.then.146
                                        #   in Loop: Header=BB3_49 Depth=2
	movl	-108(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -108(%rbp)
.LBB3_53:                               # %if.end.148
                                        #   in Loop: Header=BB3_49 Depth=2
	jmp	.LBB3_54
.LBB3_54:                               # %do.body.149
                                        #   in Loop: Header=BB3_49 Depth=2
	cmpl	$127, -108(%rbp)
	ja	.LBB3_56
# BB#55:                                # %if.then.152
                                        #   in Loop: Header=BB3_49 Depth=2
	movl	-108(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_63
.LBB3_56:                               # %if.else.155
                                        #   in Loop: Header=BB3_49 Depth=2
	cmpl	$2047, -108(%rbp)       # imm = 0x7FF
	ja	.LBB3_58
# BB#57:                                # %if.then.158
                                        #   in Loop: Header=BB3_49 Depth=2
	movl	-108(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_62
.LBB3_58:                               # %if.else.167
                                        #   in Loop: Header=BB3_49 Depth=2
	cmpl	$65535, -108(%rbp)      # imm = 0xFFFF
	ja	.LBB3_60
# BB#59:                                # %if.then.170
                                        #   in Loop: Header=BB3_49 Depth=2
	movl	-108(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_61
.LBB3_60:                               # %if.else.184
                                        #   in Loop: Header=BB3_49 Depth=2
	movl	-108(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB3_61:                               # %if.end.188
                                        #   in Loop: Header=BB3_49 Depth=2
	jmp	.LBB3_62
.LBB3_62:                               # %if.end.189
                                        #   in Loop: Header=BB3_49 Depth=2
	jmp	.LBB3_63
.LBB3_63:                               # %if.end.190
                                        #   in Loop: Header=BB3_49 Depth=2
	jmp	.LBB3_64
.LBB3_64:                               # %do.end.191
                                        #   in Loop: Header=BB3_49 Depth=2
	jmp	.LBB3_66
.LBB3_65:                               # %if.else.192
                                        #   in Loop: Header=BB3_49 Depth=2
	movq	-96(%rbp), %rax
	movb	(%rax), %cl
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%cl, (%rax)
.LBB3_66:                               # %if.end.194
                                        #   in Loop: Header=BB3_49 Depth=2
	jmp	.LBB3_67
.LBB3_67:                               # %do.end.195
                                        #   in Loop: Header=BB3_49 Depth=2
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#68:                                # %do.cond
                                        #   in Loop: Header=BB3_49 Depth=2
	movq	-96(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jb	.LBB3_49
# BB#69:                                # %do.end.199
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_70
.LBB3_70:                               # %if.end.200
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_71
.LBB3_71:                               # %if.end.201
                                        #   in Loop: Header=BB3_3 Depth=1
	jmp	.LBB3_3
.LBB3_72:                               # %while.end
	jmp	.LBB3_99
.LBB3_73:                               # %if.else.202
	jmp	.LBB3_74
.LBB3_74:                               # %while.cond.203
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB3_98
# BB#75:                                # %while.body.206
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_76
.LBB3_76:                               # %do.body.207
                                        #   in Loop: Header=BB3_74 Depth=1
	movq	-40(%rbp), %rax
	movslq	-64(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB3_78
# BB#77:                                # %if.then.212
                                        #   in Loop: Header=BB3_74 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-64(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-8(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB3_78:                               # %if.end.224
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_79
.LBB3_79:                               # %do.end.226
                                        #   in Loop: Header=BB3_74 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -60(%rbp)
# BB#80:                                # %do.body.228
                                        #   in Loop: Header=BB3_74 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB3_95
# BB#81:                                # %if.then.231
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	cmpl	$128, -124(%rbp)
	jb	.LBB3_83
# BB#82:                                # %if.then.235
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-124(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -124(%rbp)
.LBB3_83:                               # %if.end.237
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_84
.LBB3_84:                               # %do.body.238
                                        #   in Loop: Header=BB3_74 Depth=1
	cmpl	$127, -124(%rbp)
	ja	.LBB3_86
# BB#85:                                # %if.then.241
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_93
.LBB3_86:                               # %if.else.244
                                        #   in Loop: Header=BB3_74 Depth=1
	cmpl	$2047, -124(%rbp)       # imm = 0x7FF
	ja	.LBB3_88
# BB#87:                                # %if.then.247
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_92
.LBB3_88:                               # %if.else.256
                                        #   in Loop: Header=BB3_74 Depth=1
	cmpl	$65535, -124(%rbp)      # imm = 0xFFFF
	ja	.LBB3_90
# BB#89:                                # %if.then.259
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-124(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_91
.LBB3_90:                               # %if.else.273
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-124(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB3_91:                               # %if.end.277
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_92
.LBB3_92:                               # %if.end.278
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_93
.LBB3_93:                               # %if.end.279
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_94
.LBB3_94:                               # %do.end.281
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_96
.LBB3_95:                               # %if.else.282
                                        #   in Loop: Header=BB3_74 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB3_96:                               # %if.end.285
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_97
.LBB3_97:                               # %do.end.287
                                        #   in Loop: Header=BB3_74 Depth=1
	jmp	.LBB3_74
.LBB3_98:                               # %while.end.288
	jmp	.LBB3_99
.LBB3_99:                               # %if.end.289
	jmp	.LBB3_142
.LBB3_100:                              # %if.else.290
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB3_131
# BB#101:                               # %if.then.296
	movl	$5, -128(%rbp)
.LBB3_102:                              # %while.cond.298
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB3_130
# BB#103:                               # %while.body.301
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_104
.LBB3_104:                              # %do.body.302
                                        #   in Loop: Header=BB3_102 Depth=1
	movq	-40(%rbp), %rax
	movslq	-128(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB3_106
# BB#105:                               # %if.then.307
                                        #   in Loop: Header=BB3_102 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-128(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rdi
	movq	-136(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB3_106:                              # %if.end.319
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_107
.LBB3_107:                              # %do.end.321
                                        #   in Loop: Header=BB3_102 Depth=1
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -24(%rbp)
	movl	(%rcx), %esi
	movl	%esi, -60(%rbp)
	testb	$1, %al
	jne	.LBB3_108
	jmp	.LBB3_109
.LBB3_108:                              # %cond.true.323
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB3_110
	jmp	.LBB3_111
.LBB3_109:                              # %cond.false.327
                                        #   in Loop: Header=BB3_102 Depth=1
	movslq	-60(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB3_111
.LBB3_110:                              # %if.then.332
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_129
.LBB3_111:                              # %if.else.335
                                        #   in Loop: Header=BB3_102 Depth=1
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB3_116
# BB#112:                               # %if.then.338
                                        #   in Loop: Header=BB3_102 Depth=1
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB3_114
# BB#113:                               # %cond.true.341
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB3_115
.LBB3_114:                              # %cond.false.343
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB3_115:                              # %cond.end.345
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-152(%rbp), %eax        # 4-byte Reload
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_128
.LBB3_116:                              # %if.else.349
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_117
.LBB3_117:                              # %do.body.350
                                        #   in Loop: Header=BB3_102 Depth=1
	cmpl	$127, -60(%rbp)
	jg	.LBB3_119
# BB#118:                               # %if.then.353
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_126
.LBB3_119:                              # %if.else.356
                                        #   in Loop: Header=BB3_102 Depth=1
	cmpl	$2047, -60(%rbp)        # imm = 0x7FF
	jg	.LBB3_121
# BB#120:                               # %if.then.359
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_125
.LBB3_121:                              # %if.else.368
                                        #   in Loop: Header=BB3_102 Depth=1
	cmpl	$65535, -60(%rbp)       # imm = 0xFFFF
	jg	.LBB3_123
# BB#122:                               # %if.then.371
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %eax
	sarl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB3_124
.LBB3_123:                              # %if.else.385
                                        #   in Loop: Header=BB3_102 Depth=1
	movl	-60(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB3_124:                              # %if.end.389
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_125
.LBB3_125:                              # %if.end.390
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_126
.LBB3_126:                              # %if.end.391
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_127
.LBB3_127:                              # %do.end.393
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_128
.LBB3_128:                              # %if.end.394
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_129
.LBB3_129:                              # %if.end.395
                                        #   in Loop: Header=BB3_102 Depth=1
	jmp	.LBB3_102
.LBB3_130:                              # %while.end.396
	jmp	.LBB3_141
.LBB3_131:                              # %if.else.397
	jmp	.LBB3_132
.LBB3_132:                              # %do.body.398
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB3_134
# BB#133:                               # %if.then.406
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-8(%rbp), %rdi
	movq	-144(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB3_134:                              # %if.end.421
	jmp	.LBB3_135
.LBB3_135:                              # %do.end.423
	jmp	.LBB3_136
.LBB3_136:                              # %while.cond.424
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	cmpq	-32(%rbp), %rdx
	movb	%cl, -153(%rbp)         # 1-byte Spill
	jae	.LBB3_138
# BB#137:                               # %land.rhs
                                        #   in Loop: Header=BB3_136 Depth=1
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	setb	%cl
	movb	%cl, -153(%rbp)         # 1-byte Spill
.LBB3_138:                              # %land.end
                                        #   in Loop: Header=BB3_136 Depth=1
	movb	-153(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_139
	jmp	.LBB3_140
.LBB3_139:                              # %while.body.429
                                        #   in Loop: Header=BB3_136 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movb	%dl, %sil
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%sil, (%rax)
	jmp	.LBB3_136
.LBB3_140:                              # %while.end.433
	jmp	.LBB3_141
.LBB3_141:                              # %if.end.434
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	496(%rcx), %rcx
	movq	-8(%rbp), %rdx
	addq	384(%rdx), %rcx
	subq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB3_142:                              # %if.end.441
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-56(%rbp), %rdi
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rdi
	movq	%rdi, 392(%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	subq	%rdi, %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 384(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end3:
	.size	encode_coding_raw_text, .Lfunc_end3-encode_coding_raw_text
	.cfi_endproc

	.align	16, 0x90
	.type	encode_inhibit_flag,@function
encode_inhibit_flag:                    # @encode_inhibit_flag
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp12:
	.cfi_def_cfa_offset 16
.Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp14:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -16(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB4_2
# BB#1:                                 # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -20(%rbp)         # 4-byte Spill
	jmp	.LBB4_3
.LBB4_2:                                # %cond.false
	movl	$901, %edi              # imm = 0x385
	movq	-8(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	%edi, -20(%rbp)         # 4-byte Spill
.LBB4_3:                                # %cond.end
	movl	-20(%rbp), %eax         # 4-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end4:
	.size	encode_inhibit_flag, .Lfunc_end4-encode_inhibit_flag
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_iso_2022,@function
detect_coding_iso_2022:                 # @detect_coding_iso_2022
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp15:
	.cfi_def_cfa_offset 16
.Ltmp16:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp17:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -49(%rbp)
	movb	$0, -50(%rbp)
	movq	$0, -72(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -84(%rbp)
	movl	$-1, -88(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %eax
	orl	$63, %eax
	movl	%eax, (%rsi)
	movl	$0, -76(%rbp)
.LBB5_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$5, -76(%rbp)
	jg	.LBB5_9
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB5_1 Depth=1
	movabsq	$coding_categories, %rax
	movslq	-76(%rbp), %rcx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	cmpq	$0, (%rax)
	jge	.LBB5_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB5_1 Depth=1
	jmp	.LBB5_8
.LBB5_4:                                # %if.end
                                        #   in Loop: Header=BB5_1 Depth=1
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -104(%rbp)
	movq	-96(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1048576, %ecx          # imm = 0x100000
	cmpl	$0, %ecx
	je	.LBB5_7
# BB#5:                                 # %land.lhs.true
                                        #   in Loop: Header=BB5_1 Depth=1
	movl	$4, %eax
	movl	%eax, %esi
	movq	-104(%rbp), %rdi
	callq	AREF
	cmpq	Viso_2022_charset_list, %rax
	je	.LBB5_7
# BB#6:                                 # %if.then.9
                                        #   in Loop: Header=BB5_1 Depth=1
	movq	-104(%rbp), %rdi
	callq	setup_iso_safe_charsets
.LBB5_7:                                # %if.end.10
                                        #   in Loop: Header=BB5_1 Depth=1
	movl	$15, %eax
	movl	%eax, %esi
	movq	-104(%rbp), %rdi
	callq	AREF
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	SCHARS
	subq	$1, %rax
	movl	%eax, %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, 12(%rax)
	movq	-112(%rbp), %rdi
	callq	SDATA
	movq	-96(%rbp), %rsi
	movq	%rax, 352(%rsi)
.LBB5_8:                                # %for.inc
                                        #   in Loop: Header=BB5_1 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB5_1
.LBB5_9:                                # %for.end
	movq	-16(%rbp), %rax
	movq	360(%rax), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB5_10:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_159 Depth 2
	cmpl	$63, -80(%rbp)
	je	.LBB5_194
# BB#11:                                # %while.body
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#12:                                # %do.body
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB5_16
# BB#13:                                # %if.then.19
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB5_15
# BB#14:                                # %if.then.22
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_15:                               # %if.end.23
	jmp	.LBB5_195
.LBB5_16:                               # %if.end.24
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -60(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB5_22
# BB#17:                                # %land.lhs.true.28
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB5_22
# BB#18:                                # %if.then.31
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB5_20
# BB#19:                                # %if.then.35
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_21
.LBB5_20:                               # %if.else
                                        #   in Loop: Header=BB5_10 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -60(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_21:                               # %if.end.43
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_22
.LBB5_22:                               # %if.end.44
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
# BB#23:                                # %do.end
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	addl	$-14, %ecx
	subl	$2, %ecx
	movl	%eax, -124(%rbp)        # 4-byte Spill
	movl	%ecx, -128(%rbp)        # 4-byte Spill
	jb	.LBB5_136
	jmp	.LBB5_197
.LBB5_197:                              # %do.end
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-124(%rbp), %eax        # 4-byte Reload
	subl	$27, %eax
	movl	%eax, -132(%rbp)        # 4-byte Spill
	je	.LBB5_24
	jmp	.LBB5_198
.LBB5_198:                              # %do.end
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-124(%rbp), %eax        # 4-byte Reload
	addl	$-142, %eax
	subl	$2, %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
	jb	.LBB5_140
	jmp	.LBB5_199
.LBB5_199:                              # %do.end
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-124(%rbp), %eax        # 4-byte Reload
	subl	$155, %eax
	movl	%eax, -140(%rbp)        # 4-byte Spill
	je	.LBB5_139
	jmp	.LBB5_149
.LBB5_24:                               # %sw.bb
                                        #   in Loop: Header=BB5_10 Depth=1
	testb	$1, globals+3392
	je	.LBB5_26
# BB#25:                                # %if.then.47
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_26:                               # %if.end.48
                                        #   in Loop: Header=BB5_10 Depth=1
	movb	$0, -50(%rbp)
# BB#27:                                # %do.body.49
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB5_31
# BB#28:                                # %if.then.52
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB5_30
# BB#29:                                # %if.then.55
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_30:                               # %if.end.56
	jmp	.LBB5_195
.LBB5_31:                               # %if.end.57
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -60(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB5_37
# BB#32:                                # %land.lhs.true.62
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB5_37
# BB#33:                                # %if.then.65
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB5_35
# BB#34:                                # %if.then.69
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_36
.LBB5_35:                               # %if.else.75
                                        #   in Loop: Header=BB5_10 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -60(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_36:                               # %if.end.79
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_37
.LBB5_37:                               # %if.end.80
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
# BB#38:                                # %do.end.82
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$78, -60(%rbp)
	je	.LBB5_40
# BB#39:                                # %lor.lhs.false
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$79, -60(%rbp)
	jne	.LBB5_41
.LBB5_40:                               # %if.then.87
                                        #   in Loop: Header=BB5_10 Depth=1
	movb	$1, -50(%rbp)
	movl	-80(%rbp), %eax
	orl	$15, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB5_135
.LBB5_41:                               # %if.else.89
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$49, -60(%rbp)
	jne	.LBB5_46
# BB#42:                                # %if.then.92
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB5_44
# BB#43:                                # %lor.lhs.false.95
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$16, -88(%rbp)
	jle	.LBB5_45
.LBB5_44:                               # %if.then.98
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_45:                               # %if.end.99
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	$-1, -88(%rbp)
	movl	-84(%rbp), %eax
	orl	$63, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_134
.LBB5_46:                               # %if.else.101
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$48, -60(%rbp)
	jl	.LBB5_49
# BB#47:                                # %land.lhs.true.104
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$52, -60(%rbp)
	jg	.LBB5_49
# BB#48:                                # %if.then.107
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	$0, -88(%rbp)
	jmp	.LBB5_133
.LBB5_49:                               # %if.else.108
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$40, -60(%rbp)
	jl	.LBB5_70
# BB#50:                                # %land.lhs.true.111
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$47, -60(%rbp)
	jg	.LBB5_70
# BB#51:                                # %if.then.114
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_52
.LBB5_52:                               # %do.body.115
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB5_56
# BB#53:                                # %if.then.118
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB5_55
# BB#54:                                # %if.then.121
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_55:                               # %if.end.122
	jmp	.LBB5_195
.LBB5_56:                               # %if.end.123
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -64(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB5_62
# BB#57:                                # %land.lhs.true.128
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-64(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB5_62
# BB#58:                                # %if.then.131
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-64(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB5_60
# BB#59:                                # %if.then.135
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-64(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB5_61
.LBB5_60:                               # %if.else.141
                                        #   in Loop: Header=BB5_10 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -64(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_61:                               # %if.end.145
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_62
.LBB5_62:                               # %if.end.146
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
# BB#63:                                # %do.end.148
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$32, -64(%rbp)
	jl	.LBB5_66
# BB#64:                                # %lor.lhs.false.151
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -64(%rbp)
	jge	.LBB5_66
# BB#65:                                # %lor.lhs.false.154
                                        #   in Loop: Header=BB5_10 Depth=1
	movabsq	$iso_charset_table, %rax
	movslq	-64(%rbp), %rcx
	cmpl	$44, -60(%rbp)
	setge	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movslq	%esi, %rdi
	shlq	$9, %rdi
	addq	%rdi, %rax
	movl	(%rax,%rcx,4), %esi
	movl	%esi, -56(%rbp)
	cmpl	$0, %esi
	jge	.LBB5_69
.LBB5_66:                               # %if.then.163
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -64(%rbp)
	jl	.LBB5_68
# BB#67:                                # %if.then.166
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
.LBB5_68:                               # %if.end.168
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_69:                               # %if.end.169
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_116
.LBB5_70:                               # %if.else.170
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$36, -60(%rbp)
	jne	.LBB5_112
# BB#71:                                # %if.then.173
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_72
.LBB5_72:                               # %do.body.174
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB5_76
# BB#73:                                # %if.then.177
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB5_75
# BB#74:                                # %if.then.180
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_75:                               # %if.end.181
	jmp	.LBB5_195
.LBB5_76:                               # %if.end.182
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -60(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB5_82
# BB#77:                                # %land.lhs.true.187
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB5_82
# BB#78:                                # %if.then.190
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB5_80
# BB#79:                                # %if.then.194
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-60(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_81
.LBB5_80:                               # %if.else.200
                                        #   in Loop: Header=BB5_10 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -60(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_81:                               # %if.end.204
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_82
.LBB5_82:                               # %if.end.205
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
# BB#83:                                # %do.end.207
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$64, -60(%rbp)
	jl	.LBB5_86
# BB#84:                                # %land.lhs.true.210
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$66, -60(%rbp)
	jg	.LBB5_86
# BB#85:                                # %if.then.213
                                        #   in Loop: Header=BB5_10 Depth=1
	movslq	-60(%rbp), %rax
	movl	iso_charset_table+1024(,%rax,4), %ecx
	movl	%ecx, -56(%rbp)
	jmp	.LBB5_111
.LBB5_86:                               # %if.else.216
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$40, -60(%rbp)
	jl	.LBB5_107
# BB#87:                                # %land.lhs.true.219
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$47, -60(%rbp)
	jg	.LBB5_107
# BB#88:                                # %if.then.222
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_89
.LBB5_89:                               # %do.body.223
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB5_93
# BB#90:                                # %if.then.226
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB5_92
# BB#91:                                # %if.then.229
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_92:                               # %if.end.230
	jmp	.LBB5_195
.LBB5_93:                               # %if.end.231
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -64(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB5_99
# BB#94:                                # %land.lhs.true.236
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-64(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB5_99
# BB#95:                                # %if.then.239
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-64(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB5_97
# BB#96:                                # %if.then.243
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-64(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB5_98
.LBB5_97:                               # %if.else.249
                                        #   in Loop: Header=BB5_10 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -64(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_98:                               # %if.end.253
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_99
.LBB5_99:                               # %if.end.254
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
# BB#100:                               # %do.end.256
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$32, -64(%rbp)
	jl	.LBB5_103
# BB#101:                               # %lor.lhs.false.259
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -64(%rbp)
	jge	.LBB5_103
# BB#102:                               # %lor.lhs.false.262
                                        #   in Loop: Header=BB5_10 Depth=1
	movabsq	$iso_charset_table, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-64(%rbp), %rcx
	cmpl	$44, -60(%rbp)
	setge	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movslq	%esi, %rdi
	shlq	$9, %rdi
	addq	%rdi, %rax
	movl	(%rax,%rcx,4), %esi
	movl	%esi, -56(%rbp)
	cmpl	$0, %esi
	jge	.LBB5_106
.LBB5_103:                              # %if.then.271
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -64(%rbp)
	jl	.LBB5_105
# BB#104:                               # %if.then.274
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
.LBB5_105:                              # %if.end.276
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_106:                              # %if.end.277
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_110
.LBB5_107:                              # %if.else.278
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -60(%rbp)
	jl	.LBB5_109
# BB#108:                               # %if.then.281
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
.LBB5_109:                              # %if.end.283
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_110:                              # %if.end.284
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_111
.LBB5_111:                              # %if.end.285
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_115
.LBB5_112:                              # %if.else.286
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -60(%rbp)
	jl	.LBB5_114
# BB#113:                               # %if.then.289
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
.LBB5_114:                              # %if.end.291
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_115:                              # %if.end.292
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_116
.LBB5_116:                              # %if.end.293
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$12, %eax
	movl	%eax, -80(%rbp)
	movl	-56(%rbp), %eax
	cmpl	coding_categories+12, %eax
	jg	.LBB5_119
# BB#117:                               # %land.lhs.true.297
                                        #   in Loop: Header=BB5_10 Depth=1
	movslq	-56(%rbp), %rax
	movq	coding_categories+352, %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	je	.LBB5_119
# BB#118:                               # %if.then.303
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_120
.LBB5_119:                              # %if.else.305
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -80(%rbp)
.LBB5_120:                              # %if.end.307
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-56(%rbp), %eax
	cmpl	coding_categories+628, %eax
	jg	.LBB5_123
# BB#121:                               # %land.lhs.true.310
                                        #   in Loop: Header=BB5_10 Depth=1
	movslq	-56(%rbp), %rax
	movq	coding_categories+968, %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	je	.LBB5_123
# BB#122:                               # %if.then.316
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_124
.LBB5_123:                              # %if.else.318
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -80(%rbp)
.LBB5_124:                              # %if.end.320
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-56(%rbp), %eax
	cmpl	coding_categories+2476, %eax
	jg	.LBB5_127
# BB#125:                               # %land.lhs.true.323
                                        #   in Loop: Header=BB5_10 Depth=1
	movslq	-56(%rbp), %rax
	movq	coding_categories+2816, %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	je	.LBB5_127
# BB#126:                               # %if.then.329
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$16, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_128
.LBB5_127:                              # %if.else.331
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$16, %eax
	movl	%eax, -80(%rbp)
.LBB5_128:                              # %if.end.333
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-56(%rbp), %eax
	cmpl	coding_categories+3092, %eax
	jg	.LBB5_131
# BB#129:                               # %land.lhs.true.336
                                        #   in Loop: Header=BB5_10 Depth=1
	movslq	-56(%rbp), %rax
	movq	coding_categories+3432, %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	je	.LBB5_131
# BB#130:                               # %if.then.342
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$32, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_132
.LBB5_131:                              # %if.else.344
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$32, %eax
	movl	%eax, -80(%rbp)
.LBB5_132:                              # %if.end.346
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_133
.LBB5_133:                              # %if.end.347
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_134
.LBB5_134:                              # %if.end.348
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_135
.LBB5_135:                              # %if.end.349
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_136:                              # %sw.bb.350
                                        #   in Loop: Header=BB5_10 Depth=1
	testb	$1, globals+3392
	je	.LBB5_138
# BB#137:                               # %if.then.352
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_138:                              # %if.end.353
                                        #   in Loop: Header=BB5_10 Depth=1
	movb	$0, -50(%rbp)
	movl	-80(%rbp), %eax
	orl	$15, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB5_193
.LBB5_139:                              # %sw.bb.355
                                        #   in Loop: Header=BB5_10 Depth=1
	movb	$0, -50(%rbp)
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
	movl	-84(%rbp), %eax
	orl	$32, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_186
.LBB5_140:                              # %sw.bb.358
                                        #   in Loop: Header=BB5_10 Depth=1
	testb	$1, globals+3392
	je	.LBB5_142
# BB#141:                               # %if.then.360
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_142:                              # %if.end.361
                                        #   in Loop: Header=BB5_10 Depth=1
	movb	$0, -50(%rbp)
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
	movl	coding_categories+1248, %eax
	andl	$32, %eax
	cmpl	$0, %eax
	je	.LBB5_144
# BB#143:                               # %if.then.365
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -84(%rbp)
	movb	$1, -50(%rbp)
.LBB5_144:                              # %if.end.367
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	coding_categories+1864, %eax
	andl	$32, %eax
	cmpl	$0, %eax
	je	.LBB5_146
# BB#145:                               # %if.then.370
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -84(%rbp)
	movb	$1, -50(%rbp)
.LBB5_146:                              # %if.end.372
                                        #   in Loop: Header=BB5_10 Depth=1
	testb	$1, -50(%rbp)
	je	.LBB5_148
# BB#147:                               # %if.then.374
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_148:                              # %if.end.375
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_186
.LBB5_149:                              # %sw.default
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$0, -60(%rbp)
	jge	.LBB5_151
# BB#150:                               # %if.then.378
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_10
.LBB5_151:                              # %if.end.379
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$128, -60(%rbp)
	jge	.LBB5_155
# BB#152:                               # %if.then.382
                                        #   in Loop: Header=BB5_10 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB5_154
# BB#153:                               # %if.then.385
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
.LBB5_154:                              # %if.end.387
                                        #   in Loop: Header=BB5_10 Depth=1
	movb	$0, -50(%rbp)
	jmp	.LBB5_193
.LBB5_155:                              # %if.end.388
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$19, %eax
	movl	%eax, -80(%rbp)
	cmpl	$160, -60(%rbp)
	jl	.LBB5_185
# BB#156:                               # %if.then.392
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -84(%rbp)
	testb	$1, -50(%rbp)
	jne	.LBB5_184
# BB#157:                               # %land.lhs.true.395
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	jne	.LBB5_184
# BB#158:                               # %if.then.398
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	$1, -120(%rbp)
.LBB5_159:                              # %while.cond.399
                                        #   Parent Loop BB5_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jae	.LBB5_175
# BB#160:                               # %while.body.402
                                        #   in Loop: Header=BB5_159 Depth=2
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#161:                               # %do.body.403
                                        #   in Loop: Header=BB5_159 Depth=2
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB5_165
# BB#162:                               # %if.then.406
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB5_164
# BB#163:                               # %if.then.409
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_164:                              # %if.end.410
	jmp	.LBB5_195
.LBB5_165:                              # %if.end.411
                                        #   in Loop: Header=BB5_159 Depth=2
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -60(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB5_171
# BB#166:                               # %land.lhs.true.416
                                        #   in Loop: Header=BB5_159 Depth=2
	movl	-60(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB5_171
# BB#167:                               # %if.then.419
                                        #   in Loop: Header=BB5_159 Depth=2
	movl	-60(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB5_169
# BB#168:                               # %if.then.423
                                        #   in Loop: Header=BB5_159 Depth=2
	movl	-60(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB5_170
.LBB5_169:                              # %if.else.429
                                        #   in Loop: Header=BB5_159 Depth=2
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -60(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB5_170:                              # %if.end.433
                                        #   in Loop: Header=BB5_159 Depth=2
	jmp	.LBB5_171
.LBB5_171:                              # %if.end.434
                                        #   in Loop: Header=BB5_159 Depth=2
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
# BB#172:                               # %do.end.436
                                        #   in Loop: Header=BB5_159 Depth=2
	cmpl	$160, -60(%rbp)
	jge	.LBB5_174
# BB#173:                               # %if.then.439
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB5_175
.LBB5_174:                              # %if.end.440
                                        #   in Loop: Header=BB5_159 Depth=2
	movq	-120(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -120(%rbp)
	jmp	.LBB5_159
.LBB5_175:                              # %while.end
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-120(%rbp), %rax
	andq	$1, %rax
	cmpq	$0, %rax
	je	.LBB5_180
# BB#176:                               # %land.lhs.true.444
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jae	.LBB5_180
# BB#177:                               # %if.then.447
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -88(%rbp)
	jl	.LBB5_179
# BB#178:                               # %if.then.451
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	-120(%rbp), %rax
	movslq	-88(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, %edx
	movl	%edx, -88(%rbp)
.LBB5_179:                              # %if.end.454
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_183
.LBB5_180:                              # %if.else.455
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -88(%rbp)
	jl	.LBB5_182
# BB#181:                               # %if.then.459
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	$2, %eax
	movl	%eax, %ecx
	movq	-120(%rbp), %rax
	cqto
	idivq	%rcx
	movslq	-88(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, %esi
	movl	%esi, -88(%rbp)
.LBB5_182:                              # %if.end.463
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_183
.LBB5_183:                              # %if.end.464
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_184
.LBB5_184:                              # %if.end.465
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_193
.LBB5_185:                              # %if.end.466
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_186
.LBB5_186:                              # %check_extra_latin
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	globals+1256, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB5_187
	jmp	.LBB5_188
.LBB5_187:                              # %lor.lhs.false.468
                                        #   in Loop: Header=BB5_10 Depth=1
	movq	globals+1256, %rdi
	movslq	-60(%rbp), %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB5_189
.LBB5_188:                              # %if.then.474
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	$63, -80(%rbp)
	jmp	.LBB5_193
.LBB5_189:                              # %if.end.475
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	coding_categories+1248, %eax
	andl	$4096, %eax             # imm = 0x1000
	cmpl	$0, %eax
	je	.LBB5_191
# BB#190:                               # %if.then.478
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-84(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB5_192
.LBB5_191:                              # %if.else.480
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -80(%rbp)
.LBB5_192:                              # %if.end.482
                                        #   in Loop: Header=BB5_10 Depth=1
	movl	-80(%rbp), %eax
	orl	$8, %eax
	movl	%eax, -80(%rbp)
.LBB5_193:                              # %sw.epilog
                                        #   in Loop: Header=BB5_10 Depth=1
	jmp	.LBB5_10
.LBB5_194:                              # %while.end.484
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$63, %ecx
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB5_196
.LBB5_195:                              # %no_more_source
	movl	-80(%rbp), %eax
	movq	-24(%rbp), %rcx
	orl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movl	-80(%rbp), %edx
	xorl	$-1, %edx
	andl	%edx, %eax
	movq	-24(%rbp), %rcx
	orl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
	movb	$1, -1(%rbp)
.LBB5_196:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end5:
	.size	detect_coding_iso_2022, .Lfunc_end5-detect_coding_iso_2022
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_iso_2022,@function
decode_coding_iso_2022:                 # @decode_coding_iso_2022
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp18:
	.cfi_def_cfa_offset 16
.Ltmp19:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp20:
	.cfi_def_cfa_register %rbp
	subq	$480, %rsp              # imm = 0x1E0
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rax
	addq	400(%rax), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	addq	$-60, %rax
	movq	%rax, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -65(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_2
# BB#1:                                 # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB6_3
.LBB6_2:                                # %cond.false
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -244(%rbp)        # 4-byte Spill
.LBB6_3:                                # %cond.end
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 24(%rcx)
	jge	.LBB6_5
# BB#4:                                 # %cond.true.21
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -248(%rbp)        # 4-byte Spill
	jmp	.LBB6_6
.LBB6_5:                                # %cond.false.22
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -248(%rbp)        # 4-byte Spill
.LBB6_6:                                # %cond.end.32
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
	movq	-8(%rbp), %rcx
	addq	$16, %rcx
	addq	$36, %rcx
	movq	%rcx, -112(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	xorl	%edx, %edx
	movb	%dl, %r8b
	movq	%rax, -120(%rbp)
	movq	-8(%rbp), %rax
	movq	392(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -136(%rbp)
	movl	charset_ascii, %edx
	movl	%edx, -140(%rbp)
	testb	$1, globals+3389
	movb	%r8b, -249(%rbp)        # 1-byte Spill
	jne	.LBB6_8
# BB#7:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -249(%rbp)         # 1-byte Spill
.LBB6_8:                                # %land.end
	movb	-249(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -141(%rbp)
	movl	$-1, -148(%rbp)
	movq	-120(%rbp), %rdi
	callq	setup_iso_safe_charsets
	movl	$15, %ecx
	movl	%ecx, %esi
	movq	-120(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SDATA
	movq	-8(%rbp), %rsi
	movq	%rax, 352(%rsi)
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_16
# BB#9:                                 # %if.then
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-112(%rbp), %rcx
	movslq	12(%rcx), %rcx
	cmpq	%rcx, %rax
	jge	.LBB6_11
# BB#10:                                # %if.then.51
	callq	emacs_abort
.LBB6_11:                               # %if.end
	movl	$0, -152(%rbp)
.LBB6_12:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-152(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB6_15
# BB#13:                                # %for.body
                                        #   in Loop: Header=BB6_12 Depth=1
	movslq	-152(%rbp), %rax
	movq	-112(%rbp), %rcx
	movl	24(%rcx,%rax,4), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
# BB#14:                                # %for.inc
                                        #   in Loop: Header=BB6_12 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB6_12
.LBB6_15:                               # %for.end
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-8388609, %ecx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %ecx          # imm = 0x800000
	movl	%ecx, 8(%rax)
.LBB6_16:                               # %if.end.59
	jmp	.LBB6_17
.LBB6_17:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_171 Depth 2
                                        #     Child Loop BB6_687 Depth 2
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB6_21
# BB#18:                                # %if.then.62
	cmpl	$0, -148(%rbp)
	jl	.LBB6_20
# BB#19:                                # %if.then.65
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB6_20:                               # %if.end.67
	jmp	.LBB6_746
.LBB6_21:                               # %if.end.68
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -148(%rbp)
	jl	.LBB6_23
# BB#22:                                # %if.then.71
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-148(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	$-1, -148(%rbp)
	jmp	.LBB6_36
.LBB6_23:                               # %if.else
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_24
.LBB6_24:                               # %do.body
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_28
# BB#25:                                # %if.then.74
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_27
# BB#26:                                # %if.then.77
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_27:                               # %if.end.78
	jmp	.LBB6_747
.LBB6_28:                               # %if.end.79
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_34
# BB#29:                                # %land.lhs.true
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_34
# BB#30:                                # %if.then.85
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_32
# BB#31:                                # %if.then.89
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_33
.LBB6_32:                               # %if.else.93
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_33:                               # %if.end.96
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_34
.LBB6_34:                               # %if.end.97
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#35:                                # %do.end
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_36
.LBB6_36:                               # %if.end.99
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -156(%rbp)
	jge	.LBB6_38
# BB#37:                                # %if.then.102
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_38:                               # %if.end.103
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 44(%rax)
	jle	.LBB6_45
# BB#39:                                # %if.then.108
                                        #   in Loop: Header=BB6_17 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_40
	jmp	.LBB6_41
.LBB6_40:                               # %cond.true.109
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB6_42
	jmp	.LBB6_43
.LBB6_41:                               # %cond.false.112
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-156(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB6_43
.LBB6_42:                               # %cond.true.117
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	movl	%eax, -268(%rbp)        # 4-byte Spill
	jmp	.LBB6_44
.LBB6_43:                               # %cond.false.118
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -268(%rbp)        # 4-byte Spill
.LBB6_44:                               # %cond.end.120
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-268(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -128(%rbp)
	movq	-8(%rbp), %rcx
	movl	44(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, 44(%rcx)
	jmp	.LBB6_17
.LBB6_45:                               # %if.end.127
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB6_60
# BB#46:                                # %if.then.134
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$27, -156(%rbp)
	jne	.LBB6_53
# BB#47:                                # %if.then.137
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	cmpq	-24(%rbp), %rax
	jb	.LBB6_49
# BB#48:                                # %if.then.141
	jmp	.LBB6_747
.LBB6_49:                               # %if.end.142
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$27, (%rax)
	movq	-128(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -128(%rbp)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %edx
	cmpl	$37, %edx
	jne	.LBB6_52
# BB#50:                                # %land.lhs.true.149
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movzbl	1(%rax), %ecx
	cmpl	$64, %ecx
	jne	.LBB6_52
# BB#51:                                # %if.then.154
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -56(%rbp)
	movq	-128(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -128(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$37, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$64, (%rax)
	movq	-8(%rbp), %rax
	movb	48(%rax), %dl
	andb	$-5, %dl
	movb	%dl, 48(%rax)
.LBB6_52:                               # %if.end.165
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_59
.LBB6_53:                               # %if.else.166
                                        #   in Loop: Header=BB6_17 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_54
	jmp	.LBB6_55
.LBB6_54:                               # %cond.true.167
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB6_56
	jmp	.LBB6_57
.LBB6_55:                               # %cond.false.171
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-156(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB6_57
.LBB6_56:                               # %cond.true.176
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	movl	%eax, -272(%rbp)        # 4-byte Spill
	jmp	.LBB6_58
.LBB6_57:                               # %cond.false.177
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -272(%rbp)        # 4-byte Spill
.LBB6_58:                               # %cond.end.179
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-272(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -128(%rbp)
.LBB6_59:                               # %if.end.183
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_60:                               # %if.end.184
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$2, (%rax)
	je	.LBB6_62
# BB#61:                                # %lor.lhs.false
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$4, (%rax)
	jne	.LBB6_96
.LBB6_62:                               # %land.lhs.true.191
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$27, -156(%rbp)
	je	.LBB6_96
# BB#63:                                # %if.then.194
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_64
.LBB6_64:                               # %do.body.195
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	subl	$32, %eax
	movl	%eax, -168(%rbp)
	cmpl	$0, -168(%rbp)
	jge	.LBB6_66
# BB#65:                                # %if.then.199
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_66:                               # %if.end.200
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$81, -168(%rbp)
	jge	.LBB6_72
# BB#67:                                # %if.then.203
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$9, %eax
	movl	-168(%rbp), %ecx
	movl	%eax, -276(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-276(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -172(%rbp)
	movl	-168(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -176(%rbp)
	cmpl	$4, -172(%rbp)
	jne	.LBB6_69
# BB#68:                                # %if.then.206
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$10, -172(%rbp)
.LBB6_69:                               # %if.end.207
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$4, -176(%rbp)
	jne	.LBB6_71
# BB#70:                                # %if.then.210
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$10, -176(%rbp)
.LBB6_71:                               # %if.end.211
                                        #   in Loop: Header=BB6_17 Depth=1
	imull	$12, -172(%rbp), %eax
	addl	-176(%rbp), %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB6_92
.LBB6_72:                               # %if.else.213
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_73
.LBB6_73:                               # %do.body.214
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_77
# BB#74:                                # %if.then.217
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_76
# BB#75:                                # %if.then.220
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_76:                               # %if.end.221
	jmp	.LBB6_747
.LBB6_77:                               # %if.end.222
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -180(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_83
# BB#78:                                # %land.lhs.true.227
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-180(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_83
# BB#79:                                # %if.then.230
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-180(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_81
# BB#80:                                # %if.then.234
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-180(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -180(%rbp)
	jmp	.LBB6_82
.LBB6_81:                               # %if.else.240
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -180(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_82:                               # %if.end.244
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_83
.LBB6_83:                               # %if.end.245
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#84:                                # %do.end.247
                                        #   in Loop: Header=BB6_17 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_85
	jmp	.LBB6_86
.LBB6_85:                               # %cond.true.248
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-168(%rbp), %eax
	subl	$81, %eax
	addl	$0, %eax
	cmpl	$12, %eax
	jb	.LBB6_87
	jmp	.LBB6_90
.LBB6_86:                               # %cond.false.253
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-168(%rbp), %eax
	subl	$81, %eax
	movslq	%eax, %rcx
	addq	$0, %rcx
	cmpq	$12, %rcx
	jae	.LBB6_90
.LBB6_87:                               # %land.lhs.true.259
                                        #   in Loop: Header=BB6_17 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_88
	jmp	.LBB6_89
.LBB6_88:                               # %cond.true.260
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-180(%rbp), %eax
	subl	$32, %eax
	addl	$0, %eax
	cmpl	$12, %eax
	jb	.LBB6_91
	jmp	.LBB6_90
.LBB6_89:                               # %cond.false.265
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-180(%rbp), %eax
	subl	$32, %eax
	movslq	%eax, %rcx
	addq	$0, %rcx
	cmpq	$12, %rcx
	jb	.LBB6_91
.LBB6_90:                               # %if.then.271
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_91:                               # %if.end.272
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-168(%rbp), %eax
	subl	$81, %eax
	imull	$12, %eax, %eax
	movl	-180(%rbp), %ecx
	subl	$32, %ecx
	addl	%ecx, %eax
	movl	%eax, -168(%rbp)
	movl	-168(%rbp), %eax
	addl	$256, %eax              # imm = 0x100
	movl	%eax, -168(%rbp)
.LBB6_92:                               # %if.end.278
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_93
.LBB6_93:                               # %do.end.279
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_94
.LBB6_94:                               # %do.body.280
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-2, (%rax)
	movl	-168(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-112(%rbp), %rax
	movl	12(%rax), %edx
	addl	$2, %edx
	movl	%edx, 12(%rax)
	movq	-112(%rbp), %rax
	movl	(%rax), %edx
	addl	$-1, %edx
	movl	%edx, (%rax)
# BB#95:                                # %do.end.287
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_96:                               # %if.end.288
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-156(%rbp), %rax
	movl	iso_code_class(,%rax,4), %ecx
	movl	%ecx, %eax
	movq	%rax, %rdx
	subq	$12, %rdx
	movq	%rax, -288(%rbp)        # 8-byte Spill
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	ja	.LBB6_600
# BB#768:                               # %if.end.288
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	.LJTI6_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB6_97:                               # %sw.bb
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB6_99
# BB#98:                                # %lor.lhs.false.293
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-72(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	shrb	$1, %dl
	andb	$1, %dl
	testb	$1, %dl
	jne	.LBB6_100
.LBB6_99:                               # %if.then.300
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB6_101
.LBB6_100:                              # %if.else.303
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-72(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
.LBB6_101:                              # %if.end.306
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_601
.LBB6_102:                              # %sw.bb.307
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -72(%rbp)
	jge	.LBB6_104
# BB#103:                               # %if.then.310
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB6_105
.LBB6_104:                              # %if.else.313
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-72(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
.LBB6_105:                              # %if.end.316
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_601
.LBB6_106:                              # %sw.bb.317
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -76(%rbp)
	jl	.LBB6_109
# BB#107:                               # %lor.lhs.false.320
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	shrb	$1, %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB6_109
# BB#108:                               # %lor.lhs.false.328
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB6_110
.LBB6_109:                              # %if.then.333
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_110:                              # %if.end.334
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_111
.LBB6_111:                              # %sw.bb.335
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -76(%rbp)
	jge	.LBB6_113
# BB#112:                               # %if.then.338
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_113:                              # %if.end.339
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB6_601
.LBB6_114:                              # %sw.bb.342
                                        #   in Loop: Header=BB6_17 Depth=1
	testb	$1, -141(%rbp)
	je	.LBB6_129
# BB#115:                               # %land.lhs.true.345
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$13, -156(%rbp)
	jne	.LBB6_129
# BB#116:                               # %if.then.348
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_117
.LBB6_117:                              # %do.body.349
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_121
# BB#118:                               # %if.then.352
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_120
# BB#119:                               # %if.then.355
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_120:                              # %if.end.356
	jmp	.LBB6_747
.LBB6_121:                              # %if.end.357
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -148(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_127
# BB#122:                               # %land.lhs.true.362
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-148(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_127
# BB#123:                               # %if.then.365
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-148(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_125
# BB#124:                               # %if.then.369
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-148(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB6_126
.LBB6_125:                              # %if.else.375
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -148(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_126:                              # %if.end.379
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_127
.LBB6_127:                              # %if.end.380
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#128:                               # %do.end.382
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_129
.LBB6_129:                              # %if.end.383
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_130
.LBB6_130:                              # %do.body.384
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_132
# BB#131:                               # %if.then.388
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_132:                              # %if.end.392
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_133
.LBB6_133:                              # %do.end.393
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB6_601
.LBB6_134:                              # %sw.bb.396
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_135:                              # %sw.bb.397
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB6_137
# BB#136:                               # %lor.lhs.false.403
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 32(%rax)
	jge	.LBB6_138
.LBB6_137:                              # %if.then.410
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_138:                              # %if.end.411
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	$1, 20(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_140
# BB#139:                               # %cond.true.422
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -300(%rbp)        # 4-byte Spill
	jmp	.LBB6_141
.LBB6_140:                              # %cond.false.423
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -300(%rbp)        # 4-byte Spill
.LBB6_141:                              # %cond.end.433
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-300(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	jmp	.LBB6_17
.LBB6_142:                              # %sw.bb.435
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_144
# BB#143:                               # %if.then.441
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_144:                              # %if.end.442
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_146
# BB#145:                               # %cond.true.453
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -304(%rbp)        # 4-byte Spill
	jmp	.LBB6_147
.LBB6_146:                              # %cond.false.454
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -304(%rbp)        # 4-byte Spill
.LBB6_147:                              # %cond.end.464
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-304(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	jmp	.LBB6_17
.LBB6_148:                              # %sw.bb.466
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_150
# BB#149:                               # %if.then.472
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_150:                              # %if.end.473
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_151
.LBB6_151:                              # %sw.bb.474
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_153
# BB#152:                               # %if.then.480
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_153:                              # %if.end.481
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$78, -156(%rbp)
	jmp	.LBB6_171
.LBB6_154:                              # %sw.bb.482
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_156
# BB#155:                               # %if.then.488
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_156:                              # %if.end.489
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$79, -156(%rbp)
	jmp	.LBB6_171
.LBB6_157:                              # %sw.bb.490
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$91, -156(%rbp)
	jmp	.LBB6_171
.LBB6_158:                              # %sw.bb.491
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_159
.LBB6_159:                              # %do.body.492
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_163
# BB#160:                               # %if.then.495
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_162
# BB#161:                               # %if.then.498
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_162:                              # %if.end.499
	jmp	.LBB6_747
.LBB6_163:                              # %if.end.500
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_169
# BB#164:                               # %land.lhs.true.505
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_169
# BB#165:                               # %if.then.508
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_167
# BB#166:                               # %if.then.512
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_168
.LBB6_167:                              # %if.else.518
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_168:                              # %if.end.522
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_169
.LBB6_169:                              # %if.end.523
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#170:                               # %do.end.525
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_171
.LBB6_171:                              # %label_escape_sequence
                                        #   Parent Loop BB6_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	subl	$36, %ecx
	movl	%eax, -308(%rbp)        # 4-byte Spill
	movl	%ecx, -312(%rbp)        # 4-byte Spill
	je	.LBB6_214
	jmp	.LBB6_769
.LBB6_769:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$37, %eax
	movl	%eax, -316(%rbp)        # 4-byte Spill
	je	.LBB6_465
	jmp	.LBB6_770
.LBB6_770:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$38, %eax
	movl	%eax, -320(%rbp)        # 4-byte Spill
	je	.LBB6_172
	jmp	.LBB6_771
.LBB6_771:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$48, %eax
	movl	%eax, -324(%rbp)        # 4-byte Spill
	je	.LBB6_366
	jmp	.LBB6_772
.LBB6_772:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$49, %eax
	movl	%eax, -328(%rbp)        # 4-byte Spill
	je	.LBB6_398
	jmp	.LBB6_773
.LBB6_773:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	addl	$-50, %eax
	subl	$3, %eax
	movl	%eax, -332(%rbp)        # 4-byte Spill
	jb	.LBB6_366
	jmp	.LBB6_774
.LBB6_774:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$78, %eax
	movl	%eax, -336(%rbp)        # 4-byte Spill
	je	.LBB6_312
	jmp	.LBB6_775
.LBB6_775:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$79, %eax
	movl	%eax, -340(%rbp)        # 4-byte Spill
	je	.LBB6_339
	jmp	.LBB6_776
.LBB6_776:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$91, %eax
	movl	%eax, -344(%rbp)        # 4-byte Spill
	je	.LBB6_415
	jmp	.LBB6_777
.LBB6_777:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$110, %eax
	movl	%eax, -348(%rbp)        # 4-byte Spill
	je	.LBB6_298
	jmp	.LBB6_778
.LBB6_778:                              # %label_escape_sequence
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	subl	$111, %eax
	movl	%eax, -352(%rbp)        # 4-byte Spill
	je	.LBB6_305
	jmp	.LBB6_531
.LBB6_172:                              # %sw.bb.526
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_173
.LBB6_173:                              # %do.body.527
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_177
# BB#174:                               # %if.then.530
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_176
# BB#175:                               # %if.then.533
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_176:                              # %if.end.534
	jmp	.LBB6_747
.LBB6_177:                              # %if.end.535
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_183
# BB#178:                               # %land.lhs.true.540
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_183
# BB#179:                               # %if.then.543
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_181
# BB#180:                               # %if.then.547
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_182
.LBB6_181:                              # %if.else.553
                                        #   in Loop: Header=BB6_171 Depth=2
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_182:                              # %if.end.557
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_183
.LBB6_183:                              # %if.end.558
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#184:                               # %do.end.560
                                        #   in Loop: Header=BB6_171 Depth=2
	cmpl	$64, -156(%rbp)
	jl	.LBB6_186
# BB#185:                               # %land.lhs.true.563
                                        #   in Loop: Header=BB6_171 Depth=2
	cmpl	$126, -156(%rbp)
	jle	.LBB6_187
.LBB6_186:                              # %if.then.566
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_187:                              # %if.end.567
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_188
.LBB6_188:                              # %do.body.568
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_192
# BB#189:                               # %if.then.571
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_191
# BB#190:                               # %if.then.574
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_191:                              # %if.end.575
	jmp	.LBB6_747
.LBB6_192:                              # %if.end.576
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_198
# BB#193:                               # %land.lhs.true.581
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_198
# BB#194:                               # %if.then.584
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_196
# BB#195:                               # %if.then.588
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_197
.LBB6_196:                              # %if.else.594
                                        #   in Loop: Header=BB6_171 Depth=2
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_197:                              # %if.end.598
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_198
.LBB6_198:                              # %if.end.599
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#199:                               # %do.end.601
                                        #   in Loop: Header=BB6_171 Depth=2
	cmpl	$27, -156(%rbp)
	je	.LBB6_201
# BB#200:                               # %if.then.604
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_201:                              # %if.end.605
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_202
.LBB6_202:                              # %do.body.606
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_206
# BB#203:                               # %if.then.609
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_205
# BB#204:                               # %if.then.612
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_205:                              # %if.end.613
	jmp	.LBB6_747
.LBB6_206:                              # %if.end.614
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_212
# BB#207:                               # %land.lhs.true.619
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_212
# BB#208:                               # %if.then.622
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_210
# BB#209:                               # %if.then.626
                                        #   in Loop: Header=BB6_171 Depth=2
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_211
.LBB6_210:                              # %if.else.632
                                        #   in Loop: Header=BB6_171 Depth=2
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_211:                              # %if.end.636
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_212
.LBB6_212:                              # %if.end.637
                                        #   in Loop: Header=BB6_171 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#213:                               # %do.end.639
                                        #   in Loop: Header=BB6_171 Depth=2
	jmp	.LBB6_171
.LBB6_214:                              # %sw.bb.640
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_216
# BB#215:                               # %if.then.646
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_216:                              # %if.end.647
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_217
.LBB6_217:                              # %do.body.648
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_221
# BB#218:                               # %if.then.651
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_220
# BB#219:                               # %if.then.654
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_220:                              # %if.end.655
	jmp	.LBB6_747
.LBB6_221:                              # %if.end.656
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_227
# BB#222:                               # %land.lhs.true.661
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_227
# BB#223:                               # %if.then.664
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_225
# BB#224:                               # %if.then.668
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_226
.LBB6_225:                              # %if.else.674
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_226:                              # %if.end.678
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_227
.LBB6_227:                              # %if.end.679
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#228:                               # %do.end.681
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$64, -156(%rbp)
	jl	.LBB6_231
# BB#229:                               # %land.lhs.true.684
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$66, -156(%rbp)
	jg	.LBB6_231
# BB#230:                               # %if.then.687
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$0, -184(%rbp)
	movl	$0, -188(%rbp)
	jmp	.LBB6_264
.LBB6_231:                              # %if.else.688
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$40, -156(%rbp)
	jl	.LBB6_246
# BB#232:                               # %land.lhs.true.691
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$43, -156(%rbp)
	jg	.LBB6_246
# BB#233:                               # %if.then.694
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	subl	$40, %eax
	movl	%eax, -184(%rbp)
	movl	$0, -188(%rbp)
# BB#234:                               # %do.body.696
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_238
# BB#235:                               # %if.then.699
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_237
# BB#236:                               # %if.then.702
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_237:                              # %if.end.703
	jmp	.LBB6_747
.LBB6_238:                              # %if.end.704
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_244
# BB#239:                               # %land.lhs.true.709
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_244
# BB#240:                               # %if.then.712
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_242
# BB#241:                               # %if.then.716
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_243
.LBB6_242:                              # %if.else.722
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_243:                              # %if.end.726
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_244
.LBB6_244:                              # %if.end.727
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#245:                               # %do.end.729
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_263
.LBB6_246:                              # %if.else.730
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$44, -156(%rbp)
	jl	.LBB6_261
# BB#247:                               # %land.lhs.true.733
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$47, -156(%rbp)
	jg	.LBB6_261
# BB#248:                               # %if.then.736
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	subl	$44, %eax
	movl	%eax, -184(%rbp)
	movl	$1, -188(%rbp)
# BB#249:                               # %do.body.738
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_253
# BB#250:                               # %if.then.741
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_252
# BB#251:                               # %if.then.744
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_252:                              # %if.end.745
	jmp	.LBB6_747
.LBB6_253:                              # %if.end.746
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_259
# BB#254:                               # %land.lhs.true.751
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_259
# BB#255:                               # %if.then.754
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_257
# BB#256:                               # %if.then.758
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_258
.LBB6_257:                              # %if.else.764
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_258:                              # %if.end.768
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_259
.LBB6_259:                              # %if.end.769
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#260:                               # %do.end.771
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_262
.LBB6_261:                              # %if.else.772
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_262:                              # %if.end.773
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_263
.LBB6_263:                              # %if.end.774
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_264
.LBB6_264:                              # %if.end.775
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_265
.LBB6_265:                              # %do.body.776
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$48, -156(%rbp)
	jl	.LBB6_270
# BB#266:                               # %lor.lhs.false.780
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jge	.LBB6_270
# BB#267:                               # %lor.lhs.false.783
                                        #   in Loop: Header=BB6_17 Depth=1
	movabsq	$iso_charset_table, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-156(%rbp), %rcx
	movslq	-188(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rax
	movl	(%rax,%rcx,4), %esi
	movl	%esi, -192(%rbp)
	cmpl	$0, %esi
	jl	.LBB6_270
# BB#268:                               # %lor.lhs.false.790
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-192(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	.LBB6_270
# BB#269:                               # %land.lhs.true.793
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-192(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	352(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	jne	.LBB6_271
.LBB6_270:                              # %if.then.800
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-184(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	$-2, 28(%rcx,%rax,4)
	movl	$-1, -188(%rbp)
	jmp	.LBB6_284
.LBB6_271:                              # %if.end.806
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-184(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -196(%rbp)
	movl	-192(%rbp), %edx
	cmpl	charset_jisx0201_roman, %edx
	jne	.LBB6_275
# BB#272:                               # %if.then.814
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32768, %ecx            # imm = 0x8000
	cmpl	$0, %ecx
	je	.LBB6_274
# BB#273:                               # %if.then.820
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	charset_ascii, %eax
	movl	%eax, -192(%rbp)
.LBB6_274:                              # %if.end.821
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_280
.LBB6_275:                              # %if.else.822
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-192(%rbp), %eax
	cmpl	charset_jisx0208_1978, %eax
	jne	.LBB6_279
# BB#276:                               # %if.then.825
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$65536, %ecx            # imm = 0x10000
	cmpl	$0, %ecx
	je	.LBB6_278
# BB#277:                               # %if.then.831
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	charset_jisx0208, %eax
	movl	%eax, -192(%rbp)
.LBB6_278:                              # %if.end.832
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_279
.LBB6_279:                              # %if.end.833
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_280
.LBB6_280:                              # %if.end.834
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-192(%rbp), %eax
	movslq	-184(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, 28(%rdx,%rcx,4)
	cmpl	$-2, -196(%rbp)
	jne	.LBB6_283
# BB#281:                               # %land.lhs.true.842
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-192(%rbp), %eax
	cmpl	charset_ascii, %eax
	jne	.LBB6_283
# BB#282:                               # %if.then.845
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$-1, -188(%rbp)
.LBB6_283:                              # %if.end.846
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_284
.LBB6_284:                              # %do.end.847
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -184(%rbp)
	jne	.LBB6_289
# BB#285:                               # %if.then.850
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_287
# BB#286:                               # %cond.true.857
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jmp	.LBB6_288
.LBB6_287:                              # %cond.false.858
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -356(%rbp)        # 4-byte Spill
.LBB6_288:                              # %cond.end.868
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-356(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	jmp	.LBB6_295
.LBB6_289:                              # %if.else.870
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$1, -184(%rbp)
	jne	.LBB6_294
# BB#290:                               # %if.then.873
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jge	.LBB6_292
# BB#291:                               # %cond.true.880
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -360(%rbp)        # 4-byte Spill
	jmp	.LBB6_293
.LBB6_292:                              # %cond.false.881
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -360(%rbp)        # 4-byte Spill
.LBB6_293:                              # %cond.end.891
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-360(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
.LBB6_294:                              # %if.end.893
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_295
.LBB6_295:                              # %if.end.894
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -188(%rbp)
	jge	.LBB6_297
# BB#296:                               # %if.then.897
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_297:                              # %if.end.898
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_298:                              # %sw.bb.899
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB6_300
# BB#299:                               # %lor.lhs.false.905
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jge	.LBB6_301
.LBB6_300:                              # %if.then.912
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_301:                              # %if.end.913
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	$2, 20(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_303
# BB#302:                               # %cond.true.924
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -364(%rbp)        # 4-byte Spill
	jmp	.LBB6_304
.LBB6_303:                              # %cond.false.925
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -364(%rbp)        # 4-byte Spill
.LBB6_304:                              # %cond.end.935
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-364(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	jmp	.LBB6_17
.LBB6_305:                              # %sw.bb.937
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB6_307
# BB#306:                               # %lor.lhs.false.943
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 40(%rax)
	jge	.LBB6_308
.LBB6_307:                              # %if.then.950
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_308:                              # %if.end.951
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	$3, 20(%rax)
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_310
# BB#309:                               # %cond.true.962
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -368(%rbp)        # 4-byte Spill
	jmp	.LBB6_311
.LBB6_310:                              # %cond.false.963
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -368(%rbp)        # 4-byte Spill
.LBB6_311:                              # %cond.end.973
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-368(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	jmp	.LBB6_17
.LBB6_312:                              # %sw.bb.975
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	je	.LBB6_314
# BB#313:                               # %lor.lhs.false.981
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 36(%rax)
	jge	.LBB6_315
.LBB6_314:                              # %if.then.988
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_315:                              # %if.end.989
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	36(%rax), %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB6_317
# BB#316:                               # %if.then.996
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB6_318
.LBB6_317:                              # %if.else.999
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
.LBB6_318:                              # %if.end.1002
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_319
.LBB6_319:                              # %do.body.1003
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_323
# BB#320:                               # %if.then.1006
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_322
# BB#321:                               # %if.then.1009
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_322:                              # %if.end.1010
	jmp	.LBB6_747
.LBB6_323:                              # %if.end.1011
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_329
# BB#324:                               # %land.lhs.true.1016
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_329
# BB#325:                               # %if.then.1019
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_327
# BB#326:                               # %if.then.1023
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_328
.LBB6_327:                              # %if.else.1029
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_328:                              # %if.end.1033
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_329
.LBB6_329:                              # %if.end.1034
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#330:                               # %do.end.1036
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$32, -156(%rbp)
	jl	.LBB6_337
# BB#331:                               # %lor.lhs.false.1039
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jl	.LBB6_333
# BB#332:                               # %land.lhs.true.1042
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$160, -156(%rbp)
	jl	.LBB6_337
.LBB6_333:                              # %lor.lhs.false.1045
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_338
# BB#334:                               # %land.lhs.true.1051
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$131072, %ecx           # imm = 0x20000
	cmpl	$0, %ecx
	je	.LBB6_336
# BB#335:                               # %cond.true.1057
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jge	.LBB6_337
	jmp	.LBB6_338
.LBB6_336:                              # %cond.false.1060
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jge	.LBB6_338
.LBB6_337:                              # %if.then.1063
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_338:                              # %if.end.1064
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_599
.LBB6_339:                              # %sw.bb.1065
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	je	.LBB6_341
# BB#340:                               # %lor.lhs.false.1071
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 40(%rax)
	jge	.LBB6_342
.LBB6_341:                              # %if.then.1078
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_342:                              # %if.end.1079
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	40(%rax), %ecx
	movl	%ecx, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB6_344
# BB#343:                               # %if.then.1086
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB6_345
.LBB6_344:                              # %if.else.1089
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	charset_table, %rax
	movslq	-84(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
.LBB6_345:                              # %if.end.1092
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_346
.LBB6_346:                              # %do.body.1093
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_350
# BB#347:                               # %if.then.1096
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_349
# BB#348:                               # %if.then.1099
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_349:                              # %if.end.1100
	jmp	.LBB6_747
.LBB6_350:                              # %if.end.1101
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_356
# BB#351:                               # %land.lhs.true.1106
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_356
# BB#352:                               # %if.then.1109
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_354
# BB#353:                               # %if.then.1113
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_355
.LBB6_354:                              # %if.else.1119
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_355:                              # %if.end.1123
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_356
.LBB6_356:                              # %if.end.1124
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#357:                               # %do.end.1126
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$32, -156(%rbp)
	jl	.LBB6_364
# BB#358:                               # %lor.lhs.false.1129
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jl	.LBB6_360
# BB#359:                               # %land.lhs.true.1132
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$160, -156(%rbp)
	jl	.LBB6_364
.LBB6_360:                              # %lor.lhs.false.1135
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_365
# BB#361:                               # %land.lhs.true.1141
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$131072, %ecx           # imm = 0x20000
	cmpl	$0, %ecx
	je	.LBB6_363
# BB#362:                               # %cond.true.1147
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jge	.LBB6_364
	jmp	.LBB6_365
.LBB6_363:                              # %cond.false.1150
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jge	.LBB6_365
.LBB6_364:                              # %if.then.1153
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_365:                              # %if.end.1154
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_599
.LBB6_366:                              # %sw.bb.1155
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_368
# BB#367:                               # %if.then.1160
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_368:                              # %if.end.1161
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-140(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB6_374
# BB#369:                               # %if.then.1164
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_370
.LBB6_370:                              # %do.body.1165
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_371
.LBB6_371:                              # %do.body.1166
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-128(%rbp), %rax
	subq	-136(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#372:                               # %do.end.1176
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-140(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#373:                               # %do.end.1178
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	charset_ascii, %eax
	movl	%eax, -140(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, -136(%rbp)
.LBB6_374:                              # %if.end.1179
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_375
.LBB6_375:                              # %do.body.1180
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$48, -156(%rbp)
	jne	.LBB6_381
# BB#376:                               # %land.lhs.true.1183
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB6_378
# BB#377:                               # %land.lhs.true.1187
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$2, 4(%rax)
	je	.LBB6_380
.LBB6_378:                              # %lor.lhs.false.1190
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$4, (%rax)
	jne	.LBB6_381
# BB#379:                               # %land.lhs.true.1194
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB6_381
.LBB6_380:                              # %if.then.1198
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-1, (%rax)
	movq	-112(%rbp), %rax
	movl	$1, (%rax)
	movq	-112(%rbp), %rax
	movl	12(%rax), %edx
	addl	$2, %edx
	movl	%edx, 12(%rax)
	jmp	.LBB6_396
.LBB6_381:                              # %if.else.1204
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_382
.LBB6_382:                              # %do.body.1205
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_384
# BB#383:                               # %if.then.1209
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_384:                              # %if.end.1213
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_385
.LBB6_385:                              # %do.end.1214
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$48, -156(%rbp)
	jne	.LBB6_387
# BB#386:                               # %cond.true.1217
                                        #   in Loop: Header=BB6_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, -372(%rbp)        # 4-byte Spill
	jmp	.LBB6_391
.LBB6_387:                              # %cond.false.1218
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$50, -156(%rbp)
	jne	.LBB6_389
# BB#388:                               # %cond.true.1221
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$1, %eax
	movl	%eax, -376(%rbp)        # 4-byte Spill
	jmp	.LBB6_390
.LBB6_389:                              # %cond.false.1222
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$3, %eax
	movl	$2, %ecx
	cmpl	$51, -156(%rbp)
	cmovel	%ecx, %eax
	movl	%eax, -376(%rbp)        # 4-byte Spill
.LBB6_390:                              # %cond.end.1226
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-376(%rbp), %eax        # 4-byte Reload
	movl	%eax, -372(%rbp)        # 4-byte Spill
.LBB6_391:                              # %cond.end.1228
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-372(%rbp), %eax        # 4-byte Reload
	movl	$3, %ecx
	movl	$1, %edx
	movq	-112(%rbp), %rsi
	movl	%eax, 4(%rsi)
	cmpl	$50, -156(%rbp)
	cmovlel	%edx, %ecx
	movq	-112(%rbp), %rsi
	movl	%ecx, (%rsi)
# BB#392:                               # %do.body.1235
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_393
.LBB6_393:                              # %do.body.1236
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-5, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$1, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#394:                               # %do.end.1244
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, (%rax)
	movq	-112(%rbp), %rax
	movl	4(%rax), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
# BB#395:                               # %do.end.1248
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-8388609, %ecx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %ecx          # imm = 0x800000
	movl	%ecx, 8(%rax)
.LBB6_396:                              # %if.end.1254
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_397
.LBB6_397:                              # %do.end.1255
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_398:                              # %sw.bb.1256
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB6_400
# BB#399:                               # %if.then.1260
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_400:                              # %if.end.1261
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_401
.LBB6_401:                              # %do.body.1262
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 16(%rax)
	je	.LBB6_403
# BB#402:                               # %lor.lhs.false.1266
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, (%rax)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movq	-112(%rbp), %rax
	cmpl	$1, 4(%rax)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %esi
	cmpl	%esi, %edx
	jne	.LBB6_408
.LBB6_403:                              # %if.then.1275
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_404
.LBB6_404:                              # %do.body.1276
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_406
# BB#405:                               # %if.then.1280
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_406:                              # %if.end.1284
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_407
.LBB6_407:                              # %do.end.1285
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_408:                              # %if.end.1286
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$2, 4(%rax)
	jne	.LBB6_410
# BB#409:                               # %if.then.1290
                                        #   in Loop: Header=BB6_17 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movl	20(%rcx), %edx
	addl	$2, %edx
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rsi
	movl	(%rsi,%rcx,4), %eax
	subl	%edx, %eax
	movl	%eax, (%rsi,%rcx,4)
	jmp	.LBB6_413
.LBB6_410:                              # %if.else.1298
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB6_412
# BB#411:                               # %if.then.1302
                                        #   in Loop: Header=BB6_17 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	imull	$3, 20(%rcx), %edx
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rsi
	movl	(%rsi,%rcx,4), %eax
	subl	%edx, %eax
	movl	%eax, (%rsi,%rcx,4)
.LBB6_412:                              # %if.end.1310
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_413
.LBB6_413:                              # %if.end.1311
                                        #   in Loop: Header=BB6_17 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movl	16(%rcx), %edx
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	addl	$2, %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rsi
	movl	%edx, (%rsi,%rcx,4)
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	addq	-128(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-112(%rbp), %rcx
	movl	$0, (%rcx)
# BB#414:                               # %do.end.1322
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_415:                              # %sw.bb.1323
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$256, %ecx              # imm = 0x100
	cmpl	$0, %ecx
	jne	.LBB6_417
# BB#416:                               # %if.then.1329
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_417:                              # %if.end.1330
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_418
.LBB6_418:                              # %do.body.1331
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_422
# BB#419:                               # %if.then.1334
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_421
# BB#420:                               # %if.then.1337
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_421:                              # %if.end.1338
	jmp	.LBB6_747
.LBB6_422:                              # %if.end.1339
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_428
# BB#423:                               # %land.lhs.true.1344
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_428
# BB#424:                               # %if.then.1347
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_426
# BB#425:                               # %if.then.1351
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_427
.LBB6_426:                              # %if.else.1357
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_427:                              # %if.end.1361
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_428
.LBB6_428:                              # %if.end.1362
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#429:                               # %do.end.1364
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	addl	$-48, %ecx
	subl	$2, %ecx
	movl	%eax, -380(%rbp)        # 4-byte Spill
	movl	%ecx, -384(%rbp)        # 4-byte Spill
	jb	.LBB6_431
	jmp	.LBB6_779
.LBB6_779:                              # %do.end.1364
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-380(%rbp), %eax        # 4-byte Reload
	subl	$50, %eax
	movl	%eax, -388(%rbp)        # 4-byte Spill
	je	.LBB6_447
	jmp	.LBB6_780
.LBB6_780:                              # %do.end.1364
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-380(%rbp), %eax        # 4-byte Reload
	subl	$93, %eax
	movl	%eax, -392(%rbp)        # 4-byte Spill
	jne	.LBB6_463
	jmp	.LBB6_430
.LBB6_430:                              # %sw.bb.1365
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$-5, %ecx
	movl	8(%rax), %edx
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB6_431:                              # %sw.bb.1373
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_432
.LBB6_432:                              # %do.body.1374
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_436
# BB#433:                               # %if.then.1377
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_435
# BB#434:                               # %if.then.1380
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_435:                              # %if.end.1381
	jmp	.LBB6_747
.LBB6_436:                              # %if.end.1382
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_442
# BB#437:                               # %land.lhs.true.1387
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_442
# BB#438:                               # %if.then.1390
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_440
# BB#439:                               # %if.then.1394
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_441
.LBB6_440:                              # %if.else.1400
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_441:                              # %if.end.1404
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_442
.LBB6_442:                              # %if.end.1405
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#443:                               # %do.end.1407
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$93, -156(%rbp)
	jne	.LBB6_445
# BB#444:                               # %if.then.1410
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$-5, %ecx
	movl	8(%rax), %edx
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	jmp	.LBB6_446
.LBB6_445:                              # %if.else.1421
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_446:                              # %if.end.1422
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_464
.LBB6_447:                              # %sw.bb.1423
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_448
.LBB6_448:                              # %do.body.1424
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_452
# BB#449:                               # %if.then.1427
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_451
# BB#450:                               # %if.then.1430
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_451:                              # %if.end.1431
	jmp	.LBB6_747
.LBB6_452:                              # %if.end.1432
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_458
# BB#453:                               # %land.lhs.true.1437
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_458
# BB#454:                               # %if.then.1440
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_456
# BB#455:                               # %if.then.1444
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_457
.LBB6_456:                              # %if.else.1450
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_457:                              # %if.end.1454
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_458
.LBB6_458:                              # %if.end.1455
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#459:                               # %do.end.1457
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$93, -156(%rbp)
	jne	.LBB6_461
# BB#460:                               # %if.then.1460
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	orl	$4, %ecx
	movl	8(%rax), %edx
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	jmp	.LBB6_462
.LBB6_461:                              # %if.else.1471
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_462:                              # %if.end.1472
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_464
.LBB6_463:                              # %sw.default
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_464:                              # %sw.epilog
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_465:                              # %sw.bb.1473
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_466
.LBB6_466:                              # %do.body.1474
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_470
# BB#467:                               # %if.then.1477
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_469
# BB#468:                               # %if.then.1480
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_469:                              # %if.end.1481
	jmp	.LBB6_747
.LBB6_470:                              # %if.end.1482
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_476
# BB#471:                               # %land.lhs.true.1487
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_476
# BB#472:                               # %if.then.1490
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_474
# BB#473:                               # %if.then.1494
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_475
.LBB6_474:                              # %if.else.1500
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_475:                              # %if.end.1504
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_476
.LBB6_476:                              # %if.end.1505
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#477:                               # %do.end.1507
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$47, -156(%rbp)
	jne	.LBB6_524
# BB#478:                               # %if.then.1510
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_479
.LBB6_479:                              # %do.body.1511
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_483
# BB#480:                               # %if.then.1514
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_482
# BB#481:                               # %if.then.1517
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_482:                              # %if.end.1518
	jmp	.LBB6_747
.LBB6_483:                              # %if.end.1519
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -200(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_489
# BB#484:                               # %land.lhs.true.1524
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-200(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_489
# BB#485:                               # %if.then.1527
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-200(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_487
# BB#486:                               # %if.then.1531
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-200(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -200(%rbp)
	jmp	.LBB6_488
.LBB6_487:                              # %if.else.1537
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -200(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_488:                              # %if.end.1541
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_489
.LBB6_489:                              # %if.end.1542
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#490:                               # %do.end.1544
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$48, -200(%rbp)
	jl	.LBB6_492
# BB#491:                               # %lor.lhs.false.1547
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$52, -200(%rbp)
	jle	.LBB6_493
.LBB6_492:                              # %if.then.1550
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_493:                              # %if.end.1551
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_494
.LBB6_494:                              # %do.body.1552
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_498
# BB#495:                               # %if.then.1555
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_497
# BB#496:                               # %if.then.1558
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_497:                              # %if.end.1559
	jmp	.LBB6_747
.LBB6_498:                              # %if.end.1560
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -204(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_504
# BB#499:                               # %land.lhs.true.1565
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-204(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_504
# BB#500:                               # %if.then.1568
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-204(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_502
# BB#501:                               # %if.then.1572
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-204(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -204(%rbp)
	jmp	.LBB6_503
.LBB6_502:                              # %if.else.1578
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -204(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_503:                              # %if.end.1582
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_504
.LBB6_504:                              # %if.end.1583
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#505:                               # %do.end.1585
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -204(%rbp)
	jge	.LBB6_507
# BB#506:                               # %if.then.1588
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_507:                              # %if.end.1589
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_508
.LBB6_508:                              # %do.body.1590
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_512
# BB#509:                               # %if.then.1593
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_511
# BB#510:                               # %if.then.1596
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_511:                              # %if.end.1597
	jmp	.LBB6_747
.LBB6_512:                              # %if.end.1598
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -208(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_518
# BB#513:                               # %land.lhs.true.1603
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-208(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_518
# BB#514:                               # %if.then.1606
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-208(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_516
# BB#515:                               # %if.then.1610
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-208(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -208(%rbp)
	jmp	.LBB6_517
.LBB6_516:                              # %if.else.1616
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -208(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_517:                              # %if.end.1620
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_518
.LBB6_518:                              # %if.end.1621
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#519:                               # %do.end.1623
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -208(%rbp)
	jge	.LBB6_521
# BB#520:                               # %if.then.1626
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_521:                              # %if.end.1627
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-204(%rbp), %eax
	subl	$128, %eax
	shll	$7, %eax
	movl	-208(%rbp), %ecx
	subl	$128, %ecx
	addl	%ecx, %eax
	movl	%eax, -212(%rbp)
	movq	-40(%rbp), %rdx
	addq	$24, %rdx
	cmpq	-48(%rbp), %rdx
	jbe	.LBB6_523
# BB#522:                               # %if.then.1635
	jmp	.LBB6_745
.LBB6_523:                              # %if.end.1636
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$27, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$37, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$47, (%rax)
	movl	-200(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movl	-204(%rbp), %edx
	addl	$4194048, %edx          # imm = 0x3FFF00
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movl	-208(%rbp), %edx
	addl	$4194048, %edx          # imm = 0x3FFF00
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movl	-212(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 44(%rax)
	jmp	.LBB6_530
.LBB6_524:                              # %if.else.1648
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$71, -156(%rbp)
	jne	.LBB6_528
# BB#525:                               # %if.then.1651
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	addq	$12, %rax
	cmpq	-48(%rbp), %rax
	jbe	.LBB6_527
# BB#526:                               # %if.then.1655
	jmp	.LBB6_745
.LBB6_527:                              # %if.end.1656
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$27, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$37, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$71, (%rax)
	movq	-8(%rbp), %rax
	movb	48(%rax), %dl
	andb	$-5, %dl
	orb	$4, %dl
	movb	%dl, 48(%rax)
	jmp	.LBB6_529
.LBB6_528:                              # %if.else.1666
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_529:                              # %if.end.1667
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_530
.LBB6_530:                              # %if.end.1668
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_531:                              # %sw.default.1669
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$64, %ecx
	cmpl	$0, %ecx
	jne	.LBB6_533
# BB#532:                               # %if.then.1675
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_533:                              # %if.end.1676
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$40, -156(%rbp)
	jl	.LBB6_548
# BB#534:                               # %land.lhs.true.1681
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$43, -156(%rbp)
	jg	.LBB6_548
# BB#535:                               # %if.then.1684
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	subl	$40, %eax
	movl	%eax, -216(%rbp)
	movl	$0, -220(%rbp)
# BB#536:                               # %do.body.1686
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_540
# BB#537:                               # %if.then.1689
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_539
# BB#538:                               # %if.then.1692
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_539:                              # %if.end.1693
	jmp	.LBB6_747
.LBB6_540:                              # %if.end.1694
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_546
# BB#541:                               # %land.lhs.true.1699
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_546
# BB#542:                               # %if.then.1702
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_544
# BB#543:                               # %if.then.1706
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_545
.LBB6_544:                              # %if.else.1712
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_545:                              # %if.end.1716
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_546
.LBB6_546:                              # %if.end.1717
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#547:                               # %do.end.1719
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_565
.LBB6_548:                              # %if.else.1720
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$44, -156(%rbp)
	jl	.LBB6_563
# BB#549:                               # %land.lhs.true.1723
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$47, -156(%rbp)
	jg	.LBB6_563
# BB#550:                               # %if.then.1726
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	subl	$44, %eax
	movl	%eax, -216(%rbp)
	movl	$1, -220(%rbp)
# BB#551:                               # %do.body.1728
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_555
# BB#552:                               # %if.then.1731
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_554
# BB#553:                               # %if.then.1734
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_554:                              # %if.end.1735
	jmp	.LBB6_747
.LBB6_555:                              # %if.end.1736
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_561
# BB#556:                               # %land.lhs.true.1741
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_561
# BB#557:                               # %if.then.1744
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_559
# BB#558:                               # %if.then.1748
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_560
.LBB6_559:                              # %if.else.1754
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_560:                              # %if.end.1758
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_561
.LBB6_561:                              # %if.end.1759
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#562:                               # %do.end.1761
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_564
.LBB6_563:                              # %if.else.1762
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_564:                              # %if.end.1763
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_565
.LBB6_565:                              # %if.end.1764
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_566
.LBB6_566:                              # %do.body.1765
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$48, -156(%rbp)
	jl	.LBB6_571
# BB#567:                               # %lor.lhs.false.1770
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -156(%rbp)
	jge	.LBB6_571
# BB#568:                               # %lor.lhs.false.1773
                                        #   in Loop: Header=BB6_17 Depth=1
	movabsq	$iso_charset_table, %rax
	movslq	-156(%rbp), %rcx
	movslq	-220(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rax
	movl	(%rax,%rcx,4), %esi
	movl	%esi, -224(%rbp)
	cmpl	$0, %esi
	jl	.LBB6_571
# BB#569:                               # %lor.lhs.false.1780
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-224(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	.LBB6_571
# BB#570:                               # %land.lhs.true.1784
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-224(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	352(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	jne	.LBB6_572
.LBB6_571:                              # %if.then.1791
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-216(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	$-2, 28(%rcx,%rax,4)
	movl	$-1, -220(%rbp)
	jmp	.LBB6_585
.LBB6_572:                              # %if.end.1797
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-216(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -228(%rbp)
	movl	-224(%rbp), %edx
	cmpl	charset_jisx0201_roman, %edx
	jne	.LBB6_576
# BB#573:                               # %if.then.1805
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32768, %ecx            # imm = 0x8000
	cmpl	$0, %ecx
	je	.LBB6_575
# BB#574:                               # %if.then.1811
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	charset_ascii, %eax
	movl	%eax, -224(%rbp)
.LBB6_575:                              # %if.end.1812
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_581
.LBB6_576:                              # %if.else.1813
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-224(%rbp), %eax
	cmpl	charset_jisx0208_1978, %eax
	jne	.LBB6_580
# BB#577:                               # %if.then.1816
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$65536, %ecx            # imm = 0x10000
	cmpl	$0, %ecx
	je	.LBB6_579
# BB#578:                               # %if.then.1822
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	charset_jisx0208, %eax
	movl	%eax, -224(%rbp)
.LBB6_579:                              # %if.end.1823
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_580
.LBB6_580:                              # %if.end.1824
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_581
.LBB6_581:                              # %if.end.1825
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-224(%rbp), %eax
	movslq	-216(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, 28(%rdx,%rcx,4)
	cmpl	$-2, -228(%rbp)
	jne	.LBB6_584
# BB#582:                               # %land.lhs.true.1833
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-224(%rbp), %eax
	cmpl	charset_ascii, %eax
	jne	.LBB6_584
# BB#583:                               # %if.then.1836
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$-1, -220(%rbp)
.LBB6_584:                              # %if.end.1837
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_585
.LBB6_585:                              # %do.end.1838
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -216(%rbp)
	jne	.LBB6_590
# BB#586:                               # %if.then.1841
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	jge	.LBB6_588
# BB#587:                               # %cond.true.1848
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -396(%rbp)        # 4-byte Spill
	jmp	.LBB6_589
.LBB6_588:                              # %cond.false.1849
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -396(%rbp)        # 4-byte Spill
.LBB6_589:                              # %cond.end.1859
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-396(%rbp), %eax        # 4-byte Reload
	movl	%eax, -72(%rbp)
	jmp	.LBB6_596
.LBB6_590:                              # %if.else.1861
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$1, -216(%rbp)
	jne	.LBB6_595
# BB#591:                               # %if.then.1864
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 24(%rax)
	jge	.LBB6_593
# BB#592:                               # %cond.true.1871
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -400(%rbp)        # 4-byte Spill
	jmp	.LBB6_594
.LBB6_593:                              # %cond.false.1872
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -400(%rbp)        # 4-byte Spill
.LBB6_594:                              # %cond.end.1882
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-400(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
.LBB6_595:                              # %if.end.1884
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_596
.LBB6_596:                              # %if.end.1885
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -220(%rbp)
	jge	.LBB6_598
# BB#597:                               # %if.then.1888
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_598:                              # %if.end.1889
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_599:                              # %sw.epilog.1890
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_601
.LBB6_600:                              # %sw.default.1891
	callq	emacs_abort
.LBB6_601:                              # %sw.epilog.1892
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB6_611
# BB#602:                               # %land.lhs.true.1896
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	charset_ascii, %ecx
	je	.LBB6_611
# BB#603:                               # %land.lhs.true.1900
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-140(%rbp), %eax
	movq	-96(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB6_611
# BB#604:                               # %if.then.1904
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-140(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB6_610
# BB#605:                               # %if.then.1907
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_606
.LBB6_606:                              # %do.body.1908
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_607
.LBB6_607:                              # %do.body.1909
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-128(%rbp), %rax
	subq	-136(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#608:                               # %do.end.1919
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-140(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#609:                               # %do.end.1921
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_610
.LBB6_610:                              # %if.end.1922
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -140(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -136(%rbp)
.LBB6_611:                              # %if.end.1924
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$1, 16(%rax)
	jle	.LBB6_650
# BB#612:                               # %if.then.1927
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_613
.LBB6_613:                              # %do.body.1928
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_617
# BB#614:                               # %if.then.1931
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_616
# BB#615:                               # %if.then.1934
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_616:                              # %if.end.1935
	jmp	.LBB6_747
.LBB6_617:                              # %if.end.1936
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -160(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_623
# BB#618:                               # %land.lhs.true.1941
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-160(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_623
# BB#619:                               # %if.then.1944
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-160(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_621
# BB#620:                               # %if.then.1948
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-160(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB6_622
.LBB6_621:                              # %if.else.1954
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -160(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_622:                              # %if.end.1958
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_623
.LBB6_623:                              # %if.end.1959
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#624:                               # %do.end.1961
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$32, -160(%rbp)
	jl	.LBB6_628
# BB#625:                               # %lor.lhs.false.1964
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -160(%rbp)
	jl	.LBB6_627
# BB#626:                               # %land.lhs.true.1967
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$160, -160(%rbp)
	jl	.LBB6_628
.LBB6_627:                              # %lor.lhs.false.1970
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	movl	-160(%rbp), %ecx
	andl	$128, %ecx
	cmpl	%ecx, %eax
	je	.LBB6_629
.LBB6_628:                              # %if.then.1975
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_629:                              # %if.end.1976
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$2, 16(%rax)
	jne	.LBB6_631
# BB#630:                               # %if.then.1980
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	shll	$8, %eax
	orl	-160(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB6_649
.LBB6_631:                              # %if.else.1983
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_632
.LBB6_632:                              # %do.body.1984
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_636
# BB#633:                               # %if.then.1987
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_635
# BB#634:                               # %if.then.1990
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_635:                              # %if.end.1991
	jmp	.LBB6_747
.LBB6_636:                              # %if.end.1992
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -164(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_642
# BB#637:                               # %land.lhs.true.1997
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-164(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_642
# BB#638:                               # %if.then.2000
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-164(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_640
# BB#639:                               # %if.then.2004
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-164(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB6_641
.LBB6_640:                              # %if.else.2010
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -164(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_641:                              # %if.end.2014
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_642
.LBB6_642:                              # %if.end.2015
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#643:                               # %do.end.2017
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$32, -164(%rbp)
	jl	.LBB6_647
# BB#644:                               # %lor.lhs.false.2020
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$128, -164(%rbp)
	jl	.LBB6_646
# BB#645:                               # %land.lhs.true.2023
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$160, -164(%rbp)
	jl	.LBB6_647
.LBB6_646:                              # %lor.lhs.false.2026
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	movl	-164(%rbp), %ecx
	andl	$128, %ecx
	cmpl	%ecx, %eax
	je	.LBB6_648
.LBB6_647:                              # %if.then.2031
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_720
.LBB6_648:                              # %if.end.2032
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	shll	$16, %eax
	movl	-160(%rbp), %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	orl	-160(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB6_649:                              # %if.end.2037
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_650
.LBB6_650:                              # %if.end.2038
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	andl	$8355711, %eax          # imm = 0x7F7F7F
	movl	%eax, -156(%rbp)
# BB#651:                               # %do.body.2040
                                        #   in Loop: Header=BB6_17 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB6_652
	jmp	.LBB6_653
.LBB6_652:                              # %cond.true.2041
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB6_654
	jmp	.LBB6_656
.LBB6_653:                              # %cond.false.2045
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-156(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB6_656
.LBB6_654:                              # %land.lhs.true.2050
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB6_656
# BB#655:                               # %cond.true.2056
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-156(%rbp), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	jmp	.LBB6_677
.LBB6_656:                              # %cond.false.2058
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	movq	-96(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB6_658
# BB#657:                               # %lor.lhs.false.2061
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	movq	-96(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB6_659
.LBB6_658:                              # %cond.true.2064
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	$-1, %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	jmp	.LBB6_676
.LBB6_659:                              # %cond.false.2065
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB6_661
# BB#660:                               # %cond.true.2071
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rdi
	movl	-156(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -424(%rbp)        # 8-byte Spill
	jmp	.LBB6_675
.LBB6_661:                              # %cond.false.2074
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB6_666
# BB#662:                               # %cond.true.2078
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB6_664
# BB#663:                               # %cond.true.2083
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-156(%rbp), %eax
	movq	-96(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-96(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -428(%rbp)        # 4-byte Spill
	jmp	.LBB6_665
.LBB6_664:                              # %cond.false.2087
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rdi
	movl	-156(%rbp), %esi
	callq	decode_char
	movl	%eax, -428(%rbp)        # 4-byte Spill
.LBB6_665:                              # %cond.end.2089
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-428(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -440(%rbp)        # 8-byte Spill
	jmp	.LBB6_674
.LBB6_666:                              # %cond.false.2092
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB6_672
# BB#667:                               # %cond.true.2096
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB6_670
# BB#668:                               # %land.lhs.true.2102
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB6_669
	jmp	.LBB6_670
.LBB6_669:                              # %cond.true.2108
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-156(%rbp), %ecx
	movq	-96(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	jmp	.LBB6_671
.LBB6_670:                              # %cond.false.2117
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rdi
	movl	-156(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -448(%rbp)        # 8-byte Spill
.LBB6_671:                              # %cond.end.2120
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rax, -456(%rbp)        # 8-byte Spill
	jmp	.LBB6_673
.LBB6_672:                              # %cond.false.2122
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-96(%rbp), %rdi
	movl	-156(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -456(%rbp)        # 8-byte Spill
.LBB6_673:                              # %cond.end.2125
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rax, -440(%rbp)        # 8-byte Spill
.LBB6_674:                              # %cond.end.2127
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rax, -424(%rbp)        # 8-byte Spill
.LBB6_675:                              # %cond.end.2129
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rax, -416(%rbp)        # 8-byte Spill
.LBB6_676:                              # %cond.end.2131
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rax, -408(%rbp)        # 8-byte Spill
.LBB6_677:                              # %cond.end.2133
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-408(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB6_680
# BB#678:                               # %land.lhs.true.2138
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -240(%rbp)
	cmpq	$0, %rax
	je	.LBB6_680
# BB#679:                               # %if.then.2141
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-240(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-240(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-240(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB6_680:                              # %if.end.2145
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_681
.LBB6_681:                              # %do.end.2146
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB6_696
# BB#682:                               # %if.then.2149
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_683
.LBB6_683:                              # %do.body.2150
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_685
# BB#684:                               # %if.then.2154
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_685:                              # %if.end.2158
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_686
.LBB6_686:                              # %do.end.2159
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_687
.LBB6_687:                              # %for.cond.2160
                                        #   Parent Loop BB6_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_695
# BB#688:                               # %for.body.2163
                                        #   in Loop: Header=BB6_687 Depth=2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_689
	jmp	.LBB6_690
.LBB6_689:                              # %cond.true.2164
                                        #   in Loop: Header=BB6_687 Depth=2
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	jb	.LBB6_691
	jmp	.LBB6_692
.LBB6_690:                              # %cond.false.2169
                                        #   in Loop: Header=BB6_687 Depth=2
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, %eax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB6_692
.LBB6_691:                              # %if.then.2174
                                        #   in Loop: Header=BB6_687 Depth=2
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, (%rax)
	jmp	.LBB6_693
.LBB6_692:                              # %if.else.2177
                                        #   in Loop: Header=BB6_687 Depth=2
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$4194048, %ecx          # imm = 0x3FFF00
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, (%rax)
.LBB6_693:                              # %if.end.2181
                                        #   in Loop: Header=BB6_687 Depth=2
	jmp	.LBB6_694
.LBB6_694:                              # %for.inc.2182
                                        #   in Loop: Header=BB6_687 Depth=2
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	movq	-128(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB6_687
.LBB6_695:                              # %for.end.2185
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_719
.LBB6_696:                              # %if.else.2186
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB6_698
# BB#697:                               # %if.then.2190
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -128(%rbp)
	jmp	.LBB6_718
.LBB6_698:                              # %if.else.2193
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB6_700
# BB#699:                               # %cond.true.2197
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, -460(%rbp)        # 4-byte Spill
	jmp	.LBB6_701
.LBB6_700:                              # %cond.false.2199
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	movl	20(%rax), %ecx
	movl	%ecx, -460(%rbp)        # 4-byte Spill
.LBB6_701:                              # %cond.end.2201
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-460(%rbp), %eax        # 4-byte Reload
	cmpl	$16, %eax
	jl	.LBB6_707
# BB#702:                               # %if.then.2205
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_703
.LBB6_703:                              # %do.body.2206
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_705
# BB#704:                               # %if.then.2210
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_705:                              # %if.end.2214
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_706
.LBB6_706:                              # %do.end.2215
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -128(%rbp)
	jmp	.LBB6_717
.LBB6_707:                              # %if.else.2218
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_708
.LBB6_708:                              # %do.body.2219
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rcx
	movl	12(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 12(%rcx)
	movq	-112(%rbp), %rcx
	cmpl	$1, (%rcx)
	jne	.LBB6_710
# BB#709:                               # %if.then.2226
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_711
.LBB6_710:                              # %if.else.2229
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB6_711:                              # %if.end.2232
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, 4(%rax)
	je	.LBB6_714
# BB#712:                               # %lor.lhs.false.2236
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB6_715
# BB#713:                               # %land.lhs.true.2240
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB6_715
.LBB6_714:                              # %if.then.2244
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB6_715:                              # %if.end.2247
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_716
.LBB6_716:                              # %do.end.2248
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_717
.LBB6_717:                              # %if.end.2249
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_718
.LBB6_718:                              # %if.end.2250
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_719
.LBB6_719:                              # %if.end.2251
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_17
.LBB6_720:                              # %invalid_code
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_721
.LBB6_721:                              # %do.body.2252
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_723
# BB#722:                               # %if.then.2256
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_723:                              # %if.end.2260
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_724
.LBB6_724:                              # %do.end.2261
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
# BB#725:                               # %do.body.2262
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB6_729
# BB#726:                               # %if.then.2265
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_728
# BB#727:                               # %if.then.2268
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_728:                              # %if.end.2269
	jmp	.LBB6_747
.LBB6_729:                              # %if.end.2270
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -100(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB6_735
# BB#730:                               # %land.lhs.true.2275
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB6_735
# BB#731:                               # %if.then.2278
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB6_733
# BB#732:                               # %if.then.2282
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB6_734
.LBB6_733:                              # %if.else.2288
                                        #   in Loop: Header=BB6_17 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -100(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB6_734:                              # %if.end.2292
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_735
.LBB6_735:                              # %if.end.2293
                                        #   in Loop: Header=BB6_17 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#736:                               # %do.end.2295
                                        #   in Loop: Header=BB6_17 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB6_738
# BB#737:                               # %cond.true.2298
                                        #   in Loop: Header=BB6_17 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	%eax, -464(%rbp)        # 4-byte Spill
	jmp	.LBB6_744
.LBB6_738:                              # %cond.false.2300
                                        #   in Loop: Header=BB6_17 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB6_739
	jmp	.LBB6_740
.LBB6_739:                              # %cond.true.2301
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB6_741
	jmp	.LBB6_742
.LBB6_740:                              # %cond.false.2305
                                        #   in Loop: Header=BB6_17 Depth=1
	movslq	-100(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB6_742
.LBB6_741:                              # %cond.true.2310
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -468(%rbp)        # 4-byte Spill
	jmp	.LBB6_743
.LBB6_742:                              # %cond.false.2311
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-100(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -468(%rbp)        # 4-byte Spill
.LBB6_743:                              # %cond.end.2313
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-468(%rbp), %eax        # 4-byte Reload
	movl	%eax, -464(%rbp)        # 4-byte Spill
.LBB6_744:                              # %cond.end.2315
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-464(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-128(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -128(%rbp)
	movq	-8(%rbp), %rcx
	movl	$0, 20(%rcx)
	movl	charset_ascii, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movl	charset_ascii, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB6_17
.LBB6_745:                              # %break_loop
	jmp	.LBB6_746
.LBB6_746:                              # %while.end
	jmp	.LBB6_747
.LBB6_747:                              # %no_more_source
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_760
# BB#748:                               # %if.then.2330
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB6_754
# BB#749:                               # %if.then.2337
	jmp	.LBB6_750
.LBB6_750:                              # %do.body.2338
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB6_752
# BB#751:                               # %if.then.2342
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	finish_composition
	movslq	%eax, %rsi
	addq	-128(%rbp), %rsi
	movq	%rsi, -128(%rbp)
.LBB6_752:                              # %if.end.2346
	jmp	.LBB6_753
.LBB6_753:                              # %do.end.2347
	jmp	.LBB6_759
.LBB6_754:                              # %if.else.2348
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-112(%rbp), %rdx
	movl	12(%rdx), %eax
	movq	-40(%rbp), %rdx
	movslq	%eax, %rsi
	subq	%rsi, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -40(%rbp)
	movl	$0, -152(%rbp)
.LBB6_755:                              # %for.cond.2352
                                        # =>This Inner Loop Header: Depth=1
	movl	-152(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB6_758
# BB#756:                               # %for.body.2356
                                        #   in Loop: Header=BB6_755 Depth=1
	movslq	-152(%rbp), %rax
	movq	-40(%rbp), %rcx
	movl	(%rcx,%rax,4), %edx
	movslq	-152(%rbp), %rax
	movq	-112(%rbp), %rcx
	movl	%edx, 24(%rcx,%rax,4)
# BB#757:                               # %for.inc.2362
                                        #   in Loop: Header=BB6_755 Depth=1
	movl	-152(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -152(%rbp)
	jmp	.LBB6_755
.LBB6_758:                              # %for.end.2364
	jmp	.LBB6_759
.LBB6_759:                              # %if.end.2365
	jmp	.LBB6_767
.LBB6_760:                              # %if.else.2366
	movl	-140(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB6_766
# BB#761:                               # %if.then.2369
	jmp	.LBB6_762
.LBB6_762:                              # %do.body.2370
	jmp	.LBB6_763
.LBB6_763:                              # %do.body.2371
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-128(%rbp), %rax
	subq	-136(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#764:                               # %do.end.2381
	movl	-140(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#765:                               # %do.end.2383
	jmp	.LBB6_766
.LBB6_766:                              # %if.end.2384
	jmp	.LBB6_767
.LBB6_767:                              # %if.end.2385
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbp
	retq
.Lfunc_end6:
	.size	decode_coding_iso_2022, .Lfunc_end6-decode_coding_iso_2022
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI6_0:
	.quad	.LBB6_114
	.quad	.LBB6_135
	.quad	.LBB6_142
	.quad	.LBB6_148
	.quad	.LBB6_158
	.quad	.LBB6_134
	.quad	.LBB6_151
	.quad	.LBB6_154
	.quad	.LBB6_157
	.quad	.LBB6_97
	.quad	.LBB6_102
	.quad	.LBB6_106
	.quad	.LBB6_111

	.text
	.align	16, 0x90
	.type	encode_coding_iso_2022,@function
encode_coding_iso_2022:                 # @encode_coding_iso_2022
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp21:
	.cfi_def_cfa_offset 16
.Ltmp22:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp23:
	.cfi_def_cfa_register %rbp
	subq	$752, %rsp              # imm = 0x2F0
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %dl
	andb	$1, %dl
	movb	%dl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movslq	516(%rsi), %rsi
	shlq	$2, %rsi
	addq	%rsi, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rsi
	movq	496(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rsi
	movq	%rsi, -40(%rbp)
	movq	-8(%rbp), %rsi
	movq	496(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movl	$16, -52(%rbp)
	movq	-8(%rbp), %rsi
	movl	16(%rsi), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	movb	%cl, -469(%rbp)         # 1-byte Spill
	je	.LBB7_2
# BB#1:                                 # %land.rhs
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	movb	%cl, -469(%rbp)         # 1-byte Spill
.LBB7_2:                                # %land.end
	movb	-469(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -53(%rbp)
	movq	$0, -64(%rbp)
	movl	$-1, -100(%rbp)
# BB#3:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, -88(%rbp)
# BB#4:                                 # %do.end
	testb	$1, globals+3389
	je	.LBB7_6
# BB#5:                                 # %cond.true
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movq	%rax, -480(%rbp)        # 8-byte Spill
	jmp	.LBB7_7
.LBB7_6:                                # %cond.false
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -480(%rbp)        # 8-byte Spill
.LBB7_7:                                # %cond.end
	movq	-480(%rbp), %rax        # 8-byte Reload
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB7_8
	jmp	.LBB7_9
.LBB7_8:                                # %if.then
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movq	%rax, -80(%rbp)
.LBB7_9:                                # %if.end
	movq	-72(%rbp), %rdi
	callq	setup_iso_safe_charsets
	movl	$4, %eax
	movl	%eax, %esi
	movq	-72(%rbp), %rdi
	callq	AREF
	movl	$15, %ecx
	movl	%ecx, %esi
	movq	%rax, -88(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SDATA
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	-8(%rbp), %rdi
	movq	%rax, 352(%rdi)
	movq	-72(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	-488(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	movb	%dl, -489(%rbp)         # 1-byte Spill
	je	.LBB7_11
# BB#10:                                # %land.rhs.28
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$80, %ecx
	cmpl	$0, %ecx
	setne	%dl
	xorb	$-1, %dl
	movb	%dl, -489(%rbp)         # 1-byte Spill
.LBB7_11:                               # %land.end.34
	movb	-489(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -89(%rbp)
.LBB7_12:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_235 Depth 2
                                        #     Child Loop BB7_300 Depth 2
                                        #     Child Loop BB7_509 Depth 2
                                        #     Child Loop BB7_574 Depth 2
                                        #     Child Loop BB7_125 Depth 2
                                        #     Child Loop BB7_49 Depth 2
                                        #     Child Loop BB7_111 Depth 2
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB7_669
# BB#13:                                # %while.body
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_14
.LBB7_14:                               # %do.body.37
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB7_16
# BB#15:                                # %if.then.41
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-8(%rbp), %rdi
	movq	-112(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB7_16:                               # %if.end.46
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_17
.LBB7_17:                               # %do.end.47
                                        #   in Loop: Header=BB7_12 Depth=1
	testb	$1, -53(%rbp)
	je	.LBB7_26
# BB#18:                                # %if.then.49
                                        #   in Loop: Header=BB7_12 Depth=1
	leaq	-128(%rbp), %rcx
	movb	$0, charset_map_loaded
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	encode_designation_at_bol
	movq	%rax, -136(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_21
# BB#19:                                # %land.lhs.true
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -144(%rbp)
	cmpq	$0, %rax
	je	.LBB7_21
# BB#20:                                # %if.then.55
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-144(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-144(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_21:                               # %if.end.58
                                        #   in Loop: Header=BB7_12 Depth=1
	leaq	-128(%rbp), %rax
	movq	-40(%rbp), %rdi
	movq	-136(%rbp), %rdx
	movq	%rax, %rsi
	callq	memcpy
	movq	-136(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-136(%rbp), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movb	$0, -53(%rbp)
# BB#22:                                # %do.body.61
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB7_24
# BB#23:                                # %if.then.66
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -152(%rbp)
	movq	-8(%rbp), %rdi
	movq	-152(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB7_24:                               # %if.end.78
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_25
.LBB7_25:                               # %do.end.79
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_26
.LBB7_26:                               # %if.end.80
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -96(%rbp)
	cmpl	$0, -96(%rbp)
	jge	.LBB7_35
# BB#27:                                # %if.then.83
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-24(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -496(%rbp)        # 4-byte Spill
	movl	%edx, -500(%rbp)        # 4-byte Spill
	je	.LBB7_28
	jmp	.LBB7_744
.LBB7_744:                              # %if.then.83
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-496(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -504(%rbp)        # 4-byte Spill
	je	.LBB7_29
	jmp	.LBB7_33
.LBB7_28:                               # %sw.bb
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_34
.LBB7_29:                               # %sw.bb.84
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -100(%rbp)
	cmpl	$0, -100(%rbp)
	jl	.LBB7_32
# BB#30:                                # %land.lhs.true.87
                                        #   in Loop: Header=BB7_12 Depth=1
	movslq	-100(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-88(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fmemq
	xorl	%edi, %edi
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-512(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB7_32
# BB#31:                                # %if.then.94
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	$-1, -100(%rbp)
.LBB7_32:                               # %if.end.95
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_34
.LBB7_33:                               # %sw.default
	callq	emacs_abort
.LBB7_34:                               # %sw.epilog
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	subl	-96(%rbp), %eax
	subl	$1, %eax
	movq	-24(%rbp), %rcx
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	jmp	.LBB7_12
.LBB7_35:                               # %if.end.99
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$32, -96(%rbp)
	jl	.LBB7_37
# BB#36:                                # %lor.lhs.false
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -96(%rbp)
	jne	.LBB7_189
.LBB7_37:                               # %if.then.104
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$10, -96(%rbp)
	je	.LBB7_40
# BB#38:                                # %lor.lhs.false.107
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$13, -96(%rbp)
	jne	.LBB7_116
# BB#39:                                # %land.lhs.true.110
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	$635, %edi              # imm = 0x27B
	movq	-80(%rbp), %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-520(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB7_116
.LBB7_40:                               # %if.then.114
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB7_109
# BB#41:                                # %if.then.120
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_42
.LBB7_42:                               # %do.body.121
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB7_48
# BB#43:                                # %if.then.127
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_44
.LBB7_44:                               # %do.body.128
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_45
.LBB7_45:                               # %do.body.129
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$15, (%rax)
# BB#46:                                # %do.end.131
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
# BB#47:                                # %do.end.136
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_48
.LBB7_48:                               # %if.end.137
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	$0, -156(%rbp)
.LBB7_49:                               # %for.cond
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -156(%rbp)
	jge	.LBB7_107
# BB#50:                                # %for.body
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-156(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	cmpq	$0, %rax
	jl	.LBB7_105
# BB#51:                                # %land.lhs.true.149
                                        #   in Loop: Header=BB7_49 Depth=2
	movslq	-156(%rbp), %rax
	movq	-8(%rbp), %rcx
	movslq	28(%rcx,%rax,4), %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-156(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	-528(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB7_105
# BB#52:                                # %if.then.164
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	charset_table, %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -536(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-156(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	imulq	$328, %rax, %rax        # imm = 0x148
	movq	-536(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	%rsi, -168(%rbp)
# BB#53:                                # %do.body.174
                                        #   in Loop: Header=BB7_49 Depth=2
	movabsq	$.L.str.109, %rax
	movabsq	$.L.str.108, %rcx
	movq	-168(%rbp), %rdx
	movl	92(%rdx), %esi
	movb	%sil, %dil
	movb	%dil, -169(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%rax, -192(%rbp)
	movl	$-1, -196(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %esi
	andl	$128, %esi
	cmpl	$0, %esi
	je	.LBB7_55
# BB#54:                                # %if.then.181
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-168(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, -196(%rbp)
.LBB7_55:                               # %if.end.182
                                        #   in Loop: Header=BB7_49 Depth=2
	cmpl	$0, -196(%rbp)
	jl	.LBB7_77
# BB#56:                                # %if.then.185
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_57
.LBB7_57:                               # %do.body.186
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$27, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$38, (%rax)
# BB#58:                                # %do.end.190
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_59
.LBB7_59:                               # %do.body.191
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_74
# BB#60:                                # %if.then.194
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-196(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -200(%rbp)
	cmpl	$128, -200(%rbp)
	jb	.LBB7_62
# BB#61:                                # %if.then.198
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-200(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -200(%rbp)
.LBB7_62:                               # %if.end.200
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_63
.LBB7_63:                               # %do.body.201
                                        #   in Loop: Header=BB7_49 Depth=2
	cmpl	$127, -200(%rbp)
	ja	.LBB7_65
# BB#64:                                # %if.then.204
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-200(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_72
.LBB7_65:                               # %if.else
                                        #   in Loop: Header=BB7_49 Depth=2
	cmpl	$2047, -200(%rbp)       # imm = 0x7FF
	ja	.LBB7_67
# BB#66:                                # %if.then.209
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-200(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-200(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_71
.LBB7_67:                               # %if.else.217
                                        #   in Loop: Header=BB7_49 Depth=2
	cmpl	$65535, -200(%rbp)      # imm = 0xFFFF
	ja	.LBB7_69
# BB#68:                                # %if.then.220
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-200(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-200(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-200(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_70
.LBB7_69:                               # %if.else.234
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-200(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_70:                               # %if.end.238
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_71
.LBB7_71:                               # %if.end.239
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_72
.LBB7_72:                               # %if.end.240
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_73
.LBB7_73:                               # %do.end.241
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_75
.LBB7_74:                               # %if.else.242
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-196(%rbp), %eax
	addl	$64, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_75:                               # %if.end.246
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_76
.LBB7_76:                               # %do.end.247
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_77
.LBB7_77:                               # %if.end.248
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_78
.LBB7_78:                               # %do.body.249
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$27, (%rax)
# BB#79:                                # %do.end.252
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-168(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB7_86
# BB#80:                                # %if.then.255
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-168(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_82
# BB#81:                                # %if.then.260
                                        #   in Loop: Header=BB7_49 Depth=2
	movslq	-156(%rbp), %rax
	movq	-184(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -204(%rbp)
	jmp	.LBB7_83
.LBB7_82:                               # %if.else.264
                                        #   in Loop: Header=BB7_49 Depth=2
	movslq	-156(%rbp), %rax
	movq	-192(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -204(%rbp)
.LBB7_83:                               # %if.end.268
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_84
.LBB7_84:                               # %do.body.269
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-204(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#85:                                # %do.end.273
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_101
.LBB7_86:                               # %if.else.274
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_87
.LBB7_87:                               # %do.body.275
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$36, (%rax)
# BB#88:                                # %do.end.278
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-168(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_97
# BB#89:                                # %if.then.284
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	.LBB7_93
# BB#90:                                # %lor.lhs.false.290
                                        #   in Loop: Header=BB7_49 Depth=2
	cmpl	$0, -156(%rbp)
	jne	.LBB7_93
# BB#91:                                # %lor.lhs.false.293
                                        #   in Loop: Header=BB7_49 Depth=2
	movzbl	-169(%rbp), %eax
	cmpl	$64, %eax
	jl	.LBB7_93
# BB#92:                                # %lor.lhs.false.297
                                        #   in Loop: Header=BB7_49 Depth=2
	movzbl	-169(%rbp), %eax
	cmpl	$66, %eax
	jle	.LBB7_96
.LBB7_93:                               # %if.then.301
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_94
.LBB7_94:                               # %do.body.302
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movslq	-156(%rbp), %rax
	movq	-184(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
# BB#95:                                # %do.end.307
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_96
.LBB7_96:                               # %if.end.308
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_100
.LBB7_97:                               # %if.else.309
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_98
.LBB7_98:                               # %do.body.310
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movslq	-156(%rbp), %rax
	movq	-192(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
# BB#99:                                # %do.end.315
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_100
.LBB7_100:                              # %if.end.316
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_101
.LBB7_101:                              # %if.end.317
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_102
.LBB7_102:                              # %do.body.318
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movb	-169(%rbp), %cl
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%cl, (%rax)
# BB#103:                               # %do.end.321
                                        #   in Loop: Header=BB7_49 Depth=2
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	movslq	-156(%rbp), %rax
	movq	-8(%rbp), %rdx
	movl	%ecx, 28(%rdx,%rax,4)
# BB#104:                               # %do.end.328
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_105
.LBB7_105:                              # %if.end.329
                                        #   in Loop: Header=BB7_49 Depth=2
	jmp	.LBB7_106
.LBB7_106:                              # %for.inc
                                        #   in Loop: Header=BB7_49 Depth=2
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB7_49
.LBB7_107:                              # %for.end
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_108
.LBB7_108:                              # %do.end.331
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_109
.LBB7_109:                              # %if.end.332
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$512, %ecx              # imm = 0x200
	cmpl	$0, %ecx
	je	.LBB7_115
# BB#110:                               # %if.then.338
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	$0, -208(%rbp)
.LBB7_111:                              # %for.cond.339
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -208(%rbp)
	jge	.LBB7_114
# BB#112:                               # %for.body.342
                                        #   in Loop: Header=BB7_111 Depth=2
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-208(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movslq	-208(%rbp), %rax
	movq	-8(%rbp), %rsi
	movl	%ecx, 28(%rsi,%rax,4)
# BB#113:                               # %for.inc.357
                                        #   in Loop: Header=BB7_111 Depth=2
	movl	-208(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -208(%rbp)
	jmp	.LBB7_111
.LBB7_114:                              # %for.end.359
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_115
.LBB7_115:                              # %if.end.360
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1024, %ecx             # imm = 0x400
	cmpl	$0, %ecx
	setne	%dl
	andb	$1, %dl
	movb	%dl, -53(%rbp)
	jmp	.LBB7_186
.LBB7_116:                              # %if.else.368
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$4, %ecx
	cmpl	$0, %ecx
	je	.LBB7_185
# BB#117:                               # %if.then.374
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_118
.LBB7_118:                              # %do.body.375
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB7_124
# BB#119:                               # %if.then.384
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_120
.LBB7_120:                              # %do.body.385
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_121
.LBB7_121:                              # %do.body.386
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$15, (%rax)
# BB#122:                               # %do.end.389
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
# BB#123:                               # %do.end.394
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_124
.LBB7_124:                              # %if.end.395
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	$0, -212(%rbp)
.LBB7_125:                              # %for.cond.396
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -212(%rbp)
	jge	.LBB7_183
# BB#126:                               # %for.body.399
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-212(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	cmpq	$0, %rax
	jl	.LBB7_181
# BB#127:                               # %land.lhs.true.410
                                        #   in Loop: Header=BB7_125 Depth=2
	movslq	-212(%rbp), %rax
	movq	-8(%rbp), %rcx
	movslq	28(%rcx,%rax,4), %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -544(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-212(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	-544(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB7_181
# BB#128:                               # %if.then.427
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	charset_table, %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -552(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-212(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	imulq	$328, %rax, %rax        # imm = 0x148
	movq	-552(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	%rsi, -224(%rbp)
# BB#129:                               # %do.body.437
                                        #   in Loop: Header=BB7_125 Depth=2
	movabsq	$.L.str.109, %rax
	movabsq	$.L.str.108, %rcx
	movq	-224(%rbp), %rdx
	movl	92(%rdx), %esi
	movb	%sil, %dil
	movb	%dil, -225(%rbp)
	movq	%rcx, -240(%rbp)
	movq	%rax, -248(%rbp)
	movl	$-1, -252(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %esi
	andl	$128, %esi
	cmpl	$0, %esi
	je	.LBB7_131
# BB#130:                               # %if.then.449
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-224(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, -252(%rbp)
.LBB7_131:                              # %if.end.451
                                        #   in Loop: Header=BB7_125 Depth=2
	cmpl	$0, -252(%rbp)
	jl	.LBB7_153
# BB#132:                               # %if.then.454
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_133
.LBB7_133:                              # %do.body.455
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$27, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$38, (%rax)
# BB#134:                               # %do.end.459
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_135
.LBB7_135:                              # %do.body.460
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_150
# BB#136:                               # %if.then.463
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-252(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -256(%rbp)
	cmpl	$128, -256(%rbp)
	jb	.LBB7_138
# BB#137:                               # %if.then.468
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-256(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -256(%rbp)
.LBB7_138:                              # %if.end.470
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_139
.LBB7_139:                              # %do.body.471
                                        #   in Loop: Header=BB7_125 Depth=2
	cmpl	$127, -256(%rbp)
	ja	.LBB7_141
# BB#140:                               # %if.then.474
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-256(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_148
.LBB7_141:                              # %if.else.477
                                        #   in Loop: Header=BB7_125 Depth=2
	cmpl	$2047, -256(%rbp)       # imm = 0x7FF
	ja	.LBB7_143
# BB#142:                               # %if.then.480
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-256(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-256(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_147
.LBB7_143:                              # %if.else.489
                                        #   in Loop: Header=BB7_125 Depth=2
	cmpl	$65535, -256(%rbp)      # imm = 0xFFFF
	ja	.LBB7_145
# BB#144:                               # %if.then.492
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-256(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-256(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-256(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_146
.LBB7_145:                              # %if.else.506
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-256(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_146:                              # %if.end.510
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_147
.LBB7_147:                              # %if.end.511
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_148
.LBB7_148:                              # %if.end.512
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_149
.LBB7_149:                              # %do.end.513
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_151
.LBB7_150:                              # %if.else.514
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-252(%rbp), %eax
	addl	$64, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_151:                              # %if.end.518
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_152
.LBB7_152:                              # %do.end.519
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_153
.LBB7_153:                              # %if.end.520
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_154
.LBB7_154:                              # %do.body.521
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$27, (%rax)
# BB#155:                               # %do.end.524
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB7_162
# BB#156:                               # %if.then.528
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-224(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_158
# BB#157:                               # %if.then.535
                                        #   in Loop: Header=BB7_125 Depth=2
	movslq	-212(%rbp), %rax
	movq	-240(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -260(%rbp)
	jmp	.LBB7_159
.LBB7_158:                              # %if.else.539
                                        #   in Loop: Header=BB7_125 Depth=2
	movslq	-212(%rbp), %rax
	movq	-248(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -260(%rbp)
.LBB7_159:                              # %if.end.543
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_160
.LBB7_160:                              # %do.body.544
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-260(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#161:                               # %do.end.548
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_177
.LBB7_162:                              # %if.else.549
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_163
.LBB7_163:                              # %do.body.550
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$36, (%rax)
# BB#164:                               # %do.end.553
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-224(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_173
# BB#165:                               # %if.then.559
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	.LBB7_169
# BB#166:                               # %lor.lhs.false.565
                                        #   in Loop: Header=BB7_125 Depth=2
	cmpl	$0, -212(%rbp)
	jne	.LBB7_169
# BB#167:                               # %lor.lhs.false.568
                                        #   in Loop: Header=BB7_125 Depth=2
	movzbl	-225(%rbp), %eax
	cmpl	$64, %eax
	jl	.LBB7_169
# BB#168:                               # %lor.lhs.false.572
                                        #   in Loop: Header=BB7_125 Depth=2
	movzbl	-225(%rbp), %eax
	cmpl	$66, %eax
	jle	.LBB7_172
.LBB7_169:                              # %if.then.576
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_170
.LBB7_170:                              # %do.body.577
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movslq	-212(%rbp), %rax
	movq	-240(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
# BB#171:                               # %do.end.582
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_172
.LBB7_172:                              # %if.end.583
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_176
.LBB7_173:                              # %if.else.584
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_174
.LBB7_174:                              # %do.body.585
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movslq	-212(%rbp), %rax
	movq	-248(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
# BB#175:                               # %do.end.590
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_176
.LBB7_176:                              # %if.end.591
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_177
.LBB7_177:                              # %if.end.592
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_178
.LBB7_178:                              # %do.body.593
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movb	-225(%rbp), %cl
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%cl, (%rax)
# BB#179:                               # %do.end.596
                                        #   in Loop: Header=BB7_125 Depth=2
	movq	-224(%rbp), %rax
	movl	(%rax), %ecx
	movslq	-212(%rbp), %rax
	movq	-8(%rbp), %rdx
	movl	%ecx, 28(%rdx,%rax,4)
# BB#180:                               # %do.end.603
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_181
.LBB7_181:                              # %if.end.604
                                        #   in Loop: Header=BB7_125 Depth=2
	jmp	.LBB7_182
.LBB7_182:                              # %for.inc.605
                                        #   in Loop: Header=BB7_125 Depth=2
	movl	-212(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -212(%rbp)
	jmp	.LBB7_125
.LBB7_183:                              # %for.end.607
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_184
.LBB7_184:                              # %do.end.608
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_185
.LBB7_185:                              # %if.end.609
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_186
.LBB7_186:                              # %if.end.610
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_187
.LBB7_187:                              # %do.body.611
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-96(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#188:                               # %do.end.615
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_668
.LBB7_189:                              # %if.else.616
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB7_190
	jmp	.LBB7_191
.LBB7_190:                              # %cond.true.617
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB7_192
	jmp	.LBB7_393
.LBB7_191:                              # %cond.false.621
                                        #   in Loop: Header=BB7_12 Depth=1
	movslq	-96(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB7_393
.LBB7_192:                              # %if.then.626
                                        #   in Loop: Header=BB7_12 Depth=1
	testb	$1, -89(%rbp)
	je	.LBB7_196
# BB#193:                               # %if.then.628
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_194
.LBB7_194:                              # %do.body.629
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-96(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#195:                               # %do.end.633
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_392
.LBB7_196:                              # %if.else.634
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -272(%rbp)
# BB#197:                               # %do.body.638
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_198
.LBB7_198:                              # %do.body.639
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB7_199
	jmp	.LBB7_200
.LBB7_199:                              # %cond.true.641
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB7_201
	jmp	.LBB7_203
.LBB7_200:                              # %cond.false.645
                                        #   in Loop: Header=BB7_12 Depth=1
	movslq	-96(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB7_203
.LBB7_201:                              # %land.lhs.true.650
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_203
# BB#202:                               # %cond.true.656
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -556(%rbp)        # 4-byte Spill
	jmp	.LBB7_229
.LBB7_203:                              # %cond.false.657
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_206
# BB#204:                               # %lor.lhs.false.663
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	cmpl	$2, 104(%rax)
	je	.LBB7_206
# BB#205:                               # %lor.lhs.false.666
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	cmpl	$3, 104(%rax)
	jne	.LBB7_207
.LBB7_206:                              # %cond.true.670
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -560(%rbp)        # 4-byte Spill
	jmp	.LBB7_228
.LBB7_207:                              # %cond.false.672
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-272(%rbp), %rcx
	cmpl	120(%rcx), %eax
	jl	.LBB7_209
# BB#208:                               # %lor.lhs.false.675
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-272(%rbp), %rcx
	cmpl	124(%rcx), %eax
	jle	.LBB7_210
.LBB7_209:                              # %cond.true.678
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -564(%rbp)        # 4-byte Spill
	jmp	.LBB7_227
.LBB7_210:                              # %cond.false.679
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB7_215
# BB#211:                               # %cond.true.683
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_213
# BB#212:                               # %cond.true.688
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-272(%rbp), %rcx
	subl	324(%rcx), %eax
	movq	-272(%rbp), %rcx
	addl	108(%rcx), %eax
	movl	%eax, -568(%rbp)        # 4-byte Spill
	jmp	.LBB7_214
.LBB7_213:                              # %cond.false.691
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -568(%rbp)        # 4-byte Spill
.LBB7_214:                              # %cond.end.693
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-568(%rbp), %eax        # 4-byte Reload
	movl	%eax, -572(%rbp)        # 4-byte Spill
	jmp	.LBB7_226
.LBB7_215:                              # %cond.false.695
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB7_224
# BB#216:                               # %cond.true.699
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_222
# BB#217:                               # %land.lhs.true.705
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-272(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB7_218
	jmp	.LBB7_222
.LBB7_218:                              # %cond.true.711
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-272(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-96(%rbp), %esi
	movq	%rax, %rdi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, charset_work
	movq	charset_work, %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-584(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB7_220
# BB#219:                               # %cond.true.720
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -588(%rbp)        # 4-byte Spill
	jmp	.LBB7_221
.LBB7_220:                              # %cond.false.722
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	charset_work, %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -588(%rbp)        # 4-byte Spill
.LBB7_221:                              # %cond.end.725
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-588(%rbp), %eax        # 4-byte Reload
	movl	%eax, -592(%rbp)        # 4-byte Spill
	jmp	.LBB7_223
.LBB7_222:                              # %cond.false.727
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -592(%rbp)        # 4-byte Spill
.LBB7_223:                              # %cond.end.729
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-592(%rbp), %eax        # 4-byte Reload
	movl	%eax, -596(%rbp)        # 4-byte Spill
	jmp	.LBB7_225
.LBB7_224:                              # %cond.false.731
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -596(%rbp)        # 4-byte Spill
.LBB7_225:                              # %cond.end.733
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-596(%rbp), %eax        # 4-byte Reload
	movl	%eax, -572(%rbp)        # 4-byte Spill
.LBB7_226:                              # %cond.end.735
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-572(%rbp), %eax        # 4-byte Reload
	movl	%eax, -564(%rbp)        # 4-byte Spill
.LBB7_227:                              # %cond.end.737
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-564(%rbp), %eax        # 4-byte Reload
	movl	%eax, -560(%rbp)        # 4-byte Spill
.LBB7_228:                              # %cond.end.739
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-560(%rbp), %eax        # 4-byte Reload
	movl	%eax, -556(%rbp)        # 4-byte Spill
.LBB7_229:                              # %cond.end.741
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-556(%rbp), %eax        # 4-byte Reload
	movl	%eax, -276(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_232
# BB#230:                               # %land.lhs.true.745
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -288(%rbp)
	cmpq	$0, %rax
	je	.LBB7_232
# BB#231:                               # %if.then.748
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-288(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-288(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_232:                              # %if.end.751
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_233
.LBB7_233:                              # %do.end.752
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-272(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB7_299
# BB#234:                               # %if.then.756
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_235
.LBB7_235:                              # %do.body.757
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-272(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -292(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32768, %ecx            # imm = 0x8000
	cmpl	$0, %ecx
	je	.LBB7_238
# BB#236:                               # %land.lhs.true.765
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	-292(%rbp), %eax
	cmpl	charset_ascii, %eax
	jne	.LBB7_238
# BB#237:                               # %if.then.768
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	charset_jisx0201_roman, %eax
	movl	%eax, -292(%rbp)
	movq	charset_table, %rcx
	movslq	-292(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	movq	%rcx, -272(%rbp)
.LBB7_238:                              # %if.end.771
                                        #   in Loop: Header=BB7_235 Depth=2
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_263
# BB#239:                               # %if.then.777
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB7_243
# BB#240:                               # %if.then.783
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_241
.LBB7_241:                              # %do.body.784
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-276(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#242:                               # %do.end.789
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_262
.LBB7_243:                              # %if.else.790
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_244
.LBB7_244:                              # %do.body.791
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_259
# BB#245:                               # %if.then.794
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -296(%rbp)
	cmpl	$128, -296(%rbp)
	jb	.LBB7_247
# BB#246:                               # %if.then.799
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-296(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -296(%rbp)
.LBB7_247:                              # %if.end.801
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_248
.LBB7_248:                              # %do.body.802
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -296(%rbp)
	ja	.LBB7_250
# BB#249:                               # %if.then.805
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-296(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_257
.LBB7_250:                              # %if.else.808
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -296(%rbp)       # imm = 0x7FF
	ja	.LBB7_252
# BB#251:                               # %if.then.811
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-296(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-296(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_256
.LBB7_252:                              # %if.else.820
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -296(%rbp)      # imm = 0xFFFF
	ja	.LBB7_254
# BB#253:                               # %if.then.823
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-296(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-296(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-296(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_255
.LBB7_254:                              # %if.else.837
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-296(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_255:                              # %if.end.841
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_256
.LBB7_256:                              # %if.end.842
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_257
.LBB7_257:                              # %if.end.843
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_258
.LBB7_258:                              # %do.end.844
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_260
.LBB7_259:                              # %if.else.845
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_260:                              # %if.end.849
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_261
.LBB7_261:                              # %do.end.850
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_262
.LBB7_262:                              # %if.end.851
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 48(%rax)
	jmp	.LBB7_298
.LBB7_263:                              # %if.else.857
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	-292(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 20(%rcx)
	movl	%eax, -600(%rbp)        # 4-byte Spill
	jge	.LBB7_265
# BB#264:                               # %cond.true.864
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -604(%rbp)        # 4-byte Spill
	jmp	.LBB7_266
.LBB7_265:                              # %cond.false.865
                                        #   in Loop: Header=BB7_235 Depth=2
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -604(%rbp)        # 4-byte Spill
.LBB7_266:                              # %cond.end.875
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	-604(%rbp), %eax        # 4-byte Reload
	movl	-600(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_270
# BB#267:                               # %if.then.879
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_268
.LBB7_268:                              # %do.body.880
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-276(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#269:                               # %do.end.885
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_298
.LBB7_270:                              # %if.else.886
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	-292(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 24(%rcx)
	movl	%eax, -608(%rbp)        # 4-byte Spill
	jge	.LBB7_272
# BB#271:                               # %cond.true.893
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -612(%rbp)        # 4-byte Spill
	jmp	.LBB7_273
.LBB7_272:                              # %cond.false.894
                                        #   in Loop: Header=BB7_235 Depth=2
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -612(%rbp)        # 4-byte Spill
.LBB7_273:                              # %cond.end.904
                                        #   in Loop: Header=BB7_235 Depth=2
	movl	-612(%rbp), %eax        # 4-byte Reload
	movl	-608(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_293
# BB#274:                               # %if.then.908
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_275
.LBB7_275:                              # %do.body.909
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_290
# BB#276:                               # %if.then.912
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -300(%rbp)
	cmpl	$128, -300(%rbp)
	jb	.LBB7_278
# BB#277:                               # %if.then.917
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-300(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -300(%rbp)
.LBB7_278:                              # %if.end.919
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_279
.LBB7_279:                              # %do.body.920
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -300(%rbp)
	ja	.LBB7_281
# BB#280:                               # %if.then.923
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-300(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_288
.LBB7_281:                              # %if.else.926
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -300(%rbp)       # imm = 0x7FF
	ja	.LBB7_283
# BB#282:                               # %if.then.929
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-300(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-300(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_287
.LBB7_283:                              # %if.else.938
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -300(%rbp)      # imm = 0xFFFF
	ja	.LBB7_285
# BB#284:                               # %if.then.941
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-300(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-300(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-300(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_286
.LBB7_285:                              # %if.else.955
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-300(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_286:                              # %if.end.959
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_287
.LBB7_287:                              # %if.end.960
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_288
.LBB7_288:                              # %if.end.961
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_289
.LBB7_289:                              # %do.end.962
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_291
.LBB7_290:                              # %if.else.963
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_291:                              # %if.end.967
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_292
.LBB7_292:                              # %do.end.968
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_298
.LBB7_293:                              # %if.else.969
                                        #   in Loop: Header=BB7_235 Depth=2
	leaq	-64(%rbp), %rcx
	movq	-272(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	encode_invocation_designation
	movq	%rax, -40(%rbp)
# BB#294:                               # %if.end.971
                                        #   in Loop: Header=BB7_235 Depth=2
	jmp	.LBB7_295
.LBB7_295:                              # %if.end.972
                                        #   in Loop: Header=BB7_235 Depth=2
	jmp	.LBB7_296
.LBB7_296:                              # %if.end.973
                                        #   in Loop: Header=BB7_235 Depth=2
	jmp	.LBB7_297
.LBB7_297:                              # %do.cond
                                        #   in Loop: Header=BB7_235 Depth=2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB7_235
	jmp	.LBB7_298
.LBB7_298:                              # %do.end.974
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_390
.LBB7_299:                              # %if.else.975
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_300
.LBB7_300:                              # %do.body.976
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-272(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -304(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$65536, %ecx            # imm = 0x10000
	cmpl	$0, %ecx
	je	.LBB7_303
# BB#301:                               # %land.lhs.true.984
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	-304(%rbp), %eax
	cmpl	charset_jisx0208, %eax
	jne	.LBB7_303
# BB#302:                               # %if.then.987
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	charset_jisx0208_1978, %eax
	movl	%eax, -304(%rbp)
	movq	charset_table, %rcx
	movslq	-304(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	movq	%rcx, -272(%rbp)
.LBB7_303:                              # %if.end.990
                                        #   in Loop: Header=BB7_300 Depth=2
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_341
# BB#304:                               # %if.then.997
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB7_308
# BB#305:                               # %if.then.1003
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_306
.LBB7_306:                              # %do.body.1004
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movl	-276(%rbp), %ecx
	shrl	$8, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
	movl	-276(%rbp), %ecx
	andl	$255, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#307:                               # %do.end.1015
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_340
.LBB7_308:                              # %if.else.1016
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_309
.LBB7_309:                              # %do.body.1017
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_337
# BB#310:                               # %if.then.1020
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movl	%eax, -308(%rbp)
	cmpl	$128, -308(%rbp)
	jb	.LBB7_312
# BB#311:                               # %if.then.1026
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -308(%rbp)
.LBB7_312:                              # %if.end.1028
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_313
.LBB7_313:                              # %do.body.1029
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -308(%rbp)
	ja	.LBB7_315
# BB#314:                               # %if.then.1032
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_322
.LBB7_315:                              # %if.else.1035
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -308(%rbp)       # imm = 0x7FF
	ja	.LBB7_317
# BB#316:                               # %if.then.1038
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-308(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_321
.LBB7_317:                              # %if.else.1047
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -308(%rbp)      # imm = 0xFFFF
	ja	.LBB7_319
# BB#318:                               # %if.then.1050
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-308(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-308(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_320
.LBB7_319:                              # %if.else.1064
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_320:                              # %if.end.1068
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_321
.LBB7_321:                              # %if.end.1069
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_322
.LBB7_322:                              # %if.end.1070
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_323
.LBB7_323:                              # %do.end.1072
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movl	%eax, -308(%rbp)
	cmpl	$128, -308(%rbp)
	jb	.LBB7_325
# BB#324:                               # %if.then.1077
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -308(%rbp)
.LBB7_325:                              # %if.end.1079
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_326
.LBB7_326:                              # %do.body.1080
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -308(%rbp)
	ja	.LBB7_328
# BB#327:                               # %if.then.1083
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_335
.LBB7_328:                              # %if.else.1086
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -308(%rbp)       # imm = 0x7FF
	ja	.LBB7_330
# BB#329:                               # %if.then.1089
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-308(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_334
.LBB7_330:                              # %if.else.1098
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -308(%rbp)      # imm = 0xFFFF
	ja	.LBB7_332
# BB#331:                               # %if.then.1101
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-308(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-308(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_333
.LBB7_332:                              # %if.else.1115
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-308(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_333:                              # %if.end.1119
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_334
.LBB7_334:                              # %if.end.1120
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_335
.LBB7_335:                              # %if.end.1121
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_336
.LBB7_336:                              # %do.end.1123
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_338
.LBB7_337:                              # %if.else.1124
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-276(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_338:                              # %if.end.1133
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_339
.LBB7_339:                              # %do.end.1135
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_340
.LBB7_340:                              # %if.end.1136
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 48(%rax)
	jmp	.LBB7_389
.LBB7_341:                              # %if.else.1142
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	-304(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 20(%rcx)
	movl	%eax, -616(%rbp)        # 4-byte Spill
	jge	.LBB7_343
# BB#342:                               # %cond.true.1149
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -620(%rbp)        # 4-byte Spill
	jmp	.LBB7_344
.LBB7_343:                              # %cond.false.1150
                                        #   in Loop: Header=BB7_300 Depth=2
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -620(%rbp)        # 4-byte Spill
.LBB7_344:                              # %cond.end.1160
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	-620(%rbp), %eax        # 4-byte Reload
	movl	-616(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_348
# BB#345:                               # %if.then.1164
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_346
.LBB7_346:                              # %do.body.1165
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movl	-276(%rbp), %ecx
	shrl	$8, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
	movl	-276(%rbp), %ecx
	andl	$255, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#347:                               # %do.end.1176
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_389
.LBB7_348:                              # %if.else.1177
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	-304(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 24(%rcx)
	movl	%eax, -624(%rbp)        # 4-byte Spill
	jge	.LBB7_350
# BB#349:                               # %cond.true.1184
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -628(%rbp)        # 4-byte Spill
	jmp	.LBB7_351
.LBB7_350:                              # %cond.false.1185
                                        #   in Loop: Header=BB7_300 Depth=2
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -628(%rbp)        # 4-byte Spill
.LBB7_351:                              # %cond.end.1195
                                        #   in Loop: Header=BB7_300 Depth=2
	movl	-628(%rbp), %eax        # 4-byte Reload
	movl	-624(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_384
# BB#352:                               # %if.then.1199
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_353
.LBB7_353:                              # %do.body.1200
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_381
# BB#354:                               # %if.then.1203
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movl	%eax, -312(%rbp)
	cmpl	$128, -312(%rbp)
	jb	.LBB7_356
# BB#355:                               # %if.then.1209
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -312(%rbp)
.LBB7_356:                              # %if.end.1211
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_357
.LBB7_357:                              # %do.body.1212
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -312(%rbp)
	ja	.LBB7_359
# BB#358:                               # %if.then.1215
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_366
.LBB7_359:                              # %if.else.1218
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -312(%rbp)       # imm = 0x7FF
	ja	.LBB7_361
# BB#360:                               # %if.then.1221
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-312(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_365
.LBB7_361:                              # %if.else.1230
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -312(%rbp)      # imm = 0xFFFF
	ja	.LBB7_363
# BB#362:                               # %if.then.1233
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-312(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-312(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_364
.LBB7_363:                              # %if.else.1247
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_364:                              # %if.end.1251
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_365
.LBB7_365:                              # %if.end.1252
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_366
.LBB7_366:                              # %if.end.1253
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_367
.LBB7_367:                              # %do.end.1255
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movl	%eax, -312(%rbp)
	cmpl	$128, -312(%rbp)
	jb	.LBB7_369
# BB#368:                               # %if.then.1260
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -312(%rbp)
.LBB7_369:                              # %if.end.1262
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_370
.LBB7_370:                              # %do.body.1263
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -312(%rbp)
	ja	.LBB7_372
# BB#371:                               # %if.then.1266
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_379
.LBB7_372:                              # %if.else.1269
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -312(%rbp)       # imm = 0x7FF
	ja	.LBB7_374
# BB#373:                               # %if.then.1272
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-312(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_378
.LBB7_374:                              # %if.else.1281
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -312(%rbp)      # imm = 0xFFFF
	ja	.LBB7_376
# BB#375:                               # %if.then.1284
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-312(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-312(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_377
.LBB7_376:                              # %if.else.1298
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-312(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_377:                              # %if.end.1302
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_378
.LBB7_378:                              # %if.end.1303
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_379
.LBB7_379:                              # %if.end.1304
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_380
.LBB7_380:                              # %do.end.1306
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_382
.LBB7_381:                              # %if.else.1307
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-276(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-276(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_382:                              # %if.end.1316
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_383
.LBB7_383:                              # %do.end.1318
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_389
.LBB7_384:                              # %if.else.1319
                                        #   in Loop: Header=BB7_300 Depth=2
	leaq	-64(%rbp), %rcx
	movq	-272(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	encode_invocation_designation
	movq	%rax, -40(%rbp)
# BB#385:                               # %if.end.1321
                                        #   in Loop: Header=BB7_300 Depth=2
	jmp	.LBB7_386
.LBB7_386:                              # %if.end.1322
                                        #   in Loop: Header=BB7_300 Depth=2
	jmp	.LBB7_387
.LBB7_387:                              # %if.end.1323
                                        #   in Loop: Header=BB7_300 Depth=2
	jmp	.LBB7_388
.LBB7_388:                              # %do.cond.1324
                                        #   in Loop: Header=BB7_300 Depth=2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB7_300
	jmp	.LBB7_389
.LBB7_389:                              # %do.end.1325
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_390
.LBB7_390:                              # %if.end.1326
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_391
.LBB7_391:                              # %do.end.1328
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_392
.LBB7_392:                              # %if.end.1329
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_667
.LBB7_393:                              # %if.else.1330
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$4194175, -96(%rbp)     # imm = 0x3FFF7F
	jle	.LBB7_416
# BB#394:                               # %if.then.1333
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$4194175, -96(%rbp)     # imm = 0x3FFF7F
	jle	.LBB7_396
# BB#395:                               # %cond.true.1336
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -632(%rbp)        # 4-byte Spill
	jmp	.LBB7_397
.LBB7_396:                              # %cond.false.1338
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -632(%rbp)        # 4-byte Spill
.LBB7_397:                              # %cond.end.1340
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-632(%rbp), %eax        # 4-byte Reload
	movl	%eax, -96(%rbp)
# BB#398:                               # %do.body.1342
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_413
# BB#399:                               # %if.then.1345
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -316(%rbp)
	cmpl	$128, -316(%rbp)
	jb	.LBB7_401
# BB#400:                               # %if.then.1349
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-316(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -316(%rbp)
.LBB7_401:                              # %if.end.1351
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_402
.LBB7_402:                              # %do.body.1352
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -316(%rbp)
	ja	.LBB7_404
# BB#403:                               # %if.then.1355
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-316(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_411
.LBB7_404:                              # %if.else.1358
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -316(%rbp)       # imm = 0x7FF
	ja	.LBB7_406
# BB#405:                               # %if.then.1361
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-316(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-316(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_410
.LBB7_406:                              # %if.else.1370
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -316(%rbp)      # imm = 0xFFFF
	ja	.LBB7_408
# BB#407:                               # %if.then.1373
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-316(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-316(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-316(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_409
.LBB7_408:                              # %if.else.1387
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-316(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_409:                              # %if.end.1391
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_410
.LBB7_410:                              # %if.end.1392
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_411
.LBB7_411:                              # %if.end.1393
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_412
.LBB7_412:                              # %do.end.1395
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_414
.LBB7_413:                              # %if.else.1396
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_414:                              # %if.end.1399
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_415
.LBB7_415:                              # %do.end.1401
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_666
.LBB7_416:                              # %if.else.1402
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$0, -100(%rbp)
	jl	.LBB7_454
# BB#417:                               # %if.then.1406
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	charset_table, %rax
	movslq	-100(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -328(%rbp)
# BB#418:                               # %do.body.1409
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB7_419
	jmp	.LBB7_420
.LBB7_419:                              # %cond.true.1411
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB7_421
	jmp	.LBB7_422
.LBB7_420:                              # %cond.false.1415
                                        #   in Loop: Header=BB7_12 Depth=1
	movslq	-96(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB7_422
.LBB7_421:                              # %land.lhs.true.1420
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	$1, %al
	movq	-328(%rbp), %rcx
	movb	88(%rcx), %dl
	shrb	$2, %dl
	andb	$1, %dl
	testb	$1, %dl
	movb	%al, -633(%rbp)         # 1-byte Spill
	jne	.LBB7_442
.LBB7_422:                              # %lor.rhs
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_425
# BB#423:                               # %lor.lhs.false.1433
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$2, 104(%rax)
	je	.LBB7_425
# BB#424:                               # %lor.lhs.false.1437
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$3, 104(%rax)
	jne	.LBB7_426
.LBB7_425:                              # %cond.true.1441
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movq	-328(%rbp), %rdi
	cmpl	128(%rdi), %eax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -640(%rbp)        # 4-byte Spill
	jmp	.LBB7_441
.LBB7_426:                              # %cond.false.1446
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65536, -96(%rbp)       # imm = 0x10000
	jge	.LBB7_428
# BB#427:                               # %cond.true.1449
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	$1, %eax
	movl	-96(%rbp), %edx
	sarl	$10, %edx
	movslq	%edx, %rsi
	movq	-328(%rbp), %rdi
	movzbl	132(%rdi,%rsi), %edx
	movl	-96(%rbp), %r8d
	sarl	$7, %r8d
	andl	$7, %r8d
	movb	%cl, -641(%rbp)         # 1-byte Spill
	movl	%r8d, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	movb	-641(%rbp), %cl         # 1-byte Reload
	movb	%cl, -642(%rbp)         # 1-byte Spill
	jne	.LBB7_429
	jmp	.LBB7_440
.LBB7_428:                              # %cond.false.1459
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	$1, %eax
	movl	-96(%rbp), %edx
	sarl	$15, %edx
	addl	$62, %edx
	movslq	%edx, %rsi
	movq	-328(%rbp), %rdi
	movzbl	132(%rdi,%rsi), %edx
	movl	-96(%rbp), %r8d
	sarl	$12, %r8d
	andl	$7, %r8d
	movb	%cl, -643(%rbp)         # 1-byte Spill
	movl	%r8d, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	movb	-643(%rbp), %cl         # 1-byte Reload
	movb	%cl, -642(%rbp)         # 1-byte Spill
	je	.LBB7_440
.LBB7_429:                              # %land.rhs.1471
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB7_433
# BB#430:                               # %cond.true.1475
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-96(%rbp), %eax
	movq	-328(%rbp), %rdx
	cmpl	120(%rdx), %eax
	movb	%cl, -644(%rbp)         # 1-byte Spill
	jl	.LBB7_432
# BB#431:                               # %land.rhs.1479
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-328(%rbp), %rcx
	cmpl	124(%rcx), %eax
	setle	%dl
	movb	%dl, -644(%rbp)         # 1-byte Spill
.LBB7_432:                              # %land.end.1483
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	-644(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -648(%rbp)        # 4-byte Spill
	jmp	.LBB7_439
.LBB7_433:                              # %cond.false.1484
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB7_437
# BB#434:                               # %land.lhs.true.1488
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_437
# BB#435:                               # %land.lhs.true.1495
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-328(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB7_436
	jmp	.LBB7_437
.LBB7_436:                              # %cond.true.1502
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-328(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-96(%rbp), %esi
	movq	%rax, %rdi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-656(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	sete	%r8b
	xorb	$-1, %r8b
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	movl	%ecx, -660(%rbp)        # 4-byte Spill
	jmp	.LBB7_438
.LBB7_437:                              # %cond.false.1512
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movq	-328(%rbp), %rdi
	cmpl	128(%rdi), %eax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -660(%rbp)        # 4-byte Spill
.LBB7_438:                              # %cond.end.1517
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-660(%rbp), %eax        # 4-byte Reload
	movl	%eax, -648(%rbp)        # 4-byte Spill
.LBB7_439:                              # %cond.end.1519
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-648(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	movb	%cl, -642(%rbp)         # 1-byte Spill
.LBB7_440:                              # %land.end.1522
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	-642(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -640(%rbp)        # 4-byte Spill
.LBB7_441:                              # %cond.end.1524
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-640(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	movb	%cl, -633(%rbp)         # 1-byte Spill
.LBB7_442:                              # %lor.end
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	-633(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -329(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_445
# BB#443:                               # %land.lhs.true.1530
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -344(%rbp)
	cmpq	$0, %rax
	je	.LBB7_445
# BB#444:                               # %if.then.1533
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-344(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-344(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_445:                              # %if.end.1536
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_446
.LBB7_446:                              # %do.end.1538
                                        #   in Loop: Header=BB7_12 Depth=1
	testb	$1, -329(%rbp)
	jne	.LBB7_453
# BB#447:                               # %if.then.1540
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_448
.LBB7_448:                              # %do.body.1541
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movb	$0, charset_map_loaded
	movl	-96(%rbp), %edi
	movq	-88(%rbp), %rsi
	callq	char_charset
	movq	%rax, -328(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_451
# BB#449:                               # %land.lhs.true.1546
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -352(%rbp)
	cmpq	$0, %rax
	je	.LBB7_451
# BB#450:                               # %if.then.1549
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-352(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-352(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_451:                              # %if.end.1552
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_452
.LBB7_452:                              # %do.end.1554
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_453
.LBB7_453:                              # %if.end.1555
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_460
.LBB7_454:                              # %if.else.1556
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_455
.LBB7_455:                              # %do.body.1557
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movb	$0, charset_map_loaded
	movl	-96(%rbp), %edi
	movq	-88(%rbp), %rsi
	callq	char_charset
	movq	%rax, -328(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_458
# BB#456:                               # %land.lhs.true.1562
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -360(%rbp)
	cmpq	$0, %rax
	je	.LBB7_458
# BB#457:                               # %if.then.1565
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-360(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-360(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_458:                              # %if.end.1568
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_459
.LBB7_459:                              # %do.end.1570
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_460
.LBB7_460:                              # %if.end.1571
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpq	$0, -328(%rbp)
	jne	.LBB7_470
# BB#461:                               # %if.then.1573
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB7_463
# BB#462:                               # %if.then.1579
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	$63, -96(%rbp)
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -328(%rbp)
	jmp	.LBB7_469
.LBB7_463:                              # %if.else.1582
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	588(%rax), %ecx
	movl	%ecx, -96(%rbp)
# BB#464:                               # %do.body.1583
                                        #   in Loop: Header=BB7_12 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movb	$0, charset_map_loaded
	movl	-96(%rbp), %edi
	movq	-88(%rbp), %rsi
	callq	char_charset
	movq	%rax, -328(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_467
# BB#465:                               # %land.lhs.true.1588
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -368(%rbp)
	cmpq	$0, %rax
	je	.LBB7_467
# BB#466:                               # %if.then.1591
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-368(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-368(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_467:                              # %if.end.1594
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_468
.LBB7_468:                              # %do.end.1596
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_469
.LBB7_469:                              # %if.end.1597
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_470
.LBB7_470:                              # %if.end.1598
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_471
.LBB7_471:                              # %do.body.1599
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_472
.LBB7_472:                              # %do.body.1601
                                        #   in Loop: Header=BB7_12 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB7_473
	jmp	.LBB7_474
.LBB7_473:                              # %cond.true.1603
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB7_475
	jmp	.LBB7_477
.LBB7_474:                              # %cond.false.1607
                                        #   in Loop: Header=BB7_12 Depth=1
	movslq	-96(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB7_477
.LBB7_475:                              # %land.lhs.true.1612
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_477
# BB#476:                               # %cond.true.1619
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -664(%rbp)        # 4-byte Spill
	jmp	.LBB7_503
.LBB7_477:                              # %cond.false.1620
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_480
# BB#478:                               # %lor.lhs.false.1627
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$2, 104(%rax)
	je	.LBB7_480
# BB#479:                               # %lor.lhs.false.1631
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$3, 104(%rax)
	jne	.LBB7_481
.LBB7_480:                              # %cond.true.1635
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -668(%rbp)        # 4-byte Spill
	jmp	.LBB7_502
.LBB7_481:                              # %cond.false.1637
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-328(%rbp), %rcx
	cmpl	120(%rcx), %eax
	jl	.LBB7_483
# BB#482:                               # %lor.lhs.false.1641
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-328(%rbp), %rcx
	cmpl	124(%rcx), %eax
	jle	.LBB7_484
.LBB7_483:                              # %cond.true.1645
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -672(%rbp)        # 4-byte Spill
	jmp	.LBB7_501
.LBB7_484:                              # %cond.false.1647
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB7_489
# BB#485:                               # %cond.true.1651
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_487
# BB#486:                               # %cond.true.1657
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-96(%rbp), %eax
	movq	-328(%rbp), %rcx
	subl	324(%rcx), %eax
	movq	-328(%rbp), %rcx
	addl	108(%rcx), %eax
	movl	%eax, -676(%rbp)        # 4-byte Spill
	jmp	.LBB7_488
.LBB7_487:                              # %cond.false.1662
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -676(%rbp)        # 4-byte Spill
.LBB7_488:                              # %cond.end.1664
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-676(%rbp), %eax        # 4-byte Reload
	movl	%eax, -680(%rbp)        # 4-byte Spill
	jmp	.LBB7_500
.LBB7_489:                              # %cond.false.1666
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB7_498
# BB#490:                               # %cond.true.1670
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_496
# BB#491:                               # %land.lhs.true.1677
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-328(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB7_492
	jmp	.LBB7_496
.LBB7_492:                              # %cond.true.1684
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-328(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-96(%rbp), %esi
	movq	%rax, %rdi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, charset_work
	movq	charset_work, %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-688(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB7_494
# BB#493:                               # %cond.true.1693
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -692(%rbp)        # 4-byte Spill
	jmp	.LBB7_495
.LBB7_494:                              # %cond.false.1695
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	charset_work, %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -692(%rbp)        # 4-byte Spill
.LBB7_495:                              # %cond.end.1698
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-692(%rbp), %eax        # 4-byte Reload
	movl	%eax, -696(%rbp)        # 4-byte Spill
	jmp	.LBB7_497
.LBB7_496:                              # %cond.false.1700
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -696(%rbp)        # 4-byte Spill
.LBB7_497:                              # %cond.end.1702
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-696(%rbp), %eax        # 4-byte Reload
	movl	%eax, -700(%rbp)        # 4-byte Spill
	jmp	.LBB7_499
.LBB7_498:                              # %cond.false.1704
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rdi
	movl	-96(%rbp), %esi
	callq	encode_char
	movl	%eax, -700(%rbp)        # 4-byte Spill
.LBB7_499:                              # %cond.end.1706
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-700(%rbp), %eax        # 4-byte Reload
	movl	%eax, -680(%rbp)        # 4-byte Spill
.LBB7_500:                              # %cond.end.1708
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-680(%rbp), %eax        # 4-byte Reload
	movl	%eax, -672(%rbp)        # 4-byte Spill
.LBB7_501:                              # %cond.end.1710
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-672(%rbp), %eax        # 4-byte Reload
	movl	%eax, -668(%rbp)        # 4-byte Spill
.LBB7_502:                              # %cond.end.1712
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-668(%rbp), %eax        # 4-byte Reload
	movl	%eax, -664(%rbp)        # 4-byte Spill
.LBB7_503:                              # %cond.end.1714
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-664(%rbp), %eax        # 4-byte Reload
	movl	%eax, -372(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB7_506
# BB#504:                               # %land.lhs.true.1718
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -384(%rbp)
	cmpq	$0, %rax
	je	.LBB7_506
# BB#505:                               # %if.then.1721
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-384(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-384(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB7_506:                              # %if.end.1724
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_507
.LBB7_507:                              # %do.end.1726
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-328(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB7_573
# BB#508:                               # %if.then.1730
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_509
.LBB7_509:                              # %do.body.1731
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-328(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -388(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32768, %ecx            # imm = 0x8000
	cmpl	$0, %ecx
	je	.LBB7_512
# BB#510:                               # %land.lhs.true.1739
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	-388(%rbp), %eax
	cmpl	charset_ascii, %eax
	jne	.LBB7_512
# BB#511:                               # %if.then.1742
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	charset_jisx0201_roman, %eax
	movl	%eax, -388(%rbp)
	movq	charset_table, %rcx
	movslq	-388(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	movq	%rcx, -328(%rbp)
.LBB7_512:                              # %if.end.1745
                                        #   in Loop: Header=BB7_509 Depth=2
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_537
# BB#513:                               # %if.then.1752
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB7_517
# BB#514:                               # %if.then.1758
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_515
.LBB7_515:                              # %do.body.1759
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-372(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#516:                               # %do.end.1765
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_536
.LBB7_517:                              # %if.else.1766
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_518
.LBB7_518:                              # %do.body.1767
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_533
# BB#519:                               # %if.then.1770
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -392(%rbp)
	cmpl	$128, -392(%rbp)
	jb	.LBB7_521
# BB#520:                               # %if.then.1775
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-392(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -392(%rbp)
.LBB7_521:                              # %if.end.1777
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_522
.LBB7_522:                              # %do.body.1778
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -392(%rbp)
	ja	.LBB7_524
# BB#523:                               # %if.then.1781
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-392(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_531
.LBB7_524:                              # %if.else.1784
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -392(%rbp)       # imm = 0x7FF
	ja	.LBB7_526
# BB#525:                               # %if.then.1787
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-392(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-392(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_530
.LBB7_526:                              # %if.else.1796
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -392(%rbp)      # imm = 0xFFFF
	ja	.LBB7_528
# BB#527:                               # %if.then.1799
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-392(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-392(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-392(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_529
.LBB7_528:                              # %if.else.1813
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-392(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_529:                              # %if.end.1817
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_530
.LBB7_530:                              # %if.end.1818
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_531
.LBB7_531:                              # %if.end.1819
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_532
.LBB7_532:                              # %do.end.1821
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_534
.LBB7_533:                              # %if.else.1822
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_534:                              # %if.end.1826
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_535
.LBB7_535:                              # %do.end.1828
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_536
.LBB7_536:                              # %if.end.1829
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 48(%rax)
	jmp	.LBB7_572
.LBB7_537:                              # %if.else.1835
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	-388(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 20(%rcx)
	movl	%eax, -704(%rbp)        # 4-byte Spill
	jge	.LBB7_539
# BB#538:                               # %cond.true.1842
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -708(%rbp)        # 4-byte Spill
	jmp	.LBB7_540
.LBB7_539:                              # %cond.false.1843
                                        #   in Loop: Header=BB7_509 Depth=2
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -708(%rbp)        # 4-byte Spill
.LBB7_540:                              # %cond.end.1853
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	-708(%rbp), %eax        # 4-byte Reload
	movl	-704(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_544
# BB#541:                               # %if.then.1857
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_542
.LBB7_542:                              # %do.body.1858
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-372(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#543:                               # %do.end.1864
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_572
.LBB7_544:                              # %if.else.1865
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	-388(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 24(%rcx)
	movl	%eax, -712(%rbp)        # 4-byte Spill
	jge	.LBB7_546
# BB#545:                               # %cond.true.1872
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -716(%rbp)        # 4-byte Spill
	jmp	.LBB7_547
.LBB7_546:                              # %cond.false.1873
                                        #   in Loop: Header=BB7_509 Depth=2
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -716(%rbp)        # 4-byte Spill
.LBB7_547:                              # %cond.end.1883
                                        #   in Loop: Header=BB7_509 Depth=2
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	-712(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_567
# BB#548:                               # %if.then.1887
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_549
.LBB7_549:                              # %do.body.1888
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_564
# BB#550:                               # %if.then.1891
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -396(%rbp)
	cmpl	$128, -396(%rbp)
	jb	.LBB7_552
# BB#551:                               # %if.then.1896
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-396(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -396(%rbp)
.LBB7_552:                              # %if.end.1898
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_553
.LBB7_553:                              # %do.body.1899
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -396(%rbp)
	ja	.LBB7_555
# BB#554:                               # %if.then.1902
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-396(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_562
.LBB7_555:                              # %if.else.1905
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -396(%rbp)       # imm = 0x7FF
	ja	.LBB7_557
# BB#556:                               # %if.then.1908
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-396(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-396(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_561
.LBB7_557:                              # %if.else.1917
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -396(%rbp)      # imm = 0xFFFF
	ja	.LBB7_559
# BB#558:                               # %if.then.1920
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-396(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-396(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-396(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_560
.LBB7_559:                              # %if.else.1934
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-396(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_560:                              # %if.end.1938
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_561
.LBB7_561:                              # %if.end.1939
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_562
.LBB7_562:                              # %if.end.1940
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_563
.LBB7_563:                              # %do.end.1942
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_565
.LBB7_564:                              # %if.else.1943
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_565:                              # %if.end.1947
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_566
.LBB7_566:                              # %do.end.1949
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_572
.LBB7_567:                              # %if.else.1950
                                        #   in Loop: Header=BB7_509 Depth=2
	leaq	-64(%rbp), %rcx
	movq	-328(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	encode_invocation_designation
	movq	%rax, -40(%rbp)
# BB#568:                               # %if.end.1952
                                        #   in Loop: Header=BB7_509 Depth=2
	jmp	.LBB7_569
.LBB7_569:                              # %if.end.1953
                                        #   in Loop: Header=BB7_509 Depth=2
	jmp	.LBB7_570
.LBB7_570:                              # %if.end.1954
                                        #   in Loop: Header=BB7_509 Depth=2
	jmp	.LBB7_571
.LBB7_571:                              # %do.cond.1955
                                        #   in Loop: Header=BB7_509 Depth=2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB7_509
	jmp	.LBB7_572
.LBB7_572:                              # %do.end.1956
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_664
.LBB7_573:                              # %if.else.1957
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_574
.LBB7_574:                              # %do.body.1958
                                        #   Parent Loop BB7_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-328(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -400(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$65536, %ecx            # imm = 0x10000
	cmpl	$0, %ecx
	je	.LBB7_577
# BB#575:                               # %land.lhs.true.1966
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	-400(%rbp), %eax
	cmpl	charset_jisx0208, %eax
	jne	.LBB7_577
# BB#576:                               # %if.then.1969
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	charset_jisx0208_1978, %eax
	movl	%eax, -400(%rbp)
	movq	charset_table, %rcx
	movslq	-400(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	movq	%rcx, -328(%rbp)
.LBB7_577:                              # %if.end.1972
                                        #   in Loop: Header=BB7_574 Depth=2
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB7_615
# BB#578:                               # %if.then.1979
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB7_582
# BB#579:                               # %if.then.1985
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_580
.LBB7_580:                              # %do.body.1986
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movl	-372(%rbp), %ecx
	shrl	$8, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
	movl	-372(%rbp), %ecx
	andl	$255, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#581:                               # %do.end.1997
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_614
.LBB7_582:                              # %if.else.1998
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_583
.LBB7_583:                              # %do.body.1999
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_611
# BB#584:                               # %if.then.2002
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movl	%eax, -404(%rbp)
	cmpl	$128, -404(%rbp)
	jb	.LBB7_586
# BB#585:                               # %if.then.2008
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -404(%rbp)
.LBB7_586:                              # %if.end.2010
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_587
.LBB7_587:                              # %do.body.2011
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -404(%rbp)
	ja	.LBB7_589
# BB#588:                               # %if.then.2014
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_596
.LBB7_589:                              # %if.else.2017
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -404(%rbp)       # imm = 0x7FF
	ja	.LBB7_591
# BB#590:                               # %if.then.2020
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-404(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_595
.LBB7_591:                              # %if.else.2029
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -404(%rbp)      # imm = 0xFFFF
	ja	.LBB7_593
# BB#592:                               # %if.then.2032
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-404(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-404(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_594
.LBB7_593:                              # %if.else.2046
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_594:                              # %if.end.2050
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_595
.LBB7_595:                              # %if.end.2051
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_596
.LBB7_596:                              # %if.end.2052
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_597
.LBB7_597:                              # %do.end.2054
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movl	%eax, -404(%rbp)
	cmpl	$128, -404(%rbp)
	jb	.LBB7_599
# BB#598:                               # %if.then.2059
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -404(%rbp)
.LBB7_599:                              # %if.end.2061
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_600
.LBB7_600:                              # %do.body.2062
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -404(%rbp)
	ja	.LBB7_602
# BB#601:                               # %if.then.2065
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_609
.LBB7_602:                              # %if.else.2068
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -404(%rbp)       # imm = 0x7FF
	ja	.LBB7_604
# BB#603:                               # %if.then.2071
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-404(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_608
.LBB7_604:                              # %if.else.2080
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -404(%rbp)      # imm = 0xFFFF
	ja	.LBB7_606
# BB#605:                               # %if.then.2083
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-404(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-404(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_607
.LBB7_606:                              # %if.else.2097
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-404(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_607:                              # %if.end.2101
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_608
.LBB7_608:                              # %if.end.2102
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_609
.LBB7_609:                              # %if.end.2103
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_610
.LBB7_610:                              # %do.end.2105
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_612
.LBB7_611:                              # %if.else.2106
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-372(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_612:                              # %if.end.2115
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_613
.LBB7_613:                              # %do.end.2117
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_614
.LBB7_614:                              # %if.end.2118
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-8(%rbp), %rax
	movb	48(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 48(%rax)
	jmp	.LBB7_663
.LBB7_615:                              # %if.else.2124
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	-400(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 20(%rcx)
	movl	%eax, -720(%rbp)        # 4-byte Spill
	jge	.LBB7_617
# BB#616:                               # %cond.true.2131
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -724(%rbp)        # 4-byte Spill
	jmp	.LBB7_618
.LBB7_617:                              # %cond.false.2132
                                        #   in Loop: Header=BB7_574 Depth=2
	movq	-8(%rbp), %rax
	movslq	20(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -724(%rbp)        # 4-byte Spill
.LBB7_618:                              # %cond.end.2142
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	-724(%rbp), %eax        # 4-byte Reload
	movl	-720(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_622
# BB#619:                               # %if.then.2146
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_620
.LBB7_620:                              # %do.body.2147
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movl	-372(%rbp), %ecx
	shrl	$8, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
	movl	-372(%rbp), %ecx
	andl	$255, %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#621:                               # %do.end.2158
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_663
.LBB7_622:                              # %if.else.2159
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	-400(%rbp), %eax
	movq	-8(%rbp), %rcx
	cmpl	$0, 24(%rcx)
	movl	%eax, -728(%rbp)        # 4-byte Spill
	jge	.LBB7_624
# BB#623:                               # %cond.true.2166
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -732(%rbp)        # 4-byte Spill
	jmp	.LBB7_625
.LBB7_624:                              # %cond.false.2167
                                        #   in Loop: Header=BB7_574 Depth=2
	movq	-8(%rbp), %rax
	movslq	24(%rax), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movl	%edx, -732(%rbp)        # 4-byte Spill
.LBB7_625:                              # %cond.end.2177
                                        #   in Loop: Header=BB7_574 Depth=2
	movl	-732(%rbp), %eax        # 4-byte Reload
	movl	-728(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jne	.LBB7_658
# BB#626:                               # %if.then.2181
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_627
.LBB7_627:                              # %do.body.2182
                                        #   in Loop: Header=BB7_12 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_655
# BB#628:                               # %if.then.2185
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movl	%eax, -408(%rbp)
	cmpl	$128, -408(%rbp)
	jb	.LBB7_630
# BB#629:                               # %if.then.2191
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -408(%rbp)
.LBB7_630:                              # %if.end.2193
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_631
.LBB7_631:                              # %do.body.2194
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -408(%rbp)
	ja	.LBB7_633
# BB#632:                               # %if.then.2197
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_640
.LBB7_633:                              # %if.else.2200
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -408(%rbp)       # imm = 0x7FF
	ja	.LBB7_635
# BB#634:                               # %if.then.2203
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-408(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_639
.LBB7_635:                              # %if.else.2212
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -408(%rbp)      # imm = 0xFFFF
	ja	.LBB7_637
# BB#636:                               # %if.then.2215
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-408(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-408(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_638
.LBB7_637:                              # %if.else.2229
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_638:                              # %if.end.2233
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_639
.LBB7_639:                              # %if.end.2234
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_640
.LBB7_640:                              # %if.end.2235
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_641
.LBB7_641:                              # %do.end.2237
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movl	%eax, -408(%rbp)
	cmpl	$128, -408(%rbp)
	jb	.LBB7_643
# BB#642:                               # %if.then.2242
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -408(%rbp)
.LBB7_643:                              # %if.end.2244
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_644
.LBB7_644:                              # %do.body.2245
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$127, -408(%rbp)
	ja	.LBB7_646
# BB#645:                               # %if.then.2248
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_653
.LBB7_646:                              # %if.else.2251
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$2047, -408(%rbp)       # imm = 0x7FF
	ja	.LBB7_648
# BB#647:                               # %if.then.2254
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-408(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_652
.LBB7_648:                              # %if.else.2263
                                        #   in Loop: Header=BB7_12 Depth=1
	cmpl	$65535, -408(%rbp)      # imm = 0xFFFF
	ja	.LBB7_650
# BB#649:                               # %if.then.2266
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-408(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-408(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_651
.LBB7_650:                              # %if.else.2280
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-408(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_651:                              # %if.end.2284
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_652
.LBB7_652:                              # %if.end.2285
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_653
.LBB7_653:                              # %if.end.2286
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_654
.LBB7_654:                              # %do.end.2288
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_656
.LBB7_655:                              # %if.else.2289
                                        #   in Loop: Header=BB7_12 Depth=1
	movl	-372(%rbp), %eax
	shrl	$8, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-372(%rbp), %eax
	andl	$255, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_656:                              # %if.end.2298
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_657
.LBB7_657:                              # %do.end.2300
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_663
.LBB7_658:                              # %if.else.2301
                                        #   in Loop: Header=BB7_574 Depth=2
	leaq	-64(%rbp), %rcx
	movq	-328(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	encode_invocation_designation
	movq	%rax, -40(%rbp)
# BB#659:                               # %if.end.2303
                                        #   in Loop: Header=BB7_574 Depth=2
	jmp	.LBB7_660
.LBB7_660:                              # %if.end.2304
                                        #   in Loop: Header=BB7_574 Depth=2
	jmp	.LBB7_661
.LBB7_661:                              # %if.end.2305
                                        #   in Loop: Header=BB7_574 Depth=2
	jmp	.LBB7_662
.LBB7_662:                              # %do.cond.2306
                                        #   in Loop: Header=BB7_574 Depth=2
	movb	$1, %al
	testb	$1, %al
	jne	.LBB7_574
	jmp	.LBB7_663
.LBB7_663:                              # %do.end.2307
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_664
.LBB7_664:                              # %if.end.2308
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_665
.LBB7_665:                              # %do.end.2310
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_666
.LBB7_666:                              # %if.end.2311
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_667
.LBB7_667:                              # %if.end.2312
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_668
.LBB7_668:                              # %if.end.2313
                                        #   in Loop: Header=BB7_12 Depth=1
	jmp	.LBB7_12
.LBB7_669:                              # %while.end
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB7_743
# BB#670:                               # %land.lhs.true.2320
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB7_743
# BB#671:                               # %if.then.2326
	jmp	.LBB7_672
.LBB7_672:                              # %do.body.2327
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB7_674
# BB#673:                               # %if.then.2332
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -416(%rbp)
	movq	-8(%rbp), %rdi
	movq	-416(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB7_674:                              # %if.end.2344
	jmp	.LBB7_675
.LBB7_675:                              # %do.end.2346
	jmp	.LBB7_676
.LBB7_676:                              # %do.body.2347
	movq	-8(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB7_682
# BB#677:                               # %if.then.2356
	jmp	.LBB7_678
.LBB7_678:                              # %do.body.2357
	jmp	.LBB7_679
.LBB7_679:                              # %do.body.2358
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$15, (%rax)
# BB#680:                               # %do.end.2362
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
# BB#681:                               # %do.end.2368
	jmp	.LBB7_682
.LBB7_682:                              # %if.end.2369
	movl	$0, -420(%rbp)
.LBB7_683:                              # %for.cond.2370
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -420(%rbp)
	jge	.LBB7_741
# BB#684:                               # %for.body.2373
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-420(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	cmpq	$0, %rax
	jl	.LBB7_739
# BB#685:                               # %land.lhs.true.2384
                                        #   in Loop: Header=BB7_683 Depth=1
	movslq	-420(%rbp), %rax
	movq	-8(%rbp), %rcx
	movslq	28(%rcx,%rax,4), %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-420(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	-744(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB7_739
# BB#686:                               # %if.then.2401
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	charset_table, %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$20, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movslq	-420(%rbp), %rsi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	imulq	$328, %rax, %rax        # imm = 0x148
	movq	-752(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	%rsi, -432(%rbp)
# BB#687:                               # %do.body.2411
                                        #   in Loop: Header=BB7_683 Depth=1
	movabsq	$.L.str.109, %rax
	movabsq	$.L.str.108, %rcx
	movq	-432(%rbp), %rdx
	movl	92(%rdx), %esi
	movb	%sil, %dil
	movb	%dil, -433(%rbp)
	movq	%rcx, -448(%rbp)
	movq	%rax, -456(%rbp)
	movl	$-1, -460(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %esi
	andl	$128, %esi
	cmpl	$0, %esi
	je	.LBB7_689
# BB#688:                               # %if.then.2423
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-432(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, -460(%rbp)
.LBB7_689:                              # %if.end.2425
                                        #   in Loop: Header=BB7_683 Depth=1
	cmpl	$0, -460(%rbp)
	jl	.LBB7_711
# BB#690:                               # %if.then.2428
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_691
.LBB7_691:                              # %do.body.2429
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$27, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$38, (%rax)
# BB#692:                               # %do.end.2434
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_693
.LBB7_693:                              # %do.body.2435
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB7_708
# BB#694:                               # %if.then.2438
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-460(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -464(%rbp)
	cmpl	$128, -464(%rbp)
	jb	.LBB7_696
# BB#695:                               # %if.then.2443
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-464(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -464(%rbp)
.LBB7_696:                              # %if.end.2445
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_697
.LBB7_697:                              # %do.body.2446
                                        #   in Loop: Header=BB7_683 Depth=1
	cmpl	$127, -464(%rbp)
	ja	.LBB7_699
# BB#698:                               # %if.then.2449
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-464(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_706
.LBB7_699:                              # %if.else.2452
                                        #   in Loop: Header=BB7_683 Depth=1
	cmpl	$2047, -464(%rbp)       # imm = 0x7FF
	ja	.LBB7_701
# BB#700:                               # %if.then.2455
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-464(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-464(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_705
.LBB7_701:                              # %if.else.2464
                                        #   in Loop: Header=BB7_683 Depth=1
	cmpl	$65535, -464(%rbp)      # imm = 0xFFFF
	ja	.LBB7_703
# BB#702:                               # %if.then.2467
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-464(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-464(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-464(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB7_704
.LBB7_703:                              # %if.else.2481
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-464(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB7_704:                              # %if.end.2485
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_705
.LBB7_705:                              # %if.end.2486
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_706
.LBB7_706:                              # %if.end.2487
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_707
.LBB7_707:                              # %do.end.2489
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_709
.LBB7_708:                              # %if.else.2490
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-460(%rbp), %eax
	addl	$64, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB7_709:                              # %if.end.2494
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_710
.LBB7_710:                              # %do.end.2496
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_711
.LBB7_711:                              # %if.end.2497
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_712
.LBB7_712:                              # %do.body.2498
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$27, (%rax)
# BB#713:                               # %do.end.2502
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-432(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB7_720
# BB#714:                               # %if.then.2506
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-432(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_716
# BB#715:                               # %if.then.2513
                                        #   in Loop: Header=BB7_683 Depth=1
	movslq	-420(%rbp), %rax
	movq	-448(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -468(%rbp)
	jmp	.LBB7_717
.LBB7_716:                              # %if.else.2517
                                        #   in Loop: Header=BB7_683 Depth=1
	movslq	-420(%rbp), %rax
	movq	-456(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -468(%rbp)
.LBB7_717:                              # %if.end.2521
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_718
.LBB7_718:                              # %do.body.2522
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-468(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#719:                               # %do.end.2527
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_735
.LBB7_720:                              # %if.else.2528
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_721
.LBB7_721:                              # %do.body.2529
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$36, (%rax)
# BB#722:                               # %do.end.2533
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-432(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB7_731
# BB#723:                               # %if.then.2539
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	.LBB7_727
# BB#724:                               # %lor.lhs.false.2545
                                        #   in Loop: Header=BB7_683 Depth=1
	cmpl	$0, -420(%rbp)
	jne	.LBB7_727
# BB#725:                               # %lor.lhs.false.2548
                                        #   in Loop: Header=BB7_683 Depth=1
	movzbl	-433(%rbp), %eax
	cmpl	$64, %eax
	jl	.LBB7_727
# BB#726:                               # %lor.lhs.false.2552
                                        #   in Loop: Header=BB7_683 Depth=1
	movzbl	-433(%rbp), %eax
	cmpl	$66, %eax
	jle	.LBB7_730
.LBB7_727:                              # %if.then.2556
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_728
.LBB7_728:                              # %do.body.2557
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movslq	-420(%rbp), %rax
	movq	-448(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
# BB#729:                               # %do.end.2563
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_730
.LBB7_730:                              # %if.end.2564
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_734
.LBB7_731:                              # %if.else.2565
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_732
.LBB7_732:                              # %do.body.2566
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movslq	-420(%rbp), %rax
	movq	-456(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	%dl, (%rax)
# BB#733:                               # %do.end.2572
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_734
.LBB7_734:                              # %if.end.2573
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_735
.LBB7_735:                              # %if.end.2574
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_736
.LBB7_736:                              # %do.body.2575
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movb	-433(%rbp), %cl
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%cl, (%rax)
# BB#737:                               # %do.end.2579
                                        #   in Loop: Header=BB7_683 Depth=1
	movq	-432(%rbp), %rax
	movl	(%rax), %ecx
	movslq	-420(%rbp), %rax
	movq	-8(%rbp), %rdx
	movl	%ecx, 28(%rdx,%rax,4)
# BB#738:                               # %do.end.2587
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_739
.LBB7_739:                              # %if.end.2588
                                        #   in Loop: Header=BB7_683 Depth=1
	jmp	.LBB7_740
.LBB7_740:                              # %for.inc.2589
                                        #   in Loop: Header=BB7_683 Depth=1
	movl	-420(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -420(%rbp)
	jmp	.LBB7_683
.LBB7_741:                              # %for.end.2591
	jmp	.LBB7_742
.LBB7_742:                              # %do.end.2593
	jmp	.LBB7_743
.LBB7_743:                              # %if.end.2594
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movb	-53(%rbp), %cl
	movq	-8(%rbp), %rdi
	andb	$1, %cl
	movb	48(%rdi), %dl
	shlb	$1, %cl
	andb	$-3, %dl
	orb	%cl, %dl
	movb	%dl, 48(%rdi)
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %r8
	addq	392(%r8), %rdi
	movq	%rdi, 392(%r8)
	movq	-40(%rbp), %rdi
	movq	-8(%rbp), %r8
	movq	496(%r8), %r8
	subq	%r8, %rdi
	movq	-8(%rbp), %r8
	movq	%rdi, 384(%r8)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$752, %rsp              # imm = 0x2F0
	popq	%rbp
	retq
.Lfunc_end7:
	.size	encode_coding_iso_2022, .Lfunc_end7-encode_coding_iso_2022
	.cfi_endproc

	.align	16, 0x90
	.type	setup_iso_safe_charsets,@function
setup_iso_safe_charsets:                # @setup_iso_safe_charsets
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp24:
	.cfi_def_cfa_offset 16
.Ltmp25:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp26:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movl	$23, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, -16(%rbp)
	movl	-68(%rbp), %ecx
	andl	$1048576, %ecx          # imm = 0x100000
	cmpl	$0, %ecx
	je	.LBB8_3
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	cmpq	Viso_2022_charset_list, %rax
	je	.LBB8_3
# BB#2:                                 # %if.then
	movl	$4, %eax
	movl	%eax, %esi
	movq	Viso_2022_charset_list, %rcx
	movq	%rcx, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rdx
	callq	ASET
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$15, %edi
	movl	%edi, %esi
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB8_3:                                # %if.end
	movl	$15, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB8_4
	jmp	.LBB8_5
.LBB8_4:                                # %if.then.6
	jmp	.LBB8_26
.LBB8_5:                                # %if.end.7
	movl	$0, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB8_6:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB8_11
# BB#7:                                 # %for.body
                                        #   in Loop: Header=BB8_6 Depth=1
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-72(%rbp), %ecx
	cmpl	-76(%rbp), %ecx
	jge	.LBB8_9
# BB#8:                                 # %if.then.16
                                        #   in Loop: Header=BB8_6 Depth=1
	movl	-76(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB8_9:                                # %if.end.17
                                        #   in Loop: Header=BB8_6 Depth=1
	jmp	.LBB8_10
.LBB8_10:                               # %for.inc
                                        #   in Loop: Header=BB8_6 Depth=1
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB8_6
.LBB8_11:                               # %for.end
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	callq	make_uninit_string
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	SDATA
	movl	$22, %ecx
	movl	%ecx, %esi
	movl	$255, %ecx
	movl	-72(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, %rdi
	movq	%rsi, -120(%rbp)        # 8-byte Spill
	movl	%ecx, %esi
	callq	memset
	movq	-8(%rbp), %rdi
	movq	-120(%rbp), %rsi        # 8-byte Reload
	callq	AREF
	movl	$21, %ecx
	movl	%ecx, %esi
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB8_12:                               # %for.cond.33
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB8_25
# BB#13:                                # %for.body.38
                                        #   in Loop: Header=BB8_12 Depth=1
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	charset_table, %rax
	movq	-88(%rbp), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-88(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	Fassq
	movq	%rax, %rdi
	callq	Fcdr
	xorl	%edi, %edi
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB8_15
# BB#14:                                # %if.then.48
                                        #   in Loop: Header=BB8_12 Depth=1
	movq	-24(%rbp), %rdi
	movq	-88(%rbp), %rax
	sarq	$2, %rax
	movq	-96(%rbp), %rcx
	sarq	$2, %rcx
	movb	%cl, %dl
	movq	%rax, %rsi
	movzbl	%dl, %edx
	callq	SSET
	jmp	.LBB8_23
.LBB8_15:                               # %if.else
                                        #   in Loop: Header=BB8_12 Depth=1
	movq	-104(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB8_19
# BB#16:                                # %if.then.52
                                        #   in Loop: Header=BB8_12 Depth=1
	cmpq	$4, -64(%rbp)
	jge	.LBB8_18
# BB#17:                                # %if.then.55
                                        #   in Loop: Header=BB8_12 Depth=1
	movq	-24(%rbp), %rdi
	movq	-88(%rbp), %rax
	sarq	$2, %rax
	movq	-64(%rbp), %rcx
	movb	%cl, %dl
	movq	%rax, %rsi
	movzbl	%dl, %edx
	callq	SSET
.LBB8_18:                               # %if.end.58
                                        #   in Loop: Header=BB8_12 Depth=1
	jmp	.LBB8_22
.LBB8_19:                               # %if.else.59
                                        #   in Loop: Header=BB8_12 Depth=1
	cmpq	$4, -56(%rbp)
	jge	.LBB8_21
# BB#20:                                # %if.then.62
                                        #   in Loop: Header=BB8_12 Depth=1
	movq	-24(%rbp), %rdi
	movq	-88(%rbp), %rax
	sarq	$2, %rax
	movq	-56(%rbp), %rcx
	movb	%cl, %dl
	movq	%rax, %rsi
	movzbl	%dl, %edx
	callq	SSET
.LBB8_21:                               # %if.end.65
                                        #   in Loop: Header=BB8_12 Depth=1
	jmp	.LBB8_22
.LBB8_22:                               # %if.end.66
                                        #   in Loop: Header=BB8_12 Depth=1
	jmp	.LBB8_23
.LBB8_23:                               # %if.end.67
                                        #   in Loop: Header=BB8_12 Depth=1
	jmp	.LBB8_24
.LBB8_24:                               # %for.inc.68
                                        #   in Loop: Header=BB8_12 Depth=1
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB8_12
.LBB8_25:                               # %for.end.72
	movl	$15, %eax
	movl	%eax, %esi
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
.LBB8_26:                               # %return
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end8:
	.size	setup_iso_safe_charsets, .Lfunc_end8-setup_iso_safe_charsets
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_charset,@function
detect_coding_charset:                  # @detect_coding_charset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp27:
	.cfi_def_cfa_offset 16
.Ltmp28:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp29:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movabsq	$coding_categories, %rax
	addq	$8624, %rax             # imm = 0x21B0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -49(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -92(%rbp)
	movq	-16(%rbp), %rsi
	movq	360(%rsi), %rsi
	movq	%rsi, -104(%rbp)
	movb	$0, -105(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %ecx
	orl	$16384, %ecx            # imm = 0x4000
	movl	%ecx, (%rsi)
	movq	%rax, -16(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$16, %ecx
	movl	%ecx, %esi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, -80(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SSDATA
	movabsq	$.L.str.110, %rsi
	movl	$9, %ecx
	movl	%ecx, %edx
	movq	%rax, %rdi
	callq	strncmp
	cmpl	$0, %eax
	je	.LBB9_2
# BB#1:                                 # %lor.lhs.false
	movq	-88(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SSDATA
	movabsq	$.L.str.111, %rsi
	movl	$10, %ecx
	movl	%ecx, %edx
	movq	%rax, %rdi
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB9_3
.LBB9_2:                                # %if.then
	movb	$1, -105(%rbp)
.LBB9_3:                                # %if.end
	movl	$5, %eax
	movl	%eax, %esi
	movq	-72(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB9_5
# BB#4:                                 # %if.then.19
	movq	-104(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB9_5:                                # %if.end.21
	jmp	.LBB9_6
.LBB9_6:                                # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_31 Depth 2
                                        #     Child Loop BB9_55 Depth 2
                                        #       Child Loop BB9_57 Depth 3
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#7:                                 # %do.body
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB9_11
# BB#8:                                 # %if.then.23
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB9_10
# BB#9:                                 # %if.then.25
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB9_10:                               # %if.end.26
	jmp	.LBB9_86
.LBB9_11:                               # %if.end.27
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -112(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB9_17
# BB#12:                                # %land.lhs.true
                                        #   in Loop: Header=BB9_6 Depth=1
	movl	-112(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB9_17
# BB#13:                                # %if.then.30
                                        #   in Loop: Header=BB9_6 Depth=1
	movl	-112(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB9_15
# BB#14:                                # %if.then.34
                                        #   in Loop: Header=BB9_6 Depth=1
	movl	-112(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB9_16
.LBB9_15:                               # %if.else
                                        #   in Loop: Header=BB9_6 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -112(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB9_16:                               # %if.end.41
                                        #   in Loop: Header=BB9_6 Depth=1
	jmp	.LBB9_17
.LBB9_17:                               # %if.end.42
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#18:                                # %do.end
                                        #   in Loop: Header=BB9_6 Depth=1
	cmpl	$0, -112(%rbp)
	jge	.LBB9_20
# BB#19:                                # %if.then.45
                                        #   in Loop: Header=BB9_6 Depth=1
	jmp	.LBB9_6
.LBB9_20:                               # %if.end.46
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	-80(%rbp), %rdi
	movslq	-112(%rbp), %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB9_22
# BB#21:                                # %if.then.52
	jmp	.LBB9_84
.LBB9_22:                               # %if.end.53
                                        #   in Loop: Header=BB9_6 Depth=1
	cmpl	$128, -112(%rbp)
	jl	.LBB9_29
# BB#23:                                # %if.then.56
                                        #   in Loop: Header=BB9_6 Depth=1
	cmpl	$160, -112(%rbp)
	jge	.LBB9_28
# BB#24:                                # %land.lhs.true.59
                                        #   in Loop: Header=BB9_6 Depth=1
	testb	$1, -105(%rbp)
	je	.LBB9_28
# BB#25:                                # %land.lhs.true.62
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	globals+1256, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB9_26
	jmp	.LBB9_27
.LBB9_26:                               # %lor.lhs.false.64
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	globals+1256, %rdi
	movslq	-112(%rbp), %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB9_28
.LBB9_27:                               # %if.then.70
	jmp	.LBB9_84
.LBB9_28:                               # %if.end.71
                                        #   in Loop: Header=BB9_6 Depth=1
	movl	$16384, -92(%rbp)       # imm = 0x4000
.LBB9_29:                               # %if.end.72
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB9_54
# BB#30:                                # %if.then.78
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	charset_table, %rax
	movq	-120(%rbp), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movl	16(%rax), %edx
	movl	%edx, -132(%rbp)
	movl	$1, -136(%rbp)
.LBB9_31:                               # %for.cond
                                        #   Parent Loop BB9_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-136(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB9_51
# BB#32:                                # %for.body
                                        #   in Loop: Header=BB9_31 Depth=2
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB9_34
# BB#33:                                # %if.then.84
	jmp	.LBB9_85
.LBB9_34:                               # %if.end.85
                                        #   in Loop: Header=BB9_31 Depth=2
	jmp	.LBB9_35
.LBB9_35:                               # %do.body.86
                                        #   in Loop: Header=BB9_31 Depth=2
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB9_39
# BB#36:                                # %if.then.89
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB9_38
# BB#37:                                # %if.then.92
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB9_38:                               # %if.end.93
	jmp	.LBB9_86
.LBB9_39:                               # %if.end.94
                                        #   in Loop: Header=BB9_31 Depth=2
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -112(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB9_45
# BB#40:                                # %land.lhs.true.99
                                        #   in Loop: Header=BB9_31 Depth=2
	movl	-112(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB9_45
# BB#41:                                # %if.then.102
                                        #   in Loop: Header=BB9_31 Depth=2
	movl	-112(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB9_43
# BB#42:                                # %if.then.106
                                        #   in Loop: Header=BB9_31 Depth=2
	movl	-112(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB9_44
.LBB9_43:                               # %if.else.112
                                        #   in Loop: Header=BB9_31 Depth=2
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -112(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB9_44:                               # %if.end.116
                                        #   in Loop: Header=BB9_31 Depth=2
	jmp	.LBB9_45
.LBB9_45:                               # %if.end.117
                                        #   in Loop: Header=BB9_31 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#46:                                # %do.end.119
                                        #   in Loop: Header=BB9_31 Depth=2
	movl	-112(%rbp), %eax
	movl	-132(%rbp), %ecx
	subl	$1, %ecx
	subl	-136(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rdx
	movq	-128(%rbp), %rsi
	cmpl	20(%rsi,%rdx,4), %eax
	jl	.LBB9_48
# BB#47:                                # %lor.lhs.false.124
                                        #   in Loop: Header=BB9_31 Depth=2
	movl	-112(%rbp), %eax
	movl	-132(%rbp), %ecx
	subl	$1, %ecx
	subl	-136(%rbp), %ecx
	shll	$2, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	-128(%rbp), %rsi
	cmpl	20(%rsi,%rdx,4), %eax
	jle	.LBB9_49
.LBB9_48:                               # %if.then.133
                                        #   in Loop: Header=BB9_6 Depth=1
	jmp	.LBB9_51
.LBB9_49:                               # %if.end.134
                                        #   in Loop: Header=BB9_31 Depth=2
	jmp	.LBB9_50
.LBB9_50:                               # %for.inc
                                        #   in Loop: Header=BB9_31 Depth=2
	movl	-136(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB9_31
.LBB9_51:                               # %for.end
                                        #   in Loop: Header=BB9_6 Depth=1
	movl	-136(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB9_53
# BB#52:                                # %if.then.138
	jmp	.LBB9_84
.LBB9_53:                               # %if.end.139
                                        #   in Loop: Header=BB9_6 Depth=1
	jmp	.LBB9_83
.LBB9_54:                               # %if.else.140
                                        #   in Loop: Header=BB9_6 Depth=1
	movl	$1, -136(%rbp)
.LBB9_55:                               # %for.cond.141
                                        #   Parent Loop BB9_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_57 Depth 3
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB9_80
# BB#56:                                # %for.body.146
                                        #   in Loop: Header=BB9_55 Depth=2
	movq	charset_table, %rax
	movq	-120(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movl	16(%rax), %edx
	movl	%edx, -132(%rbp)
.LBB9_57:                               # %while.cond.151
                                        #   Parent Loop BB9_6 Depth=1
                                        #     Parent Loop BB9_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-136(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB9_76
# BB#58:                                # %while.body.154
                                        #   in Loop: Header=BB9_57 Depth=3
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB9_60
# BB#59:                                # %if.then.157
	jmp	.LBB9_85
.LBB9_60:                               # %if.end.158
                                        #   in Loop: Header=BB9_57 Depth=3
	jmp	.LBB9_61
.LBB9_61:                               # %do.body.159
                                        #   in Loop: Header=BB9_57 Depth=3
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB9_65
# BB#62:                                # %if.then.162
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB9_64
# BB#63:                                # %if.then.165
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB9_64:                               # %if.end.166
	jmp	.LBB9_86
.LBB9_65:                               # %if.end.167
                                        #   in Loop: Header=BB9_57 Depth=3
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -112(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB9_71
# BB#66:                                # %land.lhs.true.172
                                        #   in Loop: Header=BB9_57 Depth=3
	movl	-112(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB9_71
# BB#67:                                # %if.then.175
                                        #   in Loop: Header=BB9_57 Depth=3
	movl	-112(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB9_69
# BB#68:                                # %if.then.179
                                        #   in Loop: Header=BB9_57 Depth=3
	movl	-112(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB9_70
.LBB9_69:                               # %if.else.185
                                        #   in Loop: Header=BB9_57 Depth=3
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -112(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB9_70:                               # %if.end.189
                                        #   in Loop: Header=BB9_57 Depth=3
	jmp	.LBB9_71
.LBB9_71:                               # %if.end.190
                                        #   in Loop: Header=BB9_57 Depth=3
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#72:                                # %do.end.192
                                        #   in Loop: Header=BB9_57 Depth=3
	movl	-112(%rbp), %eax
	movl	-132(%rbp), %ecx
	subl	$1, %ecx
	subl	-136(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rdx
	movq	-128(%rbp), %rsi
	cmpl	20(%rsi,%rdx,4), %eax
	jl	.LBB9_74
# BB#73:                                # %lor.lhs.false.201
                                        #   in Loop: Header=BB9_57 Depth=3
	movl	-112(%rbp), %eax
	movl	-132(%rbp), %ecx
	subl	$1, %ecx
	subl	-136(%rbp), %ecx
	shll	$2, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	-128(%rbp), %rsi
	cmpl	20(%rsi,%rdx,4), %eax
	jle	.LBB9_75
.LBB9_74:                               # %if.then.211
                                        #   in Loop: Header=BB9_55 Depth=2
	jmp	.LBB9_76
.LBB9_75:                               # %if.end.212
                                        #   in Loop: Header=BB9_57 Depth=3
	movl	-136(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB9_57
.LBB9_76:                               # %while.end
                                        #   in Loop: Header=BB9_55 Depth=2
	movl	-136(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jne	.LBB9_78
# BB#77:                                # %if.then.216
                                        #   in Loop: Header=BB9_6 Depth=1
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)
	jmp	.LBB9_80
.LBB9_78:                               # %if.end.218
                                        #   in Loop: Header=BB9_55 Depth=2
	jmp	.LBB9_79
.LBB9_79:                               # %for.inc.219
                                        #   in Loop: Header=BB9_55 Depth=2
	movq	-120(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	jmp	.LBB9_55
.LBB9_80:                               # %for.end.221
                                        #   in Loop: Header=BB9_6 Depth=1
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB9_82
# BB#81:                                # %if.then.226
	jmp	.LBB9_84
.LBB9_82:                               # %if.end.227
                                        #   in Loop: Header=BB9_6 Depth=1
	jmp	.LBB9_83
.LBB9_83:                               # %if.end.228
                                        #   in Loop: Header=BB9_6 Depth=1
	jmp	.LBB9_6
.LBB9_84:                               # %while.end.229
	jmp	.LBB9_85
.LBB9_85:                               # %too_short
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$16384, %ecx            # imm = 0x4000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB9_87
.LBB9_86:                               # %no_more_source
	movl	-92(%rbp), %eax
	movq	-24(%rbp), %rcx
	orl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
	movb	$1, -1(%rbp)
.LBB9_87:                               # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end9:
	.size	detect_coding_charset, .Lfunc_end9-detect_coding_charset
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_charset,@function
decode_coding_charset:                  # @decode_coding_charset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp30:
	.cfi_def_cfa_offset 16
.Ltmp31:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp32:
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp              # imm = 0x130
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rax
	addq	400(%rax), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	addq	$-40, %rax
	movq	%rax, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -65(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	392(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	charset_ascii, %ecx
	movl	%ecx, -108(%rbp)
	testb	$1, globals+3389
	movb	%dl, -169(%rbp)         # 1-byte Spill
	jne	.LBB10_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -169(%rbp)         # 1-byte Spill
.LBB10_2:                               # %land.end
	movb	-169(%rbp), %al         # 1-byte Reload
	movl	$16, %ecx
	movl	%ecx, %esi
	andb	$1, %al
	movb	%al, -109(%rbp)
	movl	$-1, -116(%rbp)
	movq	-80(%rbp), %rdi
	callq	AREF
	movq	%rax, -88(%rbp)
.LBB10_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_44 Depth 2
                                        #     Child Loop BB10_91 Depth 2
                                        #       Child Loop BB10_93 Depth 3
	movl	$1, -144(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB10_7
# BB#4:                                 # %if.then
	cmpl	$0, -116(%rbp)
	jl	.LBB10_6
# BB#5:                                 # %if.then.20
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB10_6:                               # %if.end
	jmp	.LBB10_175
.LBB10_7:                               # %if.end.21
                                        #   in Loop: Header=BB10_3 Depth=1
	cmpl	$0, -116(%rbp)
	jl	.LBB10_9
# BB#8:                                 # %if.then.23
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	$-1, -116(%rbp)
	jmp	.LBB10_37
.LBB10_9:                               # %if.else
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_10
.LBB10_10:                              # %do.body
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB10_14
# BB#11:                                # %if.then.25
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB10_13
# BB#12:                                # %if.then.27
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_13:                              # %if.end.28
	jmp	.LBB10_176
.LBB10_14:                              # %if.end.29
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB10_20
# BB#15:                                # %land.lhs.true
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB10_20
# BB#16:                                # %if.then.34
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB10_18
# BB#17:                                # %if.then.38
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB10_19
.LBB10_18:                              # %if.else.42
                                        #   in Loop: Header=BB10_3 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_19:                              # %if.end.45
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_20
.LBB10_20:                              # %if.end.46
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#21:                                # %do.end
                                        #   in Loop: Header=BB10_3 Depth=1
	testb	$1, -109(%rbp)
	je	.LBB10_36
# BB#22:                                # %land.lhs.true.49
                                        #   in Loop: Header=BB10_3 Depth=1
	cmpl	$13, -120(%rbp)
	jne	.LBB10_36
# BB#23:                                # %if.then.52
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_24
.LBB10_24:                              # %do.body.53
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB10_28
# BB#25:                                # %if.then.56
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB10_27
# BB#26:                                # %if.then.59
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_27:                              # %if.end.60
	jmp	.LBB10_176
.LBB10_28:                              # %if.end.61
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -116(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB10_34
# BB#29:                                # %land.lhs.true.66
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-116(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB10_34
# BB#30:                                # %if.then.69
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-116(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB10_32
# BB#31:                                # %if.then.73
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-116(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB10_33
.LBB10_32:                              # %if.else.79
                                        #   in Loop: Header=BB10_3 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -116(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_33:                              # %if.end.83
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_34
.LBB10_34:                              # %if.end.84
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#35:                                # %do.end.86
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_36
.LBB10_36:                              # %if.end.87
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_37
.LBB10_37:                              # %if.end.88
                                        #   in Loop: Header=BB10_3 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB10_39
# BB#38:                                # %if.then.91
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_154
.LBB10_39:                              # %if.end.92
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	-88(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	callq	AREF
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	je	.LBB10_42
# BB#40:                                # %land.lhs.true.100
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-128(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB10_42
# BB#41:                                # %if.then.105
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_154
.LBB10_42:                              # %if.end.106
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-128(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB10_90
# BB#43:                                # %if.then.112
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	charset_table, %rax
	movq	-128(%rbp), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	16(%rax), %edx
	movl	%edx, -140(%rbp)
.LBB10_44:                              # %while.cond.114
                                        #   Parent Loop BB10_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-144(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB10_58
# BB#45:                                # %while.body.117
                                        #   in Loop: Header=BB10_44 Depth=2
	jmp	.LBB10_46
.LBB10_46:                              # %do.body.118
                                        #   in Loop: Header=BB10_44 Depth=2
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB10_50
# BB#47:                                # %if.then.121
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB10_49
# BB#48:                                # %if.then.124
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_49:                              # %if.end.125
	jmp	.LBB10_176
.LBB10_50:                              # %if.end.126
                                        #   in Loop: Header=BB10_44 Depth=2
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB10_56
# BB#51:                                # %land.lhs.true.131
                                        #   in Loop: Header=BB10_44 Depth=2
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB10_56
# BB#52:                                # %if.then.134
                                        #   in Loop: Header=BB10_44 Depth=2
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB10_54
# BB#53:                                # %if.then.138
                                        #   in Loop: Header=BB10_44 Depth=2
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB10_55
.LBB10_54:                              # %if.else.144
                                        #   in Loop: Header=BB10_44 Depth=2
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_55:                              # %if.end.148
                                        #   in Loop: Header=BB10_44 Depth=2
	jmp	.LBB10_56
.LBB10_56:                              # %if.end.149
                                        #   in Loop: Header=BB10_44 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#57:                                # %do.end.151
                                        #   in Loop: Header=BB10_44 Depth=2
	movl	-148(%rbp), %eax
	shll	$8, %eax
	orl	-120(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB10_44
.LBB10_58:                              # %while.end
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_59
.LBB10_59:                              # %do.body.155
                                        #   in Loop: Header=BB10_3 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB10_60
	jmp	.LBB10_61
.LBB10_60:                              # %cond.true
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-148(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB10_62
	jmp	.LBB10_64
.LBB10_61:                              # %cond.false
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-148(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	cmpq	$128, %rcx
	jae	.LBB10_64
.LBB10_62:                              # %land.lhs.true.162
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_64
# BB#63:                                # %cond.true.168
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-148(%rbp), %eax
	movl	%eax, %ecx
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	jmp	.LBB10_85
.LBB10_64:                              # %cond.false.170
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-148(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB10_66
# BB#65:                                # %lor.lhs.false
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-148(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB10_67
.LBB10_66:                              # %cond.true.175
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	$-1, %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB10_84
.LBB10_67:                              # %cond.false.176
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_69
# BB#68:                                # %cond.true.182
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -208(%rbp)        # 8-byte Spill
	jmp	.LBB10_83
.LBB10_69:                              # %cond.false.185
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB10_74
# BB#70:                                # %cond.true.188
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_72
# BB#71:                                # %cond.true.193
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-148(%rbp), %eax
	movq	-136(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-136(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB10_73
.LBB10_72:                              # %cond.false.197
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movl	%eax, -212(%rbp)        # 4-byte Spill
.LBB10_73:                              # %cond.end
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-212(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	jmp	.LBB10_82
.LBB10_74:                              # %cond.false.200
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB10_80
# BB#75:                                # %cond.true.204
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_78
# BB#76:                                # %land.lhs.true.210
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-136(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB10_77
	jmp	.LBB10_78
.LBB10_77:                              # %cond.true.216
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-136(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-148(%rbp), %ecx
	movq	-136(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jmp	.LBB10_79
.LBB10_78:                              # %cond.false.226
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -232(%rbp)        # 8-byte Spill
.LBB10_79:                              # %cond.end.229
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
	jmp	.LBB10_81
.LBB10_80:                              # %cond.false.231
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -240(%rbp)        # 8-byte Spill
.LBB10_81:                              # %cond.end.234
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB10_82:                              # %cond.end.236
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB10_83:                              # %cond.end.238
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB10_84:                              # %cond.end.240
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
.LBB10_85:                              # %cond.end.242
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB10_88
# BB#86:                                # %land.lhs.true.247
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -160(%rbp)
	cmpq	$0, %rax
	je	.LBB10_88
# BB#87:                                # %if.then.250
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-160(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-160(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-160(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB10_88:                              # %if.end.254
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_89
.LBB10_89:                              # %do.end.255
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_142
.LBB10_90:                              # %if.else.256
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_91
.LBB10_91:                              # %while.cond.257
                                        #   Parent Loop BB10_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_93 Depth 3
	movq	-128(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB10_141
# BB#92:                                # %while.body.262
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	charset_table, %rax
	movq	-128(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	16(%rax), %edx
	movl	%edx, -140(%rbp)
.LBB10_93:                              # %while.cond.267
                                        #   Parent Loop BB10_3 Depth=1
                                        #     Parent Loop BB10_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-144(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB10_107
# BB#94:                                # %while.body.270
                                        #   in Loop: Header=BB10_93 Depth=3
	jmp	.LBB10_95
.LBB10_95:                              # %do.body.271
                                        #   in Loop: Header=BB10_93 Depth=3
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB10_99
# BB#96:                                # %if.then.274
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB10_98
# BB#97:                                # %if.then.277
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_98:                              # %if.end.278
	jmp	.LBB10_176
.LBB10_99:                              # %if.end.279
                                        #   in Loop: Header=BB10_93 Depth=3
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB10_105
# BB#100:                               # %land.lhs.true.284
                                        #   in Loop: Header=BB10_93 Depth=3
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB10_105
# BB#101:                               # %if.then.287
                                        #   in Loop: Header=BB10_93 Depth=3
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB10_103
# BB#102:                               # %if.then.291
                                        #   in Loop: Header=BB10_93 Depth=3
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB10_104
.LBB10_103:                             # %if.else.297
                                        #   in Loop: Header=BB10_93 Depth=3
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_104:                             # %if.end.301
                                        #   in Loop: Header=BB10_93 Depth=3
	jmp	.LBB10_105
.LBB10_105:                             # %if.end.302
                                        #   in Loop: Header=BB10_93 Depth=3
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#106:                               # %do.end.304
                                        #   in Loop: Header=BB10_93 Depth=3
	movl	-148(%rbp), %eax
	shll	$8, %eax
	orl	-120(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-144(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB10_93
.LBB10_107:                             # %while.end.308
                                        #   in Loop: Header=BB10_91 Depth=2
	jmp	.LBB10_108
.LBB10_108:                             # %do.body.309
                                        #   in Loop: Header=BB10_91 Depth=2
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB10_109
	jmp	.LBB10_110
.LBB10_109:                             # %cond.true.311
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-148(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB10_111
	jmp	.LBB10_113
.LBB10_110:                             # %cond.false.315
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-148(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	cmpq	$128, %rcx
	jae	.LBB10_113
.LBB10_111:                             # %land.lhs.true.320
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_113
# BB#112:                               # %cond.true.327
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-148(%rbp), %eax
	movl	%eax, %ecx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	jmp	.LBB10_134
.LBB10_113:                             # %cond.false.329
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-148(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB10_115
# BB#114:                               # %lor.lhs.false.333
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-148(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB10_116
.LBB10_115:                             # %cond.true.337
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	$-1, %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	jmp	.LBB10_133
.LBB10_116:                             # %cond.false.338
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_118
# BB#117:                               # %cond.true.345
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -264(%rbp)        # 8-byte Spill
	jmp	.LBB10_132
.LBB10_118:                             # %cond.false.348
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB10_123
# BB#119:                               # %cond.true.352
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_121
# BB#120:                               # %cond.true.358
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-148(%rbp), %eax
	movq	-136(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-136(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -268(%rbp)        # 4-byte Spill
	jmp	.LBB10_122
.LBB10_121:                             # %cond.false.363
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movl	%eax, -268(%rbp)        # 4-byte Spill
.LBB10_122:                             # %cond.end.365
                                        #   in Loop: Header=BB10_91 Depth=2
	movl	-268(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -280(%rbp)        # 8-byte Spill
	jmp	.LBB10_131
.LBB10_123:                             # %cond.false.368
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB10_129
# BB#124:                               # %cond.true.372
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB10_127
# BB#125:                               # %land.lhs.true.378
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-136(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB10_126
	jmp	.LBB10_127
.LBB10_126:                             # %cond.true.385
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-136(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-148(%rbp), %ecx
	movq	-136(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	jmp	.LBB10_128
.LBB10_127:                             # %cond.false.395
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -288(%rbp)        # 8-byte Spill
.LBB10_128:                             # %cond.end.398
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jmp	.LBB10_130
.LBB10_129:                             # %cond.false.400
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-136(%rbp), %rdi
	movl	-148(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -296(%rbp)        # 8-byte Spill
.LBB10_130:                             # %cond.end.403
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-296(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB10_131:                             # %cond.end.405
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, -264(%rbp)        # 8-byte Spill
.LBB10_132:                             # %cond.end.407
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	%rax, -256(%rbp)        # 8-byte Spill
.LBB10_133:                             # %cond.end.409
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB10_134:                             # %cond.end.411
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-248(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB10_137
# BB#135:                               # %land.lhs.true.416
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-8(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -168(%rbp)
	cmpq	$0, %rax
	je	.LBB10_137
# BB#136:                               # %if.then.419
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-168(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-168(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-168(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB10_137:                             # %if.end.423
                                        #   in Loop: Header=BB10_91 Depth=2
	jmp	.LBB10_138
.LBB10_138:                             # %do.end.424
                                        #   in Loop: Header=BB10_91 Depth=2
	cmpl	$0, -120(%rbp)
	jl	.LBB10_140
# BB#139:                               # %if.then.427
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_141
.LBB10_140:                             # %if.end.428
                                        #   in Loop: Header=BB10_91 Depth=2
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB10_91
.LBB10_141:                             # %while.end.430
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_142
.LBB10_142:                             # %if.end.431
                                        #   in Loop: Header=BB10_3 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB10_144
# BB#143:                               # %if.then.434
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_154
.LBB10_144:                             # %if.end.435
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	charset_ascii, %ecx
	je	.LBB10_153
# BB#145:                               # %land.lhs.true.439
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-108(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB10_153
# BB#146:                               # %if.then.443
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-108(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB10_152
# BB#147:                               # %if.then.446
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_148
.LBB10_148:                             # %do.body.447
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_149
.LBB10_149:                             # %do.body.448
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	subq	-104(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#150:                               # %do.end.456
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-108(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#151:                               # %do.end.458
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_152
.LBB10_152:                             # %if.end.459
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-136(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -108(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB10_153:                             # %if.end.461
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-96(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -96(%rbp)
	jmp	.LBB10_3
.LBB10_154:                             # %invalid_code
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
# BB#155:                               # %do.body.464
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB10_159
# BB#156:                               # %if.then.467
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB10_158
# BB#157:                               # %if.then.470
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_158:                             # %if.end.471
	jmp	.LBB10_176
.LBB10_159:                             # %if.end.472
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB10_165
# BB#160:                               # %land.lhs.true.477
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB10_165
# BB#161:                               # %if.then.480
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB10_163
# BB#162:                               # %if.then.484
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB10_164
.LBB10_163:                             # %if.else.490
                                        #   in Loop: Header=BB10_3 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB10_164:                             # %if.end.494
                                        #   in Loop: Header=BB10_3 Depth=1
	jmp	.LBB10_165
.LBB10_165:                             # %if.end.495
                                        #   in Loop: Header=BB10_3 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#166:                               # %do.end.497
                                        #   in Loop: Header=BB10_3 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB10_168
# BB#167:                               # %cond.true.500
                                        #   in Loop: Header=BB10_3 Depth=1
	xorl	%eax, %eax
	subl	-120(%rbp), %eax
	movl	%eax, -300(%rbp)        # 4-byte Spill
	jmp	.LBB10_174
.LBB10_168:                             # %cond.false.502
                                        #   in Loop: Header=BB10_3 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB10_169
	jmp	.LBB10_170
.LBB10_169:                             # %cond.true.503
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB10_171
	jmp	.LBB10_172
.LBB10_170:                             # %cond.false.507
                                        #   in Loop: Header=BB10_3 Depth=1
	movslq	-120(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB10_172
.LBB10_171:                             # %cond.true.512
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -304(%rbp)        # 4-byte Spill
	jmp	.LBB10_173
.LBB10_172:                             # %cond.false.513
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-120(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -304(%rbp)        # 4-byte Spill
.LBB10_173:                             # %cond.end.515
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-304(%rbp), %eax        # 4-byte Reload
	movl	%eax, -300(%rbp)        # 4-byte Spill
.LBB10_174:                             # %cond.end.517
                                        #   in Loop: Header=BB10_3 Depth=1
	movl	-300(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-96(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -96(%rbp)
	jmp	.LBB10_3
.LBB10_175:                             # %while.end.521
	jmp	.LBB10_176
.LBB10_176:                             # %no_more_source
	movl	-108(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB10_182
# BB#177:                               # %if.then.524
	jmp	.LBB10_178
.LBB10_178:                             # %do.body.525
	jmp	.LBB10_179
.LBB10_179:                             # %do.body.526
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	subq	-104(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#180:                               # %do.end.536
	movl	-108(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#181:                               # %do.end.538
	jmp	.LBB10_182
.LBB10_182:                             # %if.end.539
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$304, %rsp              # imm = 0x130
	popq	%rbp
	retq
.Lfunc_end10:
	.size	decode_coding_charset, .Lfunc_end10-decode_coding_charset
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_charset,@function
encode_coding_charset:                  # @encode_coding_charset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp33:
	.cfi_def_cfa_offset 16
.Ltmp34:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp35:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movl	$5, -52(%rbp)
	movq	$0, -64(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, -80(%rbp)
# BB#2:                                 # %do.end
	movl	$5, %eax
	movl	%eax, %esi
	movq	-72(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	andb	$1, %cl
	movb	%cl, -81(%rbp)
.LBB11_3:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB11_243
# BB#4:                                 # %while.body
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_5
.LBB11_5:                               # %do.body.12
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB11_7
# BB#6:                                 # %if.then
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-8(%rbp), %rdi
	movq	-112(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB11_7:                               # %if.end
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %do.end.20
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -81(%rbp)
	je	.LBB11_15
# BB#9:                                 # %land.lhs.true
                                        #   in Loop: Header=BB11_3 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB11_10
	jmp	.LBB11_11
.LBB11_10:                              # %cond.true
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB11_12
	jmp	.LBB11_15
.LBB11_11:                              # %cond.false
                                        #   in Loop: Header=BB11_3 Depth=1
	movslq	-88(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB11_15
.LBB11_12:                              # %if.then.29
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_13
.LBB11_13:                              # %do.body.30
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-88(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#14:                                # %do.end.33
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_242
.LBB11_15:                              # %if.else
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$4194175, -88(%rbp)     # imm = 0x3FFF7F
	jle	.LBB11_38
# BB#16:                                # %if.then.36
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$4194175, -88(%rbp)     # imm = 0x3FFF7F
	jle	.LBB11_18
# BB#17:                                # %cond.true.39
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB11_19
.LBB11_18:                              # %cond.false.40
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -172(%rbp)        # 4-byte Spill
.LBB11_19:                              # %cond.end
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, -88(%rbp)
# BB#20:                                # %do.body.41
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_35
# BB#21:                                # %if.then.44
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -116(%rbp)
	cmpl	$128, -116(%rbp)
	jb	.LBB11_23
# BB#22:                                # %if.then.47
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-116(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -116(%rbp)
.LBB11_23:                              # %if.end.49
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_24
.LBB11_24:                              # %do.body.50
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -116(%rbp)
	ja	.LBB11_26
# BB#25:                                # %if.then.53
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-116(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_33
.LBB11_26:                              # %if.else.56
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -116(%rbp)       # imm = 0x7FF
	ja	.LBB11_28
# BB#27:                                # %if.then.59
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-116(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-116(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_32
.LBB11_28:                              # %if.else.66
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -116(%rbp)      # imm = 0xFFFF
	ja	.LBB11_30
# BB#29:                                # %if.then.69
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-116(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-116(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-116(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_31
.LBB11_30:                              # %if.else.83
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-116(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_31:                              # %if.end.87
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_32
.LBB11_32:                              # %if.end.88
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_33
.LBB11_33:                              # %if.end.89
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_34
.LBB11_34:                              # %do.end.90
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_36
.LBB11_35:                              # %if.else.91
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_36:                              # %if.end.94
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_37
.LBB11_37:                              # %do.end.95
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_241
.LBB11_38:                              # %if.else.96
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_39
.LBB11_39:                              # %do.body.97
                                        #   in Loop: Header=BB11_3 Depth=1
	leaq	-100(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-88(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -96(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB11_42
# BB#40:                                # %land.lhs.true.101
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -128(%rbp)
	cmpq	$0, %rax
	je	.LBB11_42
# BB#41:                                # %if.then.104
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-128(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB11_42:                              # %if.end.107
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_43
.LBB11_43:                              # %do.end.108
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpq	$0, -96(%rbp)
	je	.LBB11_218
# BB#44:                                # %if.then.110
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB11_64
# BB#45:                                # %if.then.113
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_46
.LBB11_46:                              # %do.body.114
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_61
# BB#47:                                # %if.then.117
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
	cmpl	$128, -132(%rbp)
	jb	.LBB11_49
# BB#48:                                # %if.then.121
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-132(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -132(%rbp)
.LBB11_49:                              # %if.end.123
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_50
.LBB11_50:                              # %do.body.124
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -132(%rbp)
	ja	.LBB11_52
# BB#51:                                # %if.then.127
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-132(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_59
.LBB11_52:                              # %if.else.130
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -132(%rbp)       # imm = 0x7FF
	ja	.LBB11_54
# BB#53:                                # %if.then.133
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-132(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_58
.LBB11_54:                              # %if.else.142
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -132(%rbp)      # imm = 0xFFFF
	ja	.LBB11_56
# BB#55:                                # %if.then.145
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-132(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_57
.LBB11_56:                              # %if.else.159
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-132(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_57:                              # %if.end.163
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_58
.LBB11_58:                              # %if.end.164
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_59
.LBB11_59:                              # %if.end.165
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_60
.LBB11_60:                              # %do.end.166
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_62
.LBB11_61:                              # %if.else.167
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_62:                              # %if.end.170
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_63
.LBB11_63:                              # %do.end.171
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_217
.LBB11_64:                              # %if.else.172
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$2, 16(%rax)
	jne	.LBB11_97
# BB#65:                                # %if.then.176
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_66
.LBB11_66:                              # %do.body.177
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_94
# BB#67:                                # %if.then.180
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -136(%rbp)
	cmpl	$128, -136(%rbp)
	jb	.LBB11_69
# BB#68:                                # %if.then.185
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -136(%rbp)
.LBB11_69:                              # %if.end.187
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_70
.LBB11_70:                              # %do.body.188
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -136(%rbp)
	ja	.LBB11_72
# BB#71:                                # %if.then.191
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_79
.LBB11_72:                              # %if.else.194
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -136(%rbp)       # imm = 0x7FF
	ja	.LBB11_74
# BB#73:                                # %if.then.197
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_78
.LBB11_74:                              # %if.else.206
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -136(%rbp)      # imm = 0xFFFF
	ja	.LBB11_76
# BB#75:                                # %if.then.209
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_77
.LBB11_76:                              # %if.else.223
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_77:                              # %if.end.227
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_78
.LBB11_78:                              # %if.end.228
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_79
.LBB11_79:                              # %if.end.229
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_80
.LBB11_80:                              # %do.end.230
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -136(%rbp)
	cmpl	$128, -136(%rbp)
	jb	.LBB11_82
# BB#81:                                # %if.then.234
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -136(%rbp)
.LBB11_82:                              # %if.end.236
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_83
.LBB11_83:                              # %do.body.237
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -136(%rbp)
	ja	.LBB11_85
# BB#84:                                # %if.then.240
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_92
.LBB11_85:                              # %if.else.243
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -136(%rbp)       # imm = 0x7FF
	ja	.LBB11_87
# BB#86:                                # %if.then.246
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_91
.LBB11_87:                              # %if.else.255
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -136(%rbp)      # imm = 0xFFFF
	ja	.LBB11_89
# BB#88:                                # %if.then.258
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_90
.LBB11_89:                              # %if.else.272
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-136(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_90:                              # %if.end.276
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_91
.LBB11_91:                              # %if.end.277
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_92
.LBB11_92:                              # %if.end.278
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_93
.LBB11_93:                              # %do.end.279
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_95
.LBB11_94:                              # %if.else.280
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_95:                              # %if.end.287
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_96
.LBB11_96:                              # %do.end.288
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_216
.LBB11_97:                              # %if.else.289
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-96(%rbp), %rax
	cmpl	$3, 16(%rax)
	jne	.LBB11_150
# BB#98:                                # %if.then.293
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_99
.LBB11_99:                              # %do.body.294
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_100
.LBB11_100:                             # %do.body.295
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_115
# BB#101:                               # %if.then.298
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$16, %eax
	movl	%eax, -140(%rbp)
	cmpl	$128, -140(%rbp)
	jb	.LBB11_103
# BB#102:                               # %if.then.303
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-140(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -140(%rbp)
.LBB11_103:                             # %if.end.305
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_104
.LBB11_104:                             # %do.body.306
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -140(%rbp)
	ja	.LBB11_106
# BB#105:                               # %if.then.309
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-140(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_113
.LBB11_106:                             # %if.else.312
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -140(%rbp)       # imm = 0x7FF
	ja	.LBB11_108
# BB#107:                               # %if.then.315
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-140(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-140(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_112
.LBB11_108:                             # %if.else.324
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -140(%rbp)      # imm = 0xFFFF
	ja	.LBB11_110
# BB#109:                               # %if.then.327
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-140(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-140(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-140(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_111
.LBB11_110:                             # %if.else.341
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-140(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_111:                             # %if.end.345
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_112
.LBB11_112:                             # %if.end.346
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_113
.LBB11_113:                             # %if.end.347
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_114
.LBB11_114:                             # %do.end.348
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_116
.LBB11_115:                             # %if.else.349
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$16, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_116:                             # %if.end.353
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_117
.LBB11_117:                             # %do.end.354
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_118
.LBB11_118:                             # %do.body.355
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_146
# BB#119:                               # %if.then.358
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movl	%eax, -144(%rbp)
	cmpl	$128, -144(%rbp)
	jb	.LBB11_121
# BB#120:                               # %if.then.364
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -144(%rbp)
.LBB11_121:                             # %if.end.366
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_122
.LBB11_122:                             # %do.body.367
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -144(%rbp)
	ja	.LBB11_124
# BB#123:                               # %if.then.370
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_131
.LBB11_124:                             # %if.else.373
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -144(%rbp)       # imm = 0x7FF
	ja	.LBB11_126
# BB#125:                               # %if.then.376
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_130
.LBB11_126:                             # %if.else.385
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -144(%rbp)      # imm = 0xFFFF
	ja	.LBB11_128
# BB#127:                               # %if.then.388
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_129
.LBB11_128:                             # %if.else.402
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_129:                             # %if.end.406
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_130
.LBB11_130:                             # %if.end.407
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_131
.LBB11_131:                             # %if.end.408
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_132
.LBB11_132:                             # %do.end.409
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -144(%rbp)
	cmpl	$128, -144(%rbp)
	jb	.LBB11_134
# BB#133:                               # %if.then.413
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -144(%rbp)
.LBB11_134:                             # %if.end.415
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_135
.LBB11_135:                             # %do.body.416
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -144(%rbp)
	ja	.LBB11_137
# BB#136:                               # %if.then.419
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_144
.LBB11_137:                             # %if.else.422
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -144(%rbp)       # imm = 0x7FF
	ja	.LBB11_139
# BB#138:                               # %if.then.425
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_143
.LBB11_139:                             # %if.else.434
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -144(%rbp)      # imm = 0xFFFF
	ja	.LBB11_141
# BB#140:                               # %if.then.437
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_142
.LBB11_141:                             # %if.else.451
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-144(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_142:                             # %if.end.455
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_143
.LBB11_143:                             # %if.end.456
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_144
.LBB11_144:                             # %if.end.457
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_145
.LBB11_145:                             # %do.end.458
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_147
.LBB11_146:                             # %if.else.459
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_147:                             # %if.end.467
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_148
.LBB11_148:                             # %do.end.468
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_149
.LBB11_149:                             # %do.end.469
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_215
.LBB11_150:                             # %if.else.470
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_151
.LBB11_151:                             # %do.body.471
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_152
.LBB11_152:                             # %do.body.472
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_180
# BB#153:                               # %if.then.475
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$24, %eax
	movl	%eax, -148(%rbp)
	cmpl	$128, -148(%rbp)
	jb	.LBB11_155
# BB#154:                               # %if.then.480
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -148(%rbp)
.LBB11_155:                             # %if.end.482
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_156
.LBB11_156:                             # %do.body.483
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -148(%rbp)
	ja	.LBB11_158
# BB#157:                               # %if.then.486
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_165
.LBB11_158:                             # %if.else.489
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -148(%rbp)       # imm = 0x7FF
	ja	.LBB11_160
# BB#159:                               # %if.then.492
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-148(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_164
.LBB11_160:                             # %if.else.501
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -148(%rbp)      # imm = 0xFFFF
	ja	.LBB11_162
# BB#161:                               # %if.then.504
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-148(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-148(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_163
.LBB11_162:                             # %if.else.518
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_163:                             # %if.end.522
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_164
.LBB11_164:                             # %if.end.523
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_165
.LBB11_165:                             # %if.end.524
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_166
.LBB11_166:                             # %do.end.525
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movl	%eax, -148(%rbp)
	cmpl	$128, -148(%rbp)
	jb	.LBB11_168
# BB#167:                               # %if.then.530
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -148(%rbp)
.LBB11_168:                             # %if.end.532
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_169
.LBB11_169:                             # %do.body.533
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -148(%rbp)
	ja	.LBB11_171
# BB#170:                               # %if.then.536
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_178
.LBB11_171:                             # %if.else.539
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -148(%rbp)       # imm = 0x7FF
	ja	.LBB11_173
# BB#172:                               # %if.then.542
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-148(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_177
.LBB11_173:                             # %if.else.551
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -148(%rbp)      # imm = 0xFFFF
	ja	.LBB11_175
# BB#174:                               # %if.then.554
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-148(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-148(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_176
.LBB11_175:                             # %if.else.568
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-148(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_176:                             # %if.end.572
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_177
.LBB11_177:                             # %if.end.573
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_178
.LBB11_178:                             # %if.end.574
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_179
.LBB11_179:                             # %do.end.575
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_181
.LBB11_180:                             # %if.else.576
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$24, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_181:                             # %if.end.584
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_182
.LBB11_182:                             # %do.end.585
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_183
.LBB11_183:                             # %do.body.586
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_211
# BB#184:                               # %if.then.589
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movl	%eax, -152(%rbp)
	cmpl	$128, -152(%rbp)
	jb	.LBB11_186
# BB#185:                               # %if.then.595
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -152(%rbp)
.LBB11_186:                             # %if.end.597
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_187
.LBB11_187:                             # %do.body.598
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -152(%rbp)
	ja	.LBB11_189
# BB#188:                               # %if.then.601
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_196
.LBB11_189:                             # %if.else.604
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -152(%rbp)       # imm = 0x7FF
	ja	.LBB11_191
# BB#190:                               # %if.then.607
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-152(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_195
.LBB11_191:                             # %if.else.616
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -152(%rbp)      # imm = 0xFFFF
	ja	.LBB11_193
# BB#192:                               # %if.then.619
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-152(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-152(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_194
.LBB11_193:                             # %if.else.633
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_194:                             # %if.end.637
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_195
.LBB11_195:                             # %if.end.638
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_196
.LBB11_196:                             # %if.end.639
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_197
.LBB11_197:                             # %do.end.640
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -152(%rbp)
	cmpl	$128, -152(%rbp)
	jb	.LBB11_199
# BB#198:                               # %if.then.644
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -152(%rbp)
.LBB11_199:                             # %if.end.646
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_200
.LBB11_200:                             # %do.body.647
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -152(%rbp)
	ja	.LBB11_202
# BB#201:                               # %if.then.650
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_209
.LBB11_202:                             # %if.else.653
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -152(%rbp)       # imm = 0x7FF
	ja	.LBB11_204
# BB#203:                               # %if.then.656
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-152(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_208
.LBB11_204:                             # %if.else.665
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -152(%rbp)      # imm = 0xFFFF
	ja	.LBB11_206
# BB#205:                               # %if.then.668
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-152(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-152(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_207
.LBB11_206:                             # %if.else.682
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-152(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_207:                             # %if.end.686
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_208
.LBB11_208:                             # %if.end.687
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_209
.LBB11_209:                             # %if.end.688
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_210
.LBB11_210:                             # %do.end.689
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_212
.LBB11_211:                             # %if.else.690
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-100(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_212:                             # %if.end.698
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_213
.LBB11_213:                             # %do.end.699
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_214
.LBB11_214:                             # %do.end.700
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_215
.LBB11_215:                             # %if.end.701
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_216
.LBB11_216:                             # %if.end.702
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_217
.LBB11_217:                             # %if.end.703
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_240
.LBB11_218:                             # %if.else.704
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB11_220
# BB#219:                               # %if.then.710
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	$63, -88(%rbp)
	jmp	.LBB11_221
.LBB11_220:                             # %if.else.711
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-8(%rbp), %rax
	movl	588(%rax), %ecx
	movl	%ecx, -88(%rbp)
.LBB11_221:                             # %if.end.712
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_222
.LBB11_222:                             # %do.body.713
                                        #   in Loop: Header=BB11_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB11_237
# BB#223:                               # %if.then.716
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -156(%rbp)
	cmpl	$128, -156(%rbp)
	jb	.LBB11_225
# BB#224:                               # %if.then.720
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-156(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -156(%rbp)
.LBB11_225:                             # %if.end.722
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_226
.LBB11_226:                             # %do.body.723
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$127, -156(%rbp)
	ja	.LBB11_228
# BB#227:                               # %if.then.726
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-156(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_235
.LBB11_228:                             # %if.else.729
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$2047, -156(%rbp)       # imm = 0x7FF
	ja	.LBB11_230
# BB#229:                               # %if.then.732
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-156(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-156(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_234
.LBB11_230:                             # %if.else.741
                                        #   in Loop: Header=BB11_3 Depth=1
	cmpl	$65535, -156(%rbp)      # imm = 0xFFFF
	ja	.LBB11_232
# BB#231:                               # %if.then.744
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-156(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-156(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-156(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB11_233
.LBB11_232:                             # %if.else.758
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-156(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB11_233:                             # %if.end.762
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_234
.LBB11_234:                             # %if.end.763
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_235
.LBB11_235:                             # %if.end.764
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_236
.LBB11_236:                             # %do.end.765
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_238
.LBB11_237:                             # %if.else.766
                                        #   in Loop: Header=BB11_3 Depth=1
	movl	-88(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB11_238:                             # %if.end.769
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_239
.LBB11_239:                             # %do.end.770
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_240
.LBB11_240:                             # %if.end.771
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_241
.LBB11_241:                             # %if.end.772
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_242
.LBB11_242:                             # %if.end.773
                                        #   in Loop: Header=BB11_3 Depth=1
	jmp	.LBB11_3
.LBB11_243:                             # %while.end
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rdi
	movq	%rdi, 392(%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	subq	%rdi, %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 384(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end11:
	.size	encode_coding_charset, .Lfunc_end11-encode_coding_charset
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_utf_8,@function
detect_coding_utf_8:                    # @detect_coding_utf_8
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp36:
	.cfi_def_cfa_offset 16
.Ltmp37:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp38:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -49(%rbp)
	movq	$0, -64(%rbp)
	movb	$0, -65(%rbp)
	movq	-16(%rbp), %rsi
	movq	360(%rsi), %rsi
	movq	%rsi, -80(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$24, %eax
	andl	$7, %eax
	movl	%eax, -84(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %eax
	orl	$448, %eax              # imm = 0x1C0
	movl	%eax, (%rsi)
	movq	-80(%rbp), %rsi
	addq	-32(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	-16(%rbp), %rdi
	cmpq	456(%rdi), %rsi
	jne	.LBB12_6
# BB#1:                                 # %land.lhs.true
	movq	-32(%rbp), %rax
	addq	$3, %rax
	cmpq	-48(%rbp), %rax
	jae	.LBB12_6
# BB#2:                                 # %land.lhs.true.10
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$239, %ecx
	jne	.LBB12_6
# BB#3:                                 # %land.lhs.true.13
	movq	-32(%rbp), %rax
	movzbl	1(%rax), %ecx
	cmpl	$187, %ecx
	jne	.LBB12_6
# BB#4:                                 # %land.lhs.true.18
	movq	-32(%rbp), %rax
	movzbl	2(%rax), %ecx
	cmpl	$191, %ecx
	jne	.LBB12_6
# BB#5:                                 # %if.then
	movb	$1, -65(%rbp)
	movq	-32(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
.LBB12_6:                               # %if.end
	jmp	.LBB12_7
.LBB12_7:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#8:                                 # %do.body
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB12_12
# BB#9:                                 # %if.then.26
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB12_11
# BB#10:                                # %if.then.29
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_11:                              # %if.end.30
	jmp	.LBB12_101
.LBB12_12:                              # %if.end.31
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB12_18
# BB#13:                                # %land.lhs.true.34
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB12_18
# BB#14:                                # %if.then.36
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB12_16
# BB#15:                                # %if.then.40
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB12_17
.LBB12_16:                              # %if.else
                                        #   in Loop: Header=BB12_7 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_17:                              # %if.end.46
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_18
.LBB12_18:                              # %if.end.47
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#19:                                # %do.end
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB12_21
# BB#20:                                # %lor.lhs.false
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$128, -88(%rbp)
	jge	.LBB12_31
.LBB12_21:                              # %if.then.53
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	cmpl	$13, -88(%rbp)
	jne	.LBB12_27
# BB#22:                                # %if.then.57
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jae	.LBB12_25
# BB#23:                                # %land.lhs.true.60
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB12_25
# BB#24:                                # %if.then.64
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-84(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-32(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	jmp	.LBB12_26
.LBB12_25:                              # %if.else.68
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-84(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -84(%rbp)
.LBB12_26:                              # %if.end.70
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_30
.LBB12_27:                              # %if.else.71
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$10, -88(%rbp)
	jne	.LBB12_29
# BB#28:                                # %if.then.74
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB12_29:                              # %if.end.76
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_30
.LBB12_30:                              # %if.end.77
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_7
.LBB12_31:                              # %if.end.78
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_32
.LBB12_32:                              # %do.body.79
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB12_36
# BB#33:                                # %if.then.82
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB12_35
# BB#34:                                # %if.then.85
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_35:                              # %if.end.86
	jmp	.LBB12_101
.LBB12_36:                              # %if.end.87
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -92(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB12_42
# BB#37:                                # %land.lhs.true.92
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-92(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB12_42
# BB#38:                                # %if.then.95
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-92(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB12_40
# BB#39:                                # %if.then.99
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-92(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB12_41
.LBB12_40:                              # %if.else.105
                                        #   in Loop: Header=BB12_7 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -92(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_41:                              # %if.end.109
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_42
.LBB12_42:                              # %if.end.110
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#43:                                # %do.end.112
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$0, -92(%rbp)
	jl	.LBB12_45
# BB#44:                                # %lor.lhs.false.115
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-92(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB12_46
.LBB12_45:                              # %if.then.119
	jmp	.LBB12_100
.LBB12_46:                              # %if.end.120
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$224, %eax
	cmpl	$192, %eax
	jne	.LBB12_48
# BB#47:                                # %if.then.124
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB12_7
.LBB12_48:                              # %if.end.126
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_49
.LBB12_49:                              # %do.body.127
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB12_53
# BB#50:                                # %if.then.130
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB12_52
# BB#51:                                # %if.then.133
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_52:                              # %if.end.134
	jmp	.LBB12_101
.LBB12_53:                              # %if.end.135
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -96(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB12_59
# BB#54:                                # %land.lhs.true.140
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-96(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB12_59
# BB#55:                                # %if.then.143
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-96(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB12_57
# BB#56:                                # %if.then.147
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-96(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB12_58
.LBB12_57:                              # %if.else.153
                                        #   in Loop: Header=BB12_7 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -96(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_58:                              # %if.end.157
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_59
.LBB12_59:                              # %if.end.158
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#60:                                # %do.end.160
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$0, -96(%rbp)
	jl	.LBB12_62
# BB#61:                                # %lor.lhs.false.163
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-96(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB12_63
.LBB12_62:                              # %if.then.167
	jmp	.LBB12_100
.LBB12_63:                              # %if.end.168
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$240, %eax
	cmpl	$224, %eax
	jne	.LBB12_65
# BB#64:                                # %if.then.172
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB12_7
.LBB12_65:                              # %if.end.174
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_66
.LBB12_66:                              # %do.body.175
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB12_70
# BB#67:                                # %if.then.178
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB12_69
# BB#68:                                # %if.then.181
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_69:                              # %if.end.182
	jmp	.LBB12_101
.LBB12_70:                              # %if.end.183
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -100(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB12_76
# BB#71:                                # %land.lhs.true.188
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-100(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB12_76
# BB#72:                                # %if.then.191
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-100(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB12_74
# BB#73:                                # %if.then.195
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-100(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB12_75
.LBB12_74:                              # %if.else.201
                                        #   in Loop: Header=BB12_7 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -100(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_75:                              # %if.end.205
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_76
.LBB12_76:                              # %if.end.206
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#77:                                # %do.end.208
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$0, -100(%rbp)
	jl	.LBB12_79
# BB#78:                                # %lor.lhs.false.211
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-100(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB12_80
.LBB12_79:                              # %if.then.215
	jmp	.LBB12_100
.LBB12_80:                              # %if.end.216
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$248, %eax
	cmpl	$240, %eax
	jne	.LBB12_82
# BB#81:                                # %if.then.220
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB12_7
.LBB12_82:                              # %if.end.222
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_83
.LBB12_83:                              # %do.body.223
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB12_87
# BB#84:                                # %if.then.226
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB12_86
# BB#85:                                # %if.then.229
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_86:                              # %if.end.230
	jmp	.LBB12_101
.LBB12_87:                              # %if.end.231
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -104(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB12_93
# BB#88:                                # %land.lhs.true.236
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-104(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB12_93
# BB#89:                                # %if.then.239
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-104(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB12_91
# BB#90:                                # %if.then.243
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-104(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB12_92
.LBB12_91:                              # %if.else.249
                                        #   in Loop: Header=BB12_7 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -104(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB12_92:                              # %if.end.253
                                        #   in Loop: Header=BB12_7 Depth=1
	jmp	.LBB12_93
.LBB12_93:                              # %if.end.254
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#94:                                # %do.end.256
                                        #   in Loop: Header=BB12_7 Depth=1
	cmpl	$0, -104(%rbp)
	jl	.LBB12_96
# BB#95:                                # %lor.lhs.false.259
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-104(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB12_97
.LBB12_96:                              # %if.then.263
	jmp	.LBB12_100
.LBB12_97:                              # %if.end.264
                                        #   in Loop: Header=BB12_7 Depth=1
	movl	-88(%rbp), %eax
	andl	$252, %eax
	cmpl	$248, %eax
	jne	.LBB12_99
# BB#98:                                # %if.then.268
                                        #   in Loop: Header=BB12_7 Depth=1
	movq	-80(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB12_7
.LBB12_99:                              # %if.end.270
	jmp	.LBB12_100
.LBB12_100:                             # %while.end
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$448, %ecx              # imm = 0x1C0
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB12_110
.LBB12_101:                             # %no_more_source
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB12_104
# BB#102:                               # %land.lhs.true.274
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB12_104
# BB#103:                               # %if.then.280
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$448, %ecx              # imm = 0x1C0
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB12_110
.LBB12_104:                             # %if.end.283
	testb	$1, -65(%rbp)
	je	.LBB12_106
# BB#105:                               # %if.then.285
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$448, %ecx              # imm = 0x1C0
	movl	%ecx, 4(%rax)
	jmp	.LBB12_109
.LBB12_106:                             # %if.else.287
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$256, %ecx              # imm = 0x100
	movl	%ecx, 8(%rax)
	movq	-80(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	subq	%rsi, %rdx
	cmpq	%rdx, %rax
	jge	.LBB12_108
# BB#107:                               # %if.then.293
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$192, %ecx
	movl	%ecx, 4(%rax)
.LBB12_108:                             # %if.end.296
	jmp	.LBB12_109
.LBB12_109:                             # %if.end.297
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 368(%rcx)
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 376(%rcx)
	movb	$1, -1(%rbp)
.LBB12_110:                             # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end12:
	.size	detect_coding_utf_8, .Lfunc_end12-detect_coding_utf_8
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_utf_8,@function
decode_coding_utf_8:                    # @decode_coding_utf_8
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp39:
	.cfi_def_cfa_offset 16
.Ltmp40:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp41:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rdx
	addq	400(%rdx), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rdx
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %sil
	andb	$1, %sil
	movb	%sil, -65(%rbp)
	movq	-8(%rbp), %rdx
	movl	16(%rdx), %eax
	movl	%eax, -72(%rbp)
	testb	$1, globals+3389
	movb	%cl, -117(%rbp)         # 1-byte Spill
	jne	.LBB13_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -117(%rbp)         # 1-byte Spill
.LBB13_2:                               # %land.end
	movb	-117(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -73(%rbp)
	movl	$-1, -80(%rbp)
	cmpl	$1, -72(%rbp)
	je	.LBB13_54
# BB#3:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
# BB#4:                                 # %do.body
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_8
# BB#5:                                 # %if.then.14
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_7
# BB#6:                                 # %if.then.16
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_7:                               # %if.end
	jmp	.LBB13_218
.LBB13_8:                               # %if.end.17
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -84(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_14
# BB#9:                                 # %land.lhs.true
	movl	-84(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_14
# BB#10:                                # %if.then.21
	movl	-84(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_12
# BB#11:                                # %if.then.25
	movl	-84(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB13_13
.LBB13_12:                              # %if.else
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -84(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_13:                              # %if.end.31
	jmp	.LBB13_14
.LBB13_14:                              # %if.end.32
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#15:                                # %do.end
	movl	-84(%rbp), %eax
	andl	$240, %eax
	cmpl	$224, %eax
	je	.LBB13_17
# BB#16:                                # %if.then.36
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB13_53
.LBB13_17:                              # %if.else.37
	jmp	.LBB13_18
.LBB13_18:                              # %do.body.38
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_22
# BB#19:                                # %if.then.41
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_21
# BB#20:                                # %if.then.44
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_21:                              # %if.end.45
	jmp	.LBB13_218
.LBB13_22:                              # %if.end.46
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_28
# BB#23:                                # %land.lhs.true.51
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_28
# BB#24:                                # %if.then.54
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_26
# BB#25:                                # %if.then.58
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB13_27
.LBB13_26:                              # %if.else.64
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_27:                              # %if.end.68
	jmp	.LBB13_28
.LBB13_28:                              # %if.end.69
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#29:                                # %do.end.71
	movl	-88(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB13_31
# BB#30:                                # %if.then.75
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB13_52
.LBB13_31:                              # %if.else.76
	jmp	.LBB13_32
.LBB13_32:                              # %do.body.77
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_36
# BB#33:                                # %if.then.80
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_35
# BB#34:                                # %if.then.83
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_35:                              # %if.end.84
	jmp	.LBB13_218
.LBB13_36:                              # %if.end.85
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -92(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_42
# BB#37:                                # %land.lhs.true.90
	movl	-92(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_42
# BB#38:                                # %if.then.93
	movl	-92(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_40
# BB#39:                                # %if.then.97
	movl	-92(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB13_41
.LBB13_40:                              # %if.else.103
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -92(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_41:                              # %if.end.107
	jmp	.LBB13_42
.LBB13_42:                              # %if.end.108
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#43:                                # %do.end.110
	movl	-92(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB13_45
# BB#44:                                # %if.then.114
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB13_51
.LBB13_45:                              # %if.else.115
	cmpl	$239, -84(%rbp)
	jne	.LBB13_48
# BB#46:                                # %lor.lhs.false
	cmpl	$187, -88(%rbp)
	jne	.LBB13_48
# BB#47:                                # %lor.lhs.false.120
	cmpl	$191, -92(%rbp)
	je	.LBB13_49
.LBB13_48:                              # %if.then.123
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB13_50
.LBB13_49:                              # %if.else.124
	movq	-8(%rbp), %rax
	movl	$1, 16(%rax)
.LBB13_50:                              # %if.end.127
	jmp	.LBB13_51
.LBB13_51:                              # %if.end.128
	jmp	.LBB13_52
.LBB13_52:                              # %if.end.129
	jmp	.LBB13_53
.LBB13_53:                              # %if.end.130
	jmp	.LBB13_54
.LBB13_54:                              # %if.end.131
	movq	-8(%rbp), %rax
	movl	$1, 16(%rax)
.LBB13_55:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_64 Depth 2
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB13_59
# BB#56:                                # %if.then.139
	cmpl	$0, -80(%rbp)
	jl	.LBB13_58
# BB#57:                                # %if.then.142
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB13_58:                              # %if.end.144
	jmp	.LBB13_217
.LBB13_59:                              # %if.end.145
                                        #   in Loop: Header=BB13_55 Depth=1
	testb	$1, -65(%rbp)
	je	.LBB13_79
# BB#60:                                # %land.lhs.true.148
                                        #   in Loop: Header=BB13_55 Depth=1
	testb	$1, -73(%rbp)
	jne	.LBB13_79
# BB#61:                                # %land.lhs.true.150
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	addq	$-24, %rcx
	cmpq	%rcx, %rax
	jae	.LBB13_79
# BB#62:                                # %land.lhs.true.154
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	$-6, %rcx
	cmpq	%rcx, %rax
	jae	.LBB13_79
# BB#63:                                # %if.then.158
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_64
.LBB13_64:                              # %while.cond.159
                                        #   Parent Loop BB13_55 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rsi
	addq	$-24, %rsi
	cmpq	%rsi, %rdx
	movb	%cl, -129(%rbp)         # 1-byte Spill
	jae	.LBB13_66
# BB#65:                                # %land.rhs.163
                                        #   in Loop: Header=BB13_64 Depth=2
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	$-6, %rcx
	cmpq	%rcx, %rax
	setb	%dl
	movb	%dl, -129(%rbp)         # 1-byte Spill
.LBB13_66:                              # %land.end.167
                                        #   in Loop: Header=BB13_64 Depth=2
	movb	-129(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB13_67
	jmp	.LBB13_76
.LBB13_67:                              # %while.body.168
                                        #   in Loop: Header=BB13_64 Depth=2
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -100(%rbp)
	movl	-100(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB13_69
# BB#68:                                # %if.then.172
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_76
.LBB13_69:                              # %if.end.173
                                        #   in Loop: Header=BB13_64 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-100(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -100(%rbp)
	movl	-100(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB13_71
# BB#70:                                # %if.then.180
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_76
.LBB13_71:                              # %if.end.181
                                        #   in Loop: Header=BB13_64 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-100(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -100(%rbp)
	movl	-100(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB13_73
# BB#72:                                # %if.then.188
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_76
.LBB13_73:                              # %if.end.189
                                        #   in Loop: Header=BB13_64 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-100(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -100(%rbp)
	movl	-100(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB13_75
# BB#74:                                # %if.then.196
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_76
.LBB13_75:                              # %if.end.197
                                        #   in Loop: Header=BB13_64 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	movl	-100(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%ecx, (%rax)
	jmp	.LBB13_64
.LBB13_76:                              # %while.end
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-32(%rbp), %rax
	je	.LBB13_78
# BB#77:                                # %if.then.203
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_55
.LBB13_78:                              # %if.end.204
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_79
.LBB13_79:                              # %if.end.205
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$0, -80(%rbp)
	jl	.LBB13_81
# BB#80:                                # %if.then.208
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -80(%rbp)
	jmp	.LBB13_94
.LBB13_81:                              # %if.else.209
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_82
.LBB13_82:                              # %do.body.210
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_86
# BB#83:                                # %if.then.213
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_85
# BB#84:                                # %if.then.216
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_85:                              # %if.end.217
	jmp	.LBB13_218
.LBB13_86:                              # %if.end.218
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -100(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_92
# BB#87:                                # %land.lhs.true.223
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_92
# BB#88:                                # %if.then.226
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_90
# BB#89:                                # %if.then.230
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB13_91
.LBB13_90:                              # %if.else.236
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -100(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_91:                              # %if.end.240
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_92
.LBB13_92:                              # %if.end.241
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#93:                                # %do.end.243
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_94
.LBB13_94:                              # %if.end.244
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB13_96
# BB#95:                                # %if.then.247
                                        #   in Loop: Header=BB13_55 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB13_198
.LBB13_96:                              # %if.else.249
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$128, -100(%rbp)
	jge	.LBB13_113
# BB#97:                                # %if.then.252
                                        #   in Loop: Header=BB13_55 Depth=1
	testb	$1, -73(%rbp)
	je	.LBB13_112
# BB#98:                                # %land.lhs.true.255
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$13, -100(%rbp)
	jne	.LBB13_112
# BB#99:                                # %if.then.258
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_100
.LBB13_100:                             # %do.body.259
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_104
# BB#101:                               # %if.then.262
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_103
# BB#102:                               # %if.then.265
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_103:                             # %if.end.266
	jmp	.LBB13_218
.LBB13_104:                             # %if.end.267
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -80(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_110
# BB#105:                               # %land.lhs.true.272
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-80(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_110
# BB#106:                               # %if.then.275
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-80(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_108
# BB#107:                               # %if.then.279
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-80(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB13_109
.LBB13_108:                             # %if.else.285
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -80(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_109:                             # %if.end.289
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_110
.LBB13_110:                             # %if.end.290
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#111:                               # %do.end.292
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_112
.LBB13_112:                             # %if.end.293
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB13_197
.LBB13_113:                             # %if.else.294
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_114
.LBB13_114:                             # %do.body.295
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_118
# BB#115:                               # %if.then.298
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_117
# BB#116:                               # %if.then.301
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_117:                             # %if.end.302
	jmp	.LBB13_218
.LBB13_118:                             # %if.end.303
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -104(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_124
# BB#119:                               # %land.lhs.true.308
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-104(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_124
# BB#120:                               # %if.then.311
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-104(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_122
# BB#121:                               # %if.then.315
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-104(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB13_123
.LBB13_122:                             # %if.else.321
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -104(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_123:                             # %if.end.325
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_124
.LBB13_124:                             # %if.end.326
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#125:                               # %do.end.328
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$0, -104(%rbp)
	jl	.LBB13_127
# BB#126:                               # %lor.lhs.false.331
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-104(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB13_128
.LBB13_127:                             # %if.then.335
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_128:                             # %if.end.336
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$224, %eax
	cmpl	$192, %eax
	jne	.LBB13_132
# BB#129:                               # %if.then.340
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$31, %eax
	shll	$6, %eax
	movl	-104(%rbp), %ecx
	andl	$63, %ecx
	orl	%ecx, %eax
	movl	%eax, -96(%rbp)
	cmpl	$128, -96(%rbp)
	jge	.LBB13_131
# BB#130:                               # %if.then.347
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_131:                             # %if.end.348
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_196
.LBB13_132:                             # %if.else.349
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_133
.LBB13_133:                             # %do.body.350
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_137
# BB#134:                               # %if.then.353
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_136
# BB#135:                               # %if.then.356
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_136:                             # %if.end.357
	jmp	.LBB13_218
.LBB13_137:                             # %if.end.358
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -108(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_143
# BB#138:                               # %land.lhs.true.363
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-108(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_143
# BB#139:                               # %if.then.366
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-108(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_141
# BB#140:                               # %if.then.370
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-108(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB13_142
.LBB13_141:                             # %if.else.376
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -108(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_142:                             # %if.end.380
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_143
.LBB13_143:                             # %if.end.381
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#144:                               # %do.end.383
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$0, -108(%rbp)
	jl	.LBB13_146
# BB#145:                               # %lor.lhs.false.386
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-108(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB13_147
.LBB13_146:                             # %if.then.390
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_147:                             # %if.end.391
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$240, %eax
	cmpl	$224, %eax
	jne	.LBB13_153
# BB#148:                               # %if.then.395
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$15, %eax
	shll	$12, %eax
	movl	-104(%rbp), %ecx
	andl	$63, %ecx
	shll	$6, %ecx
	orl	%ecx, %eax
	movl	-108(%rbp), %ecx
	andl	$63, %ecx
	orl	%ecx, %eax
	movl	%eax, -96(%rbp)
	cmpl	$2048, -96(%rbp)        # imm = 0x800
	jl	.LBB13_151
# BB#149:                               # %lor.lhs.false.405
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$55296, -96(%rbp)       # imm = 0xD800
	jl	.LBB13_152
# BB#150:                               # %land.lhs.true.408
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$57344, -96(%rbp)       # imm = 0xE000
	jge	.LBB13_152
.LBB13_151:                             # %if.then.411
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_152:                             # %if.end.412
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_195
.LBB13_153:                             # %if.else.413
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_154
.LBB13_154:                             # %do.body.414
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_158
# BB#155:                               # %if.then.417
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_157
# BB#156:                               # %if.then.420
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_157:                             # %if.end.421
	jmp	.LBB13_218
.LBB13_158:                             # %if.end.422
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -112(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_164
# BB#159:                               # %land.lhs.true.427
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-112(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_164
# BB#160:                               # %if.then.430
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-112(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_162
# BB#161:                               # %if.then.434
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-112(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_163
.LBB13_162:                             # %if.else.440
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -112(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_163:                             # %if.end.444
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_164
.LBB13_164:                             # %if.end.445
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#165:                               # %do.end.447
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$0, -112(%rbp)
	jl	.LBB13_167
# BB#166:                               # %lor.lhs.false.450
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-112(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB13_168
.LBB13_167:                             # %if.then.454
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_168:                             # %if.end.455
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$248, %eax
	cmpl	$240, %eax
	jne	.LBB13_172
# BB#169:                               # %if.then.459
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$7, %eax
	shll	$18, %eax
	movl	-104(%rbp), %ecx
	andl	$63, %ecx
	shll	$12, %ecx
	orl	%ecx, %eax
	movl	-108(%rbp), %ecx
	andl	$63, %ecx
	shll	$6, %ecx
	orl	%ecx, %eax
	movl	-112(%rbp), %ecx
	andl	$63, %ecx
	orl	%ecx, %eax
	movl	%eax, -96(%rbp)
	cmpl	$65536, -96(%rbp)       # imm = 0x10000
	jge	.LBB13_171
# BB#170:                               # %if.then.472
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_171:                             # %if.end.473
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_194
.LBB13_172:                             # %if.else.474
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_173
.LBB13_173:                             # %do.body.475
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_177
# BB#174:                               # %if.then.478
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_176
# BB#175:                               # %if.then.481
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_176:                             # %if.end.482
	jmp	.LBB13_218
.LBB13_177:                             # %if.end.483
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -116(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_183
# BB#178:                               # %land.lhs.true.488
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-116(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_183
# BB#179:                               # %if.then.491
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-116(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_181
# BB#180:                               # %if.then.495
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-116(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB13_182
.LBB13_181:                             # %if.else.501
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -116(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_182:                             # %if.end.505
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_183
.LBB13_183:                             # %if.end.506
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#184:                               # %do.end.508
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$0, -116(%rbp)
	jl	.LBB13_186
# BB#185:                               # %lor.lhs.false.511
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-116(%rbp), %eax
	andl	$192, %eax
	cmpl	$128, %eax
	je	.LBB13_187
.LBB13_186:                             # %if.then.515
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_187:                             # %if.end.516
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$252, %eax
	cmpl	$248, %eax
	jne	.LBB13_192
# BB#188:                               # %if.then.520
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-100(%rbp), %eax
	andl	$3, %eax
	shll	$24, %eax
	movl	-104(%rbp), %ecx
	andl	$63, %ecx
	shll	$18, %ecx
	orl	%ecx, %eax
	movl	-108(%rbp), %ecx
	andl	$63, %ecx
	shll	$12, %ecx
	orl	%ecx, %eax
	movl	-112(%rbp), %ecx
	andl	$63, %ecx
	shll	$6, %ecx
	orl	%ecx, %eax
	movl	-116(%rbp), %ecx
	andl	$63, %ecx
	orl	%ecx, %eax
	movl	%eax, -96(%rbp)
	cmpl	$4194303, -96(%rbp)     # imm = 0x3FFFFF
	jg	.LBB13_190
# BB#189:                               # %lor.lhs.false.536
                                        #   in Loop: Header=BB13_55 Depth=1
	cmpl	$2097152, -96(%rbp)     # imm = 0x200000
	jge	.LBB13_191
.LBB13_190:                             # %if.then.539
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_191:                             # %if.end.540
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_193
.LBB13_192:                             # %if.else.541
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_199
.LBB13_193:                             # %if.end.542
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_194
.LBB13_194:                             # %if.end.543
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_195
.LBB13_195:                             # %if.end.544
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_196
.LBB13_196:                             # %if.end.545
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_197
.LBB13_197:                             # %if.end.546
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_198
.LBB13_198:                             # %if.end.547
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	jmp	.LBB13_55
.LBB13_199:                             # %invalid_code
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
# BB#200:                               # %do.body.549
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB13_204
# BB#201:                               # %if.then.552
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB13_203
# BB#202:                               # %if.then.555
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_203:                             # %if.end.556
	jmp	.LBB13_218
.LBB13_204:                             # %if.end.557
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -96(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB13_210
# BB#205:                               # %land.lhs.true.562
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB13_210
# BB#206:                               # %if.then.565
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB13_208
# BB#207:                               # %if.then.569
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB13_209
.LBB13_208:                             # %if.else.575
                                        #   in Loop: Header=BB13_55 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -96(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB13_209:                             # %if.end.579
                                        #   in Loop: Header=BB13_55 Depth=1
	jmp	.LBB13_210
.LBB13_210:                             # %if.end.580
                                        #   in Loop: Header=BB13_55 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#211:                               # %do.end.582
                                        #   in Loop: Header=BB13_55 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB13_212
	jmp	.LBB13_213
.LBB13_212:                             # %cond.true
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB13_214
	jmp	.LBB13_215
.LBB13_213:                             # %cond.false
                                        #   in Loop: Header=BB13_55 Depth=1
	movslq	-96(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB13_215
.LBB13_214:                             # %cond.true.589
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
	jmp	.LBB13_216
.LBB13_215:                             # %cond.false.590
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-96(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -136(%rbp)        # 4-byte Spill
.LBB13_216:                             # %cond.end
                                        #   in Loop: Header=BB13_55 Depth=1
	movl	-136(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	jmp	.LBB13_55
.LBB13_217:                             # %while.end.593
	jmp	.LBB13_218
.LBB13_218:                             # %no_more_source
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end13:
	.size	decode_coding_utf_8, .Lfunc_end13-decode_coding_utf_8
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_utf_8,@function
encode_coding_utf_8:                    # @encode_coding_utf_8
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp42:
	.cfi_def_cfa_offset 16
.Ltmp43:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp44:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rdx
	cmpl	$2, 16(%rdx)
	jne	.LBB14_57
# BB#1:                                 # %if.then
	jmp	.LBB14_2
.LBB14_2:                               # %do.body
	movq	-40(%rbp), %rax
	addq	$3, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB14_4
# BB#3:                                 # %if.then.7
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	$3, %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB14_4:                               # %if.end
	jmp	.LBB14_5
.LBB14_5:                               # %do.end
	jmp	.LBB14_6
.LBB14_6:                               # %do.body.11
	jmp	.LBB14_7
.LBB14_7:                               # %do.body.12
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB14_22
# BB#8:                                 # %if.then.13
	movl	$239, -76(%rbp)
	cmpl	$128, -76(%rbp)
	jb	.LBB14_10
# BB#9:                                 # %if.then.15
	movl	-76(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -76(%rbp)
.LBB14_10:                              # %if.end.17
	jmp	.LBB14_11
.LBB14_11:                              # %do.body.18
	cmpl	$127, -76(%rbp)
	ja	.LBB14_13
# BB#12:                                # %if.then.20
	movl	-76(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_20
.LBB14_13:                              # %if.else
	cmpl	$2047, -76(%rbp)        # imm = 0x7FF
	ja	.LBB14_15
# BB#14:                                # %if.then.23
	movl	-76(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_19
.LBB14_15:                              # %if.else.29
	cmpl	$65535, -76(%rbp)       # imm = 0xFFFF
	ja	.LBB14_17
# BB#16:                                # %if.then.32
	movl	-76(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_18
.LBB14_17:                              # %if.else.46
	movl	-76(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB14_18:                              # %if.end.50
	jmp	.LBB14_19
.LBB14_19:                              # %if.end.51
	jmp	.LBB14_20
.LBB14_20:                              # %if.end.52
	jmp	.LBB14_21
.LBB14_21:                              # %do.end.53
	jmp	.LBB14_23
.LBB14_22:                              # %if.else.54
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-17, (%rax)
.LBB14_23:                              # %if.end.56
	jmp	.LBB14_24
.LBB14_24:                              # %do.end.57
	jmp	.LBB14_25
.LBB14_25:                              # %do.body.58
	movq	-56(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB14_53
# BB#26:                                # %if.then.61
	movl	$187, -80(%rbp)
	cmpl	$128, -80(%rbp)
	jb	.LBB14_28
# BB#27:                                # %if.then.65
	movl	-80(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -80(%rbp)
.LBB14_28:                              # %if.end.67
	jmp	.LBB14_29
.LBB14_29:                              # %do.body.68
	cmpl	$127, -80(%rbp)
	ja	.LBB14_31
# BB#30:                                # %if.then.71
	movl	-80(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_38
.LBB14_31:                              # %if.else.74
	cmpl	$2047, -80(%rbp)        # imm = 0x7FF
	ja	.LBB14_33
# BB#32:                                # %if.then.77
	movl	-80(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-80(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_37
.LBB14_33:                              # %if.else.86
	cmpl	$65535, -80(%rbp)       # imm = 0xFFFF
	ja	.LBB14_35
# BB#34:                                # %if.then.89
	movl	-80(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-80(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-80(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_36
.LBB14_35:                              # %if.else.103
	movl	-80(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB14_36:                              # %if.end.107
	jmp	.LBB14_37
.LBB14_37:                              # %if.end.108
	jmp	.LBB14_38
.LBB14_38:                              # %if.end.109
	jmp	.LBB14_39
.LBB14_39:                              # %do.end.110
	movl	$191, -80(%rbp)
	cmpl	$128, -80(%rbp)
	jb	.LBB14_41
# BB#40:                                # %if.then.113
	movl	-80(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -80(%rbp)
.LBB14_41:                              # %if.end.115
	jmp	.LBB14_42
.LBB14_42:                              # %do.body.116
	cmpl	$127, -80(%rbp)
	ja	.LBB14_44
# BB#43:                                # %if.then.119
	movl	-80(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_51
.LBB14_44:                              # %if.else.122
	cmpl	$2047, -80(%rbp)        # imm = 0x7FF
	ja	.LBB14_46
# BB#45:                                # %if.then.125
	movl	-80(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-80(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_50
.LBB14_46:                              # %if.else.134
	cmpl	$65535, -80(%rbp)       # imm = 0xFFFF
	ja	.LBB14_48
# BB#47:                                # %if.then.137
	movl	-80(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-80(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-80(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_49
.LBB14_48:                              # %if.else.151
	movl	-80(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB14_49:                              # %if.end.155
	jmp	.LBB14_50
.LBB14_50:                              # %if.end.156
	jmp	.LBB14_51
.LBB14_51:                              # %if.end.157
	jmp	.LBB14_52
.LBB14_52:                              # %do.end.158
	jmp	.LBB14_54
.LBB14_53:                              # %if.else.159
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-69, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-65, (%rax)
.LBB14_54:                              # %if.end.162
	jmp	.LBB14_55
.LBB14_55:                              # %do.end.163
	jmp	.LBB14_56
.LBB14_56:                              # %do.end.164
	movq	-8(%rbp), %rax
	movl	$1, 16(%rax)
.LBB14_57:                              # %if.end.167
	testb	$1, -9(%rbp)
	je	.LBB14_123
# BB#58:                                # %if.then.169
	movl	$10, -84(%rbp)
.LBB14_59:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_99 Depth 2
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB14_122
# BB#60:                                # %while.body
                                        #   in Loop: Header=BB14_59 Depth=1
	leaq	-89(%rbp), %rax
	movq	%rax, -112(%rbp)
# BB#61:                                # %do.body.172
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-40(%rbp), %rax
	movslq	-84(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB14_63
# BB#62:                                # %if.then.177
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-84(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-8(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB14_63:                              # %if.end.189
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_64
.LBB14_64:                              # %do.end.190
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -60(%rbp)
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB14_87
# BB#65:                                # %if.then.194
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB14_67
# BB#66:                                # %cond.true
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB14_68
.LBB14_67:                              # %cond.false
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
.LBB14_68:                              # %cond.end
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-148(%rbp), %eax        # 4-byte Reload
	movl	%eax, -60(%rbp)
# BB#69:                                # %do.body.198
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB14_84
# BB#70:                                # %if.then.201
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	cmpl	$128, -124(%rbp)
	jb	.LBB14_72
# BB#71:                                # %if.then.205
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-124(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -124(%rbp)
.LBB14_72:                              # %if.end.207
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_73
.LBB14_73:                              # %do.body.208
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$127, -124(%rbp)
	ja	.LBB14_75
# BB#74:                                # %if.then.211
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_82
.LBB14_75:                              # %if.else.214
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$2047, -124(%rbp)       # imm = 0x7FF
	ja	.LBB14_77
# BB#76:                                # %if.then.217
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_81
.LBB14_77:                              # %if.else.226
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$65535, -124(%rbp)      # imm = 0xFFFF
	ja	.LBB14_79
# BB#78:                                # %if.then.229
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-124(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_80
.LBB14_79:                              # %if.else.243
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-124(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB14_80:                              # %if.end.247
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_81
.LBB14_81:                              # %if.end.248
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_82
.LBB14_82:                              # %if.end.249
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_83
.LBB14_83:                              # %do.end.250
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_85
.LBB14_84:                              # %if.else.251
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB14_85:                              # %if.end.254
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_86
.LBB14_86:                              # %do.end.255
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_121
.LBB14_87:                              # %if.else.256
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_88
.LBB14_88:                              # %do.body.257
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$127, -60(%rbp)
	jg	.LBB14_90
# BB#89:                                # %if.then.260
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_97
.LBB14_90:                              # %if.else.263
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$2047, -60(%rbp)        # imm = 0x7FF
	jg	.LBB14_92
# BB#91:                                # %if.then.266
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_96
.LBB14_92:                              # %if.else.275
                                        #   in Loop: Header=BB14_59 Depth=1
	cmpl	$65535, -60(%rbp)       # imm = 0xFFFF
	jg	.LBB14_94
# BB#93:                                # %if.then.278
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %eax
	sarl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_95
.LBB14_94:                              # %if.else.292
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-60(%rbp), %edi
	movq	-112(%rbp), %rsi
	callq	char_string
	movq	-112(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -112(%rbp)
.LBB14_95:                              # %if.end.296
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_96
.LBB14_96:                              # %if.end.297
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_97
.LBB14_97:                              # %if.end.298
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_98
.LBB14_98:                              # %do.end.299
                                        #   in Loop: Header=BB14_59 Depth=1
	leaq	-89(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB14_99:                              # %for.cond
                                        #   Parent Loop BB14_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-104(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jae	.LBB14_120
# BB#100:                               # %for.body
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_101
.LBB14_101:                             # %do.body.303
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB14_116
# BB#102:                               # %if.then.306
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	-104(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -128(%rbp)
	cmpl	$128, -128(%rbp)
	jb	.LBB14_104
# BB#103:                               # %if.then.311
                                        #   in Loop: Header=BB14_99 Depth=2
	movl	-128(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -128(%rbp)
.LBB14_104:                             # %if.end.313
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_105
.LBB14_105:                             # %do.body.314
                                        #   in Loop: Header=BB14_99 Depth=2
	cmpl	$127, -128(%rbp)
	ja	.LBB14_107
# BB#106:                               # %if.then.317
                                        #   in Loop: Header=BB14_99 Depth=2
	movl	-128(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_114
.LBB14_107:                             # %if.else.320
                                        #   in Loop: Header=BB14_99 Depth=2
	cmpl	$2047, -128(%rbp)       # imm = 0x7FF
	ja	.LBB14_109
# BB#108:                               # %if.then.323
                                        #   in Loop: Header=BB14_99 Depth=2
	movl	-128(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_113
.LBB14_109:                             # %if.else.332
                                        #   in Loop: Header=BB14_99 Depth=2
	cmpl	$65535, -128(%rbp)      # imm = 0xFFFF
	ja	.LBB14_111
# BB#110:                               # %if.then.335
                                        #   in Loop: Header=BB14_99 Depth=2
	movl	-128(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_112
.LBB14_111:                             # %if.else.349
                                        #   in Loop: Header=BB14_99 Depth=2
	movl	-128(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB14_112:                             # %if.end.353
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_113
.LBB14_113:                             # %if.end.354
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_114
.LBB14_114:                             # %if.end.355
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_115
.LBB14_115:                             # %do.end.356
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_117
.LBB14_116:                             # %if.else.357
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	-104(%rbp), %rax
	movb	(%rax), %cl
	movq	-40(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%cl, (%rax)
.LBB14_117:                             # %if.end.359
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_118
.LBB14_118:                             # %do.end.360
                                        #   in Loop: Header=BB14_99 Depth=2
	jmp	.LBB14_119
.LBB14_119:                             # %for.inc
                                        #   in Loop: Header=BB14_99 Depth=2
	movq	-104(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB14_99
.LBB14_120:                             # %for.end
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_121
.LBB14_121:                             # %if.end.362
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_59
.LBB14_122:                             # %while.end
	jmp	.LBB14_148
.LBB14_123:                             # %if.else.363
	movl	$5, -132(%rbp)
.LBB14_124:                             # %while.cond.365
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB14_147
# BB#125:                               # %while.body.368
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_126
.LBB14_126:                             # %do.body.369
                                        #   in Loop: Header=BB14_124 Depth=1
	movq	-40(%rbp), %rax
	movslq	-132(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB14_128
# BB#127:                               # %if.then.374
                                        #   in Loop: Header=BB14_124 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-132(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-8(%rbp), %rdi
	movq	-144(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB14_128:                             # %if.end.386
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_129
.LBB14_129:                             # %do.end.387
                                        #   in Loop: Header=BB14_124 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -60(%rbp)
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB14_134
# BB#130:                               # %if.then.391
                                        #   in Loop: Header=BB14_124 Depth=1
	cmpl	$4194175, -60(%rbp)     # imm = 0x3FFF7F
	jle	.LBB14_132
# BB#131:                               # %cond.true.394
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-60(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB14_133
.LBB14_132:                             # %cond.false.396
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-60(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB14_133:                             # %cond.end.398
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-152(%rbp), %eax        # 4-byte Reload
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_146
.LBB14_134:                             # %if.else.402
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_135
.LBB14_135:                             # %do.body.403
                                        #   in Loop: Header=BB14_124 Depth=1
	cmpl	$127, -60(%rbp)
	jg	.LBB14_137
# BB#136:                               # %if.then.406
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-60(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_144
.LBB14_137:                             # %if.else.409
                                        #   in Loop: Header=BB14_124 Depth=1
	cmpl	$2047, -60(%rbp)        # imm = 0x7FF
	jg	.LBB14_139
# BB#138:                               # %if.then.412
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_143
.LBB14_139:                             # %if.else.421
                                        #   in Loop: Header=BB14_124 Depth=1
	cmpl	$65535, -60(%rbp)       # imm = 0xFFFF
	jg	.LBB14_141
# BB#140:                               # %if.then.424
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-60(%rbp), %eax
	sarl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-60(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB14_142
.LBB14_141:                             # %if.else.438
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-60(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB14_142:                             # %if.end.442
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_143
.LBB14_143:                             # %if.end.443
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_144
.LBB14_144:                             # %if.end.444
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_145
.LBB14_145:                             # %do.end.445
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_146
.LBB14_146:                             # %if.end.446
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_124
.LBB14_147:                             # %while.end.447
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	496(%rcx), %rcx
	movq	-8(%rbp), %rdx
	addq	384(%rdx), %rcx
	subq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB14_148:                             # %if.end.454
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-56(%rbp), %rdi
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rdi
	movq	%rdi, 392(%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	subq	%rdi, %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 384(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end14:
	.size	encode_coding_utf_8, .Lfunc_end14-encode_coding_utf_8
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_utf_16,@function
detect_coding_utf_16:                   # @detect_coding_utf_16
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp45:
	.cfi_def_cfa_offset 16
.Ltmp46:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp47:
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -40(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -41(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %eax
	orl	$15872, %eax            # imm = 0x3E00
	movl	%eax, (%rsi)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$14, %eax
	andl	$31, %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB15_3
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	432(%rax), %rax
	andq	$1, %rax
	cmpq	$0, %rax
	je	.LBB15_3
# BB#2:                                 # %if.then
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$15872, %ecx            # imm = 0x3E00
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB15_88
.LBB15_3:                               # %if.end
	jmp	.LBB15_4
.LBB15_4:                               # %do.body
	jmp	.LBB15_5
.LBB15_5:                               # %do.body.8
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB15_7
# BB#6:                                 # %if.then.9
	jmp	.LBB15_87
.LBB15_7:                               # %if.end.10
                                        #   in Loop: Header=BB15_5 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -48(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB15_22
# BB#8:                                 # %land.lhs.true.13
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-48(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB15_22
# BB#9:                                 # %if.then.16
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-48(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB15_11
# BB#10:                                # %if.then.20
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-48(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB15_21
.LBB15_11:                              # %if.else
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-48(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	jne	.LBB15_13
# BB#12:                                # %cond.true
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$1, %eax
	movl	%eax, -588(%rbp)        # 4-byte Spill
	jmp	.LBB15_20
.LBB15_13:                              # %cond.false
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-48(%rbp), %eax
	andl	$32, %eax
	cmpl	$0, %eax
	jne	.LBB15_15
# BB#14:                                # %cond.true.29
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$2, %eax
	movl	%eax, -592(%rbp)        # 4-byte Spill
	jmp	.LBB15_19
.LBB15_15:                              # %cond.false.30
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-48(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	jne	.LBB15_17
# BB#16:                                # %cond.true.33
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$3, %eax
	movl	%eax, -596(%rbp)        # 4-byte Spill
	jmp	.LBB15_18
.LBB15_17:                              # %cond.false.34
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$5, %eax
	movl	$4, %ecx
	movl	-48(%rbp), %edx
	andl	$8, %edx
	cmpl	$0, %edx
	setne	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	cmovnel	%ecx, %eax
	movl	%eax, -596(%rbp)        # 4-byte Spill
.LBB15_18:                              # %cond.end
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-596(%rbp), %eax        # 4-byte Reload
	movl	%eax, -592(%rbp)        # 4-byte Spill
.LBB15_19:                              # %cond.end.38
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-592(%rbp), %eax        # 4-byte Reload
	movl	%eax, -588(%rbp)        # 4-byte Spill
.LBB15_20:                              # %cond.end.40
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-588(%rbp), %eax        # 4-byte Reload
	subl	$1, %eax
	movq	-32(%rbp), %rcx
	movslq	%eax, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -32(%rbp)
	movl	$-1, -48(%rbp)
.LBB15_21:                              # %if.end.43
                                        #   in Loop: Header=BB15_5 Depth=1
	jmp	.LBB15_22
.LBB15_22:                              # %if.end.44
                                        #   in Loop: Header=BB15_5 Depth=1
	jmp	.LBB15_23
.LBB15_23:                              # %do.cond
                                        #   in Loop: Header=BB15_5 Depth=1
	cmpl	$0, -48(%rbp)
	jl	.LBB15_5
# BB#24:                                # %do.end
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB15_26
# BB#25:                                # %if.then.49
	jmp	.LBB15_87
.LBB15_26:                              # %if.end.50
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -52(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB15_32
# BB#27:                                # %land.lhs.true.55
	movl	-52(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB15_32
# BB#28:                                # %if.then.58
	movl	-52(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB15_30
# BB#29:                                # %if.then.62
	movl	-52(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB15_31
.LBB15_30:                              # %if.else.68
	movl	$-1, -52(%rbp)
.LBB15_31:                              # %if.end.69
	jmp	.LBB15_32
.LBB15_32:                              # %if.end.70
	jmp	.LBB15_33
.LBB15_33:                              # %do.end.72
	cmpl	$255, -48(%rbp)
	jne	.LBB15_36
# BB#34:                                # %land.lhs.true.75
	cmpl	$254, -52(%rbp)
	jne	.LBB15_36
# BB#35:                                # %if.then.78
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2560, %ecx             # imm = 0xA00
	movl	%ecx, 4(%rax)
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$13312, %ecx            # imm = 0x3400
	movl	%ecx, 8(%rax)
	jmp	.LBB15_86
.LBB15_36:                              # %if.else.82
	cmpl	$254, -48(%rbp)
	jne	.LBB15_39
# BB#37:                                # %land.lhs.true.85
	cmpl	$255, -52(%rbp)
	jne	.LBB15_39
# BB#38:                                # %if.then.88
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1536, %ecx             # imm = 0x600
	movl	%ecx, 4(%rax)
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$14336, %ecx            # imm = 0x3800
	movl	%ecx, 8(%rax)
	jmp	.LBB15_85
.LBB15_39:                              # %if.else.93
	cmpl	$0, -52(%rbp)
	jge	.LBB15_41
# BB#40:                                # %if.then.96
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$15872, %ecx            # imm = 0x3E00
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB15_88
.LBB15_41:                              # %if.else.99
	xorl	%eax, %eax
	movl	$256, %ecx              # imm = 0x100
	movl	%ecx, %edx
	leaq	-576(%rbp), %rsi
	leaq	-320(%rbp), %rdi
	movl	$1, -580(%rbp)
	movl	$1, -584(%rbp)
	movq	%rsi, -608(%rbp)        # 8-byte Spill
	movl	%eax, %esi
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	movl	%eax, -620(%rbp)        # 4-byte Spill
	callq	memset
	movq	-608(%rbp), %rdx        # 8-byte Reload
	movq	%rdx, %rdi
	movl	-620(%rbp), %esi        # 4-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	callq	memset
	movslq	-48(%rbp), %rdx
	movb	$1, -320(%rbp,%rdx)
	movslq	-52(%rbp), %rdx
	movb	$1, -576(%rbp,%rdx)
	movq	-24(%rbp), %rdx
	movl	8(%rdx), %eax
	orl	$3584, %eax             # imm = 0xE00
	movl	%eax, 8(%rdx)
.LBB15_42:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_45 Depth 2
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$15872, %ecx            # imm = 0x3E00
	cmpl	$15872, %ecx            # imm = 0x3E00
	je	.LBB15_84
# BB#43:                                # %while.body
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_44
.LBB15_44:                              # %do.body.108
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_45
.LBB15_45:                              # %do.body.109
                                        #   Parent Loop BB15_42 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB15_47
# BB#46:                                # %if.then.112
	jmp	.LBB15_87
.LBB15_47:                              # %if.end.113
                                        #   in Loop: Header=BB15_45 Depth=2
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -48(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB15_62
# BB#48:                                # %land.lhs.true.118
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-48(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB15_62
# BB#49:                                # %if.then.121
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-48(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB15_51
# BB#50:                                # %if.then.125
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-48(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB15_61
.LBB15_51:                              # %if.else.131
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-48(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	jne	.LBB15_53
# BB#52:                                # %cond.true.134
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	$1, %eax
	movl	%eax, -624(%rbp)        # 4-byte Spill
	jmp	.LBB15_60
.LBB15_53:                              # %cond.false.135
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-48(%rbp), %eax
	andl	$32, %eax
	cmpl	$0, %eax
	jne	.LBB15_55
# BB#54:                                # %cond.true.138
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	$2, %eax
	movl	%eax, -628(%rbp)        # 4-byte Spill
	jmp	.LBB15_59
.LBB15_55:                              # %cond.false.139
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-48(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	jne	.LBB15_57
# BB#56:                                # %cond.true.142
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	$3, %eax
	movl	%eax, -632(%rbp)        # 4-byte Spill
	jmp	.LBB15_58
.LBB15_57:                              # %cond.false.143
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	$5, %eax
	movl	$4, %ecx
	movl	-48(%rbp), %edx
	andl	$8, %edx
	cmpl	$0, %edx
	setne	%sil
	xorb	$-1, %sil
	testb	$1, %sil
	cmovnel	%ecx, %eax
	movl	%eax, -632(%rbp)        # 4-byte Spill
.LBB15_58:                              # %cond.end.148
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-632(%rbp), %eax        # 4-byte Reload
	movl	%eax, -628(%rbp)        # 4-byte Spill
.LBB15_59:                              # %cond.end.150
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-628(%rbp), %eax        # 4-byte Reload
	movl	%eax, -624(%rbp)        # 4-byte Spill
.LBB15_60:                              # %cond.end.152
                                        #   in Loop: Header=BB15_45 Depth=2
	movl	-624(%rbp), %eax        # 4-byte Reload
	subl	$1, %eax
	movq	-32(%rbp), %rcx
	movslq	%eax, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -32(%rbp)
	movl	$-1, -48(%rbp)
.LBB15_61:                              # %if.end.157
                                        #   in Loop: Header=BB15_45 Depth=2
	jmp	.LBB15_62
.LBB15_62:                              # %if.end.158
                                        #   in Loop: Header=BB15_45 Depth=2
	jmp	.LBB15_63
.LBB15_63:                              # %do.cond.159
                                        #   in Loop: Header=BB15_45 Depth=2
	cmpl	$0, -48(%rbp)
	jl	.LBB15_45
# BB#64:                                # %do.end.162
                                        #   in Loop: Header=BB15_42 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB15_66
# BB#65:                                # %if.then.165
	jmp	.LBB15_87
.LBB15_66:                              # %if.end.166
                                        #   in Loop: Header=BB15_42 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -52(%rbp)
	testb	$1, -41(%rbp)
	je	.LBB15_72
# BB#67:                                # %land.lhs.true.171
                                        #   in Loop: Header=BB15_42 Depth=1
	movl	-52(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB15_72
# BB#68:                                # %if.then.174
                                        #   in Loop: Header=BB15_42 Depth=1
	movl	-52(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB15_70
# BB#69:                                # %if.then.178
                                        #   in Loop: Header=BB15_42 Depth=1
	movl	-52(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB15_71
.LBB15_70:                              # %if.else.184
                                        #   in Loop: Header=BB15_42 Depth=1
	movl	$-1, -52(%rbp)
.LBB15_71:                              # %if.end.185
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_72
.LBB15_72:                              # %if.end.186
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_73
.LBB15_73:                              # %do.end.188
                                        #   in Loop: Header=BB15_42 Depth=1
	cmpl	$0, -52(%rbp)
	jge	.LBB15_75
# BB#74:                                # %if.then.191
	jmp	.LBB15_84
.LBB15_75:                              # %if.end.192
                                        #   in Loop: Header=BB15_42 Depth=1
	movslq	-48(%rbp), %rax
	cmpb	$0, -320(%rbp,%rax)
	jne	.LBB15_79
# BB#76:                                # %if.then.196
                                        #   in Loop: Header=BB15_42 Depth=1
	movslq	-48(%rbp), %rax
	movb	$1, -320(%rbp,%rax)
	movl	-580(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -580(%rbp)
	cmpl	$128, -580(%rbp)
	jb	.LBB15_78
# BB#77:                                # %if.then.201
                                        #   in Loop: Header=BB15_42 Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$4096, %ecx             # imm = 0x1000
	movl	%ecx, 8(%rax)
.LBB15_78:                              # %if.end.204
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_79
.LBB15_79:                              # %if.end.205
                                        #   in Loop: Header=BB15_42 Depth=1
	movslq	-52(%rbp), %rax
	cmpb	$0, -576(%rbp,%rax)
	jne	.LBB15_83
# BB#80:                                # %if.then.209
                                        #   in Loop: Header=BB15_42 Depth=1
	movslq	-52(%rbp), %rax
	movb	$1, -576(%rbp,%rax)
	movl	-584(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -584(%rbp)
	cmpl	$128, -584(%rbp)
	jb	.LBB15_82
# BB#81:                                # %if.then.215
                                        #   in Loop: Header=BB15_42 Depth=1
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$8192, %ecx             # imm = 0x2000
	movl	%ecx, 8(%rax)
.LBB15_82:                              # %if.end.218
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_83
.LBB15_83:                              # %if.end.219
                                        #   in Loop: Header=BB15_42 Depth=1
	jmp	.LBB15_42
.LBB15_84:                              # %while.end
	movb	$0, -1(%rbp)
	jmp	.LBB15_88
.LBB15_85:                              # %if.end.220
	jmp	.LBB15_86
.LBB15_86:                              # %if.end.221
	jmp	.LBB15_87
.LBB15_87:                              # %no_more_source
	movb	$1, -1(%rbp)
.LBB15_88:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	retq
.Lfunc_end15:
	.size	detect_coding_utf_16, .Lfunc_end15-detect_coding_utf_16
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_utf_16,@function
decode_coding_utf_16:                   # @decode_coding_utf_16
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp48:
	.cfi_def_cfa_offset 16
.Ltmp49:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp50:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rdx
	addq	400(%rdx), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rdx
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	addq	$-8, %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %sil
	andb	$1, %sil
	movb	%sil, -65(%rbp)
	movq	-8(%rbp), %rdx
	movl	16(%rdx), %eax
	movl	%eax, -72(%rbp)
	movq	-8(%rbp), %rdx
	movl	20(%rdx), %eax
	movl	%eax, -76(%rbp)
	movq	-8(%rbp), %rdx
	movl	24(%rdx), %eax
	movl	%eax, -80(%rbp)
	testb	$1, globals+3389
	movb	%cl, -117(%rbp)         # 1-byte Spill
	jne	.LBB16_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -117(%rbp)         # 1-byte Spill
.LBB16_2:                               # %land.end
	movb	-117(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -81(%rbp)
	movl	$-1, -88(%rbp)
	movl	$-1, -92(%rbp)
	cmpl	$2, -72(%rbp)
	jne	.LBB16_32
# BB#3:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
# BB#4:                                 # %do.body
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB16_8
# BB#5:                                 # %if.then.22
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB16_7
# BB#6:                                 # %if.then.24
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_7:                               # %if.end
	jmp	.LBB16_126
.LBB16_8:                               # %if.end.25
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -100(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB16_14
# BB#9:                                 # %land.lhs.true
	movl	-100(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB16_14
# BB#10:                                # %if.then.29
	movl	-100(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB16_12
# BB#11:                                # %if.then.33
	movl	-100(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB16_13
.LBB16_12:                              # %if.else
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -100(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_13:                              # %if.end.39
	jmp	.LBB16_14
.LBB16_14:                              # %if.end.40
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#15:                                # %do.end
	jmp	.LBB16_16
.LBB16_16:                              # %do.body.41
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB16_20
# BB#17:                                # %if.then.44
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB16_19
# BB#18:                                # %if.then.47
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_19:                              # %if.end.48
	jmp	.LBB16_126
.LBB16_20:                              # %if.end.49
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -104(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB16_26
# BB#21:                                # %land.lhs.true.54
	movl	-104(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB16_26
# BB#22:                                # %if.then.57
	movl	-104(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB16_24
# BB#23:                                # %if.then.61
	movl	-104(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB16_25
.LBB16_24:                              # %if.else.67
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -104(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_25:                              # %if.end.71
	jmp	.LBB16_26
.LBB16_26:                              # %if.end.72
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#27:                                # %do.end.74
	movl	-100(%rbp), %eax
	shll	$8, %eax
	orl	-104(%rbp), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB16_29
# BB#28:                                # %cond.true
	cmpl	$65279, -96(%rbp)       # imm = 0xFEFF
	jne	.LBB16_30
	jmp	.LBB16_31
.LBB16_29:                              # %cond.false
	cmpl	$65534, -96(%rbp)       # imm = 0xFFFE
	je	.LBB16_31
.LBB16_30:                              # %if.then.83
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB16_31:                              # %if.end.84
	movq	-8(%rbp), %rax
	movl	$1, 16(%rax)
	jmp	.LBB16_35
.LBB16_32:                              # %if.else.88
	cmpl	$0, -72(%rbp)
	jne	.LBB16_34
# BB#33:                                # %if.then.91
	movq	-8(%rbp), %rax
	movl	$1, 16(%rax)
.LBB16_34:                              # %if.end.95
	jmp	.LBB16_35
.LBB16_35:                              # %if.end.96
	jmp	.LBB16_36
.LBB16_36:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB16_40
# BB#37:                                # %if.then.102
	cmpl	$0, -88(%rbp)
	jl	.LBB16_39
# BB#38:                                # %if.then.105
	movq	-32(%rbp), %rax
	addq	$-2, %rax
	movq	%rax, -32(%rbp)
.LBB16_39:                              # %if.end.107
	jmp	.LBB16_125
.LBB16_40:                              # %if.end.108
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB16_42
# BB#41:                                # %if.then.111
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -88(%rbp)
	jmp	.LBB16_55
.LBB16_42:                              # %if.else.112
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_43
.LBB16_43:                              # %do.body.113
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB16_47
# BB#44:                                # %if.then.116
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB16_46
# BB#45:                                # %if.then.119
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_46:                              # %if.end.120
	jmp	.LBB16_126
.LBB16_47:                              # %if.end.121
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -112(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB16_53
# BB#48:                                # %land.lhs.true.126
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB16_53
# BB#49:                                # %if.then.129
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB16_51
# BB#50:                                # %if.then.133
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB16_52
.LBB16_51:                              # %if.else.139
                                        #   in Loop: Header=BB16_36 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -112(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_52:                              # %if.end.143
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_53
.LBB16_53:                              # %if.end.144
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#54:                                # %do.end.146
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_55
.LBB16_55:                              # %if.end.147
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$0, -112(%rbp)
	jge	.LBB16_57
# BB#56:                                # %if.then.150
                                        #   in Loop: Header=BB16_36 Depth=1
	xorl	%eax, %eax
	subl	-112(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	jmp	.LBB16_36
.LBB16_57:                              # %if.end.153
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$0, -92(%rbp)
	jl	.LBB16_59
# BB#58:                                # %if.then.156
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$-1, -92(%rbp)
	jmp	.LBB16_72
.LBB16_59:                              # %if.else.157
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_60
.LBB16_60:                              # %do.body.158
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB16_64
# BB#61:                                # %if.then.161
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB16_63
# BB#62:                                # %if.then.164
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_63:                              # %if.end.165
	jmp	.LBB16_126
.LBB16_64:                              # %if.end.166
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -116(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB16_70
# BB#65:                                # %land.lhs.true.171
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-116(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB16_70
# BB#66:                                # %if.then.174
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-116(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB16_68
# BB#67:                                # %if.then.178
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-116(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB16_69
.LBB16_68:                              # %if.else.184
                                        #   in Loop: Header=BB16_36 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -116(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_69:                              # %if.end.188
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_70
.LBB16_70:                              # %if.end.189
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#71:                                # %do.end.191
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_72
.LBB16_72:                              # %if.end.192
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$0, -116(%rbp)
	jge	.LBB16_79
# BB#73:                                # %if.then.195
                                        #   in Loop: Header=BB16_36 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB16_74
	jmp	.LBB16_75
.LBB16_74:                              # %cond.true.196
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB16_76
	jmp	.LBB16_77
.LBB16_75:                              # %cond.false.199
                                        #   in Loop: Header=BB16_36 Depth=1
	movslq	-112(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB16_77
.LBB16_76:                              # %cond.true.204
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -132(%rbp)        # 4-byte Spill
	jmp	.LBB16_78
.LBB16_77:                              # %cond.false.205
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -132(%rbp)        # 4-byte Spill
.LBB16_78:                              # %cond.end
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-132(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$4, %rsi
	movq	%rsi, -40(%rbp)
	movl	%eax, (%rdx)
	subl	-116(%rbp), %ecx
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$4, %rsi
	movq	%rsi, -40(%rbp)
	movl	%ecx, (%rdx)
	jmp	.LBB16_36
.LBB16_79:                              # %if.end.210
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB16_81
# BB#80:                                # %cond.true.213
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	shll	$8, %eax
	orl	-116(%rbp), %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
	jmp	.LBB16_82
.LBB16_81:                              # %cond.false.216
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-116(%rbp), %eax
	shll	$8, %eax
	orl	-112(%rbp), %eax
	movl	%eax, -136(%rbp)        # 4-byte Spill
.LBB16_82:                              # %cond.end.219
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, -108(%rbp)
	cmpl	$0, -80(%rbp)
	je	.LBB16_93
# BB#83:                                # %if.then.222
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-108(%rbp), %eax
	andl	$64512, %eax            # imm = 0xFC00
	cmpl	$56320, %eax            # imm = 0xDC00
	je	.LBB16_91
# BB#84:                                # %if.then.226
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB16_86
# BB#85:                                # %if.then.229
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-80(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -112(%rbp)
	movl	-80(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB16_87
.LBB16_86:                              # %if.else.231
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-80(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -112(%rbp)
	movl	-80(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -116(%rbp)
.LBB16_87:                              # %if.end.234
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-112(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$64512, %eax            # imm = 0xFC00
	cmpl	$55296, %eax            # imm = 0xD800
	jne	.LBB16_89
# BB#88:                                # %if.then.240
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-8(%rbp), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB16_90
.LBB16_89:                              # %if.else.244
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-108(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
.LBB16_90:                              # %if.end.246
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_92
.LBB16_91:                              # %if.else.247
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-80(%rbp), %eax
	subl	$55296, %eax            # imm = 0xD800
	shll	$10, %eax
	movl	-108(%rbp), %ecx
	subl	$56320, %ecx            # imm = 0xDC00
	orl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -80(%rbp)
	movq	-8(%rbp), %rdx
	movl	$0, 24(%rdx)
	movl	-108(%rbp), %eax
	addl	$65536, %eax            # imm = 0x10000
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$4, %rsi
	movq	%rsi, -40(%rbp)
	movl	%eax, (%rdx)
.LBB16_92:                              # %if.end.257
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_124
.LBB16_93:                              # %if.else.258
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-108(%rbp), %eax
	andl	$64512, %eax            # imm = 0xFC00
	cmpl	$55296, %eax            # imm = 0xD800
	jne	.LBB16_95
# BB#94:                                # %if.then.262
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	-8(%rbp), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB16_123
.LBB16_95:                              # %if.else.266
                                        #   in Loop: Header=BB16_36 Depth=1
	testb	$1, -81(%rbp)
	je	.LBB16_122
# BB#96:                                # %land.lhs.true.269
                                        #   in Loop: Header=BB16_36 Depth=1
	cmpl	$13, -108(%rbp)
	jne	.LBB16_122
# BB#97:                                # %if.then.272
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_98
.LBB16_98:                              # %do.body.273
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB16_102
# BB#99:                                # %if.then.276
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB16_101
# BB#100:                               # %if.then.279
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_101:                             # %if.end.280
	jmp	.LBB16_126
.LBB16_102:                             # %if.end.281
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB16_108
# BB#103:                               # %land.lhs.true.286
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB16_108
# BB#104:                               # %if.then.289
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB16_106
# BB#105:                               # %if.then.293
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB16_107
.LBB16_106:                             # %if.else.299
                                        #   in Loop: Header=BB16_36 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_107:                             # %if.end.303
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_108
.LBB16_108:                             # %if.end.304
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#109:                               # %do.end.306
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_110
.LBB16_110:                             # %do.body.307
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB16_114
# BB#111:                               # %if.then.310
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB16_113
# BB#112:                               # %if.then.313
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_113:                             # %if.end.314
	jmp	.LBB16_126
.LBB16_114:                             # %if.end.315
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -92(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB16_120
# BB#115:                               # %land.lhs.true.320
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-92(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB16_120
# BB#116:                               # %if.then.323
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-92(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB16_118
# BB#117:                               # %if.then.327
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-92(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB16_119
.LBB16_118:                             # %if.else.333
                                        #   in Loop: Header=BB16_36 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -92(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB16_119:                             # %if.end.337
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_120
.LBB16_120:                             # %if.end.338
                                        #   in Loop: Header=BB16_36 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#121:                               # %do.end.340
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_122
.LBB16_122:                             # %if.end.341
                                        #   in Loop: Header=BB16_36 Depth=1
	movl	-108(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
.LBB16_123:                             # %if.end.343
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_124
.LBB16_124:                             # %if.end.344
                                        #   in Loop: Header=BB16_36 Depth=1
	jmp	.LBB16_36
.LBB16_125:                             # %while.end
	jmp	.LBB16_126
.LBB16_126:                             # %no_more_source
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end16:
	.size	decode_coding_utf_16, .Lfunc_end16-decode_coding_utf_16
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_utf_16,@function
encode_coding_utf_16:                   # @encode_coding_utf_16
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp51:
	.cfi_def_cfa_offset 16
.Ltmp52:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp53:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movl	$8, -52(%rbp)
	movq	-8(%rbp), %rdx
	movl	16(%rdx), %eax
	movl	%eax, -56(%rbp)
	movq	-8(%rbp), %rdx
	cmpl	$0, 20(%rdx)
	sete	%cl
	andb	$1, %cl
	movb	%cl, -57(%rbp)
	movq	$0, -72(%rbp)
	cmpl	$1, -56(%rbp)
	je	.LBB17_71
# BB#1:                                 # %if.then
	jmp	.LBB17_2
.LBB17_2:                               # %do.body
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB17_4
# BB#3:                                 # %if.then.13
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rdi
	movq	-88(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB17_4:                               # %if.end
	jmp	.LBB17_5
.LBB17_5:                               # %do.end
	testb	$1, -57(%rbp)
	je	.LBB17_38
# BB#6:                                 # %if.then.17
	jmp	.LBB17_7
.LBB17_7:                               # %do.body.18
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_35
# BB#8:                                 # %if.then.21
	movl	$254, -92(%rbp)
	cmpl	$128, -92(%rbp)
	jb	.LBB17_10
# BB#9:                                 # %if.then.24
	movl	-92(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -92(%rbp)
.LBB17_10:                              # %if.end.26
	jmp	.LBB17_11
.LBB17_11:                              # %do.body.27
	cmpl	$127, -92(%rbp)
	ja	.LBB17_13
# BB#12:                                # %if.then.30
	movl	-92(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_20
.LBB17_13:                              # %if.else
	cmpl	$2047, -92(%rbp)        # imm = 0x7FF
	ja	.LBB17_15
# BB#14:                                # %if.then.34
	movl	-92(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-92(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_19
.LBB17_15:                              # %if.else.40
	cmpl	$65535, -92(%rbp)       # imm = 0xFFFF
	ja	.LBB17_17
# BB#16:                                # %if.then.43
	movl	-92(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-92(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-92(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_18
.LBB17_17:                              # %if.else.57
	movl	-92(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_18:                              # %if.end.61
	jmp	.LBB17_19
.LBB17_19:                              # %if.end.62
	jmp	.LBB17_20
.LBB17_20:                              # %if.end.63
	jmp	.LBB17_21
.LBB17_21:                              # %do.end.64
	movl	$255, -92(%rbp)
	cmpl	$128, -92(%rbp)
	jb	.LBB17_23
# BB#22:                                # %if.then.67
	movl	-92(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -92(%rbp)
.LBB17_23:                              # %if.end.69
	jmp	.LBB17_24
.LBB17_24:                              # %do.body.70
	cmpl	$127, -92(%rbp)
	ja	.LBB17_26
# BB#25:                                # %if.then.73
	movl	-92(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_33
.LBB17_26:                              # %if.else.76
	cmpl	$2047, -92(%rbp)        # imm = 0x7FF
	ja	.LBB17_28
# BB#27:                                # %if.then.79
	movl	-92(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-92(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_32
.LBB17_28:                              # %if.else.88
	cmpl	$65535, -92(%rbp)       # imm = 0xFFFF
	ja	.LBB17_30
# BB#29:                                # %if.then.91
	movl	-92(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-92(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-92(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_31
.LBB17_30:                              # %if.else.105
	movl	-92(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_31:                              # %if.end.109
	jmp	.LBB17_32
.LBB17_32:                              # %if.end.110
	jmp	.LBB17_33
.LBB17_33:                              # %if.end.111
	jmp	.LBB17_34
.LBB17_34:                              # %do.end.112
	jmp	.LBB17_36
.LBB17_35:                              # %if.else.113
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-2, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-1, (%rax)
.LBB17_36:                              # %if.end.116
	jmp	.LBB17_37
.LBB17_37:                              # %do.end.117
	jmp	.LBB17_70
.LBB17_38:                              # %if.else.118
	jmp	.LBB17_39
.LBB17_39:                              # %do.body.119
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_67
# BB#40:                                # %if.then.122
	movl	$255, -96(%rbp)
	cmpl	$128, -96(%rbp)
	jb	.LBB17_42
# BB#41:                                # %if.then.126
	movl	-96(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -96(%rbp)
.LBB17_42:                              # %if.end.128
	jmp	.LBB17_43
.LBB17_43:                              # %do.body.129
	cmpl	$127, -96(%rbp)
	ja	.LBB17_45
# BB#44:                                # %if.then.132
	movl	-96(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_52
.LBB17_45:                              # %if.else.135
	cmpl	$2047, -96(%rbp)        # imm = 0x7FF
	ja	.LBB17_47
# BB#46:                                # %if.then.138
	movl	-96(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_51
.LBB17_47:                              # %if.else.147
	cmpl	$65535, -96(%rbp)       # imm = 0xFFFF
	ja	.LBB17_49
# BB#48:                                # %if.then.150
	movl	-96(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_50
.LBB17_49:                              # %if.else.164
	movl	-96(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_50:                              # %if.end.168
	jmp	.LBB17_51
.LBB17_51:                              # %if.end.169
	jmp	.LBB17_52
.LBB17_52:                              # %if.end.170
	jmp	.LBB17_53
.LBB17_53:                              # %do.end.171
	movl	$254, -96(%rbp)
	cmpl	$128, -96(%rbp)
	jb	.LBB17_55
# BB#54:                                # %if.then.174
	movl	-96(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -96(%rbp)
.LBB17_55:                              # %if.end.176
	jmp	.LBB17_56
.LBB17_56:                              # %do.body.177
	cmpl	$127, -96(%rbp)
	ja	.LBB17_58
# BB#57:                                # %if.then.180
	movl	-96(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_65
.LBB17_58:                              # %if.else.183
	cmpl	$2047, -96(%rbp)        # imm = 0x7FF
	ja	.LBB17_60
# BB#59:                                # %if.then.186
	movl	-96(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_64
.LBB17_60:                              # %if.else.195
	cmpl	$65535, -96(%rbp)       # imm = 0xFFFF
	ja	.LBB17_62
# BB#61:                                # %if.then.198
	movl	-96(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_63
.LBB17_62:                              # %if.else.212
	movl	-96(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_63:                              # %if.end.216
	jmp	.LBB17_64
.LBB17_64:                              # %if.end.217
	jmp	.LBB17_65
.LBB17_65:                              # %if.end.218
	jmp	.LBB17_66
.LBB17_66:                              # %do.end.219
	jmp	.LBB17_68
.LBB17_67:                              # %if.else.220
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-1, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -40(%rbp)
	movb	$-2, (%rax)
.LBB17_68:                              # %if.end.223
	jmp	.LBB17_69
.LBB17_69:                              # %do.end.224
	jmp	.LBB17_70
.LBB17_70:                              # %if.end.225
	movq	-8(%rbp), %rax
	movl	$1, 16(%rax)
.LBB17_71:                              # %if.end.229
	jmp	.LBB17_72
.LBB17_72:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB17_279
# BB#73:                                # %while.body
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_74
.LBB17_74:                              # %do.body.232
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB17_76
# BB#75:                                # %if.then.237
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-8(%rbp), %rdi
	movq	-104(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB17_76:                              # %if.end.249
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_77
.LBB17_77:                              # %do.end.250
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -76(%rbp)
	cmpl	$1114111, -76(%rbp)     # imm = 0x10FFFF
	jle	.LBB17_79
# BB#78:                                # %if.then.254
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-8(%rbp), %rax
	movl	588(%rax), %ecx
	movl	%ecx, -76(%rbp)
.LBB17_79:                              # %if.end.255
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65536, -76(%rbp)       # imm = 0x10000
	jge	.LBB17_146
# BB#80:                                # %if.then.258
                                        #   in Loop: Header=BB17_72 Depth=1
	testb	$1, -57(%rbp)
	je	.LBB17_113
# BB#81:                                # %if.then.260
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_82
.LBB17_82:                              # %do.body.261
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_110
# BB#83:                                # %if.then.264
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -108(%rbp)
	cmpl	$128, -108(%rbp)
	jb	.LBB17_85
# BB#84:                                # %if.then.269
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -108(%rbp)
.LBB17_85:                              # %if.end.271
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_86
.LBB17_86:                              # %do.body.272
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -108(%rbp)
	ja	.LBB17_88
# BB#87:                                # %if.then.275
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_95
.LBB17_88:                              # %if.else.278
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -108(%rbp)       # imm = 0x7FF
	ja	.LBB17_90
# BB#89:                                # %if.then.281
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_94
.LBB17_90:                              # %if.else.290
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -108(%rbp)      # imm = 0xFFFF
	ja	.LBB17_92
# BB#91:                                # %if.then.293
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_93
.LBB17_92:                              # %if.else.307
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_93:                              # %if.end.311
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_94
.LBB17_94:                              # %if.end.312
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_95
.LBB17_95:                              # %if.end.313
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_96
.LBB17_96:                              # %do.end.314
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -108(%rbp)
	cmpl	$128, -108(%rbp)
	jb	.LBB17_98
# BB#97:                                # %if.then.318
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -108(%rbp)
.LBB17_98:                              # %if.end.320
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_99
.LBB17_99:                              # %do.body.321
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -108(%rbp)
	ja	.LBB17_101
# BB#100:                               # %if.then.324
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_108
.LBB17_101:                             # %if.else.327
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -108(%rbp)       # imm = 0x7FF
	ja	.LBB17_103
# BB#102:                               # %if.then.330
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_107
.LBB17_103:                             # %if.else.339
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -108(%rbp)      # imm = 0xFFFF
	ja	.LBB17_105
# BB#104:                               # %if.then.342
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-108(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_106
.LBB17_105:                             # %if.else.356
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-108(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_106:                             # %if.end.360
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_107
.LBB17_107:                             # %if.end.361
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_108
.LBB17_108:                             # %if.end.362
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_109
.LBB17_109:                             # %do.end.363
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_111
.LBB17_110:                             # %if.else.364
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	sarl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB17_111:                             # %if.end.371
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_112
.LBB17_112:                             # %do.end.372
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_145
.LBB17_113:                             # %if.else.373
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_114
.LBB17_114:                             # %do.body.374
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_142
# BB#115:                               # %if.then.377
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -112(%rbp)
	cmpl	$128, -112(%rbp)
	jb	.LBB17_117
# BB#116:                               # %if.then.382
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -112(%rbp)
.LBB17_117:                             # %if.end.384
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_118
.LBB17_118:                             # %do.body.385
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -112(%rbp)
	ja	.LBB17_120
# BB#119:                               # %if.then.388
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_127
.LBB17_120:                             # %if.else.391
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -112(%rbp)       # imm = 0x7FF
	ja	.LBB17_122
# BB#121:                               # %if.then.394
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-112(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_126
.LBB17_122:                             # %if.else.403
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -112(%rbp)      # imm = 0xFFFF
	ja	.LBB17_124
# BB#123:                               # %if.then.406
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-112(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-112(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_125
.LBB17_124:                             # %if.else.420
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_125:                             # %if.end.424
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_126
.LBB17_126:                             # %if.end.425
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_127
.LBB17_127:                             # %if.end.426
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_128
.LBB17_128:                             # %do.end.427
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -112(%rbp)
	cmpl	$128, -112(%rbp)
	jb	.LBB17_130
# BB#129:                               # %if.then.431
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -112(%rbp)
.LBB17_130:                             # %if.end.433
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_131
.LBB17_131:                             # %do.body.434
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -112(%rbp)
	ja	.LBB17_133
# BB#132:                               # %if.then.437
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_140
.LBB17_133:                             # %if.else.440
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -112(%rbp)       # imm = 0x7FF
	ja	.LBB17_135
# BB#134:                               # %if.then.443
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-112(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_139
.LBB17_135:                             # %if.else.452
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -112(%rbp)      # imm = 0xFFFF
	ja	.LBB17_137
# BB#136:                               # %if.then.455
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-112(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-112(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_138
.LBB17_137:                             # %if.else.469
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-112(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_138:                             # %if.end.473
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_139
.LBB17_139:                             # %if.end.474
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_140
.LBB17_140:                             # %if.end.475
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_141
.LBB17_141:                             # %do.end.476
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_143
.LBB17_142:                             # %if.else.477
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-76(%rbp), %eax
	sarl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB17_143:                             # %if.end.484
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_144
.LBB17_144:                             # %do.end.485
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_145
.LBB17_145:                             # %if.end.486
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_278
.LBB17_146:                             # %if.else.487
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-76(%rbp), %eax
	subl	$65536, %eax            # imm = 0x10000
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$10, %eax
	addl	$55296, %eax            # imm = 0xD800
	movl	%eax, -116(%rbp)
	movl	-76(%rbp), %eax
	andl	$1023, %eax             # imm = 0x3FF
	addl	$56320, %eax            # imm = 0xDC00
	movl	%eax, -120(%rbp)
	testb	$1, -57(%rbp)
	je	.LBB17_212
# BB#147:                               # %if.then.493
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_148
.LBB17_148:                             # %do.body.494
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_149
.LBB17_149:                             # %do.body.495
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_177
# BB#150:                               # %if.then.498
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-116(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -124(%rbp)
	cmpl	$128, -124(%rbp)
	jb	.LBB17_152
# BB#151:                               # %if.then.503
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -124(%rbp)
.LBB17_152:                             # %if.end.505
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_153
.LBB17_153:                             # %do.body.506
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -124(%rbp)
	ja	.LBB17_155
# BB#154:                               # %if.then.509
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_162
.LBB17_155:                             # %if.else.512
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -124(%rbp)       # imm = 0x7FF
	ja	.LBB17_157
# BB#156:                               # %if.then.515
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_161
.LBB17_157:                             # %if.else.524
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -124(%rbp)      # imm = 0xFFFF
	ja	.LBB17_159
# BB#158:                               # %if.then.527
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_160
.LBB17_159:                             # %if.else.541
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_160:                             # %if.end.545
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_161
.LBB17_161:                             # %if.end.546
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_162
.LBB17_162:                             # %if.end.547
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_163
.LBB17_163:                             # %do.end.548
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -124(%rbp)
	cmpl	$128, -124(%rbp)
	jb	.LBB17_165
# BB#164:                               # %if.then.552
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -124(%rbp)
.LBB17_165:                             # %if.end.554
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_166
.LBB17_166:                             # %do.body.555
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -124(%rbp)
	ja	.LBB17_168
# BB#167:                               # %if.then.558
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_175
.LBB17_168:                             # %if.else.561
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -124(%rbp)       # imm = 0x7FF
	ja	.LBB17_170
# BB#169:                               # %if.then.564
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_174
.LBB17_170:                             # %if.else.573
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -124(%rbp)      # imm = 0xFFFF
	ja	.LBB17_172
# BB#171:                               # %if.then.576
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_173
.LBB17_172:                             # %if.else.590
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-124(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_173:                             # %if.end.594
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_174
.LBB17_174:                             # %if.end.595
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_175
.LBB17_175:                             # %if.end.596
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_176
.LBB17_176:                             # %do.end.597
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_178
.LBB17_177:                             # %if.else.598
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-116(%rbp), %eax
	sarl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB17_178:                             # %if.end.605
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_179
.LBB17_179:                             # %do.end.606
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_180
.LBB17_180:                             # %do.body.607
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_208
# BB#181:                               # %if.then.610
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-120(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -128(%rbp)
	cmpl	$128, -128(%rbp)
	jb	.LBB17_183
# BB#182:                               # %if.then.615
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -128(%rbp)
.LBB17_183:                             # %if.end.617
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_184
.LBB17_184:                             # %do.body.618
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -128(%rbp)
	ja	.LBB17_186
# BB#185:                               # %if.then.621
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_193
.LBB17_186:                             # %if.else.624
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -128(%rbp)       # imm = 0x7FF
	ja	.LBB17_188
# BB#187:                               # %if.then.627
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_192
.LBB17_188:                             # %if.else.636
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -128(%rbp)      # imm = 0xFFFF
	ja	.LBB17_190
# BB#189:                               # %if.then.639
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_191
.LBB17_190:                             # %if.else.653
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_191:                             # %if.end.657
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_192
.LBB17_192:                             # %if.end.658
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_193
.LBB17_193:                             # %if.end.659
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_194
.LBB17_194:                             # %do.end.660
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-120(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -128(%rbp)
	cmpl	$128, -128(%rbp)
	jb	.LBB17_196
# BB#195:                               # %if.then.664
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -128(%rbp)
.LBB17_196:                             # %if.end.666
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_197
.LBB17_197:                             # %do.body.667
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -128(%rbp)
	ja	.LBB17_199
# BB#198:                               # %if.then.670
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_206
.LBB17_199:                             # %if.else.673
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -128(%rbp)       # imm = 0x7FF
	ja	.LBB17_201
# BB#200:                               # %if.then.676
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_205
.LBB17_201:                             # %if.else.685
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -128(%rbp)      # imm = 0xFFFF
	ja	.LBB17_203
# BB#202:                               # %if.then.688
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-128(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_204
.LBB17_203:                             # %if.else.702
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-128(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_204:                             # %if.end.706
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_205
.LBB17_205:                             # %if.end.707
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_206
.LBB17_206:                             # %if.end.708
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_207
.LBB17_207:                             # %do.end.709
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_209
.LBB17_208:                             # %if.else.710
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-120(%rbp), %eax
	sarl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-120(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB17_209:                             # %if.end.717
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_210
.LBB17_210:                             # %do.end.718
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_211
.LBB17_211:                             # %do.end.719
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_277
.LBB17_212:                             # %if.else.720
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_213
.LBB17_213:                             # %do.body.721
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_214
.LBB17_214:                             # %do.body.722
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_242
# BB#215:                               # %if.then.725
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -132(%rbp)
	cmpl	$128, -132(%rbp)
	jb	.LBB17_217
# BB#216:                               # %if.then.730
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -132(%rbp)
.LBB17_217:                             # %if.end.732
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_218
.LBB17_218:                             # %do.body.733
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -132(%rbp)
	ja	.LBB17_220
# BB#219:                               # %if.then.736
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_227
.LBB17_220:                             # %if.else.739
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -132(%rbp)       # imm = 0x7FF
	ja	.LBB17_222
# BB#221:                               # %if.then.742
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_226
.LBB17_222:                             # %if.else.751
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -132(%rbp)      # imm = 0xFFFF
	ja	.LBB17_224
# BB#223:                               # %if.then.754
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_225
.LBB17_224:                             # %if.else.768
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_225:                             # %if.end.772
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_226
.LBB17_226:                             # %if.end.773
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_227
.LBB17_227:                             # %if.end.774
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_228
.LBB17_228:                             # %do.end.775
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-116(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -132(%rbp)
	cmpl	$128, -132(%rbp)
	jb	.LBB17_230
# BB#229:                               # %if.then.779
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -132(%rbp)
.LBB17_230:                             # %if.end.781
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_231
.LBB17_231:                             # %do.body.782
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -132(%rbp)
	ja	.LBB17_233
# BB#232:                               # %if.then.785
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_240
.LBB17_233:                             # %if.else.788
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -132(%rbp)       # imm = 0x7FF
	ja	.LBB17_235
# BB#234:                               # %if.then.791
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_239
.LBB17_235:                             # %if.else.800
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -132(%rbp)      # imm = 0xFFFF
	ja	.LBB17_237
# BB#236:                               # %if.then.803
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-132(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_238
.LBB17_237:                             # %if.else.817
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-132(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_238:                             # %if.end.821
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_239
.LBB17_239:                             # %if.end.822
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_240
.LBB17_240:                             # %if.end.823
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_241
.LBB17_241:                             # %do.end.824
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_243
.LBB17_242:                             # %if.else.825
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-116(%rbp), %eax
	sarl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB17_243:                             # %if.end.832
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_244
.LBB17_244:                             # %do.end.833
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_245
.LBB17_245:                             # %do.body.834
                                        #   in Loop: Header=BB17_72 Depth=1
	movq	-72(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -72(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB17_273
# BB#246:                               # %if.then.837
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-120(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -136(%rbp)
	cmpl	$128, -136(%rbp)
	jb	.LBB17_248
# BB#247:                               # %if.then.842
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -136(%rbp)
.LBB17_248:                             # %if.end.844
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_249
.LBB17_249:                             # %do.body.845
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -136(%rbp)
	ja	.LBB17_251
# BB#250:                               # %if.then.848
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_258
.LBB17_251:                             # %if.else.851
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -136(%rbp)       # imm = 0x7FF
	ja	.LBB17_253
# BB#252:                               # %if.then.854
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_257
.LBB17_253:                             # %if.else.863
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -136(%rbp)      # imm = 0xFFFF
	ja	.LBB17_255
# BB#254:                               # %if.then.866
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_256
.LBB17_255:                             # %if.else.880
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_256:                             # %if.end.884
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_257
.LBB17_257:                             # %if.end.885
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_258
.LBB17_258:                             # %if.end.886
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_259
.LBB17_259:                             # %do.end.887
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-120(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -136(%rbp)
	cmpl	$128, -136(%rbp)
	jb	.LBB17_261
# BB#260:                               # %if.then.891
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -136(%rbp)
.LBB17_261:                             # %if.end.893
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_262
.LBB17_262:                             # %do.body.894
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$127, -136(%rbp)
	ja	.LBB17_264
# BB#263:                               # %if.then.897
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_271
.LBB17_264:                             # %if.else.900
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$2047, -136(%rbp)       # imm = 0x7FF
	ja	.LBB17_266
# BB#265:                               # %if.then.903
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_270
.LBB17_266:                             # %if.else.912
                                        #   in Loop: Header=BB17_72 Depth=1
	cmpl	$65535, -136(%rbp)      # imm = 0xFFFF
	ja	.LBB17_268
# BB#267:                               # %if.then.915
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-136(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB17_269
.LBB17_268:                             # %if.else.929
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-136(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB17_269:                             # %if.end.933
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_270
.LBB17_270:                             # %if.end.934
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_271
.LBB17_271:                             # %if.end.935
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_272
.LBB17_272:                             # %do.end.936
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_274
.LBB17_273:                             # %if.else.937
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-120(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-120(%rbp), %eax
	sarl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB17_274:                             # %if.end.944
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_275
.LBB17_275:                             # %do.end.945
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_276
.LBB17_276:                             # %do.end.946
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_277
.LBB17_277:                             # %if.end.947
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_278
.LBB17_278:                             # %if.end.948
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_72
.LBB17_279:                             # %while.end
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-40(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	496(%rcx), %rcx
	subq	%rcx, %rdi
	movq	-8(%rbp), %rcx
	movq	%rdi, 384(%rcx)
	movq	-72(%rbp), %rcx
	movq	-8(%rbp), %rdi
	addq	392(%rdi), %rcx
	movq	%rcx, 392(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end17:
	.size	encode_coding_utf_16, .Lfunc_end17-encode_coding_utf_16
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_ccl,@function
detect_coding_ccl:                      # @detect_coding_ccl
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp54:
	.cfi_def_cfa_offset 16
.Ltmp55:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp56:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movabsq	$coding_categories, %rax
	addq	$10472, %rax            # imm = 0x28E8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -49(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movq	-16(%rbp), %rsi
	movq	360(%rsi), %rsi
	movq	%rsi, -88(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %ecx
	orl	$131072, %ecx           # imm = 0x20000
	movl	%ecx, (%rsi)
	movq	%rax, -16(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$19, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SDATA
	movq	%rax, -80(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB18_2
# BB#1:                                 # %if.then
	movq	-88(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB18_2:                               # %if.end
	jmp	.LBB18_3
.LBB18_3:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#4:                                 # %do.body
                                        #   in Loop: Header=BB18_3 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB18_8
# BB#5:                                 # %if.then.15
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB18_7
# BB#6:                                 # %if.then.17
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB18_7:                               # %if.end.18
	jmp	.LBB18_22
.LBB18_8:                               # %if.end.19
                                        #   in Loop: Header=BB18_3 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -100(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB18_14
# BB#9:                                 # %land.lhs.true
                                        #   in Loop: Header=BB18_3 Depth=1
	movl	-100(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB18_14
# BB#10:                                # %if.then.22
                                        #   in Loop: Header=BB18_3 Depth=1
	movl	-100(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB18_12
# BB#11:                                # %if.then.26
                                        #   in Loop: Header=BB18_3 Depth=1
	movl	-100(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB18_13
.LBB18_12:                              # %if.else
                                        #   in Loop: Header=BB18_3 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -100(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB18_13:                              # %if.end.33
                                        #   in Loop: Header=BB18_3 Depth=1
	jmp	.LBB18_14
.LBB18_14:                              # %if.end.34
                                        #   in Loop: Header=BB18_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#15:                                # %do.end
                                        #   in Loop: Header=BB18_3 Depth=1
	cmpl	$0, -100(%rbp)
	jl	.LBB18_17
# BB#16:                                # %lor.lhs.false
                                        #   in Loop: Header=BB18_3 Depth=1
	movslq	-100(%rbp), %rax
	movq	-80(%rbp), %rcx
	cmpb	$0, (%rcx,%rax)
	jne	.LBB18_18
.LBB18_17:                              # %if.then.38
	jmp	.LBB18_21
.LBB18_18:                              # %if.end.39
                                        #   in Loop: Header=BB18_3 Depth=1
	movslq	-100(%rbp), %rax
	movq	-80(%rbp), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$1, %edx
	jle	.LBB18_20
# BB#19:                                # %if.then.45
                                        #   in Loop: Header=BB18_3 Depth=1
	movl	$131072, -68(%rbp)      # imm = 0x20000
.LBB18_20:                              # %if.end.46
                                        #   in Loop: Header=BB18_3 Depth=1
	jmp	.LBB18_3
.LBB18_21:                              # %while.end
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$131072, %ecx           # imm = 0x20000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB18_23
.LBB18_22:                              # %no_more_source
	movl	-68(%rbp), %eax
	movq	-24(%rbp), %rcx
	orl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
	movb	$1, -1(%rbp)
.LBB18_23:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end18:
	.size	detect_coding_ccl, .Lfunc_end18-detect_coding_ccl
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_ccl,@function
decode_coding_ccl:                      # @decode_coding_ccl
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp57:
	.cfi_def_cfa_offset 16
.Ltmp58:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp59:
	.cfi_def_cfa_register %rbp
	subq	$8352, %rsp             # imm = 0x20A0
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rax
	addq	400(%rax), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rax
	movq	%rax, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movb	%dl, -49(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -8280(%rbp)
	movq	-8280(%rbp), %rdi
	callq	AREF
	movq	%rax, -8288(%rbp)
# BB#2:                                 # %do.end
	jmp	.LBB19_3
.LBB19_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_20 Depth 2
                                        #     Child Loop BB19_5 Depth 2
	movq	-16(%rbp), %rax
	movq	%rax, -8296(%rbp)
	movl	$0, -8308(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB19_19
# BB#4:                                 # %if.then
                                        #   in Loop: Header=BB19_3 Depth=1
	jmp	.LBB19_5
.LBB19_5:                               # %while.cond.13
                                        #   Parent Loop BB19_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$1024, -8308(%rbp)      # imm = 0x400
	movb	%cl, -8309(%rbp)        # 1-byte Spill
	jge	.LBB19_7
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB19_5 Depth=2
	movq	-8296(%rbp), %rax
	cmpq	-24(%rbp), %rax
	setb	%cl
	movb	%cl, -8309(%rbp)        # 1-byte Spill
.LBB19_7:                               # %land.end
                                        #   in Loop: Header=BB19_5 Depth=2
	movb	-8309(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_8
	jmp	.LBB19_18
.LBB19_8:                               # %while.body.15
                                        #   in Loop: Header=BB19_5 Depth=2
	movq	-8296(%rbp), %rax
	movq	-16(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movslq	-8308(%rbp), %rax
	movl	%edx, -8272(%rbp,%rax,4)
	movq	-8296(%rbp), %rax
	movzbl	(%rax), %edx
	andl	$128, %edx
	cmpl	$0, %edx
	jne	.LBB19_10
# BB#9:                                 # %cond.true
                                        #   in Loop: Header=BB19_5 Depth=2
	movq	-8296(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -8296(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -8316(%rbp)       # 4-byte Spill
	jmp	.LBB19_17
.LBB19_10:                              # %cond.false
                                        #   in Loop: Header=BB19_5 Depth=2
	movq	-8296(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB19_12
# BB#11:                                # %cond.true.24
                                        #   in Loop: Header=BB19_5 Depth=2
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-8296(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -8296(%rbp)
	movq	-8296(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-8296(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-8296(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -8320(%rbp)       # 4-byte Spill
	jmp	.LBB19_16
.LBB19_12:                              # %cond.false.37
                                        #   in Loop: Header=BB19_5 Depth=2
	movq	-8296(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB19_14
# BB#13:                                # %cond.true.42
                                        #   in Loop: Header=BB19_5 Depth=2
	movq	-8296(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -8296(%rbp)
	movq	-8296(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-8296(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-8296(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -8324(%rbp)       # 4-byte Spill
	jmp	.LBB19_15
.LBB19_14:                              # %cond.false.57
                                        #   in Loop: Header=BB19_5 Depth=2
	leaq	-8296(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-8296(%rbp), %rdi
	callq	string_char
	movl	%eax, -8324(%rbp)       # 4-byte Spill
.LBB19_15:                              # %cond.end
                                        #   in Loop: Header=BB19_5 Depth=2
	movl	-8324(%rbp), %eax       # 4-byte Reload
	movl	%eax, -8320(%rbp)       # 4-byte Spill
.LBB19_16:                              # %cond.end.60
                                        #   in Loop: Header=BB19_5 Depth=2
	movl	-8320(%rbp), %eax       # 4-byte Reload
	movl	%eax, -8316(%rbp)       # 4-byte Spill
.LBB19_17:                              # %cond.end.62
                                        #   in Loop: Header=BB19_5 Depth=2
	movl	-8316(%rbp), %eax       # 4-byte Reload
	movl	-8308(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -8308(%rbp)
	movslq	%ecx, %rsi
	movl	%eax, -4160(%rbp,%rsi,4)
	jmp	.LBB19_5
.LBB19_18:                              # %while.end
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-8296(%rbp), %rax
	movq	-16(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movslq	-8308(%rbp), %rax
	movl	%edx, -8272(%rbp,%rax,4)
	jmp	.LBB19_25
.LBB19_19:                              # %if.else
                                        #   in Loop: Header=BB19_3 Depth=1
	jmp	.LBB19_20
.LBB19_20:                              # %while.cond.72
                                        #   Parent Loop BB19_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	cmpl	$1024, -8308(%rbp)      # imm = 0x400
	movb	%cl, -8325(%rbp)        # 1-byte Spill
	jge	.LBB19_22
# BB#21:                                # %land.rhs.75
                                        #   in Loop: Header=BB19_20 Depth=2
	movq	-8296(%rbp), %rax
	cmpq	-24(%rbp), %rax
	setb	%cl
	movb	%cl, -8325(%rbp)        # 1-byte Spill
.LBB19_22:                              # %land.end.78
                                        #   in Loop: Header=BB19_20 Depth=2
	movb	-8325(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB19_23
	jmp	.LBB19_24
.LBB19_23:                              # %while.body.79
                                        #   in Loop: Header=BB19_20 Depth=2
	movq	-8296(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -8296(%rbp)
	movzbl	(%rax), %edx
	movl	-8308(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -8308(%rbp)
	movslq	%esi, %rax
	movl	%edx, -4160(%rbp,%rax,4)
	jmp	.LBB19_20
.LBB19_24:                              # %while.end.85
                                        #   in Loop: Header=BB19_3 Depth=1
	jmp	.LBB19_25
.LBB19_25:                              # %if.end
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-8296(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB19_28
# BB#26:                                # %land.lhs.true
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB19_28
# BB#27:                                # %if.then.93
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-64(%rbp), %rax
	movb	84(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 84(%rax)
.LBB19_28:                              # %if.end.96
                                        #   in Loop: Header=BB19_3 Depth=1
	leaq	-4160(%rbp), %rsi
	movb	$0, charset_map_loaded
	movq	-64(%rbp), %rdi
	movq	-32(%rbp), %rdx
	movl	-8308(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %r8
	subq	%r8, %rax
	sarq	$2, %rax
	movl	%eax, %r9d
	movq	-8288(%rbp), %rax
	movl	%r9d, %r8d
	movq	%rax, %r9
	callq	ccl_driver
	testb	$1, charset_map_loaded
	je	.LBB19_31
# BB#29:                                # %land.lhs.true.103
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -8304(%rbp)
	cmpq	$0, %rax
	je	.LBB19_31
# BB#30:                                # %if.then.106
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-8304(%rbp), %rax
	addq	-8296(%rbp), %rax
	movq	%rax, -8296(%rbp)
	movq	-8304(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-8304(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB19_31:                              # %if.end.110
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-64(%rbp), %rax
	movl	80(%rax), %ecx
	movq	-32(%rbp), %rax
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB19_33
# BB#32:                                # %if.then.114
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-64(%rbp), %rax
	movslq	76(%rax), %rax
	movl	-8272(%rbp,%rax,4), %ecx
	movq	-16(%rbp), %rax
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB19_34
.LBB19_33:                              # %if.else.120
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-64(%rbp), %rax
	movl	76(%rax), %ecx
	movq	-16(%rbp), %rax
	movslq	%ecx, %rdx
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
.LBB19_34:                              # %if.end.124
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-64(%rbp), %rax
	movslq	76(%rax), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-8296(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB19_36
# BB#35:                                # %lor.lhs.false
                                        #   in Loop: Header=BB19_3 Depth=1
	movq	-64(%rbp), %rax
	cmpl	$1, 64(%rax)
	je	.LBB19_37
.LBB19_36:                              # %if.then.131
	jmp	.LBB19_38
.LBB19_37:                              # %if.end.132
                                        #   in Loop: Header=BB19_3 Depth=1
	jmp	.LBB19_3
.LBB19_38:                              # %while.end.133
	movq	-64(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -8332(%rbp)       # 4-byte Spill
	movl	%edx, -8336(%rbp)       # 4-byte Spill
	je	.LBB19_39
	jmp	.LBB19_44
.LBB19_44:                              # %while.end.133
	movl	-8332(%rbp), %eax       # 4-byte Reload
	subl	$2, %eax
	movl	%eax, -8340(%rbp)       # 4-byte Spill
	je	.LBB19_40
	jmp	.LBB19_45
.LBB19_45:                              # %while.end.133
	movl	-8332(%rbp), %eax       # 4-byte Reload
	addl	$-3, %eax
	subl	$2, %eax
	movl	%eax, -8344(%rbp)       # 4-byte Spill
	jb	.LBB19_41
	jmp	.LBB19_42
.LBB19_39:                              # %sw.bb
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB19_43
.LBB19_40:                              # %sw.bb.135
	movl	$2, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB19_43
.LBB19_41:                              # %sw.bb.136
	movl	$4, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB19_43
.LBB19_42:                              # %sw.default
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB19_43:                              # %sw.epilog
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$8352, %rsp             # imm = 0x20A0
	popq	%rbp
	retq
.Lfunc_end19:
	.size	decode_coding_ccl, .Lfunc_end19-decode_coding_ccl
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_ccl,@function
encode_coding_ccl:                      # @encode_coding_ccl
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp60:
	.cfi_def_cfa_offset 16
.Ltmp61:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp62:
	.cfi_def_cfa_register %rbp
	subq	$4240, %rsp             # imm = 0x1090
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -17(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -56(%rbp)
	movq	$0, -4168(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -4184(%rbp)
	movq	-4184(%rbp), %rdi
	callq	AREF
	movq	%rax, -4192(%rbp)
# BB#2:                                 # %do.end
	movq	-8(%rbp), %rax
	movq	408(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	432(%rcx), %rax
	jne	.LBB20_5
# BB#3:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB20_5
# BB#4:                                 # %if.then
	movq	-16(%rbp), %rax
	movb	84(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 84(%rax)
.LBB20_5:                               # %if.end
	jmp	.LBB20_6
.LBB20_6:                               # %do.body.15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_42 Depth 2
                                        #     Child Loop BB20_15 Depth 2
	movl	$1024, %r8d             # imm = 0x400
	leaq	-4160(%rbp), %rdx
	movb	$0, charset_map_loaded
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %r9d
	movq	-4192(%rbp), %rax
	movl	%r9d, %ecx
	movq	%rax, %r9
	callq	ccl_driver
	testb	$1, charset_map_loaded
	je	.LBB20_9
# BB#7:                                 # %land.lhs.true.18
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -4200(%rbp)
	cmpq	$0, %rax
	je	.LBB20_9
# BB#8:                                 # %if.then.21
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-4200(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB20_9:                               # %if.end.23
                                        #   in Loop: Header=BB20_6 Depth=1
	testb	$1, -17(%rbp)
	je	.LBB20_37
# BB#10:                                # %if.then.25
                                        #   in Loop: Header=BB20_6 Depth=1
	jmp	.LBB20_11
.LBB20_11:                              # %do.body.26
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	80(%rcx), %edx
	shll	$1, %edx
	movslq	%edx, %rcx
	addq	%rcx, %rax
	cmpq	-56(%rbp), %rax
	jb	.LBB20_13
# BB#12:                                # %if.then.32
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-16(%rbp), %rcx
	movl	80(%rcx), %edx
	shll	$1, %edx
	movslq	%edx, %rcx
	addq	%rcx, %rax
	movq	%rax, -4208(%rbp)
	movq	-8(%rbp), %rdi
	movq	-4208(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -56(%rbp)
.LBB20_13:                              # %if.end.44
                                        #   in Loop: Header=BB20_6 Depth=1
	jmp	.LBB20_14
.LBB20_14:                              # %do.end.45
                                        #   in Loop: Header=BB20_6 Depth=1
	movl	$0, -4172(%rbp)
.LBB20_15:                              # %for.cond
                                        #   Parent Loop BB20_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4172(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	80(%rcx), %eax
	jge	.LBB20_36
# BB#16:                                # %for.body
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_17
.LBB20_17:                              # %do.body.49
                                        #   in Loop: Header=BB20_15 Depth=2
	movq	-4168(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -4168(%rbp)
	testb	$1, -17(%rbp)
	je	.LBB20_32
# BB#18:                                # %if.then.51
                                        #   in Loop: Header=BB20_15 Depth=2
	movslq	-4172(%rbp), %rax
	movl	-4160(%rbp,%rax,4), %ecx
	andl	$255, %ecx
	movl	%ecx, -4212(%rbp)
	cmpl	$128, -4212(%rbp)
	jb	.LBB20_20
# BB#19:                                # %if.then.55
                                        #   in Loop: Header=BB20_15 Depth=2
	movl	-4212(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -4212(%rbp)
.LBB20_20:                              # %if.end.57
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_21
.LBB20_21:                              # %do.body.58
                                        #   in Loop: Header=BB20_15 Depth=2
	cmpl	$127, -4212(%rbp)
	ja	.LBB20_23
# BB#22:                                # %if.then.61
                                        #   in Loop: Header=BB20_15 Depth=2
	movl	-4212(%rbp), %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB20_30
.LBB20_23:                              # %if.else
                                        #   in Loop: Header=BB20_15 Depth=2
	cmpl	$2047, -4212(%rbp)      # imm = 0x7FF
	ja	.LBB20_25
# BB#24:                                # %if.then.65
                                        #   in Loop: Header=BB20_15 Depth=2
	movl	-4212(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%cl, (%rdx)
	movl	-4212(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB20_29
.LBB20_25:                              # %if.else.72
                                        #   in Loop: Header=BB20_15 Depth=2
	cmpl	$65535, -4212(%rbp)     # imm = 0xFFFF
	ja	.LBB20_27
# BB#26:                                # %if.then.75
                                        #   in Loop: Header=BB20_15 Depth=2
	movl	-4212(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%cl, (%rdx)
	movl	-4212(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%cl, (%rdx)
	movl	-4212(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB20_28
.LBB20_27:                              # %if.else.89
                                        #   in Loop: Header=BB20_15 Depth=2
	movl	-4212(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	char_string
	movq	-48(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -48(%rbp)
.LBB20_28:                              # %if.end.93
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_29
.LBB20_29:                              # %if.end.94
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_30
.LBB20_30:                              # %if.end.95
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_31
.LBB20_31:                              # %do.end.96
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_33
.LBB20_32:                              # %if.else.97
                                        #   in Loop: Header=BB20_15 Depth=2
	movslq	-4172(%rbp), %rax
	movl	-4160(%rbp,%rax,4), %ecx
	andl	$255, %ecx
	movb	%cl, %dl
	movq	-48(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%dl, (%rax)
.LBB20_33:                              # %if.end.103
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_34
.LBB20_34:                              # %do.end.104
                                        #   in Loop: Header=BB20_15 Depth=2
	jmp	.LBB20_35
.LBB20_35:                              # %for.inc
                                        #   in Loop: Header=BB20_15 Depth=2
	movl	-4172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4172(%rbp)
	jmp	.LBB20_15
.LBB20_36:                              # %for.end
                                        #   in Loop: Header=BB20_6 Depth=1
	jmp	.LBB20_46
.LBB20_37:                              # %if.else.106
                                        #   in Loop: Header=BB20_6 Depth=1
	jmp	.LBB20_38
.LBB20_38:                              # %do.body.107
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	80(%rcx), %rcx
	addq	%rcx, %rax
	cmpq	-56(%rbp), %rax
	jb	.LBB20_40
# BB#39:                                # %if.then.113
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-16(%rbp), %rcx
	movslq	80(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -4224(%rbp)
	movq	-8(%rbp), %rdi
	movq	-4224(%rbp), %rsi
	movq	-48(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -56(%rbp)
.LBB20_40:                              # %if.end.126
                                        #   in Loop: Header=BB20_6 Depth=1
	jmp	.LBB20_41
.LBB20_41:                              # %do.end.127
                                        #   in Loop: Header=BB20_6 Depth=1
	movl	$0, -4172(%rbp)
.LBB20_42:                              # %for.cond.128
                                        #   Parent Loop BB20_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4172(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	80(%rcx), %eax
	jge	.LBB20_45
# BB#43:                                # %for.body.132
                                        #   in Loop: Header=BB20_42 Depth=2
	movslq	-4172(%rbp), %rax
	movl	-4160(%rbp,%rax,4), %ecx
	andl	$255, %ecx
	movb	%cl, %dl
	movq	-48(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -48(%rbp)
	movb	%dl, (%rax)
# BB#44:                                # %for.inc.138
                                        #   in Loop: Header=BB20_42 Depth=2
	movl	-4172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4172(%rbp)
	jmp	.LBB20_42
.LBB20_45:                              # %for.end.140
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-16(%rbp), %rax
	movslq	80(%rax), %rax
	addq	-4168(%rbp), %rax
	movq	%rax, -4168(%rbp)
.LBB20_46:                              # %if.end.144
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-16(%rbp), %rax
	movl	76(%rax), %ecx
	movq	-32(%rbp), %rax
	movslq	%ecx, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$4, 64(%rax)
	je	.LBB20_48
# BB#47:                                # %lor.lhs.false
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$3, 64(%rax)
	jne	.LBB20_49
.LBB20_48:                              # %if.then.152
	jmp	.LBB20_51
.LBB20_49:                              # %if.end.153
                                        #   in Loop: Header=BB20_6 Depth=1
	jmp	.LBB20_50
.LBB20_50:                              # %do.cond
                                        #   in Loop: Header=BB20_6 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jb	.LBB20_6
.LBB20_51:                              # %do.end.156
	movq	-16(%rbp), %rax
	movl	64(%rax), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -4228(%rbp)       # 4-byte Spill
	movl	%edx, -4232(%rbp)       # 4-byte Spill
	je	.LBB20_52
	jmp	.LBB20_57
.LBB20_57:                              # %do.end.156
	movl	-4228(%rbp), %eax       # 4-byte Reload
	subl	$2, %eax
	movl	%eax, -4236(%rbp)       # 4-byte Spill
	je	.LBB20_53
	jmp	.LBB20_58
.LBB20_58:                              # %do.end.156
	movl	-4228(%rbp), %eax       # 4-byte Reload
	addl	$-3, %eax
	subl	$2, %eax
	movl	%eax, -4240(%rbp)       # 4-byte Spill
	jb	.LBB20_54
	jmp	.LBB20_55
.LBB20_52:                              # %sw.bb
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB20_56
.LBB20_53:                              # %sw.bb.158
	movl	$2, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB20_56
.LBB20_54:                              # %sw.bb.159
	movl	$4, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	jmp	.LBB20_56
.LBB20_55:                              # %sw.default
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB20_56:                              # %sw.epilog
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-4168(%rbp), %rdx
	movq	-8(%rbp), %rsi
	addq	392(%rsi), %rdx
	movq	%rdx, 392(%rsi)
	movq	-48(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	496(%rsi), %rsi
	subq	%rsi, %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 384(%rsi)
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$4240, %rsp             # imm = 0x1090
	popq	%rbp
	retq
.Lfunc_end20:
	.size	encode_coding_ccl, .Lfunc_end20-encode_coding_ccl
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_emacs_mule,@function
detect_coding_emacs_mule:               # @detect_coding_emacs_mule
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp63:
	.cfi_def_cfa_offset 16
.Ltmp64:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp65:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -49(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %eax
	orl	$262144, %eax           # imm = 0x40000
	movl	%eax, (%rsi)
	movq	-16(%rbp), %rsi
	movq	360(%rsi), %rsi
	addq	-32(%rbp), %rsi
	movq	%rsi, -32(%rbp)
.LBB21_1:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_17 Depth 2
                                        #       Child Loop BB21_18 Depth 3
                                        #     Child Loop BB21_45 Depth 2
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#2:                                 # %do.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB21_6
# BB#3:                                 # %if.then
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB21_5
# BB#4:                                 # %if.then.4
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB21_5:                               # %if.end
	jmp	.LBB21_66
.LBB21_6:                               # %if.end.5
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -68(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB21_12
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-68(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB21_12
# BB#8:                                 # %if.then.8
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-68(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB21_10
# BB#9:                                 # %if.then.12
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-68(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB21_11
.LBB21_10:                              # %if.else
                                        #   in Loop: Header=BB21_1 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -68(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB21_11:                              # %if.end.18
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_12
.LBB21_12:                              # %if.end.19
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#13:                                # %do.end
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$0, -68(%rbp)
	jge	.LBB21_15
# BB#14:                                # %if.then.22
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_1
.LBB21_15:                              # %if.end.23
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$128, -68(%rbp)
	jne	.LBB21_37
# BB#16:                                # %if.then.26
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_17
.LBB21_17:                              # %repeat
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_18 Depth 3
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
.LBB21_18:                              # %do.body.27
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_17 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	jmp	.LBB21_19
.LBB21_19:                              # %do.body.28
                                        #   in Loop: Header=BB21_18 Depth=3
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB21_23
# BB#20:                                # %if.then.31
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB21_22
# BB#21:                                # %if.then.34
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB21_22:                              # %if.end.35
	jmp	.LBB21_66
.LBB21_23:                              # %if.end.36
                                        #   in Loop: Header=BB21_18 Depth=3
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -68(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB21_29
# BB#24:                                # %land.lhs.true.41
                                        #   in Loop: Header=BB21_18 Depth=3
	movl	-68(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB21_29
# BB#25:                                # %if.then.44
                                        #   in Loop: Header=BB21_18 Depth=3
	movl	-68(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB21_27
# BB#26:                                # %if.then.48
                                        #   in Loop: Header=BB21_18 Depth=3
	movl	-68(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB21_28
.LBB21_27:                              # %if.else.54
                                        #   in Loop: Header=BB21_18 Depth=3
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -68(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB21_28:                              # %if.end.58
                                        #   in Loop: Header=BB21_18 Depth=3
	jmp	.LBB21_29
.LBB21_29:                              # %if.end.59
                                        #   in Loop: Header=BB21_18 Depth=3
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#30:                                # %do.end.61
                                        #   in Loop: Header=BB21_18 Depth=3
	jmp	.LBB21_31
.LBB21_31:                              # %do.cond
                                        #   in Loop: Header=BB21_18 Depth=3
	cmpl	$160, -68(%rbp)
	jge	.LBB21_18
# BB#32:                                # %do.end.64
                                        #   in Loop: Header=BB21_17 Depth=2
	movq	-32(%rbp), %rax
	movq	-80(%rbp), %rcx
	subq	%rcx, %rax
	cmpq	$4, %rax
	jg	.LBB21_34
# BB#33:                                # %if.then.67
	jmp	.LBB21_65
.LBB21_34:                              # %if.end.68
                                        #   in Loop: Header=BB21_17 Depth=2
	movl	$262144, -72(%rbp)      # imm = 0x40000
	cmpl	$128, -68(%rbp)
	jne	.LBB21_36
# BB#35:                                # %if.then.71
                                        #   in Loop: Header=BB21_17 Depth=2
	jmp	.LBB21_17
.LBB21_36:                              # %if.end.72
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_37
.LBB21_37:                              # %if.end.73
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$128, -68(%rbp)
	jge	.LBB21_44
# BB#38:                                # %if.then.76
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$32, -68(%rbp)
	jge	.LBB21_43
# BB#39:                                # %land.lhs.true.79
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$27, -68(%rbp)
	je	.LBB21_42
# BB#40:                                # %lor.lhs.false
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$15, -68(%rbp)
	je	.LBB21_42
# BB#41:                                # %lor.lhs.false.84
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$14, -68(%rbp)
	jne	.LBB21_43
.LBB21_42:                              # %if.then.87
	jmp	.LBB21_65
.LBB21_43:                              # %if.end.88
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_64
.LBB21_44:                              # %if.else.89
                                        #   in Loop: Header=BB21_1 Depth=1
	movslq	-68(%rbp), %rax
	movsbl	emacs_mule_bytes(,%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -84(%rbp)
.LBB21_45:                              # %while.cond.92
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -84(%rbp)
	jle	.LBB21_61
# BB#46:                                # %while.body.95
                                        #   in Loop: Header=BB21_45 Depth=2
	jmp	.LBB21_47
.LBB21_47:                              # %do.body.96
                                        #   in Loop: Header=BB21_45 Depth=2
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB21_51
# BB#48:                                # %if.then.99
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB21_50
# BB#49:                                # %if.then.102
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB21_50:                              # %if.end.103
	jmp	.LBB21_66
.LBB21_51:                              # %if.end.104
                                        #   in Loop: Header=BB21_45 Depth=2
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -68(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB21_57
# BB#52:                                # %land.lhs.true.109
                                        #   in Loop: Header=BB21_45 Depth=2
	movl	-68(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB21_57
# BB#53:                                # %if.then.112
                                        #   in Loop: Header=BB21_45 Depth=2
	movl	-68(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB21_55
# BB#54:                                # %if.then.116
                                        #   in Loop: Header=BB21_45 Depth=2
	movl	-68(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB21_56
.LBB21_55:                              # %if.else.122
                                        #   in Loop: Header=BB21_45 Depth=2
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -68(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB21_56:                              # %if.end.126
                                        #   in Loop: Header=BB21_45 Depth=2
	jmp	.LBB21_57
.LBB21_57:                              # %if.end.127
                                        #   in Loop: Header=BB21_45 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#58:                                # %do.end.130
                                        #   in Loop: Header=BB21_45 Depth=2
	cmpl	$160, -68(%rbp)
	jge	.LBB21_60
# BB#59:                                # %if.then.133
                                        #   in Loop: Header=BB21_1 Depth=1
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB21_61
.LBB21_60:                              # %if.end.135
                                        #   in Loop: Header=BB21_45 Depth=2
	movl	-84(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB21_45
.LBB21_61:                              # %while.end
                                        #   in Loop: Header=BB21_1 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB21_63
# BB#62:                                # %if.then.138
	jmp	.LBB21_65
.LBB21_63:                              # %if.end.139
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$262144, -72(%rbp)      # imm = 0x40000
.LBB21_64:                              # %if.end.140
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_1
.LBB21_65:                              # %while.end.141
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$262144, %ecx           # imm = 0x40000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB21_70
.LBB21_66:                              # %no_more_source
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB21_69
# BB#67:                                # %land.lhs.true.145
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB21_69
# BB#68:                                # %if.then.151
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$262144, %ecx           # imm = 0x40000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB21_70
.LBB21_69:                              # %if.end.154
	movl	-72(%rbp), %eax
	movq	-24(%rbp), %rcx
	orl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
	movb	$1, -1(%rbp)
.LBB21_70:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end21:
	.size	detect_coding_emacs_mule, .Lfunc_end21-detect_coding_emacs_mule
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_emacs_mule,@function
decode_coding_emacs_mule:               # @decode_coding_emacs_mule
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp66:
	.cfi_def_cfa_offset 16
.Ltmp67:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp68:
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rdx
	addq	400(%rdx), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rdx
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	addq	$-60, %rdx
	addq	$-4, %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %sil
	andb	$1, %sil
	movb	%sil, -65(%rbp)
	movq	-8(%rbp), %rdx
	movq	392(%rdx), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movl	charset_ascii, %eax
	movl	%eax, -92(%rbp)
	testb	$1, globals+3389
	movb	%cl, -217(%rbp)         # 1-byte Spill
	jne	.LBB22_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -217(%rbp)         # 1-byte Spill
.LBB22_2:                               # %land.end
	movb	-217(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -93(%rbp)
	movl	$-1, -100(%rbp)
	movq	-8(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -112(%rbp)
	movq	-112(%rbp), %rcx
	cmpl	$0, (%rcx)
	je	.LBB22_10
# BB#3:                                 # %if.then
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-112(%rbp), %rcx
	movslq	12(%rcx), %rcx
	cmpq	%rcx, %rax
	jge	.LBB22_5
# BB#4:                                 # %if.then.18
	callq	emacs_abort
.LBB22_5:                               # %if.end
	movl	$0, -116(%rbp)
.LBB22_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-116(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB22_9
# BB#7:                                 # %for.body
                                        #   in Loop: Header=BB22_6 Depth=1
	movslq	-116(%rbp), %rax
	movq	-112(%rbp), %rcx
	movl	24(%rcx,%rax,4), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
# BB#8:                                 # %for.inc
                                        #   in Loop: Header=BB22_6 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB22_6
.LBB22_9:                               # %for.end
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-8388609, %ecx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %ecx          # imm = 0x800000
	movl	%ecx, 8(%rax)
.LBB22_10:                              # %if.end.24
	jmp	.LBB22_11
.LBB22_11:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB22_15
# BB#12:                                # %if.then.28
	cmpl	$0, -100(%rbp)
	jl	.LBB22_14
# BB#13:                                # %if.then.31
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB22_14:                              # %if.end.33
	jmp	.LBB22_298
.LBB22_15:                              # %if.end.34
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -100(%rbp)
	jl	.LBB22_17
# BB#16:                                # %if.then.37
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	$-1, -100(%rbp)
	jmp	.LBB22_30
.LBB22_17:                              # %if.else
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_18
.LBB22_18:                              # %do.body
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_22
# BB#19:                                # %if.then.40
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_21
# BB#20:                                # %if.then.43
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_21:                              # %if.end.44
	jmp	.LBB22_299
.LBB22_22:                              # %if.end.45
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_28
# BB#23:                                # %land.lhs.true
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_28
# BB#24:                                # %if.then.51
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_26
# BB#25:                                # %if.then.55
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_27
.LBB22_26:                              # %if.else.59
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_27:                              # %if.end.62
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_28
.LBB22_28:                              # %if.end.63
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#29:                                # %do.end
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_30
.LBB22_30:                              # %if.end.65
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jl	.LBB22_32
# BB#31:                                # %lor.lhs.false
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$128, -120(%rbp)
	jne	.LBB22_123
.LBB22_32:                              # %if.then.70
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_33
.LBB22_33:                              # %do.body.71
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_35
# BB#34:                                # %if.then.75
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_35:                              # %if.end.78
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_36
.LBB22_36:                              # %do.end.79
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB22_38
# BB#37:                                # %if.then.82
                                        #   in Loop: Header=BB22_11 Depth=1
	xorl	%eax, %eax
	subl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	jmp	.LBB22_122
.LBB22_38:                              # %if.else.86
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_39
.LBB22_39:                              # %do.body.87
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -136(%rbp)
# BB#40:                                # %do.body.88
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_44
# BB#41:                                # %if.then.91
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_43
# BB#42:                                # %if.then.94
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_43:                              # %if.end.95
	jmp	.LBB22_299
.LBB22_44:                              # %if.end.96
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_50
# BB#45:                                # %land.lhs.true.101
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_50
# BB#46:                                # %if.then.104
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_48
# BB#47:                                # %if.then.108
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_49
.LBB22_48:                              # %if.else.114
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_49:                              # %if.end.118
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_50
.LBB22_50:                              # %if.end.119
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#51:                                # %do.end.121
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB22_53
# BB#52:                                # %if.then.124
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_53:                              # %if.end.125
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$242, %eax
	cmpl	$0, %eax
	jl	.LBB22_98
# BB#54:                                # %land.lhs.true.129
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$242, %eax
	cmpl	$3, %eax
	jg	.LBB22_98
# BB#55:                                # %if.then.133
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_56
.LBB22_56:                              # %do.body.134
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$242, %eax
	movl	%eax, -140(%rbp)
# BB#57:                                # %do.body.136
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_61
# BB#58:                                # %if.then.139
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_60
# BB#59:                                # %if.then.142
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_60:                              # %if.end.143
	jmp	.LBB22_299
.LBB22_61:                              # %if.end.144
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_67
# BB#62:                                # %land.lhs.true.149
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_67
# BB#63:                                # %if.then.152
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_65
# BB#64:                                # %if.then.156
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_66
.LBB22_65:                              # %if.else.162
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_66:                              # %if.end.166
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_67
.LBB22_67:                              # %if.end.167
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#68:                                # %do.end.169
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB22_70
# BB#69:                                # %if.then.172
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_70:                              # %if.end.173
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$160, %eax
	movl	%eax, -144(%rbp)
	cmpl	$3, -144(%rbp)
	jl	.LBB22_73
# BB#71:                                # %lor.lhs.false.177
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -140(%rbp)
	jne	.LBB22_74
# BB#72:                                # %land.lhs.true.180
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$4, -144(%rbp)
	je	.LBB22_74
.LBB22_73:                              # %if.then.183
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_74:                              # %if.end.184
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_75
.LBB22_75:                              # %do.body.185
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_79
# BB#76:                                # %if.then.188
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_78
# BB#77:                                # %if.then.191
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_78:                              # %if.end.192
	jmp	.LBB22_299
.LBB22_79:                              # %if.end.193
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_85
# BB#80:                                # %land.lhs.true.198
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_85
# BB#81:                                # %if.then.201
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_83
# BB#82:                                # %if.then.205
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_84
.LBB22_83:                              # %if.else.211
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_84:                              # %if.end.215
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_85
.LBB22_85:                              # %if.end.216
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#86:                                # %do.end.218
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$160, %eax
	movl	%eax, -148(%rbp)
	cmpl	$0, -148(%rbp)
	jle	.LBB22_88
# BB#87:                                # %lor.lhs.false.222
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$16, -148(%rbp)
	jl	.LBB22_89
.LBB22_88:                              # %if.then.225
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_89:                              # %if.end.226
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movb	$0, 8(%rax)
	movl	-140(%rbp), %ecx
	movq	-112(%rbp), %rax
	movl	%ecx, 4(%rax)
	cmpl	$0, -140(%rbp)
	jne	.LBB22_91
# BB#90:                                # %if.then.230
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB22_92
.LBB22_91:                              # %if.else.232
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$3, (%rax)
.LBB22_92:                              # %if.end.234
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$5, 12(%rax)
	movl	-148(%rbp), %ecx
	movq	-112(%rbp), %rax
	movl	%ecx, 16(%rax)
	movl	-144(%rbp), %ecx
	subl	$4, %ecx
	movq	-112(%rbp), %rax
	movl	%ecx, 20(%rax)
# BB#93:                                # %do.body.238
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_94
.LBB22_94:                              # %do.body.239
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-5, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$1, (%rax)
	movl	-148(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#95:                                # %do.end.247
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-144(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movl	-140(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#96:                                # %do.end.250
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_97
.LBB22_97:                              # %do.end.251
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_120
.LBB22_98:                              # %if.else.252
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$160, -120(%rbp)
	jge	.LBB22_100
# BB#99:                                # %if.then.255
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_100:                             # %if.else.256
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$192, -120(%rbp)
	jge	.LBB22_108
# BB#101:                               # %if.then.259
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_102
.LBB22_102:                             # %do.body.260
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movb	$1, 8(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-112(%rbp), %rax
	movl	$1, (%rax)
	movq	-112(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 16(%rax)
# BB#103:                               # %do.body.267
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_104
.LBB22_104:                             # %do.body.268
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-5, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$1, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#105:                               # %do.end.276
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, (%rax)
	movq	-112(%rbp), %rax
	movl	4(%rax), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
# BB#106:                               # %do.end.280
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_107
.LBB22_107:                             # %do.end.281
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-136(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB22_118
.LBB22_108:                             # %if.else.282
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$255, -120(%rbp)
	jne	.LBB22_116
# BB#109:                               # %if.then.285
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_110
.LBB22_110:                             # %do.body.286
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movb	$1, 8(%rax)
	movq	-112(%rbp), %rax
	movl	$1, 4(%rax)
	movq	-112(%rbp), %rax
	movl	$1, (%rax)
	movq	-112(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-112(%rbp), %rax
	movl	$0, 16(%rax)
# BB#111:                               # %do.body.293
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_112
.LBB22_112:                             # %do.body.294
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-5, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$1, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#113:                               # %do.end.302
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, (%rax)
	movq	-112(%rbp), %rax
	movl	4(%rax), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
# BB#114:                               # %do.end.306
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_115
.LBB22_115:                             # %do.end.307
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_117
.LBB22_116:                             # %if.else.308
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_117:                             # %if.end.309
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_118
.LBB22_118:                             # %if.end.310
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_119
.LBB22_119:                             # %if.end.311
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_120
.LBB22_120:                             # %if.end.312
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_121
.LBB22_121:                             # %do.end.313
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_122
.LBB22_122:                             # %if.end.314
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_11
.LBB22_123:                             # %if.end.315
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$128, -120(%rbp)
	jge	.LBB22_151
# BB#124:                               # %if.then.318
                                        #   in Loop: Header=BB22_11 Depth=1
	testb	$1, -93(%rbp)
	je	.LBB22_139
# BB#125:                               # %land.lhs.true.321
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$13, -120(%rbp)
	jne	.LBB22_139
# BB#126:                               # %if.then.324
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_127
.LBB22_127:                             # %do.body.325
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_131
# BB#128:                               # %if.then.328
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_130
# BB#129:                               # %if.then.331
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_130:                             # %if.end.332
	jmp	.LBB22_299
.LBB22_131:                             # %if.end.333
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -100(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_137
# BB#132:                               # %land.lhs.true.338
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-100(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_137
# BB#133:                               # %if.then.341
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-100(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_135
# BB#134:                               # %if.then.345
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-100(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB22_136
.LBB22_135:                             # %if.else.351
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -100(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_136:                             # %if.end.355
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_137
.LBB22_137:                             # %if.end.356
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#138:                               # %do.end.358
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_139
.LBB22_139:                             # %if.end.359
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	charset_ascii, %eax
	movl	%eax, -124(%rbp)
	movq	-112(%rbp), %rcx
	cmpl	$0, (%rcx)
	je	.LBB22_150
# BB#140:                               # %if.then.363
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	testb	$1, 8(%rax)
	je	.LBB22_146
# BB#141:                               # %if.then.366
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_142
.LBB22_142:                             # %do.body.367
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_144
# BB#143:                               # %if.then.371
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_144:                             # %if.end.375
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_145
.LBB22_145:                             # %do.end.376
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_149
.LBB22_146:                             # %if.else.377
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, (%rax)
	jb	.LBB22_148
# BB#147:                               # %if.then.381
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 20(%rax)
.LBB22_148:                             # %if.end.383
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_149
.LBB22_149:                             # %if.end.384
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_150
.LBB22_150:                             # %if.end.385
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_162
.LBB22_151:                             # %if.else.386
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-156(%rbp), %rdx
	leaq	-152(%rbp), %rcx
	leaq	-124(%rbp), %r8
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-112(%rbp), %r9
	callq	emacs_mule_char
	movl	%eax, -120(%rbp)
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	movq	-168(%rbp), %rdx
	subq	%rdx, %rcx
	movq	%rcx, -176(%rbp)
	cmpq	$0, -176(%rbp)
	je	.LBB22_153
# BB#152:                               # %if.then.396
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-176(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-176(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-176(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB22_153:                             # %if.end.400
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jge	.LBB22_159
# BB#154:                               # %if.then.403
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$-1, -120(%rbp)
	jne	.LBB22_156
# BB#155:                               # %if.then.406
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_156:                             # %if.end.407
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$-2, -120(%rbp)
	jne	.LBB22_158
# BB#157:                               # %if.then.410
	jmp	.LBB22_298
.LBB22_158:                             # %if.end.411
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_159
.LBB22_159:                             # %if.end.412
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-32(%rbp), %rax
	movslq	-156(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movslq	-152(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-112(%rbp), %rax
	cmpl	$3, (%rax)
	jb	.LBB22_161
# BB#160:                               # %if.then.420
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-152(%rbp), %eax
	movq	-112(%rbp), %rcx
	movl	20(%rcx), %edx
	subl	%eax, %edx
	movl	%edx, 20(%rcx)
.LBB22_161:                             # %if.end.423
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_162
.LBB22_162:                             # %if.end.424
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB22_172
# BB#163:                               # %if.then.428
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-124(%rbp), %eax
	je	.LBB22_171
# BB#164:                               # %if.then.431
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-92(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB22_170
# BB#165:                               # %if.then.434
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_166
.LBB22_166:                             # %do.body.435
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_167
.LBB22_167:                             # %do.body.436
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-80(%rbp), %rax
	subq	-88(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#168:                               # %do.end.446
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-92(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#169:                               # %do.end.448
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_170
.LBB22_170:                             # %if.end.449
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-124(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rcx
	movq	%rcx, -88(%rbp)
.LBB22_171:                             # %if.end.450
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	jmp	.LBB22_275
.LBB22_172:                             # %if.else.453
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB22_205
# BB#173:                               # %if.then.457
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	testb	$1, 8(%rax)
	je	.LBB22_194
# BB#174:                               # %if.then.460
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jl	.LBB22_180
# BB#175:                               # %if.then.463
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_176
.LBB22_176:                             # %do.body.464
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_178
# BB#177:                               # %if.then.468
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_178:                             # %if.end.472
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_179
.LBB22_179:                             # %do.end.473
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	jmp	.LBB22_193
.LBB22_180:                             # %if.else.476
                                        #   in Loop: Header=BB22_11 Depth=1
	xorl	%eax, %eax
	subl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rcx
	movl	16(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 16(%rcx)
	movq	-112(%rbp), %rcx
	movl	12(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 12(%rcx)
	movq	-112(%rbp), %rcx
	cmpl	$16, 16(%rcx)
	jne	.LBB22_189
# BB#181:                               # %if.then.486
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_182
.LBB22_182:                             # %do.body.487
                                        #   in Loop: Header=BB22_11 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, -180(%rbp)
	movq	-112(%rbp), %rcx
	testb	$1, 8(%rcx)
	je	.LBB22_184
# BB#183:                               # %if.then.492
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	16(%rax), %ecx
	movl	-180(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rax
	movq	-40(%rbp), %rsi
	movl	%ecx, (%rsi,%rax,4)
	jmp	.LBB22_187
.LBB22_184:                             # %if.else.497
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 4(%rax)
	jbe	.LBB22_186
# BB#185:                               # %if.then.501
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-180(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx,%rcx,4), %eax
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movslq	-180(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_186:                             # %if.end.509
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_187
.LBB22_187:                             # %if.end.510
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$0, (%rax)
# BB#188:                               # %do.end.512
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_192
.LBB22_189:                             # %if.else.513
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB22_191
# BB#190:                               # %if.then.517
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$2, (%rax)
.LBB22_191:                             # %if.end.519
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_192
.LBB22_192:                             # %if.end.520
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_193
.LBB22_193:                             # %if.end.521
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_204
.LBB22_194:                             # %if.else.522
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rcx
	movl	12(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 12(%rcx)
	movq	-112(%rbp), %rcx
	movl	16(%rcx), %eax
	addl	$-1, %eax
	movl	%eax, 16(%rcx)
	movq	-112(%rbp), %rcx
	cmpl	$0, 16(%rcx)
	jne	.LBB22_203
# BB#195:                               # %if.then.531
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_196
.LBB22_196:                             # %do.body.532
                                        #   in Loop: Header=BB22_11 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, -184(%rbp)
	movq	-112(%rbp), %rcx
	testb	$1, 8(%rcx)
	je	.LBB22_198
# BB#197:                               # %if.then.538
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	16(%rax), %ecx
	movl	-184(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rax
	movq	-40(%rbp), %rsi
	movl	%ecx, (%rsi,%rax,4)
	jmp	.LBB22_201
.LBB22_198:                             # %if.else.543
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 4(%rax)
	jbe	.LBB22_200
# BB#199:                               # %if.then.547
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-184(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx,%rcx,4), %eax
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movslq	-184(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_200:                             # %if.end.555
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_201
.LBB22_201:                             # %if.end.556
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$0, (%rax)
# BB#202:                               # %do.end.558
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_203
.LBB22_203:                             # %if.end.559
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_204
.LBB22_204:                             # %if.end.560
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_274
.LBB22_205:                             # %if.else.561
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB22_228
# BB#206:                               # %if.then.565
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -120(%rbp)
	jl	.LBB22_215
# BB#207:                               # %if.then.568
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_208
.LBB22_208:                             # %do.body.569
                                        #   in Loop: Header=BB22_11 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, -192(%rbp)
	movq	-112(%rbp), %rcx
	testb	$1, 8(%rcx)
	je	.LBB22_210
# BB#209:                               # %if.then.575
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	16(%rax), %ecx
	movl	-192(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rax
	movq	-40(%rbp), %rsi
	movl	%ecx, (%rsi,%rax,4)
	jmp	.LBB22_213
.LBB22_210:                             # %if.else.580
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 4(%rax)
	jbe	.LBB22_212
# BB#211:                               # %if.then.584
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-192(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx,%rcx,4), %eax
	movq	-112(%rbp), %rcx
	subl	12(%rcx), %eax
	movslq	-192(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
.LBB22_212:                             # %if.end.592
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_213
.LBB22_213:                             # %if.end.593
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$0, (%rax)
# BB#214:                               # %do.end.595
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	jmp	.LBB22_227
.LBB22_215:                             # %if.else.598
                                        #   in Loop: Header=BB22_11 Depth=1
	xorl	%eax, %eax
	subl	-120(%rbp), %eax
	movl	%eax, -120(%rbp)
# BB#216:                               # %do.body.600
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$160, %eax
	movl	%eax, -120(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB22_218
# BB#217:                               # %lor.lhs.false.604
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$81, -120(%rbp)
	jl	.LBB22_219
.LBB22_218:                             # %if.then.607
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_219:                             # %if.end.608
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	$9, %eax
	movl	-120(%rbp), %ecx
	movl	%eax, -236(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-236(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%edx, -200(%rbp)
	cmpl	$4, -196(%rbp)
	jne	.LBB22_221
# BB#220:                               # %if.then.611
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	$10, -196(%rbp)
.LBB22_221:                             # %if.end.612
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$4, -200(%rbp)
	jne	.LBB22_223
# BB#222:                               # %if.then.615
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	$10, -200(%rbp)
.LBB22_223:                             # %if.end.616
                                        #   in Loop: Header=BB22_11 Depth=1
	imull	$12, -196(%rbp), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -188(%rbp)
# BB#224:                               # %do.end.618
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -188(%rbp)
	jge	.LBB22_226
# BB#225:                               # %if.then.621
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_226:                             # %if.end.622
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-2, (%rax)
	movl	-188(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-112(%rbp), %rax
	movl	12(%rax), %edx
	addl	$2, %edx
	movl	%edx, 12(%rax)
	movq	-112(%rbp), %rax
	movl	$1, (%rax)
.LBB22_227:                             # %if.end.628
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_273
.LBB22_228:                             # %if.else.629
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB22_242
# BB#229:                               # %if.then.633
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-112(%rbp), %rcx
	movl	12(%rcx), %eax
	addl	$1, %eax
	movl	%eax, 12(%rcx)
	movq	-112(%rbp), %rcx
	cmpl	$0, 20(%rcx)
	jne	.LBB22_231
# BB#230:                               # %if.then.640
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB22_241
.LBB22_231:                             # %if.else.642
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 20(%rax)
	jle	.LBB22_235
# BB#232:                               # %if.then.646
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB22_234
# BB#233:                               # %if.then.650
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$4, (%rax)
.LBB22_234:                             # %if.end.652
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_240
.LBB22_235:                             # %if.else.653
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_236
.LBB22_236:                             # %do.body.654
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_238
# BB#237:                               # %if.then.658
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_238:                             # %if.end.662
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_239
.LBB22_239:                             # %do.end.663
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_240
.LBB22_240:                             # %if.end.664
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_241
.LBB22_241:                             # %if.end.665
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_272
.LBB22_242:                             # %if.else.666
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_243
.LBB22_243:                             # %do.body.668
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$32, %eax
	movl	%eax, -208(%rbp)
	cmpl	$0, -208(%rbp)
	jl	.LBB22_245
# BB#244:                               # %lor.lhs.false.674
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$81, -208(%rbp)
	jl	.LBB22_246
.LBB22_245:                             # %if.then.677
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_246:                             # %if.end.678
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_247
.LBB22_247:                             # %do.body.679
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_251
# BB#248:                               # %if.then.682
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_250
# BB#249:                               # %if.then.685
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_250:                             # %if.end.686
	jmp	.LBB22_299
.LBB22_251:                             # %if.end.687
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_257
# BB#252:                               # %land.lhs.true.692
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_257
# BB#253:                               # %if.then.695
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_255
# BB#254:                               # %if.then.699
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_256
.LBB22_255:                             # %if.else.705
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_256:                             # %if.end.709
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_257
.LBB22_257:                             # %if.end.710
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#258:                               # %do.end.712
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	subl	$32, %eax
	movl	%eax, -212(%rbp)
	cmpl	$0, -212(%rbp)
	jl	.LBB22_260
# BB#259:                               # %lor.lhs.false.716
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$81, -212(%rbp)
	jl	.LBB22_261
.LBB22_260:                             # %if.then.719
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_261:                             # %if.end.720
                                        #   in Loop: Header=BB22_11 Depth=1
	imull	$12, -208(%rbp), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -204(%rbp)
# BB#262:                               # %do.end.723
                                        #   in Loop: Header=BB22_11 Depth=1
	cmpl	$0, -204(%rbp)
	jge	.LBB22_264
# BB#263:                               # %if.then.726
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_276
.LBB22_264:                             # %if.end.727
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-2, (%rax)
	movl	-204(%rbp), %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-112(%rbp), %rax
	movl	12(%rax), %edx
	addl	$2, %edx
	movl	%edx, 12(%rax)
	movq	-112(%rbp), %rax
	movl	20(%rax), %edx
	addl	$-1, %edx
	movl	%edx, 20(%rax)
	movq	-112(%rbp), %rax
	cmpl	$0, 20(%rax)
	jle	.LBB22_266
# BB#265:                               # %if.then.737
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	movl	$3, (%rax)
	jmp	.LBB22_271
.LBB22_266:                             # %if.else.739
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_267
.LBB22_267:                             # %do.body.740
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_269
# BB#268:                               # %if.then.744
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_269:                             # %if.end.748
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_270
.LBB22_270:                             # %do.end.749
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_271
.LBB22_271:                             # %if.end.750
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_272
.LBB22_272:                             # %if.end.751
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_273
.LBB22_273:                             # %if.end.752
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_274
.LBB22_274:                             # %if.end.753
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_275
.LBB22_275:                             # %if.end.754
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_11
.LBB22_276:                             # %invalid_code
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_277
.LBB22_277:                             # %do.body.755
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_279
# BB#278:                               # %if.then.759
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_279:                             # %if.end.763
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_280
.LBB22_280:                             # %do.end.764
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
# BB#281:                               # %do.body.765
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB22_285
# BB#282:                               # %if.then.768
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB22_284
# BB#283:                               # %if.then.771
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_284:                             # %if.end.772
	jmp	.LBB22_299
.LBB22_285:                             # %if.end.773
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -120(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB22_291
# BB#286:                               # %land.lhs.true.778
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB22_291
# BB#287:                               # %if.then.781
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB22_289
# BB#288:                               # %if.then.785
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_290
.LBB22_289:                             # %if.else.791
                                        #   in Loop: Header=BB22_11 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -120(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB22_290:                             # %if.end.795
                                        #   in Loop: Header=BB22_11 Depth=1
	jmp	.LBB22_291
.LBB22_291:                             # %if.end.796
                                        #   in Loop: Header=BB22_11 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#292:                               # %do.end.798
                                        #   in Loop: Header=BB22_11 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB22_293
	jmp	.LBB22_294
.LBB22_293:                             # %cond.true
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB22_295
	jmp	.LBB22_296
.LBB22_294:                             # %cond.false
                                        #   in Loop: Header=BB22_11 Depth=1
	movslq	-120(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB22_296
.LBB22_295:                             # %cond.true.806
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	movl	%eax, -240(%rbp)        # 4-byte Spill
	jmp	.LBB22_297
.LBB22_296:                             # %cond.false.807
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-120(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -240(%rbp)        # 4-byte Spill
.LBB22_297:                             # %cond.end
                                        #   in Loop: Header=BB22_11 Depth=1
	movl	-240(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	jmp	.LBB22_11
.LBB22_298:                             # %while.end
	jmp	.LBB22_299
.LBB22_299:                             # %no_more_source
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_312
# BB#300:                               # %if.then.814
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB22_306
# BB#301:                               # %if.then.820
	jmp	.LBB22_302
.LBB22_302:                             # %do.body.821
	movq	-112(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB22_304
# BB#303:                               # %if.then.825
	movq	-40(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	emacs_mule_finish_composition
	movslq	%eax, %rsi
	addq	-80(%rbp), %rsi
	movq	%rsi, -80(%rbp)
.LBB22_304:                             # %if.end.829
	jmp	.LBB22_305
.LBB22_305:                             # %do.end.830
	jmp	.LBB22_311
.LBB22_306:                             # %if.else.831
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-112(%rbp), %rdx
	movl	12(%rdx), %eax
	movq	-40(%rbp), %rdx
	movslq	%eax, %rsi
	subq	%rsi, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -40(%rbp)
	movl	$0, -216(%rbp)
.LBB22_307:                             # %for.cond.836
                                        # =>This Inner Loop Header: Depth=1
	movl	-216(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jge	.LBB22_310
# BB#308:                               # %for.body.840
                                        #   in Loop: Header=BB22_307 Depth=1
	movslq	-216(%rbp), %rax
	movq	-40(%rbp), %rcx
	movl	(%rcx,%rax,4), %edx
	movslq	-216(%rbp), %rax
	movq	-112(%rbp), %rcx
	movl	%edx, 24(%rcx,%rax,4)
# BB#309:                               # %for.inc.846
                                        #   in Loop: Header=BB22_307 Depth=1
	movl	-216(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB22_307
.LBB22_310:                             # %for.end.848
	jmp	.LBB22_311
.LBB22_311:                             # %if.end.849
	jmp	.LBB22_312
.LBB22_312:                             # %if.end.850
	movl	-92(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB22_318
# BB#313:                               # %if.then.853
	jmp	.LBB22_314
.LBB22_314:                             # %do.body.854
	jmp	.LBB22_315
.LBB22_315:                             # %do.body.855
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-80(%rbp), %rax
	subq	-88(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#316:                               # %do.end.865
	movl	-92(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#317:                               # %do.end.867
	jmp	.LBB22_318
.LBB22_318:                             # %if.end.868
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$240, %rsp
	popq	%rbp
	retq
.Lfunc_end22:
	.size	decode_coding_emacs_mule, .Lfunc_end22-decode_coding_emacs_mule
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_emacs_mule,@function
encode_coding_emacs_mule:               # @encode_coding_emacs_mule
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp69:
	.cfi_def_cfa_offset 16
.Ltmp70:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp71:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movl	$8, -52(%rbp)
	movq	$0, -64(%rbp)
	movl	$-1, -88(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, -80(%rbp)
# BB#2:                                 # %do.end
	movq	-80(%rbp), %rax
	cmpq	Vemacs_mule_charset_list, %rax
	je	.LBB23_4
# BB#3:                                 # %if.then
	movl	$4, %eax
	movl	%eax, %esi
	movq	Vemacs_mule_charset_list, %rcx
	movq	%rcx, -80(%rbp)
	movq	-72(%rbp), %rdi
	movq	-80(%rbp), %rdx
	callq	ASET
.LBB23_4:                               # %if.end
	jmp	.LBB23_5
.LBB23_5:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB23_249
# BB#6:                                 # %while.body
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_7
.LBB23_7:                               # %do.body.9
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB23_9
# BB#8:                                 # %if.then.13
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-8(%rbp), %rdi
	movq	-96(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB23_9:                               # %if.end.18
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_10
.LBB23_10:                              # %do.end.19
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -24(%rbp)
	movl	(%rax), %edx
	movl	%edx, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB23_19
# BB#11:                                # %if.then.22
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-24(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -184(%rbp)        # 4-byte Spill
	movl	%edx, -188(%rbp)        # 4-byte Spill
	je	.LBB23_12
	jmp	.LBB23_250
.LBB23_250:                             # %if.then.22
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-184(%rbp), %eax        # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -192(%rbp)        # 4-byte Spill
	je	.LBB23_13
	jmp	.LBB23_17
.LBB23_12:                              # %sw.bb
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_18
.LBB23_13:                              # %sw.bb.23
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %ecx
	movl	%ecx, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jl	.LBB23_16
# BB#14:                                # %land.lhs.true
                                        #   in Loop: Header=BB23_5 Depth=1
	movslq	-88(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-80(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fmemq
	xorl	%edi, %edi
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB23_16
# BB#15:                                # %if.then.32
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	$-1, -88(%rbp)
.LBB23_16:                              # %if.end.33
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_18
.LBB23_17:                              # %sw.default
	callq	emacs_abort
.LBB23_18:                              # %sw.epilog
                                        #   in Loop: Header=BB23_5 Depth=1
	xorl	%eax, %eax
	subl	-84(%rbp), %eax
	subl	$1, %eax
	movq	-24(%rbp), %rcx
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	jmp	.LBB23_5
.LBB23_19:                              # %if.end.37
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB23_20
	jmp	.LBB23_21
.LBB23_20:                              # %cond.true
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB23_22
	jmp	.LBB23_25
.LBB23_21:                              # %cond.false
                                        #   in Loop: Header=BB23_5 Depth=1
	movslq	-84(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB23_25
.LBB23_22:                              # %if.then.45
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_23
.LBB23_23:                              # %do.body.46
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-84(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#24:                                # %do.end.49
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_248
.LBB23_25:                              # %if.else
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$4194175, -84(%rbp)     # imm = 0x3FFF7F
	jle	.LBB23_48
# BB#26:                                # %if.then.52
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$4194175, -84(%rbp)     # imm = 0x3FFF7F
	jle	.LBB23_28
# BB#27:                                # %cond.true.55
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB23_29
.LBB23_28:                              # %cond.false.57
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -204(%rbp)        # 4-byte Spill
.LBB23_29:                              # %cond.end
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-204(%rbp), %eax        # 4-byte Reload
	movl	%eax, -84(%rbp)
# BB#30:                                # %do.body.58
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB23_45
# BB#31:                                # %if.then.60
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -100(%rbp)
	cmpl	$128, -100(%rbp)
	jb	.LBB23_33
# BB#32:                                # %if.then.63
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-100(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -100(%rbp)
.LBB23_33:                              # %if.end.65
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_34
.LBB23_34:                              # %do.body.66
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$127, -100(%rbp)
	ja	.LBB23_36
# BB#35:                                # %if.then.69
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-100(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_43
.LBB23_36:                              # %if.else.72
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$2047, -100(%rbp)       # imm = 0x7FF
	ja	.LBB23_38
# BB#37:                                # %if.then.75
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-100(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_42
.LBB23_38:                              # %if.else.82
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65535, -100(%rbp)      # imm = 0xFFFF
	ja	.LBB23_40
# BB#39:                                # %if.then.85
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-100(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_41
.LBB23_40:                              # %if.else.99
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-100(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB23_41:                              # %if.end.103
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_42
.LBB23_42:                              # %if.end.104
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_43
.LBB23_43:                              # %if.end.105
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_44
.LBB23_44:                              # %do.end.106
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_46
.LBB23_45:                              # %if.else.107
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB23_46:                              # %if.end.110
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_47
.LBB23_47:                              # %do.end.111
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_247
.LBB23_48:                              # %if.else.112
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB23_118
# BB#49:                                # %if.then.115
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	charset_table, %rax
	movslq	-88(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
# BB#50:                                # %do.body.118
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB23_51
	jmp	.LBB23_52
.LBB23_51:                              # %cond.true.119
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB23_53
	jmp	.LBB23_54
.LBB23_52:                              # %cond.false.123
                                        #   in Loop: Header=BB23_5 Depth=1
	movslq	-84(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB23_54
.LBB23_53:                              # %land.lhs.true.128
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$1, %al
	movq	-112(%rbp), %rcx
	movb	88(%rcx), %dl
	shrb	$2, %dl
	andb	$1, %dl
	testb	$1, %dl
	movb	%al, -205(%rbp)         # 1-byte Spill
	jne	.LBB23_74
.LBB23_54:                              # %lor.rhs
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB23_57
# BB#55:                                # %lor.lhs.false
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$2, 104(%rax)
	je	.LBB23_57
# BB#56:                                # %lor.lhs.false.141
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, 104(%rax)
	jne	.LBB23_58
.LBB23_57:                              # %cond.true.145
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	encode_char
	movq	-112(%rbp), %rdi
	cmpl	128(%rdi), %eax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB23_73
.LBB23_58:                              # %cond.false.149
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65536, -84(%rbp)       # imm = 0x10000
	jge	.LBB23_60
# BB#59:                                # %cond.true.152
                                        #   in Loop: Header=BB23_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	$1, %eax
	movl	-84(%rbp), %edx
	sarl	$10, %edx
	movslq	%edx, %rsi
	movq	-112(%rbp), %rdi
	movzbl	132(%rdi,%rsi), %edx
	movl	-84(%rbp), %r8d
	sarl	$7, %r8d
	andl	$7, %r8d
	movb	%cl, -213(%rbp)         # 1-byte Spill
	movl	%r8d, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	movb	-213(%rbp), %cl         # 1-byte Reload
	movb	%cl, -214(%rbp)         # 1-byte Spill
	jne	.LBB23_61
	jmp	.LBB23_72
.LBB23_60:                              # %cond.false.161
                                        #   in Loop: Header=BB23_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	$1, %eax
	movl	-84(%rbp), %edx
	sarl	$15, %edx
	addl	$62, %edx
	movslq	%edx, %rsi
	movq	-112(%rbp), %rdi
	movzbl	132(%rdi,%rsi), %edx
	movl	-84(%rbp), %r8d
	sarl	$12, %r8d
	andl	$7, %r8d
	movb	%cl, -215(%rbp)         # 1-byte Spill
	movl	%r8d, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	movb	-215(%rbp), %cl         # 1-byte Reload
	movb	%cl, -214(%rbp)         # 1-byte Spill
	je	.LBB23_72
.LBB23_61:                              # %land.rhs
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB23_65
# BB#62:                                # %cond.true.176
                                        #   in Loop: Header=BB23_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rdx
	cmpl	120(%rdx), %eax
	movb	%cl, -216(%rbp)         # 1-byte Spill
	jl	.LBB23_64
# BB#63:                                # %land.rhs.179
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	124(%rcx), %eax
	setle	%dl
	movb	%dl, -216(%rbp)         # 1-byte Spill
.LBB23_64:                              # %land.end
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	-216(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -220(%rbp)        # 4-byte Spill
	jmp	.LBB23_71
.LBB23_65:                              # %cond.false.182
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB23_69
# BB#66:                                # %land.lhs.true.186
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB23_69
# BB#67:                                # %land.lhs.true.192
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-112(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB23_68
	jmp	.LBB23_69
.LBB23_68:                              # %cond.true.198
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-112(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-84(%rbp), %esi
	movq	%rax, %rdi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	sete	%r8b
	xorb	$-1, %r8b
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	movl	%ecx, -236(%rbp)        # 4-byte Spill
	jmp	.LBB23_70
.LBB23_69:                              # %cond.false.207
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	encode_char
	movq	-112(%rbp), %rdi
	cmpl	128(%rdi), %eax
	setne	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -236(%rbp)        # 4-byte Spill
.LBB23_70:                              # %cond.end.212
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-236(%rbp), %eax        # 4-byte Reload
	movl	%eax, -220(%rbp)        # 4-byte Spill
.LBB23_71:                              # %cond.end.214
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-220(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	movb	%cl, -214(%rbp)         # 1-byte Spill
.LBB23_72:                              # %land.end.217
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	-214(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
.LBB23_73:                              # %cond.end.219
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-212(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setne	%cl
	movb	%cl, -205(%rbp)         # 1-byte Spill
.LBB23_74:                              # %lor.end
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	-205(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -127(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB23_77
# BB#75:                                # %land.lhs.true.225
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -136(%rbp)
	cmpq	$0, %rax
	je	.LBB23_77
# BB#76:                                # %if.then.228
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-136(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-136(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB23_77:                              # %if.end.231
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_78
.LBB23_78:                              # %do.end.232
                                        #   in Loop: Header=BB23_5 Depth=1
	testb	$1, -127(%rbp)
	je	.LBB23_111
# BB#79:                                # %if.then.234
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB23_80
	jmp	.LBB23_81
.LBB23_80:                              # %cond.true.235
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB23_82
	jmp	.LBB23_84
.LBB23_81:                              # %cond.false.239
                                        #   in Loop: Header=BB23_5 Depth=1
	movslq	-84(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB23_84
.LBB23_82:                              # %land.lhs.true.244
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB23_84
# BB#83:                                # %cond.true.251
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -240(%rbp)        # 4-byte Spill
	jmp	.LBB23_110
.LBB23_84:                              # %cond.false.252
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB23_87
# BB#85:                                # %lor.lhs.false.259
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$2, 104(%rax)
	je	.LBB23_87
# BB#86:                                # %lor.lhs.false.263
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$3, 104(%rax)
	jne	.LBB23_88
.LBB23_87:                              # %cond.true.267
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	encode_char
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB23_109
.LBB23_88:                              # %cond.false.269
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	120(%rcx), %eax
	jl	.LBB23_90
# BB#89:                                # %lor.lhs.false.273
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	cmpl	124(%rcx), %eax
	jle	.LBB23_91
.LBB23_90:                              # %cond.true.277
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -248(%rbp)        # 4-byte Spill
	jmp	.LBB23_108
.LBB23_91:                              # %cond.false.279
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB23_96
# BB#92:                                # %cond.true.283
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB23_94
# BB#93:                                # %cond.true.288
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	subl	324(%rcx), %eax
	movq	-112(%rbp), %rcx
	addl	108(%rcx), %eax
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB23_95
.LBB23_94:                              # %cond.false.291
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	encode_char
	movl	%eax, -252(%rbp)        # 4-byte Spill
.LBB23_95:                              # %cond.end.293
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB23_107
.LBB23_96:                              # %cond.false.295
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB23_105
# BB#97:                                # %cond.true.299
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB23_103
# BB#98:                                # %land.lhs.true.306
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-112(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB23_99
	jmp	.LBB23_103
.LBB23_99:                              # %cond.true.313
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-112(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-84(%rbp), %esi
	movq	%rax, %rdi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, charset_work
	movq	charset_work, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB23_101
# BB#100:                               # %cond.true.322
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movl	128(%rax), %ecx
	movl	%ecx, -268(%rbp)        # 4-byte Spill
	jmp	.LBB23_102
.LBB23_101:                             # %cond.false.324
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	charset_work, %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -268(%rbp)        # 4-byte Spill
.LBB23_102:                             # %cond.end.327
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-268(%rbp), %eax        # 4-byte Reload
	movl	%eax, -272(%rbp)        # 4-byte Spill
	jmp	.LBB23_104
.LBB23_103:                             # %cond.false.329
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	encode_char
	movl	%eax, -272(%rbp)        # 4-byte Spill
.LBB23_104:                             # %cond.end.331
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-272(%rbp), %eax        # 4-byte Reload
	movl	%eax, -276(%rbp)        # 4-byte Spill
	jmp	.LBB23_106
.LBB23_105:                             # %cond.false.333
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	encode_char
	movl	%eax, -276(%rbp)        # 4-byte Spill
.LBB23_106:                             # %cond.end.335
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-276(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
.LBB23_107:                             # %cond.end.337
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	%eax, -248(%rbp)        # 4-byte Spill
.LBB23_108:                             # %cond.end.339
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, -244(%rbp)        # 4-byte Spill
.LBB23_109:                             # %cond.end.341
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	%eax, -240(%rbp)        # 4-byte Spill
.LBB23_110:                             # %cond.end.343
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-240(%rbp), %eax        # 4-byte Reload
	movl	%eax, -116(%rbp)
	jmp	.LBB23_117
.LBB23_111:                             # %if.else.345
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_112
.LBB23_112:                             # %do.body.346
                                        #   in Loop: Header=BB23_5 Depth=1
	leaq	-116(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-84(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -112(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB23_115
# BB#113:                               # %land.lhs.true.351
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -144(%rbp)
	cmpq	$0, %rax
	je	.LBB23_115
# BB#114:                               # %if.then.354
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-144(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-144(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB23_115:                             # %if.end.357
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_116
.LBB23_116:                             # %do.end.358
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_117
.LBB23_117:                             # %if.end.359
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_124
.LBB23_118:                             # %if.else.360
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_119
.LBB23_119:                             # %do.body.361
                                        #   in Loop: Header=BB23_5 Depth=1
	leaq	-116(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-84(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -112(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB23_122
# BB#120:                               # %land.lhs.true.366
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -152(%rbp)
	cmpq	$0, %rax
	je	.LBB23_122
# BB#121:                               # %if.then.369
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-152(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-152(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB23_122:                             # %if.end.372
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_123
.LBB23_123:                             # %do.end.373
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_124
.LBB23_124:                             # %if.end.374
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpq	$0, -112(%rbp)
	jne	.LBB23_137
# BB#125:                               # %if.then.376
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movl	588(%rcx), %edx
	movl	%edx, -84(%rbp)
	testb	$1, %al
	jne	.LBB23_126
	jmp	.LBB23_127
.LBB23_126:                             # %cond.true.377
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB23_128
	jmp	.LBB23_131
.LBB23_127:                             # %cond.false.381
                                        #   in Loop: Header=BB23_5 Depth=1
	movslq	-84(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB23_131
.LBB23_128:                             # %if.then.386
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_129
.LBB23_129:                             # %do.body.387
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-84(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#130:                               # %do.end.391
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_5
.LBB23_131:                             # %if.end.392
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_132
.LBB23_132:                             # %do.body.393
                                        #   in Loop: Header=BB23_5 Depth=1
	leaq	-116(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-84(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -112(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB23_135
# BB#133:                               # %land.lhs.true.398
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -160(%rbp)
	cmpq	$0, %rax
	je	.LBB23_135
# BB#134:                               # %if.then.401
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-160(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-160(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB23_135:                             # %if.end.404
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_136
.LBB23_136:                             # %do.end.405
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_137
.LBB23_137:                             # %if.end.406
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-112(%rbp), %rax
	movl	16(%rax), %ecx
	movl	%ecx, -120(%rbp)
	movq	-112(%rbp), %rax
	movl	100(%rax), %ecx
	movl	%ecx, -124(%rbp)
# BB#138:                               # %do.body.409
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$160, -124(%rbp)
	jge	.LBB23_140
# BB#139:                               # %if.then.412
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movb	%cl, -126(%rbp)
	movb	$0, -125(%rbp)
	jmp	.LBB23_150
.LBB23_140:                             # %if.else.416
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$224, -124(%rbp)
	jge	.LBB23_142
# BB#141:                               # %if.then.419
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$-102, -126(%rbp)
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movb	%cl, -125(%rbp)
	jmp	.LBB23_149
.LBB23_142:                             # %if.else.423
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$240, -124(%rbp)
	jge	.LBB23_144
# BB#143:                               # %if.then.426
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$-101, -126(%rbp)
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movb	%cl, -125(%rbp)
	jmp	.LBB23_148
.LBB23_144:                             # %if.else.430
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$245, -124(%rbp)
	jge	.LBB23_146
# BB#145:                               # %if.then.433
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$-100, -126(%rbp)
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movb	%cl, -125(%rbp)
	jmp	.LBB23_147
.LBB23_146:                             # %if.else.437
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	$-99, -126(%rbp)
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movb	%cl, -125(%rbp)
.LBB23_147:                             # %if.end.441
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_148
.LBB23_148:                             # %if.end.442
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_149
.LBB23_149:                             # %if.end.443
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_150
.LBB23_150:                             # %if.end.444
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_151
.LBB23_151:                             # %do.end.445
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_152
.LBB23_152:                             # %do.body.446
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB23_167
# BB#153:                               # %if.then.449
                                        #   in Loop: Header=BB23_5 Depth=1
	movzbl	-126(%rbp), %eax
	movl	%eax, -164(%rbp)
	cmpl	$128, -164(%rbp)
	jb	.LBB23_155
# BB#154:                               # %if.then.455
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-164(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -164(%rbp)
.LBB23_155:                             # %if.end.457
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_156
.LBB23_156:                             # %do.body.458
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$127, -164(%rbp)
	ja	.LBB23_158
# BB#157:                               # %if.then.461
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-164(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_165
.LBB23_158:                             # %if.else.464
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$2047, -164(%rbp)       # imm = 0x7FF
	ja	.LBB23_160
# BB#159:                               # %if.then.467
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-164(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_164
.LBB23_160:                             # %if.else.476
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65535, -164(%rbp)      # imm = 0xFFFF
	ja	.LBB23_162
# BB#161:                               # %if.then.479
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-164(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_163
.LBB23_162:                             # %if.else.493
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-164(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB23_163:                             # %if.end.497
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_164
.LBB23_164:                             # %if.end.498
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_165
.LBB23_165:                             # %if.end.499
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_166
.LBB23_166:                             # %do.end.500
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_168
.LBB23_167:                             # %if.else.501
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	-126(%rbp), %al
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%al, (%rcx)
.LBB23_168:                             # %if.end.504
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_169
.LBB23_169:                             # %do.end.505
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpb	$0, -125(%rbp)
	je	.LBB23_189
# BB#170:                               # %if.then.508
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_171
.LBB23_171:                             # %do.body.509
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB23_186
# BB#172:                               # %if.then.512
                                        #   in Loop: Header=BB23_5 Depth=1
	movzbl	-125(%rbp), %eax
	movl	%eax, -168(%rbp)
	cmpl	$128, -168(%rbp)
	jb	.LBB23_174
# BB#173:                               # %if.then.518
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-168(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -168(%rbp)
.LBB23_174:                             # %if.end.520
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_175
.LBB23_175:                             # %do.body.521
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$127, -168(%rbp)
	ja	.LBB23_177
# BB#176:                               # %if.then.524
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-168(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_184
.LBB23_177:                             # %if.else.527
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$2047, -168(%rbp)       # imm = 0x7FF
	ja	.LBB23_179
# BB#178:                               # %if.then.530
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-168(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-168(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_183
.LBB23_179:                             # %if.else.539
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65535, -168(%rbp)      # imm = 0xFFFF
	ja	.LBB23_181
# BB#180:                               # %if.then.542
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-168(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-168(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-168(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_182
.LBB23_181:                             # %if.else.556
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-168(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB23_182:                             # %if.end.560
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_183
.LBB23_183:                             # %if.end.561
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_184
.LBB23_184:                             # %if.end.562
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_185
.LBB23_185:                             # %do.end.563
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_187
.LBB23_186:                             # %if.else.564
                                        #   in Loop: Header=BB23_5 Depth=1
	movb	-125(%rbp), %al
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -40(%rbp)
	movb	%al, (%rcx)
.LBB23_187:                             # %if.end.567
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_188
.LBB23_188:                             # %do.end.568
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_189
.LBB23_189:                             # %if.end.569
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$1, -120(%rbp)
	jne	.LBB23_209
# BB#190:                               # %if.then.572
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_191
.LBB23_191:                             # %do.body.573
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB23_206
# BB#192:                               # %if.then.576
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -172(%rbp)
	cmpl	$128, -172(%rbp)
	jb	.LBB23_194
# BB#193:                               # %if.then.581
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-172(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -172(%rbp)
.LBB23_194:                             # %if.end.583
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_195
.LBB23_195:                             # %do.body.584
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$127, -172(%rbp)
	ja	.LBB23_197
# BB#196:                               # %if.then.587
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-172(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_204
.LBB23_197:                             # %if.else.590
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$2047, -172(%rbp)       # imm = 0x7FF
	ja	.LBB23_199
# BB#198:                               # %if.then.593
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-172(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-172(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_203
.LBB23_199:                             # %if.else.602
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65535, -172(%rbp)      # imm = 0xFFFF
	ja	.LBB23_201
# BB#200:                               # %if.then.605
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-172(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-172(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-172(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_202
.LBB23_201:                             # %if.else.619
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-172(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB23_202:                             # %if.end.623
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_203
.LBB23_203:                             # %if.end.624
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_204
.LBB23_204:                             # %if.end.625
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_205
.LBB23_205:                             # %do.end.626
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_207
.LBB23_206:                             # %if.else.627
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB23_207:                             # %if.end.631
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_208
.LBB23_208:                             # %do.end.632
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_246
.LBB23_209:                             # %if.else.633
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	orl	$32896, %eax            # imm = 0x8080
	movl	%eax, -116(%rbp)
# BB#210:                               # %do.body.635
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB23_225
# BB#211:                               # %if.then.638
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -176(%rbp)
	cmpl	$128, -176(%rbp)
	jb	.LBB23_213
# BB#212:                               # %if.then.643
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-176(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -176(%rbp)
.LBB23_213:                             # %if.end.645
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_214
.LBB23_214:                             # %do.body.646
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$127, -176(%rbp)
	ja	.LBB23_216
# BB#215:                               # %if.then.649
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-176(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_223
.LBB23_216:                             # %if.else.652
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$2047, -176(%rbp)       # imm = 0x7FF
	ja	.LBB23_218
# BB#217:                               # %if.then.655
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-176(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-176(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_222
.LBB23_218:                             # %if.else.664
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65535, -176(%rbp)      # imm = 0xFFFF
	ja	.LBB23_220
# BB#219:                               # %if.then.667
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-176(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-176(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-176(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_221
.LBB23_220:                             # %if.else.681
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-176(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB23_221:                             # %if.end.685
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_222
.LBB23_222:                             # %if.end.686
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_223
.LBB23_223:                             # %if.end.687
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_224
.LBB23_224:                             # %do.end.688
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_226
.LBB23_225:                             # %if.else.689
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	shrl	$8, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB23_226:                             # %if.end.693
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_227
.LBB23_227:                             # %do.end.694
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_228
.LBB23_228:                             # %do.body.695
                                        #   in Loop: Header=BB23_5 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB23_243
# BB#229:                               # %if.then.698
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -180(%rbp)
	cmpl	$128, -180(%rbp)
	jb	.LBB23_231
# BB#230:                               # %if.then.703
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-180(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -180(%rbp)
.LBB23_231:                             # %if.end.705
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_232
.LBB23_232:                             # %do.body.706
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$127, -180(%rbp)
	ja	.LBB23_234
# BB#233:                               # %if.then.709
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-180(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_241
.LBB23_234:                             # %if.else.712
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$2047, -180(%rbp)       # imm = 0x7FF
	ja	.LBB23_236
# BB#235:                               # %if.then.715
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-180(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-180(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_240
.LBB23_236:                             # %if.else.724
                                        #   in Loop: Header=BB23_5 Depth=1
	cmpl	$65535, -180(%rbp)      # imm = 0xFFFF
	ja	.LBB23_238
# BB#237:                               # %if.then.727
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-180(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-180(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-180(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB23_239
.LBB23_238:                             # %if.else.741
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-180(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB23_239:                             # %if.end.745
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_240
.LBB23_240:                             # %if.end.746
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_241
.LBB23_241:                             # %if.end.747
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_242
.LBB23_242:                             # %do.end.748
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_244
.LBB23_243:                             # %if.else.749
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-116(%rbp), %eax
	andl	$255, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB23_244:                             # %if.end.753
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_245
.LBB23_245:                             # %do.end.754
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_246
.LBB23_246:                             # %if.end.755
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_247
.LBB23_247:                             # %if.end.756
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_248
.LBB23_248:                             # %if.end.757
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_5
.LBB23_249:                             # %while.end
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rdi
	movq	%rdi, 392(%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	subq	%rdi, %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 384(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	retq
.Lfunc_end23:
	.size	encode_coding_emacs_mule, .Lfunc_end23-encode_coding_emacs_mule
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_sjis,@function
detect_coding_sjis:                     # @detect_coding_sjis
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp72:
	.cfi_def_cfa_offset 16
.Ltmp73:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp74:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -49(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -68(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdi
	callq	AREF
	movq	%rax, -88(%rbp)
# BB#2:                                 # %do.end
	movq	-88(%rbp), %rdi
	callq	Flength
	movl	$239, %ecx
	movl	$252, %edx
	sarq	$2, %rax
	cmpq	$3, %rax
	cmovgl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %ecx
	orl	$32768, %ecx            # imm = 0x8000
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	movq	360(%rax), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB24_3:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#4:                                 # %do.body.7
                                        #   in Loop: Header=BB24_3 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB24_8
# BB#5:                                 # %if.then
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB24_7
# BB#6:                                 # %if.then.10
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB24_7:                               # %if.end
	jmp	.LBB24_45
.LBB24_8:                               # %if.end.11
                                        #   in Loop: Header=BB24_3 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -72(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB24_14
# BB#9:                                 # %land.lhs.true
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB24_14
# BB#10:                                # %if.then.14
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB24_12
# BB#11:                                # %if.then.18
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB24_13
.LBB24_12:                              # %if.else
                                        #   in Loop: Header=BB24_3 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -72(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB24_13:                              # %if.end.25
                                        #   in Loop: Header=BB24_3 Depth=1
	jmp	.LBB24_14
.LBB24_14:                              # %if.end.26
                                        #   in Loop: Header=BB24_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#15:                                # %do.end.27
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$128, -72(%rbp)
	jge	.LBB24_17
# BB#16:                                # %if.then.30
                                        #   in Loop: Header=BB24_3 Depth=1
	jmp	.LBB24_3
.LBB24_17:                              # %if.end.31
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$129, -72(%rbp)
	jl	.LBB24_19
# BB#18:                                # %land.lhs.true.34
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$159, -72(%rbp)
	jle	.LBB24_21
.LBB24_19:                              # %lor.lhs.false
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$224, -72(%rbp)
	jl	.LBB24_38
# BB#20:                                # %land.lhs.true.39
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jg	.LBB24_38
.LBB24_21:                              # %if.then.42
                                        #   in Loop: Header=BB24_3 Depth=1
	jmp	.LBB24_22
.LBB24_22:                              # %do.body.43
                                        #   in Loop: Header=BB24_3 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB24_26
# BB#23:                                # %if.then.46
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB24_25
# BB#24:                                # %if.then.49
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB24_25:                              # %if.end.50
	jmp	.LBB24_45
.LBB24_26:                              # %if.end.51
                                        #   in Loop: Header=BB24_3 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -72(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB24_32
# BB#27:                                # %land.lhs.true.56
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB24_32
# BB#28:                                # %if.then.59
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB24_30
# BB#29:                                # %if.then.63
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	-72(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB24_31
.LBB24_30:                              # %if.else.69
                                        #   in Loop: Header=BB24_3 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -72(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB24_31:                              # %if.end.73
                                        #   in Loop: Header=BB24_3 Depth=1
	jmp	.LBB24_32
.LBB24_32:                              # %if.end.74
                                        #   in Loop: Header=BB24_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#33:                                # %do.end.76
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$64, -72(%rbp)
	jl	.LBB24_36
# BB#34:                                # %lor.lhs.false.79
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$127, -72(%rbp)
	je	.LBB24_36
# BB#35:                                # %lor.lhs.false.82
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$252, -72(%rbp)
	jle	.LBB24_37
.LBB24_36:                              # %if.then.85
	jmp	.LBB24_44
.LBB24_37:                              # %if.end.86
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	$32768, -68(%rbp)       # imm = 0x8000
	jmp	.LBB24_43
.LBB24_38:                              # %if.else.87
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$160, -72(%rbp)
	jl	.LBB24_41
# BB#39:                                # %land.lhs.true.90
                                        #   in Loop: Header=BB24_3 Depth=1
	cmpl	$224, -72(%rbp)
	jge	.LBB24_41
# BB#40:                                # %if.then.93
                                        #   in Loop: Header=BB24_3 Depth=1
	movl	$32768, -68(%rbp)       # imm = 0x8000
	jmp	.LBB24_42
.LBB24_41:                              # %if.else.94
	jmp	.LBB24_44
.LBB24_42:                              # %if.end.95
                                        #   in Loop: Header=BB24_3 Depth=1
	jmp	.LBB24_43
.LBB24_43:                              # %if.end.96
                                        #   in Loop: Header=BB24_3 Depth=1
	jmp	.LBB24_3
.LBB24_44:                              # %while.end
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$32768, %ecx            # imm = 0x8000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB24_49
.LBB24_45:                              # %no_more_source
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB24_48
# BB#46:                                # %land.lhs.true.100
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB24_48
# BB#47:                                # %if.then.106
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$32768, %ecx            # imm = 0x8000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB24_49
.LBB24_48:                              # %if.end.109
	movl	-68(%rbp), %eax
	movq	-24(%rbp), %rcx
	orl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
	movb	$1, -1(%rbp)
.LBB24_49:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end24:
	.size	detect_coding_sjis, .Lfunc_end24-detect_coding_sjis
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_sjis,@function
decode_coding_sjis:                     # @decode_coding_sjis
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp75:
	.cfi_def_cfa_offset 16
.Ltmp76:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp77:
	.cfi_def_cfa_register %rbp
	subq	$336, %rsp              # imm = 0x150
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rdx
	addq	400(%rdx), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rdx
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	addq	$-40, %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %sil
	andb	$1, %sil
	movb	%sil, -65(%rbp)
	movq	-8(%rbp), %rdx
	movq	392(%rdx), %rdx
	movq	%rdx, -136(%rbp)
	movq	-136(%rbp), %rdx
	movq	%rdx, -144(%rbp)
	movl	charset_ascii, %eax
	movl	%eax, -148(%rbp)
	testb	$1, globals+3389
	movb	%cl, -217(%rbp)         # 1-byte Spill
	jne	.LBB25_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -217(%rbp)         # 1-byte Spill
.LBB25_2:                               # %land.end
	movb	-217(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -149(%rbp)
	movl	$-1, -156(%rbp)
# BB#3:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	AREF
	movq	%rax, -120(%rbp)
# BB#4:                                 # %do.end
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	charset_table, %rax
	movq	-128(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	charset_table, %rax
	movq	-128(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	charset_table, %rax
	movq	-128(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB25_6
# BB#5:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	jmp	.LBB25_7
.LBB25_6:                               # %cond.false
	movq	charset_table, %rax
	movq	-128(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB25_7:                               # %cond.end
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)
.LBB25_8:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB25_12
# BB#9:                                 # %if.then
	cmpl	$0, -156(%rbp)
	jl	.LBB25_11
# BB#10:                                # %if.then.42
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB25_11:                              # %if.end
	jmp	.LBB25_179
.LBB25_12:                              # %if.end.43
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$0, -156(%rbp)
	jl	.LBB25_14
# BB#13:                                # %if.then.45
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-156(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	$-1, -156(%rbp)
	jmp	.LBB25_27
.LBB25_14:                              # %if.else
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_15
.LBB25_15:                              # %do.body.46
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB25_19
# BB#16:                                # %if.then.48
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB25_18
# BB#17:                                # %if.then.50
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_18:                              # %if.end.51
	jmp	.LBB25_180
.LBB25_19:                              # %if.end.52
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -160(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB25_25
# BB#20:                                # %land.lhs.true
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB25_25
# BB#21:                                # %if.then.57
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB25_23
# BB#22:                                # %if.then.61
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB25_24
.LBB25_23:                              # %if.else.65
                                        #   in Loop: Header=BB25_8 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -160(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_24:                              # %if.end.69
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_25
.LBB25_25:                              # %if.end.70
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#26:                                # %do.end.71
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_27
.LBB25_27:                              # %if.end.72
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$0, -160(%rbp)
	jge	.LBB25_29
# BB#28:                                # %if.then.75
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_163
.LBB25_29:                              # %if.end.76
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$128, -160(%rbp)
	jge	.LBB25_46
# BB#30:                                # %if.then.79
                                        #   in Loop: Header=BB25_8 Depth=1
	testb	$1, -149(%rbp)
	je	.LBB25_45
# BB#31:                                # %land.lhs.true.82
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$13, -160(%rbp)
	jne	.LBB25_45
# BB#32:                                # %if.then.85
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_33
.LBB25_33:                              # %do.body.86
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB25_37
# BB#34:                                # %if.then.89
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB25_36
# BB#35:                                # %if.then.92
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_36:                              # %if.end.93
	jmp	.LBB25_180
.LBB25_37:                              # %if.end.94
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -156(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB25_43
# BB#38:                                # %land.lhs.true.99
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-156(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB25_43
# BB#39:                                # %if.then.102
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-156(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB25_41
# BB#40:                                # %if.then.106
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-156(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB25_42
.LBB25_41:                              # %if.else.112
                                        #   in Loop: Header=BB25_8 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -156(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_42:                              # %if.end.116
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_43
.LBB25_43:                              # %if.end.117
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#44:                                # %do.end.119
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_45
.LBB25_45:                              # %if.end.120
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB25_122
.LBB25_46:                              # %if.else.121
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$128, -160(%rbp)
	je	.LBB25_48
# BB#47:                                # %lor.lhs.false
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$160, -160(%rbp)
	jne	.LBB25_49
.LBB25_48:                              # %if.then.126
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_163
.LBB25_49:                              # %if.else.127
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$161, -160(%rbp)
	jl	.LBB25_52
# BB#50:                                # %land.lhs.true.130
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$223, -160(%rbp)
	jg	.LBB25_52
# BB#51:                                # %if.then.133
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$127, %eax
	movl	%eax, -160(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	jmp	.LBB25_120
.LBB25_52:                              # %if.else.135
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$239, -160(%rbp)
	jg	.LBB25_75
# BB#53:                                # %if.then.138
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_54
.LBB25_54:                              # %do.body.139
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB25_58
# BB#55:                                # %if.then.142
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB25_57
# BB#56:                                # %if.then.145
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_57:                              # %if.end.146
	jmp	.LBB25_180
.LBB25_58:                              # %if.end.147
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -164(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB25_64
# BB#59:                                # %land.lhs.true.152
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-164(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB25_64
# BB#60:                                # %if.then.155
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-164(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB25_62
# BB#61:                                # %if.then.159
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-164(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB25_63
.LBB25_62:                              # %if.else.165
                                        #   in Loop: Header=BB25_8 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -164(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_63:                              # %if.end.169
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_64
.LBB25_64:                              # %if.end.170
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#65:                                # %do.end.172
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$64, -164(%rbp)
	jl	.LBB25_68
# BB#66:                                # %lor.lhs.false.175
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$127, -164(%rbp)
	je	.LBB25_68
# BB#67:                                # %lor.lhs.false.178
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$252, -164(%rbp)
	jle	.LBB25_69
.LBB25_68:                              # %if.then.181
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_163
.LBB25_69:                              # %if.end.182
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	shll	$8, %eax
	orl	-164(%rbp), %eax
	movl	%eax, -160(%rbp)
# BB#70:                                # %do.body.185
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -180(%rbp)
	movl	-160(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -184(%rbp)
	cmpl	$159, -184(%rbp)
	jl	.LBB25_72
# BB#71:                                # %if.then.190
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$224, %eax
	movl	$352, %ecx              # imm = 0x160
	movl	-180(%rbp), %edx
	shll	$1, %edx
	cmpl	$224, -180(%rbp)
	cmovgel	%ecx, %eax
	subl	%eax, %edx
	movl	%edx, -188(%rbp)
	movl	-184(%rbp), %eax
	subl	$126, %eax
	movl	%eax, -192(%rbp)
	jmp	.LBB25_73
.LBB25_72:                              # %if.else.196
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$31, %eax
	movl	$32, %ecx
	movl	$225, %edx
	movl	$353, %esi              # imm = 0x161
	movl	-180(%rbp), %edi
	shll	$1, %edi
	cmpl	$224, -180(%rbp)
	cmovgel	%esi, %edx
	subl	%edx, %edi
	movl	%edi, -188(%rbp)
	movl	-184(%rbp), %edx
	cmpl	$127, -184(%rbp)
	cmovgel	%ecx, %eax
	subl	%eax, %edx
	movl	%edx, -192(%rbp)
.LBB25_73:                              # %if.end.206
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-188(%rbp), %eax
	shll	$8, %eax
	orl	-192(%rbp), %eax
	movl	%eax, -160(%rbp)
# BB#74:                                # %do.end.209
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB25_119
.LBB25_75:                              # %if.else.210
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$252, -160(%rbp)
	jg	.LBB25_117
# BB#76:                                # %land.lhs.true.213
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpq	$0, -104(%rbp)
	je	.LBB25_117
# BB#77:                                # %if.then.215
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_78
.LBB25_78:                              # %do.body.216
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB25_82
# BB#79:                                # %if.then.219
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB25_81
# BB#80:                                # %if.then.222
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_81:                              # %if.end.223
	jmp	.LBB25_180
.LBB25_82:                              # %if.end.224
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -164(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB25_88
# BB#83:                                # %land.lhs.true.229
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-164(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB25_88
# BB#84:                                # %if.then.232
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-164(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB25_86
# BB#85:                                # %if.then.236
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-164(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB25_87
.LBB25_86:                              # %if.else.242
                                        #   in Loop: Header=BB25_8 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -164(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_87:                              # %if.end.246
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_88
.LBB25_88:                              # %if.end.247
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#89:                                # %do.end.249
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$64, -164(%rbp)
	jl	.LBB25_92
# BB#90:                                # %lor.lhs.false.252
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$127, -164(%rbp)
	je	.LBB25_92
# BB#91:                                # %lor.lhs.false.255
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$252, -164(%rbp)
	jle	.LBB25_93
.LBB25_92:                              # %if.then.258
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_163
.LBB25_93:                              # %if.end.259
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	shll	$8, %eax
	orl	-164(%rbp), %eax
	movl	%eax, -160(%rbp)
# BB#94:                                # %do.body.262
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -196(%rbp)
	movl	-160(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -200(%rbp)
	cmpl	$159, -200(%rbp)
	jl	.LBB25_108
# BB#95:                                # %if.then.271
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$240, -196(%rbp)
	jne	.LBB25_97
# BB#96:                                # %cond.true.274
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$40, %eax
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB25_107
.LBB25_97:                              # %cond.false.275
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$241, -196(%rbp)
	jne	.LBB25_99
# BB#98:                                # %cond.true.278
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$36, %eax
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB25_106
.LBB25_99:                              # %cond.false.279
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$242, -196(%rbp)
	jne	.LBB25_101
# BB#100:                               # %cond.true.282
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$44, %eax
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB25_105
.LBB25_101:                             # %cond.false.283
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$243, -196(%rbp)
	jne	.LBB25_103
# BB#102:                               # %cond.true.286
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$46, %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
	jmp	.LBB25_104
.LBB25_103:                             # %cond.false.287
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-196(%rbp), %eax
	subl	$244, %eax
	shll	$1, %eax
	addl	$110, %eax
	movl	%eax, -264(%rbp)        # 4-byte Spill
.LBB25_104:                             # %cond.end.290
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-264(%rbp), %eax        # 4-byte Reload
	movl	%eax, -260(%rbp)        # 4-byte Spill
.LBB25_105:                             # %cond.end.292
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
.LBB25_106:                             # %cond.end.294
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	%eax, -252(%rbp)        # 4-byte Spill
.LBB25_107:                             # %cond.end.296
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -204(%rbp)
	movl	-200(%rbp), %eax
	subl	$126, %eax
	movl	%eax, -208(%rbp)
	jmp	.LBB25_115
.LBB25_108:                             # %if.else.299
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$242, -196(%rbp)
	jg	.LBB25_110
# BB#109:                               # %cond.true.302
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-196(%rbp), %eax
	subl	$240, %eax
	shll	$1, %eax
	addl	$33, %eax
	movl	%eax, -268(%rbp)        # 4-byte Spill
	jmp	.LBB25_114
.LBB25_110:                             # %cond.false.306
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$244, -196(%rbp)
	jg	.LBB25_112
# BB#111:                               # %cond.true.309
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-196(%rbp), %eax
	subl	$243, %eax
	shll	$1, %eax
	addl	$45, %eax
	movl	%eax, -272(%rbp)        # 4-byte Spill
	jmp	.LBB25_113
.LBB25_112:                             # %cond.false.313
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-196(%rbp), %eax
	subl	$245, %eax
	shll	$1, %eax
	addl	$111, %eax
	movl	%eax, -272(%rbp)        # 4-byte Spill
.LBB25_113:                             # %cond.end.317
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-272(%rbp), %eax        # 4-byte Reload
	movl	%eax, -268(%rbp)        # 4-byte Spill
.LBB25_114:                             # %cond.end.319
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-268(%rbp), %eax        # 4-byte Reload
	movl	$31, %ecx
	movl	$32, %edx
	movl	%eax, -204(%rbp)
	movl	-200(%rbp), %eax
	cmpl	$127, -200(%rbp)
	cmovgel	%edx, %ecx
	subl	%ecx, %eax
	movl	%eax, -208(%rbp)
.LBB25_115:                             # %if.end.325
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-204(%rbp), %eax
	shll	$8, %eax
	orl	-208(%rbp), %eax
	movl	%eax, -160(%rbp)
# BB#116:                               # %do.end.328
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-104(%rbp), %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB25_118
.LBB25_117:                             # %if.else.329
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_163
.LBB25_118:                             # %if.end.330
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_119
.LBB25_119:                             # %if.end.331
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_120
.LBB25_120:                             # %if.end.332
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_121
.LBB25_121:                             # %if.end.333
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_122
.LBB25_122:                             # %if.end.334
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	charset_ascii, %ecx
	je	.LBB25_131
# BB#123:                               # %land.lhs.true.338
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-148(%rbp), %eax
	movq	-176(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB25_131
# BB#124:                               # %if.then.342
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-148(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB25_130
# BB#125:                               # %if.then.345
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_126
.LBB25_126:                             # %do.body.346
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_127
.LBB25_127:                             # %do.body.347
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-136(%rbp), %rax
	subq	-144(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#128:                               # %do.end.355
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-148(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#129:                               # %do.end.357
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_130
.LBB25_130:                             # %if.end.358
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -148(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -144(%rbp)
.LBB25_131:                             # %if.end.360
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_132
.LBB25_132:                             # %do.body.361
                                        #   in Loop: Header=BB25_8 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB25_133
	jmp	.LBB25_134
.LBB25_133:                             # %cond.true.362
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB25_135
	jmp	.LBB25_137
.LBB25_134:                             # %cond.false.366
                                        #   in Loop: Header=BB25_8 Depth=1
	movslq	-160(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB25_137
.LBB25_135:                             # %land.lhs.true.371
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB25_137
# BB#136:                               # %cond.true.377
                                        #   in Loop: Header=BB25_8 Depth=1
	movslq	-160(%rbp), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	jmp	.LBB25_158
.LBB25_137:                             # %cond.false.379
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	movq	-176(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB25_139
# BB#138:                               # %lor.lhs.false.382
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	movq	-176(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB25_140
.LBB25_139:                             # %cond.true.385
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	$-1, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	jmp	.LBB25_157
.LBB25_140:                             # %cond.false.386
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB25_142
# BB#141:                               # %cond.true.392
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -296(%rbp)        # 8-byte Spill
	jmp	.LBB25_156
.LBB25_142:                             # %cond.false.395
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB25_147
# BB#143:                               # %cond.true.398
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB25_145
# BB#144:                               # %cond.true.403
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	movq	-176(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-176(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -300(%rbp)        # 4-byte Spill
	jmp	.LBB25_146
.LBB25_145:                             # %cond.false.407
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	decode_char
	movl	%eax, -300(%rbp)        # 4-byte Spill
.LBB25_146:                             # %cond.end.409
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-300(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	jmp	.LBB25_155
.LBB25_147:                             # %cond.false.412
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB25_153
# BB#148:                               # %cond.true.416
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB25_151
# BB#149:                               # %land.lhs.true.422
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-176(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB25_150
	jmp	.LBB25_151
.LBB25_150:                             # %cond.true.428
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-176(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-160(%rbp), %ecx
	movq	-176(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	jmp	.LBB25_152
.LBB25_151:                             # %cond.false.438
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -320(%rbp)        # 8-byte Spill
.LBB25_152:                             # %cond.end.441
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-320(%rbp), %rax        # 8-byte Reload
	movq	%rax, -328(%rbp)        # 8-byte Spill
	jmp	.LBB25_154
.LBB25_153:                             # %cond.false.443
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-176(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -328(%rbp)        # 8-byte Spill
.LBB25_154:                             # %cond.end.446
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, -312(%rbp)        # 8-byte Spill
.LBB25_155:                             # %cond.end.448
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-312(%rbp), %rax        # 8-byte Reload
	movq	%rax, -296(%rbp)        # 8-byte Spill
.LBB25_156:                             # %cond.end.450
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-296(%rbp), %rax        # 8-byte Reload
	movq	%rax, -288(%rbp)        # 8-byte Spill
.LBB25_157:                             # %cond.end.452
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-288(%rbp), %rax        # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB25_158:                             # %cond.end.454
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-280(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -160(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB25_161
# BB#159:                               # %land.lhs.true.459
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -216(%rbp)
	cmpq	$0, %rax
	je	.LBB25_161
# BB#160:                               # %if.then.462
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-216(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-216(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-216(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB25_161:                             # %if.end.466
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_162
.LBB25_162:                             # %do.end.467
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-136(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -136(%rbp)
	jmp	.LBB25_8
.LBB25_163:                             # %invalid_code
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
# BB#164:                               # %do.body.470
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB25_168
# BB#165:                               # %if.then.473
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB25_167
# BB#166:                               # %if.then.476
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_167:                             # %if.end.477
	jmp	.LBB25_180
.LBB25_168:                             # %if.end.478
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -160(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB25_174
# BB#169:                               # %land.lhs.true.483
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB25_174
# BB#170:                               # %if.then.486
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB25_172
# BB#171:                               # %if.then.490
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB25_173
.LBB25_172:                             # %if.else.496
                                        #   in Loop: Header=BB25_8 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -160(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB25_173:                             # %if.end.500
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_174
.LBB25_174:                             # %if.end.501
                                        #   in Loop: Header=BB25_8 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#175:                               # %do.end.503
                                        #   in Loop: Header=BB25_8 Depth=1
	cmpl	$0, -160(%rbp)
	jge	.LBB25_177
# BB#176:                               # %cond.true.506
                                        #   in Loop: Header=BB25_8 Depth=1
	xorl	%eax, %eax
	subl	-160(%rbp), %eax
	movl	%eax, -332(%rbp)        # 4-byte Spill
	jmp	.LBB25_178
.LBB25_177:                             # %cond.false.508
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-160(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -332(%rbp)        # 4-byte Spill
.LBB25_178:                             # %cond.end.510
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-332(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-136(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -136(%rbp)
	jmp	.LBB25_8
.LBB25_179:                             # %while.end
	jmp	.LBB25_180
.LBB25_180:                             # %no_more_source
	movl	-148(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB25_186
# BB#181:                               # %if.then.516
	jmp	.LBB25_182
.LBB25_182:                             # %do.body.517
	jmp	.LBB25_183
.LBB25_183:                             # %do.body.518
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-136(%rbp), %rax
	subq	-144(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#184:                               # %do.end.528
	movl	-148(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#185:                               # %do.end.530
	jmp	.LBB25_186
.LBB25_186:                             # %if.end.531
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$336, %rsp              # imm = 0x150
	popq	%rbp
	retq
.Lfunc_end25:
	.size	decode_coding_sjis, .Lfunc_end25-decode_coding_sjis
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_sjis,@function
encode_coding_sjis:                     # @encode_coding_sjis
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp78:
	.cfi_def_cfa_offset 16
.Ltmp79:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp80:
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movl	$4, -52(%rbp)
	movq	$0, -64(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, -80(%rbp)
# BB#2:                                 # %do.end
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	charset_table, %rax
	movq	-88(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	charset_table, %rax
	movq	-88(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB26_4
# BB#3:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	jmp	.LBB26_5
.LBB26_4:                               # %cond.false
	movq	charset_table, %rax
	movq	-88(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB26_5:                               # %cond.end
	movq	-248(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, -120(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movb	%dl, -89(%rbp)
.LBB26_6:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB26_192
# BB#7:                                 # %while.body
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %do.body.30
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB26_10
# BB#9:                                 # %if.then
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-8(%rbp), %rdi
	movq	-136(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB26_10:                              # %if.end
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_11
.LBB26_11:                              # %do.end.38
                                        #   in Loop: Header=BB26_6 Depth=1
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -24(%rbp)
	movl	(%rcx), %esi
	movl	%esi, -124(%rbp)
	testb	$1, %al
	jne	.LBB26_12
	jmp	.LBB26_13
.LBB26_12:                              # %cond.true.39
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-124(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB26_14
	jmp	.LBB26_18
.LBB26_13:                              # %cond.false.43
                                        #   in Loop: Header=BB26_6 Depth=1
	movslq	-124(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB26_18
.LBB26_14:                              # %land.lhs.true
                                        #   in Loop: Header=BB26_6 Depth=1
	testb	$1, -89(%rbp)
	je	.LBB26_18
# BB#15:                                # %if.then.49
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_16
.LBB26_16:                              # %do.body.50
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-124(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#17:                                # %do.end.53
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_191
.LBB26_18:                              # %if.else
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$4194175, -124(%rbp)    # imm = 0x3FFF7F
	jle	.LBB26_41
# BB#19:                                # %if.then.56
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$4194175, -124(%rbp)    # imm = 0x3FFF7F
	jle	.LBB26_21
# BB#20:                                # %cond.true.59
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-124(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB26_22
.LBB26_21:                              # %cond.false.61
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-124(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -260(%rbp)        # 4-byte Spill
.LBB26_22:                              # %cond.end.62
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, -124(%rbp)
# BB#23:                                # %do.body.64
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB26_38
# BB#24:                                # %if.then.67
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-124(%rbp), %eax
	movl	%eax, -140(%rbp)
	cmpl	$128, -140(%rbp)
	jb	.LBB26_26
# BB#25:                                # %if.then.70
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-140(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -140(%rbp)
.LBB26_26:                              # %if.end.72
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_27
.LBB26_27:                              # %do.body.73
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$127, -140(%rbp)
	ja	.LBB26_29
# BB#28:                                # %if.then.76
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-140(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_36
.LBB26_29:                              # %if.else.79
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$2047, -140(%rbp)       # imm = 0x7FF
	ja	.LBB26_31
# BB#30:                                # %if.then.82
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-140(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-140(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_35
.LBB26_31:                              # %if.else.90
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$65535, -140(%rbp)      # imm = 0xFFFF
	ja	.LBB26_33
# BB#32:                                # %if.then.93
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-140(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-140(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-140(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_34
.LBB26_33:                              # %if.else.107
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-140(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB26_34:                              # %if.end.111
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_35
.LBB26_35:                              # %if.end.112
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_36
.LBB26_36:                              # %if.end.113
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_37
.LBB26_37:                              # %do.end.114
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_39
.LBB26_38:                              # %if.else.115
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB26_39:                              # %if.end.118
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_40
.LBB26_40:                              # %do.end.119
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_190
.LBB26_41:                              # %if.else.120
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_42
.LBB26_42:                              # %do.body.121
                                        #   in Loop: Header=BB26_6 Depth=1
	leaq	-144(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-124(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -152(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB26_45
# BB#43:                                # %land.lhs.true.125
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -160(%rbp)
	cmpq	$0, %rax
	je	.LBB26_45
# BB#44:                                # %if.then.128
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-160(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-160(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB26_45:                              # %if.end.131
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_46
.LBB26_46:                              # %do.end.132
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpq	$0, -152(%rbp)
	jne	.LBB26_56
# BB#47:                                # %if.then.134
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB26_49
# BB#48:                                # %if.then.140
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$63, -144(%rbp)
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -152(%rbp)
	jmp	.LBB26_55
.LBB26_49:                              # %if.else.143
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-8(%rbp), %rax
	movl	588(%rax), %ecx
	movl	%ecx, -124(%rbp)
# BB#50:                                # %do.body.144
                                        #   in Loop: Header=BB26_6 Depth=1
	leaq	-144(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-124(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -152(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB26_53
# BB#51:                                # %land.lhs.true.149
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -168(%rbp)
	cmpq	$0, %rax
	je	.LBB26_53
# BB#52:                                # %if.then.152
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-168(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-168(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB26_53:                              # %if.end.155
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_54
.LBB26_54:                              # %do.end.156
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_55
.LBB26_55:                              # %if.end.157
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_56
.LBB26_56:                              # %if.end.158
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	128(%rcx), %eax
	jne	.LBB26_58
# BB#57:                                # %if.then.161
	callq	emacs_abort
.LBB26_58:                              # %if.end.162
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-152(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jne	.LBB26_96
# BB#59:                                # %if.then.165
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_60
.LBB26_60:                              # %do.body.166
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -188(%rbp)
	movl	-144(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -192(%rbp)
	movl	-188(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB26_62
# BB#61:                                # %if.then.171
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$31, %eax
	movl	$32, %ecx
	movl	$177, %edx
	movl	$113, %esi
	movl	$2, %edi
	movl	-188(%rbp), %r8d
	movl	%eax, -264(%rbp)        # 4-byte Spill
	movl	%r8d, %eax
	movl	%edx, -268(%rbp)        # 4-byte Spill
	cltd
	idivl	%edi
	cmpl	$95, -188(%rbp)
	movl	-268(%rbp), %edi        # 4-byte Reload
	cmovll	%esi, %edi
	addl	%edi, %eax
	movl	%eax, -180(%rbp)
	movl	-192(%rbp), %eax
	cmpl	$96, -192(%rbp)
	movl	-264(%rbp), %esi        # 4-byte Reload
	cmovgel	%ecx, %esi
	addl	%esi, %eax
	movl	%eax, -184(%rbp)
	jmp	.LBB26_63
.LBB26_62:                              # %if.else.180
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$176, %eax
	movl	$112, %ecx
	movl	$2, %edx
	movl	-188(%rbp), %esi
	movl	%eax, -272(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -276(%rbp)        # 4-byte Spill
	cltd
	movl	-276(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	cmpl	$95, -188(%rbp)
	movl	-272(%rbp), %edi        # 4-byte Reload
	cmovll	%ecx, %edi
	addl	%edi, %eax
	movl	%eax, -180(%rbp)
	movl	-192(%rbp), %eax
	addl	$126, %eax
	movl	%eax, -184(%rbp)
.LBB26_63:                              # %if.end.187
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-180(%rbp), %eax
	shll	$8, %eax
	orl	-184(%rbp), %eax
	movl	%eax, -144(%rbp)
# BB#64:                                # %do.end.189
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -172(%rbp)
	movl	-144(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -176(%rbp)
# BB#65:                                # %do.body.192
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB26_93
# BB#66:                                # %if.then.195
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-172(%rbp), %eax
	movl	%eax, -196(%rbp)
	cmpl	$128, -196(%rbp)
	jb	.LBB26_68
# BB#67:                                # %if.then.199
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -196(%rbp)
.LBB26_68:                              # %if.end.201
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_69
.LBB26_69:                              # %do.body.202
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$127, -196(%rbp)
	ja	.LBB26_71
# BB#70:                                # %if.then.205
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_78
.LBB26_71:                              # %if.else.208
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$2047, -196(%rbp)       # imm = 0x7FF
	ja	.LBB26_73
# BB#72:                                # %if.then.211
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-196(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_77
.LBB26_73:                              # %if.else.220
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$65535, -196(%rbp)      # imm = 0xFFFF
	ja	.LBB26_75
# BB#74:                                # %if.then.223
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-196(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-196(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_76
.LBB26_75:                              # %if.else.237
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB26_76:                              # %if.end.241
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_77
.LBB26_77:                              # %if.end.242
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_78
.LBB26_78:                              # %if.end.243
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_79
.LBB26_79:                              # %do.end.244
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-176(%rbp), %eax
	movl	%eax, -196(%rbp)
	cmpl	$128, -196(%rbp)
	jb	.LBB26_81
# BB#80:                                # %if.then.247
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -196(%rbp)
.LBB26_81:                              # %if.end.249
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_82
.LBB26_82:                              # %do.body.250
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$127, -196(%rbp)
	ja	.LBB26_84
# BB#83:                                # %if.then.253
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_91
.LBB26_84:                              # %if.else.256
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$2047, -196(%rbp)       # imm = 0x7FF
	ja	.LBB26_86
# BB#85:                                # %if.then.259
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-196(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_90
.LBB26_86:                              # %if.else.268
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$65535, -196(%rbp)      # imm = 0xFFFF
	ja	.LBB26_88
# BB#87:                                # %if.then.271
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-196(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-196(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_89
.LBB26_88:                              # %if.else.285
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-196(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB26_89:                              # %if.end.289
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_90
.LBB26_90:                              # %if.end.290
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_91
.LBB26_91:                              # %if.end.291
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_92
.LBB26_92:                              # %do.end.292
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_94
.LBB26_93:                              # %if.else.293
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-172(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-176(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB26_94:                              # %if.end.298
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_95
.LBB26_95:                              # %do.end.299
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_189
.LBB26_96:                              # %if.else.300
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-152(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jne	.LBB26_116
# BB#97:                                # %if.then.303
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_98
.LBB26_98:                              # %do.body.304
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB26_113
# BB#99:                                # %if.then.307
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	orl	$128, %eax
	movl	%eax, -200(%rbp)
	cmpl	$128, -200(%rbp)
	jb	.LBB26_101
# BB#100:                               # %if.then.312
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-200(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -200(%rbp)
.LBB26_101:                             # %if.end.314
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_102
.LBB26_102:                             # %do.body.315
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$127, -200(%rbp)
	ja	.LBB26_104
# BB#103:                               # %if.then.318
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-200(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_111
.LBB26_104:                             # %if.else.321
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$2047, -200(%rbp)       # imm = 0x7FF
	ja	.LBB26_106
# BB#105:                               # %if.then.324
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-200(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-200(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_110
.LBB26_106:                             # %if.else.333
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$65535, -200(%rbp)      # imm = 0xFFFF
	ja	.LBB26_108
# BB#107:                               # %if.then.336
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-200(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-200(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-200(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_109
.LBB26_108:                             # %if.else.350
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-200(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB26_109:                             # %if.end.354
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_110
.LBB26_110:                             # %if.end.355
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_111
.LBB26_111:                             # %if.end.356
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_112
.LBB26_112:                             # %do.end.357
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_114
.LBB26_113:                             # %if.else.358
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB26_114:                             # %if.end.362
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_115
.LBB26_115:                             # %do.end.363
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_188
.LBB26_116:                             # %if.else.364
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpq	$0, -120(%rbp)
	je	.LBB26_184
# BB#117:                               # %land.lhs.true.366
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-152(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB26_184
# BB#118:                               # %if.then.369
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -204(%rbp)
	cmpl	$33, -204(%rbp)
	je	.LBB26_125
# BB#119:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$35, -204(%rbp)
	jl	.LBB26_121
# BB#120:                               # %land.lhs.true.377
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$37, -204(%rbp)
	jle	.LBB26_125
.LBB26_121:                             # %lor.lhs.false.380
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$40, -204(%rbp)
	je	.LBB26_125
# BB#122:                               # %lor.lhs.false.383
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$44, -204(%rbp)
	jl	.LBB26_124
# BB#123:                               # %land.lhs.true.386
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$47, -204(%rbp)
	jle	.LBB26_125
.LBB26_124:                             # %lor.lhs.false.389
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$110, -204(%rbp)
	jl	.LBB26_180
.LBB26_125:                             # %if.then.392
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_126
.LBB26_126:                             # %do.body.393
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -220(%rbp)
	movl	-144(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -224(%rbp)
	movl	-220(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB26_134
# BB#127:                               # %if.then.402
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$37, -220(%rbp)
	jg	.LBB26_129
# BB#128:                               # %cond.true.405
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$2, %eax
	movl	-220(%rbp), %ecx
	subl	$33, %ecx
	movl	%eax, -280(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-280(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	addl	$240, %eax
	movl	%eax, -284(%rbp)        # 4-byte Spill
	jmp	.LBB26_133
.LBB26_129:                             # %cond.false.409
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$47, -220(%rbp)
	jg	.LBB26_131
# BB#130:                               # %cond.true.412
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$2, %eax
	movl	-220(%rbp), %ecx
	subl	$45, %ecx
	movl	%eax, -288(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-288(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	addl	$243, %eax
	movl	%eax, -292(%rbp)        # 4-byte Spill
	jmp	.LBB26_132
.LBB26_131:                             # %cond.false.416
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$2, %eax
	movl	-220(%rbp), %ecx
	subl	$111, %ecx
	movl	%eax, -296(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-296(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	addl	$245, %eax
	movl	%eax, -292(%rbp)        # 4-byte Spill
.LBB26_132:                             # %cond.end.420
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-292(%rbp), %eax        # 4-byte Reload
	movl	%eax, -284(%rbp)        # 4-byte Spill
.LBB26_133:                             # %cond.end.422
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-284(%rbp), %eax        # 4-byte Reload
	movl	$31, %ecx
	movl	$32, %edx
	movl	%eax, -212(%rbp)
	movl	-224(%rbp), %eax
	cmpl	$96, -224(%rbp)
	cmovgel	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -216(%rbp)
	jmp	.LBB26_147
.LBB26_134:                             # %if.else.428
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$40, -220(%rbp)
	jne	.LBB26_136
# BB#135:                               # %cond.true.431
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$240, %eax
	movl	%eax, -300(%rbp)        # 4-byte Spill
	jmp	.LBB26_146
.LBB26_136:                             # %cond.false.432
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$36, -220(%rbp)
	jne	.LBB26_138
# BB#137:                               # %cond.true.435
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$241, %eax
	movl	%eax, -304(%rbp)        # 4-byte Spill
	jmp	.LBB26_145
.LBB26_138:                             # %cond.false.436
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$44, -220(%rbp)
	jne	.LBB26_140
# BB#139:                               # %cond.true.439
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$242, %eax
	movl	%eax, -308(%rbp)        # 4-byte Spill
	jmp	.LBB26_144
.LBB26_140:                             # %cond.false.440
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$46, -220(%rbp)
	jne	.LBB26_142
# BB#141:                               # %cond.true.443
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$243, %eax
	movl	%eax, -312(%rbp)        # 4-byte Spill
	jmp	.LBB26_143
.LBB26_142:                             # %cond.false.444
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	$2, %eax
	movl	-220(%rbp), %ecx
	subl	$110, %ecx
	movl	%eax, -316(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-316(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	addl	$244, %eax
	movl	%eax, -312(%rbp)        # 4-byte Spill
.LBB26_143:                             # %cond.end.448
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-312(%rbp), %eax        # 4-byte Reload
	movl	%eax, -308(%rbp)        # 4-byte Spill
.LBB26_144:                             # %cond.end.450
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	movl	%eax, -304(%rbp)        # 4-byte Spill
.LBB26_145:                             # %cond.end.452
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-304(%rbp), %eax        # 4-byte Reload
	movl	%eax, -300(%rbp)        # 4-byte Spill
.LBB26_146:                             # %cond.end.454
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-300(%rbp), %eax        # 4-byte Reload
	movl	%eax, -212(%rbp)
	movl	-224(%rbp), %eax
	addl	$126, %eax
	movl	%eax, -216(%rbp)
.LBB26_147:                             # %if.end.457
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-212(%rbp), %eax
	shll	$8, %eax
	orl	-216(%rbp), %eax
	movl	%eax, -144(%rbp)
# BB#148:                               # %do.end.460
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-144(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -204(%rbp)
	movl	-144(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -208(%rbp)
# BB#149:                               # %do.body.463
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB26_177
# BB#150:                               # %if.then.466
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -228(%rbp)
	cmpl	$128, -228(%rbp)
	jb	.LBB26_152
# BB#151:                               # %if.then.470
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -228(%rbp)
.LBB26_152:                             # %if.end.472
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_153
.LBB26_153:                             # %do.body.473
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$127, -228(%rbp)
	ja	.LBB26_155
# BB#154:                               # %if.then.476
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_162
.LBB26_155:                             # %if.else.479
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$2047, -228(%rbp)       # imm = 0x7FF
	ja	.LBB26_157
# BB#156:                               # %if.then.482
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-228(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_161
.LBB26_157:                             # %if.else.491
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$65535, -228(%rbp)      # imm = 0xFFFF
	ja	.LBB26_159
# BB#158:                               # %if.then.494
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-228(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-228(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_160
.LBB26_159:                             # %if.else.508
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB26_160:                             # %if.end.512
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_161
.LBB26_161:                             # %if.end.513
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_162
.LBB26_162:                             # %if.end.514
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_163
.LBB26_163:                             # %do.end.515
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -228(%rbp)
	cmpl	$128, -228(%rbp)
	jb	.LBB26_165
# BB#164:                               # %if.then.518
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -228(%rbp)
.LBB26_165:                             # %if.end.520
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_166
.LBB26_166:                             # %do.body.521
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$127, -228(%rbp)
	ja	.LBB26_168
# BB#167:                               # %if.then.524
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_175
.LBB26_168:                             # %if.else.527
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$2047, -228(%rbp)       # imm = 0x7FF
	ja	.LBB26_170
# BB#169:                               # %if.then.530
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-228(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_174
.LBB26_170:                             # %if.else.539
                                        #   in Loop: Header=BB26_6 Depth=1
	cmpl	$65535, -228(%rbp)      # imm = 0xFFFF
	ja	.LBB26_172
# BB#171:                               # %if.then.542
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-228(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-228(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB26_173
.LBB26_172:                             # %if.else.556
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-228(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB26_173:                             # %if.end.560
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_174
.LBB26_174:                             # %if.end.561
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_175
.LBB26_175:                             # %if.end.562
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_176
.LBB26_176:                             # %do.end.563
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_178
.LBB26_177:                             # %if.else.564
                                        #   in Loop: Header=BB26_6 Depth=1
	movl	-204(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-208(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB26_178:                             # %if.end.569
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_179
.LBB26_179:                             # %do.end.570
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_183
.LBB26_180:                             # %if.else.571
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_181
.LBB26_181:                             # %do.body.572
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-144(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#182:                               # %do.end.577
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_183
.LBB26_183:                             # %if.end.578
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_187
.LBB26_184:                             # %if.else.579
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_185
.LBB26_185:                             # %do.body.580
                                        #   in Loop: Header=BB26_6 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-144(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#186:                               # %do.end.585
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_187
.LBB26_187:                             # %if.end.586
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_188
.LBB26_188:                             # %if.end.587
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_189
.LBB26_189:                             # %if.end.588
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_190
.LBB26_190:                             # %if.end.589
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_191
.LBB26_191:                             # %if.end.590
                                        #   in Loop: Header=BB26_6 Depth=1
	jmp	.LBB26_6
.LBB26_192:                             # %while.end
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rdi
	movq	%rdi, 392(%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	subq	%rdi, %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 384(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	retq
.Lfunc_end26:
	.size	encode_coding_sjis, .Lfunc_end26-encode_coding_sjis
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding_big5,@function
detect_coding_big5:                     # @detect_coding_big5
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp81:
	.cfi_def_cfa_offset 16
.Ltmp82:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp83:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-16(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-16(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-16(%rbp), %rsi
	movl	8(%rsi), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -49(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movq	-24(%rbp), %rsi
	movl	(%rsi), %eax
	orl	$65536, %eax            # imm = 0x10000
	movl	%eax, (%rsi)
	movq	-16(%rbp), %rsi
	movq	360(%rsi), %rsi
	addq	-32(%rbp), %rsi
	movq	%rsi, -32(%rbp)
.LBB27_1:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
# BB#2:                                 # %do.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB27_6
# BB#3:                                 # %if.then
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB27_5
# BB#4:                                 # %if.then.4
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB27_5:                               # %if.end
	jmp	.LBB27_36
.LBB27_6:                               # %if.end.5
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -72(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB27_12
# BB#7:                                 # %land.lhs.true
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-72(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB27_12
# BB#8:                                 # %if.then.8
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-72(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB27_10
# BB#9:                                 # %if.then.12
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-72(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
                                        #   in Loop: Header=BB27_1 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -72(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB27_11:                              # %if.end.18
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_12
.LBB27_12:                              # %if.end.19
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#13:                                # %do.end
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpl	$128, -72(%rbp)
	jge	.LBB27_15
# BB#14:                                # %if.then.22
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_1
.LBB27_15:                              # %if.end.23
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpl	$161, -72(%rbp)
	jl	.LBB27_33
# BB#16:                                # %if.then.26
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_17
.LBB27_17:                              # %do.body.27
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.LBB27_21
# BB#18:                                # %if.then.30
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB27_20
# BB#19:                                # %if.then.33
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB27_20:                              # %if.end.34
	jmp	.LBB27_36
.LBB27_21:                              # %if.end.35
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -72(%rbp)
	testb	$1, -49(%rbp)
	je	.LBB27_27
# BB#22:                                # %land.lhs.true.40
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-72(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB27_27
# BB#23:                                # %if.then.43
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-72(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB27_25
# BB#24:                                # %if.then.47
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-72(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB27_26
.LBB27_25:                              # %if.else.53
                                        #   in Loop: Header=BB27_1 Depth=1
	leaq	-32(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -72(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB27_26:                              # %if.end.57
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_27
.LBB27_27:                              # %if.end.58
                                        #   in Loop: Header=BB27_1 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
# BB#28:                                # %do.end.60
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpl	$64, -72(%rbp)
	jl	.LBB27_31
# BB#29:                                # %lor.lhs.false
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpl	$127, -72(%rbp)
	jl	.LBB27_32
# BB#30:                                # %land.lhs.true.65
                                        #   in Loop: Header=BB27_1 Depth=1
	cmpl	$160, -72(%rbp)
	jg	.LBB27_32
.LBB27_31:                              # %if.then.68
	movb	$0, -1(%rbp)
	jmp	.LBB27_40
.LBB27_32:                              # %if.end.69
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$65536, -68(%rbp)       # imm = 0x10000
	jmp	.LBB27_34
.LBB27_33:                              # %if.else.70
	jmp	.LBB27_35
.LBB27_34:                              # %if.end.71
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_1
.LBB27_35:                              # %while.end
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$65536, %ecx            # imm = 0x10000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB27_40
.LBB27_36:                              # %no_more_source
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB27_39
# BB#37:                                # %land.lhs.true.75
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB27_39
# BB#38:                                # %if.then.81
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$65536, %ecx            # imm = 0x10000
	movl	%ecx, 8(%rax)
	movb	$0, -1(%rbp)
	jmp	.LBB27_40
.LBB27_39:                              # %if.end.84
	movl	-68(%rbp), %eax
	movq	-24(%rbp), %rcx
	orl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
	movb	$1, -1(%rbp)
.LBB27_40:                              # %return
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end27:
	.size	detect_coding_big5, .Lfunc_end27-detect_coding_big5
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding_big5,@function
decode_coding_big5:                     # @decode_coding_big5
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp84:
	.cfi_def_cfa_offset 16
.Ltmp85:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp86:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rdx
	addq	400(%rdx), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rdx
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rdx
	addq	$-40, %rdx
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rdx
	movl	8(%rdx), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %sil
	andb	$1, %sil
	movb	%sil, -65(%rbp)
	movq	-8(%rbp), %rdx
	movq	392(%rdx), %rdx
	movq	%rdx, -120(%rbp)
	movq	-120(%rbp), %rdx
	movq	%rdx, -128(%rbp)
	movl	charset_ascii, %eax
	movl	%eax, -132(%rbp)
	testb	$1, globals+3389
	movb	%cl, -169(%rbp)         # 1-byte Spill
	jne	.LBB28_2
# BB#1:                                 # %land.rhs
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$351, %edi              # imm = 0x15F
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%dl
	movb	%dl, -169(%rbp)         # 1-byte Spill
.LBB28_2:                               # %land.end
	movb	-169(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movb	%al, -133(%rbp)
	movl	$-1, -140(%rbp)
# BB#3:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdi
	callq	AREF
	movq	%rax, -104(%rbp)
# BB#4:                                 # %do.end
	movq	-104(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	charset_table, %rax
	movq	-112(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	charset_table, %rax
	movq	-112(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
.LBB28_5:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB28_9
# BB#6:                                 # %if.then
	cmpl	$0, -140(%rbp)
	jl	.LBB28_8
# BB#7:                                 # %if.then.26
	movq	-32(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB28_8:                               # %if.end
	jmp	.LBB28_121
.LBB28_9:                               # %if.end.27
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$0, -140(%rbp)
	jl	.LBB28_11
# BB#10:                                # %if.then.29
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	$-1, -140(%rbp)
	jmp	.LBB28_24
.LBB28_11:                              # %if.else
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_12
.LBB28_12:                              # %do.body.30
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB28_16
# BB#13:                                # %if.then.32
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB28_15
# BB#14:                                # %if.then.34
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_15:                              # %if.end.35
	jmp	.LBB28_122
.LBB28_16:                              # %if.end.36
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -144(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB28_22
# BB#17:                                # %land.lhs.true
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB28_22
# BB#18:                                # %if.then.41
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB28_20
# BB#19:                                # %if.then.45
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB28_21
.LBB28_20:                              # %if.else.49
                                        #   in Loop: Header=BB28_5 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -144(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_21:                              # %if.end.53
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_22
.LBB28_22:                              # %if.end.54
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#23:                                # %do.end.55
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_24
.LBB28_24:                              # %if.end.56
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$0, -144(%rbp)
	jge	.LBB28_26
# BB#25:                                # %if.then.59
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_105
.LBB28_26:                              # %if.end.60
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$128, -144(%rbp)
	jge	.LBB28_43
# BB#27:                                # %if.then.63
                                        #   in Loop: Header=BB28_5 Depth=1
	testb	$1, -133(%rbp)
	je	.LBB28_42
# BB#28:                                # %land.lhs.true.66
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$13, -144(%rbp)
	jne	.LBB28_42
# BB#29:                                # %if.then.69
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_30
.LBB28_30:                              # %do.body.70
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB28_34
# BB#31:                                # %if.then.73
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB28_33
# BB#32:                                # %if.then.76
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_33:                              # %if.end.77
	jmp	.LBB28_122
.LBB28_34:                              # %if.end.78
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -140(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB28_40
# BB#35:                                # %land.lhs.true.83
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-140(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB28_40
# BB#36:                                # %if.then.86
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-140(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB28_38
# BB#37:                                # %if.then.90
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-140(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB28_39
.LBB28_38:                              # %if.else.96
                                        #   in Loop: Header=BB28_5 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -140(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_39:                              # %if.end.100
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_40
.LBB28_40:                              # %if.end.101
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#41:                                # %do.end.103
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_42
.LBB28_42:                              # %if.end.104
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB28_64
.LBB28_43:                              # %if.else.105
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$161, -144(%rbp)
	jl	.LBB28_45
# BB#44:                                # %lor.lhs.false
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$254, -144(%rbp)
	jle	.LBB28_46
.LBB28_45:                              # %if.then.110
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_105
.LBB28_46:                              # %if.end.111
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_47
.LBB28_47:                              # %do.body.112
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB28_51
# BB#48:                                # %if.then.115
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB28_50
# BB#49:                                # %if.then.118
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_50:                              # %if.end.119
	jmp	.LBB28_122
.LBB28_51:                              # %if.end.120
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -148(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB28_57
# BB#52:                                # %land.lhs.true.125
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-148(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB28_57
# BB#53:                                # %if.then.128
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-148(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB28_55
# BB#54:                                # %if.then.132
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-148(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -148(%rbp)
	jmp	.LBB28_56
.LBB28_55:                              # %if.else.138
                                        #   in Loop: Header=BB28_5 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -148(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_56:                              # %if.end.142
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_57
.LBB28_57:                              # %if.end.143
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#58:                                # %do.end.145
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$64, -148(%rbp)
	jl	.LBB28_62
# BB#59:                                # %lor.lhs.false.148
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$126, -148(%rbp)
	jle	.LBB28_61
# BB#60:                                # %land.lhs.true.151
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$161, -148(%rbp)
	jl	.LBB28_62
.LBB28_61:                              # %lor.lhs.false.154
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$254, -148(%rbp)
	jle	.LBB28_63
.LBB28_62:                              # %if.then.157
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_105
.LBB28_63:                              # %if.end.158
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	shll	$8, %eax
	orl	-148(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	-88(%rbp), %rcx
	movq	%rcx, -160(%rbp)
.LBB28_64:                              # %if.end.161
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	cmpl	charset_ascii, %ecx
	je	.LBB28_73
# BB#65:                                # %land.lhs.true.165
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-132(%rbp), %eax
	movq	-160(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB28_73
# BB#66:                                # %if.then.169
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-132(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB28_72
# BB#67:                                # %if.then.172
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_68
.LBB28_68:                              # %do.body.173
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_69
.LBB28_69:                              # %do.body.174
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-120(%rbp), %rax
	subq	-128(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#70:                                # %do.end.182
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-132(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#71:                                # %do.end.184
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_72
.LBB28_72:                              # %if.end.185
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -132(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -128(%rbp)
.LBB28_73:                              # %if.end.187
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_74
.LBB28_74:                              # %do.body.188
                                        #   in Loop: Header=BB28_5 Depth=1
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB28_75
	jmp	.LBB28_76
.LBB28_75:                              # %cond.true
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB28_77
	jmp	.LBB28_79
.LBB28_76:                              # %cond.false
                                        #   in Loop: Header=BB28_5 Depth=1
	movslq	-144(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB28_79
.LBB28_77:                              # %land.lhs.true.195
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB28_79
# BB#78:                                # %cond.true.201
                                        #   in Loop: Header=BB28_5 Depth=1
	movslq	-144(%rbp), %rax
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jmp	.LBB28_100
.LBB28_79:                              # %cond.false.203
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	movq	-160(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB28_81
# BB#80:                                # %lor.lhs.false.206
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	movq	-160(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB28_82
.LBB28_81:                              # %cond.true.209
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	$-1, %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB28_99
.LBB28_82:                              # %cond.false.210
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB28_84
# BB#83:                                # %cond.true.216
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rdi
	movl	-144(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -208(%rbp)        # 8-byte Spill
	jmp	.LBB28_98
.LBB28_84:                              # %cond.false.219
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB28_89
# BB#85:                                # %cond.true.222
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB28_87
# BB#86:                                # %cond.true.227
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	movq	-160(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -212(%rbp)        # 4-byte Spill
	jmp	.LBB28_88
.LBB28_87:                              # %cond.false.231
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rdi
	movl	-144(%rbp), %esi
	callq	decode_char
	movl	%eax, -212(%rbp)        # 4-byte Spill
.LBB28_88:                              # %cond.end
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-212(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	jmp	.LBB28_97
.LBB28_89:                              # %cond.false.234
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB28_95
# BB#90:                                # %cond.true.238
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB28_93
# BB#91:                                # %land.lhs.true.244
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-160(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB28_92
	jmp	.LBB28_93
.LBB28_92:                              # %cond.true.250
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-160(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-144(%rbp), %ecx
	movq	-160(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jmp	.LBB28_94
.LBB28_93:                              # %cond.false.260
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rdi
	movl	-144(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -232(%rbp)        # 8-byte Spill
.LBB28_94:                              # %cond.end.263
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
	jmp	.LBB28_96
.LBB28_95:                              # %cond.false.265
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-160(%rbp), %rdi
	movl	-144(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -240(%rbp)        # 8-byte Spill
.LBB28_96:                              # %cond.end.268
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB28_97:                              # %cond.end.270
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB28_98:                              # %cond.end.272
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB28_99:                              # %cond.end.274
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
.LBB28_100:                             # %cond.end.276
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-192(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -144(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB28_103
# BB#101:                               # %land.lhs.true.281
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -168(%rbp)
	cmpq	$0, %rax
	je	.LBB28_103
# BB#102:                               # %if.then.284
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-168(%rbp), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-168(%rbp), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-168(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB28_103:                             # %if.end.288
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_104
.LBB28_104:                             # %do.end.289
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-120(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -120(%rbp)
	jmp	.LBB28_5
.LBB28_105:                             # %invalid_code
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
# BB#106:                               # %do.body.292
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB28_110
# BB#107:                               # %if.then.295
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB28_109
# BB#108:                               # %if.then.298
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_109:                             # %if.end.299
	jmp	.LBB28_122
.LBB28_110:                             # %if.end.300
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -144(%rbp)
	testb	$1, -65(%rbp)
	je	.LBB28_116
# BB#111:                               # %land.lhs.true.305
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB28_116
# BB#112:                               # %if.then.308
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB28_114
# BB#113:                               # %if.then.312
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -16(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB28_115
.LBB28_114:                             # %if.else.318
                                        #   in Loop: Header=BB28_5 Depth=1
	leaq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-16(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -144(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB28_115:                             # %if.end.322
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_116
.LBB28_116:                             # %if.end.323
                                        #   in Loop: Header=BB28_5 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
# BB#117:                               # %do.end.325
                                        #   in Loop: Header=BB28_5 Depth=1
	cmpl	$0, -144(%rbp)
	jge	.LBB28_119
# BB#118:                               # %cond.true.328
                                        #   in Loop: Header=BB28_5 Depth=1
	xorl	%eax, %eax
	subl	-144(%rbp), %eax
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB28_120
.LBB28_119:                             # %cond.false.330
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-144(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -244(%rbp)        # 4-byte Spill
.LBB28_120:                             # %cond.end.332
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-244(%rbp), %eax        # 4-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
	movq	-120(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -120(%rbp)
	jmp	.LBB28_5
.LBB28_121:                             # %while.end
	jmp	.LBB28_122
.LBB28_122:                             # %no_more_source
	movl	-132(%rbp), %eax
	cmpl	charset_ascii, %eax
	je	.LBB28_128
# BB#123:                               # %if.then.338
	jmp	.LBB28_124
.LBB28_124:                             # %do.body.339
	jmp	.LBB28_125
.LBB28_125:                             # %do.body.340
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$-4, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	$3, (%rax)
	movq	-120(%rbp), %rax
	subq	-128(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#126:                               # %do.end.350
	movl	-132(%rbp), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	movl	%eax, (%rcx)
# BB#127:                               # %do.end.352
	jmp	.LBB28_128
.LBB28_128:                             # %if.end.353
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	408(%rcx), %rax
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	retq
.Lfunc_end28:
	.size	decode_coding_big5, .Lfunc_end28-decode_coding_big5
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding_big5,@function
encode_coding_big5:                     # @encode_coding_big5
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp87:
	.cfi_def_cfa_offset 16
.Ltmp88:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp89:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %cl
	andb	$1, %cl
	movb	%cl, -9(%rbp)
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rdx
	movslq	516(%rdx), %rdx
	shlq	$2, %rdx
	addq	%rdx, %rdi
	movq	%rdi, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rdx
	movq	%rdx, -40(%rbp)
	movq	-8(%rbp), %rdx
	movq	496(%rdx), %rdx
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rdx
	movq	%rdx, -48(%rbp)
	movl	$4, -52(%rbp)
	movq	$0, -64(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	movq	%rax, -80(%rbp)
# BB#2:                                 # %do.end
	movl	$5, %eax
	movl	%eax, %esi
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	charset_table, %rcx
	movq	-88(%rbp), %rdx
	subq	$3, %rdx
	movq	(%rdx), %rdx
	sarq	$2, %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	movq	%rcx, -104(%rbp)
	movq	-72(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r8b
	xorb	$-1, %r8b
	andb	$1, %r8b
	movb	%r8b, -89(%rbp)
.LBB29_3:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB29_94
# BB#4:                                 # %while.body
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_5
.LBB29_5:                               # %do.body.14
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-40(%rbp), %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	cmpq	-48(%rbp), %rax
	jb	.LBB29_7
# BB#6:                                 # %if.then
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movslq	-52(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-8(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -48(%rbp)
.LBB29_7:                               # %if.end
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_8
.LBB29_8:                               # %do.end.22
                                        #   in Loop: Header=BB29_3 Depth=1
	movb	$1, %al
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -24(%rbp)
	movl	(%rcx), %esi
	movl	%esi, -108(%rbp)
	testb	$1, %al
	jne	.LBB29_9
	jmp	.LBB29_10
.LBB29_9:                               # %cond.true
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-108(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB29_11
	jmp	.LBB29_15
.LBB29_10:                              # %cond.false
                                        #   in Loop: Header=BB29_3 Depth=1
	movslq	-108(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB29_15
.LBB29_11:                              # %land.lhs.true
                                        #   in Loop: Header=BB29_3 Depth=1
	testb	$1, -89(%rbp)
	je	.LBB29_15
# BB#12:                                # %if.then.31
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_13
.LBB29_13:                              # %do.body.32
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-108(%rbp), %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#14:                                # %do.end.35
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_93
.LBB29_15:                              # %if.else
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$4194175, -108(%rbp)    # imm = 0x3FFF7F
	jle	.LBB29_38
# BB#16:                                # %if.then.38
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$4194175, -108(%rbp)    # imm = 0x3FFF7F
	jle	.LBB29_18
# BB#17:                                # %cond.true.41
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-108(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -180(%rbp)        # 4-byte Spill
	jmp	.LBB29_19
.LBB29_18:                              # %cond.false.43
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-108(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -180(%rbp)        # 4-byte Spill
.LBB29_19:                              # %cond.end
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-180(%rbp), %eax        # 4-byte Reload
	movl	%eax, -108(%rbp)
# BB#20:                                # %do.body.44
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB29_35
# BB#21:                                # %if.then.47
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -124(%rbp)
	cmpl	$128, -124(%rbp)
	jb	.LBB29_23
# BB#22:                                # %if.then.50
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-124(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -124(%rbp)
.LBB29_23:                              # %if.end.52
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_24
.LBB29_24:                              # %do.body.53
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$127, -124(%rbp)
	ja	.LBB29_26
# BB#25:                                # %if.then.56
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-124(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_33
.LBB29_26:                              # %if.else.59
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$2047, -124(%rbp)       # imm = 0x7FF
	ja	.LBB29_28
# BB#27:                                # %if.then.62
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_32
.LBB29_28:                              # %if.else.70
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$65535, -124(%rbp)      # imm = 0xFFFF
	ja	.LBB29_30
# BB#29:                                # %if.then.73
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-124(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-124(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_31
.LBB29_30:                              # %if.else.87
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-124(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB29_31:                              # %if.end.91
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_32
.LBB29_32:                              # %if.end.92
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_33
.LBB29_33:                              # %if.end.93
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_34
.LBB29_34:                              # %do.end.94
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_36
.LBB29_35:                              # %if.else.95
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-108(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB29_36:                              # %if.end.98
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_37
.LBB29_37:                              # %do.end.99
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_92
.LBB29_38:                              # %if.else.100
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_39
.LBB29_39:                              # %do.body.101
                                        #   in Loop: Header=BB29_3 Depth=1
	leaq	-128(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-108(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -136(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB29_42
# BB#40:                                # %land.lhs.true.105
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -144(%rbp)
	cmpq	$0, %rax
	je	.LBB29_42
# BB#41:                                # %if.then.108
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-144(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-144(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB29_42:                              # %if.end.111
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_43
.LBB29_43:                              # %do.end.112
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpq	$0, -136(%rbp)
	jne	.LBB29_53
# BB#44:                                # %if.then.114
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	.LBB29_46
# BB#45:                                # %if.then.120
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	$63, -128(%rbp)
	movq	charset_table, %rax
	movslq	charset_ascii, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB29_52
.LBB29_46:                              # %if.else.123
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-8(%rbp), %rax
	movl	588(%rax), %ecx
	movl	%ecx, -108(%rbp)
# BB#47:                                # %do.body.124
                                        #   in Loop: Header=BB29_3 Depth=1
	leaq	-128(%rbp), %rdx
	movb	$0, charset_map_loaded
	movl	-108(%rbp), %edi
	movq	-80(%rbp), %rsi
	callq	char_charset
	movq	%rax, -136(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB29_50
# BB#48:                                # %land.lhs.true.129
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_change_destination
	movq	%rax, -152(%rbp)
	cmpq	$0, %rax
	je	.LBB29_50
# BB#49:                                # %if.then.132
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-152(%rbp), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-152(%rbp), %rax
	addq	-48(%rbp), %rax
	movq	%rax, -48(%rbp)
.LBB29_50:                              # %if.end.135
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_51
.LBB29_51:                              # %do.end.136
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_52
.LBB29_52:                              # %if.end.137
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_53
.LBB29_53:                              # %if.end.138
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-128(%rbp), %eax
	movq	-136(%rbp), %rcx
	cmpl	128(%rcx), %eax
	jne	.LBB29_55
# BB#54:                                # %if.then.141
	callq	emacs_abort
.LBB29_55:                              # %if.end.142
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-136(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jne	.LBB29_88
# BB#56:                                # %if.then.145
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-128(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -156(%rbp)
	movl	-128(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -160(%rbp)
# BB#57:                                # %do.body.148
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -64(%rbp)
	testb	$1, -9(%rbp)
	je	.LBB29_85
# BB#58:                                # %if.then.151
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-156(%rbp), %eax
	movl	%eax, -164(%rbp)
	cmpl	$128, -164(%rbp)
	jb	.LBB29_60
# BB#59:                                # %if.then.155
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -164(%rbp)
.LBB29_60:                              # %if.end.157
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_61
.LBB29_61:                              # %do.body.158
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$127, -164(%rbp)
	ja	.LBB29_63
# BB#62:                                # %if.then.161
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_70
.LBB29_63:                              # %if.else.164
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$2047, -164(%rbp)       # imm = 0x7FF
	ja	.LBB29_65
# BB#64:                                # %if.then.167
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_69
.LBB29_65:                              # %if.else.176
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$65535, -164(%rbp)      # imm = 0xFFFF
	ja	.LBB29_67
# BB#66:                                # %if.then.179
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_68
.LBB29_67:                              # %if.else.193
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB29_68:                              # %if.end.197
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_69
.LBB29_69:                              # %if.end.198
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_70
.LBB29_70:                              # %if.end.199
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_71
.LBB29_71:                              # %do.end.200
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-160(%rbp), %eax
	movl	%eax, -164(%rbp)
	cmpl	$128, -164(%rbp)
	jb	.LBB29_73
# BB#72:                                # %if.then.203
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -164(%rbp)
.LBB29_73:                              # %if.end.205
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_74
.LBB29_74:                              # %do.body.206
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$127, -164(%rbp)
	ja	.LBB29_76
# BB#75:                                # %if.then.209
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_83
.LBB29_76:                              # %if.else.212
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$2047, -164(%rbp)       # imm = 0x7FF
	ja	.LBB29_78
# BB#77:                                # %if.then.215
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_82
.LBB29_78:                              # %if.else.224
                                        #   in Loop: Header=BB29_3 Depth=1
	cmpl	$65535, -164(%rbp)      # imm = 0xFFFF
	ja	.LBB29_80
# BB#79:                                # %if.then.227
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-164(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB29_81
.LBB29_80:                              # %if.else.241
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-164(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_string
	movq	-40(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -40(%rbp)
.LBB29_81:                              # %if.end.245
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_82
.LBB29_82:                              # %if.end.246
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_83
.LBB29_83:                              # %if.end.247
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_84
.LBB29_84:                              # %do.end.248
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_86
.LBB29_85:                              # %if.else.249
                                        #   in Loop: Header=BB29_3 Depth=1
	movl	-156(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
	movl	-160(%rbp), %eax
	movb	%al, %cl
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%cl, (%rdx)
.LBB29_86:                              # %if.end.254
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_87
.LBB29_87:                              # %do.end.255
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_91
.LBB29_88:                              # %if.else.256
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_89
.LBB29_89:                              # %do.body.257
                                        #   in Loop: Header=BB29_3 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movl	-128(%rbp), %ecx
	andl	$127, %ecx
	movb	%cl, %dl
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -40(%rbp)
	movb	%dl, (%rax)
# BB#90:                                # %do.end.262
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_91
.LBB29_91:                              # %if.end.263
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_92
.LBB29_92:                              # %if.end.264
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_93
.LBB29_93:                              # %if.end.265
                                        #   in Loop: Header=BB29_3 Depth=1
	jmp	.LBB29_3
.LBB29_94:                              # %while.end
	xorl	%esi, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
	xorl	%esi, %esi
	movb	%sil, %al
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rdi
	movq	%rdi, 392(%rcx)
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	subq	%rdi, %rcx
	movq	-8(%rbp), %rdi
	movq	%rcx, 384(%rdi)
	andb	$1, %al
	movzbl	%al, %eax
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end29:
	.size	encode_coding_big5, .Lfunc_end29-encode_coding_big5
	.cfi_endproc

	.globl	coding_charset_list
	.align	16, 0x90
	.type	coding_charset_list,@function
coding_charset_list:                    # @coding_charset_list
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp90:
	.cfi_def_cfa_offset 16
.Ltmp91:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp92:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	AREF
	movq	%rax, -24(%rbp)
# BB#2:                                 # %do.end
	movl	$3, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	movl	$580, %edi              # imm = 0x244
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB30_6
# BB#3:                                 # %if.then
	movl	$23, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1048576, %ecx          # imm = 0x100000
	cmpl	$0, %ecx
	je	.LBB30_5
# BB#4:                                 # %if.then.7
	movq	Viso_2022_charset_list, %rax
	movq	%rax, -24(%rbp)
.LBB30_5:                               # %if.end
	jmp	.LBB30_9
.LBB30_6:                               # %if.else
	movl	$3, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	movl	$361, %edi              # imm = 0x169
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB30_8
# BB#7:                                 # %if.then.12
	movq	Vemacs_mule_charset_list, %rax
	movq	%rax, -24(%rbp)
.LBB30_8:                               # %if.end.13
	jmp	.LBB30_9
.LBB30_9:                               # %if.end.14
	movq	-24(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end30:
	.size	coding_charset_list, .Lfunc_end30-coding_charset_list
	.cfi_endproc

	.globl	coding_system_charset_list
	.align	16, 0x90
	.type	coding_system_charset_list,@function
coding_system_charset_list:             # @coding_system_charset_list
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp93:
	.cfi_def_cfa_offset 16
.Ltmp94:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp95:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
# BB#1:                                 # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jge	.LBB31_3
# BB#2:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	%rax, -16(%rbp)
.LBB31_3:                               # %if.end
	cmpq	$0, -16(%rbp)
	jge	.LBB31_5
# BB#4:                                 # %if.then.6
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB31_5:                               # %if.end.8
	jmp	.LBB31_6
.LBB31_6:                               # %do.end
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$580, %edi              # imm = 0x244
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB31_11
# BB#7:                                 # %if.then.15
	movl	$23, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-36(%rbp), %ecx
	andl	$1048576, %ecx          # imm = 0x100000
	cmpl	$0, %ecx
	je	.LBB31_9
# BB#8:                                 # %if.then.17
	movq	Viso_2022_charset_list, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB31_10
.LBB31_9:                               # %if.else
	movl	$4, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
.LBB31_10:                              # %if.end.19
	jmp	.LBB31_15
.LBB31_11:                              # %if.else.20
	movl	$3, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$361, %edi              # imm = 0x169
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB31_13
# BB#12:                                # %if.then.25
	movq	Vemacs_mule_charset_list, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB31_14
.LBB31_13:                              # %if.else.26
	movl	$4, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
.LBB31_14:                              # %if.end.28
	jmp	.LBB31_15
.LBB31_15:                              # %if.end.29
	movq	-32(%rbp), %rax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end31:
	.size	coding_system_charset_list, .Lfunc_end31-coding_system_charset_list
	.cfi_endproc

	.globl	raw_text_coding_system
	.align	16, 0x90
	.type	raw_text_coding_system,@function
raw_text_coding_system:                 # @raw_text_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp96:
	.cfi_def_cfa_offset 16
.Ltmp97:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp98:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -56(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB32_2
# BB#1:                                 # %if.then
	movl	$788, %edi              # imm = 0x314
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_2:                               # %if.end
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	AREF
	movl	$788, %edi              # imm = 0x314
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB32_4
# BB#3:                                 # %if.then.8
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_4:                               # %if.end.9
	movl	$2, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB32_5
	jmp	.LBB32_6
.LBB32_5:                               # %if.then.12
	movl	$788, %edi              # imm = 0x314
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_6:                               # %if.end.14
	movl	$788, %edi              # imm = 0x314
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	AREF
	movl	$973, %edi              # imm = 0x3CD
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB32_8
# BB#7:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	callq	AREF
	movq	%rax, -112(%rbp)        # 8-byte Spill
	jmp	.LBB32_12
.LBB32_8:                               # %cond.false
	movl	$351, %edi              # imm = 0x15F
	movq	-40(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB32_10
# BB#9:                                 # %cond.true.24
	movl	$1, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	callq	AREF
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB32_11
.LBB32_10:                              # %cond.false.26
	movl	$2, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	callq	AREF
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB32_11:                              # %cond.end
	movq	-128(%rbp), %rax        # 8-byte Reload
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB32_12:                              # %cond.end.28
	movq	-112(%rbp), %rax        # 8-byte Reload
	movq	%rax, -8(%rbp)
.LBB32_13:                              # %return
	movq	-8(%rbp), %rax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end32:
	.size	raw_text_coding_system, .Lfunc_end32-raw_text_coding_system
	.cfi_endproc

	.globl	raw_text_coding_system_p
	.align	16, 0x90
	.type	raw_text_coding_system_p,@function
raw_text_coding_system_p:               # @raw_text_coding_system_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp99:
	.cfi_def_cfa_offset 16
.Ltmp100:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp101:
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movb	%al, %cl
	movabsq	$decode_coding_raw_text, %rdx
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	cmpq	%rdx, 600(%rdi)
	movb	%cl, -9(%rbp)           # 1-byte Spill
	jne	.LBB33_2
# BB#1:                                 # %land.rhs
	movabsq	$encode_coding_raw_text, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rax, 608(%rcx)
	sete	%dl
	movb	%dl, -9(%rbp)           # 1-byte Spill
.LBB33_2:                               # %land.end
	movb	-9(%rbp), %al           # 1-byte Reload
	xorl	%ecx, %ecx
	movl	$1, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	cmpl	$0, %ecx
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end33:
	.size	raw_text_coding_system_p, .Lfunc_end33-raw_text_coding_system_p
	.cfi_endproc

	.globl	coding_inherit_eol_type
	.align	16, 0x90
	.type	coding_inherit_eol_type,@function
coding_inherit_eol_type:                # @coding_inherit_eol_type
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp102:
	.cfi_def_cfa_offset 16
.Ltmp103:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp104:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movl	%eax, %edi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB34_2
# BB#1:                                 # %if.then
	movl	$788, %edi              # imm = 0x314
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB34_8
.LBB34_2:                               # %if.else
	jmp	.LBB34_3
.LBB34_3:                               # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB34_6
# BB#4:                                 # %land.lhs.true
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_6
# BB#5:                                 # %if.then.8
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB34_6:                               # %if.end
	jmp	.LBB34_7
.LBB34_7:                               # %do.end
	jmp	.LBB34_8
.LBB34_8:                               # %if.end.10
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB34_9
	jmp	.LBB34_28
.LBB34_9:                               # %if.then.15
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB34_18
# BB#10:                                # %if.then.18
	jmp	.LBB34_11
.LBB34_11:                              # %do.body.19
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB34_14
# BB#12:                                # %land.lhs.true.23
	movq	-16(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_14
# BB#13:                                # %if.then.27
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -112(%rbp)        # 8-byte Spill
.LBB34_14:                              # %if.end.29
	jmp	.LBB34_15
.LBB34_15:                              # %do.end.30
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -120(%rbp)        # 8-byte Spill
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	-120(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB34_16
	jmp	.LBB34_17
.LBB34_16:                              # %if.then.35
	movq	system_eol_type, %rax
	movq	%rax, -40(%rbp)
.LBB34_17:                              # %if.end.36
	jmp	.LBB34_19
.LBB34_18:                              # %if.else.37
	movq	system_eol_type, %rax
	movq	%rax, -40(%rbp)
.LBB34_19:                              # %if.end.38
	movl	$973, %edi              # imm = 0x3CD
	movq	-40(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_21
# BB#20:                                # %if.then.41
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, -8(%rbp)
	jmp	.LBB34_27
.LBB34_21:                              # %if.else.43
	movl	$351, %edi              # imm = 0x15F
	movq	-40(%rbp), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_23
# BB#22:                                # %if.then.46
	movl	$1, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, -8(%rbp)
	jmp	.LBB34_26
.LBB34_23:                              # %if.else.48
	movl	$635, %edi              # imm = 0x27B
	movq	-40(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB34_25
# BB#24:                                # %if.then.51
	movl	$2, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, -8(%rbp)
.LBB34_25:                              # %if.end.53
	jmp	.LBB34_26
.LBB34_26:                              # %if.end.54
	jmp	.LBB34_27
.LBB34_27:                              # %if.end.55
	jmp	.LBB34_28
.LBB34_28:                              # %if.end.56
	movq	-8(%rbp), %rax
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end34:
	.size	coding_inherit_eol_type, .Lfunc_end34-coding_inherit_eol_type
	.cfi_endproc

	.globl	complement_process_encoding_system
	.align	16, 0x90
	.type	complement_process_encoding_system,@function
complement_process_encoding_system:     # @complement_process_encoding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp105:
	.cfi_def_cfa_offset 16
.Ltmp106:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp107:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
	movl	$0, -44(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -44(%rbp)
	jge	.LBB35_20
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB35_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB35_1 Depth=1
	movq	globals+496, %rdi
	callq	CDR_SAFE
	movq	%rax, -8(%rbp)
	jmp	.LBB35_7
.LBB35_4:                               # %if.else
                                        #   in Loop: Header=BB35_1 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB35_6
# BB#5:                                 # %if.then.5
                                        #   in Loop: Header=BB35_1 Depth=1
	callq	preferred_coding_system
	movq	%rax, -8(%rbp)
.LBB35_6:                               # %if.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %if.end.7
                                        #   in Loop: Header=BB35_1 Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -56(%rbp)         # 8-byte Spill
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdi         # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB35_9
# BB#8:                                 # %if.then.12
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_19
.LBB35_9:                               # %if.end.13
                                        #   in Loop: Header=BB35_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB35_12
# BB#10:                                # %land.lhs.true
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$3, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	movl	$958, %edi              # imm = 0x3BE
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB35_12
# BB#11:                                # %if.then.20
                                        #   in Loop: Header=BB35_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	movq	%rax, -16(%rbp)
.LBB35_12:                              # %if.end.22
                                        #   in Loop: Header=BB35_1 Depth=1
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB35_15
# BB#13:                                # %land.lhs.true.25
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB35_15
# BB#14:                                # %if.then.28
                                        #   in Loop: Header=BB35_1 Depth=1
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB35_15:                              # %if.end.29
                                        #   in Loop: Header=BB35_1 Depth=1
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB35_18
# BB#16:                                # %land.lhs.true.32
                                        #   in Loop: Header=BB35_1 Depth=1
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB35_18
# BB#17:                                # %if.then.35
	jmp	.LBB35_20
.LBB35_18:                              # %if.end.36
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_19
.LBB35_19:                              # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_1
.LBB35_20:                              # %for.end
	cmpl	$0, -44(%rbp)
	jle	.LBB35_22
# BB#21:                                # %if.then.38
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	coding_inherit_eol_type
	movq	%rax, -8(%rbp)
.LBB35_22:                              # %if.end.40
	movq	-8(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end35:
	.size	complement_process_encoding_system, .Lfunc_end35-complement_process_encoding_system
	.cfi_endproc

	.globl	preferred_coding_system
	.align	16, 0x90
	.type	preferred_coding_system,@function
preferred_coding_system:                # @preferred_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp108:
	.cfi_def_cfa_offset 16
.Ltmp109:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp110:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movabsq	$coding_categories, %rax
	movl	coding_priorities, %ecx
	movl	%ecx, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	%eax, %ecx
	movl	%ecx, -4(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movslq	-4(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end36:
	.size	preferred_coding_system, .Lfunc_end36-preferred_coding_system
	.cfi_endproc

	.globl	code_conversion_save
	.align	16, 0x90
	.type	code_conversion_save,@function
code_conversion_save:                   # @code_conversion_save
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp111:
	.cfi_def_cfa_offset 16
.Ltmp112:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp113:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%sil, %al
	movb	%dil, %cl
	xorl	%edi, %edi
	andb	$1, %cl
	movb	%cl, -1(%rbp)
	andb	$1, %al
	movb	%al, -2(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -16(%rbp)
	testb	$1, -1(%rbp)
	je	.LBB37_2
# BB#1:                                 # %if.then
	movb	-2(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	callq	make_conversion_work_buffer
	movq	%rax, -16(%rbp)
.LBB37_2:                               # %if.end
	callq	Fcurrent_buffer
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movabsq	$code_conversion_restore, %rdi
	movq	%rax, %rsi
	callq	record_unwind_protect
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end37:
	.size	code_conversion_save, .Lfunc_end37-code_conversion_save
	.cfi_endproc

	.align	16, 0x90
	.type	make_conversion_work_buffer,@function
make_conversion_work_buffer:            # @make_conversion_work_buffer
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp114:
	.cfi_def_cfa_offset 16
.Ltmp115:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp116:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	testb	$1, reused_workbuf_in_use
	je	.LBB38_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	movq	Vcode_conversion_workbuf_name, %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fgenerate_new_buffer_name
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	Fget_buffer_create
	movq	%rax, -24(%rbp)
	jmp	.LBB38_5
.LBB38_2:                               # %if.else
	movb	$1, reused_workbuf_in_use
	movq	Vcode_conversion_reused_workbuf, %rdi
	callq	Fbuffer_live_p
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB38_4
# BB#3:                                 # %if.then.5
	movq	Vcode_conversion_workbuf_name, %rdi
	callq	Fget_buffer_create
	movq	%rax, Vcode_conversion_reused_workbuf
.LBB38_4:                               # %if.end
	movq	Vcode_conversion_reused_workbuf, %rax
	movq	%rax, -24(%rbp)
.LBB38_5:                               # %if.end.7
	movq	current_buffer, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movl	$544, %edi              # imm = 0x220
	callq	builtin_lisp_symbol
	movq	%rax, %rdi
	callq	Fmake_local_variable
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fset
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	Ferase_buffer
	movl	$901, %edi              # imm = 0x385
	movq	current_buffer, %rsi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_undo_list
	movq	current_buffer, %rdi
	testb	$1, -1(%rbp)
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	je	.LBB38_7
# BB#6:                                 # %cond.true
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)         # 8-byte Spill
	jmp	.LBB38_8
.LBB38_7:                               # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB38_8:                               # %cond.end
	movq	-96(%rbp), %rax         # 8-byte Reload
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_enable_multibyte_characters
	movq	-32(%rbp), %rdi
	callq	set_buffer_internal
	movq	-24(%rbp), %rax
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end38:
	.size	make_conversion_work_buffer, .Lfunc_end38-make_conversion_work_buffer
	.cfi_endproc

	.align	16, 0x90
	.type	code_conversion_restore,@function
code_conversion_restore:                # @code_conversion_restore
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp117:
	.cfi_def_cfa_offset 16
.Ltmp118:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp119:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	subq	$3, %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	subq	$3, %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB39_5
# BB#1:                                 # %if.then
	movq	-24(%rbp), %rax
	cmpq	Vcode_conversion_reused_workbuf, %rax
	jne	.LBB39_3
# BB#2:                                 # %if.then.3
	movb	$0, reused_workbuf_in_use
	jmp	.LBB39_4
.LBB39_3:                               # %if.else
	movq	-24(%rbp), %rdi
	callq	Fkill_buffer
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB39_4:                               # %if.end
	jmp	.LBB39_5
.LBB39_5:                               # %if.end.5
	movq	-16(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end39:
	.size	code_conversion_restore, .Lfunc_end39-code_conversion_restore
	.cfi_endproc

	.globl	decode_coding_gap
	.align	16, 0x90
	.type	decode_coding_gap,@function
decode_coding_gap:                      # @decode_coding_gap
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp120:
	.cfi_def_cfa_offset 16
.Ltmp121:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp122:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -32(%rbp)
	callq	Fcurrent_buffer
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-8(%rbp), %rsi
	movq	%rax, 448(%rsi)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rsi
	movq	%rax, 432(%rsi)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rsi
	movq	%rax, 440(%rsi)
	movq	%rdx, %rax
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rsi
	movq	%rax, 416(%rsi)
	subq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 424(%rax)
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	setl	%r8b
	movq	-8(%rbp), %rax
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	movl	8(%rax), %r9d
	shll	$19, %ecx
	andl	$-524289, %r9d          # imm = 0xFFFFFFFFFFF7FFFF
	orl	%ecx, %r9d
	movl	%r9d, 8(%rax)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 488(%rdx)
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 464(%rdx)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	-8(%rbp), %rdx
	movq	%rax, 472(%rdx)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	sete	%r8b
	xorb	$-1, %r8b
	movq	-8(%rbp), %rax
	andb	$1, %r8b
	movzbl	%r8b, %ecx
	movl	8(%rax), %edi
	shll	$20, %ecx
	andl	$-1048577, %edi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%ecx, %edi
	movl	%edi, 8(%rax)
	movq	-8(%rbp), %rax
	movq	$-1, 360(%rax)
	movq	-8(%rbp), %rax
	movq	$-1, 376(%rax)
	movq	-8(%rbp), %rax
	movq	$-1, 368(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-117440513, %ecx       # imm = 0xFFFFFFFFF8FFFFFF
	movl	%ecx, 8(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$4096, %ecx             # imm = 0x1000
	cmpl	$0, %ecx
	je	.LBB40_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	detect_coding
.LBB40_2:                               # %if.end
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	testb	$1, globals+3377
	jne	.LBB40_48
# BB#3:                                 # %land.lhs.true
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB40_48
# BB#4:                                 # %land.lhs.true.25
	movl	$5, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB40_48
# BB#5:                                 # %land.lhs.true.29
	movl	$9, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB40_48
# BB#6:                                 # %land.lhs.true.33
	xorl	%esi, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rdi
	callq	get_translation_table
	xorl	%edi, %edi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB40_48
# BB#7:                                 # %if.then.37
	movq	-8(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jge	.LBB40_9
# BB#8:                                 # %if.then.40
	movq	-8(%rbp), %rdi
	callq	check_ascii
	movq	%rax, -16(%rbp)
.LBB40_9:                               # %if.end.42
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.LBB40_24
# BB#10:                                # %if.then.44
	movl	$3, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	movl	$988, %edi              # imm = 0x3DC
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB40_22
# BB#11:                                # %land.lhs.true.48
	movq	-8(%rbp), %rax
	movq	368(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	440(%rcx), %rax
	jne	.LBB40_22
# BB#12:                                # %if.then.52
	movq	-8(%rbp), %rax
	cmpq	$0, 376(%rax)
	jl	.LBB40_14
# BB#13:                                # %if.then.55
	movq	-8(%rbp), %rax
	movq	376(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB40_15
.LBB40_14:                              # %if.else
	movq	-8(%rbp), %rdi
	callq	check_utf_8
	movq	%rax, -16(%rbp)
.LBB40_15:                              # %if.end.58
	movq	-8(%rbp), %rax
	cmpl	$1, 16(%rax)
	je	.LBB40_21
# BB#16:                                # %land.lhs.true.60
	movq	-8(%rbp), %rax
	cmpq	$0, 360(%rax)
	jne	.LBB40_21
# BB#17:                                # %land.lhs.true.63
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movzbl	(%rax), %ecx
	cmpl	$239, %ecx
	jne	.LBB40_21
# BB#18:                                # %land.lhs.true.66
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movzbl	1(%rax), %ecx
	cmpl	$187, %ecx
	jne	.LBB40_21
# BB#19:                                # %land.lhs.true.72
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movzbl	2(%rax), %ecx
	cmpl	$191, %ecx
	jne	.LBB40_21
# BB#20:                                # %if.then.78
	movq	-16(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	440(%rax), %rcx
	subq	$3, %rcx
	movq	%rcx, 440(%rax)
.LBB40_21:                              # %if.end.82
	jmp	.LBB40_23
.LBB40_22:                              # %if.else.83
	movq	$-1, -16(%rbp)
.LBB40_23:                              # %if.end.84
	jmp	.LBB40_24
.LBB40_24:                              # %if.end.85
	cmpq	$0, -16(%rbp)
	jl	.LBB40_47
# BB#25:                                # %if.then.88
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB40_26
	jmp	.LBB40_29
.LBB40_26:                              # %if.then.94
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$24, %ecx
	andl	$7, %ecx
	cmpl	$0, %ecx
	je	.LBB40_28
# BB#27:                                # %if.then.101
	movq	-8(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$24, %ecx
	andl	$7, %ecx
	movl	%ecx, %esi
	callq	adjust_coding_eol_type
	movq	%rax, -48(%rbp)
.LBB40_28:                              # %if.end.107
	jmp	.LBB40_29
.LBB40_29:                              # %if.end.108
	movl	$635, %edi              # imm = 0x27B
	movq	-48(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB40_36
# BB#30:                                # %if.then.112
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	addq	24(%rsi), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	addq	40(%rsi), %rdx
	addq	$-1, %rdx
	movq	%rdx, -56(%rbp)
	movq	-56(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	440(%rsi), %rcx
	addq	%rcx, %rdx
	movq	%rdx, -64(%rbp)
.LBB40_31:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jae	.LBB40_35
# BB#32:                                # %while.body
                                        #   in Loop: Header=BB40_31 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -64(%rbp)
	movzbl	(%rax), %edx
	cmpl	$13, %edx
	jne	.LBB40_34
# BB#33:                                # %if.then.124
                                        #   in Loop: Header=BB40_31 Depth=1
	movq	-64(%rbp), %rax
	movb	$10, -1(%rax)
.LBB40_34:                              # %if.end.126
                                        #   in Loop: Header=BB40_31 Depth=1
	jmp	.LBB40_31
.LBB40_35:                              # %while.end
	jmp	.LBB40_46
.LBB40_36:                              # %if.else.127
	movl	$351, %edi              # imm = 0x15F
	movq	-48(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB40_45
# BB#37:                                # %if.then.131
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	addq	24(%rsi), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	addq	40(%rsi), %rdx
	addq	$-1, %rdx
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rdx
	movq	-8(%rbp), %rsi
	subq	440(%rsi), %rcx
	addq	%rcx, %rdx
	movq	%rdx, -80(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -88(%rbp)
.LBB40_38:                              # %while.cond.145
                                        # =>This Inner Loop Header: Depth=1
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jae	.LBB40_44
# BB#39:                                # %while.body.148
                                        #   in Loop: Header=BB40_38 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -72(%rbp)
	movb	-1(%rax), %dl
	movq	-88(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -88(%rbp)
	movb	%dl, -1(%rax)
	movq	-72(%rbp), %rax
	movzbl	(%rax), %esi
	cmpl	$10, %esi
	jne	.LBB40_43
# BB#40:                                # %land.lhs.true.154
                                        #   in Loop: Header=BB40_38 Depth=1
	movq	-72(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jbe	.LBB40_43
# BB#41:                                # %land.lhs.true.157
                                        #   in Loop: Header=BB40_38 Depth=1
	movq	-72(%rbp), %rax
	movzbl	-1(%rax), %ecx
	cmpl	$13, %ecx
	jne	.LBB40_43
# BB#42:                                # %if.then.162
                                        #   in Loop: Header=BB40_38 Depth=1
	movq	-72(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -72(%rbp)
.LBB40_43:                              # %if.end.164
                                        #   in Loop: Header=BB40_38 Depth=1
	jmp	.LBB40_38
.LBB40_44:                              # %while.end.165
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	-24(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -24(%rbp)
	movq	-96(%rbp), %rax
	movq	-16(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -16(%rbp)
.LBB40_45:                              # %if.end.168
	jmp	.LBB40_46
.LBB40_46:                              # %if.end.169
	movl	$1, %edx
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 384(%rcx)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 392(%rcx)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	insert_from_gap
	jmp	.LBB40_51
.LBB40_47:                              # %if.end.170
	jmp	.LBB40_48
.LBB40_48:                              # %if.end.171
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	code_conversion_save
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %esi
	shrl	$14, %esi
	andl	$31, %esi
	orl	$1, %esi
	movl	8(%rcx), %edi
	andl	$31, %esi
	shll	$14, %esi
	andl	$-507905, %edi          # imm = 0xFFFFFFFFFFF83FFF
	orl	%esi, %edi
	movl	%edi, 8(%rcx)
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movb	136(%rcx), %dl
	andb	$-2, %dl
	orb	$1, %dl
	movb	%dl, 136(%rcx)
	movq	-8(%rbp), %rdi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	decode_coding
	movl	$9, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movb	136(%rax), %dl
	andb	$-2, %dl
	movb	%dl, 136(%rax)
	movq	-40(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB40_50
# BB#49:                                # %if.then.192
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	current_buffer, %rdi
	movq	-8(%rbp), %rax
	movq	464(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	472(%rax), %rdx
	callq	temp_set_point_both
	movl	$9, %ecx
	movl	%ecx, %esi
	movq	-40(%rbp), %rdi
	callq	AREF
	movq	-8(%rbp), %rdx
	movq	392(%rdx), %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	call1
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	-104(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	392(%rdx), %rax
	movq	%rax, 392(%rdx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	subq	-112(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	384(%rdx), %rax
	movq	%rax, 384(%rdx)
.LBB40_50:                              # %if.end.211
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB40_51:                              # %return
	addq	$208, %rsp
	popq	%rbp
	retq
.Lfunc_end40:
	.size	decode_coding_gap, .Lfunc_end40-decode_coding_gap
	.cfi_endproc

	.align	16, 0x90
	.type	detect_coding,@function
detect_coding:                          # @detect_coding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp123:
	.cfi_def_cfa_offset 16
.Ltmp124:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp125:
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	movl	%ecx, -28(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 408(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 400(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 392(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 384(%rax)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rsi
	addq	440(%rsi), %rax
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-117440513, %ecx       # imm = 0xFFFFFFFFF8FFFFFF
	movl	%ecx, 8(%rax)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$3, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$958, %edi              # imm = 0x3BE
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB41_124
# BB#1:                                 # %if.then
	movb	$0, -73(%rbp)
	movb	$0, -74(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	movb	globals+3397, %cl
	andb	$1, %cl
	movzbl	%cl, %esi
	callq	inhibit_flag
	andb	$1, %al
	movb	%al, -75(%rbp)
	movq	-8(%rbp), %rdx
	movl	20(%rdx), %edi
	movb	globals+3392, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	inhibit_flag
	andb	$1, %al
	movb	%al, -76(%rbp)
	movq	-8(%rbp), %rdx
	movb	24(%rdx), %al
	andb	$1, %al
	movb	%al, -77(%rbp)
	movq	-8(%rbp), %rdx
	movq	$0, 360(%rdx)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movq	-8(%rbp), %rdx
	movq	456(%rdx), %rdx
	movq	%rdx, -16(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB41_48
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -52(%rbp)
	movl	-52(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB41_7
# BB#4:                                 # %if.then.29
                                        #   in Loop: Header=BB41_2 Depth=1
	movb	$1, -74(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB41_6
# BB#5:                                 # %if.then.31
	jmp	.LBB41_48
.LBB41_6:                               # %if.end
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_46
.LBB41_7:                               # %if.else
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$32, -52(%rbp)
	jge	.LBB41_42
# BB#8:                                 # %if.then.34
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$27, -52(%rbp)
	je	.LBB41_11
# BB#9:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$15, -52(%rbp)
	je	.LBB41_11
# BB#10:                                # %lor.lhs.false.39
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$14, -52(%rbp)
	jne	.LBB41_18
.LBB41_11:                              # %land.lhs.true
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$1, -76(%rbp)
	jne	.LBB41_18
# BB#12:                                # %land.lhs.true.43
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB41_18
# BB#13:                                # %if.then.46
                                        #   in Loop: Header=BB41_2 Depth=1
	leaq	-72(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	detect_coding_iso_2022
	testb	$1, %al
	jne	.LBB41_14
	jmp	.LBB41_17
.LBB41_14:                              # %if.then.48
	movl	-64(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	jne	.LBB41_16
# BB#15:                                # %if.then.52
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 360(%rcx)
.LBB41_16:                              # %if.end.55
	movl	-64(%rbp), %eax
	orl	$-52, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB41_48
.LBB41_17:                              # %if.end.57
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_39
.LBB41_18:                              # %if.else.58
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB41_23
# BB#19:                                # %land.lhs.true.60
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$1, -75(%rbp)
	jne	.LBB41_23
# BB#20:                                # %if.then.62
                                        #   in Loop: Header=BB41_2 Depth=1
	movb	$1, -73(%rbp)
	testb	$1, -74(%rbp)
	je	.LBB41_22
# BB#21:                                # %if.then.64
	jmp	.LBB41_48
.LBB41_22:                              # %if.end.65
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_38
.LBB41_23:                              # %if.else.66
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$1, globals+3377
	jne	.LBB41_37
# BB#24:                                # %land.lhs.true.68
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$1, globals+3389
	jne	.LBB41_37
# BB#25:                                # %if.then.70
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$13, -52(%rbp)
	jne	.LBB41_33
# BB#26:                                # %if.then.73
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB41_31
# BB#27:                                # %land.lhs.true.76
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-16(%rbp), %rax
	movzbl	1(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB41_31
# BB#28:                                # %if.then.80
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$24, %ecx
	andl	$7, %ecx
	orl	$4, %ecx
	movl	8(%rax), %edx
	andl	$7, %ecx
	shll	$24, %ecx
	andl	$-117440513, %edx       # imm = 0xFFFFFFFFF8FFFFFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	testb	$1, -74(%rbp)
	jne	.LBB41_30
# BB#29:                                # %if.then.89
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-8(%rbp), %rax
	movq	360(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 360(%rax)
.LBB41_30:                              # %if.end.91
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_32
.LBB41_31:                              # %if.else.92
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$24, %ecx
	andl	$7, %ecx
	orl	$2, %ecx
	movl	8(%rax), %edx
	andl	$7, %ecx
	shll	$24, %ecx
	andl	$-117440513, %edx       # imm = 0xFFFFFFFFF8FFFFFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB41_32:                              # %if.end.103
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_36
.LBB41_33:                              # %if.else.104
                                        #   in Loop: Header=BB41_2 Depth=1
	cmpl	$10, -52(%rbp)
	jne	.LBB41_35
# BB#34:                                # %if.then.107
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$24, %ecx
	andl	$7, %ecx
	orl	$1, %ecx
	movl	8(%rax), %edx
	andl	$7, %ecx
	shll	$24, %ecx
	andl	$-117440513, %edx       # imm = 0xFFFFFFFFF8FFFFFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
.LBB41_35:                              # %if.end.118
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_36
.LBB41_36:                              # %if.end.119
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_37
.LBB41_37:                              # %if.end.120
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_38
.LBB41_38:                              # %if.end.121
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_39
.LBB41_39:                              # %if.end.122
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$1, -74(%rbp)
	jne	.LBB41_41
# BB#40:                                # %if.then.124
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-8(%rbp), %rax
	movq	360(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 360(%rax)
.LBB41_41:                              # %if.end.127
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_45
.LBB41_42:                              # %if.else.128
                                        #   in Loop: Header=BB41_2 Depth=1
	testb	$1, -74(%rbp)
	jne	.LBB41_44
# BB#43:                                # %if.then.130
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-8(%rbp), %rax
	movq	360(%rax), %rcx
	addq	$1, %rcx
	movq	%rcx, 360(%rax)
.LBB41_44:                              # %if.end.133
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_45
.LBB41_45:                              # %if.end.134
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_46
.LBB41_46:                              # %if.end.135
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_47
.LBB41_47:                              # %for.inc
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB41_2
.LBB41_48:                              # %for.end
	testb	$1, -73(%rbp)
	jne	.LBB41_52
# BB#49:                                # %lor.lhs.false.139
	testb	$1, -74(%rbp)
	jne	.LBB41_52
# BB#50:                                # %lor.lhs.false.142
	movq	-8(%rbp), %rax
	movq	360(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	440(%rcx), %rax
	jl	.LBB41_52
# BB#51:                                # %lor.lhs.false.147
	cmpl	$0, -68(%rbp)
	je	.LBB41_123
.LBB41_52:                              # %if.then.150
	movq	-8(%rbp), %rax
	movq	360(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	440(%rcx), %rax
	jne	.LBB41_60
# BB#53:                                # %if.then.155
	movl	$0, -56(%rbp)
.LBB41_54:                              # %for.cond.156
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$19, -56(%rbp)
	jge	.LBB41_59
# BB#55:                                # %for.body.159
                                        #   in Loop: Header=BB41_54 Depth=1
	movl	$1, %eax
	movabsq	$coding_categories, %rcx
	movslq	-56(%rbp), %rdx
	movl	coding_priorities(,%rdx,4), %esi
	movl	%esi, -84(%rbp)
	movl	-84(%rbp), %esi
	movl	%esi, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rcx
	movq	%rcx, -96(%rbp)
	movl	-68(%rbp), %esi
	movl	-84(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %esi
	cmpl	$0, %esi
	je	.LBB41_57
# BB#56:                                # %if.then.165
	jmp	.LBB41_59
.LBB41_57:                              # %if.end.166
                                        #   in Loop: Header=BB41_54 Depth=1
	jmp	.LBB41_58
.LBB41_58:                              # %for.inc.167
                                        #   in Loop: Header=BB41_54 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_54
.LBB41_59:                              # %for.end.169
	jmp	.LBB41_85
.LBB41_60:                              # %if.else.170
	testb	$1, -73(%rbp)
	je	.LBB41_62
# BB#61:                                # %if.then.172
	movl	-72(%rbp), %eax
	orl	$-15873, %eax           # imm = 0xFFFFFFFFFFFFC1FF
	movl	%eax, -72(%rbp)
	movl	-64(%rbp), %eax
	orl	$-15873, %eax           # imm = 0xFFFFFFFFFFFFC1FF
	movl	%eax, -64(%rbp)
	jmp	.LBB41_66
.LBB41_62:                              # %if.else.177
	testb	$1, -77(%rbp)
	je	.LBB41_65
# BB#63:                                # %land.lhs.true.180
	leaq	-72(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	detect_coding_utf_8
	testb	$1, %al
	jne	.LBB41_64
	jmp	.LBB41_65
.LBB41_64:                              # %if.then.183
	movl	-72(%rbp), %eax
	orl	$-449, %eax             # imm = 0xFFFFFFFFFFFFFE3F
	movl	%eax, -72(%rbp)
	movl	-64(%rbp), %eax
	orl	$-449, %eax             # imm = 0xFFFFFFFFFFFFFE3F
	movl	%eax, -64(%rbp)
.LBB41_65:                              # %if.end.188
	jmp	.LBB41_66
.LBB41_66:                              # %if.end.189
	movl	$0, -56(%rbp)
.LBB41_67:                              # %for.cond.190
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$19, -56(%rbp)
	jge	.LBB41_84
# BB#68:                                # %for.body.193
                                        #   in Loop: Header=BB41_67 Depth=1
	movabsq	$coding_categories, %rax
	movslq	-56(%rbp), %rcx
	movl	coding_priorities(,%rcx,4), %edx
	movl	%edx, -84(%rbp)
	movl	-84(%rbp), %edx
	movl	%edx, %ecx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-96(%rbp), %rax
	cmpq	$0, (%rax)
	jge	.LBB41_70
# BB#69:                                # %if.then.203
                                        #   in Loop: Header=BB41_67 Depth=1
	movl	$1, %eax
	movl	-84(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	orl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB41_82
.LBB41_70:                              # %if.else.207
                                        #   in Loop: Header=BB41_67 Depth=1
	cmpl	$19, -84(%rbp)
	jb	.LBB41_72
# BB#71:                                # %if.then.210
                                        #   in Loop: Header=BB41_67 Depth=1
	jmp	.LBB41_83
.LBB41_72:                              # %if.else.211
                                        #   in Loop: Header=BB41_67 Depth=1
	movl	$1, %eax
	movl	-72(%rbp), %ecx
	movl	-84(%rbp), %edx
	movl	%ecx, -180(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-180(%rbp), %edx        # 4-byte Reload
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB41_76
# BB#73:                                # %if.then.216
                                        #   in Loop: Header=BB41_67 Depth=1
	movl	$1, %eax
	movl	-68(%rbp), %ecx
	movl	-84(%rbp), %edx
	movl	%ecx, -184(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-184(%rbp), %edx        # 4-byte Reload
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB41_75
# BB#74:                                # %if.then.221
	jmp	.LBB41_84
.LBB41_75:                              # %if.end.222
                                        #   in Loop: Header=BB41_67 Depth=1
	jmp	.LBB41_80
.LBB41_76:                              # %if.else.223
                                        #   in Loop: Header=BB41_67 Depth=1
	leaq	-72(%rbp), %rsi
	movq	-96(%rbp), %rax
	movq	592(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	testb	$1, %al
	jne	.LBB41_77
	jmp	.LBB41_79
.LBB41_77:                              # %land.lhs.true.226
                                        #   in Loop: Header=BB41_67 Depth=1
	movl	$1, %eax
	movl	-68(%rbp), %ecx
	movl	-84(%rbp), %edx
	movl	%ecx, -188(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-188(%rbp), %edx        # 4-byte Reload
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB41_79
# BB#78:                                # %if.then.231
	jmp	.LBB41_84
.LBB41_79:                              # %if.end.232
                                        #   in Loop: Header=BB41_67 Depth=1
	jmp	.LBB41_80
.LBB41_80:                              # %if.end.233
                                        #   in Loop: Header=BB41_67 Depth=1
	jmp	.LBB41_81
.LBB41_81:                              # %if.end.234
                                        #   in Loop: Header=BB41_67 Depth=1
	jmp	.LBB41_82
.LBB41_82:                              # %if.end.235
                                        #   in Loop: Header=BB41_67 Depth=1
	jmp	.LBB41_83
.LBB41_83:                              # %for.inc.236
                                        #   in Loop: Header=BB41_67 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_67
.LBB41_84:                              # %for.end.238
	jmp	.LBB41_85
.LBB41_85:                              # %if.end.239
	cmpl	$19, -56(%rbp)
	jge	.LBB41_107
# BB#86:                                # %if.then.242
	cmpl	$6, -84(%rbp)
	jne	.LBB41_94
# BB#87:                                # %if.then.245
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$24, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB41_92
# BB#88:                                # %if.then.255
	movl	-68(%rbp), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB41_90
# BB#89:                                # %if.then.259
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB41_91
.LBB41_90:                              # %if.else.260
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB41_91:                              # %if.end.262
	jmp	.LBB41_93
.LBB41_92:                              # %if.else.263
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, -40(%rbp)
.LBB41_93:                              # %if.end.267
	jmp	.LBB41_106
.LBB41_94:                              # %if.else.268
	cmpl	$9, -84(%rbp)
	jne	.LBB41_104
# BB#95:                                # %if.then.271
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$24, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB41_102
# BB#96:                                # %if.then.282
	movl	-68(%rbp), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB41_98
# BB#97:                                # %if.then.286
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB41_101
.LBB41_98:                              # %if.else.289
	movl	-68(%rbp), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB41_100
# BB#99:                                # %if.then.293
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB41_100:                             # %if.end.297
	jmp	.LBB41_101
.LBB41_101:                             # %if.end.298
	jmp	.LBB41_103
.LBB41_102:                             # %if.else.299
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, -40(%rbp)
.LBB41_103:                             # %if.end.303
	jmp	.LBB41_105
.LBB41_104:                             # %if.else.304
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, -40(%rbp)
.LBB41_105:                             # %if.end.308
	jmp	.LBB41_106
.LBB41_106:                             # %if.end.309
	jmp	.LBB41_122
.LBB41_107:                             # %if.else.310
	testb	$1, -73(%rbp)
	je	.LBB41_109
# BB#108:                               # %if.then.312
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	jmp	.LBB41_121
.LBB41_109:                             # %if.else.314
	movl	-64(%rbp), %eax
	andl	$524287, %eax           # imm = 0x7FFFF
	cmpl	$524287, %eax           # imm = 0x7FFFF
	jne	.LBB41_111
# BB#110:                               # %if.then.319
	movl	$788, %edi              # imm = 0x314
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	jmp	.LBB41_120
.LBB41_111:                             # %if.else.321
	cmpl	$0, -64(%rbp)
	je	.LBB41_119
# BB#112:                               # %if.then.324
	movl	$0, -56(%rbp)
.LBB41_113:                             # %for.cond.325
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$19, -56(%rbp)
	jge	.LBB41_118
# BB#114:                               # %for.body.328
                                        #   in Loop: Header=BB41_113 Depth=1
	movl	$1, %eax
	movl	-64(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	movl	coding_priorities(,%rdx,4), %esi
	movl	%ecx, -192(%rbp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-192(%rbp), %esi        # 4-byte Reload
	andl	%eax, %esi
	cmpl	$0, %esi
	jne	.LBB41_116
# BB#115:                               # %if.then.335
	movabsq	$coding_categories, %rax
	movslq	-56(%rbp), %rcx
	movl	coding_priorities(,%rcx,4), %edx
	movl	%edx, %ecx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-96(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, -40(%rbp)
	jmp	.LBB41_118
.LBB41_116:                             # %if.end.343
                                        #   in Loop: Header=BB41_113 Depth=1
	jmp	.LBB41_117
.LBB41_117:                             # %for.inc.344
                                        #   in Loop: Header=BB41_113 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB41_113
.LBB41_118:                             # %for.end.346
	jmp	.LBB41_119
.LBB41_119:                             # %if.end.347
	jmp	.LBB41_120
.LBB41_120:                             # %if.end.348
	jmp	.LBB41_121
.LBB41_121:                             # %if.end.349
	jmp	.LBB41_122
.LBB41_122:                             # %if.end.350
	jmp	.LBB41_123
.LBB41_123:                             # %if.end.351
	jmp	.LBB41_149
.LBB41_124:                             # %if.else.352
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$14, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	cmpq	$6, %rax
	jne	.LBB41_137
# BB#125:                               # %if.then.360
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$24, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -120(%rbp)
	movl	$0, -128(%rbp)
	movl	$0, -132(%rbp)
	movq	-8(%rbp), %rdi
	callq	check_ascii
	movq	-8(%rbp), %rsi
	cmpq	440(%rsi), %rax
	jne	.LBB41_129
# BB#126:                               # %if.then.374
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB41_128
# BB#127:                               # %if.then.379
	movq	-120(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB41_128:                             # %if.end.383
	jmp	.LBB41_136
.LBB41_129:                             # %if.else.384
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB41_135
# BB#130:                               # %land.lhs.true.389
	leaq	-136(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	detect_coding_utf_8
	testb	$1, %al
	jne	.LBB41_131
	jmp	.LBB41_135
.LBB41_131:                             # %if.then.392
	movl	-132(%rbp), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB41_133
# BB#132:                               # %if.then.396
	movq	-120(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB41_134
.LBB41_133:                             # %if.else.399
	movq	-120(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB41_134:                             # %if.end.403
	jmp	.LBB41_135
.LBB41_135:                             # %if.end.404
	jmp	.LBB41_136
.LBB41_136:                             # %if.end.405
	jmp	.LBB41_148
.LBB41_137:                             # %if.else.406
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$14, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	cmpq	$9, %rax
	jne	.LBB41_147
# BB#138:                               # %if.then.415
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$24, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -144(%rbp)
	movl	$0, -152(%rbp)
	movl	$0, -156(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, 360(%rax)
	movq	-144(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB41_146
# BB#139:                               # %land.lhs.true.430
	leaq	-160(%rbp), %rsi
	movq	-8(%rbp), %rdi
	callq	detect_coding_utf_16
	testb	$1, %al
	jne	.LBB41_140
	jmp	.LBB41_146
.LBB41_140:                             # %if.then.433
	movl	-156(%rbp), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB41_142
# BB#141:                               # %if.then.437
	movq	-144(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB41_145
.LBB41_142:                             # %if.else.440
	movl	-156(%rbp), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB41_144
# BB#143:                               # %if.then.444
	movq	-144(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB41_144:                             # %if.end.448
	jmp	.LBB41_145
.LBB41_145:                             # %if.end.449
	jmp	.LBB41_146
.LBB41_146:                             # %if.end.450
	jmp	.LBB41_147
.LBB41_147:                             # %if.end.451
	jmp	.LBB41_148
.LBB41_148:                             # %if.end.452
	jmp	.LBB41_149
.LBB41_149:                             # %if.end.453
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB41_159
# BB#150:                               # %if.then.457
	movq	-48(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB41_151
	jmp	.LBB41_152
.LBB41_151:                             # %cond.true
	xorl	%eax, %eax
	movl	%eax, -204(%rbp)        # 4-byte Spill
	jmp	.LBB41_156
.LBB41_152:                             # %cond.false
	movl	$351, %edi              # imm = 0x15F
	movq	-48(%rbp), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB41_154
# BB#153:                               # %cond.true.463
	movl	$4, %eax
	movl	%eax, -220(%rbp)        # 4-byte Spill
	jmp	.LBB41_155
.LBB41_154:                             # %cond.false.464
	movl	$635, %edi              # imm = 0x27B
	movq	-48(%rbp), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	movl	$2, %ecx
	movq	-232(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -220(%rbp)        # 4-byte Spill
.LBB41_155:                             # %cond.end
	movl	-220(%rbp), %eax        # 4-byte Reload
	movl	%eax, -204(%rbp)        # 4-byte Spill
.LBB41_156:                             # %cond.end.469
	movl	-204(%rbp), %eax        # 4-byte Reload
	movl	%eax, -164(%rbp)
	movq	-40(%rbp), %rdi
	movq	-8(%rbp), %rsi
	callq	setup_coding_system
	cmpl	$0, -164(%rbp)
	je	.LBB41_158
# BB#157:                               # %if.then.473
	movq	-8(%rbp), %rdi
	movl	-164(%rbp), %esi
	callq	adjust_coding_eol_type
	movq	%rax, -240(%rbp)        # 8-byte Spill
.LBB41_158:                             # %if.end.475
	jmp	.LBB41_159
.LBB41_159:                             # %if.end.476
	movl	-28(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %edx
	andl	$31, %eax
	shll	$14, %eax
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%eax, %edx
	movl	%edx, 8(%rcx)
	addq	$240, %rsp
	popq	%rbp
	retq
.Lfunc_end41:
	.size	detect_coding, .Lfunc_end41-detect_coding
	.cfi_endproc

	.align	16, 0x90
	.type	get_translation_table,@function
get_translation_table:                  # @get_translation_table
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp126:
	.cfi_def_cfa_offset 16
.Ltmp127:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp128:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movb	%sil, %al
	xorl	%esi, %esi
	movq	%rdi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	%rdx, -32(%rbp)
	movq	globals+640, %rdx
	movl	%esi, %edi
	movq	%rdx, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB42_4
# BB#1:                                 # %if.then
	cmpq	$0, -32(%rbp)
	je	.LBB42_3
# BB#2:                                 # %if.then.1
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
.LBB42_3:                               # %if.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB42_54
.LBB42_4:                               # %if.end.3
	testb	$1, -17(%rbp)
	je	.LBB42_6
# BB#5:                                 # %if.then.5
	movl	$7, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	globals+2232, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB42_7
.LBB42_6:                               # %if.else
	movl	$6, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	movq	%rax, -48(%rbp)
	movq	globals+2224, %rax
	movq	%rax, -40(%rbp)
.LBB42_7:                               # %if.end.8
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB42_9
# BB#8:                                 # %if.then.11
	movq	-40(%rbp), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB42_26
.LBB42_9:                               # %if.else.12
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB42_11
# BB#10:                                # %if.then.15
	movl	$934, %edi              # imm = 0x3A6
	movq	-48(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	%rax, -48(%rbp)
	jmp	.LBB42_20
.LBB42_11:                              # %if.else.18
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB42_19
# BB#12:                                # %if.then.23
	movq	-48(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB42_13:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB42_18
# BB#14:                                # %for.body
                                        #   in Loop: Header=BB42_13 Depth=1
	movq	-56(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB42_16
# BB#15:                                # %if.then.33
                                        #   in Loop: Header=BB42_13 Depth=1
	movl	$934, %edi              # imm = 0x3A6
	movq	-56(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
.LBB42_16:                              # %if.end.38
                                        #   in Loop: Header=BB42_13 Depth=1
	jmp	.LBB42_17
.LBB42_17:                              # %for.inc
                                        #   in Loop: Header=BB42_13 Depth=1
	movq	-56(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB42_13
.LBB42_18:                              # %for.end
	jmp	.LBB42_19
.LBB42_19:                              # %if.end.40
	jmp	.LBB42_20
.LBB42_20:                              # %if.end.41
	movq	-40(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB42_21
	jmp	.LBB42_25
.LBB42_21:                              # %if.then.43
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB42_23
# BB#22:                                # %if.then.48
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	%rdi, -120(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	list1
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	nconc2
	movq	%rax, -48(%rbp)
	jmp	.LBB42_24
.LBB42_23:                              # %if.else.51
	movq	-48(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	list2
	movq	%rax, -48(%rbp)
.LBB42_24:                              # %if.end.53
	jmp	.LBB42_25
.LBB42_25:                              # %if.end.54
	jmp	.LBB42_26
.LBB42_26:                              # %if.end.55
	cmpq	$0, -32(%rbp)
	je	.LBB42_53
# BB#27:                                # %if.then.57
	movq	-32(%rbp), %rax
	movl	$1, (%rax)
	movq	-48(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB42_28
	jmp	.LBB42_36
.LBB42_28:                              # %land.lhs.true
	movq	-48(%rbp), %rdi
	callq	XCHAR_TABLE
	movq	%rax, %rdi
	callq	CHAR_TABLE_EXTRA_SLOTS
	cmpl	$1, %eax
	jle	.LBB42_36
# BB#29:                                # %if.then.64
	movq	-48(%rbp), %rdi
	callq	XCHAR_TABLE
	movq	560(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB42_30
	jmp	.LBB42_35
.LBB42_30:                              # %land.lhs.true.68
	movq	-32(%rbp), %rax
	movslq	(%rax), %rax
	movq	-56(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jge	.LBB42_35
# BB#31:                                # %if.then.72
	movq	-56(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4096, %rax             # imm = 0x1000
	jge	.LBB42_33
# BB#32:                                # %cond.true
	movq	-56(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB42_34
.LBB42_33:                              # %cond.false
	movl	$4096, %eax             # imm = 0x1000
	movl	%eax, %ecx
	movq	%rcx, -128(%rbp)        # 8-byte Spill
	jmp	.LBB42_34
.LBB42_34:                              # %cond.end
	movq	-128(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
.LBB42_35:                              # %if.end.78
	jmp	.LBB42_52
.LBB42_36:                              # %if.else.79
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB42_51
# BB#37:                                # %if.then.84
	movq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB42_38:                              # %for.cond.85
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB42_50
# BB#39:                                # %for.body.90
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB42_40
	jmp	.LBB42_48
.LBB42_40:                              # %land.lhs.true.95
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	XCHAR_TABLE
	movq	%rax, %rdi
	callq	CHAR_TABLE_EXTRA_SLOTS
	cmpl	$1, %eax
	jle	.LBB42_48
# BB#41:                                # %if.then.102
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	XCHAR_TABLE
	movq	560(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB42_42
	jmp	.LBB42_47
.LBB42_42:                              # %land.lhs.true.110
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-32(%rbp), %rax
	movslq	(%rax), %rax
	movq	-72(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jge	.LBB42_47
# BB#43:                                # %if.then.115
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-72(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4096, %rax             # imm = 0x1000
	jge	.LBB42_45
# BB#44:                                # %cond.true.119
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-72(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB42_46
.LBB42_45:                              # %cond.false.121
                                        #   in Loop: Header=BB42_38 Depth=1
	movl	$4096, %eax             # imm = 0x1000
	movl	%eax, %ecx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB42_46
.LBB42_46:                              # %cond.end.122
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, (%rax)
.LBB42_47:                              # %if.end.125
                                        #   in Loop: Header=BB42_38 Depth=1
	jmp	.LBB42_48
.LBB42_48:                              # %if.end.126
                                        #   in Loop: Header=BB42_38 Depth=1
	jmp	.LBB42_49
.LBB42_49:                              # %for.inc.127
                                        #   in Loop: Header=BB42_38 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB42_38
.LBB42_50:                              # %for.end.131
	jmp	.LBB42_51
.LBB42_51:                              # %if.end.132
	jmp	.LBB42_52
.LBB42_52:                              # %if.end.133
	jmp	.LBB42_53
.LBB42_53:                              # %if.end.134
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB42_54:                              # %return
	movq	-8(%rbp), %rax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end42:
	.size	get_translation_table, .Lfunc_end42-get_translation_table
	.cfi_endproc

	.align	16, 0x90
	.type	check_ascii,@function
check_ascii:                            # @check_ascii
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp129:
	.cfi_def_cfa_offset 16
.Ltmp130:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp131:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$24, %ecx
	andl	$7, %ecx
	movl	%ecx, -36(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rsi
	addq	440(%rsi), %rax
	movq	%rax, -24(%rbp)
	testb	$1, globals+3389
	jne	.LBB43_2
# BB#1:                                 # %lor.lhs.false
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB43_10
.LBB43_2:                               # %if.then
	jmp	.LBB43_3
.LBB43_3:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	cmpq	-24(%rbp), %rdx
	movb	%cl, -45(%rbp)          # 1-byte Spill
	jae	.LBB43_5
# BB#4:                                 # %land.rhs
                                        #   in Loop: Header=BB43_3 Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	setne	%dl
	xorb	$-1, %dl
	movb	%dl, -45(%rbp)          # 1-byte Spill
.LBB43_5:                               # %land.end
                                        #   in Loop: Header=BB43_3 Depth=1
	movb	-45(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB43_6
	jmp	.LBB43_9
.LBB43_6:                               # %while.body
                                        #   in Loop: Header=BB43_3 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	movzbl	(%rax), %edx
	cmpl	$10, %edx
	jne	.LBB43_8
# BB#7:                                 # %if.then.13
                                        #   in Loop: Header=BB43_3 Depth=1
	movl	-36(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB43_8:                               # %if.end
                                        #   in Loop: Header=BB43_3 Depth=1
	jmp	.LBB43_3
.LBB43_9:                               # %while.end
	jmp	.LBB43_33
.LBB43_10:                              # %if.else
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -24(%rbp)
.LBB43_11:                              # %while.cond.15
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB43_23
# BB#12:                                # %while.body.18
                                        #   in Loop: Header=BB43_11 Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -40(%rbp)
	movl	-40(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB43_14
# BB#13:                                # %if.then.22
	jmp	.LBB43_23
.LBB43_14:                              # %if.end.23
                                        #   in Loop: Header=BB43_11 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	cmpl	$13, -40(%rbp)
	jne	.LBB43_19
# BB#15:                                # %if.then.27
                                        #   in Loop: Header=BB43_11 Depth=1
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB43_17
# BB#16:                                # %if.then.31
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	-36(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -16(%rbp)
	jmp	.LBB43_18
.LBB43_17:                              # %if.else.34
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	-36(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB43_18:                              # %if.end.36
                                        #   in Loop: Header=BB43_11 Depth=1
	jmp	.LBB43_22
.LBB43_19:                              # %if.else.37
                                        #   in Loop: Header=BB43_11 Depth=1
	cmpl	$10, -40(%rbp)
	jne	.LBB43_21
# BB#20:                                # %if.then.40
                                        #   in Loop: Header=BB43_11 Depth=1
	movl	-36(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB43_21:                              # %if.end.42
                                        #   in Loop: Header=BB43_11 Depth=1
	jmp	.LBB43_22
.LBB43_22:                              # %if.end.43
                                        #   in Loop: Header=BB43_11 Depth=1
	jmp	.LBB43_11
.LBB43_23:                              # %while.end.44
	movq	-16(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.LBB43_32
# BB#24:                                # %if.then.47
	movq	-16(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -44(%rbp)
	movl	-44(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB43_31
# BB#25:                                # %if.then.52
	cmpl	$13, -44(%rbp)
	jne	.LBB43_27
# BB#26:                                # %if.then.55
	movl	-36(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_30
.LBB43_27:                              # %if.else.57
	cmpl	$10, -44(%rbp)
	jne	.LBB43_29
# BB#28:                                # %if.then.60
	movl	-36(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB43_29:                              # %if.end.62
	jmp	.LBB43_30
.LBB43_30:                              # %if.end.63
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
.LBB43_31:                              # %if.end.65
	jmp	.LBB43_32
.LBB43_32:                              # %if.end.66
	jmp	.LBB43_33
.LBB43_33:                              # %if.end.67
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 360(%rcx)
	movl	-36(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	andl	$7, %edx
	shll	$24, %edx
	andl	$-117440513, %esi       # imm = 0xFFFFFFFFF8FFFFFF
	orl	%edx, %esi
	movl	%esi, 8(%rax)
	movq	-8(%rbp), %rax
	movq	360(%rax), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end43:
	.size	check_ascii, .Lfunc_end43-check_ascii
	.cfi_endproc

	.align	16, 0x90
	.type	check_utf_8,@function
check_utf_8:                            # @check_utf_8
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp132:
	.cfi_def_cfa_offset 16
.Ltmp133:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp134:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	360(%rdi), %rdi
	movq	%rdi, -48(%rbp)
	movq	-16(%rbp), %rdi
	cmpq	$0, 360(%rdi)
	jge	.LBB44_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	check_ascii
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB44_3
.LBB44_2:                               # %if.else
	movq	-16(%rbp), %rdi
	callq	coding_set_source
.LBB44_3:                               # %if.end
	movq	-16(%rbp), %rax
	movq	456(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	360(%rcx), %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	456(%rax), %rax
	movq	-16(%rbp), %rcx
	addq	440(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edx
	shrl	$24, %edx
	andl	$7, %edx
	movl	%edx, -36(%rbp)
.LBB44_4:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB44_48
# BB#5:                                 # %while.body
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -52(%rbp)
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$128, %ecx
	jge	.LBB44_17
# BB#6:                                 # %if.then.11
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	cmpl	$32, -52(%rbp)
	jge	.LBB44_16
# BB#7:                                 # %if.then.14
                                        #   in Loop: Header=BB44_4 Depth=1
	cmpl	$13, -52(%rbp)
	jne	.LBB44_12
# BB#8:                                 # %if.then.17
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB44_10
# BB#9:                                 # %if.then.21
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-36(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-48(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	jmp	.LBB44_11
.LBB44_10:                              # %if.else.23
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-36(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB44_11:                              # %if.end.25
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_15
.LBB44_12:                              # %if.else.26
                                        #   in Loop: Header=BB44_4 Depth=1
	cmpl	$10, -52(%rbp)
	jne	.LBB44_14
# BB#13:                                # %if.then.29
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-36(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB44_14:                              # %if.end.31
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_15
.LBB44_15:                              # %if.end.32
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_16
.LBB44_16:                              # %if.end.33
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_47
.LBB44_17:                              # %if.else.34
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-52(%rbp), %eax
	andl	$224, %eax
	cmpl	$192, %eax
	jne	.LBB44_23
# BB#18:                                # %if.then.37
                                        #   in Loop: Header=BB44_4 Depth=1
	cmpl	$194, -52(%rbp)
	jl	.LBB44_21
# BB#19:                                # %lor.lhs.false
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB44_21
# BB#20:                                # %lor.lhs.false.43
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB44_22
.LBB44_21:                              # %if.then.48
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_22:                              # %if.end.49
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB44_46
.LBB44_23:                              # %if.else.51
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-52(%rbp), %eax
	andl	$240, %eax
	cmpl	$224, %eax
	jne	.LBB44_33
# BB#24:                                # %if.then.55
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$2, %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB44_27
# BB#25:                                # %lor.lhs.false.59
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	jne	.LBB44_27
# BB#26:                                # %land.lhs.true
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB44_28
.LBB44_27:                              # %if.then.70
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_28:                              # %if.end.71
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-52(%rbp), %eax
	andl	$15, %eax
	shll	$12, %eax
	movq	-24(%rbp), %rcx
	movzbl	1(%rcx), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movzbl	2(%rcx), %edx
	andl	$63, %edx
	orl	%edx, %eax
	movl	%eax, -52(%rbp)
	cmpl	$2048, -52(%rbp)        # imm = 0x800
	jl	.LBB44_31
# BB#29:                                # %lor.lhs.false.84
                                        #   in Loop: Header=BB44_4 Depth=1
	cmpl	$55296, -52(%rbp)       # imm = 0xD800
	jl	.LBB44_32
# BB#30:                                # %land.lhs.true.87
                                        #   in Loop: Header=BB44_4 Depth=1
	cmpl	$57344, -52(%rbp)       # imm = 0xE000
	jge	.LBB44_32
.LBB44_31:                              # %if.then.90
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_32:                              # %if.end.91
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB44_45
.LBB44_33:                              # %if.else.93
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-52(%rbp), %eax
	andl	$248, %eax
	cmpl	$240, %eax
	jne	.LBB44_43
# BB#34:                                # %if.then.97
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$3, %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB44_38
# BB#35:                                # %lor.lhs.false.101
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	jne	.LBB44_38
# BB#36:                                # %land.lhs.true.107
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	jne	.LBB44_38
# BB#37:                                # %land.lhs.true.113
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	movzbl	3(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB44_39
.LBB44_38:                              # %if.then.119
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_39:                              # %if.end.120
                                        #   in Loop: Header=BB44_4 Depth=1
	movl	-52(%rbp), %eax
	andl	$7, %eax
	shll	$18, %eax
	movq	-24(%rbp), %rcx
	movzbl	1(%rcx), %edx
	andl	$63, %edx
	shll	$12, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movzbl	2(%rcx), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %eax
	movq	-24(%rbp), %rcx
	movzbl	3(%rcx), %edx
	andl	$63, %edx
	orl	%edx, %eax
	movl	%eax, -52(%rbp)
	cmpl	$65536, -52(%rbp)       # imm = 0x10000
	jl	.LBB44_41
# BB#40:                                # %lor.lhs.false.139
                                        #   in Loop: Header=BB44_4 Depth=1
	cmpl	$1114112, -52(%rbp)     # imm = 0x110000
	jl	.LBB44_42
.LBB44_41:                              # %if.then.142
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_42:                              # %if.end.143
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-24(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB44_44
.LBB44_43:                              # %if.else.145
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_44:                              # %if.end.146
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_45
.LBB44_45:                              # %if.end.147
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_46
.LBB44_46:                              # %if.end.148
                                        #   in Loop: Header=BB44_4 Depth=1
	jmp	.LBB44_47
.LBB44_47:                              # %if.end.149
                                        #   in Loop: Header=BB44_4 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB44_4
.LBB44_48:                              # %while.end
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jne	.LBB44_57
# BB#49:                                # %if.then.153
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$128, %ecx
	jl	.LBB44_51
# BB#50:                                # %if.then.157
	movq	$-1, -8(%rbp)
	jmp	.LBB44_58
.LBB44_51:                              # %if.end.158
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$13, %ecx
	jne	.LBB44_53
# BB#52:                                # %if.then.163
	movl	-36(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB44_56
.LBB44_53:                              # %if.else.165
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB44_55
# BB#54:                                # %if.then.169
	movl	-36(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB44_55:                              # %if.end.171
	jmp	.LBB44_56
.LBB44_56:                              # %if.end.172
	jmp	.LBB44_57
.LBB44_57:                              # %if.end.173
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %edx
	andl	$7, %eax
	shll	$24, %eax
	andl	$-117440513, %edx       # imm = 0xFFFFFFFFF8FFFFFF
	orl	%eax, %edx
	movl	%edx, 8(%rcx)
	movq	-48(%rbp), %rcx
	movq	%rcx, -8(%rbp)
.LBB44_58:                              # %return
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end44:
	.size	check_utf_8, .Lfunc_end44-check_utf_8
	.cfi_endproc

	.align	16, 0x90
	.type	adjust_coding_eol_type,@function
adjust_coding_eol_type:                 # @adjust_coding_eol_type
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp135:
	.cfi_def_cfa_offset 16
.Ltmp136:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp137:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB45_2
# BB#1:                                 # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB45_11
.LBB45_2:                               # %if.end
	movl	-20(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB45_4
# BB#3:                                 # %if.then.4
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-32(%rbp), %rdi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	hash_lookup
	movl	$973, %edi              # imm = 0x3CD
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
	jmp	.LBB45_10
.LBB45_4:                               # %if.else
	movl	-20(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB45_6
# BB#5:                                 # %if.then.12
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	-32(%rbp), %rdi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	hash_lookup
	movl	$351, %edi              # imm = 0x15F
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
	jmp	.LBB45_9
.LBB45_6:                               # %if.else.18
	movl	-20(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB45_8
# BB#7:                                 # %if.then.21
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	-32(%rbp), %rdi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	hash_lookup
	movl	$635, %edi              # imm = 0x27B
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
.LBB45_8:                               # %if.end.27
	jmp	.LBB45_9
.LBB45_9:                               # %if.end.28
	jmp	.LBB45_10
.LBB45_10:                              # %if.end.29
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB45_11:                              # %return
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end45:
	.size	adjust_coding_eol_type, .Lfunc_end45-adjust_coding_eol_type
	.cfi_endproc

	.align	16, 0x90
	.type	decode_coding,@function
decode_coding:                          # @decode_coding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp138:
	.cfi_def_cfa_offset 16
.Ltmp139:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp140:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	movq	%rdi, -8(%rbp)
	movq	$16384, -136(%rbp)      # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -144(%rbp)
	movb	$0, -145(%rbp)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB46_1
	jmp	.LBB46_5
.LBB46_1:                               # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpq	$0, 416(%rax)
	jle	.LBB46_5
# BB#2:                                 # %land.lhs.true.2
	movq	-8(%rbp), %rax
	movq	416(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jge	.LBB46_5
# BB#3:                                 # %land.lhs.true.5
	movq	-8(%rbp), %rax
	movq	416(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	432(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jle	.LBB46_5
# BB#4:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	416(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	424(%rax), %rsi
	callq	move_gap_both
.LBB46_5:                               # %if.end
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB46_6
	jmp	.LBB46_11
.LBB46_6:                               # %if.then.13
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	movq	current_buffer, %rdi
	movq	736(%rdi), %rdi
	addq	$0, %rdi
	cmpq	%rdi, %rax
	je	.LBB46_8
# BB#7:                                 # %if.then.20
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	current_buffer, %rcx
	movq	744(%rcx), %rcx
	addq	$0, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	move_gap_both
.LBB46_8:                               # %if.end.24
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	48(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	64(%rcx), %rax
	jg	.LBB46_10
# BB#9:                                 # %if.then.28
	callq	record_first_change
.LBB46_10:                              # %if.end.29
	movl	$901, %edi              # imm = 0x385
	movq	current_buffer, %rax
	movq	968(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	current_buffer, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	bset_undo_list
.LBB46_11:                              # %if.end.31
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movq	$0, 408(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 400(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 392(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 384(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-2097153, %ecx         # imm = 0xFFFFFFFFFFDFFFFF
	movl	%ecx, 8(%rax)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
# BB#12:                                # %do.body
	movq	-8(%rbp), %rax
	movq	440(%rax), %rax
	addq	$16, %rax
	cmpq	$16384, %rax            # imm = 0x4000
	jge	.LBB46_14
# BB#13:                                # %cond.true
	movq	-8(%rbp), %rax
	movq	440(%rax), %rax
	addq	$16, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false
	movl	$16384, %eax            # imm = 0x4000
	movl	%eax, %ecx
	movq	%rcx, -216(%rbp)        # 8-byte Spill
	jmp	.LBB46_15
.LBB46_15:                              # %cond.end
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	shlq	$2, %rax
	cmpq	-136(%rbp), %rax
	ja	.LBB46_17
# BB#16:                                # %cond.true.37
	movq	-160(%rbp), %rax
	shlq	$2, %rax
	movq	-136(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -136(%rbp)
	movq	-160(%rbp), %rax
	leaq	15(,%rax,4), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	jmp	.LBB46_18
.LBB46_17:                              # %cond.false.40
	movb	$1, -145(%rbp)
	movq	-160(%rbp), %rax
	shlq	$2, %rax
	movq	%rax, %rdi
	callq	record_xmalloc
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB46_18:                              # %cond.end.43
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 504(%rcx)
	movq	-160(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 512(%rax)
# BB#19:                                # %do.end
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	get_translation_table
	movabsq	$decode_coding_ccl, %rdx
	movq	%rax, -32(%rbp)
	movl	$0, -124(%rbp)
	movq	-8(%rbp), %rax
	cmpq	%rdx, 600(%rax)
	jne	.LBB46_21
# BB#20:                                # %if.then.51
	leaq	-120(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$17, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	setup_ccl_program
	movb	%al, -233(%rbp)         # 1-byte Spill
.LBB46_21:                              # %if.end.59
	jmp	.LBB46_22
.LBB46_22:                              # %do.body.60
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_25 Depth 2
	movq	-8(%rbp), %rax
	movq	464(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rax
	movq	%rax, -168(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	movl	%edx, 8(%rax)
	movl	-124(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	movq	-8(%rbp), %rax
	movq	600(%rax), %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	-8(%rbp), %rdi
	callq	coding_set_destination
	xorl	%edx, %edx
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	produce_chars
	movl	%eax, -124(%rbp)
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %eax
	shrl	$23, %eax
	andl	$1, %eax
	testl	$1, %eax
	je	.LBB46_24
# BB#23:                                # %if.then.70
                                        #   in Loop: Header=BB46_22 Depth=1
	movq	-8(%rbp), %rdi
	movq	-168(%rbp), %rsi
	callq	produce_annotation
.LBB46_24:                              # %if.end.71
                                        #   in Loop: Header=BB46_22 Depth=1
	movl	$0, -128(%rbp)
.LBB46_25:                              # %for.cond
                                        #   Parent Loop BB46_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-128(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB46_28
# BB#26:                                # %for.body
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	-8(%rbp), %rax
	movl	516(%rax), %ecx
	subl	-124(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rax
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movl	(%rdx,%rax,4), %ecx
	movslq	-128(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	504(%rdx), %rdx
	movl	%ecx, (%rdx,%rax,4)
# BB#27:                                # %for.inc
                                        #   in Loop: Header=BB46_25 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB46_25
.LBB46_28:                              # %for.end
                                        #   in Loop: Header=BB46_22 Depth=1
	jmp	.LBB46_29
.LBB46_29:                              # %do.cond
                                        #   in Loop: Header=BB46_22 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %edx
	shrl	$27, %edx
	andl	$7, %edx
	cmpl	$2, %edx
	movb	%al, -234(%rbp)         # 1-byte Spill
	je	.LBB46_35
# BB#30:                                # %lor.rhs
                                        #   in Loop: Header=BB46_22 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-8(%rbp), %rdx
	movq	400(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	440(%rsi), %rdx
	movb	%cl, -235(%rbp)         # 1-byte Spill
	jge	.LBB46_34
# BB#31:                                # %land.rhs
                                        #   in Loop: Header=BB46_22 Depth=1
	movb	$1, %al
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %edx
	shrl	$27, %edx
	andl	$7, %edx
	cmpl	$0, %edx
	movb	%al, -236(%rbp)         # 1-byte Spill
	je	.LBB46_33
# BB#32:                                # %lor.rhs.96
                                        #   in Loop: Header=BB46_22 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$27, %ecx
	andl	$7, %ecx
	cmpl	$3, %ecx
	sete	%dl
	movb	%dl, -236(%rbp)         # 1-byte Spill
.LBB46_33:                              # %lor.end
                                        #   in Loop: Header=BB46_22 Depth=1
	movb	-236(%rbp), %al         # 1-byte Reload
	movb	%al, -235(%rbp)         # 1-byte Spill
.LBB46_34:                              # %land.end
                                        #   in Loop: Header=BB46_22 Depth=1
	movb	-235(%rbp), %al         # 1-byte Reload
	movb	%al, -234(%rbp)         # 1-byte Spill
.LBB46_35:                              # %lor.end.103
                                        #   in Loop: Header=BB46_22 Depth=1
	movb	-234(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB46_22
# BB#36:                                # %do.end.104
	cmpl	$0, -124(%rbp)
	jle	.LBB46_38
# BB#37:                                # %if.then.107
	movq	-8(%rbp), %rdi
	callq	coding_set_destination
	movl	$1, %edx
	movl	-124(%rbp), %eax
	movq	-8(%rbp), %rdi
	movl	%eax, 516(%rdi)
	movq	-8(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	produce_chars
	movl	%eax, -240(%rbp)        # 4-byte Spill
.LBB46_38:                              # %if.end.110
	movq	-8(%rbp), %rax
	movl	$0, 584(%rax)
	movq	-8(%rbp), %rax
	movq	400(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	440(%rcx), %rax
	jge	.LBB46_53
# BB#39:                                # %if.then.115
	movq	-8(%rbp), %rax
	movq	440(%rax), %rax
	movq	-8(%rbp), %rcx
	subq	400(%rcx), %rax
	movq	%rax, -176(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rdi
	callq	coding_set_destination
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	400(%rcx), %rax
	movq	%rax, -184(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	shrl	$14, %edx
	andl	$31, %edx
	andl	$1, %edx
	cmpl	$0, %edx
	je	.LBB46_46
# BB#40:                                # %if.then.123
	movq	-8(%rbp), %rax
	movl	$0, 516(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-2097153, %ecx         # imm = 0xFFFFFFFFFFDFFFFF
	movl	%ecx, 8(%rax)
.LBB46_41:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-176(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -176(%rbp)
	cmpq	$0, %rax
	jle	.LBB46_45
# BB#42:                                # %while.body
                                        #   in Loop: Header=BB46_41 Depth=1
	movq	-184(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -184(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -188(%rbp)
	movl	-188(%rbp), %edx
	andl	$128, %edx
	cmpl	$0, %edx
	je	.LBB46_44
# BB#43:                                # %if.then.133
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-188(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -188(%rbp)
.LBB46_44:                              # %if.end.135
                                        #   in Loop: Header=BB46_41 Depth=1
	movl	-188(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	516(%rcx), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, 516(%rcx)
	movslq	%edx, %rcx
	movq	-8(%rbp), %rdi
	movq	504(%rdi), %rdi
	movl	%eax, (%rdi,%rcx,4)
	jmp	.LBB46_41
.LBB46_45:                              # %while.end
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edx
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	produce_chars
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB46_52
.LBB46_46:                              # %if.else
	movq	-8(%rbp), %rax
	addq	$520, %rax              # imm = 0x208
	movq	%rax, -200(%rbp)
	cmpq	$64, -176(%rbp)
	jbe	.LBB46_48
# BB#47:                                # %if.then.146
	movq	$64, -176(%rbp)
.LBB46_48:                              # %if.end.147
	movq	-176(%rbp), %rax
	movl	%eax, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, 584(%rax)
.LBB46_49:                              # %while.cond.150
                                        # =>This Inner Loop Header: Depth=1
	movq	-176(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -176(%rbp)
	cmpq	$0, %rax
	jle	.LBB46_51
# BB#50:                                # %while.body.154
                                        #   in Loop: Header=BB46_49 Depth=1
	movq	-184(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -184(%rbp)
	movb	(%rax), %dl
	movq	-200(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -200(%rbp)
	movb	%dl, (%rax)
	jmp	.LBB46_49
.LBB46_51:                              # %while.end.157
	jmp	.LBB46_52
.LBB46_52:                              # %if.end.158
	movq	-8(%rbp), %rax
	movq	440(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
.LBB46_53:                              # %if.end.161
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$973, %edi              # imm = 0x3CD
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB46_56
# BB#54:                                # %land.lhs.true.169
	testb	$1, globals+3389
	jne	.LBB46_56
# BB#55:                                # %if.then.171
	movq	-8(%rbp), %rdi
	callq	decode_eol
.LBB46_56:                              # %if.end.172
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB46_57
	jmp	.LBB46_58
.LBB46_57:                              # %if.then.175
	movq	current_buffer, %rdi
	movq	-24(%rbp), %rsi
	callq	bset_undo_list
	movq	-8(%rbp), %rsi
	movq	464(%rsi), %rdi
	movq	-8(%rbp), %rsi
	movq	392(%rsi), %rsi
	callq	record_insert
.LBB46_58:                              # %if.end.178
	jmp	.LBB46_59
.LBB46_59:                              # %do.body.179
	testb	$1, -145(%rbp)
	je	.LBB46_61
# BB#60:                                # %if.then.181
	xorl	%edi, %edi
	movb	$0, -145(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB46_61:                              # %if.end.184
	jmp	.LBB46_62
.LBB46_62:                              # %do.end.186
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end46:
	.size	decode_coding, .Lfunc_end46-decode_coding
	.cfi_endproc

	.globl	decode_coding_object
	.align	16, 0x90
	.type	decode_coding_object,@function
decode_coding_object:                   # @decode_coding_object
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp141:
	.cfi_def_cfa_offset 16
.Ltmp142:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp143:
	.cfi_def_cfa_register %rbp
	subq	$368, %rsp              # imm = 0x170
	movq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	%rax, -56(%rbp)
	callq	SPECPDL_INDEX
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	subq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-48(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	$-1, -112(%rbp)
	movb	$0, -121(%rbp)
	movq	globals+416, %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_2
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	%rax, -80(%rbp)
.LBB47_2:                               # %if.end
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 448(%rcx)
	movq	-88(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 432(%rcx)
	movq	-96(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 440(%rcx)
	movq	-88(%rbp), %rax
	cmpq	-96(%rbp), %rax
	setl	%dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	8(%rax), %edi
	shll	$19, %esi
	andl	$-524289, %edi          # imm = 0xFFFFFFFFFFF7FFFF
	orl	%esi, %edi
	movl	%edi, 8(%rax)
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB47_3
	jmp	.LBB47_4
.LBB47_3:                               # %if.then.8
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 416(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 424(%rcx)
	jmp	.LBB47_19
.LBB47_4:                               # %if.else
	movq	-16(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB47_5
	jmp	.LBB47_18
.LBB47_5:                               # %if.then.10
	movq	-16(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	-24(%rbp), %rax
	movq	current_buffer, %rdi
	movq	720(%rdi), %rdi
	cmpq	8(%rdi), %rax
	je	.LBB47_7
# BB#6:                                 # %if.then.13
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	move_gap_both
.LBB47_7:                               # %if.end.14
	movq	-16(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB47_16
# BB#8:                                 # %if.then.16
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -144(%rbp)
.LBB47_9:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -144(%rbp)
	je	.LBB47_15
# BB#10:                                # %for.body
                                        #   in Loop: Header=BB47_9 Depth=1
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movl	(%rcx), %edx
	shrl	$31, %edx
	testl	$1, %edx
	movq	%rax, -192(%rbp)        # 8-byte Spill
	je	.LBB47_12
# BB#11:                                # %cond.true
                                        #   in Loop: Header=BB47_9 Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB47_13
.LBB47_12:                              # %cond.false
                                        #   in Loop: Header=BB47_9 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB47_13:                              # %cond.end
                                        #   in Loop: Header=BB47_9 Depth=1
	movq	-200(%rbp), %rax        # 8-byte Reload
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movq	-144(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	(%rax), %edi
	shll	$30, %esi
	andl	$-1073741825, %edi      # imm = 0xFFFFFFFFBFFFFFFF
	orl	%esi, %edi
	movl	%edi, (%rax)
	movq	-144(%rbp), %rax
	movl	(%rax), %esi
	shrl	$30, %esi
	andl	$1, %esi
	movb	%sil, %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movb	-121(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	orl	%esi, %edi
	cmpl	$0, %edi
	setne	%dl
	andb	$1, %dl
	movb	%dl, -121(%rbp)
# BB#14:                                # %for.inc
                                        #   in Loop: Header=BB47_9 Depth=1
	movq	-144(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -144(%rbp)
	jmp	.LBB47_9
.LBB47_15:                              # %for.end
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -112(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -120(%rbp)
	movq	current_buffer, %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	temp_set_point_both
	movl	$1, %r8d
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 136(%rax)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	callq	del_range_both
	xorl	%r8d, %r8d
	movl	%r8d, %eax
	movq	%rax, %rcx
	subq	-88(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 416(%rdx)
	subq	-96(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 424(%rcx)
	jmp	.LBB47_17
.LBB47_16:                              # %if.else.43
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 416(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 424(%rcx)
.LBB47_17:                              # %if.end.46
	jmp	.LBB47_18
.LBB47_18:                              # %if.end.47
	jmp	.LBB47_19
.LBB47_19:                              # %if.end.48
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$4096, %ecx             # imm = 0x1000
	cmpl	$0, %ecx
	je	.LBB47_21
# BB#20:                                # %if.then.52
	movq	-8(%rbp), %rdi
	callq	detect_coding
.LBB47_21:                              # %if.end.53
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -104(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB47_24
# BB#22:                                # %lor.lhs.false
	movl	$9, %eax
	movl	%eax, %esi
	movq	-104(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB47_25
# BB#23:                                # %land.lhs.true
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-224(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_25
.LBB47_24:                              # %if.then.67
	movl	$1, %edi
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$256, %ecx              # imm = 0x100
	cmpl	$0, %ecx
	setne	%dl
	xorb	$-1, %dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	8(%rax), %esi
	shll	$20, %ecx
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%ecx, %esi
	movl	%esi, 8(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	andl	$1, %ecx
	movl	%ecx, %esi
	callq	code_conversion_save
	movq	-8(%rbp), %r8
	movq	%rax, 488(%r8)
	movq	-8(%rbp), %rax
	movq	$1, 464(%rax)
	movq	-8(%rbp), %rax
	movq	$1, 472(%rax)
	jmp	.LBB47_41
.LBB47_25:                              # %if.else.86
	movq	-56(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB47_26
	jmp	.LBB47_39
.LBB47_26:                              # %if.then.88
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	code_conversion_save
	movq	-56(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 488(%rdx)
	movq	-56(%rbp), %rdi
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	XBUFFER
	cmpq	current_buffer, %rax
	jne	.LBB47_28
# BB#27:                                # %cond.true.94
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	jmp	.LBB47_32
.LBB47_28:                              # %cond.false.97
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	360(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_30
# BB#29:                                # %cond.true.102
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	movq	736(%rax), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	jmp	.LBB47_31
.LBB47_30:                              # %cond.false.105
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -256(%rbp)        # 8-byte Spill
.LBB47_31:                              # %cond.end.109
	movq	-256(%rbp), %rax        # 8-byte Reload
	movq	%rax, -240(%rbp)        # 8-byte Spill
.LBB47_32:                              # %cond.end.111
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	cmpq	current_buffer, %rax
	jne	.LBB47_34
# BB#33:                                # %cond.true.117
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	jmp	.LBB47_38
.LBB47_34:                              # %cond.false.120
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	360(%rax), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_36
# BB#35:                                # %cond.true.126
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	movq	744(%rax), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	jmp	.LBB47_37
.LBB47_36:                              # %cond.false.129
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	movq	360(%rax), %rdi
	callq	marker_byte_position
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB47_37:                              # %cond.end.133
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	%rax, -264(%rbp)        # 8-byte Spill
.LBB47_38:                              # %cond.end.135
	movq	-264(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 472(%rcx)
	movq	-56(%rbp), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	312(%rax), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	8(%rax), %esi
	shll	$20, %edi
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%edi, %esi
	movl	%esi, 8(%rax)
	jmp	.LBB47_40
.LBB47_39:                              # %if.else.150
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	code_conversion_save
	xorl	%edi, %edi
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rcx
	movq	%rax, 488(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	$1048576, %esi          # imm = 0x100000
	movl	%esi, 8(%rax)
.LBB47_40:                              # %if.end.158
	jmp	.LBB47_41
.LBB47_41:                              # %if.end.159
	movq	-8(%rbp), %rdi
	callq	decode_coding
	movq	-8(%rbp), %rdi
	movq	488(%rdi), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB47_42
	jmp	.LBB47_43
.LBB47_42:                              # %if.then.162
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
.LBB47_43:                              # %if.end.165
	movl	$9, %eax
	movl	%eax, %esi
	movq	-104(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB47_45
# BB#44:                                # %if.then.170
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	current_buffer, %rdi
	movq	-8(%rbp), %rax
	movq	464(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	472(%rax), %rdx
	callq	temp_set_point_both
	movl	$9, %ecx
	movl	%ecx, %esi
	movq	-104(%rbp), %rdi
	callq	AREF
	movq	-8(%rbp), %rdx
	movq	392(%rdx), %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	callq	safe_call1
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	-152(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	392(%rdx), %rax
	movq	%rax, 392(%rdx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	subq	-160(%rbp), %rax
	movq	-8(%rbp), %rdx
	addq	384(%rdx), %rax
	movq	%rax, 384(%rdx)
.LBB47_45:                              # %if.end.187
	movl	$901, %edi              # imm = 0x385
	movq	-56(%rbp), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-312(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_47
# BB#46:                                # %if.then.191
	callq	Fbuffer_string
	movq	-8(%rbp), %rcx
	movq	%rax, 488(%rcx)
	jmp	.LBB47_59
.LBB47_47:                              # %if.else.194
	xorl	%edi, %edi
	movq	-56(%rbp), %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-320(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_58
# BB#48:                                # %land.lhs.true.198
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB47_49
	jmp	.LBB47_58
.LBB47_49:                              # %if.then.202
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	-80(%rbp), %rax
	movq	-8(%rbp), %rdi
	cmpq	384(%rdi), %rax
	jge	.LBB47_57
# BB#50:                                # %if.then.208
	movq	-72(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	384(%rax), %rsi
	callq	xrealloc
	movq	%rax, -72(%rbp)
	movq	current_buffer, %rax
	movq	752(%rax), %rax
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	8(%rsi), %rax
	jge	.LBB47_53
# BB#51:                                # %land.lhs.true.215
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	movq	current_buffer, %rcx
	movq	752(%rcx), %rcx
	movq	-8(%rbp), %rdx
	addq	392(%rdx), %rcx
	cmpq	%rcx, %rax
	jge	.LBB47_53
# BB#52:                                # %if.then.223
	movq	current_buffer, %rax
	movq	752(%rax), %rdi
	movq	current_buffer, %rax
	movq	760(%rax), %rsi
	callq	move_gap_both
.LBB47_53:                              # %if.end.225
	movq	-72(%rbp), %rdi
	movq	current_buffer, %rax
	movq	760(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	movq	%rdi, -328(%rbp)        # 8-byte Spill
	jl	.LBB47_55
# BB#54:                                # %cond.true.230
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	jmp	.LBB47_56
.LBB47_55:                              # %cond.false.232
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jmp	.LBB47_56
.LBB47_56:                              # %cond.end.233
	movq	-336(%rbp), %rax        # 8-byte Reload
	movq	current_buffer, %rcx
	addq	760(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	-8(%rbp), %rcx
	movq	384(%rcx), %rdx
	movq	-328(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	memcpy
	movq	-72(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 496(%rcx)
.LBB47_57:                              # %if.end.241
	jmp	.LBB47_58
.LBB47_58:                              # %if.end.242
	jmp	.LBB47_59
.LBB47_59:                              # %if.end.243
	cmpq	$0, -112(%rbp)
	jl	.LBB47_84
# BB#60:                                # %if.then.246
	movq	-16(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movb	136(%rax), %cl
	andb	$-2, %cl
	movb	%cl, 136(%rax)
	movq	-112(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jge	.LBB47_62
# BB#61:                                # %if.then.254
	movq	current_buffer, %rdi
	movq	-112(%rbp), %rsi
	movq	-120(%rbp), %rdx
	callq	temp_set_point_both
	jmp	.LBB47_69
.LBB47_62:                              # %if.else.255
	movq	-112(%rbp), %rax
	movq	-24(%rbp), %rcx
	addq	-88(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB47_64
# BB#63:                                # %if.then.259
	movq	current_buffer, %rdi
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	temp_set_point_both
	jmp	.LBB47_68
.LBB47_64:                              # %if.else.260
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-344(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB47_66
# BB#65:                                # %if.then.265
	movq	current_buffer, %rdi
	movq	-112(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	392(%rcx), %rcx
	subq	-88(%rbp), %rcx
	addq	%rcx, %rax
	movq	-120(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	384(%rdx), %rdx
	subq	-96(%rbp), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	temp_set_point_both
	jmp	.LBB47_67
.LBB47_66:                              # %if.else.272
	movq	current_buffer, %rdi
	movq	-112(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	384(%rcx), %rcx
	subq	-96(%rbp), %rcx
	addq	%rcx, %rax
	movq	-120(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	384(%rdx), %rdx
	subq	-96(%rbp), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	temp_set_point_both
.LBB47_67:                              # %if.end.279
	jmp	.LBB47_68
.LBB47_68:                              # %if.end.280
	jmp	.LBB47_69
.LBB47_69:                              # %if.end.281
	testb	$1, -121(%rbp)
	je	.LBB47_83
# BB#70:                                # %if.then.283
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -176(%rbp)
.LBB47_71:                              # %for.cond.287
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -176(%rbp)
	je	.LBB47_82
# BB#72:                                # %for.body.289
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-176(%rbp), %rax
	movl	(%rax), %ecx
	shrl	$30, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB47_80
# BB#73:                                # %if.then.294
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-176(%rbp), %rax
	movl	(%rax), %ecx
	andl	$-1073741825, %ecx      # imm = 0xFFFFFFFFBFFFFFFF
	movl	%ecx, (%rax)
	movq	-176(%rbp), %rax
	movl	(%rax), %ecx
	shrl	$31, %ecx
	testl	$1, %ecx
	je	.LBB47_75
# BB#74:                                # %if.then.300
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-32(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	%rax, 24(%rcx)
	jmp	.LBB47_79
.LBB47_75:                              # %if.else.302
                                        #   in Loop: Header=BB47_71 Depth=1
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	384(%rcx), %rax
	movq	-176(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-352(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB47_77
# BB#76:                                # %cond.true.310
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-176(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	jmp	.LBB47_78
.LBB47_77:                              # %cond.false.312
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
.LBB47_78:                              # %cond.end.315
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-360(%rbp), %rax        # 8-byte Reload
	movq	-176(%rbp), %rcx
	movq	%rax, 24(%rcx)
.LBB47_79:                              # %if.end.318
                                        #   in Loop: Header=BB47_71 Depth=1
	jmp	.LBB47_80
.LBB47_80:                              # %if.end.319
                                        #   in Loop: Header=BB47_71 Depth=1
	jmp	.LBB47_81
.LBB47_81:                              # %for.inc.320
                                        #   in Loop: Header=BB47_71 Depth=1
	movq	-176(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB47_71
.LBB47_82:                              # %for.end.322
	jmp	.LBB47_83
.LBB47_83:                              # %if.end.323
	jmp	.LBB47_84
.LBB47_84:                              # %if.end.324
	movq	-136(%rbp), %rax
	movq	%rax, globals+416
	movq	-64(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	488(%rax), %rsi
	callq	unbind_to
	movq	%rax, -368(%rbp)        # 8-byte Spill
	addq	$368, %rsp              # imm = 0x170
	popq	%rbp
	retq
.Lfunc_end47:
	.size	decode_coding_object, .Lfunc_end47-decode_coding_object
	.cfi_endproc

	.globl	encode_coding_object
	.align	16, 0x90
	.type	encode_coding_object,@function
encode_coding_object:                   # @encode_coding_object
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp144:
	.cfi_def_cfa_offset 16
.Ltmp145:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp146:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$296, %rsp              # imm = 0x128
.Ltmp147:
	.cfi_offset %rbx, -24
	movq	16(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	%rax, -64(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	$-1, -104(%rbp)
	movb	$0, -113(%rbp)
	movb	$0, -114(%rbp)
	movq	globals+416, %rax
	movq	%rax, -128(%rbp)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 448(%rcx)
	movq	-80(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 432(%rcx)
	movq	-88(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 440(%rcx)
	movq	-80(%rbp), %rax
	cmpq	-88(%rbp), %rax
	setl	%r10b
	movq	-16(%rbp), %rax
	andb	$1, %r10b
	movzbl	%r10b, %r11d
	movl	8(%rax), %ebx
	shll	$19, %r11d
	andl	$-524289, %ebx          # imm = 0xFFFFFFFFFFF7FFFF
	orl	%r11d, %ebx
	movl	%ebx, 8(%rax)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%r11d, %r11d
	movl	%r11d, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -96(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB48_9
# BB#1:                                 # %if.then
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -136(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -136(%rbp)
	je	.LBB48_8
# BB#3:                                 # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movl	(%rcx), %edx
	shrl	$31, %edx
	testl	$1, %edx
	movq	%rax, -168(%rbp)        # 8-byte Spill
	je	.LBB48_5
# BB#4:                                 # %cond.true
                                        #   in Loop: Header=BB48_2 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB48_6
.LBB48_5:                               # %cond.false
                                        #   in Loop: Header=BB48_2 Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB48_6:                               # %cond.end
                                        #   in Loop: Header=BB48_2 Depth=1
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	movq	-136(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	(%rax), %edi
	shll	$30, %esi
	andl	$-1073741825, %edi      # imm = 0xFFFFFFFFBFFFFFFF
	orl	%esi, %edi
	movl	%edi, (%rax)
	movq	-136(%rbp), %rax
	movl	(%rax), %esi
	shrl	$30, %esi
	andl	$1, %esi
	movb	%sil, %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	movb	-113(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %edi
	orl	%esi, %edi
	cmpl	$0, %edi
	setne	%dl
	andb	$1, %dl
	movb	%dl, -113(%rbp)
# BB#7:                                 # %for.inc
                                        #   in Loop: Header=BB48_2 Depth=1
	movq	-136(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -136(%rbp)
	jmp	.LBB48_2
.LBB48_8:                               # %for.end
	jmp	.LBB48_9
.LBB48_9:                               # %if.end
	movl	$10, %eax
	movl	%eax, %esi
	movq	-96(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB48_23
# BB#10:                                # %if.then.27
	movl	$1, %edi
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	andl	$1, %ecx
	movl	%ecx, %esi
	callq	code_conversion_save
	movq	-16(%rbp), %rdx
	movq	%rax, 448(%rdx)
	movq	-16(%rbp), %rax
	movq	448(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB48_11
	jmp	.LBB48_12
.LBB48_11:                              # %if.then.38
	xorl	%r9d, %r9d
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-88(%rbp), %r8
	callq	insert_from_string
	jmp	.LBB48_16
.LBB48_12:                              # %if.else
	movq	-24(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB48_13
	jmp	.LBB48_14
.LBB48_13:                              # %if.then.40
	movq	-24(%rbp), %rdi
	callq	XBUFFER
	xorl	%ecx, %ecx
	movq	-32(%rbp), %rsi
	movq	-80(%rbp), %rdx
	movq	%rax, %rdi
	callq	insert_from_buffer
	jmp	.LBB48_15
.LBB48_14:                              # %if.else.42
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movq	456(%rcx), %rcx
	addq	-32(%rbp), %rcx
	movq	-80(%rbp), %rsi
	movq	-88(%rbp), %rdx
	movq	%rcx, %rdi
	movl	%eax, %ecx
	movl	%eax, %r8d
	movl	%eax, %r9d
	callq	insert_1_both
.LBB48_15:                              # %if.end.43
	jmp	.LBB48_16
.LBB48_16:                              # %if.end.44
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB48_18
# BB#17:                                # %if.then.47
	movq	-24(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movl	$1, %r8d
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -104(%rbp)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	%rax, -112(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-56(%rbp), %rcx
	callq	del_range_both
	movq	-16(%rbp), %rax
	movq	448(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
.LBB48_18:                              # %if.end.52
	movl	$10, %eax
	movl	%eax, %esi
	movq	-96(%rbp), %rdi
	callq	AREF
	movl	$6, %ecx
	movl	%ecx, %esi
	movq	current_buffer, %rdi
	movq	720(%rdi), %rdi
	movq	16(%rdi), %rdi
	shlq	$2, %rdi
	addq	$2, %rdi
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-192(%rbp), %rdx        # 8-byte Reload
	callq	safe_call2
	movq	-16(%rbp), %rdx
	movq	448(%rdx), %rdi
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	XBUFFER
	cmpq	current_buffer, %rax
	je	.LBB48_20
# BB#19:                                # %if.then.61
	movb	$1, -114(%rbp)
.LBB48_20:                              # %if.end.62
	callq	Fcurrent_buffer
	movl	$1, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	%rax, 448(%rsi)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	cmpq	8(%rax), %rdx
	je	.LBB48_22
# BB#21:                                # %if.then.68
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	callq	move_gap_both
.LBB48_22:                              # %if.end.69
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	subq	$1, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 432(%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	32(%rax), %rax
	subq	$1, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 440(%rcx)
	movq	-16(%rbp), %rax
	movq	$1, 416(%rax)
	movq	-16(%rbp), %rax
	movq	$1, 424(%rax)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	16(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	32(%rcx), %rax
	setl	%dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %esi
	movl	8(%rax), %edi
	shll	$19, %esi
	andl	$-524289, %edi          # imm = 0xFFFFFFFFFFF7FFFF
	orl	%esi, %edi
	movl	%edi, 8(%rax)
	jmp	.LBB48_36
.LBB48_23:                              # %if.else.90
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB48_24
	jmp	.LBB48_25
.LBB48_24:                              # %if.then.92
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	code_conversion_save
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 416(%rdx)
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 424(%rdx)
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB48_35
.LBB48_25:                              # %if.else.96
	movq	-24(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB48_26
	jmp	.LBB48_33
.LBB48_26:                              # %if.then.98
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	code_conversion_save
	movq	-24(%rbp), %rdi
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB48_28
# BB#27:                                # %if.then.103
	movl	$1, %eax
	movq	current_buffer, %rcx
	movq	736(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -104(%rbp)
	movq	current_buffer, %rcx
	movq	744(%rcx), %rcx
	addq	$0, %rcx
	movq	%rcx, -112(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movl	%eax, %edx
	movl	%eax, %ecx
	callq	del_range_1
	movq	-16(%rbp), %rsi
	movq	%rax, 448(%rsi)
	movq	-16(%rbp), %rax
	movq	$0, 416(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 424(%rax)
	jmp	.LBB48_32
.LBB48_28:                              # %if.else.112
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jge	.LBB48_31
# BB#29:                                # %land.lhs.true
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jl	.LBB48_31
# BB#30:                                # %if.then.121
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	move_gap_both
.LBB48_31:                              # %if.end.122
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 416(%rcx)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 424(%rcx)
.LBB48_32:                              # %if.end.125
	jmp	.LBB48_34
.LBB48_33:                              # %if.else.126
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	%eax, %esi
	callq	code_conversion_save
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 416(%rdx)
	movq	-40(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rcx, 424(%rdx)
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB48_34:                              # %if.end.130
	jmp	.LBB48_35
.LBB48_35:                              # %if.end.131
	jmp	.LBB48_36
.LBB48_36:                              # %if.end.132
	movq	-64(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB48_37
	jmp	.LBB48_41
.LBB48_37:                              # %if.then.134
	movq	-64(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 488(%rcx)
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB48_39
# BB#38:                                # %if.then.138
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 472(%rcx)
	jmp	.LBB48_40
.LBB48_39:                              # %if.else.139
	movq	current_buffer, %rax
	movq	%rax, -144(%rbp)
	movq	-64(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_temp
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rdi
	movq	%rax, 464(%rdi)
	movq	current_buffer, %rax
	movq	744(%rax), %rax
	addq	$0, %rax
	movq	-16(%rbp), %rdi
	movq	%rax, 472(%rdi)
	movq	-16(%rbp), %rax
	movq	464(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	472(%rax), %rsi
	callq	move_gap_both
	movq	-144(%rbp), %rdi
	callq	set_buffer_temp
.LBB48_40:                              # %if.end.149
	movq	-64(%rbp), %rdi
	callq	XBUFFER
	xorl	%edi, %edi
	movq	312(%rax), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movq	-16(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	8(%rax), %esi
	shll	$20, %edi
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%edi, %esi
	movl	%esi, 8(%rax)
	jmp	.LBB48_48
.LBB48_41:                              # %if.else.160
	movl	$901, %edi              # imm = 0x385
	movq	-64(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB48_46
# BB#42:                                # %if.then.164
	movl	$1, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rdx
	cmpq	432(%rdx), %rcx
	jle	.LBB48_44
# BB#43:                                # %cond.true.168
	movl	$1, %eax
	movl	%eax, %ecx
	movq	%rcx, -248(%rbp)        # 8-byte Spill
	jmp	.LBB48_45
.LBB48_44:                              # %cond.false.169
	movq	-16(%rbp), %rax
	movq	432(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB48_45:                              # %cond.end.171
	movq	-248(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -152(%rbp)
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	movq	%rax, 488(%rcx)
	movq	-152(%rbp), %rdi
	callq	xmalloc
	movq	-16(%rbp), %rcx
	movq	%rax, 496(%rcx)
	movq	-152(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 480(%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-1048577, %edx         # imm = 0xFFFFFFFFFFEFFFFF
	movl	%edx, 8(%rax)
	jmp	.LBB48_47
.LBB48_46:                              # %if.else.180
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	movq	%rax, 488(%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edi
	andl	$-1048577, %edi         # imm = 0xFFFFFFFFFFEFFFFF
	movl	%edi, 8(%rax)
.LBB48_47:                              # %if.end.186
	jmp	.LBB48_48
.LBB48_48:                              # %if.end.187
	movq	-16(%rbp), %rdi
	callq	encode_coding
	movl	$901, %edi              # imm = 0x385
	movq	-64(%rbp), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB48_56
# BB#49:                                # %if.then.191
	movq	-16(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB48_50
	jmp	.LBB48_51
.LBB48_50:                              # %if.then.194
	callq	Fbuffer_string
	movq	-16(%rbp), %rcx
	movq	%rax, 488(%rcx)
	jmp	.LBB48_55
.LBB48_51:                              # %if.else.197
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$22, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB48_53
# BB#52:                                # %if.then.202
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rcx
	movq	%rax, 488(%rcx)
	jmp	.LBB48_54
.LBB48_53:                              # %if.else.205
	movq	-16(%rbp), %rax
	movq	496(%rax), %rdi
	movq	-16(%rbp), %rax
	movq	384(%rax), %rsi
	callq	make_unibyte_string
	movq	-16(%rbp), %rsi
	movq	%rax, 488(%rsi)
	movq	-16(%rbp), %rax
	movq	496(%rax), %rdi
	callq	xfree
.LBB48_54:                              # %if.end.210
	jmp	.LBB48_55
.LBB48_55:                              # %if.end.211
	jmp	.LBB48_56
.LBB48_56:                              # %if.end.212
	cmpq	$0, -104(%rbp)
	jl	.LBB48_81
# BB#57:                                # %if.then.215
	movq	-24(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	movq	-104(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jge	.LBB48_59
# BB#58:                                # %if.then.219
	movq	current_buffer, %rdi
	movq	-104(%rbp), %rsi
	movq	-112(%rbp), %rdx
	callq	temp_set_point_both
	jmp	.LBB48_66
.LBB48_59:                              # %if.else.220
	movq	-104(%rbp), %rax
	movq	-32(%rbp), %rcx
	addq	-80(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB48_61
# BB#60:                                # %if.then.224
	movq	current_buffer, %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	callq	temp_set_point_both
	jmp	.LBB48_65
.LBB48_61:                              # %if.else.225
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB48_63
# BB#62:                                # %if.then.230
	movq	current_buffer, %rdi
	movq	-104(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	392(%rcx), %rcx
	subq	-80(%rbp), %rcx
	addq	%rcx, %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	384(%rdx), %rdx
	subq	-88(%rbp), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	temp_set_point_both
	jmp	.LBB48_64
.LBB48_63:                              # %if.else.236
	movq	current_buffer, %rdi
	movq	-104(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	384(%rcx), %rcx
	subq	-88(%rbp), %rcx
	addq	%rcx, %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	384(%rdx), %rdx
	subq	-88(%rbp), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	temp_set_point_both
.LBB48_64:                              # %if.end.243
	jmp	.LBB48_65
.LBB48_65:                              # %if.end.244
	jmp	.LBB48_66
.LBB48_66:                              # %if.end.245
	testb	$1, -113(%rbp)
	je	.LBB48_80
# BB#67:                                # %if.then.247
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	128(%rax), %rax
	movq	%rax, -160(%rbp)
.LBB48_68:                              # %for.cond.251
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -160(%rbp)
	je	.LBB48_79
# BB#69:                                # %for.body.253
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	shrl	$30, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB48_77
# BB#70:                                # %if.then.258
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	andl	$-1073741825, %ecx      # imm = 0xFFFFFFFFBFFFFFFF
	movl	%ecx, (%rax)
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	shrl	$31, %ecx
	testl	$1, %ecx
	je	.LBB48_72
# BB#71:                                # %if.then.264
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-40(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	%rax, 24(%rcx)
	jmp	.LBB48_76
.LBB48_72:                              # %if.else.266
                                        #   in Loop: Header=BB48_68 Depth=1
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	384(%rcx), %rax
	movq	-160(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB48_74
# BB#73:                                # %cond.true.274
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-160(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	jmp	.LBB48_75
.LBB48_74:                              # %cond.false.276
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-32(%rbp), %rax
	movq	-16(%rbp), %rcx
	addq	392(%rcx), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
.LBB48_75:                              # %cond.end.279
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-280(%rbp), %rax        # 8-byte Reload
	movq	-160(%rbp), %rcx
	movq	%rax, 24(%rcx)
.LBB48_76:                              # %if.end.282
                                        #   in Loop: Header=BB48_68 Depth=1
	jmp	.LBB48_77
.LBB48_77:                              # %if.end.283
                                        #   in Loop: Header=BB48_68 Depth=1
	jmp	.LBB48_78
.LBB48_78:                              # %for.inc.284
                                        #   in Loop: Header=BB48_68 Depth=1
	movq	-160(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB48_68
.LBB48_79:                              # %for.end.286
	jmp	.LBB48_80
.LBB48_80:                              # %if.end.287
	jmp	.LBB48_81
.LBB48_81:                              # %if.end.288
	testb	$1, -114(%rbp)
	je	.LBB48_83
# BB#82:                                # %if.then.290
	movq	-16(%rbp), %rax
	movq	448(%rax), %rdi
	callq	Fkill_buffer
	movq	%rax, -288(%rbp)        # 8-byte Spill
.LBB48_83:                              # %if.end.293
	xorl	%edi, %edi
	movq	-128(%rbp), %rax
	movq	%rax, globals+416
	movq	-72(%rbp), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-296(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -304(%rbp)        # 8-byte Spill
	addq	$296, %rsp              # imm = 0x128
	popq	%rbx
	popq	%rbp
	retq
.Lfunc_end48:
	.size	encode_coding_object, .Lfunc_end48-encode_coding_object
	.cfi_endproc

	.align	16, 0x90
	.type	encode_coding,@function
encode_coding:                          # @encode_coding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp148:
	.cfi_def_cfa_offset 16
.Ltmp149:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp150:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -8(%rbp)
	movq	$16384, -128(%rbp)      # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -136(%rbp)
	movb	$0, -137(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movabsq	$encode_coding_raw_text, %rsi
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	%rsi, 608(%rax)
	jne	.LBB49_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.LBB49_3
.LBB49_2:                               # %if.else
	movl	$1, %esi
	leaq	-28(%rbp), %rdx
	movq	-16(%rbp), %rdi
	callq	get_translation_table
	movq	%rax, -24(%rbp)
.LBB49_3:                               # %if.end
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB49_4
	jmp	.LBB49_5
.LBB49_4:                               # %if.then.7
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	%rax, %rdi
	callq	set_buffer_internal
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	movq	-8(%rbp), %rax
	andb	$1, %dl
	movzbl	%dl, %edi
	movl	8(%rax), %esi
	shll	$20, %edi
	andl	$-1048577, %esi         # imm = 0xFFFFFFFFFFEFFFFF
	orl	%edi, %esi
	movl	%esi, 8(%rax)
.LBB49_5:                               # %if.end.12
	xorl	%esi, %esi
	movq	-8(%rbp), %rax
	movq	$0, 408(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 400(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 392(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 384(%rax)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
# BB#6:                                 # %do.body
	movq	-8(%rbp), %rax
	movq	432(%rax), %rax
	addq	$16, %rax
	cmpq	$16384, %rax            # imm = 0x4000
	jge	.LBB49_8
# BB#7:                                 # %cond.true
	movq	-8(%rbp), %rax
	movq	432(%rax), %rax
	addq	$16, %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false
	movl	$16384, %eax            # imm = 0x4000
	movl	%eax, %ecx
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	jmp	.LBB49_9
.LBB49_9:                               # %cond.end
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	shlq	$2, %rax
	cmpq	-128(%rbp), %rax
	ja	.LBB49_11
# BB#10:                                # %cond.true.17
	movq	-152(%rbp), %rax
	shlq	$2, %rax
	movq	-128(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -128(%rbp)
	movq	-152(%rbp), %rax
	leaq	15(,%rax,4), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -176(%rbp)        # 8-byte Spill
	jmp	.LBB49_12
.LBB49_11:                              # %cond.false.20
	movb	$1, -137(%rbp)
	movq	-152(%rbp), %rax
	shlq	$2, %rax
	movq	%rax, %rdi
	callq	record_xmalloc
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB49_12:                              # %cond.end.23
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	movq	%rax, 504(%rcx)
	movq	-152(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 512(%rax)
# BB#13:                                # %do.end
	movabsq	$encode_coding_ccl, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rax, 608(%rcx)
	jne	.LBB49_15
# BB#14:                                # %if.then.28
	leaq	-120(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 16(%rcx)
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$18, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	setup_ccl_program
	movb	%al, -185(%rbp)         # 1-byte Spill
.LBB49_15:                              # %if.end.36
	jmp	.LBB49_16
.LBB49_16:                              # %do.body.37
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	callq	consume_chars
	movq	-8(%rbp), %rdi
	callq	coding_set_destination
	movq	-8(%rbp), %rsi
	movq	608(%rsi), %rsi
	movq	-8(%rbp), %rdi
	callq	*%rsi
	movb	%al, -186(%rbp)         # 1-byte Spill
# BB#17:                                # %do.cond
                                        #   in Loop: Header=BB49_16 Depth=1
	movq	-8(%rbp), %rax
	movq	408(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	432(%rcx), %rax
	jl	.LBB49_16
# BB#18:                                # %do.end.44
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB49_19
	jmp	.LBB49_21
.LBB49_19:                              # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpq	$0, 392(%rax)
	jle	.LBB49_21
# BB#20:                                # %if.then.51
	xorl	%edx, %edx
	movq	-8(%rbp), %rax
	movq	392(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	384(%rax), %rsi
	callq	insert_from_gap
.LBB49_21:                              # %if.end.54
	jmp	.LBB49_22
.LBB49_22:                              # %do.body.55
	testb	$1, -137(%rbp)
	je	.LBB49_24
# BB#23:                                # %if.then.57
	xorl	%edi, %edi
	movb	$0, -137(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB49_24:                              # %if.end.60
	jmp	.LBB49_25
.LBB49_25:                              # %do.end.62
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end49:
	.size	encode_coding, .Lfunc_end49-encode_coding
	.cfi_endproc

	.globl	Fcoding_system_p
	.align	16, 0x90
	.type	Fcoding_system_p,@function
Fcoding_system_p:                       # @Fcoding_system_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp151:
	.cfi_def_cfa_offset 16
.Ltmp152:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp153:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB50_2
# BB#1:                                 # %lor.lhs.false
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jl	.LBB50_3
.LBB50_2:                               # %if.then
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB50_7
.LBB50_3:                               # %if.end
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB50_5
# BB#4:                                 # %lor.lhs.false.7
	movl	$277, %edi              # imm = 0x115
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB50_6
.LBB50_5:                               # %if.then.13
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB50_7
.LBB50_6:                               # %if.end.15
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB50_7:                               # %return
	movq	-8(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end50:
	.size	Fcoding_system_p, .Lfunc_end50-Fcoding_system_p
	.cfi_endproc

	.globl	Fread_non_nil_coding_system
	.align	16, 0x90
	.type	Fread_non_nil_coding_system,@function
Fread_non_nil_coding_system:            # @Fread_non_nil_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp154:
	.cfi_def_cfa_offset 16
.Ltmp155:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp156:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
.LBB51_1:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	globals+272, %rsi
	movq	%rsi, -24(%rbp)         # 8-byte Spill
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$279, %edi              # imm = 0x117
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-56(%rbp), %r8          # 8-byte Reload
	movq	-64(%rbp), %r9          # 8-byte Reload
	movq	-72(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8(%rsp)
	callq	Fcompleting_read
	movq	%rax, -16(%rbp)
# BB#2:                                 # %do.cond
                                        #   in Loop: Header=BB51_1 Depth=1
	movq	-16(%rbp), %rdi
	callq	SCHARS
	cmpq	$0, %rax
	je	.LBB51_1
# BB#3:                                 # %do.end
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fintern
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end51:
	.size	Fread_non_nil_coding_system, .Lfunc_end51-Fread_non_nil_coding_system
	.cfi_endproc

	.globl	Fread_coding_system
	.align	16, 0x90
	.type	Fread_coding_system,@function
Fread_coding_system:                    # @Fread_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp157:
	.cfi_def_cfa_offset 16
.Ltmp158:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp159:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	callq	SPECPDL_INDEX
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB52_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, -16(%rbp)
.LBB52_2:                               # %if.end
	movl	$289, %edi              # imm = 0x121
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	specbind
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	globals+272, %rsi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$279, %edi              # imm = 0x117
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-16(%rbp), %rsi
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movq	-80(%rbp), %r8          # 8-byte Reload
	movq	-88(%rbp), %r9          # 8-byte Reload
	movq	-96(%rbp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8(%rsp)
	callq	Fcompleting_read
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	-24(%rbp), %rdi
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	SCHARS
	cmpq	$0, %rax
	jne	.LBB52_4
# BB#3:                                 # %cond.true
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)        # 8-byte Spill
	jmp	.LBB52_5
.LBB52_4:                               # %cond.false
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fintern
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB52_5:                               # %cond.end
	movq	-120(%rbp), %rax        # 8-byte Reload
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end52:
	.size	Fread_coding_system, .Lfunc_end52-Fread_coding_system
	.cfi_endproc

	.globl	detect_coding_system
	.align	16, 0x90
	.type	detect_coding_system,@function
detect_coding_system:                   # @detect_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp160:
	.cfi_def_cfa_offset 16
.Ltmp161:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp162:
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movb	%r8b, %al
	movb	%cl, %r10b
	xorl	%ecx, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	andb	$1, %r10b
	movb	%r10b, -25(%rbp)
	andb	$1, %al
	movb	%al, -26(%rbp)
	movq	%r9, -40(%rbp)
	movq	-8(%rbp), %rdx
	addq	-24(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movl	%ecx, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -72(%rbp)
	movb	$0, -717(%rbp)
	movb	$0, -718(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-816(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB53_2
# BB#1:                                 # %if.then
	movl	$958, %edi              # imm = 0x3BE
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
.LBB53_2:                               # %if.end
	leaq	-688(%rbp), %rsi
	movq	-40(%rbp), %rdi
	callq	setup_coding_system
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-688(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -56(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-688(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rdi
	callq	AREF
	movl	$14, %ecx
	movl	%ecx, %esi
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -248(%rbp)
	movb	-26(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movl	-680(%rbp), %r8d
	shll	$19, %ecx
	andl	$-524289, %r8d          # imm = 0xFFFFFFFFFFF7FFFF
	orl	%ecx, %r8d
	movl	%r8d, -680(%rbp)
	movq	$0, -288(%rbp)
	movl	-680(%rbp), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	orl	$1, %ecx
	movl	-680(%rbp), %r8d
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %r8d          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %r8d
	movl	%r8d, -680(%rbp)
	movq	$0, -328(%rbp)
	movl	$0, -704(%rbp)
	movl	$0, -708(%rbp)
	movl	$0, -712(%rbp)
	movq	-56(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -716(%rbp)
	cmpl	$20, -716(%rbp)
	jne	.LBB53_115
# BB#3:                                 # %if.then.25
	movl	-672(%rbp), %edi
	movb	globals+3397, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	inhibit_flag
	andb	$1, %al
	movb	%al, -745(%rbp)
	movl	-668(%rbp), %edi
	movb	globals+3392, %al
	andb	$1, %al
	movzbl	%al, %esi
	callq	inhibit_flag
	andb	$1, %al
	movb	%al, -746(%rbp)
	movb	-664(%rbp), %al
	andb	$1, %al
	movb	%al, -747(%rbp)
.LBB53_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-8(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jae	.LBB53_35
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB53_4 Depth=1
	movq	-8(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -740(%rbp)
	movl	-740(%rbp), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	je	.LBB53_9
# BB#6:                                 # %if.then.45
                                        #   in Loop: Header=BB53_4 Depth=1
	movb	$1, -718(%rbp)
	testb	$1, -717(%rbp)
	je	.LBB53_8
# BB#7:                                 # %if.then.47
	jmp	.LBB53_35
.LBB53_8:                               # %if.end.48
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_33
.LBB53_9:                               # %if.else
                                        #   in Loop: Header=BB53_4 Depth=1
	cmpl	$32, -740(%rbp)
	jge	.LBB53_29
# BB#10:                                # %if.then.51
                                        #   in Loop: Header=BB53_4 Depth=1
	cmpl	$27, -740(%rbp)
	je	.LBB53_13
# BB#11:                                # %lor.lhs.false
                                        #   in Loop: Header=BB53_4 Depth=1
	cmpl	$15, -740(%rbp)
	je	.LBB53_13
# BB#12:                                # %lor.lhs.false.56
                                        #   in Loop: Header=BB53_4 Depth=1
	cmpl	$14, -740(%rbp)
	jne	.LBB53_20
.LBB53_13:                              # %land.lhs.true
                                        #   in Loop: Header=BB53_4 Depth=1
	testb	$1, -746(%rbp)
	jne	.LBB53_20
# BB#14:                                # %land.lhs.true.60
                                        #   in Loop: Header=BB53_4 Depth=1
	cmpl	$0, -712(%rbp)
	jne	.LBB53_20
# BB#15:                                # %if.then.63
                                        #   in Loop: Header=BB53_4 Depth=1
	leaq	-688(%rbp), %rdi
	leaq	-712(%rbp), %rsi
	callq	detect_coding_iso_2022
	testb	$1, %al
	jne	.LBB53_16
	jmp	.LBB53_19
.LBB53_16:                              # %if.then.65
	movl	-704(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	jne	.LBB53_18
# BB#17:                                # %if.then.69
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	-232(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -328(%rbp)
.LBB53_18:                              # %if.end.72
	movl	-704(%rbp), %eax
	orl	$-52, %eax
	movl	%eax, -704(%rbp)
	jmp	.LBB53_35
.LBB53_19:                              # %if.end.75
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_26
.LBB53_20:                              # %if.else.76
                                        #   in Loop: Header=BB53_4 Depth=1
	cmpl	$0, -740(%rbp)
	jne	.LBB53_25
# BB#21:                                # %land.lhs.true.78
                                        #   in Loop: Header=BB53_4 Depth=1
	testb	$1, -745(%rbp)
	jne	.LBB53_25
# BB#22:                                # %if.then.80
                                        #   in Loop: Header=BB53_4 Depth=1
	movb	$1, -717(%rbp)
	testb	$1, -718(%rbp)
	je	.LBB53_24
# BB#23:                                # %if.then.82
	jmp	.LBB53_35
.LBB53_24:                              # %if.end.83
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_25
.LBB53_25:                              # %if.end.84
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_26
.LBB53_26:                              # %if.end.85
                                        #   in Loop: Header=BB53_4 Depth=1
	testb	$1, -718(%rbp)
	jne	.LBB53_28
# BB#27:                                # %if.then.87
                                        #   in Loop: Header=BB53_4 Depth=1
	movq	-328(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -328(%rbp)
.LBB53_28:                              # %if.end.89
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_32
.LBB53_29:                              # %if.else.90
                                        #   in Loop: Header=BB53_4 Depth=1
	testb	$1, -718(%rbp)
	jne	.LBB53_31
# BB#30:                                # %if.then.92
                                        #   in Loop: Header=BB53_4 Depth=1
	movq	-328(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -328(%rbp)
.LBB53_31:                              # %if.end.95
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_32
.LBB53_32:                              # %if.end.96
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_33
.LBB53_33:                              # %if.end.97
                                        #   in Loop: Header=BB53_4 Depth=1
	jmp	.LBB53_34
.LBB53_34:                              # %for.inc
                                        #   in Loop: Header=BB53_4 Depth=1
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB53_4
.LBB53_35:                              # %for.end
	testb	$1, -717(%rbp)
	jne	.LBB53_39
# BB#36:                                # %lor.lhs.false.100
	testb	$1, -718(%rbp)
	jne	.LBB53_39
# BB#37:                                # %lor.lhs.false.103
	movq	-328(%rbp), %rax
	cmpq	-248(%rbp), %rax
	jl	.LBB53_39
# BB#38:                                # %lor.lhs.false.108
	cmpl	$0, -708(%rbp)
	je	.LBB53_80
.LBB53_39:                              # %if.then.111
	movq	-328(%rbp), %rax
	cmpq	-248(%rbp), %rax
	jne	.LBB53_47
# BB#40:                                # %if.then.116
	movl	$0, -744(%rbp)
.LBB53_41:                              # %for.cond.117
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$19, -744(%rbp)
	jge	.LBB53_46
# BB#42:                                # %for.body.120
                                        #   in Loop: Header=BB53_41 Depth=1
	movl	$1, %eax
	movabsq	$coding_categories, %rcx
	movslq	-744(%rbp), %rdx
	movl	coding_priorities(,%rdx,4), %esi
	movl	%esi, -724(%rbp)
	movl	-724(%rbp), %esi
	movl	%esi, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rcx
	movq	%rcx, -736(%rbp)
	movl	-708(%rbp), %esi
	movl	-724(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %esi
	cmpl	$0, %esi
	je	.LBB53_44
# BB#43:                                # %if.then.125
	jmp	.LBB53_46
.LBB53_44:                              # %if.end.126
                                        #   in Loop: Header=BB53_41 Depth=1
	jmp	.LBB53_45
.LBB53_45:                              # %for.inc.127
                                        #   in Loop: Header=BB53_41 Depth=1
	movl	-744(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -744(%rbp)
	jmp	.LBB53_41
.LBB53_46:                              # %for.end.129
	jmp	.LBB53_79
.LBB53_47:                              # %if.else.130
	testb	$1, -717(%rbp)
	je	.LBB53_49
# BB#48:                                # %if.then.132
	movl	-712(%rbp), %eax
	orl	$-15873, %eax           # imm = 0xFFFFFFFFFFFFC1FF
	movl	%eax, -712(%rbp)
	movl	-704(%rbp), %eax
	orl	$-15873, %eax           # imm = 0xFFFFFFFFFFFFC1FF
	movl	%eax, -704(%rbp)
	jmp	.LBB53_53
.LBB53_49:                              # %if.else.137
	testb	$1, -747(%rbp)
	je	.LBB53_52
# BB#50:                                # %land.lhs.true.140
	leaq	-688(%rbp), %rdi
	leaq	-712(%rbp), %rsi
	callq	detect_coding_utf_8
	testb	$1, %al
	jne	.LBB53_51
	jmp	.LBB53_52
.LBB53_51:                              # %if.then.143
	movl	-712(%rbp), %eax
	orl	$-449, %eax             # imm = 0xFFFFFFFFFFFFFE3F
	movl	%eax, -712(%rbp)
	movl	-704(%rbp), %eax
	orl	$-449, %eax             # imm = 0xFFFFFFFFFFFFFE3F
	movl	%eax, -704(%rbp)
.LBB53_52:                              # %if.end.148
	jmp	.LBB53_53
.LBB53_53:                              # %if.end.149
	movl	$0, -744(%rbp)
.LBB53_54:                              # %for.cond.150
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$19, -744(%rbp)
	jge	.LBB53_78
# BB#55:                                # %for.body.153
                                        #   in Loop: Header=BB53_54 Depth=1
	movabsq	$coding_categories, %rax
	movslq	-744(%rbp), %rcx
	movl	coding_priorities(,%rcx,4), %edx
	movl	%edx, -724(%rbp)
	movl	-724(%rbp), %edx
	movl	%edx, %ecx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	%rax, -736(%rbp)
	movq	-736(%rbp), %rax
	cmpq	$0, (%rax)
	jge	.LBB53_57
# BB#56:                                # %if.then.161
                                        #   in Loop: Header=BB53_54 Depth=1
	movl	$1, %eax
	movl	-724(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	orl	-704(%rbp), %eax
	movl	%eax, -704(%rbp)
	jmp	.LBB53_76
.LBB53_57:                              # %if.else.165
                                        #   in Loop: Header=BB53_54 Depth=1
	cmpl	$19, -724(%rbp)
	jb	.LBB53_59
# BB#58:                                # %if.then.168
                                        #   in Loop: Header=BB53_54 Depth=1
	jmp	.LBB53_77
.LBB53_59:                              # %if.else.169
                                        #   in Loop: Header=BB53_54 Depth=1
	movl	$1, %eax
	movl	-712(%rbp), %ecx
	movl	-724(%rbp), %edx
	movl	%ecx, -820(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-820(%rbp), %edx        # 4-byte Reload
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB53_64
# BB#60:                                # %if.then.174
                                        #   in Loop: Header=BB53_54 Depth=1
	testb	$1, -25(%rbp)
	je	.LBB53_63
# BB#61:                                # %land.lhs.true.177
                                        #   in Loop: Header=BB53_54 Depth=1
	movl	$1, %eax
	movl	-708(%rbp), %ecx
	movl	-724(%rbp), %edx
	movl	%ecx, -824(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-824(%rbp), %edx        # 4-byte Reload
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB53_63
# BB#62:                                # %if.then.182
	jmp	.LBB53_78
.LBB53_63:                              # %if.end.183
                                        #   in Loop: Header=BB53_54 Depth=1
	jmp	.LBB53_74
.LBB53_64:                              # %if.else.184
                                        #   in Loop: Header=BB53_54 Depth=1
	leaq	-688(%rbp), %rdi
	leaq	-712(%rbp), %rsi
	movq	-736(%rbp), %rax
	callq	*592(%rax)
	testb	$1, %al
	jne	.LBB53_65
	jmp	.LBB53_73
.LBB53_65:                              # %land.lhs.true.187
                                        #   in Loop: Header=BB53_54 Depth=1
	testb	$1, -25(%rbp)
	je	.LBB53_73
# BB#66:                                # %land.lhs.true.190
                                        #   in Loop: Header=BB53_54 Depth=1
	movl	$1, %eax
	movl	-708(%rbp), %ecx
	movl	-724(%rbp), %edx
	movl	%ecx, -828(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-828(%rbp), %edx        # 4-byte Reload
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB53_73
# BB#67:                                # %if.then.195
	cmpl	$9, -724(%rbp)
	jne	.LBB53_72
# BB#68:                                # %if.then.198
	movl	-708(%rbp), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB53_70
# BB#69:                                # %if.then.202
	movl	$11, -724(%rbp)
	jmp	.LBB53_71
.LBB53_70:                              # %if.else.203
	movl	$10, -724(%rbp)
.LBB53_71:                              # %if.end.204
	jmp	.LBB53_72
.LBB53_72:                              # %if.end.205
	jmp	.LBB53_78
.LBB53_73:                              # %if.end.206
                                        #   in Loop: Header=BB53_54 Depth=1
	jmp	.LBB53_74
.LBB53_74:                              # %if.end.207
                                        #   in Loop: Header=BB53_54 Depth=1
	jmp	.LBB53_75
.LBB53_75:                              # %if.end.208
                                        #   in Loop: Header=BB53_54 Depth=1
	jmp	.LBB53_76
.LBB53_76:                              # %if.end.209
                                        #   in Loop: Header=BB53_54 Depth=1
	jmp	.LBB53_77
.LBB53_77:                              # %for.inc.210
                                        #   in Loop: Header=BB53_54 Depth=1
	movl	-744(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -744(%rbp)
	jmp	.LBB53_54
.LBB53_78:                              # %for.end.212
	jmp	.LBB53_79
.LBB53_79:                              # %if.end.213
	jmp	.LBB53_80
.LBB53_80:                              # %if.end.214
	movl	-704(%rbp), %eax
	andl	$524287, %eax           # imm = 0x7FFFF
	cmpl	$524287, %eax           # imm = 0x7FFFF
	je	.LBB53_82
# BB#81:                                # %lor.lhs.false.219
	testb	$1, -717(%rbp)
	je	.LBB53_83
.LBB53_82:                              # %if.then.222
	movl	$524288, -708(%rbp)     # imm = 0x80000
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movl	$702, %edi              # imm = 0x2BE
	movq	%rax, -840(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movl	%edi, %edx
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	hash_lookup
	movq	%rax, -696(%rbp)
	movq	-696(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
	jmp	.LBB53_114
.LBB53_83:                              # %if.else.229
	cmpl	$0, -704(%rbp)
	jne	.LBB53_86
# BB#84:                                # %land.lhs.true.232
	cmpl	$0, -708(%rbp)
	jne	.LBB53_86
# BB#85:                                # %if.then.235
	movl	$524287, -708(%rbp)     # imm = 0x7FFFF
	movq	coding_categories+12320, %rax
	movq	%rax, -696(%rbp)
	movq	-696(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
	jmp	.LBB53_113
.LBB53_86:                              # %if.else.240
	testb	$1, -25(%rbp)
	je	.LBB53_97
# BB#87:                                # %if.then.242
	cmpl	$0, -708(%rbp)
	je	.LBB53_89
# BB#88:                                # %if.then.245
	movl	$1, %eax
	movl	-724(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	%eax, -708(%rbp)
	movq	-736(%rbp), %rdx
	movq	(%rdx), %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	%rdx, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
	jmp	.LBB53_96
.LBB53_89:                              # %if.else.252
	movl	$0, -744(%rbp)
.LBB53_90:                              # %for.cond.253
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$19, -744(%rbp)
	jge	.LBB53_95
# BB#91:                                # %for.body.256
                                        #   in Loop: Header=BB53_90 Depth=1
	movl	$1, %eax
	movl	-704(%rbp), %ecx
	movslq	-744(%rbp), %rdx
	movl	coding_priorities(,%rdx,4), %esi
	movl	%ecx, -844(%rbp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-844(%rbp), %esi        # 4-byte Reload
	andl	%eax, %esi
	cmpl	$0, %esi
	jne	.LBB53_93
# BB#92:                                # %if.then.263
	movabsq	$coding_categories, %rax
	movl	$1, %ecx
	movslq	-744(%rbp), %rdx
	movl	coding_priorities(,%rdx,4), %esi
	movl	%ecx, -848(%rbp)        # 4-byte Spill
	movl	%esi, %ecx
                                        # kill: CL<def> ECX<kill>
	movl	-848(%rbp), %esi        # 4-byte Reload
	shll	%cl, %esi
	movl	%esi, -708(%rbp)
	movslq	-744(%rbp), %rdx
	movl	coding_priorities(,%rdx,4), %esi
	movl	%esi, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	-696(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
	jmp	.LBB53_95
.LBB53_93:                              # %if.end.276
                                        #   in Loop: Header=BB53_90 Depth=1
	jmp	.LBB53_94
.LBB53_94:                              # %for.inc.277
                                        #   in Loop: Header=BB53_90 Depth=1
	movl	-744(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -744(%rbp)
	jmp	.LBB53_90
.LBB53_95:                              # %for.end.279
	jmp	.LBB53_96
.LBB53_96:                              # %if.end.280
	jmp	.LBB53_112
.LBB53_97:                              # %if.else.281
	movl	-704(%rbp), %eax
	orl	-708(%rbp), %eax
	movl	%eax, -752(%rbp)
	movl	$0, -756(%rbp)
	movl	$18, -744(%rbp)
.LBB53_98:                              # %for.cond.286
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -744(%rbp)
	jl	.LBB53_105
# BB#99:                                # %for.body.289
                                        #   in Loop: Header=BB53_98 Depth=1
	movl	$1, %eax
	movslq	-744(%rbp), %rcx
	movl	coding_priorities(,%rcx,4), %edx
	movl	%edx, -724(%rbp)
	movl	-752(%rbp), %edx
	movl	-724(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	jne	.LBB53_103
# BB#100:                               # %if.then.295
                                        #   in Loop: Header=BB53_98 Depth=1
	movabsq	$coding_categories, %rax
	movl	$1, %ecx
	movl	-724(%rbp), %edx
	movl	%ecx, -852(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	movl	-852(%rbp), %edx        # 4-byte Reload
	shll	%cl, %edx
	orl	-756(%rbp), %edx
	movl	%edx, -756(%rbp)
	movl	-724(%rbp), %edx
	movl	%edx, %esi
	imulq	$616, %rsi, %rsi        # imm = 0x268
	addq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, -696(%rbp)
	cmpq	$0, -696(%rbp)
	jl	.LBB53_102
# BB#101:                               # %if.then.303
                                        #   in Loop: Header=BB53_98 Depth=1
	movq	-696(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
.LBB53_102:                             # %if.end.307
                                        #   in Loop: Header=BB53_98 Depth=1
	jmp	.LBB53_103
.LBB53_103:                             # %if.end.308
                                        #   in Loop: Header=BB53_98 Depth=1
	jmp	.LBB53_104
.LBB53_104:                             # %for.inc.309
                                        #   in Loop: Header=BB53_98 Depth=1
	movl	-744(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -744(%rbp)
	jmp	.LBB53_98
.LBB53_105:                             # %for.end.310
	movl	$18, -744(%rbp)
.LBB53_106:                             # %for.cond.311
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -744(%rbp)
	jl	.LBB53_111
# BB#107:                               # %for.body.314
                                        #   in Loop: Header=BB53_106 Depth=1
	movl	$1, %eax
	movslq	-744(%rbp), %rcx
	movl	coding_priorities(,%rcx,4), %edx
	movl	%edx, -724(%rbp)
	movl	-708(%rbp), %edx
	movl	-724(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	%eax, %edx
	cmpl	$0, %edx
	je	.LBB53_109
# BB#108:                               # %if.then.321
                                        #   in Loop: Header=BB53_106 Depth=1
	movabsq	$coding_categories, %rax
	movl	-724(%rbp), %ecx
	movl	%ecx, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -696(%rbp)
	movq	-696(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-72(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, -72(%rbp)
.LBB53_109:                             # %if.end.328
                                        #   in Loop: Header=BB53_106 Depth=1
	jmp	.LBB53_110
.LBB53_110:                             # %for.inc.329
                                        #   in Loop: Header=BB53_106 Depth=1
	movl	-744(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -744(%rbp)
	jmp	.LBB53_106
.LBB53_111:                             # %for.end.331
	movl	-756(%rbp), %eax
	orl	-708(%rbp), %eax
	movl	%eax, -708(%rbp)
.LBB53_112:                             # %if.end.334
	jmp	.LBB53_113
.LBB53_113:                             # %if.end.335
	jmp	.LBB53_114
.LBB53_114:                             # %if.end.336
	jmp	.LBB53_138
.LBB53_115:                             # %if.else.337
	cmpl	$6, -716(%rbp)
	jne	.LBB53_122
# BB#116:                               # %if.then.340
	leaq	-688(%rbp), %rdi
	leaq	-712(%rbp), %rsi
	callq	detect_coding_utf_8
	testb	$1, %al
	jne	.LBB53_117
	jmp	.LBB53_121
.LBB53_117:                             # %if.then.342
	movl	-708(%rbp), %eax
	andl	$256, %eax              # imm = 0x100
	cmpl	$0, %eax
	je	.LBB53_119
# BB#118:                               # %if.then.347
	movabsq	$coding_categories, %rax
	addq	$4928, %rax             # imm = 0x1340
	movq	%rax, -768(%rbp)
	jmp	.LBB53_120
.LBB53_119:                             # %if.else.348
	movabsq	$coding_categories, %rax
	addq	$4312, %rax             # imm = 0x10D8
	movq	%rax, -768(%rbp)
.LBB53_120:                             # %if.end.349
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
.LBB53_121:                             # %if.end.354
	jmp	.LBB53_137
.LBB53_122:                             # %if.else.355
	cmpl	$9, -716(%rbp)
	jne	.LBB53_135
# BB#123:                               # %if.then.358
	leaq	-688(%rbp), %rdi
	leaq	-712(%rbp), %rsi
	callq	detect_coding_utf_16
	testb	$1, %al
	jne	.LBB53_124
	jmp	.LBB53_134
.LBB53_124:                             # %if.then.360
	movl	-708(%rbp), %eax
	andl	$2048, %eax             # imm = 0x800
	cmpl	$0, %eax
	je	.LBB53_126
# BB#125:                               # %if.then.365
	movabsq	$coding_categories, %rax
	addq	$6776, %rax             # imm = 0x1A78
	movq	%rax, -776(%rbp)
	jmp	.LBB53_133
.LBB53_126:                             # %if.else.366
	movl	-708(%rbp), %eax
	andl	$1024, %eax             # imm = 0x400
	cmpl	$0, %eax
	je	.LBB53_128
# BB#127:                               # %if.then.370
	movabsq	$coding_categories, %rax
	addq	$6160, %rax             # imm = 0x1810
	movq	%rax, -776(%rbp)
	jmp	.LBB53_132
.LBB53_128:                             # %if.else.371
	movl	-704(%rbp), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB53_130
# BB#129:                               # %if.then.375
	movabsq	$coding_categories, %rax
	addq	$7392, %rax             # imm = 0x1CE0
	movq	%rax, -776(%rbp)
	jmp	.LBB53_131
.LBB53_130:                             # %if.else.376
	movabsq	$coding_categories, %rax
	addq	$8008, %rax             # imm = 0x1F48
	movq	%rax, -776(%rbp)
.LBB53_131:                             # %if.end.377
	jmp	.LBB53_132
.LBB53_132:                             # %if.end.378
	jmp	.LBB53_133
.LBB53_133:                             # %if.end.379
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
.LBB53_134:                             # %if.end.384
	jmp	.LBB53_136
.LBB53_135:                             # %if.else.385
	movl	$14, %eax
	movl	%eax, %esi
	movq	-56(%rbp), %rdi
	callq	AREF
	movl	$1, %ecx
	sarq	$2, %rax
	movl	%eax, %edx
	movl	%ecx, -856(%rbp)        # 4-byte Spill
	movl	%edx, %ecx
                                        # kill: CL<def> ECX<kill>
	movl	-856(%rbp), %edx        # 4-byte Reload
	shll	%cl, %edx
	movl	%edx, -708(%rbp)
	movq	-688(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -72(%rbp)
.LBB53_136:                             # %if.end.394
	jmp	.LBB53_137
.LBB53_137:                             # %if.end.395
	jmp	.LBB53_138
.LBB53_138:                             # %if.end.396
	movl	$-1, -780(%rbp)
	movl	$-1, -784(%rbp)
	movl	$-1, -788(%rbp)
	movq	-64(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB53_139
	jmp	.LBB53_149
.LBB53_139:                             # %if.then.398
	movl	-708(%rbp), %eax
	andl	$-15873, %eax           # imm = 0xFFFFFFFFFFFFC1FF
	cmpl	$0, %eax
	je	.LBB53_144
# BB#140:                               # %if.then.402
	testb	$1, -717(%rbp)
	je	.LBB53_142
# BB#141:                               # %if.then.404
	movl	$1, -780(%rbp)
	jmp	.LBB53_143
.LBB53_142:                             # %if.else.405
	movl	$19, %edx
	movq	-232(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	detect_eol
	movl	%eax, -780(%rbp)
.LBB53_143:                             # %if.end.408
	jmp	.LBB53_144
.LBB53_144:                             # %if.end.409
	movl	-708(%rbp), %eax
	andl	$5120, %eax             # imm = 0x1400
	cmpl	$0, %eax
	je	.LBB53_146
# BB#145:                               # %if.then.413
	movl	$10, %edx
	movq	-232(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	detect_eol
	movl	%eax, -784(%rbp)
.LBB53_146:                             # %if.end.416
	movl	-708(%rbp), %eax
	andl	$10240, %eax            # imm = 0x2800
	cmpl	$0, %eax
	je	.LBB53_148
# BB#147:                               # %if.then.420
	movl	$11, %edx
	movq	-232(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	detect_eol
	movl	%eax, -788(%rbp)
.LBB53_148:                             # %if.end.423
	jmp	.LBB53_156
.LBB53_149:                             # %if.else.424
	movl	$973, %edi              # imm = 0x3CD
	movq	-64(%rbp), %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-864(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB53_151
# BB#150:                               # %if.then.428
	movl	$1, -788(%rbp)
	movl	$1, -784(%rbp)
	movl	$1, -780(%rbp)
	jmp	.LBB53_155
.LBB53_151:                             # %if.else.429
	movl	$351, %edi              # imm = 0x15F
	movq	-64(%rbp), %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-872(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB53_153
# BB#152:                               # %if.then.433
	movl	$4, -788(%rbp)
	movl	$4, -784(%rbp)
	movl	$4, -780(%rbp)
	jmp	.LBB53_154
.LBB53_153:                             # %if.else.434
	movl	$2, -788(%rbp)
	movl	$2, -784(%rbp)
	movl	$2, -780(%rbp)
.LBB53_154:                             # %if.end.435
	jmp	.LBB53_155
.LBB53_155:                             # %if.end.436
	jmp	.LBB53_156
.LBB53_156:                             # %if.end.437
	movq	-72(%rbp), %rax
	movq	%rax, -800(%rbp)
.LBB53_157:                             # %for.cond.438
                                        # =>This Inner Loop Header: Depth=1
	movq	-800(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB53_180
# BB#158:                               # %for.body.443
                                        #   in Loop: Header=BB53_157 Depth=1
	movq	-800(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -696(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-696(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$14, %ecx
	movl	%ecx, %esi
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -804(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-696(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB53_159
	jmp	.LBB53_177
.LBB53_159:                             # %if.then.456
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$10, -804(%rbp)
	je	.LBB53_161
# BB#160:                               # %lor.lhs.false.459
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$12, -804(%rbp)
	jne	.LBB53_162
.LBB53_161:                             # %if.then.462
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	-784(%rbp), %eax
	movl	%eax, -808(%rbp)
	jmp	.LBB53_167
.LBB53_162:                             # %if.else.463
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$11, -804(%rbp)
	je	.LBB53_164
# BB#163:                               # %lor.lhs.false.466
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$13, -804(%rbp)
	jne	.LBB53_165
.LBB53_164:                             # %if.then.469
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	-788(%rbp), %eax
	movl	%eax, -808(%rbp)
	jmp	.LBB53_166
.LBB53_165:                             # %if.else.470
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	-780(%rbp), %eax
	movl	%eax, -808(%rbp)
.LBB53_166:                             # %if.end.471
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_167
.LBB53_167:                             # %if.end.472
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$1, -808(%rbp)
	jne	.LBB53_169
# BB#168:                               # %if.then.475
                                        #   in Loop: Header=BB53_157 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-800(%rbp), %rdi
	movq	-64(%rbp), %rcx
	movq	%rdi, -880(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	AREF
	movq	-880(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
	jmp	.LBB53_176
.LBB53_169:                             # %if.else.477
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$4, -808(%rbp)
	jne	.LBB53_171
# BB#170:                               # %if.then.480
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-800(%rbp), %rdi
	movq	-64(%rbp), %rcx
	movq	%rdi, -888(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	AREF
	movq	-888(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
	jmp	.LBB53_175
.LBB53_171:                             # %if.else.482
                                        #   in Loop: Header=BB53_157 Depth=1
	cmpl	$2, -808(%rbp)
	jne	.LBB53_173
# BB#172:                               # %if.then.485
                                        #   in Loop: Header=BB53_157 Depth=1
	movl	$2, %eax
	movl	%eax, %esi
	movq	-800(%rbp), %rdi
	movq	-64(%rbp), %rcx
	movq	%rdi, -896(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	AREF
	movq	-896(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
	jmp	.LBB53_174
.LBB53_173:                             # %if.else.487
                                        #   in Loop: Header=BB53_157 Depth=1
	movq	-800(%rbp), %rdi
	movq	Vcoding_system_hash_table, %rax
	movq	%rdi, -904(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	XHASH_TABLE
	movq	-696(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	-904(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
.LBB53_174:                             # %if.end.490
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_175
.LBB53_175:                             # %if.end.491
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_176
.LBB53_176:                             # %if.end.492
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_178
.LBB53_177:                             # %if.else.493
                                        #   in Loop: Header=BB53_157 Depth=1
	movq	-800(%rbp), %rdi
	movq	Vcoding_system_hash_table, %rax
	movq	%rdi, -912(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	XHASH_TABLE
	movq	-696(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	-912(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
.LBB53_178:                             # %if.end.496
                                        #   in Loop: Header=BB53_157 Depth=1
	jmp	.LBB53_179
.LBB53_179:                             # %for.inc.497
                                        #   in Loop: Header=BB53_157 Depth=1
	movq	-800(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -800(%rbp)
	jmp	.LBB53_157
.LBB53_180:                             # %for.end.499
	testb	$1, -25(%rbp)
	je	.LBB53_185
# BB#181:                               # %cond.true
	movq	-72(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB53_183
# BB#182:                               # %cond.true.506
	movq	-72(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	jmp	.LBB53_184
.LBB53_183:                             # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -920(%rbp)        # 8-byte Spill
.LBB53_184:                             # %cond.end
	movq	-920(%rbp), %rax        # 8-byte Reload
	movq	%rax, -928(%rbp)        # 8-byte Spill
	jmp	.LBB53_186
.LBB53_185:                             # %cond.false.510
	movq	-72(%rbp), %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
.LBB53_186:                             # %cond.end.511
	movq	-928(%rbp), %rax        # 8-byte Reload
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	retq
.Lfunc_end53:
	.size	detect_coding_system, .Lfunc_end53-detect_coding_system
	.cfi_endproc

	.align	16, 0x90
	.type	inhibit_flag,@function
inhibit_flag:                           # @inhibit_flag
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp163:
	.cfi_def_cfa_offset 16
.Ltmp164:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp165:
	.cfi_def_cfa_register %rbp
	movb	%sil, %al
	xorl	%esi, %esi
	movl	%edi, -4(%rbp)
	andb	$1, %al
	movb	%al, -5(%rbp)
	movl	-4(%rbp), %edi
	movb	-5(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	addl	%ecx, %edi
	cmpl	%edi, %esi
	setl	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	retq
.Lfunc_end54:
	.size	inhibit_flag, .Lfunc_end54-inhibit_flag
	.cfi_endproc

	.align	16, 0x90
	.type	detect_eol,@function
detect_eol:                             # @detect_eol
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp166:
	.cfi_def_cfa_offset 16
.Ltmp167:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp168:
	.cfi_def_cfa_register %rbp
	movl	$1, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	addq	-16(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movl	-20(%rbp), %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	andl	$15872, %eax            # imm = 0x3E00
	cmpl	$0, %eax
	je	.LBB55_30
# BB#1:                                 # %if.then
	cmpl	$15, -20(%rbp)
	sete	%al
	andb	$1, %al
	movb	%al, -53(%rbp)
	movb	-53(%rbp), %al
	xorb	$-1, %al
	andb	$1, %al
	movb	%al, -54(%rbp)
.LBB55_2:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB55_29
# BB#3:                                 # %while.body
                                        #   in Loop: Header=BB55_2 Depth=1
	movb	-54(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	-32(%rbp), %rsi
	movb	(%rsi,%rdx), %al
	movb	%al, -41(%rbp)
	movb	-53(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	movq	-32(%rbp), %rsi
	movzbl	(%rsi,%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB55_28
# BB#4:                                 # %land.lhs.true
                                        #   in Loop: Header=BB55_2 Depth=1
	movzbl	-41(%rbp), %eax
	cmpl	$10, %eax
	je	.LBB55_6
# BB#5:                                 # %lor.lhs.false
                                        #   in Loop: Header=BB55_2 Depth=1
	movzbl	-41(%rbp), %eax
	cmpl	$13, %eax
	jne	.LBB55_28
.LBB55_6:                               # %if.then.17
                                        #   in Loop: Header=BB55_2 Depth=1
	movzbl	-41(%rbp), %eax
	cmpl	$10, %eax
	jne	.LBB55_8
# BB#7:                                 # %if.then.21
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	$1, -60(%rbp)
	jmp	.LBB55_14
.LBB55_8:                               # %if.else
                                        #   in Loop: Header=BB55_2 Depth=1
	movq	-32(%rbp), %rax
	addq	$3, %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB55_11
# BB#9:                                 # %lor.lhs.false.25
                                        #   in Loop: Header=BB55_2 Depth=1
	movb	-53(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdx
	movq	-32(%rbp), %rsi
	movzbl	(%rsi,%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB55_11
# BB#10:                                # %lor.lhs.false.33
                                        #   in Loop: Header=BB55_2 Depth=1
	movb	-54(%rbp), %al
	andb	$1, %al
	movzbl	%al, %ecx
	addl	$2, %ecx
	movslq	%ecx, %rdx
	movq	-32(%rbp), %rsi
	movzbl	(%rsi,%rdx), %ecx
	cmpl	$10, %ecx
	je	.LBB55_12
.LBB55_11:                              # %if.then.42
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	$2, -60(%rbp)
	jmp	.LBB55_13
.LBB55_12:                              # %if.else.43
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	$4, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -32(%rbp)
.LBB55_13:                              # %if.end
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_14
.LBB55_14:                              # %if.end.45
                                        #   in Loop: Header=BB55_2 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB55_16
# BB#15:                                # %if.then.48
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB55_25
.LBB55_16:                              # %if.else.49
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB55_24
# BB#17:                                # %if.then.52
                                        #   in Loop: Header=BB55_2 Depth=1
	cmpl	$2, -52(%rbp)
	jne	.LBB55_19
# BB#18:                                # %land.lhs.true.55
                                        #   in Loop: Header=BB55_2 Depth=1
	cmpl	$4, -60(%rbp)
	je	.LBB55_21
.LBB55_19:                              # %lor.lhs.false.58
                                        #   in Loop: Header=BB55_2 Depth=1
	cmpl	$4, -52(%rbp)
	jne	.LBB55_22
# BB#20:                                # %land.lhs.true.61
                                        #   in Loop: Header=BB55_2 Depth=1
	cmpl	$2, -60(%rbp)
	jne	.LBB55_22
.LBB55_21:                              # %if.then.64
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	$4, -52(%rbp)
	jmp	.LBB55_23
.LBB55_22:                              # %if.else.65
	movl	$1, -52(%rbp)
	jmp	.LBB55_29
.LBB55_23:                              # %if.end.66
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_24
.LBB55_24:                              # %if.end.67
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_25
.LBB55_25:                              # %if.end.68
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$3, %eax
	jne	.LBB55_27
# BB#26:                                # %if.then.71
	jmp	.LBB55_29
.LBB55_27:                              # %if.end.72
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_28
.LBB55_28:                              # %if.end.73
                                        #   in Loop: Header=BB55_2 Depth=1
	movq	-32(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB55_2
.LBB55_29:                              # %while.end
	jmp	.LBB55_57
.LBB55_30:                              # %if.else.75
	jmp	.LBB55_31
.LBB55_31:                              # %while.cond.76
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB55_56
# BB#32:                                # %while.body.79
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	(%rax), %dl
	movb	%dl, -41(%rbp)
	movzbl	-41(%rbp), %esi
	cmpl	$10, %esi
	je	.LBB55_34
# BB#33:                                # %lor.lhs.false.83
                                        #   in Loop: Header=BB55_31 Depth=1
	movzbl	-41(%rbp), %eax
	cmpl	$13, %eax
	jne	.LBB55_55
.LBB55_34:                              # %if.then.87
                                        #   in Loop: Header=BB55_31 Depth=1
	movzbl	-41(%rbp), %eax
	cmpl	$10, %eax
	jne	.LBB55_36
# BB#35:                                # %if.then.92
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	$1, -64(%rbp)
	jmp	.LBB55_41
.LBB55_36:                              # %if.else.93
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB55_38
# BB#37:                                # %lor.lhs.false.96
                                        #   in Loop: Header=BB55_31 Depth=1
	movq	-32(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	je	.LBB55_39
.LBB55_38:                              # %if.then.100
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	$2, -64(%rbp)
	jmp	.LBB55_40
.LBB55_39:                              # %if.else.101
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	$4, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
.LBB55_40:                              # %if.end.103
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_41
.LBB55_41:                              # %if.end.104
                                        #   in Loop: Header=BB55_31 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB55_43
# BB#42:                                # %if.then.107
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	-64(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB55_52
.LBB55_43:                              # %if.else.108
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	-52(%rbp), %eax
	cmpl	-64(%rbp), %eax
	je	.LBB55_51
# BB#44:                                # %if.then.111
                                        #   in Loop: Header=BB55_31 Depth=1
	cmpl	$2, -52(%rbp)
	jne	.LBB55_46
# BB#45:                                # %land.lhs.true.114
                                        #   in Loop: Header=BB55_31 Depth=1
	cmpl	$4, -64(%rbp)
	je	.LBB55_48
.LBB55_46:                              # %lor.lhs.false.117
                                        #   in Loop: Header=BB55_31 Depth=1
	cmpl	$4, -52(%rbp)
	jne	.LBB55_49
# BB#47:                                # %land.lhs.true.120
                                        #   in Loop: Header=BB55_31 Depth=1
	cmpl	$2, -64(%rbp)
	jne	.LBB55_49
.LBB55_48:                              # %if.then.123
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	$4, -52(%rbp)
	jmp	.LBB55_50
.LBB55_49:                              # %if.else.124
	movl	$1, -52(%rbp)
	jmp	.LBB55_56
.LBB55_50:                              # %if.end.125
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_51
.LBB55_51:                              # %if.end.126
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_52
.LBB55_52:                              # %if.end.127
                                        #   in Loop: Header=BB55_31 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	cmpl	$3, %eax
	jne	.LBB55_54
# BB#53:                                # %if.then.131
	jmp	.LBB55_56
.LBB55_54:                              # %if.end.132
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_55
.LBB55_55:                              # %if.end.133
                                        #   in Loop: Header=BB55_31 Depth=1
	jmp	.LBB55_31
.LBB55_56:                              # %while.end.134
	jmp	.LBB55_57
.LBB55_57:                              # %if.end.135
	movl	-52(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end55:
	.size	detect_eol, .Lfunc_end55-detect_eol
	.cfi_endproc

	.globl	Fdetect_coding_region
	.align	16, 0x90
	.type	Fdetect_coding_region,@function
Fdetect_coding_region:                  # @Fdetect_coding_region
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp169:
	.cfi_def_cfa_offset 16
.Ltmp170:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp171:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	leaq	-8(%rbp), %rax
	leaq	-16(%rbp), %rcx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	validate_region
	movq	-8(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -40(%rbp)
	movq	current_buffer, %rdi
	movq	-32(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -48(%rbp)
	movq	current_buffer, %rdi
	movq	-40(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jge	.LBB56_3
# BB#1:                                 # %land.lhs.true
	movq	-40(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jl	.LBB56_3
# BB#2:                                 # %if.then
	movq	-40(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	move_gap_both
.LBB56_3:                               # %if.end
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB56_5
# BB#4:                                 # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -64(%rbp)         # 8-byte Spill
	jmp	.LBB56_6
.LBB56_6:                               # %cond.end
	movq	-64(%rbp), %rax         # 8-byte Reload
	xorl	%edi, %edi
	addq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	-40(%rbp), %rcx
	subq	-32(%rbp), %rcx
	movq	-56(%rbp), %rdx
	subq	-48(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	movq	%rdx, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r8b
	xorb	$-1, %r8b
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movb	%r8b, -105(%rbp)        # 1-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-104(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r8b
	xorb	$-1, %r8b
	movb	%r8b, -106(%rbp)        # 1-byte Spill
	callq	builtin_lisp_symbol
	movb	-105(%rbp), %r8b        # 1-byte Reload
	movzbl	%r8b, %edi
	andl	$1, %edi
	movb	-106(%rbp), %r9b        # 1-byte Reload
	movzbl	%r9b, %r10d
	andl	$1, %r10d
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movl	%edi, -112(%rbp)        # 4-byte Spill
	movq	%rcx, %rdi
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movq	-96(%rbp), %rdx         # 8-byte Reload
	movl	-112(%rbp), %ecx        # 4-byte Reload
	movl	%r10d, %r8d
	movq	%rax, %r9
	callq	detect_coding_system
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end56:
	.size	Fdetect_coding_region, .Lfunc_end56-Fdetect_coding_region
	.cfi_endproc

	.globl	Fdetect_coding_string
	.align	16, 0x90
	.type	Fdetect_coding_string,@function
Fdetect_coding_string:                  # @Fdetect_coding_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp172:
	.cfi_def_cfa_offset 16
.Ltmp173:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp174:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	CHECK_STRING
	movq	-8(%rbp), %rdi
	callq	SDATA
	movq	-8(%rbp), %rdi
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	SCHARS
	movq	-8(%rbp), %rdi
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	SBYTES
	xorl	%edi, %edi
	movq	-16(%rbp), %rsi
	movq	%rax, -40(%rbp)         # 8-byte Spill
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	xorb	$-1, %cl
	movq	-8(%rbp), %rdi
	movb	%cl, -49(%rbp)          # 1-byte Spill
	callq	STRING_MULTIBYTE
	xorl	%edi, %edi
	movb	%al, -50(%rbp)          # 1-byte Spill
	callq	builtin_lisp_symbol
	movb	-49(%rbp), %cl          # 1-byte Reload
	movzbl	%cl, %edi
	andl	$1, %edi
	movb	-50(%rbp), %dl          # 1-byte Reload
	movzbl	%dl, %r8d
	andl	$1, %r8d
	movq	-24(%rbp), %rsi         # 8-byte Reload
	movl	%edi, -56(%rbp)         # 4-byte Spill
	movq	%rsi, %rdi
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	-40(%rbp), %rdx         # 8-byte Reload
	movl	-56(%rbp), %ecx         # 4-byte Reload
	movq	%rax, %r9
	callq	detect_coding_system
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end57:
	.size	Fdetect_coding_string, .Lfunc_end57-Fdetect_coding_string
	.cfi_endproc

	.globl	Ffind_coding_systems_region_internal
	.align	16, 0x90
	.type	Ffind_coding_systems_region_internal,@function
Ffind_coding_systems_region_internal:   # @Ffind_coding_systems_region_internal
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp175:
	.cfi_def_cfa_offset 16
.Ltmp176:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp177:
	.cfi_def_cfa_register %rbp
	subq	$336, %rsp              # imm = 0x150
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB58_1
	jmp	.LBB58_5
.LBB58_1:                               # %if.then
	movq	-16(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB58_2
	jmp	.LBB58_3
.LBB58_2:                               # %lor.lhs.false
	movq	-16(%rbp), %rdi
	callq	SCHARS
	movq	-16(%rbp), %rdi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	SBYTES
	movq	-152(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB58_4
.LBB58_3:                               # %if.then.4
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB58_109
.LBB58_4:                               # %if.end
	movq	$0, -56(%rbp)
	movq	-16(%rbp), %rdi
	callq	SBYTES
	movq	%rax, -64(%rbp)
	jmp	.LBB58_38
.LBB58_5:                               # %if.else
	jmp	.LBB58_6
.LBB58_6:                               # %do.body
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB58_9
# BB#7:                                 # %land.lhs.true
	movq	-16(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB58_9
# BB#8:                                 # %if.then.12
	movq	-16(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -16(%rbp)
	jmp	.LBB58_13
.LBB58_9:                               # %if.else.15
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB58_11
# BB#10:                                # %cond.true
	jmp	.LBB58_12
.LBB58_11:                              # %cond.false
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB58_12:                              # %cond.end
	jmp	.LBB58_13
.LBB58_13:                              # %if.end.22
	jmp	.LBB58_14
.LBB58_14:                              # %do.end
	jmp	.LBB58_15
.LBB58_15:                              # %do.body.23
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB58_18
# BB#16:                                # %land.lhs.true.28
	movq	-24(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB58_18
# BB#17:                                # %if.then.32
	movq	-24(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -24(%rbp)
	jmp	.LBB58_22
.LBB58_18:                              # %if.else.35
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB58_20
# BB#19:                                # %cond.true.41
	jmp	.LBB58_21
.LBB58_20:                              # %cond.false.42
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB58_21:                              # %cond.end.44
	jmp	.LBB58_22
.LBB58_22:                              # %if.end.45
	jmp	.LBB58_23
.LBB58_23:                              # %do.end.46
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	cmpq	$1, %rax
	jl	.LBB58_26
# BB#24:                                # %lor.lhs.false.49
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	16(%rcx), %rax
	jg	.LBB58_26
# BB#25:                                # %lor.lhs.false.53
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	-24(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jle	.LBB58_27
.LBB58_26:                              # %if.then.58
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	args_out_of_range
.LBB58_27:                              # %if.end.59
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB58_29
# BB#28:                                # %if.then.63
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB58_109
.LBB58_29:                              # %if.end.65
	movq	current_buffer, %rdi
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -56(%rbp)
	movq	current_buffer, %rdi
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	-16(%rbp), %rsi
	sarq	$2, %rsi
	subq	%rsi, %rax
	movq	-64(%rbp), %rsi
	subq	-56(%rbp), %rsi
	cmpq	%rsi, %rax
	jne	.LBB58_31
# BB#30:                                # %if.then.75
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB58_109
.LBB58_31:                              # %if.end.77
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jge	.LBB58_37
# BB#32:                                # %land.lhs.true.82
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jle	.LBB58_37
# BB#33:                                # %if.then.88
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	sarq	$2, %rcx
	subq	%rcx, %rax
	movq	-24(%rbp), %rcx
	sarq	$2, %rcx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	subq	8(%rdx), %rcx
	cmpq	%rcx, %rax
	jge	.LBB58_35
# BB#34:                                # %if.then.99
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	-56(%rbp), %rsi
	movq	%rax, %rdi
	callq	move_gap_both
	jmp	.LBB58_36
.LBB58_35:                              # %if.else.101
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	callq	move_gap_both
.LBB58_36:                              # %if.end.103
	jmp	.LBB58_37
.LBB58_37:                              # %if.end.104
	jmp	.LBB58_38
.LBB58_38:                              # %if.end.105
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	movq	globals+296, %rax
	movq	%rax, -104(%rbp)
.LBB58_39:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB58_47
# BB#40:                                # %for.body
                                        #   in Loop: Header=BB58_39 Depth=1
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB58_42
# BB#41:                                # %lor.lhs.false.114
                                        #   in Loop: Header=BB58_39 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	Fmemq
	xorl	%edi, %edi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB58_45
.LBB58_42:                              # %if.then.120
                                        #   in Loop: Header=BB58_39 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -128(%rbp)
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-128(%rbp), %rdi
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	AREF
	movq	-216(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB58_44
# BB#43:                                # %if.then.131
                                        #   in Loop: Header=BB58_39 Depth=1
	movl	$1, %esi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-128(%rbp), %rdi
	movq	-128(%rbp), %rcx
	movq	%rdi, -224(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	get_translation_table
	movl	$8, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movq	-128(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	Fcons
	movq	%rax, -40(%rbp)
.LBB58_44:                              # %if.end.134
                                        #   in Loop: Header=BB58_39 Depth=1
	jmp	.LBB58_45
.LBB58_45:                              # %if.end.135
                                        #   in Loop: Header=BB58_39 Depth=1
	jmp	.LBB58_46
.LBB58_46:                              # %for.inc
                                        #   in Loop: Header=BB58_39 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB58_39
.LBB58_47:                              # %for.end
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB58_48
	jmp	.LBB58_49
.LBB58_48:                              # %if.then.138
	movq	-16(%rbp), %rdi
	callq	SDATA
	movq	%rax, -80(%rbp)
	movq	%rax, -72(%rbp)
	jmp	.LBB58_53
.LBB58_49:                              # %if.else.140
	movq	-56(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB58_51
# BB#50:                                # %cond.true.144
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jmp	.LBB58_52
.LBB58_51:                              # %cond.false.146
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	jmp	.LBB58_52
.LBB58_52:                              # %cond.end.147
	movq	-232(%rbp), %rax        # 8-byte Reload
	addq	-56(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -80(%rbp)
	movq	%rax, -72(%rbp)
.LBB58_53:                              # %if.end.150
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rcx
	subq	-56(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
.LBB58_54:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -233(%rbp)         # 1-byte Spill
	jae	.LBB58_56
# BB#55:                                # %land.rhs
                                        #   in Loop: Header=BB58_54 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	setb	%dl
	movb	%dl, -233(%rbp)         # 1-byte Spill
.LBB58_56:                              # %land.end
                                        #   in Loop: Header=BB58_54 Depth=1
	movb	-233(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB58_57
	jmp	.LBB58_58
.LBB58_57:                              # %while.body
                                        #   in Loop: Header=BB58_54 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB58_54
.LBB58_58:                              # %while.end
	jmp	.LBB58_59
.LBB58_59:                              # %while.cond.159
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -234(%rbp)         # 1-byte Spill
	jae	.LBB58_61
# BB#60:                                # %land.rhs.162
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-88(%rbp), %rax
	movzbl	-1(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	setb	%dl
	movb	%dl, -234(%rbp)         # 1-byte Spill
.LBB58_61:                              # %land.end.168
                                        #   in Loop: Header=BB58_59 Depth=1
	movb	-234(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB58_62
	jmp	.LBB58_63
.LBB58_62:                              # %while.body.169
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-88(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB58_59
.LBB58_63:                              # %while.end.171
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fmake_char_table
	movq	%rax, -120(%rbp)
.LBB58_64:                              # %while.cond.175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_81 Depth 2
	movq	-72(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jae	.LBB58_102
# BB#65:                                # %while.body.178
                                        #   in Loop: Header=BB58_64 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB58_66
	jmp	.LBB58_67
.LBB58_66:                              # %cond.true.179
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	jb	.LBB58_68
	jmp	.LBB58_69
.LBB58_67:                              # %cond.false.184
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, %eax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB58_69
.LBB58_68:                              # %if.then.189
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB58_101
.LBB58_69:                              # %if.else.191
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB58_71
# BB#70:                                # %cond.true.194
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -72(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -252(%rbp)        # 4-byte Spill
	jmp	.LBB58_78
.LBB58_71:                              # %cond.false.197
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB58_73
# BB#72:                                # %cond.true.202
                                        #   in Loop: Header=BB58_64 Depth=1
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-72(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-72(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-72(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -256(%rbp)        # 4-byte Spill
	jmp	.LBB58_77
.LBB58_73:                              # %cond.false.216
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB58_75
# BB#74:                                # %cond.true.221
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-72(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-72(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
	jmp	.LBB58_76
.LBB58_75:                              # %cond.false.236
                                        #   in Loop: Header=BB58_64 Depth=1
	leaq	-72(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-72(%rbp), %rdi
	callq	string_char
	movl	%eax, -260(%rbp)        # 4-byte Spill
.LBB58_76:                              # %cond.end.238
                                        #   in Loop: Header=BB58_64 Depth=1
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
.LBB58_77:                              # %cond.end.240
                                        #   in Loop: Header=BB58_64 Depth=1
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	%eax, -252(%rbp)        # 4-byte Spill
.LBB58_78:                              # %cond.end.242
                                        #   in Loop: Header=BB58_64 Depth=1
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	movq	-120(%rbp), %rdi
	movl	-92(%rbp), %esi
	callq	char_table_ref
	xorl	%edi, %edi
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB58_80
# BB#79:                                # %if.then.248
                                        #   in Loop: Header=BB58_64 Depth=1
	jmp	.LBB58_64
.LBB58_80:                              # %if.end.249
                                        #   in Loop: Header=BB58_64 Depth=1
	movb	$0, charset_map_loaded
	movq	-40(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB58_81:                              # %for.cond.250
                                        #   Parent Loop BB58_64 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB58_92
# BB#82:                                # %for.body.255
                                        #   in Loop: Header=BB58_81 Depth=2
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-280(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB58_84
# BB#83:                                # %if.then.261
                                        #   in Loop: Header=BB58_81 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB58_91
.LBB58_84:                              # %if.else.265
                                        #   in Loop: Header=BB58_81 Depth=2
	movl	-92(%rbp), %edi
	movq	-112(%rbp), %rsi
	callq	char_encodable_p
	testb	$1, %al
	jne	.LBB58_85
	jmp	.LBB58_86
.LBB58_85:                              # %if.then.267
                                        #   in Loop: Header=BB58_81 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB58_90
.LBB58_86:                              # %if.else.271
                                        #   in Loop: Header=BB58_81 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB58_88
# BB#87:                                # %if.then.279
                                        #   in Loop: Header=BB58_81 Depth=2
	movq	-104(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	callq	XSETCAR
	movq	-104(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rsi
	callq	XSETCDR
	jmp	.LBB58_89
.LBB58_88:                              # %if.else.291
                                        #   in Loop: Header=BB58_81 Depth=2
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCAR
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
.LBB58_89:                              # %if.end.296
                                        #   in Loop: Header=BB58_81 Depth=2
	jmp	.LBB58_90
.LBB58_90:                              # %if.end.297
                                        #   in Loop: Header=BB58_81 Depth=2
	jmp	.LBB58_91
.LBB58_91:                              # %if.end.298
                                        #   in Loop: Header=BB58_81 Depth=2
	jmp	.LBB58_81
.LBB58_92:                              # %for.end.299
                                        #   in Loop: Header=BB58_64 Depth=1
	testb	$1, charset_map_loaded
	je	.LBB58_100
# BB#93:                                # %if.then.301
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB58_94
	jmp	.LBB58_95
.LBB58_94:                              # %if.then.306
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-16(%rbp), %rdi
	callq	SDATA
	movq	%rax, -80(%rbp)
	jmp	.LBB58_99
.LBB58_95:                              # %if.else.308
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-56(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB58_97
# BB#96:                                # %cond.true.313
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jmp	.LBB58_98
.LBB58_97:                              # %cond.false.316
                                        #   in Loop: Header=BB58_64 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	jmp	.LBB58_98
.LBB58_98:                              # %cond.end.317
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-296(%rbp), %rax        # 8-byte Reload
	addq	-56(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -80(%rbp)
.LBB58_99:                              # %if.end.324
                                        #   in Loop: Header=BB58_64 Depth=1
	movq	-80(%rbp), %rax
	addq	-136(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-80(%rbp), %rax
	addq	-144(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB58_100:                             # %if.end.327
                                        #   in Loop: Header=BB58_64 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-120(%rbp), %rax
	movl	-92(%rbp), %esi
	movl	%esi, -300(%rbp)        # 4-byte Spill
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-312(%rbp), %rdi        # 8-byte Reload
	movl	-300(%rbp), %esi        # 4-byte Reload
	movq	%rax, %rdx
	callq	char_table_set
.LBB58_101:                             # %if.end.329
                                        #   in Loop: Header=BB58_64 Depth=1
	jmp	.LBB58_64
.LBB58_102:                             # %while.end.330
	movl	$788, %edi              # imm = 0x314
	callq	builtin_lisp_symbol
	movl	$702, %edi              # imm = 0x2BE
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-320(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	list2
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB58_103:                             # %for.cond.334
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB58_108
# BB#104:                               # %for.body.339
                                        #   in Loop: Header=BB58_103 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-328(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB58_106
# BB#105:                               # %if.then.345
                                        #   in Loop: Header=BB58_103 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rdi
	callq	AREF
	movq	-48(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, -48(%rbp)
.LBB58_106:                             # %if.end.350
                                        #   in Loop: Header=BB58_103 Depth=1
	jmp	.LBB58_107
.LBB58_107:                             # %for.inc.351
                                        #   in Loop: Header=BB58_103 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB58_103
.LBB58_108:                             # %for.end.355
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB58_109:                             # %return
	movq	-8(%rbp), %rax
	addq	$336, %rsp              # imm = 0x150
	popq	%rbp
	retq
.Lfunc_end58:
	.size	Ffind_coding_systems_region_internal, .Lfunc_end58-Ffind_coding_systems_region_internal
	.cfi_endproc

	.align	16, 0x90
	.type	char_encodable_p,@function
char_encodable_p:                       # @char_encodable_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp178:
	.cfi_def_cfa_offset 16
.Ltmp179:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp180:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$8, %eax
	movl	%eax, %ecx
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rcx, %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB59_2
# BB#1:                                 # %if.then
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	translate_char
	movl	%eax, -4(%rbp)
.LBB59_2:                               # %if.end
	movl	$4, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	movq	%rax, -24(%rbp)
.LBB59_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB59_26
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB59_3 Depth=1
	movb	$1, %al
	movq	charset_table, %rcx
	movq	-24(%rbp), %rdx
	subq	$3, %rdx
	movq	(%rdx), %rdx
	sarq	$2, %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	movq	%rcx, -32(%rbp)
	testb	$1, %al
	jne	.LBB59_5
	jmp	.LBB59_6
.LBB59_5:                               # %cond.true
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB59_7
	jmp	.LBB59_8
.LBB59_6:                               # %cond.false
                                        #   in Loop: Header=BB59_3 Depth=1
	movslq	-4(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB59_8
.LBB59_7:                               # %land.lhs.true
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB59_23
.LBB59_8:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB59_11
# BB#9:                                 # %lor.lhs.false.18
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$2, 104(%rax)
	je	.LBB59_11
# BB#10:                                # %lor.lhs.false.21
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$3, 104(%rax)
	jne	.LBB59_12
.LBB59_11:                              # %cond.true.25
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	encode_char
	movq	-32(%rbp), %rdi
	cmpl	128(%rdi), %eax
	jne	.LBB59_23
	jmp	.LBB59_24
.LBB59_12:                              # %cond.false.29
                                        #   in Loop: Header=BB59_3 Depth=1
	cmpl	$65536, -4(%rbp)        # imm = 0x10000
	jge	.LBB59_14
# BB#13:                                # %cond.true.32
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	$1, %eax
	movl	-4(%rbp), %ecx
	sarl	$10, %ecx
	movslq	%ecx, %rdx
	movq	-32(%rbp), %rsi
	movzbl	132(%rsi,%rdx), %ecx
	movl	-4(%rbp), %edi
	sarl	$7, %edi
	andl	$7, %edi
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-52(%rbp), %edi         # 4-byte Reload
	andl	%eax, %edi
	cmpl	$0, %edi
	jne	.LBB59_15
	jmp	.LBB59_24
.LBB59_14:                              # %cond.false.38
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	$1, %eax
	movl	-4(%rbp), %ecx
	sarl	$15, %ecx
	addl	$62, %ecx
	movslq	%ecx, %rdx
	movq	-32(%rbp), %rsi
	movzbl	132(%rsi,%rdx), %ecx
	movl	-4(%rbp), %edi
	sarl	$12, %edi
	andl	$7, %edi
	movl	%ecx, -56(%rbp)         # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: CL<def> ECX<kill>
	shll	%cl, %eax
	movl	-56(%rbp), %edi         # 4-byte Reload
	andl	%eax, %edi
	cmpl	$0, %edi
	je	.LBB59_24
.LBB59_15:                              # %land.lhs.true.50
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB59_18
# BB#16:                                # %cond.true.54
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	120(%rcx), %eax
	jl	.LBB59_24
# BB#17:                                # %land.lhs.true.57
                                        #   in Loop: Header=BB59_3 Depth=1
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	124(%rcx), %eax
	jle	.LBB59_23
	jmp	.LBB59_24
.LBB59_18:                              # %cond.false.60
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB59_22
# BB#19:                                # %land.lhs.true.64
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$4, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB59_22
# BB#20:                                # %land.lhs.true.70
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-32(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB59_21
	jmp	.LBB59_22
.LBB59_21:                              # %cond.true.76
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-32(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$5, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-4(%rbp), %esi
	movq	%rax, %rdi
	callq	CHAR_TABLE_REF
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	je	.LBB59_24
	jmp	.LBB59_23
.LBB59_22:                              # %cond.false.85
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-32(%rbp), %rdi
	movl	-4(%rbp), %esi
	callq	encode_char
	movq	-32(%rbp), %rdi
	cmpl	128(%rdi), %eax
	je	.LBB59_24
.LBB59_23:                              # %if.then.90
	jmp	.LBB59_26
.LBB59_24:                              # %if.end.91
                                        #   in Loop: Header=BB59_3 Depth=1
	jmp	.LBB59_25
.LBB59_25:                              # %for.inc
                                        #   in Loop: Header=BB59_3 Depth=1
	movq	-24(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB59_3
.LBB59_26:                              # %for.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movzbl	%dl, %eax
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end59:
	.size	char_encodable_p, .Lfunc_end59-char_encodable_p
	.cfi_endproc

	.globl	Funencodable_char_position
	.align	16, 0x90
	.type	Funencodable_char_position,@function
Funencodable_char_position:             # @Funencodable_char_position
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp181:
	.cfi_def_cfa_offset 16
.Ltmp182:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp183:
	.cfi_def_cfa_register %rbp
	subq	$960, %rsp              # imm = 0x3C0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	-32(%rbp), %rdi
	callq	Fcheck_coding_system
	leaq	-672(%rbp), %rsi
	movq	%rax, %rdi
	callq	setup_coding_system
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-672(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%r9d, %r9d
	movl	%r9d, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$3, %r9d
	movl	%r9d, %esi
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rdi
	callq	AREF
	movl	$788, %edi              # imm = 0x314
	movq	%rax, -760(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-760(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB60_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB60_74
.LBB60_2:                               # %if.end
	movl	$5, %eax
	movl	%eax, %esi
	movq	-680(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$4, %edi
	movl	%edi, %esi
	movq	-768(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	andb	$1, %dl
	movb	%dl, -745(%rbp)
	movq	-680(%rbp), %rdi
	callq	AREF
	movl	$1, %esi
	xorl	%r8d, %r8d
	movl	%r8d, %edx
	movq	%rax, -688(%rbp)
	movq	-680(%rbp), %rdi
	callq	get_translation_table
	xorl	%edi, %edi
	movq	%rax, -696(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-776(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB60_18
# BB#3:                                 # %if.then.14
	leaq	-16(%rbp), %rdi
	leaq	-24(%rbp), %rsi
	callq	validate_region
	xorl	%edi, %edi
	movq	-16(%rbp), %rsi
	sarq	$2, %rsi
	movq	%rsi, -712(%rbp)
	movq	-24(%rbp), %rsi
	sarq	$2, %rsi
	movq	%rsi, -720(%rbp)
	movq	current_buffer, %rsi
	movq	312(%rsi), %rsi
	movq	%rsi, -784(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-784(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB60_6
# BB#4:                                 # %lor.lhs.false
	testb	$1, -745(%rbp)
	je	.LBB60_7
# BB#5:                                 # %land.lhs.true
	movq	-720(%rbp), %rax
	subq	-712(%rbp), %rax
	movq	current_buffer, %rdi
	movq	-720(%rbp), %rsi
	movq	%rax, -792(%rbp)        # 8-byte Spill
	callq	buf_charpos_to_bytepos
	movq	current_buffer, %rdi
	movq	-712(%rbp), %rsi
	movq	%rax, -800(%rbp)        # 8-byte Spill
	callq	buf_charpos_to_bytepos
	movq	-800(%rbp), %rsi        # 8-byte Reload
	subq	%rax, %rsi
	movq	-792(%rbp), %rax        # 8-byte Reload
	cmpq	%rsi, %rax
	jne	.LBB60_7
.LBB60_6:                               # %if.then.22
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB60_74
.LBB60_7:                               # %if.end.24
	movq	-712(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jl	.LBB60_9
# BB#8:                                 # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	jmp	.LBB60_10
.LBB60_9:                               # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	jmp	.LBB60_10
.LBB60_10:                              # %cond.end
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	current_buffer, %rdi
	movq	-712(%rbp), %rsi
	movq	%rax, -816(%rbp)        # 8-byte Spill
	callq	buf_charpos_to_bytepos
	movq	-816(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	addq	(%rax), %rsi
	addq	$-1, %rsi
	movq	%rsi, -728(%rbp)
	movq	-720(%rbp), %rax
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	8(%rsi), %rax
	jl	.LBB60_12
# BB#11:                                # %cond.true.33
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
	jmp	.LBB60_13
.LBB60_12:                              # %cond.false.36
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	jmp	.LBB60_13
.LBB60_13:                              # %cond.end.37
	movq	-824(%rbp), %rax        # 8-byte Reload
	movq	current_buffer, %rdi
	movq	-720(%rbp), %rsi
	movq	%rax, -832(%rbp)        # 8-byte Spill
	callq	buf_charpos_to_bytepos
	movq	-832(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	addq	(%rax), %rsi
	addq	$-1, %rsi
	movq	%rsi, -744(%rbp)
	movq	-712(%rbp), %rax
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	8(%rsi), %rax
	jge	.LBB60_16
# BB#14:                                # %land.lhs.true.48
	movq	-720(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jl	.LBB60_16
# BB#15:                                # %if.then.52
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	24(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -736(%rbp)
	jmp	.LBB60_17
.LBB60_16:                              # %if.else
	movq	-744(%rbp), %rax
	movq	%rax, -736(%rbp)
.LBB60_17:                              # %if.end.58
	jmp	.LBB60_24
.LBB60_18:                              # %if.else.59
	movq	-48(%rbp), %rdi
	callq	CHECK_STRING
	movq	-48(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdi, -840(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rdx, -848(%rbp)        # 8-byte Spill
	movq	%rsi, -856(%rbp)        # 8-byte Spill
	callq	SCHARS
	leaq	-712(%rbp), %r8
	leaq	-720(%rbp), %r9
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-856(%rbp), %rsi        # 8-byte Reload
	movq	-848(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	validate_subarray
	movq	-48(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB60_20
# BB#19:                                # %if.then.62
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB60_74
.LBB60_20:                              # %if.end.64
	movq	-48(%rbp), %rdi
	callq	SDATA
	movq	-48(%rbp), %rdi
	movq	-712(%rbp), %rsi
	movq	%rax, -864(%rbp)        # 8-byte Spill
	callq	string_char_to_byte
	movq	-864(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	%rsi, -728(%rbp)
	movq	-48(%rbp), %rdi
	callq	SDATA
	movq	-48(%rbp), %rdi
	movq	-720(%rbp), %rsi
	movq	%rax, -872(%rbp)        # 8-byte Spill
	callq	string_char_to_byte
	movq	-872(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	%rsi, -744(%rbp)
	movq	%rsi, -736(%rbp)
	testb	$1, -745(%rbp)
	je	.LBB60_23
# BB#21:                                # %land.lhs.true.72
	movq	-720(%rbp), %rax
	subq	-712(%rbp), %rax
	movq	-744(%rbp), %rcx
	movq	-728(%rbp), %rdx
	subq	%rdx, %rcx
	cmpq	%rcx, %rax
	jne	.LBB60_23
# BB#22:                                # %if.then.75
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB60_74
.LBB60_23:                              # %if.end.77
	jmp	.LBB60_24
.LBB60_24:                              # %if.end.78
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-880(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB60_26
# BB#25:                                # %if.then.81
	movq	$1, -56(%rbp)
	jmp	.LBB60_27
.LBB60_26:                              # %if.else.82
	movq	-40(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	-40(%rbp), %rdi
	sarq	$2, %rdi
	movq	%rdi, -56(%rbp)
.LBB60_27:                              # %if.end.84
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -704(%rbp)
	movb	$0, charset_map_loaded
.LBB60_28:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_30 Depth 2
	testb	$1, -745(%rbp)
	je	.LBB60_35
# BB#29:                                # %if.then.87
                                        #   in Loop: Header=BB60_28 Depth=1
	jmp	.LBB60_30
.LBB60_30:                              # %while.cond.88
                                        #   Parent Loop BB60_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-728(%rbp), %rdx
	cmpq	-736(%rbp), %rdx
	movb	%cl, -881(%rbp)         # 1-byte Spill
	jae	.LBB60_32
# BB#31:                                # %land.rhs
                                        #   in Loop: Header=BB60_30 Depth=2
	movq	-728(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	setb	%dl
	movb	%dl, -881(%rbp)         # 1-byte Spill
.LBB60_32:                              # %land.end
                                        #   in Loop: Header=BB60_30 Depth=2
	movb	-881(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB60_33
	jmp	.LBB60_34
.LBB60_33:                              # %while.body.93
                                        #   in Loop: Header=BB60_30 Depth=2
	movq	-728(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -728(%rbp)
	movq	-712(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -712(%rbp)
	jmp	.LBB60_30
.LBB60_34:                              # %while.end
                                        #   in Loop: Header=BB60_28 Depth=1
	jmp	.LBB60_35
.LBB60_35:                              # %if.end.94
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	cmpq	-736(%rbp), %rax
	jb	.LBB60_39
# BB#36:                                # %if.then.97
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	cmpq	-744(%rbp), %rax
	jb	.LBB60_38
# BB#37:                                # %if.then.100
	jmp	.LBB60_70
.LBB60_38:                              # %if.end.101
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-744(%rbp), %rax
	movq	%rax, -736(%rbp)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	24(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -728(%rbp)
.LBB60_39:                              # %if.end.111
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB60_41
# BB#40:                                # %cond.true.114
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -728(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -888(%rbp)        # 4-byte Spill
	jmp	.LBB60_48
.LBB60_41:                              # %cond.false.117
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB60_43
# BB#42:                                # %cond.true.122
                                        #   in Loop: Header=BB60_28 Depth=1
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-728(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -728(%rbp)
	movq	-728(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-728(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-728(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -892(%rbp)        # 4-byte Spill
	jmp	.LBB60_47
.LBB60_43:                              # %cond.false.136
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB60_45
# BB#44:                                # %cond.true.141
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-728(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -728(%rbp)
	movq	-728(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-728(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-728(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -896(%rbp)        # 4-byte Spill
	jmp	.LBB60_46
.LBB60_45:                              # %cond.false.156
                                        #   in Loop: Header=BB60_28 Depth=1
	leaq	-728(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-728(%rbp), %rdi
	callq	string_char
	movl	%eax, -896(%rbp)        # 4-byte Spill
.LBB60_46:                              # %cond.end.158
                                        #   in Loop: Header=BB60_28 Depth=1
	movl	-896(%rbp), %eax        # 4-byte Reload
	movl	%eax, -892(%rbp)        # 4-byte Spill
.LBB60_47:                              # %cond.end.160
                                        #   in Loop: Header=BB60_28 Depth=1
	movl	-892(%rbp), %eax        # 4-byte Reload
	movl	%eax, -888(%rbp)        # 4-byte Spill
.LBB60_48:                              # %cond.end.162
                                        #   in Loop: Header=BB60_28 Depth=1
	movl	-888(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movl	%eax, -752(%rbp)
	testb	$1, %cl
	jne	.LBB60_49
	jmp	.LBB60_50
.LBB60_49:                              # %cond.true.164
                                        #   in Loop: Header=BB60_28 Depth=1
	movl	-752(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB60_51
	jmp	.LBB60_52
.LBB60_50:                              # %cond.false.168
                                        #   in Loop: Header=BB60_28 Depth=1
	movslq	-752(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB60_52
.LBB60_51:                              # %land.lhs.true.173
                                        #   in Loop: Header=BB60_28 Depth=1
	testb	$1, -745(%rbp)
	jne	.LBB60_56
.LBB60_52:                              # %land.lhs.true.176
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-696(%rbp), %rdi
	movl	-752(%rbp), %esi
	callq	translate_char
	xorl	%esi, %esi
	movl	%esi, %edx
	movq	-688(%rbp), %rsi
	movl	%eax, %edi
	callq	char_charset
	cmpq	$0, %rax
	jne	.LBB60_56
# BB#53:                                # %if.then.180
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-712(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-704(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, -704(%rbp)
	movq	-56(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.LBB60_55
# BB#54:                                # %if.then.186
	jmp	.LBB60_70
.LBB60_55:                              # %if.end.187
                                        #   in Loop: Header=BB60_28 Depth=1
	jmp	.LBB60_56
.LBB60_56:                              # %if.end.188
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-712(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -712(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB60_69
# BB#57:                                # %land.lhs.true.192
                                        #   in Loop: Header=BB60_28 Depth=1
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-904(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB60_69
# BB#58:                                # %if.then.196
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-712(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jl	.LBB60_60
# BB#59:                                # %cond.true.201
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	jmp	.LBB60_61
.LBB60_60:                              # %cond.false.204
                                        #   in Loop: Header=BB60_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -912(%rbp)        # 8-byte Spill
	jmp	.LBB60_61
.LBB60_61:                              # %cond.end.205
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	current_buffer, %rdi
	movq	-712(%rbp), %rsi
	movq	%rax, -920(%rbp)        # 8-byte Spill
	callq	buf_charpos_to_bytepos
	movq	-920(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	addq	(%rax), %rsi
	addq	$-1, %rsi
	movq	%rsi, -728(%rbp)
	movq	-720(%rbp), %rax
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	8(%rsi), %rax
	jl	.LBB60_63
# BB#62:                                # %cond.true.217
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	jmp	.LBB60_64
.LBB60_63:                              # %cond.false.220
                                        #   in Loop: Header=BB60_28 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	jmp	.LBB60_64
.LBB60_64:                              # %cond.end.221
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	current_buffer, %rdi
	movq	-720(%rbp), %rsi
	movq	%rax, -936(%rbp)        # 8-byte Spill
	callq	buf_charpos_to_bytepos
	movq	-936(%rbp), %rsi        # 8-byte Reload
	addq	%rax, %rsi
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	addq	(%rax), %rsi
	addq	$-1, %rsi
	movq	%rsi, -744(%rbp)
	movq	-712(%rbp), %rax
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	cmpq	8(%rsi), %rax
	jge	.LBB60_67
# BB#65:                                # %land.lhs.true.233
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-720(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jl	.LBB60_67
# BB#66:                                # %if.then.238
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	24(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -736(%rbp)
	jmp	.LBB60_68
.LBB60_67:                              # %if.else.245
                                        #   in Loop: Header=BB60_28 Depth=1
	movq	-744(%rbp), %rax
	movq	%rax, -736(%rbp)
.LBB60_68:                              # %if.end.246
                                        #   in Loop: Header=BB60_28 Depth=1
	movb	$0, charset_map_loaded
.LBB60_69:                              # %if.end.247
                                        #   in Loop: Header=BB60_28 Depth=1
	jmp	.LBB60_28
.LBB60_70:                              # %while.end.248
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-944(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB60_72
# BB#71:                                # %cond.true.252
	movq	-704(%rbp), %rdi
	callq	Fcar
	movq	%rax, -952(%rbp)        # 8-byte Spill
	jmp	.LBB60_73
.LBB60_72:                              # %cond.false.254
	movq	-704(%rbp), %rdi
	callq	Fnreverse
	movq	%rax, -952(%rbp)        # 8-byte Spill
.LBB60_73:                              # %cond.end.256
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%rax, -8(%rbp)
.LBB60_74:                              # %return
	movq	-8(%rbp), %rax
	addq	$960, %rsp              # imm = 0x3C0
	popq	%rbp
	retq
.Lfunc_end60:
	.size	Funencodable_char_position, .Lfunc_end60-Funencodable_char_position
	.cfi_endproc

	.globl	Fcheck_coding_systems_region
	.align	16, 0x90
	.type	Fcheck_coding_systems_region,@function
Fcheck_coding_systems_region:           # @Fcheck_coding_systems_region
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp184:
	.cfi_def_cfa_offset 16
.Ltmp185:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp186:
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB61_1
	jmp	.LBB61_5
.LBB61_1:                               # %if.then
	movq	-16(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB61_2
	jmp	.LBB61_3
.LBB61_2:                               # %lor.lhs.false
	movq	-16(%rbp), %rdi
	callq	SCHARS
	movq	-16(%rbp), %rdi
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	SBYTES
	movq	-144(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jne	.LBB61_4
.LBB61_3:                               # %if.then.4
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB61_96
.LBB61_4:                               # %if.end
	movq	$0, -48(%rbp)
	movq	-16(%rbp), %rdi
	callq	SBYTES
	movq	%rax, -56(%rbp)
	movq	$0, -64(%rbp)
	jmp	.LBB61_38
.LBB61_5:                               # %if.else
	jmp	.LBB61_6
.LBB61_6:                               # %do.body
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB61_9
# BB#7:                                 # %land.lhs.true
	movq	-16(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB61_9
# BB#8:                                 # %if.then.12
	movq	-16(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -16(%rbp)
	jmp	.LBB61_13
.LBB61_9:                               # %if.else.15
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB61_11
# BB#10:                                # %cond.true
	jmp	.LBB61_12
.LBB61_11:                              # %cond.false
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB61_12:                              # %cond.end
	jmp	.LBB61_13
.LBB61_13:                              # %if.end.22
	jmp	.LBB61_14
.LBB61_14:                              # %do.end
	jmp	.LBB61_15
.LBB61_15:                              # %do.body.23
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$1, %ecx
	jne	.LBB61_18
# BB#16:                                # %land.lhs.true.28
	movq	-24(%rbp), %rdi
	callq	XMISCTYPE
	cmpl	$24236, %eax            # imm = 0x5EAC
	jne	.LBB61_18
# BB#17:                                # %if.then.32
	movq	-24(%rbp), %rdi
	callq	marker_position
	movq	%rax, %rdi
	callq	make_natnum
	movq	%rax, -24(%rbp)
	jmp	.LBB61_22
.LBB61_18:                              # %if.else.35
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB61_20
# BB#19:                                # %cond.true.41
	jmp	.LBB61_21
.LBB61_20:                              # %cond.false.42
	movl	$558, %edi              # imm = 0x22E
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB61_21:                              # %cond.end.44
	jmp	.LBB61_22
.LBB61_22:                              # %if.end.45
	jmp	.LBB61_23
.LBB61_23:                              # %do.end.46
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	cmpq	$1, %rax
	jl	.LBB61_26
# BB#24:                                # %lor.lhs.false.49
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	16(%rcx), %rax
	jg	.LBB61_26
# BB#25:                                # %lor.lhs.false.53
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	-24(%rbp), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jle	.LBB61_27
.LBB61_26:                              # %if.then.58
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	args_out_of_range
.LBB61_27:                              # %if.end.59
	xorl	%edi, %edi
	movq	current_buffer, %rax
	movq	312(%rax), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB61_29
# BB#28:                                # %if.then.63
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB61_96
.LBB61_29:                              # %if.end.65
	movq	current_buffer, %rdi
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -48(%rbp)
	movq	current_buffer, %rdi
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	-16(%rbp), %rsi
	sarq	$2, %rsi
	subq	%rsi, %rax
	movq	-56(%rbp), %rsi
	subq	-48(%rbp), %rsi
	cmpq	%rsi, %rax
	jne	.LBB61_31
# BB#30:                                # %if.then.75
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB61_96
.LBB61_31:                              # %if.end.77
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jge	.LBB61_37
# BB#32:                                # %land.lhs.true.82
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	8(%rcx), %rax
	jle	.LBB61_37
# BB#33:                                # %if.then.88
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rcx
	sarq	$2, %rcx
	subq	%rcx, %rax
	movq	-24(%rbp), %rcx
	sarq	$2, %rcx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	subq	8(%rdx), %rcx
	cmpq	%rcx, %rax
	jge	.LBB61_35
# BB#34:                                # %if.then.99
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	-48(%rbp), %rsi
	movq	%rax, %rdi
	callq	move_gap_both
	jmp	.LBB61_36
.LBB61_35:                              # %if.else.101
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	movq	-56(%rbp), %rsi
	movq	%rax, %rdi
	callq	move_gap_both
.LBB61_36:                              # %if.end.103
	jmp	.LBB61_37
.LBB61_37:                              # %if.end.104
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -64(%rbp)
.LBB61_38:                              # %if.end.106
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB61_39:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB61_42
# BB#40:                                # %for.body
                                        #   in Loop: Header=BB61_39 Depth=1
	xorl	%edi, %edi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -176(%rbp)        # 8-byte Spill
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-176(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$1, %esi
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rdi
	movq	-120(%rbp), %rax
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	get_translation_table
	movl	$8, %ecx
	movl	%ecx, %esi
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movq	-112(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	list2
	movq	-40(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, -40(%rbp)
# BB#41:                                # %for.inc
                                        #   in Loop: Header=BB61_39 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB61_39
.LBB61_42:                              # %for.end
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB61_43
	jmp	.LBB61_44
.LBB61_43:                              # %if.then.121
	movq	-16(%rbp), %rdi
	callq	SDATA
	movq	%rax, -80(%rbp)
	movq	%rax, -72(%rbp)
	jmp	.LBB61_48
.LBB61_44:                              # %if.else.123
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB61_46
# BB#45:                                # %cond.true.127
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB61_47
.LBB61_46:                              # %cond.false.129
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB61_47
.LBB61_47:                              # %cond.end.130
	movq	-200(%rbp), %rax        # 8-byte Reload
	addq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -80(%rbp)
	movq	%rax, -72(%rbp)
.LBB61_48:                              # %if.end.133
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rcx
	subq	-48(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
.LBB61_49:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -201(%rbp)         # 1-byte Spill
	jae	.LBB61_51
# BB#50:                                # %land.rhs
                                        #   in Loop: Header=BB61_49 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	setb	%dl
	movb	%dl, -201(%rbp)         # 1-byte Spill
.LBB61_51:                              # %land.end
                                        #   in Loop: Header=BB61_49 Depth=1
	movb	-201(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB61_52
	jmp	.LBB61_53
.LBB61_52:                              # %while.body
                                        #   in Loop: Header=BB61_49 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB61_49
.LBB61_53:                              # %while.end
	jmp	.LBB61_54
.LBB61_54:                              # %while.cond.142
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-72(%rbp), %rdx
	cmpq	-88(%rbp), %rdx
	movb	%cl, -202(%rbp)         # 1-byte Spill
	jae	.LBB61_56
# BB#55:                                # %land.rhs.145
                                        #   in Loop: Header=BB61_54 Depth=1
	movq	-88(%rbp), %rax
	movzbl	-1(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	setb	%dl
	movb	%dl, -202(%rbp)         # 1-byte Spill
.LBB61_56:                              # %land.end.151
                                        #   in Loop: Header=BB61_54 Depth=1
	movb	-202(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB61_57
	jmp	.LBB61_58
.LBB61_57:                              # %while.body.152
                                        #   in Loop: Header=BB61_54 Depth=1
	movq	-88(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB61_54
.LBB61_58:                              # %while.end.154
	jmp	.LBB61_59
.LBB61_59:                              # %while.cond.155
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_74 Depth 2
	movq	-72(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jae	.LBB61_89
# BB#60:                                # %while.body.158
                                        #   in Loop: Header=BB61_59 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB61_61
	jmp	.LBB61_62
.LBB61_61:                              # %cond.true.159
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$0, %ecx
	cmpl	$128, %ecx
	jb	.LBB61_63
	jmp	.LBB61_64
.LBB61_62:                              # %cond.false.164
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, %eax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB61_64
.LBB61_63:                              # %if.then.169
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB61_88
.LBB61_64:                              # %if.else.171
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB61_66
# BB#65:                                # %cond.true.174
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -72(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -208(%rbp)        # 4-byte Spill
	jmp	.LBB61_73
.LBB61_66:                              # %cond.false.177
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB61_68
# BB#67:                                # %cond.true.182
                                        #   in Loop: Header=BB61_59 Depth=1
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-72(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-72(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-72(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -212(%rbp)        # 4-byte Spill
	jmp	.LBB61_72
.LBB61_68:                              # %cond.false.196
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB61_70
# BB#69:                                # %cond.true.201
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-72(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-72(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -216(%rbp)        # 4-byte Spill
	jmp	.LBB61_71
.LBB61_70:                              # %cond.false.216
                                        #   in Loop: Header=BB61_59 Depth=1
	leaq	-72(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-72(%rbp), %rdi
	callq	string_char
	movl	%eax, -216(%rbp)        # 4-byte Spill
.LBB61_71:                              # %cond.end.218
                                        #   in Loop: Header=BB61_59 Depth=1
	movl	-216(%rbp), %eax        # 4-byte Reload
	movl	%eax, -212(%rbp)        # 4-byte Spill
.LBB61_72:                              # %cond.end.220
                                        #   in Loop: Header=BB61_59 Depth=1
	movl	-212(%rbp), %eax        # 4-byte Reload
	movl	%eax, -208(%rbp)        # 4-byte Spill
.LBB61_73:                              # %cond.end.222
                                        #   in Loop: Header=BB61_59 Depth=1
	movl	-208(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	movb	$0, charset_map_loaded
	movq	-40(%rbp), %rcx
	movq	%rcx, -104(%rbp)
.LBB61_74:                              # %for.cond.224
                                        #   Parent Loop BB61_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB61_79
# BB#75:                                # %for.body.229
                                        #   in Loop: Header=BB61_74 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	-92(%rbp), %edi
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	callq	char_encodable_p
	testb	$1, %al
	jne	.LBB61_77
# BB#76:                                # %if.then.238
                                        #   in Loop: Header=BB61_74 Depth=2
	movq	-112(%rbp), %rdi
	movq	-64(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	-112(%rbp), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rsi
	movq	%rdi, -224(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	Fcons
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCDR
.LBB61_77:                              # %if.end.245
                                        #   in Loop: Header=BB61_74 Depth=2
	jmp	.LBB61_78
.LBB61_78:                              # %for.inc.246
                                        #   in Loop: Header=BB61_74 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB61_74
.LBB61_79:                              # %for.end.250
                                        #   in Loop: Header=BB61_59 Depth=1
	testb	$1, charset_map_loaded
	je	.LBB61_87
# BB#80:                                # %if.then.252
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movq	-88(%rbp), %rax
	movq	-80(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-16(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB61_81
	jmp	.LBB61_82
.LBB61_81:                              # %if.then.257
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-16(%rbp), %rdi
	callq	SDATA
	movq	%rax, -80(%rbp)
	jmp	.LBB61_86
.LBB61_82:                              # %if.else.259
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB61_84
# BB#83:                                # %cond.true.264
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jmp	.LBB61_85
.LBB61_84:                              # %cond.false.267
                                        #   in Loop: Header=BB61_59 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	jmp	.LBB61_85
.LBB61_85:                              # %cond.end.268
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-232(%rbp), %rax        # 8-byte Reload
	addq	-48(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -80(%rbp)
.LBB61_86:                              # %if.end.275
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-80(%rbp), %rax
	addq	-128(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-80(%rbp), %rax
	addq	-136(%rbp), %rax
	movq	%rax, -88(%rbp)
.LBB61_87:                              # %if.end.278
                                        #   in Loop: Header=BB61_59 Depth=1
	jmp	.LBB61_88
.LBB61_88:                              # %if.end.279
                                        #   in Loop: Header=BB61_59 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB61_59
.LBB61_89:                              # %while.end.281
	xorl	%edi, %edi
	movq	-40(%rbp), %rax
	movq	%rax, -104(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)
.LBB61_90:                              # %for.cond.283
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB61_95
# BB#91:                                # %for.body.288
                                        #   in Loop: Header=BB61_90 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB61_93
# BB#92:                                # %if.then.301
                                        #   in Loop: Header=BB61_90 Depth=1
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rdi, -240(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	Fnreverse
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movq	-40(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, -40(%rbp)
.LBB61_93:                              # %if.end.313
                                        #   in Loop: Header=BB61_90 Depth=1
	jmp	.LBB61_94
.LBB61_94:                              # %for.inc.314
                                        #   in Loop: Header=BB61_90 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB61_90
.LBB61_95:                              # %for.end.318
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB61_96:                              # %return
	movq	-8(%rbp), %rax
	addq	$240, %rsp
	popq	%rbp
	retq
.Lfunc_end61:
	.size	Fcheck_coding_systems_region, .Lfunc_end61-Fcheck_coding_systems_region
	.cfi_endproc

	.globl	Fdecode_coding_region
	.align	16, 0x90
	.type	Fdecode_coding_region,@function
Fdecode_coding_region:                  # @Fdecode_coding_region
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp187:
	.cfi_def_cfa_offset 16
.Ltmp188:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp189:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	%eax, %r8d
	movl	%eax, %r9d
	callq	code_convert_region
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end62:
	.size	Fdecode_coding_region, .Lfunc_end62-Fdecode_coding_region
	.cfi_endproc

	.align	16, 0x90
	.type	code_convert_region,@function
code_convert_region:                    # @code_convert_region
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp190:
	.cfi_def_cfa_offset 16
.Ltmp191:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp192:
	.cfi_def_cfa_register %rbp
	subq	$800, %rsp              # imm = 0x320
	movb	%r9b, %al
	movb	%r8b, %r10b
	xorl	%r8d, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	andb	$1, %r10b
	movb	%r10b, -33(%rbp)
	andb	$1, %al
	movb	%al, -34(%rbp)
	movq	-24(%rbp), %rcx
	movl	%r8d, %edi
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-720(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB63_2
# BB#1:                                 # %if.then
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
	jmp	.LBB63_8
.LBB63_2:                               # %if.else
	jmp	.LBB63_3
.LBB63_3:                               # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB63_6
# BB#4:                                 # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -728(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-728(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB63_6
# BB#5:                                 # %if.then.9
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -736(%rbp)        # 8-byte Spill
.LBB63_6:                               # %if.end
	jmp	.LBB63_7
.LBB63_7:                               # %do.end
	jmp	.LBB63_8
.LBB63_8:                               # %if.end.11
	callq	Fcurrent_buffer
	xorl	%edi, %edi
	movq	%rax, -696(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-744(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB63_10
# BB#9:                                 # %if.then.15
	movq	-696(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB63_13
.LBB63_10:                              # %if.else.16
	movl	$901, %edi              # imm = 0x385
	movq	-32(%rbp), %rax
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-752(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB63_12
# BB#11:                                # %if.then.19
	movq	-32(%rbp), %rdi
	callq	CHECK_BUFFER
.LBB63_12:                              # %if.end.20
	jmp	.LBB63_13
.LBB63_13:                              # %if.end.21
	leaq	-8(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	validate_region
	movq	-8(%rbp), %rsi
	sarq	$2, %rsi
	movq	%rsi, -664(%rbp)
	movq	current_buffer, %rdi
	movq	-664(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	movq	%rax, -672(%rbp)
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movq	%rax, -680(%rbp)
	movq	current_buffer, %rdi
	movq	-680(%rbp), %rsi
	callq	buf_charpos_to_bytepos
	leaq	-656(%rbp), %rsi
	movq	%rax, -688(%rbp)
	movq	-24(%rbp), %rdi
	callq	setup_coding_system
	movl	-648(%rbp), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	orl	$1, %ecx
	movl	-648(%rbp), %edx
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %edx
	movl	%edx, -648(%rbp)
	movq	-32(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB63_14
	jmp	.LBB63_22
.LBB63_14:                              # %land.lhs.true.28
	movq	-32(%rbp), %rax
	cmpq	-696(%rbp), %rax
	je	.LBB63_22
# BB#15:                                # %if.then.30
	movq	-32(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, -704(%rbp)
	movq	-704(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB63_17
# BB#16:                                # %cond.true
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	jmp	.LBB63_21
.LBB63_17:                              # %cond.false
	xorl	%edi, %edi
	movq	-704(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-768(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB63_19
# BB#18:                                # %cond.true.35
	movq	-704(%rbp), %rax
	movq	736(%rax), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	jmp	.LBB63_20
.LBB63_19:                              # %cond.false.37
	movq	-704(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -776(%rbp)        # 8-byte Spill
.LBB63_20:                              # %cond.end
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, -760(%rbp)        # 8-byte Spill
.LBB63_21:                              # %cond.end.40
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, -712(%rbp)
	movq	-704(%rbp), %rdi
	movq	-712(%rbp), %rsi
	movq	-712(%rbp), %rdx
	callq	invalidate_buffer_caches
.LBB63_22:                              # %if.end.42
	testb	$1, -33(%rbp)
	je	.LBB63_24
# BB#23:                                # %if.then.43
	leaq	-656(%rbp), %rdi
	movq	-696(%rbp), %rsi
	movq	-664(%rbp), %rdx
	movq	-672(%rbp), %rcx
	movq	-680(%rbp), %r8
	movq	-688(%rbp), %r9
	movq	-32(%rbp), %rax
	movq	%rax, (%rsp)
	callq	encode_coding_object
	jmp	.LBB63_25
.LBB63_24:                              # %if.else.44
	leaq	-656(%rbp), %rdi
	movq	-696(%rbp), %rsi
	movq	-664(%rbp), %rdx
	movq	-672(%rbp), %rcx
	movq	-680(%rbp), %r8
	movq	-688(%rbp), %r9
	movq	-32(%rbp), %rax
	movq	%rax, (%rsp)
	callq	decode_coding_object
.LBB63_25:                              # %if.end.45
	testb	$1, -34(%rbp)
	jne	.LBB63_27
# BB#26:                                # %if.then.47
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-656(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, globals+1240
.LBB63_27:                              # %if.end.50
	movq	-32(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB63_28
	jmp	.LBB63_29
.LBB63_28:                              # %cond.true.52
	movq	-264(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
	jmp	.LBB63_30
.LBB63_29:                              # %cond.false.54
	movq	-168(%rbp), %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
.LBB63_30:                              # %cond.end.56
	movq	-784(%rbp), %rax        # 8-byte Reload
	addq	$800, %rsp              # imm = 0x320
	popq	%rbp
	retq
.Lfunc_end63:
	.size	code_convert_region, .Lfunc_end63-code_convert_region
	.cfi_endproc

	.globl	Fencode_coding_region
	.align	16, 0x90
	.type	Fencode_coding_region,@function
Fencode_coding_region:                  # @Fencode_coding_region
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp193:
	.cfi_def_cfa_offset 16
.Ltmp194:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp195:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	code_convert_region
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end64:
	.size	Fencode_coding_region, .Lfunc_end64-Fencode_coding_region
	.cfi_endproc

	.globl	code_convert_string
	.align	16, 0x90
	.type	code_convert_string,@function
code_convert_string:                    # @code_convert_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp196:
	.cfi_def_cfa_offset 16
.Ltmp197:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp198:
	.cfi_def_cfa_register %rbp
	subq	$816, %rsp              # imm = 0x330
	movb	%r9b, %al
	movb	%r8b, %r10b
	movb	%cl, %r11b
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	andb	$1, %r11b
	movb	%r11b, -33(%rbp)
	andb	$1, %r10b
	movb	%r10b, -34(%rbp)
	andb	$1, %al
	movb	%al, -35(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHECK_STRING
	xorl	%edi, %edi
	movq	-24(%rbp), %rdx
	movq	%rdx, -696(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-696(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB65_9
# BB#1:                                 # %if.then
	testb	$1, -35(%rbp)
	jne	.LBB65_3
# BB#2:                                 # %if.then.3
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, globals+1240
.LBB65_3:                               # %if.end
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-704(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB65_8
# BB#4:                                 # %if.then.7
	testb	$1, -34(%rbp)
	je	.LBB65_6
# BB#5:                                 # %cond.true
	movq	-16(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -712(%rbp)        # 8-byte Spill
	jmp	.LBB65_7
.LBB65_6:                               # %cond.false
	movq	-16(%rbp), %rax
	movq	%rax, -712(%rbp)        # 8-byte Spill
.LBB65_7:                               # %cond.end
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, -8(%rbp)
	jmp	.LBB65_39
.LBB65_8:                               # %if.end.10
	jmp	.LBB65_9
.LBB65_9:                               # %if.end.11
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-720(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB65_11
# BB#10:                                # %if.then.14
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -24(%rbp)
	jmp	.LBB65_17
.LBB65_11:                              # %if.else
	jmp	.LBB65_12
.LBB65_12:                              # %do.body
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB65_15
# BB#13:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -728(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-728(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB65_15
# BB#14:                                # %if.then.22
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -736(%rbp)        # 8-byte Spill
.LBB65_15:                              # %if.end.24
	jmp	.LBB65_16
.LBB65_16:                              # %do.end
	jmp	.LBB65_17
.LBB65_17:                              # %if.end.25
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-744(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB65_19
# BB#18:                                # %if.then.28
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
	jmp	.LBB65_22
.LBB65_19:                              # %if.else.30
	movl	$901, %edi              # imm = 0x385
	movq	-32(%rbp), %rax
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-752(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB65_21
# BB#20:                                # %if.then.33
	movq	-32(%rbp), %rdi
	callq	CHECK_BUFFER
.LBB65_21:                              # %if.end.34
	jmp	.LBB65_22
.LBB65_22:                              # %if.end.35
	leaq	-656(%rbp), %rsi
	movq	-24(%rbp), %rdi
	callq	setup_coding_system
	movl	-648(%rbp), %eax
	shrl	$14, %eax
	andl	$31, %eax
	orl	$1, %eax
	movl	-648(%rbp), %ecx
	andl	$31, %eax
	shll	$14, %eax
	andl	$-507905, %ecx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%eax, %ecx
	movl	%ecx, -648(%rbp)
	movq	-16(%rbp), %rdi
	callq	SCHARS
	movq	%rax, -664(%rbp)
	movq	-16(%rbp), %rdi
	callq	SBYTES
	movq	%rax, -672(%rbp)
	movq	-32(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB65_23
	jmp	.LBB65_30
.LBB65_23:                              # %if.then.41
	movq	-32(%rbp), %rdi
	callq	XBUFFER
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rax
	cmpq	current_buffer, %rax
	jne	.LBB65_25
# BB#24:                                # %cond.true.44
	movq	current_buffer, %rax
	movq	736(%rax), %rax
	addq	$0, %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	jmp	.LBB65_29
.LBB65_25:                              # %cond.false.45
	xorl	%edi, %edi
	movq	-680(%rbp), %rax
	movq	360(%rax), %rax
	movq	%rax, -768(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-768(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB65_27
# BB#26:                                # %cond.true.48
	movq	-680(%rbp), %rax
	movq	736(%rax), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	jmp	.LBB65_28
.LBB65_27:                              # %cond.false.50
	movq	-680(%rbp), %rax
	movq	360(%rax), %rdi
	callq	marker_position
	movq	%rax, -776(%rbp)        # 8-byte Spill
.LBB65_28:                              # %cond.end.53
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rax, -760(%rbp)        # 8-byte Spill
.LBB65_29:                              # %cond.end.55
	movq	-760(%rbp), %rax        # 8-byte Reload
	movq	%rax, -688(%rbp)
	movq	-680(%rbp), %rdi
	movq	-688(%rbp), %rsi
	movq	-688(%rbp), %rdx
	callq	invalidate_buffer_caches
.LBB65_30:                              # %if.end.57
	testb	$1, -33(%rbp)
	je	.LBB65_32
# BB#31:                                # %if.then.59
	leaq	-656(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rsi
	movq	-664(%rbp), %r8
	movq	-672(%rbp), %r9
	movq	-32(%rbp), %rdx
	movq	%rdx, -784(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-784(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	encode_coding_object
	jmp	.LBB65_33
.LBB65_32:                              # %if.else.60
	leaq	-656(%rbp), %rdi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-16(%rbp), %rsi
	movq	-664(%rbp), %r8
	movq	-672(%rbp), %r9
	movq	-32(%rbp), %rdx
	movq	%rdx, -792(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-792(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	decode_coding_object
.LBB65_33:                              # %if.end.61
	testb	$1, -35(%rbp)
	jne	.LBB65_35
# BB#34:                                # %if.then.63
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-656(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	%rax, globals+1240
.LBB65_35:                              # %if.end.66
	movq	-32(%rbp), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB65_36
	jmp	.LBB65_37
.LBB65_36:                              # %cond.true.68
	movq	-264(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
	jmp	.LBB65_38
.LBB65_37:                              # %cond.false.70
	movq	-168(%rbp), %rax
	movq	%rax, -800(%rbp)        # 8-byte Spill
.LBB65_38:                              # %cond.end.72
	movq	-800(%rbp), %rax        # 8-byte Reload
	movq	%rax, -8(%rbp)
.LBB65_39:                              # %return
	movq	-8(%rbp), %rax
	addq	$816, %rsp              # imm = 0x330
	popq	%rbp
	retq
.Lfunc_end65:
	.size	code_convert_string, .Lfunc_end65-code_convert_string
	.cfi_endproc

	.globl	code_convert_string_norecord
	.align	16, 0x90
	.type	code_convert_string_norecord,@function
code_convert_string_norecord:           # @code_convert_string_norecord
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp199:
	.cfi_def_cfa_offset 16
.Ltmp200:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp201:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movb	%dl, %al
	movl	$901, %edx              # imm = 0x385
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movl	%edx, %edi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%r8d, %r8d
	movl	$1, %r9d
	movb	-17(%rbp), %cl
	andb	$1, %cl
	movq	-32(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movzbl	%cl, %ecx
	callq	code_convert_string
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end66:
	.size	code_convert_string_norecord, .Lfunc_end66-code_convert_string_norecord
	.cfi_endproc

	.globl	decode_file_name
	.align	16, 0x90
	.type	decode_file_name,@function
decode_file_name:                       # @decode_file_name
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp202:
	.cfi_def_cfa_offset 16
.Ltmp203:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp204:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	globals+752, %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB67_2
# BB#1:                                 # %if.then
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movq	globals+752, %rsi
	callq	code_convert_string_norecord
	movq	%rax, -8(%rbp)
	jmp	.LBB67_5
.LBB67_2:                               # %if.else
	xorl	%edi, %edi
	movq	globals+472, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB67_4
# BB#3:                                 # %if.then.4
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi
	movq	globals+472, %rsi
	callq	code_convert_string_norecord
	movq	%rax, -8(%rbp)
	jmp	.LBB67_5
.LBB67_4:                               # %if.else.6
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB67_5:                               # %return
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end67:
	.size	decode_file_name, .Lfunc_end67-decode_file_name
	.cfi_endproc

	.globl	encode_file_name
	.align	16, 0x90
	.type	encode_file_name,@function
encode_file_name:                       # @encode_file_name
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp205:
	.cfi_def_cfa_offset 16
.Ltmp206:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp207:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB68_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB68_7
.LBB68_2:                               # %if.end
	xorl	%edi, %edi
	movq	globals+752, %rax
	movq	%rax, -24(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB68_4
# BB#3:                                 # %if.then.2
	movl	$1, %edx
	movq	-16(%rbp), %rdi
	movq	globals+752, %rsi
	callq	code_convert_string_norecord
	movq	%rax, -8(%rbp)
	jmp	.LBB68_7
.LBB68_4:                               # %if.else
	xorl	%edi, %edi
	movq	globals+472, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB68_6
# BB#5:                                 # %if.then.6
	movl	$1, %edx
	movq	-16(%rbp), %rdi
	movq	globals+472, %rsi
	callq	code_convert_string_norecord
	movq	%rax, -8(%rbp)
	jmp	.LBB68_7
.LBB68_6:                               # %if.else.8
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
.LBB68_7:                               # %return
	movq	-8(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end68:
	.size	encode_file_name, .Lfunc_end68-encode_file_name
	.cfi_endproc

	.globl	Fdecode_coding_string
	.align	16, 0x90
	.type	Fdecode_coding_string,@function
Fdecode_coding_string:                  # @Fdecode_coding_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp208:
	.cfi_def_cfa_offset 16
.Ltmp209:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp210:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r8b
	xorb	$-1, %r8b
	movzbl	%r8b, %r9d
	andl	$1, %r9d
	xorl	%r10d, %r10d
	movq	-40(%rbp), %rax         # 8-byte Reload
	movl	%edi, -68(%rbp)         # 4-byte Spill
	movq	%rax, %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movl	%r10d, %ecx
	movl	%r9d, %r8d
	movl	%r10d, %r9d
	callq	code_convert_string
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end69:
	.size	Fdecode_coding_string, .Lfunc_end69-Fdecode_coding_string
	.cfi_endproc

	.globl	Fencode_coding_string
	.align	16, 0x90
	.type	Fencode_coding_string,@function
Fencode_coding_string:                  # @Fencode_coding_string
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp211:
	.cfi_def_cfa_offset 16
.Ltmp212:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp213:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	movq	%rcx, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%r8b
	xorb	$-1, %r8b
	movzbl	%r8b, %r9d
	andl	$1, %r9d
	movl	$1, %ecx
	xorl	%r10d, %r10d
	movq	-40(%rbp), %rax         # 8-byte Reload
	movl	%edi, -68(%rbp)         # 4-byte Spill
	movq	%rax, %rdi
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	-56(%rbp), %rdx         # 8-byte Reload
	movl	%r9d, %r8d
	movl	%r10d, %r9d
	callq	code_convert_string
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end70:
	.size	Fencode_coding_string, .Lfunc_end70-Fencode_coding_string
	.cfi_endproc

	.globl	Fdecode_sjis_char
	.align	16, 0x90
	.type	Fdecode_sjis_char,@function
Fdecode_sjis_char:                      # @Fdecode_sjis_char
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp214:
	.cfi_def_cfa_offset 16
.Ltmp215:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp216:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	-16(%rbp), %rdi
	sarq	$2, %rdi
	movq	%rdi, -80(%rbp)
# BB#1:                                 # %do.body
	xorl	%edi, %edi
	movq	Vsjis_coding_system, %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB71_3
# BB#2:                                 # %if.then
	movq	Vsjis_coding_system, %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	Vsjis_coding_system, %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -152(%rbp)        # 8-byte Spill
	movq	%rsi, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rdi        # 8-byte Reload
	movq	-160(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -24(%rbp)
.LBB71_3:                               # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-176(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB71_5
# BB#4:                                 # %if.then.8
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	Vsjis_coding_system, %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB71_5:                               # %if.end.10
	jmp	.LBB71_6
.LBB71_6:                               # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -32(%rbp)
	testb	$1, %dl
	jne	.LBB71_7
	jmp	.LBB71_8
.LBB71_7:                               # %cond.true
	movq	-80(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jl	.LBB71_9
	jmp	.LBB71_11
.LBB71_8:                               # %cond.false
	movq	-80(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB71_11
.LBB71_9:                               # %land.lhs.true
	movl	$5, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB71_11
# BB#10:                                # %if.then.18
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB71_60
.LBB71_11:                              # %if.end.19
	movl	$4, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	movq	charset_table, %rax
	movq	-40(%rbp), %rsi
	subq	$3, %rsi
	movq	(%rsi), %rsi
	sarq	$2, %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	charset_table, %rax
	movq	-40(%rbp), %rsi
	subq	$3, %rsi
	movq	(%rsi), %rsi
	sarq	$2, %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rax
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	charset_table, %rax
	movq	-40(%rbp), %rsi
	subq	$3, %rsi
	movq	(%rsi), %rsi
	sarq	$2, %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rax
	movq	%rax, -56(%rbp)
	cmpq	$127, -80(%rbp)
	jg	.LBB71_13
# BB#12:                                # %if.then.35
	movq	-80(%rbp), %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB71_31
.LBB71_13:                              # %if.else
	cmpq	$160, -80(%rbp)
	jl	.LBB71_16
# BB#14:                                # %land.lhs.true.38
	cmpq	$223, -80(%rbp)
	jge	.LBB71_16
# BB#15:                                # %if.then.41
	movq	-80(%rbp), %rax
	subq	$128, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB71_30
.LBB71_16:                              # %if.else.44
	movq	-80(%rbp), %rax
	sarq	$8, %rax
	movq	%rax, -96(%rbp)
	movq	-80(%rbp), %rax
	andq	$255, %rax
	movl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	cmpq	$129, -96(%rbp)
	jl	.LBB71_23
# BB#17:                                # %lor.lhs.false
	cmpq	$159, -96(%rbp)
	jle	.LBB71_19
# BB#18:                                # %land.lhs.true.51
	cmpq	$224, -96(%rbp)
	jl	.LBB71_23
.LBB71_19:                              # %lor.lhs.false.54
	cmpq	$239, -96(%rbp)
	jg	.LBB71_23
# BB#20:                                # %lor.lhs.false.57
	cmpl	$64, -100(%rbp)
	jl	.LBB71_23
# BB#21:                                # %lor.lhs.false.60
	cmpl	$127, -100(%rbp)
	je	.LBB71_23
# BB#22:                                # %lor.lhs.false.63
	cmpl	$252, -100(%rbp)
	jle	.LBB71_24
.LBB71_23:                              # %if.then.66
	movabsq	$.L.str, %rdi
	movq	-80(%rbp), %rsi
	movb	$0, %al
	callq	error
.LBB71_24:                              # %if.end.67
	movq	-80(%rbp), %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
# BB#25:                                # %do.body.69
	movl	-84(%rbp), %eax
	sarl	$8, %eax
	movl	%eax, -104(%rbp)
	movl	-84(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -108(%rbp)
	cmpl	$159, -108(%rbp)
	jl	.LBB71_27
# BB#26:                                # %if.then.74
	movl	$224, %eax
	movl	$352, %ecx              # imm = 0x160
	movl	-104(%rbp), %edx
	shll	$1, %edx
	cmpl	$224, -104(%rbp)
	cmovgel	%ecx, %eax
	subl	%eax, %edx
	movl	%edx, -112(%rbp)
	movl	-108(%rbp), %eax
	subl	$126, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB71_28
.LBB71_27:                              # %if.else.79
	movl	$31, %eax
	movl	$32, %ecx
	movl	$225, %edx
	movl	$353, %esi              # imm = 0x161
	movl	-104(%rbp), %edi
	shll	$1, %edi
	cmpl	$224, -104(%rbp)
	cmovgel	%esi, %edx
	subl	%edx, %edi
	movl	%edi, -112(%rbp)
	movl	-108(%rbp), %edx
	cmpl	$127, -108(%rbp)
	cmovgel	%ecx, %eax
	subl	%eax, %edx
	movl	%edx, -116(%rbp)
.LBB71_28:                              # %if.end.89
	movl	-112(%rbp), %eax
	shll	$8, %eax
	orl	-116(%rbp), %eax
	movl	%eax, -84(%rbp)
# BB#29:                                # %do.end.90
	movq	-56(%rbp), %rax
	movq	%rax, -72(%rbp)
.LBB71_30:                              # %if.end.91
	jmp	.LBB71_31
.LBB71_31:                              # %if.end.92
	movb	$1, %al
	testb	$1, %al
	jne	.LBB71_32
	jmp	.LBB71_33
.LBB71_32:                              # %cond.true.93
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB71_34
	jmp	.LBB71_36
.LBB71_33:                              # %cond.false.97
	movslq	-84(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB71_36
.LBB71_34:                              # %land.lhs.true.102
	movq	-72(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB71_36
# BB#35:                                # %cond.true.104
	movslq	-84(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	jmp	.LBB71_57
.LBB71_36:                              # %cond.false.106
	movl	-84(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB71_38
# BB#37:                                # %lor.lhs.false.109
	movl	-84(%rbp), %eax
	movq	-72(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB71_39
.LBB71_38:                              # %cond.true.112
	movq	$-1, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB71_56
.LBB71_39:                              # %cond.false.113
	movq	-72(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB71_41
# BB#40:                                # %cond.true.119
	movq	-72(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -216(%rbp)        # 8-byte Spill
	jmp	.LBB71_55
.LBB71_41:                              # %cond.false.122
	movq	-72(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB71_46
# BB#42:                                # %cond.true.125
	movq	-72(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB71_44
# BB#43:                                # %cond.true.130
	movl	-84(%rbp), %eax
	movq	-72(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-72(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -220(%rbp)        # 4-byte Spill
	jmp	.LBB71_45
.LBB71_44:                              # %cond.false.134
	movq	-72(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	decode_char
	movl	%eax, -220(%rbp)        # 4-byte Spill
.LBB71_45:                              # %cond.end
	movl	-220(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	jmp	.LBB71_54
.LBB71_46:                              # %cond.false.138
	movq	-72(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB71_52
# BB#47:                                # %cond.true.142
	movq	-72(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB71_50
# BB#48:                                # %land.lhs.true.148
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-72(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB71_49
	jmp	.LBB71_50
.LBB71_49:                              # %cond.true.154
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-72(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-84(%rbp), %ecx
	movq	-72(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	jmp	.LBB71_51
.LBB71_50:                              # %cond.false.164
	movq	-72(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -240(%rbp)        # 8-byte Spill
.LBB71_51:                              # %cond.end.167
	movq	-240(%rbp), %rax        # 8-byte Reload
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB71_53
.LBB71_52:                              # %cond.false.169
	movq	-72(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -248(%rbp)        # 8-byte Spill
.LBB71_53:                              # %cond.end.172
	movq	-248(%rbp), %rax        # 8-byte Reload
	movq	%rax, -232(%rbp)        # 8-byte Spill
.LBB71_54:                              # %cond.end.174
	movq	-232(%rbp), %rax        # 8-byte Reload
	movq	%rax, -216(%rbp)        # 8-byte Spill
.LBB71_55:                              # %cond.end.176
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB71_56:                              # %cond.end.178
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB71_57:                              # %cond.end.180
	movq	-200(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB71_59
# BB#58:                                # %if.then.185
	movabsq	$.L.str, %rdi
	movq	-80(%rbp), %rsi
	movb	$0, %al
	callq	error
.LBB71_59:                              # %if.end.186
	movslq	-84(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
.LBB71_60:                              # %return
	movq	-8(%rbp), %rax
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	retq
.Lfunc_end71:
	.size	Fdecode_sjis_char, .Lfunc_end71-Fdecode_sjis_char
	.cfi_endproc

	.globl	Fencode_sjis_char
	.align	16, 0x90
	.type	Fencode_sjis_char,@function
Fencode_sjis_char:                      # @Fencode_sjis_char
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp217:
	.cfi_def_cfa_offset 16
.Ltmp218:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp219:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB72_1
	jmp	.LBB72_3
.LBB72_1:                               # %land.lhs.true
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB72_3
# BB#2:                                 # %cond.true
	jmp	.LBB72_4
.LBB72_3:                               # %cond.false
	movl	$260, %edi              # imm = 0x104
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB72_4:                               # %cond.end
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
# BB#5:                                 # %do.body
	xorl	%edi, %edi
	movq	Vsjis_coding_system, %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -96(%rbp)         # 8-byte Spill
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB72_7
# BB#6:                                 # %if.then
	movq	Vsjis_coding_system, %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	Vsjis_coding_system, %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rsi, -128(%rbp)        # 8-byte Spill
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -24(%rbp)
.LBB72_7:                               # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB72_9
# BB#8:                                 # %if.then.14
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	Vsjis_coding_system, %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB72_9:                               # %if.end.16
	jmp	.LBB72_10
.LBB72_10:                              # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movb	$1, %cl
	movq	%rax, -32(%rbp)
	testb	$1, %cl
	jne	.LBB72_11
	jmp	.LBB72_12
.LBB72_11:                              # %cond.true.18
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB72_13
	jmp	.LBB72_15
.LBB72_12:                              # %cond.false.21
	movslq	-44(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB72_15
.LBB72_13:                              # %land.lhs.true.26
	movl	$5, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB72_15
# BB#14:                                # %if.then.31
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB72_23
.LBB72_15:                              # %if.end.32
	movl	$4, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	leaq	-60(%rbp), %rdx
	movq	%rax, -40(%rbp)
	movl	-44(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_charset
	movq	%rax, -56(%rbp)
	movl	-60(%rbp), %edi
	movq	-56(%rbp), %rax
	cmpl	128(%rax), %edi
	jne	.LBB72_17
# BB#16:                                # %if.then.37
	movabsq	$.L.str.1, %rdi
	movl	-44(%rbp), %esi
	movb	$0, %al
	callq	error
.LBB72_17:                              # %if.end.38
	jmp	.LBB72_18
.LBB72_18:                              # %do.body.39
	movl	-60(%rbp), %eax
	shrl	$8, %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB72_20
# BB#19:                                # %if.then.42
	movl	$31, %eax
	movl	$32, %ecx
	movl	$177, %edx
	movl	$113, %esi
	movl	$2, %edi
	movl	-72(%rbp), %r8d
	movl	%eax, -164(%rbp)        # 4-byte Spill
	movl	%r8d, %eax
	movl	%edx, -168(%rbp)        # 4-byte Spill
	cltd
	idivl	%edi
	cmpl	$95, -72(%rbp)
	movl	-168(%rbp), %edi        # 4-byte Reload
	cmovll	%esi, %edi
	addl	%edi, %eax
	movl	%eax, -64(%rbp)
	movl	-76(%rbp), %eax
	cmpl	$96, -76(%rbp)
	movl	-164(%rbp), %esi        # 4-byte Reload
	cmovgel	%ecx, %esi
	addl	%esi, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB72_21
.LBB72_20:                              # %if.else
	movl	$176, %eax
	movl	$112, %ecx
	movl	$2, %edx
	movl	-72(%rbp), %esi
	movl	%eax, -172(%rbp)        # 4-byte Spill
	movl	%esi, %eax
	movl	%edx, -176(%rbp)        # 4-byte Spill
	cltd
	movl	-176(%rbp), %esi        # 4-byte Reload
	idivl	%esi
	cmpl	$95, -72(%rbp)
	movl	-172(%rbp), %edi        # 4-byte Reload
	cmovll	%ecx, %edi
	addl	%edi, %eax
	movl	%eax, -64(%rbp)
	movl	-76(%rbp), %eax
	addl	$126, %eax
	movl	%eax, -68(%rbp)
.LBB72_21:                              # %if.end.56
	movl	-64(%rbp), %eax
	shll	$8, %eax
	orl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
# BB#22:                                # %do.end.57
	movl	-60(%rbp), %eax
	movl	%eax, %ecx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, -8(%rbp)
.LBB72_23:                              # %return
	movq	-8(%rbp), %rax
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end72:
	.size	Fencode_sjis_char, .Lfunc_end72-Fencode_sjis_char
	.cfi_endproc

	.globl	Fdecode_big5_char
	.align	16, 0x90
	.type	Fdecode_big5_char,@function
Fdecode_big5_char:                      # @Fdecode_big5_char
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp220:
	.cfi_def_cfa_offset 16
.Ltmp221:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp222:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	-16(%rbp), %rdi
	sarq	$2, %rdi
	movq	%rdi, -72(%rbp)
# BB#1:                                 # %do.body
	xorl	%edi, %edi
	movq	Vbig5_coding_system, %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -104(%rbp)        # 8-byte Spill
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB73_3
# BB#2:                                 # %if.then
	movq	Vbig5_coding_system, %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	Vbig5_coding_system, %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -128(%rbp)        # 8-byte Spill
	movq	%rsi, -136(%rbp)        # 8-byte Spill
	movq	%rcx, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rdi        # 8-byte Reload
	movq	-136(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -24(%rbp)
.LBB73_3:                               # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB73_5
# BB#4:                                 # %if.then.8
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	Vbig5_coding_system, %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB73_5:                               # %if.end.10
	jmp	.LBB73_6
.LBB73_6:                               # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -32(%rbp)
	testb	$1, %dl
	jne	.LBB73_7
	jmp	.LBB73_8
.LBB73_7:                               # %cond.true
	movq	-72(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jl	.LBB73_9
	jmp	.LBB73_11
.LBB73_8:                               # %cond.false
	movq	-72(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB73_11
.LBB73_9:                               # %land.lhs.true
	movl	$5, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB73_11
# BB#10:                                # %if.then.18
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB73_50
.LBB73_11:                              # %if.end.19
	movl	$4, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	movq	charset_table, %rax
	movq	-40(%rbp), %rsi
	subq	$3, %rsi
	movq	(%rsi), %rsi
	sarq	$2, %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rax
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	charset_table, %rax
	movq	-40(%rbp), %rsi
	subq	$3, %rsi
	movq	(%rsi), %rsi
	sarq	$2, %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rax
	movq	%rax, -56(%rbp)
	cmpq	$127, -72(%rbp)
	jg	.LBB73_13
# BB#12:                                # %if.then.28
	movq	-72(%rbp), %rax
	movl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB73_21
.LBB73_13:                              # %if.else
	movq	-72(%rbp), %rax
	sarq	$8, %rax
	movq	%rax, -88(%rbp)
	movq	-72(%rbp), %rax
	andq	$127, %rax
	movl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	cmpq	$161, -88(%rbp)
	jl	.LBB73_19
# BB#14:                                # %lor.lhs.false
	cmpq	$254, -88(%rbp)
	jg	.LBB73_19
# BB#15:                                # %lor.lhs.false.35
	cmpl	$64, -92(%rbp)
	jl	.LBB73_19
# BB#16:                                # %lor.lhs.false.38
	cmpl	$126, -92(%rbp)
	jle	.LBB73_18
# BB#17:                                # %land.lhs.true.41
	cmpl	$161, -92(%rbp)
	jl	.LBB73_19
.LBB73_18:                              # %lor.lhs.false.44
	cmpl	$254, -92(%rbp)
	jle	.LBB73_20
.LBB73_19:                              # %if.then.47
	movabsq	$.L.str, %rdi
	movq	-72(%rbp), %rsi
	movb	$0, %al
	callq	error
.LBB73_20:                              # %if.end.48
	movq	-72(%rbp), %rax
	movl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB73_21:                              # %if.end.50
	movb	$1, %al
	testb	$1, %al
	jne	.LBB73_22
	jmp	.LBB73_23
.LBB73_22:                              # %cond.true.51
	movl	-76(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB73_24
	jmp	.LBB73_26
.LBB73_23:                              # %cond.false.55
	movslq	-76(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB73_26
.LBB73_24:                              # %land.lhs.true.60
	movq	-64(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB73_26
# BB#25:                                # %cond.true.62
	movslq	-76(%rbp), %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB73_47
.LBB73_26:                              # %cond.false.64
	movl	-76(%rbp), %eax
	movq	-64(%rbp), %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB73_28
# BB#27:                                # %lor.lhs.false.67
	movl	-76(%rbp), %eax
	movq	-64(%rbp), %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB73_29
.LBB73_28:                              # %cond.true.70
	movq	$-1, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB73_46
.LBB73_29:                              # %cond.false.71
	movq	-64(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$5, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB73_31
# BB#30:                                # %cond.true.77
	movq	-64(%rbp), %rdi
	movl	-76(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -192(%rbp)        # 8-byte Spill
	jmp	.LBB73_45
.LBB73_31:                              # %cond.false.80
	movq	-64(%rbp), %rax
	cmpl	$0, 104(%rax)
	jne	.LBB73_36
# BB#32:                                # %cond.true.83
	movq	-64(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB73_34
# BB#33:                                # %cond.true.88
	movl	-76(%rbp), %eax
	movq	-64(%rbp), %rcx
	subl	108(%rcx), %eax
	movq	-64(%rbp), %rcx
	addl	324(%rcx), %eax
	movl	%eax, -196(%rbp)        # 4-byte Spill
	jmp	.LBB73_35
.LBB73_34:                              # %cond.false.92
	movq	-64(%rbp), %rdi
	movl	-76(%rbp), %esi
	callq	decode_char
	movl	%eax, -196(%rbp)        # 4-byte Spill
.LBB73_35:                              # %cond.end
	movl	-196(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	jmp	.LBB73_44
.LBB73_36:                              # %cond.false.95
	movq	-64(%rbp), %rax
	cmpl	$1, 104(%rax)
	jne	.LBB73_42
# BB#37:                                # %cond.true.99
	movq	-64(%rbp), %rax
	movb	88(%rax), %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB73_40
# BB#38:                                # %land.lhs.true.105
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-64(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB73_39
	jmp	.LBB73_40
.LBB73_39:                              # %cond.true.111
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-64(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-76(%rbp), %ecx
	movq	-64(%rbp), %rsi
	subl	108(%rsi), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	jmp	.LBB73_41
.LBB73_40:                              # %cond.false.121
	movq	-64(%rbp), %rdi
	movl	-76(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -216(%rbp)        # 8-byte Spill
.LBB73_41:                              # %cond.end.124
	movq	-216(%rbp), %rax        # 8-byte Reload
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jmp	.LBB73_43
.LBB73_42:                              # %cond.false.126
	movq	-64(%rbp), %rdi
	movl	-76(%rbp), %esi
	callq	decode_char
	movslq	%eax, %rdi
	movq	%rdi, -224(%rbp)        # 8-byte Spill
.LBB73_43:                              # %cond.end.129
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB73_44:                              # %cond.end.131
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, -192(%rbp)        # 8-byte Spill
.LBB73_45:                              # %cond.end.133
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB73_46:                              # %cond.end.135
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB73_47:                              # %cond.end.137
	movq	-176(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jge	.LBB73_49
# BB#48:                                # %if.then.142
	movabsq	$.L.str, %rdi
	movq	-72(%rbp), %rsi
	movb	$0, %al
	callq	error
.LBB73_49:                              # %if.end.143
	movslq	-76(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -8(%rbp)
.LBB73_50:                              # %return
	movq	-8(%rbp), %rax
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end73:
	.size	Fdecode_big5_char, .Lfunc_end73-Fdecode_big5_char
	.cfi_endproc

	.globl	Fencode_big5_char
	.align	16, 0x90
	.type	Fencode_big5_char,@function
Fencode_big5_char:                      # @Fencode_big5_char
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp223:
	.cfi_def_cfa_offset 16
.Ltmp224:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp225:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB74_1
	jmp	.LBB74_3
.LBB74_1:                               # %land.lhs.true
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB74_3
# BB#2:                                 # %cond.true
	jmp	.LBB74_4
.LBB74_3:                               # %cond.false
	movl	$260, %edi              # imm = 0x104
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -64(%rbp)         # 8-byte Spill
.LBB74_4:                               # %cond.end
	movq	-16(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -52(%rbp)
# BB#5:                                 # %do.body
	xorl	%edi, %edi
	movq	Vbig5_coding_system, %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB74_7
# BB#6:                                 # %if.then
	movq	Vbig5_coding_system, %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	Vbig5_coding_system, %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movq	%rsi, -104(%rbp)        # 8-byte Spill
	movq	%rcx, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rdi        # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -24(%rbp)
.LBB74_7:                               # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB74_9
# BB#8:                                 # %if.then.14
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	Vbig5_coding_system, %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB74_9:                               # %if.end.16
	jmp	.LBB74_10
.LBB74_10:                              # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movb	$1, %cl
	movq	%rax, -32(%rbp)
	testb	$1, %cl
	jne	.LBB74_11
	jmp	.LBB74_12
.LBB74_11:                              # %cond.true.18
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB74_13
	jmp	.LBB74_15
.LBB74_12:                              # %cond.false.21
	movslq	-52(%rbp), %rax
	addq	$0, %rax
	cmpq	$128, %rax
	jae	.LBB74_15
.LBB74_13:                              # %land.lhs.true.26
	movl	$5, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB74_15
# BB#14:                                # %if.then.31
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB74_18
.LBB74_15:                              # %if.end.32
	movl	$4, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	leaq	-56(%rbp), %rdx
	movq	%rax, -40(%rbp)
	movl	-52(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	char_charset
	movq	%rax, -48(%rbp)
	movl	-56(%rbp), %edi
	movq	-48(%rbp), %rax
	cmpl	128(%rax), %edi
	jne	.LBB74_17
# BB#16:                                # %if.then.37
	movabsq	$.L.str.2, %rdi
	movl	-52(%rbp), %esi
	movb	$0, %al
	callq	error
.LBB74_17:                              # %if.end.38
	movl	-56(%rbp), %eax
	movl	%eax, %ecx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, -8(%rbp)
.LBB74_18:                              # %return
	movq	-8(%rbp), %rax
	addq	$144, %rsp
	popq	%rbp
	retq
.Lfunc_end74:
	.size	Fencode_big5_char, .Lfunc_end74-Fencode_big5_char
	.cfi_endproc

	.globl	Fset_terminal_coding_system_internal
	.align	16, 0x90
	.type	Fset_terminal_coding_system_internal,@function
Fset_terminal_coding_system_internal:   # @Fset_terminal_coding_system_internal
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp226:
	.cfi_def_cfa_offset 16
.Ltmp227:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp228:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	decode_live_terminal
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB75_2
# BB#1:                                 # %cond.true
	jmp	.LBB75_3
.LBB75_2:                               # %cond.false
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB75_3:                               # %cond.end
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	movq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	setup_coding_system
	movq	-32(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	orl	$16, %ecx
	movl	8(%rax), %edx
	andl	$31, %ecx
	shll	$14, %ecx
	andl	$-507905, %edx          # imm = 0xFFFFFFFFFFF83FFF
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	movq	-32(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-2, %ecx
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	movq	-32(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-524289, %ecx          # imm = 0xFFFFFFFFFFF7FFFF
	orl	$524288, %ecx           # imm = 0x80000
	movl	%ecx, 8(%rax)
	movq	-32(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$-1048577, %ecx         # imm = 0xFFFFFFFFFFEFFFFF
	movl	%ecx, 8(%rax)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$2048, %ecx             # imm = 0x800
	cmpl	$0, %ecx
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	je	.LBB75_5
# BB#4:                                 # %cond.true.23
	movq	-32(%rbp), %rdi
	callq	coding_charset_list
	movq	%rax, -56(%rbp)         # 8-byte Spill
	jmp	.LBB75_6
.LBB75_5:                               # %cond.false.25
	movslq	charset_ascii, %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdi
	callq	list1
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB75_6:                               # %cond.end.28
	movq	-56(%rbp), %rax         # 8-byte Reload
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	tset_charset_list
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end75:
	.size	Fset_terminal_coding_system_internal, .Lfunc_end75-Fset_terminal_coding_system_internal
	.cfi_endproc

	.globl	Fset_safe_terminal_coding_system_internal
	.align	16, 0x90
	.type	Fset_safe_terminal_coding_system_internal,@function
Fset_safe_terminal_coding_system_internal: # @Fset_safe_terminal_coding_system_internal
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp229:
	.cfi_def_cfa_offset 16
.Ltmp230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp231:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	andq	$7, %rdi
	movl	%edi, %eax
	cmpl	$0, %eax
	jne	.LBB76_2
# BB#1:                                 # %cond.true
	jmp	.LBB76_3
.LBB76_2:                               # %cond.false
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -16(%rbp)         # 8-byte Spill
.LBB76_3:                               # %cond.end
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	movabsq	$safe_terminal_coding, %rsi
	movq	%rax, %rdi
	callq	setup_coding_system
	xorl	%edi, %edi
	movl	safe_terminal_coding+8, %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-2, %ecx
	movl	safe_terminal_coding+8, %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, safe_terminal_coding+8
	movl	safe_terminal_coding+8, %ecx
	andl	$-524289, %ecx          # imm = 0xFFFFFFFFFFF7FFFF
	orl	$524288, %ecx           # imm = 0x80000
	movl	%ecx, safe_terminal_coding+8
	movl	safe_terminal_coding+8, %ecx
	andl	$-1048577, %ecx         # imm = 0xFFFFFFFFFFEFFFFF
	movl	%ecx, safe_terminal_coding+8
	callq	builtin_lisp_symbol
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end76:
	.size	Fset_safe_terminal_coding_system_internal, .Lfunc_end76-Fset_safe_terminal_coding_system_internal
	.cfi_endproc

	.globl	Fterminal_coding_system
	.align	16, 0x90
	.type	Fterminal_coding_system,@function
Fterminal_coding_system:                # @Fterminal_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp232:
	.cfi_def_cfa_offset 16
.Ltmp233:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp234:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	decode_live_terminal
	movq	96(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movl	$958, %edi              # imm = 0x3BE
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB77_2
# BB#1:                                 # %cond.true
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	jmp	.LBB77_3
.LBB77_2:                               # %cond.false
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -40(%rbp)         # 8-byte Spill
.LBB77_3:                               # %cond.end
	movq	-40(%rbp), %rax         # 8-byte Reload
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end77:
	.size	Fterminal_coding_system, .Lfunc_end77-Fterminal_coding_system
	.cfi_endproc

	.globl	Fset_keyboard_coding_system_internal
	.align	16, 0x90
	.type	Fset_keyboard_coding_system_internal,@function
Fset_keyboard_coding_system_internal:   # @Fset_keyboard_coding_system_internal
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp235:
	.cfi_def_cfa_offset 16
.Ltmp236:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp237:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	decode_live_terminal
	movq	%rax, -24(%rbp)
	movq	-8(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB78_2
# BB#1:                                 # %cond.true
	jmp	.LBB78_3
.LBB78_2:                               # %cond.false
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -32(%rbp)         # 8-byte Spill
.LBB78_3:                               # %cond.end
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB78_5
# BB#4:                                 # %if.then
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB78_6
.LBB78_5:                               # %if.else
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	movq	%rax, -48(%rbp)         # 8-byte Spill
.LBB78_6:                               # %if.end
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	104(%rax), %rsi
	callq	setup_coding_system
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-2, %ecx
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	callq	builtin_lisp_symbol
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end78:
	.size	Fset_keyboard_coding_system_internal, .Lfunc_end78-Fset_keyboard_coding_system_internal
	.cfi_endproc

	.globl	Fkeyboard_coding_system
	.align	16, 0x90
	.type	Fkeyboard_coding_system,@function
Fkeyboard_coding_system:                # @Fkeyboard_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp238:
	.cfi_def_cfa_offset 16
.Ltmp239:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp240:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	decode_live_terminal
	movq	104(%rax), %rax
	movq	(%rax), %rsi
	movq	-16(%rbp), %rdi         # 8-byte Reload
	callq	HASH_KEY
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end79:
	.size	Fkeyboard_coding_system, .Lfunc_end79-Fkeyboard_coding_system
	.cfi_endproc

	.globl	Ffind_operation_coding_system
	.align	16, 0x90
	.type	Ffind_operation_coding_system,@function
Ffind_operation_coding_system:          # @Ffind_operation_coding_system
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp241:
	.cfi_def_cfa_offset 16
.Ltmp242:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp243:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$2, -16(%rbp)
	jge	.LBB80_2
# BB#1:                                 # %if.then
	movabsq	$.L.str.3, %rdi
	movb	$0, %al
	callq	error
.LBB80_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB80_4
# BB#3:                                 # %lor.lhs.false
	movl	$902, %edi              # imm = 0x386
	movq	-32(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	NATNUMP
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB80_4
	jmp	.LBB80_5
.LBB80_4:                               # %if.then.5
	movabsq	$.L.str.4, %rdi
	movb	$0, %al
	callq	error
.LBB80_5:                               # %if.end.6
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	sarq	$2, %rcx
	addq	$1, %rcx
	cmpq	%rcx, %rax
	jg	.LBB80_7
# BB#6:                                 # %if.then.9
	movq	-32(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.5, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB80_7:                               # %if.end.12
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	movq	-24(%rbp), %rcx
	movq	8(%rcx,%rax,8), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB80_15
# BB#8:                                 # %lor.lhs.false.18
	movl	$553, %edi              # imm = 0x229
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB80_12
# BB#9:                                 # %land.lhs.true
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB80_12
# BB#10:                                # %land.lhs.true.26
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB80_11
	jmp	.LBB80_12
.LBB80_11:                              # %land.lhs.true.29
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB80_15
.LBB80_12:                              # %lor.lhs.false.33
	movl	$720, %edi              # imm = 0x2D0
	movq	-32(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB80_14
# BB#13:                                # %land.lhs.true.37
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	je	.LBB80_15
.LBB80_14:                              # %if.then.43
	movq	-40(%rbp), %rax
	sarq	$2, %rax
	addq	$1, %rax
	movq	-32(%rbp), %rdi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.6, %rdi
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movb	$0, %al
	callq	error
.LBB80_15:                              # %if.end.48
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB80_17
# BB#16:                                # %if.then.53
	movq	-48(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
.LBB80_17:                              # %if.end.56
	movl	$553, %edi              # imm = 0x229
	movq	-32(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB80_19
# BB#18:                                # %lor.lhs.false.60
	movl	$1040, %edi             # imm = 0x410
	movq	-32(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB80_20
.LBB80_19:                              # %cond.true
	movq	globals+744, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jmp	.LBB80_24
.LBB80_20:                              # %cond.false
	movl	$720, %edi              # imm = 0x2D0
	movq	-32(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB80_22
# BB#21:                                # %cond.true.67
	movq	globals+1640, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB80_23
.LBB80_22:                              # %cond.false.68
	movq	globals+1896, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB80_23:                              # %cond.end
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB80_24:                              # %cond.end.69
	movq	-128(%rbp), %rax        # 8-byte Reload
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB80_26
# BB#25:                                # %if.then.74
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_26:                              # %if.end.76
	jmp	.LBB80_27
.LBB80_27:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-64(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB80_50
# BB#28:                                # %for.body
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB80_48
# BB#29:                                # %land.lhs.true.87
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-48(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB80_30
	jmp	.LBB80_32
.LBB80_30:                              # %land.lhs.true.90
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-72(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB80_31
	jmp	.LBB80_32
.LBB80_31:                              # %land.lhs.true.95
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-72(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	-48(%rbp), %rsi
	callq	fast_string_match
	cmpq	$0, %rax
	jge	.LBB80_34
.LBB80_32:                              # %lor.lhs.false.101
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-48(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB80_48
# BB#33:                                # %land.lhs.true.107
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-48(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	$3, %rcx
	cmpq	(%rcx), %rax
	jne	.LBB80_48
.LBB80_34:                              # %if.then.112
	movq	-72(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB80_36
# BB#35:                                # %if.then.120
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_36:                              # %if.end.121
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	je	.LBB80_38
# BB#37:                                # %if.then.126
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_38:                              # %if.end.128
	movq	-56(%rbp), %rdi
	callq	Fcoding_system_p
	xorl	%edi, %edi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB80_40
# BB#39:                                # %if.then.133
	movq	-56(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	Fcons
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_40:                              # %if.end.135
	movq	-56(%rbp), %rdi
	callq	Ffboundp
	xorl	%edi, %edi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB80_47
# BB#41:                                # %if.then.140
	movq	-56(%rbp), %rdi
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rsi
	movq	%rdi, -176(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	Flist
	movq	-176(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	call1
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB80_43
# BB#42:                                # %if.then.147
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_43:                              # %if.end.148
	movq	-56(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB80_46
# BB#44:                                # %land.lhs.true.153
	movq	-56(%rbp), %rdi
	callq	Fcoding_system_p
	xorl	%edi, %edi
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB80_46
# BB#45:                                # %if.then.158
	movq	-56(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	Fcons
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_46:                              # %if.end.160
	jmp	.LBB80_47
.LBB80_47:                              # %if.end.161
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_48:                              # %if.end.163
                                        #   in Loop: Header=BB80_27 Depth=1
	jmp	.LBB80_49
.LBB80_49:                              # %for.inc
                                        #   in Loop: Header=BB80_27 Depth=1
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB80_27
.LBB80_50:                              # %for.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB80_51:                              # %return
	movq	-8(%rbp), %rax
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end80:
	.size	Ffind_operation_coding_system, .Lfunc_end80-Ffind_operation_coding_system
	.cfi_endproc

	.globl	Fset_coding_system_priority
	.align	16, 0x90
	.type	Fset_coding_system_priority,@function
Fset_coding_system_priority:            # @Fset_coding_system_priority
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp244:
	.cfi_def_cfa_offset 16
.Ltmp245:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp246:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              # imm = 0x110
	xorl	%eax, %eax
	movl	$21, %ecx
	movl	%ecx, %edx
	leaq	-64(%rbp), %r8
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%r8, %rdi
	movl	%eax, %esi
	callq	memset
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jge	.LBB81_15
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_3
.LBB81_3:                               # %do.body
                                        #   in Loop: Header=BB81_1 Depth=1
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -192(%rbp)        # 8-byte Spill
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rdi        # 8-byte Reload
	movq	-192(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-208(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB81_5
# BB#4:                                 # %if.then
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx,%rax,8), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -216(%rbp)        # 8-byte Spill
	movq	%rsi, -224(%rbp)        # 8-byte Spill
	movq	%rcx, -232(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-224(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -176(%rbp)
.LBB81_5:                               # %if.end
                                        #   in Loop: Header=BB81_1 Depth=1
	xorl	%edi, %edi
	movq	-176(%rbp), %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-240(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB81_7
# BB#6:                                 # %if.then.11
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB81_7:                               # %if.end.14
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_8
.LBB81_8:                               # %do.end
                                        #   in Loop: Header=BB81_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-176(%rbp), %rdi
	callq	AREF
	movl	$14, %ecx
	movl	%ecx, %esi
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %ecx
	movl	%ecx, %eax
	testb	$1, -64(%rbp,%rax)
	je	.LBB81_10
# BB#9:                                 # %if.then.18
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_14
.LBB81_10:                              # %if.end.19
                                        #   in Loop: Header=BB81_1 Depth=1
	movabsq	$coding_categories, %rax
	movl	-164(%rbp), %ecx
	movl	%ecx, %edx
	movb	$1, -64(%rbp,%rdx)
	movl	-164(%rbp), %ecx
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movl	%ecx, -160(%rbp,%rdx,4)
	movl	-164(%rbp), %ecx
	movl	%ecx, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rax
	cmpq	$0, (%rax)
	jl	.LBB81_13
# BB#11:                                # %land.lhs.true
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx,%rax,8), %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	XHASH_TABLE
	movabsq	$coding_categories, %rcx
	movl	-164(%rbp), %edx
	movl	%edx, %edi
	imulq	$616, %rdi, %rdi        # imm = 0x268
	addq	%rdi, %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB81_13
# BB#12:                                # %if.then.35
                                        #   in Loop: Header=BB81_1 Depth=1
	movabsq	$coding_categories, %rax
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	(%rdx,%rcx,8), %rdi
	movl	-164(%rbp), %esi
	movl	%esi, %ecx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	%rax, %rsi
	callq	setup_coding_system
.LBB81_13:                              # %if.end.39
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	Vcoding_category_table, %rdi
	movl	-164(%rbp), %eax
	movl	%eax, %esi
	callq	AREF
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi,%rsi,8), %rsi
	movq	%rax, %rdi
	callq	Fset
	movq	%rax, -264(%rbp)        # 8-byte Spill
.LBB81_14:                              # %for.inc
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB81_1
.LBB81_15:                              # %for.end
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	$0, -32(%rbp)
.LBB81_16:                              # %for.cond.45
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_18 Depth 2
	cmpq	$21, -24(%rbp)
	jge	.LBB81_26
# BB#17:                                # %for.body.48
                                        #   in Loop: Header=BB81_16 Depth=1
	jmp	.LBB81_18
.LBB81_18:                              # %while.cond
                                        #   Parent Loop BB81_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	cmpq	$21, -32(%rbp)
	movb	%cl, -265(%rbp)         # 1-byte Spill
	jge	.LBB81_20
# BB#19:                                # %land.rhs
                                        #   in Loop: Header=BB81_18 Depth=2
	movq	-32(%rbp), %rax
	movl	coding_priorities(,%rax,4), %ecx
	movl	%ecx, %eax
	movb	-64(%rbp,%rax), %dl
	movb	%dl, -265(%rbp)         # 1-byte Spill
.LBB81_20:                              # %land.end
                                        #   in Loop: Header=BB81_18 Depth=2
	movb	-265(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB81_21
	jmp	.LBB81_22
.LBB81_21:                              # %while.body
                                        #   in Loop: Header=BB81_18 Depth=2
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB81_18
.LBB81_22:                              # %while.end
                                        #   in Loop: Header=BB81_16 Depth=1
	cmpq	$21, -32(%rbp)
	jne	.LBB81_24
# BB#23:                                # %if.then.59
	callq	emacs_abort
.LBB81_24:                              # %if.end.60
                                        #   in Loop: Header=BB81_16 Depth=1
	movq	-32(%rbp), %rax
	movl	coding_priorities(,%rax,4), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, -160(%rbp,%rax,4)
# BB#25:                                # %for.inc.63
                                        #   in Loop: Header=BB81_16 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB81_16
.LBB81_26:                              # %for.end.66
	xorl	%edi, %edi
	movabsq	$coding_priorities, %rax
	movl	$84, %ecx
	movl	%ecx, %edx
	leaq	-160(%rbp), %rsi
	movl	%edi, -272(%rbp)        # 4-byte Spill
	movq	%rax, %rdi
	callq	memcpy
	movl	-272(%rbp), %edi        # 4-byte Reload
	callq	builtin_lisp_symbol
	movq	%rax, globals+264
	movq	$21, -24(%rbp)
.LBB81_27:                              # %for.cond.68
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	cmpq	$0, %rax
	jle	.LBB81_29
# BB#28:                                # %for.body.71
                                        #   in Loop: Header=BB81_27 Depth=1
	movq	Vcoding_category_table, %rdi
	movq	-24(%rbp), %rax
	movl	-160(%rbp,%rax,4), %ecx
	movl	%ecx, %esi
	callq	AREF
	movq	globals+264, %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, globals+264
	jmp	.LBB81_27
.LBB81_29:                              # %for.end.76
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	addq	$272, %rsp              # imm = 0x110
	popq	%rbp
	retq
.Lfunc_end81:
	.size	Fset_coding_system_priority, .Lfunc_end81-Fset_coding_system_priority
	.cfi_endproc

	.globl	Fcoding_system_priority_list
	.align	16, 0x90
	.type	Fcoding_system_priority_list,@function
Fcoding_system_priority_list:           # @Fcoding_system_priority_list
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp247:
	.cfi_def_cfa_offset 16
.Ltmp248:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp249:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -32(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$21, -20(%rbp)
	jge	.LBB82_8
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movabsq	$coding_categories, %rax
	movslq	-20(%rbp), %rcx
	movl	coding_priorities(,%rcx,4), %edx
	movl	%edx, -36(%rbp)
	movl	-36(%rbp), %edx
	movl	%edx, %ecx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	(%rax), %rax
	movl	%eax, %edx
	movl	%edx, -40(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB82_4
# BB#3:                                 # %if.then
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_7
.LBB82_4:                               # %if.end
                                        #   in Loop: Header=BB82_1 Depth=1
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movslq	-40(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB82_6
# BB#5:                                 # %if.then.13
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	callq	AREF
	movq	%rax, -8(%rbp)
	jmp	.LBB82_9
.LBB82_6:                               # %if.end.15
                                        #   in Loop: Header=BB82_1 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	callq	AREF
	movq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, -32(%rbp)
.LBB82_7:                               # %for.inc
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_1
.LBB82_8:                               # %for.end
	movq	-32(%rbp), %rdi
	callq	Fnreverse
	movq	%rax, -8(%rbp)
.LBB82_9:                               # %return
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end82:
	.size	Fcoding_system_priority_list, .Lfunc_end82-Fcoding_system_priority_list
	.cfi_endproc

	.globl	Fdefine_coding_system_internal
	.align	16, 0x90
	.type	Fdefine_coding_system_internal,@function
Fdefine_coding_system_internal:         # @Fdefine_coding_system_internal
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp250:
	.cfi_def_cfa_offset 16
.Ltmp251:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp252:
	.cfi_def_cfa_register %rbp
	subq	$1200, %rsp             # imm = 0x4B0
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	$0, -116(%rbp)
	cmpq	$13, -16(%rbp)
	jge	.LBB83_2
# BB#1:                                 # %if.then
	jmp	.LBB83_324
.LBB83_2:                               # %if.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$122, %edi
                                        # kill: RDI<def> EDI<kill>
	movq	%rax, %rsi
	callq	Fmake_vector
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_4
# BB#3:                                 # %cond.true
	jmp	.LBB83_5
.LBB83_4:                               # %cond.false
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -376(%rbp)        # 8-byte Spill
.LBB83_5:                               # %cond.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-32(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	8(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB83_11
# BB#6:                                 # %if.then.7
	movq	-112(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB83_7
	jmp	.LBB83_9
.LBB83_7:                               # %land.lhs.true
	movq	-112(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB83_9
# BB#8:                                 # %cond.true.12
	jmp	.LBB83_10
.LBB83_9:                               # %cond.false.13
	movl	$260, %edi              # imm = 0x104
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -384(%rbp)        # 8-byte Spill
.LBB83_10:                              # %cond.end.15
	jmp	.LBB83_11
.LBB83_11:                              # %if.end.16
	movl	$2, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	16(%rdx), %rdx
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$0, %eax
	jne	.LBB83_13
# BB#12:                                # %cond.true.22
	jmp	.LBB83_14
.LBB83_13:                              # %cond.false.23
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -392(%rbp)        # 8-byte Spill
.LBB83_14:                              # %cond.end.25
	movl	$3, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-72(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$0, %eax
	jne	.LBB83_33
# BB#15:                                # %if.then.31
	movl	$580, %edi              # imm = 0x244
	movq	-80(%rbp), %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-400(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_19
# BB#16:                                # %if.then.35
	movl	$580, %edi              # imm = 0x244
	movq	-72(%rbp), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-408(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_18
# BB#17:                                # %if.then.39
	movabsq	$.L.str.7, %rdi
	movb	$0, %al
	callq	error
.LBB83_18:                              # %if.end.40
	movq	Viso_2022_charset_list, %rax
	movq	%rax, -80(%rbp)
	jmp	.LBB83_24
.LBB83_19:                              # %if.else
	movl	$361, %edi              # imm = 0x169
	movq	-80(%rbp), %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-416(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_23
# BB#20:                                # %if.then.44
	movl	$361, %edi              # imm = 0x169
	movq	-72(%rbp), %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-424(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_22
# BB#21:                                # %if.then.48
	movabsq	$.L.str.7, %rdi
	movb	$0, %al
	callq	error
.LBB83_22:                              # %if.end.49
	movq	Vemacs_mule_charset_list, %rax
	movq	%rax, -80(%rbp)
.LBB83_23:                              # %if.end.50
	jmp	.LBB83_24
.LBB83_24:                              # %if.end.51
	movq	-80(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB83_25:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_32
# BB#26:                                # %for.body
                                        #   in Loop: Header=BB83_25 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$2147483646, %eax       # imm = 0x7FFFFFFE
	movl	%eax, %edx
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rsi
	callq	RANGED_INTEGERP
	testb	$1, %al
	jne	.LBB83_28
# BB#27:                                # %if.then.57
	movabsq	$.L.str.7, %rdi
	movb	$0, %al
	callq	error
.LBB83_28:                              # %if.end.58
                                        #   in Loop: Header=BB83_25 Depth=1
	movslq	-116(%rbp), %rax
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jge	.LBB83_30
# BB#29:                                # %if.then.65
                                        #   in Loop: Header=BB83_25 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -116(%rbp)
.LBB83_30:                              # %if.end.70
                                        #   in Loop: Header=BB83_25 Depth=1
	jmp	.LBB83_31
.LBB83_31:                              # %for.inc
                                        #   in Loop: Header=BB83_25 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB83_25
.LBB83_32:                              # %for.end
	jmp	.LBB83_53
.LBB83_33:                              # %if.else.72
	movq	-80(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB83_34:                              # %for.cond.74
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_52
# BB#35:                                # %for.body.79
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
# BB#36:                                # %do.body
                                        #   in Loop: Header=BB83_34 Depth=1
	jmp	.LBB83_37
.LBB83_37:                              # %do.body.82
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_39
# BB#38:                                # %lor.lhs.false
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	%rax, -144(%rbp)
	cmpq	$0, %rax
	jge	.LBB83_40
.LBB83_39:                              # %if.then.91
	movl	$262, %edi              # imm = 0x106
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -432(%rbp)        # 8-byte Spill
.LBB83_40:                              # %if.end.93
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-144(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -132(%rbp)
# BB#41:                                # %do.end
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	charset_table, %rax
	movslq	-132(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
# BB#42:                                # %do.end.99
                                        #   in Loop: Header=BB83_34 Depth=1
	movl	$580, %edi              # imm = 0x244
	movq	-72(%rbp), %rax
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-440(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_44
# BB#43:                                # %cond.true.103
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 92(%rax)
	jl	.LBB83_47
	jmp	.LBB83_48
.LBB83_44:                              # %cond.false.106
                                        #   in Loop: Header=BB83_34 Depth=1
	movl	$361, %edi              # imm = 0x169
	movq	-72(%rbp), %rax
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-448(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_46
# BB#45:                                # %cond.true.110
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-128(%rbp), %rax
	cmpl	$0, 100(%rax)
	jl	.LBB83_47
	jmp	.LBB83_48
.LBB83_46:                              # %cond.false.113
                                        #   in Loop: Header=BB83_34 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB83_47
	jmp	.LBB83_48
.LBB83_47:                              # %if.then.114
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-128(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.8, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_48:                              # %if.end.120
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-104(%rbp), %rdi
	movq	-128(%rbp), %rax
	movslq	(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rsi
	callq	XSETCAR
	movl	-116(%rbp), %ecx
	movq	-128(%rbp), %rax
	cmpl	(%rax), %ecx
	jge	.LBB83_50
# BB#49:                                # %if.then.125
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-128(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -116(%rbp)
.LBB83_50:                              # %if.end.127
                                        #   in Loop: Header=BB83_34 Depth=1
	jmp	.LBB83_51
.LBB83_51:                              # %for.inc.128
                                        #   in Loop: Header=BB83_34 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB83_34
.LBB83_52:                              # %for.end.132
	jmp	.LBB83_53
.LBB83_53:                              # %if.end.133
	movl	$4, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-80(%rbp), %rdx
	callq	ASET
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	callq	make_uninit_string
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	SDATA
	movl	$255, %esi
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	%rax, %rdi
	callq	memset
	movq	-80(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB83_54:                              # %for.cond.140
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_57
# BB#55:                                # %for.body.145
                                        #   in Loop: Header=BB83_54 Depth=1
	xorl	%edx, %edx
	movq	-88(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	callq	SSET
# BB#56:                                # %for.inc.149
                                        #   in Loop: Header=BB83_54 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB83_54
.LBB83_57:                              # %for.end.153
	movl	$15, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-88(%rbp), %rdx
	callq	ASET
	movl	$5, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-24(%rbp), %rdx
	movq	32(%rdx), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	40(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB83_63
# BB#58:                                # %land.lhs.true.157
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB83_63
# BB#59:                                # %if.then.162
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_61
# BB#60:                                # %cond.true.167
	jmp	.LBB83_62
.LBB83_61:                              # %cond.false.168
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -456(%rbp)        # 8-byte Spill
.LBB83_62:                              # %cond.end.170
	jmp	.LBB83_63
.LBB83_63:                              # %if.end.171
	movl	$6, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	48(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB83_69
# BB#64:                                # %land.lhs.true.174
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB83_69
# BB#65:                                # %if.then.179
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_67
# BB#66:                                # %cond.true.184
	jmp	.LBB83_68
.LBB83_67:                              # %cond.false.185
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -464(%rbp)        # 8-byte Spill
.LBB83_68:                              # %cond.end.187
	jmp	.LBB83_69
.LBB83_69:                              # %if.end.188
	movl	$7, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	56(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$0, %eax
	jne	.LBB83_71
# BB#70:                                # %cond.true.194
	jmp	.LBB83_72
.LBB83_71:                              # %cond.false.195
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -472(%rbp)        # 8-byte Spill
.LBB83_72:                              # %cond.end.197
	movl	$9, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	64(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$0, %eax
	jne	.LBB83_74
# BB#73:                                # %cond.true.203
	jmp	.LBB83_75
.LBB83_74:                              # %cond.false.204
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -480(%rbp)        # 8-byte Spill
.LBB83_75:                              # %cond.end.206
	movl	$10, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	xorl	%edi, %edi
	movq	-24(%rbp), %rdx
	movq	72(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdx
	movq	%rdx, -488(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-488(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB83_77
# BB#76:                                # %if.then.211
	movl	$11, %eax
	movl	%eax, %esi
	movl	$130, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rdi
	callq	ASET
	jmp	.LBB83_82
.LBB83_77:                              # %if.else.212
	movq	-112(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB83_78
	jmp	.LBB83_80
.LBB83_78:                              # %land.lhs.true.215
	movq	-112(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB83_80
# BB#79:                                # %cond.true.219
	jmp	.LBB83_81
.LBB83_80:                              # %cond.false.220
	movl	$260, %edi              # imm = 0x104
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -496(%rbp)        # 8-byte Spill
.LBB83_81:                              # %cond.end.222
	movl	$11, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
.LBB83_82:                              # %if.end.223
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-504(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_84
# BB#83:                                # %cond.true.228
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -520(%rbp)        # 8-byte Spill
	jmp	.LBB83_85
.LBB83_84:                              # %cond.false.230
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -520(%rbp)        # 8-byte Spill
.LBB83_85:                              # %cond.end.232
	movq	-520(%rbp), %rax        # 8-byte Reload
	movl	$12, %ecx
	movl	%ecx, %esi
	movq	-512(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movq	-24(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	CHECK_LIST
	movl	$13, %ecx
	movl	%ecx, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movl	$261, %edi              # imm = 0x105
	movq	-72(%rbp), %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-528(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB83_115
# BB#86:                                # %if.then.237
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$1026, %edi             # imm = 0x402
                                        # kill: RDI<def> EDI<kill>
	movq	%rax, %rsi
	callq	Fmake_vector
	movq	%rax, -112(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB83_87:                              # %for.cond.240
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_91 Depth 2
                                        #       Child Loop BB83_100 Depth 3
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_114
# BB#88:                                # %for.body.245
                                        #   in Loop: Header=BB83_87 Depth=1
	movq	charset_table, %rax
	movq	-104(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movl	16(%rax), %edx
	movl	%edx, -156(%rbp)
	movl	-156(%rbp), %edx
	subl	$1, %edx
	shll	$2, %edx
	movl	%edx, -160(%rbp)
	movq	-152(%rbp), %rax
	movb	88(%rax), %sil
	shrb	$2, %sil
	andb	$1, %sil
	testb	$1, %sil
	je	.LBB83_90
# BB#89:                                # %if.then.253
                                        #   in Loop: Header=BB83_87 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-536(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_90:                              # %if.end.255
                                        #   in Loop: Header=BB83_87 Depth=1
	movslq	-160(%rbp), %rax
	movq	-152(%rbp), %rcx
	movl	20(%rcx,%rax,4), %edx
	movl	%edx, -120(%rbp)
.LBB83_91:                              # %for.cond.257
                                        #   Parent Loop BB83_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_100 Depth 3
	movl	-120(%rbp), %eax
	movl	-160(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rdx
	movq	-152(%rbp), %rsi
	cmpl	20(%rsi,%rdx,4), %eax
	jg	.LBB83_112
# BB#92:                                # %for.body.264
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-112(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-544(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB83_94
# BB#93:                                # %if.then.272
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB83_110
.LBB83_94:                              # %if.else.275
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-168(%rbp), %rdi
	callq	NUMBERP
	testb	$1, %al
	jne	.LBB83_95
	jmp	.LBB83_99
.LBB83_95:                              # %if.then.277
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	charset_table, %rax
	movq	-168(%rbp), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	16(%rax), %edx
	movl	%edx, -180(%rbp)
	movl	-156(%rbp), %edx
	cmpl	-180(%rbp), %edx
	jge	.LBB83_97
# BB#96:                                # %if.then.283
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movq	-168(%rbp), %rsi
	callq	list2
	movq	%rax, -168(%rbp)
	jmp	.LBB83_98
.LBB83_97:                              # %if.else.287
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-168(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	callq	list2
	movq	%rax, -168(%rbp)
.LBB83_98:                              # %if.end.291
                                        #   in Loop: Header=BB83_91 Depth=2
	jmp	.LBB83_109
.LBB83_99:                              # %if.else.292
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-168(%rbp), %rax
	movq	%rax, -176(%rbp)
.LBB83_100:                             # %for.cond.293
                                        #   Parent Loop BB83_87 Depth=1
                                        #     Parent Loop BB83_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	-176(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_105
# BB#101:                               # %for.body.298
                                        #   in Loop: Header=BB83_100 Depth=3
	movq	charset_table, %rax
	movq	-176(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	16(%rax), %edx
	movl	%edx, -180(%rbp)
	movl	-156(%rbp), %edx
	cmpl	-180(%rbp), %edx
	jge	.LBB83_103
# BB#102:                               # %if.then.306
                                        #   in Loop: Header=BB83_91 Depth=2
	jmp	.LBB83_105
.LBB83_103:                             # %if.end.307
                                        #   in Loop: Header=BB83_100 Depth=3
	jmp	.LBB83_104
.LBB83_104:                             # %for.inc.308
                                        #   in Loop: Header=BB83_100 Depth=3
	movq	-176(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	jmp	.LBB83_100
.LBB83_105:                             # %for.end.312
                                        #   in Loop: Header=BB83_91 Depth=2
	xorl	%edi, %edi
	movq	-176(%rbp), %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-552(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_107
# BB#106:                               # %if.then.316
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-168(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rdi, -560(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	list1
	movq	-560(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	nconc2
	movq	%rax, -168(%rbp)
	jmp	.LBB83_108
.LBB83_107:                             # %if.else.321
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-176(%rbp), %rdi
	movq	-176(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	-176(%rbp), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rsi
	movq	%rdi, -568(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	Fcons
	movq	-568(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCDR
	movq	-176(%rbp), %rdi
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rsi
	callq	XSETCAR
.LBB83_108:                             # %if.end.330
                                        #   in Loop: Header=BB83_91 Depth=2
	jmp	.LBB83_109
.LBB83_109:                             # %if.end.331
                                        #   in Loop: Header=BB83_91 Depth=2
	jmp	.LBB83_110
.LBB83_110:                             # %if.end.332
                                        #   in Loop: Header=BB83_91 Depth=2
	movq	-112(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	movq	-168(%rbp), %rdx
	callq	ASET
# BB#111:                               # %for.inc.334
                                        #   in Loop: Header=BB83_91 Depth=2
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB83_91
.LBB83_112:                             # %for.end.335
                                        #   in Loop: Header=BB83_87 Depth=1
	jmp	.LBB83_113
.LBB83_113:                             # %for.inc.336
                                        #   in Loop: Header=BB83_87 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB83_87
.LBB83_114:                             # %for.end.340
	movl	$16, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movl	$14, -92(%rbp)
	jmp	.LBB83_299
.LBB83_115:                             # %if.else.341
	movl	$246, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-576(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_150
# BB#116:                               # %if.then.345
	cmpq	$16, -16(%rbp)
	jge	.LBB83_118
# BB#117:                               # %if.then.349
	jmp	.LBB83_324
.LBB83_118:                             # %if.end.350
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rax, -112(%rbp)
# BB#119:                               # %do.body.352
	movq	-112(%rbp), %rdi
	callq	Fccl_program_p
	xorl	%edi, %edi
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-584(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_121
# BB#120:                               # %if.then.357
	movl	$248, %edi
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -592(%rbp)        # 8-byte Spill
.LBB83_121:                             # %if.end.359
	jmp	.LBB83_122
.LBB83_122:                             # %do.end.360
	movq	-112(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB83_123
	jmp	.LBB83_124
.LBB83_123:                             # %if.then.362
	movq	-112(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -112(%rbp)
.LBB83_124:                             # %if.end.364
	movl	$17, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	112(%rdx), %rdx
	movq	%rdx, -112(%rbp)
# BB#125:                               # %do.body.366
	movq	-112(%rbp), %rdi
	callq	Fccl_program_p
	xorl	%edi, %edi
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-600(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_127
# BB#126:                               # %if.then.371
	movl	$248, %edi
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -608(%rbp)        # 8-byte Spill
.LBB83_127:                             # %if.end.373
	jmp	.LBB83_128
.LBB83_128:                             # %do.end.374
	movq	-112(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB83_129
	jmp	.LBB83_130
.LBB83_129:                             # %if.then.376
	movq	-112(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -112(%rbp)
.LBB83_130:                             # %if.end.378
	movl	$18, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-112(%rbp), %rdx
	callq	ASET
	movl	$1026, %eax             # imm = 0x402
	movl	%eax, %edi
	movl	$2, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdx
	movq	120(%rdx), %rdx
	movq	%rdx, -112(%rbp)
	callq	Fmake_string
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB83_131:                             # %for.cond.381
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_144 Depth 2
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_149
# BB#132:                               # %for.body.386
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB83_137
# BB#133:                               # %if.then.396
                                        #   in Loop: Header=BB83_131 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-112(%rbp), %rdx
	sarq	$2, %rdx
	cmpq	%rdx, %rcx
	jg	.LBB83_135
# BB#134:                               # %land.lhs.true.400
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-112(%rbp), %rax
	sarq	$2, %rax
	cmpq	$255, %rax
	jle	.LBB83_136
.LBB83_135:                             # %if.then.404
	movl	$2, %eax
	movl	%eax, %esi
	movl	$1022, %eax             # imm = 0x3FE
	movl	%eax, %edx
	movq	-112(%rbp), %rdi
	callq	args_out_of_range_3
.LBB83_136:                             # %if.end.405
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-112(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -200(%rbp)
	movl	%ecx, -196(%rbp)
	jmp	.LBB83_143
.LBB83_137:                             # %if.else.408
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-112(%rbp), %rdi
	callq	CHECK_CONS
	movq	-112(%rbp), %rdi
	callq	CHECK_NATNUM_CAR
	movq	-112(%rbp), %rdi
	callq	CHECK_NUMBER_CDR
	movq	-112(%rbp), %rdi
	subq	$3, %rdi
	movq	(%rdi), %rdi
	sarq	$2, %rdi
	cmpq	$255, %rdi
	jle	.LBB83_139
# BB#138:                               # %if.then.414
	movl	$2, %eax
	movl	%eax, %esi
	movl	$1022, %eax             # imm = 0x3FE
	movl	%eax, %edx
	movq	-112(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rdi
	callq	args_out_of_range_3
.LBB83_139:                             # %if.end.417
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -196(%rbp)
	movslq	-196(%rbp), %rax
	movq	-112(%rbp), %rdx
	subq	$3, %rdx
	movq	8(%rdx), %rdx
	sarq	$2, %rdx
	cmpq	%rdx, %rax
	jg	.LBB83_141
# BB#140:                               # %land.lhs.true.429
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	cmpq	$255, %rax
	jle	.LBB83_142
.LBB83_141:                             # %if.then.436
	movl	$1022, %eax             # imm = 0x3FE
	movl	%eax, %edx
	movq	-112(%rbp), %rcx
	subq	$3, %rcx
	movq	8(%rcx), %rdi
	movq	-112(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rsi
	callq	args_out_of_range_3
.LBB83_142:                             # %if.end.442
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -200(%rbp)
.LBB83_143:                             # %if.end.448
                                        #   in Loop: Header=BB83_131 Depth=1
	movl	-196(%rbp), %eax
	movl	%eax, -120(%rbp)
.LBB83_144:                             # %for.cond.449
                                        #   Parent Loop BB83_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-120(%rbp), %eax
	cmpl	-200(%rbp), %eax
	jg	.LBB83_147
# BB#145:                               # %for.body.452
                                        #   in Loop: Header=BB83_144 Depth=2
	movl	$1, %edx
	movq	-192(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	callq	SSET
# BB#146:                               # %for.inc.454
                                        #   in Loop: Header=BB83_144 Depth=2
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB83_144
.LBB83_147:                             # %for.end.456
                                        #   in Loop: Header=BB83_131 Depth=1
	jmp	.LBB83_148
.LBB83_148:                             # %for.inc.457
                                        #   in Loop: Header=BB83_131 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB83_131
.LBB83_149:                             # %for.end.461
	movl	$19, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-192(%rbp), %rdx
	callq	ASET
	movl	$17, -92(%rbp)
	jmp	.LBB83_298
.LBB83_150:                             # %if.else.462
	movl	$986, %edi              # imm = 0x3DA
	movq	-72(%rbp), %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-616(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_182
# BB#151:                               # %if.then.466
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-624(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	cmpq	$15, -16(%rbp)
	jge	.LBB83_153
# BB#152:                               # %if.then.472
	jmp	.LBB83_324
.LBB83_153:                             # %if.end.473
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-632(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_166
# BB#154:                               # %land.lhs.true.478
	movl	$901, %edi              # imm = 0x385
	movq	-208(%rbp), %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-640(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_166
# BB#155:                               # %if.then.482
	movq	-208(%rbp), %rdi
	callq	CHECK_CONS
	movq	-208(%rbp), %rdi
	subq	$3, %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -112(%rbp)
# BB#156:                               # %do.body.485
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB83_159
# BB#157:                               # %land.lhs.true.490
	movq	-112(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-648(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_159
# BB#158:                               # %if.then.495
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -656(%rbp)        # 8-byte Spill
.LBB83_159:                             # %if.end.497
	jmp	.LBB83_160
.LBB83_160:                             # %do.end.498
	movq	-208(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
# BB#161:                               # %do.body.502
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB83_164
# BB#162:                               # %land.lhs.true.507
	movq	-112(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-664(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_164
# BB#163:                               # %if.then.512
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -672(%rbp)        # 8-byte Spill
.LBB83_164:                             # %if.end.514
	jmp	.LBB83_165
.LBB83_165:                             # %do.end.515
	jmp	.LBB83_166
.LBB83_166:                             # %if.end.516
	movl	$24, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-208(%rbp), %rdx
	callq	ASET
	movq	-24(%rbp), %rdx
	movq	112(%rdx), %rdx
	movq	%rdx, -216(%rbp)
	movq	-216(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$0, %eax
	jne	.LBB83_168
# BB#167:                               # %cond.true.522
	jmp	.LBB83_169
.LBB83_168:                             # %cond.false.523
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -680(%rbp)        # 8-byte Spill
.LBB83_169:                             # %cond.end.525
	xorl	%edi, %edi
	movq	-216(%rbp), %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-688(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_171
# BB#170:                               # %if.then.529
	movl	$202, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -216(%rbp)
	jmp	.LBB83_175
.LBB83_171:                             # %if.else.531
	movl	$202, %edi
	movq	-216(%rbp), %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-696(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_174
# BB#172:                               # %land.lhs.true.535
	movl	$627, %edi              # imm = 0x273
	movq	-216(%rbp), %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-704(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_174
# BB#173:                               # %if.then.539
	movq	-216(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.9, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_174:                             # %if.end.542
	jmp	.LBB83_175
.LBB83_175:                             # %if.end.543
	movl	$25, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-216(%rbp), %rdx
	callq	ASET
	movq	-208(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	cmpl	$3, %eax
	jne	.LBB83_177
# BB#176:                               # %cond.true.548
	movl	$9, %eax
	movl	%eax, -708(%rbp)        # 4-byte Spill
	jmp	.LBB83_181
.LBB83_177:                             # %cond.false.549
	xorl	%edi, %edi
	movq	-208(%rbp), %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-720(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_179
# BB#178:                               # %cond.true.553
	movl	$202, %edi
	movq	-216(%rbp), %rax
	movq	%rax, -728(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$13, %edi
	movl	$12, %ecx
	movq	-728(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -732(%rbp)        # 4-byte Spill
	jmp	.LBB83_180
.LBB83_179:                             # %cond.false.558
	movl	$202, %edi
	movq	-216(%rbp), %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$11, %edi
	movl	$10, %ecx
	movq	-744(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -732(%rbp)        # 4-byte Spill
.LBB83_180:                             # %cond.end.563
	movl	-732(%rbp), %eax        # 4-byte Reload
	movl	%eax, -708(%rbp)        # 4-byte Spill
.LBB83_181:                             # %cond.end.565
	movl	-708(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	jmp	.LBB83_297
.LBB83_182:                             # %if.else.567
	movl	$580, %edi              # imm = 0x244
	movq	-72(%rbp), %rax
	movq	%rax, -752(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-752(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_230
# BB#183:                               # %if.then.571
	cmpq	$17, -16(%rbp)
	jge	.LBB83_185
# BB#184:                               # %if.then.578
	jmp	.LBB83_324
.LBB83_185:                             # %if.end.579
	movq	-24(%rbp), %rax
	movq	104(%rax), %rdi
	callq	Fcopy_sequence
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rdi
	callq	CHECK_VECTOR
	movl	$0, -120(%rbp)
.LBB83_186:                             # %for.cond.582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -120(%rbp)
	jge	.LBB83_202
# BB#187:                               # %for.body.585
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	-224(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	callq	AREF
	xorl	%edi, %edi
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-760(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB83_199
# BB#188:                               # %if.then.591
                                        #   in Loop: Header=BB83_186 Depth=1
	jmp	.LBB83_189
.LBB83_189:                             # %do.body.594
                                        #   in Loop: Header=BB83_186 Depth=1
	jmp	.LBB83_190
.LBB83_190:                             # %do.body.597
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	-112(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_192
# BB#191:                               # %lor.lhs.false.604
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	%rax, -272(%rbp)
	cmpq	$0, %rax
	jge	.LBB83_193
.LBB83_192:                             # %if.then.609
	movl	$262, %edi              # imm = 0x106
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -768(%rbp)        # 8-byte Spill
.LBB83_193:                             # %if.end.611
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-272(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -260(%rbp)
# BB#194:                               # %do.end.617
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	charset_table, %rax
	movslq	-260(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -256(%rbp)
# BB#195:                               # %do.end.620
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	-224(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	movq	-256(%rbp), %rax
	movslq	(%rax), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rdx
	callq	ASET
	cmpl	$0, -120(%rbp)
	jne	.LBB83_198
# BB#196:                               # %land.lhs.true.628
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	-256(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB83_198
# BB#197:                               # %if.then.635
                                        #   in Loop: Header=BB83_186 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-776(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_198:                             # %if.end.637
                                        #   in Loop: Header=BB83_186 Depth=1
	jmp	.LBB83_200
.LBB83_199:                             # %if.else.638
                                        #   in Loop: Header=BB83_186 Depth=1
	movq	$-2, %rdx
	movq	-224(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	callq	ASET
.LBB83_200:                             # %if.end.640
                                        #   in Loop: Header=BB83_186 Depth=1
	jmp	.LBB83_201
.LBB83_201:                             # %for.inc.641
                                        #   in Loop: Header=BB83_186 Depth=1
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB83_186
.LBB83_202:                             # %for.end.643
	movq	-24(%rbp), %rax
	movq	112(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rdi
	callq	CHECK_CONS
	movq	-232(%rbp), %rdi
	callq	CHECK_NUMBER_CAR
	movq	-232(%rbp), %rdi
	callq	CHECK_NUMBER_CDR
	movq	-24(%rbp), %rax
	movq	120(%rax), %rdi
	callq	Fcopy_sequence
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -104(%rbp)
.LBB83_203:                             # %for.cond.647
                                        # =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_213
# BB#204:                               # %for.body.652
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rdi
	callq	CHECK_CONS
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
# BB#205:                               # %do.body.660
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	-288(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_207
# BB#206:                               # %lor.lhs.false.667
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-288(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	movq	%rax, -296(%rbp)
	cmpq	$0, %rax
	jge	.LBB83_208
.LBB83_207:                             # %if.then.672
	movl	$262, %edi              # imm = 0x106
	callq	builtin_lisp_symbol
	movq	-288(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -784(%rbp)        # 8-byte Spill
.LBB83_208:                             # %if.end.674
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-296(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -276(%rbp)
# BB#209:                               # %do.end.680
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	-112(%rbp), %rdi
	callq	CHECK_NATNUM_CDR
	movq	-112(%rbp), %rdi
	subq	$3, %rdi
	movq	8(%rdi), %rdi
	sarq	$2, %rdi
	cmpq	$4, %rdi
	jl	.LBB83_211
# BB#210:                               # %if.then.687
	movabsq	$.L.str.10, %rdi
	movq	-112(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	sarq	$2, %rax
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_211:                             # %if.end.692
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	-112(%rbp), %rdi
	movslq	-276(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, %rsi
	callq	XSETCAR
# BB#212:                               # %for.inc.696
                                        #   in Loop: Header=BB83_203 Depth=1
	movq	-104(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	jmp	.LBB83_203
.LBB83_213:                             # %for.end.700
	movq	-24(%rbp), %rax
	movq	128(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rdi
	callq	CHECK_NATNUM
	movl	$580, %edi              # imm = 0x244
	movq	-248(%rbp), %rax
	sarq	$2, %rax
	andq	$2147483647, %rax       # imm = 0x7FFFFFFF
	movl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -792(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-792(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB83_215
# BB#214:                               # %if.then.709
	movl	-120(%rbp), %eax
	orl	$1048576, %eax          # imm = 0x100000
	movl	%eax, -120(%rbp)
.LBB83_215:                             # %if.end.710
	movl	$20, %eax
	movl	%eax, %esi
	movslq	-120(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, -248(%rbp)
	movq	-48(%rbp), %rdi
	movq	-224(%rbp), %rdx
	callq	ASET
	movl	$21, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-232(%rbp), %rdx
	callq	ASET
	movl	$22, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-240(%rbp), %rdx
	callq	ASET
	movl	$23, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-248(%rbp), %rdx
	callq	ASET
	movq	-48(%rbp), %rdi
	callq	setup_iso_safe_charsets
	movl	-120(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	.LBB83_220
# BB#216:                               # %if.then.715
	movl	-120(%rbp), %eax
	andl	$48, %eax
	cmpl	$0, %eax
	je	.LBB83_218
# BB#217:                               # %cond.true.718
	movl	$4, %eax
	movl	%eax, -796(%rbp)        # 4-byte Spill
	jmp	.LBB83_219
.LBB83_218:                             # %cond.false.719
	movl	$580, %edi              # imm = 0x244
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	xorl	%ecx, %ecx
	movq	-808(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -796(%rbp)        # 4-byte Spill
.LBB83_219:                             # %cond.end.725
	movl	-796(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	jmp	.LBB83_226
.LBB83_220:                             # %if.else.727
	movl	$1, %eax
	movl	%eax, %esi
	movq	-224(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -300(%rbp)
	movl	-120(%rbp), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB83_223
# BB#221:                               # %lor.lhs.false.735
	movl	$580, %edi              # imm = 0x244
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -816(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-816(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_223
# BB#222:                               # %lor.lhs.false.740
	cmpl	$0, -300(%rbp)
	jge	.LBB83_224
.LBB83_223:                             # %cond.true.743
	movl	$5, %eax
	movl	%eax, -820(%rbp)        # 4-byte Spill
	jmp	.LBB83_225
.LBB83_224:                             # %cond.false.744
	movl	$3, %eax
	movl	$2, %ecx
	movq	charset_table, %rdx
	movslq	-300(%rbp), %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rdx
	cmpl	$1, 16(%rdx)
	cmovel	%ecx, %eax
	movl	%eax, -820(%rbp)        # 4-byte Spill
.LBB83_225:                             # %cond.end.751
	movl	-820(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
.LBB83_226:                             # %if.end.753
	cmpl	$2, -92(%rbp)
	je	.LBB83_229
# BB#227:                               # %land.lhs.true.756
	cmpl	$3, -92(%rbp)
	je	.LBB83_229
# BB#228:                               # %if.then.759
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_229:                             # %if.end.761
	jmp	.LBB83_296
.LBB83_230:                             # %if.else.762
	movl	$361, %edi              # imm = 0x169
	movq	-72(%rbp), %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-840(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_234
# BB#231:                               # %if.then.766
	movl	$361, %edi              # imm = 0x169
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-848(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_233
# BB#232:                               # %if.then.771
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$26, %edi
	movl	%edi, %esi
	movq	-856(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_233:                             # %if.end.773
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-864(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	$18, -92(%rbp)
	jmp	.LBB83_295
.LBB83_234:                             # %if.else.775
	movl	$861, %edi              # imm = 0x35D
	movq	-72(%rbp), %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-872(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_251
# BB#235:                               # %if.then.779
	movq	-80(%rbp), %rdi
	callq	Flength
	sarq	$2, %rax
	cmpq	$3, %rax
	je	.LBB83_238
# BB#236:                               # %land.lhs.true.786
	movq	-80(%rbp), %rdi
	callq	Flength
	sarq	$2, %rax
	cmpq	$4, %rax
	je	.LBB83_238
# BB#237:                               # %if.then.791
	movabsq	$.L.str.11, %rdi
	movb	$0, %al
	callq	error
.LBB83_238:                             # %if.end.792
	movq	charset_table, %rax
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	cmpl	$1, 16(%rax)
	je	.LBB83_240
# BB#239:                               # %if.then.800
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-312(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.12, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_240:                             # %if.end.807
	movq	-312(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB83_242
# BB#241:                               # %if.then.813
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-880(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_242:                             # %if.end.815
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	charset_table, %rax
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	cmpl	$1, 16(%rax)
	je	.LBB83_244
# BB#243:                               # %if.then.826
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-312(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.12, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_244:                             # %if.end.833
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	charset_table, %rax
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	cmpl	$2, 16(%rax)
	je	.LBB83_246
# BB#245:                               # %if.then.844
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-312(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.13, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_246:                             # %if.end.851
	xorl	%edi, %edi
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-888(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_250
# BB#247:                               # %if.then.858
	movq	charset_table, %rax
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	cmpl	$2, 16(%rax)
	je	.LBB83_249
# BB#248:                               # %if.then.866
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-312(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.13, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_249:                             # %if.end.873
	jmp	.LBB83_250
.LBB83_250:                             # %if.end.874
	movl	$15, -92(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, Vsjis_coding_system
	jmp	.LBB83_294
.LBB83_251:                             # %if.else.875
	movl	$203, %edi
	movq	-72(%rbp), %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-896(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_261
# BB#252:                               # %if.then.879
	movq	-80(%rbp), %rdi
	callq	Flength
	sarq	$2, %rax
	cmpq	$2, %rax
	je	.LBB83_254
# BB#253:                               # %if.then.886
	movabsq	$.L.str.14, %rdi
	movb	$0, %al
	callq	error
.LBB83_254:                             # %if.end.887
	movq	charset_table, %rax
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rax
	cmpl	$1, 16(%rax)
	je	.LBB83_256
# BB#255:                               # %if.then.895
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-320(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.12, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_256:                             # %if.end.902
	movq	-320(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$2, %cl
	andb	$1, %cl
	testb	$1, %cl
	je	.LBB83_258
# BB#257:                               # %if.then.908
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-904(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_258:                             # %if.end.910
	movq	-80(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	charset_table, %rax
	movq	-80(%rbp), %rcx
	subq	$3, %rcx
	movq	(%rcx), %rcx
	sarq	$2, %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rax
	cmpl	$2, 16(%rax)
	je	.LBB83_260
# BB#259:                               # %if.then.921
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-320(%rbp), %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.13, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_260:                             # %if.end.928
	movl	$16, -92(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, Vbig5_coding_system
	jmp	.LBB83_293
.LBB83_261:                             # %if.else.929
	movl	$788, %edi              # imm = 0x314
	movq	-72(%rbp), %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-912(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_263
# BB#262:                               # %if.then.933
	movl	$901, %edi              # imm = 0x385
	movl	$19, -92(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-920(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	jmp	.LBB83_292
.LBB83_263:                             # %if.else.935
	movl	$988, %edi              # imm = 0x3DC
	movq	-72(%rbp), %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-928(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_285
# BB#264:                               # %if.then.939
	cmpq	$14, -16(%rbp)
	jge	.LBB83_266
# BB#265:                               # %if.then.944
	jmp	.LBB83_324
.LBB83_266:                             # %if.end.945
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, -936(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-936(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_279
# BB#267:                               # %land.lhs.true.950
	movl	$901, %edi              # imm = 0x385
	movq	-328(%rbp), %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-944(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_279
# BB#268:                               # %if.then.954
	movq	-328(%rbp), %rdi
	callq	CHECK_CONS
	movq	-328(%rbp), %rdi
	subq	$3, %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -112(%rbp)
# BB#269:                               # %do.body.957
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB83_272
# BB#270:                               # %land.lhs.true.962
	movq	-112(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -952(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-952(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_272
# BB#271:                               # %if.then.967
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -960(%rbp)        # 8-byte Spill
.LBB83_272:                             # %if.end.969
	jmp	.LBB83_273
.LBB83_273:                             # %do.end.970
	movq	-328(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
# BB#274:                               # %do.body.974
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB83_277
# BB#275:                               # %land.lhs.true.979
	movq	-112(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	%rax, -968(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-968(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_277
# BB#276:                               # %if.then.984
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -976(%rbp)        # 8-byte Spill
.LBB83_277:                             # %if.end.986
	jmp	.LBB83_278
.LBB83_278:                             # %do.end.987
	jmp	.LBB83_279
.LBB83_279:                             # %if.end.988
	movl	$24, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-328(%rbp), %rdx
	callq	ASET
	xorl	%edi, %edi
	movq	-328(%rbp), %rdx
	movq	%rdx, -984(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-984(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB83_281
# BB#280:                               # %if.then.992
	movl	$901, %edi              # imm = 0x385
	movq	-48(%rbp), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-992(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
.LBB83_281:                             # %if.end.994
	movq	-328(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB83_283
# BB#282:                               # %cond.true.999
	movl	$6, %eax
	movl	%eax, -996(%rbp)        # 4-byte Spill
	jmp	.LBB83_284
.LBB83_283:                             # %cond.false.1000
	xorl	%edi, %edi
	movq	-328(%rbp), %rax
	movq	%rax, -1008(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$8, %edi
	movl	$7, %ecx
	movq	-1008(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -996(%rbp)        # 4-byte Spill
.LBB83_284:                             # %cond.end.1005
	movl	-996(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	jmp	.LBB83_291
.LBB83_285:                             # %if.else.1007
	movl	$958, %edi              # imm = 0x3BE
	movq	-72(%rbp), %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1016(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_289
# BB#286:                               # %if.then.1011
	cmpq	$16, -16(%rbp)
	jge	.LBB83_288
# BB#287:                               # %if.then.1014
	jmp	.LBB83_324
.LBB83_288:                             # %if.end.1015
	movl	$27, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movq	104(%rcx), %rdx
	callq	ASET
	movl	$28, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movq	112(%rcx), %rdx
	callq	ASET
	movl	$29, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movq	120(%rcx), %rdx
	callq	ASET
	movl	$20, -92(%rbp)
	jmp	.LBB83_290
.LBB83_289:                             # %if.else.1019
	movq	-72(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movabsq	$.L.str.15, %rdi
	movq	%rax, %rsi
	movb	$0, %al
	callq	error
.LBB83_290:                             # %if.end.1022
	jmp	.LBB83_291
.LBB83_291:                             # %if.end.1023
	jmp	.LBB83_292
.LBB83_292:                             # %if.end.1024
	jmp	.LBB83_293
.LBB83_293:                             # %if.end.1025
	jmp	.LBB83_294
.LBB83_294:                             # %if.end.1026
	jmp	.LBB83_295
.LBB83_295:                             # %if.end.1027
	jmp	.LBB83_296
.LBB83_296:                             # %if.end.1028
	jmp	.LBB83_297
.LBB83_297:                             # %if.end.1029
	jmp	.LBB83_298
.LBB83_298:                             # %if.end.1030
	jmp	.LBB83_299
.LBB83_299:                             # %if.end.1031
	movl	$14, %eax
	movl	%eax, %esi
	movq	-48(%rbp), %rdi
	movl	-92(%rbp), %eax
	movl	%eax, %ecx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, %rdx
	callq	ASET
	movl	$19, %edi
	movq	-48(%rbp), %rcx
	movq	%rcx, -1024(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	Vcoding_category_table, %rdi
	movl	-92(%rbp), %r8d
	movl	%r8d, %esi
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	callq	AREF
	movl	$13, %r8d
	movl	%r8d, %esi
	movq	-48(%rbp), %rdi
	movq	%rax, -1040(%rbp)       # 8-byte Spill
	callq	AREF
	movq	-1040(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movq	-1032(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movl	$13, %r8d
	movl	%r8d, %esi
	movq	-1024(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movl	$10, %edi
	movq	-48(%rbp), %rax
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$5, %edi
	movl	%edi, %esi
	movq	-48(%rbp), %rdi
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	callq	AREF
	movl	$13, %r8d
	movl	%r8d, %esi
	movq	-48(%rbp), %rdi
	movq	%rax, -1064(%rbp)       # 8-byte Spill
	callq	AREF
	movq	-1064(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movl	$13, %r8d
	movl	%r8d, %esi
	movq	-1048(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1072(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_304
# BB#300:                               # %land.lhs.true.1050
	movl	$973, %edi              # imm = 0x3CD
	movq	-56(%rbp), %rax
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1080(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_304
# BB#301:                               # %land.lhs.true.1054
	movl	$351, %edi              # imm = 0x15F
	movq	-56(%rbp), %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1088(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_304
# BB#302:                               # %land.lhs.true.1058
	movl	$635, %edi              # imm = 0x27B
	movq	-56(%rbp), %rax
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1096(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB83_304
# BB#303:                               # %if.then.1062
	movabsq	$.L.str.16, %rdi
	movb	$0, %al
	callq	error
.LBB83_304:                             # %if.end.1063
	movq	-32(%rbp), %rdi
	callq	list1
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -1104(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1104(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB83_318
# BB#305:                               # %if.then.1068
	movq	-32(%rbp), %rdi
	callq	make_subsidiaries
	movq	%rax, -56(%rbp)
	movl	$0, -120(%rbp)
.LBB83_306:                             # %for.cond.1070
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -120(%rbp)
	jge	.LBB83_317
# BB#307:                               # %for.body.1073
                                        #   in Loop: Header=BB83_306 Depth=1
	movq	-56(%rbp), %rdi
	movslq	-120(%rbp), %rsi
	callq	AREF
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rdi
	callq	list1
	movq	%rax, -352(%rbp)
	cmpl	$0, -120(%rbp)
	jne	.LBB83_309
# BB#308:                               # %cond.true.1083
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movq	%rax, -1112(%rbp)       # 8-byte Spill
	jmp	.LBB83_313
.LBB83_309:                             # %cond.false.1085
                                        #   in Loop: Header=BB83_306 Depth=1
	cmpl	$1, -120(%rbp)
	jne	.LBB83_311
# BB#310:                               # %cond.true.1088
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	$351, %edi              # imm = 0x15F
	callq	builtin_lisp_symbol
	movq	%rax, -1120(%rbp)       # 8-byte Spill
	jmp	.LBB83_312
.LBB83_311:                             # %cond.false.1090
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	$635, %edi              # imm = 0x27B
	callq	builtin_lisp_symbol
	movq	%rax, -1120(%rbp)       # 8-byte Spill
.LBB83_312:                             # %cond.end.1092
                                        #   in Loop: Header=BB83_306 Depth=1
	movq	-1120(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1112(%rbp)       # 8-byte Spill
.LBB83_313:                             # %cond.end.1094
                                        #   in Loop: Header=BB83_306 Depth=1
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movl	$3, %ecx
	movl	%ecx, %edi
	movq	%rax, -360(%rbp)
	callq	make_uninit_vector
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -336(%rbp)
	movq	-336(%rbp), %rdi
	movq	-48(%rbp), %rdx
	callq	ASET
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	-336(%rbp), %rdi
	movq	-352(%rbp), %rdx
	callq	ASET
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	-336(%rbp), %rdi
	movq	-360(%rbp), %rdx
	callq	ASET
	movq	-344(%rbp), %rdi
	movq	-336(%rbp), %rsi
	movq	Vcoding_system_hash_table, %rdx
	callq	Fputhash
	movq	-344(%rbp), %rdi
	movq	globals+296, %rsi
	movq	%rax, -1128(%rbp)       # 8-byte Spill
	callq	Fcons
	movq	%rax, globals+296
	movq	-344(%rbp), %rdi
	callq	Fsymbol_name
	movq	globals+272, %rsi
	movq	%rax, %rdi
	callq	Fassoc
	xorl	%edi, %edi
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -1136(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1136(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB83_315
# BB#314:                               # %if.then.1104
                                        #   in Loop: Header=BB83_306 Depth=1
	movq	-344(%rbp), %rdi
	callq	Fsymbol_name
	xorl	%edi, %edi
	movq	%rax, -1144(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movq	globals+272, %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, globals+272
.LBB83_315:                             # %if.end.1109
                                        #   in Loop: Header=BB83_306 Depth=1
	jmp	.LBB83_316
.LBB83_316:                             # %for.inc.1110
                                        #   in Loop: Header=BB83_306 Depth=1
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB83_306
.LBB83_317:                             # %for.end.1112
	jmp	.LBB83_318
.LBB83_318:                             # %if.end.1113
	movl	$3, %eax
	movl	%eax, %edi
	callq	make_uninit_vector
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rdx
	callq	ASET
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	-40(%rbp), %rdi
	movq	-64(%rbp), %rdx
	callq	ASET
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	-40(%rbp), %rdi
	movq	-56(%rbp), %rdx
	callq	ASET
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	Vcoding_system_hash_table, %rdx
	callq	Fputhash
	movq	-32(%rbp), %rdi
	movq	globals+296, %rsi
	movq	%rax, -1152(%rbp)       # 8-byte Spill
	callq	Fcons
	movq	%rax, globals+296
	movq	-32(%rbp), %rdi
	callq	Fsymbol_name
	movq	globals+272, %rsi
	movq	%rax, %rdi
	callq	Fassoc
	xorl	%edi, %edi
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -1160(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1160(%rbp), %rdx       # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB83_320
# BB#319:                               # %if.then.1122
	movq	-32(%rbp), %rdi
	callq	Fsymbol_name
	xorl	%edi, %edi
	movq	%rax, -1168(%rbp)       # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-1168(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movq	globals+272, %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, globals+272
.LBB83_320:                             # %if.end.1127
	movabsq	$coding_categories, %rax
	movl	-92(%rbp), %ecx
	movl	%ecx, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	%eax, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -364(%rbp)
	jl	.LBB83_322
# BB#321:                               # %lor.lhs.false.1136
	movq	-32(%rbp), %rax
	movq	Vcoding_system_hash_table, %rdi
	movq	%rax, -1176(%rbp)       # 8-byte Spill
	callq	XHASH_TABLE
	movslq	-364(%rbp), %rsi
	movq	%rax, %rdi
	callq	HASH_KEY
	movq	-1176(%rbp), %rsi       # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB83_323
.LBB83_322:                             # %if.then.1142
	movabsq	$coding_categories, %rax
	movq	-32(%rbp), %rdi
	movl	-92(%rbp), %ecx
	movl	%ecx, %edx
	imulq	$616, %rdx, %rdx        # imm = 0x268
	addq	%rdx, %rax
	movq	%rax, %rsi
	callq	setup_coding_system
.LBB83_323:                             # %if.end.1145
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB83_325
.LBB83_324:                             # %short_args
	movl	$1043, %edi             # imm = 0x413
	callq	builtin_lisp_symbol
	movabsq	$.L.str.17, %rdi
	movq	%rax, -1184(%rbp)       # 8-byte Spill
	callq	intern
	movq	-16(%rbp), %rdi
	shlq	$2, %rdi
	addq	$2, %rdi
	movq	%rdi, -1192(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1192(%rbp), %rsi       # 8-byte Reload
	callq	Fcons
	movq	-1184(%rbp), %rdi       # 8-byte Reload
	movq	%rax, %rsi
	callq	Fsignal
	movq	%rax, -8(%rbp)
.LBB83_325:                             # %return
	movq	-8(%rbp), %rax
	addq	$1200, %rsp             # imm = 0x4B0
	popq	%rbp
	retq
.Lfunc_end83:
	.size	Fdefine_coding_system_internal, .Lfunc_end83-Fdefine_coding_system_internal
	.cfi_endproc

	.align	16, 0x90
	.type	CHECK_NATNUM_CAR,@function
CHECK_NATNUM_CAR:                       # @CHECK_NATNUM_CAR
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp253:
	.cfi_def_cfa_offset 16
.Ltmp254:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp255:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	subq	$3, %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	XSETCAR
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end84:
	.size	CHECK_NATNUM_CAR, .Lfunc_end84-CHECK_NATNUM_CAR
	.cfi_endproc

	.align	16, 0x90
	.type	CHECK_NATNUM_CDR,@function
CHECK_NATNUM_CDR:                       # @CHECK_NATNUM_CDR
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp256:
	.cfi_def_cfa_offset 16
.Ltmp257:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp258:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	subq	$3, %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHECK_NATNUM
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	XSETCDR
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end85:
	.size	CHECK_NATNUM_CDR, .Lfunc_end85-CHECK_NATNUM_CDR
	.cfi_endproc

	.align	16, 0x90
	.type	make_subsidiaries,@function
make_subsidiaries:                      # @make_subsidiaries
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp259:
	.cfi_def_cfa_offset 16
.Ltmp260:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp261:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SBYTES
	movq	%rax, -24(%rbp)
	movq	$16384, -32(%rbp)       # imm = 0x4000
	callq	SPECPDL_INDEX
	movq	%rax, -40(%rbp)
	movb	$0, -41(%rbp)
	movq	-24(%rbp), %rax
	addq	$6, %rax
	cmpq	-32(%rbp), %rax
	jg	.LBB86_2
# BB#1:                                 # %cond.true
	movq	-24(%rbp), %rax
	addq	$6, %rax
	movq	-32(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$21, %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movb	$1, -41(%rbp)
	movq	-24(%rbp), %rax
	addq	$6, %rax
	movq	%rax, %rdi
	callq	record_xmalloc
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB86_3:                               # %cond.end
	movq	-72(%rbp), %rax         # 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	%rdi, -80(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	SYMBOL_NAME
	movq	%rax, %rdi
	callq	SDATA
	movl	$3, %ecx
	movl	%ecx, %edi
	movq	-24(%rbp), %rdx
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rdi, -88(%rbp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, %rsi
	callq	memcpy
	movq	-88(%rbp), %rdi         # 8-byte Reload
	callq	make_uninit_vector
	movq	%rax, -16(%rbp)
	movl	$0, -60(%rbp)
.LBB86_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -60(%rbp)
	jge	.LBB86_7
# BB#5:                                 # %for.body
                                        #   in Loop: Header=BB86_4 Depth=1
	movq	-56(%rbp), %rax
	addq	-24(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	suffixes(,%rcx,8), %rsi
	movq	%rax, %rdi
	callq	strcpy
	movq	-16(%rbp), %rdi
	movslq	-60(%rbp), %rsi
	movq	-56(%rbp), %rcx
	movq	%rdi, -96(%rbp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	callq	intern
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
# BB#6:                                 # %for.inc
                                        #   in Loop: Header=BB86_4 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB86_4
.LBB86_7:                               # %for.end
	jmp	.LBB86_8
.LBB86_8:                               # %do.body
	testb	$1, -41(%rbp)
	je	.LBB86_10
# BB#9:                                 # %if.then
	xorl	%edi, %edi
	movb	$0, -41(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	unbind_to
	movq	%rax, -128(%rbp)        # 8-byte Spill
.LBB86_10:                              # %if.end
	jmp	.LBB86_11
.LBB86_11:                              # %do.end
	movq	-16(%rbp), %rax
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end86:
	.size	make_subsidiaries, .Lfunc_end86-make_subsidiaries
	.cfi_endproc

	.globl	Fcoding_system_put
	.align	16, 0x90
	.type	Fcoding_system_put,@function
Fcoding_system_put:                     # @Fcoding_system_put
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp262:
	.cfi_def_cfa_offset 16
.Ltmp263:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp264:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
# BB#1:                                 # %do.body
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB87_3
# BB#2:                                 # %if.then
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -32(%rbp)
.LBB87_3:                               # %if.end
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_5
# BB#4:                                 # %if.then.8
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB87_5:                               # %if.end.10
	jmp	.LBB87_6
.LBB87_6:                               # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	AREF
	movl	$85, %edi
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB87_14
# BB#7:                                 # %if.then.14
	movq	-24(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB87_13
# BB#8:                                 # %if.then.16
	movq	-24(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB87_9
	jmp	.LBB87_11
.LBB87_9:                               # %land.lhs.true
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB87_11
# BB#10:                                # %cond.true
	jmp	.LBB87_12
.LBB87_11:                              # %cond.false
	movl	$260, %edi              # imm = 0x104
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB87_12:                              # %cond.end
	jmp	.LBB87_13
.LBB87_13:                              # %if.end.20
	movl	$2, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	jmp	.LBB87_57
.LBB87_14:                              # %if.else
	movl	$31, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_23
# BB#15:                                # %if.then.23
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-136(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_17
# BB#16:                                # %if.then.26
	movq	$130, -24(%rbp)
	jmp	.LBB87_22
.LBB87_17:                              # %if.else.27
	movq	-24(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB87_18
	jmp	.LBB87_20
.LBB87_18:                              # %land.lhs.true.29
	movq	-24(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB87_20
# BB#19:                                # %cond.true.32
	jmp	.LBB87_21
.LBB87_20:                              # %cond.false.33
	movl	$260, %edi              # imm = 0x104
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB87_21:                              # %cond.end.35
	jmp	.LBB87_22
.LBB87_22:                              # %if.end.36
	movl	$11, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	jmp	.LBB87_56
.LBB87_23:                              # %if.else.37
	movl	$30, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-152(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_31
# BB#24:                                # %if.then.40
	movq	-24(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB87_30
# BB#25:                                # %land.lhs.true.42
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB87_30
# BB#26:                                # %if.then.45
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB87_28
# BB#27:                                # %cond.true.50
	jmp	.LBB87_29
.LBB87_28:                              # %cond.false.51
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -160(%rbp)        # 8-byte Spill
.LBB87_29:                              # %cond.end.53
	jmp	.LBB87_30
.LBB87_30:                              # %if.end.54
	movl	$6, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	jmp	.LBB87_55
.LBB87_31:                              # %if.else.55
	movl	$38, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-168(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_39
# BB#32:                                # %if.then.59
	movq	-24(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB87_38
# BB#33:                                # %land.lhs.true.61
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	je	.LBB87_38
# BB#34:                                # %if.then.66
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB87_36
# BB#35:                                # %cond.true.71
	jmp	.LBB87_37
.LBB87_36:                              # %cond.false.72
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -176(%rbp)        # 8-byte Spill
.LBB87_37:                              # %cond.end.74
	jmp	.LBB87_38
.LBB87_38:                              # %if.end.75
	movl	$7, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	jmp	.LBB87_54
.LBB87_39:                              # %if.else.76
	movl	$95, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_44
# BB#40:                                # %if.then.80
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB87_42
# BB#41:                                # %cond.true.85
	jmp	.LBB87_43
.LBB87_42:                              # %cond.false.86
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -192(%rbp)        # 8-byte Spill
.LBB87_43:                              # %cond.end.88
	movl	$9, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	jmp	.LBB87_53
.LBB87_44:                              # %if.else.89
	movl	$96, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_49
# BB#45:                                # %if.then.93
	movq	-24(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jne	.LBB87_47
# BB#46:                                # %cond.true.98
	jmp	.LBB87_48
.LBB87_47:                              # %cond.false.99
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB87_48:                              # %cond.end.101
	movl	$10, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
	jmp	.LBB87_52
.LBB87_49:                              # %if.else.102
	movl	$10, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB87_51
# BB#50:                                # %if.then.106
	movl	$5, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-24(%rbp), %rdx
	callq	ASET
.LBB87_51:                              # %if.end.107
	jmp	.LBB87_52
.LBB87_52:                              # %if.end.108
	jmp	.LBB87_53
.LBB87_53:                              # %if.end.109
	jmp	.LBB87_54
.LBB87_54:                              # %if.end.110
	jmp	.LBB87_55
.LBB87_55:                              # %if.end.111
	jmp	.LBB87_56
.LBB87_56:                              # %if.end.112
	jmp	.LBB87_57
.LBB87_57:                              # %if.end.113
	movl	$13, %eax
	movl	%eax, %esi
	movq	-40(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movq	%rdi, -224(%rbp)        # 8-byte Spill
	movq	%rcx, %rdi
	callq	AREF
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	%rax, %rdi
	callq	Fplist_put
	movl	$13, %r8d
	movl	%r8d, %esi
	movq	-224(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movq	-24(%rbp), %rax
	addq	$224, %rsp
	popq	%rbp
	retq
.Lfunc_end87:
	.size	Fcoding_system_put, .Lfunc_end87-Fcoding_system_put
	.cfi_endproc

	.globl	Fdefine_coding_system_alias
	.align	16, 0x90
	.type	Fdefine_coding_system_alias,@function
Fdefine_coding_system_alias:            # @Fdefine_coding_system_alias
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp265:
	.cfi_def_cfa_offset 16
.Ltmp266:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp267:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	andq	$7, %rsi
	movl	%esi, %eax
	cmpl	$0, %eax
	jne	.LBB88_2
# BB#1:                                 # %cond.true
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movl	$897, %edi              # imm = 0x381
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB88_3:                               # %cond.end
	jmp	.LBB88_4
.LBB88_4:                               # %do.body
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB88_6
# BB#5:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	-16(%rbp), %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -104(%rbp)        # 8-byte Spill
	movq	%rsi, -112(%rbp)        # 8-byte Spill
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-112(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -24(%rbp)
.LBB88_6:                               # %if.end
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB88_8
# BB#7:                                 # %if.then.13
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB88_8:                               # %if.end.15
	jmp	.LBB88_9
.LBB88_9:                               # %do.end
	movl	$1, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
.LBB88_10:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%edi, %edi
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-144(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	sete	%dl
	xorb	$-1, %dl
	testb	$1, %dl
	jne	.LBB88_11
	jmp	.LBB88_12
.LBB88_11:                              # %while.body
                                        #   in Loop: Header=BB88_10 Depth=1
	movq	-32(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB88_10
.LBB88_12:                              # %while.end
	movq	-32(%rbp), %rdi
	movq	-8(%rbp), %rax
	movq	%rdi, -152(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	callq	list1
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	XSETCDR
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB88_13
	jmp	.LBB88_18
.LBB88_13:                              # %if.then.26
	movq	-8(%rbp), %rdi
	callq	make_subsidiaries
	movq	%rax, -56(%rbp)
	movl	$0, -60(%rbp)
.LBB88_14:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -60(%rbp)
	jge	.LBB88_17
# BB#15:                                # %for.body
                                        #   in Loop: Header=BB88_14 Depth=1
	movq	-56(%rbp), %rdi
	movslq	-60(%rbp), %rsi
	callq	AREF
	movq	-40(%rbp), %rdi
	movslq	-60(%rbp), %rsi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	AREF
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fdefine_coding_system_alias
	movq	%rax, -168(%rbp)        # 8-byte Spill
# BB#16:                                # %for.inc
                                        #   in Loop: Header=BB88_14 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB88_14
.LBB88_17:                              # %for.end
	jmp	.LBB88_18
.LBB88_18:                              # %if.end.35
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	Vcoding_system_hash_table, %rdx
	callq	Fputhash
	movq	-8(%rbp), %rdi
	movq	globals+296, %rsi
	movq	%rax, -176(%rbp)        # 8-byte Spill
	callq	Fcons
	movq	%rax, globals+296
	movq	-8(%rbp), %rdi
	callq	Fsymbol_name
	movq	globals+272, %rsi
	movq	%rax, %rdi
	callq	Fassoc
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-184(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB88_20
# BB#19:                                # %if.then.43
	movq	-8(%rbp), %rdi
	callq	Fsymbol_name
	xorl	%edi, %edi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	movq	globals+272, %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, globals+272
.LBB88_20:                              # %if.end.48
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end88:
	.size	Fdefine_coding_system_alias, .Lfunc_end88-Fdefine_coding_system_alias
	.cfi_endproc

	.globl	Fcoding_system_base
	.align	16, 0x90
	.type	Fcoding_system_base,@function
Fcoding_system_base:                    # @Fcoding_system_base
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp268:
	.cfi_def_cfa_offset 16
.Ltmp269:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp270:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -40(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB89_2
# BB#1:                                 # %if.then
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB89_9
.LBB89_2:                               # %if.end
	jmp	.LBB89_3
.LBB89_3:                               # %do.body
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB89_5
# BB#4:                                 # %if.then.6
	movq	-16(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	-16(%rbp), %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -72(%rbp)         # 8-byte Spill
	movq	%rsi, -80(%rbp)         # 8-byte Spill
	movq	%rcx, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-80(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -24(%rbp)
.LBB89_5:                               # %if.end.10
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB89_7
# BB#6:                                 # %if.then.13
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -104(%rbp)        # 8-byte Spill
.LBB89_7:                               # %if.end.15
	jmp	.LBB89_8
.LBB89_8:                               # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-24(%rbp), %rdi
	callq	AREF
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	AREF
	movq	%rax, -8(%rbp)
.LBB89_9:                               # %return
	movq	-8(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end89:
	.size	Fcoding_system_base, .Lfunc_end89-Fcoding_system_base
	.cfi_endproc

	.globl	Fcoding_system_plist
	.align	16, 0x90
	.type	Fcoding_system_plist,@function
Fcoding_system_plist:                   # @Fcoding_system_plist
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp271:
	.cfi_def_cfa_offset 16
.Ltmp272:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp273:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -32(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB90_2
# BB#1:                                 # %if.then
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB90_2:                               # %if.end
	jmp	.LBB90_3
.LBB90_3:                               # %do.body
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -40(%rbp)         # 8-byte Spill
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB90_5
# BB#4:                                 # %if.then.6
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	movq	%rcx, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -16(%rbp)
.LBB90_5:                               # %if.end.10
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB90_7
# BB#6:                                 # %if.then.13
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -96(%rbp)         # 8-byte Spill
.LBB90_7:                               # %if.end.15
	jmp	.LBB90_8
.LBB90_8:                               # %do.end
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	movl	$13, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	AREF
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end90:
	.size	Fcoding_system_plist, .Lfunc_end90-Fcoding_system_plist
	.cfi_endproc

	.globl	Fcoding_system_aliases
	.align	16, 0x90
	.type	Fcoding_system_aliases,@function
Fcoding_system_aliases:                 # @Fcoding_system_aliases
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp274:
	.cfi_def_cfa_offset 16
.Ltmp275:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp276:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB91_2
# BB#1:                                 # %if.then
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB91_2:                               # %if.end
	jmp	.LBB91_3
.LBB91_3:                               # %do.body
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -32(%rbp)         # 8-byte Spill
	movq	%rax, -40(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-40(%rbp), %rdi         # 8-byte Reload
	movq	-32(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rdx         # 8-byte Reload
	cmpq	%rax, %rdx
	jne	.LBB91_5
# BB#4:                                 # %if.then.6
	movq	-8(%rbp), %rdi
	callq	Fcheck_coding_system
	xorl	%edi, %edi
	movq	-8(%rbp), %rcx
	movq	Vcoding_system_hash_table, %rsi
	movq	%rax, -56(%rbp)         # 8-byte Spill
	movq	%rsi, -64(%rbp)         # 8-byte Spill
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movq	%rax, -16(%rbp)
.LBB91_5:                               # %if.end.10
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB91_7
# BB#6:                                 # %if.then.13
	movl	$280, %edi              # imm = 0x118
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	wrong_type_argument
	movq	%rax, -88(%rbp)         # 8-byte Spill
.LBB91_7:                               # %if.end.15
	jmp	.LBB91_8
.LBB91_8:                               # %do.end
	movl	$1, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	AREF
	addq	$96, %rsp
	popq	%rbp
	retq
.Lfunc_end91:
	.size	Fcoding_system_aliases, .Lfunc_end91-Fcoding_system_aliases
	.cfi_endproc

	.globl	Fcoding_system_eol_type
	.align	16, 0x90
	.type	Fcoding_system_eol_type,@function
Fcoding_system_eol_type:                # @Fcoding_system_eol_type
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp277:
	.cfi_def_cfa_offset 16
.Ltmp278:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp279:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorl	%eax, %eax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -48(%rbp)         # 8-byte Spill
	movl	%eax, %edi
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB92_2
# BB#1:                                 # %if.then
	movl	$702, %edi              # imm = 0x2BE
	callq	builtin_lisp_symbol
	movq	%rax, -16(%rbp)
.LBB92_2:                               # %if.end
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jge	.LBB92_6
# BB#3:                                 # %lor.lhs.false
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-56(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB92_5
# BB#4:                                 # %land.lhs.true
	movq	-16(%rbp), %rdi
	callq	Fcoding_system_p
	xorl	%edi, %edi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB92_6
.LBB92_5:                               # %if.then.10
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB92_12
.LBB92_6:                               # %if.end.12
	xorl	%edi, %edi
	movq	-16(%rbp), %rax
	movq	Vcoding_system_hash_table, %rsi
	movq	%rsi, -72(%rbp)         # 8-byte Spill
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rdi         # 8-byte Reload
	movq	-72(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	AREF
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB92_7
	jmp	.LBB92_8
.LBB92_7:                               # %if.then.17
	movq	-32(%rbp), %rdi
	callq	Fcopy_sequence
	movq	%rax, -8(%rbp)
	jmp	.LBB92_12
.LBB92_8:                               # %if.end.19
	movl	$973, %edi              # imm = 0x3CD
	movq	-32(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB92_10
# BB#9:                                 # %cond.true
	xorl	%eax, %eax
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB92_11
.LBB92_10:                              # %cond.false
	movl	$351, %edi              # imm = 0x15F
	movq	-32(%rbp), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	$1, %ecx
	movq	-104(%rbp), %rdx        # 8-byte Reload
	cmpq	%rax, %rdx
	cmovel	%ecx, %edi
	movl	%edi, -92(%rbp)         # 4-byte Spill
.LBB92_11:                              # %cond.end
	movl	-92(%rbp), %eax         # 4-byte Reload
	movl	%eax, -36(%rbp)
	movslq	-36(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	%rcx, -8(%rbp)
.LBB92_12:                              # %return
	movq	-8(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end92:
	.size	Fcoding_system_eol_type, .Lfunc_end92-Fcoding_system_eol_type
	.cfi_endproc

	.globl	init_coding_once
	.align	16, 0x90
	.type	init_coding_once,@function
init_coding_once:                       # @init_coding_once
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp280:
	.cfi_def_cfa_offset 16
.Ltmp281:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp282:
	.cfi_def_cfa_register %rbp
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$21, -4(%rbp)
	jge	.LBB93_4
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movabsq	$coding_categories, %rax
	movslq	-4(%rbp), %rcx
	imulq	$616, %rcx, %rcx        # imm = 0x268
	addq	%rcx, %rax
	movq	$-1, (%rax)
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	movl	%edx, coding_priorities(,%rax,4)
# BB#3:                                 # %for.inc
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_4:                               # %for.end
	movl	$0, -4(%rbp)
.LBB93_5:                               # %for.cond.3
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$32, -4(%rbp)
	jge	.LBB93_8
# BB#6:                                 # %for.body.5
                                        #   in Loop: Header=BB93_5 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, iso_code_class(,%rax,4)
# BB#7:                                 # %for.inc.8
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_5
.LBB93_8:                               # %for.end.10
	movl	$33, -4(%rbp)
.LBB93_9:                               # %for.cond.11
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$127, -4(%rbp)
	jge	.LBB93_12
# BB#10:                                # %for.body.13
                                        #   in Loop: Header=BB93_9 Depth=1
	movslq	-4(%rbp), %rax
	movl	$10, iso_code_class(,%rax,4)
# BB#11:                                # %for.inc.16
                                        #   in Loop: Header=BB93_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_9
.LBB93_12:                              # %for.end.18
	movl	$128, -4(%rbp)
.LBB93_13:                              # %for.cond.19
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$160, -4(%rbp)
	jge	.LBB93_16
# BB#14:                                # %for.body.21
                                        #   in Loop: Header=BB93_13 Depth=1
	movslq	-4(%rbp), %rax
	movl	$5, iso_code_class(,%rax,4)
# BB#15:                                # %for.inc.24
                                        #   in Loop: Header=BB93_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_13
.LBB93_16:                              # %for.end.26
	movl	$161, -4(%rbp)
.LBB93_17:                              # %for.cond.27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$255, -4(%rbp)
	jge	.LBB93_20
# BB#18:                                # %for.body.29
                                        #   in Loop: Header=BB93_17 Depth=1
	movslq	-4(%rbp), %rax
	movl	$12, iso_code_class(,%rax,4)
# BB#19:                                # %for.inc.32
                                        #   in Loop: Header=BB93_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_17
.LBB93_20:                              # %for.end.34
	movl	$9, iso_code_class+508
	movl	$9, iso_code_class+128
	movl	$11, iso_code_class+1020
	movl	$11, iso_code_class+640
	movl	$1, iso_code_class+56
	movl	$2, iso_code_class+60
	movl	$3, iso_code_class+100
	movl	$4, iso_code_class+108
	movl	$6, iso_code_class+568
	movl	$7, iso_code_class+572
	movl	$8, iso_code_class+620
	movl	$0, -4(%rbp)
.LBB93_21:                              # %for.cond.35
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$256, -4(%rbp)          # imm = 0x100
	jge	.LBB93_24
# BB#22:                                # %for.body.37
                                        #   in Loop: Header=BB93_21 Depth=1
	movslq	-4(%rbp), %rax
	movb	$1, emacs_mule_bytes(,%rax)
# BB#23:                                # %for.inc.40
                                        #   in Loop: Header=BB93_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_21
.LBB93_24:                              # %for.end.42
	movb	$3, emacs_mule_bytes+154
	movb	$3, emacs_mule_bytes+155
	movb	$4, emacs_mule_bytes+156
	movb	$4, emacs_mule_bytes+157
	popq	%rbp
	retq
.Lfunc_end93:
	.size	init_coding_once, .Lfunc_end93-init_coding_once
	.cfi_endproc

	.globl	syms_of_coding
	.align	16, 0x90
	.type	syms_of_coding,@function
syms_of_coding:                         # @syms_of_coding
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp283:
	.cfi_def_cfa_offset 16
.Ltmp284:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp285:
	.cfi_def_cfa_register %rbp
	subq	$688, %rsp              # imm = 0x2B0
	movabsq	$Vcoding_system_hash_table, %rdi
	callq	staticpro
	movl	$129, %edi
	callq	builtin_lisp_symbol
	movl	$369, %edi              # imm = 0x171
	movq	%rax, -16(%rbp)
	callq	builtin_lisp_symbol
	movl	$2, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-16(%rbp), %rsi
	movq	%rax, -8(%rbp)
	callq	Fmake_hash_table
	movabsq	$Vsjis_coding_system, %rdi
	movq	%rax, Vcoding_system_hash_table
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$Vbig5_coding_system, %rdi
	movq	%rax, Vsjis_coding_system
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$Vcode_conversion_reused_workbuf, %rdi
	movq	%rax, Vbig5_coding_system
	callq	staticpro
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movabsq	$Vcode_conversion_workbuf_name, %rdi
	movq	%rax, Vcode_conversion_reused_workbuf
	callq	staticpro
	movabsq	$.L.str.18, %rdi
	callq	build_pure_c_string
	movl	$279, %edi              # imm = 0x117
	movq	%rax, Vcode_conversion_workbuf_name
	movb	$0, reused_workbuf_in_use
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fset
	movl	$553, %edi              # imm = 0x229
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$902, %edi              # imm = 0x386
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	%edi, %edx
	movq	-320(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movl	$1040, %edi             # imm = 0x410
	movq	%rax, -328(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$902, %edi              # imm = 0x386
	movq	%rax, -336(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$10, %edi
	movl	%edi, %edx
	movq	-336(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movl	$234, %edi
	movq	%rax, -344(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$902, %edi              # imm = 0x386
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$2, %edi
	movl	%edi, %edx
	movq	-352(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movl	$235, %edi
	movq	%rax, -360(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$902, %edi              # imm = 0x386
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$10, %edi
	movl	%edi, %edx
	movq	-368(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movl	$873, %edi              # imm = 0x369
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$902, %edi              # imm = 0x386
	movq	%rax, -384(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$10, %edi
	movl	%edi, %edx
	movq	-384(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movl	$720, %edi              # imm = 0x2D0
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$902, %edi              # imm = 0x386
	movq	%rax, -400(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$14, %edi
	movl	%edi, %edx
	movq	-400(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	movl	$278, %edi              # imm = 0x116
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$373, %edi              # imm = 0x175
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$278, %edi              # imm = 0x116
	movq	%rax, -424(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$372, %edi              # imm = 0x174
	movq	%rax, -432(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$1, %edi
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	-432(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	movb	$0, %al
	callq	listn
	movq	-416(%rbp), %rdi        # 8-byte Reload
	movq	-424(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movl	$278, %edi              # imm = 0x116
	movq	%rax, -440(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$374, %edi              # imm = 0x176
	movq	%rax, -448(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$.L.str.19, %rdi
	movq	%rax, -456(%rbp)        # 8-byte Spill
	callq	build_pure_c_string
	movq	-448(%rbp), %rdi        # 8-byte Reload
	movq	-456(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	callq	Fput
	movl	$934, %edi              # imm = 0x3A6
	movq	%rax, -464(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$258, %edi              # imm = 0x102
	movq	%rax, -472(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$10, %edi
	movl	%edi, %edx
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fput
	xorl	%edi, %edi
	movq	%rax, -480(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$86, %edi
                                        # kill: RDI<def> EDI<kill>
	movq	%rax, %rsi
	callq	Fmake_vector
	movabsq	$Vcoding_category_table, %rdi
	movq	%rax, Vcoding_category_table
	callq	staticpro
	movabsq	$.L.str.20, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
	callq	intern_c_string
	xorl	%r8d, %r8d
	movl	%r8d, %esi
	movq	-488(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.21, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -496(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$1, %r8d
	movl	%r8d, %esi
	movq	-496(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.22, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -504(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$2, %r8d
	movl	%r8d, %esi
	movq	-504(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.23, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$3, %r8d
	movl	%r8d, %esi
	movq	-512(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.24, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -520(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$4, %r8d
	movl	%r8d, %esi
	movq	-520(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.25, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$5, %r8d
	movl	%r8d, %esi
	movq	-528(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.26, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -536(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$6, %r8d
	movl	%r8d, %esi
	movq	-536(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.27, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -544(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$7, %r8d
	movl	%r8d, %esi
	movq	-544(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.28, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -552(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$8, %r8d
	movl	%r8d, %esi
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.29, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -560(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$10, %r8d
	movl	%r8d, %esi
	movq	-560(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.30, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$9, %r8d
	movl	%r8d, %esi
	movq	-568(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.31, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$11, %r8d
	movl	%r8d, %esi
	movq	-576(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.32, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$12, %r8d
	movl	%r8d, %esi
	movq	-584(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.33, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -592(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$13, %r8d
	movl	%r8d, %esi
	movq	-592(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.34, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -600(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$14, %r8d
	movl	%r8d, %esi
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.35, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$15, %r8d
	movl	%r8d, %esi
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.36, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -616(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$16, %r8d
	movl	%r8d, %esi
	movq	-616(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.37, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$17, %r8d
	movl	%r8d, %esi
	movq	-624(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.38, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -632(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$18, %r8d
	movl	%r8d, %esi
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.39, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -640(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$19, %r8d
	movl	%r8d, %esi
	movq	-640(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$.L.str.40, %rdi
	movq	Vcoding_category_table, %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
	callq	intern_c_string
	movl	$20, %r8d
	movl	%r8d, %esi
	movq	-648(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rdx
	callq	ASET
	movabsq	$Scoding_system_p, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sread_coding_system, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sread_non_nil_coding_system, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scheck_coding_system, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdetect_coding_region, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdetect_coding_string, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sfind_coding_systems_region_internal, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sunencodable_char_position, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scheck_coding_systems_region, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdecode_coding_region, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sencode_coding_region, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdecode_coding_string, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sencode_coding_string, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdecode_sjis_char, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sencode_sjis_char, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdecode_big5_char, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sencode_big5_char, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sset_terminal_coding_system_internal, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sset_safe_terminal_coding_system_internal, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sterminal_coding_system, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sset_keyboard_coding_system_internal, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Skeyboard_coding_system, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sfind_operation_coding_system, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sset_coding_system_priority, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdefine_coding_system_internal, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Sdefine_coding_system_alias, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scoding_system_put, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scoding_system_base, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scoding_system_plist, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scoding_system_aliases, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scoding_system_eol_type, %rax
	movq	%rax, %rdi
	callq	defsubr
	movabsq	$Scoding_system_priority_list, %rax
	movq	%rax, %rdi
	callq	defsubr
# BB#1:                                 # %do.body
	movabsq	$syms_of_coding.o_fwd, %rdi
	movabsq	$.L.str.41, %rsi
	movabsq	$globals, %rax
	addq	$296, %rax              # imm = 0x128
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#2:                                 # %do.end
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+296
# BB#3:                                 # %do.body.65
	movabsq	$syms_of_coding.o_fwd.42, %rdi
	movabsq	$.L.str.43, %rsi
	movabsq	$globals, %rax
	addq	$272, %rax              # imm = 0x110
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#4:                                 # %do.end.66
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+272
# BB#5:                                 # %do.body.68
	movabsq	$syms_of_coding.o_fwd.44, %rdi
	movabsq	$.L.str.45, %rsi
	movabsq	$globals, %rax
	addq	$264, %rax              # imm = 0x108
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#6:                                 # %do.end.69
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+264
	movl	$20, -20(%rbp)
.LBB94_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB94_10
# BB#8:                                 # %for.body
                                        #   in Loop: Header=BB94_7 Depth=1
	movq	Vcoding_category_table, %rdi
	movslq	-20(%rbp), %rsi
	callq	AREF
	movq	globals+264, %rsi
	movq	%rax, %rdi
	callq	Fcons
	movq	%rax, globals+264
# BB#9:                                 # %for.inc
                                        #   in Loop: Header=BB94_7 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_7
.LBB94_10:                              # %for.end
	jmp	.LBB94_11
.LBB94_11:                              # %do.body.73
	movabsq	$syms_of_coding.o_fwd.46, %rdi
	movabsq	$.L.str.47, %rsi
	movabsq	$globals, %rax
	addq	$280, %rax              # imm = 0x118
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#12:                                # %do.end.74
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+280
# BB#13:                                # %do.body.76
	movabsq	$syms_of_coding.o_fwd.48, %rdi
	movabsq	$.L.str.49, %rsi
	movabsq	$globals, %rax
	addq	$288, %rax              # imm = 0x120
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#14:                                # %do.end.77
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+288
# BB#15:                                # %do.body.79
	movabsq	$syms_of_coding.o_fwd.50, %rdi
	movabsq	$.L.str.51, %rsi
	movabsq	$globals, %rax
	addq	$1240, %rax             # imm = 0x4D8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#16:                                # %do.end.80
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1240
# BB#17:                                # %do.body.82
	movabsq	$syms_of_coding.o_fwd.52, %rdi
	movabsq	$.L.str.53, %rsi
	movabsq	$globals, %rax
	addq	$1232, %rax             # imm = 0x4D0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#18:                                # %do.end.83
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1232
# BB#19:                                # %do.body.85
	movabsq	$syms_of_coding.b_fwd, %rdi
	movabsq	$.L.str.54, %rsi
	movabsq	$globals, %rax
	addq	$3389, %rax             # imm = 0xD3D
	movq	%rax, %rdx
	callq	defvar_bool
# BB#20:                                # %do.end.86
	movb	$0, globals+3389
# BB#21:                                # %do.body.87
	movabsq	$syms_of_coding.b_fwd.55, %rdi
	movabsq	$.L.str.56, %rsi
	movabsq	$globals, %rax
	addq	$3387, %rax             # imm = 0xD3B
	movq	%rax, %rdx
	callq	defvar_bool
# BB#22:                                # %do.end.88
	movb	$0, globals+3387
# BB#23:                                # %do.body.89
	movabsq	$syms_of_coding.o_fwd.57, %rdi
	movabsq	$.L.str.58, %rsi
	movabsq	$globals, %rax
	addq	$744, %rax              # imm = 0x2E8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#24:                                # %do.end.90
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+744
# BB#25:                                # %do.body.92
	movabsq	$syms_of_coding.o_fwd.59, %rdi
	movabsq	$.L.str.60, %rsi
	movabsq	$globals, %rax
	addq	$1896, %rax             # imm = 0x768
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#26:                                # %do.end.93
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1896
# BB#27:                                # %do.body.95
	movabsq	$syms_of_coding.o_fwd.61, %rdi
	movabsq	$.L.str.62, %rsi
	movabsq	$globals, %rax
	addq	$1640, %rax             # imm = 0x668
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#28:                                # %do.end.96
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1640
# BB#29:                                # %do.body.98
	movabsq	$syms_of_coding.o_fwd.63, %rdi
	movabsq	$.L.str.64, %rsi
	movabsq	$globals, %rax
	addq	$1344, %rax             # imm = 0x540
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#30:                                # %do.end.99
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+1344
# BB#31:                                # %do.body.101
	movabsq	$syms_of_coding.o_fwd.65, %rdi
	movabsq	$.L.str.66, %rsi
	movabsq	$globals, %rax
	addq	$2976, %rax             # imm = 0xBA0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#32:                                # %do.end.102
	movabsq	$.L.str.67, %rdi
	callq	build_pure_c_string
	movq	%rax, globals+2976
# BB#33:                                # %do.body.104
	movabsq	$syms_of_coding.o_fwd.68, %rdi
	movabsq	$.L.str.69, %rsi
	movabsq	$globals, %rax
	addq	$2952, %rax             # imm = 0xB88
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#34:                                # %do.end.105
	movabsq	$.L.str.70, %rdi
	callq	build_pure_c_string
	movq	%rax, globals+2952
# BB#35:                                # %do.body.107
	movabsq	$syms_of_coding.o_fwd.71, %rdi
	movabsq	$.L.str.72, %rsi
	movabsq	$globals, %rax
	addq	$2960, %rax             # imm = 0xB90
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#36:                                # %do.end.108
	movabsq	$.L.str.73, %rdi
	callq	build_pure_c_string
	movq	%rax, globals+2960
# BB#37:                                # %do.body.110
	movabsq	$syms_of_coding.o_fwd.74, %rdi
	movabsq	$.L.str.75, %rsi
	movabsq	$globals, %rax
	addq	$2968, %rax             # imm = 0xB98
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#38:                                # %do.end.111
	movabsq	$.L.str.67, %rdi
	callq	build_pure_c_string
	movq	%rax, globals+2968
# BB#39:                                # %do.body.113
	movabsq	$syms_of_coding.o_fwd.76, %rdi
	movabsq	$.L.str.77, %rsi
	movabsq	$globals, %rax
	addq	$640, %rax              # imm = 0x280
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#40:                                # %do.end.114
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, globals+640
# BB#41:                                # %do.body.116
	movabsq	$syms_of_coding.o_fwd.78, %rdi
	movabsq	$.L.str.79, %rsi
	movabsq	$globals, %rax
	addq	$2224, %rax             # imm = 0x8B0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#42:                                # %do.end.117
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2224
# BB#43:                                # %do.body.119
	movabsq	$syms_of_coding.o_fwd.80, %rdi
	movabsq	$.L.str.81, %rsi
	movabsq	$globals, %rax
	addq	$2232, %rax             # imm = 0x8B8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#44:                                # %do.end.120
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2232
# BB#45:                                # %do.body.122
	movabsq	$syms_of_coding.o_fwd.82, %rdi
	movabsq	$.L.str.83, %rsi
	movabsq	$globals, %rax
	addq	$248, %rax
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#46:                                # %do.end.123
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+248
# BB#47:                                # %do.body.125
	movabsq	$syms_of_coding.o_fwd.84, %rdi
	movabsq	$.L.str.85, %rsi
	movabsq	$globals, %rax
	addq	$496, %rax              # imm = 0x1F0
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#48:                                # %do.end.126
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+496
# BB#49:                                # %do.body.128
	movabsq	$syms_of_coding.o_fwd.86, %rdi
	movabsq	$.L.str.87, %rsi
	movabsq	$globals, %rax
	addq	$1256, %rax             # imm = 0x4E8
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#50:                                # %do.end.129
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$1026, %edi             # imm = 0x402
                                        # kill: RDI<def> EDI<kill>
	movq	%rax, %rsi
	callq	Fmake_vector
	movq	%rax, globals+1256
# BB#51:                                # %do.body.132
	movabsq	$syms_of_coding.o_fwd.88, %rdi
	movabsq	$.L.str.89, %rsi
	movabsq	$globals, %rax
	addq	$2112, %rax             # imm = 0x840
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#52:                                # %do.end.133
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, globals+2112
# BB#53:                                # %do.body.135
	movabsq	$syms_of_coding.b_fwd.90, %rdi
	movabsq	$.L.str.91, %rsi
	movabsq	$globals, %rax
	addq	$3367, %rax             # imm = 0xD27
	movq	%rax, %rdx
	callq	defvar_bool
# BB#54:                                # %do.end.136
	movb	$0, globals+3367
# BB#55:                                # %do.body.137
	movabsq	$syms_of_coding.b_fwd.92, %rdi
	movabsq	$.L.str.93, %rsi
	movabsq	$globals, %rax
	addq	$3392, %rax             # imm = 0xD40
	movq	%rax, %rdx
	callq	defvar_bool
# BB#56:                                # %do.end.138
	movb	$0, globals+3392
# BB#57:                                # %do.body.139
	movabsq	$syms_of_coding.b_fwd.94, %rdi
	movabsq	$.L.str.95, %rsi
	movabsq	$globals, %rax
	addq	$3397, %rax             # imm = 0xD45
	movq	%rax, %rdx
	callq	defvar_bool
# BB#58:                                # %do.end.140
	movb	$0, globals+3397
# BB#59:                                # %do.body.141
	movabsq	$syms_of_coding.b_fwd.96, %rdi
	movabsq	$.L.str.97, %rsi
	movabsq	$globals, %rax
	addq	$3377, %rax             # imm = 0xD31
	movq	%rax, %rdx
	callq	defvar_bool
# BB#60:                                # %do.end.142
	movb	$0, globals+3377
# BB#61:                                # %do.body.143
	movabsq	$syms_of_coding.o_fwd.98, %rdi
	movabsq	$.L.str.99, %rsi
	movabsq	$globals, %rax
	addq	$2456, %rax             # imm = 0x998
	movq	%rax, %rdx
	callq	defvar_lisp
# BB#62:                                # %do.end.144
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movl	$128, %edi
	movl	%edi, %esi
	leaq	-160(%rbp), %rcx
	movq	%rax, globals+2456
	movq	%rcx, %rdi
	callq	memclear
	movl	$86, %edi
	callq	builtin_lisp_symbol
	movl	$702, %edi              # imm = 0x2BE
	movq	%rax, -288(%rbp)
	callq	builtin_lisp_symbol
	movl	$85, %edi
	movq	%rax, -160(%rbp)
	movq	%rax, -280(%rbp)
	callq	builtin_lisp_symbol
	movabsq	$.L.str.100, %rdi
	movq	%rax, -272(%rbp)
	movq	$246, -152(%rbp)
	movq	$246, -264(%rbp)
	callq	intern_c_string
	movl	$788, %edi              # imm = 0x314
	movq	%rax, -256(%rbp)
	callq	builtin_lisp_symbol
	movl	$10, %edi
	movq	%rax, -144(%rbp)
	movq	%rax, -248(%rbp)
	callq	builtin_lisp_symbol
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -240(%rbp)
	callq	builtin_lisp_symbol
	movl	$31, %edi
	movq	%rax, -128(%rbp)
	movq	%rax, -232(%rbp)
	callq	builtin_lisp_symbol
	movabsq	$.L.str.101, %rdi
	movq	%rax, -224(%rbp)
	movq	$2, -88(%rbp)
	movq	$2, -216(%rbp)
	callq	intern_c_string
	movl	$901, %edi              # imm = 0x385
	movq	%rax, -208(%rbp)
	callq	builtin_lisp_symbol
	movabsq	$.L.str.102, %rdi
	movq	%rax, -80(%rbp)
	movq	%rax, -200(%rbp)
	callq	intern_c_string
	movabsq	$.L.str.103, %rdi
	movq	%rax, -192(%rbp)
	callq	build_pure_c_string
	movabsq	$.L.str.104, %rdi
	movq	%rax, -184(%rbp)
	callq	intern_c_string
	movl	$973, %edi              # imm = 0x3CD
	movq	%rax, -176(%rbp)
	callq	builtin_lisp_symbol
	movl	$16, %edi
                                        # kill: RDI<def> EDI<kill>
	leaq	-288(%rbp), %rsi
	movq	%rax, -64(%rbp)
	movq	%rax, -168(%rbp)
	callq	Flist
	movl	$13, %edx
	movl	%edx, %edi
	leaq	-160(%rbp), %rsi
	movq	%rax, -72(%rbp)
	callq	Fdefine_coding_system_internal
	movl	$958, %edi              # imm = 0x3BE
	movq	%rax, -656(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movl	$958, %edi              # imm = 0x3BE
	movq	%rax, -160(%rbp)
	movq	%rax, -280(%rbp)
	movq	$182, -152(%rbp)
	movq	$182, -264(%rbp)
	callq	builtin_lisp_symbol
	movabsq	$.L.str.105, %rdi
	movq	%rax, -144(%rbp)
	movq	%rax, -248(%rbp)
	callq	intern_c_string
	movl	$181, %edi
	movq	%rax, -224(%rbp)
	callq	builtin_lisp_symbol
	xorl	%edi, %edi
	movq	%rax, -664(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-664(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fcons
	xorl	%edi, %edi
	movq	%rax, -136(%rbp)
	movq	%rax, -216(%rbp)
	callq	builtin_lisp_symbol
	movabsq	$.L.str.106, %rdi
	movq	%rax, -80(%rbp)
	movq	%rax, -200(%rbp)
	callq	build_pure_c_string
	xorl	%edi, %edi
	movq	%rax, -184(%rbp)
	callq	builtin_lisp_symbol
	movl	$16, %edx
	movl	%edx, %edi
	leaq	-288(%rbp), %rsi
	movq	%rax, -64(%rbp)
	movq	%rax, -168(%rbp)
	callq	Flist
	movl	$16, %edx
	movl	%edx, %edi
	leaq	-160(%rbp), %rsi
	movq	%rax, -72(%rbp)
	movq	$2, -56(%rbp)
	movq	$2, -48(%rbp)
	callq	Fdefine_coding_system_internal
	movl	$702, %edi              # imm = 0x2BE
	movq	%rax, -672(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movabsq	$safe_terminal_coding, %rsi
	movq	%rax, %rdi
	callq	setup_coding_system
	movl	$0, -292(%rbp)
.LBB94_63:                              # %for.cond.220
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$21, -292(%rbp)
	jge	.LBB94_66
# BB#64:                                # %for.body.223
                                        #   in Loop: Header=BB94_63 Depth=1
	movq	Vcoding_category_table, %rdi
	movslq	-292(%rbp), %rsi
	callq	AREF
	movl	$702, %edi              # imm = 0x2BE
	movq	%rax, -680(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-680(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fset
	movq	%rax, -688(%rbp)        # 8-byte Spill
# BB#65:                                # %for.inc.228
                                        #   in Loop: Header=BB94_63 Depth=1
	movl	-292(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -292(%rbp)
	jmp	.LBB94_63
.LBB94_66:                              # %for.end.229
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movabsq	$system_eol_type, %rdi
	movq	%rax, system_eol_type
	callq	staticpro
	addq	$688, %rsp              # imm = 0x2B0
	popq	%rbp
	retq
.Lfunc_end94:
	.size	syms_of_coding, .Lfunc_end94-syms_of_coding
	.cfi_endproc

	.globl	emacs_strerror
	.align	16, 0x90
	.type	emacs_strerror,@function
emacs_strerror:                         # @emacs_strerror
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp286:
	.cfi_def_cfa_offset 16
.Ltmp287:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp288:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	%edi, -4(%rbp)
	callq	synchronize_system_messages_locale
	movl	-4(%rbp), %edi
	callq	strerror
	xorl	%edi, %edi
	movq	%rax, -16(%rbp)
	movq	globals+1344, %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-32(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB95_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rdi
	callq	build_string
	xorl	%edx, %edx
	movq	globals+1344, %rsi
	movq	%rax, %rdi
	callq	code_convert_string_norecord
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	SSDATA
	movq	%rax, -16(%rbp)
.LBB95_2:                               # %if.end
	movq	-16(%rbp), %rax
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end95:
	.size	emacs_strerror, .Lfunc_end95-emacs_strerror
	.cfi_endproc

	.align	16, 0x90
	.type	record_conversion_result,@function
record_conversion_result:               # @record_conversion_result
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp289:
	.cfi_def_cfa_offset 16
.Ltmp290:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp291:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	8(%rdi), %eax
	andl	$7, %esi
	shll	$27, %esi
	andl	$-939524097, %eax       # imm = 0xFFFFFFFFC7FFFFFF
	orl	%esi, %eax
	movl	%eax, 8(%rdi)
	movl	-12(%rbp), %eax
	movl	%eax, %edi
	movq	%rdi, %rcx
	subq	$4, %rcx
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	ja	.LBB96_6
# BB#8:                                 # %entry
	movq	-24(%rbp), %rax         # 8-byte Reload
	movq	.LJTI96_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB96_1:                               # %sw.bb
	movl	$555, %edi              # imm = 0x22B
	callq	builtin_lisp_symbol
	movq	%rax, globals+1232
	jmp	.LBB96_7
.LBB96_2:                               # %sw.bb.2
	movl	$573, %edi              # imm = 0x23D
	callq	builtin_lisp_symbol
	movq	%rax, globals+1232
	jmp	.LBB96_7
.LBB96_3:                               # %sw.bb.4
	movl	$568, %edi              # imm = 0x238
	callq	builtin_lisp_symbol
	movq	%rax, globals+1232
	jmp	.LBB96_7
.LBB96_4:                               # %sw.bb.6
	jmp	.LBB96_7
.LBB96_5:                               # %sw.bb.7
	jmp	.LBB96_7
.LBB96_6:                               # %sw.default
	movabsq	$.L.str.107, %rdi
	callq	intern
	movq	%rax, globals+1232
.LBB96_7:                               # %sw.epilog
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end96:
	.size	record_conversion_result, .Lfunc_end96-record_conversion_result
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI96_0:
	.quad	.LBB96_5
	.quad	.LBB96_1
	.quad	.LBB96_4
	.quad	.LBB96_2
	.quad	.LBB96_3

	.text
	.align	16, 0x90
	.type	alloc_destination,@function
alloc_destination:                      # @alloc_destination
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp292:
	.cfi_def_cfa_offset 16
.Ltmp293:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp294:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	496(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, -32(%rbp)
	movq	-8(%rbp), %rdx
	movq	488(%rdx), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB97_1
	jmp	.LBB97_2
.LBB97_1:                               # %if.then
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	720(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	-40(%rbp), %rdx
	movq	720(%rdx), %rdx
	addq	24(%rdx), %rcx
	addq	$-1, %rcx
	subq	%rcx, %rax
	movq	-16(%rbp), %rdx
	movq	%rax, %rsi
	callq	coding_alloc_by_making_gap
	jmp	.LBB97_3
.LBB97_2:                               # %if.else
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	coding_alloc_by_realloc
.LBB97_3:                               # %if.end
	movq	-8(%rbp), %rdi
	callq	coding_set_destination
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	addq	-32(%rbp), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rsp
	popq	%rbp
	retq
.Lfunc_end97:
	.size	alloc_destination, .Lfunc_end97-alloc_destination
	.cfi_endproc

	.align	16, 0x90
	.type	coding_alloc_by_making_gap,@function
coding_alloc_by_making_gap:             # @coding_alloc_by_making_gap
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp295:
	.cfi_def_cfa_offset 16
.Ltmp296:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp297:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdx
	movq	448(%rdx), %rdx
	movq	-8(%rbp), %rsi
	cmpq	488(%rsi), %rdx
	jne	.LBB98_2
# BB#1:                                 # %if.then
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	8(%rcx), %rax
	movq	%rax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	24(%rcx), %rax
	movq	%rax, 24(%rcx)
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	$0, 40(%rax)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	addq	768(%rcx), %rax
	movq	%rax, 768(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	16(%rcx), %rax
	movq	%rax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	addq	776(%rcx), %rax
	movq	%rax, 776(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	32(%rcx), %rax
	movq	%rax, 32(%rcx)
	movq	-24(%rbp), %rdi
	callq	make_gap
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	movq	%rax, 40(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	768(%rcx), %rdi
	subq	%rax, %rdi
	movq	%rdi, 768(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	16(%rcx), %rdi
	subq	%rax, %rdi
	movq	%rdi, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	776(%rcx), %rdi
	subq	%rax, %rdi
	movq	%rdi, 776(%rcx)
	movq	-32(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	32(%rcx), %rdi
	subq	%rax, %rdi
	movq	%rdi, 32(%rcx)
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	8(%rcx), %rdi
	subq	%rax, %rdi
	movq	%rdi, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	movq	24(%rcx), %rdi
	subq	%rax, %rdi
	movq	%rdi, 24(%rcx)
	jmp	.LBB98_3
.LBB98_2:                               # %if.else
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	-24(%rbp), %rsi
	movq	%rax, %rdi
	callq	make_gap_1
.LBB98_3:                               # %if.end
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end98:
	.size	coding_alloc_by_making_gap, .Lfunc_end98-coding_alloc_by_making_gap
	.cfi_endproc

	.align	16, 0x90
	.type	coding_alloc_by_realloc,@function
coding_alloc_by_realloc:                # @coding_alloc_by_realloc
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp298:
	.cfi_def_cfa_offset 16
.Ltmp299:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp300:
	.cfi_def_cfa_register %rbp
	subq	$416, %rsp              # imm = 0x1A0
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	testb	$1, %cl
	jne	.LBB99_1
	jmp	.LBB99_60
.LBB99_1:                               # %cond.true
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_2
	jmp	.LBB99_31
.LBB99_2:                               # %cond.true.1
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB99_4
# BB#3:                                 # %cond.true.7
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movb	%cl, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movb	%cl, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -28(%rbp)         # 4-byte Spill
	jmp	.LBB99_5
.LBB99_4:                               # %cond.false
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -28(%rbp)         # 4-byte Spill
.LBB99_5:                               # %cond.end
	movl	-28(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB99_15
# BB#6:                                 # %cond.true.44
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB99_11
# BB#7:                                 # %cond.true.49
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -32(%rbp)         # 4-byte Spill
	jge	.LBB99_9
# BB#8:                                 # %cond.true.64
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movb	%cl, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movb	%cl, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -36(%rbp)         # 4-byte Spill
	jmp	.LBB99_10
.LBB99_9:                               # %cond.false.92
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -36(%rbp)         # 4-byte Spill
.LBB99_10:                              # %cond.end.102
	movl	-36(%rbp), %eax         # 4-byte Reload
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	subl	%esi, %eax
	movl	-32(%rbp), %esi         # 4-byte Reload
	cmpl	%eax, %esi
	jl	.LBB99_23
	jmp	.LBB99_20
.LBB99_11:                              # %cond.false.109
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB99_13
# BB#12:                                # %cond.true.121
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -40(%rbp)         # 4-byte Spill
	jmp	.LBB99_14
.LBB99_13:                              # %cond.false.135
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -40(%rbp)         # 4-byte Spill
.LBB99_14:                              # %cond.end.145
	movl	-40(%rbp), %eax         # 4-byte Reload
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	subl	%esi, %eax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	cmpl	%esi, %eax
	jl	.LBB99_23
	jmp	.LBB99_20
.LBB99_15:                              # %cond.false.155
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB99_17
# BB#16:                                # %cond.true.161
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jle	.LBB99_23
	jmp	.LBB99_20
.LBB99_17:                              # %cond.false.172
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB99_19
# BB#18:                                # %cond.true.177
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jle	.LBB99_23
	jmp	.LBB99_20
.LBB99_19:                              # %cond.false.189
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	cmpl	%esi, %edx
	jl	.LBB99_23
.LBB99_20:                              # %lor.lhs.false
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB99_22
# BB#21:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	%esi, %edx
	cmpl	$-128, %edx
	jl	.LBB99_23
.LBB99_22:                              # %lor.lhs.false.218
	movl	$127, %eax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	movq	-16(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	cmpl	%esi, %eax
	jge	.LBB99_27
.LBB99_23:                              # %cond.true.227
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	cmpl	$127, %edx
	jg	.LBB99_25
# BB#24:                                # %cond.true.236
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -44(%rbp)         # 4-byte Spill
	jmp	.LBB99_26
.LBB99_25:                              # %cond.false.245
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -44(%rbp)         # 4-byte Spill
.LBB99_26:                              # %cond.end.256
	movl	-44(%rbp), %eax         # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_27:                              # %cond.false.259
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	cmpl	$127, %edx
	jg	.LBB99_29
# BB#28:                                # %cond.true.268
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -48(%rbp)         # 4-byte Spill
	jmp	.LBB99_30
.LBB99_29:                              # %cond.false.277
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -48(%rbp)         # 4-byte Spill
.LBB99_30:                              # %cond.end.288
	movl	-48(%rbp), %eax         # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_31:                              # %cond.false.291
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_33
# BB#32:                                # %cond.true.299
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -56(%rbp)         # 8-byte Spill
	jmp	.LBB99_34
.LBB99_33:                              # %cond.false.320
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
.LBB99_34:                              # %cond.end.326
	movq	-56(%rbp), %rax         # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_44
# BB#35:                                # %cond.true.330
	cmpq	$0, -16(%rbp)
	jge	.LBB99_40
# BB#36:                                # %cond.true.333
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -64(%rbp)         # 8-byte Spill
	jge	.LBB99_38
# BB#37:                                # %cond.true.342
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	jmp	.LBB99_39
.LBB99_38:                              # %cond.false.363
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
.LBB99_39:                              # %cond.end.369
	movq	-72(%rbp), %rax         # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-64(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_52
	jmp	.LBB99_49
.LBB99_40:                              # %cond.false.374
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_42
# BB#41:                                # %cond.true.382
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	jmp	.LBB99_43
.LBB99_42:                              # %cond.false.392
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
.LBB99_43:                              # %cond.end.398
	movq	-80(%rbp), %rax         # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_52
	jmp	.LBB99_49
.LBB99_44:                              # %cond.false.404
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_46
# BB#45:                                # %cond.true.408
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_52
	jmp	.LBB99_49
.LBB99_46:                              # %cond.false.413
	cmpq	$0, -16(%rbp)
	jge	.LBB99_48
# BB#47:                                # %cond.true.416
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_52
	jmp	.LBB99_49
.LBB99_48:                              # %cond.false.422
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_52
.LBB99_49:                              # %lor.lhs.false.427
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_51
# BB#50:                                # %land.lhs.true.434
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	$-128, %rax
	jl	.LBB99_52
.LBB99_51:                              # %lor.lhs.false.439
	movl	$127, %eax
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	480(%rdx), %rdx
	addq	-16(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB99_56
.LBB99_52:                              # %cond.true.444
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	cmpl	$127, %edx
	jg	.LBB99_54
# BB#53:                                # %cond.true.453
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -84(%rbp)         # 4-byte Spill
	jmp	.LBB99_55
.LBB99_54:                              # %cond.false.462
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -84(%rbp)         # 4-byte Spill
.LBB99_55:                              # %cond.end.473
	movl	-84(%rbp), %eax         # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_56:                              # %cond.false.476
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	cmpl	$127, %edx
	jg	.LBB99_58
# BB#57:                                # %cond.true.485
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -88(%rbp)         # 4-byte Spill
	jmp	.LBB99_59
.LBB99_58:                              # %cond.false.494
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	movq	-16(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %esi
	addl	%esi, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -88(%rbp)         # 4-byte Spill
.LBB99_59:                              # %cond.end.505
	movl	-88(%rbp), %eax         # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_60:                              # %cond.false.508
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_61
	jmp	.LBB99_120
.LBB99_61:                              # %cond.true.509
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_62
	jmp	.LBB99_91
.LBB99_62:                              # %cond.true.510
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB99_64
# BB#63:                                # %cond.true.522
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movw	%cx, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movw	%cx, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB99_65
.LBB99_64:                              # %cond.false.550
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -92(%rbp)         # 4-byte Spill
.LBB99_65:                              # %cond.end.560
	movl	-92(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB99_75
# BB#66:                                # %cond.true.564
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB99_71
# BB#67:                                # %cond.true.569
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -96(%rbp)         # 4-byte Spill
	jge	.LBB99_69
# BB#68:                                # %cond.true.584
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movw	%cx, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %esi
	subl	%esi, %eax
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movw	%cx, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -100(%rbp)        # 4-byte Spill
	jmp	.LBB99_70
.LBB99_69:                              # %cond.false.612
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -100(%rbp)        # 4-byte Spill
.LBB99_70:                              # %cond.end.622
	movl	-100(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	subl	%esi, %eax
	movl	-96(%rbp), %esi         # 4-byte Reload
	cmpl	%eax, %esi
	jl	.LBB99_83
	jmp	.LBB99_80
.LBB99_71:                              # %cond.false.629
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB99_73
# BB#72:                                # %cond.true.641
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -104(%rbp)        # 4-byte Spill
	jmp	.LBB99_74
.LBB99_73:                              # %cond.false.655
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -104(%rbp)        # 4-byte Spill
.LBB99_74:                              # %cond.end.665
	movl	-104(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	subl	%esi, %eax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	cmpl	%esi, %eax
	jl	.LBB99_83
	jmp	.LBB99_80
.LBB99_75:                              # %cond.false.675
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB99_77
# BB#76:                                # %cond.true.681
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jle	.LBB99_83
	jmp	.LBB99_80
.LBB99_77:                              # %cond.false.692
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB99_79
# BB#78:                                # %cond.true.697
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jle	.LBB99_83
	jmp	.LBB99_80
.LBB99_79:                              # %cond.false.709
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	cmpl	%esi, %edx
	jl	.LBB99_83
.LBB99_80:                              # %lor.lhs.false.720
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB99_82
# BB#81:                                # %land.lhs.true.731
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	%esi, %edx
	cmpl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB99_83
.LBB99_82:                              # %lor.lhs.false.740
	movl	$32767, %eax            # imm = 0x7FFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	movq	-16(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	cmpl	%esi, %eax
	jge	.LBB99_87
.LBB99_83:                              # %cond.true.749
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB99_85
# BB#84:                                # %cond.true.758
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -108(%rbp)        # 4-byte Spill
	jmp	.LBB99_86
.LBB99_85:                              # %cond.false.767
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -108(%rbp)        # 4-byte Spill
.LBB99_86:                              # %cond.end.778
	movl	-108(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_87:                              # %cond.false.781
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB99_89
# BB#88:                                # %cond.true.790
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -112(%rbp)        # 4-byte Spill
	jmp	.LBB99_90
.LBB99_89:                              # %cond.false.799
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -112(%rbp)        # 4-byte Spill
.LBB99_90:                              # %cond.end.810
	movl	-112(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_91:                              # %cond.false.813
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_93
# BB#92:                                # %cond.true.821
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	jmp	.LBB99_94
.LBB99_93:                              # %cond.false.842
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
.LBB99_94:                              # %cond.end.848
	movq	-120(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_104
# BB#95:                                # %cond.true.852
	cmpq	$0, -16(%rbp)
	jge	.LBB99_100
# BB#96:                                # %cond.true.855
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -128(%rbp)        # 8-byte Spill
	jge	.LBB99_98
# BB#97:                                # %cond.true.864
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB99_99
.LBB99_98:                              # %cond.false.885
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB99_99:                              # %cond.end.891
	movq	-136(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_112
	jmp	.LBB99_109
.LBB99_100:                             # %cond.false.896
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_102
# BB#101:                               # %cond.true.904
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB99_103
.LBB99_102:                             # %cond.false.914
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB99_103:                             # %cond.end.920
	movq	-144(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_112
	jmp	.LBB99_109
.LBB99_104:                             # %cond.false.926
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_106
# BB#105:                               # %cond.true.930
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_112
	jmp	.LBB99_109
.LBB99_106:                             # %cond.false.935
	cmpq	$0, -16(%rbp)
	jge	.LBB99_108
# BB#107:                               # %cond.true.938
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_112
	jmp	.LBB99_109
.LBB99_108:                             # %cond.false.944
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_112
.LBB99_109:                             # %lor.lhs.false.949
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_111
# BB#110:                               # %land.lhs.true.956
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	$-32768, %rax           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB99_112
.LBB99_111:                             # %lor.lhs.false.961
	movl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	480(%rdx), %rdx
	addq	-16(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB99_116
.LBB99_112:                             # %cond.true.966
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB99_114
# BB#113:                               # %cond.true.975
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -148(%rbp)        # 4-byte Spill
	jmp	.LBB99_115
.LBB99_114:                             # %cond.false.984
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -148(%rbp)        # 4-byte Spill
.LBB99_115:                             # %cond.end.995
	movl	-148(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_116:                             # %cond.false.998
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB99_118
# BB#117:                               # %cond.true.1007
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -152(%rbp)        # 4-byte Spill
	jmp	.LBB99_119
.LBB99_118:                             # %cond.false.1016
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	movq	-16(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %esi
	addl	%esi, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -152(%rbp)        # 4-byte Spill
.LBB99_119:                             # %cond.end.1027
	movl	-152(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_120:                             # %cond.false.1030
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_121
	jmp	.LBB99_180
.LBB99_121:                             # %cond.true.1031
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_122
	jmp	.LBB99_151
.LBB99_122:                             # %cond.true.1032
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB99_124
# BB#123:                               # %cond.true.1042
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movl	%ecx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %edx
	subl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movl	%ecx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB99_125
.LBB99_124:                             # %cond.false.1066
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -156(%rbp)        # 4-byte Spill
.LBB99_125:                             # %cond.end.1074
	movl	-156(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB99_135
# BB#126:                               # %cond.true.1078
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB99_131
# BB#127:                               # %cond.true.1082
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	movl	%ecx, -160(%rbp)        # 4-byte Spill
	jge	.LBB99_129
# BB#128:                               # %cond.true.1094
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movl	%ecx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %edx
	subl	%edx, %eax
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movl	%ecx, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -164(%rbp)        # 4-byte Spill
	jmp	.LBB99_130
.LBB99_129:                             # %cond.false.1118
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -164(%rbp)        # 4-byte Spill
.LBB99_130:                             # %cond.end.1126
	movl	-164(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	subl	%edx, %eax
	movl	-160(%rbp), %edx        # 4-byte Reload
	cmpl	%eax, %edx
	jl	.LBB99_143
	jmp	.LBB99_140
.LBB99_131:                             # %cond.false.1132
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB99_133
# BB#132:                               # %cond.true.1142
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	addl	$1, %ecx
	shll	$30, %ecx
	subl	$1, %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	%ecx, -168(%rbp)        # 4-byte Spill
	jmp	.LBB99_134
.LBB99_133:                             # %cond.false.1154
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	movl	%ecx, -168(%rbp)        # 4-byte Spill
.LBB99_134:                             # %cond.end.1162
	movl	-168(%rbp), %eax        # 4-byte Reload
	movq	-16(%rbp), %rcx
	movl	%ecx, %edx
	subl	%edx, %eax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movl	%ecx, %edx
	cmpl	%edx, %eax
	jl	.LBB99_143
	jmp	.LBB99_140
.LBB99_135:                             # %cond.false.1170
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB99_137
# BB#136:                               # %cond.true.1175
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB99_143
	jmp	.LBB99_140
.LBB99_137:                             # %cond.false.1183
	movq	-16(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB99_139
# BB#138:                               # %cond.true.1187
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB99_143
	jmp	.LBB99_140
.LBB99_139:                             # %cond.false.1196
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	cmpl	%edx, %ecx
	jl	.LBB99_143
.LBB99_140:                             # %lor.lhs.false.1204
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB99_142
# BB#141:                               # %land.lhs.true.1213
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	cmpl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	jl	.LBB99_143
.LBB99_142:                             # %lor.lhs.false.1220
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	movl	%ecx, %edx
	movq	-16(%rbp), %rcx
	movl	%ecx, %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jge	.LBB99_147
.LBB99_143:                             # %cond.true.1227
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB99_145
# BB#144:                               # %cond.true.1234
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movl	%ecx, -172(%rbp)        # 4-byte Spill
	jmp	.LBB99_146
.LBB99_145:                             # %cond.false.1239
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -172(%rbp)        # 4-byte Spill
.LBB99_146:                             # %cond.end.1246
	movl	-172(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_147:                             # %cond.false.1249
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB99_149
# BB#148:                               # %cond.true.1256
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movl	%ecx, -176(%rbp)        # 4-byte Spill
	jmp	.LBB99_150
.LBB99_149:                             # %cond.false.1261
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -176(%rbp)        # 4-byte Spill
.LBB99_150:                             # %cond.end.1268
	movl	-176(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_151:                             # %cond.false.1271
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_153
# BB#152:                               # %cond.true.1279
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
	jmp	.LBB99_154
.LBB99_153:                             # %cond.false.1300
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -184(%rbp)        # 8-byte Spill
.LBB99_154:                             # %cond.end.1306
	movq	-184(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_164
# BB#155:                               # %cond.true.1310
	cmpq	$0, -16(%rbp)
	jge	.LBB99_160
# BB#156:                               # %cond.true.1313
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -192(%rbp)        # 8-byte Spill
	jge	.LBB99_158
# BB#157:                               # %cond.true.1322
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -200(%rbp)        # 8-byte Spill
	jmp	.LBB99_159
.LBB99_158:                             # %cond.false.1343
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -200(%rbp)        # 8-byte Spill
.LBB99_159:                             # %cond.end.1349
	movq	-200(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-192(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_172
	jmp	.LBB99_169
.LBB99_160:                             # %cond.false.1354
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_162
# BB#161:                               # %cond.true.1362
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB99_163
.LBB99_162:                             # %cond.false.1372
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB99_163:                             # %cond.end.1378
	movq	-208(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_172
	jmp	.LBB99_169
.LBB99_164:                             # %cond.false.1384
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_166
# BB#165:                               # %cond.true.1388
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_172
	jmp	.LBB99_169
.LBB99_166:                             # %cond.false.1393
	cmpq	$0, -16(%rbp)
	jge	.LBB99_168
# BB#167:                               # %cond.true.1396
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_172
	jmp	.LBB99_169
.LBB99_168:                             # %cond.false.1402
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_172
.LBB99_169:                             # %lor.lhs.false.1407
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_171
# BB#170:                               # %land.lhs.true.1414
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	$-2147483648, %rax      # imm = 0xFFFFFFFF80000000
	jl	.LBB99_172
.LBB99_171:                             # %lor.lhs.false.1419
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %ecx
	movq	-8(%rbp), %rdx
	movq	480(%rdx), %rdx
	addq	-16(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB99_176
.LBB99_172:                             # %cond.true.1424
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB99_174
# BB#173:                               # %cond.true.1431
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movl	%ecx, -212(%rbp)        # 4-byte Spill
	jmp	.LBB99_175
.LBB99_174:                             # %cond.false.1436
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -212(%rbp)        # 4-byte Spill
.LBB99_175:                             # %cond.end.1443
	movl	-212(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_176:                             # %cond.false.1446
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB99_178
# BB#177:                               # %cond.true.1453
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	movl	%ecx, -216(%rbp)        # 4-byte Spill
	jmp	.LBB99_179
.LBB99_178:                             # %cond.false.1458
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	addl	%edx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -216(%rbp)        # 4-byte Spill
.LBB99_179:                             # %cond.end.1465
	movl	-216(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_180:                             # %cond.false.1468
	movb	$1, %al
	testb	$1, %al
	jne	.LBB99_181
	jmp	.LBB99_240
.LBB99_181:                             # %cond.true.1469
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_182
	jmp	.LBB99_211
.LBB99_182:                             # %cond.true.1470
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_184
# BB#183:                               # %cond.true.1478
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -224(%rbp)        # 8-byte Spill
	jmp	.LBB99_185
.LBB99_184:                             # %cond.false.1499
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB99_185:                             # %cond.end.1505
	movq	-224(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_195
# BB#186:                               # %cond.true.1509
	cmpq	$0, -16(%rbp)
	jge	.LBB99_191
# BB#187:                               # %cond.true.1512
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -232(%rbp)        # 8-byte Spill
	jge	.LBB99_189
# BB#188:                               # %cond.true.1521
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -240(%rbp)        # 8-byte Spill
	jmp	.LBB99_190
.LBB99_189:                             # %cond.false.1542
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -240(%rbp)        # 8-byte Spill
.LBB99_190:                             # %cond.end.1548
	movq	-240(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-232(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_203
	jmp	.LBB99_200
.LBB99_191:                             # %cond.false.1553
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_193
# BB#192:                               # %cond.true.1561
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	jmp	.LBB99_194
.LBB99_193:                             # %cond.false.1571
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
.LBB99_194:                             # %cond.end.1577
	movq	-248(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_203
	jmp	.LBB99_200
.LBB99_195:                             # %cond.false.1583
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_197
# BB#196:                               # %cond.true.1587
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_203
	jmp	.LBB99_200
.LBB99_197:                             # %cond.false.1592
	cmpq	$0, -16(%rbp)
	jge	.LBB99_199
# BB#198:                               # %cond.true.1595
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_203
	jmp	.LBB99_200
.LBB99_199:                             # %cond.false.1601
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_203
.LBB99_200:                             # %lor.lhs.false.1606
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_202
# BB#201:                               # %land.lhs.true.1613
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB99_203
.LBB99_202:                             # %lor.lhs.false.1618
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB99_207
.LBB99_203:                             # %cond.true.1623
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_205
# BB#204:                               # %cond.true.1628
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	jmp	.LBB99_206
.LBB99_205:                             # %cond.false.1631
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
.LBB99_206:                             # %cond.end.1636
	movq	-256(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_207:                             # %cond.false.1638
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_209
# BB#208:                               # %cond.true.1643
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	jmp	.LBB99_210
.LBB99_209:                             # %cond.false.1646
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
.LBB99_210:                             # %cond.end.1651
	movq	-264(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_211:                             # %cond.false.1653
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_213
# BB#212:                               # %cond.true.1661
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -272(%rbp)        # 8-byte Spill
	jmp	.LBB99_214
.LBB99_213:                             # %cond.false.1682
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
.LBB99_214:                             # %cond.end.1688
	movq	-272(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_224
# BB#215:                               # %cond.true.1692
	cmpq	$0, -16(%rbp)
	jge	.LBB99_220
# BB#216:                               # %cond.true.1695
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -280(%rbp)        # 8-byte Spill
	jge	.LBB99_218
# BB#217:                               # %cond.true.1704
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -288(%rbp)        # 8-byte Spill
	jmp	.LBB99_219
.LBB99_218:                             # %cond.false.1725
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -288(%rbp)        # 8-byte Spill
.LBB99_219:                             # %cond.end.1731
	movq	-288(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-280(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_232
	jmp	.LBB99_229
.LBB99_220:                             # %cond.false.1736
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_222
# BB#221:                               # %cond.true.1744
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	jmp	.LBB99_223
.LBB99_222:                             # %cond.false.1754
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
.LBB99_223:                             # %cond.end.1760
	movq	-296(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_232
	jmp	.LBB99_229
.LBB99_224:                             # %cond.false.1766
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_226
# BB#225:                               # %cond.true.1770
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_232
	jmp	.LBB99_229
.LBB99_226:                             # %cond.false.1775
	cmpq	$0, -16(%rbp)
	jge	.LBB99_228
# BB#227:                               # %cond.true.1778
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_232
	jmp	.LBB99_229
.LBB99_228:                             # %cond.false.1784
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_232
.LBB99_229:                             # %lor.lhs.false.1789
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_231
# BB#230:                               # %land.lhs.true.1796
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB99_232
.LBB99_231:                             # %lor.lhs.false.1801
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB99_236
.LBB99_232:                             # %cond.true.1806
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_234
# BB#233:                               # %cond.true.1811
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	jmp	.LBB99_235
.LBB99_234:                             # %cond.false.1814
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
.LBB99_235:                             # %cond.end.1819
	movq	-304(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_236:                             # %cond.false.1821
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_238
# BB#237:                               # %cond.true.1826
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	jmp	.LBB99_239
.LBB99_238:                             # %cond.false.1829
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
.LBB99_239:                             # %cond.end.1834
	movq	-312(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_240:                             # %cond.false.1836
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB99_241
	jmp	.LBB99_270
.LBB99_241:                             # %cond.true.1837
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_243
# BB#242:                               # %cond.true.1845
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	jmp	.LBB99_244
.LBB99_243:                             # %cond.false.1866
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
.LBB99_244:                             # %cond.end.1872
	movq	-320(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_254
# BB#245:                               # %cond.true.1876
	cmpq	$0, -16(%rbp)
	jge	.LBB99_250
# BB#246:                               # %cond.true.1879
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -328(%rbp)        # 8-byte Spill
	jge	.LBB99_248
# BB#247:                               # %cond.true.1888
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -336(%rbp)        # 8-byte Spill
	jmp	.LBB99_249
.LBB99_248:                             # %cond.false.1909
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
.LBB99_249:                             # %cond.end.1915
	movq	-336(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-328(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_262
	jmp	.LBB99_259
.LBB99_250:                             # %cond.false.1920
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_252
# BB#251:                               # %cond.true.1928
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
	jmp	.LBB99_253
.LBB99_252:                             # %cond.false.1938
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -344(%rbp)        # 8-byte Spill
.LBB99_253:                             # %cond.end.1944
	movq	-344(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_262
	jmp	.LBB99_259
.LBB99_254:                             # %cond.false.1950
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_256
# BB#255:                               # %cond.true.1954
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_262
	jmp	.LBB99_259
.LBB99_256:                             # %cond.false.1959
	cmpq	$0, -16(%rbp)
	jge	.LBB99_258
# BB#257:                               # %cond.true.1962
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_262
	jmp	.LBB99_259
.LBB99_258:                             # %cond.false.1968
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_262
.LBB99_259:                             # %lor.lhs.false.1973
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_261
# BB#260:                               # %land.lhs.true.1980
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB99_262
.LBB99_261:                             # %lor.lhs.false.1985
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB99_266
.LBB99_262:                             # %cond.true.1990
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_264
# BB#263:                               # %cond.true.1995
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
	jmp	.LBB99_265
.LBB99_264:                             # %cond.false.1998
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
.LBB99_265:                             # %cond.end.2003
	movq	-352(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_266:                             # %cond.false.2005
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_268
# BB#267:                               # %cond.true.2010
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
	jmp	.LBB99_269
.LBB99_268:                             # %cond.false.2013
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -360(%rbp)        # 8-byte Spill
.LBB99_269:                             # %cond.end.2018
	movq	-360(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_270:                             # %cond.false.2020
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_272
# BB#271:                               # %cond.true.2028
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -368(%rbp)        # 8-byte Spill
	jmp	.LBB99_273
.LBB99_272:                             # %cond.false.2049
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -368(%rbp)        # 8-byte Spill
.LBB99_273:                             # %cond.end.2055
	movq	-368(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB99_283
# BB#274:                               # %cond.true.2059
	cmpq	$0, -16(%rbp)
	jge	.LBB99_279
# BB#275:                               # %cond.true.2062
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -376(%rbp)        # 8-byte Spill
	jge	.LBB99_277
# BB#276:                               # %cond.true.2071
	xorl	%eax, %eax
	imulq	$0, -16(%rbp), %rcx
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edi
	subl	%edi, %eax
	movslq	%eax, %rcx
	imulq	$0, -16(%rbp), %rdx
	movq	-8(%rbp), %r8
	addq	480(%r8), %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	jmp	.LBB99_278
.LBB99_277:                             # %cond.false.2092
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
.LBB99_278:                             # %cond.end.2098
	movq	-384(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-376(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB99_291
	jmp	.LBB99_288
.LBB99_279:                             # %cond.false.2103
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_281
# BB#280:                               # %cond.true.2111
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	jmp	.LBB99_282
.LBB99_281:                             # %cond.false.2121
	imulq	$0, -16(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
.LBB99_282:                             # %cond.end.2127
	movq	-392(%rbp), %rax        # 8-byte Reload
	subq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	cmpq	480(%rcx), %rax
	jl	.LBB99_291
	jmp	.LBB99_288
.LBB99_283:                             # %cond.false.2133
	movq	-8(%rbp), %rax
	cmpq	$0, 480(%rax)
	jge	.LBB99_285
# BB#284:                               # %cond.true.2137
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_291
	jmp	.LBB99_288
.LBB99_285:                             # %cond.false.2142
	cmpq	$0, -16(%rbp)
	jge	.LBB99_287
# BB#286:                               # %cond.true.2145
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB99_291
	jmp	.LBB99_288
.LBB99_287:                             # %cond.false.2151
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jl	.LBB99_291
.LBB99_288:                             # %lor.lhs.false.2156
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB99_290
# BB#289:                               # %land.lhs.true.2163
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB99_291
.LBB99_290:                             # %lor.lhs.false.2168
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB99_295
.LBB99_291:                             # %cond.true.2173
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_293
# BB#292:                               # %cond.true.2178
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
	jmp	.LBB99_294
.LBB99_293:                             # %cond.false.2181
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -400(%rbp)        # 8-byte Spill
.LBB99_294:                             # %cond.end.2186
	movq	-400(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -24(%rbp)
	testb	$1, %cl
	jne	.LBB99_300
	jmp	.LBB99_299
.LBB99_295:                             # %cond.false.2188
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-8(%rbp), %rcx
	movq	480(%rcx), %rcx
	addq	-16(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB99_297
# BB#296:                               # %cond.true.2193
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	jmp	.LBB99_298
.LBB99_297:                             # %cond.false.2196
	movq	-8(%rbp), %rax
	movq	480(%rax), %rax
	addq	-16(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
.LBB99_298:                             # %cond.end.2201
	movq	-408(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -24(%rbp)
	testb	$1, %dl
	jne	.LBB99_300
.LBB99_299:                             # %lor.lhs.false.2203
	movq	$-1, %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB99_301
.LBB99_300:                             # %if.then
	callq	string_overflow
.LBB99_301:                             # %if.end
	movq	-8(%rbp), %rax
	movq	496(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	xrealloc
	movq	-8(%rbp), %rsi
	movq	%rax, 496(%rsi)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rsi
	movq	%rax, 480(%rsi)
	addq	$416, %rsp              # imm = 0x1A0
	popq	%rbp
	retq
.Lfunc_end99:
	.size	coding_alloc_by_realloc, .Lfunc_end99-coding_alloc_by_realloc
	.cfi_endproc

	.align	16, 0x90
	.type	coding_set_destination,@function
coding_set_destination:                 # @coding_set_destination
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp301:
	.cfi_def_cfa_offset 16
.Ltmp302:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp303:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	488(%rdi), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB100_1
	jmp	.LBB100_6
.LBB100_1:                              # %if.then
	movq	-8(%rbp), %rax
	movq	448(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB100_2
	jmp	.LBB100_4
.LBB100_2:                              # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpq	$0, 416(%rax)
	jge	.LBB100_4
# BB#3:                                 # %if.then.2
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	-8(%rbp), %rsi
	addq	472(%rsi), %rdx
	addq	$-1, %rdx
	movq	-8(%rbp), %rsi
	movq	%rdx, 496(%rsi)
	movq	current_buffer, %rdx
	movq	720(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	addq	24(%rsi), %rdx
	movq	current_buffer, %rsi
	movq	720(%rsi), %rsi
	addq	40(%rsi), %rdx
	addq	$-1, %rdx
	movq	-8(%rbp), %rsi
	movq	440(%rsi), %rsi
	movq	-8(%rbp), %rdi
	subq	400(%rdi), %rsi
	subq	%rsi, %rcx
	addq	%rcx, %rdx
	movq	-8(%rbp), %rcx
	movq	496(%rcx), %rcx
	subq	%rcx, %rdx
	movq	-8(%rbp), %rcx
	movq	%rdx, 480(%rcx)
	jmp	.LBB100_5
.LBB100_4:                              # %if.else
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdi
	addq	472(%rdi), %rax
	addq	$-1, %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 496(%rdi)
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rdi
	movq	488(%rdi), %rdi
	movq	%rax, -16(%rbp)         # 8-byte Spill
	callq	XBUFFER
	movq	720(%rax), %rax
	movq	-16(%rbp), %rdi         # 8-byte Reload
	addq	24(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rdi, -24(%rbp)         # 8-byte Spill
	movq	%rax, %rdi
	callq	XBUFFER
	movq	720(%rax), %rax
	movq	-24(%rbp), %rdi         # 8-byte Reload
	addq	40(%rax), %rdi
	addq	$-1, %rdi
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	subq	%rax, %rdi
	movq	-8(%rbp), %rax
	movq	%rdi, 480(%rax)
.LBB100_5:                              # %if.end
	jmp	.LBB100_7
.LBB100_6:                              # %if.else.41
	jmp	.LBB100_7
.LBB100_7:                              # %if.end.42
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end100:
	.size	coding_set_destination, .Lfunc_end100-coding_set_destination
	.cfi_endproc

	.align	16, 0x90
	.type	finish_composition,@function
finish_composition:                     # @finish_composition
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp304:
	.cfi_def_cfa_offset 16
.Ltmp305:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp306:
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	subl	12(%rsi), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rsi
	movq	-8(%rbp), %rdi
	movl	$27, (%rdi,%rsi,4)
	movq	-16(%rbp), %rsi
	cmpl	$0, 4(%rsi)
	jne	.LBB101_2
# BB#1:                                 # %cond.true
	movl	$48, %eax
	movl	%eax, -40(%rbp)         # 4-byte Spill
	jmp	.LBB101_6
.LBB101_2:                              # %cond.false
	movq	-16(%rbp), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB101_4
# BB#3:                                 # %cond.true.3
	movl	$50, %eax
	movl	%eax, -44(%rbp)         # 4-byte Spill
	jmp	.LBB101_5
.LBB101_4:                              # %cond.false.4
	movl	$52, %eax
	movl	$51, %ecx
	movq	-16(%rbp), %rdx
	cmpl	$2, 4(%rdx)
	cmovel	%ecx, %eax
	movl	%eax, -44(%rbp)         # 4-byte Spill
.LBB101_5:                              # %cond.end
	movl	-44(%rbp), %eax         # 4-byte Reload
	movl	%eax, -40(%rbp)         # 4-byte Spill
.LBB101_6:                              # %cond.end.8
	movl	-40(%rbp), %eax         # 4-byte Reload
	movl	-20(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -20(%rbp)
	movslq	%ecx, %rsi
	movq	-8(%rbp), %rdi
	movl	%eax, (%rdi,%rsi,4)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rsi
	movq	-8(%rbp), %rdi
	movl	$-2, (%rdi,%rsi,4)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rsi
	movq	-8(%rbp), %rdi
	movl	$0, (%rdi,%rsi,4)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rsi
	movq	-8(%rbp), %rdi
	movl	$-1, (%rdi,%rsi,4)
	movq	-16(%rbp), %rsi
	movl	16(%rsi), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rsi
	cmpl	$1, 4(%rsi)
	jb	.LBB101_26
# BB#7:                                 # %if.then
	jmp	.LBB101_8
.LBB101_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jge	.LBB101_25
# BB#9:                                 # %for.body
                                        #   in Loop: Header=BB101_8 Depth=1
	movslq	-20(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	(%rcx,%rax,4), %edx
	movl	%edx, -28(%rbp)
	cmpl	$-2, -28(%rbp)
	jne	.LBB101_20
# BB#10:                                # %if.then.28
                                        #   in Loop: Header=BB101_8 Depth=1
	jmp	.LBB101_11
.LBB101_11:                             # %do.body
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	$12, %eax
	movl	$256, %ecx              # imm = 0x100
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rsi
	movq	-8(%rbp), %rdi
	movl	(%rdi,%rsi,4), %edx
	movl	%eax, -48(%rbp)         # 4-byte Spill
	movl	%edx, %eax
	cltd
	idivl	%ecx
	movl	%edx, %eax
	cltd
	movl	-48(%rbp), %r8d         # 4-byte Reload
	idivl	%r8d
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rsi
	movq	-8(%rbp), %rdi
	movl	(%rdi,%rsi,4), %eax
	cltd
	idivl	%ecx
	movl	%edx, %eax
	cltd
	idivl	%r8d
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rsi
	movq	-8(%rbp), %rdi
	cmpl	$256, (%rdi,%rsi,4)     # imm = 0x100
	jge	.LBB101_17
# BB#12:                                # %if.then.40
                                        #   in Loop: Header=BB101_8 Depth=1
	cmpl	$10, -32(%rbp)
	jne	.LBB101_14
# BB#13:                                # %if.then.42
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	$4, -32(%rbp)
.LBB101_14:                             # %if.end
                                        #   in Loop: Header=BB101_8 Depth=1
	cmpl	$10, -36(%rbp)
	jne	.LBB101_16
# BB#15:                                # %if.then.44
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	$4, -36(%rbp)
.LBB101_16:                             # %if.end.45
                                        #   in Loop: Header=BB101_8 Depth=1
	imull	$9, -32(%rbp), %eax
	addl	$32, %eax
	addl	-36(%rbp), %eax
	movslq	-20(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movq	-8(%rbp), %rdx
	movl	$-1, (%rdx,%rcx,4)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB101_18
.LBB101_17:                             # %if.else
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	-32(%rbp), %eax
	addl	$113, %eax
	movslq	-20(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$32, %eax
	movl	-20(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -24(%rbp)
.LBB101_18:                             # %if.end.62
                                        #   in Loop: Header=BB101_8 Depth=1
	jmp	.LBB101_19
.LBB101_19:                             # %do.end
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_23
.LBB101_20:                             # %if.else.64
                                        #   in Loop: Header=BB101_8 Depth=1
	cmpl	$-1, -28(%rbp)
	jne	.LBB101_22
# BB#21:                                # %if.then.66
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rdx
	movq	-8(%rbp), %rsi
	movl	$27, (%rsi,%rdx,4)
	movslq	-20(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movl	$48, (%rsi,%rdx,4)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -24(%rbp)
.LBB101_22:                             # %if.end.73
                                        #   in Loop: Header=BB101_8 Depth=1
	jmp	.LBB101_23
.LBB101_23:                             # %if.end.74
                                        #   in Loop: Header=BB101_8 Depth=1
	jmp	.LBB101_24
.LBB101_24:                             # %for.inc
                                        #   in Loop: Header=BB101_8 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_8
.LBB101_25:                             # %for.end
	jmp	.LBB101_26
.LBB101_26:                             # %if.end.76
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
	movl	-24(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end101:
	.size	finish_composition, .Lfunc_end101-finish_composition
	.cfi_endproc

	.align	16, 0x90
	.type	coding_change_source,@function
coding_change_source:                   # @coding_change_source
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp307:
	.cfi_def_cfa_offset 16
.Ltmp308:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp309:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-16(%rbp), %rax
	subq	%rax, %rdi
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end102:
	.size	coding_change_source, .Lfunc_end102-coding_change_source
	.cfi_endproc

	.align	16, 0x90
	.type	coding_set_source,@function
coding_set_source:                      # @coding_set_source
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp310:
	.cfi_def_cfa_offset 16
.Ltmp311:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp312:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	448(%rdi), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB103_1
	jmp	.LBB103_8
.LBB103_1:                              # %if.then
	movq	-8(%rbp), %rax
	movq	448(%rax), %rdi
	callq	XBUFFER
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 416(%rax)
	jge	.LBB103_3
# BB#2:                                 # %if.then.3
	movq	-16(%rbp), %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	720(%rcx), %rcx
	addq	24(%rcx), %rax
	movq	-16(%rbp), %rcx
	movq	720(%rcx), %rcx
	addq	40(%rcx), %rax
	addq	$-1, %rax
	movq	-8(%rbp), %rcx
	addq	424(%rcx), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 456(%rcx)
	jmp	.LBB103_7
.LBB103_3:                              # %if.else
	movq	-16(%rbp), %rax
	movq	720(%rax), %rax
	movq	(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	424(%rcx), %rax
	addq	$-1, %rax
	movq	-8(%rbp), %rcx
	movq	424(%rcx), %rcx
	movq	-16(%rbp), %rdx
	movq	720(%rdx), %rdx
	cmpq	24(%rdx), %rcx
	movq	%rax, -24(%rbp)         # 8-byte Spill
	jl	.LBB103_5
# BB#4:                                 # %cond.true
	movq	-16(%rbp), %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)         # 8-byte Spill
	jmp	.LBB103_6
.LBB103_5:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -32(%rbp)         # 8-byte Spill
	jmp	.LBB103_6
.LBB103_6:                              # %cond.end
	movq	-32(%rbp), %rax         # 8-byte Reload
	movq	-24(%rbp), %rcx         # 8-byte Reload
	addq	%rax, %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, 456(%rax)
.LBB103_7:                              # %if.end
	jmp	.LBB103_12
.LBB103_8:                              # %if.else.22
	movq	-8(%rbp), %rax
	movq	448(%rax), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB103_9
	jmp	.LBB103_10
.LBB103_9:                              # %if.then.25
	movq	-8(%rbp), %rax
	movq	448(%rax), %rdi
	callq	SDATA
	movq	-8(%rbp), %rdi
	addq	424(%rdi), %rax
	movq	-8(%rbp), %rdi
	movq	%rax, 456(%rdi)
	jmp	.LBB103_11
.LBB103_10:                             # %if.else.31
	jmp	.LBB103_11
.LBB103_11:                             # %if.end.32
	jmp	.LBB103_12
.LBB103_12:                             # %if.end.33
	addq	$32, %rsp
	popq	%rbp
	retq
.Lfunc_end103:
	.size	coding_set_source, .Lfunc_end103-coding_set_source
	.cfi_endproc

	.align	16, 0x90
	.type	encode_designation_at_bol,@function
encode_designation_at_bol:              # @encode_designation_at_bol
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp313:
	.cfi_def_cfa_offset 16
.Ltmp314:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp315:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %r8b
	andb	$1, %r8b
	movb	%r8b, -89(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	xorl	%r9d, %r9d
	movl	%r9d, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$4, %r9d
	movl	%r9d, %esi
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rdi
	callq	AREF
	movl	$580, %edi              # imm = 0x244
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-160(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB104_2
# BB#1:                                 # %if.then
	movq	Viso_2022_charset_list, %rax
	movq	%rax, -112(%rbp)
.LBB104_2:                              # %if.end
	movl	$0, -76(%rbp)
.LBB104_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -76(%rbp)
	jge	.LBB104_6
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB104_3 Depth=1
	movslq	-76(%rbp), %rax
	movl	$-1, -64(%rbp,%rax,4)
# BB#5:                                 # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB104_3
.LBB104_6:                              # %for.end
	jmp	.LBB104_7
.LBB104_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-16(%rbp), %rdx
	cmpq	-24(%rbp), %rdx
	movb	%cl, -161(%rbp)         # 1-byte Spill
	jae	.LBB104_9
# BB#8:                                 # %land.rhs
                                        #   in Loop: Header=BB104_7 Depth=1
	cmpl	$4, -72(%rbp)
	setl	%al
	movb	%al, -161(%rbp)         # 1-byte Spill
.LBB104_9:                              # %land.end
                                        #   in Loop: Header=BB104_7 Depth=1
	movb	-161(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB104_10
	jmp	.LBB104_22
.LBB104_10:                             # %while.body
                                        #   in Loop: Header=BB104_7 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -16(%rbp)
	movl	(%rax), %edx
	movl	%edx, -68(%rbp)
	cmpl	$10, -68(%rbp)
	jne	.LBB104_12
# BB#11:                                # %if.then.10
	jmp	.LBB104_22
.LBB104_12:                             # %if.end.11
                                        #   in Loop: Header=BB104_7 Depth=1
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	-68(%rbp), %edi
	movq	-112(%rbp), %rsi
	callq	char_charset
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	movl	%edi, -116(%rbp)
	movl	-116(%rbp), %edi
	movq	-8(%rbp), %rax
	cmpl	12(%rax), %edi
	jg	.LBB104_17
# BB#13:                                # %cond.true
                                        #   in Loop: Header=BB104_7 Depth=1
	movslq	-116(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	352(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	je	.LBB104_15
# BB#14:                                # %cond.true.19
                                        #   in Loop: Header=BB104_7 Depth=1
	movslq	-116(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	352(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	movl	%edx, -168(%rbp)        # 4-byte Spill
	jmp	.LBB104_16
.LBB104_15:                             # %cond.false
                                        #   in Loop: Header=BB104_7 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -168(%rbp)        # 4-byte Spill
	jmp	.LBB104_16
.LBB104_16:                             # %cond.end
                                        #   in Loop: Header=BB104_7 Depth=1
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB104_18
.LBB104_17:                             # %cond.false.24
                                        #   in Loop: Header=BB104_7 Depth=1
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -172(%rbp)        # 4-byte Spill
	jmp	.LBB104_18
.LBB104_18:                             # %cond.end.25
                                        #   in Loop: Header=BB104_7 Depth=1
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, -76(%rbp)
	cmpl	$0, -76(%rbp)
	jl	.LBB104_21
# BB#19:                                # %land.lhs.true
                                        #   in Loop: Header=BB104_7 Depth=1
	movslq	-76(%rbp), %rax
	cmpl	$0, -64(%rbp,%rax,4)
	jge	.LBB104_21
# BB#20:                                # %if.then.33
                                        #   in Loop: Header=BB104_7 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-116(%rbp), %eax
	movslq	-76(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
.LBB104_21:                             # %if.end.37
                                        #   in Loop: Header=BB104_7 Depth=1
	jmp	.LBB104_7
.LBB104_22:                             # %while.end
	cmpl	$0, -72(%rbp)
	je	.LBB104_83
# BB#23:                                # %if.then.38
	movl	$0, -76(%rbp)
.LBB104_24:                             # %for.cond.39
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -76(%rbp)
	jge	.LBB104_82
# BB#25:                                # %for.body.42
                                        #   in Loop: Header=BB104_24 Depth=1
	movslq	-76(%rbp), %rax
	cmpl	$0, -64(%rbp,%rax,4)
	jl	.LBB104_80
# BB#26:                                # %land.lhs.true.47
                                        #   in Loop: Header=BB104_24 Depth=1
	movslq	-76(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	28(%rcx,%rax,4), %edx
	movslq	-76(%rbp), %rax
	cmpl	-64(%rbp,%rax,4), %edx
	je	.LBB104_80
# BB#27:                                # %if.then.54
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_28
.LBB104_28:                             # %do.body
                                        #   in Loop: Header=BB104_24 Depth=1
	movabsq	$.L.str.109, %rax
	movabsq	$.L.str.108, %rcx
	movq	charset_table, %rdx
	movslq	-76(%rbp), %rsi
	movslq	-64(%rbp,%rsi,4), %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rdx
	movl	92(%rdx), %edi
	movb	%dil, %r8b
	movb	%r8b, -117(%rbp)
	movq	%rcx, -128(%rbp)
	movq	%rax, -136(%rbp)
	movl	$-1, -140(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	andl	$128, %edi
	cmpl	$0, %edi
	je	.LBB104_30
# BB#29:                                # %if.then.61
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	movslq	-64(%rbp,%rcx,4), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	96(%rax), %edx
	movl	%edx, -140(%rbp)
.LBB104_30:                             # %if.end.66
                                        #   in Loop: Header=BB104_24 Depth=1
	cmpl	$0, -140(%rbp)
	jl	.LBB104_52
# BB#31:                                # %if.then.69
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_32
.LBB104_32:                             # %do.body.70
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$27, (%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$38, (%rax)
# BB#33:                                # %do.end
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_34
.LBB104_34:                             # %do.body.73
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	testb	$1, -89(%rbp)
	je	.LBB104_49
# BB#35:                                # %if.then.76
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-140(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -144(%rbp)
	cmpl	$128, -144(%rbp)
	jb	.LBB104_37
# BB#36:                                # %if.then.80
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-144(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -144(%rbp)
.LBB104_37:                             # %if.end.82
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_38
.LBB104_38:                             # %do.body.83
                                        #   in Loop: Header=BB104_24 Depth=1
	cmpl	$127, -144(%rbp)
	ja	.LBB104_40
# BB#39:                                # %if.then.86
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-144(%rbp), %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB104_47
.LBB104_40:                             # %if.else
                                        #   in Loop: Header=BB104_24 Depth=1
	cmpl	$2047, -144(%rbp)       # imm = 0x7FF
	ja	.LBB104_42
# BB#41:                                # %if.then.91
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-144(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB104_46
.LBB104_42:                             # %if.else.98
                                        #   in Loop: Header=BB104_24 Depth=1
	cmpl	$65535, -144(%rbp)      # imm = 0xFFFF
	ja	.LBB104_44
# BB#43:                                # %if.then.101
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-144(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-144(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB104_45
.LBB104_44:                             # %if.else.115
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-144(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	char_string
	movq	-32(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -32(%rbp)
.LBB104_45:                             # %if.end.119
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_46
.LBB104_46:                             # %if.end.120
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_47
.LBB104_47:                             # %if.end.121
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_48
.LBB104_48:                             # %do.end.122
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_50
.LBB104_49:                             # %if.else.123
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-140(%rbp), %eax
	addl	$64, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
.LBB104_50:                             # %if.end.127
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_51
.LBB104_51:                             # %do.end.128
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_52
.LBB104_52:                             # %if.end.129
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_53
.LBB104_53:                             # %do.body.130
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$27, (%rax)
# BB#54:                                # %do.end.133
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	movslq	-64(%rbp,%rcx,4), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	cmpl	$1, 16(%rax)
	jne	.LBB104_61
# BB#55:                                # %if.then.140
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	movslq	-64(%rbp,%rcx,4), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	shrb	$1, %dl
	andb	$1, %dl
	testb	$1, %dl
	jne	.LBB104_57
# BB#56:                                # %if.then.149
                                        #   in Loop: Header=BB104_24 Depth=1
	movslq	-76(%rbp), %rax
	movq	-128(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -148(%rbp)
	jmp	.LBB104_58
.LBB104_57:                             # %if.else.153
                                        #   in Loop: Header=BB104_24 Depth=1
	movslq	-76(%rbp), %rax
	movq	-136(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -148(%rbp)
.LBB104_58:                             # %if.end.157
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_59
.LBB104_59:                             # %do.body.158
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	movl	-148(%rbp), %ecx
	movb	%cl, %dl
	movq	-32(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%dl, (%rax)
# BB#60:                                # %do.end.162
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_76
.LBB104_61:                             # %if.else.163
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_62
.LBB104_62:                             # %do.body.164
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	$36, (%rax)
# BB#63:                                # %do.end.167
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	movslq	-64(%rbp,%rcx,4), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	shrb	$1, %dl
	andb	$1, %dl
	testb	$1, %dl
	jne	.LBB104_72
# BB#64:                                # %if.then.177
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	.LBB104_68
# BB#65:                                # %lor.lhs.false
                                        #   in Loop: Header=BB104_24 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB104_68
# BB#66:                                # %lor.lhs.false.185
                                        #   in Loop: Header=BB104_24 Depth=1
	movzbl	-117(%rbp), %eax
	cmpl	$64, %eax
	jl	.LBB104_68
# BB#67:                                # %lor.lhs.false.189
                                        #   in Loop: Header=BB104_24 Depth=1
	movzbl	-117(%rbp), %eax
	cmpl	$66, %eax
	jle	.LBB104_71
.LBB104_68:                             # %if.then.193
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_69
.LBB104_69:                             # %do.body.194
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	movslq	-76(%rbp), %rax
	movq	-128(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	%dl, (%rax)
# BB#70:                                # %do.end.199
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_71
.LBB104_71:                             # %if.end.200
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_75
.LBB104_72:                             # %if.else.201
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_73
.LBB104_73:                             # %do.body.202
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	movslq	-76(%rbp), %rax
	movq	-136(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	%dl, (%rax)
# BB#74:                                # %do.end.207
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_75
.LBB104_75:                             # %if.end.208
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_76
.LBB104_76:                             # %if.end.209
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_77
.LBB104_77:                             # %do.body.210
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -88(%rbp)
	movb	-117(%rbp), %cl
	movq	-32(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	movb	%cl, (%rax)
# BB#78:                                # %do.end.213
                                        #   in Loop: Header=BB104_24 Depth=1
	movq	charset_table, %rax
	movslq	-76(%rbp), %rcx
	movslq	-64(%rbp,%rcx,4), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	(%rax), %edx
	movslq	-76(%rbp), %rax
	movq	-8(%rbp), %rcx
	movl	%edx, 28(%rcx,%rax,4)
# BB#79:                                # %do.end.224
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_80
.LBB104_80:                             # %if.end.225
                                        #   in Loop: Header=BB104_24 Depth=1
	jmp	.LBB104_81
.LBB104_81:                             # %for.inc.226
                                        #   in Loop: Header=BB104_24 Depth=1
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB104_24
.LBB104_82:                             # %for.end.228
	jmp	.LBB104_83
.LBB104_83:                             # %if.end.229
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	subq	%rcx, %rax
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end104:
	.size	encode_designation_at_bol, .Lfunc_end104-encode_designation_at_bol
	.cfi_endproc

	.align	16, 0x90
	.type	coding_change_destination,@function
coding_change_destination:              # @coding_change_destination
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp316:
	.cfi_def_cfa_offset 16
.Ltmp317:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp318:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	movq	%rdi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_destination
	movq	-8(%rbp), %rdi
	movq	496(%rdi), %rdi
	movq	-16(%rbp), %rax
	subq	%rax, %rdi
	movq	%rdi, %rax
	addq	$16, %rsp
	popq	%rbp
	retq
.Lfunc_end105:
	.size	coding_change_destination, .Lfunc_end105-coding_change_destination
	.cfi_endproc

	.align	16, 0x90
	.type	encode_invocation_designation,@function
encode_invocation_designation:          # @encode_invocation_designation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp319:
	.cfi_def_cfa_offset 16
.Ltmp320:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp321:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	shrl	$20, %eax
	andl	$1, %eax
	movb	%al, %r8b
	andb	$1, %r8b
	movb	%r8b, -33(%rbp)
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -48(%rbp)
	movq	-8(%rbp), %rcx
	movl	(%rcx), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -52(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -52(%rbp)
	jge	.LBB106_6
# BB#2:                                 # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-56(%rbp), %eax
	movslq	-52(%rbp), %rcx
	movq	-16(%rbp), %rdx
	cmpl	28(%rdx,%rcx,4), %eax
	jne	.LBB106_4
# BB#3:                                 # %if.then
	jmp	.LBB106_6
.LBB106_4:                              # %if.end
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_5
.LBB106_5:                              # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB106_1
.LBB106_6:                              # %for.end
	cmpl	$4, -52(%rbp)
	jl	.LBB106_68
# BB#7:                                 # %if.then.4
	movl	-56(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	12(%rcx), %eax
	jg	.LBB106_12
# BB#8:                                 # %cond.true
	movslq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	352(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	cmpl	$255, %edx
	je	.LBB106_10
# BB#9:                                 # %cond.true.10
	movslq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	352(%rcx), %rcx
	movzbl	(%rcx,%rax), %edx
	movl	%edx, -104(%rbp)        # 4-byte Spill
	jmp	.LBB106_11
.LBB106_10:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -104(%rbp)        # 4-byte Spill
	jmp	.LBB106_11
.LBB106_11:                             # %cond.end
	movl	-104(%rbp), %eax        # 4-byte Reload
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB106_13
.LBB106_12:                             # %cond.false.15
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB106_13
.LBB106_13:                             # %cond.end.16
	movl	-108(%rbp), %eax        # 4-byte Reload
	movl	%eax, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jge	.LBB106_15
# BB#14:                                # %if.then.20
	movl	$0, -52(%rbp)
.LBB106_15:                             # %if.end.21
	jmp	.LBB106_16
.LBB106_16:                             # %do.body
	movabsq	$.L.str.109, %rax
	movabsq	$.L.str.108, %rcx
	movq	-8(%rbp), %rdx
	movl	92(%rdx), %esi
	movb	%sil, %dil
	movb	%dil, -57(%rbp)
	movq	%rcx, -72(%rbp)
	movq	%rax, -80(%rbp)
	movl	$-1, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %esi
	andl	$128, %esi
	cmpl	$0, %esi
	je	.LBB106_18
# BB#17:                                # %if.then.25
	movq	-8(%rbp), %rax
	movl	96(%rax), %ecx
	movl	%ecx, -84(%rbp)
.LBB106_18:                             # %if.end.26
	cmpl	$0, -84(%rbp)
	jl	.LBB106_40
# BB#19:                                # %if.then.29
	jmp	.LBB106_20
.LBB106_20:                             # %do.body.30
	movq	-48(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$27, (%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$38, (%rax)
# BB#21:                                # %do.end
	jmp	.LBB106_22
.LBB106_22:                             # %do.body.32
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	testb	$1, -33(%rbp)
	je	.LBB106_37
# BB#23:                                # %if.then.35
	movl	-84(%rbp), %eax
	addl	$64, %eax
	movl	%eax, -88(%rbp)
	cmpl	$128, -88(%rbp)
	jb	.LBB106_25
# BB#24:                                # %if.then.39
	movl	-88(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -88(%rbp)
.LBB106_25:                             # %if.end.41
	jmp	.LBB106_26
.LBB106_26:                             # %do.body.42
	cmpl	$127, -88(%rbp)
	ja	.LBB106_28
# BB#27:                                # %if.then.45
	movl	-88(%rbp), %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_35
.LBB106_28:                             # %if.else
	cmpl	$2047, -88(%rbp)        # imm = 0x7FF
	ja	.LBB106_30
# BB#29:                                # %if.then.50
	movl	-88(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-88(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_34
.LBB106_30:                             # %if.else.57
	cmpl	$65535, -88(%rbp)       # imm = 0xFFFF
	ja	.LBB106_32
# BB#31:                                # %if.then.60
	movl	-88(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-88(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-88(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_33
.LBB106_32:                             # %if.else.74
	movl	-88(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	char_string
	movq	-24(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -24(%rbp)
.LBB106_33:                             # %if.end.75
	jmp	.LBB106_34
.LBB106_34:                             # %if.end.76
	jmp	.LBB106_35
.LBB106_35:                             # %if.end.77
	jmp	.LBB106_36
.LBB106_36:                             # %do.end.78
	jmp	.LBB106_38
.LBB106_37:                             # %if.else.79
	movl	-84(%rbp), %eax
	addl	$64, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
.LBB106_38:                             # %if.end.83
	jmp	.LBB106_39
.LBB106_39:                             # %do.end.84
	jmp	.LBB106_40
.LBB106_40:                             # %if.end.85
	jmp	.LBB106_41
.LBB106_41:                             # %do.body.86
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$27, (%rax)
# BB#42:                                # %do.end.89
	movq	-8(%rbp), %rax
	cmpl	$1, 16(%rax)
	jne	.LBB106_49
# BB#43:                                # %if.then.92
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB106_45
# BB#44:                                # %if.then.97
	movslq	-52(%rbp), %rax
	movq	-72(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -92(%rbp)
	jmp	.LBB106_46
.LBB106_45:                             # %if.else.101
	movslq	-52(%rbp), %rax
	movq	-80(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	movl	%edx, -92(%rbp)
.LBB106_46:                             # %if.end.105
	jmp	.LBB106_47
.LBB106_47:                             # %do.body.106
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movl	-92(%rbp), %ecx
	movb	%cl, %dl
	movq	-24(%rbp), %rax
	movq	%rax, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%dl, (%rax)
# BB#48:                                # %do.end.110
	jmp	.LBB106_64
.LBB106_49:                             # %if.else.111
	jmp	.LBB106_50
.LBB106_50:                             # %do.body.112
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$36, (%rax)
# BB#51:                                # %do.end.115
	movq	-8(%rbp), %rax
	movb	88(%rax), %cl
	shrb	$1, %cl
	andb	$1, %cl
	testb	$1, %cl
	jne	.LBB106_60
# BB#52:                                # %if.then.121
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	jne	.LBB106_56
# BB#53:                                # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	jne	.LBB106_56
# BB#54:                                # %lor.lhs.false.129
	movzbl	-57(%rbp), %eax
	cmpl	$64, %eax
	jl	.LBB106_56
# BB#55:                                # %lor.lhs.false.133
	movzbl	-57(%rbp), %eax
	cmpl	$66, %eax
	jle	.LBB106_59
.LBB106_56:                             # %if.then.137
	jmp	.LBB106_57
.LBB106_57:                             # %do.body.138
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movslq	-52(%rbp), %rax
	movq	-72(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	%dl, (%rax)
# BB#58:                                # %do.end.143
	jmp	.LBB106_59
.LBB106_59:                             # %if.end.144
	jmp	.LBB106_63
.LBB106_60:                             # %if.else.145
	jmp	.LBB106_61
.LBB106_61:                             # %do.body.146
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movslq	-52(%rbp), %rax
	movq	-80(%rbp), %rcx
	movb	(%rcx,%rax), %dl
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	%dl, (%rax)
# BB#62:                                # %do.end.151
	jmp	.LBB106_63
.LBB106_63:                             # %if.end.152
	jmp	.LBB106_64
.LBB106_64:                             # %if.end.153
	jmp	.LBB106_65
.LBB106_65:                             # %do.body.154
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movb	-57(%rbp), %cl
	movq	-24(%rbp), %rax
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movb	%cl, (%rax)
# BB#66:                                # %do.end.157
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	movslq	-52(%rbp), %rax
	movq	-16(%rbp), %rdx
	movl	%ecx, 28(%rdx,%rax,4)
# BB#67:                                # %do.end.164
	jmp	.LBB106_68
.LBB106_68:                             # %if.end.165
	movq	-16(%rbp), %rax
	movl	20(%rax), %ecx
	cmpl	-52(%rbp), %ecx
	je	.LBB106_149
# BB#69:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movl	24(%rax), %ecx
	cmpl	-52(%rbp), %ecx
	je	.LBB106_149
# BB#70:                                # %if.then.177
	movl	-52(%rbp), %eax
	movl	%eax, %ecx
	movq	%rcx, %rdx
	subq	$3, %rdx
	movq	%rcx, -120(%rbp)        # 8-byte Spill
	movq	%rdx, -128(%rbp)        # 8-byte Spill
	ja	.LBB106_147
# BB#150:                               # %if.then.177
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	.LJTI106_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB106_71:                             # %sw.bb
	jmp	.LBB106_72
.LBB106_72:                             # %do.body.178
	jmp	.LBB106_73
.LBB106_73:                             # %do.body.179
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$15, (%rax)
# BB#74:                                # %do.end.182
	movq	-16(%rbp), %rax
	movl	$0, 20(%rax)
# BB#75:                                # %do.end.187
	jmp	.LBB106_148
.LBB106_76:                             # %sw.bb.188
	jmp	.LBB106_77
.LBB106_77:                             # %do.body.189
	jmp	.LBB106_78
.LBB106_78:                             # %do.body.190
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$14, (%rax)
# BB#79:                                # %do.end.193
	movq	-16(%rbp), %rax
	movl	$1, 20(%rax)
# BB#80:                                # %do.end.198
	jmp	.LBB106_148
.LBB106_81:                             # %sw.bb.199
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	je	.LBB106_108
# BB#82:                                # %if.then.205
	jmp	.LBB106_83
.LBB106_83:                             # %do.body.206
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB106_87
# BB#84:                                # %if.then.212
	jmp	.LBB106_85
.LBB106_85:                             # %do.body.213
	movq	-48(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$27, (%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$78, (%rax)
# BB#86:                                # %do.end.217
	jmp	.LBB106_106
.LBB106_87:                             # %if.else.218
	jmp	.LBB106_88
.LBB106_88:                             # %do.body.219
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	testb	$1, -33(%rbp)
	je	.LBB106_103
# BB#89:                                # %if.then.222
	movl	$142, -96(%rbp)
	cmpl	$128, -96(%rbp)
	jb	.LBB106_91
# BB#90:                                # %if.then.226
	movl	-96(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -96(%rbp)
.LBB106_91:                             # %if.end.228
	jmp	.LBB106_92
.LBB106_92:                             # %do.body.229
	cmpl	$127, -96(%rbp)
	ja	.LBB106_94
# BB#93:                                # %if.then.232
	movl	-96(%rbp), %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_101
.LBB106_94:                             # %if.else.235
	cmpl	$2047, -96(%rbp)        # imm = 0x7FF
	ja	.LBB106_96
# BB#95:                                # %if.then.238
	movl	-96(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_100
.LBB106_96:                             # %if.else.247
	cmpl	$65535, -96(%rbp)       # imm = 0xFFFF
	ja	.LBB106_98
# BB#97:                                # %if.then.250
	movl	-96(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-96(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_99
.LBB106_98:                             # %if.else.264
	movl	-96(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	char_string
	movq	-24(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -24(%rbp)
.LBB106_99:                             # %if.end.268
	jmp	.LBB106_100
.LBB106_100:                            # %if.end.269
	jmp	.LBB106_101
.LBB106_101:                            # %if.end.270
	jmp	.LBB106_102
.LBB106_102:                            # %do.end.271
	jmp	.LBB106_104
.LBB106_103:                            # %if.else.272
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$-114, (%rax)
.LBB106_104:                            # %if.end.274
	jmp	.LBB106_105
.LBB106_105:                            # %do.end.275
	jmp	.LBB106_106
.LBB106_106:                            # %if.end.276
	movq	-16(%rbp), %rax
	movb	48(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 48(%rax)
# BB#107:                               # %do.end.281
	jmp	.LBB106_113
.LBB106_108:                            # %if.else.282
	jmp	.LBB106_109
.LBB106_109:                            # %do.body.283
	jmp	.LBB106_110
.LBB106_110:                            # %do.body.284
	movq	-48(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$27, (%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$110, (%rax)
# BB#111:                               # %do.end.288
	movq	-16(%rbp), %rax
	movl	$2, 20(%rax)
# BB#112:                               # %do.end.293
	jmp	.LBB106_113
.LBB106_113:                            # %if.end.294
	jmp	.LBB106_148
.LBB106_114:                            # %sw.bb.295
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	je	.LBB106_141
# BB#115:                               # %if.then.301
	jmp	.LBB106_116
.LBB106_116:                            # %do.body.302
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	.LBB106_120
# BB#117:                               # %if.then.308
	jmp	.LBB106_118
.LBB106_118:                            # %do.body.309
	movq	-48(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$27, (%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$79, (%rax)
# BB#119:                               # %do.end.313
	jmp	.LBB106_139
.LBB106_120:                            # %if.else.314
	jmp	.LBB106_121
.LBB106_121:                            # %do.body.315
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	testb	$1, -33(%rbp)
	je	.LBB106_136
# BB#122:                               # %if.then.318
	movl	$143, -100(%rbp)
	cmpl	$128, -100(%rbp)
	jb	.LBB106_124
# BB#123:                               # %if.then.322
	movl	-100(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -100(%rbp)
.LBB106_124:                            # %if.end.324
	jmp	.LBB106_125
.LBB106_125:                            # %do.body.325
	cmpl	$127, -100(%rbp)
	ja	.LBB106_127
# BB#126:                               # %if.then.328
	movl	-100(%rbp), %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_134
.LBB106_127:                            # %if.else.331
	cmpl	$2047, -100(%rbp)       # imm = 0x7FF
	ja	.LBB106_129
# BB#128:                               # %if.then.334
	movl	-100(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_133
.LBB106_129:                            # %if.else.343
	cmpl	$65535, -100(%rbp)      # imm = 0xFFFF
	ja	.LBB106_131
# BB#130:                               # %if.then.346
	movl	-100(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	movl	-100(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -24(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB106_132
.LBB106_131:                            # %if.else.360
	movl	-100(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	char_string
	movq	-24(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -24(%rbp)
.LBB106_132:                            # %if.end.364
	jmp	.LBB106_133
.LBB106_133:                            # %if.end.365
	jmp	.LBB106_134
.LBB106_134:                            # %if.end.366
	jmp	.LBB106_135
.LBB106_135:                            # %do.end.367
	jmp	.LBB106_137
.LBB106_136:                            # %if.else.368
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$-113, (%rax)
.LBB106_137:                            # %if.end.370
	jmp	.LBB106_138
.LBB106_138:                            # %do.end.371
	jmp	.LBB106_139
.LBB106_139:                            # %if.end.372
	movq	-16(%rbp), %rax
	movb	48(%rax), %cl
	andb	$-2, %cl
	orb	$1, %cl
	movb	%cl, 48(%rax)
# BB#140:                               # %do.end.379
	jmp	.LBB106_146
.LBB106_141:                            # %if.else.380
	jmp	.LBB106_142
.LBB106_142:                            # %do.body.381
	jmp	.LBB106_143
.LBB106_143:                            # %do.body.382
	movq	-48(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$27, (%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movb	$110, (%rax)
# BB#144:                               # %do.end.386
	movq	-16(%rbp), %rax
	movl	$3, 20(%rax)
# BB#145:                               # %do.end.391
	jmp	.LBB106_146
.LBB106_146:                            # %if.end.392
	jmp	.LBB106_148
.LBB106_147:                            # %sw.default
	jmp	.LBB106_148
.LBB106_148:                            # %sw.epilog
	jmp	.LBB106_149
.LBB106_149:                            # %if.end.393
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	addq	$128, %rsp
	popq	%rbp
	retq
.Lfunc_end106:
	.size	encode_invocation_designation, .Lfunc_end106-encode_invocation_designation
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI106_0:
	.quad	.LBB106_71
	.quad	.LBB106_76
	.quad	.LBB106_81
	.quad	.LBB106_114

	.text
	.align	16, 0x90
	.type	emacs_mule_finish_composition,@function
emacs_mule_finish_composition:          # @emacs_mule_finish_composition
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp322:
	.cfi_def_cfa_offset 16
.Ltmp323:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp324:
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	subl	12(%rsi), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rsi
	testb	$1, 8(%rsi)
	je	.LBB107_6
# BB#1:                                 # %land.lhs.true
	movq	-16(%rbp), %rax
	cmpl	$0, 16(%rax)
	jle	.LBB107_6
# BB#2:                                 # %if.then
	movq	-16(%rbp), %rax
	movl	16(%rax), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rax
	movq	-8(%rbp), %rsi
	movl	%ecx, (%rsi,%rax,4)
	movl	$0, -24(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB107_5
# BB#3:                                 # %land.lhs.true.3
	movq	-16(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB107_5
# BB#4:                                 # %if.then.5
	movq	-8(%rbp), %rax
	movl	-4(%rax), %ecx
	addl	$160, %ecx
	movl	%ecx, -28(%rbp)
	movl	-28(%rbp), %ecx
	addl	$4194048, %ecx          # imm = 0x3FFF00
	movq	-8(%rbp), %rax
	movl	%ecx, -8(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, -4(%rax)
	movl	$1, -24(%rbp)
.LBB107_5:                              # %if.end
	jmp	.LBB107_10
.LBB107_6:                              # %if.else
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rdx
	movq	-8(%rbp), %rsi
	movl	$4194176, (%rsi,%rdx,4) # imm = 0x3FFF80
	movq	-16(%rbp), %rdx
	cmpl	$1, 4(%rdx)
	jne	.LBB107_8
# BB#7:                                 # %if.then.15
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rdx
	movq	-8(%rbp), %rsi
	movl	$4194303, (%rsi,%rdx,4) # imm = 0x3FFFFF
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rdx
	movq	-8(%rbp), %rsi
	movl	$-3, (%rsi,%rdx,4)
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	addl	$1, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%eax, %rdx
	movq	-8(%rbp), %rsi
	movl	$0, (%rsi,%rdx,4)
	movl	$1, -24(%rbp)
	jmp	.LBB107_9
.LBB107_8:                              # %if.else.25
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rcx
	movq	-8(%rbp), %rdx
	movl	(%rdx,%rcx,4), %eax
	addl	$160, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movslq	%eax, %rcx
	movq	-8(%rbp), %rdx
	movl	(%rdx,%rcx,4), %eax
	addl	$160, %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rcx
	movl	4(%rcx), %eax
	addl	$242, %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	-20(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -20(%rbp)
	movslq	%esi, %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	-36(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	-20(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -20(%rbp)
	movslq	%esi, %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	-20(%rbp), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, -20(%rbp)
	movslq	%esi, %rcx
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
	movl	-20(%rbp), %eax
	movl	%eax, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%eax, %rcx
	movq	-8(%rbp), %rdx
	movl	$-1, (%rdx,%rcx,4)
	movl	$4, -24(%rbp)
.LBB107_9:                              # %if.end.52
	jmp	.LBB107_10
.LBB107_10:                             # %if.end.53
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
	movl	-24(%rbp), %eax
	popq	%rbp
	retq
.Lfunc_end107:
	.size	emacs_mule_finish_composition, .Lfunc_end107-emacs_mule_finish_composition
	.cfi_endproc

	.align	16, 0x90
	.type	emacs_mule_char,@function
emacs_mule_char:                        # @emacs_mule_char
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp325:
	.cfi_def_cfa_offset 16
.Ltmp326:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp327:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	-16(%rbp), %rcx
	movq	456(%rcx), %rcx
	movq	-16(%rbp), %rdx
	addq	440(%rdx), %rcx
	movq	%rcx, -64(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movq	-16(%rbp), %rcx
	movl	8(%rcx), %eax
	shrl	$19, %eax
	andl	$1, %eax
	movb	%al, %r10b
	andb	$1, %r10b
	movb	%r10b, -73(%rbp)
	movq	$0, -96(%rbp)
	movb	$0, -97(%rbp)
# BB#1:                                 # %do.body
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_5
# BB#2:                                 # %if.then
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_4
# BB#3:                                 # %if.then.2
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_4:                              # %if.end
	jmp	.LBB108_213
.LBB108_5:                              # %if.end.3
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_11
# BB#6:                                 # %land.lhs.true
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_11
# BB#7:                                 # %if.then.6
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_9
# BB#8:                                 # %if.then.10
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_10
.LBB108_9:                              # %if.else
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_10:                             # %if.end.15
	jmp	.LBB108_11
.LBB108_11:                             # %if.end.16
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#12:                                # %do.end
	cmpl	$0, -88(%rbp)
	jge	.LBB108_14
# BB#13:                                # %if.then.19
	xorl	%eax, %eax
	subl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	emacs_mule_charset, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB108_207
.LBB108_14:                             # %if.else.21
	cmpl	$160, -88(%rbp)
	jl	.LBB108_40
# BB#15:                                # %if.then.24
	movq	-56(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB108_38
# BB#16:                                # %land.lhs.true.27
	movq	-56(%rbp), %rax
	testb	$1, 8(%rax)
	je	.LBB108_38
# BB#17:                                # %if.then.30
	movq	-56(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB108_36
# BB#18:                                # %if.then.34
	cmpl	$160, -88(%rbp)
	jne	.LBB108_34
# BB#19:                                # %if.then.37
	jmp	.LBB108_20
.LBB108_20:                             # %do.body.38
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_24
# BB#21:                                # %if.then.41
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_23
# BB#22:                                # %if.then.44
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_23:                             # %if.end.45
	jmp	.LBB108_213
.LBB108_24:                             # %if.end.46
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_30
# BB#25:                                # %land.lhs.true.51
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_30
# BB#26:                                # %if.then.54
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_28
# BB#27:                                # %if.then.58
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_29
.LBB108_28:                             # %if.else.64
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_29:                             # %if.end.68
	jmp	.LBB108_30
.LBB108_30:                             # %if.end.69
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#31:                                # %do.end.71
	movl	-88(%rbp), %eax
	subl	$128, %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB108_33
# BB#32:                                # %if.then.75
	jmp	.LBB108_214
.LBB108_33:                             # %if.end.76
	jmp	.LBB108_35
.LBB108_34:                             # %if.else.77
	movl	-88(%rbp), %eax
	subl	$32, %eax
	movl	%eax, -88(%rbp)
.LBB108_35:                             # %if.end.79
	movb	$1, -97(%rbp)
	jmp	.LBB108_37
.LBB108_36:                             # %if.else.80
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	movl	%ecx, %esi
	movq	-32(%rbp), %rcx
	movl	%esi, (%rcx)
	movq	-96(%rbp), %rcx
	movl	%ecx, %esi
	movq	-40(%rbp), %rcx
	movl	%esi, (%rcx)
	subl	-88(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_215
.LBB108_37:                             # %if.end.84
	jmp	.LBB108_39
.LBB108_38:                             # %if.else.85
	jmp	.LBB108_214
.LBB108_39:                             # %if.end.86
	jmp	.LBB108_40
.LBB108_40:                             # %if.end.87
	movslq	-88(%rbp), %rax
	movsbl	emacs_mule_bytes(%rax), %ecx
	decl	%ecx
	movl	%ecx, %eax
	subl	$3, %ecx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movl	%ecx, -124(%rbp)        # 4-byte Spill
	ja	.LBB108_172
# BB#216:                               # %if.end.87
	movq	-120(%rbp), %rax        # 8-byte Reload
	movq	.LJTI108_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB108_41:                             # %sw.bb
	movslq	-88(%rbp), %rax
	movl	emacs_mule_charset(,%rax,4), %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$0, %ecx
	jge	.LBB108_43
# BB#42:                                # %if.then.93
	jmp	.LBB108_214
.LBB108_43:                             # %if.end.94
	jmp	.LBB108_44
.LBB108_44:                             # %do.body.95
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_48
# BB#45:                                # %if.then.98
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_47
# BB#46:                                # %if.then.101
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_47:                             # %if.end.102
	jmp	.LBB108_213
.LBB108_48:                             # %if.end.103
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_54
# BB#49:                                # %land.lhs.true.108
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_54
# BB#50:                                # %if.then.111
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_52
# BB#51:                                # %if.then.115
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_53
.LBB108_52:                             # %if.else.121
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_53:                             # %if.end.125
	jmp	.LBB108_54
.LBB108_54:                             # %if.end.126
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#55:                                # %do.end.128
	cmpl	$160, -88(%rbp)
	jge	.LBB108_57
# BB#56:                                # %if.then.131
	jmp	.LBB108_214
.LBB108_57:                             # %if.end.132
	movl	-88(%rbp), %eax
	andl	$127, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB108_173
.LBB108_58:                             # %sw.bb.134
	cmpl	$154, -88(%rbp)
	je	.LBB108_60
# BB#59:                                # %lor.lhs.false
	cmpl	$155, -88(%rbp)
	jne	.LBB108_90
.LBB108_60:                             # %if.then.139
	jmp	.LBB108_61
.LBB108_61:                             # %do.body.140
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_65
# BB#62:                                # %if.then.143
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_64
# BB#63:                                # %if.then.146
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_64:                             # %if.end.147
	jmp	.LBB108_213
.LBB108_65:                             # %if.end.148
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_71
# BB#66:                                # %land.lhs.true.153
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_71
# BB#67:                                # %if.then.156
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_69
# BB#68:                                # %if.then.160
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_70
.LBB108_69:                             # %if.else.166
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_70:                             # %if.end.170
	jmp	.LBB108_71
.LBB108_71:                             # %if.end.171
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#72:                                # %do.end.173
	cmpl	$160, -88(%rbp)
	jl	.LBB108_74
# BB#73:                                # %lor.lhs.false.176
	movslq	-88(%rbp), %rax
	movl	emacs_mule_charset(,%rax,4), %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$0, %ecx
	jge	.LBB108_75
.LBB108_74:                             # %if.then.181
	jmp	.LBB108_214
.LBB108_75:                             # %if.end.182
	jmp	.LBB108_76
.LBB108_76:                             # %do.body.183
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_80
# BB#77:                                # %if.then.186
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_79
# BB#78:                                # %if.then.189
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_79:                             # %if.end.190
	jmp	.LBB108_213
.LBB108_80:                             # %if.end.191
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_86
# BB#81:                                # %land.lhs.true.196
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_86
# BB#82:                                # %if.then.199
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_84
# BB#83:                                # %if.then.203
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_85
.LBB108_84:                             # %if.else.209
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_85:                             # %if.end.213
	jmp	.LBB108_86
.LBB108_86:                             # %if.end.214
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#87:                                # %do.end.216
	cmpl	$160, -88(%rbp)
	jge	.LBB108_89
# BB#88:                                # %if.then.219
	jmp	.LBB108_214
.LBB108_89:                             # %if.end.220
	movl	-88(%rbp), %eax
	andl	$127, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB108_121
.LBB108_90:                             # %if.else.222
	movslq	-88(%rbp), %rax
	movl	emacs_mule_charset(,%rax,4), %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$0, %ecx
	jge	.LBB108_92
# BB#91:                                # %if.then.227
	jmp	.LBB108_214
.LBB108_92:                             # %if.end.228
	jmp	.LBB108_93
.LBB108_93:                             # %do.body.229
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_97
# BB#94:                                # %if.then.232
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_96
# BB#95:                                # %if.then.235
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_96:                             # %if.end.236
	jmp	.LBB108_213
.LBB108_97:                             # %if.end.237
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_103
# BB#98:                                # %land.lhs.true.242
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_103
# BB#99:                                # %if.then.245
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_101
# BB#100:                               # %if.then.249
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_102
.LBB108_101:                            # %if.else.255
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_102:                            # %if.end.259
	jmp	.LBB108_103
.LBB108_103:                            # %if.end.260
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#104:                               # %do.end.262
	cmpl	$160, -88(%rbp)
	jge	.LBB108_106
# BB#105:                               # %if.then.265
	jmp	.LBB108_214
.LBB108_106:                            # %if.end.266
	movl	-88(%rbp), %eax
	andl	$127, %eax
	shll	$8, %eax
	movl	%eax, -84(%rbp)
# BB#107:                               # %do.body.269
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_111
# BB#108:                               # %if.then.272
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_110
# BB#109:                               # %if.then.275
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_110:                            # %if.end.276
	jmp	.LBB108_213
.LBB108_111:                            # %if.end.277
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_117
# BB#112:                               # %land.lhs.true.282
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_117
# BB#113:                               # %if.then.285
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_115
# BB#114:                               # %if.then.289
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_116
.LBB108_115:                            # %if.else.295
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_116:                            # %if.end.299
	jmp	.LBB108_117
.LBB108_117:                            # %if.end.300
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#118:                               # %do.end.302
	cmpl	$160, -88(%rbp)
	jge	.LBB108_120
# BB#119:                               # %if.then.305
	jmp	.LBB108_214
.LBB108_120:                            # %if.end.306
	movl	-88(%rbp), %eax
	andl	$127, %eax
	orl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB108_121:                            # %if.end.309
	jmp	.LBB108_173
.LBB108_122:                            # %sw.bb.310
	jmp	.LBB108_123
.LBB108_123:                            # %do.body.311
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_127
# BB#124:                               # %if.then.314
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_126
# BB#125:                               # %if.then.317
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_126:                            # %if.end.318
	jmp	.LBB108_213
.LBB108_127:                            # %if.end.319
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_133
# BB#128:                               # %land.lhs.true.324
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_133
# BB#129:                               # %if.then.327
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_131
# BB#130:                               # %if.then.331
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_132
.LBB108_131:                            # %if.else.337
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_132:                            # %if.end.341
	jmp	.LBB108_133
.LBB108_133:                            # %if.end.342
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#134:                               # %do.end.344
	cmpl	$0, -88(%rbp)
	jl	.LBB108_136
# BB#135:                               # %lor.lhs.false.347
	movslq	-88(%rbp), %rax
	movl	emacs_mule_charset(,%rax,4), %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$0, %ecx
	jge	.LBB108_137
.LBB108_136:                            # %if.then.352
	jmp	.LBB108_214
.LBB108_137:                            # %if.end.353
	jmp	.LBB108_138
.LBB108_138:                            # %do.body.354
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_142
# BB#139:                               # %if.then.357
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_141
# BB#140:                               # %if.then.360
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_141:                            # %if.end.361
	jmp	.LBB108_213
.LBB108_142:                            # %if.end.362
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_148
# BB#143:                               # %land.lhs.true.367
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_148
# BB#144:                               # %if.then.370
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_146
# BB#145:                               # %if.then.374
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_147
.LBB108_146:                            # %if.else.380
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_147:                            # %if.end.384
	jmp	.LBB108_148
.LBB108_148:                            # %if.end.385
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#149:                               # %do.end.387
	cmpl	$160, -88(%rbp)
	jge	.LBB108_151
# BB#150:                               # %if.then.390
	jmp	.LBB108_214
.LBB108_151:                            # %if.end.391
	movl	-88(%rbp), %eax
	andl	$127, %eax
	shll	$8, %eax
	movl	%eax, -84(%rbp)
# BB#152:                               # %do.body.394
	movq	-24(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jne	.LBB108_156
# BB#153:                               # %if.then.397
	movq	-72(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jae	.LBB108_155
# BB#154:                               # %if.then.400
	movl	$1, %esi
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_155:                            # %if.end.401
	jmp	.LBB108_213
.LBB108_156:                            # %if.end.402
	movq	-24(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -88(%rbp)
	testb	$1, -73(%rbp)
	je	.LBB108_162
# BB#157:                               # %land.lhs.true.407
	movl	-88(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB108_162
# BB#158:                               # %if.then.410
	movl	-88(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB108_160
# BB#159:                               # %if.then.414
	movl	-88(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -24(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB108_161
.LBB108_160:                            # %if.else.420
	leaq	-24(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -88(%rbp)
	movq	-16(%rbp), %rdi
	callq	record_conversion_result
.LBB108_161:                            # %if.end.424
	jmp	.LBB108_162
.LBB108_162:                            # %if.end.425
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
# BB#163:                               # %do.end.427
	cmpl	$160, -88(%rbp)
	jge	.LBB108_165
# BB#164:                               # %if.then.430
	jmp	.LBB108_214
.LBB108_165:                            # %if.end.431
	movl	-88(%rbp), %eax
	andl	$127, %eax
	orl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB108_173
.LBB108_166:                            # %sw.bb.434
	movb	$1, %al
	movl	-88(%rbp), %ecx
	movl	%ecx, -84(%rbp)
	testb	$1, %al
	jne	.LBB108_167
	jmp	.LBB108_168
.LBB108_167:                            # %cond.true
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB108_169
	jmp	.LBB108_170
.LBB108_168:                            # %cond.false
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	cmpq	$128, %rcx
	jae	.LBB108_170
.LBB108_169:                            # %cond.true.441
	movl	charset_ascii, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
	jmp	.LBB108_171
.LBB108_170:                            # %cond.false.442
	movl	charset_eight_bit, %eax
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB108_171:                            # %cond.end
	movl	-128(%rbp), %eax        # 4-byte Reload
	movl	%eax, -80(%rbp)
	jmp	.LBB108_173
.LBB108_172:                            # %sw.default
	callq	emacs_abort
.LBB108_173:                            # %sw.epilog
	jmp	.LBB108_174
.LBB108_174:                            # %do.body.443
	movb	$1, %al
	movb	$0, charset_map_loaded
	testb	$1, %al
	jne	.LBB108_175
	jmp	.LBB108_176
.LBB108_175:                            # %cond.true.444
	movl	-84(%rbp), %eax
	addl	$0, %eax
	cmpl	$128, %eax
	jb	.LBB108_177
	jmp	.LBB108_179
.LBB108_176:                            # %cond.false.448
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	addq	$0, %rcx
	cmpq	$128, %rcx
	jae	.LBB108_179
.LBB108_177:                            # %land.lhs.true.453
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	shrb	$2, %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB108_179
# BB#178:                               # %cond.true.460
	movl	-84(%rbp), %eax
	movl	%eax, %ecx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB108_200
.LBB108_179:                            # %cond.false.462
	movl	-84(%rbp), %eax
	movq	charset_table, %rcx
	movslq	-80(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	cmpl	108(%rcx), %eax
	jb	.LBB108_181
# BB#180:                               # %lor.lhs.false.467
	movl	-84(%rbp), %eax
	movq	charset_table, %rcx
	movslq	-80(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	cmpl	112(%rcx), %eax
	jbe	.LBB108_182
.LBB108_181:                            # %cond.true.472
	movq	$-1, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB108_199
.LBB108_182:                            # %cond.false.473
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	shrb	$5, %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB108_184
# BB#183:                               # %cond.true.481
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	-84(%rbp), %esi
	movq	%rax, %rdi
	callq	decode_char
	movslq	%eax, %rcx
	movq	%rcx, -152(%rbp)        # 8-byte Spill
	jmp	.LBB108_198
.LBB108_184:                            # %cond.false.486
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	cmpl	$0, 104(%rax)
	jne	.LBB108_189
# BB#185:                               # %cond.true.491
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB108_187
# BB#186:                               # %cond.true.498
	movl	-84(%rbp), %eax
	movq	charset_table, %rcx
	movslq	-80(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	subl	108(%rcx), %eax
	movq	charset_table, %rcx
	movslq	-80(%rbp), %rdx
	imulq	$328, %rdx, %rdx        # imm = 0x148
	addq	%rdx, %rcx
	addl	324(%rcx), %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB108_188
.LBB108_187:                            # %cond.false.506
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	-84(%rbp), %esi
	movq	%rax, %rdi
	callq	decode_char
	movl	%eax, -156(%rbp)        # 4-byte Spill
.LBB108_188:                            # %cond.end.510
	movl	-156(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	jmp	.LBB108_197
.LBB108_189:                            # %cond.false.513
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	cmpl	$1, 104(%rax)
	jne	.LBB108_195
# BB#190:                               # %cond.true.519
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movb	88(%rax), %dl
	andb	$1, %dl
	testb	$1, %dl
	je	.LBB108_193
# BB#191:                               # %land.lhs.true.527
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	charset_table, %rdi
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB108_192
	jmp	.LBB108_193
.LBB108_192:                            # %cond.true.535
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	movq	charset_table, %rdi
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rdi
	movq	8(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$4, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	-84(%rbp), %edx
	movq	charset_table, %rcx
	movslq	-80(%rbp), %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rcx
	subl	108(%rcx), %edx
	movl	%edx, %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movq	%rax, -176(%rbp)        # 8-byte Spill
	jmp	.LBB108_194
.LBB108_193:                            # %cond.false.548
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	-84(%rbp), %esi
	movq	%rax, %rdi
	callq	decode_char
	movslq	%eax, %rcx
	movq	%rcx, -176(%rbp)        # 8-byte Spill
.LBB108_194:                            # %cond.end.553
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rax, -184(%rbp)        # 8-byte Spill
	jmp	.LBB108_196
.LBB108_195:                            # %cond.false.555
	movq	charset_table, %rax
	movslq	-80(%rbp), %rcx
	imulq	$328, %rcx, %rcx        # imm = 0x148
	addq	%rcx, %rax
	movl	-84(%rbp), %esi
	movq	%rax, %rdi
	callq	decode_char
	movslq	%eax, %rcx
	movq	%rcx, -184(%rbp)        # 8-byte Spill
.LBB108_196:                            # %cond.end.560
	movq	-184(%rbp), %rax        # 8-byte Reload
	movq	%rax, -168(%rbp)        # 8-byte Spill
.LBB108_197:                            # %cond.end.562
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB108_198:                            # %cond.end.564
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB108_199:                            # %cond.end.566
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	%rax, -136(%rbp)        # 8-byte Spill
.LBB108_200:                            # %cond.end.568
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	testb	$1, charset_map_loaded
	je	.LBB108_203
# BB#201:                               # %land.lhs.true.573
	movq	-16(%rbp), %rdi
	callq	coding_change_source
	movq	%rax, -112(%rbp)
	cmpq	$0, %rax
	je	.LBB108_203
# BB#202:                               # %if.then.576
	movq	-112(%rbp), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-112(%rbp), %rax
	addq	-72(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB108_203:                            # %if.end.580
	jmp	.LBB108_204
.LBB108_204:                            # %do.end.581
	cmpl	$0, -88(%rbp)
	jge	.LBB108_206
# BB#205:                               # %if.then.584
	jmp	.LBB108_214
.LBB108_206:                            # %if.end.585
	jmp	.LBB108_207
.LBB108_207:                            # %if.end.586
	movq	-24(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	movl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, (%rax)
	cmpq	$0, -48(%rbp)
	je	.LBB108_209
# BB#208:                               # %if.then.593
	movl	-80(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB108_209:                            # %if.end.594
	testb	$1, -97(%rbp)
	je	.LBB108_211
# BB#210:                               # %cond.true.597
	xorl	%eax, %eax
	subl	-88(%rbp), %eax
	movl	%eax, -188(%rbp)        # 4-byte Spill
	jmp	.LBB108_212
.LBB108_211:                            # %cond.false.599
	movl	-88(%rbp), %eax
	movl	%eax, -188(%rbp)        # 4-byte Spill
.LBB108_212:                            # %cond.end.600
	movl	-188(%rbp), %eax        # 4-byte Reload
	movl	%eax, -4(%rbp)
	jmp	.LBB108_215
.LBB108_213:                            # %no_more_source
	movl	$-2, -4(%rbp)
	jmp	.LBB108_215
.LBB108_214:                            # %invalid_code
	movl	$-1, -4(%rbp)
.LBB108_215:                            # %return
	movl	-4(%rbp), %eax
	addq	$192, %rsp
	popq	%rbp
	retq
.Lfunc_end108:
	.size	emacs_mule_char, .Lfunc_end108-emacs_mule_char
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI108_0:
	.quad	.LBB108_166
	.quad	.LBB108_41
	.quad	.LBB108_58
	.quad	.LBB108_122

	.text
	.align	16, 0x90
	.type	produce_chars,@function
produce_chars:                          # @produce_chars
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp328:
	.cfi_def_cfa_offset 16
.Ltmp329:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp330:
	.cfi_def_cfa_register %rbp
	subq	$1488, %rsp             # imm = 0x5D0
	movb	%dl, %al
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	-8(%rbp), %rsi
	movq	496(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	384(%rdi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-8(%rbp), %rsi
	movq	496(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	480(%rdi), %rsi
	movq	%rsi, -40(%rbp)
	movq	$0, -56(%rbp)
	movl	$0, -60(%rbp)
	movq	-8(%rbp), %rsi
	movl	8(%rsi), %edx
	shrl	$21, %edx
	andl	$1, %edx
	testl	$1, %edx
	jne	.LBB109_775
# BB#1:                                 # %if.then
	movq	-8(%rbp), %rax
	movq	504(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-8(%rbp), %rcx
	movslq	516(%rcx), %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	488(%rcx), %rax
	jne	.LBB109_4
# BB#2:                                 # %land.lhs.true
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, -248(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-248(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB109_4
# BB#3:                                 # %if.then.7
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rax
	addq	400(%rax), %rdi
	movq	%rdi, -40(%rbp)
.LBB109_4:                              # %if.end
	jmp	.LBB109_5
.LBB109_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_15 Depth 2
                                        #     Child Loop BB109_748 Depth 2
	movq	-72(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jae	.LBB109_774
# BB#6:                                 # %while.body
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-72(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jl	.LBB109_772
# BB#7:                                 # %if.then.11
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%edi, %edi
	movq	$1, -104(%rbp)
	movq	$1, -112(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)
# BB#8:                                 # %do.body
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB109_9
	jmp	.LBB109_13
.LBB109_9:                              # %if.then.15
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-16(%rbp), %rdi
	movl	-84(%rbp), %esi
	callq	CHAR_TABLE_REF
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB109_10
	jmp	.LBB109_12
.LBB109_10:                             # %land.lhs.true.18
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB109_12
# BB#11:                                # %if.then.20
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)
.LBB109_12:                             # %if.end.23
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_28
.LBB109_13:                             # %if.else
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB109_27
# BB#14:                                # %if.then.27
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -128(%rbp)
.LBB109_15:                             # %for.cond
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-128(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB109_26
# BB#16:                                # %for.body
                                        #   in Loop: Header=BB109_15 Depth=2
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB109_17
	jmp	.LBB109_24
.LBB109_17:                             # %if.then.33
                                        #   in Loop: Header=BB109_15 Depth=2
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movl	-84(%rbp), %esi
	callq	CHAR_TABLE_REF
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB109_18
	jmp	.LBB109_20
.LBB109_18:                             # %land.lhs.true.39
                                        #   in Loop: Header=BB109_15 Depth=2
	movq	-120(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB109_20
# BB#19:                                # %if.then.43
                                        #   in Loop: Header=BB109_15 Depth=2
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -120(%rbp)
	jmp	.LBB109_23
.LBB109_20:                             # %if.else.47
                                        #   in Loop: Header=BB109_15 Depth=2
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	%rax, -256(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-256(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB109_22
# BB#21:                                # %if.then.51
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_26
.LBB109_22:                             # %if.end.52
                                        #   in Loop: Header=BB109_15 Depth=2
	jmp	.LBB109_23
.LBB109_23:                             # %if.end.53
                                        #   in Loop: Header=BB109_15 Depth=2
	jmp	.LBB109_24
.LBB109_24:                             # %if.end.54
                                        #   in Loop: Header=BB109_15 Depth=2
	jmp	.LBB109_25
.LBB109_25:                             # %for.inc
                                        #   in Loop: Header=BB109_15 Depth=2
	movq	-128(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB109_15
.LBB109_26:                             # %for.end
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_27
.LBB109_27:                             # %if.end.56
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_28
.LBB109_28:                             # %if.end.57
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_29
.LBB109_29:                             # %do.end
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%edi, %edi
	movq	-120(%rbp), %rax
	movq	%rax, -264(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-264(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB109_43
# BB#30:                                # %if.then.61
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdx
	callq	get_translation
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB109_32
# BB#31:                                # %if.then.68
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	jmp	.LBB109_42
.LBB109_32:                             # %if.else.71
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB109_37
# BB#33:                                # %if.then.76
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	ASIZE
	movq	%rax, -104(%rbp)
	movq	-120(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB109_35
# BB#34:                                # %if.then.88
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	jmp	.LBB109_36
.LBB109_35:                             # %if.else.91
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-120(%rbp), %rdi
	callq	ASIZE
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, -112(%rbp)
	movq	-120(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
.LBB109_36:                             # %if.end.96
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_41
.LBB109_37:                             # %if.else.97
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$901, %edi              # imm = 0x385
	movq	-120(%rbp), %rax
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-272(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB109_40
# BB#38:                                # %land.lhs.true.101
                                        #   in Loop: Header=BB109_5 Depth=1
	testb	$1, -17(%rbp)
	jne	.LBB109_40
# BB#39:                                # %if.then.102
	jmp	.LBB109_774
.LBB109_40:                             # %if.end.103
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_41
.LBB109_41:                             # %if.end.104
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_42
.LBB109_42:                             # %if.end.105
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_43
.LBB109_43:                             # %if.end.106
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$5, %eax
	movl	%eax, %ecx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	cmpq	-112(%rbp), %rax
	jge	.LBB109_747
# BB#44:                                # %if.then.109
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_45
	jmp	.LBB109_124
.LBB109_45:                             # %cond.true
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_46
	jmp	.LBB109_85
.LBB109_46:                             # %cond.true.110
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_48
# BB#47:                                # %cond.true.116
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -276(%rbp)        # 4-byte Spill
	jmp	.LBB109_49
.LBB109_48:                             # %cond.false
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -276(%rbp)        # 4-byte Spill
.LBB109_49:                             # %cond.end
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-276(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB109_51
# BB#50:                                # %land.lhs.true.141
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jl	.LBB109_77
.LBB109_51:                             # %lor.lhs.false
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_52
	jmp	.LBB109_63
.LBB109_52:                             # %cond.true.146
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB109_57
# BB#53:                                # %cond.true.151
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -280(%rbp)        # 4-byte Spill
	jge	.LBB109_55
# BB#54:                                # %cond.true.161
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -284(%rbp)        # 4-byte Spill
	jmp	.LBB109_56
.LBB109_55:                             # %cond.false.171
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -284(%rbp)        # 4-byte Spill
.LBB109_56:                             # %cond.end.177
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-284(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movl	-280(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB109_77
	jmp	.LBB109_74
.LBB109_57:                             # %cond.false.182
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_58
	jmp	.LBB109_59
.LBB109_58:                             # %cond.true.183
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_77
	jmp	.LBB109_74
.LBB109_59:                             # %cond.false.184
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_61
# BB#60:                                # %cond.true.192
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -288(%rbp)        # 4-byte Spill
	jmp	.LBB109_62
.LBB109_61:                             # %cond.false.212
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -288(%rbp)        # 4-byte Spill
.LBB109_62:                             # %cond.end.218
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-288(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movq	-112(%rbp), %rsi
	movb	%sil, %dil
	movsbl	%dil, %ecx
	cmpl	%ecx, %eax
	jl	.LBB109_77
	jmp	.LBB109_74
.LBB109_63:                             # %cond.false.225
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_64
	jmp	.LBB109_65
.LBB109_64:                             # %cond.true.226
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_77
	jmp	.LBB109_74
.LBB109_65:                             # %cond.false.227
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB109_70
# BB#66:                                # %cond.true.232
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -292(%rbp)        # 4-byte Spill
	jge	.LBB109_68
# BB#67:                                # %cond.true.242
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -296(%rbp)        # 4-byte Spill
	jmp	.LBB109_69
.LBB109_68:                             # %cond.false.262
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -296(%rbp)        # 4-byte Spill
.LBB109_69:                             # %cond.end.268
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-296(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movl	-292(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB109_77
	jmp	.LBB109_74
.LBB109_70:                             # %cond.false.273
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_72
# BB#71:                                # %cond.true.281
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -300(%rbp)        # 4-byte Spill
	jmp	.LBB109_73
.LBB109_72:                             # %cond.false.291
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -300(%rbp)        # 4-byte Spill
.LBB109_73:                             # %cond.end.297
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-300(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movq	-112(%rbp), %rsi
	movb	%sil, %dil
	movsbl	%dil, %ecx
	cmpl	%ecx, %eax
	jl	.LBB109_77
.LBB109_74:                             # %lor.lhs.false.304
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$5, %edx, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_76
# BB#75:                                # %land.lhs.true.312
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$5, %edx, %edx
	cmpl	$-128, %edx
	jl	.LBB109_77
.LBB109_76:                             # %lor.lhs.false.318
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$127, %eax
	movq	-112(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$5, %esi, %esi
	cmpl	%esi, %eax
	jge	.LBB109_81
.LBB109_77:                             # %cond.true.324
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	cmpl	$127, %edx
	jg	.LBB109_79
# BB#78:                                # %cond.true.330
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -304(%rbp)        # 4-byte Spill
	jmp	.LBB109_80
.LBB109_79:                             # %cond.false.336
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -304(%rbp)        # 4-byte Spill
.LBB109_80:                             # %cond.end.344
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-304(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_81:                             # %cond.false.347
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	cmpl	$127, %edx
	jg	.LBB109_83
# BB#82:                                # %cond.true.353
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -308(%rbp)        # 4-byte Spill
	jmp	.LBB109_84
.LBB109_83:                             # %cond.false.359
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -308(%rbp)        # 4-byte Spill
.LBB109_84:                             # %cond.end.367
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-308(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_85:                             # %cond.false.370
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_87
# BB#86:                                # %cond.true.376
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -320(%rbp)        # 8-byte Spill
	jmp	.LBB109_88
.LBB109_87:                             # %cond.false.393
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
.LBB109_88:                             # %cond.end.397
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-320(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_90
# BB#89:                                # %land.lhs.true.401
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_116
.LBB109_90:                             # %lor.lhs.false.404
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_91
	jmp	.LBB109_102
.LBB109_91:                             # %cond.true.405
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_96
# BB#92:                                # %cond.true.408
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -328(%rbp)        # 8-byte Spill
	jge	.LBB109_94
# BB#93:                                # %cond.true.414
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
	jmp	.LBB109_95
.LBB109_94:                             # %cond.false.422
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -336(%rbp)        # 8-byte Spill
.LBB109_95:                             # %cond.end.426
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-336(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	cqto
	movq	-344(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-328(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_116
	jmp	.LBB109_113
.LBB109_96:                             # %cond.false.431
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_97
	jmp	.LBB109_98
.LBB109_97:                             # %cond.true.432
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_116
	jmp	.LBB109_113
.LBB109_98:                             # %cond.false.433
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_100
# BB#99:                                # %cond.true.439
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	jmp	.LBB109_101
.LBB109_100:                            # %cond.false.456
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -352(%rbp)        # 8-byte Spill
.LBB109_101:                            # %cond.end.460
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-352(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -360(%rbp)        # 8-byte Spill
	cqto
	movq	-360(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_116
	jmp	.LBB109_113
.LBB109_102:                            # %cond.false.465
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_103
	jmp	.LBB109_104
.LBB109_103:                            # %cond.true.466
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_116
	jmp	.LBB109_113
.LBB109_104:                            # %cond.false.467
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_109
# BB#105:                               # %cond.true.470
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -368(%rbp)        # 8-byte Spill
	jge	.LBB109_107
# BB#106:                               # %cond.true.476
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -376(%rbp)        # 8-byte Spill
	jmp	.LBB109_108
.LBB109_107:                            # %cond.false.493
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
.LBB109_108:                            # %cond.end.497
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-376(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -384(%rbp)        # 8-byte Spill
	cqto
	movq	-384(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-368(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_116
	jmp	.LBB109_113
.LBB109_109:                            # %cond.false.502
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_111
# BB#110:                               # %cond.true.508
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	jmp	.LBB109_112
.LBB109_111:                            # %cond.false.516
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
.LBB109_112:                            # %cond.end.520
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-392(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	cqto
	movq	-400(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_116
.LBB109_113:                            # %lor.lhs.false.525
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_115
# BB#114:                               # %land.lhs.true.531
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	cmpq	$-128, %rax
	jl	.LBB109_116
.LBB109_115:                            # %lor.lhs.false.535
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$127, %eax
	movl	%eax, %ecx
	imulq	$5, -112(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB109_120
.LBB109_116:                            # %cond.true.539
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	cmpl	$127, %edx
	jg	.LBB109_118
# BB#117:                               # %cond.true.545
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -404(%rbp)        # 4-byte Spill
	jmp	.LBB109_119
.LBB109_118:                            # %cond.false.551
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -404(%rbp)        # 4-byte Spill
.LBB109_119:                            # %cond.end.559
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-404(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_120:                            # %cond.false.562
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	cmpl	$127, %edx
	jg	.LBB109_122
# BB#121:                               # %cond.true.568
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	movl	%edx, -408(%rbp)        # 4-byte Spill
	jmp	.LBB109_123
.LBB109_122:                            # %cond.false.574
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movb	%al, %cl
	movzbl	%cl, %edx
	imull	$5, %edx, %edx
	subl	$-128, %edx
	movb	%dl, %cl
	movsbl	%cl, %edx
	addl	$-128, %edx
	movl	%edx, -408(%rbp)        # 4-byte Spill
.LBB109_123:                            # %cond.end.582
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-408(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_124:                            # %cond.false.585
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_125
	jmp	.LBB109_204
.LBB109_125:                            # %cond.true.586
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_126
	jmp	.LBB109_165
.LBB109_126:                            # %cond.true.587
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_128
# BB#127:                               # %cond.true.595
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %esi
	subl	%esi, %eax
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -412(%rbp)        # 4-byte Spill
	jmp	.LBB109_129
.LBB109_128:                            # %cond.false.615
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -412(%rbp)        # 4-byte Spill
.LBB109_129:                            # %cond.end.621
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-412(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB109_131
# BB#130:                               # %land.lhs.true.625
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jl	.LBB109_157
.LBB109_131:                            # %lor.lhs.false.630
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_132
	jmp	.LBB109_143
.LBB109_132:                            # %cond.true.631
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB109_137
# BB#133:                               # %cond.true.636
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -416(%rbp)        # 4-byte Spill
	jge	.LBB109_135
# BB#134:                               # %cond.true.646
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -420(%rbp)        # 4-byte Spill
	jmp	.LBB109_136
.LBB109_135:                            # %cond.false.656
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -420(%rbp)        # 4-byte Spill
.LBB109_136:                            # %cond.end.662
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-420(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movl	-416(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB109_157
	jmp	.LBB109_154
.LBB109_137:                            # %cond.false.667
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_138
	jmp	.LBB109_139
.LBB109_138:                            # %cond.true.668
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_157
	jmp	.LBB109_154
.LBB109_139:                            # %cond.false.669
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_141
# BB#140:                               # %cond.true.677
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %esi
	subl	%esi, %eax
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -424(%rbp)        # 4-byte Spill
	jmp	.LBB109_142
.LBB109_141:                            # %cond.false.697
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -424(%rbp)        # 4-byte Spill
.LBB109_142:                            # %cond.end.703
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-424(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movq	-112(%rbp), %rsi
	movw	%si, %di
	movswl	%di, %ecx
	cmpl	%ecx, %eax
	jl	.LBB109_157
	jmp	.LBB109_154
.LBB109_143:                            # %cond.false.710
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_144
	jmp	.LBB109_145
.LBB109_144:                            # %cond.true.711
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_157
	jmp	.LBB109_154
.LBB109_145:                            # %cond.false.712
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB109_150
# BB#146:                               # %cond.true.717
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -428(%rbp)        # 4-byte Spill
	jge	.LBB109_148
# BB#147:                               # %cond.true.727
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %esi
	subl	%esi, %eax
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	addl	$0, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -432(%rbp)        # 4-byte Spill
	jmp	.LBB109_149
.LBB109_148:                            # %cond.false.747
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -432(%rbp)        # 4-byte Spill
.LBB109_149:                            # %cond.end.753
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-432(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movl	-428(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB109_157
	jmp	.LBB109_154
.LBB109_150:                            # %cond.false.758
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_152
# BB#151:                               # %cond.true.766
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -436(%rbp)        # 4-byte Spill
	jmp	.LBB109_153
.LBB109_152:                            # %cond.false.776
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -436(%rbp)        # 4-byte Spill
.LBB109_153:                            # %cond.end.782
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-436(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movq	-112(%rbp), %rsi
	movw	%si, %di
	movswl	%di, %ecx
	cmpl	%ecx, %eax
	jl	.LBB109_157
.LBB109_154:                            # %lor.lhs.false.789
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$5, %edx, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_156
# BB#155:                               # %land.lhs.true.797
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$5, %edx, %edx
	cmpl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB109_157
.LBB109_156:                            # %lor.lhs.false.803
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$32767, %eax            # imm = 0x7FFF
	movq	-112(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$5, %esi, %esi
	cmpl	%esi, %eax
	jge	.LBB109_161
.LBB109_157:                            # %cond.true.809
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB109_159
# BB#158:                               # %cond.true.815
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -440(%rbp)        # 4-byte Spill
	jmp	.LBB109_160
.LBB109_159:                            # %cond.false.821
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -440(%rbp)        # 4-byte Spill
.LBB109_160:                            # %cond.end.829
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-440(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_161:                            # %cond.false.832
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB109_163
# BB#162:                               # %cond.true.838
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -444(%rbp)        # 4-byte Spill
	jmp	.LBB109_164
.LBB109_163:                            # %cond.false.844
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -444(%rbp)        # 4-byte Spill
.LBB109_164:                            # %cond.end.852
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-444(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_165:                            # %cond.false.855
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_167
# BB#166:                               # %cond.true.861
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -456(%rbp)        # 8-byte Spill
	jmp	.LBB109_168
.LBB109_167:                            # %cond.false.878
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -456(%rbp)        # 8-byte Spill
.LBB109_168:                            # %cond.end.882
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-456(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_170
# BB#169:                               # %land.lhs.true.886
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_196
.LBB109_170:                            # %lor.lhs.false.889
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_171
	jmp	.LBB109_182
.LBB109_171:                            # %cond.true.890
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_176
# BB#172:                               # %cond.true.893
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -464(%rbp)        # 8-byte Spill
	jge	.LBB109_174
# BB#173:                               # %cond.true.899
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
	jmp	.LBB109_175
.LBB109_174:                            # %cond.false.907
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -472(%rbp)        # 8-byte Spill
.LBB109_175:                            # %cond.end.911
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-472(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -480(%rbp)        # 8-byte Spill
	cqto
	movq	-480(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-464(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_196
	jmp	.LBB109_193
.LBB109_176:                            # %cond.false.916
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_177
	jmp	.LBB109_178
.LBB109_177:                            # %cond.true.917
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_196
	jmp	.LBB109_193
.LBB109_178:                            # %cond.false.918
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_180
# BB#179:                               # %cond.true.924
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -488(%rbp)        # 8-byte Spill
	jmp	.LBB109_181
.LBB109_180:                            # %cond.false.941
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -488(%rbp)        # 8-byte Spill
.LBB109_181:                            # %cond.end.945
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-488(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	cqto
	movq	-496(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_196
	jmp	.LBB109_193
.LBB109_182:                            # %cond.false.950
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_183
	jmp	.LBB109_184
.LBB109_183:                            # %cond.true.951
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_196
	jmp	.LBB109_193
.LBB109_184:                            # %cond.false.952
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_189
# BB#185:                               # %cond.true.955
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -504(%rbp)        # 8-byte Spill
	jge	.LBB109_187
# BB#186:                               # %cond.true.961
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	jmp	.LBB109_188
.LBB109_187:                            # %cond.false.978
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -512(%rbp)        # 8-byte Spill
.LBB109_188:                            # %cond.end.982
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-512(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -520(%rbp)        # 8-byte Spill
	cqto
	movq	-520(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-504(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_196
	jmp	.LBB109_193
.LBB109_189:                            # %cond.false.987
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_191
# BB#190:                               # %cond.true.993
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
	jmp	.LBB109_192
.LBB109_191:                            # %cond.false.1001
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -528(%rbp)        # 8-byte Spill
.LBB109_192:                            # %cond.end.1005
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-528(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -536(%rbp)        # 8-byte Spill
	cqto
	movq	-536(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_196
.LBB109_193:                            # %lor.lhs.false.1010
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_195
# BB#194:                               # %land.lhs.true.1016
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	cmpq	$-32768, %rax           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB109_196
.LBB109_195:                            # %lor.lhs.false.1020
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, %ecx
	imulq	$5, -112(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB109_200
.LBB109_196:                            # %cond.true.1024
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB109_198
# BB#197:                               # %cond.true.1030
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -540(%rbp)        # 4-byte Spill
	jmp	.LBB109_199
.LBB109_198:                            # %cond.false.1036
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -540(%rbp)        # 4-byte Spill
.LBB109_199:                            # %cond.end.1044
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-540(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_200:                            # %cond.false.1047
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	cmpl	$32767, %edx            # imm = 0x7FFF
	jg	.LBB109_202
# BB#201:                               # %cond.true.1053
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	movw	%dx, %cx
	movswl	%cx, %edx
	movl	%edx, -544(%rbp)        # 4-byte Spill
	jmp	.LBB109_203
.LBB109_202:                            # %cond.false.1059
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movw	%ax, %cx
	movzwl	%cx, %edx
	imull	$5, %edx, %edx
	subl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movw	%dx, %cx
	movswl	%cx, %edx
	addl	$-32768, %edx           # imm = 0xFFFFFFFFFFFF8000
	movl	%edx, -544(%rbp)        # 4-byte Spill
.LBB109_203:                            # %cond.end.1067
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-544(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_204:                            # %cond.false.1070
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_205
	jmp	.LBB109_284
.LBB109_205:                            # %cond.true.1071
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_206
	jmp	.LBB109_245
.LBB109_206:                            # %cond.true.1072
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_208
# BB#207:                               # %cond.true.1079
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	subl	%edx, %eax
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -548(%rbp)        # 4-byte Spill
	jmp	.LBB109_209
.LBB109_208:                            # %cond.false.1097
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -548(%rbp)        # 4-byte Spill
.LBB109_209:                            # %cond.end.1102
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-548(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB109_211
# BB#210:                               # %land.lhs.true.1106
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jl	.LBB109_237
.LBB109_211:                            # %lor.lhs.false.1110
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_212
	jmp	.LBB109_223
.LBB109_212:                            # %cond.true.1111
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_217
# BB#213:                               # %cond.true.1115
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	movq	-112(%rbp), %rax
	movl	%eax, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	movl	%ecx, -552(%rbp)        # 4-byte Spill
	jge	.LBB109_215
# BB#214:                               # %cond.true.1123
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$1, %ecx
	shll	$30, %ecx
	subl	$1, %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	%ecx, -556(%rbp)        # 4-byte Spill
	jmp	.LBB109_216
.LBB109_215:                            # %cond.false.1132
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	movl	%ecx, -556(%rbp)        # 4-byte Spill
.LBB109_216:                            # %cond.end.1137
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-556(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movl	-552(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB109_237
	jmp	.LBB109_234
.LBB109_217:                            # %cond.false.1142
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_218
	jmp	.LBB109_219
.LBB109_218:                            # %cond.true.1143
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_237
	jmp	.LBB109_234
.LBB109_219:                            # %cond.false.1144
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_221
# BB#220:                               # %cond.true.1151
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	subl	%edx, %eax
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -560(%rbp)        # 4-byte Spill
	jmp	.LBB109_222
.LBB109_221:                            # %cond.false.1169
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -560(%rbp)        # 4-byte Spill
.LBB109_222:                            # %cond.end.1174
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-560(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movq	-112(%rbp), %rsi
	movl	%esi, %ecx
	cmpl	%ecx, %eax
	jl	.LBB109_237
	jmp	.LBB109_234
.LBB109_223:                            # %cond.false.1180
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_224
	jmp	.LBB109_225
.LBB109_224:                            # %cond.true.1181
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_237
	jmp	.LBB109_234
.LBB109_225:                            # %cond.false.1182
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_230
# BB#226:                               # %cond.true.1186
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	movq	-112(%rbp), %rax
	movl	%eax, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	movl	%ecx, -564(%rbp)        # 4-byte Spill
	jge	.LBB109_228
# BB#227:                               # %cond.true.1194
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%sil
	andb	$1, %sil
	movzbl	%sil, %edx
	subl	%edx, %eax
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	addl	$0, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -568(%rbp)        # 4-byte Spill
	jmp	.LBB109_229
.LBB109_228:                            # %cond.false.1212
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -568(%rbp)        # 4-byte Spill
.LBB109_229:                            # %cond.end.1217
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-568(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movl	-564(%rbp), %ecx        # 4-byte Reload
	cmpl	%eax, %ecx
	jl	.LBB109_237
	jmp	.LBB109_234
.LBB109_230:                            # %cond.false.1222
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_232
# BB#231:                               # %cond.true.1229
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	addl	$1, %ecx
	shll	$30, %ecx
	subl	$1, %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	%ecx, -572(%rbp)        # 4-byte Spill
	jmp	.LBB109_233
.LBB109_232:                            # %cond.false.1238
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	addl	$0, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	movl	%ecx, -572(%rbp)        # 4-byte Spill
.LBB109_233:                            # %cond.end.1243
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-572(%rbp), %eax        # 4-byte Reload
	movl	$5, %ecx
	cltd
	idivl	%ecx
	movq	-112(%rbp), %rsi
	movl	%esi, %ecx
	cmpl	%ecx, %eax
	jl	.LBB109_237
.LBB109_234:                            # %lor.lhs.false.1249
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_236
# BB#235:                               # %land.lhs.true.1256
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	cmpl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	jl	.LBB109_237
.LBB109_236:                            # %lor.lhs.false.1261
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movq	-112(%rbp), %rcx
	movl	%ecx, %edx
	imull	$5, %edx, %edx
	cmpl	%edx, %eax
	jge	.LBB109_241
.LBB109_237:                            # %cond.true.1266
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB109_239
# BB#238:                               # %cond.true.1271
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	movl	%ecx, -576(%rbp)        # 4-byte Spill
	jmp	.LBB109_240
.LBB109_239:                            # %cond.false.1274
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -576(%rbp)        # 4-byte Spill
.LBB109_240:                            # %cond.end.1279
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-576(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_241:                            # %cond.false.1282
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB109_243
# BB#242:                               # %cond.true.1287
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	movl	%ecx, -580(%rbp)        # 4-byte Spill
	jmp	.LBB109_244
.LBB109_243:                            # %cond.false.1290
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -580(%rbp)        # 4-byte Spill
.LBB109_244:                            # %cond.end.1295
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-580(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_245:                            # %cond.false.1298
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_247
# BB#246:                               # %cond.true.1304
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	jmp	.LBB109_248
.LBB109_247:                            # %cond.false.1321
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -592(%rbp)        # 8-byte Spill
.LBB109_248:                            # %cond.end.1325
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-592(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_250
# BB#249:                               # %land.lhs.true.1329
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_276
.LBB109_250:                            # %lor.lhs.false.1332
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_251
	jmp	.LBB109_262
.LBB109_251:                            # %cond.true.1333
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_256
# BB#252:                               # %cond.true.1336
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -600(%rbp)        # 8-byte Spill
	jge	.LBB109_254
# BB#253:                               # %cond.true.1342
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
	jmp	.LBB109_255
.LBB109_254:                            # %cond.false.1350
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -608(%rbp)        # 8-byte Spill
.LBB109_255:                            # %cond.end.1354
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-608(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -616(%rbp)        # 8-byte Spill
	cqto
	movq	-616(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-600(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_276
	jmp	.LBB109_273
.LBB109_256:                            # %cond.false.1359
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_257
	jmp	.LBB109_258
.LBB109_257:                            # %cond.true.1360
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_276
	jmp	.LBB109_273
.LBB109_258:                            # %cond.false.1361
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_260
# BB#259:                               # %cond.true.1367
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	jmp	.LBB109_261
.LBB109_260:                            # %cond.false.1384
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -624(%rbp)        # 8-byte Spill
.LBB109_261:                            # %cond.end.1388
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-624(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -632(%rbp)        # 8-byte Spill
	cqto
	movq	-632(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_276
	jmp	.LBB109_273
.LBB109_262:                            # %cond.false.1393
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_263
	jmp	.LBB109_264
.LBB109_263:                            # %cond.true.1394
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_276
	jmp	.LBB109_273
.LBB109_264:                            # %cond.false.1395
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_269
# BB#265:                               # %cond.true.1398
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -640(%rbp)        # 8-byte Spill
	jge	.LBB109_267
# BB#266:                               # %cond.true.1404
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	jmp	.LBB109_268
.LBB109_267:                            # %cond.false.1421
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -648(%rbp)        # 8-byte Spill
.LBB109_268:                            # %cond.end.1425
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-648(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	cqto
	movq	-656(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-640(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_276
	jmp	.LBB109_273
.LBB109_269:                            # %cond.false.1430
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_271
# BB#270:                               # %cond.true.1436
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	jmp	.LBB109_272
.LBB109_271:                            # %cond.false.1444
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
.LBB109_272:                            # %cond.end.1448
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-664(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -672(%rbp)        # 8-byte Spill
	cqto
	movq	-672(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_276
.LBB109_273:                            # %lor.lhs.false.1453
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_275
# BB#274:                               # %land.lhs.true.1459
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	cmpq	$-2147483648, %rax      # imm = 0xFFFFFFFF80000000
	jl	.LBB109_276
.LBB109_275:                            # %lor.lhs.false.1463
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %ecx
	imulq	$5, -112(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB109_280
.LBB109_276:                            # %cond.true.1467
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB109_278
# BB#277:                               # %cond.true.1472
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	movl	%ecx, -676(%rbp)        # 4-byte Spill
	jmp	.LBB109_279
.LBB109_278:                            # %cond.false.1475
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -676(%rbp)        # 4-byte Spill
.LBB109_279:                            # %cond.end.1480
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-676(%rbp), %eax        # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_280:                            # %cond.false.1483
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	cmpl	$2147483647, %ecx       # imm = 0x7FFFFFFF
	ja	.LBB109_282
# BB#281:                               # %cond.true.1488
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	movl	%ecx, -680(%rbp)        # 4-byte Spill
	jmp	.LBB109_283
.LBB109_282:                            # %cond.false.1491
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movl	%eax, %ecx
	imull	$5, %ecx, %ecx
	subl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %ecx      # imm = 0xFFFFFFFF80000000
	movl	%ecx, -680(%rbp)        # 4-byte Spill
.LBB109_283:                            # %cond.end.1496
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-680(%rbp), %eax        # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_284:                            # %cond.false.1499
                                        #   in Loop: Header=BB109_5 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB109_285
	jmp	.LBB109_364
.LBB109_285:                            # %cond.true.1500
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_286
	jmp	.LBB109_325
.LBB109_286:                            # %cond.true.1501
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_288
# BB#287:                               # %cond.true.1507
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -688(%rbp)        # 8-byte Spill
	jmp	.LBB109_289
.LBB109_288:                            # %cond.false.1524
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
.LBB109_289:                            # %cond.end.1528
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-688(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_291
# BB#290:                               # %land.lhs.true.1532
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_317
.LBB109_291:                            # %lor.lhs.false.1535
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_292
	jmp	.LBB109_303
.LBB109_292:                            # %cond.true.1536
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_297
# BB#293:                               # %cond.true.1539
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -696(%rbp)        # 8-byte Spill
	jge	.LBB109_295
# BB#294:                               # %cond.true.1545
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
	jmp	.LBB109_296
.LBB109_295:                            # %cond.false.1553
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -704(%rbp)        # 8-byte Spill
.LBB109_296:                            # %cond.end.1557
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-704(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	cqto
	movq	-712(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-696(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_317
	jmp	.LBB109_314
.LBB109_297:                            # %cond.false.1562
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_298
	jmp	.LBB109_299
.LBB109_298:                            # %cond.true.1563
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_317
	jmp	.LBB109_314
.LBB109_299:                            # %cond.false.1564
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_301
# BB#300:                               # %cond.true.1570
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	jmp	.LBB109_302
.LBB109_301:                            # %cond.false.1587
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -720(%rbp)        # 8-byte Spill
.LBB109_302:                            # %cond.end.1591
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-720(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -728(%rbp)        # 8-byte Spill
	cqto
	movq	-728(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_317
	jmp	.LBB109_314
.LBB109_303:                            # %cond.false.1596
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_304
	jmp	.LBB109_305
.LBB109_304:                            # %cond.true.1597
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_317
	jmp	.LBB109_314
.LBB109_305:                            # %cond.false.1598
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_310
# BB#306:                               # %cond.true.1601
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -736(%rbp)        # 8-byte Spill
	jge	.LBB109_308
# BB#307:                               # %cond.true.1607
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	jmp	.LBB109_309
.LBB109_308:                            # %cond.false.1624
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -744(%rbp)        # 8-byte Spill
.LBB109_309:                            # %cond.end.1628
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-744(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -752(%rbp)        # 8-byte Spill
	cqto
	movq	-752(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-736(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_317
	jmp	.LBB109_314
.LBB109_310:                            # %cond.false.1633
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_312
# BB#311:                               # %cond.true.1639
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
	jmp	.LBB109_313
.LBB109_312:                            # %cond.false.1647
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -760(%rbp)        # 8-byte Spill
.LBB109_313:                            # %cond.end.1651
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-760(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -768(%rbp)        # 8-byte Spill
	cqto
	movq	-768(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_317
.LBB109_314:                            # %lor.lhs.false.1656
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_316
# BB#315:                               # %land.lhs.true.1662
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_317
.LBB109_316:                            # %lor.lhs.false.1666
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_321
.LBB109_317:                            # %cond.true.1670
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_319
# BB#318:                               # %cond.true.1674
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
	jmp	.LBB109_320
.LBB109_319:                            # %cond.false.1676
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -776(%rbp)        # 8-byte Spill
.LBB109_320:                            # %cond.end.1680
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-776(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_321:                            # %cond.false.1682
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_323
# BB#322:                               # %cond.true.1686
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
	jmp	.LBB109_324
.LBB109_323:                            # %cond.false.1688
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -784(%rbp)        # 8-byte Spill
.LBB109_324:                            # %cond.end.1692
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-784(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_325:                            # %cond.false.1694
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_327
# BB#326:                               # %cond.true.1700
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -792(%rbp)        # 8-byte Spill
	jmp	.LBB109_328
.LBB109_327:                            # %cond.false.1717
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -792(%rbp)        # 8-byte Spill
.LBB109_328:                            # %cond.end.1721
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-792(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_330
# BB#329:                               # %land.lhs.true.1725
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_356
.LBB109_330:                            # %lor.lhs.false.1728
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_331
	jmp	.LBB109_342
.LBB109_331:                            # %cond.true.1729
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_336
# BB#332:                               # %cond.true.1732
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -800(%rbp)        # 8-byte Spill
	jge	.LBB109_334
# BB#333:                               # %cond.true.1738
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
	jmp	.LBB109_335
.LBB109_334:                            # %cond.false.1746
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -808(%rbp)        # 8-byte Spill
.LBB109_335:                            # %cond.end.1750
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-808(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -816(%rbp)        # 8-byte Spill
	cqto
	movq	-816(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-800(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_356
	jmp	.LBB109_353
.LBB109_336:                            # %cond.false.1755
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_337
	jmp	.LBB109_338
.LBB109_337:                            # %cond.true.1756
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_356
	jmp	.LBB109_353
.LBB109_338:                            # %cond.false.1757
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_340
# BB#339:                               # %cond.true.1763
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -824(%rbp)        # 8-byte Spill
	jmp	.LBB109_341
.LBB109_340:                            # %cond.false.1780
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -824(%rbp)        # 8-byte Spill
.LBB109_341:                            # %cond.end.1784
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-824(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -832(%rbp)        # 8-byte Spill
	cqto
	movq	-832(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_356
	jmp	.LBB109_353
.LBB109_342:                            # %cond.false.1789
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_343
	jmp	.LBB109_344
.LBB109_343:                            # %cond.true.1790
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_356
	jmp	.LBB109_353
.LBB109_344:                            # %cond.false.1791
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_349
# BB#345:                               # %cond.true.1794
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -840(%rbp)        # 8-byte Spill
	jge	.LBB109_347
# BB#346:                               # %cond.true.1800
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -848(%rbp)        # 8-byte Spill
	jmp	.LBB109_348
.LBB109_347:                            # %cond.false.1817
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
.LBB109_348:                            # %cond.end.1821
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-848(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -856(%rbp)        # 8-byte Spill
	cqto
	movq	-856(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-840(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_356
	jmp	.LBB109_353
.LBB109_349:                            # %cond.false.1826
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_351
# BB#350:                               # %cond.true.1832
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	jmp	.LBB109_352
.LBB109_351:                            # %cond.false.1840
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
.LBB109_352:                            # %cond.end.1844
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-864(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -872(%rbp)        # 8-byte Spill
	cqto
	movq	-872(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_356
.LBB109_353:                            # %lor.lhs.false.1849
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_355
# BB#354:                               # %land.lhs.true.1855
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_356
.LBB109_355:                            # %lor.lhs.false.1859
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_360
.LBB109_356:                            # %cond.true.1863
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_358
# BB#357:                               # %cond.true.1867
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	jmp	.LBB109_359
.LBB109_358:                            # %cond.false.1869
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
.LBB109_359:                            # %cond.end.1873
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-880(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_360:                            # %cond.false.1875
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_362
# BB#361:                               # %cond.true.1879
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	jmp	.LBB109_363
.LBB109_362:                            # %cond.false.1881
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
.LBB109_363:                            # %cond.end.1885
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-888(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_364:                            # %cond.false.1887
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_365
	jmp	.LBB109_404
.LBB109_365:                            # %cond.true.1888
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_367
# BB#366:                               # %cond.true.1894
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -896(%rbp)        # 8-byte Spill
	jmp	.LBB109_368
.LBB109_367:                            # %cond.false.1911
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
.LBB109_368:                            # %cond.end.1915
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-896(%rbp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_370
# BB#369:                               # %land.lhs.true.1919
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_396
.LBB109_370:                            # %lor.lhs.false.1922
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_371
	jmp	.LBB109_382
.LBB109_371:                            # %cond.true.1923
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_376
# BB#372:                               # %cond.true.1926
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -904(%rbp)        # 8-byte Spill
	jge	.LBB109_374
# BB#373:                               # %cond.true.1932
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	jmp	.LBB109_375
.LBB109_374:                            # %cond.false.1940
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
.LBB109_375:                            # %cond.end.1944
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-912(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -920(%rbp)        # 8-byte Spill
	cqto
	movq	-920(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-904(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_396
	jmp	.LBB109_393
.LBB109_376:                            # %cond.false.1949
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_377
	jmp	.LBB109_378
.LBB109_377:                            # %cond.true.1950
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_396
	jmp	.LBB109_393
.LBB109_378:                            # %cond.false.1951
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_380
# BB#379:                               # %cond.true.1957
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -928(%rbp)        # 8-byte Spill
	jmp	.LBB109_381
.LBB109_380:                            # %cond.false.1974
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
.LBB109_381:                            # %cond.end.1978
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-928(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -936(%rbp)        # 8-byte Spill
	cqto
	movq	-936(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_396
	jmp	.LBB109_393
.LBB109_382:                            # %cond.false.1983
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_383
	jmp	.LBB109_384
.LBB109_383:                            # %cond.true.1984
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_396
	jmp	.LBB109_393
.LBB109_384:                            # %cond.false.1985
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_389
# BB#385:                               # %cond.true.1988
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -944(%rbp)        # 8-byte Spill
	jge	.LBB109_387
# BB#386:                               # %cond.true.1994
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -952(%rbp)        # 8-byte Spill
	jmp	.LBB109_388
.LBB109_387:                            # %cond.false.2011
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -952(%rbp)        # 8-byte Spill
.LBB109_388:                            # %cond.end.2015
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-952(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -960(%rbp)        # 8-byte Spill
	cqto
	movq	-960(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	movq	-944(%rbp), %rdi        # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_396
	jmp	.LBB109_393
.LBB109_389:                            # %cond.false.2020
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_391
# BB#390:                               # %cond.true.2026
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
	jmp	.LBB109_392
.LBB109_391:                            # %cond.false.2034
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -968(%rbp)        # 8-byte Spill
.LBB109_392:                            # %cond.end.2038
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-968(%rbp), %rax        # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	cqto
	movq	-976(%rbp), %rsi        # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_396
.LBB109_393:                            # %lor.lhs.false.2043
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_395
# BB#394:                               # %land.lhs.true.2049
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_396
.LBB109_395:                            # %lor.lhs.false.2053
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_400
.LBB109_396:                            # %cond.true.2057
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_398
# BB#397:                               # %cond.true.2061
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
	jmp	.LBB109_399
.LBB109_398:                            # %cond.false.2063
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -984(%rbp)        # 8-byte Spill
.LBB109_399:                            # %cond.end.2067
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-984(%rbp), %rax        # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_400:                            # %cond.false.2069
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_402
# BB#401:                               # %cond.true.2073
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
	jmp	.LBB109_403
.LBB109_402:                            # %cond.false.2075
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -992(%rbp)        # 8-byte Spill
.LBB109_403:                            # %cond.end.2079
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-992(%rbp), %rax        # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_404:                            # %cond.false.2081
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_406
# BB#405:                               # %cond.true.2087
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -1000(%rbp)       # 8-byte Spill
	jmp	.LBB109_407
.LBB109_406:                            # %cond.false.2104
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1000(%rbp)       # 8-byte Spill
.LBB109_407:                            # %cond.end.2108
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1000(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jne	.LBB109_409
# BB#408:                               # %land.lhs.true.2112
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jl	.LBB109_435
.LBB109_409:                            # %lor.lhs.false.2115
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_410
	jmp	.LBB109_421
.LBB109_410:                            # %cond.true.2116
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_415
# BB#411:                               # %cond.true.2119
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1008(%rbp)       # 8-byte Spill
	jge	.LBB109_413
# BB#412:                               # %cond.true.2125
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
	jmp	.LBB109_414
.LBB109_413:                            # %cond.false.2133
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1016(%rbp)       # 8-byte Spill
.LBB109_414:                            # %cond.end.2137
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -1024(%rbp)       # 8-byte Spill
	cqto
	movq	-1024(%rbp), %rsi       # 8-byte Reload
	idivq	%rsi
	movq	-1008(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_435
	jmp	.LBB109_432
.LBB109_415:                            # %cond.false.2142
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_416
	jmp	.LBB109_417
.LBB109_416:                            # %cond.true.2143
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_435
	jmp	.LBB109_432
.LBB109_417:                            # %cond.false.2144
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_419
# BB#418:                               # %cond.true.2150
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -1032(%rbp)       # 8-byte Spill
	jmp	.LBB109_420
.LBB109_419:                            # %cond.false.2167
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1032(%rbp)       # 8-byte Spill
.LBB109_420:                            # %cond.end.2171
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -1040(%rbp)       # 8-byte Spill
	cqto
	movq	-1040(%rbp), %rsi       # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_435
	jmp	.LBB109_432
.LBB109_421:                            # %cond.false.2176
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_422
	jmp	.LBB109_423
.LBB109_422:                            # %cond.true.2177
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_435
	jmp	.LBB109_432
.LBB109_423:                            # %cond.false.2178
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -112(%rbp)
	jge	.LBB109_428
# BB#424:                               # %cond.true.2181
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	jge	.LBB109_426
# BB#425:                               # %cond.true.2187
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-112(%rbp), %rcx
	addq	$0, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movslq	%eax, %rcx
	movq	-112(%rbp), %rdi
	addq	$0, %rdi
	imulq	$0, %rdi, %rdi
	addq	$1, %rdi
	shlq	$62, %rdi
	subq	$1, %rdi
	shlq	$1, %rdi
	addq	$1, %rdi
	subq	%rdi, %rcx
	movq	%rcx, -1056(%rbp)       # 8-byte Spill
	jmp	.LBB109_427
.LBB109_426:                            # %cond.false.2204
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1056(%rbp)       # 8-byte Spill
.LBB109_427:                            # %cond.end.2208
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1056(%rbp), %rax       # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -1064(%rbp)       # 8-byte Spill
	cqto
	movq	-1064(%rbp), %rsi       # 8-byte Reload
	idivq	%rsi
	movq	-1048(%rbp), %rdi       # 8-byte Reload
	cmpq	%rax, %rdi
	jl	.LBB109_435
	jmp	.LBB109_432
.LBB109_428:                            # %cond.false.2213
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_430
# BB#429:                               # %cond.true.2219
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	jmp	.LBB109_431
.LBB109_430:                            # %cond.false.2227
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	$0, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1072(%rbp)       # 8-byte Spill
.LBB109_431:                            # %cond.end.2231
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1072(%rbp), %rax       # 8-byte Reload
	movl	$5, %ecx
	movl	%ecx, %edx
	movq	%rdx, -1080(%rbp)       # 8-byte Spill
	cqto
	movq	-1080(%rbp), %rsi       # 8-byte Reload
	idivq	%rsi
	cmpq	-112(%rbp), %rax
	jl	.LBB109_435
.LBB109_432:                            # %lor.lhs.false.2236
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_434
# BB#433:                               # %land.lhs.true.2242
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_435
.LBB109_434:                            # %lor.lhs.false.2246
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_439
.LBB109_435:                            # %cond.true.2250
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_437
# BB#436:                               # %cond.true.2254
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
	jmp	.LBB109_438
.LBB109_437:                            # %cond.false.2256
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1088(%rbp)       # 8-byte Spill
.LBB109_438:                            # %cond.end.2260
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1088(%rbp), %rax       # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_443
.LBB109_439:                            # %cond.false.2262
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	imulq	$5, -112(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_441
# BB#440:                               # %cond.true.2266
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	jmp	.LBB109_442
.LBB109_441:                            # %cond.false.2268
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$5, -112(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1096(%rbp)       # 8-byte Spill
.LBB109_442:                            # %cond.end.2272
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1096(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
.LBB109_443:                            # %lor.lhs.false.2274
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_444
	jmp	.LBB109_503
.LBB109_444:                            # %cond.true.2275
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_445
	jmp	.LBB109_474
.LBB109_445:                            # %cond.true.2276
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_447
# BB#446:                               # %cond.true.2290
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-136(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movb	%cl, %dl
	movsbl	%dl, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-136(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movb	%cl, %dl
	movsbl	%dl, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -1100(%rbp)       # 4-byte Spill
	jmp	.LBB109_448
.LBB109_447:                            # %cond.false.2324
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -1100(%rbp)       # 4-byte Spill
.LBB109_448:                            # %cond.end.2337
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1100(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB109_458
# BB#449:                               # %cond.true.2341
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB109_454
# BB#450:                               # %cond.true.2346
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movsbl	%dl, %edi
	imull	$0, %edi, %edi
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %r8d
	addl	%r8d, %edi
	imull	$0, %edi, %edi
	subl	$1, %edi
	cmpl	$0, %edi
	movl	%esi, -1104(%rbp)       # 4-byte Spill
	jge	.LBB109_452
# BB#451:                               # %cond.true.2367
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-136(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movb	%cl, %dl
	movsbl	%dl, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %esi
	subl	%esi, %eax
	movq	-136(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movb	%cl, %dl
	movsbl	%dl, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -1108(%rbp)       # 4-byte Spill
	jmp	.LBB109_453
.LBB109_452:                            # %cond.false.2401
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -1108(%rbp)       # 4-byte Spill
.LBB109_453:                            # %cond.end.2414
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1108(%rbp), %eax       # 4-byte Reload
	movq	-136(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	subl	%esi, %eax
	movl	-1104(%rbp), %esi       # 4-byte Reload
	cmpl	%eax, %esi
	jl	.LBB109_466
	jmp	.LBB109_463
.LBB109_454:                            # %cond.false.2421
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_456
# BB#455:                               # %cond.true.2436
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -1112(%rbp)       # 4-byte Spill
	jmp	.LBB109_457
.LBB109_456:                            # %cond.false.2453
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -1112(%rbp)       # 4-byte Spill
.LBB109_457:                            # %cond.end.2466
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1112(%rbp), %eax       # 4-byte Reload
	movq	-136(%rbp), %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	subl	%esi, %eax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movb	%cl, %dl
	movsbl	%dl, %esi
	cmpl	%esi, %eax
	jl	.LBB109_466
	jmp	.LBB109_463
.LBB109_458:                            # %cond.false.2479
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %esi
	cmpl	$0, %esi
	jge	.LBB109_460
# BB#459:                               # %cond.true.2488
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movb	%al, %cl
	movsbl	%cl, %edi
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %r8d
	addl	%r8d, %edi
	cmpl	%edi, %edx
	jle	.LBB109_466
	jmp	.LBB109_463
.LBB109_460:                            # %cond.false.2502
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movb	%al, %cl
	movsbl	%cl, %edx
	cmpl	$0, %edx
	jge	.LBB109_462
# BB#461:                               # %cond.true.2507
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %esi
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %edi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movsbl	%dl, %r8d
	addl	%r8d, %edi
	cmpl	%edi, %esi
	jle	.LBB109_466
	jmp	.LBB109_463
.LBB109_462:                            # %cond.false.2525
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movsbl	%dl, %edi
	cmpl	%edi, %esi
	jl	.LBB109_466
.LBB109_463:                            # %lor.lhs.false.2539
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	jge	.LBB109_465
# BB#464:                               # %land.lhs.true.2553
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movsbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movsbl	%dl, %edi
	addl	%edi, %esi
	cmpl	$-128, %esi
	jl	.LBB109_466
.LBB109_465:                            # %lor.lhs.false.2565
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$127, %eax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	movb	%cl, %sil
	movsbl	%sil, %edi
	movq	-136(%rbp), %rcx
	movb	%cl, %sil
	movsbl	%sil, %r8d
	addl	%r8d, %edi
	cmpl	%edi, %eax
	jge	.LBB109_470
.LBB109_466:                            # %cond.true.2577
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	cmpl	$127, %esi
	jg	.LBB109_468
# BB#467:                               # %cond.true.2589
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	movl	%esi, -1116(%rbp)       # 4-byte Spill
	jmp	.LBB109_469
.LBB109_468:                            # %cond.false.2601
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	subl	$-128, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	addl	$-128, %esi
	movl	%esi, -1116(%rbp)       # 4-byte Spill
.LBB109_469:                            # %cond.end.2615
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1116(%rbp), %eax       # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_470:                            # %cond.false.2618
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	cmpl	$127, %esi
	jg	.LBB109_472
# BB#471:                               # %cond.true.2630
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	movl	%esi, -1120(%rbp)       # 4-byte Spill
	jmp	.LBB109_473
.LBB109_472:                            # %cond.false.2642
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	subl	$-128, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	addl	$-128, %esi
	movl	%esi, -1120(%rbp)       # 4-byte Spill
.LBB109_473:                            # %cond.end.2656
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1120(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_474:                            # %cond.false.2659
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_476
# BB#475:                               # %cond.true.2670
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1128(%rbp)       # 8-byte Spill
	jmp	.LBB109_477
.LBB109_476:                            # %cond.false.2697
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1128(%rbp)       # 8-byte Spill
.LBB109_477:                            # %cond.end.2706
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1128(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_487
# BB#478:                               # %cond.true.2710
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_483
# BB#479:                               # %cond.true.2713
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1136(%rbp)       # 8-byte Spill
	jge	.LBB109_481
# BB#480:                               # %cond.true.2728
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1144(%rbp)       # 8-byte Spill
	jmp	.LBB109_482
.LBB109_481:                            # %cond.false.2755
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1144(%rbp)       # 8-byte Spill
.LBB109_482:                            # %cond.end.2764
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1144(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1136(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_495
	jmp	.LBB109_492
.LBB109_483:                            # %cond.false.2769
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_485
# BB#484:                               # %cond.true.2780
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1152(%rbp)       # 8-byte Spill
	jmp	.LBB109_486
.LBB109_485:                            # %cond.false.2793
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1152(%rbp)       # 8-byte Spill
.LBB109_486:                            # %cond.end.2802
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1152(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_495
	jmp	.LBB109_492
.LBB109_487:                            # %cond.false.2811
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_489
# BB#488:                               # %cond.true.2818
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_495
	jmp	.LBB109_492
.LBB109_489:                            # %cond.false.2826
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_491
# BB#490:                               # %cond.true.2829
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_495
	jmp	.LBB109_492
.LBB109_491:                            # %cond.false.2841
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_495
.LBB109_492:                            # %lor.lhs.false.2849
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_494
# BB#493:                               # %land.lhs.true.2859
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	$-128, %rax
	jl	.LBB109_495
.LBB109_494:                            # %lor.lhs.false.2867
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$127, %eax
	movl	%eax, %ecx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	-136(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB109_499
.LBB109_495:                            # %cond.true.2875
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	cmpl	$127, %esi
	jg	.LBB109_497
# BB#496:                               # %cond.true.2887
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	movl	%esi, -1156(%rbp)       # 4-byte Spill
	jmp	.LBB109_498
.LBB109_497:                            # %cond.false.2899
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	subl	$-128, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	addl	$-128, %esi
	movl	%esi, -1156(%rbp)       # 4-byte Spill
.LBB109_498:                            # %cond.end.2913
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1156(%rbp), %eax       # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_499:                            # %cond.false.2916
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	cmpl	$127, %esi
	jg	.LBB109_501
# BB#500:                               # %cond.true.2928
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	movl	%esi, -1160(%rbp)       # 4-byte Spill
	jmp	.LBB109_502
.LBB109_501:                            # %cond.false.2940
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movb	%al, %dl
	movzbl	%dl, %esi
	movq	-136(%rbp), %rax
	movb	%al, %dl
	movzbl	%dl, %edi
	addl	%edi, %esi
	subl	$-128, %esi
	movb	%sil, %dl
	movsbl	%dl, %esi
	addl	$-128, %esi
	movl	%esi, -1160(%rbp)       # 4-byte Spill
.LBB109_502:                            # %cond.end.2954
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1160(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_503:                            # %cond.false.2957
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_504
	jmp	.LBB109_563
.LBB109_504:                            # %cond.true.2958
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_505
	jmp	.LBB109_534
.LBB109_505:                            # %cond.true.2959
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_507
# BB#506:                               # %cond.true.2974
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-136(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movw	%cx, %dx
	movswl	%dx, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%r9b
	andb	$1, %r9b
	movzbl	%r9b, %esi
	subl	%esi, %eax
	movq	-136(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movw	%cx, %dx
	movswl	%dx, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -1164(%rbp)       # 4-byte Spill
	jmp	.LBB109_508
.LBB109_507:                            # %cond.false.3008
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -1164(%rbp)       # 4-byte Spill
.LBB109_508:                            # %cond.end.3021
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1164(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB109_518
# BB#509:                               # %cond.true.3025
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB109_514
# BB#510:                               # %cond.true.3030
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movswl	%dx, %edi
	imull	$0, %edi, %edi
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %r8d
	addl	%r8d, %edi
	imull	$0, %edi, %edi
	subl	$1, %edi
	cmpl	$0, %edi
	movl	%esi, -1168(%rbp)       # 4-byte Spill
	jge	.LBB109_512
# BB#511:                               # %cond.true.3051
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-136(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movw	%cx, %dx
	movswl	%dx, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$0, %esi
	xorl	$-1, %esi
	cmpl	$-1, %esi
	sete	%r9b
	andb	$1, %r9b
	movzbl	%r9b, %esi
	subl	%esi, %eax
	movq	-136(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movw	%cx, %dx
	movswl	%dx, %r8d
	addl	%r8d, %esi
	imull	$0, %esi, %esi
	addl	$1, %esi
	shll	$30, %esi
	subl	$1, %esi
	shll	$1, %esi
	addl	$1, %esi
	subl	%esi, %eax
	movl	%eax, -1172(%rbp)       # 4-byte Spill
	jmp	.LBB109_513
.LBB109_512:                            # %cond.false.3085
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	movl	%edx, -1172(%rbp)       # 4-byte Spill
.LBB109_513:                            # %cond.end.3098
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1172(%rbp), %eax       # 4-byte Reload
	movq	-136(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	subl	%esi, %eax
	movl	-1168(%rbp), %esi       # 4-byte Reload
	cmpl	%eax, %esi
	jl	.LBB109_526
	jmp	.LBB109_523
.LBB109_514:                            # %cond.false.3105
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_516
# BB#515:                               # %cond.true.3120
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	movl	%edx, -1176(%rbp)       # 4-byte Spill
	jmp	.LBB109_517
.LBB109_516:                            # %cond.false.3137
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	movl	%edx, -1176(%rbp)       # 4-byte Spill
.LBB109_517:                            # %cond.end.3150
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1176(%rbp), %eax       # 4-byte Reload
	movq	-136(%rbp), %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	subl	%esi, %eax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdi
	subq	%rdi, %rcx
	sarq	$2, %rcx
	movw	%cx, %dx
	movswl	%dx, %esi
	cmpl	%esi, %eax
	jl	.LBB109_526
	jmp	.LBB109_523
.LBB109_518:                            # %cond.false.3163
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %esi
	cmpl	$0, %esi
	jge	.LBB109_520
# BB#519:                               # %cond.true.3172
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rsi
	subq	%rsi, %rax
	sarq	$2, %rax
	movw	%ax, %cx
	movswl	%cx, %edi
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %r8d
	addl	%r8d, %edi
	cmpl	%edi, %edx
	jle	.LBB109_526
	jmp	.LBB109_523
.LBB109_520:                            # %cond.false.3186
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movw	%ax, %cx
	movswl	%cx, %edx
	cmpl	$0, %edx
	jge	.LBB109_522
# BB#521:                               # %cond.true.3191
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %esi
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %edi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movswl	%dx, %r8d
	addl	%r8d, %edi
	cmpl	%edi, %esi
	jle	.LBB109_526
	jmp	.LBB109_523
.LBB109_522:                            # %cond.false.3209
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movswl	%dx, %edi
	cmpl	%edi, %esi
	jl	.LBB109_526
.LBB109_523:                            # %lor.lhs.false.3223
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	jge	.LBB109_525
# BB#524:                               # %land.lhs.true.3237
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movswl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movswl	%dx, %edi
	addl	%edi, %esi
	cmpl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB109_526
.LBB109_525:                            # %lor.lhs.false.3249
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$32767, %eax            # imm = 0x7FFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	movw	%cx, %si
	movswl	%si, %edi
	movq	-136(%rbp), %rcx
	movw	%cx, %si
	movswl	%si, %r8d
	addl	%r8d, %edi
	cmpl	%edi, %eax
	jge	.LBB109_530
.LBB109_526:                            # %cond.true.3261
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	cmpl	$32767, %esi            # imm = 0x7FFF
	jg	.LBB109_528
# BB#527:                               # %cond.true.3273
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	movw	%si, %dx
	movswl	%dx, %esi
	movl	%esi, -1180(%rbp)       # 4-byte Spill
	jmp	.LBB109_529
.LBB109_528:                            # %cond.false.3285
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	subl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movw	%si, %dx
	movswl	%dx, %esi
	addl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movl	%esi, -1180(%rbp)       # 4-byte Spill
.LBB109_529:                            # %cond.end.3299
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1180(%rbp), %eax       # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_530:                            # %cond.false.3302
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	cmpl	$32767, %esi            # imm = 0x7FFF
	jg	.LBB109_532
# BB#531:                               # %cond.true.3314
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	movw	%si, %dx
	movswl	%dx, %esi
	movl	%esi, -1184(%rbp)       # 4-byte Spill
	jmp	.LBB109_533
.LBB109_532:                            # %cond.false.3326
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	subl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movw	%si, %dx
	movswl	%dx, %esi
	addl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movl	%esi, -1184(%rbp)       # 4-byte Spill
.LBB109_533:                            # %cond.end.3340
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1184(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_534:                            # %cond.false.3343
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_536
# BB#535:                               # %cond.true.3354
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1192(%rbp)       # 8-byte Spill
	jmp	.LBB109_537
.LBB109_536:                            # %cond.false.3381
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1192(%rbp)       # 8-byte Spill
.LBB109_537:                            # %cond.end.3390
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1192(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_547
# BB#538:                               # %cond.true.3394
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_543
# BB#539:                               # %cond.true.3397
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1200(%rbp)       # 8-byte Spill
	jge	.LBB109_541
# BB#540:                               # %cond.true.3412
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1208(%rbp)       # 8-byte Spill
	jmp	.LBB109_542
.LBB109_541:                            # %cond.false.3439
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1208(%rbp)       # 8-byte Spill
.LBB109_542:                            # %cond.end.3448
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1208(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1200(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_555
	jmp	.LBB109_552
.LBB109_543:                            # %cond.false.3453
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_545
# BB#544:                               # %cond.true.3464
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1216(%rbp)       # 8-byte Spill
	jmp	.LBB109_546
.LBB109_545:                            # %cond.false.3477
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1216(%rbp)       # 8-byte Spill
.LBB109_546:                            # %cond.end.3486
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1216(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_555
	jmp	.LBB109_552
.LBB109_547:                            # %cond.false.3495
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_549
# BB#548:                               # %cond.true.3502
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_555
	jmp	.LBB109_552
.LBB109_549:                            # %cond.false.3510
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_551
# BB#550:                               # %cond.true.3513
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_555
	jmp	.LBB109_552
.LBB109_551:                            # %cond.false.3525
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_555
.LBB109_552:                            # %lor.lhs.false.3533
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_554
# BB#553:                               # %land.lhs.true.3543
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	$-32768, %rax           # imm = 0xFFFFFFFFFFFF8000
	jl	.LBB109_555
.LBB109_554:                            # %lor.lhs.false.3551
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$32767, %eax            # imm = 0x7FFF
	movl	%eax, %ecx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	-136(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB109_559
.LBB109_555:                            # %cond.true.3559
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	cmpl	$32767, %esi            # imm = 0x7FFF
	jg	.LBB109_557
# BB#556:                               # %cond.true.3571
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	movw	%si, %dx
	movswl	%dx, %esi
	movl	%esi, -1220(%rbp)       # 4-byte Spill
	jmp	.LBB109_558
.LBB109_557:                            # %cond.false.3583
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	subl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movw	%si, %dx
	movswl	%dx, %esi
	addl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movl	%esi, -1220(%rbp)       # 4-byte Spill
.LBB109_558:                            # %cond.end.3597
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1220(%rbp), %eax       # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_559:                            # %cond.false.3600
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	cmpl	$32767, %esi            # imm = 0x7FFF
	jg	.LBB109_561
# BB#560:                               # %cond.true.3612
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	movw	%si, %dx
	movswl	%dx, %esi
	movl	%esi, -1224(%rbp)       # 4-byte Spill
	jmp	.LBB109_562
.LBB109_561:                            # %cond.false.3624
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movw	%ax, %dx
	movzwl	%dx, %esi
	movq	-136(%rbp), %rax
	movw	%ax, %dx
	movzwl	%dx, %edi
	addl	%edi, %esi
	subl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movw	%si, %dx
	movswl	%dx, %esi
	addl	$-32768, %esi           # imm = 0xFFFFFFFFFFFF8000
	movl	%esi, -1224(%rbp)       # 4-byte Spill
.LBB109_562:                            # %cond.end.3638
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1224(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_563:                            # %cond.false.3641
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_564
	jmp	.LBB109_623
.LBB109_564:                            # %cond.true.3642
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_565
	jmp	.LBB109_594
.LBB109_565:                            # %cond.true.3643
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	addl	%esi, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_567
# BB#566:                               # %cond.true.3656
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-136(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rcx
	sarq	$2, %rcx
	movl	%ecx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edx
	subl	%edx, %eax
	movq	-136(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rcx
	sarq	$2, %rcx
	movl	%ecx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -1228(%rbp)       # 4-byte Spill
	jmp	.LBB109_568
.LBB109_567:                            # %cond.false.3686
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	addl	%esi, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -1228(%rbp)       # 4-byte Spill
.LBB109_568:                            # %cond.end.3697
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1228(%rbp), %eax       # 4-byte Reload
	cmpl	$0, %eax
	jge	.LBB109_578
# BB#569:                               # %cond.true.3701
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_574
# BB#570:                               # %cond.true.3705
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	imull	$0, %esi, %esi
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edi
	addl	%edi, %esi
	imull	$0, %esi, %esi
	subl	$1, %esi
	cmpl	$0, %esi
	movl	%edx, -1232(%rbp)       # 4-byte Spill
	jge	.LBB109_572
# BB#571:                               # %cond.true.3723
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movq	-136(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rcx
	sarq	$2, %rcx
	movl	%ecx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$0, %edx
	xorl	$-1, %edx
	cmpl	$-1, %edx
	sete	%r8b
	andb	$1, %r8b
	movzbl	%r8b, %edx
	subl	%edx, %eax
	movq	-136(%rbp), %rcx
	movl	%ecx, %edx
	imull	$0, %edx, %edx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rcx
	sarq	$2, %rcx
	movl	%ecx, %edi
	addl	%edi, %edx
	imull	$0, %edx, %edx
	addl	$1, %edx
	shll	$30, %edx
	subl	$1, %edx
	shll	$1, %edx
	addl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -1236(%rbp)       # 4-byte Spill
	jmp	.LBB109_573
.LBB109_572:                            # %cond.false.3753
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	addl	%esi, %ecx
	imull	$0, %ecx, %ecx
	addl	$0, %ecx
	movl	%ecx, -1236(%rbp)       # 4-byte Spill
.LBB109_573:                            # %cond.end.3764
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1236(%rbp), %eax       # 4-byte Reload
	movq	-136(%rbp), %rcx
	movl	%ecx, %edx
	subl	%edx, %eax
	movl	-1232(%rbp), %edx       # 4-byte Reload
	cmpl	%eax, %edx
	jl	.LBB109_586
	jmp	.LBB109_583
.LBB109_574:                            # %cond.false.3770
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	addl	%esi, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_576
# BB#575:                               # %cond.true.3783
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	addl	%esi, %ecx
	imull	$0, %ecx, %ecx
	addl	$1, %ecx
	shll	$30, %ecx
	subl	$1, %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	%ecx, -1240(%rbp)       # 4-byte Spill
	jmp	.LBB109_577
.LBB109_576:                            # %cond.false.3798
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	imull	$0, %ecx, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	addl	%esi, %ecx
	imull	$0, %ecx, %ecx
	subl	$1, %ecx
	movl	%ecx, -1240(%rbp)       # 4-byte Spill
.LBB109_577:                            # %cond.end.3809
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1240(%rbp), %eax       # 4-byte Reload
	movq	-136(%rbp), %rcx
	movl	%ecx, %edx
	subl	%edx, %eax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rcx
	sarq	$2, %rcx
	movl	%ecx, %edx
	cmpl	%edx, %eax
	jl	.LBB109_586
	jmp	.LBB109_583
.LBB109_578:                            # %cond.false.3820
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	cmpl	$0, %edx
	jge	.LBB109_580
# BB#579:                               # %cond.true.3828
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	subq	%rdx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movq	-136(%rbp), %rax
	movl	%eax, %edi
	addl	%edi, %esi
	cmpl	%esi, %ecx
	jle	.LBB109_586
	jmp	.LBB109_583
.LBB109_580:                            # %cond.false.3839
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movl	%eax, %ecx
	cmpl	$0, %ecx
	jge	.LBB109_582
# BB#581:                               # %cond.true.3843
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %esi
	movq	-136(%rbp), %rax
	movl	%eax, %edi
	addl	%edi, %esi
	cmpl	%esi, %edx
	jle	.LBB109_586
	jmp	.LBB109_583
.LBB109_582:                            # %cond.false.3858
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	cmpl	%esi, %edx
	jl	.LBB109_586
.LBB109_583:                            # %lor.lhs.false.3869
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	imull	$0, %edx, %edx
	subl	$1, %edx
	cmpl	$0, %edx
	jge	.LBB109_585
# BB#584:                               # %land.lhs.true.3881
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	jl	.LBB109_586
.LBB109_585:                            # %lor.lhs.false.3891
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	movl	%ecx, %esi
	movq	-136(%rbp), %rcx
	movl	%ecx, %edi
	addl	%edi, %esi
	cmpl	%esi, %eax
	jge	.LBB109_590
.LBB109_586:                            # %cond.true.3901
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	$2147483647, %edx       # imm = 0x7FFFFFFF
	ja	.LBB109_588
# BB#587:                               # %cond.true.3911
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	movl	%edx, -1244(%rbp)       # 4-byte Spill
	jmp	.LBB109_589
.LBB109_588:                            # %cond.false.3919
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	subl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	movl	%edx, -1244(%rbp)       # 4-byte Spill
.LBB109_589:                            # %cond.end.3929
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1244(%rbp), %eax       # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_590:                            # %cond.false.3932
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	$2147483647, %edx       # imm = 0x7FFFFFFF
	ja	.LBB109_592
# BB#591:                               # %cond.true.3942
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	movl	%edx, -1248(%rbp)       # 4-byte Spill
	jmp	.LBB109_593
.LBB109_592:                            # %cond.false.3950
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	subl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	movl	%edx, -1248(%rbp)       # 4-byte Spill
.LBB109_593:                            # %cond.end.3960
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1248(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_594:                            # %cond.false.3963
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_596
# BB#595:                               # %cond.true.3974
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1256(%rbp)       # 8-byte Spill
	jmp	.LBB109_597
.LBB109_596:                            # %cond.false.4001
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1256(%rbp)       # 8-byte Spill
.LBB109_597:                            # %cond.end.4010
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1256(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_607
# BB#598:                               # %cond.true.4014
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_603
# BB#599:                               # %cond.true.4017
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1264(%rbp)       # 8-byte Spill
	jge	.LBB109_601
# BB#600:                               # %cond.true.4032
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1272(%rbp)       # 8-byte Spill
	jmp	.LBB109_602
.LBB109_601:                            # %cond.false.4059
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1272(%rbp)       # 8-byte Spill
.LBB109_602:                            # %cond.end.4068
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1272(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1264(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_615
	jmp	.LBB109_612
.LBB109_603:                            # %cond.false.4073
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_605
# BB#604:                               # %cond.true.4084
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1280(%rbp)       # 8-byte Spill
	jmp	.LBB109_606
.LBB109_605:                            # %cond.false.4097
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1280(%rbp)       # 8-byte Spill
.LBB109_606:                            # %cond.end.4106
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1280(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_615
	jmp	.LBB109_612
.LBB109_607:                            # %cond.false.4115
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_609
# BB#608:                               # %cond.true.4122
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_615
	jmp	.LBB109_612
.LBB109_609:                            # %cond.false.4130
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_611
# BB#610:                               # %cond.true.4133
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_615
	jmp	.LBB109_612
.LBB109_611:                            # %cond.false.4145
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_615
.LBB109_612:                            # %lor.lhs.false.4153
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_614
# BB#613:                               # %land.lhs.true.4163
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	$-2147483648, %rax      # imm = 0xFFFFFFFF80000000
	jl	.LBB109_615
.LBB109_614:                            # %lor.lhs.false.4171
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	$2147483647, %eax       # imm = 0x7FFFFFFF
	movl	%eax, %ecx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	-136(%rbp), %rdx
	cmpq	%rdx, %rcx
	jge	.LBB109_619
.LBB109_615:                            # %cond.true.4179
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	$2147483647, %edx       # imm = 0x7FFFFFFF
	ja	.LBB109_617
# BB#616:                               # %cond.true.4189
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	movl	%edx, -1284(%rbp)       # 4-byte Spill
	jmp	.LBB109_618
.LBB109_617:                            # %cond.false.4197
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	subl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	movl	%edx, -1284(%rbp)       # 4-byte Spill
.LBB109_618:                            # %cond.end.4207
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1284(%rbp), %eax       # 4-byte Reload
	movb	$1, %cl
	movslq	%eax, %rdx
	movq	%rdx, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_619:                            # %cond.false.4210
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	cmpl	$2147483647, %edx       # imm = 0x7FFFFFFF
	ja	.LBB109_621
# BB#620:                               # %cond.true.4220
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	movl	%edx, -1288(%rbp)       # 4-byte Spill
	jmp	.LBB109_622
.LBB109_621:                            # %cond.false.4228
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%eax, %esi
	addl	%esi, %edx
	subl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	addl	$-2147483648, %edx      # imm = 0xFFFFFFFF80000000
	movl	%edx, -1288(%rbp)       # 4-byte Spill
.LBB109_622:                            # %cond.end.4238
                                        #   in Loop: Header=BB109_5 Depth=1
	movl	-1288(%rbp), %eax       # 4-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movslq	%eax, %rsi
	movq	%rsi, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_623:                            # %cond.false.4241
                                        #   in Loop: Header=BB109_5 Depth=1
	movb	$1, %al
	testb	$1, %al
	jne	.LBB109_624
	jmp	.LBB109_683
.LBB109_624:                            # %cond.true.4242
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_625
	jmp	.LBB109_654
.LBB109_625:                            # %cond.true.4243
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_627
# BB#626:                               # %cond.true.4254
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1296(%rbp)       # 8-byte Spill
	jmp	.LBB109_628
.LBB109_627:                            # %cond.false.4281
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1296(%rbp)       # 8-byte Spill
.LBB109_628:                            # %cond.end.4290
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1296(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_638
# BB#629:                               # %cond.true.4294
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_634
# BB#630:                               # %cond.true.4297
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1304(%rbp)       # 8-byte Spill
	jge	.LBB109_632
# BB#631:                               # %cond.true.4312
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1312(%rbp)       # 8-byte Spill
	jmp	.LBB109_633
.LBB109_632:                            # %cond.false.4339
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1312(%rbp)       # 8-byte Spill
.LBB109_633:                            # %cond.end.4348
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1312(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1304(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_646
	jmp	.LBB109_643
.LBB109_634:                            # %cond.false.4353
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_636
# BB#635:                               # %cond.true.4364
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1320(%rbp)       # 8-byte Spill
	jmp	.LBB109_637
.LBB109_636:                            # %cond.false.4377
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1320(%rbp)       # 8-byte Spill
.LBB109_637:                            # %cond.end.4386
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1320(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_646
	jmp	.LBB109_643
.LBB109_638:                            # %cond.false.4395
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_640
# BB#639:                               # %cond.true.4402
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_646
	jmp	.LBB109_643
.LBB109_640:                            # %cond.false.4410
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_642
# BB#641:                               # %cond.true.4413
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_646
	jmp	.LBB109_643
.LBB109_642:                            # %cond.false.4425
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_646
.LBB109_643:                            # %lor.lhs.false.4433
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_645
# BB#644:                               # %land.lhs.true.4443
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_646
.LBB109_645:                            # %lor.lhs.false.4451
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_650
.LBB109_646:                            # %cond.true.4459
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_648
# BB#647:                               # %cond.true.4467
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1328(%rbp)       # 8-byte Spill
	jmp	.LBB109_649
.LBB109_648:                            # %cond.false.4473
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1328(%rbp)       # 8-byte Spill
.LBB109_649:                            # %cond.end.4481
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1328(%rbp), %rax       # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_650:                            # %cond.false.4483
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_652
# BB#651:                               # %cond.true.4491
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1336(%rbp)       # 8-byte Spill
	jmp	.LBB109_653
.LBB109_652:                            # %cond.false.4497
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1336(%rbp)       # 8-byte Spill
.LBB109_653:                            # %cond.end.4505
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1336(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_654:                            # %cond.false.4507
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_656
# BB#655:                               # %cond.true.4518
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1344(%rbp)       # 8-byte Spill
	jmp	.LBB109_657
.LBB109_656:                            # %cond.false.4545
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1344(%rbp)       # 8-byte Spill
.LBB109_657:                            # %cond.end.4554
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1344(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_667
# BB#658:                               # %cond.true.4558
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_663
# BB#659:                               # %cond.true.4561
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1352(%rbp)       # 8-byte Spill
	jge	.LBB109_661
# BB#660:                               # %cond.true.4576
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1360(%rbp)       # 8-byte Spill
	jmp	.LBB109_662
.LBB109_661:                            # %cond.false.4603
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1360(%rbp)       # 8-byte Spill
.LBB109_662:                            # %cond.end.4612
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1360(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1352(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_675
	jmp	.LBB109_672
.LBB109_663:                            # %cond.false.4617
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_665
# BB#664:                               # %cond.true.4628
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1368(%rbp)       # 8-byte Spill
	jmp	.LBB109_666
.LBB109_665:                            # %cond.false.4641
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1368(%rbp)       # 8-byte Spill
.LBB109_666:                            # %cond.end.4650
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1368(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_675
	jmp	.LBB109_672
.LBB109_667:                            # %cond.false.4659
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_669
# BB#668:                               # %cond.true.4666
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_675
	jmp	.LBB109_672
.LBB109_669:                            # %cond.false.4674
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_671
# BB#670:                               # %cond.true.4677
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_675
	jmp	.LBB109_672
.LBB109_671:                            # %cond.false.4689
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_675
.LBB109_672:                            # %lor.lhs.false.4697
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_674
# BB#673:                               # %land.lhs.true.4707
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_675
.LBB109_674:                            # %lor.lhs.false.4715
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_679
.LBB109_675:                            # %cond.true.4723
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_677
# BB#676:                               # %cond.true.4731
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1376(%rbp)       # 8-byte Spill
	jmp	.LBB109_678
.LBB109_677:                            # %cond.false.4737
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1376(%rbp)       # 8-byte Spill
.LBB109_678:                            # %cond.end.4745
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1376(%rbp), %rax       # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_679:                            # %cond.false.4747
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_681
# BB#680:                               # %cond.true.4755
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1384(%rbp)       # 8-byte Spill
	jmp	.LBB109_682
.LBB109_681:                            # %cond.false.4761
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1384(%rbp)       # 8-byte Spill
.LBB109_682:                            # %cond.end.4769
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1384(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_683:                            # %cond.false.4771
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	.LBB109_684
	jmp	.LBB109_713
.LBB109_684:                            # %cond.true.4772
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_686
# BB#685:                               # %cond.true.4783
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1392(%rbp)       # 8-byte Spill
	jmp	.LBB109_687
.LBB109_686:                            # %cond.false.4810
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1392(%rbp)       # 8-byte Spill
.LBB109_687:                            # %cond.end.4819
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1392(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_697
# BB#688:                               # %cond.true.4823
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_693
# BB#689:                               # %cond.true.4826
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1400(%rbp)       # 8-byte Spill
	jge	.LBB109_691
# BB#690:                               # %cond.true.4841
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1408(%rbp)       # 8-byte Spill
	jmp	.LBB109_692
.LBB109_691:                            # %cond.false.4868
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1408(%rbp)       # 8-byte Spill
.LBB109_692:                            # %cond.end.4877
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1408(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_705
	jmp	.LBB109_702
.LBB109_693:                            # %cond.false.4882
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_695
# BB#694:                               # %cond.true.4893
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1416(%rbp)       # 8-byte Spill
	jmp	.LBB109_696
.LBB109_695:                            # %cond.false.4906
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1416(%rbp)       # 8-byte Spill
.LBB109_696:                            # %cond.end.4915
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1416(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_705
	jmp	.LBB109_702
.LBB109_697:                            # %cond.false.4924
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_699
# BB#698:                               # %cond.true.4931
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_705
	jmp	.LBB109_702
.LBB109_699:                            # %cond.false.4939
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_701
# BB#700:                               # %cond.true.4942
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_705
	jmp	.LBB109_702
.LBB109_701:                            # %cond.false.4954
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_705
.LBB109_702:                            # %lor.lhs.false.4962
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_704
# BB#703:                               # %land.lhs.true.4972
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_705
.LBB109_704:                            # %lor.lhs.false.4980
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_709
.LBB109_705:                            # %cond.true.4988
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_707
# BB#706:                               # %cond.true.4996
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1424(%rbp)       # 8-byte Spill
	jmp	.LBB109_708
.LBB109_707:                            # %cond.false.5002
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1424(%rbp)       # 8-byte Spill
.LBB109_708:                            # %cond.end.5010
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1424(%rbp), %rax       # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_709:                            # %cond.false.5012
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_711
# BB#710:                               # %cond.true.5020
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1432(%rbp)       # 8-byte Spill
	jmp	.LBB109_712
.LBB109_711:                            # %cond.false.5026
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1432(%rbp)       # 8-byte Spill
.LBB109_712:                            # %cond.end.5034
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1432(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_713:                            # %cond.false.5036
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_715
# BB#714:                               # %cond.true.5047
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1440(%rbp)       # 8-byte Spill
	jmp	.LBB109_716
.LBB109_715:                            # %cond.false.5074
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1440(%rbp)       # 8-byte Spill
.LBB109_716:                            # %cond.end.5083
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1440(%rbp), %rax       # 8-byte Reload
	cmpq	$0, %rax
	jge	.LBB109_726
# BB#717:                               # %cond.true.5087
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_722
# BB#718:                               # %cond.true.5090
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	subq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rax, -1448(%rbp)       # 8-byte Spill
	jge	.LBB109_720
# BB#719:                               # %cond.true.5105
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	imulq	$0, -136(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	subq	%rsi, %rdx
	sarq	$2, %rdx
	addq	%rdx, %rcx
	imulq	$0, %rcx, %rcx
	addq	$0, %rcx
	xorq	$-1, %rcx
	cmpq	$-1, %rcx
	sete	%dil
	andb	$1, %dil
	movzbl	%dil, %r8d
	subl	%r8d, %eax
	movslq	%eax, %rcx
	imulq	$0, -136(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %r9
	subq	%r9, %rsi
	sarq	$2, %rsi
	addq	%rsi, %rdx
	imulq	$0, %rdx, %rdx
	addq	$1, %rdx
	shlq	$62, %rdx
	subq	$1, %rdx
	shlq	$1, %rdx
	addq	$1, %rdx
	subq	%rdx, %rcx
	movq	%rcx, -1456(%rbp)       # 8-byte Spill
	jmp	.LBB109_721
.LBB109_720:                            # %cond.false.5132
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$0, %rax
	movq	%rax, -1456(%rbp)       # 8-byte Spill
.LBB109_721:                            # %cond.end.5141
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1456(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-1448(%rbp), %rcx       # 8-byte Reload
	cmpq	%rax, %rcx
	jl	.LBB109_734
	jmp	.LBB109_731
.LBB109_722:                            # %cond.false.5146
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_724
# BB#723:                               # %cond.true.5157
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	addq	$1, %rax
	shlq	$62, %rax
	subq	$1, %rax
	shlq	$1, %rax
	addq	$1, %rax
	movq	%rax, -1464(%rbp)       # 8-byte Spill
	jmp	.LBB109_725
.LBB109_724:                            # %cond.false.5170
                                        #   in Loop: Header=BB109_5 Depth=1
	imulq	$0, -136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	%rcx, %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	movq	%rax, -1464(%rbp)       # 8-byte Spill
.LBB109_725:                            # %cond.end.5179
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1464(%rbp), %rax       # 8-byte Reload
	subq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	cmpq	%rcx, %rax
	jl	.LBB109_734
	jmp	.LBB109_731
.LBB109_726:                            # %cond.false.5188
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	cmpq	$0, %rax
	jge	.LBB109_728
# BB#727:                               # %cond.true.5195
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-136(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_734
	jmp	.LBB109_731
.LBB109_728:                            # %cond.false.5203
                                        #   in Loop: Header=BB109_5 Depth=1
	cmpq	$0, -136(%rbp)
	jge	.LBB109_730
# BB#729:                               # %cond.true.5206
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jle	.LBB109_734
	jmp	.LBB109_731
.LBB109_730:                            # %cond.false.5218
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jl	.LBB109_734
.LBB109_731:                            # %lor.lhs.false.5226
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	imulq	$0, %rax, %rax
	subq	$1, %rax
	cmpq	$0, %rax
	jge	.LBB109_733
# BB#732:                               # %land.lhs.true.5236
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$-9223372036854775808, %rax # imm = 0x8000000000000000
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	jl	.LBB109_734
.LBB109_733:                            # %lor.lhs.false.5244
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rcx, %rax
	jge	.LBB109_738
.LBB109_734:                            # %cond.true.5252
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_736
# BB#735:                               # %cond.true.5260
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1472(%rbp)       # 8-byte Spill
	jmp	.LBB109_737
.LBB109_736:                            # %cond.false.5266
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1472(%rbp)       # 8-byte Spill
.LBB109_737:                            # %cond.end.5274
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1472(%rbp), %rax       # 8-byte Reload
	movb	$1, %cl
	movq	%rax, -136(%rbp)
	testb	$1, %cl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_738:                            # %cond.false.5276
                                        #   in Loop: Header=BB109_5 Depth=1
	movabsq	$9223372036854775807, %rax # imm = 0x7FFFFFFFFFFFFFFF
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	addq	-136(%rbp), %rcx
	cmpq	%rax, %rcx
	ja	.LBB109_740
# BB#739:                               # %cond.true.5284
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movq	%rax, -1480(%rbp)       # 8-byte Spill
	jmp	.LBB109_741
.LBB109_740:                            # %cond.false.5290
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	addq	-136(%rbp), %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	subq	%rcx, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	addq	%rcx, %rax
	movq	%rax, -1480(%rbp)       # 8-byte Spill
.LBB109_741:                            # %cond.end.5298
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-1480(%rbp), %rax       # 8-byte Reload
	xorl	%ecx, %ecx
	movb	%cl, %dl
	movq	%rax, -136(%rbp)
	testb	$1, %dl
	jne	.LBB109_742
	jmp	.LBB109_743
.LBB109_742:                            # %if.then.5300
	movq	$-1, %rdi
	callq	memory_full
.LBB109_743:                            # %if.end.5301
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-8(%rbp), %rdi
	movq	-136(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rdx
	cmpq	488(%rdx), %rax
	jne	.LBB109_745
# BB#744:                               # %if.then.5307
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rdi
	movq	456(%rdi), %rdi
	movq	-8(%rbp), %rax
	addq	400(%rax), %rdi
	movq	%rdi, -40(%rbp)
	jmp	.LBB109_746
.LBB109_745:                            # %if.else.5311
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -40(%rbp)
.LBB109_746:                            # %if.end.5315
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_747
.LBB109_747:                            # %if.end.5316
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	$0, -96(%rbp)
.LBB109_748:                            # %for.cond.5317
                                        #   Parent Loop BB109_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-96(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jge	.LBB109_771
# BB#749:                               # %for.body.5320
                                        #   in Loop: Header=BB109_748 Depth=2
	cmpq	$0, -96(%rbp)
	jle	.LBB109_751
# BB#750:                               # %if.then.5323
                                        #   in Loop: Header=BB109_748 Depth=2
	movq	-120(%rbp), %rdi
	movq	-96(%rbp), %rsi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -84(%rbp)
.LBB109_751:                            # %if.end.5327
                                        #   in Loop: Header=BB109_748 Depth=2
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	jne	.LBB109_753
# BB#752:                               # %lor.lhs.false.5333
                                        #   in Loop: Header=BB109_748 Depth=2
	cmpl	$4194175, -84(%rbp)     # imm = 0x3FFF7F
	jg	.LBB109_765
.LBB109_753:                            # %if.then.5336
                                        #   in Loop: Header=BB109_748 Depth=2
	jmp	.LBB109_754
.LBB109_754:                            # %do.body.5337
                                        #   in Loop: Header=BB109_748 Depth=2
	cmpl	$127, -84(%rbp)
	jg	.LBB109_756
# BB#755:                               # %if.then.5340
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-84(%rbp), %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB109_763
.LBB109_756:                            # %if.else.5342
                                        #   in Loop: Header=BB109_748 Depth=2
	cmpl	$2047, -84(%rbp)        # imm = 0x7FF
	jg	.LBB109_758
# BB#757:                               # %if.then.5345
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-84(%rbp), %eax
	sarl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-84(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB109_762
.LBB109_758:                            # %if.else.5353
                                        #   in Loop: Header=BB109_748 Depth=2
	cmpl	$65535, -84(%rbp)       # imm = 0xFFFF
	jg	.LBB109_760
# BB#759:                               # %if.then.5356
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-84(%rbp), %eax
	sarl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-84(%rbp), %eax
	sarl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-84(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB109_761
.LBB109_760:                            # %if.else.5370
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-84(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	char_string
	movq	-32(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -32(%rbp)
.LBB109_761:                            # %if.end.5374
                                        #   in Loop: Header=BB109_748 Depth=2
	jmp	.LBB109_762
.LBB109_762:                            # %if.end.5375
                                        #   in Loop: Header=BB109_748 Depth=2
	jmp	.LBB109_763
.LBB109_763:                            # %if.end.5376
                                        #   in Loop: Header=BB109_748 Depth=2
	jmp	.LBB109_764
.LBB109_764:                            # %do.end.5377
                                        #   in Loop: Header=BB109_748 Depth=2
	jmp	.LBB109_769
.LBB109_765:                            # %if.else.5378
                                        #   in Loop: Header=BB109_748 Depth=2
	cmpl	$4194175, -84(%rbp)     # imm = 0x3FFF7F
	jle	.LBB109_767
# BB#766:                               # %cond.true.5381
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-84(%rbp), %eax
	subl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -1484(%rbp)       # 4-byte Spill
	jmp	.LBB109_768
.LBB109_767:                            # %cond.false.5383
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-84(%rbp), %eax
	andl	$255, %eax
	movl	%eax, -1484(%rbp)       # 4-byte Spill
.LBB109_768:                            # %cond.end.5385
                                        #   in Loop: Header=BB109_748 Depth=2
	movl	-1484(%rbp), %eax       # 4-byte Reload
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
.LBB109_769:                            # %if.end.5389
                                        #   in Loop: Header=BB109_748 Depth=2
	jmp	.LBB109_770
.LBB109_770:                            # %for.inc.5390
                                        #   in Loop: Header=BB109_748 Depth=2
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB109_748
.LBB109_771:                            # %for.end.5391
                                        #   in Loop: Header=BB109_5 Depth=1
	movq	-112(%rbp), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-104(%rbp), %rax
	shlq	$2, %rax
	addq	-72(%rbp), %rax
	movq	%rax, -72(%rbp)
	jmp	.LBB109_773
.LBB109_772:                            # %if.else.5394
                                        #   in Loop: Header=BB109_5 Depth=1
	xorl	%eax, %eax
	subl	-84(%rbp), %eax
	movq	-72(%rbp), %rcx
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -72(%rbp)
.LBB109_773:                            # %if.end.5398
                                        #   in Loop: Header=BB109_5 Depth=1
	jmp	.LBB109_5
.LBB109_774:                            # %while.end
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movl	%edx, -60(%rbp)
	jmp	.LBB109_845
.LBB109_775:                            # %if.else.5404
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	400(%rcx), %rax
	movq	%rax, -152(%rbp)
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	448(%rcx), %rax
	jne	.LBB109_777
# BB#776:                               # %if.then.5412
	movq	-144(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB109_777:                            # %if.end.5413
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	movb	%cl, %dl
	andb	$1, %dl
	movzbl	%dl, %ecx
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	shrl	$20, %esi
	andl	$1, %esi
	movb	%sil, %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	cmpl	%esi, %ecx
	je	.LBB109_836
# BB#778:                               # %if.then.5427
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$19, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB109_802
# BB#779:                               # %if.then.5433
	movb	$1, -153(%rbp)
	movq	$0, -168(%rbp)
.LBB109_780:                            # %while.body.5435
                                        # =>This Inner Loop Header: Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -176(%rbp)
# BB#781:                               # %do.body.5437
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-144(%rbp), %rax
	cmpq	-152(%rbp), %rax
	jne	.LBB109_785
# BB#782:                               # %if.then.5440
	movq	-176(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jae	.LBB109_784
# BB#783:                               # %if.then.5443
	movl	$1, %esi
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB109_784:                            # %if.end.5444
	jmp	.LBB109_801
.LBB109_785:                            # %if.end.5445
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -144(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -180(%rbp)
	testb	$1, -153(%rbp)
	je	.LBB109_791
# BB#786:                               # %land.lhs.true.5450
                                        #   in Loop: Header=BB109_780 Depth=1
	movl	-180(%rbp), %eax
	andl	$128, %eax
	cmpl	$0, %eax
	je	.LBB109_791
# BB#787:                               # %if.then.5453
                                        #   in Loop: Header=BB109_780 Depth=1
	movl	-180(%rbp), %eax
	andl	$254, %eax
	cmpl	$192, %eax
	jne	.LBB109_789
# BB#788:                               # %if.then.5457
                                        #   in Loop: Header=BB109_780 Depth=1
	movl	-180(%rbp), %eax
	andl	$1, %eax
	shll	$6, %eax
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -144(%rbp)
	movzbl	(%rcx), %esi
	orl	%esi, %eax
	movl	%eax, -180(%rbp)
	jmp	.LBB109_790
.LBB109_789:                            # %if.else.5463
                                        #   in Loop: Header=BB109_780 Depth=1
	leaq	-144(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-144(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rdi
	callq	string_char
	movl	$3, %esi
	xorl	%r8d, %r8d
	subl	%eax, %r8d
	movl	%r8d, -180(%rbp)
	movq	-8(%rbp), %rdi
	callq	record_conversion_result
.LBB109_790:                            # %if.end.5467
                                        #   in Loop: Header=BB109_780 Depth=1
	jmp	.LBB109_791
.LBB109_791:                            # %if.end.5468
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-168(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -168(%rbp)
# BB#792:                               # %do.end.5470
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB109_800
# BB#793:                               # %if.then.5473
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	488(%rcx), %rax
	jne	.LBB109_795
# BB#794:                               # %if.then.5478
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB109_795:                            # %if.end.5479
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.LBB109_799
# BB#796:                               # %if.then.5482
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-144(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	-8(%rbp), %rdi
	movq	-152(%rbp), %rax
	movq	-144(%rbp), %rcx
	subq	%rcx, %rax
	addq	$1, %rax
	movq	-32(%rbp), %rdx
	movq	%rax, %rsi
	callq	alloc_destination
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	480(%rcx), %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	addq	-192(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	400(%rcx), %rax
	movq	%rax, -152(%rbp)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	488(%rcx), %rax
	jne	.LBB109_798
# BB#797:                               # %if.then.5504
                                        #   in Loop: Header=BB109_780 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB109_798:                            # %if.end.5505
                                        #   in Loop: Header=BB109_780 Depth=1
	jmp	.LBB109_799
.LBB109_799:                            # %if.end.5506
                                        #   in Loop: Header=BB109_780 Depth=1
	jmp	.LBB109_800
.LBB109_800:                            # %if.end.5507
                                        #   in Loop: Header=BB109_780 Depth=1
	movl	-180(%rbp), %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movq	-56(%rbp), %rdx
	addq	$1, %rdx
	movq	%rdx, -56(%rbp)
	jmp	.LBB109_780
.LBB109_801:                            # %no_more_source
	jmp	.LBB109_835
.LBB109_802:                            # %if.else.5511
	jmp	.LBB109_803
.LBB109_803:                            # %while.cond.5512
                                        # =>This Inner Loop Header: Depth=1
	movq	-144(%rbp), %rax
	cmpq	-152(%rbp), %rax
	jae	.LBB109_834
# BB#804:                               # %while.body.5515
                                        #   in Loop: Header=BB109_803 Depth=1
	movb	$1, -193(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -144(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -200(%rbp)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	addq	$-1, %rcx
	cmpq	%rcx, %rax
	jb	.LBB109_815
# BB#805:                               # %if.then.5523
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	488(%rcx), %rax
	jne	.LBB109_807
# BB#806:                               # %if.then.5528
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB109_807:                            # %if.end.5529
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rcx
	addq	$-1, %rcx
	cmpq	%rcx, %rax
	jb	.LBB109_814
# BB#808:                               # %if.then.5533
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-144(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	%rax, -208(%rbp)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	488(%rcx), %rax
	jne	.LBB109_810
# BB#809:                               # %if.then.5543
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	$2, %eax
	movl	%eax, %ecx
	movq	-152(%rbp), %rdx
	movq	-144(%rbp), %rsi
	subq	%rsi, %rdx
	movq	%rdx, %rax
	cqto
	idivq	%rcx
	addq	$2, %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB109_811
.LBB109_810:                            # %if.else.5549
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-152(%rbp), %rax
	movq	-144(%rbp), %rcx
	subq	%rcx, %rax
	addq	$2, %rax
	movq	%rax, -216(%rbp)
.LBB109_811:                            # %if.end.5554
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-8(%rbp), %rdi
	movq	-216(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	-8(%rbp), %rdx
	addq	480(%rdx), %rax
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	addq	-208(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rdx
	addq	400(%rdx), %rax
	movq	%rax, -152(%rbp)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rdx
	cmpq	488(%rdx), %rax
	jne	.LBB109_813
# BB#812:                               # %if.then.5568
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB109_813:                            # %if.end.5569
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_814
.LBB109_814:                            # %if.end.5570
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_815
.LBB109_815:                            # %if.end.5571
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_816
.LBB109_816:                            # %do.body.5572
                                        #   in Loop: Header=BB109_803 Depth=1
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
	testb	$1, -193(%rbp)
	je	.LBB109_831
# BB#817:                               # %if.then.5575
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-200(%rbp), %eax
	movl	%eax, -220(%rbp)
	cmpl	$128, -220(%rbp)
	jb	.LBB109_819
# BB#818:                               # %if.then.5578
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-220(%rbp), %eax
	addl	$4194048, %eax          # imm = 0x3FFF00
	movl	%eax, -220(%rbp)
.LBB109_819:                            # %if.end.5580
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_820
.LBB109_820:                            # %do.body.5581
                                        #   in Loop: Header=BB109_803 Depth=1
	cmpl	$127, -220(%rbp)
	ja	.LBB109_822
# BB#821:                               # %if.then.5584
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-220(%rbp), %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB109_829
.LBB109_822:                            # %if.else.5587
                                        #   in Loop: Header=BB109_803 Depth=1
	cmpl	$2047, -220(%rbp)       # imm = 0x7FF
	ja	.LBB109_824
# BB#823:                               # %if.then.5590
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-220(%rbp), %eax
	shrl	$6, %eax
	orl	$192, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-220(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB109_828
.LBB109_824:                            # %if.else.5599
                                        #   in Loop: Header=BB109_803 Depth=1
	cmpl	$65535, -220(%rbp)      # imm = 0xFFFF
	ja	.LBB109_826
# BB#825:                               # %if.then.5602
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-220(%rbp), %eax
	shrl	$12, %eax
	orl	$224, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-220(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	movl	-220(%rbp), %eax
	andl	$63, %eax
	orl	$128, %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
	jmp	.LBB109_827
.LBB109_826:                            # %if.else.5616
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-220(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	char_string
	movq	-32(%rbp), %rsi
	movslq	%eax, %rcx
	addq	%rcx, %rsi
	movq	%rsi, -32(%rbp)
.LBB109_827:                            # %if.end.5620
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_828
.LBB109_828:                            # %if.end.5621
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_829
.LBB109_829:                            # %if.end.5622
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_830
.LBB109_830:                            # %do.end.5623
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_832
.LBB109_831:                            # %if.else.5624
                                        #   in Loop: Header=BB109_803 Depth=1
	movl	-200(%rbp), %eax
	movb	%al, %cl
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, -32(%rbp)
	movb	%cl, (%rdx)
.LBB109_832:                            # %if.end.5627
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_833
.LBB109_833:                            # %do.end.5628
                                        #   in Loop: Header=BB109_803 Depth=1
	jmp	.LBB109_803
.LBB109_834:                            # %while.end.5629
	jmp	.LBB109_835
.LBB109_835:                            # %if.end.5630
	jmp	.LBB109_844
.LBB109_836:                            # %if.else.5631
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	-8(%rbp), %rcx
	cmpq	488(%rcx), %rax
	je	.LBB109_840
# BB#837:                               # %if.then.5636
	movq	-8(%rbp), %rax
	movq	440(%rax), %rax
	movq	-8(%rbp), %rcx
	subq	480(%rcx), %rax
	movq	%rax, -232(%rbp)
	cmpq	$0, -232(%rbp)
	jle	.LBB109_839
# BB#838:                               # %if.then.5641
	movq	-144(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	%rax, -240(%rbp)
	movq	-8(%rbp), %rdi
	movq	-232(%rbp), %rsi
	movq	-32(%rbp), %rdx
	callq	alloc_destination
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rdi
	callq	coding_set_source
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	addq	-240(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	-8(%rbp), %rcx
	addq	400(%rcx), %rax
	movq	%rax, -152(%rbp)
.LBB109_839:                            # %if.end.5653
	jmp	.LBB109_840
.LBB109_840:                            # %if.end.5654
	movq	-8(%rbp), %rax
	movq	408(%rax), %rax
	movq	%rax, -56(%rbp)
.LBB109_841:                            # %while.cond.5655
                                        # =>This Inner Loop Header: Depth=1
	movq	-144(%rbp), %rax
	cmpq	-152(%rbp), %rax
	jae	.LBB109_843
# BB#842:                               # %while.body.5658
                                        #   in Loop: Header=BB109_841 Depth=1
	movq	-144(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -144(%rbp)
	movb	(%rax), %dl
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -32(%rbp)
	movb	%dl, (%rax)
	jmp	.LBB109_841
.LBB109_843:                            # %while.end.5661
	jmp	.LBB109_844
.LBB109_844:                            # %if.end.5662
	jmp	.LBB109_845
.LBB109_845:                            # %if.end.5663
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	496(%rcx), %rcx
	movq	-8(%rbp), %rdx
	addq	384(%rdx), %rcx
	subq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rax
	movq	488(%rax), %rdi
	callq	BUFFERP
	testb	$1, %al
	jne	.LBB109_846
	jmp	.LBB109_848
.LBB109_846:                            # %land.lhs.true.5673
	cmpq	$0, -56(%rbp)
	jle	.LBB109_848
# BB#847:                               # %if.then.5676
	xorl	%edx, %edx
	movq	-56(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	insert_from_gap
.LBB109_848:                            # %if.end.5677
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	384(%rcx), %rax
	movq	%rax, 384(%rcx)
	movq	-56(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	392(%rcx), %rax
	movq	%rax, 392(%rcx)
	movl	-60(%rbp), %eax
	addq	$1488, %rsp             # imm = 0x5D0
	popq	%rbp
	retq
.Lfunc_end109:
	.size	produce_chars, .Lfunc_end109-produce_chars
	.cfi_endproc

	.align	16, 0x90
	.type	produce_annotation,@function
produce_annotation:                     # @produce_annotation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp331:
	.cfi_def_cfa_offset 16
.Ltmp332:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp333:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	504(%rsi), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	movq	-8(%rbp), %rdi
	movslq	516(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -32(%rbp)
	movq	-8(%rbp), %rsi
	movq	488(%rsi), %rsi
	movl	%eax, %edi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-48(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB110_2
# BB#1:                                 # %if.then
	jmp	.LBB110_14
.LBB110_2:                              # %if.end
	jmp	.LBB110_3
.LBB110_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jae	.LBB110_14
# BB#4:                                 # %while.body
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jl	.LBB110_6
# BB#5:                                 # %if.then.4
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB110_13
.LBB110_6:                              # %if.else
                                        #   in Loop: Header=BB110_3 Depth=1
	xorl	%eax, %eax
	movq	-24(%rbp), %rcx
	subl	(%rcx), %eax
	movl	%eax, -36(%rbp)
	cmpl	$2, -36(%rbp)
	jle	.LBB110_12
# BB#7:                                 # %if.then.6
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-24(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movl	%ecx, -52(%rbp)         # 4-byte Spill
	movl	%edx, -56(%rbp)         # 4-byte Spill
	je	.LBB110_8
	jmp	.LBB110_15
.LBB110_15:                             # %if.then.6
                                        #   in Loop: Header=BB110_3 Depth=1
	movl	-52(%rbp), %eax         # 4-byte Reload
	subl	$3, %eax
	movl	%eax, -60(%rbp)         # 4-byte Spill
	je	.LBB110_9
	jmp	.LBB110_10
.LBB110_8:                              # %sw.bb
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	produce_composition
	jmp	.LBB110_11
.LBB110_9:                              # %sw.bb.7
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-8(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	callq	produce_charset
	jmp	.LBB110_11
.LBB110_10:                             # %sw.default
                                        #   in Loop: Header=BB110_3 Depth=1
	jmp	.LBB110_11
.LBB110_11:                             # %sw.epilog
                                        #   in Loop: Header=BB110_3 Depth=1
	jmp	.LBB110_12
.LBB110_12:                             # %if.end.8
                                        #   in Loop: Header=BB110_3 Depth=1
	movl	-36(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	%eax, %rdx
	shlq	$2, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
.LBB110_13:                             # %if.end.11
                                        #   in Loop: Header=BB110_3 Depth=1
	jmp	.LBB110_3
.LBB110_14:                             # %while.end
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end110:
	.size	produce_annotation, .Lfunc_end110-produce_annotation
	.cfi_endproc

	.align	16, 0x90
	.type	decode_eol,@function
decode_eol:                             # @decode_eol
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp334:
	.cfi_def_cfa_offset 16
.Ltmp335:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp336:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -8(%rbp)
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movl	$973, %edi              # imm = 0x3CD
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -88(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-88(%rbp), %rsi         # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB111_2
# BB#1:                                 # %lor.lhs.false
	testb	$1, globals+3389
	je	.LBB111_3
.LBB111_2:                              # %if.then
	jmp	.LBB111_77
.LBB111_3:                              # %if.end
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB111_5
# BB#4:                                 # %if.then.6
	movq	-8(%rbp), %rax
	movq	496(%rax), %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB111_9
.LBB111_5:                              # %if.else
	movq	-8(%rbp), %rax
	movq	472(%rax), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB111_7
# BB#6:                                 # %cond.true
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	jmp	.LBB111_8
.LBB111_7:                              # %cond.false
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -104(%rbp)        # 8-byte Spill
	jmp	.LBB111_8
.LBB111_8:                              # %cond.end
	movq	-104(%rbp), %rax        # 8-byte Reload
	movq	-8(%rbp), %rcx
	addq	472(%rcx), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -32(%rbp)
.LBB111_9:                              # %if.end.12
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	384(%rcx), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB111_10
	jmp	.LBB111_36
.LBB111_10:                             # %if.then.15
	movl	$0, -44(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB111_11:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB111_23
# BB#12:                                # %for.body
                                        #   in Loop: Header=BB111_11 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB111_14
# BB#13:                                # %if.then.19
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-44(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB111_21
.LBB111_14:                             # %if.else.20
                                        #   in Loop: Header=BB111_11 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$13, %ecx
	jne	.LBB111_20
# BB#15:                                # %if.then.24
                                        #   in Loop: Header=BB111_11 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB111_18
# BB#16:                                # %land.lhs.true
                                        #   in Loop: Header=BB111_11 Depth=1
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB111_18
# BB#17:                                # %if.then.32
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-44(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -24(%rbp)
	jmp	.LBB111_19
.LBB111_18:                             # %if.else.34
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-44(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -44(%rbp)
.LBB111_19:                             # %if.end.36
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_20
.LBB111_20:                             # %if.end.37
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_21
.LBB111_21:                             # %if.end.38
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_22
.LBB111_22:                             # %for.inc
                                        #   in Loop: Header=BB111_11 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB111_11
.LBB111_23:                             # %for.end
	movl	-44(%rbp), %eax
	andl	$4, %eax
	cmpl	$0, %eax
	je	.LBB111_27
# BB#24:                                # %land.lhs.true.42
	movl	-44(%rbp), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB111_27
# BB#25:                                # %land.lhs.true.46
	movl	-44(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB111_27
# BB#26:                                # %if.then.50
	movl	$4, -44(%rbp)
	jmp	.LBB111_33
.LBB111_27:                             # %if.else.51
	cmpl	$0, -44(%rbp)
	je	.LBB111_32
# BB#28:                                # %land.lhs.true.54
	cmpl	$1, -44(%rbp)
	je	.LBB111_32
# BB#29:                                # %land.lhs.true.57
	cmpl	$4, -44(%rbp)
	je	.LBB111_32
# BB#30:                                # %land.lhs.true.60
	cmpl	$2, -44(%rbp)
	je	.LBB111_32
# BB#31:                                # %if.then.63
	movl	$1, -44(%rbp)
.LBB111_32:                             # %if.end.64
	jmp	.LBB111_33
.LBB111_33:                             # %if.end.65
	cmpl	$0, -44(%rbp)
	je	.LBB111_35
# BB#34:                                # %if.then.68
	movq	-8(%rbp), %rdi
	movl	-44(%rbp), %esi
	callq	adjust_coding_eol_type
	movq	%rax, -16(%rbp)
.LBB111_35:                             # %if.end.70
	jmp	.LBB111_36
.LBB111_36:                             # %if.end.71
	movl	$635, %edi              # imm = 0x27B
	movq	-16(%rbp), %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-112(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB111_44
# BB#37:                                # %if.then.75
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB111_38:                             # %for.cond.76
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB111_43
# BB#39:                                # %for.body.79
                                        #   in Loop: Header=BB111_38 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$13, %ecx
	jne	.LBB111_41
# BB#40:                                # %if.then.83
                                        #   in Loop: Header=BB111_38 Depth=1
	movq	-24(%rbp), %rax
	movb	$10, (%rax)
.LBB111_41:                             # %if.end.84
                                        #   in Loop: Header=BB111_38 Depth=1
	jmp	.LBB111_42
.LBB111_42:                             # %for.inc.85
                                        #   in Loop: Header=BB111_38 Depth=1
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB111_38
.LBB111_43:                             # %for.end.87
	jmp	.LBB111_77
.LBB111_44:                             # %if.else.88
	movl	$351, %edi              # imm = 0x15F
	movq	-16(%rbp), %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-120(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB111_76
# BB#45:                                # %if.then.92
	xorl	%edi, %edi
	movq	$0, -56(%rbp)
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-128(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB111_53
# BB#46:                                # %if.then.97
	movq	-40(%rbp), %rax
	addq	$-2, %rax
	movq	%rax, -24(%rbp)
.LBB111_47:                             # %for.cond.99
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jb	.LBB111_52
# BB#48:                                # %for.body.102
                                        #   in Loop: Header=BB111_47 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	cmpl	$13, %ecx
	jne	.LBB111_50
# BB#49:                                # %if.then.106
                                        #   in Loop: Header=BB111_47 Depth=1
	movq	-24(%rbp), %rdi
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$-1, %rdx
	movq	%rdx, -40(%rbp)
	movq	-24(%rbp), %rdx
	subq	%rdx, %rcx
	subq	$1, %rcx
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	memmove
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -56(%rbp)
.LBB111_50:                             # %if.end.109
                                        #   in Loop: Header=BB111_47 Depth=1
	jmp	.LBB111_51
.LBB111_51:                             # %for.inc.110
                                        #   in Loop: Header=BB111_47 Depth=1
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB111_47
.LBB111_52:                             # %for.end.112
	jmp	.LBB111_75
.LBB111_53:                             # %if.else.113
	movq	-8(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movq	472(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-8(%rbp), %rcx
	addq	384(%rcx), %rax
	subq	$1, %rax
	movq	%rax, -80(%rbp)
.LBB111_54:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jge	.LBB111_74
# BB#55:                                # %while.body
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-72(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	cmpq	24(%rcx), %rax
	jl	.LBB111_57
# BB#56:                                # %cond.true.124
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	current_buffer, %rax
	movq	720(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -136(%rbp)        # 8-byte Spill
	jmp	.LBB111_58
.LBB111_57:                             # %cond.false.127
                                        #   in Loop: Header=BB111_54 Depth=1
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	jmp	.LBB111_58
.LBB111_58:                             # %cond.end.128
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-136(%rbp), %rax        # 8-byte Reload
	addq	-72(%rbp), %rax
	movq	current_buffer, %rcx
	movq	720(%rcx), %rcx
	addq	(%rcx), %rax
	addq	$-1, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movzbl	(%rax), %edx
	cmpl	$13, %edx
	jne	.LBB111_61
# BB#59:                                # %land.lhs.true.138
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-24(%rbp), %rax
	movzbl	1(%rax), %ecx
	cmpl	$10, %ecx
	jne	.LBB111_61
# BB#60:                                # %if.then.142
                                        #   in Loop: Header=BB111_54 Depth=1
	xorl	%r8d, %r8d
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	-72(%rbp), %rcx
	addq	$1, %rcx
	movq	%rax, %rdx
	callq	del_range_2
	movq	-56(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -56(%rbp)
	movq	-80(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -80(%rbp)
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB111_61:                             # %if.end.147
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$20, %ecx
	andl	$1, %ecx
	testl	$1, %ecx
	je	.LBB111_72
# BB#62:                                # %if.then.149
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB111_64
# BB#63:                                # %cond.true.153
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	$1, %eax
	movl	%eax, -148(%rbp)        # 4-byte Spill
	jmp	.LBB111_71
.LBB111_64:                             # %cond.false.154
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB111_66
# BB#65:                                # %cond.true.158
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	$2, %eax
	movl	%eax, -152(%rbp)        # 4-byte Spill
	jmp	.LBB111_70
.LBB111_66:                             # %cond.false.159
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-24(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB111_68
# BB#67:                                # %cond.true.163
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	$3, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
	jmp	.LBB111_69
.LBB111_68:                             # %cond.false.164
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	$5, %eax
	movl	$4, %ecx
	movq	-24(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$8, %esi
	cmpl	$0, %esi
	setne	%dil
	xorb	$-1, %dil
	testb	$1, %dil
	cmovnel	%ecx, %eax
	movl	%eax, -156(%rbp)        # 4-byte Spill
.LBB111_69:                             # %cond.end.169
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	-156(%rbp), %eax        # 4-byte Reload
	movl	%eax, -152(%rbp)        # 4-byte Spill
.LBB111_70:                             # %cond.end.171
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	-152(%rbp), %eax        # 4-byte Reload
	movl	%eax, -148(%rbp)        # 4-byte Spill
.LBB111_71:                             # %cond.end.173
                                        #   in Loop: Header=BB111_54 Depth=1
	movl	-148(%rbp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	addq	-72(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	jmp	.LBB111_73
.LBB111_72:                             # %if.else.177
                                        #   in Loop: Header=BB111_54 Depth=1
	movq	-72(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -72(%rbp)
.LBB111_73:                             # %if.end.179
                                        #   in Loop: Header=BB111_54 Depth=1
	jmp	.LBB111_54
.LBB111_74:                             # %while.end
	jmp	.LBB111_75
.LBB111_75:                             # %if.end.180
	movq	-56(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	384(%rcx), %rdx
	subq	%rax, %rdx
	movq	%rdx, 384(%rcx)
	movq	-56(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	392(%rcx), %rdx
	subq	%rax, %rdx
	movq	%rdx, 392(%rcx)
.LBB111_76:                             # %if.end.184
	jmp	.LBB111_77
.LBB111_77:                             # %if.end.185
	addq	$160, %rsp
	popq	%rbp
	retq
.Lfunc_end111:
	.size	decode_eol, .Lfunc_end111-decode_eol
	.cfi_endproc

	.align	16, 0x90
	.type	get_translation,@function
get_translation:                        # @get_translation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp337:
	.cfi_def_cfa_offset 16
.Ltmp338:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp339:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-16(%rbp), %rdx
	andq	$7, %rdx
	movl	%edx, %eax
	andl	$-5, %eax
	cmpl	$2, %eax
	jne	.LBB112_2
# BB#1:                                 # %if.then
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB112_17
.LBB112_2:                              # %if.end
	jmp	.LBB112_3
.LBB112_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_5 Depth 2
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB112_16
# BB#4:                                 # %for.body
                                        #   in Loop: Header=BB112_3 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	ASIZE
	movq	%rax, -56(%rbp)
	movq	$0, -64(%rbp)
.LBB112_5:                              # %for.cond.9
                                        #   Parent Loop BB112_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jge	.LBB112_12
# BB#6:                                 # %for.body.12
                                        #   in Loop: Header=BB112_5 Depth=2
	movq	-24(%rbp), %rax
	movq	-64(%rbp), %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	cmpq	-32(%rbp), %rax
	jne	.LBB112_8
# BB#7:                                 # %if.then.15
	movl	$901, %edi              # imm = 0x385
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
	jmp	.LBB112_17
.LBB112_8:                              # %if.end.17
                                        #   in Loop: Header=BB112_5 Depth=2
	movq	-48(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	AREF
	sarq	$2, %rax
	movq	-64(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movslq	(%rdi,%rsi,4), %rsi
	cmpq	%rsi, %rax
	je	.LBB112_10
# BB#9:                                 # %if.then.22
                                        #   in Loop: Header=BB112_3 Depth=1
	jmp	.LBB112_12
.LBB112_10:                             # %if.end.23
                                        #   in Loop: Header=BB112_5 Depth=2
	jmp	.LBB112_11
.LBB112_11:                             # %for.inc
                                        #   in Loop: Header=BB112_5 Depth=2
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB112_5
.LBB112_12:                             # %for.end
                                        #   in Loop: Header=BB112_3 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jne	.LBB112_14
# BB#13:                                # %if.then.26
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.LBB112_17
.LBB112_14:                             # %if.end.27
                                        #   in Loop: Header=BB112_3 Depth=1
	jmp	.LBB112_15
.LBB112_15:                             # %for.inc.28
                                        #   in Loop: Header=BB112_3 Depth=1
	movq	-16(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB112_3
.LBB112_16:                             # %for.end.30
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -8(%rbp)
.LBB112_17:                             # %return
	movq	-8(%rbp), %rax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end112:
	.size	get_translation, .Lfunc_end112-get_translation
	.cfi_endproc

	.align	16, 0x90
	.type	produce_composition,@function
produce_composition:                    # @produce_composition
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp340:
	.cfi_def_cfa_offset 16
.Ltmp341:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp342:
	.cfi_def_cfa_register %rbp
	subq	$352, %rsp              # imm = 0x160
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	subl	(%rdx), %eax
	subl	$5, %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movslq	8(%rsi), %rsi
	addq	%rsi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-16(%rbp), %rdx
	movl	16(%rdx), %eax
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jne	.LBB113_2
# BB#1:                                 # %if.then
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -56(%rbp)
	jmp	.LBB113_17
.LBB113_2:                              # %if.else
	cmpl	$1, -44(%rbp)
	jne	.LBB113_4
# BB#3:                                 # %if.then.7
	movq	-16(%rbp), %rax
	imull	$3, 8(%rax), %ecx
	subl	$2, %ecx
	movl	%ecx, -28(%rbp)
.LBB113_4:                              # %if.end
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -16(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -308(%rbp)
.LBB113_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-308(%rbp), %eax
	cmpl	-28(%rbp), %eax
	movb	%cl, -313(%rbp)         # 1-byte Spill
	jge	.LBB113_7
# BB#6:                                 # %land.rhs
                                        #   in Loop: Header=BB113_5 Depth=1
	movslq	-308(%rbp), %rax
	movq	-16(%rbp), %rcx
	cmpl	$-1, (%rcx,%rax,4)
	setne	%dl
	movb	%dl, -313(%rbp)         # 1-byte Spill
.LBB113_7:                              # %land.end
                                        #   in Loop: Header=BB113_5 Depth=1
	movb	-313(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB113_8
	jmp	.LBB113_13
.LBB113_8:                              # %for.body
                                        #   in Loop: Header=BB113_5 Depth=1
	movslq	-308(%rbp), %rax
	movq	-16(%rbp), %rcx
	cmpl	$0, (%rcx,%rax,4)
	jl	.LBB113_10
# BB#9:                                 # %if.then.19
                                        #   in Loop: Header=BB113_5 Depth=1
	movslq	-308(%rbp), %rax
	movq	-16(%rbp), %rcx
	movslq	(%rcx,%rax,4), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movslq	-312(%rbp), %rcx
	movq	%rax, -304(%rbp,%rcx,8)
	jmp	.LBB113_11
.LBB113_10:                             # %if.else.26
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$256, %eax              # imm = 0x100
	movl	-308(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -308(%rbp)
	movslq	-308(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movl	(%rsi,%rdx,4), %ecx
	movl	%eax, -320(%rbp)        # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-320(%rbp), %ecx        # 4-byte Reload
	idivl	%ecx
	movslq	%edx, %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movslq	-312(%rbp), %rdi
	movq	%rsi, -304(%rbp,%rdi,8)
.LBB113_11:                             # %if.end.34
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_12
.LBB113_12:                             # %for.inc
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-308(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -308(%rbp)
	movl	-312(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -312(%rbp)
	jmp	.LBB113_5
.LBB113_13:                             # %for.end
	movl	-308(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jne	.LBB113_15
# BB#14:                                # %cond.true
	leaq	-304(%rbp), %rsi
	movslq	-312(%rbp), %rdi
	callq	Fstring
	movq	%rax, -328(%rbp)        # 8-byte Spill
	jmp	.LBB113_16
.LBB113_15:                             # %cond.false
	leaq	-304(%rbp), %rsi
	movslq	-312(%rbp), %rdi
	callq	Fvector
	movq	%rax, -328(%rbp)        # 8-byte Spill
.LBB113_16:                             # %cond.end
	movq	-328(%rbp), %rax        # 8-byte Reload
	movq	%rax, -56(%rbp)
.LBB113_17:                             # %if.end.44
	xorl	%edi, %edi
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%rax, -344(%rbp)        # 8-byte Spill
	movq	%rsi, -352(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-8(%rbp), %rdx
	movq	488(%rdx), %r8
	movq	-344(%rbp), %rdi        # 8-byte Reload
	movq	-352(%rbp), %rsi        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	callq	compose_text
	addq	$352, %rsp              # imm = 0x160
	popq	%rbp
	retq
.Lfunc_end113:
	.size	produce_composition, .Lfunc_end113-produce_composition
	.cfi_endproc

	.align	16, 0x90
	.type	produce_charset,@function
produce_charset:                        # @produce_charset
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp343:
	.cfi_def_cfa_offset 16
.Ltmp344:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp345:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$261, %eax              # imm = 0x105
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movslq	8(%rsi), %rsi
	subq	%rsi, %rdx
	movq	%rdx, -32(%rbp)
	movq	charset_table, %rdx
	movq	-16(%rbp), %rsi
	movslq	12(%rsi), %rsi
	imulq	$328, %rsi, %rsi        # imm = 0x148
	addq	%rsi, %rdx
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rdx
	shlq	$2, %rdx
	addq	$2, %rdx
	movq	-24(%rbp), %rsi
	shlq	$2, %rsi
	addq	$2, %rsi
	movl	%eax, %edi
	movq	%rsi, -48(%rbp)         # 8-byte Spill
	movq	%rdx, -56(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	Vcharset_hash_table, %rdi
	movq	%rax, -64(%rbp)         # 8-byte Spill
	callq	XHASH_TABLE
	movq	-40(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$1, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	-8(%rbp), %rdx
	movq	488(%rdx), %r8
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	callq	Fput_text_property
	movq	%rax, -72(%rbp)         # 8-byte Spill
	addq	$80, %rsp
	popq	%rbp
	retq
.Lfunc_end114:
	.size	produce_charset, .Lfunc_end114-produce_charset
	.cfi_endproc

	.align	16, 0x90
	.type	consume_chars,@function
consume_chars:                          # @consume_chars
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp346:
	.cfi_def_cfa_offset 16
.Ltmp347:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp348:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              # imm = 0x180
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rsi
	movq	504(%rsi), %rsi
	movq	%rsi, -32(%rbp)
	movq	-8(%rbp), %rsi
	movq	504(%rsi), %rsi
	movq	-8(%rbp), %rdi
	movslq	512(%rdi), %rdi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -40(%rbp)
	movq	-8(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	400(%rdi), %rsi
	movq	%rsi, -48(%rbp)
	movq	-8(%rbp), %rsi
	movq	456(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	440(%rdi), %rsi
	movq	%rsi, -56(%rbp)
	movq	-8(%rbp), %rsi
	movq	416(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	408(%rdi), %rsi
	movq	%rsi, -64(%rbp)
	movq	-8(%rbp), %rsi
	movq	416(%rsi), %rsi
	movq	-8(%rbp), %rdi
	addq	432(%rdi), %rsi
	movq	%rsi, -72(%rbp)
	movq	-8(%rbp), %rsi
	movl	8(%rsi), %edx
	shrl	$19, %edx
	andl	$1, %edx
	movb	%dl, %cl
	andb	$1, %cl
	movb	%cl, -73(%rbp)
	movq	$0, -128(%rbp)
	movq	-16(%rbp), %rsi
	movl	%eax, %edi
	movq	%rsi, -200(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-200(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	je	.LBB115_2
# BB#1:                                 # %if.then
	movslq	-20(%rbp), %rax
	leaq	15(,%rax,4), %rax
	andq	$-16, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	movq	%rcx, -128(%rbp)
.LBB115_2:                              # %if.end
	testb	$1, globals+3389
	je	.LBB115_4
# BB#3:                                 # %cond.true
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movq	%rax, -208(%rbp)        # 8-byte Spill
	jmp	.LBB115_5
.LBB115_4:                              # %cond.false
	movq	Vcoding_system_hash_table, %rdi
	callq	XHASH_TABLE
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	HASH_VALUE
	movl	$2, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	movq	%rax, -208(%rbp)        # 8-byte Spill
.LBB115_5:                              # %cond.end
	movq	-208(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB115_6
	jmp	.LBB115_7
.LBB115_6:                              # %if.then.13
	movl	$973, %edi              # imm = 0x3CD
	callq	builtin_lisp_symbol
	movq	%rax, -88(%rbp)
.LBB115_7:                              # %if.end.15
	xorl	%edi, %edi
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-2, %ecx
	movl	8(%rax), %edx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$-16384, %edx           # imm = 0xFFFFFFFFFFFFC000
	orl	%ecx, %edx
	movl	%edx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	448(%rax), %rax
	movq	%rax, -216(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-216(%rbp), %rsi        # 8-byte Reload
	cmpq	%rax, %rsi
	jne	.LBB115_9
# BB#8:                                 # %if.then.23
	movq	-72(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	%rax, -112(%rbp)
	movq	%rax, -104(%rbp)
	jmp	.LBB115_16
.LBB115_9:                              # %if.else
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$1, %ecx
	cmpl	$0, %ecx
	je	.LBB115_11
# BB#10:                                # %if.then.29
	movq	-64(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	%rax, -104(%rbp)
	jmp	.LBB115_12
.LBB115_11:                             # %if.else.30
	movq	-72(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	%rax, -104(%rbp)
.LBB115_12:                             # %if.end.31
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	andl	$16383, %ecx            # imm = 0x3FFF
	andl	$3, %ecx
	cmpl	$0, %ecx
	je	.LBB115_14
# BB#13:                                # %if.then.37
	movq	-64(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	%rax, -104(%rbp)
	jmp	.LBB115_15
.LBB115_14:                             # %if.else.38
	movq	-72(%rbp), %rax
	movq	%rax, -120(%rbp)
.LBB115_15:                             # %if.end.39
	jmp	.LBB115_16
.LBB115_16:                             # %if.end.40
	movq	-40(%rbp), %rax
	addq	$-24, %rax
	movq	%rax, -40(%rbp)
.LBB115_17:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_108 Depth 2
                                        #     Child Loop BB115_125 Depth 2
                                        #     Child Loop BB115_151 Depth 2
                                        #     Child Loop BB115_155 Depth 2
	movq	-32(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jae	.LBB115_186
# BB#18:                                # %while.body
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jne	.LBB115_29
# BB#19:                                # %if.then.46
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jne	.LBB115_21
# BB#20:                                # %if.then.49
	jmp	.LBB115_186
.LBB115_21:                             # %if.end.50
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jne	.LBB115_23
# BB#22:                                # %if.then.53
                                        #   in Loop: Header=BB115_17 Depth=1
	leaq	-112(%rbp), %r8
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	handle_composition_annotation
	movq	%rax, -32(%rbp)
.LBB115_23:                             # %if.end.55
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-64(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jne	.LBB115_25
# BB#24:                                # %if.then.58
                                        #   in Loop: Header=BB115_17 Depth=1
	leaq	-120(%rbp), %r8
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %rsi
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	handle_charset_annotation
	movq	%rax, -32(%rbp)
.LBB115_25:                             # %if.end.60
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-112(%rbp), %rax
	cmpq	-120(%rbp), %rax
	jge	.LBB115_27
# BB#26:                                # %cond.true.63
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-112(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
	jmp	.LBB115_28
.LBB115_27:                             # %cond.false.64
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-120(%rbp), %rax
	movq	%rax, -224(%rbp)        # 8-byte Spill
.LBB115_28:                             # %cond.end.65
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, -104(%rbp)
.LBB115_29:                             # %if.end.67
                                        #   in Loop: Header=BB115_17 Depth=1
	testb	$1, -73(%rbp)
	jne	.LBB115_80
# BB#30:                                # %if.then.69
                                        #   in Loop: Header=BB115_17 Depth=1
	movabsq	$encode_coding_raw_text, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rax, 608(%rcx)
	je	.LBB115_32
# BB#31:                                # %lor.lhs.false
                                        #   in Loop: Header=BB115_17 Depth=1
	movabsq	$encode_coding_ccl, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rax, 608(%rcx)
	jne	.LBB115_33
.LBB115_32:                             # %if.then.75
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -92(%rbp)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB115_79
.LBB115_33:                             # %if.else.77
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jb	.LBB115_35
# BB#34:                                # %cond.true.80
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, -228(%rbp)        # 4-byte Spill
	jmp	.LBB115_66
.LBB115_35:                             # %cond.false.81
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_37
# BB#36:                                # %cond.true.85
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$1, %eax
	movl	%eax, -232(%rbp)        # 4-byte Spill
	jmp	.LBB115_65
.LBB115_37:                             # %cond.false.86
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	cmpq	-56(%rbp), %rax
	jae	.LBB115_39
# BB#38:                                # %lor.lhs.false.90
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_40
.LBB115_39:                             # %cond.true.96
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, -236(%rbp)        # 4-byte Spill
	jmp	.LBB115_64
.LBB115_40:                             # %cond.false.97
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$224, %ecx
	cmpl	$192, %ecx
	jne	.LBB115_42
# BB#41:                                # %cond.true.103
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$2, %eax
	movl	%eax, -240(%rbp)        # 4-byte Spill
	jmp	.LBB115_63
.LBB115_42:                             # %cond.false.104
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	addq	$2, %rax
	cmpq	-56(%rbp), %rax
	jae	.LBB115_44
# BB#43:                                # %lor.lhs.false.108
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	2(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_45
.LBB115_44:                             # %cond.true.114
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, -244(%rbp)        # 4-byte Spill
	jmp	.LBB115_62
.LBB115_45:                             # %cond.false.115
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$240, %ecx
	cmpl	$224, %ecx
	jne	.LBB115_47
# BB#46:                                # %cond.true.121
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$3, %eax
	movl	%eax, -248(%rbp)        # 4-byte Spill
	jmp	.LBB115_61
.LBB115_47:                             # %cond.false.122
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	addq	$3, %rax
	cmpq	-56(%rbp), %rax
	jae	.LBB115_49
# BB#48:                                # %lor.lhs.false.126
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	3(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_50
.LBB115_49:                             # %cond.true.132
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, -252(%rbp)        # 4-byte Spill
	jmp	.LBB115_60
.LBB115_50:                             # %cond.false.133
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$248, %ecx
	cmpl	$240, %ecx
	jne	.LBB115_52
# BB#51:                                # %cond.true.139
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$4, %eax
	movl	%eax, -256(%rbp)        # 4-byte Spill
	jmp	.LBB115_59
.LBB115_52:                             # %cond.false.140
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	addq	$4, %rax
	cmpq	-56(%rbp), %rax
	jae	.LBB115_54
# BB#53:                                # %lor.lhs.false.144
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	4(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_55
.LBB115_54:                             # %cond.true.150
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, -260(%rbp)        # 4-byte Spill
	jmp	.LBB115_58
.LBB115_55:                             # %cond.false.151
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movzbl	(%rdx), %eax
	cmpl	$248, %eax
	movb	%cl, -261(%rbp)         # 1-byte Spill
	jne	.LBB115_57
# BB#56:                                # %land.rhs
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$240, %ecx
	cmpl	$128, %ecx
	sete	%dl
	movb	%dl, -261(%rbp)         # 1-byte Spill
.LBB115_57:                             # %land.end
                                        #   in Loop: Header=BB115_17 Depth=1
	movb	-261(%rbp), %al         # 1-byte Reload
	xorl	%ecx, %ecx
	movl	$5, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movl	%ecx, -260(%rbp)        # 4-byte Spill
.LBB115_58:                             # %cond.end.162
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-260(%rbp), %eax        # 4-byte Reload
	movl	%eax, -256(%rbp)        # 4-byte Spill
.LBB115_59:                             # %cond.end.164
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-256(%rbp), %eax        # 4-byte Reload
	movl	%eax, -252(%rbp)        # 4-byte Spill
.LBB115_60:                             # %cond.end.166
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-252(%rbp), %eax        # 4-byte Reload
	movl	%eax, -248(%rbp)        # 4-byte Spill
.LBB115_61:                             # %cond.end.168
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-248(%rbp), %eax        # 4-byte Reload
	movl	%eax, -244(%rbp)        # 4-byte Spill
.LBB115_62:                             # %cond.end.170
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-244(%rbp), %eax        # 4-byte Reload
	movl	%eax, -240(%rbp)        # 4-byte Spill
.LBB115_63:                             # %cond.end.172
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-240(%rbp), %eax        # 4-byte Reload
	movl	%eax, -236(%rbp)        # 4-byte Spill
.LBB115_64:                             # %cond.end.174
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-236(%rbp), %eax        # 4-byte Reload
	movl	%eax, -232(%rbp)        # 4-byte Spill
.LBB115_65:                             # %cond.end.176
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-232(%rbp), %eax        # 4-byte Reload
	movl	%eax, -228(%rbp)        # 4-byte Spill
.LBB115_66:                             # %cond.end.178
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-228(%rbp), %eax        # 4-byte Reload
	movl	%eax, -140(%rbp)
	cmpl	$0, %eax
	jle	.LBB115_77
# BB#67:                                # %if.then.182
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_69
# BB#68:                                # %cond.true.187
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -268(%rbp)        # 4-byte Spill
	jmp	.LBB115_76
.LBB115_69:                             # %cond.false.190
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_71
# BB#70:                                # %cond.true.195
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-48(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-48(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-48(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -272(%rbp)        # 4-byte Spill
	jmp	.LBB115_75
.LBB115_71:                             # %cond.false.209
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_73
# BB#72:                                # %cond.true.214
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-48(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-48(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -276(%rbp)        # 4-byte Spill
	jmp	.LBB115_74
.LBB115_73:                             # %cond.false.229
                                        #   in Loop: Header=BB115_17 Depth=1
	leaq	-48(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rdi
	callq	string_char
	movl	%eax, -276(%rbp)        # 4-byte Spill
.LBB115_74:                             # %cond.end.231
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-276(%rbp), %eax        # 4-byte Reload
	movl	%eax, -272(%rbp)        # 4-byte Spill
.LBB115_75:                             # %cond.end.233
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-272(%rbp), %eax        # 4-byte Reload
	movl	%eax, -268(%rbp)        # 4-byte Spill
.LBB115_76:                             # %cond.end.235
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-268(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	movslq	-140(%rbp), %rcx
	addq	-64(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	jmp	.LBB115_78
.LBB115_77:                             # %if.else.239
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	addl	$4194048, %ecx          # imm = 0x3FFF00
	movl	%ecx, -92(%rbp)
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -64(%rbp)
.LBB115_78:                             # %if.end.244
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_79
.LBB115_79:                             # %if.end.245
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_90
.LBB115_80:                             # %if.else.246
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_82
# BB#81:                                # %cond.true.251
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -280(%rbp)        # 4-byte Spill
	jmp	.LBB115_89
.LBB115_82:                             # %cond.false.254
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_84
# BB#83:                                # %cond.true.259
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-48(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-48(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-48(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -284(%rbp)        # 4-byte Spill
	jmp	.LBB115_88
.LBB115_84:                             # %cond.false.275
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_86
# BB#85:                                # %cond.true.280
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-48(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-48(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-48(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -288(%rbp)        # 4-byte Spill
	jmp	.LBB115_87
.LBB115_86:                             # %cond.false.295
                                        #   in Loop: Header=BB115_17 Depth=1
	leaq	-48(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rdi
	callq	string_char
	movl	%eax, -288(%rbp)        # 4-byte Spill
.LBB115_87:                             # %cond.end.297
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-288(%rbp), %eax        # 4-byte Reload
	movl	%eax, -284(%rbp)        # 4-byte Spill
.LBB115_88:                             # %cond.end.299
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-284(%rbp), %eax        # 4-byte Reload
	movl	%eax, -280(%rbp)        # 4-byte Spill
.LBB115_89:                             # %cond.end.301
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-280(%rbp), %eax        # 4-byte Reload
	movl	%eax, -92(%rbp)
	movq	-64(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -64(%rbp)
.LBB115_90:                             # %if.end.304
                                        #   in Loop: Header=BB115_17 Depth=1
	cmpl	$13, -92(%rbp)
	jne	.LBB115_93
# BB#91:                                # %land.lhs.true
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	shrl	$14, %ecx
	andl	$31, %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB115_93
# BB#92:                                # %if.then.312
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$10, -92(%rbp)
.LBB115_93:                             # %if.end.313
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$973, %edi              # imm = 0x3CD
	movq	-88(%rbp), %rax
	movq	%rax, -296(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-296(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB115_100
# BB#94:                                # %if.then.317
                                        #   in Loop: Header=BB115_17 Depth=1
	cmpl	$10, -92(%rbp)
	jne	.LBB115_99
# BB#95:                                # %if.then.320
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$351, %edi              # imm = 0x15F
	movq	-88(%rbp), %rax
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-304(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB115_97
# BB#96:                                # %if.then.324
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$13, (%rax)
	jmp	.LBB115_98
.LBB115_97:                             # %if.else.326
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$13, -92(%rbp)
.LBB115_98:                             # %if.end.327
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_99
.LBB115_99:                             # %if.end.328
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_100
.LBB115_100:                            # %if.end.329
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -136(%rbp)
# BB#101:                               # %do.body
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%edi, %edi
	callq	builtin_lisp_symbol
	movq	%rax, -136(%rbp)
	movq	-16(%rbp), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB115_102
	jmp	.LBB115_106
.LBB115_102:                            # %if.then.333
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-16(%rbp), %rdi
	movl	-92(%rbp), %esi
	callq	CHAR_TABLE_REF
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB115_103
	jmp	.LBB115_105
.LBB115_103:                            # %land.lhs.true.337
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB115_105
# BB#104:                               # %if.then.340
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -136(%rbp)
.LBB115_105:                            # %if.end.344
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_121
.LBB115_106:                            # %if.else.345
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-16(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB115_120
# BB#107:                               # %if.then.350
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-16(%rbp), %rax
	movq	%rax, -152(%rbp)
.LBB115_108:                            # %for.cond
                                        #   Parent Loop BB115_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-152(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB115_119
# BB#109:                               # %for.body
                                        #   in Loop: Header=BB115_108 Depth=2
	movq	-152(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	CHAR_TABLE_P
	testb	$1, %al
	jne	.LBB115_110
	jmp	.LBB115_117
.LBB115_110:                            # %if.then.356
                                        #   in Loop: Header=BB115_108 Depth=2
	movq	-152(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	movl	-92(%rbp), %esi
	callq	CHAR_TABLE_REF
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rdi
	callq	NATNUMP
	testb	$1, %al
	jne	.LBB115_111
	jmp	.LBB115_113
.LBB115_111:                            # %land.lhs.true.362
                                        #   in Loop: Header=BB115_108 Depth=2
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	cmpq	$4194303, %rax          # imm = 0x3FFFFF
	jg	.LBB115_113
# BB#112:                               # %if.then.366
                                        #   in Loop: Header=BB115_108 Depth=2
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	callq	builtin_lisp_symbol
	movq	%rax, -136(%rbp)
	jmp	.LBB115_116
.LBB115_113:                            # %if.else.370
                                        #   in Loop: Header=BB115_108 Depth=2
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	movq	%rax, -312(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-312(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB115_115
# BB#114:                               # %if.then.374
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_119
.LBB115_115:                            # %if.end.375
                                        #   in Loop: Header=BB115_108 Depth=2
	jmp	.LBB115_116
.LBB115_116:                            # %if.end.376
                                        #   in Loop: Header=BB115_108 Depth=2
	jmp	.LBB115_117
.LBB115_117:                            # %if.end.377
                                        #   in Loop: Header=BB115_108 Depth=2
	jmp	.LBB115_118
.LBB115_118:                            # %for.inc
                                        #   in Loop: Header=BB115_108 Depth=2
	movq	-152(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -152(%rbp)
	jmp	.LBB115_108
.LBB115_119:                            # %for.end
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_120
.LBB115_120:                            # %if.end.379
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_121
.LBB115_121:                            # %if.end.380
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_122
.LBB115_122:                            # %do.end
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%edi, %edi
	movq	-136(%rbp), %rax
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-320(%rbp), %rcx        # 8-byte Reload
	cmpq	%rax, %rcx
	jne	.LBB115_124
# BB#123:                               # %if.then.384
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -32(%rbp)
	movl	%eax, (%rcx)
	jmp	.LBB115_185
.LBB115_124:                            # %if.else.386
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	$1, -160(%rbp)
	movq	$1, -168(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -184(%rbp)
	movl	-92(%rbp), %ecx
	movq	-128(%rbp), %rax
	movl	%ecx, (%rax)
	movl	$1, -188(%rbp)
.LBB115_125:                            # %for.cond.388
                                        #   Parent Loop BB115_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movl	-188(%rbp), %eax
	cmpl	-20(%rbp), %eax
	movb	%cl, -321(%rbp)         # 1-byte Spill
	jge	.LBB115_127
# BB#126:                               # %land.rhs.391
                                        #   in Loop: Header=BB115_125 Depth=2
	movq	-184(%rbp), %rax
	cmpq	-56(%rbp), %rax
	setb	%cl
	movb	%cl, -321(%rbp)         # 1-byte Spill
.LBB115_127:                            # %land.end.394
                                        #   in Loop: Header=BB115_125 Depth=2
	movb	-321(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB115_128
	jmp	.LBB115_139
.LBB115_128:                            # %for.body.395
                                        #   in Loop: Header=BB115_125 Depth=2
	movq	-184(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_130
# BB#129:                               # %cond.true.400
                                        #   in Loop: Header=BB115_125 Depth=2
	movq	-184(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -184(%rbp)
	movzbl	(%rax), %edx
	movl	%edx, -328(%rbp)        # 4-byte Spill
	jmp	.LBB115_137
.LBB115_130:                            # %cond.false.403
                                        #   in Loop: Header=BB115_125 Depth=2
	movq	-184(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_132
# BB#131:                               # %cond.true.408
                                        #   in Loop: Header=BB115_125 Depth=2
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movq	-184(%rbp), %rdx
	addq	$2, %rdx
	movq	%rdx, -184(%rbp)
	movq	-184(%rbp), %rdx
	movzbl	-2(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-184(%rbp), %rdx
	movzbl	-1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-184(%rbp), %rdx
	movzbl	-2(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	orl	%eax, %esi
	movl	%esi, -332(%rbp)        # 4-byte Spill
	jmp	.LBB115_136
.LBB115_132:                            # %cond.false.424
                                        #   in Loop: Header=BB115_125 Depth=2
	movq	-184(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_134
# BB#133:                               # %cond.true.429
                                        #   in Loop: Header=BB115_125 Depth=2
	movq	-184(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movzbl	-3(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-184(%rbp), %rax
	movzbl	-2(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-184(%rbp), %rax
	movzbl	-1(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -336(%rbp)        # 4-byte Spill
	jmp	.LBB115_135
.LBB115_134:                            # %cond.false.444
                                        #   in Loop: Header=BB115_125 Depth=2
	leaq	-184(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	-184(%rbp), %rdi
	callq	string_char
	movl	%eax, -336(%rbp)        # 4-byte Spill
.LBB115_135:                            # %cond.end.446
                                        #   in Loop: Header=BB115_125 Depth=2
	movl	-336(%rbp), %eax        # 4-byte Reload
	movl	%eax, -332(%rbp)        # 4-byte Spill
.LBB115_136:                            # %cond.end.448
                                        #   in Loop: Header=BB115_125 Depth=2
	movl	-332(%rbp), %eax        # 4-byte Reload
	movl	%eax, -328(%rbp)        # 4-byte Spill
.LBB115_137:                            # %cond.end.450
                                        #   in Loop: Header=BB115_125 Depth=2
	movl	-328(%rbp), %eax        # 4-byte Reload
	movslq	-188(%rbp), %rcx
	movq	-128(%rbp), %rdx
	movl	%eax, (%rdx,%rcx,4)
# BB#138:                               # %for.inc.453
                                        #   in Loop: Header=BB115_125 Depth=2
	movl	-188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB115_125
.LBB115_139:                            # %for.end.455
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-128(%rbp), %rax
	movslq	-188(%rbp), %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-136(%rbp), %rdi
	movq	-128(%rbp), %rsi
	movq	-176(%rbp), %rdx
	callq	get_translation
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %r8d
	andl	$-5, %r8d
	cmpl	$2, %r8d
	jne	.LBB115_141
# BB#140:                               # %if.then.464
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	jmp	.LBB115_150
.LBB115_141:                            # %if.else.467
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-136(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB115_148
# BB#142:                               # %if.then.472
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rdi
	callq	ASIZE
	movq	%rax, -160(%rbp)
	movq	-136(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB115_144
# BB#143:                               # %if.then.484
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-136(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	jmp	.LBB115_147
.LBB115_144:                            # %if.else.487
                                        #   in Loop: Header=BB115_17 Depth=1
	movq	-136(%rbp), %rdi
	callq	ASIZE
	movq	%rax, -168(%rbp)
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rdi
	subq	%rdi, %rax
	sarq	$2, %rax
	cmpq	-168(%rbp), %rax
	jge	.LBB115_146
# BB#145:                               # %if.then.491
	jmp	.LBB115_186
.LBB115_146:                            # %if.end.492
                                        #   in Loop: Header=BB115_17 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-136(%rbp), %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -92(%rbp)
.LBB115_147:                            # %if.end.496
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_149
.LBB115_148:                            # %if.else.497
	jmp	.LBB115_186
.LBB115_149:                            # %if.end.498
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_150
.LBB115_150:                            # %if.end.499
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -32(%rbp)
	movl	%eax, (%rcx)
	movl	$1, -188(%rbp)
.LBB115_151:                            # %for.cond.501
                                        #   Parent Loop BB115_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-188(%rbp), %rax
	cmpq	-168(%rbp), %rax
	jge	.LBB115_154
# BB#152:                               # %for.body.505
                                        #   in Loop: Header=BB115_151 Depth=2
	movq	-136(%rbp), %rdi
	movslq	-188(%rbp), %rsi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	movq	%rax, %rsi
	addq	$4, %rsi
	movq	%rsi, -32(%rbp)
	movl	%ecx, (%rax)
# BB#153:                               # %for.inc.511
                                        #   in Loop: Header=BB115_151 Depth=2
	movl	-188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -188(%rbp)
	jmp	.LBB115_151
.LBB115_154:                            # %for.end.513
                                        #   in Loop: Header=BB115_17 Depth=1
	movl	$1, -188(%rbp)
.LBB115_155:                            # %for.cond.514
                                        #   Parent Loop BB115_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movslq	-188(%rbp), %rax
	cmpq	-160(%rbp), %rax
	jge	.LBB115_184
# BB#156:                               # %for.body.518
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB115_158
# BB#157:                               # %cond.true.523
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	$1, %eax
	movl	%eax, -340(%rbp)        # 4-byte Spill
	jmp	.LBB115_182
.LBB115_158:                            # %cond.false.524
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_160
# BB#159:                               # %cond.true.530
                                        #   in Loop: Header=BB115_155 Depth=2
	xorl	%eax, %eax
	movl	%eax, -344(%rbp)        # 4-byte Spill
	jmp	.LBB115_181
.LBB115_160:                            # %cond.false.531
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$224, %ecx
	cmpl	$192, %ecx
	jne	.LBB115_162
# BB#161:                               # %cond.true.537
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	$2, %eax
	movl	%eax, -348(%rbp)        # 4-byte Spill
	jmp	.LBB115_180
.LBB115_162:                            # %cond.false.538
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	2(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_164
# BB#163:                               # %cond.true.544
                                        #   in Loop: Header=BB115_155 Depth=2
	xorl	%eax, %eax
	movl	%eax, -352(%rbp)        # 4-byte Spill
	jmp	.LBB115_179
.LBB115_164:                            # %cond.false.545
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$240, %ecx
	cmpl	$224, %ecx
	jne	.LBB115_166
# BB#165:                               # %cond.true.551
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	$3, %eax
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jmp	.LBB115_178
.LBB115_166:                            # %cond.false.552
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	3(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_168
# BB#167:                               # %cond.true.558
                                        #   in Loop: Header=BB115_155 Depth=2
	xorl	%eax, %eax
	movl	%eax, -360(%rbp)        # 4-byte Spill
	jmp	.LBB115_177
.LBB115_168:                            # %cond.false.559
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$248, %ecx
	cmpl	$240, %ecx
	jne	.LBB115_170
# BB#169:                               # %cond.true.565
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	$4, %eax
	movl	%eax, -364(%rbp)        # 4-byte Spill
	jmp	.LBB115_176
.LBB115_170:                            # %cond.false.566
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	4(%rax), %ecx
	andl	$192, %ecx
	cmpl	$128, %ecx
	je	.LBB115_172
# BB#171:                               # %cond.true.572
                                        #   in Loop: Header=BB115_155 Depth=2
	xorl	%eax, %eax
	movl	%eax, -368(%rbp)        # 4-byte Spill
	jmp	.LBB115_175
.LBB115_172:                            # %cond.false.573
                                        #   in Loop: Header=BB115_155 Depth=2
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-48(%rbp), %rdx
	movzbl	(%rdx), %eax
	cmpl	$248, %eax
	movb	%cl, -369(%rbp)         # 1-byte Spill
	jne	.LBB115_174
# BB#173:                               # %land.rhs.578
                                        #   in Loop: Header=BB115_155 Depth=2
	movq	-48(%rbp), %rax
	movzbl	1(%rax), %ecx
	andl	$240, %ecx
	cmpl	$128, %ecx
	sete	%dl
	movb	%dl, -369(%rbp)         # 1-byte Spill
.LBB115_174:                            # %land.end.584
                                        #   in Loop: Header=BB115_155 Depth=2
	movb	-369(%rbp), %al         # 1-byte Reload
	xorl	%ecx, %ecx
	movl	$5, %edx
	testb	$1, %al
	cmovnel	%edx, %ecx
	movl	%ecx, -368(%rbp)        # 4-byte Spill
.LBB115_175:                            # %cond.end.586
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-368(%rbp), %eax        # 4-byte Reload
	movl	%eax, -364(%rbp)        # 4-byte Spill
.LBB115_176:                            # %cond.end.588
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-364(%rbp), %eax        # 4-byte Reload
	movl	%eax, -360(%rbp)        # 4-byte Spill
.LBB115_177:                            # %cond.end.590
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-360(%rbp), %eax        # 4-byte Reload
	movl	%eax, -356(%rbp)        # 4-byte Spill
.LBB115_178:                            # %cond.end.592
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-356(%rbp), %eax        # 4-byte Reload
	movl	%eax, -352(%rbp)        # 4-byte Spill
.LBB115_179:                            # %cond.end.594
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-352(%rbp), %eax        # 4-byte Reload
	movl	%eax, -348(%rbp)        # 4-byte Spill
.LBB115_180:                            # %cond.end.596
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-348(%rbp), %eax        # 4-byte Reload
	movl	%eax, -344(%rbp)        # 4-byte Spill
.LBB115_181:                            # %cond.end.598
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-344(%rbp), %eax        # 4-byte Reload
	movl	%eax, -340(%rbp)        # 4-byte Spill
.LBB115_182:                            # %cond.end.600
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-340(%rbp), %eax        # 4-byte Reload
	movq	-48(%rbp), %rcx
	movslq	%eax, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
# BB#183:                               # %for.inc.604
                                        #   in Loop: Header=BB115_155 Depth=2
	movl	-188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -188(%rbp)
	movq	-64(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -64(%rbp)
	jmp	.LBB115_155
.LBB115_184:                            # %for.end.607
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_185
.LBB115_185:                            # %if.end.608
                                        #   in Loop: Header=BB115_17 Depth=1
	jmp	.LBB115_17
.LBB115_186:                            # %while.end
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	456(%rcx), %rcx
	subq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 400(%rcx)
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	subq	416(%rcx), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 408(%rcx)
	movq	-32(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	504(%rcx), %rcx
	subq	%rcx, %rax
	sarq	$2, %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 516(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-2097153, %edx         # imm = 0xFFFFFFFFFFDFFFFF
	movl	%edx, 8(%rax)
	movq	%rbp, %rsp
	popq	%rbp
	retq
.Lfunc_end115:
	.size	consume_chars, .Lfunc_end115-consume_chars
	.cfi_endproc

	.align	16, 0x90
	.type	handle_composition_annotation,@function
handle_composition_annotation:          # @handle_composition_annotation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp349:
	.cfi_def_cfa_offset 16
.Ltmp350:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp351:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	leaq	-48(%rbp), %rax
	leaq	-56(%rbp), %r9
	leaq	-64(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rcx
	movq	448(%rcx), %rcx
	movq	%rax, %rdx
	movq	%rcx, -136(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movq	%r10, %r8
	movq	-136(%rbp), %r9         # 8-byte Reload
	callq	find_composition
	testb	$1, %al
	jne	.LBB116_1
	jmp	.LBB116_2
.LBB116_1:                              # %lor.lhs.false
	movq	-56(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jle	.LBB116_3
.LBB116_2:                              # %if.then
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB116_62
.LBB116_3:                              # %if.else
	movq	-48(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jle	.LBB116_5
# BB#4:                                 # %if.then.2
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB116_61
.LBB116_5:                              # %if.else.3
	movq	-48(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jne	.LBB116_56
# BB#6:                                 # %if.then.5
	movq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-64(%rbp), %rdi
	callq	composition_method
	movl	%eax, -76(%rbp)
	movq	-64(%rbp), %rdi
	callq	composition_registered_p
	testb	$1, %al
	jne	.LBB116_7
	jmp	.LBB116_8
.LBB116_7:                              # %cond.true
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
	jmp	.LBB116_9
.LBB116_8:                              # %cond.false
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movq	%rax, -144(%rbp)        # 8-byte Spill
.LBB116_9:                              # %cond.end
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	%eax, %ecx
	movl	%ecx, -80(%rbp)
# BB#10:                                # %do.body
	jmp	.LBB116_11
.LBB116_11:                             # %do.body.14
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$-5, (%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$1, (%rax)
	movl	-80(%rbp), %edx
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	%edx, (%rax)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#12:                                # %do.end
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$0, (%rax)
	movl	-76(%rbp), %edx
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	%edx, (%rax)
# BB#13:                                # %do.end.19
	cmpl	$0, -76(%rbp)
	je	.LBB116_55
# BB#14:                                # %if.then.22
	movq	-64(%rbp), %rdi
	callq	composition_registered_p
	testb	$1, %al
	jne	.LBB116_15
	jmp	.LBB116_16
.LBB116_15:                             # %cond.true.25
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
	jmp	.LBB116_17
.LBB116_16:                             # %cond.false.34
	movq	-64(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -152(%rbp)        # 8-byte Spill
.LBB116_17:                             # %cond.end.40
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rdi
	callq	VECTORP
	testb	$1, %al
	jne	.LBB116_18
	jmp	.LBB116_23
.LBB116_18:                             # %if.then.43
	movq	-88(%rbp), %rdi
	callq	ASIZE
	movq	%rax, -104(%rbp)
	movq	$0, -96(%rbp)
.LBB116_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jge	.LBB116_22
# BB#20:                                # %for.body
                                        #   in Loop: Header=BB116_19 Depth=1
	movq	-88(%rbp), %rdi
	movq	-96(%rbp), %rsi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	movq	%rax, %rsi
	addq	$4, %rsi
	movq	%rsi, -32(%rbp)
	movl	%ecx, (%rax)
# BB#21:                                # %for.inc
                                        #   in Loop: Header=BB116_19 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB116_19
.LBB116_22:                             # %for.end
	jmp	.LBB116_54
.LBB116_23:                             # %if.else.51
	movq	-88(%rbp), %rdi
	callq	STRINGP
	testb	$1, %al
	jne	.LBB116_24
	jmp	.LBB116_42
.LBB116_24:                             # %if.then.53
	movq	-88(%rbp), %rdi
	callq	SCHARS
	movq	%rax, -104(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -96(%rbp)
.LBB116_25:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-96(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jge	.LBB116_41
# BB#26:                                # %while.body
                                        #   in Loop: Header=BB116_25 Depth=1
	jmp	.LBB116_27
.LBB116_27:                             # %do.body.57
                                        #   in Loop: Header=BB116_25 Depth=1
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rdi
	callq	STRING_MULTIBYTE
	testb	$1, %al
	jne	.LBB116_28
	jmp	.LBB116_38
.LBB116_28:                             # %if.then.60
                                        #   in Loop: Header=BB116_25 Depth=1
	movq	-112(%rbp), %rax
	movq	-88(%rbp), %rdi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	callq	SDATA
	movq	-160(%rbp), %rdi        # 8-byte Reload
	addq	%rdi, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$128, %ecx
	cmpl	$0, %ecx
	jne	.LBB116_30
# BB#29:                                # %cond.true.64
                                        #   in Loop: Header=BB116_25 Depth=1
	movl	$1, -124(%rbp)
	movq	-120(%rbp), %rax
	movzbl	(%rax), %ecx
	movl	%ecx, -164(%rbp)        # 4-byte Spill
	jmp	.LBB116_37
.LBB116_30:                             # %cond.false.67
                                        #   in Loop: Header=BB116_25 Depth=1
	movq	-120(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$32, %ecx
	cmpl	$0, %ecx
	jne	.LBB116_32
# BB#31:                                # %cond.true.72
                                        #   in Loop: Header=BB116_25 Depth=1
	xorl	%eax, %eax
	movl	$4194176, %ecx          # imm = 0x3FFF80
	movl	$2, -124(%rbp)
	movq	-120(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$31, %esi
	shll	$6, %esi
	movq	-120(%rbp), %rdx
	movzbl	1(%rdx), %edi
	andl	$63, %edi
	orl	%edi, %esi
	movq	-120(%rbp), %rdx
	movzbl	(%rdx), %edi
	cmpl	$194, %edi
	cmovll	%ecx, %eax
	addl	%eax, %esi
	movl	%esi, -168(%rbp)        # 4-byte Spill
	jmp	.LBB116_36
.LBB116_32:                             # %cond.false.84
                                        #   in Loop: Header=BB116_25 Depth=1
	movq	-120(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	.LBB116_34
# BB#33:                                # %cond.true.89
                                        #   in Loop: Header=BB116_25 Depth=1
	movl	$3, -124(%rbp)
	movq	-120(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$15, %ecx
	shll	$12, %ecx
	movq	-120(%rbp), %rax
	movzbl	1(%rax), %edx
	andl	$63, %edx
	shll	$6, %edx
	orl	%edx, %ecx
	movq	-120(%rbp), %rax
	movzbl	2(%rax), %edx
	andl	$63, %edx
	orl	%edx, %ecx
	movl	%ecx, -172(%rbp)        # 4-byte Spill
	jmp	.LBB116_35
.LBB116_34:                             # %cond.false.103
                                        #   in Loop: Header=BB116_25 Depth=1
	xorl	%eax, %eax
	movl	%eax, %esi
	leaq	-124(%rbp), %rdx
	movq	-120(%rbp), %rdi
	callq	string_char
	movl	%eax, -172(%rbp)        # 4-byte Spill
.LBB116_35:                             # %cond.end.105
                                        #   in Loop: Header=BB116_25 Depth=1
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, -168(%rbp)        # 4-byte Spill
.LBB116_36:                             # %cond.end.107
                                        #   in Loop: Header=BB116_25 Depth=1
	movl	-168(%rbp), %eax        # 4-byte Reload
	movl	%eax, -164(%rbp)        # 4-byte Spill
.LBB116_37:                             # %cond.end.109
                                        #   in Loop: Header=BB116_25 Depth=1
	movl	-164(%rbp), %eax        # 4-byte Reload
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movslq	-124(%rbp), %rcx
	addq	-112(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	jmp	.LBB116_39
.LBB116_38:                             # %if.else.113
                                        #   in Loop: Header=BB116_25 Depth=1
	movq	-88(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	SREF
	movzbl	%al, %ecx
	movq	-32(%rbp), %rsi
	movl	%ecx, (%rsi)
	movq	-112(%rbp), %rsi
	addq	$1, %rsi
	movq	%rsi, -112(%rbp)
.LBB116_39:                             # %if.end
                                        #   in Loop: Header=BB116_25 Depth=1
	jmp	.LBB116_40
.LBB116_40:                             # %do.end.117
                                        #   in Loop: Header=BB116_25 Depth=1
	movq	-32(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB116_25
.LBB116_41:                             # %while.end
	jmp	.LBB116_53
.LBB116_42:                             # %if.else.119
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	andl	$-5, %ecx
	cmpl	$2, %ecx
	jne	.LBB116_44
# BB#43:                                # %if.then.125
	movq	$1, -104(%rbp)
	movq	-88(%rbp), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -32(%rbp)
	movl	%ecx, (%rax)
	jmp	.LBB116_52
.LBB116_44:                             # %if.else.129
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB116_50
# BB#45:                                # %if.then.134
	movq	$0, -104(%rbp)
.LBB116_46:                             # %for.cond.135
                                        # =>This Inner Loop Header: Depth=1
	movq	-88(%rbp), %rax
	andq	$7, %rax
	movl	%eax, %ecx
	cmpl	$3, %ecx
	jne	.LBB116_49
# BB#47:                                # %for.body.140
                                        #   in Loop: Header=BB116_46 Depth=1
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	(%rax), %rax
	sarq	$2, %rax
	movl	%eax, %ecx
	movq	-32(%rbp), %rax
	movq	%rax, %rdx
	addq	$4, %rdx
	movq	%rdx, -32(%rbp)
	movl	%ecx, (%rax)
# BB#48:                                # %for.inc.146
                                        #   in Loop: Header=BB116_46 Depth=1
	movq	-104(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -104(%rbp)
	movq	-88(%rbp), %rax
	subq	$3, %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	jmp	.LBB116_46
.LBB116_49:                             # %for.end.151
	jmp	.LBB116_51
.LBB116_50:                             # %if.else.152
	callq	emacs_abort
.LBB116_51:                             # %if.end.153
	jmp	.LBB116_52
.LBB116_52:                             # %if.end.154
	jmp	.LBB116_53
.LBB116_53:                             # %if.end.155
	jmp	.LBB116_54
.LBB116_54:                             # %if.end.156
	movq	-104(%rbp), %rax
	movq	-72(%rbp), %rcx
	movslq	(%rcx), %rdx
	subq	%rax, %rdx
	movl	%edx, %esi
	movl	%esi, (%rcx)
.LBB116_55:                             # %if.end.160
	jmp	.LBB116_56
.LBB116_56:                             # %if.end.161
	leaq	-48(%rbp), %rdx
	leaq	-56(%rbp), %rcx
	leaq	-64(%rbp), %r8
	movq	-56(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	448(%rax), %r9
	callq	find_composition
	testb	$1, %al
	jne	.LBB116_57
	jmp	.LBB116_59
.LBB116_57:                             # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jg	.LBB116_59
# BB#58:                                # %if.then.167
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	.LBB116_60
.LBB116_59:                             # %if.else.168
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB116_60:                             # %if.end.169
	jmp	.LBB116_61
.LBB116_61:                             # %if.end.170
	jmp	.LBB116_62
.LBB116_62:                             # %if.end.171
	movq	-32(%rbp), %rax
	addq	$176, %rsp
	popq	%rbp
	retq
.Lfunc_end116:
	.size	handle_composition_annotation, .Lfunc_end116-handle_composition_annotation
	.cfi_endproc

	.align	16, 0x90
	.type	handle_charset_annotation,@function
handle_charset_annotation:              # @handle_charset_annotation
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp352:
	.cfi_def_cfa_offset 16
.Ltmp353:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp354:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$261, %eax              # imm = 0x105
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movl	%eax, %edi
	movq	%rcx, -72(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx
	movq	448(%rcx), %rdx
	movq	-72(%rbp), %rdi         # 8-byte Reload
	movq	%rax, %rsi
	callq	Fget_text_property
	xorl	%edi, %edi
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -80(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-80(%rbp), %rcx         # 8-byte Reload
	cmpq	%rax, %rcx
	je	.LBB117_3
# BB#1:                                 # %land.lhs.true
	movq	Vcharset_hash_table, %rdi
	callq	XHASH_TABLE
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-48(%rbp), %rsi
	movq	%rax, %rdi
	callq	hash_lookup
	cmpq	$0, %rax
	jl	.LBB117_3
# BB#2:                                 # %if.then
	xorl	%edi, %edi
	movq	-48(%rbp), %rax
	movq	Vcharset_hash_table, %rsi
	movq	%rsi, -88(%rbp)         # 8-byte Spill
	movq	%rax, -96(%rbp)         # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-88(%rbp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	callq	Fgethash
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	callq	AREF
	sarq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	jmp	.LBB117_4
.LBB117_3:                              # %if.else
	movl	$-1, -60(%rbp)
.LBB117_4:                              # %if.end
	jmp	.LBB117_5
.LBB117_5:                              # %do.body
	jmp	.LBB117_6
.LBB117_6:                              # %do.body.9
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$-4, (%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$3, (%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -32(%rbp)
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	andl	$-8388609, %edx         # imm = 0xFFFFFFFFFF7FFFFF
	orl	$8388608, %edx          # imm = 0x800000
	movl	%edx, 8(%rax)
# BB#7:                                 # %do.end
	movl	-60(%rbp), %eax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -32(%rbp)
	movl	%eax, (%rcx)
# BB#8:                                 # %do.end.13
	movl	$261, %edi              # imm = 0x105
	movq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	$2, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	callq	builtin_lisp_symbol
	movq	-24(%rbp), %rcx
	movq	448(%rcx), %rdx
	movq	-16(%rbp), %rcx
	shlq	$2, %rcx
	addq	$2, %rcx
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	callq	Fnext_single_property_change
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	sarq	$2, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	addq	$112, %rsp
	popq	%rbp
	retq
.Lfunc_end117:
	.size	handle_charset_annotation, .Lfunc_end117-handle_charset_annotation
	.cfi_endproc

	.type	Vcoding_system_hash_table,@object # @Vcoding_system_hash_table
	.comm	Vcoding_system_hash_table,8,8
	.type	system_eol_type,@object # @system_eol_type
	.local	system_eol_type
	.comm	system_eol_type,8,8
	.type	coding_priorities,@object # @coding_priorities
	.local	coding_priorities
	.comm	coding_priorities,84,16
	.type	coding_categories,@object # @coding_categories
	.local	coding_categories
	.comm	coding_categories,12936,16
	.type	Vsjis_coding_system,@object # @Vsjis_coding_system
	.local	Vsjis_coding_system
	.comm	Vsjis_coding_system,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Invalid code: %ld"
	.size	.L.str, 18

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"Can't encode by shift_jis encoding: %c"
	.size	.L.str.1, 39

	.type	Vbig5_coding_system,@object # @Vbig5_coding_system
	.local	Vbig5_coding_system
	.comm	Vbig5_coding_system,8,8
	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Can't encode by Big5 encoding: %c"
	.size	.L.str.2, 34

	.type	safe_terminal_coding,@object # @safe_terminal_coding
	.comm	safe_terminal_coding,616,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Too few arguments"
	.size	.L.str.3, 18

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Invalid first argument"
	.size	.L.str.4, 23

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"Too few arguments for operation `%s'"
	.size	.L.str.5, 37

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Invalid argument %ld of operation `%s'"
	.size	.L.str.6, 39

	.type	Vcoding_category_table,@object # @Vcoding_category_table
	.local	Vcoding_category_table
	.comm	Vcoding_category_table,8,8
	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Invalid charset-list"
	.size	.L.str.7, 21

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"Can't handle charset `%s'"
	.size	.L.str.8, 26

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"Invalid endian: %s"
	.size	.L.str.9, 19

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"Invalid graphic register number: %ld"
	.size	.L.str.10, 37

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"There should be three or four charsets"
	.size	.L.str.11, 39

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"Dimension of charset %s is not one"
	.size	.L.str.12, 35

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"Dimension of charset %s is not two"
	.size	.L.str.13, 35

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"There should be just two charsets"
	.size	.L.str.14, 34

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"Invalid coding system type: %s"
	.size	.L.str.15, 31

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"Invalid eol-type"
	.size	.L.str.16, 17

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"define-coding-system-internal"
	.size	.L.str.17, 30

	.type	iso_code_class,@object  # @iso_code_class
	.local	iso_code_class
	.comm	iso_code_class,1024,16
	.type	emacs_mule_bytes,@object # @emacs_mule_bytes
	.comm	emacs_mule_bytes,256,16
	.type	Vcode_conversion_reused_workbuf,@object # @Vcode_conversion_reused_workbuf
	.local	Vcode_conversion_reused_workbuf
	.comm	Vcode_conversion_reused_workbuf,8,8
	.type	Vcode_conversion_workbuf_name,@object # @Vcode_conversion_workbuf_name
	.local	Vcode_conversion_workbuf_name
	.comm	Vcode_conversion_workbuf_name,8,8
	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	" *code-conversion-work*"
	.size	.L.str.18, 24

	.type	reused_workbuf_in_use,@object # @reused_workbuf_in_use
	.local	reused_workbuf_in_use
	.comm	reused_workbuf_in_use,1,1
	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"Invalid coding system"
	.size	.L.str.19, 22

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"coding-category-iso-7"
	.size	.L.str.20, 22

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"coding-category-iso-7-tight"
	.size	.L.str.21, 28

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"coding-category-iso-8-1"
	.size	.L.str.22, 24

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"coding-category-iso-8-2"
	.size	.L.str.23, 24

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"coding-category-iso-7-else"
	.size	.L.str.24, 27

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"coding-category-iso-8-else"
	.size	.L.str.25, 27

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"coding-category-utf-8-auto"
	.size	.L.str.26, 27

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"coding-category-utf-8"
	.size	.L.str.27, 22

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"coding-category-utf-8-sig"
	.size	.L.str.28, 26

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"coding-category-utf-16-be"
	.size	.L.str.29, 26

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"coding-category-utf-16-auto"
	.size	.L.str.30, 28

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"coding-category-utf-16-le"
	.size	.L.str.31, 26

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"coding-category-utf-16-be-nosig"
	.size	.L.str.32, 32

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	"coding-category-utf-16-le-nosig"
	.size	.L.str.33, 32

	.type	.L.str.34,@object       # @.str.34
.L.str.34:
	.asciz	"coding-category-charset"
	.size	.L.str.34, 24

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	"coding-category-sjis"
	.size	.L.str.35, 21

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"coding-category-big5"
	.size	.L.str.36, 21

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"coding-category-ccl"
	.size	.L.str.37, 20

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"coding-category-emacs-mule"
	.size	.L.str.38, 27

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"coding-category-raw-text"
	.size	.L.str.39, 25

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"coding-category-undecided"
	.size	.L.str.40, 26

	.type	syms_of_coding.o_fwd,@object # @syms_of_coding.o_fwd
	.local	syms_of_coding.o_fwd
	.comm	syms_of_coding.o_fwd,16,8
	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"coding-system-list"
	.size	.L.str.41, 19

	.type	syms_of_coding.o_fwd.42,@object # @syms_of_coding.o_fwd.42
	.local	syms_of_coding.o_fwd.42
	.comm	syms_of_coding.o_fwd.42,16,8
	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"coding-system-alist"
	.size	.L.str.43, 20

	.type	syms_of_coding.o_fwd.44,@object # @syms_of_coding.o_fwd.44
	.local	syms_of_coding.o_fwd.44
	.comm	syms_of_coding.o_fwd.44,16,8
	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"coding-category-list"
	.size	.L.str.45, 21

	.type	syms_of_coding.o_fwd.46,@object # @syms_of_coding.o_fwd.46
	.local	syms_of_coding.o_fwd.46
	.comm	syms_of_coding.o_fwd.46,16,8
	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"coding-system-for-read"
	.size	.L.str.47, 23

	.type	syms_of_coding.o_fwd.48,@object # @syms_of_coding.o_fwd.48
	.local	syms_of_coding.o_fwd.48
	.comm	syms_of_coding.o_fwd.48,16,8
	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"coding-system-for-write"
	.size	.L.str.49, 24

	.type	syms_of_coding.o_fwd.50,@object # @syms_of_coding.o_fwd.50
	.local	syms_of_coding.o_fwd.50
	.comm	syms_of_coding.o_fwd.50,16,8
	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"last-coding-system-used"
	.size	.L.str.51, 24

	.type	syms_of_coding.o_fwd.52,@object # @syms_of_coding.o_fwd.52
	.local	syms_of_coding.o_fwd.52
	.comm	syms_of_coding.o_fwd.52,16,8
	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"last-code-conversion-error"
	.size	.L.str.53, 27

	.type	syms_of_coding.b_fwd,@object # @syms_of_coding.b_fwd
	.local	syms_of_coding.b_fwd
	.comm	syms_of_coding.b_fwd,16,8
	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"inhibit-eol-conversion"
	.size	.L.str.54, 23

	.type	syms_of_coding.b_fwd.55,@object # @syms_of_coding.b_fwd.55
	.local	syms_of_coding.b_fwd.55
	.comm	syms_of_coding.b_fwd.55,16,8
	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"inherit-process-coding-system"
	.size	.L.str.56, 30

	.type	syms_of_coding.o_fwd.57,@object # @syms_of_coding.o_fwd.57
	.local	syms_of_coding.o_fwd.57
	.comm	syms_of_coding.o_fwd.57,16,8
	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"file-coding-system-alist"
	.size	.L.str.58, 25

	.type	syms_of_coding.o_fwd.59,@object # @syms_of_coding.o_fwd.59
	.local	syms_of_coding.o_fwd.59
	.comm	syms_of_coding.o_fwd.59,16,8
	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"process-coding-system-alist"
	.size	.L.str.60, 28

	.type	syms_of_coding.o_fwd.61,@object # @syms_of_coding.o_fwd.61
	.local	syms_of_coding.o_fwd.61
	.comm	syms_of_coding.o_fwd.61,16,8
	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"network-coding-system-alist"
	.size	.L.str.62, 28

	.type	syms_of_coding.o_fwd.63,@object # @syms_of_coding.o_fwd.63
	.local	syms_of_coding.o_fwd.63
	.comm	syms_of_coding.o_fwd.63,16,8
	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"locale-coding-system"
	.size	.L.str.64, 21

	.type	syms_of_coding.o_fwd.65,@object # @syms_of_coding.o_fwd.65
	.local	syms_of_coding.o_fwd.65
	.comm	syms_of_coding.o_fwd.65,16,8
	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"eol-mnemonic-unix"
	.size	.L.str.66, 18

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	":"
	.size	.L.str.67, 2

	.type	syms_of_coding.o_fwd.68,@object # @syms_of_coding.o_fwd.68
	.local	syms_of_coding.o_fwd.68
	.comm	syms_of_coding.o_fwd.68,16,8
	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"eol-mnemonic-dos"
	.size	.L.str.69, 17

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"\\"
	.size	.L.str.70, 2

	.type	syms_of_coding.o_fwd.71,@object # @syms_of_coding.o_fwd.71
	.local	syms_of_coding.o_fwd.71
	.comm	syms_of_coding.o_fwd.71,16,8
	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	"eol-mnemonic-mac"
	.size	.L.str.72, 17

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"/"
	.size	.L.str.73, 2

	.type	syms_of_coding.o_fwd.74,@object # @syms_of_coding.o_fwd.74
	.local	syms_of_coding.o_fwd.74
	.comm	syms_of_coding.o_fwd.74,16,8
	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"eol-mnemonic-undecided"
	.size	.L.str.75, 23

	.type	syms_of_coding.o_fwd.76,@object # @syms_of_coding.o_fwd.76
	.local	syms_of_coding.o_fwd.76
	.comm	syms_of_coding.o_fwd.76,16,8
	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"enable-character-translation"
	.size	.L.str.77, 29

	.type	syms_of_coding.o_fwd.78,@object # @syms_of_coding.o_fwd.78
	.local	syms_of_coding.o_fwd.78
	.comm	syms_of_coding.o_fwd.78,16,8
	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"standard-translation-table-for-decode"
	.size	.L.str.79, 38

	.type	syms_of_coding.o_fwd.80,@object # @syms_of_coding.o_fwd.80
	.local	syms_of_coding.o_fwd.80
	.comm	syms_of_coding.o_fwd.80,16,8
	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"standard-translation-table-for-encode"
	.size	.L.str.81, 38

	.type	syms_of_coding.o_fwd.82,@object # @syms_of_coding.o_fwd.82
	.local	syms_of_coding.o_fwd.82
	.comm	syms_of_coding.o_fwd.82,16,8
	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"charset-revision-table"
	.size	.L.str.83, 23

	.type	syms_of_coding.o_fwd.84,@object # @syms_of_coding.o_fwd.84
	.local	syms_of_coding.o_fwd.84
	.comm	syms_of_coding.o_fwd.84,16,8
	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"default-process-coding-system"
	.size	.L.str.85, 30

	.type	syms_of_coding.o_fwd.86,@object # @syms_of_coding.o_fwd.86
	.local	syms_of_coding.o_fwd.86
	.comm	syms_of_coding.o_fwd.86,16,8
	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"latin-extra-code-table"
	.size	.L.str.87, 23

	.type	syms_of_coding.o_fwd.88,@object # @syms_of_coding.o_fwd.88
	.local	syms_of_coding.o_fwd.88
	.comm	syms_of_coding.o_fwd.88,16,8
	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"select-safe-coding-system-function"
	.size	.L.str.89, 35

	.type	syms_of_coding.b_fwd.90,@object # @syms_of_coding.b_fwd.90
	.local	syms_of_coding.b_fwd.90
	.comm	syms_of_coding.b_fwd.90,16,8
	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"coding-system-require-warning"
	.size	.L.str.91, 30

	.type	syms_of_coding.b_fwd.92,@object # @syms_of_coding.b_fwd.92
	.local	syms_of_coding.b_fwd.92
	.comm	syms_of_coding.b_fwd.92,16,8
	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"inhibit-iso-escape-detection"
	.size	.L.str.93, 29

	.type	syms_of_coding.b_fwd.94,@object # @syms_of_coding.b_fwd.94
	.local	syms_of_coding.b_fwd.94
	.comm	syms_of_coding.b_fwd.94,16,8
	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"inhibit-null-byte-detection"
	.size	.L.str.95, 28

	.type	syms_of_coding.b_fwd.96,@object # @syms_of_coding.b_fwd.96
	.local	syms_of_coding.b_fwd.96
	.comm	syms_of_coding.b_fwd.96,16,8
	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"disable-ascii-optimization"
	.size	.L.str.97, 27

	.type	syms_of_coding.o_fwd.98,@object # @syms_of_coding.o_fwd.98
	.local	syms_of_coding.o_fwd.98
	.comm	syms_of_coding.o_fwd.98,16,8
	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"translation-table-for-input"
	.size	.L.str.99, 28

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	":coding-type"
	.size	.L.str.100, 13

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	":for-unibyte"
	.size	.L.str.101, 13

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	":docstring"
	.size	.L.str.102, 11

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"Do no conversion.\n\nWhen you visit a file with this coding, the file is read into a\nunibyte buffer as is, thus each byte of a file is treated as a\ncharacter."
	.size	.L.str.103, 157

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	":eol-type"
	.size	.L.str.104, 10

	.type	.L.str.105,@object      # @.str.105
.L.str.105:
	.asciz	":charset-list"
	.size	.L.str.105, 14

	.type	.L.str.106,@object      # @.str.106
.L.str.106:
	.asciz	"No conversion on encoding, automatic conversion on decoding."
	.size	.L.str.106, 61

	.type	.L.str.107,@object      # @.str.107
.L.str.107:
	.asciz	"Unknown error"
	.size	.L.str.107, 14

	.type	.L.str.108,@object      # @.str.108
.L.str.108:
	.asciz	"()*+"
	.size	.L.str.108, 5

	.type	.L.str.109,@object      # @.str.109
.L.str.109:
	.asciz	",-./"
	.size	.L.str.109, 5

	.type	.L.str.110,@object      # @.str.110
.L.str.110:
	.asciz	"iso-8859-"
	.size	.L.str.110, 10

	.type	.L.str.111,@object      # @.str.111
.L.str.111:
	.asciz	"iso-latin-"
	.size	.L.str.111, 11

	.type	suffixes,@object        # @suffixes
	.section	.rodata,"a",@progbits
	.align	16
suffixes:
	.quad	.L.str.112
	.quad	.L.str.113
	.quad	.L.str.114
	.size	suffixes, 24

	.type	.L.str.112,@object      # @.str.112
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.112:
	.asciz	"-unix"
	.size	.L.str.112, 6

	.type	.L.str.113,@object      # @.str.113
.L.str.113:
	.asciz	"-dos"
	.size	.L.str.113, 5

	.type	.L.str.114,@object      # @.str.114
.L.str.114:
	.asciz	"-mac"
	.size	.L.str.114, 5

	.type	.L.str.115,@object      # @.str.115
.L.str.115:
	.asciz	"coding-system-p"
	.size	.L.str.115, 16

	.type	Scoding_system_p,@object # @Scoding_system_p
	.data
	.align	8
Scoding_system_p:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_p
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.115
	.quad	0
	.quad	0
	.size	Scoding_system_p, 48

	.type	.L.str.116,@object      # @.str.116
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.116:
	.asciz	"read-coding-system"
	.size	.L.str.116, 19

	.type	Sread_coding_system,@object # @Sread_coding_system
	.data
	.align	8
Sread_coding_system:
	.quad	167772160               # 0xa000000
	.quad	Fread_coding_system
	.short	1                       # 0x1
	.short	2                       # 0x2
	.zero	4
	.quad	.L.str.116
	.quad	0
	.quad	0
	.size	Sread_coding_system, 48

	.type	.L.str.117,@object      # @.str.117
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.117:
	.asciz	"read-non-nil-coding-system"
	.size	.L.str.117, 27

	.type	Sread_non_nil_coding_system,@object # @Sread_non_nil_coding_system
	.data
	.align	8
Sread_non_nil_coding_system:
	.quad	167772160               # 0xa000000
	.quad	Fread_non_nil_coding_system
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.117
	.quad	0
	.quad	0
	.size	Sread_non_nil_coding_system, 48

	.type	.L.str.118,@object      # @.str.118
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.118:
	.asciz	"check-coding-system"
	.size	.L.str.118, 20

	.type	Scheck_coding_system,@object # @Scheck_coding_system
	.data
	.align	8
Scheck_coding_system:
	.quad	167772160               # 0xa000000
	.quad	Fcheck_coding_system
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.118
	.quad	0
	.quad	0
	.size	Scheck_coding_system, 48

	.type	.L.str.119,@object      # @.str.119
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.119:
	.asciz	"detect-coding-region"
	.size	.L.str.119, 21

	.type	Sdetect_coding_region,@object # @Sdetect_coding_region
	.data
	.align	8
Sdetect_coding_region:
	.quad	167772160               # 0xa000000
	.quad	Fdetect_coding_region
	.short	2                       # 0x2
	.short	3                       # 0x3
	.zero	4
	.quad	.L.str.119
	.quad	0
	.quad	0
	.size	Sdetect_coding_region, 48

	.type	.L.str.120,@object      # @.str.120
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.120:
	.asciz	"detect-coding-string"
	.size	.L.str.120, 21

	.type	Sdetect_coding_string,@object # @Sdetect_coding_string
	.data
	.align	8
Sdetect_coding_string:
	.quad	167772160               # 0xa000000
	.quad	Fdetect_coding_string
	.short	1                       # 0x1
	.short	2                       # 0x2
	.zero	4
	.quad	.L.str.120
	.quad	0
	.quad	0
	.size	Sdetect_coding_string, 48

	.type	.L.str.121,@object      # @.str.121
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.121:
	.asciz	"find-coding-systems-region-internal"
	.size	.L.str.121, 36

	.type	Sfind_coding_systems_region_internal,@object # @Sfind_coding_systems_region_internal
	.data
	.align	8
Sfind_coding_systems_region_internal:
	.quad	167772160               # 0xa000000
	.quad	Ffind_coding_systems_region_internal
	.short	2                       # 0x2
	.short	3                       # 0x3
	.zero	4
	.quad	.L.str.121
	.quad	0
	.quad	0
	.size	Sfind_coding_systems_region_internal, 48

	.type	.L.str.122,@object      # @.str.122
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.122:
	.asciz	"unencodable-char-position"
	.size	.L.str.122, 26

	.type	Sunencodable_char_position,@object # @Sunencodable_char_position
	.data
	.align	8
Sunencodable_char_position:
	.quad	167772160               # 0xa000000
	.quad	Funencodable_char_position
	.short	3                       # 0x3
	.short	5                       # 0x5
	.zero	4
	.quad	.L.str.122
	.quad	0
	.quad	0
	.size	Sunencodable_char_position, 48

	.type	.L.str.123,@object      # @.str.123
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.123:
	.asciz	"check-coding-systems-region"
	.size	.L.str.123, 28

	.type	Scheck_coding_systems_region,@object # @Scheck_coding_systems_region
	.data
	.align	8
Scheck_coding_systems_region:
	.quad	167772160               # 0xa000000
	.quad	Fcheck_coding_systems_region
	.short	3                       # 0x3
	.short	3                       # 0x3
	.zero	4
	.quad	.L.str.123
	.quad	0
	.quad	0
	.size	Scheck_coding_systems_region, 48

	.type	.L.str.124,@object      # @.str.124
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.124:
	.asciz	"decode-coding-region"
	.size	.L.str.124, 21

	.type	.L.str.125,@object      # @.str.125
.L.str.125:
	.asciz	"r\nzCoding system: "
	.size	.L.str.125, 19

	.type	Sdecode_coding_region,@object # @Sdecode_coding_region
	.data
	.align	8
Sdecode_coding_region:
	.quad	167772160               # 0xa000000
	.quad	Fdecode_coding_region
	.short	3                       # 0x3
	.short	4                       # 0x4
	.zero	4
	.quad	.L.str.124
	.quad	.L.str.125
	.quad	0
	.size	Sdecode_coding_region, 48

	.type	.L.str.126,@object      # @.str.126
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.126:
	.asciz	"encode-coding-region"
	.size	.L.str.126, 21

	.type	Sencode_coding_region,@object # @Sencode_coding_region
	.data
	.align	8
Sencode_coding_region:
	.quad	167772160               # 0xa000000
	.quad	Fencode_coding_region
	.short	3                       # 0x3
	.short	4                       # 0x4
	.zero	4
	.quad	.L.str.126
	.quad	.L.str.125
	.quad	0
	.size	Sencode_coding_region, 48

	.type	.L.str.127,@object      # @.str.127
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.127:
	.asciz	"decode-coding-string"
	.size	.L.str.127, 21

	.type	Sdecode_coding_string,@object # @Sdecode_coding_string
	.data
	.align	8
Sdecode_coding_string:
	.quad	167772160               # 0xa000000
	.quad	Fdecode_coding_string
	.short	2                       # 0x2
	.short	4                       # 0x4
	.zero	4
	.quad	.L.str.127
	.quad	0
	.quad	0
	.size	Sdecode_coding_string, 48

	.type	.L.str.128,@object      # @.str.128
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.128:
	.asciz	"encode-coding-string"
	.size	.L.str.128, 21

	.type	Sencode_coding_string,@object # @Sencode_coding_string
	.data
	.align	8
Sencode_coding_string:
	.quad	167772160               # 0xa000000
	.quad	Fencode_coding_string
	.short	2                       # 0x2
	.short	4                       # 0x4
	.zero	4
	.quad	.L.str.128
	.quad	0
	.quad	0
	.size	Sencode_coding_string, 48

	.type	.L.str.129,@object      # @.str.129
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.129:
	.asciz	"decode-sjis-char"
	.size	.L.str.129, 17

	.type	Sdecode_sjis_char,@object # @Sdecode_sjis_char
	.data
	.align	8
Sdecode_sjis_char:
	.quad	167772160               # 0xa000000
	.quad	Fdecode_sjis_char
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.129
	.quad	0
	.quad	0
	.size	Sdecode_sjis_char, 48

	.type	.L.str.130,@object      # @.str.130
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.130:
	.asciz	"encode-sjis-char"
	.size	.L.str.130, 17

	.type	Sencode_sjis_char,@object # @Sencode_sjis_char
	.data
	.align	8
Sencode_sjis_char:
	.quad	167772160               # 0xa000000
	.quad	Fencode_sjis_char
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.130
	.quad	0
	.quad	0
	.size	Sencode_sjis_char, 48

	.type	.L.str.131,@object      # @.str.131
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.131:
	.asciz	"decode-big5-char"
	.size	.L.str.131, 17

	.type	Sdecode_big5_char,@object # @Sdecode_big5_char
	.data
	.align	8
Sdecode_big5_char:
	.quad	167772160               # 0xa000000
	.quad	Fdecode_big5_char
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.131
	.quad	0
	.quad	0
	.size	Sdecode_big5_char, 48

	.type	.L.str.132,@object      # @.str.132
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.132:
	.asciz	"encode-big5-char"
	.size	.L.str.132, 17

	.type	Sencode_big5_char,@object # @Sencode_big5_char
	.data
	.align	8
Sencode_big5_char:
	.quad	167772160               # 0xa000000
	.quad	Fencode_big5_char
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.132
	.quad	0
	.quad	0
	.size	Sencode_big5_char, 48

	.type	.L.str.133,@object      # @.str.133
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.133:
	.asciz	"set-terminal-coding-system-internal"
	.size	.L.str.133, 36

	.type	Sset_terminal_coding_system_internal,@object # @Sset_terminal_coding_system_internal
	.data
	.align	8
Sset_terminal_coding_system_internal:
	.quad	167772160               # 0xa000000
	.quad	Fset_terminal_coding_system_internal
	.short	1                       # 0x1
	.short	2                       # 0x2
	.zero	4
	.quad	.L.str.133
	.quad	0
	.quad	0
	.size	Sset_terminal_coding_system_internal, 48

	.type	.L.str.134,@object      # @.str.134
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.134:
	.asciz	"set-safe-terminal-coding-system-internal"
	.size	.L.str.134, 41

	.type	Sset_safe_terminal_coding_system_internal,@object # @Sset_safe_terminal_coding_system_internal
	.data
	.align	8
Sset_safe_terminal_coding_system_internal:
	.quad	167772160               # 0xa000000
	.quad	Fset_safe_terminal_coding_system_internal
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.134
	.quad	0
	.quad	0
	.size	Sset_safe_terminal_coding_system_internal, 48

	.type	.L.str.135,@object      # @.str.135
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.135:
	.asciz	"terminal-coding-system"
	.size	.L.str.135, 23

	.type	Sterminal_coding_system,@object # @Sterminal_coding_system
	.data
	.align	8
Sterminal_coding_system:
	.quad	167772160               # 0xa000000
	.quad	Fterminal_coding_system
	.short	0                       # 0x0
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.135
	.quad	0
	.quad	0
	.size	Sterminal_coding_system, 48

	.type	.L.str.136,@object      # @.str.136
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.136:
	.asciz	"set-keyboard-coding-system-internal"
	.size	.L.str.136, 36

	.type	Sset_keyboard_coding_system_internal,@object # @Sset_keyboard_coding_system_internal
	.data
	.align	8
Sset_keyboard_coding_system_internal:
	.quad	167772160               # 0xa000000
	.quad	Fset_keyboard_coding_system_internal
	.short	1                       # 0x1
	.short	2                       # 0x2
	.zero	4
	.quad	.L.str.136
	.quad	0
	.quad	0
	.size	Sset_keyboard_coding_system_internal, 48

	.type	.L.str.137,@object      # @.str.137
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.137:
	.asciz	"keyboard-coding-system"
	.size	.L.str.137, 23

	.type	Skeyboard_coding_system,@object # @Skeyboard_coding_system
	.data
	.align	8
Skeyboard_coding_system:
	.quad	167772160               # 0xa000000
	.quad	Fkeyboard_coding_system
	.short	0                       # 0x0
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.137
	.quad	0
	.quad	0
	.size	Skeyboard_coding_system, 48

	.type	.L.str.138,@object      # @.str.138
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.138:
	.asciz	"find-operation-coding-system"
	.size	.L.str.138, 29

	.type	Sfind_operation_coding_system,@object # @Sfind_operation_coding_system
	.data
	.align	8
Sfind_operation_coding_system:
	.quad	167772160               # 0xa000000
	.quad	Ffind_operation_coding_system
	.short	1                       # 0x1
	.short	65534                   # 0xfffe
	.zero	4
	.quad	.L.str.138
	.quad	0
	.quad	0
	.size	Sfind_operation_coding_system, 48

	.type	.L.str.139,@object      # @.str.139
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.139:
	.asciz	"set-coding-system-priority"
	.size	.L.str.139, 27

	.type	Sset_coding_system_priority,@object # @Sset_coding_system_priority
	.data
	.align	8
Sset_coding_system_priority:
	.quad	167772160               # 0xa000000
	.quad	Fset_coding_system_priority
	.short	0                       # 0x0
	.short	65534                   # 0xfffe
	.zero	4
	.quad	.L.str.139
	.quad	0
	.quad	0
	.size	Sset_coding_system_priority, 48

	.type	Sdefine_coding_system_internal,@object # @Sdefine_coding_system_internal
	.align	8
Sdefine_coding_system_internal:
	.quad	167772160               # 0xa000000
	.quad	Fdefine_coding_system_internal
	.short	13                      # 0xd
	.short	65534                   # 0xfffe
	.zero	4
	.quad	.L.str.17
	.quad	0
	.quad	0
	.size	Sdefine_coding_system_internal, 48

	.type	.L.str.140,@object      # @.str.140
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.140:
	.asciz	"define-coding-system-alias"
	.size	.L.str.140, 27

	.type	Sdefine_coding_system_alias,@object # @Sdefine_coding_system_alias
	.data
	.align	8
Sdefine_coding_system_alias:
	.quad	167772160               # 0xa000000
	.quad	Fdefine_coding_system_alias
	.short	2                       # 0x2
	.short	2                       # 0x2
	.zero	4
	.quad	.L.str.140
	.quad	0
	.quad	0
	.size	Sdefine_coding_system_alias, 48

	.type	.L.str.141,@object      # @.str.141
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.141:
	.asciz	"coding-system-put"
	.size	.L.str.141, 18

	.type	Scoding_system_put,@object # @Scoding_system_put
	.data
	.align	8
Scoding_system_put:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_put
	.short	3                       # 0x3
	.short	3                       # 0x3
	.zero	4
	.quad	.L.str.141
	.quad	0
	.quad	0
	.size	Scoding_system_put, 48

	.type	.L.str.142,@object      # @.str.142
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.142:
	.asciz	"coding-system-base"
	.size	.L.str.142, 19

	.type	Scoding_system_base,@object # @Scoding_system_base
	.data
	.align	8
Scoding_system_base:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_base
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.142
	.quad	0
	.quad	0
	.size	Scoding_system_base, 48

	.type	.L.str.143,@object      # @.str.143
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.143:
	.asciz	"coding-system-plist"
	.size	.L.str.143, 20

	.type	Scoding_system_plist,@object # @Scoding_system_plist
	.data
	.align	8
Scoding_system_plist:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_plist
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.143
	.quad	0
	.quad	0
	.size	Scoding_system_plist, 48

	.type	.L.str.144,@object      # @.str.144
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.144:
	.asciz	"coding-system-aliases"
	.size	.L.str.144, 22

	.type	Scoding_system_aliases,@object # @Scoding_system_aliases
	.data
	.align	8
Scoding_system_aliases:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_aliases
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.144
	.quad	0
	.quad	0
	.size	Scoding_system_aliases, 48

	.type	.L.str.145,@object      # @.str.145
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.145:
	.asciz	"coding-system-eol-type"
	.size	.L.str.145, 23

	.type	Scoding_system_eol_type,@object # @Scoding_system_eol_type
	.data
	.align	8
Scoding_system_eol_type:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_eol_type
	.short	1                       # 0x1
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.145
	.quad	0
	.quad	0
	.size	Scoding_system_eol_type, 48

	.type	.L.str.146,@object      # @.str.146
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.146:
	.asciz	"coding-system-priority-list"
	.size	.L.str.146, 28

	.type	Scoding_system_priority_list,@object # @Scoding_system_priority_list
	.data
	.align	8
Scoding_system_priority_list:
	.quad	167772160               # 0xa000000
	.quad	Fcoding_system_priority_list
	.short	0                       # 0x0
	.short	1                       # 0x1
	.zero	4
	.quad	.L.str.146
	.quad	0
	.quad	0
	.size	Scoding_system_priority_list, 48


	.ident	"clang version 3.7.0 (tags/RELEASE_370/final)"
	.section	".note.GNU-stack","",@progbits
